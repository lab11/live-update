TranslationUnitDecl 0x559b749d8918 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x559b749d8e90 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x559b749d8bb0 '__int128'
|-TypedefDecl 0x559b749d8f00 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x559b749d8bd0 'unsigned __int128'
|-TypedefDecl 0x559b749d91d8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x559b749d8fe0 'struct __NSConstantString_tag'
|   `-Record 0x559b749d8f58 '__NSConstantString_tag'
|-TypedefDecl 0x559b749d9270 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x559b749d9230 'char *'
|   `-BuiltinType 0x559b749d89b0 'char'
|-TypedefDecl 0x559b749d9538 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x559b749d94e0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x559b749d9350 'struct __va_list_tag'
|     `-Record 0x559b749d92c8 '__va_list_tag'
|-TypedefDecl 0x559b74a239c0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:143:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x559b749d8a30 'long'
|-TypedefDecl 0x559b74a23a30 <line:209:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x559b749d8ad0 'unsigned long'
|-TypedefDecl 0x559b74a23aa0 <line:321:1, col:24> col:24 wchar_t 'int'
| `-BuiltinType 0x559b749d8a10 'int'
|-RecordDecl 0x559b74a23af8 <line:415:9, line:426:1> line:415:9 struct definition
| |-FieldDecl 0x559b74a23bf0 <line:416:3, col:13> col:13 __max_align_ll 'long long'
| | `-AlignedAttr 0x559b74a23c38 <col:43, col:77> aligned
| |   `-UnaryExprOrTypeTraitExpr 0x559b74a23bb8 <col:55, col:76> 'unsigned long' alignof 'long long'
| `-FieldDecl 0x559b74a23cd8 <line:417:3, col:15> col:15 __max_align_ld 'long double'
|   `-AlignedAttr 0x559b74a23d20 <col:45, col:81> aligned
|     `-UnaryExprOrTypeTraitExpr 0x559b74a23ca0 <col:57, col:80> 'unsigned long' alignof 'long double'
|-TypedefDecl 0x559b74a23dc0 <line:415:1, line:426:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x559b74a23d70 'struct max_align_t' sugar
|   `-RecordType 0x559b74a23b80 'max_align_t'
|     `-Record 0x559b74a23af8 ''
|-TypedefDecl 0x559b74a23e48 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdint.h:40:1, col:24> col:24 int8_t 'signed char'
| `-BuiltinType 0x559b749d89d0 'signed char'
|-TypedefDecl 0x559b74a23eb8 <line:41:1, col:25> col:25 int16_t 'short'
| `-BuiltinType 0x559b749d89f0 'short'
|-TypedefDecl 0x559b74a23f28 <line:42:1, col:25> col:25 int32_t 'int'
| `-BuiltinType 0x559b749d8a10 'int'
|-TypedefDecl 0x559b74a23f98 <line:43:1, col:25> col:25 int64_t 'long'
| `-BuiltinType 0x559b749d8a30 'long'
|-TypedefDecl 0x559b74a24008 <line:45:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x559b749d89d0 'signed char'
|-TypedefDecl 0x559b74a24078 <line:46:1, col:29> col:29 int_fast16_t 'short'
| `-BuiltinType 0x559b749d89f0 'short'
|-TypedefDecl 0x559b74a240e8 <line:47:1, col:29> col:29 int_fast32_t 'int'
| `-BuiltinType 0x559b749d8a10 'int'
|-TypedefDecl 0x559b74a24158 <line:48:1, col:29> col:29 int_fast64_t 'long'
| `-BuiltinType 0x559b749d8a30 'long'
|-TypedefDecl 0x559b74a241c8 <line:50:1, col:29> col:29 int_least8_t 'signed char'
| `-BuiltinType 0x559b749d89d0 'signed char'
|-TypedefDecl 0x559b74a24238 <line:51:1, col:30> col:30 int_least16_t 'short'
| `-BuiltinType 0x559b749d89f0 'short'
|-TypedefDecl 0x559b74a242a8 <line:52:1, col:30> col:30 int_least32_t 'int'
| `-BuiltinType 0x559b749d8a10 'int'
|-TypedefDecl 0x559b74a24318 <line:53:1, col:30> col:30 int_least64_t 'long'
| `-BuiltinType 0x559b749d8a30 'long'
|-TypedefDecl 0x559b74a24388 <line:55:1, col:25> col:25 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x559b749d8a70 'unsigned char'
|-TypedefDecl 0x559b74a243f8 <line:56:1, col:26> col:26 uint16_t 'unsigned short'
| `-BuiltinType 0x559b749d8a90 'unsigned short'
|-TypedefDecl 0x559b74a24468 <line:57:1, col:26> col:26 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x559b749d8ab0 'unsigned int'
|-TypedefDecl 0x559b74a244d8 <line:58:1, col:26> col:26 uint64_t 'unsigned long'
| `-BuiltinType 0x559b749d8ad0 'unsigned long'
|-TypedefDecl 0x559b74a24548 <line:60:1, col:29> col:29 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x559b749d8a70 'unsigned char'
|-TypedefDecl 0x559b74a245b8 <line:61:1, col:30> col:30 uint_fast16_t 'unsigned short'
| `-BuiltinType 0x559b749d8a90 'unsigned short'
|-TypedefDecl 0x559b74a24628 <line:62:1, col:30> col:30 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x559b749d8ab0 'unsigned int'
|-TypedefDecl 0x559b74a24698 <line:63:1, col:30> col:30 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x559b749d8ad0 'unsigned long'
|-TypedefDecl 0x559b74a24708 <line:65:1, col:30> col:30 uint_least8_t 'unsigned char'
| `-BuiltinType 0x559b749d8a70 'unsigned char'
|-TypedefDecl 0x559b74a24778 <line:66:1, col:31> col:31 uint_least16_t 'unsigned short'
| `-BuiltinType 0x559b749d8a90 'unsigned short'
|-TypedefDecl 0x559b74a247e8 <line:67:1, col:31> col:31 uint_least32_t 'unsigned int'
| `-BuiltinType 0x559b749d8ab0 'unsigned int'
|-TypedefDecl 0x559b74a24858 <line:68:1, col:31> col:31 uint_least64_t 'unsigned long'
| `-BuiltinType 0x559b749d8ad0 'unsigned long'
|-TypedefDecl 0x559b74a248c8 <line:70:1, col:26> col:26 intptr_t 'long'
| `-BuiltinType 0x559b749d8a30 'long'
|-TypedefDecl 0x559b74a24938 <line:71:1, col:26> col:26 referenced uintptr_t 'unsigned long'
| `-BuiltinType 0x559b749d8ad0 'unsigned long'
|-TypedefDecl 0x559b74a48860 </vagrant/ext/zephyros/zephyr/include/zephyr/types.h:16:1, col:29> col:29 referenced s8_t 'signed char'
| `-BuiltinType 0x559b749d89d0 'signed char'
|-TypedefDecl 0x559b74a488d0 <line:17:1, col:29> col:29 s16_t 'short'
| `-BuiltinType 0x559b749d89f0 'short'
|-TypedefDecl 0x559b74a48940 <line:18:1, col:29> col:29 referenced s32_t 'int'
| `-BuiltinType 0x559b749d8a10 'int'
|-TypedefDecl 0x559b74a489b0 <line:19:1, col:29> col:29 referenced s64_t 'long long'
| `-BuiltinType 0x559b749d8a50 'long long'
|-TypedefDecl 0x559b74a48a20 <line:21:1, col:29> col:29 referenced u8_t 'unsigned char'
| `-BuiltinType 0x559b749d8a70 'unsigned char'
|-TypedefDecl 0x559b74a48a90 <line:22:1, col:29> col:29 referenced u16_t 'unsigned short'
| `-BuiltinType 0x559b749d8a90 'unsigned short'
|-TypedefDecl 0x559b74a48b00 <line:23:1, col:29> col:29 referenced u32_t 'unsigned int'
| `-BuiltinType 0x559b749d8ab0 'unsigned int'
|-TypedefDecl 0x559b74a48b70 <line:24:1, col:29> col:29 referenced u64_t 'unsigned long long'
| `-BuiltinType 0x559b749d8af0 'unsigned long long'
|-TypedefDecl 0x559b74a48be0 <line:27:1, col:29> col:29 ulong_t 'unsigned long'
| `-BuiltinType 0x559b749d8ad0 'unsigned long'
|-TypedefDecl 0x559b74a48da0 </vagrant/ext/zephyros/zephyr/include/sys/atomic.h:21:1, col:13> col:13 referenced atomic_t 'int'
| `-BuiltinType 0x559b749d8a10 'int'
|-TypedefDecl 0x559b74a48e30 <line:22:1, col:18> col:18 referenced atomic_val_t 'atomic_t':'int'
| `-TypedefType 0x559b74a48e00 'atomic_t' sugar
|   |-Typedef 0x559b74a48da0 'atomic_t'
|   `-BuiltinType 0x559b749d8a10 'int'
|-FunctionDecl 0x559b74a49198 <line:56:1, line:57:31> line:56:12 atomic_cas 'int (atomic_t *, atomic_val_t, atomic_val_t)' extern
| |-ParmVarDecl 0x559b74a48f58 <col:23, col:33> col:33 target 'atomic_t *'
| |-ParmVarDecl 0x559b74a48ff0 <col:41, col:54> col:54 old_value 'atomic_val_t':'int'
| `-ParmVarDecl 0x559b74a49060 <line:57:9, col:22> col:22 new_value 'atomic_val_t':'int'
|-FunctionDecl 0x559b74a49450 <line:79:1, col:68> col:21 atomic_add 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x559b74a492c8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x559b74a49338 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x559b74a49638 <line:101:1, col:68> col:21 atomic_sub 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x559b74a49538 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x559b74a495a8 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x559b74a62060 <line:120:1, col:48> col:21 atomic_inc 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x559b74a49728 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x559b74a621d0 <line:139:1, col:48> col:21 atomic_dec 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x559b74a62148 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x559b74a623f0 <line:158:1, col:54> col:21 used atomic_get 'atomic_val_t (const atomic_t *)' extern
| `-ParmVarDecl 0x559b74a622e8 <col:32, col:48> col:48 target 'const atomic_t *'
|-FunctionDecl 0x559b74a625d8 <line:185:1, col:68> col:21 atomic_set 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x559b74a624d8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x559b74a62548 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x559b74a62750 <line:205:1, col:50> col:21 atomic_clear 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x559b74a626c8 <col:34, col:44> col:44 target 'atomic_t *'
|-FunctionDecl 0x559b74a62938 <line:229:1, col:67> col:21 used atomic_or 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x559b74a62838 <col:31, col:41> col:41 target 'atomic_t *'
| `-ParmVarDecl 0x559b74a628a8 <col:49, col:62> col:62 value 'atomic_val_t':'int'
|-FunctionDecl 0x559b74a62b28 <line:252:1, col:68> col:21 atomic_xor 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x559b74a62a28 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x559b74a62a98 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x559b74a62d18 <line:275:1, col:68> col:21 used atomic_and 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x559b74a62c18 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x559b74a62c88 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x559b74a62f08 <line:298:1, col:69> col:21 atomic_nand 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x559b74a62e08 <col:33, col:43> col:43 target 'atomic_t *'
| `-ParmVarDecl 0x559b74a62e78 <col:51, col:64> col:64 value 'atomic_val_t':'int'
|-FunctionDecl 0x559b74a6bdd0 <line:351:1, line:356:1> line:351:20 used atomic_test_bit 'bool (const atomic_t *, int)' static inline
| |-ParmVarDecl 0x559b74a6bc48 <col:36, col:52> col:52 used target 'const atomic_t *'
| |-ParmVarDecl 0x559b74a6bcc0 <col:60, col:64> col:64 used bit 'int'
| |-CompoundStmt 0x559b74a6c548 <line:352:1, line:356:1>
| | |-DeclStmt 0x559b74a6c1d0 <line:353:2, col:57>
| | | `-VarDecl 0x559b74a6be90 <col:2, col:56> col:15 used val 'atomic_val_t':'int' cinit
| | |   `-CallExpr 0x559b74a6c1a0 <col:21, col:56> 'atomic_val_t':'int'
| | |     |-ImplicitCastExpr 0x559b74a6c188 <col:21> 'atomic_val_t (*)(const atomic_t *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x559b74a6bef0 <col:21> 'atomic_val_t (const atomic_t *)' Function 0x559b74a623f0 'atomic_get' 'atomic_val_t (const atomic_t *)'
| | |     `-ParenExpr 0x559b74a6c110 <line:318:32, col:63> 'const atomic_t *'
| | |       `-BinaryOperator 0x559b74a6c0e8 <col:33, col:62> 'const atomic_t *' '+'
| | |         |-ImplicitCastExpr 0x559b74a6c0d0 <col:33, col:38> 'const atomic_t *' <LValueToRValue>
| | |         | `-ParenExpr 0x559b74a6bf40 <col:33, col:38> 'const atomic_t *' lvalue
| | |         |   `-DeclRefExpr 0x559b74a6bf18 <line:353:44> 'const atomic_t *' lvalue ParmVar 0x559b74a6bc48 'target' 'const atomic_t *'
| | |         `-ParenExpr 0x559b74a6c0b0 <line:318:42, col:62> 'unsigned long'
| | |           `-BinaryOperator 0x559b74a6c088 <col:43, line:316:46> 'unsigned long' '/'
| | |             |-ImplicitCastExpr 0x559b74a6c070 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |             | `-ImplicitCastExpr 0x559b74a6c058 <col:43, col:47> 'int' <LValueToRValue>
| | |             |   `-ParenExpr 0x559b74a6bf88 <col:43, col:47> 'int' lvalue
| | |             |     `-DeclRefExpr 0x559b74a6bf60 <line:353:52> 'int' lvalue ParmVar 0x559b74a6bcc0 'bit' 'int'
| | |             `-ParenExpr 0x559b74a6c038 <line:316:21, col:46> 'unsigned long'
| | |               `-BinaryOperator 0x559b74a6c010 <col:22, col:45> 'unsigned long' '*'
| | |                 |-UnaryExprOrTypeTraitExpr 0x559b74a6bfb8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |                 `-ImplicitCastExpr 0x559b74a6bff8 <col:45> 'unsigned long' <IntegralCast>
| | |                   `-IntegerLiteral 0x559b74a6bfd8 <col:45> 'int' 8
| | `-ReturnStmt 0x559b74a6c508 <line:355:2, col:53>
| |   `-ImplicitCastExpr 0x559b74a6c4f0 <col:9, col:53> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x559b74a6c4c8 <col:9, col:53> 'int' '!='
| |       |-ParenExpr 0x559b74a6c488 <col:9, col:48> 'int'
| |       | `-BinaryOperator 0x559b74a6c460 <col:10, col:47> 'int' '&'
| |       |   |-IntegerLiteral 0x559b74a6c1e8 <col:10> 'int' 1
| |       |   `-ParenExpr 0x559b74a6c440 <col:14, col:47> 'atomic_val_t':'int'
| |       |     `-BinaryOperator 0x559b74a6c418 <col:15, col:46> 'atomic_val_t':'int' '>>'
| |       |       |-ImplicitCastExpr 0x559b74a6c400 <col:15> 'atomic_val_t':'int' <LValueToRValue>
| |       |       | `-DeclRefExpr 0x559b74a6c208 <col:15> 'atomic_val_t':'int' lvalue Var 0x559b74a6be90 'val' 'atomic_val_t':'int'
| |       |       `-ParenExpr 0x559b74a6c3e0 <col:22, col:46> 'unsigned long'
| |       |         `-BinaryOperator 0x559b74a6c3b8 <col:23, col:45> 'unsigned long' '&'
| |       |           |-ImplicitCastExpr 0x559b74a6c3a0 <col:23> 'unsigned long' <IntegralCast>
| |       |           | `-ImplicitCastExpr 0x559b74a6c388 <col:23> 'int' <LValueToRValue>
| |       |           |   `-DeclRefExpr 0x559b74a6c230 <col:23> 'int' lvalue ParmVar 0x559b74a6bcc0 'bit' 'int'
| |       |           `-ParenExpr 0x559b74a6c368 <col:29, col:45> 'unsigned long'
| |       |             `-BinaryOperator 0x559b74a6c340 <line:316:21, line:355:44> 'unsigned long' '-'
| |       |               |-ParenExpr 0x559b74a6c2e8 <line:316:21, col:46> 'unsigned long'
| |       |               | `-BinaryOperator 0x559b74a6c2c0 <col:22, col:45> 'unsigned long' '*'
| |       |               |   |-UnaryExprOrTypeTraitExpr 0x559b74a6c268 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |       |               |   `-ImplicitCastExpr 0x559b74a6c2a8 <col:45> 'unsigned long' <IntegralCast>
| |       |               |     `-IntegerLiteral 0x559b74a6c288 <col:45> 'int' 8
| |       |               `-ImplicitCastExpr 0x559b74a6c328 <line:355:44> 'unsigned long' <IntegralCast>
| |       |                 `-IntegerLiteral 0x559b74a6c308 <col:44> 'int' 1
| |       `-IntegerLiteral 0x559b74a6c4a8 <col:53> 'int' 0
| `-FullComment 0x559b74b50260 <line:341:3, line:349:55>
|   |-ParagraphComment 0x559b74b4cd30 <line:341:3>
|   | `-TextComment 0x559b74b4cd00 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74b4cd50 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x559b74b4cdb0 <col:10, col:32>
|   |   `-TextComment 0x559b74b4cd80 <col:10, col:32> Text=" Atomically test a bit."
|   |-ParagraphComment 0x559b74b4cf20 <line:343:3, line:344:66>
|   | |-TextComment 0x559b74b4cdd0 <line:343:3, col:41> Text=" This routine tests whether bit number "
|   | |-InlineCommandComment 0x559b74b4ce20 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x559b74b4ce40 <col:48, col:51> Text=" of "
|   | |-InlineCommandComment 0x559b74b4ce90 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x559b74b4ceb0 <col:61, col:75> Text=" is set or not."
|   | `-TextComment 0x559b74b4ced0 <line:344:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x559b74b4cf70 <line:346:3>
|   | `-TextComment 0x559b74b4cf40 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b4cf90 <col:4, line:347:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x559b74b50080 <line:346:17, line:347:3>
|   |   |-TextComment 0x559b74b4cff0 <line:346:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x559b74b50050 <line:347:3> Text=" "
|   |-ParamCommandComment 0x559b74b500a0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x559b74b50130 <col:14, col:43>
|   |   `-TextComment 0x559b74b50100 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x559b74b50180 <line:349:3>
|   | `-TextComment 0x559b74b50150 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74b501a0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x559b74b50200 <col:11, col:55>
|       `-TextComment 0x559b74b501d0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x559b74a6c700 <line:369:1, line:377:1> line:369:20 atomic_test_and_clear_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x559b74a6c578 <col:46, col:56> col:56 used target 'atomic_t *'
| |-ParmVarDecl 0x559b74a6c5f0 <col:64, col:68> col:68 used bit 'int'
| |-CompoundStmt 0x559b74a6d4c8 <line:370:1, line:377:1>
| | |-DeclStmt 0x559b74a6cb00 <line:371:2, col:38>
| | | `-VarDecl 0x559b74a6c7c0 <col:2, line:317:66> line:371:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x559b74a6cae0 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x559b74a6cab8 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x559b74a6c820 <col:27> 'int' 1
| | |       `-ParenExpr 0x559b74a6ca98 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x559b74a6ca70 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x559b74a6ca58 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x559b74a6c900 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x559b74a6c8e8 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x559b74a6c8c8 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x559b74a6c860 <line:371:34> 'int' lvalue ParmVar 0x559b74a6c5f0 'bit' 'int'
| | |           `-ParenExpr 0x559b74a6ca38 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x559b74a6ca10 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x559b74a6c9b8 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x559b74a6c990 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x559b74a6c938 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x559b74a6c978 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x559b74a6c958 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x559b74a6c9f8 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x559b74a6c9d8 <col:63> 'int' 1
| | |-DeclStmt 0x559b74a6cb88 <line:372:2, col:18>
| | | `-VarDecl 0x559b74a6cb28 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x559b74a6d338 <line:374:2, col:50> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x559b74a6cba0 <col:2> 'atomic_val_t':'int' lvalue Var 0x559b74a6cb28 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x559b74a6d300 <col:8, col:50> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x559b74a6d2e8 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x559b74a6cff0 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x559b74a62d18 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x559b74a6d210 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x559b74a6d1e8 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x559b74a6d1d0 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x559b74a6d040 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x559b74a6d018 <line:374:31> 'atomic_t *' lvalue ParmVar 0x559b74a6c578 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x559b74a6d1b0 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x559b74a6d188 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x559b74a6d170 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x559b74a6d158 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x559b74a6d088 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x559b74a6d060 <line:374:39> 'int' lvalue ParmVar 0x559b74a6c5f0 'bit' 'int'
| | |   |       `-ParenExpr 0x559b74a6d138 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x559b74a6d110 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x559b74a6d0b8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x559b74a6d0f8 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x559b74a6d0d8 <col:45> 'int' 8
| | |   `-UnaryOperator 0x559b74a6d270 <line:374:45, col:46> 'atomic_val_t':'int' prefix '~'
| | |     `-ImplicitCastExpr 0x559b74a6d258 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x559b74a6d230 <col:46> 'atomic_val_t':'int' lvalue Var 0x559b74a6c7c0 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x559b74a6d488 <line:376:2, col:25>
| |   `-ImplicitCastExpr 0x559b74a6d470 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x559b74a6d448 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x559b74a6d408 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x559b74a6d3e0 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x559b74a6d3b0 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x559b74a6d360 <col:10> 'atomic_val_t':'int' lvalue Var 0x559b74a6cb28 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x559b74a6d3c8 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x559b74a6d388 <col:16> 'atomic_val_t':'int' lvalue Var 0x559b74a6c7c0 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x559b74a6d428 <col:25> 'int' 0
| `-FullComment 0x559b74b507f0 <line:359:3, line:367:55>
|   |-ParagraphComment 0x559b74b50300 <line:359:3>
|   | `-TextComment 0x559b74b502d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74b50320 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x559b74b50380 <col:10, col:42>
|   |   `-TextComment 0x559b74b50350 <col:10, col:42> Text=" Atomically test and clear a bit."
|   |-ParagraphComment 0x559b74b504f0 <line:361:3, line:362:66>
|   | |-TextComment 0x559b74b503a0 <line:361:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x559b74b503f0 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x559b74b50410 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x559b74b50460 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x559b74b50480 <col:51, col:76> Text=" and return its old value."
|   | `-TextComment 0x559b74b504a0 <line:362:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x559b74b50540 <line:364:3>
|   | `-TextComment 0x559b74b50510 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b50560 <col:4, line:365:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x559b74b50610 <line:364:17, line:365:3>
|   |   |-TextComment 0x559b74b505c0 <line:364:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x559b74b505e0 <line:365:3> Text=" "
|   |-ParamCommandComment 0x559b74b50630 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x559b74b506c0 <col:14, col:43>
|   |   `-TextComment 0x559b74b50690 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x559b74b50710 <line:367:3>
|   | `-TextComment 0x559b74b506e0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74b50730 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x559b74b50790 <col:11, col:55>
|       `-TextComment 0x559b74b50760 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x559b74a6d610 <line:390:1, line:398:1> line:390:20 used atomic_test_and_set_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x559b74a6d508 <col:44, col:54> col:54 used target 'atomic_t *'
| |-ParmVarDecl 0x559b74a6d580 <col:62, col:66> col:66 used bit 'int'
| |-CompoundStmt 0x559b74a6df18 <line:391:1, line:398:1>
| | |-DeclStmt 0x559b74a6d9f0 <line:392:2, col:38>
| | | `-VarDecl 0x559b74a6d6d0 <col:2, line:317:66> line:392:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x559b74a6d9d0 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x559b74a6d9a8 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x559b74a6d730 <col:27> 'int' 1
| | |       `-ParenExpr 0x559b74a6d988 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x559b74a6d960 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x559b74a6d948 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x559b74a6d7f0 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x559b74a6d7d8 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x559b74a6d7b8 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x559b74a6d750 <line:392:34> 'int' lvalue ParmVar 0x559b74a6d580 'bit' 'int'
| | |           `-ParenExpr 0x559b74a6d928 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x559b74a6d900 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x559b74a6d8a8 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x559b74a6d880 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x559b74a6d828 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x559b74a6d868 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x559b74a6d848 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x559b74a6d8e8 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x559b74a6d8c8 <col:63> 'int' 1
| | |-DeclStmt 0x559b74a6da78 <line:393:2, col:18>
| | | `-VarDecl 0x559b74a6da18 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x559b74a6dd88 <line:395:2, col:48> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x559b74a6da90 <col:2> 'atomic_val_t':'int' lvalue Var 0x559b74a6da18 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x559b74a6dd38 <col:8, col:48> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x559b74a6dd20 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x559b74a6dab8 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x559b74a62938 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x559b74a6dcd8 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x559b74a6dcb0 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x559b74a6dc98 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x559b74a6db08 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x559b74a6dae0 <line:395:30> 'atomic_t *' lvalue ParmVar 0x559b74a6d508 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x559b74a6dc78 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x559b74a6dc50 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x559b74a6dc38 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x559b74a6dc20 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x559b74a6db50 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x559b74a6db28 <line:395:38> 'int' lvalue ParmVar 0x559b74a6d580 'bit' 'int'
| | |   |       `-ParenExpr 0x559b74a6dc00 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x559b74a6dbd8 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x559b74a6db80 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x559b74a6dbc0 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x559b74a6dba0 <col:45> 'int' 8
| | |   `-ImplicitCastExpr 0x559b74a6dd70 <line:395:44> 'atomic_val_t':'int' <LValueToRValue>
| | |     `-DeclRefExpr 0x559b74a6dcf8 <col:44> 'atomic_val_t':'int' lvalue Var 0x559b74a6d6d0 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x559b74a6ded8 <line:397:2, col:25>
| |   `-ImplicitCastExpr 0x559b74a6dec0 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x559b74a6de98 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x559b74a6de58 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x559b74a6de30 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x559b74a6de00 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x559b74a6ddb0 <col:10> 'atomic_val_t':'int' lvalue Var 0x559b74a6da18 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x559b74a6de18 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x559b74a6ddd8 <col:16> 'atomic_val_t':'int' lvalue Var 0x559b74a6d6d0 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x559b74a6de78 <col:25> 'int' 0
| `-FullComment 0x559b74b50d80 <line:380:3, line:388:55>
|   |-ParagraphComment 0x559b74b50890 <line:380:3>
|   | `-TextComment 0x559b74b50860 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74b508b0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x559b74b50910 <col:10, col:31>
|   |   `-TextComment 0x559b74b508e0 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x559b74b50a80 <line:382:3, line:383:66>
|   | |-TextComment 0x559b74b50930 <line:382:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x559b74b50980 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x559b74b509a0 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x559b74b509f0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x559b74b50a10 <col:49, col:74> Text=" and return its old value."
|   | `-TextComment 0x559b74b50a30 <line:383:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x559b74b50ad0 <line:385:3>
|   | `-TextComment 0x559b74b50aa0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b50af0 <col:4, line:386:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x559b74b50ba0 <line:385:17, line:386:3>
|   |   |-TextComment 0x559b74b50b50 <line:385:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x559b74b50b70 <line:386:3> Text=" "
|   |-ParamCommandComment 0x559b74b50bc0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x559b74b50c50 <col:14, col:43>
|   |   `-TextComment 0x559b74b50c20 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x559b74b50ca0 <line:388:3>
|   | `-TextComment 0x559b74b50c70 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74b50cc0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x559b74b50d20 <col:11, col:55>
|       `-TextComment 0x559b74b50cf0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x559b74a6e110 <line:411:1, line:416:1> line:411:20 used atomic_clear_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x559b74a6df58 <col:37, col:47> col:47 used target 'atomic_t *'
| |-ParmVarDecl 0x559b74a6e000 <col:55, col:59> col:59 used bit 'int'
| |-CompoundStmt 0x559b74a6e858 <line:412:1, line:416:1>
| | |-DeclStmt 0x559b74a6e4f0 <line:413:2, col:38>
| | | `-VarDecl 0x559b74a6e1d0 <col:2, line:317:66> line:413:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x559b74a6e4d0 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x559b74a6e4a8 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x559b74a6e230 <col:27> 'int' 1
| | |       `-ParenExpr 0x559b74a6e488 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x559b74a6e460 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x559b74a6e448 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x559b74a6e2f0 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x559b74a6e2d8 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x559b74a6e2b8 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x559b74a6e250 <line:413:34> 'int' lvalue ParmVar 0x559b74a6e000 'bit' 'int'
| | |           `-ParenExpr 0x559b74a6e428 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x559b74a6e400 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x559b74a6e3a8 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x559b74a6e380 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x559b74a6e328 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x559b74a6e368 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x559b74a6e348 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x559b74a6e3e8 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x559b74a6e3c8 <col:63> 'int' 1
| | `-CStyleCastExpr 0x559b74a6e808 <line:415:2, col:50> 'void' <ToVoid>
| |   `-CallExpr 0x559b74a6e7c0 <col:8, col:50> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x559b74a6e7a8 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74a6e508 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x559b74a62d18 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x559b74a6e728 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x559b74a6e700 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x559b74a6e6e8 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x559b74a6e558 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x559b74a6e530 <line:415:31> 'atomic_t *' lvalue ParmVar 0x559b74a6df58 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x559b74a6e6c8 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x559b74a6e6a0 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x559b74a6e688 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x559b74a6e670 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x559b74a6e5a0 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x559b74a6e578 <line:415:39> 'int' lvalue ParmVar 0x559b74a6e000 'bit' 'int'
| |     |       `-ParenExpr 0x559b74a6e650 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x559b74a6e628 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x559b74a6e5d0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x559b74a6e610 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x559b74a6e5f0 <col:45> 'int' 8
| |     `-UnaryOperator 0x559b74a6e788 <line:415:45, col:46> 'atomic_val_t':'int' prefix '~'
| |       `-ImplicitCastExpr 0x559b74a6e770 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| |         `-DeclRefExpr 0x559b74a6e748 <col:46> 'atomic_val_t':'int' lvalue Var 0x559b74a6e1d0 'mask' 'atomic_val_t':'int'
| `-FullComment 0x559b74b512f0 <line:401:3, line:409:14>
|   |-ParagraphComment 0x559b74b50e20 <line:401:3>
|   | `-TextComment 0x559b74b50df0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74b50e40 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x559b74b50ea0 <col:10, col:33>
|   |   `-TextComment 0x559b74b50e70 <col:10, col:33> Text=" Atomically clear a bit."
|   |-ParagraphComment 0x559b74b50ff0 <line:403:3, line:404:66>
|   | |-TextComment 0x559b74b50ec0 <line:403:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x559b74b50f10 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x559b74b50f30 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x559b74b50f80 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x559b74b50fa0 <line:404:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x559b74b51040 <line:406:3>
|   | `-TextComment 0x559b74b51010 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b51060 <col:4, line:407:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x559b74b51110 <line:406:17, line:407:3>
|   |   |-TextComment 0x559b74b510c0 <line:406:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x559b74b510e0 <line:407:3> Text=" "
|   |-ParamCommandComment 0x559b74b51130 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x559b74b511c0 <col:14, col:43>
|   |   `-TextComment 0x559b74b51190 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x559b74b51210 <line:409:3>
|   | `-TextComment 0x559b74b511e0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74b51230 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74b51290 <col:11, col:14>
|       `-TextComment 0x559b74b51260 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74a6e990 <line:429:1, line:434:1> line:429:20 atomic_set_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x559b74a6e888 <col:35, col:45> col:45 used target 'atomic_t *'
| |-ParmVarDecl 0x559b74a6e900 <col:53, col:57> col:57 used bit 'int'
| |-CompoundStmt 0x559b74a6f0d8 <line:430:1, line:434:1>
| | |-DeclStmt 0x559b74a6ed70 <line:431:2, col:38>
| | | `-VarDecl 0x559b74a6ea50 <col:2, line:317:66> line:431:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x559b74a6ed50 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x559b74a6ed28 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x559b74a6eab0 <col:27> 'int' 1
| | |       `-ParenExpr 0x559b74a6ed08 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x559b74a6ece0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x559b74a6ecc8 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x559b74a6eb70 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x559b74a6eb58 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x559b74a6eb38 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x559b74a6ead0 <line:431:34> 'int' lvalue ParmVar 0x559b74a6e900 'bit' 'int'
| | |           `-ParenExpr 0x559b74a6eca8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x559b74a6ec80 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x559b74a6ec28 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x559b74a6ec00 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x559b74a6eba8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x559b74a6ebe8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x559b74a6ebc8 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x559b74a6ec68 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x559b74a6ec48 <col:63> 'int' 1
| | `-CStyleCastExpr 0x559b74a6f088 <line:433:2, col:48> 'void' <ToVoid>
| |   `-CallExpr 0x559b74a6f028 <col:8, col:48> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x559b74a6f010 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74a6ed88 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x559b74a62938 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x559b74a6efa8 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x559b74a6ef80 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x559b74a6ef68 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x559b74a6edd8 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x559b74a6edb0 <line:433:30> 'atomic_t *' lvalue ParmVar 0x559b74a6e888 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x559b74a6ef48 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x559b74a6ef20 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x559b74a6ef08 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x559b74a6eef0 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x559b74a6ee20 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x559b74a6edf8 <line:433:38> 'int' lvalue ParmVar 0x559b74a6e900 'bit' 'int'
| |     |       `-ParenExpr 0x559b74a6eed0 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x559b74a6eea8 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x559b74a6ee50 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x559b74a6ee90 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x559b74a6ee70 <col:45> 'int' 8
| |     `-ImplicitCastExpr 0x559b74a6f060 <line:433:44> 'atomic_val_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x559b74a6efc8 <col:44> 'atomic_val_t':'int' lvalue Var 0x559b74a6ea50 'mask' 'atomic_val_t':'int'
| `-FullComment 0x559b74b51860 <line:419:3, line:427:14>
|   |-ParagraphComment 0x559b74b51390 <line:419:3>
|   | `-TextComment 0x559b74b51360 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74b513b0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x559b74b51410 <col:10, col:31>
|   |   `-TextComment 0x559b74b513e0 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x559b74b51560 <line:421:3, line:422:66>
|   | |-TextComment 0x559b74b51430 <line:421:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x559b74b51480 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x559b74b514a0 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x559b74b514f0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x559b74b51510 <line:422:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x559b74b515b0 <line:424:3>
|   | `-TextComment 0x559b74b51580 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b515d0 <col:4, line:425:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x559b74b51680 <line:424:17, line:425:3>
|   |   |-TextComment 0x559b74b51630 <line:424:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x559b74b51650 <line:425:3> Text=" "
|   |-ParamCommandComment 0x559b74b516a0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x559b74b51730 <col:14, col:43>
|   |   `-TextComment 0x559b74b51700 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x559b74b51780 <line:427:3>
|   | `-TextComment 0x559b74b51750 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74b517a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74b51800 <col:11, col:14>
|       `-TextComment 0x559b74b517d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74a6f320 <line:448:1, line:457:1> line:448:20 atomic_set_bit_to 'void (atomic_t *, int, bool)' static inline
| |-ParmVarDecl 0x559b74a6f108 <col:38, col:48> col:48 used target 'atomic_t *'
| |-ParmVarDecl 0x559b74a6f180 <col:56, col:60> col:60 used bit 'int'
| |-ParmVarDecl 0x559b74a6f1f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/atomic.h:448:70> col:70 used val 'bool'
| |-CompoundStmt 0x559b74a6feb8 <line:449:1, line:457:1>
| | |-DeclStmt 0x559b74a6f708 <line:450:2, col:38>
| | | `-VarDecl 0x559b74a6f3e8 <col:2, line:317:66> line:450:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x559b74a6f6e8 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x559b74a6f6c0 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x559b74a6f448 <col:27> 'int' 1
| | |       `-ParenExpr 0x559b74a6f6a0 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x559b74a6f678 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x559b74a6f660 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x559b74a6f508 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x559b74a6f4f0 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x559b74a6f4d0 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x559b74a6f468 <line:450:34> 'int' lvalue ParmVar 0x559b74a6f180 'bit' 'int'
| | |           `-ParenExpr 0x559b74a6f640 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x559b74a6f618 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x559b74a6f5c0 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x559b74a6f598 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x559b74a6f540 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x559b74a6f580 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x559b74a6f560 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x559b74a6f600 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x559b74a6f5e0 <col:63> 'int' 1
| | `-IfStmt 0x559b74a6fdc0 <line:452:2, line:456:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x559b74a6f748 <line:452:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x559b74a6f720 <col:6> 'bool' lvalue ParmVar 0x559b74a6f1f0 'val' 'bool'
| |   |-CompoundStmt 0x559b74a6fa68 <col:11, line:454:2>
| |   | `-CStyleCastExpr 0x559b74a6fa40 <line:453:3, col:49> 'void' <ToVoid>
| |   |   `-CallExpr 0x559b74a6f9e0 <col:9, col:49> 'atomic_val_t':'int'
| |   |     |-ImplicitCastExpr 0x559b74a6f9c8 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x559b74a6f760 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x559b74a62938 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |   |     |-ParenExpr 0x559b74a6f980 <line:318:32, col:63> 'atomic_t *'
| |   |     | `-BinaryOperator 0x559b74a6f958 <col:33, col:62> 'atomic_t *' '+'
| |   |     |   |-ImplicitCastExpr 0x559b74a6f940 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |   |     |   | `-ParenExpr 0x559b74a6f7b0 <col:33, col:38> 'atomic_t *' lvalue
| |   |     |   |   `-DeclRefExpr 0x559b74a6f788 <line:453:31> 'atomic_t *' lvalue ParmVar 0x559b74a6f108 'target' 'atomic_t *'
| |   |     |   `-ParenExpr 0x559b74a6f920 <line:318:42, col:62> 'unsigned long'
| |   |     |     `-BinaryOperator 0x559b74a6f8f8 <col:43, line:316:46> 'unsigned long' '/'
| |   |     |       |-ImplicitCastExpr 0x559b74a6f8e0 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |   |     |       | `-ImplicitCastExpr 0x559b74a6f8c8 <col:43, col:47> 'int' <LValueToRValue>
| |   |     |       |   `-ParenExpr 0x559b74a6f7f8 <col:43, col:47> 'int' lvalue
| |   |     |       |     `-DeclRefExpr 0x559b74a6f7d0 <line:453:39> 'int' lvalue ParmVar 0x559b74a6f180 'bit' 'int'
| |   |     |       `-ParenExpr 0x559b74a6f8a8 <line:316:21, col:46> 'unsigned long'
| |   |     |         `-BinaryOperator 0x559b74a6f880 <col:22, col:45> 'unsigned long' '*'
| |   |     |           |-UnaryExprOrTypeTraitExpr 0x559b74a6f828 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |   |     |           `-ImplicitCastExpr 0x559b74a6f868 <col:45> 'unsigned long' <IntegralCast>
| |   |     |             `-IntegerLiteral 0x559b74a6f848 <col:45> 'int' 8
| |   |     `-ImplicitCastExpr 0x559b74a6fa18 <line:453:45> 'atomic_val_t':'int' <LValueToRValue>
| |   |       `-DeclRefExpr 0x559b74a6f9a0 <col:45> 'atomic_val_t':'int' lvalue Var 0x559b74a6f3e8 'mask' 'atomic_val_t':'int'
| |   `-CompoundStmt 0x559b74a6fda8 <line:454:9, line:456:2>
| |     `-CStyleCastExpr 0x559b74a6fd80 <line:455:3, col:51> 'void' <ToVoid>
| |       `-CallExpr 0x559b74a6fd38 <col:9, col:51> 'atomic_val_t':'int'
| |         |-ImplicitCastExpr 0x559b74a6fd20 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x559b74a6fa80 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x559b74a62d18 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |         |-ParenExpr 0x559b74a6fca0 <line:318:32, col:63> 'atomic_t *'
| |         | `-BinaryOperator 0x559b74a6fc78 <col:33, col:62> 'atomic_t *' '+'
| |         |   |-ImplicitCastExpr 0x559b74a6fc60 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |         |   | `-ParenExpr 0x559b74a6fad0 <col:33, col:38> 'atomic_t *' lvalue
| |         |   |   `-DeclRefExpr 0x559b74a6faa8 <line:455:32> 'atomic_t *' lvalue ParmVar 0x559b74a6f108 'target' 'atomic_t *'
| |         |   `-ParenExpr 0x559b74a6fc40 <line:318:42, col:62> 'unsigned long'
| |         |     `-BinaryOperator 0x559b74a6fc18 <col:43, line:316:46> 'unsigned long' '/'
| |         |       |-ImplicitCastExpr 0x559b74a6fc00 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |         |       | `-ImplicitCastExpr 0x559b74a6fbe8 <col:43, col:47> 'int' <LValueToRValue>
| |         |       |   `-ParenExpr 0x559b74a6fb18 <col:43, col:47> 'int' lvalue
| |         |       |     `-DeclRefExpr 0x559b74a6faf0 <line:455:40> 'int' lvalue ParmVar 0x559b74a6f180 'bit' 'int'
| |         |       `-ParenExpr 0x559b74a6fbc8 <line:316:21, col:46> 'unsigned long'
| |         |         `-BinaryOperator 0x559b74a6fba0 <col:22, col:45> 'unsigned long' '*'
| |         |           |-UnaryExprOrTypeTraitExpr 0x559b74a6fb48 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |         |           `-ImplicitCastExpr 0x559b74a6fb88 <col:45> 'unsigned long' <IntegralCast>
| |         |             `-IntegerLiteral 0x559b74a6fb68 <col:45> 'int' 8
| |         `-UnaryOperator 0x559b74a6fd00 <line:455:46, col:47> 'atomic_val_t':'int' prefix '~'
| |           `-ImplicitCastExpr 0x559b74a6fce8 <col:47> 'atomic_val_t':'int' <LValueToRValue>
| |             `-DeclRefExpr 0x559b74a6fcc0 <col:47> 'atomic_val_t':'int' lvalue Var 0x559b74a6f3e8 'mask' 'atomic_val_t':'int'
| `-FullComment 0x559b74b51f30 <line:437:3, line:446:14>
|   |-ParagraphComment 0x559b74b51900 <line:437:3>
|   | `-TextComment 0x559b74b518d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74b51920 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x559b74b51980 <col:10, col:48>
|   |   `-TextComment 0x559b74b51950 <col:10, col:48> Text=" Atomically set a bit to a given value."
|   |-ParagraphComment 0x559b74b51b50 <line:439:3, line:440:66>
|   | |-TextComment 0x559b74b519a0 <line:439:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x559b74b519f0 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x559b74b51a10 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x559b74b51a60 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x559b74b51a80 <col:49, col:58> Text=" to value "
|   | |-InlineCommandComment 0x559b74b51ad0 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="val."
|   | `-TextComment 0x559b74b51af0 <line:440:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x559b74b51ba0 <line:442:3>
|   | `-TextComment 0x559b74b51b70 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b51bc0 <col:4, line:443:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x559b74b51c70 <line:442:17, line:443:3>
|   |   |-TextComment 0x559b74b51c20 <line:442:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x559b74b51c40 <line:443:3> Text=" "
|   |-ParamCommandComment 0x559b74b51c90 <col:4, line:444:3> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x559b74b51d40 <line:443:14, line:444:3>
|   |   |-TextComment 0x559b74b51cf0 <line:443:14, col:43> Text=" Bit number (starting from 0)."
|   |   `-TextComment 0x559b74b51d10 <line:444:3> Text=" "
|   |-ParamCommandComment 0x559b74b51d60 <col:4, col:38> [in] implicitly Param="val" ParamIndex=2
|   | `-ParagraphComment 0x559b74b51df0 <col:14, col:38>
|   |   `-TextComment 0x559b74b51dc0 <col:14, col:38> Text=" true for 1, false for 0."
|   |-ParagraphComment 0x559b74b51e40 <line:446:3>
|   | `-TextComment 0x559b74b51e10 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74b51e60 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74b51ec0 <col:11, col:14>
|       `-TextComment 0x559b74b51e90 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74a79770 </vagrant/ext/zephyros/zephyr/include/sys/util.h:113:1, line:116:1> line:113:20 is_power_of_two 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x559b74a6fef0 <col:36, col:49> col:49 used x 'unsigned int'
| `-CompoundStmt 0x559b74a79ac8 <line:114:1, line:116:1>
|   `-ReturnStmt 0x559b74a79ab0 <line:115:2, col:42>
|     `-ImplicitCastExpr 0x559b74a79a98 <col:9, col:42> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x559b74a79a70 <col:9, col:42> 'int' '&&'
|         |-ParenExpr 0x559b74a798a0 <col:9, col:17> 'int'
|         | `-BinaryOperator 0x559b74a79878 <col:10, col:15> 'int' '!='
|         |   |-ImplicitCastExpr 0x559b74a79860 <col:10> 'unsigned int' <LValueToRValue>
|         |   | `-DeclRefExpr 0x559b74a79818 <col:10> 'unsigned int' lvalue ParmVar 0x559b74a6fef0 'x' 'unsigned int'
|         |   `-IntegerLiteral 0x559b74a79840 <col:15> 'unsigned int' 0
|         `-ParenExpr 0x559b74a79a50 <col:22, col:42> 'int'
|           `-BinaryOperator 0x559b74a79a28 <col:23, col:40> 'int' '=='
|             |-ParenExpr 0x559b74a799e8 <col:23, col:35> 'unsigned int'
|             | `-BinaryOperator 0x559b74a799c0 <col:24, col:34> 'unsigned int' '&'
|             |   |-ImplicitCastExpr 0x559b74a799a8 <col:24> 'unsigned int' <LValueToRValue>
|             |   | `-DeclRefExpr 0x559b74a798c0 <col:24> 'unsigned int' lvalue ParmVar 0x559b74a6fef0 'x' 'unsigned int'
|             |   `-ParenExpr 0x559b74a79988 <col:28, col:34> 'unsigned int'
|             |     `-BinaryOperator 0x559b74a79960 <col:29, col:33> 'unsigned int' '-'
|             |       |-ImplicitCastExpr 0x559b74a79930 <col:29> 'unsigned int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x559b74a798e8 <col:29> 'unsigned int' lvalue ParmVar 0x559b74a6fef0 'x' 'unsigned int'
|             |       `-ImplicitCastExpr 0x559b74a79948 <col:33> 'unsigned int' <IntegralCast>
|             |         `-IntegerLiteral 0x559b74a79910 <col:33> 'int' 1
|             `-IntegerLiteral 0x559b74a79a08 <col:40> 'unsigned int' 0
|-FunctionDecl 0x559b74a79cb0 <line:118:1, line:134:1> line:118:21 arithmetic_shift_right 's64_t (s64_t, u8_t)' static inline
| |-ParmVarDecl 0x559b74a79b10 <col:44, col:50> col:50 used value 's64_t':'long long'
| |-ParmVarDecl 0x559b74a79ba0 <col:57, col:62> col:62 used shift 'u8_t':'unsigned char'
| `-CompoundStmt 0x559b74a7a3c8 <line:119:1, line:134:1>
|   |-DeclStmt 0x559b74a79dd0 <line:120:2, col:16>
|   | `-VarDecl 0x559b74a79d70 <col:2, col:8> col:8 used sign_ext 's64_t':'long long'
|   |-IfStmt 0x559b74a79ef8 <line:122:2, line:124:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559b74a79e60 <line:122:6, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x559b74a79e48 <col:6> 'unsigned int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x559b74a79e30 <col:6> 'u8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x559b74a79de8 <col:6> 'u8_t':'unsigned char' lvalue ParmVar 0x559b74a79ba0 'shift' 'u8_t':'unsigned char'
|   | | `-IntegerLiteral 0x559b74a79e10 <col:15> 'unsigned int' 0
|   | |-CompoundStmt 0x559b74a79ee0 <col:19, line:124:2>
|   | | `-ReturnStmt 0x559b74a79ec8 <line:123:3, col:10>
|   | |   `-ImplicitCastExpr 0x559b74a79eb0 <col:10> 's64_t':'long long' <LValueToRValue>
|   | |     `-DeclRefExpr 0x559b74a79e88 <col:10> 's64_t':'long long' lvalue ParmVar 0x559b74a79b10 'value' 's64_t':'long long'
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x559b74a7a060 <line:127:2, col:29> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x559b74a79f30 <col:2> 's64_t':'long long' lvalue Var 0x559b74a79d70 'sign_ext' 's64_t':'long long'
|   | `-BinaryOperator 0x559b74a7a038 <col:13, col:29> 'long long' '&'
|   |   |-ParenExpr 0x559b74a79fe0 <col:13, col:25> 's64_t':'long long'
|   |   | `-BinaryOperator 0x559b74a79fb8 <col:14, col:23> 's64_t':'long long' '>>'
|   |   |   |-ImplicitCastExpr 0x559b74a79fa0 <col:14> 's64_t':'long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x559b74a79f58 <col:14> 's64_t':'long long' lvalue ParmVar 0x559b74a79b10 'value' 's64_t':'long long'
|   |   |   `-IntegerLiteral 0x559b74a79f80 <col:23> 'int' 63
|   |   `-ImplicitCastExpr 0x559b74a7a020 <col:29> 'long long' <IntegralCast>
|   |     `-IntegerLiteral 0x559b74a7a000 <col:29> 'int' 1
|   |-BinaryOperator 0x559b74a7a110 <line:130:2, col:14> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x559b74a7a088 <col:2> 's64_t':'long long' lvalue Var 0x559b74a79d70 'sign_ext' 's64_t':'long long'
|   | `-UnaryOperator 0x559b74a7a0f0 <col:13, col:14> 's64_t':'long long' prefix '-'
|   |   `-ImplicitCastExpr 0x559b74a7a0d8 <col:14> 's64_t':'long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x559b74a7a0b0 <col:14> 's64_t':'long long' lvalue Var 0x559b74a79d70 'sign_ext' 's64_t':'long long'
|   `-ReturnStmt 0x559b74a7a388 <line:133:2, col:53>
|     `-BinaryOperator 0x559b74a7a360 <col:9, col:53> 'long long' '|'
|       |-ParenExpr 0x559b74a7a1f8 <col:9, col:24> 's64_t':'long long'
|       | `-BinaryOperator 0x559b74a7a1d0 <col:10, col:19> 's64_t':'long long' '>>'
|       |   |-ImplicitCastExpr 0x559b74a7a188 <col:10> 's64_t':'long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x559b74a7a138 <col:10> 's64_t':'long long' lvalue ParmVar 0x559b74a79b10 'value' 's64_t':'long long'
|       |   `-ImplicitCastExpr 0x559b74a7a1b8 <col:19> 'int' <IntegralCast>
|       |     `-ImplicitCastExpr 0x559b74a7a1a0 <col:19> 'u8_t':'unsigned char' <LValueToRValue>
|       |       `-DeclRefExpr 0x559b74a7a160 <col:19> 'u8_t':'unsigned char' lvalue ParmVar 0x559b74a79ba0 'shift' 'u8_t':'unsigned char'
|       `-ParenExpr 0x559b74a7a340 <col:28, col:53> 's64_t':'long long'
|         `-BinaryOperator 0x559b74a7a318 <col:29, col:52> 's64_t':'long long' '<<'
|           |-ImplicitCastExpr 0x559b74a7a300 <col:29> 's64_t':'long long' <LValueToRValue>
|           | `-DeclRefExpr 0x559b74a7a218 <col:29> 's64_t':'long long' lvalue Var 0x559b74a79d70 'sign_ext' 's64_t':'long long'
|           `-ParenExpr 0x559b74a7a2e0 <col:41, col:52> 'int'
|             `-BinaryOperator 0x559b74a7a2b8 <col:42, col:47> 'int' '-'
|               |-IntegerLiteral 0x559b74a7a240 <col:42> 'int' 64
|               `-ImplicitCastExpr 0x559b74a7a2a0 <col:47> 'int' <IntegralCast>
|                 `-ImplicitCastExpr 0x559b74a7a288 <col:47> 'u8_t':'unsigned char' <LValueToRValue>
|                   `-DeclRefExpr 0x559b74a7a260 <col:47> 'u8_t':'unsigned char' lvalue ParmVar 0x559b74a79ba0 'shift' 'u8_t':'unsigned char'
|-FunctionDecl 0x559b74a7a5f8 <line:144:1, col:29> col:5 char2hex 'int (char, u8_t *)'
| |-ParmVarDecl 0x559b74a7a410 <col:14, col:19> col:19 c 'char'
| |-ParmVarDecl 0x559b74a7a4d8 <col:22, col:28> col:28 x 'u8_t *'
| `-FullComment 0x559b74b54390 <line:137:3, line:142:63>
|   |-ParagraphComment 0x559b74b51fd0 <line:137:3>
|   | `-TextComment 0x559b74b51fa0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74b51ff0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x559b74b54090 <col:10, col:68>
|   |   `-TextComment 0x559b74b52020 <col:10, col:68> Text="      Convert a single character into a hexadecimal nibble."
|   |-ParagraphComment 0x559b74b540e0 <line:139:3>
|   | `-TextComment 0x559b74b540b0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b54100 <col:4, line:140:3> [in] explicitly Param="c" ParamIndex=0
|   | `-ParagraphComment 0x559b74b541b0 <line:139:17, line:140:3>
|   |   |-TextComment 0x559b74b54160 <line:139:17, col:45> Text="     The character to convert"
|   |   `-TextComment 0x559b74b54180 <line:140:3> Text=" "
|   |-ParamCommandComment 0x559b74b541d0 <col:4, col:69> [in] implicitly Param="x" ParamIndex=1
|   | `-ParagraphComment 0x559b74b54260 <col:17, col:69>
|   |   `-TextComment 0x559b74b54230 <col:17, col:69> Text="     The address of storage for the converted number."
|   |-ParagraphComment 0x559b74b542b0 <line:142:3, col:4>
|   | `-TextComment 0x559b74b54280 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x559b74b542d0 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x559b74b54330 <col:12, col:63>
|       `-TextComment 0x559b74b54300 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x559b74a7a898 <line:154:1, col:29> col:5 hex2char 'int (u8_t, char *)'
| |-ParmVarDecl 0x559b74a7a6e8 <col:14, col:19> col:19 x 'u8_t':'unsigned char'
| |-ParmVarDecl 0x559b74a7a780 <col:22, col:28> col:28 c 'char *'
| `-FullComment 0x559b74b547b0 <line:147:3, line:152:63>
|   |-ParagraphComment 0x559b74b54430 <line:147:3>
|   | `-TextComment 0x559b74b54400 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74b54450 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x559b74b544b0 <col:10, col:68>
|   |   `-TextComment 0x559b74b54480 <col:10, col:68> Text="      Convert a single hexadecimal nibble into a character."
|   |-ParagraphComment 0x559b74b54500 <line:149:3>
|   | `-TextComment 0x559b74b544d0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b54520 <col:4, line:150:3> [in] explicitly Param="c" ParamIndex=1
|   | `-ParagraphComment 0x559b74b545d0 <line:149:17, line:150:3>
|   |   |-TextComment 0x559b74b54580 <line:149:17, col:42> Text="     The number to convert"
|   |   `-TextComment 0x559b74b545a0 <line:150:3> Text=" "
|   |-ParamCommandComment 0x559b74b545f0 <col:4, col:72> [in] implicitly Param="x" ParamIndex=0
|   | `-ParagraphComment 0x559b74b54680 <col:17, col:72>
|   |   `-TextComment 0x559b74b54650 <col:17, col:72> Text="     The address of storage for the converted character."
|   |-ParagraphComment 0x559b74b546d0 <line:152:3, col:4>
|   | `-TextComment 0x559b74b546a0 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x559b74b546f0 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x559b74b54750 <col:12, col:63>
|       `-TextComment 0x559b74b54720 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x559b74a7aca0 <line:166:1, col:72> col:8 bin2hex 'size_t (const u8_t *, size_t, char *, size_t)'
| |-ParmVarDecl 0x559b74a7aa08 <col:16, col:28> col:28 buf 'const u8_t *'
| |-ParmVarDecl 0x559b74a7aa78 <col:33, col:40> col:40 buflen 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74a7aaf0 <col:48, col:54> col:54 hex 'char *'
| |-ParmVarDecl 0x559b74a7ab60 <col:59, col:66> col:66 hexlen 'size_t':'unsigned long'
| `-FullComment 0x559b74b54d80 <line:157:3, line:164:77>
|   |-ParagraphComment 0x559b74b54850 <line:157:3>
|   | `-TextComment 0x559b74b54820 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74b54870 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x559b74b548d0 <col:10, col:65>
|   |   `-TextComment 0x559b74b548a0 <col:10, col:65> Text="      Convert a binary array into string representation."
|   |-ParagraphComment 0x559b74b54920 <line:159:3>
|   | `-TextComment 0x559b74b548f0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b54940 <col:4, line:160:3> [in] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x559b74b549f0 <line:159:19, line:160:3>
|   |   |-TextComment 0x559b74b549a0 <line:159:19, col:50> Text="     The binary array to convert"
|   |   `-TextComment 0x559b74b549c0 <line:160:3> Text=" "
|   |-ParamCommandComment 0x559b74b54a10 <col:4, line:161:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x559b74b54ac0 <line:160:22, line:161:3>
|   |   |-TextComment 0x559b74b54a70 <line:160:22, col:64> Text="  The length of the binary array to convert"
|   |   `-TextComment 0x559b74b54a90 <line:161:3> Text=" "
|   |-ParamCommandComment 0x559b74b54ae0 <col:4, line:162:3> [out] explicitly Param="hex" ParamIndex=2
|   | `-ParagraphComment 0x559b74b54b90 <line:161:19, line:162:3>
|   |   |-TextComment 0x559b74b54b40 <line:161:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x559b74b54b60 <line:162:3> Text=" "
|   |-ParamCommandComment 0x559b74b54bb0 <col:4, col:74> [in] explicitly Param="hexlen" ParamIndex=3
|   | `-ParagraphComment 0x559b74b54c40 <col:22, col:74>
|   |   `-TextComment 0x559b74b54c10 <col:22, col:74> Text="  Size of the storage area for string representation."
|   |-ParagraphComment 0x559b74b54c90 <line:164:3>
|   | `-TextComment 0x559b74b54c60 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74b54cb0 <col:4, col:77> Name="return"
|     `-ParagraphComment 0x559b74b54d10 <col:11, col:77>
|       `-TextComment 0x559b74b54ce0 <col:11, col:77> Text="     The length of the converted string, or 0 if an error occurred."
|-FunctionDecl 0x559b74a7b030 <line:184:1, col:72> col:8 hex2bin 'size_t (const char *, size_t, u8_t *, size_t)'
| |-ParmVarDecl 0x559b74a7ada0 <col:16, col:28> col:28 hex 'const char *'
| |-ParmVarDecl 0x559b74a7ae10 <col:33, col:40> col:40 hexlen 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74a7ae80 <col:48, col:54> col:54 buf 'u8_t *'
| |-ParmVarDecl 0x559b74a7aef0 <col:59, col:66> col:66 buflen 'size_t':'unsigned long'
| `-FullComment 0x559b74b55350 <line:175:3, line:182:74>
|   |-ParagraphComment 0x559b74b54e20 <line:175:3>
|   | `-TextComment 0x559b74b54df0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74b54e40 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x559b74b54ea0 <col:10, col:64>
|   |   `-TextComment 0x559b74b54e70 <col:10, col:64> Text="      Convert a hexadecimal string into a binary array."
|   |-ParagraphComment 0x559b74b54ef0 <line:177:3>
|   | `-TextComment 0x559b74b54ec0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b54f10 <col:4, line:178:3> [in] explicitly Param="hex" ParamIndex=0
|   | `-ParagraphComment 0x559b74b54fc0 <line:177:19, line:178:3>
|   |   |-TextComment 0x559b74b54f70 <line:177:19, col:56> Text="     The hexadecimal string to convert"
|   |   `-TextComment 0x559b74b54f90 <line:178:3> Text=" "
|   |-ParamCommandComment 0x559b74b54fe0 <col:4, line:179:3> [in] explicitly Param="hexlen" ParamIndex=1
|   | `-ParagraphComment 0x559b74b55090 <line:178:22, line:179:3>
|   |   |-TextComment 0x559b74b55040 <line:178:22, col:71> Text="  The length of the hexadecimal string to convert."
|   |   `-TextComment 0x559b74b55060 <line:179:3> Text=" "
|   |-ParamCommandComment 0x559b74b550b0 <col:4, line:180:3> [out] explicitly Param="buf" ParamIndex=2
|   | `-ParagraphComment 0x559b74b55160 <line:179:19, line:180:3>
|   |   |-TextComment 0x559b74b55110 <line:179:19, col:64> Text="     Address of where to store the binary data"
|   |   `-TextComment 0x559b74b55130 <line:180:3> Text=" "
|   |-ParamCommandComment 0x559b74b55180 <col:4, col:63> [in] explicitly Param="buflen" ParamIndex=3
|   | `-ParagraphComment 0x559b74b55210 <col:22, col:63>
|   |   `-TextComment 0x559b74b551e0 <col:22, col:63> Text="  Size of the storage area for binary data"
|   |-ParagraphComment 0x559b74b55260 <line:182:3>
|   | `-TextComment 0x559b74b55230 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74b55280 <col:4, col:74> Name="return"
|     `-ParagraphComment 0x559b74b552e0 <col:11, col:74>
|       `-TextComment 0x559b74b552b0 <col:11, col:74> Text="     The length of the binary array , or 0 if an error occurred."
|-FunctionDecl 0x559b74a7b340 <line:199:1, col:50> col:6 u8_to_dec 'u8_t (char *, u8_t, u8_t)'
| |-ParmVarDecl 0x559b74a7b130 <col:16, col:22> col:22 buf 'char *'
| |-ParmVarDecl 0x559b74a7b1a0 <col:27, col:32> col:32 buflen 'u8_t':'unsigned char'
| |-ParmVarDecl 0x559b74a7b210 <col:40, col:45> col:45 value 'u8_t':'unsigned char'
| `-FullComment 0x559b74b558e0 <line:187:3, line:197:47>
|   |-ParagraphComment 0x559b74b553f0 <line:187:3>
|   | `-TextComment 0x559b74b553c0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74b55410 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x559b74b55470 <col:10, col:65>
|   |   `-TextComment 0x559b74b55440 <col:10, col:65> Text="      Convert a u8_t into decimal string representation."
|   |-ParagraphComment 0x559b74b554e0 <line:189:3, line:190:60>
|   | |-TextComment 0x559b74b55490 <line:189:3, col:65> Text=" Convert a u8_t value into ASCII decimal string representation."
|   | `-TextComment 0x559b74b554b0 <line:190:3, col:60> Text=" The string is terminated if there is enough space in buf."
|   |-ParagraphComment 0x559b74b55530 <line:192:3>
|   | `-TextComment 0x559b74b55500 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b55550 <col:4, line:193:3> [out] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x559b74b55600 <line:192:19, line:193:3>
|   |   |-TextComment 0x559b74b555b0 <line:192:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x559b74b555d0 <line:193:3> Text=" "
|   |-ParamCommandComment 0x559b74b55620 <col:4, line:194:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x559b74b556d0 <line:193:22, line:194:3>
|   |   |-TextComment 0x559b74b55680 <line:193:22, col:74> Text="  Size of the storage area for string representation."
|   |   `-TextComment 0x559b74b556a0 <line:194:3> Text=" "
|   |-ParamCommandComment 0x559b74b556f0 <col:4, col:61> [in] explicitly Param="value" ParamIndex=2
|   | `-ParagraphComment 0x559b74b55780 <col:21, col:61>
|   |   `-TextComment 0x559b74b55750 <col:21, col:61> Text="   The value to convert to decimal string"
|   |-ParagraphComment 0x559b74b557d0 <line:196:3>
|   | `-TextComment 0x559b74b557a0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74b557f0 <col:4, line:197:47> Name="return"
|     `-ParagraphComment 0x559b74b55870 <line:196:11, line:197:47>
|       |-TextComment 0x559b74b55820 <line:196:11, col:74> Text="     The length of the converted string (excluding terminator if"
|       `-TextComment 0x559b74b55840 <line:197:3, col:47> Text="             any), or 0 if an error occurred."
|-RecordDecl 0x559b74a7b6f8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:31:1, line:40:1> line:31:8 struct _dnode definition
| |-RecordDecl 0x559b74aaffb0 <line:32:2, line:35:2> line:32:2 union definition
| | |-FieldDecl 0x559b74ab0110 <line:33:3, col:18> col:18 referenced head 'struct _dnode *'
| | `-FieldDecl 0x559b74ab0180 <line:34:3, col:18> col:18 referenced next 'struct _dnode *'
| |-FieldDecl 0x559b74ab0220 <line:32:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| |-IndirectFieldDecl 0x559b74ab0278 <line:33:18> col:18 implicit head 'struct _dnode *'
| | |-Field 0x559b74ab0220 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x559b74ab0110 'head' 'struct _dnode *'
| |-IndirectFieldDecl 0x559b74ab02c8 <line:34:18> col:18 implicit next 'struct _dnode *'
| | |-Field 0x559b74ab0220 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x559b74ab0180 'next' 'struct _dnode *'
| |-RecordDecl 0x559b74ab0308 <line:36:2, line:39:2> line:36:2 union definition
| | |-FieldDecl 0x559b74ab03d8 <line:37:3, col:18> col:18 referenced tail 'struct _dnode *'
| | `-FieldDecl 0x559b74ab0448 <line:38:3, col:18> col:18 referenced prev 'struct _dnode *'
| |-FieldDecl 0x559b74ab04e0 <line:36:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| |-IndirectFieldDecl 0x559b74ab0538 <line:37:18> col:18 implicit tail 'struct _dnode *'
| | |-Field 0x559b74ab04e0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| | `-Field 0x559b74ab03d8 'tail' 'struct _dnode *'
| `-IndirectFieldDecl 0x559b74ab0588 <line:38:18> col:18 implicit prev 'struct _dnode *'
|   |-Field 0x559b74ab04e0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
|   `-Field 0x559b74ab0448 'prev' 'struct _dnode *'
|-TypedefDecl 0x559b74ab0638 <line:42:1, col:23> col:23 referenced sys_dlist_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x559b74ab0060 'struct _dnode' sugar
|   `-RecordType 0x559b74aaff90 'struct _dnode'
|     `-Record 0x559b74a7b6f8 '_dnode'
|-TypedefDecl 0x559b74ab06b0 <line:43:1, col:23> col:23 referenced sys_dnode_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x559b74ab0060 'struct _dnode' sugar
|   `-RecordType 0x559b74aaff90 'struct _dnode'
|     `-Record 0x559b74a7b6f8 '_dnode'
|-FunctionDecl 0x559b74ab0990 <line:192:1, line:196:1> line:192:20 sys_dlist_init 'void (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x559b74ab0888 <col:35, col:48> col:48 used list 'sys_dlist_t *'
| |-CompoundStmt 0x559b74ab0d88 <line:193:1, line:196:1>
| | |-BinaryOperator 0x559b74ab0bc8 <line:194:2, col:30> 'struct _dnode *' '='
| | | |-MemberExpr 0x559b74ab0ac8 <col:2, col:8> 'struct _dnode *' lvalue .head 0x559b74ab0110
| | | | `-MemberExpr 0x559b74ab0a78 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| | | |   `-ImplicitCastExpr 0x559b74ab0a60 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x559b74ab0a38 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab0888 'list' 'sys_dlist_t *'
| | | `-CStyleCastExpr 0x559b74ab0ba0 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| | |   `-ImplicitCastExpr 0x559b74ab0b88 <col:30> 'sys_dlist_t *' <LValueToRValue>
| | |     `-DeclRefExpr 0x559b74ab0b20 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab0888 'list' 'sys_dlist_t *'
| | `-BinaryOperator 0x559b74ab0d30 <line:195:2, col:30> 'struct _dnode *' '='
| |   |-MemberExpr 0x559b74ab0c80 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x559b74ab03d8
| |   | `-MemberExpr 0x559b74ab0c30 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| |   |   `-ImplicitCastExpr 0x559b74ab0c18 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x559b74ab0bf0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab0888 'list' 'sys_dlist_t *'
| |   `-CStyleCastExpr 0x559b74ab0d08 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| |     `-ImplicitCastExpr 0x559b74ab0cf0 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x559b74ab0cb8 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab0888 'list' 'sys_dlist_t *'
| `-FullComment 0x559b74b55c20 <line:185:3, line:189:14>
|   |-ParagraphComment 0x559b74b55980 <line:185:3>
|   | `-TextComment 0x559b74b55950 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74b559a0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559b74b55a00 <col:10, col:44>
|   |   `-TextComment 0x559b74b559d0 <col:10, col:44> Text=" initialize list to its empty state"
|   |-ParagraphComment 0x559b74b55a50 <line:187:3>
|   | `-TextComment 0x559b74b55a20 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b55a70 <col:4, col:37> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74b55b00 <col:15, col:37>
|   |   `-TextComment 0x559b74b55ad0 <col:15, col:37> Text=" the doubly-linked list"
|   |-ParagraphComment 0x559b74b55b50 <line:189:3>
|   | `-TextComment 0x559b74b55b20 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74b55b70 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74b55bd0 <col:11, col:14>
|       `-TextComment 0x559b74b55ba0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74ab0e80 <line:208:1, line:212:1> line:208:20 used sys_dnode_init 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559b74ab0db8 <col:35, col:48> col:48 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559b74ab4898 <line:209:1, line:212:1>
| | |-BinaryOperator 0x559b74ab46c0 <line:210:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| | | |-MemberExpr 0x559b74ab45f0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:210:2, col:8> 'struct _dnode *' lvalue .next 0x559b74ab0180
| | | | `-MemberExpr 0x559b74ab45a0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| | | |   `-ImplicitCastExpr 0x559b74ab0f50 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x559b74ab0f28 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x559b74ab0db8 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x559b74ab46a8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| | |   `-ParenExpr 0x559b74ab4688 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x559b74ab4660 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x559b74ab4628 <col:23> 'int' 0
| | `-BinaryOperator 0x559b74ab4848 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| |   |-MemberExpr 0x559b74ab4778 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, col:8> 'struct _dnode *' lvalue .prev 0x559b74ab0448
| |   | `-MemberExpr 0x559b74ab4728 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| |   |   `-ImplicitCastExpr 0x559b74ab4710 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x559b74ab46e8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x559b74ab0db8 'node' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x559b74ab4830 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     `-ParenExpr 0x559b74ab4810 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x559b74ab47e8 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x559b74ab47b0 <col:23> 'int' 0
| `-FullComment 0x559b74b55f60 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:201:3, line:205:14>
|   |-ParagraphComment 0x559b74b55cc0 <line:201:3>
|   | `-TextComment 0x559b74b55c90 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74b55ce0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x559b74b55d40 <col:10, col:57>
|   |   `-TextComment 0x559b74b55d10 <col:10, col:57> Text=" initialize node to its state when not in a list"
|   |-ParagraphComment 0x559b74b55d90 <line:203:3>
|   | `-TextComment 0x559b74b55d60 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b55db0 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x559b74b55e40 <col:15, col:23>
|   |   `-TextComment 0x559b74b55e10 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x559b74b55e90 <line:205:3>
|   | `-TextComment 0x559b74b55e60 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74b55eb0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74b55f10 <col:11, col:14>
|       `-TextComment 0x559b74b55ee0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74ab4a30 <line:222:1, line:225:1> line:222:20 sys_dnode_is_linked 'bool (const sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559b74ab4928 <col:40, col:59> col:59 used node 'const sys_dnode_t *'
| |-CompoundStmt 0x559b74ab4cd8 <line:223:1, line:225:1>
| | `-ReturnStmt 0x559b74ab4c90 <line:224:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ImplicitCastExpr 0x559b74ab4c78 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x559b74ab4c50 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       |-ImplicitCastExpr 0x559b74ab4c20 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x559b74ab4b68 <col:9, col:15> 'struct _dnode *const' lvalue .next 0x559b74ab0180
| |       |   `-MemberExpr 0x559b74ab4b18 <col:9, col:15> 'const union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| |       |     `-ImplicitCastExpr 0x559b74ab4b00 <col:9> 'const sys_dnode_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x559b74ab4ad8 <col:9> 'const sys_dnode_t *' lvalue ParmVar 0x559b74ab4928 'node' 'const sys_dnode_t *'
| |       `-ImplicitCastExpr 0x559b74ab4c38 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <BitCast>
| |         `-ParenExpr 0x559b74ab4c00 <col:14, col:24> 'void *'
| |           `-CStyleCastExpr 0x559b74ab4bd8 <col:15, col:23> 'void *' <NullToPointer>
| |             `-IntegerLiteral 0x559b74ab4ba0 <col:23> 'int' 0
| `-FullComment 0x559b74c0b9c0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:215:3, line:219:65>
|   |-ParagraphComment 0x559b74b56000 <line:215:3>
|   | `-TextComment 0x559b74b55fd0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74b56020 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c0b7a0 <col:10, col:49>
|   |   `-TextComment 0x559b74b56050 <col:10, col:49> Text=" check if a node is a member of any list"
|   |-ParagraphComment 0x559b74c0b7f0 <line:217:3>
|   | `-TextComment 0x559b74c0b7c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0b810 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0b8a0 <col:15, col:23>
|   |   `-TextComment 0x559b74c0b870 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x559b74c0b8f0 <line:219:3>
|   | `-TextComment 0x559b74c0b8c0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0b910 <col:4, col:65> Name="return"
|     `-ParagraphComment 0x559b74c0b970 <col:11, col:65>
|       `-TextComment 0x559b74c0b940 <col:11, col:65> Text=" true if node is linked into a list, false if it is not"
|-FunctionDecl 0x559b74ab4e80 <line:236:1, line:239:1> line:236:20 sys_dlist_is_head 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559b74ab4d00 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x559b74ab4d70 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559b74ab50d8 <line:237:1, line:239:1>
| | `-ReturnStmt 0x559b74ab5090 <line:238:2, col:23>
| |   `-ImplicitCastExpr 0x559b74ab5078 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x559b74ab5050 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x559b74ab5020 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x559b74ab4fc0 <col:9, col:15> 'struct _dnode *' lvalue .head 0x559b74ab0110
| |       |   `-MemberExpr 0x559b74ab4f70 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| |       |     `-ImplicitCastExpr 0x559b74ab4f58 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x559b74ab4f30 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab4d00 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x559b74ab5038 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x559b74ab4ff8 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x559b74ab4d70 'node' 'sys_dnode_t *'
| `-FullComment 0x559b74c0bde0 <line:228:3, line:233:52>
|   |-ParagraphComment 0x559b74c0ba60 <line:228:3>
|   | `-TextComment 0x559b74c0ba30 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0ba80 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559b74c0bae0 <col:10, col:44>
|   |   `-TextComment 0x559b74c0bab0 <col:10, col:44> Text=" check if a node is the list's head"
|   |-ParagraphComment 0x559b74c0bb30 <line:230:3>
|   | `-TextComment 0x559b74c0bb00 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0bb50 <col:4, line:231:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0bc00 <line:230:15, line:231:3>
|   |   |-TextComment 0x559b74c0bbb0 <line:230:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x559b74c0bbd0 <line:231:3> Text=" "
|   |-ParamCommandComment 0x559b74c0bc20 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559b74c0bcb0 <col:15, col:32>
|   |   `-TextComment 0x559b74c0bc80 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x559b74c0bd00 <line:233:3>
|   | `-TextComment 0x559b74c0bcd0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0bd20 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x559b74c0bd80 <col:11, col:52>
|       `-TextComment 0x559b74c0bd50 <col:11, col:52> Text=" true if node is the head, false otherwise"
|-FunctionDecl 0x559b74ab5200 <line:250:1, line:253:1> line:250:20 sys_dlist_is_tail 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559b74ab5100 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x559b74ab5170 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559b74ab5458 <line:251:1, line:253:1>
| | `-ReturnStmt 0x559b74ab5410 <line:252:2, col:23>
| |   `-ImplicitCastExpr 0x559b74ab53f8 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x559b74ab53d0 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x559b74ab53a0 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x559b74ab5340 <col:9, col:15> 'struct _dnode *' lvalue .tail 0x559b74ab03d8
| |       |   `-MemberExpr 0x559b74ab52f0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| |       |     `-ImplicitCastExpr 0x559b74ab52d8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x559b74ab52b0 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab5100 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x559b74ab53b8 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x559b74ab5378 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x559b74ab5170 'node' 'sys_dnode_t *'
| `-FullComment 0x559b74c0c200 <line:242:3, line:247:52>
|   |-ParagraphComment 0x559b74c0be80 <line:242:3>
|   | `-TextComment 0x559b74c0be50 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0bea0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559b74c0bf00 <col:10, col:44>
|   |   `-TextComment 0x559b74c0bed0 <col:10, col:44> Text=" check if a node is the list's tail"
|   |-ParagraphComment 0x559b74c0bf50 <line:244:3>
|   | `-TextComment 0x559b74c0bf20 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0bf70 <col:4, line:245:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0c020 <line:244:15, line:245:3>
|   |   |-TextComment 0x559b74c0bfd0 <line:244:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x559b74c0bff0 <line:245:3> Text=" "
|   |-ParamCommandComment 0x559b74c0c040 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559b74c0c0d0 <col:15, col:32>
|   |   `-TextComment 0x559b74c0c0a0 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x559b74c0c120 <line:247:3>
|   | `-TextComment 0x559b74c0c0f0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0c140 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x559b74c0c1a0 <col:11, col:52>
|       `-TextComment 0x559b74c0c170 <col:11, col:52> Text=" true if node is the tail, false otherwise"
|-FunctionDecl 0x559b74ab59c0 <line:263:1, line:266:1> line:263:20 used sys_dlist_is_empty 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x559b74ab5480 <col:39, col:52> col:52 used list 'sys_dlist_t *'
| |-CompoundStmt 0x559b74ab5c08 <line:264:1, line:266:1>
| | `-ReturnStmt 0x559b74ab5bc8 <line:265:2, col:23>
| |   `-ImplicitCastExpr 0x559b74ab5bb0 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x559b74ab5b88 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x559b74ab5b58 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x559b74ab5af8 <col:9, col:15> 'struct _dnode *' lvalue .head 0x559b74ab0110
| |       |   `-MemberExpr 0x559b74ab5aa8 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| |       |     `-ImplicitCastExpr 0x559b74ab5a90 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x559b74ab5a68 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab5480 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x559b74ab5b70 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x559b74ab5b30 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab5480 'list' 'sys_dlist_t *'
| `-FullComment 0x559b74c0c540 <line:256:3, line:260:41>
|   |-ParagraphComment 0x559b74c0c2a0 <line:256:3>
|   | `-TextComment 0x559b74c0c270 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0c2c0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x559b74c0c320 <col:10, col:36>
|   |   `-TextComment 0x559b74c0c2f0 <col:10, col:36> Text=" check if the list is empty"
|   |-ParagraphComment 0x559b74c0c370 <line:258:3>
|   | `-TextComment 0x559b74c0c340 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0c390 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0c420 <col:15, col:51>
|   |   `-TextComment 0x559b74c0c3f0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x559b74c0c470 <line:260:3>
|   | `-TextComment 0x559b74c0c440 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0c490 <col:4, col:41> Name="return"
|     `-ParagraphComment 0x559b74c0c4f0 <col:11, col:41>
|       `-TextComment 0x559b74c0c4c0 <col:11, col:41> Text=" true if empty, false otherwise"
|-FunctionDecl 0x559b74ab5cb8 <line:278:1, line:281:1> line:278:20 sys_dlist_has_multiple_nodes 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x559b74ab5c30 <col:49, col:62> col:62 used list 'sys_dlist_t *'
| |-CompoundStmt 0x559b74ab5fa8 <line:279:1, line:281:1>
| | `-ReturnStmt 0x559b74ab5f60 <line:280:2, col:29>
| |   `-ImplicitCastExpr 0x559b74ab5f48 <col:9, col:29> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x559b74ab5f20 <col:9, col:29> 'int' '!='
| |       |-ImplicitCastExpr 0x559b74ab5ef0 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x559b74ab5df0 <col:9, col:15> 'struct _dnode *' lvalue .head 0x559b74ab0110
| |       |   `-MemberExpr 0x559b74ab5da0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| |       |     `-ImplicitCastExpr 0x559b74ab5d88 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x559b74ab5d60 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab5c30 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x559b74ab5f08 <col:23, col:29> 'struct _dnode *' <LValueToRValue>
| |         `-MemberExpr 0x559b74ab5eb8 <col:23, col:29> 'struct _dnode *' lvalue .tail 0x559b74ab03d8
| |           `-MemberExpr 0x559b74ab5e68 <col:23, col:29> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| |             `-ImplicitCastExpr 0x559b74ab5e50 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |               `-DeclRefExpr 0x559b74ab5e28 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab5c30 'list' 'sys_dlist_t *'
| `-FullComment 0x559b74c0c8e0 <line:269:3, line:275:50>
|   |-ParagraphComment 0x559b74c0c5e0 <line:269:3>
|   | `-TextComment 0x559b74c0c5b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0c600 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x559b74c0c660 <col:10, col:45>
|   |   `-TextComment 0x559b74c0c630 <col:10, col:45> Text=" check if more than one node present"
|   |-ParagraphComment 0x559b74c0c6b0 <line:271:3, col:62>
|   | `-TextComment 0x559b74c0c680 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c0c700 <line:273:3>
|   | `-TextComment 0x559b74c0c6d0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0c720 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0c7b0 <col:15, col:51>
|   |   `-TextComment 0x559b74c0c780 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x559b74c0c800 <line:275:3>
|   | `-TextComment 0x559b74c0c7d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0c820 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x559b74c0c880 <col:11, col:50>
|       `-TextComment 0x559b74c0c850 <col:11, col:50> Text=" true if multiple nodes, false otherwise"
|-FunctionDecl 0x559b74ab60d0 <line:291:1, line:294:1> line:291:28 used sys_dlist_peek_head 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x559b74ab5fd0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x559b74ab6488 <line:292:1, line:294:1>
| | `-ReturnStmt 0x559b74ab6448 <line:293:2, col:49>
| |   `-ConditionalOperator 0x559b74ab6418 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x559b74ab63d0 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x559b74ab6240 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x559b74ab6228 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x559b74ab6178 <col:9> 'bool (sys_dlist_t *)' Function 0x559b74ab59c0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x559b74ab6270 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x559b74ab61a0 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab5fd0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x559b74ab6400 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x559b74ab62e8 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x559b74ab62c0 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x559b74ab6288 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x559b74ab63e8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:293:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x559b74ab6398 <col:43, col:49> 'struct _dnode *' lvalue .head 0x559b74ab0110
| |         `-MemberExpr 0x559b74ab6348 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| |           `-ImplicitCastExpr 0x559b74ab6330 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x559b74ab6308 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab5fd0 'list' 'sys_dlist_t *'
| `-FullComment 0x559b74c0cc20 <line:284:3, line:288:63>
|   |-ParagraphComment 0x559b74c0c980 <line:284:3>
|   | `-TextComment 0x559b74c0c950 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0c9a0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x559b74c0ca00 <col:10, col:54>
|   |   `-TextComment 0x559b74c0c9d0 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x559b74c0ca50 <line:286:3>
|   | `-TextComment 0x559b74c0ca20 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0ca70 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0cb00 <col:15, col:51>
|   |   `-TextComment 0x559b74c0cad0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x559b74c0cb50 <line:288:3>
|   | `-TextComment 0x559b74c0cb20 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0cb70 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x559b74c0cbd0 <col:11, col:63>
|       `-TextComment 0x559b74c0cba0 <col:11, col:63> Text=" a pointer to the head element, NULL if list is empty"
|-FunctionDecl 0x559b74ab6538 <line:306:1, line:309:1> line:306:28 sys_dlist_peek_head_not_empty 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x559b74ab64b0 <col:58, col:71> col:71 used list 'sys_dlist_t *'
| |-CompoundStmt 0x559b74ab6708 <line:307:1, line:309:1>
| | `-ReturnStmt 0x559b74ab66c0 <line:308:2, col:15>
| |   `-ImplicitCastExpr 0x559b74ab66a8 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |     `-MemberExpr 0x559b74ab6670 <col:9, col:15> 'struct _dnode *' lvalue .head 0x559b74ab0110
| |       `-MemberExpr 0x559b74ab6620 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| |         `-ImplicitCastExpr 0x559b74ab6608 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |           `-DeclRefExpr 0x559b74ab65e0 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab64b0 'list' 'sys_dlist_t *'
| `-FullComment 0x559b74c0cfc0 <line:297:3, line:303:40>
|   |-ParagraphComment 0x559b74c0ccc0 <line:297:3>
|   | `-TextComment 0x559b74c0cc90 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0cce0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x559b74c0cd40 <col:10, col:54>
|   |   `-TextComment 0x559b74c0cd10 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x559b74c0cd90 <line:299:3, col:42>
|   | `-TextComment 0x559b74c0cd60 <col:3, col:42> Text=" The list must be known to be non-empty."
|   |-ParagraphComment 0x559b74c0cde0 <line:301:3>
|   | `-TextComment 0x559b74c0cdb0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0ce00 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0ce90 <col:15, col:51>
|   |   `-TextComment 0x559b74c0ce60 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x559b74c0cee0 <line:303:3>
|   | `-TextComment 0x559b74c0ceb0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0cf00 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x559b74c0cf60 <col:11, col:40>
|       `-TextComment 0x559b74c0cf30 <col:11, col:40> Text=" a pointer to the head element"
|-FunctionDecl 0x559b74ab68b0 <line:322:1, line:326:1> line:322:28 used sys_dlist_peek_next_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559b74ab6730 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x559b74ab67a0 <line:323:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559b74ab84c8 <line:324:1, line:326:1>
| | `-ReturnStmt 0x559b74ab8480 <line:325:2, col:45>
| |   `-ConditionalOperator 0x559b74ab8450 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x559b74ab82b8 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x559b74ab8290 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x559b74ab8260 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x559b74ab6960 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x559b74ab67a0 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x559b74ab8278 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x559b74ab8228 <col:18, col:24> 'struct _dnode *' lvalue .tail 0x559b74ab03d8
| |     |       `-MemberExpr 0x559b74ab81d8 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| |     |         `-ImplicitCastExpr 0x559b74ab81c0 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x559b74ab6988 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab6730 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x559b74ab8438 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x559b74ab8338 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x559b74ab8310 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x559b74ab82d8 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x559b74ab8420 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:325:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x559b74ab83e8 <col:39, col:45> 'struct _dnode *' lvalue .next 0x559b74ab0180
| |         `-MemberExpr 0x559b74ab8398 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| |           `-ImplicitCastExpr 0x559b74ab8380 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x559b74ab8358 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x559b74ab67a0 'node' 'sys_dnode_t *'
| `-FullComment 0x559b74c0d430 <line:312:3, line:319:78>
|   |-ParagraphComment 0x559b74c0d060 <line:312:3>
|   | `-TextComment 0x559b74c0d030 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0d080 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x559b74c0d0e0 <col:10, col:72>
|   |   `-TextComment 0x559b74c0d0b0 <col:10, col:72> Text=" get a reference to the next item in the list, node is not NULL"
|   |-ParagraphComment 0x559b74c0d130 <line:314:3, col:69>
|   | `-TextComment 0x559b74c0d100 <col:3, col:69> Text=" Faster than sys_dlist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x559b74c0d180 <line:316:3>
|   | `-TextComment 0x559b74c0d150 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0d1a0 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0d250 <line:316:15, line:317:3>
|   |   |-TextComment 0x559b74c0d200 <line:316:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x559b74c0d220 <line:317:3> Text=" "
|   |-ParamCommandComment 0x559b74c0d270 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559b74c0d300 <col:15, col:70>
|   |   `-TextComment 0x559b74c0d2d0 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x559b74c0d350 <line:319:3>
|   | `-TextComment 0x559b74c0d320 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0d370 <col:4, col:78> Name="return"
|     `-ParagraphComment 0x559b74c0d3d0 <col:11, col:78>
|       `-TextComment 0x559b74c0d3a0 <col:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|-FunctionDecl 0x559b74ab85f0 <line:338:1, line:342:1> line:338:28 used sys_dlist_peek_next 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559b74ab84f0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x559b74ab8560 <line:339:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559b74ab8a28 <line:340:1, line:342:1>
| | `-ReturnStmt 0x559b74ab89e0 <line:341:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x559b74ab89b0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x559b74ab87a0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, col:22> 'int'
| |     | `-BinaryOperator 0x559b74ab8778 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x559b74ab8748 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x559b74ab86a0 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x559b74ab8560 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x559b74ab8760 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x559b74ab8728 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x559b74ab8700 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x559b74ab86c8 <col:23> 'int' 0
| |     |-CallExpr 0x559b74ab88b0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x559b74ab8898 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x559b74ab87c0 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x559b74ab68b0 'sys_dlist_peek_next_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x559b74ab88e8 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x559b74ab87e8 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab84f0 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x559b74ab8900 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x559b74ab8810 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x559b74ab8560 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x559b74ab8998 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x559b74ab8978 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x559b74ab8950 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x559b74ab8918 <col:23> 'int' 0
| `-FullComment 0x559b74c0d890 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:329:3, line:335:68>
|   |-ParagraphComment 0x559b74c0d4d0 <line:329:3>
|   | `-TextComment 0x559b74c0d4a0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0d4f0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x559b74c0d550 <col:10, col:54>
|   |   `-TextComment 0x559b74c0d520 <col:10, col:54> Text=" get a reference to the next item in the list"
|   |-ParagraphComment 0x559b74c0d5a0 <line:331:3>
|   | `-TextComment 0x559b74c0d570 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0d5c0 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0d670 <line:331:15, line:332:3>
|   |   |-TextComment 0x559b74c0d620 <line:331:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x559b74c0d640 <line:332:3> Text=" "
|   |-ParamCommandComment 0x559b74c0d690 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559b74c0d720 <col:15, col:70>
|   |   `-TextComment 0x559b74c0d6f0 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x559b74c0d770 <line:334:3>
|   | `-TextComment 0x559b74c0d740 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0d7b0 <col:4, line:335:68> Name="return"
|     `-ParagraphComment 0x559b74c0d830 <line:334:11, line:335:68>
|       |-TextComment 0x559b74c0d7e0 <line:334:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|       `-TextComment 0x559b74c0d800 <line:335:3, col:68> Text=" or NULL (when node comes from reading the head of an empty list)."
|-FunctionDecl 0x559b74ab8b50 <line:356:1, line:360:1> line:356:28 used sys_dlist_peek_prev_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559b74ab8a50 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x559b74ab8ac0 <line:357:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559b74ab8f58 <line:358:1, line:360:1>
| | `-ReturnStmt 0x559b74ab8f10 <line:359:2, col:45>
| |   `-ConditionalOperator 0x559b74ab8ee0 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x559b74ab8d48 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x559b74ab8d20 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x559b74ab8cf0 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x559b74ab8c00 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x559b74ab8ac0 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x559b74ab8d08 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x559b74ab8cb8 <col:18, col:24> 'struct _dnode *' lvalue .head 0x559b74ab0110
| |     |       `-MemberExpr 0x559b74ab8c68 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| |     |         `-ImplicitCastExpr 0x559b74ab8c50 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x559b74ab8c28 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab8a50 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x559b74ab8ec8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x559b74ab8dc8 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x559b74ab8da0 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x559b74ab8d68 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x559b74ab8eb0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:359:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x559b74ab8e78 <col:39, col:45> 'struct _dnode *' lvalue .prev 0x559b74ab0448
| |         `-MemberExpr 0x559b74ab8e28 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| |           `-ImplicitCastExpr 0x559b74ab8e10 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x559b74ab8de8 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x559b74ab8ac0 'node' 'sys_dnode_t *'
| `-FullComment 0x559b74c0dd20 <line:345:3, line:353:10>
|   |-ParagraphComment 0x559b74c0d930 <line:345:3>
|   | `-TextComment 0x559b74c0d900 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0d950 <col:4, col:76> Name="brief"
|   | `-ParagraphComment 0x559b74c0d9b0 <col:10, col:76>
|   |   `-TextComment 0x559b74c0d980 <col:10, col:76> Text=" get a reference to the previous item in the list, node is not NULL"
|   |-ParagraphComment 0x559b74c0da00 <line:347:3, col:69>
|   | `-TextComment 0x559b74c0d9d0 <col:3, col:69> Text=" Faster than sys_dlist_peek_prev() if node is known not to be NULL."
|   |-ParagraphComment 0x559b74c0da50 <line:349:3>
|   | `-TextComment 0x559b74c0da20 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0da70 <col:4, line:350:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0db20 <line:349:15, line:350:3>
|   |   |-TextComment 0x559b74c0dad0 <line:349:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x559b74c0daf0 <line:350:3> Text=" "
|   |-ParamCommandComment 0x559b74c0db40 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559b74c0dbd0 <col:15, col:74>
|   |   `-TextComment 0x559b74c0dba0 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x559b74c0dc20 <line:352:3>
|   | `-TextComment 0x559b74c0dbf0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0dc40 <col:4, line:353:10> Name="return"
|     `-ParagraphComment 0x559b74c0dcc0 <line:352:11, line:353:10>
|       |-TextComment 0x559b74c0dc70 <line:352:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       `-TextComment 0x559b74c0dc90 <line:353:3, col:10> Text="	   tail"
|-FunctionDecl 0x559b74ab9080 <line:373:1, line:377:1> line:373:28 sys_dlist_peek_prev 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559b74ab8f80 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x559b74ab8ff0 <line:374:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559b74ab9468 <line:375:1, line:377:1>
| | `-ReturnStmt 0x559b74ab9428 <line:376:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x559b74ab93f8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x559b74ab9248 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, col:22> 'int'
| |     | `-BinaryOperator 0x559b74ab9220 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x559b74ab91f0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x559b74ab9130 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x559b74ab8ff0 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x559b74ab9208 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x559b74ab91d0 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x559b74ab9190 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x559b74ab9158 <col:23> 'int' 0
| |     |-CallExpr 0x559b74ab92f8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x559b74ab92e0 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x559b74ab9268 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x559b74ab8b50 'sys_dlist_peek_prev_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x559b74ab9330 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x559b74ab9290 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab8f80 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x559b74ab9348 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x559b74ab92b8 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x559b74ab8ff0 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x559b74ab93e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x559b74ab93c0 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x559b74ab9398 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x559b74ab9360 <col:23> 'int' 0
| `-FullComment 0x559b74c0e190 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:363:3, line:370:13>
|   |-ParagraphComment 0x559b74c0ddc0 <line:363:3>
|   | `-TextComment 0x559b74c0dd90 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0dde0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x559b74c0de40 <col:10, col:58>
|   |   `-TextComment 0x559b74c0de10 <col:10, col:58> Text=" get a reference to the previous item in the list"
|   |-ParagraphComment 0x559b74c0de90 <line:365:3>
|   | `-TextComment 0x559b74c0de60 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0deb0 <col:4, line:366:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0df60 <line:365:15, line:366:3>
|   |   |-TextComment 0x559b74c0df10 <line:365:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x559b74c0df30 <line:366:3> Text=" "
|   |-ParamCommandComment 0x559b74c0df80 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559b74c0e010 <col:15, col:74>
|   |   `-TextComment 0x559b74c0dfe0 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x559b74c0e060 <line:368:3>
|   | `-TextComment 0x559b74c0e030 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0e080 <col:4, line:370:13> Name="return"
|     `-ParagraphComment 0x559b74c0e130 <line:368:11, line:370:13>
|       |-TextComment 0x559b74c0e0b0 <line:368:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       |-TextComment 0x559b74c0e0d0 <line:369:3, col:70> Text=" 	   tail or NULL (when node comes from reading the head of an empty"
|       `-TextComment 0x559b74c0e0f0 <line:370:3, col:13> Text=" 	   list)."
|-FunctionDecl 0x559b74ab9518 <line:387:1, line:390:1> line:387:28 sys_dlist_peek_tail 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x559b74ab9490 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x559b74ab9878 <line:388:1, line:390:1>
| | `-ReturnStmt 0x559b74ab9830 <line:389:2, col:49>
| |   `-ConditionalOperator 0x559b74ab9800 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x559b74ab97b8 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x559b74ab9628 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x559b74ab9610 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x559b74ab95c0 <col:9> 'bool (sys_dlist_t *)' Function 0x559b74ab59c0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x559b74ab9658 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x559b74ab95e8 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab9490 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x559b74ab97e8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x559b74ab96d0 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x559b74ab96a8 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x559b74ab9670 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x559b74ab97d0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:389:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x559b74ab9780 <col:43, col:49> 'struct _dnode *' lvalue .tail 0x559b74ab03d8
| |         `-MemberExpr 0x559b74ab9730 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| |           `-ImplicitCastExpr 0x559b74ab9718 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x559b74ab96f0 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab9490 'list' 'sys_dlist_t *'
| `-FullComment 0x559b74c0e4d0 <line:380:3, line:384:63>
|   |-ParagraphComment 0x559b74c0e230 <line:380:3>
|   | `-TextComment 0x559b74c0e200 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0e250 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x559b74c0e2b0 <col:10, col:54>
|   |   `-TextComment 0x559b74c0e280 <col:10, col:54> Text=" get a reference to the tail item in the list"
|   |-ParagraphComment 0x559b74c0e300 <line:382:3>
|   | `-TextComment 0x559b74c0e2d0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0e320 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0e3b0 <col:15, col:51>
|   |   `-TextComment 0x559b74c0e380 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x559b74c0e400 <line:384:3>
|   | `-TextComment 0x559b74c0e3d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0e420 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x559b74c0e480 <col:11, col:63>
|       `-TextComment 0x559b74c0e450 <col:11, col:63> Text=" a pointer to the tail element, NULL if list is empty"
|-FunctionDecl 0x559b74ab9a20 <line:403:1, line:410:1> line:403:20 used sys_dlist_append 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559b74ab98a0 <col:37, col:50> col:50 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x559b74ab9910 <col:56, col:69> col:69 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559b74aba0f8 <line:404:1, line:410:1>
| | |-BinaryOperator 0x559b74ab9bd8 <line:405:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x559b74ab9b60 <col:2, col:8> 'struct _dnode *' lvalue .next 0x559b74ab0180
| | | | `-MemberExpr 0x559b74ab9b10 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| | | |   `-ImplicitCastExpr 0x559b74ab9af8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x559b74ab9ad0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x559b74ab9910 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x559b74ab9bc0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x559b74ab9b98 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab98a0 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x559b74ab9da8 <line:406:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x559b74ab9c90 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x559b74ab0448
| | | | `-MemberExpr 0x559b74ab9c40 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| | | |   `-ImplicitCastExpr 0x559b74ab9c28 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x559b74ab9c00 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x559b74ab9910 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x559b74ab9d90 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x559b74ab9d58 <col:15, col:21> 'struct _dnode *' lvalue .tail 0x559b74ab03d8
| | |     `-MemberExpr 0x559b74ab9d08 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| | |       `-ImplicitCastExpr 0x559b74ab9cf0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x559b74ab9cc8 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab98a0 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x559b74ab9f78 <line:408:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x559b74ab9f00 <col:2, col:14> 'struct _dnode *' lvalue .next 0x559b74ab0180
| | | | `-MemberExpr 0x559b74ab9eb0 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| | | |   `-ImplicitCastExpr 0x559b74ab9e98 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x559b74ab9e60 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x559b74ab03d8
| | | |       `-MemberExpr 0x559b74ab9e10 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| | | |         `-ImplicitCastExpr 0x559b74ab9df8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x559b74ab9dd0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab98a0 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x559b74ab9f60 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x559b74ab9f38 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x559b74ab9910 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x559b74aba0a8 <line:409:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x559b74aba030 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x559b74ab03d8
| |   | `-MemberExpr 0x559b74ab9fe0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| |   |   `-ImplicitCastExpr 0x559b74ab9fc8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x559b74ab9fa0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x559b74ab98a0 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x559b74aba090 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x559b74aba068 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x559b74ab9910 'node' 'sys_dnode_t *'
| `-FullComment 0x559b74c0e940 <line:393:3, line:400:14>
|   |-ParagraphComment 0x559b74c0e570 <line:393:3>
|   | `-TextComment 0x559b74c0e540 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0e590 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x559b74c0e5f0 <col:10, col:34>
|   |   `-TextComment 0x559b74c0e5c0 <col:10, col:34> Text=" add node to tail of list"
|   |-ParagraphComment 0x559b74c0e640 <line:395:3, col:62>
|   | `-TextComment 0x559b74c0e610 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c0e690 <line:397:3>
|   | `-TextComment 0x559b74c0e660 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0e6b0 <col:4, line:398:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0e760 <line:397:15, line:398:3>
|   |   |-TextComment 0x559b74c0e710 <line:397:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x559b74c0e730 <line:398:3> Text=" "
|   |-ParamCommandComment 0x559b74c0e780 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559b74c0e810 <col:15, col:36>
|   |   `-TextComment 0x559b74c0e7e0 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x559b74c0e860 <line:400:3>
|   | `-TextComment 0x559b74c0e830 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0e880 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c0e8e0 <col:11, col:14>
|       `-TextComment 0x559b74c0e8b0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74aba270 <line:423:1, line:430:1> line:423:20 sys_dlist_prepend 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559b74aba138 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x559b74aba1e0 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559b74aba948 <line:424:1, line:430:1>
| | |-BinaryOperator 0x559b74aba4c8 <line:425:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x559b74aba3b0 <col:2, col:8> 'struct _dnode *' lvalue .next 0x559b74ab0180
| | | | `-MemberExpr 0x559b74aba360 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| | | |   `-ImplicitCastExpr 0x559b74aba348 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x559b74aba320 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x559b74aba1e0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x559b74aba4b0 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x559b74aba478 <col:15, col:21> 'struct _dnode *' lvalue .head 0x559b74ab0110
| | |     `-MemberExpr 0x559b74aba428 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| | |       `-ImplicitCastExpr 0x559b74aba410 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x559b74aba3e8 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x559b74aba138 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x559b74aba5f8 <line:426:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x559b74aba580 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x559b74ab0448
| | | | `-MemberExpr 0x559b74aba530 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| | | |   `-ImplicitCastExpr 0x559b74aba518 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x559b74aba4f0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x559b74aba1e0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x559b74aba5e0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x559b74aba5b8 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x559b74aba138 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x559b74aba7c8 <line:428:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x559b74aba750 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x559b74ab0448
| | | | `-MemberExpr 0x559b74aba700 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| | | |   `-ImplicitCastExpr 0x559b74aba6e8 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x559b74aba6b0 <col:2, col:8> 'struct _dnode *' lvalue .head 0x559b74ab0110
| | | |       `-MemberExpr 0x559b74aba660 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| | | |         `-ImplicitCastExpr 0x559b74aba648 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x559b74aba620 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x559b74aba138 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x559b74aba7b0 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x559b74aba788 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x559b74aba1e0 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x559b74aba8f8 <line:429:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x559b74aba880 <col:2, col:8> 'struct _dnode *' lvalue .head 0x559b74ab0110
| |   | `-MemberExpr 0x559b74aba830 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| |   |   `-ImplicitCastExpr 0x559b74aba818 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x559b74aba7f0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x559b74aba138 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x559b74aba8e0 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x559b74aba8b8 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x559b74aba1e0 'node' 'sys_dnode_t *'
| `-FullComment 0x559b74c0edb0 <line:413:3, line:420:14>
|   |-ParagraphComment 0x559b74c0e9e0 <line:413:3>
|   | `-TextComment 0x559b74c0e9b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0ea00 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x559b74c0ea60 <col:10, col:34>
|   |   `-TextComment 0x559b74c0ea30 <col:10, col:34> Text=" add node to head of list"
|   |-ParagraphComment 0x559b74c0eab0 <line:415:3, col:62>
|   | `-TextComment 0x559b74c0ea80 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c0eb00 <line:417:3>
|   | `-TextComment 0x559b74c0ead0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0eb20 <col:4, line:418:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0ebd0 <line:417:15, line:418:3>
|   |   |-TextComment 0x559b74c0eb80 <line:417:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x559b74c0eba0 <line:418:3> Text=" "
|   |-ParamCommandComment 0x559b74c0ebf0 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559b74c0ec80 <col:15, col:36>
|   |   `-TextComment 0x559b74c0ec50 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x559b74c0ecd0 <line:420:3>
|   | `-TextComment 0x559b74c0eca0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0ecf0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c0ed50 <col:11, col:14>
|       `-TextComment 0x559b74c0ed20 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74abaad0 <line:440:1, line:446:1> line:440:20 used sys_dlist_insert 'void (sys_dnode_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559b74aba988 <col:37, col:50> col:50 used successor 'sys_dnode_t *'
| |-ParmVarDecl 0x559b74aba9f8 <col:61, col:74> col:74 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559b74abb1a8 <line:441:1, line:446:1>
| | |-BinaryOperator 0x559b74abad28 <line:442:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x559b74abac10 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x559b74ab0448
| | | | `-MemberExpr 0x559b74ababc0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| | | |   `-ImplicitCastExpr 0x559b74ababa8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x559b74abab80 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x559b74aba9f8 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x559b74abad10 <col:15, col:26> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x559b74abacd8 <col:15, col:26> 'struct _dnode *' lvalue .prev 0x559b74ab0448
| | |     `-MemberExpr 0x559b74abac88 <col:15, col:26> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| | |       `-ImplicitCastExpr 0x559b74abac70 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x559b74abac48 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x559b74aba988 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x559b74abae58 <line:443:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x559b74abade0 <col:2, col:8> 'struct _dnode *' lvalue .next 0x559b74ab0180
| | | | `-MemberExpr 0x559b74abad90 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| | | |   `-ImplicitCastExpr 0x559b74abad78 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x559b74abad50 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x559b74aba9f8 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x559b74abae40 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x559b74abae18 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x559b74aba988 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x559b74abb028 <line:444:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x559b74abafb0 <col:2, col:19> 'struct _dnode *' lvalue .next 0x559b74ab0180
| | | | `-MemberExpr 0x559b74abaf60 <col:2, col:19> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| | | |   `-ImplicitCastExpr 0x559b74abaf48 <col:2, col:13> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x559b74abaf10 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x559b74ab0448
| | | |       `-MemberExpr 0x559b74abaec0 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| | | |         `-ImplicitCastExpr 0x559b74abaea8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x559b74abae80 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x559b74aba988 'successor' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x559b74abb010 <col:26> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x559b74abafe8 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x559b74aba9f8 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x559b74abb158 <line:445:2, col:20> 'struct _dnode *' '='
| |   |-MemberExpr 0x559b74abb0e0 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x559b74ab0448
| |   | `-MemberExpr 0x559b74abb090 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| |   |   `-ImplicitCastExpr 0x559b74abb078 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x559b74abb050 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x559b74aba988 'successor' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x559b74abb140 <col:20> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x559b74abb118 <col:20> 'sys_dnode_t *' lvalue ParmVar 0x559b74aba9f8 'node' 'sys_dnode_t *'
| `-FullComment 0x559b74c0f140 <line:433:3, line:438:36>
|   |-ParagraphComment 0x559b74c0ee50 <line:433:3>
|   | `-TextComment 0x559b74c0ee20 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0ee70 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x559b74c0eed0 <col:10, col:35>
|   |   `-TextComment 0x559b74c0eea0 <col:10, col:35> Text=" Insert a node into a list"
|   |-ParagraphComment 0x559b74c0ef20 <line:435:3, col:52>
|   | `-TextComment 0x559b74c0eef0 <col:3, col:52> Text=" Insert a node before a specified node in a dlist."
|   |-ParagraphComment 0x559b74c0ef70 <line:437:3>
|   | `-TextComment 0x559b74c0ef40 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0ef90 <col:4, line:438:3> [in] implicitly Param="successor" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0f040 <line:437:20, line:438:3>
|   |   |-TextComment 0x559b74c0eff0 <line:437:20, col:69> Text=" the position before which "node" will be inserted"
|   |   `-TextComment 0x559b74c0f010 <line:438:3> Text=" "
|   `-ParamCommandComment 0x559b74c0f060 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x559b74c0f0f0 <col:15, col:36>
|       `-TextComment 0x559b74c0f0c0 <col:15, col:36> Text=" the element to insert"
|-FunctionDecl 0x559b74abb6d0 <line:465:1, line:482:1> line:465:20 sys_dlist_insert_at 'void (sys_dlist_t *, sys_dnode_t *, int (*)(sys_dnode_t *, void *), void *)' static inline
| |-ParmVarDecl 0x559b74abb200 <col:40, col:53> col:53 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x559b74abb270 <col:59, col:72> col:72 used node 'sys_dnode_t *'
| |-ParmVarDecl 0x559b74abb510 <line:466:2, col:43> col:8 used cond 'int (*)(sys_dnode_t *, void *)'
| |-ParmVarDecl 0x559b74abb588 <col:46, col:52> col:52 used data 'void *'
| |-CompoundStmt 0x559b74ac1398 <line:467:1, line:482:1>
| | `-IfStmt 0x559b74ac1330 <line:468:2, line:481:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-CallExpr 0x559b74abb7f8 <line:468:6, col:29> 'bool'
| |   | |-ImplicitCastExpr 0x559b74abb7e0 <col:6> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x559b74abb790 <col:6> 'bool (sys_dlist_t *)' Function 0x559b74ab59c0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |   | `-ImplicitCastExpr 0x559b74abb828 <col:25> 'sys_dlist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x559b74abb7b8 <col:25> 'sys_dlist_t *' lvalue ParmVar 0x559b74abb200 'list' 'sys_dlist_t *'
| |   |-CompoundStmt 0x559b74abb998 <col:32, line:470:2>
| |   | `-CallExpr 0x559b74abb930 <line:469:3, col:30> 'void'
| |   |   |-ImplicitCastExpr 0x559b74abb918 <col:3> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x559b74abb840 <col:3> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x559b74ab9a20 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |   |   |-ImplicitCastExpr 0x559b74abb968 <col:20> 'sys_dlist_t *' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x559b74abb868 <col:20> 'sys_dlist_t *' lvalue ParmVar 0x559b74abb200 'list' 'sys_dlist_t *'
| |   |   `-ImplicitCastExpr 0x559b74abb980 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x559b74abb890 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x559b74abb270 'node' 'sys_dnode_t *'
| |   `-CompoundStmt 0x559b74ac1308 <line:470:9, line:481:2>
| |     |-DeclStmt 0x559b74abbb28 <line:471:3, col:47>
| |     | `-VarDecl 0x559b74abb9c0 <col:3, col:46> col:16 used pos 'sys_dnode_t *' cinit
| |     |   `-CallExpr 0x559b74abbae0 <col:22, col:46> 'sys_dnode_t *'
| |     |     |-ImplicitCastExpr 0x559b74abbac8 <col:22> 'sys_dnode_t *(*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x559b74abba20 <col:22> 'sys_dnode_t *(sys_dlist_t *)' Function 0x559b74ab60d0 'sys_dlist_peek_head' 'sys_dnode_t *(sys_dlist_t *)'
| |     |     `-ImplicitCastExpr 0x559b74abbb10 <col:42> 'sys_dlist_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x559b74abba48 <col:42> 'sys_dlist_t *' lvalue ParmVar 0x559b74abb200 'list' 'sys_dlist_t *'
| |     |-WhileStmt 0x559b74abbf48 <line:473:3, line:475:3>
| |     | |-<<<NULL>>>
| |     | |-BinaryOperator 0x559b74abbdc0 <line:473:10, col:48> 'int' '&&'
| |     | | |-ParenExpr 0x559b74abbc40 <col:10, col:22> 'int'
| |     | | | `-BinaryOperator 0x559b74abbc18 <col:11, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     | | |   |-ImplicitCastExpr 0x559b74abbbe8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:11> 'sys_dnode_t *' <LValueToRValue>
| |     | | |   | `-DeclRefExpr 0x559b74abbb40 <col:11> 'sys_dnode_t *' lvalue Var 0x559b74abb9c0 'pos' 'sys_dnode_t *'
| |     | | |   `-ImplicitCastExpr 0x559b74abbc00 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     | | |     `-ParenExpr 0x559b74abbbc8 <col:14, col:24> 'void *'
| |     | | |       `-CStyleCastExpr 0x559b74abbba0 <col:15, col:23> 'void *' <NullToPointer>
| |     | | |         `-IntegerLiteral 0x559b74abbb68 <col:23> 'int' 0
| |     | | `-ParenExpr 0x559b74abbda0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:27, col:48> 'int'
| |     | |   `-BinaryOperator 0x559b74abbd78 <col:28, col:47> 'int' '=='
| |     | |     |-CallExpr 0x559b74abbcf0 <col:28, col:42> 'int'
| |     | |     | |-ImplicitCastExpr 0x559b74abbcd8 <col:28> 'int (*)(sys_dnode_t *, void *)' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x559b74abbc60 <col:28> 'int (*)(sys_dnode_t *, void *)' lvalue ParmVar 0x559b74abb510 'cond' 'int (*)(sys_dnode_t *, void *)'
| |     | |     | |-ImplicitCastExpr 0x559b74abbd28 <col:33> 'sys_dnode_t *' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x559b74abbc88 <col:33> 'sys_dnode_t *' lvalue Var 0x559b74abb9c0 'pos' 'sys_dnode_t *'
| |     | |     | `-ImplicitCastExpr 0x559b74abbd40 <col:38> 'void *' <LValueToRValue>
| |     | |     |   `-DeclRefExpr 0x559b74abbcb0 <col:38> 'void *' lvalue ParmVar 0x559b74abb588 'data' 'void *'
| |     | |     `-IntegerLiteral 0x559b74abbd58 <col:47> 'int' 0
| |     | `-CompoundStmt 0x559b74abbf30 <col:51, line:475:3>
| |     |   `-BinaryOperator 0x559b74abbf08 <line:474:4, col:39> 'sys_dnode_t *' '='
| |     |     |-DeclRefExpr 0x559b74abbde8 <col:4> 'sys_dnode_t *' lvalue Var 0x559b74abb9c0 'pos' 'sys_dnode_t *'
| |     |     `-CallExpr 0x559b74abbea0 <col:10, col:39> 'sys_dnode_t *'
| |     |       |-ImplicitCastExpr 0x559b74abbe88 <col:10> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     |       | `-DeclRefExpr 0x559b74abbe10 <col:10> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x559b74ab85f0 'sys_dlist_peek_next' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     |       |-ImplicitCastExpr 0x559b74abbed8 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |     |       | `-DeclRefExpr 0x559b74abbe38 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x559b74abb200 'list' 'sys_dlist_t *'
| |     |       `-ImplicitCastExpr 0x559b74abbef0 <col:36> 'sys_dnode_t *' <LValueToRValue>
| |     |         `-DeclRefExpr 0x559b74abbe60 <col:36> 'sys_dnode_t *' lvalue Var 0x559b74abb9c0 'pos' 'sys_dnode_t *'
| |     `-IfStmt 0x559b74ac12d0 <line:476:3, line:480:3>
| |       |-<<<NULL>>>
| |       |-<<<NULL>>>
| |       |-BinaryOperator 0x559b74abc040 <line:476:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       | |-ImplicitCastExpr 0x559b74abc010 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:7> 'sys_dnode_t *' <LValueToRValue>
| |       | | `-DeclRefExpr 0x559b74abbf68 <col:7> 'sys_dnode_t *' lvalue Var 0x559b74abb9c0 'pos' 'sys_dnode_t *'
| |       | `-ImplicitCastExpr 0x559b74abc028 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |       |   `-ParenExpr 0x559b74abbff0 <col:14, col:24> 'void *'
| |       |     `-CStyleCastExpr 0x559b74abbfc8 <col:15, col:23> 'void *' <NullToPointer>
| |       |       `-IntegerLiteral 0x559b74abbf90 <col:23> 'int' 0
| |       |-CompoundStmt 0x559b74abc188 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:20, line:478:3>
| |       | `-CallExpr 0x559b74abc120 <line:477:4, col:30> 'void'
| |       |   |-ImplicitCastExpr 0x559b74abc108 <col:4> 'void (*)(sys_dnode_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |       |   | `-DeclRefExpr 0x559b74abc068 <col:4> 'void (sys_dnode_t *, sys_dnode_t *)' Function 0x559b74abaad0 'sys_dlist_insert' 'void (sys_dnode_t *, sys_dnode_t *)'
| |       |   |-ImplicitCastExpr 0x559b74abc158 <col:21> 'sys_dnode_t *' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x559b74abc090 <col:21> 'sys_dnode_t *' lvalue Var 0x559b74abb9c0 'pos' 'sys_dnode_t *'
| |       |   `-ImplicitCastExpr 0x559b74abc170 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x559b74abc0b8 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x559b74abb270 'node' 'sys_dnode_t *'
| |       `-CompoundStmt 0x559b74ac12b8 <line:478:10, line:480:3>
| |         `-CallExpr 0x559b74ac1250 <line:479:4, col:31> 'void'
| |           |-ImplicitCastExpr 0x559b74ac1238 <col:4> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x559b74abc1a0 <col:4> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x559b74ab9a20 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |           |-ImplicitCastExpr 0x559b74ac1288 <col:21> 'sys_dlist_t *' <LValueToRValue>
| |           | `-DeclRefExpr 0x559b74abc1c8 <col:21> 'sys_dlist_t *' lvalue ParmVar 0x559b74abb200 'list' 'sys_dlist_t *'
| |           `-ImplicitCastExpr 0x559b74ac12a0 <col:27> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x559b74ac1210 <col:27> 'sys_dnode_t *' lvalue ParmVar 0x559b74abb270 'node' 'sys_dnode_t *'
| `-FullComment 0x559b74c0f810 <line:449:3, line:462:14>
|   |-ParagraphComment 0x559b74c0f1e0 <line:449:3>
|   | `-TextComment 0x559b74c0f1b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0f200 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x559b74c0f260 <col:10, col:33>
|   |   `-TextComment 0x559b74c0f230 <col:10, col:33> Text=" insert node at position"
|   |-ParagraphComment 0x559b74c0f320 <line:451:3, line:454:62>
|   | |-TextComment 0x559b74c0f280 <line:451:3, col:76> Text=" Insert a node in a location depending on a external condition. The cond()"
|   | |-TextComment 0x559b74c0f2a0 <line:452:3, col:74> Text=" function checks if the node is to be inserted _before_ the current node"
|   | |-TextComment 0x559b74c0f2c0 <line:453:3, col:31> Text=" against which it is checked."
|   | `-TextComment 0x559b74c0f2e0 <line:454:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c0f370 <line:456:3>
|   | `-TextComment 0x559b74c0f340 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0f390 <col:4, line:457:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0f440 <line:456:15, line:457:3>
|   |   |-TextComment 0x559b74c0f3f0 <line:456:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x559b74c0f410 <line:457:3> Text=" "
|   |-ParamCommandComment 0x559b74c0f460 <col:4, line:458:3> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559b74c0f510 <line:457:15, line:458:3>
|   |   |-TextComment 0x559b74c0f4c0 <line:457:15, col:36> Text=" the element to insert"
|   |   `-TextComment 0x559b74c0f4e0 <line:458:3> Text=" "
|   |-ParamCommandComment 0x559b74c0f530 <col:4, line:460:3> [in] implicitly Param="cond" ParamIndex=2
|   | `-ParagraphComment 0x559b74c0f610 <line:458:15, line:460:3>
|   |   |-TextComment 0x559b74c0f590 <line:458:15, col:76> Text=" a function that determines if the current node is the correct"
|   |   |-TextComment 0x559b74c0f5b0 <line:459:3, col:27> Text="             insert point"
|   |   `-TextComment 0x559b74c0f5d0 <line:460:3> Text=" "
|   |-ParamCommandComment 0x559b74c0f630 <col:4, col:34> [in] implicitly Param="data" ParamIndex=3
|   | `-ParagraphComment 0x559b74c0f6c0 <col:15, col:34>
|   |   `-TextComment 0x559b74c0f690 <col:15, col:34> Text=" parameter to cond()"
|   |-ParagraphComment 0x559b74c0f710 <line:462:3>
|   | `-TextComment 0x559b74c0f6e0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0f730 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c0f790 <col:11, col:14>
|       `-TextComment 0x559b74c0f760 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74ac1448 <line:495:1, line:500:1> line:495:20 used sys_dlist_remove 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559b74ac13c0 <col:37, col:50> col:50 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559b74ac1b08 <line:496:1, line:500:1>
| | |-BinaryOperator 0x559b74ac1738 <line:497:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x559b74ac1620 <col:2, col:14> 'struct _dnode *' lvalue .next 0x559b74ab0180
| | | | `-MemberExpr 0x559b74ac15d0 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| | | |   `-ImplicitCastExpr 0x559b74ac15b8 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x559b74ac1580 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x559b74ab0448
| | | |       `-MemberExpr 0x559b74ac1530 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| | | |         `-ImplicitCastExpr 0x559b74ac1518 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x559b74ac14f0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x559b74ac13c0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x559b74ac1720 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x559b74ac16e8 <col:21, col:27> 'struct _dnode *' lvalue .next 0x559b74ab0180
| | |     `-MemberExpr 0x559b74ac1698 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| | |       `-ImplicitCastExpr 0x559b74ac1680 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x559b74ac1658 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x559b74ac13c0 'node' 'sys_dnode_t *'
| | |-BinaryOperator 0x559b74ac19a8 <line:498:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x559b74ac1890 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x559b74ab0448
| | | | `-MemberExpr 0x559b74ac1840 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| | | |   `-ImplicitCastExpr 0x559b74ac1828 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x559b74ac17f0 <col:2, col:8> 'struct _dnode *' lvalue .next 0x559b74ab0180
| | | |       `-MemberExpr 0x559b74ac17a0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| | | |         `-ImplicitCastExpr 0x559b74ac1788 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x559b74ac1760 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x559b74ac13c0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x559b74ac1990 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x559b74ac1958 <col:21, col:27> 'struct _dnode *' lvalue .prev 0x559b74ab0448
| | |     `-MemberExpr 0x559b74ac1908 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559b74ab04e0
| | |       `-ImplicitCastExpr 0x559b74ac18f0 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x559b74ac18c8 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x559b74ac13c0 'node' 'sys_dnode_t *'
| | `-CallExpr 0x559b74ac1a90 <line:499:2, col:21> 'void'
| |   |-ImplicitCastExpr 0x559b74ac1a78 <col:2> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x559b74ac19d0 <col:2> 'void (sys_dnode_t *)' Function 0x559b74ab0e80 'sys_dnode_init' 'void (sys_dnode_t *)'
| |   `-ImplicitCastExpr 0x559b74ac1ac0 <col:17> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x559b74ac19f8 <col:17> 'sys_dnode_t *' lvalue ParmVar 0x559b74ac13c0 'node' 'sys_dnode_t *'
| `-FullComment 0x559b74c0fbd0 <line:485:3, line:492:14>
|   |-ParagraphComment 0x559b74c0f8b0 <line:485:3>
|   | `-TextComment 0x559b74c0f880 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0f8d0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559b74c0f930 <col:10, col:44>
|   |   `-TextComment 0x559b74c0f900 <col:10, col:44> Text=" remove a specific node from a list"
|   |-ParagraphComment 0x559b74c0f9a0 <line:487:3, line:488:62>
|   | |-TextComment 0x559b74c0f950 <line:487:3, col:71> Text=" The list is implicit from the node. The node must be part of a list."
|   | `-TextComment 0x559b74c0f970 <line:488:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c0f9f0 <line:490:3>
|   | `-TextComment 0x559b74c0f9c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0fa10 <col:4, col:33> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0faa0 <col:15, col:33>
|   |   `-TextComment 0x559b74c0fa70 <col:15, col:33> Text=" the node to remove"
|   |-ParagraphComment 0x559b74c0faf0 <line:492:3>
|   | `-TextComment 0x559b74c0fac0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0fb10 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c0fb70 <col:11, col:14>
|       `-TextComment 0x559b74c0fb40 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74ac1bc8 <line:512:1, line:522:1> line:512:28 sys_dlist_get 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x559b74ac1b40 <col:42, col:55> col:55 used list 'sys_dlist_t *'
| |-CompoundStmt 0x559b74ac2118 <line:513:1, line:522:1>
| | |-DeclStmt 0x559b74ac1d78 <line:514:2, col:26>
| | | `-VarDecl 0x559b74ac1c80 <col:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:514:15 used node 'sys_dnode_t *' cinit
| | |   `-ImplicitCastExpr 0x559b74ac1d60 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| | |     `-ParenExpr 0x559b74ac1d40 <col:14, col:24> 'void *'
| | |       `-CStyleCastExpr 0x559b74ac1d18 <col:15, col:23> 'void *' <NullToPointer>
| | |         `-IntegerLiteral 0x559b74ac1ce0 <col:23> 'int' 0
| | |-IfStmt 0x559b74ac2060 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:516:2, line:519:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x559b74ac1e40 <line:516:6, col:30> 'int' prefix '!'
| | | | `-CallExpr 0x559b74ac1df8 <col:7, col:30> 'bool'
| | | |   |-ImplicitCastExpr 0x559b74ac1de0 <col:7> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x559b74ac1d90 <col:7> 'bool (sys_dlist_t *)' Function 0x559b74ab59c0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| | | |   `-ImplicitCastExpr 0x559b74ac1e28 <col:26> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x559b74ac1db8 <col:26> 'sys_dlist_t *' lvalue ParmVar 0x559b74ac1b40 'list' 'sys_dlist_t *'
| | | |-CompoundStmt 0x559b74ac2040 <col:33, line:519:2>
| | | | |-BinaryOperator 0x559b74ac1f68 <line:517:3, col:16> 'sys_dnode_t *' '='
| | | | | |-DeclRefExpr 0x559b74ac1e60 <col:3> 'sys_dnode_t *' lvalue Var 0x559b74ac1c80 'node' 'sys_dnode_t *'
| | | | | `-ImplicitCastExpr 0x559b74ac1f50 <col:10, col:16> 'struct _dnode *' <LValueToRValue>
| | | | |   `-MemberExpr 0x559b74ac1f18 <col:10, col:16> 'struct _dnode *' lvalue .head 0x559b74ab0110
| | | | |     `-MemberExpr 0x559b74ac1ec8 <col:10, col:16> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x559b74ab0220
| | | | |       `-ImplicitCastExpr 0x559b74ac1eb0 <col:10> 'sys_dlist_t *' <LValueToRValue>
| | | | |         `-DeclRefExpr 0x559b74ac1e88 <col:10> 'sys_dlist_t *' lvalue ParmVar 0x559b74ac1b40 'list' 'sys_dlist_t *'
| | | | `-CallExpr 0x559b74ac1ff8 <line:518:3, col:24> 'void'
| | | |   |-ImplicitCastExpr 0x559b74ac1fe0 <col:3> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x559b74ac1f90 <col:3> 'void (sys_dnode_t *)' Function 0x559b74ac1448 'sys_dlist_remove' 'void (sys_dnode_t *)'
| | | |   `-ImplicitCastExpr 0x559b74ac2028 <col:20> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x559b74ac1fb8 <col:20> 'sys_dnode_t *' lvalue Var 0x559b74ac1c80 'node' 'sys_dnode_t *'
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x559b74ac20d8 <line:521:2, col:9>
| |   `-ImplicitCastExpr 0x559b74ac20c0 <col:9> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x559b74ac2098 <col:9> 'sys_dnode_t *' lvalue Var 0x559b74ac1c80 'node' 'sys_dnode_t *'
| `-FullComment 0x559b74c0ff70 <line:503:3, line:509:60>
|   |-ParagraphComment 0x559b74c0fc70 <line:503:3>
|   | `-TextComment 0x559b74c0fc40 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c0fc90 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x559b74c0fcf0 <col:10, col:38>
|   |   `-TextComment 0x559b74c0fcc0 <col:10, col:38> Text=" get the first node in a list"
|   |-ParagraphComment 0x559b74c0fd40 <line:505:3, col:62>
|   | `-TextComment 0x559b74c0fd10 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c0fd90 <line:507:3>
|   | `-TextComment 0x559b74c0fd60 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c0fdb0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c0fe40 <col:15, col:51>
|   |   `-TextComment 0x559b74c0fe10 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x559b74c0fe90 <line:509:3>
|   | `-TextComment 0x559b74c0fe60 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c0feb0 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x559b74c0ff10 <col:11, col:60>
|       `-TextComment 0x559b74c0fee0 <col:11, col:60> Text=" the first node in the list, NULL if list is empty"
|-RecordDecl 0x559b74ac2140 </vagrant/ext/zephyros/zephyr/include/sys/rb.h:48:1, line:50:1> line:48:8 struct rbnode definition
| `-FieldDecl 0x559b74ac4f30 <line:49:2, col:27> col:17 children 'struct rbnode *[2]'
|-TypedefDecl 0x559b74ac5208 <line:74:1, col:65> col:16 referenced rb_lessthan_t 'bool (*)(struct rbnode *, struct rbnode *)'
| |-PointerType 0x559b74ac51a0 'bool (*)(struct rbnode *, struct rbnode *)'
| | `-ParenType 0x559b74ac5140 'bool (struct rbnode *, struct rbnode *)' sugar
| |   `-FunctionProtoType 0x559b74ac5100 'bool (struct rbnode *, struct rbnode *)' cdecl
| |     |-BuiltinType 0x559b749d8990 'bool'
| |     |-PointerType 0x559b74ac4e50 'struct rbnode *'
| |     | `-ElaboratedType 0x559b74ac4df0 'struct rbnode' sugar
| |     |   `-RecordType 0x559b74ac21d0 'struct rbnode'
| |     |     `-Record 0x559b74ac2140 'rbnode'
| |     `-PointerType 0x559b74ac4e50 'struct rbnode *'
| |       `-ElaboratedType 0x559b74ac4df0 'struct rbnode' sugar
| |         `-RecordType 0x559b74ac21d0 'struct rbnode'
| |           `-Record 0x559b74ac2140 'rbnode'
| `-FullComment 0x559b74c102d0 <line:62:3, line:72:36>
|   |-ParagraphComment 0x559b74c10010 <line:62:3>
|   | `-TextComment 0x559b74c0ffe0 <col:3> Text=" "
|   |-VerbatimLineComment 0x559b74c10030 <col:4, col:26> Text=" rb_lessthan_t"
|   |-ParagraphComment 0x559b74c100a0 <line:63:3>
|   | `-TextComment 0x559b74c10070 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c100c0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x559b74c10120 <col:10, col:45>
|   |   `-TextComment 0x559b74c100f0 <col:10, col:45> Text=" Red/black tree comparison predicate"
|   |-ParagraphComment 0x559b74c10190 <line:65:3, line:66:68>
|   | |-TextComment 0x559b74c10140 <line:65:3, col:69> Text=" Compares the two nodes and returns true if node A is strictly less"
|   | `-TextComment 0x559b74c10160 <line:66:3, col:68> Text=" than B according to the tree's sorting criteria, false otherwise."
|   `-ParagraphComment 0x559b74c10280 <line:68:3, line:72:36>
|     |-TextComment 0x559b74c101b0 <line:68:3, col:70> Text=" Note that during insert, the new node being inserted will always be"
|     |-TextComment 0x559b74c101d0 <line:69:3, col:68> Text=" "A", where "B" is the existing node within the tree against which"
|     |-TextComment 0x559b74c101f0 <line:70:3, col:64> Text=" it is being compared.  This trait can be used (with care!) to"
|     |-TextComment 0x559b74c10210 <line:71:3, col:70> Text=" implement "most/least recently added" semantics between nodes which"
|     `-TextComment 0x559b74c10230 <line:72:3, col:36> Text=" would otherwise compare as equal."
|-RecordDecl 0x559b74ac5260 <line:76:1, line:84:1> line:76:8 struct rbtree definition
| |-FieldDecl 0x559b74ac5338 <line:77:2, col:17> col:17 referenced root 'struct rbnode *'
| |-FieldDecl 0x559b74ac53b0 <line:78:2, col:16> col:16 lessthan_fn 'rb_lessthan_t':'bool (*)(struct rbnode *, struct rbnode *)'
| `-FieldDecl 0x559b74ac5410 <line:79:2, col:6> col:6 max_depth 'int'
|-TypedefDecl 0x559b74ac56a8 <line:86:1, col:61> col:16 referenced rb_visit_t 'void (*)(struct rbnode *, void *)'
| `-PointerType 0x559b74ac5640 'void (*)(struct rbnode *, void *)'
|   `-ParenType 0x559b74ac55e0 'void (struct rbnode *, void *)' sugar
|     `-FunctionProtoType 0x559b74ac55a0 'void (struct rbnode *, void *)' cdecl
|       |-BuiltinType 0x559b749d8970 'void'
|       |-PointerType 0x559b74ac4e50 'struct rbnode *'
|       | `-ElaboratedType 0x559b74ac4df0 'struct rbnode' sugar
|       |   `-RecordType 0x559b74ac21d0 'struct rbnode'
|       |     `-Record 0x559b74ac2140 'rbnode'
|       `-PointerType 0x559b749d8e10 'void *'
|         `-BuiltinType 0x559b749d8970 'void'
|-FunctionDecl 0x559b74ac58c8 <line:88:1, col:56> col:16 z_rb_child 'struct rbnode *(struct rbnode *, int)'
| |-ParmVarDecl 0x559b74ac5728 <col:27, col:42> col:42 node 'struct rbnode *'
| `-ParmVarDecl 0x559b74ac57a0 <col:48, col:52> col:52 side 'int'
|-FunctionDecl 0x559b74ac5aa8 <line:89:1, col:38> col:5 z_rb_is_black 'int (struct rbnode *)'
| `-ParmVarDecl 0x559b74ac59a0 <col:19, col:34> col:34 node 'struct rbnode *'
|-FunctionDecl 0x559b74ac6b00 <line:91:1, col:70> col:6 used z_rb_walk 'void (struct rbnode *, rb_visit_t, void *)'
| |-ParmVarDecl 0x559b74ac5b78 <col:16, col:31> col:31 node 'struct rbnode *'
| |-ParmVarDecl 0x559b74ac5c10 <col:37, col:48> col:48 visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| `-ParmVarDecl 0x559b74ac5c88 <col:58, col:64> col:64 cookie 'void *'
|-FunctionDecl 0x559b74ac6e18 <line:93:1, col:61> col:16 used z_rb_get_minmax 'struct rbnode *(struct rbtree *, int)'
| |-ParmVarDecl 0x559b74ac6c70 <col:32, col:47> col:47 tree 'struct rbtree *'
| `-ParmVarDecl 0x559b74ac6ce8 <col:53, col:57> col:57 side 'int'
|-FunctionDecl 0x559b74ac70c0 <line:98:1, col:56> col:6 rb_insert 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x559b74ac6f20 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x559b74ac6fa8 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x559b74c10420 <line:96:3, col:31>
|   |-ParagraphComment 0x559b74c10370 <col:3>
|   | `-TextComment 0x559b74c10340 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c10390 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x559b74c103f0 <col:10, col:31>
|       `-TextComment 0x559b74c103c0 <col:10, col:31> Text=" Insert node into tree"
|-FunctionDecl 0x559b74ac72d8 <line:103:1, col:56> col:6 rb_remove 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x559b74ac71c0 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x559b74ac7248 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x559b74c10570 <line:101:3, col:31>
|   |-ParagraphComment 0x559b74c104c0 <col:3>
|   | `-TextComment 0x559b74c10490 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c104e0 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x559b74c10540 <col:10, col:31>
|       `-TextComment 0x559b74c10510 <col:10, col:31> Text=" Remove node from tree"
|-FunctionDecl 0x559b74ac74f8 <line:108:1, line:111:1> line:108:30 rb_get_min 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x559b74ac73e0 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x559b74ac7718 <line:109:1, line:111:1>
| | `-ReturnStmt 0x559b74ac76d0 <line:110:2, col:32>
| |   `-CallExpr 0x559b74ac7680 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x559b74ac7668 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74ac75a0 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x559b74ac6e18 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x559b74ac76b8 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74ac75c8 <col:25> 'struct rbtree *' lvalue ParmVar 0x559b74ac73e0 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x559b74ac75f0 <col:31> 'int' 0
| `-FullComment 0x559b74c106c0 <line:106:3, col:54>
|   |-ParagraphComment 0x559b74c10610 <col:3>
|   | `-TextComment 0x559b74c105e0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c10630 <col:4, col:54> Name="brief"
|     `-ParagraphComment 0x559b74c10690 <col:10, col:54>
|       `-TextComment 0x559b74c10660 <col:10, col:54> Text=" Returns the lowest-sorted member of the tree"
|-FunctionDecl 0x559b74ac77f8 <line:116:1, line:119:1> line:116:30 rb_get_max 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x559b74ac7758 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x559b74ac79b8 <line:117:1, line:119:1>
| | `-ReturnStmt 0x559b74ac7978 <line:118:2, col:32>
| |   `-CallExpr 0x559b74ac7928 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x559b74ac7910 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74ac78a0 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x559b74ac6e18 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x559b74ac7960 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74ac78c8 <col:25> 'struct rbtree *' lvalue ParmVar 0x559b74ac7758 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x559b74ac78f0 <col:31> 'int' 1
| `-FullComment 0x559b74c10810 <line:114:3, col:55>
|   |-ParagraphComment 0x559b74c10760 <col:3>
|   | `-TextComment 0x559b74c10730 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c10780 <col:4, col:55> Name="brief"
|     `-ParagraphComment 0x559b74c107e0 <col:10, col:55>
|       `-TextComment 0x559b74c107b0 <col:10, col:55> Text=" Returns the highest-sorted member of the tree"
|-FunctionDecl 0x559b74ac7d00 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/rb.h:130:58> col:6 rb_contains 'bool (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x559b74ac79f8 <col:18, col:33> col:33 tree 'struct rbtree *'
| |-ParmVarDecl 0x559b74ac7a80 <col:39, col:54> col:54 node 'struct rbnode *'
| `-FullComment 0x559b74c10a60 <line:122:3, line:128:10>
|   |-ParagraphComment 0x559b74c108b0 <line:122:3>
|   | `-TextComment 0x559b74c10880 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c108d0 <col:4, col:60> Name="brief"
|   | `-ParagraphComment 0x559b74c10930 <col:10, col:60>
|   |   `-TextComment 0x559b74c10900 <col:10, col:60> Text=" Returns true if the given node is part of the tree"
|   `-ParagraphComment 0x559b74c10a20 <line:124:3, line:128:10>
|     |-TextComment 0x559b74c10950 <line:124:3, col:66> Text=" Note that this does not internally dereference the node pointer"
|     |-TextComment 0x559b74c10970 <line:125:3, col:69> Text=" (though the tree's lessthan callback might!), it just tests it for"
|     |-TextComment 0x559b74c10990 <line:126:3, col:68> Text=" equality with items in the tree.  So it's feasible to use this to"
|     |-TextComment 0x559b74c109b0 <line:127:3, col:66> Text=" implement a "set" construct by simply testing the pointer value"
|     `-TextComment 0x559b74c109d0 <line:128:3, col:10> Text=" itself."
|-FunctionDecl 0x559b74ac8020 <line:141:1, line:145:1> line:141:20 rb_walk 'void (struct rbtree *, rb_visit_t, void *)' static inline
| |-ParmVarDecl 0x559b74ac7e00 <col:28, col:43> col:43 used tree 'struct rbtree *'
| |-ParmVarDecl 0x559b74ac7e70 <col:49, col:60> col:60 used visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |-ParmVarDecl 0x559b74ac7ee8 <line:142:7, col:13> col:13 used cookie 'void *'
| |-CompoundStmt 0x559b74ac82c8 <line:143:1, line:145:1>
| | `-CallExpr 0x559b74ac8240 <line:144:2, col:40> 'void'
| |   |-ImplicitCastExpr 0x559b74ac8228 <col:2> 'void (*)(struct rbnode *, rb_visit_t, void *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x559b74ac80d8 <col:2> 'void (struct rbnode *, rb_visit_t, void *)' Function 0x559b74ac6b00 'z_rb_walk' 'void (struct rbnode *, rb_visit_t, void *)'
| |   |-ImplicitCastExpr 0x559b74ac8280 <col:12, col:18> 'struct rbnode *' <LValueToRValue>
| |   | `-MemberExpr 0x559b74ac8140 <col:12, col:18> 'struct rbnode *' lvalue ->root 0x559b74ac5338
| |   |   `-ImplicitCastExpr 0x559b74ac8128 <col:12> 'struct rbtree *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x559b74ac8100 <col:12> 'struct rbtree *' lvalue ParmVar 0x559b74ac7e00 'tree' 'struct rbtree *'
| |   |-ImplicitCastExpr 0x559b74ac8298 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' <LValueToRValue>
| |   | `-DeclRefExpr 0x559b74ac8178 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' lvalue ParmVar 0x559b74ac7e70 'visit_fn' 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |   `-ImplicitCastExpr 0x559b74ac82b0 <col:34> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x559b74ac81a0 <col:34> 'void *' lvalue ParmVar 0x559b74ac7ee8 'cookie' 'void *'
| `-FullComment 0x559b74c10c80 <line:134:3, line:139:18>
|   |-ParagraphComment 0x559b74c10b00 <line:134:3>
|   | `-TextComment 0x559b74c10ad0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c10b20 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x559b74c10b80 <col:10, col:33>
|   |   `-TextComment 0x559b74c10b50 <col:10, col:33> Text=" Walk/enumerate a rbtree"
|   `-ParagraphComment 0x559b74c10c40 <line:136:3, line:139:18>
|     |-TextComment 0x559b74c10ba0 <line:136:3, col:69> Text=" Very simple recursive enumeration.  Low code size, but requiring a"
|     |-TextComment 0x559b74c10bc0 <line:137:3, col:70> Text=" separate function can be clumsy for the user and there is no way to"
|     |-TextComment 0x559b74c10be0 <line:138:3, col:65> Text=" break out of the loop early.  See RB_FOR_EACH for an iterative"
|     `-TextComment 0x559b74c10c00 <line:139:3, col:18> Text=" implementation."
|-RecordDecl 0x559b74ac82e0 <line:148:1, line:152:1> line:148:8 struct _rb_foreach definition
| |-FieldDecl 0x559b74ac8410 <line:149:2, col:18> col:18 stack 'struct rbnode **'
| |-FieldDecl 0x559b74ac8470 <line:150:2, col:8> col:8 is_left 'char *'
| `-FieldDecl 0x559b74ac84d0 <line:151:2, col:6> col:6 top 'int'
|-FunctionDecl 0x559b74ac8778 <line:169:1, col:76> col:16 z_rb_foreach_next 'struct rbnode *(struct rbtree *, struct _rb_foreach *)'
| |-ParmVarDecl 0x559b74ac8540 <col:34, col:49> col:49 tree 'struct rbtree *'
| `-ParmVarDecl 0x559b74ac8650 <col:55, col:75> col:75 f 'struct _rb_foreach *'
|-RecordDecl 0x559b74ac88e8 </vagrant/ext/zephyros/zephyr/include/sched_priq.h:32:1, col:8> col:8 struct k_thread
|-FunctionDecl 0x559b74ac8b48 <line:34:1, col:50> col:18 z_priq_dumb_best 'struct k_thread *(sys_dlist_t *)'
| `-ParmVarDecl 0x559b74ac89a0 <col:35, col:48> col:48 pq 'sys_dlist_t *'
|-FunctionDecl 0x559b74acaec0 <line:35:1, col:65> col:6 z_priq_dumb_remove 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x559b74acad20 <col:25, col:38> col:38 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x559b74acada8 <col:42, col:59> col:59 thread 'struct k_thread *'
|-FunctionDecl 0x559b74acb098 <line:36:1, col:62> col:6 z_priq_dumb_add 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x559b74acaf80 <col:22, col:35> col:35 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x559b74acb008 <col:39, col:56> col:56 thread 'struct k_thread *'
|-RecordDecl 0x559b74acb148 <line:38:1, line:41:1> line:38:8 struct _priq_rb definition
| |-FieldDecl 0x559b74acb210 <line:39:2, col:16> col:16 tree 'struct rbtree':'struct rbtree'
| `-FieldDecl 0x559b74acb270 <line:40:2, col:6> col:6 next_order_key 'int'
|-FunctionDecl 0x559b74acb560 <line:43:1, col:64> col:6 z_priq_rb_add 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x559b74acb3c0 <col:20, col:37> col:37 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x559b74acb448 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x559b74acb750 <line:44:1, col:67> col:6 z_priq_rb_remove 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x559b74acb638 <col:23, col:40> col:40 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x559b74acb6c0 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x559b74acb948 <line:45:1, col:52> col:18 z_priq_rb_best 'struct k_thread *(struct _priq_rb *)'
| `-ParmVarDecl 0x559b74acb828 <col:33, col:50> col:50 pq 'struct _priq_rb *'
|-RecordDecl 0x559b74acb9f0 <line:54:1, line:57:1> line:54:8 struct _priq_mq definition
| |-FieldDecl 0x559b74acbbf8 <line:55:2, col:23> col:14 queues 'sys_dlist_t [32]'
| `-FieldDecl 0x559b74acbc58 <line:56:2, col:15> col:15 bitmask 'unsigned int'
|-FunctionDecl 0x559b74acbf20 <line:59:1, col:64> col:6 z_priq_mq_add 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x559b74acbd80 <col:20, col:37> col:37 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x559b74acbe08 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x559b74acc110 <line:60:1, col:67> col:6 z_priq_mq_remove 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x559b74acbff8 <col:23, col:40> col:40 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x559b74acc080 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x559b74acc308 <line:61:1, col:52> col:18 z_priq_mq_best 'struct k_thread *(struct _priq_mq *)'
| `-ParmVarDecl 0x559b74acc1e8 <col:33, col:50> col:50 pq 'struct _priq_mq *'
|-RecordDecl 0x559b74acc3d8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:29:1, line:31:1> line:29:8 struct _snode definition
| `-FieldDecl 0x559b74acc530 <line:30:2, col:17> col:17 referenced next 'struct _snode *'
|-TypedefDecl 0x559b74acc598 <line:33:1, col:23> col:23 referenced sys_snode_t 'struct _snode':'struct _snode'
| `-ElaboratedType 0x559b74acc480 'struct _snode' sugar
|   `-RecordType 0x559b74acc460 'struct _snode'
|     `-Record 0x559b74acc3d8 '_snode'
|-RecordDecl 0x559b74acc5f0 <line:35:1, line:38:1> line:35:8 struct _slist definition
| |-FieldDecl 0x559b74acc6f8 <line:36:2, col:15> col:15 referenced head 'sys_snode_t *'
| `-FieldDecl 0x559b74acc750 <line:37:2, col:15> col:15 referenced tail 'sys_snode_t *'
|-TypedefDecl 0x559b74acc7f0 <line:40:1, col:23> col:23 referenced sys_slist_t 'struct _slist':'struct _slist'
| `-ElaboratedType 0x559b74acc7a0 'struct _slist' sugar
|   `-RecordType 0x559b74acc680 'struct _slist'
|     `-Record 0x559b74acc5f0 '_slist'
|-FunctionDecl 0x559b74accb00 <line:190:1, line:194:1> line:190:20 used sys_slist_init 'void (sys_slist_t *)' static inline
| |-ParmVarDecl 0x559b74acc9f8 <col:35, col:48> col:48 used list 'sys_slist_t *'
| |-CompoundStmt 0x559b74ae1da8 <line:191:1, line:194:1>
| | |-BinaryOperator 0x559b74acccb8 <line:192:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| | | |-MemberExpr 0x559b74accbe8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:192:2, col:8> 'sys_snode_t *' lvalue ->head 0x559b74acc6f8
| | | | `-ImplicitCastExpr 0x559b74accbd0 <col:2> 'sys_slist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x559b74accba8 <col:2> 'sys_slist_t *' lvalue ParmVar 0x559b74acc9f8 'list' 'sys_slist_t *'
| | | `-ImplicitCastExpr 0x559b74accca0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| | |   `-ParenExpr 0x559b74accc80 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x559b74accc58 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x559b74accc20 <col:23> 'int' 0
| | `-BinaryOperator 0x559b74ae1d80 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| |   |-MemberExpr 0x559b74ae1cb0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, col:8> 'sys_snode_t *' lvalue ->tail 0x559b74acc750
| |   | `-ImplicitCastExpr 0x559b74accd08 <col:2> 'sys_slist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x559b74accce0 <col:2> 'sys_slist_t *' lvalue ParmVar 0x559b74acc9f8 'list' 'sys_slist_t *'
| |   `-ImplicitCastExpr 0x559b74ae1d68 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| |     `-ParenExpr 0x559b74ae1d48 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x559b74ae1d20 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x559b74ae1ce8 <col:23> 'int' 0
| `-FullComment 0x559b74c10ee0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:186:3, line:188:50>
|   |-ParagraphComment 0x559b74c10d20 <line:186:3>
|   | `-TextComment 0x559b74c10cf0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c10d40 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x559b74c10da0 <col:10, col:27>
|   |   `-TextComment 0x559b74c10d70 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x559b74c10df0 <line:188:3>
|   | `-TextComment 0x559b74c10dc0 <col:3> Text=" "
|   `-ParamCommandComment 0x559b74c10e10 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x559b74c10ea0 <col:15, col:50>
|       `-TextComment 0x559b74c10e70 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x559b74ae1ee0 <line:198:1, line:201:1> line:198:28 used z_snode_next_peek 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74ae1dd8 <col:46, col:59> col:59 used node 'sys_snode_t *'
| `-CompoundStmt 0x559b74ae2030 <line:199:1, line:201:1>
|   `-ReturnStmt 0x559b74ae2018 <line:200:2, col:15>
|     `-ImplicitCastExpr 0x559b74ae2000 <col:9, col:15> 'struct _snode *' <LValueToRValue>
|       `-MemberExpr 0x559b74ae1fc8 <col:9, col:15> 'struct _snode *' lvalue ->next 0x559b74acc530
|         `-ImplicitCastExpr 0x559b74ae1fb0 <col:9> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x559b74ae1f88 <col:9> 'sys_snode_t *' lvalue ParmVar 0x559b74ae1dd8 'node' 'sys_snode_t *'
|-FunctionDecl 0x559b74ae21e0 <line:203:1, line:206:1> line:203:20 used z_snode_next_set 'void (sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74ae2058 <col:37, col:50> col:50 used parent 'sys_snode_t *'
| |-ParmVarDecl 0x559b74ae20c8 <col:58, col:71> col:71 used child 'sys_snode_t *'
| `-CompoundStmt 0x559b74ae2370 <line:204:1, line:206:1>
|   `-BinaryOperator 0x559b74ae2348 <line:205:2, col:17> 'struct _snode *' '='
|     |-MemberExpr 0x559b74ae22d0 <col:2, col:10> 'struct _snode *' lvalue ->next 0x559b74acc530
|     | `-ImplicitCastExpr 0x559b74ae22b8 <col:2> 'sys_snode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x559b74ae2290 <col:2> 'sys_snode_t *' lvalue ParmVar 0x559b74ae2058 'parent' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x559b74ae2330 <col:17> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74ae2308 <col:17> 'sys_snode_t *' lvalue ParmVar 0x559b74ae20c8 'child' 'sys_snode_t *'
|-FunctionDecl 0x559b74ae2520 <line:208:1, line:211:1> line:208:20 used z_slist_head_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74ae2398 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x559b74ae2408 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x559b74ae26b0 <line:209:1, line:211:1>
|   `-BinaryOperator 0x559b74ae2688 <line:210:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x559b74ae2610 <col:2, col:8> 'sys_snode_t *' lvalue ->head 0x559b74acc6f8
|     | `-ImplicitCastExpr 0x559b74ae25f8 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x559b74ae25d0 <col:2> 'sys_slist_t *' lvalue ParmVar 0x559b74ae2398 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x559b74ae2670 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74ae2648 <col:15> 'sys_snode_t *' lvalue ParmVar 0x559b74ae2408 'node' 'sys_snode_t *'
|-FunctionDecl 0x559b74ae27d8 <line:213:1, line:216:1> line:213:20 used z_slist_tail_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74ae26d8 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x559b74ae2748 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x559b74ae2998 <line:214:1, line:216:1>
|   `-BinaryOperator 0x559b74ae2940 <line:215:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x559b74ae28c8 <col:2, col:8> 'sys_snode_t *' lvalue ->tail 0x559b74acc750
|     | `-ImplicitCastExpr 0x559b74ae28b0 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x559b74ae2888 <col:2> 'sys_slist_t *' lvalue ParmVar 0x559b74ae26d8 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x559b74ae2928 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74ae2900 <col:15> 'sys_snode_t *' lvalue ParmVar 0x559b74ae2748 'node' 'sys_snode_t *'
|-FunctionDecl 0x559b74ae2ac0 <line:225:1, line:228:1> line:225:28 used sys_slist_peek_head 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x559b74ae29c0 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x559b74ae2c38 <line:226:1, line:228:1>
| | `-ReturnStmt 0x559b74ae2bf8 <line:227:2, col:15>
| |   `-ImplicitCastExpr 0x559b74ae2be0 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x559b74ae2ba8 <col:9, col:15> 'sys_snode_t *' lvalue ->head 0x559b74acc6f8
| |       `-ImplicitCastExpr 0x559b74ae2b90 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x559b74ae2b68 <col:9> 'sys_slist_t *' lvalue ParmVar 0x559b74ae29c0 'list' 'sys_slist_t *'
| `-FullComment 0x559b74c11220 <line:219:3, line:223:68>
|   |-ParagraphComment 0x559b74c10f80 <line:219:3>
|   | `-TextComment 0x559b74c10f50 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c10fa0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c11000 <col:10, col:43>
|   |   `-TextComment 0x559b74c10fd0 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x559b74c11050 <line:221:3>
|   | `-TextComment 0x559b74c11020 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c11070 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c11100 <col:15, col:62>
|   |   `-TextComment 0x559b74c110d0 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x559b74c11150 <line:223:3>
|   | `-TextComment 0x559b74c11120 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c11170 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x559b74c111d0 <col:11, col:68>
|       `-TextComment 0x559b74c111a0 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x559b74ae2da8 <line:237:1, line:240:1> line:237:28 used sys_slist_peek_tail 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x559b74ae2d20 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x559b74ae2f28 <line:238:1, line:240:1>
| | `-ReturnStmt 0x559b74ae2ee0 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x559b74ae2ec8 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x559b74ae2e90 <col:9, col:15> 'sys_snode_t *' lvalue ->tail 0x559b74acc750
| |       `-ImplicitCastExpr 0x559b74ae2e78 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x559b74ae2e50 <col:9> 'sys_slist_t *' lvalue ParmVar 0x559b74ae2d20 'list' 'sys_slist_t *'
| `-FullComment 0x559b74c11560 <line:231:3, line:235:67>
|   |-ParagraphComment 0x559b74c112c0 <line:231:3>
|   | `-TextComment 0x559b74c11290 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c112e0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x559b74c11340 <col:10, col:42>
|   |   `-TextComment 0x559b74c11310 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x559b74c11390 <line:233:3>
|   | `-TextComment 0x559b74c11360 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c113b0 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c11440 <col:15, col:61>
|   |   `-TextComment 0x559b74c11410 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x559b74c11490 <line:235:3>
|   | `-TextComment 0x559b74c11460 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c114b0 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x559b74c11510 <col:11, col:67>
|       `-TextComment 0x559b74c114e0 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x559b74ae3050 <line:253:1, col:56> col:20 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x559b74ae2f50 <col:39, col:52> col:52 list 'sys_slist_t *'
| `-FullComment 0x559b74c118b0 <line:247:3, line:251:57>
|   |-ParagraphComment 0x559b74c11600 <line:247:3>
|   | `-TextComment 0x559b74c115d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c11620 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x559b74c11680 <col:10, col:41>
|   |   `-TextComment 0x559b74c11650 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x559b74c116d0 <line:249:3>
|   | `-TextComment 0x559b74c116a0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c116f0 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c11780 <col:15, col:44>
|   |   `-TextComment 0x559b74c11750 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x559b74c117e0 <line:251:3>
|   | `-TextComment 0x559b74c117a0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c11800 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x559b74c11860 <col:11, col:57>
|       `-TextComment 0x559b74c11830 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x559b74ae3190 prev 0x559b74ae3050 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:3:1 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x559b74ae3108 <line:5:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_slist_t *'
| `-CompoundStmt 0x559b74ae3488 <line:60:2, line:62:2>
|   `-ReturnStmt 0x559b74ae3440 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x559b74ae3428 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x559b74ae3408 <col:10, col:54> 'int'
|         `-BinaryOperator 0x559b74ae33e0 <<scratch space>:7:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x559b74ae3300 <<scratch space>:7:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_snode_t *'
|           | |-ImplicitCastExpr 0x559b74ae32e8 <<scratch space>:7:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x559b74ae3238 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2ac0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|           | `-ImplicitCastExpr 0x559b74ae3330 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_slist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x559b74ae3260 <col:41> 'sys_slist_t *' lvalue ParmVar 0x559b74ae3108 'list' 'sys_slist_t *'
|           `-ImplicitCastExpr 0x559b74ae33c8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|             `-ParenExpr 0x559b74ae33a8 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x559b74ae3380 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x559b74ae3348 <col:23> 'int' 0
|-FunctionDecl 0x559b74ae3538 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:266:1, col:74> col:28 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74ae34b0 <col:57, col:70> col:70 node 'sys_snode_t *'
| `-FullComment 0x559b74c11c50 <line:258:3, line:264:55>
|   |-ParagraphComment 0x559b74c11950 <line:258:3>
|   | `-TextComment 0x559b74c11920 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c11970 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x559b74c119d0 <col:10, col:64>
|   |   `-TextComment 0x559b74c119a0 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x559b74c11a20 <line:260:3, col:69>
|   | `-TextComment 0x559b74c119f0 <col:3, col:69> Text=" Faster then sys_slist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x559b74c11a70 <line:262:3>
|   | `-TextComment 0x559b74c11a40 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c11a90 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x559b74c11b20 <col:15, col:64>
|   |   `-TextComment 0x559b74c11af0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x559b74c11b70 <line:264:3>
|   | `-TextComment 0x559b74c11b40 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c11b90 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x559b74c11bf0 <col:11, col:55>
|       `-TextComment 0x559b74c11bc0 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x559b74ae3678 prev 0x559b74ae3538 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:11:1 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74ae35f0 <line:13:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_snode_t *'
| `-CompoundStmt 0x559b74ae3868 <line:67:2, line:69:2>
|   `-ReturnStmt 0x559b74ae3828 <line:68:3, col:42>
|     `-CallExpr 0x559b74ae37e0 <<scratch space>:15:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x559b74ae37c8 <<scratch space>:15:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74ae3720 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x559b74ae1ee0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       `-ImplicitCastExpr 0x559b74ae3810 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_snode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74ae3748 <col:38> 'sys_snode_t *' lvalue ParmVar 0x559b74ae35f0 'node' 'sys_snode_t *'
|-FunctionDecl 0x559b74ae3918 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:277:1, col:65> col:28 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74ae3890 <col:48, col:61> col:61 node 'sys_snode_t *'
| `-FullComment 0x559b74c11f90 <line:271:3, line:275:55>
|   |-ParagraphComment 0x559b74c11cf0 <line:271:3>
|   | `-TextComment 0x559b74c11cc0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c11d10 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x559b74c11d70 <col:10, col:46>
|   |   `-TextComment 0x559b74c11d40 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x559b74c11dc0 <line:273:3>
|   | `-TextComment 0x559b74c11d90 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c11de0 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x559b74c11e70 <col:15, col:64>
|   |   `-TextComment 0x559b74c11e40 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x559b74c11ec0 <line:275:3>
|   | `-TextComment 0x559b74c11e90 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c11ee0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x559b74c11f40 <col:11, col:55>
|       `-TextComment 0x559b74c11f10 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x559b74ae3a58 prev 0x559b74ae3918 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:19:1 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74ae39d0 <line:21:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_snode_t *'
| `-CompoundStmt 0x559b74ae5448 <line:74:2, line:78:2>
|   `-ReturnStmt 0x559b74ae5408 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x559b74ae53d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *'
|       |-BinaryOperator 0x559b74ae3bd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x559b74ae3ba8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_snode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x559b74ae3b00 <col:10> 'sys_snode_t *' lvalue ParmVar 0x559b74ae39d0 'node' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x559b74ae3bc0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x559b74ae3b88 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x559b74ae3b60 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x559b74ae3b28 <col:23> 'int' 0
|       |-CallExpr 0x559b74ae3c68 <<scratch space>:23:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_snode_t *'
|       | |-ImplicitCastExpr 0x559b74ae3c50 <<scratch space>:23:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x559b74ae3c00 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x559b74ae3678 'sys_slist_peek_next_no_check' 'sys_snode_t *(sys_snode_t *)'
|       | `-ImplicitCastExpr 0x559b74ae3c98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x559b74ae3c28 <col:43> 'sys_snode_t *' lvalue ParmVar 0x559b74ae39d0 'node' 'sys_snode_t *'
|       `-ImplicitCastExpr 0x559b74ae53c0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|         `-ParenExpr 0x559b74ae53a0 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x559b74ae3ce8 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x559b74ae3cb0 <col:23> 'int' 0
|-FunctionDecl 0x559b74ae5570 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:289:1, line:290:27> line:289:20 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74ae5470 <col:38, col:51> col:51 list 'sys_slist_t *'
| |-ParmVarDecl 0x559b74ae54e0 <line:290:10, col:23> col:23 node 'sys_snode_t *'
| `-FullComment 0x559b74c12320 <line:282:3, line:287:47>
|   |-ParagraphComment 0x559b74c12030 <line:282:3>
|   | `-TextComment 0x559b74c12000 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c12050 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x559b74c120b0 <col:10, col:42>
|   |   `-TextComment 0x559b74c12080 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x559b74c12100 <line:284:3, col:62>
|   | `-TextComment 0x559b74c120d0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c12150 <line:286:3>
|   | `-TextComment 0x559b74c12120 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c12170 <col:4, line:287:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c12220 <line:286:15, line:287:3>
|   |   |-TextComment 0x559b74c121d0 <line:286:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559b74c121f0 <line:287:3> Text=" "
|   `-ParamCommandComment 0x559b74c12240 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x559b74c122d0 <col:15, col:47>
|       `-TextComment 0x559b74c122a0 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x559b74ae5730 prev 0x559b74ae5570 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:25:1 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74ae5630 <line:27:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_slist_t *'
| |-ParmVarDecl 0x559b74ae56a0 <<scratch space>:29:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_snode_t *'
| `-CompoundStmt 0x559b74ae5e48 <line:84:2, line:93:2>
|   |-CallExpr 0x559b74ae5950 <<scratch space>:31:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x559b74ae5938 <<scratch space>:31:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559b74ae57e0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x559b74ae21e0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x559b74ae5988 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x559b74ae5808 <col:30> 'sys_snode_t *' lvalue ParmVar 0x559b74ae56a0 'node' 'sys_snode_t *'
|   | `-CallExpr 0x559b74ae5898 <<scratch space>:33:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x559b74ae5880 <<scratch space>:33:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x559b74ae5830 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2ac0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x559b74ae58c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x559b74ae5858 <col:36> 'sys_slist_t *' lvalue ParmVar 0x559b74ae5630 'list' 'sys_slist_t *'
|   |-CallExpr 0x559b74ae5a90 <<scratch space>:35:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x559b74ae5a78 <<scratch space>:35:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559b74ae59a0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559b74ae2520 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x559b74ae5ac8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x559b74ae59c8 <col:30> 'sys_slist_t *' lvalue ParmVar 0x559b74ae5630 'list' 'sys_slist_t *'
|   | `-ImplicitCastExpr 0x559b74ae5ae0 <col:36> 'sys_snode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x559b74ae59f0 <col:36> 'sys_snode_t *' lvalue ParmVar 0x559b74ae56a0 'node' 'sys_snode_t *'
|   `-IfStmt 0x559b74ae5de8 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x559b74ae5c40 <<scratch space>:37:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x559b74ae5b60 <<scratch space>:37:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x559b74ae5b48 <<scratch space>:37:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x559b74ae5af8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2da8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x559b74ae5b90 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559b74ae5b20 <col:37> 'sys_slist_t *' lvalue ParmVar 0x559b74ae5630 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x559b74ae5c28 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x559b74ae5c08 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x559b74ae5be0 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x559b74ae5ba8 <col:23> 'int' 0
|     |-CompoundStmt 0x559b74ae5dd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x559b74ae5d80 <<scratch space>:39:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x559b74ae5d68 <<scratch space>:39:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x559b74ae5c68 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559b74ae27d8 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x559b74ae5db8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x559b74ae5c90 <col:31> 'sys_slist_t *' lvalue ParmVar 0x559b74ae5630 'list' 'sys_slist_t *'
|     |   `-CallExpr 0x559b74ae5d20 <<scratch space>:41:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_snode_t *'
|     |     |-ImplicitCastExpr 0x559b74ae5d08 <<scratch space>:41:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x559b74ae5cb8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2ac0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|     |     `-ImplicitCastExpr 0x559b74ae5d50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_slist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x559b74ae5ce0 <col:36> 'sys_slist_t *' lvalue ParmVar 0x559b74ae5630 'list' 'sys_slist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x559b74ae5f80 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:302:1, line:303:26> line:302:20 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74ae5e80 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x559b74ae5ef0 <line:303:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x559b74c126b0 <line:295:3, line:300:46>
|   |-ParagraphComment 0x559b74c123c0 <line:295:3>
|   | `-TextComment 0x559b74c12390 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c123e0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x559b74c12440 <col:10, col:41>
|   |   `-TextComment 0x559b74c12410 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x559b74c12490 <line:297:3, col:62>
|   | `-TextComment 0x559b74c12460 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c124e0 <line:299:3>
|   | `-TextComment 0x559b74c124b0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c12500 <col:4, line:300:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c125b0 <line:299:15, line:300:3>
|   |   |-TextComment 0x559b74c12560 <line:299:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559b74c12580 <line:300:3> Text=" "
|   `-ParamCommandComment 0x559b74c125d0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x559b74c12660 <col:15, col:46>
|       `-TextComment 0x559b74c12630 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x559b74ae6140 prev 0x559b74ae5f80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:43:1 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74ae6040 <line:45:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x559b74ae60b0 <<scratch space>:47:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x559b74ae7678 <line:99:2, line:111:2>
|   |-CallExpr 0x559b74ae62d8 <<scratch space>:49:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x559b74ae62c0 <<scratch space>:49:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559b74ae61f0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x559b74ae21e0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x559b74ae6310 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x559b74ae6218 <col:30> 'sys_snode_t *' lvalue ParmVar 0x559b74ae60b0 'node' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x559b74ae6328 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |   `-ParenExpr 0x559b74ae62a0 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x559b74ae6278 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x559b74ae6240 <col:23> 'int' 0
|   `-IfStmt 0x559b74ae7610 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x559b74ae7158 <<scratch space>:51:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x559b74ae7078 <<scratch space>:51:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x559b74ae7060 <<scratch space>:51:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x559b74ae6340 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2da8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x559b74ae70a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559b74ae6368 <col:37> 'sys_slist_t *' lvalue ParmVar 0x559b74ae6040 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x559b74ae7140 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x559b74ae7120 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x559b74ae70f8 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x559b74ae70c0 <col:23> 'int' 0
|     |-CompoundStmt 0x559b74ae7370 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x559b74ae7210 <<scratch space>:53:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x559b74ae71f8 <<scratch space>:53:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x559b74ae7180 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559b74ae27d8 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     | | |-ImplicitCastExpr 0x559b74ae7248 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_slist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x559b74ae71a8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x559b74ae6040 'list' 'sys_slist_t *'
|     | | `-ImplicitCastExpr 0x559b74ae7260 <col:37> 'sys_snode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559b74ae71d0 <col:37> 'sys_snode_t *' lvalue ParmVar 0x559b74ae60b0 'node' 'sys_snode_t *'
|     | `-CallExpr 0x559b74ae7308 <<scratch space>:55:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x559b74ae72f0 <<scratch space>:55:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x559b74ae7278 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559b74ae2520 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x559b74ae7340 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x559b74ae72a0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x559b74ae6040 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x559b74ae7358 <col:37> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x559b74ae72c8 <col:37> 'sys_snode_t *' lvalue ParmVar 0x559b74ae60b0 'node' 'sys_snode_t *'
|     `-CompoundStmt 0x559b74ae75f0 <line:105:10, line:110:3>
|       |-CallExpr 0x559b74ae74a8 <<scratch space>:57:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x559b74ae7490 <<scratch space>:57:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x559b74ae7390 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x559b74ae21e0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|       | |-CallExpr 0x559b74ae7420 <line:59:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x559b74ae7408 <<scratch space>:59:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x559b74ae73b8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2da8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|       | | `-ImplicitCastExpr 0x559b74ae7450 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_slist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x559b74ae73e0 <col:35> 'sys_slist_t *' lvalue ParmVar 0x559b74ae6040 'list' 'sys_slist_t *'
|       | `-ImplicitCastExpr 0x559b74ae74e0 <line:108:5> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x559b74ae7468 <col:5> 'sys_snode_t *' lvalue ParmVar 0x559b74ae60b0 'node' 'sys_snode_t *'
|       `-CallExpr 0x559b74ae7588 <<scratch space>:61:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x559b74ae7570 <<scratch space>:61:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x559b74ae74f8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559b74ae27d8 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|         |-ImplicitCastExpr 0x559b74ae75c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_slist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x559b74ae7520 <col:31> 'sys_slist_t *' lvalue ParmVar 0x559b74ae6040 'list' 'sys_slist_t *'
|         `-ImplicitCastExpr 0x559b74ae75d8 <col:37> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x559b74ae7548 <col:37> 'sys_snode_t *' lvalue ParmVar 0x559b74ae60b0 'node' 'sys_snode_t *'
|-FunctionDecl 0x559b74ae78d0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:320:1, line:321:29> line:320:20 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x559b74ae76a8 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x559b74ae7720 <line:321:7, col:13> col:13 head 'void *'
| |-ParmVarDecl 0x559b74ae7798 <col:19, col:25> col:25 tail 'void *'
| `-FullComment 0x559b74c12c10 <line:308:3, line:318:66>
|   |-ParagraphComment 0x559b74c12750 <line:308:3>
|   | `-TextComment 0x559b74c12720 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c12770 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x559b74c127d0 <col:10, col:41>
|   |   `-TextComment 0x559b74c127a0 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x559b74c128c0 <line:310:3, line:312:62>
|   | |-TextComment 0x559b74c127f0 <line:310:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x559b74c12810 <line:311:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x559b74c12860 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x559b74c12880 <line:312:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c12910 <line:314:3, col:48>
|   | `-TextComment 0x559b74c128e0 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x559b74c12960 <line:316:3>
|   | `-TextComment 0x559b74c12930 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c12980 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c12a30 <line:316:15, line:317:3>
|   |   |-TextComment 0x559b74c129e0 <line:316:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559b74c12a00 <line:317:3> Text=" "
|   |-ParamCommandComment 0x559b74c12a50 <col:4, line:318:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x559b74c12b00 <line:317:15, line:318:3>
|   |   |-TextComment 0x559b74c12ab0 <line:317:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x559b74c12ad0 <line:318:3> Text=" "
|   `-ParamCommandComment 0x559b74c12b20 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x559b74c12bb0 <col:15, col:66>
|       `-TextComment 0x559b74c12b80 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x559b74ae7b20 prev 0x559b74ae78d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:63:1 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x559b74ae7998 <line:65:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_slist_t *'
| |-ParmVarDecl 0x559b74ae7a10 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x559b74ae7a88 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x559b74ae8208 <col:31, line:127:42>
|   |-IfStmt 0x559b74ae8070 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559b74ae7d20 <<scratch space>:67:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x559b74ae7c40 <<scratch space>:67:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x559b74ae7c28 <<scratch space>:67:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559b74ae7bd8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2da8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x559b74ae7c70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x559b74ae7c00 <col:36> 'sys_slist_t *' lvalue ParmVar 0x559b74ae7998 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x559b74ae7d08 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x559b74ae7ce8 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x559b74ae7cc0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x559b74ae7c88 <col:23> 'int' 0
|   | |-CompoundStmt 0x559b74ae7e78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x559b74ae7e28 <<scratch space>:69:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x559b74ae7e10 <<scratch space>:69:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559b74ae7d48 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559b74ae2520 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x559b74ae7e60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x559b74ae7d70 <col:30> 'sys_slist_t *' lvalue ParmVar 0x559b74ae7998 'list' 'sys_slist_t *'
|   | |   `-CStyleCastExpr 0x559b74ae7de8 <line:120:6, col:31> 'sys_snode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x559b74ae7dd0 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x559b74ae7d98 <col:31> 'void *' lvalue ParmVar 0x559b74ae7a10 'head' 'void *'
|   | `-CompoundStmt 0x559b74ae8030 <line:121:9, line:125:2>
|   |   `-CallExpr 0x559b74ae7ff8 <<scratch space>:73:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x559b74ae7fe0 <<scratch space>:73:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559b74ae7e90 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x559b74ae21e0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |     |-CallExpr 0x559b74ae7f20 <line:75:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_snode_t *'
|   |     | |-ImplicitCastExpr 0x559b74ae7f08 <<scratch space>:75:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x559b74ae7eb8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2da8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | `-ImplicitCastExpr 0x559b74ae7f50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_slist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559b74ae7ee0 <col:34> 'sys_slist_t *' lvalue ParmVar 0x559b74ae7998 'list' 'sys_slist_t *'
|   |     `-CStyleCastExpr 0x559b74ae7fb8 <line:124:4, col:29> 'sys_snode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x559b74ae7fa0 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x559b74ae7f68 <col:29> 'void *' lvalue ParmVar 0x559b74ae7a10 'head' 'void *'
|   `-CallExpr 0x559b74ae8188 <<scratch space>:79:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x559b74ae8170 <<scratch space>:79:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74ae80a8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559b74ae27d8 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x559b74ae81c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_slist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x559b74ae80d0 <col:29> 'sys_slist_t *' lvalue ParmVar 0x559b74ae7998 'list' 'sys_slist_t *'
|     `-CStyleCastExpr 0x559b74ae8148 <line:127:10, col:35> 'sys_snode_t *' <BitCast>
|       `-ImplicitCastExpr 0x559b74ae8130 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74ae80f8 <col:35> 'void *' lvalue ParmVar 0x559b74ae7a88 'tail' 'void *'
|-FunctionDecl 0x559b74ae83c0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:334:1, line:335:34> line:334:20 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x559b74ae8238 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x559b74ae82a8 <line:335:7, col:20> col:20 list_to_append 'sys_slist_t *'
| `-FullComment 0x559b74c12fc0 <line:326:3, line:332:57>
|   |-ParagraphComment 0x559b74c12cb0 <line:326:3>
|   | `-TextComment 0x559b74c12c80 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c12cd0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x559b74c12d30 <col:10, col:65>
|   |   `-TextComment 0x559b74c12d00 <col:10, col:65> Text=" merge two slists, appending the second one to the first"
|   |-ParagraphComment 0x559b74c12da0 <line:328:3, line:329:62>
|   | |-TextComment 0x559b74c12d50 <line:328:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x559b74c12d70 <line:329:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c12df0 <line:331:3>
|   | `-TextComment 0x559b74c12dc0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c12e10 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c12ec0 <line:331:15, line:332:3>
|   |   |-TextComment 0x559b74c12e70 <line:331:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559b74c12e90 <line:332:3> Text=" "
|   `-ParamCommandComment 0x559b74c12ee0 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x559b74c12f70 <col:25, col:57>
|       `-TextComment 0x559b74c12f40 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x559b74ae8580 prev 0x559b74ae83c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:84:1 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x559b74ae8480 <line:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_slist_t *'
| |-ParmVarDecl 0x559b74ae84f0 <<scratch space>:88:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_slist_t *'
| `-CompoundStmt 0x559b74ae8c48 <line:135:2, line:141:2>
|   |-DeclStmt 0x559b74ae8728 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x559b74ae8640 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_snode_t *'
|   | `-VarDecl 0x559b74ae86b0 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_snode_t *'
|   |-BinaryOperator 0x559b74ae8818 <line:137:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x559b74ae8740 <col:3> 'sys_snode_t *' lvalue Var 0x559b74ae8640 'head' 'sys_snode_t *'
|   | `-CallExpr 0x559b74ae87d0 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x559b74ae87b8 <<scratch space>:92:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x559b74ae8768 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2ac0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x559b74ae8800 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x559b74ae8790 <col:40> 'sys_slist_t *' lvalue ParmVar 0x559b74ae84f0 'list_to_append' 'sys_slist_t *'
|   |-BinaryOperator 0x559b74ae8918 <line:138:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x559b74ae8840 <col:3> 'sys_snode_t *' lvalue Var 0x559b74ae86b0 'tail' 'sys_snode_t *'
|   | `-CallExpr 0x559b74ae88d0 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x559b74ae88b8 <<scratch space>:94:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x559b74ae8868 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2da8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x559b74ae8900 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x559b74ae8890 <col:40> 'sys_slist_t *' lvalue ParmVar 0x559b74ae84f0 'list_to_append' 'sys_slist_t *'
|   |-CallExpr 0x559b74ae8a50 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x559b74ae8a38 <<scratch space>:96:1> 'void (*)(sys_slist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559b74ae8940 <col:1> 'void (sys_slist_t *, void *, void *)' Function 0x559b74ae7b20 'sys_slist_append_list' 'void (sys_slist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x559b74ae8a90 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x559b74ae8968 <col:35> 'sys_slist_t *' lvalue ParmVar 0x559b74ae8480 'list' 'sys_slist_t *'
|   | |-ImplicitCastExpr 0x559b74ae8ac0 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x559b74ae8aa8 <col:41> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x559b74ae8990 <col:41> 'sys_snode_t *' lvalue Var 0x559b74ae8640 'head' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x559b74ae8af0 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x559b74ae8ad8 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x559b74ae89b8 <col:47> 'sys_snode_t *' lvalue Var 0x559b74ae86b0 'tail' 'sys_snode_t *'
|   `-CallExpr 0x559b74ae8bd0 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x559b74ae8bb8 <<scratch space>:98:1> 'void (*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74ae8b08 <col:1> 'void (sys_slist_t *)' Function 0x559b74accb00 'sys_slist_init' 'void (sys_slist_t *)'
|     `-ImplicitCastExpr 0x559b74ae8c00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_slist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74ae8b30 <col:28> 'sys_slist_t *' lvalue ParmVar 0x559b74ae84f0 'list_to_append' 'sys_slist_t *'
|-FunctionDecl 0x559b74ae8ea0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:348:1, line:350:26> line:348:20 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74ae8c90 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x559b74ae8d00 <line:349:9, col:22> col:22 prev 'sys_snode_t *'
| |-ParmVarDecl 0x559b74ae8d70 <line:350:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x559b74c13430 <line:340:3, line:346:46>
|   |-ParagraphComment 0x559b74c13060 <line:340:3>
|   | `-TextComment 0x559b74c13030 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c13080 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x559b74c130e0 <col:10, col:41>
|   |   `-TextComment 0x559b74c130b0 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x559b74c13130 <line:342:3, col:62>
|   | `-TextComment 0x559b74c13100 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c13180 <line:344:3>
|   | `-TextComment 0x559b74c13150 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c131a0 <col:4, line:345:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c13250 <line:344:15, line:345:3>
|   |   |-TextComment 0x559b74c13200 <line:344:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559b74c13220 <line:345:3> Text=" "
|   |-ParamCommandComment 0x559b74c13270 <col:4, line:346:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x559b74c13320 <line:345:15, line:346:3>
|   |   |-TextComment 0x559b74c132d0 <line:345:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x559b74c132f0 <line:346:3> Text=" "
|   `-ParamCommandComment 0x559b74c13340 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x559b74c133d0 <col:15, col:46>
|       `-TextComment 0x559b74c133a0 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x559b74aec108 prev 0x559b74ae8ea0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:100:1 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74ae8f68 <line:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x559b74ae8fd8 <<scratch space>:104:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_snode_t *'
| |-ParmVarDecl 0x559b74aec070 <<scratch space>:106:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x559b74aec968 <line:148:2, line:158:2>
|   `-IfStmt 0x559b74aec908 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x559b74aec298 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x559b74aec268 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_snode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x559b74aec1c0 <col:7> 'sys_snode_t *' lvalue ParmVar 0x559b74ae8fd8 'prev' 'sys_snode_t *'
|     | `-ImplicitCastExpr 0x559b74aec280 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x559b74aec248 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x559b74aec220 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x559b74aec1e8 <col:23> 'int' 0
|     |-CompoundStmt 0x559b74aec3b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x559b74aec350 <<scratch space>:108:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x559b74aec338 <<scratch space>:108:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x559b74aec2c0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559b74ae5730 'sys_slist_prepend' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x559b74aec388 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x559b74aec2e8 <col:32> 'sys_slist_t *' lvalue ParmVar 0x559b74ae8f68 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x559b74aec3a0 <col:38> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x559b74aec310 <col:38> 'sys_snode_t *' lvalue ParmVar 0x559b74aec070 'node' 'sys_snode_t *'
|     `-IfStmt 0x559b74aec8d0 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x559b74aec518 <<scratch space>:110:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x559b74aec438 <<scratch space>:110:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x559b74aec420 <<scratch space>:110:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x559b74aec3d0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x559b74ae1ee0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       | | `-ImplicitCastExpr 0x559b74aec468 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_snode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x559b74aec3f8 <col:42> 'sys_snode_t *' lvalue ParmVar 0x559b74ae8fd8 'prev' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x559b74aec500 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x559b74aec4e0 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x559b74aec4b8 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x559b74aec480 <col:23> 'int' 0
|       |-CompoundStmt 0x559b74aec638 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x559b74aec5d0 <<scratch space>:112:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x559b74aec5b8 <<scratch space>:112:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x559b74aec540 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559b74ae6140 'sys_slist_append' 'void (sys_slist_t *, sys_snode_t *)'
|       |   |-ImplicitCastExpr 0x559b74aec608 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_slist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x559b74aec568 <col:31> 'sys_slist_t *' lvalue ParmVar 0x559b74ae8f68 'list' 'sys_slist_t *'
|       |   `-ImplicitCastExpr 0x559b74aec620 <col:37> 'sys_snode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x559b74aec590 <col:37> 'sys_snode_t *' lvalue ParmVar 0x559b74aec070 'node' 'sys_snode_t *'
|       `-CompoundStmt 0x559b74aec8b0 <line:153:10, line:157:3>
|         |-CallExpr 0x559b74aec768 <<scratch space>:114:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x559b74aec750 <<scratch space>:114:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x559b74aec650 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x559b74ae21e0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|         | |-ImplicitCastExpr 0x559b74aec7a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_snode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x559b74aec678 <col:31> 'sys_snode_t *' lvalue ParmVar 0x559b74aec070 'node' 'sys_snode_t *'
|         | `-CallExpr 0x559b74aec708 <<scratch space>:116:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_snode_t *'
|         |   |-ImplicitCastExpr 0x559b74aec6f0 <<scratch space>:116:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x559b74aec6a0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x559b74ae1ee0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|         |   `-ImplicitCastExpr 0x559b74aec738 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_snode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x559b74aec6c8 <col:33> 'sys_snode_t *' lvalue ParmVar 0x559b74ae8fd8 'prev' 'sys_snode_t *'
|         `-CallExpr 0x559b74aec848 <<scratch space>:118:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x559b74aec830 <<scratch space>:118:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x559b74aec7b8 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x559b74ae21e0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|           |-ImplicitCastExpr 0x559b74aec880 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_snode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x559b74aec7e0 <col:31> 'sys_snode_t *' lvalue ParmVar 0x559b74ae8fd8 'prev' 'sys_snode_t *'
|           `-ImplicitCastExpr 0x559b74aec898 <col:37> 'sys_snode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x559b74aec808 <col:37> 'sys_snode_t *' lvalue ParmVar 0x559b74aec070 'node' 'sys_snode_t *'
|-FunctionDecl 0x559b74aeca18 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:364:1, col:69> col:28 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x559b74aec990 <col:52, col:65> col:65 list 'sys_slist_t *'
| `-FullComment 0x559b74c13820 <line:355:3, line:362:50>
|   |-ParagraphComment 0x559b74c134d0 <line:355:3>
|   | `-TextComment 0x559b74c134a0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c134f0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x559b74c13550 <col:10, col:59>
|   |   `-TextComment 0x559b74c13520 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x559b74c135c0 <line:357:3, line:358:62>
|   | |-TextComment 0x559b74c13570 <line:357:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x559b74c13590 <line:358:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c13610 <line:360:3>
|   | `-TextComment 0x559b74c135e0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c13630 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c136c0 <col:15, col:46>
|   |   `-TextComment 0x559b74c13690 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x559b74c13710 <line:362:3>
|   | `-TextComment 0x559b74c136e0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c13730 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x559b74c13790 <col:11, col:50>
|       `-TextComment 0x559b74c13760 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x559b74aecb58 prev 0x559b74aeca18 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:122:1 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x559b74aecad0 <line:124:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_slist_t *'
| `-CompoundStmt 0x559b74aed208 <line:163:2, line:175:2>
|   |-DeclStmt 0x559b74aecd20 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x559b74aecc10 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_snode_t *' cinit
|   |   `-CallExpr 0x559b74aeccd8 <<scratch space>:128:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_snode_t *'
|   |     |-ImplicitCastExpr 0x559b74aeccc0 <<scratch space>:128:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559b74aecc70 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2ac0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |     `-ImplicitCastExpr 0x559b74aecd08 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_slist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x559b74aecc98 <col:35> 'sys_slist_t *' lvalue ParmVar 0x559b74aecad0 'list' 'sys_slist_t *'
|   |-CallExpr 0x559b74aece50 <<scratch space>:130:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x559b74aece38 <<scratch space>:130:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559b74aecd38 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559b74ae2520 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x559b74aece88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x559b74aecd60 <col:30> 'sys_slist_t *' lvalue ParmVar 0x559b74aecad0 'list' 'sys_slist_t *'
|   | `-CallExpr 0x559b74aecdf0 <<scratch space>:132:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x559b74aecdd8 <<scratch space>:132:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x559b74aecd88 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x559b74ae1ee0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   `-ImplicitCastExpr 0x559b74aece20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x559b74aecdb0 <col:33> 'sys_snode_t *' lvalue Var 0x559b74aecc10 'node' 'sys_snode_t *'
|   |-IfStmt 0x559b74aed148 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559b74aecf90 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x559b74aecf08 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x559b74aecef0 <<scratch space>:134:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559b74aecea0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2da8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x559b74aecf38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x559b74aecec8 <col:37> 'sys_slist_t *' lvalue ParmVar 0x559b74aecad0 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x559b74aecf78 <col:46> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x559b74aecf50 <col:46> 'sys_snode_t *' lvalue Var 0x559b74aecc10 'node' 'sys_snode_t *'
|   | |-CompoundStmt 0x559b74aed130 <col:52, line:172:3>
|   | | `-CallExpr 0x559b74aed0e0 <<scratch space>:136:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x559b74aed0c8 <<scratch space>:136:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559b74aecfb8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559b74ae27d8 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x559b74aed118 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x559b74aecfe0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x559b74aecad0 'list' 'sys_slist_t *'
|   | |   `-CallExpr 0x559b74aed080 <<scratch space>:138:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_snode_t *'
|   | |     |-ImplicitCastExpr 0x559b74aed058 <<scratch space>:138:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x559b74aed008 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2ac0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |     `-ImplicitCastExpr 0x559b74aed0b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_slist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x559b74aed030 <col:35> 'sys_slist_t *' lvalue ParmVar 0x559b74aecad0 'list' 'sys_slist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x559b74aed1c0 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x559b74aed1a8 <col:10> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74aed180 <col:10> 'sys_snode_t *' lvalue Var 0x559b74aecc10 'node' 'sys_snode_t *'
|-FunctionDecl 0x559b74aed2d0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:377:1, col:59> col:28 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x559b74aed248 <col:42, col:55> col:55 list 'sys_slist_t *'
| `-FullComment 0x559b74c13bc0 <line:369:3, line:375:69>
|   |-ParagraphComment 0x559b74c138c0 <line:369:3>
|   | `-TextComment 0x559b74c13890 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c138e0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x559b74c13940 <col:10, col:59>
|   |   `-TextComment 0x559b74c13910 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x559b74c13990 <line:371:3, col:62>
|   | `-TextComment 0x559b74c13960 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c139e0 <line:373:3>
|   | `-TextComment 0x559b74c139b0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c13a00 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c13a90 <col:15, col:46>
|   |   `-TextComment 0x559b74c13a60 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x559b74c13ae0 <line:375:3>
|   | `-TextComment 0x559b74c13ab0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c13b00 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x559b74c13b60 <col:11, col:69>
|       `-TextComment 0x559b74c13b30 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x559b74aed410 prev 0x559b74aed2d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:142:1 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x559b74aed388 <line:144:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_slist_t *'
| `-CompoundStmt 0x559b74aed798 <line:180:2, line:183:2>
|   `-ReturnStmt 0x559b74aed758 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x559b74aed728 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x559b74aed6f8 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x559b74aed580 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x559b74aed568 <<scratch space>:146:1> 'bool (*)(sys_slist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x559b74aed4b8 <col:1> 'bool (sys_slist_t *)' Function 0x559b74ae3190 'sys_slist_is_empty' 'bool (sys_slist_t *)'
|       |   `-ImplicitCastExpr 0x559b74aed5b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_slist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x559b74aed4e0 <col:39> 'sys_slist_t *' lvalue ParmVar 0x559b74aed388 'list' 'sys_slist_t *'
|       |-ImplicitCastExpr 0x559b74aed710 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       | `-ParenExpr 0x559b74aed628 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x559b74aed600 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x559b74aed5c8 <col:23> 'int' 0
|       `-CallExpr 0x559b74aed6b0 <<scratch space>:148:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|         |-ImplicitCastExpr 0x559b74aed698 <<scratch space>:148:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x559b74aed648 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74aecb58 'sys_slist_get_not_empty' 'sys_snode_t *(sys_slist_t *)'
|         `-ImplicitCastExpr 0x559b74aed6e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_slist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x559b74aed670 <col:38> 'sys_slist_t *' lvalue ParmVar 0x559b74aed388 'list' 'sys_slist_t *'
|-FunctionDecl 0x559b74aed938 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:391:1, line:393:26> line:391:20 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74aed7c0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x559b74aed830 <line:392:9, col:22> col:22 prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x559b74aed8a0 <line:393:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x559b74c14060 <line:382:3, line:389:46>
|   |-ParagraphComment 0x559b74c13c60 <line:382:3>
|   | `-TextComment 0x559b74c13c30 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c13c80 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x559b74c13ce0 <col:10, col:23>
|   |   `-TextComment 0x559b74c13cb0 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x559b74c13d30 <line:384:3, col:62>
|   | `-TextComment 0x559b74c13d00 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c13d80 <line:386:3>
|   | `-TextComment 0x559b74c13d50 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c13da0 <col:4, line:387:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c13e50 <line:386:15, line:387:3>
|   |   |-TextComment 0x559b74c13e00 <line:386:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559b74c13e20 <line:387:3> Text=" "
|   |-ParamCommandComment 0x559b74c13e70 <col:4, line:389:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x559b74c13f50 <line:387:20, line:389:3>
|   |   |-TextComment 0x559b74c13ed0 <line:387:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x559b74c13ef0 <line:388:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x559b74c13f10 <line:389:3> Text=" "
|   `-ParamCommandComment 0x559b74c13f70 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x559b74c14000 <col:15, col:46>
|       `-TextComment 0x559b74c13fd0 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x559b74aedb78 prev 0x559b74aed938 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:150:1 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74aeda00 <line:152:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x559b74aeda70 <<scratch space>:154:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x559b74aedae0 <<scratch space>:156:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x559b74aee748 <line:190:2, line:212:2>
|   |-IfStmt 0x559b74aee598 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559b74aedd08 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x559b74aedcd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559b74aedc30 <col:7> 'sys_snode_t *' lvalue ParmVar 0x559b74aeda70 'prev_node' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x559b74aedcf0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x559b74aedcb8 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x559b74aedc90 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x559b74aedc58 <col:23> 'int' 0
|   | |-CompoundStmt 0x559b74aee190 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x559b74aede48 <<scratch space>:158:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x559b74aede30 <<scratch space>:158:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559b74aedd30 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559b74ae2520 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | | | |-ImplicitCastExpr 0x559b74aede80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_slist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x559b74aedd58 <col:31> 'sys_slist_t *' lvalue ParmVar 0x559b74aeda00 'list' 'sys_slist_t *'
|   | | | `-CallExpr 0x559b74aedde8 <<scratch space>:160:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_snode_t *'
|   | | |   |-ImplicitCastExpr 0x559b74aeddd0 <<scratch space>:160:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x559b74aedd80 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x559b74ae1ee0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   | | |   `-ImplicitCastExpr 0x559b74aede18 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_snode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x559b74aedda8 <col:33> 'sys_snode_t *' lvalue ParmVar 0x559b74aedae0 'node' 'sys_snode_t *'
|   | | `-IfStmt 0x559b74aee158 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x559b74aedf88 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x559b74aedf00 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_snode_t *'
|   | |   | | |-ImplicitCastExpr 0x559b74aedee8 <<scratch space>:162:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x559b74aede98 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2da8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | |   | | `-ImplicitCastExpr 0x559b74aedf30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_slist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x559b74aedec0 <col:38> 'sys_slist_t *' lvalue ParmVar 0x559b74aeda00 'list' 'sys_slist_t *'
|   | |   | `-ImplicitCastExpr 0x559b74aedf70 <col:47> 'sys_snode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x559b74aedf48 <col:47> 'sys_snode_t *' lvalue ParmVar 0x559b74aedae0 'node' 'sys_snode_t *'
|   | |   |-CompoundStmt 0x559b74aee140 <col:53, line:199:4>
|   | |   | `-CallExpr 0x559b74aee0f0 <<scratch space>:164:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x559b74aee0d8 <<scratch space>:164:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x559b74aedfb0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559b74ae27d8 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |   |-ImplicitCastExpr 0x559b74aee128 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_slist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x559b74aedfd8 <col:32> 'sys_slist_t *' lvalue ParmVar 0x559b74aeda00 'list' 'sys_slist_t *'
|   | |   |   `-CallExpr 0x559b74aee090 <<scratch space>:166:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_snode_t *'
|   | |   |     |-ImplicitCastExpr 0x559b74aee050 <<scratch space>:166:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x559b74aee000 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2ac0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   |     `-ImplicitCastExpr 0x559b74aee0c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_slist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x559b74aee028 <col:36> 'sys_slist_t *' lvalue ParmVar 0x559b74aeda00 'list' 'sys_slist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x559b74aee578 <line:200:10, line:209:3>
|   |   |-CallExpr 0x559b74aee2c8 <<scratch space>:168:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x559b74aee2b0 <<scratch space>:168:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x559b74aee1b0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x559b74ae21e0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |   | |-ImplicitCastExpr 0x559b74aee300 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_snode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x559b74aee1d8 <col:31> 'sys_snode_t *' lvalue ParmVar 0x559b74aeda70 'prev_node' 'sys_snode_t *'
|   |   | `-CallExpr 0x559b74aee268 <<scratch space>:170:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_snode_t *'
|   |   |   |-ImplicitCastExpr 0x559b74aee250 <<scratch space>:170:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x559b74aee200 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x559b74ae1ee0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   |   `-ImplicitCastExpr 0x559b74aee298 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_snode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x559b74aee228 <col:33> 'sys_snode_t *' lvalue ParmVar 0x559b74aedae0 'node' 'sys_snode_t *'
|   |   `-IfStmt 0x559b74aee540 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x559b74aee408 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x559b74aee380 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_snode_t *'
|   |     | | |-ImplicitCastExpr 0x559b74aee368 <<scratch space>:172:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x559b74aee318 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2da8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | | `-ImplicitCastExpr 0x559b74aee3b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_slist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x559b74aee340 <col:38> 'sys_slist_t *' lvalue ParmVar 0x559b74aeda00 'list' 'sys_slist_t *'
|   |     | `-ImplicitCastExpr 0x559b74aee3f0 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559b74aee3c8 <col:47> 'sys_snode_t *' lvalue ParmVar 0x559b74aedae0 'node' 'sys_snode_t *'
|   |     |-CompoundStmt 0x559b74aee528 <col:53, line:208:4>
|   |     | `-CallExpr 0x559b74aee4c0 <<scratch space>:174:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x559b74aee4a8 <<scratch space>:174:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x559b74aee430 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559b74ae27d8 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   |     |   |-ImplicitCastExpr 0x559b74aee4f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_slist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x559b74aee458 <col:32> 'sys_slist_t *' lvalue ParmVar 0x559b74aeda00 'list' 'sys_slist_t *'
|   |     |   `-ImplicitCastExpr 0x559b74aee510 <line:207:13> 'sys_snode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x559b74aee480 <col:13> 'sys_snode_t *' lvalue ParmVar 0x559b74aeda70 'prev_node' 'sys_snode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x559b74aee6b8 <<scratch space>:176:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x559b74aee6a0 <<scratch space>:176:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74aee5d0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x559b74ae21e0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x559b74aee6f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_snode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x559b74aee5f8 <col:30> 'sys_snode_t *' lvalue ParmVar 0x559b74aedae0 'node' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x559b74aee708 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       `-ParenExpr 0x559b74aee680 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x559b74aee658 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x559b74aee620 <col:23> 'int' 0
|-FunctionDecl 0x559b74aee900 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:407:1, line:408:28> line:407:20 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74aee778 <col:46, col:59> col:59 list 'sys_slist_t *'
| |-ParmVarDecl 0x559b74aee7e8 <line:408:11, col:24> col:24 node 'sys_snode_t *'
| `-FullComment 0x559b74c144d0 <line:398:3, line:405:35>
|   |-ParagraphComment 0x559b74c14100 <line:398:3>
|   | `-TextComment 0x559b74c140d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c14120 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559b74c14180 <col:10, col:44>
|   |   `-TextComment 0x559b74c14150 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x559b74c141d0 <line:400:3, col:62>
|   | `-TextComment 0x559b74c141a0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c14220 <line:402:3>
|   | `-TextComment 0x559b74c141f0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c14240 <col:4, line:403:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c142f0 <line:402:15, line:403:3>
|   |   |-TextComment 0x559b74c142a0 <line:402:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559b74c142c0 <line:403:3> Text=" "
|   |-ParamCommandComment 0x559b74c14310 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559b74c143a0 <col:15, col:60>
|   |   `-TextComment 0x559b74c14370 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x559b74c143f0 <line:405:3>
|   | `-TextComment 0x559b74c143c0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c14410 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c14470 <col:11, col:35>
|       `-TextComment 0x559b74c14440 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x559b74aeeac0 prev 0x559b74aee900 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:178:1 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559b74aee9c0 <line:180:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_slist_t *'
| |-ParmVarDecl 0x559b74aeea30 <<scratch space>:182:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_snode_t *'
| `-CompoundStmt 0x559b74af1608 <line:218:2, line:233:2>
|   |-DeclStmt 0x559b74aeec78 <<scratch space>:184:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x559b74aeeb80 <<scratch space>:184:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_snode_t *' cinit
|   |   `-ImplicitCastExpr 0x559b74aeec60 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |     `-ParenExpr 0x559b74aeec40 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x559b74aeec18 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x559b74aeebe0 <col:23> 'int' 0
|   |-DeclStmt 0x559b74aeed00 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x559b74aeeca0 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_snode_t *'
|   |-ForStmt 0x559b74af1550 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x559b74aeedf0 <line:222:42, line:15:47> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x559b74aeed18 <line:222:42> 'sys_snode_t *' lvalue Var 0x559b74aeeca0 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x559b74aeeda8 <<scratch space>:188:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x559b74aeed90 <<scratch space>:188:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559b74aeed40 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559b74ae2ac0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   `-ImplicitCastExpr 0x559b74aeedd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_slist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x559b74aeed68 <col:36> 'sys_slist_t *' lvalue ParmVar 0x559b74aee9c0 'list' 'sys_slist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559b74aeeef0 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x559b74aeeec0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559b74aeee18 <col:42> 'sys_snode_t *' lvalue Var 0x559b74aeeca0 'test' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x559b74aeeed8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x559b74aeeea0 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x559b74aeee78 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x559b74aeee40 <col:23> 'int' 0
|   | |-BinaryOperator 0x559b74aeeff0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x559b74aeef18 <line:222:42> 'sys_snode_t *' lvalue Var 0x559b74aeeca0 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x559b74aeefa8 <<scratch space>:190:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x559b74aeef90 <<scratch space>:190:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559b74aeef40 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x559b74ae3a58 'sys_slist_peek_next' 'sys_snode_t *(sys_snode_t *)'
|   | |   `-ImplicitCastExpr 0x559b74aeefd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x559b74aeef68 <col:42> 'sys_snode_t *' lvalue Var 0x559b74aeeca0 'test' 'sys_snode_t *'
|   | `-CompoundStmt 0x559b74af1530 <col:48, line:230:3>
|   |   |-IfStmt 0x559b74af1468 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x559b74af1238 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x559b74aef068 <col:8> 'sys_snode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x559b74aef018 <col:8> 'sys_snode_t *' lvalue Var 0x559b74aeeca0 'test' 'sys_snode_t *'
|   |   | | `-ImplicitCastExpr 0x559b74af1220 <col:16> 'sys_snode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x559b74aef040 <col:16> 'sys_snode_t *' lvalue ParmVar 0x559b74aeea30 'node' 'sys_snode_t *'
|   |   | |-CompoundStmt 0x559b74af1448 <col:22, line:227:4>
|   |   | | |-CallExpr 0x559b74af1370 <<scratch space>:192:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x559b74af1358 <<scratch space>:192:1> 'void (*)(sys_slist_t *, sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x559b74af1260 <col:1> 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' Function 0x559b74aedb78 'sys_slist_remove' 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)'
|   |   | | | |-ImplicitCastExpr 0x559b74af13b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_slist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x559b74af1288 <col:32> 'sys_slist_t *' lvalue ParmVar 0x559b74aee9c0 'list' 'sys_slist_t *'
|   |   | | | |-ImplicitCastExpr 0x559b74af13c8 <col:38> 'sys_snode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x559b74af12b0 <col:38> 'sys_snode_t *' lvalue Var 0x559b74aeeb80 'prev' 'sys_snode_t *'
|   |   | | | `-ImplicitCastExpr 0x559b74af13e0 <line:225:11> 'sys_snode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x559b74af12d8 <col:11> 'sys_snode_t *' lvalue ParmVar 0x559b74aeea30 'node' 'sys_snode_t *'
|   |   | | `-ReturnStmt 0x559b74af1430 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x559b74af1418 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x559b74af13f8 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x559b74af1508 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_snode_t *' '='
|   |     |-DeclRefExpr 0x559b74af14a0 <col:4> 'sys_snode_t *' lvalue Var 0x559b74aeeb80 'prev' 'sys_snode_t *'
|   |     `-ImplicitCastExpr 0x559b74af14f0 <col:11> 'sys_snode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x559b74af14c8 <col:11> 'sys_snode_t *' lvalue Var 0x559b74aeeca0 'test' 'sys_snode_t *'
|   `-ReturnStmt 0x559b74af15c0 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x559b74af15a8 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x559b74af1588 <col:16> 'int' 0
|-TypedefDecl 0x559b74af1670 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:29:1, col:15> col:15 referenced unative_t 'u64_t':'unsigned long long'
| `-TypedefType 0x559b74af1640 'u64_t' sugar
|   |-Typedef 0x559b74a48b70 'u64_t'
|   `-BuiltinType 0x559b749d8af0 'unsigned long long'
|-RecordDecl 0x559b74af16c8 <line:34:1, line:36:1> line:34:8 struct _sfnode definition
| `-FieldDecl 0x559b74af17a0 <line:35:2, col:12> col:12 referenced next_and_flags 'unative_t':'unsigned long long'
|-TypedefDecl 0x559b74af1840 <line:38:1, col:24> col:24 referenced sys_sfnode_t 'struct _sfnode':'struct _sfnode'
| `-ElaboratedType 0x559b74af17f0 'struct _sfnode' sugar
|   `-RecordType 0x559b74af1750 'struct _sfnode'
|     `-Record 0x559b74af16c8 '_sfnode'
|-RecordDecl 0x559b74af1898 <line:40:1, line:43:1> line:40:8 struct _sflist definition
| |-FieldDecl 0x559b74af19c8 <line:41:2, col:16> col:16 referenced head 'sys_sfnode_t *'
| `-FieldDecl 0x559b74af1a20 <line:42:2, col:16> col:16 referenced tail 'sys_sfnode_t *'
|-TypedefDecl 0x559b74af1ac0 <line:45:1, col:24> col:24 referenced sys_sflist_t 'struct _sflist':'struct _sflist'
| `-ElaboratedType 0x559b74af1a70 'struct _sflist' sugar
|   `-RecordType 0x559b74af1920 'struct _sflist'
|     `-Record 0x559b74af1898 '_sflist'
|-FunctionDecl 0x559b74af1dd0 <line:196:1, line:200:1> line:196:20 used sys_sflist_init 'void (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559b74af1cc8 <col:36, col:50> col:50 used list 'sys_sflist_t *'
| |-CompoundStmt 0x559b74af20e8 <line:197:1, line:200:1>
| | |-BinaryOperator 0x559b74af1f88 <line:198:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| | | |-MemberExpr 0x559b74af1eb8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:198:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x559b74af19c8
| | | | `-ImplicitCastExpr 0x559b74af1ea0 <col:2> 'sys_sflist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x559b74af1e78 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x559b74af1cc8 'list' 'sys_sflist_t *'
| | | `-ImplicitCastExpr 0x559b74af1f70 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| | |   `-ParenExpr 0x559b74af1f50 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x559b74af1f28 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x559b74af1ef0 <col:23> 'int' 0
| | `-BinaryOperator 0x559b74af20c0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| |   |-MemberExpr 0x559b74af1ff0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x559b74af1a20
| |   | `-ImplicitCastExpr 0x559b74af1fd8 <col:2> 'sys_sflist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x559b74af1fb0 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x559b74af1cc8 'list' 'sys_sflist_t *'
| |   `-ImplicitCastExpr 0x559b74af20a8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| |     `-ParenExpr 0x559b74af2088 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x559b74af2060 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x559b74af2028 <col:23> 'int' 0
| `-FullComment 0x559b74c14730 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:192:3, line:194:50>
|   |-ParagraphComment 0x559b74c14570 <line:192:3>
|   | `-TextComment 0x559b74c14540 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c14590 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x559b74c145f0 <col:10, col:27>
|   |   `-TextComment 0x559b74c145c0 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x559b74c14640 <line:194:3>
|   | `-TextComment 0x559b74c14610 <col:3> Text=" "
|   `-ParamCommandComment 0x559b74c14660 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x559b74c146f0 <col:15, col:50>
|       `-TextComment 0x559b74c146c0 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x559b74af7870 <line:205:1, line:208:1> line:205:29 used z_sfnode_next_peek 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74af2118 <col:48, col:62> col:62 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x559b74af7ac8 <line:206:1, line:208:1>
|   `-ReturnStmt 0x559b74af7ab0 <line:207:2, col:71>
|     `-CStyleCastExpr 0x559b74af7a88 <col:9, col:71> 'sys_sfnode_t *' <IntegralToPointer>
|       `-ParenExpr 0x559b74af7a68 <col:25, col:71> 'unsigned long long'
|         `-BinaryOperator 0x559b74af7a00 <col:26, line:203:31> 'unsigned long long' '&'
|           |-ImplicitCastExpr 0x559b74af79d0 <line:207:26, col:32> 'unative_t':'unsigned long long' <LValueToRValue>
|           | `-MemberExpr 0x559b74af7958 <col:26, col:32> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x559b74af17a0
|           |   `-ImplicitCastExpr 0x559b74af7940 <col:26> 'sys_sfnode_t *' <LValueToRValue>
|           |     `-DeclRefExpr 0x559b74af7918 <col:26> 'sys_sfnode_t *' lvalue ParmVar 0x559b74af2118 'node' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x559b74af79e8 <col:49, line:203:31> 'unsigned long long' <IntegralCast>
|             `-UnaryOperator 0x559b74af79b0 <line:207:49, line:203:31> 'unsigned long' prefix '~'
|               `-IntegerLiteral 0x559b74af7990 <col:31> 'unsigned long' 3
|-FunctionDecl 0x559b74af7bf0 <line:210:1, col:59> col:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| `-ParmVarDecl 0x559b74af7af0 <col:41, col:55> col:55 node 'sys_sfnode_t *'
|-FunctionDecl 0x559b74af7e30 <line:212:1, line:218:1> line:212:20 used z_sfnode_next_set 'void (sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74af7ca8 <col:38, col:52> col:52 used parent 'sys_sfnode_t *'
| |-ParmVarDecl 0x559b74af7d18 <line:213:12, col:26> col:26 used child 'sys_sfnode_t *'
| `-CompoundStmt 0x559b74af8208 <line:214:1, line:218:1>
|   |-DeclStmt 0x559b74af8058 <line:215:2, col:47>
|   | `-VarDecl 0x559b74af7ef0 <col:2, col:46> col:7 used cur_flags 'u8_t':'unsigned char' cinit
|   |   `-CallExpr 0x559b74af8010 <col:19, col:46> 'u8_t':'unsigned char'
|   |     |-ImplicitCastExpr 0x559b74af7ff8 <col:19> 'u8_t (*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559b74af7f50 <col:19> 'u8_t (sys_sfnode_t *)' Function 0x559b74af7bf0 'sys_sfnode_flags_get' 'u8_t (sys_sfnode_t *)'
|   |     `-ImplicitCastExpr 0x559b74af8040 <col:40> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x559b74af7f78 <col:40> 'sys_sfnode_t *' lvalue ParmVar 0x559b74af7ca8 'parent' 'sys_sfnode_t *'
|   `-BinaryOperator 0x559b74af81e0 <line:217:2, col:50> 'unative_t':'unsigned long long' '='
|     |-MemberExpr 0x559b74af80b0 <col:2, col:10> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x559b74af17a0
|     | `-ImplicitCastExpr 0x559b74af8098 <col:2> 'sys_sfnode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x559b74af8070 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x559b74af7ca8 'parent' 'sys_sfnode_t *'
|     `-BinaryOperator 0x559b74af81b8 <col:27, col:50> 'unsigned long long' '|'
|       |-ImplicitCastExpr 0x559b74af81a0 <col:27> 'unsigned long long' <IntegralCast>
|       | `-ImplicitCastExpr 0x559b74af8188 <col:27> 'u8_t':'unsigned char' <LValueToRValue>
|       |   `-DeclRefExpr 0x559b74af80e8 <col:27> 'u8_t':'unsigned char' lvalue Var 0x559b74af7ef0 'cur_flags' 'u8_t':'unsigned char'
|       `-CStyleCastExpr 0x559b74af8160 <col:39, col:50> 'unative_t':'unsigned long long' <PointerToIntegral>
|         `-ImplicitCastExpr 0x559b74af8148 <col:50> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x559b74af8110 <col:50> 'sys_sfnode_t *' lvalue ParmVar 0x559b74af7d18 'child' 'sys_sfnode_t *'
|-FunctionDecl 0x559b74af83c0 <line:220:1, line:223:1> line:220:20 used z_sflist_head_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74af8238 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x559b74af82a8 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x559b74af8550 <line:221:1, line:223:1>
|   `-BinaryOperator 0x559b74af8528 <line:222:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x559b74af84b0 <col:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x559b74af19c8
|     | `-ImplicitCastExpr 0x559b74af8498 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x559b74af8470 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x559b74af8238 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x559b74af8510 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74af84e8 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x559b74af82a8 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x559b74af8678 <line:225:1, line:228:1> line:225:20 used z_sflist_tail_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74af8578 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x559b74af85e8 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x559b74af8838 <line:226:1, line:228:1>
|   `-BinaryOperator 0x559b74af87e0 <line:227:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x559b74af8768 <col:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x559b74af1a20
|     | `-ImplicitCastExpr 0x559b74af8750 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x559b74af8728 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x559b74af8578 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x559b74af87c8 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74af87a0 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x559b74af85e8 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x559b74af8980 <line:237:1, line:240:1> line:237:29 used sys_sflist_peek_head 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559b74af8880 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x559b74af8af8 <line:238:1, line:240:1>
| | `-ReturnStmt 0x559b74af8ab8 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x559b74af8aa0 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x559b74af8a68 <col:9, col:15> 'sys_sfnode_t *' lvalue ->head 0x559b74af19c8
| |       `-ImplicitCastExpr 0x559b74af8a50 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x559b74af8a28 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x559b74af8880 'list' 'sys_sflist_t *'
| `-FullComment 0x559b74c14a70 <line:231:3, line:235:68>
|   |-ParagraphComment 0x559b74c147d0 <line:231:3>
|   | `-TextComment 0x559b74c147a0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c147f0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c14850 <col:10, col:43>
|   |   `-TextComment 0x559b74c14820 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x559b74c148a0 <line:233:3>
|   | `-TextComment 0x559b74c14870 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c148c0 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c14950 <col:15, col:62>
|   |   `-TextComment 0x559b74c14920 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x559b74c149a0 <line:235:3>
|   | `-TextComment 0x559b74c14970 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c149c0 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x559b74c14a20 <col:11, col:68>
|       `-TextComment 0x559b74c149f0 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x559b74af8ba8 <line:249:1, line:252:1> line:249:29 used sys_sflist_peek_tail 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559b74af8b20 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x559b74af8d28 <line:250:1, line:252:1>
| | `-ReturnStmt 0x559b74af8ce0 <line:251:2, col:15>
| |   `-ImplicitCastExpr 0x559b74af8cc8 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x559b74af8c90 <col:9, col:15> 'sys_sfnode_t *' lvalue ->tail 0x559b74af1a20
| |       `-ImplicitCastExpr 0x559b74af8c78 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x559b74af8c50 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x559b74af8b20 'list' 'sys_sflist_t *'
| `-FullComment 0x559b74c14db0 <line:243:3, line:247:67>
|   |-ParagraphComment 0x559b74c14b10 <line:243:3>
|   | `-TextComment 0x559b74c14ae0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c14b30 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x559b74c14b90 <col:10, col:42>
|   |   `-TextComment 0x559b74c14b60 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x559b74c14be0 <line:245:3>
|   | `-TextComment 0x559b74c14bb0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c14c00 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c14c90 <col:15, col:61>
|   |   `-TextComment 0x559b74c14c60 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x559b74c14ce0 <line:247:3>
|   | `-TextComment 0x559b74c14cb0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c14d00 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x559b74c14d60 <col:11, col:67>
|       `-TextComment 0x559b74c14d30 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x559b74af8dd8 prev 0x559b74af7bf0 <line:264:1, line:267:1> line:264:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74af8d50 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-CompoundStmt 0x559b74af8fc8 <line:265:1, line:267:1>
| | `-ReturnStmt 0x559b74af8f88 <line:266:2, line:203:31>
| |   `-ImplicitCastExpr 0x559b74af8f70 <line:266:9, line:203:31> 'u8_t':'unsigned char' <IntegralCast>
| |     `-BinaryOperator 0x559b74af8f48 <line:266:9, line:203:31> 'unsigned long long' '&'
| |       |-ImplicitCastExpr 0x559b74af8f18 <line:266:9, col:15> 'unative_t':'unsigned long long' <LValueToRValue>
| |       | `-MemberExpr 0x559b74af8ec0 <col:9, col:15> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x559b74af17a0
| |       |   `-ImplicitCastExpr 0x559b74af8ea8 <col:9> 'sys_sfnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x559b74af8e80 <col:9> 'sys_sfnode_t *' lvalue ParmVar 0x559b74af8d50 'node' 'sys_sfnode_t *'
| |       `-ImplicitCastExpr 0x559b74af8f30 <line:203:31> 'unsigned long long' <IntegralCast>
| |         `-IntegerLiteral 0x559b74af8ef8 <col:31> 'unsigned long' 3
| `-FullComment 0x559b74c150c0 <line:259:3, line:262:60>
|   |-ParagraphComment 0x559b74c14e50 <line:259:3>
|   | `-TextComment 0x559b74c14e20 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c14e70 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x559b74c14ed0 <col:10, col:51>
|   |   `-TextComment 0x559b74c14ea0 <col:10, col:51> Text=" Fetch flags value for a particular sfnode"
|   |-ParagraphComment 0x559b74c14f20 <line:261:3>
|   | `-TextComment 0x559b74c14ef0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c14f40 <col:4, line:262:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x559b74c14ff0 <line:261:15, line:262:3>
|   |   |-TextComment 0x559b74c14fa0 <line:261:15, col:56> Text=" A pointer to the node to fetch flags from"
|   |   `-TextComment 0x559b74c14fc0 <line:262:3> Text=" "
|   `-BlockCommandComment 0x559b74c15010 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x559b74c15070 <col:11, col:60>
|       `-TextComment 0x559b74c15040 <col:11, col:60> Text=" The value of flags, which will be between 0 and 3"
|-FunctionDecl 0x559b74af9170 <line:282:1, line:286:1> line:282:20 sys_sfnode_init 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x559b74af8ff0 <col:36, col:50> col:50 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x559b74af9060 <col:56, col:61> col:61 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x559b74af9368 <line:283:1, line:286:1>
| | |-CompoundStmt 0x559b74af9220 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x559b74af9230 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:284:70>
| | `-BinaryOperator 0x559b74af9310 <line:285:2, col:25> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x559b74af9280 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x559b74af17a0
| |   | `-ImplicitCastExpr 0x559b74af9268 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x559b74af9240 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x559b74af8ff0 'node' 'sys_sfnode_t *'
| |   `-ImplicitCastExpr 0x559b74af92f8 <col:25> 'unative_t':'unsigned long long' <IntegralCast>
| |     `-ImplicitCastExpr 0x559b74af92e0 <col:25> 'u8_t':'unsigned char' <LValueToRValue>
| |       `-DeclRefExpr 0x559b74af92b8 <col:25> 'u8_t':'unsigned char' lvalue ParmVar 0x559b74af9060 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x559b74c15520 <line:270:3, line:280:62>
|   |-ParagraphComment 0x559b74c15160 <line:270:3>
|   | `-TextComment 0x559b74c15130 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c15180 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x559b74c151e0 <col:10, col:35>
|   |   `-TextComment 0x559b74c151b0 <col:10, col:35> Text=" Initialize an sflist node"
|   |-ParagraphComment 0x559b74c15280 <line:272:3, line:274:64>
|   | |-TextComment 0x559b74c15200 <line:272:3, col:79> Text=" Set an initial flags value for this slist node, which can be a value between"
|   | |-TextComment 0x559b74c15220 <line:273:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x559b74c15240 <line:274:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x559b74c152f0 <line:276:3, line:277:61>
|   | |-TextComment 0x559b74c152a0 <line:276:3, col:73> Text=" This is ever so slightly faster than sys_sfnode_flags_set() and should"
|   | `-TextComment 0x559b74c152c0 <line:277:3, col:61> Text=" only be used on a node that hasn't been added to any list."
|   |-ParagraphComment 0x559b74c15340 <line:279:3>
|   | `-TextComment 0x559b74c15310 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c15360 <col:4, line:280:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x559b74c15410 <line:279:15, line:280:3>
|   |   |-TextComment 0x559b74c153c0 <line:279:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x559b74c153e0 <line:280:3> Text=" "
|   `-ParamCommandComment 0x559b74c15430 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x559b74c154c0 <col:16, col:62>
|       `-TextComment 0x559b74c15490 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x559b74af94a0 <line:298:1, line:302:1> line:298:20 sys_sfnode_flags_set 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x559b74af93a0 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x559b74af9410 <col:61, col:66> col:66 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x559b74af9858 <line:299:1, line:302:1>
| | |-CompoundStmt 0x559b74af9550 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x559b74af9560 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:300:70>
| | `-BinaryOperator 0x559b74af9800 <line:301:2, col:65> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x559b74af95b0 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x559b74af17a0
| |   | `-ImplicitCastExpr 0x559b74af9598 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x559b74af9570 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x559b74af93a0 'node' 'sys_sfnode_t *'
| |   `-BinaryOperator 0x559b74af97d8 <col:25, col:65> 'unsigned long long' '|'
| |     |-CStyleCastExpr 0x559b74af9758 <col:25, col:61> 'unative_t':'unsigned long long' <PointerToIntegral>
| |     | `-ParenExpr 0x559b74af9738 <col:36, col:61> 'sys_sfnode_t *'
| |     |   `-CallExpr 0x559b74af96b0 <col:37, col:60> 'sys_sfnode_t *'
| |     |     |-ImplicitCastExpr 0x559b74af9698 <col:37> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x559b74af95e8 <col:37> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x559b74af7870 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
| |     |     `-ImplicitCastExpr 0x559b74af96e0 <col:56> 'sys_sfnode_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x559b74af9610 <col:56> 'sys_sfnode_t *' lvalue ParmVar 0x559b74af93a0 'node' 'sys_sfnode_t *'
| |     `-ImplicitCastExpr 0x559b74af97c0 <col:65> 'unsigned long long' <IntegralCast>
| |       `-ImplicitCastExpr 0x559b74af97a8 <col:65> 'u8_t':'unsigned char' <LValueToRValue>
| |         `-DeclRefExpr 0x559b74af9780 <col:65> 'u8_t':'unsigned char' lvalue ParmVar 0x559b74af9410 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x559b74c15920 <line:289:3, line:296:62>
|   |-ParagraphComment 0x559b74c155c0 <line:289:3>
|   | `-TextComment 0x559b74c15590 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c155e0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559b74c15640 <col:10, col:44>
|   |   `-TextComment 0x559b74c15610 <col:10, col:44> Text=" Set flags value for an sflist node"
|   |-ParagraphComment 0x559b74c156e0 <line:291:3, line:293:64>
|   | |-TextComment 0x559b74c15660 <line:291:3, col:70> Text=" Set a flags value for this slist node, which can be a value between"
|   | |-TextComment 0x559b74c15680 <line:292:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x559b74c156a0 <line:293:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x559b74c15730 <line:295:3>
|   | `-TextComment 0x559b74c15700 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c15750 <col:4, line:296:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x559b74c15820 <line:295:15, line:296:3>
|   |   |-TextComment 0x559b74c157b0 <line:295:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x559b74c157f0 <line:296:3> Text=" "
|   `-ParamCommandComment 0x559b74c15840 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x559b74c158d0 <col:16, col:62>
|       `-TextComment 0x559b74c158a0 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x559b74af99a0 <line:315:1, col:58> col:20 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559b74af98a0 <col:40, col:54> col:54 list 'sys_sflist_t *'
| `-FullComment 0x559b74c15c60 <line:309:3, line:313:57>
|   |-ParagraphComment 0x559b74c159c0 <line:309:3>
|   | `-TextComment 0x559b74c15990 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c159e0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x559b74c15a40 <col:10, col:41>
|   |   `-TextComment 0x559b74c15a10 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x559b74c15a90 <line:311:3>
|   | `-TextComment 0x559b74c15a60 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c15ab0 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c15b40 <col:15, col:44>
|   |   `-TextComment 0x559b74c15b10 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x559b74c15b90 <line:313:3>
|   | `-TextComment 0x559b74c15b60 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c15bb0 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x559b74c15c10 <col:11, col:57>
|       `-TextComment 0x559b74c15be0 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x559b74af9ae0 prev 0x559b74af99a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:194:1 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559b74af9a58 <line:196:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_sflist_t *'
| `-CompoundStmt 0x559b74af9dd8 <line:60:2, line:62:2>
|   `-ReturnStmt 0x559b74af9d90 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x559b74af9d78 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x559b74af9d58 <col:10, col:54> 'int'
|         `-BinaryOperator 0x559b74af9d30 <<scratch space>:198:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x559b74af9c50 <<scratch space>:198:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_sfnode_t *'
|           | |-ImplicitCastExpr 0x559b74af9c38 <<scratch space>:198:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x559b74af9b88 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8980 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|           | `-ImplicitCastExpr 0x559b74af9c80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_sflist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x559b74af9bb0 <col:41> 'sys_sflist_t *' lvalue ParmVar 0x559b74af9a58 'list' 'sys_sflist_t *'
|           `-ImplicitCastExpr 0x559b74af9d18 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|             `-ParenExpr 0x559b74af9cf8 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x559b74af9cd0 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x559b74af9c98 <col:23> 'int' 0
|-FunctionDecl 0x559b74af9e88 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:328:1, col:77> col:29 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74af9e00 <col:59, col:73> col:73 node 'sys_sfnode_t *'
| `-FullComment 0x559b74c16000 <line:320:3, line:326:55>
|   |-ParagraphComment 0x559b74c15d00 <line:320:3>
|   | `-TextComment 0x559b74c15cd0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c15d20 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x559b74c15d80 <col:10, col:64>
|   |   `-TextComment 0x559b74c15d50 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x559b74c15dd0 <line:322:3, col:70>
|   | `-TextComment 0x559b74c15da0 <col:3, col:70> Text=" Faster then sys_sflist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x559b74c15e20 <line:324:3>
|   | `-TextComment 0x559b74c15df0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c15e40 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x559b74c15ed0 <col:15, col:64>
|   |   `-TextComment 0x559b74c15ea0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x559b74c15f20 <line:326:3>
|   | `-TextComment 0x559b74c15ef0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c15f40 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x559b74c15fa0 <col:11, col:55>
|       `-TextComment 0x559b74c15f70 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x559b74af9fc8 prev 0x559b74af9e88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:202:1 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74af9f40 <line:204:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x559b74afa168 <line:67:2, line:69:2>
|   `-ReturnStmt 0x559b74afa120 <line:68:3, col:42>
|     `-CallExpr 0x559b74afa0d8 <<scratch space>:206:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x559b74afa0c0 <<scratch space>:206:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74afa070 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x559b74af7870 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       `-ImplicitCastExpr 0x559b74afa108 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_sfnode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74afa098 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x559b74af9f40 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x559b74afa218 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:339:1, col:68> col:29 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74afa190 <col:50, col:64> col:64 node 'sys_sfnode_t *'
| `-FullComment 0x559b74c16340 <line:333:3, line:337:55>
|   |-ParagraphComment 0x559b74c160a0 <line:333:3>
|   | `-TextComment 0x559b74c16070 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c160c0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x559b74c16120 <col:10, col:46>
|   |   `-TextComment 0x559b74c160f0 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x559b74c16170 <line:335:3>
|   | `-TextComment 0x559b74c16140 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c16190 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x559b74c16220 <col:15, col:64>
|   |   `-TextComment 0x559b74c161f0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x559b74c16270 <line:337:3>
|   | `-TextComment 0x559b74c16240 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c16290 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x559b74c162f0 <col:11, col:55>
|       `-TextComment 0x559b74c162c0 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x559b74afa358 prev 0x559b74afa218 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:210:1 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74afa2d0 <line:212:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x559b74afa6b8 <line:74:2, line:78:2>
|   `-ReturnStmt 0x559b74afa678 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x559b74afa648 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *'
|       |-BinaryOperator 0x559b74afa4d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x559b74afa4a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_sfnode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x559b74afa400 <col:10> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afa2d0 'node' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x559b74afa4c0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x559b74afa488 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x559b74afa460 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x559b74afa428 <col:23> 'int' 0
|       |-CallExpr 0x559b74afa568 <<scratch space>:214:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x559b74afa550 <<scratch space>:214:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x559b74afa500 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x559b74af9fc8 'sys_sflist_peek_next_no_check' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | `-ImplicitCastExpr 0x559b74afa598 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x559b74afa528 <col:43> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afa2d0 'node' 'sys_sfnode_t *'
|       `-ImplicitCastExpr 0x559b74afa630 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|         `-ParenExpr 0x559b74afa610 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x559b74afa5e8 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x559b74afa5b0 <col:23> 'int' 0
|-FunctionDecl 0x559b74afa7e0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:351:1, line:352:29> line:351:20 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74afa6e0 <col:39, col:53> col:53 list 'sys_sflist_t *'
| |-ParmVarDecl 0x559b74afa750 <line:352:11, col:25> col:25 node 'sys_sfnode_t *'
| `-FullComment 0x559b74c166d0 <line:344:3, line:349:47>
|   |-ParagraphComment 0x559b74c163e0 <line:344:3>
|   | `-TextComment 0x559b74c163b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c16400 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x559b74c16460 <col:10, col:42>
|   |   `-TextComment 0x559b74c16430 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x559b74c164b0 <line:346:3, col:63>
|   | `-TextComment 0x559b74c16480 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c16500 <line:348:3>
|   | `-TextComment 0x559b74c164d0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c16520 <col:4, line:349:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c165d0 <line:348:15, line:349:3>
|   |   |-TextComment 0x559b74c16580 <line:348:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559b74c165a0 <line:349:3> Text=" "
|   `-ParamCommandComment 0x559b74c165f0 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x559b74c16680 <col:15, col:47>
|       `-TextComment 0x559b74c16650 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x559b74afa9b0 prev 0x559b74afa7e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:216:1 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74afa8b0 <line:218:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x559b74afa920 <<scratch space>:220:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x559b74afb0c8 <line:84:2, line:93:2>
|   |-CallExpr 0x559b74afabd0 <<scratch space>:222:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x559b74afabb8 <<scratch space>:222:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559b74afaa60 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x559b74af7e30 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x559b74afac08 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x559b74afaa88 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afa920 'node' 'sys_sfnode_t *'
|   | `-CallExpr 0x559b74afab18 <<scratch space>:224:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x559b74afab00 <<scratch space>:224:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x559b74afaab0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8980 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x559b74afab48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x559b74afaad8 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x559b74afa8b0 'list' 'sys_sflist_t *'
|   |-CallExpr 0x559b74afad10 <<scratch space>:226:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x559b74afacf8 <<scratch space>:226:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559b74afac20 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559b74af83c0 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x559b74afad48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x559b74afac48 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x559b74afa8b0 'list' 'sys_sflist_t *'
|   | `-ImplicitCastExpr 0x559b74afad60 <col:36> 'sys_sfnode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x559b74afac70 <col:36> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afa920 'node' 'sys_sfnode_t *'
|   `-IfStmt 0x559b74afb068 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x559b74afaec0 <<scratch space>:228:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x559b74afade0 <<scratch space>:228:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x559b74afadc8 <<scratch space>:228:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x559b74afad78 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8ba8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x559b74afae10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559b74afada0 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x559b74afa8b0 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x559b74afaea8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x559b74afae88 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x559b74afae60 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x559b74afae28 <col:23> 'int' 0
|     |-CompoundStmt 0x559b74afb050 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x559b74afb000 <<scratch space>:230:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x559b74afafe8 <<scratch space>:230:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x559b74afaee8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559b74af8678 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x559b74afb038 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x559b74afaf10 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x559b74afa8b0 'list' 'sys_sflist_t *'
|     |   `-CallExpr 0x559b74afafa0 <<scratch space>:232:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_sfnode_t *'
|     |     |-ImplicitCastExpr 0x559b74afaf88 <<scratch space>:232:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x559b74afaf38 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8980 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|     |     `-ImplicitCastExpr 0x559b74afafd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_sflist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x559b74afaf60 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x559b74afa8b0 'list' 'sys_sflist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x559b74afb200 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:364:1, line:365:28> line:364:20 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74afb100 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x559b74afb170 <line:365:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x559b74c16a60 <line:357:3, line:362:46>
|   |-ParagraphComment 0x559b74c16770 <line:357:3>
|   | `-TextComment 0x559b74c16740 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c16790 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x559b74c167f0 <col:10, col:41>
|   |   `-TextComment 0x559b74c167c0 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x559b74c16840 <line:359:3, col:63>
|   | `-TextComment 0x559b74c16810 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c16890 <line:361:3>
|   | `-TextComment 0x559b74c16860 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c168b0 <col:4, line:362:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c16960 <line:361:15, line:362:3>
|   |   |-TextComment 0x559b74c16910 <line:361:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559b74c16930 <line:362:3> Text=" "
|   `-ParamCommandComment 0x559b74c16980 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x559b74c16a10 <col:15, col:46>
|       `-TextComment 0x559b74c169e0 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x559b74afb3c0 prev 0x559b74afb200 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:234:1 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74afb2c0 <line:236:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x559b74afb330 <<scratch space>:238:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x559b74afbc38 <line:99:2, line:111:2>
|   |-CallExpr 0x559b74afb558 <<scratch space>:240:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x559b74afb540 <<scratch space>:240:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559b74afb470 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x559b74af7e30 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x559b74afb590 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x559b74afb498 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afb330 'node' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x559b74afb5a8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |   `-ParenExpr 0x559b74afb520 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x559b74afb4f8 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x559b74afb4c0 <col:23> 'int' 0
|   `-IfStmt 0x559b74afbbd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x559b74afb708 <<scratch space>:242:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x559b74afb628 <<scratch space>:242:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x559b74afb610 <<scratch space>:242:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x559b74afb5c0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8ba8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x559b74afb658 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559b74afb5e8 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x559b74afb2c0 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x559b74afb6f0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x559b74afb6d0 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x559b74afb6a8 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x559b74afb670 <col:23> 'int' 0
|     |-CompoundStmt 0x559b74afb930 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x559b74afb7c0 <<scratch space>:244:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x559b74afb7a8 <<scratch space>:244:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x559b74afb730 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559b74af8678 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     | | |-ImplicitCastExpr 0x559b74afb7f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_sflist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x559b74afb758 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x559b74afb2c0 'list' 'sys_sflist_t *'
|     | | `-ImplicitCastExpr 0x559b74afb810 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559b74afb780 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afb330 'node' 'sys_sfnode_t *'
|     | `-CallExpr 0x559b74afb8c8 <<scratch space>:246:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x559b74afb8b0 <<scratch space>:246:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x559b74afb828 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559b74af83c0 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x559b74afb900 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x559b74afb850 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x559b74afb2c0 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x559b74afb918 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x559b74afb878 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afb330 'node' 'sys_sfnode_t *'
|     `-CompoundStmt 0x559b74afbbb0 <line:105:10, line:110:3>
|       |-CallExpr 0x559b74afba68 <<scratch space>:248:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x559b74afba50 <<scratch space>:248:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x559b74afb950 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x559b74af7e30 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|       | |-CallExpr 0x559b74afb9e0 <line:250:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x559b74afb9c8 <<scratch space>:250:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x559b74afb978 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8ba8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | | `-ImplicitCastExpr 0x559b74afba10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_sflist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x559b74afb9a0 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x559b74afb2c0 'list' 'sys_sflist_t *'
|       | `-ImplicitCastExpr 0x559b74afbaa0 <line:108:5> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x559b74afba28 <col:5> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afb330 'node' 'sys_sfnode_t *'
|       `-CallExpr 0x559b74afbb48 <<scratch space>:252:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x559b74afbb30 <<scratch space>:252:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x559b74afbab8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559b74af8678 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|         |-ImplicitCastExpr 0x559b74afbb80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_sflist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x559b74afbae0 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x559b74afb2c0 'list' 'sys_sflist_t *'
|         `-ImplicitCastExpr 0x559b74afbb98 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x559b74afbb08 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afb330 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x559b74afbe90 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:382:1, line:383:30> line:382:20 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x559b74afbc68 <col:43, col:57> col:57 list 'sys_sflist_t *'
| |-ParmVarDecl 0x559b74afbce0 <line:383:8, col:14> col:14 head 'void *'
| |-ParmVarDecl 0x559b74afbd58 <col:20, col:26> col:26 tail 'void *'
| `-FullComment 0x559b74c16fc0 <line:370:3, line:380:66>
|   |-ParagraphComment 0x559b74c16b00 <line:370:3>
|   | `-TextComment 0x559b74c16ad0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c16b20 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x559b74c16b80 <col:10, col:41>
|   |   `-TextComment 0x559b74c16b50 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x559b74c16c70 <line:372:3, line:374:63>
|   | |-TextComment 0x559b74c16ba0 <line:372:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x559b74c16bc0 <line:373:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x559b74c16c10 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x559b74c16c30 <line:374:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c16cc0 <line:376:3, col:48>
|   | `-TextComment 0x559b74c16c90 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x559b74c16d10 <line:378:3>
|   | `-TextComment 0x559b74c16ce0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c16d30 <col:4, line:379:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c16de0 <line:378:15, line:379:3>
|   |   |-TextComment 0x559b74c16d90 <line:378:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559b74c16db0 <line:379:3> Text=" "
|   |-ParamCommandComment 0x559b74c16e00 <col:4, line:380:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x559b74c16eb0 <line:379:15, line:380:3>
|   |   |-TextComment 0x559b74c16e60 <line:379:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x559b74c16e80 <line:380:3> Text=" "
|   `-ParamCommandComment 0x559b74c16ed0 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x559b74c16f60 <col:15, col:66>
|       `-TextComment 0x559b74c16f30 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x559b74afc0e0 prev 0x559b74afbe90 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:254:1 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x559b74afbf58 <line:256:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x559b74afbfd0 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x559b74afc048 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x559b74afc798 <col:31, line:127:42>
|   |-IfStmt 0x559b74afc608 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559b74afc2e0 <<scratch space>:258:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x559b74afc200 <<scratch space>:258:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x559b74afc1e8 <<scratch space>:258:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559b74afc198 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8ba8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x559b74afc230 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x559b74afc1c0 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x559b74afbf58 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x559b74afc2c8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x559b74afc2a8 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x559b74afc280 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x559b74afc248 <col:23> 'int' 0
|   | |-CompoundStmt 0x559b74afc438 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x559b74afc3e8 <<scratch space>:260:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x559b74afc3d0 <<scratch space>:260:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559b74afc308 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559b74af83c0 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x559b74afc420 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x559b74afc330 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x559b74afbf58 'list' 'sys_sflist_t *'
|   | |   `-CStyleCastExpr 0x559b74afc3a8 <line:120:6, col:31> 'sys_sfnode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x559b74afc390 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x559b74afc358 <col:31> 'void *' lvalue ParmVar 0x559b74afbfd0 'head' 'void *'
|   | `-CompoundStmt 0x559b74afc5f0 <line:121:9, line:125:2>
|   |   `-CallExpr 0x559b74afc5b8 <<scratch space>:264:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x559b74afc5a0 <<scratch space>:264:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559b74afc450 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x559b74af7e30 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |     |-CallExpr 0x559b74afc4e0 <line:266:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_sfnode_t *'
|   |     | |-ImplicitCastExpr 0x559b74afc4c8 <<scratch space>:266:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x559b74afc478 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8ba8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | `-ImplicitCastExpr 0x559b74afc510 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_sflist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559b74afc4a0 <col:34> 'sys_sflist_t *' lvalue ParmVar 0x559b74afbf58 'list' 'sys_sflist_t *'
|   |     `-CStyleCastExpr 0x559b74afc578 <line:124:4, col:29> 'sys_sfnode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x559b74afc560 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x559b74afc528 <col:29> 'void *' lvalue ParmVar 0x559b74afbfd0 'head' 'void *'
|   `-CallExpr 0x559b74afc720 <<scratch space>:270:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x559b74afc708 <<scratch space>:270:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74afc640 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559b74af8678 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x559b74afc758 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_sflist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x559b74afc668 <col:29> 'sys_sflist_t *' lvalue ParmVar 0x559b74afbf58 'list' 'sys_sflist_t *'
|     `-CStyleCastExpr 0x559b74afc6e0 <line:127:10, col:35> 'sys_sfnode_t *' <BitCast>
|       `-ImplicitCastExpr 0x559b74afc6c8 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74afc690 <col:35> 'void *' lvalue ParmVar 0x559b74afc048 'tail' 'void *'
|-FunctionDecl 0x559b74afc970 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:396:1, line:397:37> line:396:20 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559b74afc7c8 <col:44, col:58> col:58 list 'sys_sflist_t *'
| |-ParmVarDecl 0x559b74afc838 <line:397:9, col:23> col:23 list_to_append 'sys_sflist_t *'
| `-FullComment 0x559b74c17370 <line:388:3, line:394:57>
|   |-ParagraphComment 0x559b74c17060 <line:388:3>
|   | `-TextComment 0x559b74c17030 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c17080 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x559b74c170e0 <col:10, col:66>
|   |   `-TextComment 0x559b74c170b0 <col:10, col:66> Text=" merge two sflists, appending the second one to the first"
|   |-ParagraphComment 0x559b74c17150 <line:390:3, line:391:63>
|   | |-TextComment 0x559b74c17100 <line:390:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x559b74c17120 <line:391:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c171a0 <line:393:3>
|   | `-TextComment 0x559b74c17170 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c171c0 <col:4, line:394:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c17270 <line:393:15, line:394:3>
|   |   |-TextComment 0x559b74c17220 <line:393:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559b74c17240 <line:394:3> Text=" "
|   `-ParamCommandComment 0x559b74c17290 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x559b74c17320 <col:25, col:57>
|       `-TextComment 0x559b74c172f0 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x559b74afcb30 prev 0x559b74afc970 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:275:1 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559b74afca30 <line:277:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x559b74afcaa0 <<scratch space>:279:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_sflist_t *'
| `-CompoundStmt 0x559b74afd1f8 <line:135:2, line:141:2>
|   |-DeclStmt 0x559b74afccd8 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x559b74afcbf0 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_sfnode_t *'
|   | `-VarDecl 0x559b74afcc60 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_sfnode_t *'
|   |-BinaryOperator 0x559b74afcdc8 <line:137:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x559b74afccf0 <col:3> 'sys_sfnode_t *' lvalue Var 0x559b74afcbf0 'head' 'sys_sfnode_t *'
|   | `-CallExpr 0x559b74afcd80 <<scratch space>:2:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x559b74afcd68 <<scratch space>:2:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x559b74afcd18 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8980 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x559b74afcdb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x559b74afcd40 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x559b74afcaa0 'list_to_append' 'sys_sflist_t *'
|   |-BinaryOperator 0x559b74afcec8 <line:138:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x559b74afcdf0 <col:3> 'sys_sfnode_t *' lvalue Var 0x559b74afcc60 'tail' 'sys_sfnode_t *'
|   | `-CallExpr 0x559b74afce80 <<scratch space>:4:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x559b74afce68 <<scratch space>:4:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x559b74afce18 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8ba8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x559b74afceb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x559b74afce40 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x559b74afcaa0 'list_to_append' 'sys_sflist_t *'
|   |-CallExpr 0x559b74afd000 <<scratch space>:6:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x559b74afcfe8 <<scratch space>:6:1> 'void (*)(sys_sflist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559b74afcef0 <col:1> 'void (sys_sflist_t *, void *, void *)' Function 0x559b74afc0e0 'sys_sflist_append_list' 'void (sys_sflist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x559b74afd040 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x559b74afcf18 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x559b74afca30 'list' 'sys_sflist_t *'
|   | |-ImplicitCastExpr 0x559b74afd070 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x559b74afd058 <col:41> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x559b74afcf40 <col:41> 'sys_sfnode_t *' lvalue Var 0x559b74afcbf0 'head' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x559b74afd0a0 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x559b74afd088 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x559b74afcf68 <col:47> 'sys_sfnode_t *' lvalue Var 0x559b74afcc60 'tail' 'sys_sfnode_t *'
|   `-CallExpr 0x559b74afd180 <<scratch space>:8:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x559b74afd168 <<scratch space>:8:1> 'void (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74afd0b8 <col:1> 'void (sys_sflist_t *)' Function 0x559b74af1dd0 'sys_sflist_init' 'void (sys_sflist_t *)'
|     `-ImplicitCastExpr 0x559b74afd1b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_sflist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74afd0e0 <col:28> 'sys_sflist_t *' lvalue ParmVar 0x559b74afcaa0 'list_to_append' 'sys_sflist_t *'
|-FunctionDecl 0x559b74afd450 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:410:1, line:412:28> line:410:20 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74afd240 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x559b74afd2b0 <line:411:10, col:24> col:24 prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x559b74afd320 <line:412:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x559b74c17800 <line:402:3, line:408:46>
|   |-ParagraphComment 0x559b74c17410 <line:402:3>
|   | `-TextComment 0x559b74c173e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c17430 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x559b74c17490 <col:10, col:41>
|   |   `-TextComment 0x559b74c17460 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x559b74c174e0 <line:404:3, col:63>
|   | `-TextComment 0x559b74c174b0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c17530 <line:406:3>
|   | `-TextComment 0x559b74c17500 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c17550 <col:4, line:407:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c17600 <line:406:15, line:407:3>
|   |   |-TextComment 0x559b74c175b0 <line:406:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559b74c175d0 <line:407:3> Text=" "
|   |-ParamCommandComment 0x559b74c17620 <col:4, line:408:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x559b74c176d0 <line:407:15, line:408:3>
|   |   |-TextComment 0x559b74c17680 <line:407:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x559b74c176a0 <line:408:3> Text=" "
|   `-ParamCommandComment 0x559b74c176f0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x559b74c17780 <col:15, col:46>
|       `-TextComment 0x559b74c17750 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x559b74afd690 prev 0x559b74afd450 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:10:1 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74afd518 <line:12:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x559b74afd588 <<scratch space>:14:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x559b74afd5f8 <<scratch space>:16:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x559b74ae96b8 <line:148:2, line:158:2>
|   `-IfStmt 0x559b74ae9650 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x559b74afd820 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x559b74afd7f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_sfnode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x559b74afd748 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afd588 'prev' 'sys_sfnode_t *'
|     | `-ImplicitCastExpr 0x559b74afd808 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x559b74afd7d0 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x559b74afd7a8 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x559b74afd770 <col:23> 'int' 0
|     |-CompoundStmt 0x559b74ae9100 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x559b74ae9098 <<scratch space>:18:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x559b74ae9080 <<scratch space>:18:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x559b74afd848 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559b74afa9b0 'sys_sflist_prepend' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x559b74ae90d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x559b74afd870 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x559b74afd518 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x559b74ae90e8 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x559b74afd898 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afd5f8 'node' 'sys_sfnode_t *'
|     `-IfStmt 0x559b74ae9618 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x559b74ae9260 <<scratch space>:20:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x559b74ae9180 <<scratch space>:20:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x559b74ae9168 <<scratch space>:20:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x559b74ae9118 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x559b74af7870 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | | `-ImplicitCastExpr 0x559b74ae91b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_sfnode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x559b74ae9140 <col:42> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afd588 'prev' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x559b74ae9248 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x559b74ae9228 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x559b74ae9200 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x559b74ae91c8 <col:23> 'int' 0
|       |-CompoundStmt 0x559b74ae9380 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x559b74ae9318 <<scratch space>:22:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x559b74ae9300 <<scratch space>:22:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x559b74ae9288 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559b74afb3c0 'sys_sflist_append' 'void (sys_sflist_t *, sys_sfnode_t *)'
|       |   |-ImplicitCastExpr 0x559b74ae9350 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_sflist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x559b74ae92b0 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x559b74afd518 'list' 'sys_sflist_t *'
|       |   `-ImplicitCastExpr 0x559b74ae9368 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x559b74ae92d8 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afd5f8 'node' 'sys_sfnode_t *'
|       `-CompoundStmt 0x559b74ae95f8 <line:153:10, line:157:3>
|         |-CallExpr 0x559b74ae94b0 <<scratch space>:24:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x559b74ae9498 <<scratch space>:24:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x559b74ae9398 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x559b74af7e30 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|         | |-ImplicitCastExpr 0x559b74ae94e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_sfnode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x559b74ae93c0 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afd5f8 'node' 'sys_sfnode_t *'
|         | `-CallExpr 0x559b74ae9450 <<scratch space>:26:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_sfnode_t *'
|         |   |-ImplicitCastExpr 0x559b74ae9438 <<scratch space>:26:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x559b74ae93e8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x559b74af7870 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|         |   `-ImplicitCastExpr 0x559b74ae9480 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_sfnode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x559b74ae9410 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afd588 'prev' 'sys_sfnode_t *'
|         `-CallExpr 0x559b74ae9590 <<scratch space>:28:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x559b74ae9578 <<scratch space>:28:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x559b74ae9500 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x559b74af7e30 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|           |-ImplicitCastExpr 0x559b74ae95c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_sfnode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x559b74ae9528 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afd588 'prev' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x559b74ae95e0 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x559b74ae9550 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x559b74afd5f8 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x559b74ae9768 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:426:1, col:72> col:29 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559b74ae96e0 <col:54, col:68> col:68 list 'sys_sflist_t *'
| `-FullComment 0x559b74c17bc0 <line:417:3, line:424:50>
|   |-ParagraphComment 0x559b74c178a0 <line:417:3>
|   | `-TextComment 0x559b74c17870 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c178c0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x559b74c17920 <col:10, col:59>
|   |   `-TextComment 0x559b74c178f0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x559b74c17990 <line:419:3, line:420:63>
|   | |-TextComment 0x559b74c17940 <line:419:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x559b74c17960 <line:420:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c179e0 <line:422:3>
|   | `-TextComment 0x559b74c179b0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c17a00 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c17a90 <col:15, col:46>
|   |   `-TextComment 0x559b74c17a60 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x559b74c17ae0 <line:424:3>
|   | `-TextComment 0x559b74c17ab0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c17b00 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x559b74c17b60 <col:11, col:50>
|       `-TextComment 0x559b74c17b30 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x559b74ae98a8 prev 0x559b74ae9768 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:32:1 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559b74ae9820 <line:34:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_sflist_t *'
| `-CompoundStmt 0x559b74ae9f48 <line:163:2, line:175:2>
|   |-DeclStmt 0x559b74ae9a70 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x559b74ae9960 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_sfnode_t *' cinit
|   |   `-CallExpr 0x559b74ae9a28 <<scratch space>:38:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_sfnode_t *'
|   |     |-ImplicitCastExpr 0x559b74ae9a10 <<scratch space>:38:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559b74ae99c0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8980 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     `-ImplicitCastExpr 0x559b74ae9a58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_sflist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x559b74ae99e8 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x559b74ae9820 'list' 'sys_sflist_t *'
|   |-CallExpr 0x559b74ae9ba0 <<scratch space>:40:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x559b74ae9b88 <<scratch space>:40:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559b74ae9a88 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559b74af83c0 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x559b74ae9bd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x559b74ae9ab0 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x559b74ae9820 'list' 'sys_sflist_t *'
|   | `-CallExpr 0x559b74ae9b40 <<scratch space>:42:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x559b74ae9b28 <<scratch space>:42:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x559b74ae9ad8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x559b74af7870 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   `-ImplicitCastExpr 0x559b74ae9b70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x559b74ae9b00 <col:33> 'sys_sfnode_t *' lvalue Var 0x559b74ae9960 'node' 'sys_sfnode_t *'
|   |-IfStmt 0x559b74ae9e88 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559b74ae9ce0 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x559b74ae9c58 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x559b74ae9c40 <<scratch space>:44:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559b74ae9bf0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8ba8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x559b74ae9c88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x559b74ae9c18 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x559b74ae9820 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x559b74ae9cc8 <col:46> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x559b74ae9ca0 <col:46> 'sys_sfnode_t *' lvalue Var 0x559b74ae9960 'node' 'sys_sfnode_t *'
|   | |-CompoundStmt 0x559b74ae9e70 <col:52, line:172:3>
|   | | `-CallExpr 0x559b74ae9e20 <<scratch space>:46:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x559b74ae9e08 <<scratch space>:46:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559b74ae9d08 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559b74af8678 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x559b74ae9e58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x559b74ae9d30 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x559b74ae9820 'list' 'sys_sflist_t *'
|   | |   `-CallExpr 0x559b74ae9dc0 <<scratch space>:48:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_sfnode_t *'
|   | |     |-ImplicitCastExpr 0x559b74ae9da8 <<scratch space>:48:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x559b74ae9d58 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8980 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |     `-ImplicitCastExpr 0x559b74ae9df0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_sflist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x559b74ae9d80 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x559b74ae9820 'list' 'sys_sflist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x559b74ae9f00 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x559b74ae9ee8 <col:10> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74ae9ec0 <col:10> 'sys_sfnode_t *' lvalue Var 0x559b74ae9960 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x559b74aea090 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:439:1, col:62> col:29 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559b74ae9f88 <col:44, col:58> col:58 list 'sys_sflist_t *'
| `-FullComment 0x559b74c17f60 <line:431:3, line:437:69>
|   |-ParagraphComment 0x559b74c17c60 <line:431:3>
|   | `-TextComment 0x559b74c17c30 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c17c80 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x559b74c17ce0 <col:10, col:59>
|   |   `-TextComment 0x559b74c17cb0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x559b74c17d30 <line:433:3, col:63>
|   | `-TextComment 0x559b74c17d00 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c17d80 <line:435:3>
|   | `-TextComment 0x559b74c17d50 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c17da0 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c17e30 <col:15, col:46>
|   |   `-TextComment 0x559b74c17e00 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x559b74c17e80 <line:437:3>
|   | `-TextComment 0x559b74c17e50 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c17ea0 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x559b74c17f00 <col:11, col:69>
|       `-TextComment 0x559b74c17ed0 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x559b74aea1d0 prev 0x559b74aea090 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:52:1 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559b74aea148 <line:54:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_sflist_t *'
| `-CompoundStmt 0x559b74aea558 <line:180:2, line:183:2>
|   `-ReturnStmt 0x559b74aea518 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x559b74aea4e8 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x559b74aea4b8 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x559b74aea340 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x559b74aea328 <<scratch space>:56:1> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x559b74aea278 <col:1> 'bool (sys_sflist_t *)' Function 0x559b74af9ae0 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|       |   `-ImplicitCastExpr 0x559b74aea370 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_sflist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x559b74aea2a0 <col:39> 'sys_sflist_t *' lvalue ParmVar 0x559b74aea148 'list' 'sys_sflist_t *'
|       |-ImplicitCastExpr 0x559b74aea4d0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       | `-ParenExpr 0x559b74aea3e8 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x559b74aea3c0 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x559b74aea388 <col:23> 'int' 0
|       `-CallExpr 0x559b74aea470 <<scratch space>:58:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|         |-ImplicitCastExpr 0x559b74aea458 <<scratch space>:58:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x559b74aea408 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74ae98a8 'sys_sflist_get_not_empty' 'sys_sfnode_t *(sys_sflist_t *)'
|         `-ImplicitCastExpr 0x559b74aea4a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_sflist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x559b74aea430 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x559b74aea148 'list' 'sys_sflist_t *'
|-FunctionDecl 0x559b74aea6f8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:453:1, line:455:28> line:453:20 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74aea580 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x559b74aea5f0 <line:454:10, col:24> col:24 prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x559b74aea660 <line:455:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x559b74c18400 <line:444:3, line:451:46>
|   |-ParagraphComment 0x559b74c18000 <line:444:3>
|   | `-TextComment 0x559b74c17fd0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c18020 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x559b74c18080 <col:10, col:23>
|   |   `-TextComment 0x559b74c18050 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x559b74c180d0 <line:446:3, col:63>
|   | `-TextComment 0x559b74c180a0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c18120 <line:448:3>
|   | `-TextComment 0x559b74c180f0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c18140 <col:4, line:449:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c181f0 <line:448:15, line:449:3>
|   |   |-TextComment 0x559b74c181a0 <line:448:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559b74c181c0 <line:449:3> Text=" "
|   |-ParamCommandComment 0x559b74c18210 <col:4, line:451:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x559b74c182f0 <line:449:20, line:451:3>
|   |   |-TextComment 0x559b74c18270 <line:449:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x559b74c18290 <line:450:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x559b74c182b0 <line:451:3> Text=" "
|   `-ParamCommandComment 0x559b74c18310 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x559b74c183a0 <col:15, col:46>
|       `-TextComment 0x559b74c18370 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x559b74aea938 prev 0x559b74aea6f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:60:1 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74aea7c0 <line:62:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x559b74aea830 <<scratch space>:64:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x559b74aea8a0 <<scratch space>:66:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x559b74b04d48 <line:190:2, line:212:2>
|   |-IfStmt 0x559b74b04b90 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559b74aeaac8 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x559b74aeaa98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559b74aea9f0 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x559b74aea830 'prev_node' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x559b74aeaab0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x559b74aeaa78 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x559b74aeaa50 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x559b74aeaa18 <col:23> 'int' 0
|   | |-CompoundStmt 0x559b74aeaf28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x559b74aeac08 <<scratch space>:68:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x559b74aeabf0 <<scratch space>:68:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559b74aeaaf0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559b74af83c0 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | | | |-ImplicitCastExpr 0x559b74aeac40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_sflist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x559b74aeab18 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x559b74aea7c0 'list' 'sys_sflist_t *'
|   | | | `-CallExpr 0x559b74aeaba8 <<scratch space>:70:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_sfnode_t *'
|   | | |   |-ImplicitCastExpr 0x559b74aeab90 <<scratch space>:70:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x559b74aeab40 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x559b74af7870 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | | |   `-ImplicitCastExpr 0x559b74aeabd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_sfnode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x559b74aeab68 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x559b74aea8a0 'node' 'sys_sfnode_t *'
|   | | `-IfStmt 0x559b74aeaef0 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x559b74aead48 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x559b74aeacc0 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_sfnode_t *'
|   | |   | | |-ImplicitCastExpr 0x559b74aeaca8 <<scratch space>:72:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x559b74aeac58 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8ba8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   | | `-ImplicitCastExpr 0x559b74aeacf0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_sflist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x559b74aeac80 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x559b74aea7c0 'list' 'sys_sflist_t *'
|   | |   | `-ImplicitCastExpr 0x559b74aead30 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x559b74aead08 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x559b74aea8a0 'node' 'sys_sfnode_t *'
|   | |   |-CompoundStmt 0x559b74aeaed8 <col:53, line:199:4>
|   | |   | `-CallExpr 0x559b74aeae88 <<scratch space>:74:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x559b74aeae70 <<scratch space>:74:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x559b74aead70 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559b74af8678 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |   |-ImplicitCastExpr 0x559b74aeaec0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_sflist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x559b74aead98 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x559b74aea7c0 'list' 'sys_sflist_t *'
|   | |   |   `-CallExpr 0x559b74aeae28 <<scratch space>:76:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_sfnode_t *'
|   | |   |     |-ImplicitCastExpr 0x559b74aeae10 <<scratch space>:76:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x559b74aeadc0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8980 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   |     `-ImplicitCastExpr 0x559b74aeae58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_sflist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x559b74aeade8 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x559b74aea7c0 'list' 'sys_sflist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x559b74b04b70 <line:200:10, line:209:3>
|   |   |-CallExpr 0x559b74aeb060 <<scratch space>:78:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x559b74aeb048 <<scratch space>:78:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x559b74aeaf48 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x559b74af7e30 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |   | |-ImplicitCastExpr 0x559b74b048f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x559b74aeaf70 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x559b74aea830 'prev_node' 'sys_sfnode_t *'
|   |   | `-CallExpr 0x559b74aeb000 <<scratch space>:80:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_sfnode_t *'
|   |   |   |-ImplicitCastExpr 0x559b74aeafe8 <<scratch space>:80:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x559b74aeaf98 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x559b74af7870 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   |   `-ImplicitCastExpr 0x559b74aeb030 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_sfnode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x559b74aeafc0 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x559b74aea8a0 'node' 'sys_sfnode_t *'
|   |   `-IfStmt 0x559b74b04b38 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x559b74b04a00 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x559b74b04978 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_sfnode_t *'
|   |     | | |-ImplicitCastExpr 0x559b74b04960 <<scratch space>:82:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x559b74b04910 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8ba8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | | `-ImplicitCastExpr 0x559b74b049a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_sflist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x559b74b04938 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x559b74aea7c0 'list' 'sys_sflist_t *'
|   |     | `-ImplicitCastExpr 0x559b74b049e8 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559b74b049c0 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x559b74aea8a0 'node' 'sys_sfnode_t *'
|   |     |-CompoundStmt 0x559b74b04b20 <col:53, line:208:4>
|   |     | `-CallExpr 0x559b74b04ab8 <<scratch space>:84:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x559b74b04aa0 <<scratch space>:84:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x559b74b04a28 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559b74af8678 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   |     |   |-ImplicitCastExpr 0x559b74b04af0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_sflist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x559b74b04a50 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x559b74aea7c0 'list' 'sys_sflist_t *'
|   |     |   `-ImplicitCastExpr 0x559b74b04b08 <line:207:13> 'sys_sfnode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x559b74b04a78 <col:13> 'sys_sfnode_t *' lvalue ParmVar 0x559b74aea830 'prev_node' 'sys_sfnode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x559b74b04cb0 <<scratch space>:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x559b74b04c98 <<scratch space>:86:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74b04bc8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x559b74af7e30 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x559b74b04ce8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_sfnode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x559b74b04bf0 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x559b74aea8a0 'node' 'sys_sfnode_t *'
|     `-ImplicitCastExpr 0x559b74b04d00 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       `-ParenExpr 0x559b74b04c78 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x559b74b04c50 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x559b74b04c18 <col:23> 'int' 0
|-FunctionDecl 0x559b74b04f00 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:469:1, line:470:30> line:469:20 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74b04d78 <col:47, col:61> col:61 list 'sys_sflist_t *'
| |-ParmVarDecl 0x559b74b04de8 <line:470:12, col:26> col:26 node 'sys_sfnode_t *'
| `-FullComment 0x559b74c18870 <line:460:3, line:467:35>
|   |-ParagraphComment 0x559b74c184a0 <line:460:3>
|   | `-TextComment 0x559b74c18470 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c184c0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559b74c18520 <col:10, col:44>
|   |   `-TextComment 0x559b74c184f0 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x559b74c18570 <line:462:3, col:63>
|   | `-TextComment 0x559b74c18540 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x559b74c185c0 <line:464:3>
|   | `-TextComment 0x559b74c18590 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c185e0 <col:4, line:465:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559b74c18690 <line:464:15, line:465:3>
|   |   |-TextComment 0x559b74c18640 <line:464:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559b74c18660 <line:465:3> Text=" "
|   |-ParamCommandComment 0x559b74c186b0 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559b74c18740 <col:15, col:60>
|   |   `-TextComment 0x559b74c18710 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x559b74c18790 <line:467:3>
|   | `-TextComment 0x559b74c18760 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c187b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c18810 <col:11, col:35>
|       `-TextComment 0x559b74c187e0 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x559b74b050c0 prev 0x559b74b04f00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:88:1 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559b74b04fc0 <line:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x559b74b05030 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x559b74b05a60 <line:218:2, line:233:2>
|   |-DeclStmt 0x559b74b05278 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x559b74b05180 <<scratch space>:94:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_sfnode_t *' cinit
|   |   `-ImplicitCastExpr 0x559b74b05260 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |     `-ParenExpr 0x559b74b05240 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x559b74b05218 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x559b74b051e0 <col:23> 'int' 0
|   |-DeclStmt 0x559b74b05300 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x559b74b052a0 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_sfnode_t *'
|   |-ForStmt 0x559b74b059d8 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x559b74b053f0 <line:222:42, line:15:47> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x559b74b05318 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x559b74b052a0 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x559b74b053a8 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x559b74b05390 <<scratch space>:98:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559b74b05340 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8980 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   `-ImplicitCastExpr 0x559b74b053d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_sflist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x559b74b05368 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x559b74b04fc0 'list' 'sys_sflist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559b74b054f0 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x559b74b054c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559b74b05418 <col:42> 'sys_sfnode_t *' lvalue Var 0x559b74b052a0 'test' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x559b74b054d8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x559b74b054a0 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x559b74b05478 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x559b74b05440 <col:23> 'int' 0
|   | |-BinaryOperator 0x559b74b055f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x559b74b05518 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x559b74b052a0 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x559b74b055a8 <<scratch space>:100:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x559b74b05590 <<scratch space>:100:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559b74b05540 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x559b74afa358 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | |   `-ImplicitCastExpr 0x559b74b055d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x559b74b05568 <col:42> 'sys_sfnode_t *' lvalue Var 0x559b74b052a0 'test' 'sys_sfnode_t *'
|   | `-CompoundStmt 0x559b74b059b8 <col:48, line:230:3>
|   |   |-IfStmt 0x559b74b058f0 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x559b74b05698 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x559b74b05668 <col:8> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x559b74b05618 <col:8> 'sys_sfnode_t *' lvalue Var 0x559b74b052a0 'test' 'sys_sfnode_t *'
|   |   | | `-ImplicitCastExpr 0x559b74b05680 <col:16> 'sys_sfnode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x559b74b05640 <col:16> 'sys_sfnode_t *' lvalue ParmVar 0x559b74b05030 'node' 'sys_sfnode_t *'
|   |   | |-CompoundStmt 0x559b74b058a8 <col:22, line:227:4>
|   |   | | |-CallExpr 0x559b74b057d0 <<scratch space>:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x559b74b057b8 <<scratch space>:102:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x559b74b056c0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' Function 0x559b74aea938 'sys_sflist_remove' 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)'
|   |   | | | |-ImplicitCastExpr 0x559b74b05810 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_sflist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x559b74b056e8 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x559b74b04fc0 'list' 'sys_sflist_t *'
|   |   | | | |-ImplicitCastExpr 0x559b74b05828 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x559b74b05710 <col:38> 'sys_sfnode_t *' lvalue Var 0x559b74b05180 'prev' 'sys_sfnode_t *'
|   |   | | | `-ImplicitCastExpr 0x559b74b05840 <line:225:11> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x559b74b05738 <col:11> 'sys_sfnode_t *' lvalue ParmVar 0x559b74b05030 'node' 'sys_sfnode_t *'
|   |   | | `-ReturnStmt 0x559b74b05890 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x559b74b05878 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x559b74b05858 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x559b74b05990 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_sfnode_t *' '='
|   |     |-DeclRefExpr 0x559b74b05928 <col:4> 'sys_sfnode_t *' lvalue Var 0x559b74b05180 'prev' 'sys_sfnode_t *'
|   |     `-ImplicitCastExpr 0x559b74b05978 <col:11> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x559b74b05950 <col:11> 'sys_sfnode_t *' lvalue Var 0x559b74b052a0 'test' 'sys_sfnode_t *'
|   `-ReturnStmt 0x559b74b05a48 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x559b74b05a30 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x559b74b05a10 <col:16> 'int' 0
|-RecordDecl 0x559b74b05a90 </vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:18:1, line:24:1> line:18:8 struct sys_mem_pool_lvl definition
| |-RecordDecl 0x559b74b05b40 <line:19:2, line:22:2> line:19:2 union definition
| | |-FieldDecl 0x559b74b05c58 <line:20:3, col:10> col:10 bits_p 'u32_t *'
| | `-FieldDecl 0x559b74b05dc8 <line:21:3, col:31> col:9 bits 'u32_t [2]'
| |-FieldDecl 0x559b74b05e60 <line:19:2> col:2 implicit 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| |-IndirectFieldDecl 0x559b74b05eb8 <line:20:10> col:10 implicit bits_p 'u32_t *'
| | |-Field 0x559b74b05e60 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x559b74b05c58 'bits_p' 'u32_t *'
| |-IndirectFieldDecl 0x559b74b05f08 <line:21:9> col:9 implicit bits 'u32_t [2]'
| | |-Field 0x559b74b05e60 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x559b74b05dc8 'bits' 'u32_t [2]'
| `-FieldDecl 0x559b74b05f58 <line:23:2, col:14> col:14 free_list 'sys_dlist_t':'struct _dnode'
|-RecordDecl 0x559b74b05ff0 <line:29:1, line:37:1> line:29:8 struct sys_mem_pool_base definition
| |-FieldDecl 0x559b74b060b8 <line:30:2, col:8> col:8 buf 'void *'
| |-FieldDecl 0x559b74b06110 <line:31:2, col:9> col:9 max_sz 'size_t':'unsigned long'
| |-FieldDecl 0x559b74b06190 <line:32:2, col:8> col:8 n_max 'u16_t':'unsigned short'
| |-FieldDecl 0x559b74b061e8 <line:33:2, col:7> col:7 n_levels 'u8_t':'unsigned char'
| |-FieldDecl 0x559b74b06260 <line:34:2, col:7> col:7 max_inline_level 's8_t':'signed char'
| |-FieldDecl 0x559b74b06360 <line:35:2, col:27> col:27 levels 'struct sys_mem_pool_lvl *'
| `-FieldDecl 0x559b74b063b8 <line:36:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x559b74b065b0 <line:98:1, col:58> col:6 z_sys_mem_pool_base_init 'void (struct sys_mem_pool_base *)'
| `-ParmVarDecl 0x559b74b064b0 <col:31, col:57> col:57 p 'struct sys_mem_pool_base *'
|-FunctionDecl 0x559b74b0a3f8 <line:100:1, line:101:55> line:100:5 z_sys_mem_pool_block_alloc 'int (struct sys_mem_pool_base *, size_t, u32_t *, u32_t *, void **)'
| |-ParmVarDecl 0x559b74b06680 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x559b74b066f0 <col:61, col:68> col:68 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74b06760 <line:101:10, col:17> col:17 level_p 'u32_t *'
| |-ParmVarDecl 0x559b74b067d0 <col:26, col:33> col:33 block_p 'u32_t *'
| `-ParmVarDecl 0x559b74b06870 <col:42, col:49> col:49 data_p 'void **'
|-FunctionDecl 0x559b74b0a700 <line:103:1, line:104:21> line:103:6 z_sys_mem_pool_block_free 'void (struct sys_mem_pool_base *, u32_t, u32_t)'
| |-ParmVarDecl 0x559b74b0a4e8 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x559b74b0a558 <col:61, col:67> col:67 level 'u32_t':'unsigned int'
| `-ParmVarDecl 0x559b74b0a5c8 <line:104:10, col:16> col:16 block 'u32_t':'unsigned int'
|-RecordDecl 0x559b74b0a7b8 </vagrant/ext/zephyros/zephyr/include/kernel_structs.h:83:1, line:96:1> line:83:8 struct _ready_q definition
| `-FieldDecl 0x559b74b0a888 <line:86:2, col:19> col:19 cache 'struct k_thread *'
|-TypedefDecl 0x559b74b0a920 <line:98:1, col:25> col:25 _ready_q_t 'struct _ready_q':'struct _ready_q'
| `-ElaboratedType 0x559b74b0a8d0 'struct _ready_q' sugar
|   `-RecordType 0x559b74b0a840 'struct _ready_q'
|     `-Record 0x559b74b0a7b8 '_ready_q'
|-RecordDecl 0x559b74b0a978 <line:100:1, line:134:1> line:100:8 struct _cpu definition
| |-FieldDecl 0x559b74b0aa30 <line:102:2, col:8> col:8 nested 'u32_t':'unsigned int'
| |-FieldDecl 0x559b74b0aa90 <line:105:2, col:8> col:8 irq_stack 'char *'
| |-FieldDecl 0x559b74b0ab00 <line:108:2, col:19> col:19 current 'struct k_thread *'
| |-FieldDecl 0x559b74b0ab70 <line:111:2, col:19> col:19 idle_thread 'struct k_thread *'
| `-FieldDecl 0x559b74b0abc8 <line:128:2, col:7> col:7 id 'u8_t':'unsigned char'
|-TypedefDecl 0x559b74b0ac60 <line:136:1, col:21> col:21 _cpu_t 'struct _cpu':'struct _cpu'
| `-ElaboratedType 0x559b74b0ac10 'struct _cpu' sugar
|   `-RecordType 0x559b74b0aa00 'struct _cpu'
|     `-Record 0x559b74b0a978 '_cpu'
|-RecordDecl 0x559b74b0acb8 <line:138:1, line:191:1> line:138:8 struct z_kernel definition
| |-RecordDecl 0x559b74b0ad60 <line:143:2, line:157:2> line:143:2 invalid union definition
| | |-FieldDecl 0x559b74b0ae58 <line:144:3, col:15> col:15 invalid cpus 'struct _cpu':'struct _cpu'
| | |-RecordDecl 0x559b74b0aea0 <line:146:3, line:155:3> line:146:3 struct definition
| | | |-FieldDecl 0x559b74b0af60 <line:148:4, col:10> col:10 nested 'u32_t':'unsigned int'
| | | |-FieldDecl 0x559b74b0afc0 <line:151:4, col:10> col:10 irq_stack 'char *'
| | | `-FieldDecl 0x559b74b0b030 <line:154:4, col:21> col:21 current 'struct k_thread *'
| | |-FieldDecl 0x559b74b0b0d0 <line:146:3> col:3 implicit 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | |-IndirectFieldDecl 0x559b74b0b128 <line:148:10> col:10 implicit nested 'u32_t':'unsigned int'
| | | |-Field 0x559b74b0b0d0 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x559b74b0af60 'nested' 'u32_t':'unsigned int'
| | |-IndirectFieldDecl 0x559b74b0b178 <line:151:10> col:10 implicit irq_stack 'char *'
| | | |-Field 0x559b74b0b0d0 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x559b74b0afc0 'irq_stack' 'char *'
| | `-IndirectFieldDecl 0x559b74b0b1c8 <line:154:21> col:21 implicit current 'struct k_thread *'
| |   |-Field 0x559b74b0b0d0 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| |   `-Field 0x559b74b0b030 'current' 'struct k_thread *'
| `-FieldDecl 0x559b74b0b290 <line:172:2, col:18> col:18 ready_q 'struct _ready_q':'struct _ready_q'
|-TypedefDecl 0x559b74b0f6a0 <line:193:1, col:25> col:25 _kernel_t 'struct z_kernel':'struct z_kernel'
| `-ElaboratedType 0x559b74b0f650 'struct z_kernel' sugar
|   `-RecordType 0x559b74b0ad40 'struct z_kernel'
|     `-Record 0x559b74b0acb8 'z_kernel'
|-VarDecl 0x559b74b0f718 <line:195:1, col:24> col:24 _kernel 'struct z_kernel':'struct z_kernel' extern
|-FunctionDecl 0x559b74b0f8d0 </vagrant/ext/zephyros/zephyr/include/kernel_version.h:47:1, col:41> col:14 sys_kernel_version_get 'u32_t (void)' extern
| `-FullComment 0x559b74c18b20 <line:40:3, line:45:25>
|   |-ParagraphComment 0x559b74c18910 <line:40:3>
|   | `-TextComment 0x559b74c188e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c18930 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x559b74c18990 <col:10, col:56>
|   |   `-TextComment 0x559b74c18960 <col:10, col:56> Text=" Return the kernel version of the present build"
|   |-ParagraphComment 0x559b74c18a00 <line:42:3, line:43:27>
|   | |-TextComment 0x559b74c189b0 <line:42:3, col:76> Text=" The kernel version is a four-byte value, whose format is described in the"
|   | `-TextComment 0x559b74c189d0 <line:43:3, col:27> Text=" file "kernel_version.h"."
|   |-ParagraphComment 0x559b74c18a50 <line:45:3>
|   | `-TextComment 0x559b74c18a20 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c18a70 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x559b74c18ad0 <col:11, col:25>
|       `-TextComment 0x559b74c18aa0 <col:11, col:25> Text=" kernel version"
|-FunctionDecl 0x559b74b0fab8 </vagrant/ext/zephyros/zephyr/include/random/rand32.h:45:1, col:33> col:14 sys_rand32_get 'u32_t (void)' extern
| `-FullComment 0x559b74c18e70 <line:37:3, line:43:31>
|   |-ParagraphComment 0x559b74c18bc0 <line:37:3>
|   | `-TextComment 0x559b74c18b90 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c18be0 <col:4, line:38:20> Name="brief"
|   | `-ParagraphComment 0x559b74c18c60 <line:37:10, line:38:20>
|   |   |-TextComment 0x559b74c18c10 <line:37:10, col:63> Text=" Return a 32-bit random value that should pass general"
|   |   `-TextComment 0x559b74c18c30 <line:38:3, col:20> Text=" randomness tests."
|   |-ParagraphComment 0x559b74c18cb0 <line:40:3>
|   | `-TextComment 0x559b74c18c80 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c18cd0 <col:4, line:41:23> Name="note"
|   | `-ParagraphComment 0x559b74c18d50 <line:40:9, line:41:23>
|   |   |-TextComment 0x559b74c18d00 <line:40:9, col:68> Text=" The random value returned is not a cryptographically secure"
|   |   `-TextComment 0x559b74c18d20 <line:41:3, col:23> Text=" random number value."
|   |-ParagraphComment 0x559b74c18da0 <line:43:3>
|   | `-TextComment 0x559b74c18d70 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c18dc0 <col:4, col:31> Name="return"
|     `-ParagraphComment 0x559b74c18e20 <col:11, col:31>
|       `-TextComment 0x559b74c18df0 <col:11, col:31> Text=" 32-bit random value."
|-FunctionDecl 0x559b74b0fd20 <line:57:1, col:47> col:13 sys_rand_get 'void (void *, size_t)' extern
| |-ParmVarDecl 0x559b74b0fba0 <col:26, col:32> col:32 dst 'void *'
| |-ParmVarDecl 0x559b74b0fc10 <col:37, col:44> col:44 len 'size_t':'unsigned long'
| `-FullComment 0x559b74c19320 <line:47:3, line:56:1>
|   |-ParagraphComment 0x559b74c18f10 <line:47:3>
|   | `-TextComment 0x559b74c18ee0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c18f30 <col:4, line:48:33> Name="brief"
|   | `-ParagraphComment 0x559b74c18fb0 <line:47:10, line:48:33>
|   |   |-TextComment 0x559b74c18f60 <line:47:10, col:73> Text=" Fill the destination buffer with random data values that should"
|   |   `-TextComment 0x559b74c18f80 <line:48:3, col:33> Text=" pass general randomness tests."
|   |-ParagraphComment 0x559b74c19000 <line:50:3>
|   | `-TextComment 0x559b74c18fd0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c19020 <col:4, line:51:31> Name="note"
|   | `-ParagraphComment 0x559b74c190a0 <line:50:9, line:51:31>
|   |   |-TextComment 0x559b74c19050 <line:50:9, col:72> Text=" The random values returned are not considered cryptographically"
|   |   `-TextComment 0x559b74c19070 <line:51:3, col:31> Text=" secure random number values."
|   |-ParagraphComment 0x559b74c190f0 <line:53:3>
|   | `-TextComment 0x559b74c190c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c19110 <col:4, line:54:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x559b74c191c0 <line:53:20, line:54:3>
|   |   |-TextComment 0x559b74c19170 <line:53:20, col:64> Text=" destination buffer to fill with random data."
|   |   `-TextComment 0x559b74c19190 <line:54:3> Text=" "
|   |-ParamCommandComment 0x559b74c191e0 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x559b74c19270 <col:14, col:45>
|   |   `-TextComment 0x559b74c19240 <col:14, col:45> Text=" size of the destination buffer."
|   `-ParagraphComment 0x559b74c192c0 <line:56:1>
|     `-TextComment 0x559b74c19290 <col:1> Text=" "
|-FunctionDecl 0x559b74b0ff98 <line:72:1, col:48> col:12 sys_csrand_get 'int (void *, size_t)' extern
| |-ParmVarDecl 0x559b74b0fe10 <col:27, col:33> col:33 dst 'void *'
| |-ParmVarDecl 0x559b74b0fe80 <col:38, col:45> col:45 len 'size_t':'unsigned long'
| `-FullComment 0x559b74c198d0 <line:60:3, line:71:1>
|   |-ParagraphComment 0x559b74c193c0 <line:60:3>
|   | `-TextComment 0x559b74c19390 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c193e0 <col:4, line:61:22> Name="brief"
|   | `-ParagraphComment 0x559b74c19460 <line:60:10, line:61:22>
|   |   |-TextComment 0x559b74c19410 <line:60:10, col:67> Text=" Fill the destination buffer with cryptographically secure"
|   |   `-TextComment 0x559b74c19430 <line:61:3, col:22> Text=" random data values."
|   |-ParagraphComment 0x559b74c194b0 <line:63:3>
|   | `-TextComment 0x559b74c19480 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c194d0 <col:4, line:64:42> Name="note"
|   | `-ParagraphComment 0x559b74c19550 <line:63:9, line:64:42>
|   |   |-TextComment 0x559b74c19500 <line:63:9, col:75> Text=" If the random values requested do not need to be cryptographically"
|   |   `-TextComment 0x559b74c19520 <line:64:3, col:42> Text=" secure then use sys_rand_get() instead."
|   |-ParagraphComment 0x559b74c195a0 <line:66:3>
|   | `-TextComment 0x559b74c19570 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c195c0 <col:4, line:67:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x559b74c19670 <line:66:20, line:67:3>
|   |   |-TextComment 0x559b74c19620 <line:66:20, col:47> Text=" destination buffer to fill."
|   |   `-TextComment 0x559b74c19640 <line:67:3> Text=" "
|   |-ParamCommandComment 0x559b74c19690 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x559b74c19720 <col:14, col:45>
|   |   `-TextComment 0x559b74c196f0 <col:14, col:45> Text=" size of the destination buffer."
|   |-ParagraphComment 0x559b74c19770 <line:69:3>
|   | `-TextComment 0x559b74c19740 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c19790 <col:4, col:53> Name="return"
|   | `-ParagraphComment 0x559b74c19810 <col:11, col:53>
|   |   `-TextComment 0x559b74c197c0 <col:11, col:53> Text=" 0 if success, -EIO if entropy reseed error"
|   `-ParagraphComment 0x559b74c19860 <line:71:1>
|     `-TextComment 0x559b74c19830 <col:1> Text=" "
|-TypedefDecl 0x559b74b2c290 </vagrant/ext/zephyros/zephyr/include/syscall.h:85:1, line:88:17> line:85:21 _k_syscall_handler_t 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| |-PointerType 0x559b74b10530 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| | `-ParenType 0x559b74b104d0 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' sugar
| |   `-FunctionProtoType 0x559b74b10460 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' cdecl
| |     |-TypedefType 0x559b74b100b0 'uintptr_t' sugar
| |     | |-Typedef 0x559b74a24938 'uintptr_t'
| |     | `-BuiltinType 0x559b749d8ad0 'unsigned long'
| |     |-TypedefType 0x559b74b100b0 'uintptr_t' sugar
| |     | |-Typedef 0x559b74a24938 'uintptr_t'
| |     | `-BuiltinType 0x559b749d8ad0 'unsigned long'
| |     |-TypedefType 0x559b74b100b0 'uintptr_t' sugar
| |     | |-Typedef 0x559b74a24938 'uintptr_t'
| |     | `-BuiltinType 0x559b749d8ad0 'unsigned long'
| |     |-TypedefType 0x559b74b100b0 'uintptr_t' sugar
| |     | |-Typedef 0x559b74a24938 'uintptr_t'
| |     | `-BuiltinType 0x559b749d8ad0 'unsigned long'
| |     |-TypedefType 0x559b74b100b0 'uintptr_t' sugar
| |     | |-Typedef 0x559b74a24938 'uintptr_t'
| |     | `-BuiltinType 0x559b749d8ad0 'unsigned long'
| |     |-TypedefType 0x559b74b100b0 'uintptr_t' sugar
| |     | |-Typedef 0x559b74a24938 'uintptr_t'
| |     | `-BuiltinType 0x559b749d8ad0 'unsigned long'
| |     |-TypedefType 0x559b74b100b0 'uintptr_t' sugar
| |     | |-Typedef 0x559b74a24938 'uintptr_t'
| |     | `-BuiltinType 0x559b749d8ad0 'unsigned long'
| |     `-PointerType 0x559b749d8e10 'void *'
| |       `-BuiltinType 0x559b749d8970 'void'
| `-FullComment 0x559b74c1a560 <line:50:3, line:84:1>
|   |-ParagraphComment 0x559b74c19970 <line:50:3>
|   | `-TextComment 0x559b74c19940 <col:3> Text=" "
|   |-VerbatimLineComment 0x559b74c19990 <col:4, col:33> Text=" _k_syscall_handler_t"
|   |-ParagraphComment 0x559b74c19a00 <line:51:3>
|   | `-TextComment 0x559b74c199d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c19a20 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c19a80 <col:10, col:43>
|   |   `-TextComment 0x559b74c19a50 <col:10, col:43> Text=" System call handler function type"
|   |-ParagraphComment 0x559b74c19af0 <line:53:3, line:54:67>
|   | |-TextComment 0x559b74c19aa0 <line:53:3, col:70> Text=" These are kernel-side skeleton functions for system calls. They are"
|   | `-TextComment 0x559b74c19ac0 <line:54:3, col:67> Text=" necessary to sanitize the arguments passed into the system call:"
|   |-ParagraphComment 0x559b74c19cd0 <line:56:3, line:66:41>
|   | |-TextComment 0x559b74c19b10 <line:56:3, col:78> Text=" - Any kernel object or device pointers are validated with _SYSCALL_IS_OBJ()"
|   | |-TextComment 0x559b74c19b30 <line:57:3, col:79> Text=" - Any memory buffers passed in are checked to ensure that the calling thread"
|   | |-TextComment 0x559b74c19b50 <line:58:3, col:32> Text="   actually has access to them"
|   | |-TextComment 0x559b74c19b70 <line:59:3, col:69> Text=" - Many kernel calls do no sanity checking of parameters other than"
|   | |-TextComment 0x559b74c19b90 <line:60:3, col:69> Text="   assertions. The handler must check all of these conditions using"
|   | |-TextComment 0x559b74c19bb0 <line:61:3, col:22> Text="   _SYSCALL_ASSERT()"
|   | |-TextComment 0x559b74c19bd0 <line:62:3, col:78> Text=" - If the system call has more than 6 arguments, then arg6 will be a pointer"
|   | |-TextComment 0x559b74c19bf0 <line:63:3, col:74> Text="   to some struct containing arguments 6+. The struct itself needs to be"
|   | |-TextComment 0x559b74c19c10 <line:64:3, col:78> Text="   validated like any other buffer passed in from userspace, and its members"
|   | |-TextComment 0x559b74c19c30 <line:65:3, col:70> Text="   individually validated (if necessary) and then passed to the real"
|   | `-TextComment 0x559b74c19c50 <line:66:3, col:41> Text="   implementation like normal arguments"
|   |-ParagraphComment 0x559b74c19d40 <line:68:3, line:69:70>
|   | |-TextComment 0x559b74c19cf0 <line:68:3, col:75> Text=" Even if the system call implementation has no return value, these always"
|   | `-TextComment 0x559b74c19d10 <line:69:3, col:70> Text=" return something, even 0, to prevent register leakage to userspace."
|   |-ParagraphComment 0x559b74c19d90 <line:71:3, col:80>
|   | `-TextComment 0x559b74c19d60 <col:3, col:80> Text=" Once everything has been validated, the real implementation will be executed."
|   |-ParagraphComment 0x559b74c19de0 <line:73:3>
|   | `-TextComment 0x559b74c19db0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c19e00 <col:4, line:74:3> [in] implicitly Param="arg1" ParamIndex=0
|   | `-ParagraphComment 0x559b74c19eb0 <line:73:15, line:74:3>
|   |   |-TextComment 0x559b74c19e60 <line:73:15, col:37> Text=" system call argument 1"
|   |   `-TextComment 0x559b74c19e80 <line:74:3> Text=" "
|   |-ParamCommandComment 0x559b74c19ed0 <col:4, line:75:3> [in] implicitly Param="arg2" ParamIndex=1
|   | `-ParagraphComment 0x559b74c19f80 <line:74:15, line:75:3>
|   |   |-TextComment 0x559b74c19f30 <line:74:15, col:37> Text=" system call argument 2"
|   |   `-TextComment 0x559b74c19f50 <line:75:3> Text=" "
|   |-ParamCommandComment 0x559b74c19fa0 <col:4, line:76:3> [in] implicitly Param="arg3" ParamIndex=2
|   | `-ParagraphComment 0x559b74c1a050 <line:75:15, line:76:3>
|   |   |-TextComment 0x559b74c1a000 <line:75:15, col:37> Text=" system call argument 3"
|   |   `-TextComment 0x559b74c1a020 <line:76:3> Text=" "
|   |-ParamCommandComment 0x559b74c1a070 <col:4, line:77:3> [in] implicitly Param="arg4" ParamIndex=3
|   | `-ParagraphComment 0x559b74c1a120 <line:76:15, line:77:3>
|   |   |-TextComment 0x559b74c1a0d0 <line:76:15, col:37> Text=" system call argument 4"
|   |   `-TextComment 0x559b74c1a0f0 <line:77:3> Text=" "
|   |-ParamCommandComment 0x559b74c1a140 <col:4, line:78:3> [in] implicitly Param="arg5" ParamIndex=4
|   | `-ParagraphComment 0x559b74c1a1f0 <line:77:15, line:78:3>
|   |   |-TextComment 0x559b74c1a1a0 <line:77:15, col:37> Text=" system call argument 5"
|   |   `-TextComment 0x559b74c1a1c0 <line:78:3> Text=" "
|   |-ParamCommandComment 0x559b74c1a210 <col:4, line:79:3> [in] implicitly Param="arg6" ParamIndex=5
|   | `-ParagraphComment 0x559b74c1a2c0 <line:78:15, line:79:3>
|   |   |-TextComment 0x559b74c1a270 <line:78:15, col:37> Text=" system call argument 6"
|   |   `-TextComment 0x559b74c1a290 <line:79:3> Text=" "
|   |-ParamCommandComment 0x559b74c1a2e0 <col:4, line:81:3> [in] implicitly Param="ssf" ParamIndex=6
|   | `-ParagraphComment 0x559b74c1a3c0 <line:79:14, line:81:3>
|   |   |-TextComment 0x559b74c1a340 <line:79:14, col:75> Text=" System call stack frame pointer. Used to generate kernel oops"
|   |   |-TextComment 0x559b74c1a360 <line:80:3, col:70> Text="            via _arch_syscall_oops_at(). Contents are arch-specific."
|   |   `-TextComment 0x559b74c1a380 <line:81:3> Text=" "
|   |-BlockCommandComment 0x559b74c1a3e0 <col:4, line:82:22> Name="return"
|   | `-ParagraphComment 0x559b74c1a460 <line:81:11, line:82:22>
|   |   |-TextComment 0x559b74c1a410 <line:81:11, col:75> Text=" system call return value, or 0 if the system call implementation"
|   |   `-TextComment 0x559b74c1a430 <line:82:3, col:22> Text="         return void"
|   `-ParagraphComment 0x559b74c1a4b0 <line:84:1>
|     `-TextComment 0x559b74c1a480 <col:1> Text=" "
|-FunctionDecl 0x559b74b2c3b0 <line:93:1, line:106:1> line:93:27 z_syscall_trap 'bool (void)' static inline
| |-CompoundStmt 0x559b74b2c5d8 <line:94:1, line:106:1>
| | |-DeclStmt 0x559b74b2c540 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/syscall.h:95:18>
| | | `-VarDecl 0x559b74b2c4a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, line:15:16> /vagrant/ext/zephyros/zephyr/include/syscall.h:95:7 used ret 'bool' cinit
| | |   `-ImplicitCastExpr 0x559b74b2c528 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
| | |     `-IntegerLiteral 0x559b74b2c508 <col:16> 'int' 0
| | `-ReturnStmt 0x559b74b2c598 </vagrant/ext/zephyros/zephyr/include/syscall.h:105:2, col:9>
| |   `-ImplicitCastExpr 0x559b74b2c580 <col:9> 'bool' <LValueToRValue>
| |     `-DeclRefExpr 0x559b74b2c558 <col:9> 'bool' lvalue Var 0x559b74b2c4a8 'ret' 'bool'
| `-AlwaysInlineAttr 0x559b74b2c450 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x559b74b2c688 </vagrant/ext/zephyros/zephyr/include/syscall.h:113:1, line:120:1> line:113:20 _is_user_context 'bool (void)' static inline
| |-CompoundStmt 0x559b74b2c778 <line:114:1, line:120:1>
| | `-ReturnStmt 0x559b74b2c760 <line:118:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-ImplicitCastExpr 0x559b74b2c748 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x559b74b2c728 <col:16> 'int' 0
| `-FullComment 0x559b74c1a710 </vagrant/ext/zephyros/zephyr/include/syscall.h:109:3, line:111:69>
|   |-ParagraphComment 0x559b74c1a600 <line:109:3, col:53>
|   | `-TextComment 0x559b74c1a5d0 <col:3, col:53> Text=" Indicate whether the CPU is currently in user mode"
|   |-ParagraphComment 0x559b74c1a650 <line:111:3>
|   | `-TextComment 0x559b74c1a620 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c1a670 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x559b74c1a6d0 <col:11, col:69>
|       `-TextComment 0x559b74c1a6a0 <col:11, col:69> Text=" true if the CPU is currently running with user permissions"
|-TypedefDecl 0x559b74b2c7c0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h:40:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x559b74b2c790 '__builtin_va_list' sugar
|   |-Typedef 0x559b749d9538 '__builtin_va_list'
|   `-ConstantArrayType 0x559b749d94e0 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x559b749d9350 'struct __va_list_tag'
|       `-Record 0x559b749d92c8 '__va_list_tag'
|-TypedefDecl 0x559b74b2c850 <line:99:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x559b74b2c820 '__gnuc_va_list' sugar
|   |-Typedef 0x559b74b2c7c0 '__gnuc_va_list'
|   `-TypedefType 0x559b74b2c790 '__builtin_va_list' sugar
|     |-Typedef 0x559b749d9538 '__builtin_va_list'
|     `-ConstantArrayType 0x559b749d94e0 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x559b749d9350 'struct __va_list_tag'
|         `-Record 0x559b749d92c8 '__va_list_tag'
|-FunctionDecl 0x559b74b2ca00 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:51:1, line:54:1> line:51:40 printk 'void (const char *, ...)' static inline
| |-ParmVarDecl 0x559b74b2c940 <col:47, col:59> col:59 used fmt 'const char *'
| |-CompoundStmt 0x559b74b2cbc8 <line:52:1, line:54:1>
| | `-CStyleCastExpr 0x559b74b2cba0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x559b74b2cb88 <col:29, col:31> 'const char *' <LValueToRValue>
| |     `-ParenExpr 0x559b74b2cb68 <col:29, col:31> 'const char *' lvalue
| |       `-DeclRefExpr 0x559b74b2cb00 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:53:13> 'const char *' lvalue ParmVar 0x559b74b2c940 'fmt' 'const char *'
| `-FormatAttr 0x559b74b2caa8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 2
|-FunctionDecl 0x559b74b2ce50 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:56:1, line:60:1> line:56:40 vprintk 'void (const char *, struct __va_list_tag *)' static inline
| |-ParmVarDecl 0x559b74b2cc48 <col:48, col:60> col:60 used fmt 'const char *'
| |-ParmVarDecl 0x559b74b2cd40 <col:65, col:73> col:73 used ap 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x559b74b2d0e8 <line:57:1, line:60:1>
| | |-CStyleCastExpr 0x559b74b2cff8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x559b74b2cfe0 <col:29, col:31> 'const char *' <LValueToRValue>
| | |   `-ParenExpr 0x559b74b2cfc0 <col:29, col:31> 'const char *' lvalue
| | |     `-DeclRefExpr 0x559b74b2cf58 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:58:13> 'const char *' lvalue ParmVar 0x559b74b2cc48 'fmt' 'const char *'
| | `-CStyleCastExpr 0x559b74b2d0c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x559b74b2d0a8 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue>
| |     `-ParenExpr 0x559b74b2d088 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue
| |       `-DeclRefExpr 0x559b74b2d020 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:59:13> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x559b74b2cd40 'ap' 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x559b74b2cf00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 0
|-FunctionDecl 0x559b74b35748 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:63:1, line:64:26> line:63:32 snprintk 'int (char *, size_t, const char *, ...)' extern
| |-ParmVarDecl 0x559b74b2d170 <col:41, col:47> col:47 str 'char *'
| |-ParmVarDecl 0x559b74b2d1e0 <col:52, col:59> col:59 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74b35610 <line:64:6, col:18> col:18 fmt 'const char *'
| `-FormatAttr 0x559b74b35800 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 4
|-FunctionDecl 0x559b74b35b68 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:65:1, line:66:35> line:65:32 vsnprintk 'int (char *, size_t, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x559b74b358c0 <col:42, col:48> col:48 str 'char *'
| |-ParmVarDecl 0x559b74b35930 <col:53, col:60> col:60 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74b359a8 <line:66:8, col:20> col:20 fmt 'const char *'
| |-ParmVarDecl 0x559b74b35a18 <col:25, col:33> col:33 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x559b74b35c28 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x559b74b36170 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:68:1, line:69:34> line:68:33 z_vprintk 'void (int (*)(int, void *), void *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x559b74b35ed0 <col:43, col:68> col:49 out 'int (*)(int, void *)'
| |-ParmVarDecl 0x559b74b35f48 <col:71, col:77> col:77 ctx 'void *'
| |-ParmVarDecl 0x559b74b35fc0 <line:69:7, col:19> col:19 fmt 'const char *'
| |-ParmVarDecl 0x559b74b36030 <col:24, col:32> col:32 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x559b74b36230 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-RecordDecl 0x559b74b362e8 prev 0x559b74ac88e8 </vagrant/ext/zephyros/zephyr/include/sys/arch_interface.h:41:1, col:8> col:8 struct k_thread
|-RecordDecl 0x559b74b36370 <line:42:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x559b74b36420 <line:44:9, col:16> col:16 struct _k_thread_stack_element
|-TypedefDecl 0x559b74b36520 <col:1, col:40> col:40 referenced k_thread_stack_t 'struct _k_thread_stack_element':'struct _k_thread_stack_element'
| `-ElaboratedType 0x559b74b364d0 'struct _k_thread_stack_element' sugar
|   `-RecordType 0x559b74b364b0 'struct _k_thread_stack_element'
|     `-Record 0x559b74b79950 '_k_thread_stack_element'
|-TypedefDecl 0x559b74b38210 <line:46:1, col:62> col:16 referenced k_thread_entry_t 'void (*)(void *, void *, void *)'
| `-PointerType 0x559b74b381a0 'void (*)(void *, void *, void *)'
|   `-ParenType 0x559b74b38140 'void (void *, void *, void *)' sugar
|     `-FunctionProtoType 0x559b74b380f0 'void (void *, void *, void *)' cdecl
|       |-BuiltinType 0x559b749d8970 'void'
|       |-PointerType 0x559b749d8e10 'void *'
|       | `-BuiltinType 0x559b749d8970 'void'
|       |-PointerType 0x559b749d8e10 'void *'
|       | `-BuiltinType 0x559b749d8970 'void'
|       `-PointerType 0x559b749d8e10 'void *'
|         `-BuiltinType 0x559b749d8970 'void'
|-FunctionDecl 0x559b74b38358 <line:59:1, col:45> col:21 used arch_k_cycle_get_32 'u32_t (void)' static inline
| `-FullComment 0x559b74c1a8c0 <line:55:3, line:57:24>
|   |-ParagraphComment 0x559b74c1a7b0 <line:55:3, col:70>
|   | `-TextComment 0x559b74c1a780 <col:3, col:70> Text=" Obtain the current cycle count, in units that are hardware-specific"
|   |-ParagraphComment 0x559b74c1a800 <line:57:3>
|   | `-TextComment 0x559b74c1a7d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c1a820 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x559b74c1a880 <col:8, col:24>
|       `-TextComment 0x559b74c1a850 <col:8, col:24> Text=" k_cycle_get_32()"
|-FunctionDecl 0x559b74b386d0 <line:132:1, col:24> col:6 used arch_cpu_idle 'void (void)'
| `-FullComment 0x559b74c1ac40 <line:120:3, line:130:20>
|   |-ParagraphComment 0x559b74c1a960 <line:120:3>
|   | `-TextComment 0x559b74c1a930 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c1a980 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x559b74c1a9e0 <col:10, col:33>
|   |   `-TextComment 0x559b74c1a9b0 <col:10, col:33> Text=" Power save idle routine"
|   |-ParagraphComment 0x559b74c1aa80 <line:122:3, line:124:47>
|   | |-TextComment 0x559b74c1aa00 <line:122:3, col:74> Text=" This function will be called by the kernel idle loop or possibly within"
|   | |-TextComment 0x559b74c1aa20 <line:123:3, col:68> Text=" an implementation of z_sys_power_save_idle in the kernel when the"
|   | `-TextComment 0x559b74c1aa40 <line:124:3, col:47> Text=" '_sys_power_save_flag' variable is non-zero."
|   |-ParagraphComment 0x559b74c1ab20 <line:126:3, line:128:35>
|   | |-TextComment 0x559b74c1aaa0 <line:126:3, col:72> Text=" Architectures that do not implement power management instructions may"
|   | |-TextComment 0x559b74c1aac0 <line:127:3, col:69> Text=" immediately return, otherwise a power-saving instruction should be"
|   | `-TextComment 0x559b74c1aae0 <line:128:3, col:35> Text=" issued to wait for an interrupt."
|   |-ParagraphComment 0x559b74c1ab70 <line:130:3>
|   | `-TextComment 0x559b74c1ab40 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c1ab90 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x559b74c1abf0 <col:8, col:20>
|       `-TextComment 0x559b74c1abc0 <col:8, col:20> Text=" k_cpu_idle()"
|-FunctionDecl 0x559b74b38870 <line:152:1, col:43> col:6 used arch_cpu_atomic_idle 'void (unsigned int)'
| |-ParmVarDecl 0x559b74b387b0 <col:27, col:40> col:40 key 'unsigned int'
| `-FullComment 0x559b74c1b150 <line:135:3, line:150:76>
|   |-ParagraphComment 0x559b74c1ace0 <line:135:3>
|   | `-TextComment 0x559b74c1acb0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c1ad00 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x559b74c1ad60 <col:10, col:66>
|   |   `-TextComment 0x559b74c1ad30 <col:10, col:66> Text=" Atomically re-enable interrupts and enter low power mode"
|   |-ParagraphComment 0x559b74c1adb0 <line:137:3, col:62>
|   | `-TextComment 0x559b74c1ad80 <col:3, col:62> Text=" The requirements for arch_cpu_atomic_idle() are as follows:"
|   |-ParagraphComment 0x559b74c1aea0 <line:139:3, line:143:44>
|   | |-TextComment 0x559b74c1add0 <line:139:3, col:67> Text=" -# Enabling interrupts and entering a low-power mode needs to be"
|   | |-TextComment 0x559b74c1adf0 <line:140:3, col:73> Text="    atomic, i.e. there should be no period of time where interrupts are"
|   | |-TextComment 0x559b74c1ae10 <line:141:3, col:77> Text="    enabled before the processor enters a low-power mode.  See the comments"
|   | |-TextComment 0x559b74c1ae30 <line:142:3, col:62> Text="    in k_lifo_get(), for example, of the race condition that"
|   | `-TextComment 0x559b74c1ae50 <line:143:3, col:44> Text="    occurs if this requirement is not met."
|   |-ParagraphComment 0x559b74c1af10 <line:145:3, line:146:65>
|   | |-TextComment 0x559b74c1aec0 <line:145:3, col:74> Text=" -# After waking up from the low-power mode, the interrupt lockout state"
|   | `-TextComment 0x559b74c1aee0 <line:146:3, col:65> Text="    must be restored as indicated in the 'key' input parameter."
|   |-ParagraphComment 0x559b74c1af60 <line:148:3>
|   | `-TextComment 0x559b74c1af30 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c1af80 <col:4, col:27> Name="see"
|   | `-ParagraphComment 0x559b74c1afe0 <col:8, col:27>
|   |   `-TextComment 0x559b74c1afb0 <col:8, col:27> Text=" k_cpu_atomic_idle()"
|   |-ParagraphComment 0x559b74c1b030 <line:150:3>
|   | `-TextComment 0x559b74c1b000 <col:3> Text=" "
|   `-ParamCommandComment 0x559b74c1b050 <col:4, col:76> [in] implicitly Param="key" ParamIndex=0
|     `-ParagraphComment 0x559b74c1b0e0 <col:14, col:76>
|       `-TextComment 0x559b74c1b0b0 <col:14, col:76> Text=" Lockout key returned by previous invocation of arch_irq_lock()"
|-TypedefDecl 0x559b74b38b60 <line:167:1, col:57> col:30 referenced arch_cpustart_t 'void (*)(void *) __attribute__((noreturn))'
| |-PointerType 0x559b74b38b00 'void (*)(void *) __attribute__((noreturn))'
| | `-ParenType 0x559b74b38aa0 'void (void *) __attribute__((noreturn))' sugar
| |   `-FunctionProtoType 0x559b74b38a60 'void (void *) __attribute__((noreturn))' noreturn cdecl
| |     |-BuiltinType 0x559b749d8970 'void'
| |     `-PointerType 0x559b749d8e10 'void *'
| |       `-BuiltinType 0x559b749d8970 'void'
| `-FullComment 0x559b74c1b330 <line:163:3, line:165:52>
|   |-ParagraphComment 0x559b74c1b1f0 <line:163:3, col:25>
|   | `-TextComment 0x559b74c1b1c0 <col:3, col:25> Text=" Per-cpu entry function"
|   |-ParagraphComment 0x559b74c1b240 <line:165:3>
|   | `-TextComment 0x559b74c1b210 <col:3> Text=" "
|   `-ParamCommandComment 0x559b74c1b260 <col:4, col:52> [in] implicitly Param="context"
|     `-ParagraphComment 0x559b74c1b2f0 <col:18, col:52>
|       `-TextComment 0x559b74c1b2c0 <col:18, col:52> Text=" parameter, implementation specific"
|-FunctionDecl 0x559b74b3a020 <line:189:1, line:190:36> line:189:6 arch_start_cpu 'void (int, k_thread_stack_t *, int, arch_cpustart_t, void *)'
| |-ParmVarDecl 0x559b74b38c00 <col:21, col:25> col:25 cpu_num 'int'
| |-ParmVarDecl 0x559b74b38ce8 <col:34, col:52> col:52 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x559b74b38d60 <col:59, col:63> col:63 sz 'int'
| |-ParmVarDecl 0x559b74b38df0 <line:190:7, col:23> col:23 fn 'arch_cpustart_t':'void (*)(void *) __attribute__((noreturn))'
| |-ParmVarDecl 0x559b74b38e68 <col:27, col:33> col:33 arg 'void *'
| `-FullComment 0x559b74c1eb00 <line:170:3, line:187:51>
|   |-ParagraphComment 0x559b74c1b3d0 <line:170:3>
|   | `-TextComment 0x559b74c1b3a0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c1b3f0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x559b74c1b450 <col:10, col:53>
|   |   `-TextComment 0x559b74c1b420 <col:10, col:53> Text=" Start a numbered CPU on a MP-capable system"
|   |-ParagraphComment 0x559b74c1b540 <line:172:3, line:176:68>
|   | |-TextComment 0x559b74c1b470 <line:172:3, col:77> Text=" This starts and initializes a specific CPU.  The main thread on startup is"
|   | |-TextComment 0x559b74c1b490 <line:173:3, col:78> Text=" running on CPU zero, other processors are numbered sequentially.  On return"
|   | |-TextComment 0x559b74c1b4b0 <line:174:3, col:78> Text=" from this function, the CPU is known to have begun operating and will enter"
|   | |-TextComment 0x559b74c1b4d0 <line:175:3, col:79> Text=" the provided function.  Its interrupts will be initialized but disabled such"
|   | `-TextComment 0x559b74c1b4f0 <line:176:3, col:68> Text=" that irq_unlock() with the provided key will work to enable them."
|   |-ParagraphComment 0x559b74c1b600 <line:178:3, line:181:41>
|   | |-TextComment 0x559b74c1b560 <line:178:3, col:67> Text=" Normally, in SMP mode this function will be called by the kernel"
|   | |-TextComment 0x559b74c1b580 <line:179:3, col:79> Text=" initialization and should not be used as a user API.  But it is defined here"
|   | |-TextComment 0x559b74c1b5a0 <line:180:3, col:76> Text=" for special-purpose apps which want Zephyr running on one core and to use"
|   | `-TextComment 0x559b74c1b5c0 <line:181:3, col:41> Text=" others for design-specific processing."
|   |-ParagraphComment 0x559b74c1b650 <line:183:3>
|   | `-TextComment 0x559b74c1b620 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c1b670 <col:4, line:184:3> [in] implicitly Param="cpu_num" ParamIndex=0
|   | `-ParagraphComment 0x559b74c1b720 <line:183:18, line:184:3>
|   |   |-TextComment 0x559b74c1b6d0 <line:183:18, col:43> Text=" Integer number of the CPU"
|   |   `-TextComment 0x559b74c1b6f0 <line:184:3> Text=" "
|   |-ParamCommandComment 0x559b74c1b740 <col:4, line:185:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x559b74c1b7f0 <line:184:16, line:185:3>
|   |   |-TextComment 0x559b74c1b7a0 <line:184:16, col:40> Text=" Stack memory for the CPU"
|   |   `-TextComment 0x559b74c1b7c0 <line:185:3> Text=" "
|   |-ParamCommandComment 0x559b74c1e860 <col:4, line:186:3> [in] implicitly Param="sz" ParamIndex=2
|   | `-ParagraphComment 0x559b74c1e910 <line:185:13, line:186:3>
|   |   |-TextComment 0x559b74c1e8c0 <line:185:13, col:40> Text=" Stack buffer size, in bytes"
|   |   `-TextComment 0x559b74c1e8e0 <line:186:3> Text=" "
|   |-ParamCommandComment 0x559b74c1e930 <col:4, line:187:3> [in] implicitly Param="fn" ParamIndex=3
|   | `-ParagraphComment 0x559b74c1e9e0 <line:186:13, line:187:3>
|   |   |-TextComment 0x559b74c1e990 <line:186:13, col:50> Text=" Function to begin running on the CPU."
|   |   `-TextComment 0x559b74c1e9b0 <line:187:3> Text=" "
|   `-ParamCommandComment 0x559b74c1ea00 <col:4, col:51> [in] implicitly Param="arg" ParamIndex=4
|     `-ParagraphComment 0x559b74c1ea90 <col:14, col:51>
|       `-TextComment 0x559b74c1ea60 <col:14, col:51> Text=" Untyped argument to be passed to "fn""
|-FunctionDecl 0x559b74b3a210 <line:204:1, col:46> col:28 used arch_irq_lock 'unsigned int (void)' static inline
| `-FullComment 0x559b74c1ecb0 <line:200:3, line:202:18>
|   |-ParagraphComment 0x559b74c1eba0 <line:200:3, col:37>
|   | `-TextComment 0x559b74c1eb70 <col:3, col:37> Text=" Lock interrupts on the current CPU"
|   |-ParagraphComment 0x559b74c1ebf0 <line:202:3>
|   | `-TextComment 0x559b74c1ebc0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c1ec10 <col:4, col:18> Name="see"
|     `-ParagraphComment 0x559b74c1ec70 <col:8, col:18>
|       `-TextComment 0x559b74c1ec40 <col:8, col:18> Text=" irq_lock()"
|-FunctionDecl 0x559b74b3a378 <line:211:1, col:52> col:20 used arch_irq_unlock 'void (unsigned int)' static inline
| |-ParmVarDecl 0x559b74b3a2f0 <col:36, col:49> col:49 key 'unsigned int'
| `-FullComment 0x559b74c1ee60 <line:207:3, line:209:20>
|   |-ParagraphComment 0x559b74c1ed50 <line:207:3, col:39>
|   | `-TextComment 0x559b74c1ed20 <col:3, col:39> Text=" Unlock interrupts on the current CPU"
|   |-ParagraphComment 0x559b74c1eda0 <line:209:3>
|   | `-TextComment 0x559b74c1ed70 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c1edc0 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x559b74c1ee20 <col:8, col:20>
|       `-TextComment 0x559b74c1edf0 <col:8, col:20> Text=" irq_unlock()"
|-FunctionDecl 0x559b74b3a4e8 <line:220:1, col:54> col:20 arch_irq_unlocked 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x559b74b3a460 <col:38, col:51> col:51 key 'unsigned int'
| `-FullComment 0x559b74c1f100 <line:214:3, line:218:39>
|   |-ParagraphComment 0x559b74c1ef00 <line:214:3, col:68>
|   | `-TextComment 0x559b74c1eed0 <col:3, col:68> Text=" Test if calling arch_irq_unlock() with this key would unlock irqs"
|   |-ParagraphComment 0x559b74c1ef50 <line:216:3>
|   | `-TextComment 0x559b74c1ef20 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c1ef70 <col:4, line:217:3> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x559b74c1f020 <line:216:14, line:217:3>
|   |   |-TextComment 0x559b74c1efd0 <line:216:14, col:47> Text=" value returned by arch_irq_lock()"
|   |   `-TextComment 0x559b74c1eff0 <line:217:3> Text=" "
|   `-BlockCommandComment 0x559b74c1f040 <col:4, line:218:39> Name="return"
|     `-ParagraphComment 0x559b74c1f0c0 <line:217:11, line:218:39>
|       |-TextComment 0x559b74c1f070 <line:217:11, col:72> Text=" true if interrupts were unlocked prior to the arch_irq_lock()"
|       `-TextComment 0x559b74c1f090 <line:218:3, col:39> Text=" call that produced the key argument."
|-FunctionDecl 0x559b74b3a658 <line:227:1, col:39> col:6 arch_irq_disable 'void (unsigned int)'
| |-ParmVarDecl 0x559b74b3a5d0 <col:23, col:36> col:36 irq 'unsigned int'
| `-FullComment 0x559b74c1f2b0 <line:223:3, line:225:21>
|   |-ParagraphComment 0x559b74c1f1a0 <line:223:3, col:39>
|   | `-TextComment 0x559b74c1f170 <col:3, col:39> Text=" Disable the specified interrupt line"
|   |-ParagraphComment 0x559b74c1f1f0 <line:225:3>
|   | `-TextComment 0x559b74c1f1c0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c1f210 <col:4, col:21> Name="see"
|     `-ParagraphComment 0x559b74c1f270 <col:8, col:21>
|       `-TextComment 0x559b74c1f240 <col:8, col:21> Text=" irq_disable()"
|-FunctionDecl 0x559b74b3a7c8 <line:234:1, col:38> col:6 arch_irq_enable 'void (unsigned int)'
| |-ParmVarDecl 0x559b74b3a740 <col:22, col:35> col:35 irq 'unsigned int'
| `-FullComment 0x559b74c1f460 <line:230:3, line:232:20>
|   |-ParagraphComment 0x559b74c1f350 <line:230:3, col:38>
|   | `-TextComment 0x559b74c1f320 <col:3, col:38> Text=" Enable the specified interrupt line"
|   |-ParagraphComment 0x559b74c1f3a0 <line:232:3>
|   | `-TextComment 0x559b74c1f370 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c1f3c0 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x559b74c1f420 <col:8, col:20>
|       `-TextComment 0x559b74c1f3f0 <col:8, col:20> Text=" irq_enable()"
|-FunctionDecl 0x559b74b3a978 <line:241:1, col:41> col:5 arch_irq_is_enabled 'int (unsigned int)'
| |-ParmVarDecl 0x559b74b3a8b0 <col:25, col:38> col:38 irq 'unsigned int'
| `-FullComment 0x559b74c1f610 <line:237:3, line:239:24>
|   |-ParagraphComment 0x559b74c1f500 <line:237:3, col:39>
|   | `-TextComment 0x559b74c1f4d0 <col:3, col:39> Text=" Test if an interrupt line is enabled"
|   |-ParagraphComment 0x559b74c1f550 <line:239:3>
|   | `-TextComment 0x559b74c1f520 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c1f570 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x559b74c1f5d0 <col:8, col:24>
|       `-TextComment 0x559b74c1f5a0 <col:8, col:24> Text=" irq_is_enabled()"
|-FunctionDecl 0x559b74b3aec8 <line:254:1, line:256:37> line:254:5 used arch_irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |-ParmVarDecl 0x559b74b3aa60 <col:30, col:43> col:43 irq 'unsigned int'
| |-ParmVarDecl 0x559b74b3aad8 <col:48, col:61> col:61 priority 'unsigned int'
| |-ParmVarDecl 0x559b74b3ac70 <line:255:9, col:40> col:16 routine 'void (*)(void *)'
| |-ParmVarDecl 0x559b74b3ace8 <line:256:9, col:15> col:15 parameter 'void *'
| |-ParmVarDecl 0x559b74b3ad58 <col:26, col:32> col:32 flags 'u32_t':'unsigned int'
| `-FullComment 0x559b74c1fc30 <line:244:3, line:252:48>
|   |-ParagraphComment 0x559b74c1f6b0 <line:244:3, col:53>
|   | `-TextComment 0x559b74c1f680 <col:3, col:53> Text=" Arch-specific hook to install a dynamic interrupt."
|   |-ParagraphComment 0x559b74c1f700 <line:246:3>
|   | `-TextComment 0x559b74c1f6d0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c1f720 <col:4, line:247:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x559b74c1f7d0 <line:246:14, line:247:3>
|   |   |-TextComment 0x559b74c1f780 <line:246:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x559b74c1f7a0 <line:247:3> Text=" "
|   |-ParamCommandComment 0x559b74c1f7f0 <col:4, line:248:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x559b74c1f8a0 <line:247:19, line:248:3>
|   |   |-TextComment 0x559b74c1f850 <line:247:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x559b74c1f870 <line:248:3> Text=" "
|   |-ParamCommandComment 0x559b74c1f8c0 <col:4, line:249:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x559b74c1f970 <line:248:18, line:249:3>
|   |   |-TextComment 0x559b74c1f920 <line:248:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x559b74c1f940 <line:249:3> Text=" "
|   |-ParamCommandComment 0x559b74c1f990 <col:4, line:250:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x559b74c1fa40 <line:249:20, line:250:3>
|   |   |-TextComment 0x559b74c1f9f0 <line:249:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x559b74c1fa10 <line:250:3> Text=" "
|   |-ParamCommandComment 0x559b74c1fa60 <col:4, col:52> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x559b74c1faf0 <col:16, col:52>
|   |   `-TextComment 0x559b74c1fac0 <col:16, col:52> Text=" Arch-specific IRQ configuration flag"
|   |-ParagraphComment 0x559b74c1fb40 <line:252:3>
|   | `-TextComment 0x559b74c1fb10 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c1fb60 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x559b74c1fbc0 <col:11, col:48>
|       `-TextComment 0x559b74c1fb90 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x559b74b3b308 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:27:1, line:34:1> line:27:19 used sys_clock_hw_cycles_per_sec 'int (void)' static inline
| `-CompoundStmt 0x559b74b3b3b8 <line:28:1, line:34:1>
|-FunctionDecl 0x559b74b3b810 <line:55:1, line:105:1> line:55:28 used z_tmcvt 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' static inline
| |-ParmVarDecl 0x559b74b3b3d8 <col:36, col:42> col:42 used t 'u64_t':'unsigned long long'
| |-ParmVarDecl 0x559b74b3b448 <col:45, col:51> col:51 used from_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x559b74b3b4b8 <col:60, col:66> col:66 used to_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x559b74b3b528 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:13> col:13 used const_hz 'bool'
| |-ParmVarDecl 0x559b74b3b598 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:28> col:28 used result32 'bool'
| |-ParmVarDecl 0x559b74b3b608 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:13> col:13 used round_up 'bool'
| |-ParmVarDecl 0x559b74b3b678 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:28> col:28 used round_off 'bool'
| |-CompoundStmt 0x559b74b42118 <line:58:1, line:105:1>
| | |-DeclStmt 0x559b74b3bc70 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:48>
| | | `-VarDecl 0x559b74b3b940 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:47> line:59:7 used mul_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x559b74b3bc58 <col:19, line:60:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x559b74b3bc30 <line:59:19, line:60:47> 'int' '&&'
| | |       |-BinaryOperator 0x559b74b3bac0 <line:59:19, line:60:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x559b74b3baa8 <line:59:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x559b74b3ba90 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x559b74b3b9a0 <col:19> 'bool' lvalue ParmVar 0x559b74b3b528 'const_hz' 'bool'
| | |       | `-ParenExpr 0x559b74b3ba70 <line:60:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x559b74b3ba48 <col:4, col:12> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x559b74b3ba18 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x559b74b3b9c8 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b4b8 'to_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x559b74b3ba30 <col:12> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x559b74b3b9f0 <col:12> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b448 'from_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x559b74b3bc10 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x559b74b3bbe8 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x559b74b3bb90 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x559b74b3bb68 <col:26, col:34> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x559b74b3bb38 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x559b74b3bae8 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b4b8 'to_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x559b74b3bb50 <col:34> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x559b74b3bb10 <col:34> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b448 'from_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x559b74b3bbd0 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x559b74b3bbb0 <col:46> 'int' 0
| | |-DeclStmt 0x559b74b3bfc8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:48>
| | | `-VarDecl 0x559b74b3bc98 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:47> line:61:7 used div_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x559b74b3bfb0 <col:19, line:62:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x559b74b3bf88 <line:61:19, line:62:47> 'int' '&&'
| | |       |-BinaryOperator 0x559b74b3be18 <line:61:19, line:62:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x559b74b3be00 <line:61:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x559b74b3bde8 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x559b74b3bcf8 <col:19> 'bool' lvalue ParmVar 0x559b74b3b528 'const_hz' 'bool'
| | |       | `-ParenExpr 0x559b74b3bdc8 <line:62:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x559b74b3bda0 <col:4, col:14> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x559b74b3bd70 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x559b74b3bd20 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b448 'from_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x559b74b3bd88 <col:14> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x559b74b3bd48 <col:14> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b4b8 'to_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x559b74b3bf68 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x559b74b3bf40 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x559b74b3bee8 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x559b74b3bec0 <col:26, col:36> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x559b74b3be90 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x559b74b3be40 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b448 'from_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x559b74b3bea8 <col:36> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x559b74b3be68 <col:36> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b4b8 'to_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x559b74b3bf28 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x559b74b3bf08 <col:46> 'int' 0
| | |-IfStmt 0x559b74b3f5b0 <line:64:2, line:66:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x559b74b3f3e0 <line:64:6, col:17> 'int' '=='
| | | | |-ImplicitCastExpr 0x559b74b3f3b0 <col:6> 'u32_t':'unsigned int' <LValueToRValue>
| | | | | `-DeclRefExpr 0x559b74b3bfe0 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b448 'from_hz' 'u32_t':'unsigned int'
| | | | `-ImplicitCastExpr 0x559b74b3f3c8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x559b74b3c008 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b4b8 'to_hz' 'u32_t':'unsigned int'
| | | |-CompoundStmt 0x559b74b3f598 <col:24, line:66:2>
| | | | `-ReturnStmt 0x559b74b3f580 <line:65:3, col:34>
| | | |   `-ConditionalOperator 0x559b74b3f550 <col:10, col:34> 'unsigned long long'
| | | |     |-ImplicitCastExpr 0x559b74b3f508 <col:10> 'int' <IntegralCast>
| | | |     | `-ImplicitCastExpr 0x559b74b3f4f0 <col:10> 'bool' <LValueToRValue>
| | | |     |   `-DeclRefExpr 0x559b74b3f408 <col:10> 'bool' lvalue ParmVar 0x559b74b3b598 'result32' 'bool'
| | | |     |-ImplicitCastExpr 0x559b74b3f538 <col:21, col:30> 'unsigned long long' <IntegralCast>
| | | |     | `-ParenExpr 0x559b74b3f4a8 <col:21, col:30> 'u32_t':'unsigned int'
| | | |     |   `-CStyleCastExpr 0x559b74b3f480 <col:22, col:29> 'u32_t':'unsigned int' <IntegralCast>
| | | |     |     `-ImplicitCastExpr 0x559b74b3f468 <col:29> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |     |       `-DeclRefExpr 0x559b74b3f430 <col:29> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b3b3d8 't' 'u64_t':'unsigned long long'
| | | |     `-ImplicitCastExpr 0x559b74b3f520 <col:34> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |       `-DeclRefExpr 0x559b74b3f4c8 <col:34> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b3b3d8 't' 'u64_t':'unsigned long long'
| | | `-<<<NULL>>>
| | |-DeclStmt 0x559b74b3f690 <line:68:2, col:15>
| | | `-VarDecl 0x559b74b3f5f8 <col:2, col:14> col:8 used off 'u64_t':'unsigned long long' cinit
| | |   `-ImplicitCastExpr 0x559b74b3f678 <col:14> 'u64_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x559b74b3f658 <col:14> 'int' 0
| | |-IfStmt 0x559b74b3fc70 <line:70:2, line:78:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x559b74b3f6e8 <line:70:6, col:7> 'int' prefix '!'
| | | | `-ImplicitCastExpr 0x559b74b3f6d0 <col:7> 'bool' <LValueToRValue>
| | | |   `-DeclRefExpr 0x559b74b3f6a8 <col:7> 'bool' lvalue Var 0x559b74b3b940 'mul_ratio' 'bool'
| | | |-CompoundStmt 0x559b74b3fc50 <col:18, line:78:2>
| | | | |-DeclStmt 0x559b74b3f908 <line:71:3, col:59>
| | | | | `-VarDecl 0x559b74b3f718 <col:3, col:52> col:9 used rdivisor 'u32_t':'unsigned int' cinit
| | | | |   `-ConditionalOperator 0x559b74b3f8d8 <col:20, col:52> 'unsigned int'
| | | | |     |-ImplicitCastExpr 0x559b74b3f8a8 <col:20> 'int' <IntegralCast>
| | | | |     | `-ImplicitCastExpr 0x559b74b3f890 <col:20> 'bool' <LValueToRValue>
| | | | |     |   `-DeclRefExpr 0x559b74b3f778 <col:20> 'bool' lvalue Var 0x559b74b3bc98 'div_ratio' 'bool'
| | | | |     |-ParenExpr 0x559b74b3f848 <col:32, col:48> 'unsigned int'
| | | | |     | `-BinaryOperator 0x559b74b3f820 <col:33, col:43> 'unsigned int' '/'
| | | | |     |   |-ImplicitCastExpr 0x559b74b3f7f0 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |   | `-DeclRefExpr 0x559b74b3f7a0 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b448 'from_hz' 'u32_t':'unsigned int'
| | | | |     |   `-ImplicitCastExpr 0x559b74b3f808 <col:43> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |     `-DeclRefExpr 0x559b74b3f7c8 <col:43> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b4b8 'to_hz' 'u32_t':'unsigned int'
| | | | |     `-ImplicitCastExpr 0x559b74b3f8c0 <col:52> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x559b74b3f868 <col:52> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b448 'from_hz' 'u32_t':'unsigned int'
| | | | `-IfStmt 0x559b74b3fc18 <line:73:3, line:77:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-ImplicitCastExpr 0x559b74b3f948 <line:73:7> 'bool' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x559b74b3f920 <col:7> 'bool' lvalue ParmVar 0x559b74b3b608 'round_up' 'bool'
| | | |   |-CompoundStmt 0x559b74b3fa68 <col:17, line:75:3>
| | | |   | `-BinaryOperator 0x559b74b3fa40 <line:74:4, col:21> 'u64_t':'unsigned long long' '='
| | | |   |   |-DeclRefExpr 0x559b74b3f960 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x559b74b3f5f8 'off' 'u64_t':'unsigned long long'
| | | |   |   `-ImplicitCastExpr 0x559b74b3fa28 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |   |     `-BinaryOperator 0x559b74b3fa00 <col:10, col:21> 'unsigned int' '-'
| | | |   |       |-ImplicitCastExpr 0x559b74b3f9d0 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   |       | `-DeclRefExpr 0x559b74b3f988 <col:10> 'u32_t':'unsigned int' lvalue Var 0x559b74b3f718 'rdivisor' 'u32_t':'unsigned int'
| | | |   |       `-ImplicitCastExpr 0x559b74b3f9e8 <col:21> 'unsigned int' <IntegralCast>
| | | |   |         `-IntegerLiteral 0x559b74b3f9b0 <col:21> 'int' 1
| | | |   `-IfStmt 0x559b74b3fbe0 <line:75:10, line:77:3>
| | | |     |-<<<NULL>>>
| | | |     |-<<<NULL>>>
| | | |     |-ImplicitCastExpr 0x559b74b3faa8 <line:75:14> 'bool' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x559b74b3fa80 <col:14> 'bool' lvalue ParmVar 0x559b74b3b678 'round_off' 'bool'
| | | |     |-CompoundStmt 0x559b74b3fbc8 <col:25, line:77:3>
| | | |     | `-BinaryOperator 0x559b74b3fba0 <line:76:4, col:21> 'u64_t':'unsigned long long' '='
| | | |     |   |-DeclRefExpr 0x559b74b3fac0 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x559b74b3f5f8 'off' 'u64_t':'unsigned long long'
| | | |     |   `-ImplicitCastExpr 0x559b74b3fb88 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |     |     `-BinaryOperator 0x559b74b3fb60 <col:10, col:21> 'unsigned int' '/'
| | | |     |       |-ImplicitCastExpr 0x559b74b3fb30 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |     |       | `-DeclRefExpr 0x559b74b3fae8 <col:10> 'u32_t':'unsigned int' lvalue Var 0x559b74b3f718 'rdivisor' 'u32_t':'unsigned int'
| | | |     |       `-ImplicitCastExpr 0x559b74b3fb48 <col:21> 'unsigned int' <IntegralCast>
| | | |     |         `-IntegerLiteral 0x559b74b3fb10 <col:21> 'int' 2
| | | |     `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-IfStmt 0x559b74b420b8 <line:85:2, line:104:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x559b74b3fcd0 <line:85:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x559b74b3fca8 <col:6> 'bool' lvalue Var 0x559b74b3bc98 'div_ratio' 'bool'
| |   |-CompoundStmt 0x559b74b40148 <col:17, line:92:2>
| |   | |-CompoundAssignOperator 0x559b74b3fd50 <line:86:3, col:8> 'u64_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| |   | | |-DeclRefExpr 0x559b74b3fce8 <col:3> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b3b3d8 't' 'u64_t':'unsigned long long'
| |   | | `-ImplicitCastExpr 0x559b74b3fd38 <col:8> 'u64_t':'unsigned long long' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x559b74b3fd10 <col:8> 'u64_t':'unsigned long long' lvalue Var 0x559b74b3f5f8 'off' 'u64_t':'unsigned long long'
| |   | `-IfStmt 0x559b74b40110 <line:87:3, line:91:3>
| |   |   |-<<<NULL>>>
| |   |   |-<<<NULL>>>
| |   |   |-ImplicitCastExpr 0x559b74b3fdb0 <line:87:7> 'bool' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x559b74b3fd88 <col:7> 'bool' lvalue ParmVar 0x559b74b3b598 'result32' 'bool'
| |   |   |-CompoundStmt 0x559b74b3ff80 <col:17, line:89:3>
| |   |   | `-ReturnStmt 0x559b74b3ff68 <line:88:4, col:40>
| |   |   |   `-ImplicitCastExpr 0x559b74b3ff50 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |   |   |     `-BinaryOperator 0x559b74b3ff28 <col:11, col:40> 'unsigned int' '/'
| |   |   |       |-ParenExpr 0x559b74b3fe40 <col:11, col:20> 'u32_t':'unsigned int'
| |   |   |       | `-CStyleCastExpr 0x559b74b3fe18 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |   |   |       |   `-ImplicitCastExpr 0x559b74b3fe00 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |   |       |     `-DeclRefExpr 0x559b74b3fdc8 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b3b3d8 't' 'u64_t':'unsigned long long'
| |   |   |       `-ParenExpr 0x559b74b3ff08 <col:24, col:40> 'unsigned int'
| |   |   |         `-BinaryOperator 0x559b74b3fee0 <col:25, col:35> 'unsigned int' '/'
| |   |   |           |-ImplicitCastExpr 0x559b74b3feb0 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |           | `-DeclRefExpr 0x559b74b3fe60 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b448 'from_hz' 'u32_t':'unsigned int'
| |   |   |           `-ImplicitCastExpr 0x559b74b3fec8 <col:35> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |             `-DeclRefExpr 0x559b74b3fe88 <col:35> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b4b8 'to_hz' 'u32_t':'unsigned int'
| |   |   `-CompoundStmt 0x559b74b400f8 <line:89:10, line:91:3>
| |   |     `-ReturnStmt 0x559b74b400e0 <line:90:4, col:31>
| |   |       `-BinaryOperator 0x559b74b400b8 <col:11, col:31> 'unsigned long long' '/'
| |   |         |-ImplicitCastExpr 0x559b74b40088 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |         | `-DeclRefExpr 0x559b74b3ff98 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b3b3d8 't' 'u64_t':'unsigned long long'
| |   |         `-ImplicitCastExpr 0x559b74b400a0 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |   |           `-ParenExpr 0x559b74b40068 <col:15, col:31> 'unsigned int'
| |   |             `-BinaryOperator 0x559b74b40040 <col:16, col:26> 'unsigned int' '/'
| |   |               |-ImplicitCastExpr 0x559b74b40010 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |   |               | `-DeclRefExpr 0x559b74b3ffc0 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b448 'from_hz' 'u32_t':'unsigned int'
| |   |               `-ImplicitCastExpr 0x559b74b40028 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| |   |                 `-DeclRefExpr 0x559b74b3ffe8 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b4b8 'to_hz' 'u32_t':'unsigned int'
| |   `-IfStmt 0x559b74b42080 <line:92:9, line:104:2>
| |     |-<<<NULL>>>
| |     |-<<<NULL>>>
| |     |-ImplicitCastExpr 0x559b74b40190 <line:92:13> 'bool' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b40168 <col:13> 'bool' lvalue Var 0x559b74b3b940 'mul_ratio' 'bool'
| |     |-CompoundStmt 0x559b74b41b48 <col:24, line:98:2>
| |     | `-IfStmt 0x559b74b41b10 <line:93:3, line:97:3>
| |     |   |-<<<NULL>>>
| |     |   |-<<<NULL>>>
| |     |   |-ImplicitCastExpr 0x559b74b401d0 <line:93:7> 'bool' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x559b74b401a8 <col:7> 'bool' lvalue ParmVar 0x559b74b3b598 'result32' 'bool'
| |     |   |-CompoundStmt 0x559b74b41980 <col:17, line:95:3>
| |     |   | `-ReturnStmt 0x559b74b40388 <line:94:4, col:40>
| |     |   |   `-ImplicitCastExpr 0x559b74b40370 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |     |   |     `-BinaryOperator 0x559b74b40348 <col:11, col:40> 'unsigned int' '*'
| |     |   |       |-ParenExpr 0x559b74b40260 <col:11, col:20> 'u32_t':'unsigned int'
| |     |   |       | `-CStyleCastExpr 0x559b74b40238 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |     |   |       |   `-ImplicitCastExpr 0x559b74b40220 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |   |       |     `-DeclRefExpr 0x559b74b401e8 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b3b3d8 't' 'u64_t':'unsigned long long'
| |     |   |       `-ParenExpr 0x559b74b40328 <col:24, col:40> 'unsigned int'
| |     |   |         `-BinaryOperator 0x559b74b40300 <col:25, col:33> 'unsigned int' '/'
| |     |   |           |-ImplicitCastExpr 0x559b74b402d0 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |           | `-DeclRefExpr 0x559b74b40280 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b4b8 'to_hz' 'u32_t':'unsigned int'
| |     |   |           `-ImplicitCastExpr 0x559b74b402e8 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |             `-DeclRefExpr 0x559b74b402a8 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b448 'from_hz' 'u32_t':'unsigned int'
| |     |   `-CompoundStmt 0x559b74b41af8 <line:95:10, line:97:3>
| |     |     `-ReturnStmt 0x559b74b41ae0 <line:96:4, col:31>
| |     |       `-BinaryOperator 0x559b74b41ab8 <col:11, col:31> 'unsigned long long' '*'
| |     |         |-ImplicitCastExpr 0x559b74b41a88 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |         | `-DeclRefExpr 0x559b74b41998 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b3b3d8 't' 'u64_t':'unsigned long long'
| |     |         `-ImplicitCastExpr 0x559b74b41aa0 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |     |           `-ParenExpr 0x559b74b41a68 <col:15, col:31> 'unsigned int'
| |     |             `-BinaryOperator 0x559b74b41a40 <col:16, col:24> 'unsigned int' '/'
| |     |               |-ImplicitCastExpr 0x559b74b41a10 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |     |               | `-DeclRefExpr 0x559b74b419c0 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b4b8 'to_hz' 'u32_t':'unsigned int'
| |     |               `-ImplicitCastExpr 0x559b74b41a28 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |     |                 `-DeclRefExpr 0x559b74b419e8 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b448 'from_hz' 'u32_t':'unsigned int'
| |     `-CompoundStmt 0x559b74b42068 <line:98:9, line:104:2>
| |       `-IfStmt 0x559b74b42030 <line:99:3, line:103:3>
| |         |-<<<NULL>>>
| |         |-<<<NULL>>>
| |         |-ImplicitCastExpr 0x559b74b41b88 <line:99:7> 'bool' <LValueToRValue>
| |         | `-DeclRefExpr 0x559b74b41b60 <col:7> 'bool' lvalue ParmVar 0x559b74b3b598 'result32' 'bool'
| |         |-CompoundStmt 0x559b74b41e20 <col:17, line:101:3>
| |         | `-ReturnStmt 0x559b74b41e08 <line:100:4, col:46>
| |         |   `-ImplicitCastExpr 0x559b74b41df0 <col:11, col:46> 'u64_t':'unsigned long long' <IntegralCast>
| |         |     `-CStyleCastExpr 0x559b74b41dc8 <col:11, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |         |       `-ParenExpr 0x559b74b41da8 <col:18, col:46> 'unsigned long long'
| |         |         `-BinaryOperator 0x559b74b41d40 <col:19, col:39> 'unsigned long long' '/'
| |         |           |-ParenExpr 0x559b74b41cc8 <col:19, col:35> 'unsigned long long'
| |         |           | `-BinaryOperator 0x559b74b41ca0 <col:20, col:32> 'unsigned long long' '+'
| |         |           |   |-BinaryOperator 0x559b74b41c38 <col:20, col:24> 'unsigned long long' '*'
| |         |           |   | |-ImplicitCastExpr 0x559b74b41bf0 <col:20> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |   | | `-DeclRefExpr 0x559b74b41ba0 <col:20> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b3b3d8 't' 'u64_t':'unsigned long long'
| |         |           |   | `-ImplicitCastExpr 0x559b74b41c20 <col:24> 'unsigned long long' <IntegralCast>
| |         |           |   |   `-ImplicitCastExpr 0x559b74b41c08 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |         |           |   |     `-DeclRefExpr 0x559b74b41bc8 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b4b8 'to_hz' 'u32_t':'unsigned int'
| |         |           |   `-ImplicitCastExpr 0x559b74b41c88 <col:32> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |     `-DeclRefExpr 0x559b74b41c60 <col:32> 'u64_t':'unsigned long long' lvalue Var 0x559b74b3f5f8 'off' 'u64_t':'unsigned long long'
| |         |           `-ImplicitCastExpr 0x559b74b41d28 <col:39> 'unsigned long long' <IntegralCast>
| |         |             `-ImplicitCastExpr 0x559b74b41d10 <col:39> 'u32_t':'unsigned int' <LValueToRValue>
| |         |               `-DeclRefExpr 0x559b74b41ce8 <col:39> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b448 'from_hz' 'u32_t':'unsigned int'
| |         `-CompoundStmt 0x559b74b42018 <line:101:10, line:103:3>
| |           `-ReturnStmt 0x559b74b42000 <line:102:4, col:31>
| |             `-BinaryOperator 0x559b74b41fd8 <col:11, col:31> 'unsigned long long' '/'
| |               |-ParenExpr 0x559b74b41f60 <col:11, col:27> 'unsigned long long'
| |               | `-BinaryOperator 0x559b74b41f38 <col:12, col:24> 'unsigned long long' '+'
| |               |   |-BinaryOperator 0x559b74b41ed0 <col:12, col:16> 'unsigned long long' '*'
| |               |   | |-ImplicitCastExpr 0x559b74b41e88 <col:12> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |   | | `-DeclRefExpr 0x559b74b41e38 <col:12> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b3b3d8 't' 'u64_t':'unsigned long long'
| |               |   | `-ImplicitCastExpr 0x559b74b41eb8 <col:16> 'unsigned long long' <IntegralCast>
| |               |   |   `-ImplicitCastExpr 0x559b74b41ea0 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |               |   |     `-DeclRefExpr 0x559b74b41e60 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b4b8 'to_hz' 'u32_t':'unsigned int'
| |               |   `-ImplicitCastExpr 0x559b74b41f20 <col:24> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |     `-DeclRefExpr 0x559b74b41ef8 <col:24> 'u64_t':'unsigned long long' lvalue Var 0x559b74b3f5f8 'off' 'u64_t':'unsigned long long'
| |               `-ImplicitCastExpr 0x559b74b41fc0 <col:31> 'unsigned long long' <IntegralCast>
| |                 `-ImplicitCastExpr 0x559b74b41fa8 <col:31> 'u32_t':'unsigned int' <LValueToRValue>
| |                   `-DeclRefExpr 0x559b74b41f80 <col:31> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b3b448 'from_hz' 'u32_t':'unsigned int'
| `-AlwaysInlineAttr 0x559b74b3b8e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x559b74b42270 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:190:1, line:194:1> line:190:21 k_ms_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b42168 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b426c8 <line:191:1, line:194:1>
| | `-ReturnStmt 0x559b74b42688 <line:193:2, col:65>
| |   `-ImplicitCastExpr 0x559b74b42670 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b42550 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b42538 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b42318 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b425c8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b425b0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b42340 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b42168 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b425e0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b42368 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x559b74b425f8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b423f0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b423d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b42388 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b42610 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b42458 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b42438 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b42418 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b42628 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b42478 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b42640 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b42498 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559b74b42658 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b424b8 <col:16> 'int' 0
| `-FullComment 0x559b74c1ff10 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:182:4, line:188:35>
|   |-ParagraphComment 0x559b74c1fcd0 <line:182:4>
|   | `-TextComment 0x559b74c1fca0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c1fcf0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c1fd50 <col:11, col:50>
|   |   `-TextComment 0x559b74c1fd20 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c1fdf0 <line:184:3, line:186:44>
|   | |-TextComment 0x559b74c1fd70 <line:184:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x559b74c1fd90 <line:185:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c1fdb0 <line:186:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c1fe40 <line:188:3>
|   | `-TextComment 0x559b74c1fe10 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c1fe60 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c1fec0 <col:11, col:35>
|       `-TextComment 0x559b74c1fe90 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b427f0 <line:204:1, line:208:1> line:204:21 k_ms_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b426f0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b42bb8 <line:205:1, line:208:1>
| | `-ReturnStmt 0x559b74b42b70 <line:207:2, col:66>
| |   `-CallExpr 0x559b74b42a68 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b42a50 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b42898 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b42ac8 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b428c0 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b426f0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b42ae0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b428e8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x559b74b42af8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b42948 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b42930 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b42908 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b42b10 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b429d0 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b429b0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b42990 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b42b28 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b429f0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b42b40 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b42a10 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559b74b42b58 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b42a30 <col:16> 'int' 0
| `-FullComment 0x559b74c201f0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:196:4, line:202:35>
|   |-ParagraphComment 0x559b74c1ffb0 <line:196:4>
|   | `-TextComment 0x559b74c1ff80 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c1ffd0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c20030 <col:11, col:50>
|   |   `-TextComment 0x559b74c20000 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c200d0 <line:198:3, line:200:44>
|   | |-TextComment 0x559b74c20050 <line:198:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x559b74c20070 <line:199:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c20090 <line:200:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c20120 <line:202:3>
|   | `-TextComment 0x559b74c200f0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c20140 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c201a0 <col:11, col:35>
|       `-TextComment 0x559b74c20170 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b42c68 <line:218:1, line:222:1> line:218:21 k_ms_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b42be0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b43038 <line:219:1, line:222:1>
| | `-ReturnStmt 0x559b74b42ff8 <line:221:2, col:64>
| |   `-ImplicitCastExpr 0x559b74b42fe0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b42ec0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b42ea8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b42d10 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b42f38 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b42f20 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b42d38 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b42be0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b42f50 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b42d60 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x559b74b42f68 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b42dc0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b42da8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b42d80 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b42f80 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b42e28 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b42e08 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b42de8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b42f98 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b42e48 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b42fb0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b42e68 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559b74b42fc8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b42e88 <col:16> 'int' 1
| `-FullComment 0x559b74c204d0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:210:4, line:216:35>
|   |-ParagraphComment 0x559b74c20290 <line:210:4>
|   | `-TextComment 0x559b74c20260 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c202b0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c20310 <col:11, col:50>
|   |   `-TextComment 0x559b74c202e0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c203b0 <line:212:3, line:214:37>
|   | |-TextComment 0x559b74c20330 <line:212:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x559b74c20350 <line:213:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c20370 <line:214:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c20400 <line:216:3>
|   | `-TextComment 0x559b74c203d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c20420 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c20480 <col:11, col:35>
|       `-TextComment 0x559b74c20450 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b430e8 <line:232:1, line:236:1> line:232:21 k_ms_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b43060 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b43488 <line:233:1, line:236:1>
| | `-ReturnStmt 0x559b74b43448 <line:235:2, col:65>
| |   `-CallExpr 0x559b74b43340 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b43328 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b43190 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b433a0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b431b8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b43060 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b433b8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b431e0 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x559b74b433d0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b43240 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b43228 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b43200 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b433e8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b432a8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b43288 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b43268 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b43400 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b432c8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b43418 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b432e8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559b74b43430 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b43308 <col:16> 'int' 1
| `-FullComment 0x559b74c207b0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:224:4, line:230:35>
|   |-ParagraphComment 0x559b74c20570 <line:224:4>
|   | `-TextComment 0x559b74c20540 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c20590 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c205f0 <col:11, col:50>
|   |   `-TextComment 0x559b74c205c0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c20690 <line:226:3, line:228:37>
|   | |-TextComment 0x559b74c20610 <line:226:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x559b74c20630 <line:227:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c20650 <line:228:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c206e0 <line:230:3>
|   | `-TextComment 0x559b74c206b0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c20700 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c20760 <col:11, col:35>
|       `-TextComment 0x559b74c20730 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b43538 <line:246:1, line:250:1> line:246:21 k_ms_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b434b0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b43908 <line:247:1, line:250:1>
| | `-ReturnStmt 0x559b74b438c8 <line:249:2, col:64>
| |   `-ImplicitCastExpr 0x559b74b438b0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b43790 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b43778 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b435e0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b43808 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b437f0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b43608 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b434b0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b43820 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b43630 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x559b74b43838 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b43690 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b43678 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b43650 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b43850 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b436f8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b436d8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b436b8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b43868 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b43718 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b43880 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b43738 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x559b74b43898 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b43758 <col:16> 'int' 0
| `-FullComment 0x559b74c20ab0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:238:4, line:244:35>
|   |-ParagraphComment 0x559b74c20870 <line:238:4>
|   | `-TextComment 0x559b74c20820 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c20890 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c208f0 <col:11, col:50>
|   |   `-TextComment 0x559b74c208c0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c20990 <line:240:3, line:242:45>
|   | |-TextComment 0x559b74c20910 <line:240:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x559b74c20930 <line:241:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c20950 <line:242:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c209e0 <line:244:3>
|   | `-TextComment 0x559b74c209b0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c20a00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c20a60 <col:11, col:35>
|       `-TextComment 0x559b74c20a30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b439c8 <line:260:1, line:264:1> line:260:21 k_ms_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b43930 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b43d68 <line:261:1, line:264:1>
| | `-ReturnStmt 0x559b74b43d28 <line:263:2, col:65>
| |   `-CallExpr 0x559b74b43c20 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b43c08 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b43a70 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b43c80 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b43a98 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b43930 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b43c98 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b43ac0 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x559b74b43cb0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b43b20 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b43b08 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b43ae0 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b43cc8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b43b88 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b43b68 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b43b48 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b43ce0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b43ba8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b43cf8 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b43bc8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x559b74b43d10 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b43be8 <col:16> 'int' 0
| `-FullComment 0x559b74c20d90 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:252:4, line:258:35>
|   |-ParagraphComment 0x559b74c20b50 <line:252:4>
|   | `-TextComment 0x559b74c20b20 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c20b70 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c20bd0 <col:11, col:50>
|   |   `-TextComment 0x559b74c20ba0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c20c70 <line:254:3, line:256:45>
|   | |-TextComment 0x559b74c20bf0 <line:254:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x559b74c20c10 <line:255:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c20c30 <line:256:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c20cc0 <line:258:3>
|   | `-TextComment 0x559b74c20c90 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c20ce0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c20d40 <col:11, col:35>
|       `-TextComment 0x559b74c20d10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b43e18 <line:274:1, line:278:1> line:274:21 k_ms_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b43d90 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b44068 <line:275:1, line:278:1>
| `-FullComment 0x559b74c21070 <line:266:4, line:272:35>
|   |-ParagraphComment 0x559b74c20e30 <line:266:4>
|   | `-TextComment 0x559b74c20e00 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c20e50 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c20eb0 <col:11, col:40>
|   |   `-TextComment 0x559b74c20e80 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x559b74c20f50 <line:268:3, line:270:44>
|   | |-TextComment 0x559b74c20ed0 <line:268:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x559b74c20ef0 <line:269:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c20f10 <line:270:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c20fa0 <line:272:3>
|   | `-TextComment 0x559b74c20f70 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c20fc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c21020 <col:11, col:35>
|       `-TextComment 0x559b74c20ff0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b44110 <line:288:1, line:292:1> line:288:21 k_ms_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b44088 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b44358 <line:289:1, line:292:1>
| `-FullComment 0x559b74c21350 <line:280:4, line:286:35>
|   |-ParagraphComment 0x559b74c21110 <line:280:4>
|   | `-TextComment 0x559b74c210e0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c21130 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c21190 <col:11, col:40>
|   |   `-TextComment 0x559b74c21160 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x559b74c21230 <line:282:3, line:284:44>
|   | |-TextComment 0x559b74c211b0 <line:282:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x559b74c211d0 <line:283:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c211f0 <line:284:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c21280 <line:286:3>
|   | `-TextComment 0x559b74c21250 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c212a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c21300 <col:11, col:35>
|       `-TextComment 0x559b74c212d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b44400 <line:302:1, line:306:1> line:302:21 k_ms_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b44378 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b44648 <line:303:1, line:306:1>
| `-FullComment 0x559b74c21630 <line:294:4, line:300:35>
|   |-ParagraphComment 0x559b74c213f0 <line:294:4>
|   | `-TextComment 0x559b74c213c0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c21410 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c21470 <col:11, col:40>
|   |   `-TextComment 0x559b74c21440 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x559b74c21510 <line:296:3, line:298:37>
|   | |-TextComment 0x559b74c21490 <line:296:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x559b74c214b0 <line:297:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c214d0 <line:298:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c21560 <line:300:3>
|   | `-TextComment 0x559b74c21530 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c21580 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c215e0 <col:11, col:35>
|       `-TextComment 0x559b74c215b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b446f0 <line:316:1, line:320:1> line:316:21 k_ms_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b44668 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b44938 <line:317:1, line:320:1>
| `-FullComment 0x559b74c21910 <line:308:4, line:314:35>
|   |-ParagraphComment 0x559b74c216d0 <line:308:4>
|   | `-TextComment 0x559b74c216a0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c216f0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c21750 <col:11, col:40>
|   |   `-TextComment 0x559b74c21720 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x559b74c217f0 <line:310:3, line:312:37>
|   | |-TextComment 0x559b74c21770 <line:310:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x559b74c21790 <line:311:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c217b0 <line:312:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c21840 <line:314:3>
|   | `-TextComment 0x559b74c21810 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c21860 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c218c0 <col:11, col:35>
|       `-TextComment 0x559b74c21890 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b45048 <line:330:1, line:334:1> line:330:21 k_ms_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b44fc0 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b45298 <line:331:1, line:334:1>
| `-FullComment 0x559b74c21bf0 <line:322:4, line:328:35>
|   |-ParagraphComment 0x559b74c219b0 <line:322:4>
|   | `-TextComment 0x559b74c21980 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c219d0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c21a30 <col:11, col:40>
|   |   `-TextComment 0x559b74c21a00 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x559b74c21ad0 <line:324:3, line:326:45>
|   | |-TextComment 0x559b74c21a50 <line:324:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x559b74c21a70 <line:325:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c21a90 <line:326:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c21b20 <line:328:3>
|   | `-TextComment 0x559b74c21af0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c21b40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c21ba0 <col:11, col:35>
|       `-TextComment 0x559b74c21b70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b45340 <line:344:1, line:348:1> line:344:21 k_ms_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b452b8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b45588 <line:345:1, line:348:1>
| `-FullComment 0x559b74c21ed0 <line:336:4, line:342:35>
|   |-ParagraphComment 0x559b74c21c90 <line:336:4>
|   | `-TextComment 0x559b74c21c60 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c21cb0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c21d10 <col:11, col:40>
|   |   `-TextComment 0x559b74c21ce0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x559b74c21db0 <line:338:3, line:340:45>
|   | |-TextComment 0x559b74c21d30 <line:338:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x559b74c21d50 <line:339:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c21d70 <line:340:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c21e00 <line:342:3>
|   | `-TextComment 0x559b74c21dd0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c21e20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c21e80 <col:11, col:35>
|       `-TextComment 0x559b74c21e50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b45630 <line:358:1, line:362:1> line:358:21 k_us_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b455a8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b45a08 <line:359:1, line:362:1>
| | `-ReturnStmt 0x559b74b459c0 <line:361:2, col:65>
| |   `-ImplicitCastExpr 0x559b74b459a8 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b45888 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b45870 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b456d8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b45900 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b458e8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b45700 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b455a8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b45918 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b45728 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x559b74b45930 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b45788 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b45770 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b45748 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b45948 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b457f0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b457d0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b457b0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b45960 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b45810 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b45978 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b45830 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559b74b45990 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b45850 <col:16> 'int' 0
| `-FullComment 0x559b74c221b0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:350:4, line:356:35>
|   |-ParagraphComment 0x559b74c21f70 <line:350:4>
|   | `-TextComment 0x559b74c21f40 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c21f90 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c21ff0 <col:11, col:50>
|   |   `-TextComment 0x559b74c21fc0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c22090 <line:352:3, line:354:44>
|   | |-TextComment 0x559b74c22010 <line:352:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x559b74c22030 <line:353:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c22050 <line:354:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c220e0 <line:356:3>
|   | `-TextComment 0x559b74c220b0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c22100 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c22160 <col:11, col:35>
|       `-TextComment 0x559b74c22130 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b45ab8 <line:372:1, line:376:1> line:372:21 k_us_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b45a30 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b45e58 <line:373:1, line:376:1>
| | `-ReturnStmt 0x559b74b45e18 <line:375:2, col:66>
| |   `-CallExpr 0x559b74b45d10 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b45cf8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b45b60 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b45d70 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b45b88 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b45a30 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b45d88 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b45bb0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x559b74b45da0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b45c10 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b45bf8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b45bd0 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b45db8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b45c78 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b45c58 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b45c38 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b45dd0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b45c98 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b45de8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b45cb8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559b74b45e00 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b45cd8 <col:16> 'int' 0
| `-FullComment 0x559b74c22490 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:364:4, line:370:35>
|   |-ParagraphComment 0x559b74c22250 <line:364:4>
|   | `-TextComment 0x559b74c22220 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c22270 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c222d0 <col:11, col:50>
|   |   `-TextComment 0x559b74c222a0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c22370 <line:366:3, line:368:44>
|   | |-TextComment 0x559b74c222f0 <line:366:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x559b74c22310 <line:367:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c22330 <line:368:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c223c0 <line:370:3>
|   | `-TextComment 0x559b74c22390 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c223e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c22440 <col:11, col:35>
|       `-TextComment 0x559b74c22410 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b45f08 <line:386:1, line:390:1> line:386:21 k_us_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b45e80 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b462f8 <line:387:1, line:390:1>
| | `-ReturnStmt 0x559b74b462b8 <line:389:2, col:64>
| |   `-ImplicitCastExpr 0x559b74b462a0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b46180 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b46168 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b45fd0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b461f8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b461e0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b45ff8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b45e80 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b46210 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b46020 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x559b74b46228 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b46080 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b46068 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b46040 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b46240 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b460e8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b460c8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b460a8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b46258 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b46108 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b46270 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b46128 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559b74b46288 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b46148 <col:16> 'int' 1
| `-FullComment 0x559b74c22770 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:378:4, line:384:35>
|   |-ParagraphComment 0x559b74c22530 <line:378:4>
|   | `-TextComment 0x559b74c22500 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c22550 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c225b0 <col:11, col:50>
|   |   `-TextComment 0x559b74c22580 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c22650 <line:380:3, line:382:37>
|   | |-TextComment 0x559b74c225d0 <line:380:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x559b74c225f0 <line:381:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c22610 <line:382:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c226a0 <line:384:3>
|   | `-TextComment 0x559b74c22670 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c226c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c22720 <col:11, col:35>
|       `-TextComment 0x559b74c226f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b463a8 <line:400:1, line:404:1> line:400:21 k_us_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b46320 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b46748 <line:401:1, line:404:1>
| | `-ReturnStmt 0x559b74b46708 <line:403:2, col:65>
| |   `-CallExpr 0x559b74b46600 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b465e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b46450 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b46660 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b46478 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b46320 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b46678 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b464a0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x559b74b46690 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b46500 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b464e8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b464c0 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b466a8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b46568 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b46548 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b46528 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b466c0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b46588 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b466d8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b465a8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559b74b466f0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b465c8 <col:16> 'int' 1
| `-FullComment 0x559b74c22a70 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:392:4, line:398:35>
|   |-ParagraphComment 0x559b74c22810 <line:392:4>
|   | `-TextComment 0x559b74c227e0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c22830 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c228b0 <col:11, col:50>
|   |   `-TextComment 0x559b74c22880 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c22950 <line:394:3, line:396:37>
|   | |-TextComment 0x559b74c228d0 <line:394:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x559b74c228f0 <line:395:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c22910 <line:396:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c229a0 <line:398:3>
|   | `-TextComment 0x559b74c22970 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c229c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c22a20 <col:11, col:35>
|       `-TextComment 0x559b74c229f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b467f8 <line:414:1, line:418:1> line:414:21 k_us_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b46770 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b46bc8 <line:415:1, line:418:1>
| | `-ReturnStmt 0x559b74b46b88 <line:417:2, col:64>
| |   `-ImplicitCastExpr 0x559b74b46b70 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b46a50 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b46a38 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b468a0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b46ac8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b46ab0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b468c8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b46770 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b46ae0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b468f0 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x559b74b46af8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b46950 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b46938 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b46910 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b46b10 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b469b8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b46998 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b46978 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b46b28 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b469d8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b46b40 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b469f8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x559b74b46b58 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b46a18 <col:16> 'int' 0
| `-FullComment 0x559b74c22d50 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:406:4, line:412:35>
|   |-ParagraphComment 0x559b74c22b10 <line:406:4>
|   | `-TextComment 0x559b74c22ae0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c22b30 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c22b90 <col:11, col:50>
|   |   `-TextComment 0x559b74c22b60 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c22c30 <line:408:3, line:410:45>
|   | |-TextComment 0x559b74c22bb0 <line:408:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x559b74c22bd0 <line:409:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c22bf0 <line:410:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c22c80 <line:412:3>
|   | `-TextComment 0x559b74c22c50 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c22ca0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c22d00 <col:11, col:35>
|       `-TextComment 0x559b74c22cd0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b46c78 <line:428:1, line:432:1> line:428:21 k_us_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b46bf0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b47038 <line:429:1, line:432:1>
| | `-ReturnStmt 0x559b74b46ff8 <line:431:2, col:65>
| |   `-CallExpr 0x559b74b46ed0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b46eb8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b46d20 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b46f30 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b46d48 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b46bf0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b46f48 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b46d70 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x559b74b46f60 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b46dd0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b46db8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b46d90 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b46f78 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b46e38 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b46e18 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b46df8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b46f90 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b46e58 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b46fa8 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b46e78 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x559b74b46fe0 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b46e98 <col:16> 'int' 0
| `-FullComment 0x559b74c23030 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:420:4, line:426:35>
|   |-ParagraphComment 0x559b74c22df0 <line:420:4>
|   | `-TextComment 0x559b74c22dc0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c22e10 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c22e70 <col:11, col:50>
|   |   `-TextComment 0x559b74c22e40 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c22f10 <line:422:3, line:424:45>
|   | |-TextComment 0x559b74c22e90 <line:422:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x559b74c22eb0 <line:423:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c22ed0 <line:424:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c22f60 <line:426:3>
|   | `-TextComment 0x559b74c22f30 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c22f80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c22fe0 <col:11, col:35>
|       `-TextComment 0x559b74c22fb0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b470e8 <line:442:1, line:446:1> line:442:21 k_us_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b47060 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b47338 <line:443:1, line:446:1>
| `-FullComment 0x559b74c23310 <line:434:4, line:440:35>
|   |-ParagraphComment 0x559b74c230d0 <line:434:4>
|   | `-TextComment 0x559b74c230a0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c230f0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c23150 <col:11, col:40>
|   |   `-TextComment 0x559b74c23120 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x559b74c231f0 <line:436:3, line:438:44>
|   | |-TextComment 0x559b74c23170 <line:436:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x559b74c23190 <line:437:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c231b0 <line:438:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c23240 <line:440:3>
|   | `-TextComment 0x559b74c23210 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c23260 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c232c0 <col:11, col:35>
|       `-TextComment 0x559b74c23290 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b473e0 <line:456:1, line:460:1> line:456:21 k_us_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b47358 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b47628 <line:457:1, line:460:1>
| `-FullComment 0x559b74c235f0 <line:448:4, line:454:35>
|   |-ParagraphComment 0x559b74c233b0 <line:448:4>
|   | `-TextComment 0x559b74c23380 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c233d0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c23430 <col:11, col:40>
|   |   `-TextComment 0x559b74c23400 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x559b74c234d0 <line:450:3, line:452:44>
|   | |-TextComment 0x559b74c23450 <line:450:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x559b74c23470 <line:451:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c23490 <line:452:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c23520 <line:454:3>
|   | `-TextComment 0x559b74c234f0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c23540 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c235a0 <col:11, col:35>
|       `-TextComment 0x559b74c23570 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b476d0 <line:470:1, line:474:1> line:470:21 k_us_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b47648 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b47918 <line:471:1, line:474:1>
| `-FullComment 0x559b74c238d0 <line:462:4, line:468:35>
|   |-ParagraphComment 0x559b74c23690 <line:462:4>
|   | `-TextComment 0x559b74c23660 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c236b0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c23710 <col:11, col:40>
|   |   `-TextComment 0x559b74c236e0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x559b74c237b0 <line:464:3, line:466:37>
|   | |-TextComment 0x559b74c23730 <line:464:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x559b74c23750 <line:465:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c23770 <line:466:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c23800 <line:468:3>
|   | `-TextComment 0x559b74c237d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c23820 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c23880 <col:11, col:35>
|       `-TextComment 0x559b74c23850 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b479c0 <line:484:1, line:488:1> line:484:21 k_us_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b47938 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b47c08 <line:485:1, line:488:1>
| `-FullComment 0x559b74c23bb0 <line:476:4, line:482:35>
|   |-ParagraphComment 0x559b74c23970 <line:476:4>
|   | `-TextComment 0x559b74c23940 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c23990 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c239f0 <col:11, col:40>
|   |   `-TextComment 0x559b74c239c0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x559b74c23a90 <line:478:3, line:480:37>
|   | |-TextComment 0x559b74c23a10 <line:478:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x559b74c23a30 <line:479:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c23a50 <line:480:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c23ae0 <line:482:3>
|   | `-TextComment 0x559b74c23ab0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c23b00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c23b60 <col:11, col:35>
|       `-TextComment 0x559b74c23b30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b47cb0 <line:498:1, line:502:1> line:498:21 k_us_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b47c28 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b47ef8 <line:499:1, line:502:1>
| `-FullComment 0x559b74c23e90 <line:490:4, line:496:35>
|   |-ParagraphComment 0x559b74c23c50 <line:490:4>
|   | `-TextComment 0x559b74c23c20 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c23c70 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c23cd0 <col:11, col:40>
|   |   `-TextComment 0x559b74c23ca0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x559b74c23d70 <line:492:3, line:494:45>
|   | |-TextComment 0x559b74c23cf0 <line:492:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x559b74c23d10 <line:493:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c23d30 <line:494:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c23dc0 <line:496:3>
|   | `-TextComment 0x559b74c23d90 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c23de0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c23e40 <col:11, col:35>
|       `-TextComment 0x559b74c23e10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b49000 <line:512:1, line:516:1> line:512:21 k_us_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b47f18 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b49248 <line:513:1, line:516:1>
| `-FullComment 0x559b74c24170 <line:504:4, line:510:35>
|   |-ParagraphComment 0x559b74c23f30 <line:504:4>
|   | `-TextComment 0x559b74c23f00 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c23f50 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c23fb0 <col:11, col:40>
|   |   `-TextComment 0x559b74c23f80 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x559b74c24050 <line:506:3, line:508:45>
|   | |-TextComment 0x559b74c23fd0 <line:506:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x559b74c23ff0 <line:507:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c24010 <line:508:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c240a0 <line:510:3>
|   | `-TextComment 0x559b74c24070 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c240c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c24120 <col:11, col:35>
|       `-TextComment 0x559b74c240f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b492f0 <line:526:1, line:530:1> line:526:21 k_ns_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b49268 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b496c8 <line:527:1, line:530:1>
| | `-ReturnStmt 0x559b74b49680 <line:529:2, col:65>
| |   `-ImplicitCastExpr 0x559b74b49668 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b49548 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b49530 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b49398 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b495c0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b495a8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b493c0 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b49268 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b495d8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b493e8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x559b74b495f0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b49448 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b49430 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b49408 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b49608 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b494b0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b49490 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b49470 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b49620 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b494d0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b49638 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b494f0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559b74b49650 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b49510 <col:16> 'int' 0
| `-FullComment 0x559b74c24450 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:518:4, line:524:35>
|   |-ParagraphComment 0x559b74c24210 <line:518:4>
|   | `-TextComment 0x559b74c241e0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c24230 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c24290 <col:11, col:49>
|   |   `-TextComment 0x559b74c24260 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c24330 <line:520:3, line:522:44>
|   | |-TextComment 0x559b74c242b0 <line:520:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x559b74c242d0 <line:521:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c242f0 <line:522:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c24380 <line:524:3>
|   | `-TextComment 0x559b74c24350 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c243a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c24400 <col:11, col:35>
|       `-TextComment 0x559b74c243d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b49778 <line:540:1, line:544:1> line:540:21 k_ns_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b496f0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b49b18 <line:541:1, line:544:1>
| | `-ReturnStmt 0x559b74b49ad8 <line:543:2, col:66>
| |   `-CallExpr 0x559b74b499d0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b499b8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b49820 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b49a30 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b49848 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b496f0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b49a48 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b49870 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x559b74b49a60 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b498d0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b498b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b49890 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b49a78 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b49938 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b49918 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b498f8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b49a90 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b49958 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b49aa8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b49978 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559b74b49ac0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b49998 <col:16> 'int' 0
| `-FullComment 0x559b74c24730 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:532:4, line:538:35>
|   |-ParagraphComment 0x559b74c244f0 <line:532:4>
|   | `-TextComment 0x559b74c244c0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c24510 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c24570 <col:11, col:49>
|   |   `-TextComment 0x559b74c24540 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c24610 <line:534:3, line:536:44>
|   | |-TextComment 0x559b74c24590 <line:534:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x559b74c245b0 <line:535:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c245d0 <line:536:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c24660 <line:538:3>
|   | `-TextComment 0x559b74c24630 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c24680 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c246e0 <col:11, col:35>
|       `-TextComment 0x559b74c246b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b49bc8 <line:554:1, line:558:1> line:554:21 k_ns_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b49b40 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b49f98 <line:555:1, line:558:1>
| | `-ReturnStmt 0x559b74b49f58 <line:557:2, col:64>
| |   `-ImplicitCastExpr 0x559b74b49f40 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b49e20 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b49e08 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b49c70 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b49e98 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b49e80 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b49c98 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b49b40 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b49eb0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b49cc0 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x559b74b49ec8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b49d20 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b49d08 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b49ce0 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b49ee0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b49d88 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b49d68 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b49d48 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b49ef8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b49da8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b49f10 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b49dc8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559b74b49f28 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b49de8 <col:16> 'int' 1
| `-FullComment 0x559b74c24a30 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:546:4, line:552:35>
|   |-ParagraphComment 0x559b74c247d0 <line:546:4>
|   | `-TextComment 0x559b74c247a0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c247f0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c24850 <col:11, col:49>
|   |   `-TextComment 0x559b74c24820 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c24910 <line:548:3, line:550:37>
|   | |-TextComment 0x559b74c24890 <line:548:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x559b74c248b0 <line:549:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c248d0 <line:550:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c24960 <line:552:3>
|   | `-TextComment 0x559b74c24930 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c24980 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c249e0 <col:11, col:35>
|       `-TextComment 0x559b74c249b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b4a098 <line:568:1, line:572:1> line:568:21 k_ns_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b4a010 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b4a438 <line:569:1, line:572:1>
| | `-ReturnStmt 0x559b74b4a3f8 <line:571:2, col:65>
| |   `-CallExpr 0x559b74b4a2f0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b4a2d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b4a140 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b4a350 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b4a168 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b4a010 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b4a368 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b4a190 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x559b74b4a380 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b4a1f0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b4a1d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b4a1b0 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b4a398 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b4a258 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b4a238 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b4a218 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b4a3b0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b4a278 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b4a3c8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b4a298 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559b74b4a3e0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b4a2b8 <col:16> 'int' 1
| `-FullComment 0x559b74c24d10 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:560:4, line:566:35>
|   |-ParagraphComment 0x559b74c24ad0 <line:560:4>
|   | `-TextComment 0x559b74c24aa0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c24af0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c24b50 <col:11, col:49>
|   |   `-TextComment 0x559b74c24b20 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c24bf0 <line:562:3, line:564:37>
|   | |-TextComment 0x559b74c24b70 <line:562:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x559b74c24b90 <line:563:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c24bb0 <line:564:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c24c40 <line:566:3>
|   | `-TextComment 0x559b74c24c10 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c24c60 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c24cc0 <col:11, col:35>
|       `-TextComment 0x559b74c24c90 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b4a4e8 <line:582:1, line:586:1> line:582:21 k_ns_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b4a460 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b4a8b8 <line:583:1, line:586:1>
| | `-ReturnStmt 0x559b74b4a878 <line:585:2, col:64>
| |   `-ImplicitCastExpr 0x559b74b4a860 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b4a740 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b4a728 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b4a590 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b4a7b8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b4a7a0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b4a5b8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b4a460 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b4a7d0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b4a5e0 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x559b74b4a7e8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b4a640 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b4a628 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b4a600 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b4a800 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b4a6a8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b4a688 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b4a668 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b4a818 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b4a6c8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b4a830 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b4a6e8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x559b74b4a848 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b4a708 <col:16> 'int' 0
| `-FullComment 0x559b74c24ff0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:574:4, line:580:35>
|   |-ParagraphComment 0x559b74c24db0 <line:574:4>
|   | `-TextComment 0x559b74c24d80 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c24dd0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c24e30 <col:11, col:49>
|   |   `-TextComment 0x559b74c24e00 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c24ed0 <line:576:3, line:578:45>
|   | |-TextComment 0x559b74c24e50 <line:576:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x559b74c24e70 <line:577:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c24e90 <line:578:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c24f20 <line:580:3>
|   | `-TextComment 0x559b74c24ef0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c24f40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c24fa0 <col:11, col:35>
|       `-TextComment 0x559b74c24f70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b4a968 <line:596:1, line:600:1> line:596:21 k_ns_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b4a8e0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b4ad08 <line:597:1, line:600:1>
| | `-ReturnStmt 0x559b74b4acc8 <line:599:2, col:65>
| |   `-CallExpr 0x559b74b4abc0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b4aba8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b4aa10 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b4ac20 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b4aa38 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b4a8e0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b4ac38 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b4aa60 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x559b74b4ac50 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b4aac0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b4aaa8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b4aa80 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b4ac68 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b4ab28 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b4ab08 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b4aae8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b4ac80 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b4ab48 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b4ac98 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b4ab68 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x559b74b4acb0 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b4ab88 <col:16> 'int' 0
| `-FullComment 0x559b74c252d0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:588:4, line:594:35>
|   |-ParagraphComment 0x559b74c25090 <line:588:4>
|   | `-TextComment 0x559b74c25060 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c250b0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c25110 <col:11, col:49>
|   |   `-TextComment 0x559b74c250e0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x559b74c251b0 <line:590:3, line:592:45>
|   | |-TextComment 0x559b74c25130 <line:590:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x559b74c25150 <line:591:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c25170 <line:592:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c25200 <line:594:3>
|   | `-TextComment 0x559b74c251d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c25220 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c25280 <col:11, col:35>
|       `-TextComment 0x559b74c25250 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b4adb8 <line:610:1, line:614:1> line:610:21 k_ns_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b4ad30 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74afe8f0 <line:611:1, line:614:1>
| `-FullComment 0x559b74c255b0 <line:602:4, line:608:35>
|   |-ParagraphComment 0x559b74c25370 <line:602:4>
|   | `-TextComment 0x559b74c25340 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c25390 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c253f0 <col:11, col:39>
|   |   `-TextComment 0x559b74c253c0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x559b74c25490 <line:604:3, line:606:44>
|   | |-TextComment 0x559b74c25410 <line:604:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x559b74c25430 <line:605:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c25450 <line:606:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c254e0 <line:608:3>
|   | `-TextComment 0x559b74c254b0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c25500 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c25560 <col:11, col:35>
|       `-TextComment 0x559b74c25530 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74afe998 <line:624:1, line:628:1> line:624:21 k_ns_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74afe910 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74afebe8 <line:625:1, line:628:1>
| `-FullComment 0x559b74c25890 <line:616:4, line:622:35>
|   |-ParagraphComment 0x559b74c25650 <line:616:4>
|   | `-TextComment 0x559b74c25620 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c25670 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c256d0 <col:11, col:39>
|   |   `-TextComment 0x559b74c256a0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x559b74c25770 <line:618:3, line:620:44>
|   | |-TextComment 0x559b74c256f0 <line:618:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x559b74c25710 <line:619:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c25730 <line:620:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c257c0 <line:622:3>
|   | `-TextComment 0x559b74c25790 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c257e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c25840 <col:11, col:35>
|       `-TextComment 0x559b74c25810 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74afec90 <line:638:1, line:642:1> line:638:21 k_ns_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74afec08 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74afeed8 <line:639:1, line:642:1>
| `-FullComment 0x559b74c25b70 <line:630:4, line:636:35>
|   |-ParagraphComment 0x559b74c25930 <line:630:4>
|   | `-TextComment 0x559b74c25900 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c25950 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c259b0 <col:11, col:39>
|   |   `-TextComment 0x559b74c25980 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x559b74c25a50 <line:632:3, line:634:37>
|   | |-TextComment 0x559b74c259d0 <line:632:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x559b74c259f0 <line:633:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c25a10 <line:634:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c25aa0 <line:636:3>
|   | `-TextComment 0x559b74c25a70 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c25ac0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c25b20 <col:11, col:35>
|       `-TextComment 0x559b74c25af0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74afef80 <line:652:1, line:656:1> line:652:21 k_ns_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74afeef8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74aff1c8 <line:653:1, line:656:1>
| `-FullComment 0x559b74c25e50 <line:644:4, line:650:35>
|   |-ParagraphComment 0x559b74c25c10 <line:644:4>
|   | `-TextComment 0x559b74c25be0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c25c30 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c25c90 <col:11, col:39>
|   |   `-TextComment 0x559b74c25c60 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x559b74c25d30 <line:646:3, line:648:37>
|   | |-TextComment 0x559b74c25cb0 <line:646:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x559b74c25cd0 <line:647:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c25cf0 <line:648:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c25d80 <line:650:3>
|   | `-TextComment 0x559b74c25d50 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c25da0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c25e00 <col:11, col:35>
|       `-TextComment 0x559b74c25dd0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74aff270 <line:666:1, line:670:1> line:666:21 k_ns_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74aff1e8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74aff438 <line:667:1, line:670:1>
| `-FullComment 0x559b74c26130 <line:658:4, line:664:35>
|   |-ParagraphComment 0x559b74c25ef0 <line:658:4>
|   | `-TextComment 0x559b74c25ec0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c25f10 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c25f70 <col:11, col:39>
|   |   `-TextComment 0x559b74c25f40 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x559b74c26010 <line:660:3, line:662:45>
|   | |-TextComment 0x559b74c25f90 <line:660:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x559b74c25fb0 <line:661:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c25fd0 <line:662:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c26060 <line:664:3>
|   | `-TextComment 0x559b74c26030 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c26080 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c260e0 <col:11, col:35>
|       `-TextComment 0x559b74c260b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74aff4e0 <line:680:1, line:684:1> line:680:21 k_ns_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74aff458 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74aff6a8 <line:681:1, line:684:1>
| `-FullComment 0x559b74c26410 <line:672:4, line:678:35>
|   |-ParagraphComment 0x559b74c261d0 <line:672:4>
|   | `-TextComment 0x559b74c261a0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c261f0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c26250 <col:11, col:39>
|   |   `-TextComment 0x559b74c26220 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x559b74c262f0 <line:674:3, line:676:45>
|   | |-TextComment 0x559b74c26270 <line:674:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x559b74c26290 <line:675:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c262b0 <line:676:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c26340 <line:678:3>
|   | `-TextComment 0x559b74c26310 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c26360 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c263c0 <col:11, col:35>
|       `-TextComment 0x559b74c26390 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74aff750 <line:694:1, line:698:1> line:694:21 k_cyc_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74aff6c8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74affb38 <line:695:1, line:698:1>
| | `-ReturnStmt 0x559b74affaf0 <line:697:2, col:65>
| |   `-ImplicitCastExpr 0x559b74affad8 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74aff9b8 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74aff9a0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74aff7f8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74affa30 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74affa18 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74aff820 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74aff6c8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74affa48 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74aff888 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74aff870 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74aff848 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74affa60 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74aff8b0 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x559b74affa78 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74aff920 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74aff900 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74aff8d0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74affa90 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74aff940 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74affaa8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74aff960 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559b74affac0 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74aff980 <col:16> 'int' 0
| `-FullComment 0x559b74c266f0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:686:4, line:692:35>
|   |-ParagraphComment 0x559b74c264b0 <line:686:4>
|   | `-TextComment 0x559b74c26480 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c264d0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c26530 <col:11, col:50>
|   |   `-TextComment 0x559b74c26500 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x559b74c265d0 <line:688:3, line:690:44>
|   | |-TextComment 0x559b74c26550 <line:688:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x559b74c26570 <line:689:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c26590 <line:690:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c26620 <line:692:3>
|   | `-TextComment 0x559b74c265f0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c26640 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c266a0 <col:11, col:35>
|       `-TextComment 0x559b74c26670 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74affbe8 <line:708:1, line:712:1> line:708:21 k_cyc_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74affb60 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74afff88 <line:709:1, line:712:1>
| | `-ReturnStmt 0x559b74afff48 <line:711:2, col:66>
| |   `-CallExpr 0x559b74affe40 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74affe28 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74affc90 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74affea0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74affcb8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74affb60 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74affeb8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74affd20 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74affd08 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74affce0 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74affed0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74affd48 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x559b74affee8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74affda8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74affd88 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74affd68 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74afff00 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74affdc8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74afff18 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74affde8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559b74afff30 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74affe08 <col:16> 'int' 0
| `-FullComment 0x559b74c269e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:700:4, line:706:35>
|   |-ParagraphComment 0x559b74c26790 <line:700:4>
|   | `-TextComment 0x559b74c26760 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c267b0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c26810 <col:11, col:50>
|   |   `-TextComment 0x559b74c267e0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x559b74c268c0 <line:702:3, line:704:44>
|   | |-TextComment 0x559b74c26830 <line:702:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x559b74c26850 <line:703:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c26870 <line:704:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c26910 <line:706:3>
|   | `-TextComment 0x559b74c268e0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c26930 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c26990 <col:11, col:35>
|       `-TextComment 0x559b74c26960 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b00038 <line:722:1, line:726:1> line:722:21 k_cyc_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74afffb0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b00408 <line:723:1, line:726:1>
| | `-ReturnStmt 0x559b74b003c8 <line:725:2, col:64>
| |   `-ImplicitCastExpr 0x559b74b003b0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b00290 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b00278 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b000e0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b00308 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b002f0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b00108 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74afffb0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b00320 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b00170 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b00158 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b00130 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b00338 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b00198 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x559b74b00350 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b001f8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b001d8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b001b8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b00368 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b00218 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b00380 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b00238 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559b74b00398 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b00258 <col:16> 'int' 1
| `-FullComment 0x559b74c26cc0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:714:4, line:720:35>
|   |-ParagraphComment 0x559b74c26a80 <line:714:4>
|   | `-TextComment 0x559b74c26a50 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c26aa0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c26b00 <col:11, col:50>
|   |   `-TextComment 0x559b74c26ad0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x559b74c26ba0 <line:716:3, line:718:37>
|   | |-TextComment 0x559b74c26b20 <line:716:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x559b74c26b40 <line:717:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c26b60 <line:718:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c26bf0 <line:720:3>
|   | `-TextComment 0x559b74c26bc0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c26c10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c26c70 <col:11, col:35>
|       `-TextComment 0x559b74c26c40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b004b8 <line:736:1, line:740:1> line:736:21 k_cyc_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b00430 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b00858 <line:737:1, line:740:1>
| | `-ReturnStmt 0x559b74b00818 <line:739:2, col:65>
| |   `-CallExpr 0x559b74b00710 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b006f8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b00560 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b00770 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b00588 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b00430 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b00788 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b005f0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b005d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b005b0 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b007a0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b00618 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x559b74b007b8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b00678 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b00658 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b00638 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b007d0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b00698 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b007e8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b006b8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559b74b00800 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b006d8 <col:16> 'int' 1
| `-FullComment 0x559b74c26fa0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:728:4, line:734:35>
|   |-ParagraphComment 0x559b74c26d60 <line:728:4>
|   | `-TextComment 0x559b74c26d30 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c26d80 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c26de0 <col:11, col:50>
|   |   `-TextComment 0x559b74c26db0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x559b74c26e80 <line:730:3, line:732:37>
|   | |-TextComment 0x559b74c26e00 <line:730:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x559b74c26e20 <line:731:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c26e40 <line:732:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c26ed0 <line:734:3>
|   | `-TextComment 0x559b74c26ea0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c26ef0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c26f50 <col:11, col:35>
|       `-TextComment 0x559b74c26f20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b00938 <line:750:1, line:754:1> line:750:21 k_cyc_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b00880 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b00d08 <line:751:1, line:754:1>
| | `-ReturnStmt 0x559b74b00cc8 <line:753:2, col:64>
| |   `-ImplicitCastExpr 0x559b74b00cb0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b00b90 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b00b78 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b009e0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b00c08 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b00bf0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b00a08 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b00880 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b00c20 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b00a70 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b00a58 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b00a30 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b00c38 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b00a98 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x559b74b00c50 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b00af8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b00ad8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b00ab8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b00c68 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b00b18 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b00c80 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b00b38 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x559b74b00c98 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b00b58 <col:16> 'int' 0
| `-FullComment 0x559b74c27280 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:742:4, line:748:35>
|   |-ParagraphComment 0x559b74c27040 <line:742:4>
|   | `-TextComment 0x559b74c27010 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c27060 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c270c0 <col:11, col:50>
|   |   `-TextComment 0x559b74c27090 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x559b74c27160 <line:744:3, line:746:45>
|   | |-TextComment 0x559b74c270e0 <line:744:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x559b74c27100 <line:745:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c27120 <line:746:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c271b0 <line:748:3>
|   | `-TextComment 0x559b74c27180 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c271d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c27230 <col:11, col:35>
|       `-TextComment 0x559b74c27200 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b00db8 <line:764:1, line:768:1> line:764:21 k_cyc_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b00d30 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b01158 <line:765:1, line:768:1>
| | `-ReturnStmt 0x559b74b01118 <line:767:2, col:65>
| |   `-CallExpr 0x559b74b01010 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b00ff8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b00e60 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b01070 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b00e88 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b00d30 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b01088 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b00ef0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b00ed8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b00eb0 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b010a0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b00f18 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x559b74b010b8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b00f78 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b00f58 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b00f38 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b010d0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b00f98 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b010e8 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b00fb8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x559b74b01100 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b00fd8 <col:16> 'int' 0
| `-FullComment 0x559b74c27560 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:756:4, line:762:35>
|   |-ParagraphComment 0x559b74c27320 <line:756:4>
|   | `-TextComment 0x559b74c272f0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c27340 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c273a0 <col:11, col:50>
|   |   `-TextComment 0x559b74c27370 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x559b74c27440 <line:758:3, line:760:45>
|   | |-TextComment 0x559b74c273c0 <line:758:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x559b74c273e0 <line:759:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c27400 <line:760:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c27490 <line:762:3>
|   | `-TextComment 0x559b74c27460 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c274b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c27510 <col:11, col:35>
|       `-TextComment 0x559b74c274e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b01208 <line:778:1, line:782:1> line:778:21 k_cyc_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b01180 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b015d8 <line:779:1, line:782:1>
| | `-ReturnStmt 0x559b74b01598 <line:781:2, col:65>
| |   `-ImplicitCastExpr 0x559b74b01580 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b01460 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b01448 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b012b0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b014d8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b014c0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b012d8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b01180 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b014f0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b01340 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b01328 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b01300 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b01508 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b01368 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x559b74b01520 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b013c8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b013a8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b01388 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b01538 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b013e8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b01550 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b01408 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559b74b01568 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b01428 <col:16> 'int' 0
| `-FullComment 0x559b74c27840 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:770:4, line:776:35>
|   |-ParagraphComment 0x559b74c27600 <line:770:4>
|   | `-TextComment 0x559b74c275d0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c27620 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c27680 <col:11, col:50>
|   |   `-TextComment 0x559b74c27650 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x559b74c27720 <line:772:3, line:774:44>
|   | |-TextComment 0x559b74c276a0 <line:772:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x559b74c276c0 <line:773:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c276e0 <line:774:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c27770 <line:776:3>
|   | `-TextComment 0x559b74c27740 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c27790 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c277f0 <col:11, col:35>
|       `-TextComment 0x559b74c277c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b01688 <line:792:1, line:796:1> line:792:21 k_cyc_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b01600 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b01a48 <line:793:1, line:796:1>
| | `-ReturnStmt 0x559b74b01a08 <line:795:2, col:66>
| |   `-CallExpr 0x559b74b018e0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b018c8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b01730 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b01960 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b01758 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b01600 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b01978 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b017c0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b017a8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b01780 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b01990 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b017e8 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x559b74b019a8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b01848 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b01828 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b01808 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b019c0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b01868 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b019d8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b01888 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559b74b019f0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b018a8 <col:16> 'int' 0
| `-FullComment 0x559b74c27b20 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:784:4, line:790:35>
|   |-ParagraphComment 0x559b74c278e0 <line:784:4>
|   | `-TextComment 0x559b74c278b0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c27900 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c27960 <col:11, col:50>
|   |   `-TextComment 0x559b74c27930 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x559b74c27a00 <line:786:3, line:788:44>
|   | |-TextComment 0x559b74c27980 <line:786:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x559b74c279a0 <line:787:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c279c0 <line:788:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c27a50 <line:790:3>
|   | `-TextComment 0x559b74c27a20 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c27a70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c27ad0 <col:11, col:35>
|       `-TextComment 0x559b74c27aa0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b01af8 <line:806:1, line:810:1> line:806:21 k_cyc_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b01a70 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b01ec8 <line:807:1, line:810:1>
| | `-ReturnStmt 0x559b74b01e88 <line:809:2, col:64>
| |   `-ImplicitCastExpr 0x559b74b01e70 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b01d50 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b01d38 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b01ba0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b01dc8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b01db0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b01bc8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b01a70 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b01de0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b01c30 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b01c18 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b01bf0 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b01df8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b01c58 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x559b74b01e10 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b01cb8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b01c98 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b01c78 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b01e28 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b01cd8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b01e40 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b01cf8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559b74b01e58 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b01d18 <col:16> 'int' 1
| `-FullComment 0x559b74c27e00 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:798:4, line:804:35>
|   |-ParagraphComment 0x559b74c27bc0 <line:798:4>
|   | `-TextComment 0x559b74c27b90 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c27be0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c27c40 <col:11, col:50>
|   |   `-TextComment 0x559b74c27c10 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x559b74c27ce0 <line:800:3, line:802:37>
|   | |-TextComment 0x559b74c27c60 <line:800:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x559b74c27c80 <line:801:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c27ca0 <line:802:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c27d30 <line:804:3>
|   | `-TextComment 0x559b74c27d00 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c27d50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c27db0 <col:11, col:35>
|       `-TextComment 0x559b74c27d80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b01f78 <line:820:1, line:824:1> line:820:21 k_cyc_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b01ef0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b02318 <line:821:1, line:824:1>
| | `-ReturnStmt 0x559b74b022d8 <line:823:2, col:65>
| |   `-CallExpr 0x559b74b021d0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b021b8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b02020 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b02230 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b02048 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b01ef0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b02248 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b020b0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b02098 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b02070 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b02260 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b020d8 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x559b74b02278 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b02138 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b02118 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b020f8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b02290 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b02158 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b022a8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b02178 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559b74b022c0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b02198 <col:16> 'int' 1
| `-FullComment 0x559b74c280e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:812:4, line:818:35>
|   |-ParagraphComment 0x559b74c27ea0 <line:812:4>
|   | `-TextComment 0x559b74c27e70 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c27ec0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c27f20 <col:11, col:50>
|   |   `-TextComment 0x559b74c27ef0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x559b74c27fc0 <line:814:3, line:816:37>
|   | |-TextComment 0x559b74c27f40 <line:814:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x559b74c27f60 <line:815:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c27f80 <line:816:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c28010 <line:818:3>
|   | `-TextComment 0x559b74c27fe0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c28030 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c28090 <col:11, col:35>
|       `-TextComment 0x559b74c28060 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b023c8 <line:834:1, line:838:1> line:834:21 k_cyc_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b02340 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b02798 <line:835:1, line:838:1>
| | `-ReturnStmt 0x559b74b02758 <line:837:2, col:64>
| |   `-ImplicitCastExpr 0x559b74b02740 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b02620 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b02608 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b02470 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b02698 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b02680 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b02498 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b02340 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b026b0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b02500 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b024e8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b024c0 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b026c8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b02528 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x559b74b026e0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b02588 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b02568 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b02548 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b026f8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b025a8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b02710 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b025c8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x559b74b02728 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b025e8 <col:16> 'int' 0
| `-FullComment 0x559b74c283c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:826:4, line:832:35>
|   |-ParagraphComment 0x559b74c28180 <line:826:4>
|   | `-TextComment 0x559b74c28150 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c281a0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c28200 <col:11, col:50>
|   |   `-TextComment 0x559b74c281d0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x559b74c282a0 <line:828:3, line:830:45>
|   | |-TextComment 0x559b74c28220 <line:828:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x559b74c28240 <line:829:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c28260 <line:830:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c282f0 <line:832:3>
|   | `-TextComment 0x559b74c282c0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c28310 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c28370 <col:11, col:35>
|       `-TextComment 0x559b74c28340 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b02848 <line:848:1, line:852:1> line:848:21 k_cyc_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b027c0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b02c08 <line:849:1, line:852:1>
| | `-ReturnStmt 0x559b74b02bc0 <line:851:2, col:65>
| |   `-CallExpr 0x559b74b02ab8 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b02aa0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b028f0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b02b18 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b02930 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b027c0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b02b30 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b02998 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b02980 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b02958 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b02b48 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b029c0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x559b74b02b60 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b02a20 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b02a00 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b029e0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b02b78 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b02a40 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b02b90 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b02a60 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x559b74b02ba8 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b02a80 <col:16> 'int' 0
| `-FullComment 0x559b74c286a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:840:4, line:846:35>
|   |-ParagraphComment 0x559b74c28460 <line:840:4>
|   | `-TextComment 0x559b74c28430 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c28480 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c284e0 <col:11, col:50>
|   |   `-TextComment 0x559b74c284b0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x559b74c28580 <line:842:3, line:844:45>
|   | |-TextComment 0x559b74c28500 <line:842:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x559b74c28520 <line:843:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c28540 <line:844:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c285d0 <line:846:3>
|   | `-TextComment 0x559b74c285a0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c285f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c28650 <col:11, col:35>
|       `-TextComment 0x559b74c28620 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b02cb8 <line:862:1, line:866:1> line:862:21 k_cyc_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b02c30 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b03088 <line:863:1, line:866:1>
| | `-ReturnStmt 0x559b74b03048 <line:865:2, col:65>
| |   `-ImplicitCastExpr 0x559b74b03030 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b02f10 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b02ef8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b02d60 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b02f88 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b02f70 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b02d88 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b02c30 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b02fa0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b02df0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b02dd8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b02db0 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b02fb8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b02e18 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x559b74b02fd0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b02e78 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b02e58 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b02e38 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b02fe8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b02e98 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b03000 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b02eb8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559b74b03018 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b02ed8 <col:16> 'int' 0
| `-FullComment 0x559b74c28990 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:854:4, line:860:35>
|   |-ParagraphComment 0x559b74c28740 <line:854:4>
|   | `-TextComment 0x559b74c28710 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c28760 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c287c0 <col:11, col:49>
|   |   `-TextComment 0x559b74c28790 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x559b74c28860 <line:856:3, line:858:44>
|   | |-TextComment 0x559b74c287e0 <line:856:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x559b74c28800 <line:857:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c28820 <line:858:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c288c0 <line:860:3>
|   | `-TextComment 0x559b74c28880 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c288e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c28940 <col:11, col:35>
|       `-TextComment 0x559b74c28910 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b03138 <line:876:1, line:880:1> line:876:21 k_cyc_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b030b0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b034d8 <line:877:1, line:880:1>
| | `-ReturnStmt 0x559b74b03498 <line:879:2, col:66>
| |   `-CallExpr 0x559b74b03390 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b03378 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b031e0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b033f0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b03208 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b030b0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b03408 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b03270 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b03258 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b03230 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b03420 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b03298 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x559b74b03438 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b032f8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b032d8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b032b8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b03450 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b03318 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b03468 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b03338 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559b74b03480 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b03358 <col:16> 'int' 0
| `-FullComment 0x559b74c28c70 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:868:4, line:874:35>
|   |-ParagraphComment 0x559b74c28a30 <line:868:4>
|   | `-TextComment 0x559b74c28a00 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c28a50 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c28ab0 <col:11, col:49>
|   |   `-TextComment 0x559b74c28a80 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x559b74c28b50 <line:870:3, line:872:44>
|   | |-TextComment 0x559b74c28ad0 <line:870:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x559b74c28af0 <line:871:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c28b10 <line:872:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c28ba0 <line:874:3>
|   | `-TextComment 0x559b74c28b70 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c28bc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c28c20 <col:11, col:35>
|       `-TextComment 0x559b74c28bf0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b03588 <line:890:1, line:894:1> line:890:21 k_cyc_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b03500 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b57038 <line:891:1, line:894:1>
| | `-ReturnStmt 0x559b74b03918 <line:893:2, col:64>
| |   `-ImplicitCastExpr 0x559b74b03900 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b037e0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b037c8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b03630 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b03858 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b03840 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b03658 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b03500 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b03870 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b036c0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b036a8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b03680 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b03888 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b036e8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x559b74b038a0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b03748 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b03728 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b03708 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b038b8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b03768 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b038d0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b03788 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559b74b038e8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b037a8 <col:16> 'int' 1
| `-FullComment 0x559b74c28f50 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:882:4, line:888:35>
|   |-ParagraphComment 0x559b74c28d10 <line:882:4>
|   | `-TextComment 0x559b74c28ce0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c28d30 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c28d90 <col:11, col:49>
|   |   `-TextComment 0x559b74c28d60 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x559b74c28e30 <line:884:3, line:886:37>
|   | |-TextComment 0x559b74c28db0 <line:884:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x559b74c28dd0 <line:885:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c28df0 <line:886:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c28e80 <line:888:3>
|   | `-TextComment 0x559b74c28e50 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c28ea0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c28f00 <col:11, col:35>
|       `-TextComment 0x559b74c28ed0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b570e8 <line:904:1, line:908:1> line:904:21 k_cyc_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b57060 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b57488 <line:905:1, line:908:1>
| | `-ReturnStmt 0x559b74b57448 <line:907:2, col:65>
| |   `-CallExpr 0x559b74b57340 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b57328 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b57190 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b573a0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b571b8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b57060 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b573b8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b57220 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b57208 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b571e0 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b573d0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b57248 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x559b74b573e8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b572a8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b57288 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b57268 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b57400 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b572c8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b57418 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b572e8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559b74b57430 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b57308 <col:16> 'int' 1
| `-FullComment 0x559b74c29230 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:896:4, line:902:35>
|   |-ParagraphComment 0x559b74c28ff0 <line:896:4>
|   | `-TextComment 0x559b74c28fc0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c29010 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c29070 <col:11, col:49>
|   |   `-TextComment 0x559b74c29040 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x559b74c29110 <line:898:3, line:900:37>
|   | |-TextComment 0x559b74c29090 <line:898:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x559b74c290b0 <line:899:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c290d0 <line:900:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c29160 <line:902:3>
|   | `-TextComment 0x559b74c29130 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c29180 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c291e0 <col:11, col:35>
|       `-TextComment 0x559b74c291b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b57538 <line:918:1, line:922:1> line:918:21 k_cyc_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b574b0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b57908 <line:919:1, line:922:1>
| | `-ReturnStmt 0x559b74b578c8 <line:921:2, col:64>
| |   `-ImplicitCastExpr 0x559b74b578b0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b57790 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74b57778 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b575e0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559b74b57808 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559b74b577f0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559b74b57608 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b574b0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559b74b57820 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559b74b57670 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559b74b57658 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559b74b57630 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559b74b57838 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559b74b57698 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x559b74b57850 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559b74b576f8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559b74b576d8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559b74b576b8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559b74b57868 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b57718 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559b74b57880 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559b74b57738 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x559b74b57898 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559b74b57758 <col:16> 'int' 0
| `-FullComment 0x559b74c29510 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:910:4, line:916:35>
|   |-ParagraphComment 0x559b74c292d0 <line:910:4>
|   | `-TextComment 0x559b74c292a0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c292f0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c29350 <col:11, col:49>
|   |   `-TextComment 0x559b74c29320 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x559b74c293f0 <line:912:3, line:914:45>
|   | |-TextComment 0x559b74c29370 <line:912:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x559b74c29390 <line:913:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c293b0 <line:914:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c29440 <line:916:3>
|   | `-TextComment 0x559b74c29410 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c29460 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c294c0 <col:11, col:35>
|       `-TextComment 0x559b74c29490 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b579b8 <line:932:1, line:936:1> line:932:21 k_cyc_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b57930 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b57d58 <line:933:1, line:936:1>
| | `-ReturnStmt 0x559b74b57d18 <line:935:2, col:65>
| |   `-CallExpr 0x559b74b57c10 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b57bf8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b57a60 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x559b74b3b810 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559b74b57c70 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b57a88 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559b74b57930 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559b74b57c88 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559b74b57af0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559b74b57ad8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559b74b57ab0 <col:18> 'int (void)' Function 0x559b74b3b308 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559b74b57ca0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559b74b57b18 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x559b74b57cb8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559b74b57b78 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559b74b57b58 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559b74b57b38 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b57cd0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b57b98 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559b74b57ce8 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559b74b57bb8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x559b74b57d00 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559b74b57bd8 <col:16> 'int' 0
| `-FullComment 0x559b74c297f0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:924:4, line:930:35>
|   |-ParagraphComment 0x559b74c295b0 <line:924:4>
|   | `-TextComment 0x559b74c29580 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c295d0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c29630 <col:11, col:49>
|   |   `-TextComment 0x559b74c29600 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x559b74c296d0 <line:926:3, line:928:45>
|   | |-TextComment 0x559b74c29650 <line:926:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x559b74c29670 <line:927:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c29690 <line:928:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c29720 <line:930:3>
|   | `-TextComment 0x559b74c296f0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c29740 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c297a0 <col:11, col:35>
|       `-TextComment 0x559b74c29770 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b57e08 <line:946:1, line:950:1> line:946:21 k_cyc_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b57d80 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b58068 <line:947:1, line:950:1>
| `-FullComment 0x559b74c29ad0 <line:938:4, line:944:35>
|   |-ParagraphComment 0x559b74c29890 <line:938:4>
|   | `-TextComment 0x559b74c29860 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c298b0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c29910 <col:11, col:43>
|   |   `-TextComment 0x559b74c298e0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x559b74c299b0 <line:940:3, line:942:44>
|   | |-TextComment 0x559b74c29930 <line:940:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x559b74c29950 <line:941:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c29970 <line:942:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c29a00 <line:944:3>
|   | `-TextComment 0x559b74c299d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c29a20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c29a80 <col:11, col:35>
|       `-TextComment 0x559b74c29a50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b58110 <line:960:1, line:964:1> line:960:21 k_cyc_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b58088 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b58358 <line:961:1, line:964:1>
| `-FullComment 0x559b74c29db0 <line:952:4, line:958:35>
|   |-ParagraphComment 0x559b74c29b70 <line:952:4>
|   | `-TextComment 0x559b74c29b40 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c29b90 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c29bf0 <col:11, col:43>
|   |   `-TextComment 0x559b74c29bc0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x559b74c29c90 <line:954:3, line:956:44>
|   | |-TextComment 0x559b74c29c10 <line:954:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x559b74c29c30 <line:955:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c29c50 <line:956:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c29ce0 <line:958:3>
|   | `-TextComment 0x559b74c29cb0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c29d00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c29d60 <col:11, col:35>
|       `-TextComment 0x559b74c29d30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b58400 <line:974:1, line:978:1> line:974:21 k_cyc_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b58378 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b58648 <line:975:1, line:978:1>
| `-FullComment 0x559b74c2a090 <line:966:4, line:972:35>
|   |-ParagraphComment 0x559b74c29e50 <line:966:4>
|   | `-TextComment 0x559b74c29e20 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c29e70 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c29ed0 <col:11, col:43>
|   |   `-TextComment 0x559b74c29ea0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x559b74c29f70 <line:968:3, line:970:37>
|   | |-TextComment 0x559b74c29ef0 <line:968:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x559b74c29f10 <line:969:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c29f30 <line:970:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c29fc0 <line:972:3>
|   | `-TextComment 0x559b74c29f90 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c29fe0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2a040 <col:11, col:35>
|       `-TextComment 0x559b74c2a010 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b586f0 <line:988:1, line:992:1> line:988:21 k_cyc_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b58668 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b58938 <line:989:1, line:992:1>
| `-FullComment 0x559b74c2a370 <line:980:4, line:986:35>
|   |-ParagraphComment 0x559b74c2a130 <line:980:4>
|   | `-TextComment 0x559b74c2a100 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2a150 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c2a1b0 <col:11, col:43>
|   |   `-TextComment 0x559b74c2a180 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x559b74c2a250 <line:982:3, line:984:37>
|   | |-TextComment 0x559b74c2a1d0 <line:982:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x559b74c2a1f0 <line:983:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c2a210 <line:984:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c2a2a0 <line:986:3>
|   | `-TextComment 0x559b74c2a270 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2a2c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2a320 <col:11, col:35>
|       `-TextComment 0x559b74c2a2f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b589e0 <line:1002:1, line:1006:1> line:1002:21 k_cyc_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b58958 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b58c28 <line:1003:1, line:1006:1>
| `-FullComment 0x559b74c2a650 <line:994:4, line:1000:35>
|   |-ParagraphComment 0x559b74c2a410 <line:994:4>
|   | `-TextComment 0x559b74c2a3e0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2a430 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c2a490 <col:11, col:43>
|   |   `-TextComment 0x559b74c2a460 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x559b74c2a530 <line:996:3, line:998:45>
|   | |-TextComment 0x559b74c2a4b0 <line:996:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x559b74c2a4d0 <line:997:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c2a4f0 <line:998:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c2a580 <line:1000:3>
|   | `-TextComment 0x559b74c2a550 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2a5a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2a600 <col:11, col:35>
|       `-TextComment 0x559b74c2a5d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b58cd0 <line:1016:1, line:1020:1> line:1016:21 k_cyc_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b58c48 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b58f18 <line:1017:1, line:1020:1>
| `-FullComment 0x559b74c2a940 <line:1008:4, line:1014:35>
|   |-ParagraphComment 0x559b74c2a6f0 <line:1008:4>
|   | `-TextComment 0x559b74c2a6c0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2a710 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c2a770 <col:11, col:43>
|   |   `-TextComment 0x559b74c2a740 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x559b74c2a810 <line:1010:3, line:1012:45>
|   | |-TextComment 0x559b74c2a790 <line:1010:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x559b74c2a7b0 <line:1011:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c2a7d0 <line:1012:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c2a860 <line:1014:3>
|   | `-TextComment 0x559b74c2a830 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2a880 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2a8f0 <col:11, col:35>
|       `-TextComment 0x559b74c2a8c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b59030 <line:1030:1, line:1034:1> line:1030:21 k_ticks_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b58f38 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b591f8 <line:1031:1, line:1034:1>
| `-FullComment 0x559b74c2ac20 <line:1022:4, line:1028:35>
|   |-ParagraphComment 0x559b74c2a9e0 <line:1022:4>
|   | `-TextComment 0x559b74c2a9b0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2aa00 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c2aa60 <col:11, col:40>
|   |   `-TextComment 0x559b74c2aa30 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x559b74c2ab00 <line:1024:3, line:1026:44>
|   | |-TextComment 0x559b74c2aa80 <line:1024:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x559b74c2aaa0 <line:1025:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c2aac0 <line:1026:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c2ab50 <line:1028:3>
|   | `-TextComment 0x559b74c2ab20 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2ab70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2abd0 <col:11, col:35>
|       `-TextComment 0x559b74c2aba0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b592a0 <line:1044:1, line:1048:1> line:1044:21 used k_ticks_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b59218 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b59468 <line:1045:1, line:1048:1>
| `-FullComment 0x559b74c2af00 <line:1036:4, line:1042:35>
|   |-ParagraphComment 0x559b74c2acc0 <line:1036:4>
|   | `-TextComment 0x559b74c2ac90 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2ace0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c2ad40 <col:11, col:40>
|   |   `-TextComment 0x559b74c2ad10 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x559b74c2ade0 <line:1038:3, line:1040:44>
|   | |-TextComment 0x559b74c2ad60 <line:1038:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x559b74c2ad80 <line:1039:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c2ada0 <line:1040:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c2ae30 <line:1042:3>
|   | `-TextComment 0x559b74c2ae00 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2ae50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2aeb0 <col:11, col:35>
|       `-TextComment 0x559b74c2ae80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b59510 <line:1058:1, line:1062:1> line:1058:21 k_ticks_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b59488 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b596d8 <line:1059:1, line:1062:1>
| `-FullComment 0x559b74c2b1e0 <line:1050:4, line:1056:35>
|   |-ParagraphComment 0x559b74c2afa0 <line:1050:4>
|   | `-TextComment 0x559b74c2af70 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2afc0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c2b020 <col:11, col:40>
|   |   `-TextComment 0x559b74c2aff0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x559b74c2b0c0 <line:1052:3, line:1054:37>
|   | |-TextComment 0x559b74c2b040 <line:1052:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x559b74c2b060 <line:1053:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c2b080 <line:1054:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c2b110 <line:1056:3>
|   | `-TextComment 0x559b74c2b0e0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2b130 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2b190 <col:11, col:35>
|       `-TextComment 0x559b74c2b160 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b59780 <line:1072:1, line:1076:1> line:1072:21 k_ticks_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b596f8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b59948 <line:1073:1, line:1076:1>
| `-FullComment 0x559b74c2b4c0 <line:1064:4, line:1070:35>
|   |-ParagraphComment 0x559b74c2b280 <line:1064:4>
|   | `-TextComment 0x559b74c2b250 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2b2a0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c2b300 <col:11, col:40>
|   |   `-TextComment 0x559b74c2b2d0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x559b74c2b3a0 <line:1066:3, line:1068:37>
|   | |-TextComment 0x559b74c2b320 <line:1066:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x559b74c2b340 <line:1067:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c2b360 <line:1068:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c2b3f0 <line:1070:3>
|   | `-TextComment 0x559b74c2b3c0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2b410 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2b470 <col:11, col:35>
|       `-TextComment 0x559b74c2b440 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b599f0 <line:1086:1, line:1090:1> line:1086:21 k_ticks_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b59968 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b59bb8 <line:1087:1, line:1090:1>
| `-FullComment 0x559b74c2b7a0 <line:1078:4, line:1084:35>
|   |-ParagraphComment 0x559b74c2b560 <line:1078:4>
|   | `-TextComment 0x559b74c2b530 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2b580 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c2b5e0 <col:11, col:40>
|   |   `-TextComment 0x559b74c2b5b0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x559b74c2b680 <line:1080:3, line:1082:45>
|   | |-TextComment 0x559b74c2b600 <line:1080:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x559b74c2b620 <line:1081:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c2b640 <line:1082:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c2b6d0 <line:1084:3>
|   | `-TextComment 0x559b74c2b6a0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2b6f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2b750 <col:11, col:35>
|       `-TextComment 0x559b74c2b720 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b59c60 <line:1100:1, line:1104:1> line:1100:21 k_ticks_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b59bd8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b59e28 <line:1101:1, line:1104:1>
| `-FullComment 0x559b74c2ba80 <line:1092:4, line:1098:35>
|   |-ParagraphComment 0x559b74c2b840 <line:1092:4>
|   | `-TextComment 0x559b74c2b810 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2b860 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c2b8c0 <col:11, col:40>
|   |   `-TextComment 0x559b74c2b890 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x559b74c2b960 <line:1094:3, line:1096:45>
|   | |-TextComment 0x559b74c2b8e0 <line:1094:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x559b74c2b900 <line:1095:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c2b920 <line:1096:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c2b9b0 <line:1098:3>
|   | `-TextComment 0x559b74c2b980 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2b9d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2ba30 <col:11, col:35>
|       `-TextComment 0x559b74c2ba00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b59ed0 <line:1114:1, line:1118:1> line:1114:21 k_ticks_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b59e48 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b5b0b8 <line:1115:1, line:1118:1>
| `-FullComment 0x559b74c2bd60 <line:1106:4, line:1112:35>
|   |-ParagraphComment 0x559b74c2bb20 <line:1106:4>
|   | `-TextComment 0x559b74c2baf0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2bb40 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c2bba0 <col:11, col:40>
|   |   `-TextComment 0x559b74c2bb70 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x559b74c2bc40 <line:1108:3, line:1110:44>
|   | |-TextComment 0x559b74c2bbc0 <line:1108:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x559b74c2bbe0 <line:1109:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c2bc00 <line:1110:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c2bc90 <line:1112:3>
|   | `-TextComment 0x559b74c2bc60 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2bcb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2bd10 <col:11, col:35>
|       `-TextComment 0x559b74c2bce0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5b160 <line:1128:1, line:1132:1> line:1128:21 k_ticks_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b5b0d8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b5b328 <line:1129:1, line:1132:1>
| `-FullComment 0x559b74c2c040 <line:1120:4, line:1126:35>
|   |-ParagraphComment 0x559b74c2be00 <line:1120:4>
|   | `-TextComment 0x559b74c2bdd0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2be20 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c2be80 <col:11, col:40>
|   |   `-TextComment 0x559b74c2be50 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x559b74c2bf20 <line:1122:3, line:1124:44>
|   | |-TextComment 0x559b74c2bea0 <line:1122:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x559b74c2bec0 <line:1123:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c2bee0 <line:1124:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c2bf70 <line:1126:3>
|   | `-TextComment 0x559b74c2bf40 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2bf90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2bff0 <col:11, col:35>
|       `-TextComment 0x559b74c2bfc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5b3d0 <line:1142:1, line:1146:1> line:1142:21 k_ticks_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b5b348 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b5b598 <line:1143:1, line:1146:1>
| `-FullComment 0x559b74c2c320 <line:1134:4, line:1140:35>
|   |-ParagraphComment 0x559b74c2c0e0 <line:1134:4>
|   | `-TextComment 0x559b74c2c0b0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2c100 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c2c160 <col:11, col:40>
|   |   `-TextComment 0x559b74c2c130 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x559b74c2c200 <line:1136:3, line:1138:37>
|   | |-TextComment 0x559b74c2c180 <line:1136:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x559b74c2c1a0 <line:1137:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c2c1c0 <line:1138:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c2c250 <line:1140:3>
|   | `-TextComment 0x559b74c2c220 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2c270 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2c2d0 <col:11, col:35>
|       `-TextComment 0x559b74c2c2a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5b640 <line:1156:1, line:1160:1> line:1156:21 k_ticks_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b5b5b8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b5b808 <line:1157:1, line:1160:1>
| `-FullComment 0x559b74c2c600 <line:1148:4, line:1154:35>
|   |-ParagraphComment 0x559b74c2c3c0 <line:1148:4>
|   | `-TextComment 0x559b74c2c390 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2c3e0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c2c440 <col:11, col:40>
|   |   `-TextComment 0x559b74c2c410 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x559b74c2c4e0 <line:1150:3, line:1152:37>
|   | |-TextComment 0x559b74c2c460 <line:1150:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x559b74c2c480 <line:1151:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c2c4a0 <line:1152:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c2c530 <line:1154:3>
|   | `-TextComment 0x559b74c2c500 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2c550 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2c5b0 <col:11, col:35>
|       `-TextComment 0x559b74c2c580 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5b8b0 <line:1170:1, line:1174:1> line:1170:21 k_ticks_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b5b828 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b5ba78 <line:1171:1, line:1174:1>
| `-FullComment 0x559b74c2c900 <line:1162:4, line:1168:35>
|   |-ParagraphComment 0x559b74c2c6a0 <line:1162:4>
|   | `-TextComment 0x559b74c2c670 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2c6c0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c2c720 <col:11, col:40>
|   |   `-TextComment 0x559b74c2c6f0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x559b74c2c7c0 <line:1164:3, line:1166:45>
|   | |-TextComment 0x559b74c2c740 <line:1164:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x559b74c2c760 <line:1165:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c2c780 <line:1166:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c2c810 <line:1168:3>
|   | `-TextComment 0x559b74c2c7e0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2c830 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2c890 <col:11, col:35>
|       `-TextComment 0x559b74c2c860 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5bb20 <line:1184:1, line:1188:1> line:1184:21 k_ticks_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b5ba98 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b5bce8 <line:1185:1, line:1188:1>
| `-FullComment 0x559b74c2cbe0 <line:1176:4, line:1182:35>
|   |-ParagraphComment 0x559b74c2c9a0 <line:1176:4>
|   | `-TextComment 0x559b74c2c970 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2c9c0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c2ca20 <col:11, col:40>
|   |   `-TextComment 0x559b74c2c9f0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x559b74c2cac0 <line:1178:3, line:1180:45>
|   | |-TextComment 0x559b74c2ca40 <line:1178:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x559b74c2ca60 <line:1179:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c2ca80 <line:1180:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c2cb10 <line:1182:3>
|   | `-TextComment 0x559b74c2cae0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2cb30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2cb90 <col:11, col:35>
|       `-TextComment 0x559b74c2cb60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5bd90 <line:1198:1, line:1202:1> line:1198:21 k_ticks_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b5bd08 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b5bf58 <line:1199:1, line:1202:1>
| `-FullComment 0x559b74c2cec0 <line:1190:4, line:1196:35>
|   |-ParagraphComment 0x559b74c2cc80 <line:1190:4>
|   | `-TextComment 0x559b74c2cc50 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2cca0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c2cd00 <col:11, col:39>
|   |   `-TextComment 0x559b74c2ccd0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x559b74c2cda0 <line:1192:3, line:1194:44>
|   | |-TextComment 0x559b74c2cd20 <line:1192:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x559b74c2cd40 <line:1193:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c2cd60 <line:1194:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c2cdf0 <line:1196:3>
|   | `-TextComment 0x559b74c2cdc0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2ce10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2ce70 <col:11, col:35>
|       `-TextComment 0x559b74c2ce40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5c060 <line:1212:1, line:1216:1> line:1212:21 k_ticks_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b5bf78 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b5c228 <line:1213:1, line:1216:1>
| `-FullComment 0x559b74c2d1a0 <line:1204:4, line:1210:35>
|   |-ParagraphComment 0x559b74c2cf60 <line:1204:4>
|   | `-TextComment 0x559b74c2cf30 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2cf80 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c2cfe0 <col:11, col:39>
|   |   `-TextComment 0x559b74c2cfb0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x559b74c2d080 <line:1206:3, line:1208:44>
|   | |-TextComment 0x559b74c2d000 <line:1206:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x559b74c2d020 <line:1207:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c2d040 <line:1208:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c2d0d0 <line:1210:3>
|   | `-TextComment 0x559b74c2d0a0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2d0f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2d150 <col:11, col:35>
|       `-TextComment 0x559b74c2d120 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5c2d0 <line:1226:1, line:1230:1> line:1226:21 k_ticks_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b5c248 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b5c498 <line:1227:1, line:1230:1>
| `-FullComment 0x559b74c2d480 <line:1218:4, line:1224:35>
|   |-ParagraphComment 0x559b74c2d240 <line:1218:4>
|   | `-TextComment 0x559b74c2d210 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2d260 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c2d2c0 <col:11, col:39>
|   |   `-TextComment 0x559b74c2d290 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x559b74c2d360 <line:1220:3, line:1222:37>
|   | |-TextComment 0x559b74c2d2e0 <line:1220:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x559b74c2d300 <line:1221:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c2d320 <line:1222:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c2d3b0 <line:1224:3>
|   | `-TextComment 0x559b74c2d380 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2d3d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2d430 <col:11, col:35>
|       `-TextComment 0x559b74c2d400 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5c540 <line:1240:1, line:1244:1> line:1240:21 k_ticks_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b5c4b8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b5c708 <line:1241:1, line:1244:1>
| `-FullComment 0x559b74c2d760 <line:1232:4, line:1238:35>
|   |-ParagraphComment 0x559b74c2d520 <line:1232:4>
|   | `-TextComment 0x559b74c2d4f0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2d540 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c2d5a0 <col:11, col:39>
|   |   `-TextComment 0x559b74c2d570 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x559b74c2d640 <line:1234:3, line:1236:37>
|   | |-TextComment 0x559b74c2d5c0 <line:1234:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x559b74c2d5e0 <line:1235:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c2d600 <line:1236:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c2d690 <line:1238:3>
|   | `-TextComment 0x559b74c2d660 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2d6b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2d710 <col:11, col:35>
|       `-TextComment 0x559b74c2d6e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5c7b0 <line:1254:1, line:1258:1> line:1254:21 k_ticks_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b5c728 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b5c978 <line:1255:1, line:1258:1>
| `-FullComment 0x559b74c2da40 <line:1246:4, line:1252:35>
|   |-ParagraphComment 0x559b74c2d800 <line:1246:4>
|   | `-TextComment 0x559b74c2d7d0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2d820 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c2d880 <col:11, col:39>
|   |   `-TextComment 0x559b74c2d850 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x559b74c2d920 <line:1248:3, line:1250:45>
|   | |-TextComment 0x559b74c2d8a0 <line:1248:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x559b74c2d8c0 <line:1249:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c2d8e0 <line:1250:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c2d970 <line:1252:3>
|   | `-TextComment 0x559b74c2d940 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2d990 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2d9f0 <col:11, col:35>
|       `-TextComment 0x559b74c2d9c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5ca20 <line:1268:1, line:1272:1> line:1268:21 k_ticks_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b5c998 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b5cbe8 <line:1269:1, line:1272:1>
| `-FullComment 0x559b74c2dd20 <line:1260:4, line:1266:35>
|   |-ParagraphComment 0x559b74c2dae0 <line:1260:4>
|   | `-TextComment 0x559b74c2dab0 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2db00 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c2db60 <col:11, col:39>
|   |   `-TextComment 0x559b74c2db30 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x559b74c2dc00 <line:1262:3, line:1264:45>
|   | |-TextComment 0x559b74c2db80 <line:1262:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x559b74c2dba0 <line:1263:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c2dbc0 <line:1264:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c2dc50 <line:1266:3>
|   | `-TextComment 0x559b74c2dc20 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2dc70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2dcd0 <col:11, col:35>
|       `-TextComment 0x559b74c2dca0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5cc90 <line:1282:1, line:1286:1> line:1282:21 k_ticks_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b5cc08 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b5ced8 <line:1283:1, line:1286:1>
| `-FullComment 0x559b74c2e000 <line:1274:4, line:1280:35>
|   |-ParagraphComment 0x559b74c2ddc0 <line:1274:4>
|   | `-TextComment 0x559b74c2dd90 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2dde0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c2de40 <col:11, col:43>
|   |   `-TextComment 0x559b74c2de10 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x559b74c2dee0 <line:1276:3, line:1278:44>
|   | |-TextComment 0x559b74c2de60 <line:1276:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x559b74c2de80 <line:1277:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c2dea0 <line:1278:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c2df30 <line:1280:3>
|   | `-TextComment 0x559b74c2df00 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2df50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2dfb0 <col:11, col:35>
|       `-TextComment 0x559b74c2df80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5cf80 <line:1296:1, line:1300:1> line:1296:21 k_ticks_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b5cef8 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b5d1e8 <line:1297:1, line:1300:1>
| `-FullComment 0x559b74c2e2e0 <line:1288:4, line:1294:35>
|   |-ParagraphComment 0x559b74c2e0a0 <line:1288:4>
|   | `-TextComment 0x559b74c2e070 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2e0c0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c2e120 <col:11, col:43>
|   |   `-TextComment 0x559b74c2e0f0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x559b74c2e1c0 <line:1290:3, line:1292:44>
|   | |-TextComment 0x559b74c2e140 <line:1290:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x559b74c2e160 <line:1291:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c2e180 <line:1292:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559b74c2e210 <line:1294:3>
|   | `-TextComment 0x559b74c2e1e0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2e230 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2e290 <col:11, col:35>
|       `-TextComment 0x559b74c2e260 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5d290 <line:1310:1, line:1314:1> line:1310:21 k_ticks_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b5d208 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b5d4d8 <line:1311:1, line:1314:1>
| `-FullComment 0x559b74c2e5c0 <line:1302:4, line:1308:35>
|   |-ParagraphComment 0x559b74c2e380 <line:1302:4>
|   | `-TextComment 0x559b74c2e350 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2e3a0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c2e400 <col:11, col:43>
|   |   `-TextComment 0x559b74c2e3d0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x559b74c2e4a0 <line:1304:3, line:1306:37>
|   | |-TextComment 0x559b74c2e420 <line:1304:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x559b74c2e440 <line:1305:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c2e460 <line:1306:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c2e4f0 <line:1308:3>
|   | `-TextComment 0x559b74c2e4c0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2e510 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2e570 <col:11, col:35>
|       `-TextComment 0x559b74c2e540 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5d580 <line:1324:1, line:1328:1> line:1324:21 k_ticks_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b5d4f8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b5d7c8 <line:1325:1, line:1328:1>
| `-FullComment 0x559b74c2e8a0 <line:1316:4, line:1322:35>
|   |-ParagraphComment 0x559b74c2e660 <line:1316:4>
|   | `-TextComment 0x559b74c2e630 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2e680 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c2e6e0 <col:11, col:43>
|   |   `-TextComment 0x559b74c2e6b0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x559b74c2e780 <line:1318:3, line:1320:37>
|   | |-TextComment 0x559b74c2e700 <line:1318:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x559b74c2e720 <line:1319:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c2e740 <line:1320:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559b74c2e7d0 <line:1322:3>
|   | `-TextComment 0x559b74c2e7a0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2e7f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2e850 <col:11, col:35>
|       `-TextComment 0x559b74c2e820 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5d870 <line:1338:1, line:1342:1> line:1338:21 k_ticks_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559b74b5d7e8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b5dab8 <line:1339:1, line:1342:1>
| `-FullComment 0x559b74c2eb90 <line:1330:4, line:1336:35>
|   |-ParagraphComment 0x559b74c2e950 <line:1330:4>
|   | `-TextComment 0x559b74c2e920 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2e970 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c2e9d0 <col:11, col:43>
|   |   `-TextComment 0x559b74c2e9a0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x559b74c2ea70 <line:1332:3, line:1334:45>
|   | |-TextComment 0x559b74c2e9f0 <line:1332:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x559b74c2ea10 <line:1333:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559b74c2ea30 <line:1334:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c2eac0 <line:1336:3>
|   | `-TextComment 0x559b74c2ea90 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2eae0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2eb40 <col:11, col:35>
|       `-TextComment 0x559b74c2eb10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5db60 <line:1352:1, line:1356:1> line:1352:21 k_ticks_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559b74b5dad8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559b74b5de08 <line:1353:1, line:1356:1>
| `-FullComment 0x559b74c2ee70 <line:1344:4, line:1350:35>
|   |-ParagraphComment 0x559b74c2ec30 <line:1344:4>
|   | `-TextComment 0x559b74c2ec00 <col:4> Text=" "
|   |-BlockCommandComment 0x559b74c2ec50 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c2ecb0 <col:11, col:43>
|   |   `-TextComment 0x559b74c2ec80 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x559b74c2ed50 <line:1346:3, line:1348:45>
|   | |-TextComment 0x559b74c2ecd0 <line:1346:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x559b74c2ecf0 <line:1347:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559b74c2ed10 <line:1348:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559b74c2eda0 <line:1350:3>
|   | `-TextComment 0x559b74c2ed70 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c2edc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559b74c2ee20 <col:11, col:35>
|       `-TextComment 0x559b74c2edf0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559b74b5dea8 </vagrant/ext/zephyros/zephyr/include/sys_clock.h:117:1, col:25> col:7 z_tick_get_32 'u32_t (void)'
| `-FullComment 0x559b74c2f100 <line:112:3, line:116:1>
|   |-ParagraphComment 0x559b74c2ef10 <line:112:3>
|   | `-TextComment 0x559b74c2eee0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c2ef30 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x559b74c2ef90 <col:10, col:64>
|   |   `-TextComment 0x559b74c2ef60 <col:10, col:64> Text=" Return the lower part of the current system tick count"
|   |-ParagraphComment 0x559b74c2efe0 <line:114:3>
|   | `-TextComment 0x559b74c2efb0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c2f000 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x559b74c2f060 <col:11, col:40>
|   |   `-TextComment 0x559b74c2f030 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x559b74c2f0b0 <line:116:1>
|     `-TextComment 0x559b74c2f080 <col:1> Text=" "
|-FunctionDecl 0x559b74b600a0 <line:126:1, col:22> col:7 z_tick_get 's64_t (void)'
| `-FullComment 0x559b74c2f390 <line:121:3, line:125:1>
|   |-ParagraphComment 0x559b74c2f1a0 <line:121:3>
|   | `-TextComment 0x559b74c2f170 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c2f1c0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x559b74c2f220 <col:10, col:46>
|   |   `-TextComment 0x559b74c2f1f0 <col:10, col:46> Text=" Return the current system tick count"
|   |-ParagraphComment 0x559b74c2f270 <line:123:3>
|   | `-TextComment 0x559b74c2f240 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c2f290 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x559b74c2f2f0 <col:11, col:40>
|   |   `-TextComment 0x559b74c2f2c0 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x559b74c2f340 <line:125:1>
|     `-TextComment 0x559b74c2f310 <col:1> Text=" "
|-RecordDecl 0x559b74b60140 <line:135:1, col:8> col:8 struct _timeout
|-TypedefDecl 0x559b74b60440 <line:136:1, col:51> col:16 referenced _timeout_func_t 'void (*)(struct _timeout *)'
| `-PointerType 0x559b74b603e0 'void (*)(struct _timeout *)'
|   `-ParenType 0x559b74b60380 'void (struct _timeout *)' sugar
|     `-FunctionProtoType 0x559b74b60340 'void (struct _timeout *)' cdecl
|       |-BuiltinType 0x559b749d8970 'void'
|       `-PointerType 0x559b74b60250 'struct _timeout *'
|         `-ElaboratedType 0x559b74b601f0 'struct _timeout' sugar
|           `-RecordType 0x559b74b601d0 'struct _timeout'
|             `-Record 0x559b74b60498 '_timeout'
|-RecordDecl 0x559b74b60498 prev 0x559b74b60140 <line:138:1, line:142:1> line:138:8 struct _timeout definition
| |-FieldDecl 0x559b74b60530 <line:139:2, col:14> col:14 node 'sys_dnode_t':'struct _dnode'
| |-FieldDecl 0x559b74b605b0 <line:140:2, col:8> col:8 dticks 's32_t':'int'
| `-FieldDecl 0x559b74b60630 <line:141:2, col:18> col:18 fn '_timeout_func_t':'void (*)(struct _timeout *)'
|-RecordDecl 0x559b74b60678 </vagrant/ext/zephyros/zephyr/include/spinlock.h:25:1, line:27:1> line:25:8 struct k_spinlock_key definition
| `-FieldDecl 0x559b74b60738 <line:26:2, col:6> col:6 referenced key 'int'
|-TypedefDecl 0x559b74b607d0 <line:29:1, col:31> col:31 referenced k_spinlock_key_t 'struct k_spinlock_key':'struct k_spinlock_key'
| `-ElaboratedType 0x559b74b60780 'struct k_spinlock_key' sugar
|   `-RecordType 0x559b74b60700 'struct k_spinlock_key'
|     `-Record 0x559b74b60678 'k_spinlock_key'
|-RecordDecl 0x559b74b60828 <line:31:1, line:60:1> line:31:8 struct k_spinlock definition
|-FunctionDecl 0x559b74b60aa0 <line:62:1, line:86:1> line:62:39 k_spin_lock 'k_spinlock_key_t (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x559b74b609a0 <col:51, col:70> col:70 used l 'struct k_spinlock *'
| |-CompoundStmt 0x559b74b60eb8 <line:63:1, line:86:1>
| | |-CStyleCastExpr 0x559b74b60c30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x559b74b60c18 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x559b74b60bf8 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x559b74b60b90 </vagrant/ext/zephyros/zephyr/include/spinlock.h:64:13> 'struct k_spinlock *' lvalue ParmVar 0x559b74b609a0 'l' 'struct k_spinlock *'
| | |-DeclStmt 0x559b74b60cc8 <line:65:2, col:20>
| | | `-VarDecl 0x559b74b60c68 <col:2, col:19> col:19 used k 'k_spinlock_key_t':'struct k_spinlock_key'
| | |-BinaryOperator 0x559b74b60df0 <line:71:2, col:24> 'int' '='
| | | |-MemberExpr 0x559b74b60d08 <col:2, col:4> 'int' lvalue .key 0x559b74b60738
| | | | `-DeclRefExpr 0x559b74b60ce0 <col:2> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x559b74b60c68 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| | | `-ImplicitCastExpr 0x559b74b60dd8 <col:10, col:24> 'int' <IntegralCast>
| | |   `-CallExpr 0x559b74b60db0 <col:10, col:24> 'unsigned int'
| | |     `-ImplicitCastExpr 0x559b74b60d98 <col:10> 'unsigned int (*)(void)' <FunctionToPointerDecay>
| | |       `-DeclRefExpr 0x559b74b60d40 <col:10> 'unsigned int (void)' Function 0x559b74b3a210 'arch_irq_lock' 'unsigned int (void)'
| | `-ReturnStmt 0x559b74b60ea0 <line:85:2, col:9>
| |   `-ImplicitCastExpr 0x559b74b60e88 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' <LValueToRValue>
| |     `-DeclRefExpr 0x559b74b60e60 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x559b74b60c68 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x559b74b60b48 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x559b74b62e00 </vagrant/ext/zephyros/zephyr/include/spinlock.h:88:1, line:107:1> line:88:27 k_spin_unlock 'void (struct k_spinlock *, k_spinlock_key_t)' static inline
| |-ParmVarDecl 0x559b74b60f10 <col:41, col:60> col:60 used l 'struct k_spinlock *'
| |-ParmVarDecl 0x559b74b60f80 <line:89:6, col:23> col:23 used key 'k_spinlock_key_t':'struct k_spinlock_key'
| |-CompoundStmt 0x559b74b630f0 <line:90:1, line:107:1>
| | |-CStyleCastExpr 0x559b74b62f98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x559b74b62f80 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x559b74b62f60 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x559b74b62ef8 </vagrant/ext/zephyros/zephyr/include/spinlock.h:91:13> 'struct k_spinlock *' lvalue ParmVar 0x559b74b60f10 'l' 'struct k_spinlock *'
| | `-CallExpr 0x559b74b63090 <line:106:2, col:25> 'void'
| |   |-ImplicitCastExpr 0x559b74b63078 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x559b74b62fc0 <col:2> 'void (unsigned int)' Function 0x559b74b3a378 'arch_irq_unlock' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x559b74b630d8 <col:18, col:22> 'unsigned int' <IntegralCast>
| |     `-ImplicitCastExpr 0x559b74b630c0 <col:18, col:22> 'int' <LValueToRValue>
| |       `-MemberExpr 0x559b74b63010 <col:18, col:22> 'int' lvalue .key 0x559b74b60738
| |         `-DeclRefExpr 0x559b74b62fe8 <col:18> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue ParmVar 0x559b74b60f80 'key' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x559b74b62eb0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x559b74b63240 </vagrant/ext/zephyros/zephyr/include/spinlock.h:112:1, line:121:1> line:112:27 k_spin_release 'void (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x559b74b63138 <col:42, col:61> col:61 used l 'struct k_spinlock *'
| |-CompoundStmt 0x559b74b63458 <line:113:1, line:121:1>
| | `-CStyleCastExpr 0x559b74b633d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x559b74b633b8 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| |     `-ParenExpr 0x559b74b63398 <col:29, col:31> 'struct k_spinlock *' lvalue
| |       `-DeclRefExpr 0x559b74b63330 </vagrant/ext/zephyros/zephyr/include/spinlock.h:114:13> 'struct k_spinlock *' lvalue ParmVar 0x559b74b63138 'l' 'struct k_spinlock *'
| `-AlwaysInlineAttr 0x559b74b632e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-EnumDecl 0x559b74b63470 </vagrant/ext/zephyros/zephyr/include/fatal.h:23:1, line:42:1> line:23:6 k_fatal_error_reason
| |-FullComment 0x559b74c2f5f0 <line:18:3, line:20:5>
| | |-ParagraphComment 0x559b74c2f430 <line:18:3>
| | | `-TextComment 0x559b74c2f400 <col:3> Text=" "
| | |-VerbatimLineComment 0x559b74c2f450 <col:4, col:41> Text=" fatal_apis Fatal error APIs"
| | |-ParagraphComment 0x559b74c2f4c0 <line:19:3>
| | | `-TextComment 0x559b74c2f490 <col:3> Text=" "
| | |-VerbatimLineComment 0x559b74c2f4e0 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x559b74c2f5a0 <line:20:3, col:5>
| |   |-TextComment 0x559b74c2f520 <col:3> Text=" "
| |   |-TextComment 0x559b74c2f540 <col:4> Text="@"
| |   `-TextComment 0x559b74c2f560 <col:5> Text="{"
| |-EnumConstantDecl 0x559b74b63558 <line:25:2> col:2 K_ERR_CPU_EXCEPTION 'int'
| | `-FullComment 0x559b74c2f6c0 <line:24:5, col:55>
| |   `-ParagraphComment 0x559b74c2f690 <col:5, col:55>
| |     `-TextComment 0x559b74c2f660 <col:5, col:55> Text=" Generic CPU exception, not covered by other codes "
| |-EnumConstantDecl 0x559b74b635c8 <line:28:2> col:2 K_ERR_SPURIOUS_IRQ 'int'
| | `-FullComment 0x559b74c2f790 <line:27:5, col:34>
| |   `-ParagraphComment 0x559b74c2f760 <col:5, col:34>
| |     `-TextComment 0x559b74c2f730 <col:5, col:34> Text=" Unhandled hardware interrupt "
| |-EnumConstantDecl 0x559b74b63638 <line:31:2> col:2 K_ERR_STACK_CHK_FAIL 'int'
| | `-FullComment 0x559b74c2f860 <line:30:5, col:50>
| |   `-ParagraphComment 0x559b74c2f830 <col:5, col:50>
| |     `-TextComment 0x559b74c2f800 <col:5, col:50> Text=" Faulting context overflowed its stack buffer "
| |-EnumConstantDecl 0x559b74b636a8 <line:34:2> col:2 K_ERR_KERNEL_OOPS 'int'
| | `-FullComment 0x559b74c2f930 <line:33:5, col:38>
| |   `-ParagraphComment 0x559b74c2f900 <col:5, col:38>
| |     `-TextComment 0x559b74c2f8d0 <col:5, col:38> Text=" Moderate severity software error "
| `-EnumConstantDecl 0x559b74b63718 <line:37:2> col:2 K_ERR_KERNEL_PANIC 'int'
|   `-FullComment 0x559b74c2fa00 <line:36:5, col:34>
|     `-ParagraphComment 0x559b74c2f9d0 <col:5, col:34>
|       `-TextComment 0x559b74c2f9a0 <col:5, col:34> Text=" High severity software error "
|-FunctionDecl 0x559b74b63860 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:86:26, /vagrant/ext/zephyros/zephyr/include/fatal.h:52:52> col:20 k_fatal_halt 'void (unsigned int) __attribute__((noreturn))'
| |-ParmVarDecl 0x559b74b637a0 <col:33, col:46> col:46 reason 'unsigned int'
| `-FullComment 0x559b74c2fce0 <line:45:3, line:50:44>
|   |-ParagraphComment 0x559b74c2faa0 <line:45:3>
|   | `-TextComment 0x559b74c2fa70 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c2fac0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x559b74c2fb20 <col:10, col:42>
|   |   `-TextComment 0x559b74c2faf0 <col:10, col:42> Text=" Halt the system on a fatal error"
|   |-ParagraphComment 0x559b74c2fb90 <line:47:3, line:48:76>
|   | |-TextComment 0x559b74c2fb40 <line:47:3, col:72> Text=" Invokes architecture-specific code to power off or halt the system in"
|   | `-TextComment 0x559b74c2fb60 <line:48:3, col:76> Text=" a low power state. Lacking that, lock interrupts and sit in an idle loop."
|   |-ParagraphComment 0x559b74c2fbe0 <line:50:3>
|   | `-TextComment 0x559b74c2fbb0 <col:3> Text=" "
|   `-ParamCommandComment 0x559b74c2fc00 <col:4, col:44> [in] implicitly Param="reason" ParamIndex=0
|     `-ParagraphComment 0x559b74c2fc90 <col:17, col:44>
|       `-TextComment 0x559b74c2fc60 <col:17, col:44> Text=" Fatal exception reason code"
|-FunctionDecl 0x559b74b63aa0 <line:83:1, col:76> col:6 invalid k_sys_fatal_error_handler 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x559b74b63950 <col:32, col:45> col:45 reason 'unsigned int'
| |-ParmVarDecl 0x559b74b639c8 <col:53, col:73> col:73 invalid esf 'const int *'
| `-FullComment 0x559b74c303c0 <line:55:3, line:81:71>
|   |-ParagraphComment 0x559b74c2fd80 <line:55:3>
|   | `-TextComment 0x559b74c2fd50 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c2fda0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x559b74c2fe00 <col:10, col:36>
|   |   `-TextComment 0x559b74c2fdd0 <col:10, col:36> Text=" Fatal error policy handler"
|   |-ParagraphComment 0x559b74c2fe70 <line:57:3, line:58:67>
|   | |-TextComment 0x559b74c2fe20 <line:57:3, col:73> Text=" This function is not invoked by application code, but is declared as a"
|   | `-TextComment 0x559b74c2fe40 <line:58:3, col:67> Text=" weak symbol so that applications may introduce their own policy."
|   |-ParagraphComment 0x559b74c2ff10 <line:60:3, line:62:71>
|   | |-TextComment 0x559b74c2fe90 <line:60:3, col:63> Text=" The default implementation of this function halts the system"
|   | |-TextComment 0x559b74c2feb0 <line:61:3, col:66> Text=" unconditionally. Depending on architecture support, this may be"
|   | `-TextComment 0x559b74c2fed0 <line:62:3, col:71> Text=" a simple infinite loop, power off the hardware, or exit an emulator."
|   |-ParagraphComment 0x559b74c2ff80 <line:64:3, line:65:11>
|   | |-TextComment 0x559b74c2ff30 <line:64:3, col:72> Text=" If this function returns, then the currently executing thread will be"
|   | `-TextComment 0x559b74c2ff50 <line:65:3, col:11> Text=" aborted."
|   |-ParagraphComment 0x559b74c2ffd0 <line:67:3, col:42>
|   | `-TextComment 0x559b74c2ffa0 <col:3, col:42> Text=" A few notes for custom implementations:"
|   |-ParagraphComment 0x559b74c30160 <line:69:3, line:77:23>
|   | |-TextComment 0x559b74c2fff0 <line:69:3, col:74> Text=" - If the error is determined to be unrecoverable, LOG_PANIC() should be"
|   | |-TextComment 0x559b74c30010 <line:70:3, col:50> Text="   invoked to flush any pending logging buffers."
|   | |-TextComment 0x559b74c30030 <line:71:3, col:76> Text=" - K_ERR_KERNEL_PANIC indicates a severe unrecoverable error in the kernel"
|   | |-TextComment 0x559b74c30050 <line:72:3, col:76> Text="   itself, and should not be considered recoverable. There is an assertion"
|   | |-TextComment 0x559b74c30070 <line:73:3, col:40> Text="   in z_fatal_error() to enforce this."
|   | |-TextComment 0x559b74c30090 <line:74:3, col:76> Text=" - Even outside of a kernel panic, unless the fault occurred in user mode,"
|   | |-TextComment 0x559b74c300b0 <line:75:3, col:73> Text="   the kernel itself may be in an inconsistent state, with API calls to"
|   | |-TextComment 0x559b74c300d0 <line:76:3, col:72> Text="   kernel objects possibly exhibiting undefined behavior or triggering"
|   | `-TextComment 0x559b74c300f0 <line:77:3, col:23> Text="   another exception."
|   |-ParagraphComment 0x559b74c301b0 <line:79:3>
|   | `-TextComment 0x559b74c30180 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c301d0 <col:4, line:80:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x559b74c30280 <line:79:17, line:80:3>
|   |   |-TextComment 0x559b74c30230 <line:79:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x559b74c30250 <line:80:3> Text=" "
|   `-ParamCommandComment 0x559b74c302a0 <col:4, line:81:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x559b74c30350 <line:80:14, line:81:71>
|       |-TextComment 0x559b74c30300 <line:80:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x559b74c30320 <line:81:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x559b74b63c98 <line:99:1, col:64> col:6 invalid z_fatal_error 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x559b74b63b90 <col:20, col:33> col:33 reason 'unsigned int'
| |-ParmVarDecl 0x559b74b63c08 <col:41, col:61> col:61 invalid esf 'const int *'
| `-FullComment 0x559b74c307b0 <line:86:3, line:97:71>
|   |-ParagraphComment 0x559b74c30460 <line:86:3, col:50>
|   | `-TextComment 0x559b74c30430 <col:3, col:50> Text=" Called by architecture code upon a fatal error."
|   |-ParagraphComment 0x559b74c30500 <line:88:3, line:90:31>
|   | |-TextComment 0x559b74c30480 <line:88:3, col:76> Text=" This function dumps out architecture-agnostic information about the error"
|   | |-TextComment 0x559b74c304a0 <line:89:3, col:61> Text=" and then makes a policy decision on what to do by invoking"
|   | `-TextComment 0x559b74c304c0 <line:90:3, col:31> Text=" k_sys_fatal_error_handler()."
|   |-ParagraphComment 0x559b74c30570 <line:92:3, line:93:24>
|   | |-TextComment 0x559b74c30520 <line:92:3, col:71> Text=" On architectures where k_thread_abort() never returns, this function"
|   | `-TextComment 0x559b74c30540 <line:93:3, col:24> Text=" never returns either."
|   |-ParagraphComment 0x559b74c305c0 <line:95:3>
|   | `-TextComment 0x559b74c30590 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c305e0 <col:4, line:96:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x559b74c30690 <line:95:17, line:96:3>
|   |   |-TextComment 0x559b74c30640 <line:95:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x559b74c30660 <line:96:3> Text=" "
|   `-ParamCommandComment 0x559b74c306b0 <col:4, line:97:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x559b74c30760 <line:96:14, line:97:71>
|       |-TextComment 0x559b74c30710 <line:96:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x559b74c30730 <line:97:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x559b74b675d0 </vagrant/ext/zephyros/zephyr/include/irq.h:66:1, line:73:1> line:67:1 irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' static inline
| |-ParmVarDecl 0x559b74b672b0 <col:21, col:34> col:34 used irq 'unsigned int'
| |-ParmVarDecl 0x559b74b67328 <col:39, col:52> col:52 used priority 'unsigned int'
| |-ParmVarDecl 0x559b74b67438 <line:68:7, col:38> col:14 used routine 'void (*)(void *)'
| |-ParmVarDecl 0x559b74b674b0 <col:41, col:47> col:47 used parameter 'void *'
| |-ParmVarDecl 0x559b74b67520 <line:69:7, col:13> col:13 used flags 'u32_t':'unsigned int'
| |-CompoundStmt 0x559b74b67b18 <line:70:1, line:73:1>
| | `-ReturnStmt 0x559b74b678c8 <line:71:2, line:72:11>
| |   `-CallExpr 0x559b74b67800 <line:71:9, line:72:11> 'int'
| |     |-ImplicitCastExpr 0x559b74b677e8 <line:71:9> 'int (*)(unsigned int, unsigned int, void (*)(void *), void *, u32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b67698 <col:9> 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' Function 0x559b74b3aec8 'arch_irq_connect_dynamic' 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |     |-ImplicitCastExpr 0x559b74b67850 <col:34> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b676c0 <col:34> 'unsigned int' lvalue ParmVar 0x559b74b672b0 'irq' 'unsigned int'
| |     |-ImplicitCastExpr 0x559b74b67868 <col:39> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b676e8 <col:39> 'unsigned int' lvalue ParmVar 0x559b74b67328 'priority' 'unsigned int'
| |     |-ImplicitCastExpr 0x559b74b67880 <col:49> 'void (*)(void *)' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b67710 <col:49> 'void (*)(void *)' lvalue ParmVar 0x559b74b67438 'routine' 'void (*)(void *)'
| |     |-ImplicitCastExpr 0x559b74b67898 <col:58> 'void *' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74b67738 <col:58> 'void *' lvalue ParmVar 0x559b74b674b0 'parameter' 'void *'
| |     `-ImplicitCastExpr 0x559b74b678b0 <line:72:6> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-DeclRefExpr 0x559b74b67760 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74b67520 'flags' 'u32_t':'unsigned int'
| `-FullComment 0x559b74b4d570 <line:54:3, line:64:48>
|   |-ParagraphComment 0x559b74c30850 <line:54:3, col:33>
|   | `-TextComment 0x559b74c30820 <col:3, col:33> Text=" Configure a dynamic interrupt."
|   |-ParagraphComment 0x559b74c308a0 <line:56:3, col:80>
|   | `-TextComment 0x559b74c30870 <col:3, col:80> Text=" Use this instead of IRQ_CONNECT() if arguments cannot be known at build time."
|   |-ParagraphComment 0x559b74b4d040 <line:58:3>
|   | `-TextComment 0x559b74c308c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b4d060 <col:4, line:59:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x559b74b4d110 <line:58:14, line:59:3>
|   |   |-TextComment 0x559b74b4d0c0 <line:58:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x559b74b4d0e0 <line:59:3> Text=" "
|   |-ParamCommandComment 0x559b74b4d130 <col:4, line:60:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x559b74b4d1e0 <line:59:19, line:60:3>
|   |   |-TextComment 0x559b74b4d190 <line:59:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x559b74b4d1b0 <line:60:3> Text=" "
|   |-ParamCommandComment 0x559b74b4d200 <col:4, line:61:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x559b74b4d2b0 <line:60:18, line:61:3>
|   |   |-TextComment 0x559b74b4d260 <line:60:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x559b74b4d280 <line:61:3> Text=" "
|   |-ParamCommandComment 0x559b74b4d2d0 <col:4, line:62:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x559b74b4d380 <line:61:20, line:62:3>
|   |   |-TextComment 0x559b74b4d330 <line:61:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x559b74b4d350 <line:62:3> Text=" "
|   |-ParamCommandComment 0x559b74b4d3a0 <col:4, col:53> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x559b74b4d430 <col:16, col:53>
|   |   `-TextComment 0x559b74b4d400 <col:16, col:53> Text=" Arch-specific IRQ configuration flags"
|   |-ParagraphComment 0x559b74b4d480 <line:64:3>
|   | `-TextComment 0x559b74b4d450 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74b4d4a0 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x559b74b4d500 <col:11, col:48>
|       `-TextComment 0x559b74b4d4d0 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x559b74b67bf8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/sys/errno_private.h:28:28> col:16 z_errno 'int *(void)' static inline
| `-FullComment 0x559b74b4d790 <line:21:3, line:26:59>
|   |-ParagraphComment 0x559b74b4d610 <line:21:3, col:57>
|   | `-TextComment 0x559b74b4d5e0 <col:3, col:57> Text=" return a pointer to a memory location containing errno"
|   |-ParagraphComment 0x559b74b4d680 <line:23:3, line:24:52>
|   | |-TextComment 0x559b74b4d630 <line:23:3, col:69> Text=" errno is thread-specific, and can't just be a global. This pointer"
|   | `-TextComment 0x559b74b4d650 <line:24:3, col:52> Text=" is guaranteed to be read/writable from user mode."
|   |-ParagraphComment 0x559b74b4d6d0 <line:26:3>
|   | `-TextComment 0x559b74b4d6a0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74b4d6f0 <col:4, col:59> Name="return"
|     `-ParagraphComment 0x559b74b4d750 <col:11, col:59>
|       `-TextComment 0x559b74b4d720 <col:11, col:59> Text=" Memory location of errno data for current thread"
|-FunctionDecl 0x559b74b67cf0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:24:1, col:29> col:14 used z_impl_z_errno 'int *()' extern
|-FunctionDecl 0x559b74b67db8 prev 0x559b74b67bf8 <line:25:1, line:34:1> line:25:21 z_errno 'int *(void)' static inline
| `-CompoundStmt 0x559b74b680a8 <line:26:1, line:34:1>
|   |-DoStmt 0x559b74b67fb0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74b67f78 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74b67f28 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74b67f90 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74b68068 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:33:2, col:24>
|     `-CallExpr 0x559b74b68040 <col:9, col:24> 'int *'
|       `-ImplicitCastExpr 0x559b74b68028 <col:9> 'int *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x559b74b67fd0 <col:9> 'int *()' Function 0x559b74b67cf0 'z_impl_z_errno' 'int *()'
|-RecordDecl 0x559b74b680c8 </vagrant/ext/zephyros/zephyr/include/kernel.h:91:9, line:93:1> line:91:9 struct definition
| `-FieldDecl 0x559b74b68180 <line:92:2, col:14> col:14 waitq 'sys_dlist_t':'struct _dnode'
|-TypedefDecl 0x559b74b72ba0 <line:91:1, line:93:3> col:3 referenced _wait_q_t 'struct _wait_q_t':'_wait_q_t'
| `-ElaboratedType 0x559b74b681d0 'struct _wait_q_t' sugar
|   `-RecordType 0x559b74b68150 '_wait_q_t'
|     `-Record 0x559b74b680c8 ''
|-RecordDecl 0x559b74b72c10 prev 0x559b74b362e8 <line:120:1, col:8> col:8 struct k_thread
|-RecordDecl 0x559b74b72c98 <line:121:1, col:8> col:8 struct k_mutex
|-RecordDecl 0x559b74b72d40 <line:122:1, col:8> col:8 struct k_sem
|-RecordDecl 0x559b74b72df0 <line:123:1, col:8> col:8 struct k_msgq
|-RecordDecl 0x559b74b72ea0 <line:124:1, col:8> col:8 struct k_mbox
|-RecordDecl 0x559b74b72f50 <line:125:1, col:8> col:8 struct k_pipe
|-RecordDecl 0x559b74b73000 <line:126:1, col:8> col:8 struct k_queue
|-RecordDecl 0x559b74b730b0 <line:127:1, col:8> col:8 struct k_fifo
|-RecordDecl 0x559b74b73160 <line:128:1, col:8> col:8 struct k_lifo
|-RecordDecl 0x559b74b73210 <line:129:1, col:8> col:8 struct k_stack
|-RecordDecl 0x559b74b732c0 <line:130:1, col:8> col:8 struct k_mem_slab
|-RecordDecl 0x559b74b73370 <line:131:1, col:8> col:8 struct k_mem_pool
|-RecordDecl 0x559b74b73420 <line:132:1, col:8> col:8 struct k_timer
|-RecordDecl 0x559b74b734d0 <line:133:1, col:8> col:8 struct k_poll_event
|-RecordDecl 0x559b74b73580 <line:134:1, col:8> col:8 struct k_poll_signal
|-RecordDecl 0x559b74b73630 prev 0x559b74b36370 <line:135:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x559b74b736b8 <line:136:1, col:8> col:8 struct k_mem_partition
|-RecordDecl 0x559b74b73760 <line:137:1, col:8> col:8 struct k_futex
|-EnumDecl 0x559b74b73838 <line:146:1, line:160:1> line:146:6 k_objects
| |-FullComment 0x559b74b4d990 <line:140:3, line:144:33>
| | |-ParagraphComment 0x559b74b4d830 <line:140:3>
| | | `-TextComment 0x559b74b4d800 <col:3> Text=" "
| | |-BlockCommandComment 0x559b74b4d850 <col:4, col:29> Name="brief"
| | | `-ParagraphComment 0x559b74b4d8b0 <col:10, col:29>
| | |   `-TextComment 0x559b74b4d880 <col:10, col:29> Text=" Kernel Object Types"
| | `-ParagraphComment 0x559b74b4d950 <line:142:3, line:144:33>
| |   |-TextComment 0x559b74b4d8d0 <line:142:3, col:77> Text=" This enumeration needs to be kept in sync with the lists of kernel objects"
| |   |-TextComment 0x559b74b4d8f0 <line:143:3, col:79> Text=" and subsystems in scripts/gen_kobject_list.py, as well as the otype_to_str()"
| |   `-TextComment 0x559b74b4d910 <line:144:3, col:33> Text=" function in kernel/userspace.c"
| |-EnumConstantDecl 0x559b74b738f0 <line:147:2> col:2 K_OBJ_ANY 'int'
| |-EnumConstantDecl 0x559b74b73968 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/kobj-types-enum.h:2:1> col:1 K_OBJ_MEM_SLAB 'int'
| |-EnumConstantDecl 0x559b74b739b0 <line:3:1> col:1 K_OBJ_MSGQ 'int'
| |-EnumConstantDecl 0x559b74b739f8 <line:4:1> col:1 K_OBJ_MUTEX 'int'
| |-EnumConstantDecl 0x559b74b73a40 <line:5:1> col:1 K_OBJ_PIPE 'int'
| |-EnumConstantDecl 0x559b74b73a88 <line:6:1> col:1 K_OBJ_QUEUE 'int'
| |-EnumConstantDecl 0x559b74b73ad0 <line:7:1> col:1 K_OBJ_POLL_SIGNAL 'int'
| |-EnumConstantDecl 0x559b74b73b18 <line:8:1> col:1 K_OBJ_SEM 'int'
| |-EnumConstantDecl 0x559b74b75e20 <line:9:1> col:1 K_OBJ_STACK 'int'
| |-EnumConstantDecl 0x559b74b75e68 <line:10:1> col:1 K_OBJ_THREAD 'int'
| |-EnumConstantDecl 0x559b74b75eb0 <line:11:1> col:1 K_OBJ_TIMER 'int'
| |-EnumConstantDecl 0x559b74b75ef8 <line:12:1> col:1 K_OBJ__THREAD_STACK_ELEMENT 'int'
| |-EnumConstantDecl 0x559b74b75f40 <line:13:1> col:1 K_OBJ_SYS_MUTEX 'int'
| |-EnumConstantDecl 0x559b74b75f88 <line:14:1> col:1 K_OBJ_FUTEX 'int'
| |-EnumConstantDecl 0x559b74b75fd0 <line:16:1> col:1 K_OBJ_DRIVER_ADC 'int'
| |-EnumConstantDecl 0x559b74b76018 <line:17:1> col:1 K_OBJ_DRIVER_AIO_CMP 'int'
| |-EnumConstantDecl 0x559b74b76060 <line:18:1> col:1 K_OBJ_DRIVER_COUNTER 'int'
| |-EnumConstantDecl 0x559b74b760a8 <line:19:1> col:1 K_OBJ_DRIVER_CRYPTO 'int'
| |-EnumConstantDecl 0x559b74b760f0 <line:20:1> col:1 K_OBJ_DRIVER_DMA 'int'
| |-EnumConstantDecl 0x559b74b76138 <line:21:1> col:1 K_OBJ_DRIVER_FLASH 'int'
| |-EnumConstantDecl 0x559b74b76180 <line:22:1> col:1 K_OBJ_DRIVER_GPIO 'int'
| |-EnumConstantDecl 0x559b74b761c8 <line:23:1> col:1 K_OBJ_DRIVER_I2C 'int'
| |-EnumConstantDecl 0x559b74b76210 <line:24:1> col:1 K_OBJ_DRIVER_I2S 'int'
| |-EnumConstantDecl 0x559b74b76258 <line:25:1> col:1 K_OBJ_DRIVER_IPM 'int'
| |-EnumConstantDecl 0x559b74b762a0 <line:26:1> col:1 K_OBJ_DRIVER_LED 'int'
| |-EnumConstantDecl 0x559b74b762e8 <line:27:1> col:1 K_OBJ_DRIVER_PINMUX 'int'
| |-EnumConstantDecl 0x559b74b76330 <line:28:1> col:1 K_OBJ_DRIVER_PWM 'int'
| |-EnumConstantDecl 0x559b74b76378 <line:29:1> col:1 K_OBJ_DRIVER_ENTROPY 'int'
| |-EnumConstantDecl 0x559b74b763c0 <line:30:1> col:1 K_OBJ_DRIVER_SENSOR 'int'
| |-EnumConstantDecl 0x559b74b76408 <line:31:1> col:1 K_OBJ_DRIVER_SPI 'int'
| |-EnumConstantDecl 0x559b74b76450 <line:32:1> col:1 K_OBJ_DRIVER_UART 'int'
| |-EnumConstantDecl 0x559b74b76498 <line:33:1> col:1 K_OBJ_DRIVER_CAN 'int'
| |-EnumConstantDecl 0x559b74b764e0 <line:34:1> col:1 K_OBJ_DRIVER_PTP_CLOCK 'int'
| |-EnumConstantDecl 0x559b74b76528 <line:35:1> col:1 K_OBJ_DRIVER_EEPROM 'int'
| |-EnumConstantDecl 0x559b74b76570 <line:36:1> col:1 K_OBJ_DRIVER_WDT 'int'
| |-EnumConstantDecl 0x559b74b765b8 <line:37:1> col:1 K_OBJ_DRIVER_SAMPLE 'int'
| `-EnumConstantDecl 0x559b74b76628 </vagrant/ext/zephyros/zephyr/include/kernel.h:159:2> col:2 K_OBJ_LAST 'int'
|   `-FullComment 0x559b74b4dab0 <line:156:5, col:13>
|     `-ParagraphComment 0x559b74b4da80 <col:5, col:13>
|       |-TextComment 0x559b74b4da00 <col:5> Text=" "
|       `-InlineCommandComment 0x559b74b4da50 <col:6, col:13> Name="endcond" RenderNormal
|-FunctionDecl 0x559b74b76768 <line:229:1, line:232:1> line:229:20 z_object_init 'void (void *)' static inline
| |-ParmVarDecl 0x559b74b766e0 <col:34, col:40> col:40 used obj 'void *'
| |-CompoundStmt 0x559b74b76908 <line:230:1, line:232:1>
| | `-CStyleCastExpr 0x559b74b768b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x559b74b76898 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x559b74b76878 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x559b74b76810 </vagrant/ext/zephyros/zephyr/include/kernel.h:231:13> 'void *' lvalue ParmVar 0x559b74b766e0 'obj' 'void *'
| `-FullComment 0x559b74b4dbd0 <line:227:3, col:12>
|   `-ParagraphComment 0x559b74b4dba0 <col:3, col:12>
|     |-TextComment 0x559b74b4db20 <col:3> Text=" "
|     `-InlineCommandComment 0x559b74b4db70 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x559b74b76ad0 <line:237:1, line:242:1> line:237:20 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x559b74b76938 <col:49, col:55> col:55 used object 'void *'
| |-ParmVarDecl 0x559b74b769c0 <line:238:13, col:30> col:30 used thread 'struct k_thread *'
| |-CompoundStmt 0x559b74b76d38 <line:239:1, line:242:1>
| | |-CStyleCastExpr 0x559b74b76c20 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x559b74b76c08 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x559b74b76be8 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x559b74b76b80 </vagrant/ext/zephyros/zephyr/include/kernel.h:240:13> 'void *' lvalue ParmVar 0x559b74b76938 'object' 'void *'
| | `-CStyleCastExpr 0x559b74b76ce8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x559b74b76cd0 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x559b74b76cb0 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x559b74b76c48 </vagrant/ext/zephyros/zephyr/include/kernel.h:241:13> 'struct k_thread *' lvalue ParmVar 0x559b74b769c0 'thread' 'struct k_thread *'
| `-FullComment 0x559b74b4dcc0 <line:235:3, col:12>
|   `-ParagraphComment 0x559b74b4dc90 <col:3, col:12>
|     |-TextComment 0x559b74b4dc40 <col:3> Text=" "
|     `-InlineCommandComment 0x559b74b4dc60 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x559b74b783d0 <line:247:1, line:252:1> line:247:20 k_object_access_revoke 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x559b74b76d70 <col:43, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x559b74b78340 <line:248:8, col:25> col:25 used thread 'struct k_thread *'
| |-CompoundStmt 0x559b74b78638 <line:249:1, line:252:1>
| | |-CStyleCastExpr 0x559b74b78520 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x559b74b78508 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x559b74b784e8 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x559b74b78480 </vagrant/ext/zephyros/zephyr/include/kernel.h:250:13> 'void *' lvalue ParmVar 0x559b74b76d70 'object' 'void *'
| | `-CStyleCastExpr 0x559b74b785e8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x559b74b785d0 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x559b74b785b0 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x559b74b78548 </vagrant/ext/zephyros/zephyr/include/kernel.h:251:13> 'struct k_thread *' lvalue ParmVar 0x559b74b78340 'thread' 'struct k_thread *'
| `-FullComment 0x559b74b4ddb0 <line:245:3, col:12>
|   `-ParagraphComment 0x559b74b4dd80 <col:3, col:12>
|     |-TextComment 0x559b74b4dd30 <col:3> Text=" "
|     `-InlineCommandComment 0x559b74b4dd50 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x559b74b786f8 <line:257:1, line:260:1> line:257:20 used z_impl_k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x559b74b78670 <col:44, col:50> col:50 used object 'void *'
| |-CompoundStmt 0x559b74b78868 <line:258:1, line:260:1>
| | `-CStyleCastExpr 0x559b74b78840 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x559b74b78828 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x559b74b78808 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x559b74b787a0 </vagrant/ext/zephyros/zephyr/include/kernel.h:259:13> 'void *' lvalue ParmVar 0x559b74b78670 'object' 'void *'
| `-FullComment 0x559b74b4dea0 <line:255:3, col:12>
|   `-ParagraphComment 0x559b74b4de70 <col:3, col:12>
|     |-TextComment 0x559b74b4de20 <col:3> Text=" "
|     `-InlineCommandComment 0x559b74b4de40 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x559b74b78920 <line:262:1, line:265:1> line:262:20 k_object_access_all_grant 'void (void *)' static inline
| |-ParmVarDecl 0x559b74b78898 <col:46, col:52> col:52 used object 'void *'
| `-CompoundStmt 0x559b74b78ab8 <line:263:1, line:265:1>
|   `-CStyleCastExpr 0x559b74b78a68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|     `-ImplicitCastExpr 0x559b74b78a50 <col:29, col:31> 'void *' <LValueToRValue>
|       `-ParenExpr 0x559b74b78a30 <col:29, col:31> 'void *' lvalue
|         `-DeclRefExpr 0x559b74b789c8 </vagrant/ext/zephyros/zephyr/include/kernel.h:264:13> 'void *' lvalue ParmVar 0x559b74b78898 'object' 'void *'
|-FunctionDecl 0x559b74b78c00 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:279:75> col:16 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x559b74b78ae8 <col:38, col:44> col:44 object 'void *'
| |-ParmVarDecl 0x559b74b78b70 <col:52, col:69> col:69 thread 'struct k_thread *'
| `-FullComment 0x559b74b4e200 <line:270:3, line:277:53>
|   |-ParagraphComment 0x559b74b4df40 <line:270:3, col:43>
|   | `-TextComment 0x559b74b4df10 <col:3, col:43> Text=" Grant a thread access to a kernel object"
|   |-ParagraphComment 0x559b74b4dfe0 <line:272:3, line:274:67>
|   | |-TextComment 0x559b74b4df60 <line:272:3, col:72> Text=" The thread will be granted access to the object if the caller is from"
|   | |-TextComment 0x559b74b4df80 <line:273:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x559b74b4dfa0 <line:274:3, col:67> Text=" on both the object and the thread whose access is being granted."
|   |-ParagraphComment 0x559b74b4e030 <line:276:3>
|   | `-TextComment 0x559b74b4e000 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b4e050 <col:4, line:277:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x559b74b4e100 <line:276:17, line:277:3>
|   |   |-TextComment 0x559b74b4e0b0 <line:276:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x559b74b4e0d0 <line:277:3> Text=" "
|   `-ParamCommandComment 0x559b74b4e120 <col:4, col:53> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x559b74b4e1b0 <col:17, col:53>
|       `-TextComment 0x559b74b4e180 <col:17, col:53> Text=" Thread to grant access to the object"
|-FunctionDecl 0x559b74b78e08 prev 0x559b74b783d0 <line:291:1, col:66> col:6 k_object_access_revoke 'void (void *, struct k_thread *)'
| |-ParmVarDecl 0x559b74b78cf0 <col:29, col:35> col:35 object 'void *'
| |-ParmVarDecl 0x559b74b78d78 <col:43, col:60> col:60 thread 'struct k_thread *'
| `-FullComment 0x559b74b4e560 <line:282:3, line:289:54>
|   |-ParagraphComment 0x559b74b4e2a0 <line:282:3, col:46>
|   | `-TextComment 0x559b74b4e270 <col:3, col:46> Text=" Revoke a thread's access to a kernel object"
|   |-ParagraphComment 0x559b74b4e340 <line:284:3, line:286:67>
|   | |-TextComment 0x559b74b4e2c0 <line:284:3, col:66> Text=" The thread will lose access to the object if the caller is from"
|   | |-TextComment 0x559b74b4e2e0 <line:285:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x559b74b4e300 <line:286:3, col:67> Text=" on both the object and the thread whose access is being revoked."
|   |-ParagraphComment 0x559b74b4e390 <line:288:3>
|   | `-TextComment 0x559b74b4e360 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b4e3b0 <col:4, line:289:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x559b74b4e460 <line:288:17, line:289:3>
|   |   |-TextComment 0x559b74b4e410 <line:288:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x559b74b4e430 <line:289:3> Text=" "
|   `-ParamCommandComment 0x559b74b4e480 <col:4, col:54> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x559b74b4e510 <col:17, col:54>
|       `-TextComment 0x559b74b4e4e0 <col:17, col:54> Text=" Thread to remove access to the object"
|-FunctionDecl 0x559b74b78f88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:302:45> col:16 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x559b74b78f00 <col:33, col:39> col:39 object 'void *'
| `-FullComment 0x559b74b4e890 <line:294:3, line:301:1>
|   |-ParagraphComment 0x559b74b4e600 <line:294:3>
|   | `-TextComment 0x559b74b4e5d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74b4e620 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x559b74b4e680 <col:10, col:27>
|   |   `-TextComment 0x559b74b4e650 <col:10, col:27> Text=" Release an object"
|   |-ParagraphComment 0x559b74b4e6f0 <line:296:3, line:297:72>
|   | |-TextComment 0x559b74b4e6a0 <line:296:3, col:64> Text=" Allows user threads to drop their own permission on an object"
|   | `-TextComment 0x559b74b4e6c0 <line:297:3, col:72> Text=" Their permissions are automatically cleared when a thread terminates."
|   |-ParagraphComment 0x559b74b4e740 <line:299:3>
|   | `-TextComment 0x559b74b4e710 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b4e760 <col:4, col:42> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x559b74b4e7f0 <col:17, col:42>
|   |   `-TextComment 0x559b74b4e7c0 <col:17, col:42> Text=" The object to be released"
|   `-ParagraphComment 0x559b74b4e840 <line:301:1>
|     `-TextComment 0x559b74b4e810 <col:1> Text=" "
|-FunctionDecl 0x559b74b790f8 prev 0x559b74b78920 <line:321:1, col:44> col:6 k_object_access_all_grant 'void (void *)'
| |-ParmVarDecl 0x559b74b79070 <col:32, col:38> col:38 object 'void *'
| `-FullComment 0x559b74b4ec50 <line:305:3, line:319:41>
|   |-ParagraphComment 0x559b74b4e930 <line:305:3, col:59>
|   | `-TextComment 0x559b74b4e900 <col:3, col:59> Text=" Grant all present and future threads access to an object"
|   |-ParagraphComment 0x559b74b4e9f0 <line:307:3, line:310:59>
|   | |-TextComment 0x559b74b4e950 <line:307:3, col:77> Text=" If the caller is from supervisor mode, or the caller is from user mode and"
|   | |-TextComment 0x559b74b4e970 <line:308:3, col:72> Text=" have sufficient permissions on the object, then that object will have"
|   | |-TextComment 0x559b74b4e990 <line:309:3, col:76> Text=" permissions granted to it for *all* current and future threads running in"
|   | `-TextComment 0x559b74b4e9b0 <line:310:3, col:59> Text=" the system, effectively becoming a public kernel object."
|   |-ParagraphComment 0x559b74b4ea90 <line:312:3, line:314:43>
|   | |-TextComment 0x559b74b4ea10 <line:312:3, col:79> Text=" Use of this API should be avoided on systems that are running untrusted code"
|   | |-TextComment 0x559b74b4ea30 <line:313:3, col:76> Text=" as it is possible for such code to derive the addresses of kernel objects"
|   | `-TextComment 0x559b74b4ea50 <line:314:3, col:43> Text=" and perform unwanted operations on them."
|   |-ParagraphComment 0x559b74b4eb00 <line:316:3, line:317:25>
|   | |-TextComment 0x559b74b4eab0 <line:316:3, col:75> Text=" It is not possible to revoke permissions on public objects; once public,"
|   | `-TextComment 0x559b74b4ead0 <line:317:3, col:25> Text=" any thread may use it."
|   |-ParagraphComment 0x559b74b4eb50 <line:319:3>
|   | `-TextComment 0x559b74b4eb20 <col:3> Text=" "
|   `-ParamCommandComment 0x559b74b4eb70 <col:4, col:41> [in] implicitly Param="object" ParamIndex=0
|     `-ParagraphComment 0x559b74b4ec00 <col:17, col:41>
|       `-TextComment 0x559b74b4ebd0 <col:17, col:41> Text=" Address of kernel object"
|-FunctionDecl 0x559b74b79350 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:337:52> col:17 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x559b74b79220 <col:32, col:47> col:47 otype 'enum k_objects':'enum k_objects'
| `-FullComment 0x559b74c34900 <line:324:3, line:335:12>
|   |-ParagraphComment 0x559b74b4ecf0 <line:324:3, col:48>
|   | `-TextComment 0x559b74b4ecc0 <col:3, col:48> Text=" Allocate a kernel object of a designated type"
|   |-ParagraphComment 0x559b74b4edb0 <line:326:3, line:329:78>
|   | |-TextComment 0x559b74b4ed10 <line:326:3, col:74> Text=" This will instantiate at runtime a kernel object of the specified type,"
|   | |-TextComment 0x559b74b4ed30 <line:327:3, col:77> Text=" returning a pointer to it. The object will be returned in an uninitialized"
|   | |-TextComment 0x559b74b4ed50 <line:328:3, col:76> Text=" state, with the calling thread being granted permission on it. The memory"
|   | `-TextComment 0x559b74b4ed70 <line:329:3, col:78> Text=" for the object will be allocated out of the calling thread's resource pool."
|   |-ParagraphComment 0x559b74b4ee00 <line:331:3, col:59>
|   | `-TextComment 0x559b74b4edd0 <col:3, col:59> Text=" Currently, allocation of thread stacks is not supported."
|   |-ParagraphComment 0x559b74b4ee50 <line:333:3>
|   | `-TextComment 0x559b74b4ee20 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74b4ee70 <col:4, line:334:3> [in] implicitly Param="otype" ParamIndex=0
|   | `-ParagraphComment 0x559b74b4ef20 <line:333:16, line:334:3>
|   |   |-TextComment 0x559b74b4eed0 <line:333:16, col:44> Text=" Requested kernel object type"
|   |   `-TextComment 0x559b74b4eef0 <line:334:3> Text=" "
|   `-BlockCommandComment 0x559b74b4ef40 <col:4, line:335:12> Name="return"
|     `-ParagraphComment 0x559b74b4efc0 <line:334:11, line:335:12>
|       |-TextComment 0x559b74b4ef70 <line:334:11, col:77> Text=" A pointer to the allocated kernel object, or NULL if memory wasn't"
|       `-TextComment 0x559b74b4ef90 <line:335:3, col:12> Text=" available"
|-FunctionDecl 0x559b74b794a8 <line:352:1, line:357:1> line:352:21 used z_impl_k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x559b74b79418 <col:43, col:58> col:58 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x559b74b796d8 <line:353:1, line:357:1>
|   |-CStyleCastExpr 0x559b74b795f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|   | `-ImplicitCastExpr 0x559b74b795d8 <col:29, col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|   |   `-ParenExpr 0x559b74b795b8 <col:29, col:31> 'enum k_objects':'enum k_objects' lvalue
|   |     `-DeclRefExpr 0x559b74b79550 </vagrant/ext/zephyros/zephyr/include/kernel.h:354:13> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x559b74b79418 'otype' 'enum k_objects':'enum k_objects'
|   `-ReturnStmt 0x559b74b79698 <line:356:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ParenExpr 0x559b74b79678 <col:14, col:24> 'void *'
|       `-CStyleCastExpr 0x559b74b79650 <col:15, col:23> 'void *' <NullToPointer>
|         `-IntegerLiteral 0x559b74b79618 <col:23> 'int' 0
|-FunctionDecl 0x559b74b79798 </vagrant/ext/zephyros/zephyr/include/kernel.h:363:1, line:366:1> line:363:20 k_obj_free 'void (void *)' static inline
| |-ParmVarDecl 0x559b74b79710 <col:31, col:37> col:37 used obj 'void *'
| |-CompoundStmt 0x559b74b79938 <line:364:1, line:366:1>
| | `-CStyleCastExpr 0x559b74b798e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x559b74b798c8 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x559b74b798a8 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x559b74b79840 </vagrant/ext/zephyros/zephyr/include/kernel.h:365:13> 'void *' lvalue ParmVar 0x559b74b79710 'obj' 'void *'
| `-FullComment 0x559b74c34b60 <line:359:3, line:362:1>
|   |-ParagraphComment 0x559b74c349a0 <line:359:3>
|   | `-TextComment 0x559b74c34970 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c349c0 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x559b74c34a20 <col:10, col:24>
|   |   `-TextComment 0x559b74c349f0 <col:10, col:24> Text=" Free an object"
|   |-ParagraphComment 0x559b74c34a70 <line:361:3>
|   | `-TextComment 0x559b74c34a40 <col:3> Text=" "
|   `-ParamCommandComment 0x559b74c34a90 <col:4, line:362:1> [in] implicitly Param="obj" ParamIndex=0
|     `-ParagraphComment 0x559b74c34b20 <col:1>
|       `-TextComment 0x559b74c34af0 <col:1> Text=" "
|-RecordDecl 0x559b74b79950 prev 0x559b74b36420 <line:387:1, line:389:1> line:387:17 struct _k_thread_stack_element definition
| |-PackedAttr 0x559b74b799d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:168:40>
| `-FieldDecl 0x559b74b79a30 </vagrant/ext/zephyros/zephyr/include/kernel.h:388:2, col:7> col:7 data 'char'
|-RecordDecl 0x559b74b79ad8 <line:427:1, line:503:1> line:427:8 struct _thread_base definition
| |-RecordDecl 0x559b74b79b80 <line:430:2, line:433:2> line:430:2 union definition
| | |-FieldDecl 0x559b74b79c40 <line:431:3, col:15> col:15 qnode_dlist 'sys_dnode_t':'struct _dnode'
| | `-FieldDecl 0x559b74b79ca8 <line:432:3, col:17> col:17 qnode_rb 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x559b74b79d40 <line:430:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| |-IndirectFieldDecl 0x559b74b79d98 <line:431:15> col:15 implicit qnode_dlist 'sys_dnode_t':'struct _dnode'
| | |-Field 0x559b74b79d40 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x559b74b79c40 'qnode_dlist' 'sys_dnode_t':'struct _dnode'
| |-IndirectFieldDecl 0x559b74b79de8 <line:432:17> col:17 implicit qnode_rb 'struct rbnode':'struct rbnode'
| | |-Field 0x559b74b79d40 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x559b74b79ca8 'qnode_rb' 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x559b74b79eb8 <line:438:2, col:13> col:13 pended_on '_wait_q_t *'
| |-FieldDecl 0x559b74b79f10 <line:441:2, col:7> col:7 user_options 'u8_t':'unsigned char'
| |-FieldDecl 0x559b74b79f68 <line:444:2, col:7> col:7 thread_state 'u8_t':'unsigned char'
| |-RecordDecl 0x559b74b79fb0 <line:460:2, line:471:2> line:460:2 union definition
| | |-RecordDecl 0x559b74b7a060 <line:461:3, line:469:3> line:461:3 struct definition
| | | |-FieldDecl 0x559b74b7a120 <line:466:4, col:9> col:9 prio 's8_t':'signed char'
| | | `-FieldDecl 0x559b74b7a178 <line:467:4, col:9> col:9 sched_locked 'u8_t':'unsigned char'
| | |-FieldDecl 0x559b74b7a210 <line:461:3> col:3 implicit 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | |-IndirectFieldDecl 0x559b74b7a268 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | | |-Field 0x559b74b7a210 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x559b74b7a120 'prio' 's8_t':'signed char'
| | |-IndirectFieldDecl 0x559b74b7a2b8 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | | |-Field 0x559b74b7a210 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x559b74b7a178 'sched_locked' 'u8_t':'unsigned char'
| | `-FieldDecl 0x559b74b7a308 <line:470:3, col:9> col:9 preempt 'u16_t':'unsigned short'
| |-FieldDecl 0x559b74b31e70 <line:460:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| |-IndirectFieldDecl 0x559b74b31ed0 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | |-Field 0x559b74b31e70 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x559b74b7a210 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x559b74b7a120 'prio' 's8_t':'signed char'
| |-IndirectFieldDecl 0x559b74b31f28 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | |-Field 0x559b74b31e70 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x559b74b7a210 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x559b74b7a178 'sched_locked' 'u8_t':'unsigned char'
| |-IndirectFieldDecl 0x559b74b31f78 <line:470:9> col:9 implicit preempt 'u16_t':'unsigned short'
| | |-Field 0x559b74b31e70 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | `-Field 0x559b74b7a308 'preempt' 'u16_t':'unsigned short'
| |-FieldDecl 0x559b74b31fc8 <line:477:2, col:8> col:8 order_key 'u32_t':'unsigned int'
| `-FieldDecl 0x559b74b32028 <line:497:2, col:8> col:8 swap_data 'void *'
|-TypedefDecl 0x559b74b32160 <line:505:1, col:29> col:29 _thread_base_t 'struct _thread_base':'struct _thread_base'
| `-ElaboratedType 0x559b74b32110 'struct _thread_base' sugar
|   `-RecordType 0x559b74b79b60 'struct _thread_base'
|     `-Record 0x559b74b79ad8 '_thread_base'
|-RecordDecl 0x559b74b321e8 prev 0x559b74b72c10 <line:545:1, line:618:1> line:545:8 invalid struct k_thread definition
| |-FullComment 0x559b74c34cd0 <line:542:3, line:543:19>
| | |-ParagraphComment 0x559b74c34c00 <line:542:3>
| | | `-TextComment 0x559b74c34bd0 <col:3> Text=" "
| | |-VerbatimLineComment 0x559b74c34c20 <col:4, col:24> Text=" thread_apis"
| | `-ParagraphComment 0x559b74c34c90 <line:543:3, col:19>
| |   `-TextComment 0x559b74c34c60 <col:3, col:19> Text=" Thread Structure"
| |-FieldDecl 0x559b74b32290 <line:547:2, col:22> col:22 base 'struct _thread_base':'struct _thread_base'
| |-RecordDecl 0x559b74b32308 parent 0x559b749d8918 <line:550:2, col:9> col:9 struct _callee_saved
| |-FieldDecl 0x559b74b32410 <col:2, col:23> col:23 invalid callee_saved 'struct _callee_saved':'struct _callee_saved'
| | `-FullComment 0x559b74c34da0 <line:549:5, col:59>
| |   `-ParagraphComment 0x559b74c34d70 <col:5, col:59>
| |     `-TextComment 0x559b74c34d40 <col:5, col:59> Text=" defined by the architecture, but all archs need these "
| |-FieldDecl 0x559b74b324a0 <line:553:2, col:8> col:8 init_data 'void *'
| | `-FullComment 0x559b74c34e70 <line:552:5, col:29>
| |   `-ParagraphComment 0x559b74c34e40 <col:5, col:29>
| |     `-TextComment 0x559b74c34e10 <col:5, col:29> Text=" static thread init data "
| |-FieldDecl 0x559b74b32648 <line:559:2, col:23> col:9 fn_abort 'void (*)(void)'
| | `-FullComment 0x559b74c35000 <line:556:4, line:558:4>
| |   |-ParagraphComment 0x559b74c34f30 <line:556:4, line:557:4>
| |   | |-TextComment 0x559b74c34ee0 <line:556:4, col:18> Text=" abort function"
| |   | `-TextComment 0x559b74c34f00 <line:557:4> Text=" "
| |   |-VerbatimLineComment 0x559b74c34f50 <col:5, col:22> Text=" K-THREAD-002"
| |   `-ParagraphComment 0x559b74c34fc0 <line:558:4>
| |     `-TextComment 0x559b74c34f90 <col:4> Text=" "
| |-FieldDecl 0x559b74b32770 <line:614:2, col:21> col:21 referenced resource_pool 'struct k_mem_pool *'
| | `-FullComment 0x559b74c350d0 <line:613:5, col:19>
| |   `-ParagraphComment 0x559b74c350a0 <col:5, col:19>
| |     `-TextComment 0x559b74c35070 <col:5, col:19> Text=" resource pool "
| |-RecordDecl 0x559b74b327e8 parent 0x559b749d8918 <line:617:2, col:9> col:9 struct _thread_arch
| `-FieldDecl 0x559b74b328f0 <col:2, col:22> col:22 invalid arch 'struct _thread_arch':'struct _thread_arch'
|   `-FullComment 0x559b74c351a0 <line:616:5, col:47>
|     `-ParagraphComment 0x559b74c35170 <col:5, col:47>
|       `-TextComment 0x559b74c35140 <col:5, col:47> Text=" arch-specifics: must always be at the end "
|-TypedefDecl 0x559b74b32a20 <line:620:1, col:25> col:25 _thread_t 'struct k_thread':'struct k_thread'
| `-ElaboratedType 0x559b74ac8a00 'struct k_thread' sugar
|   `-RecordType 0x559b74ac8970 'struct k_thread'
|     `-Record 0x559b74b321e8 'k_thread'
|-TypedefDecl 0x559b74b32aa0 <line:621:1, col:26> col:26 referenced k_tid_t 'struct k_thread *'
| `-PointerType 0x559b74ac8a60 'struct k_thread *'
|   `-ElaboratedType 0x559b74ac8a00 'struct k_thread' sugar
|     `-RecordType 0x559b74ac8970 'struct k_thread'
|       `-Record 0x559b74b321e8 'k_thread'
|-EnumDecl 0x559b74b32af8 <line:623:1, line:627:1> line:623:6 execution_context_types
| |-EnumConstantDecl 0x559b74b32bd0 <line:624:2, col:10> col:2 K_ISR 'int'
| | `-IntegerLiteral 0x559b74b32bb0 <col:10> 'int' 0
| |-EnumConstantDecl 0x559b74b32c18 <line:625:2> col:2 K_COOP_THREAD 'int'
| `-EnumConstantDecl 0x559b74b32c60 <line:626:2> col:2 K_PREEMPT_THREAD 'int'
|-TypedefDecl 0x559b74b7d148 <line:634:1, line:635:23> line:634:16 referenced k_thread_user_cb_t 'void (*)(const struct k_thread *, void *)'
| |-PointerType 0x559b74b7d0e0 'void (*)(const struct k_thread *, void *)'
| | `-ParenType 0x559b74b7d080 'void (const struct k_thread *, void *)' sugar
| |   `-FunctionProtoType 0x559b74b7d040 'void (const struct k_thread *, void *)' cdecl
| |     |-BuiltinType 0x559b749d8970 'void'
| |     |-PointerType 0x559b74b32d10 'const struct k_thread *'
| |     | `-QualType 0x559b74ac8a01 'const struct k_thread' const
| |     |   `-ElaboratedType 0x559b74ac8a00 'struct k_thread' sugar
| |     |     `-RecordType 0x559b74ac8970 'struct k_thread'
| |     |       `-Record 0x559b74b321e8 'k_thread'
| |     `-PointerType 0x559b749d8e10 'void *'
| |       `-BuiltinType 0x559b749d8970 'void'
| `-FullComment 0x559b74c35360 <line:630:3, line:631:5>
|   |-ParagraphComment 0x559b74c35240 <line:630:3>
|   | `-TextComment 0x559b74c35210 <col:3> Text=" "
|   |-VerbatimLineComment 0x559b74c35260 <col:4, col:27> Text=" thread_apis"
|   `-ParagraphComment 0x559b74c35320 <line:631:3, col:5>
|     |-TextComment 0x559b74c352a0 <col:3> Text=" "
|     |-TextComment 0x559b74c352c0 <col:4> Text="@"
|     `-TextComment 0x559b74c352e0 <col:5> Text="{"
|-FunctionDecl 0x559b74b7d390 <line:654:1, col:73> col:13 k_thread_foreach 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x559b74b7d200 <col:30, col:49> col:49 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x559b74b7d278 <col:58, col:64> col:64 user_data 'void *'
| `-FullComment 0x559b74c35a70 <line:638:3, line:652:14>
|   |-ParagraphComment 0x559b74c35400 <line:638:3>
|   | `-TextComment 0x559b74c353d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c35420 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x559b74c35480 <col:10, col:53>
|   |   `-TextComment 0x559b74c35450 <col:10, col:53> Text=" Iterate over all the threads in the system."
|   |-ParagraphComment 0x559b74c354f0 <line:640:3, line:641:46>
|   | |-TextComment 0x559b74c354a0 <line:640:3, col:63> Text=" This routine iterates over all the threads in the system and"
|   | `-TextComment 0x559b74c354c0 <line:641:3, col:46> Text=" calls the user_cb function for each thread."
|   |-ParagraphComment 0x559b74c35540 <line:643:3>
|   | `-TextComment 0x559b74c35510 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c35560 <col:4, line:644:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x559b74c35610 <line:643:18, line:644:3>
|   |   |-TextComment 0x559b74c355c0 <line:643:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x559b74c355e0 <line:644:3> Text=" "
|   |-ParamCommandComment 0x559b74c35630 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x559b74c356c0 <col:20, col:41>
|   |   `-TextComment 0x559b74c35690 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x559b74c35710 <line:646:3>
|   | `-TextComment 0x559b74c356e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c35730 <col:4, line:648:3> Name="note"
|   | `-ParagraphComment 0x559b74c357e0 <line:646:9, line:648:3>
|   |   |-TextComment 0x559b74c35760 <line:646:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x559b74c35780 <line:647:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x559b74c357a0 <line:648:3> Text=" "
|   |-BlockCommandComment 0x559b74c35800 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x559b74c35860 <col:9, col:23>
|   |   `-TextComment 0x559b74c35830 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x559b74c35880 <col:24, col:71> Text=" k_spin_lock to protect the _kernel.threads"
|   |-ParagraphComment 0x559b74c35910 <line:649:3, line:650:46>
|   | |-TextComment 0x559b74c358c0 <line:649:3, col:72> Text=" list which means creation of new threads and terminations of existing"
|   | `-TextComment 0x559b74c358e0 <line:650:3, col:46> Text=" threads are blocked until this API returns."
|   |-ParagraphComment 0x559b74c35960 <line:652:3>
|   | `-TextComment 0x559b74c35930 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c35980 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c359e0 <col:11, col:14>
|       `-TextComment 0x559b74c359b0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74b7d580 <line:683:1, line:684:45> line:683:13 k_thread_foreach_unlocked 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x559b74b7d478 <line:684:2, col:21> col:21 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x559b74b7d4f0 <col:30, col:36> col:36 user_data 'void *'
| `-FullComment 0x559b74c36570 <line:657:3, line:681:72>
|   |-ParagraphComment 0x559b74c35b10 <line:657:3>
|   | `-TextComment 0x559b74c35ae0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c35b30 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x559b74c35b90 <col:10, col:69>
|   |   `-TextComment 0x559b74c35b60 <col:10, col:69> Text=" Iterate over all the threads in the system without locking."
|   |-ParagraphComment 0x559b74c35be0 <line:659:3, col:44>
|   | `-TextComment 0x559b74c35bb0 <col:3, col:44> Text=" This routine works exactly the same like "
|   |-VerbatimLineComment 0x559b74c35c00 <col:45, col:66> Text=" k_thread_foreach"
|   |-ParagraphComment 0x559b74c35c70 <line:660:3, col:51>
|   | `-TextComment 0x559b74c35c40 <col:3, col:51> Text=" but unlocks interrupts when user_cb is executed."
|   |-ParagraphComment 0x559b74c35cc0 <line:662:3>
|   | `-TextComment 0x559b74c35c90 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c35ce0 <col:4, line:663:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x559b74c35d90 <line:662:18, line:663:3>
|   |   |-TextComment 0x559b74c35d40 <line:662:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x559b74c35d60 <line:663:3> Text=" "
|   |-ParamCommandComment 0x559b74c35db0 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x559b74c35e40 <col:20, col:41>
|   |   `-TextComment 0x559b74c35e10 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x559b74c35e90 <line:665:3>
|   | `-TextComment 0x559b74c35e60 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c35eb0 <col:4, line:667:3> Name="note"
|   | `-ParagraphComment 0x559b74c35f60 <line:665:9, line:667:3>
|   |   |-TextComment 0x559b74c35ee0 <line:665:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x559b74c35f00 <line:666:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x559b74c35f20 <line:667:3> Text=" "
|   |-BlockCommandComment 0x559b74c35f80 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x559b74c35fe0 <col:9, col:23>
|   |   `-TextComment 0x559b74c35fb0 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x559b74c36000 <col:24, col:80> Text=" k_spin_lock only when accessing the _kernel.threads"
|   |-ParagraphComment 0x559b74c361e0 <line:668:3, line:674:3>
|   | |-TextComment 0x559b74c36040 <line:668:3, col:74> Text=" queue elements. It unlocks it during user callback function processing."
|   | |-TextComment 0x559b74c36060 <line:669:3, col:38> Text=" If a new task is created when this "
|   | |-InlineCommandComment 0x559b74c360b0 <col:39, col:40> Name="c" RenderMonospaced Arg[0]="foreach"
|   | |-TextComment 0x559b74c360d0 <col:49, col:73> Text=" function is in progress,"
|   | |-TextComment 0x559b74c360f0 <line:670:3, col:63> Text=" the added new task would not be included in the enumeration."
|   | |-TextComment 0x559b74c36110 <line:671:3, col:75> Text=" If a task is aborted during this enumeration, there would be a race here"
|   | |-TextComment 0x559b74c36130 <line:672:3, col:77> Text=" and there is a possibility that this aborted task would be included in the"
|   | |-TextComment 0x559b74c36150 <line:673:3, col:15> Text=" enumeration."
|   | `-TextComment 0x559b74c36170 <line:674:3> Text=" "
|   `-BlockCommandComment 0x559b74c36200 <col:4, line:681:72> Name="note"
|     `-ParagraphComment 0x559b74c364e0 <line:674:9, line:681:72>
|       |-TextComment 0x559b74c36230 <line:674:9, col:63> Text=" If the task is aborted and the memory occupied by its "
|       |-InlineCommandComment 0x559b74c36280 <col:64, col:65> Name="c" RenderMonospaced Arg[0]="k_thread"
|       |-TextComment 0x559b74c362a0 <line:675:3, col:33> Text=" structure is reused when this "
|       |-InlineCommandComment 0x559b74c36300 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="k_thread_foreach_unlocked"
|       |-TextComment 0x559b74c36320 <col:62, col:76> Text=" is in progress"
|       |-TextComment 0x559b74c36340 <line:676:3, col:52> Text=" it might even lead to the system behave unstable."
|       |-TextComment 0x559b74c36360 <line:677:3, col:59> Text=" This function may never return, as it would follow some "
|       |-InlineCommandComment 0x559b74c363b0 <col:60, col:61> Name="c" RenderMonospaced Arg[0]="next"
|       |-TextComment 0x559b74c363d0 <col:67, col:71> Text=" task"
|       |-TextComment 0x559b74c363f0 <line:678:3, col:73> Text=" pointers treating given pointer as a pointer to the k_thread structure"
|       |-TextComment 0x559b74c36410 <line:679:3, col:45> Text=" while it is something different right now."
|       |-TextComment 0x559b74c36430 <line:680:3, col:77> Text=" Do not reuse the memory that was occupied by k_thread structure of aborted"
|       `-TextComment 0x559b74c36450 <line:681:3, col:72> Text=" task if it was aborted after this function was called in any context."
|-FunctionDecl 0x559b74b7dda0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:784:43> line:779:19 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x559b74b7d798 <col:35, col:52> col:52 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x559b74b7d808 <line:780:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x559b74b7d878 <line:781:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74b7d910 <line:782:7, col:24> col:24 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x559b74b7d988 <line:783:7, col:13> col:13 p1 'void *'
| |-ParmVarDecl 0x559b74b7da00 <col:17, col:23> col:23 p2 'void *'
| |-ParmVarDecl 0x559b74b7da78 <col:27, col:33> col:33 p3 'void *'
| |-ParmVarDecl 0x559b74b7daf0 <line:784:7, col:11> col:11 prio 'int'
| |-ParmVarDecl 0x559b74b7db60 <col:17, col:23> col:23 options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x559b74b7dbd0 <col:32, col:38> col:38 delay 's32_t':'int'
| `-FullComment 0x559b74c373e0 <line:746:3, line:778:1>
|   |-ParagraphComment 0x559b74c36610 <line:746:3>
|   | `-TextComment 0x559b74c365e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c36630 <col:4, col:26> Name="brief"
|   | `-ParagraphComment 0x559b74c36690 <col:10, col:26>
|   |   `-TextComment 0x559b74c36660 <col:10, col:26> Text=" Create a thread."
|   |-ParagraphComment 0x559b74c366e0 <line:748:3, col:70>
|   | `-TextComment 0x559b74c366b0 <col:3, col:70> Text=" This routine initializes a thread, then schedules it for execution."
|   |-ParagraphComment 0x559b74c367a0 <line:750:3, line:753:11>
|   | |-TextComment 0x559b74c36700 <line:750:3, col:78> Text=" The new thread may be scheduled for immediate execution or a delayed start."
|   | |-TextComment 0x559b74c36720 <line:751:3, col:71> Text=" If the newly spawned thread does not have a delayed start the kernel"
|   | |-TextComment 0x559b74c36740 <line:752:3, col:70> Text=" scheduler may preempt the current thread to allow the new thread to"
|   | `-TextComment 0x559b74c36760 <line:753:3, col:11> Text=" execute."
|   |-ParagraphComment 0x559b74c36840 <line:755:3, line:757:44>
|   | |-TextComment 0x559b74c367c0 <line:755:3, col:73> Text=" Thread options are architecture-specific, and can include K_ESSENTIAL,"
|   | |-TextComment 0x559b74c367e0 <line:756:3, col:77> Text=" K_FP_REGS, and K_SSE_REGS. Multiple options may be specified by separating"
|   | `-TextComment 0x559b74c36800 <line:757:3, col:44> Text=" them using "|" (the logical OR operator)."
|   |-ParagraphComment 0x559b74c36910 <line:759:3, line:762:13>
|   | |-TextComment 0x559b74c36860 <line:759:3, col:79> Text=" Historically, users often would use the beginning of the stack memory region"
|   | |-TextComment 0x559b74c36880 <line:760:3, col:75> Text=" to store the struct k_thread data, although corruption will occur if the"
|   | |-TextComment 0x559b74c368a0 <line:761:3, col:80> Text=" stack overflows this region and stack protection features may not detect this"
|   | `-TextComment 0x559b74c368c0 <line:762:3, col:13> Text=" situation."
|   |-ParagraphComment 0x559b74c36960 <line:764:3>
|   | `-TextComment 0x559b74c36930 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c36980 <col:4, line:765:3> [in] implicitly Param="new_thread" ParamIndex=0
|   | `-ParagraphComment 0x559b74c36a30 <line:764:21, line:765:3>
|   |   |-TextComment 0x559b74c369e0 <line:764:21, col:61> Text=" Pointer to uninitialized struct k_thread"
|   |   `-TextComment 0x559b74c36a00 <line:765:3> Text=" "
|   |-ParamCommandComment 0x559b74c36a50 <col:4, line:766:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x559b74c36b00 <line:765:16, line:766:3>
|   |   |-TextComment 0x559b74c36ab0 <line:765:16, col:43> Text=" Pointer to the stack space."
|   |   `-TextComment 0x559b74c36ad0 <line:766:3> Text=" "
|   |-ParamCommandComment 0x559b74c36b20 <col:4, line:767:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x559b74c36bd0 <line:766:21, line:767:3>
|   |   |-TextComment 0x559b74c36b80 <line:766:21, col:41> Text=" Stack size in bytes."
|   |   `-TextComment 0x559b74c36ba0 <line:767:3> Text=" "
|   |-ParamCommandComment 0x559b74c36bf0 <col:4, line:768:3> [in] implicitly Param="entry" ParamIndex=3
|   | `-ParagraphComment 0x559b74c36ca0 <line:767:16, line:768:3>
|   |   |-TextComment 0x559b74c36c50 <line:767:16, col:38> Text=" Thread entry function."
|   |   `-TextComment 0x559b74c36c70 <line:768:3> Text=" "
|   |-ParamCommandComment 0x559b74c36cc0 <col:4, line:769:3> [in] implicitly Param="p1" ParamIndex=4
|   | `-ParagraphComment 0x559b74c36d70 <line:768:13, line:769:3>
|   |   |-TextComment 0x559b74c36d20 <line:768:13, col:39> Text=" 1st entry point parameter."
|   |   `-TextComment 0x559b74c36d40 <line:769:3> Text=" "
|   |-ParamCommandComment 0x559b74c36d90 <col:4, line:770:3> [in] implicitly Param="p2" ParamIndex=5
|   | `-ParagraphComment 0x559b74c36e40 <line:769:13, line:770:3>
|   |   |-TextComment 0x559b74c36df0 <line:769:13, col:39> Text=" 2nd entry point parameter."
|   |   `-TextComment 0x559b74c36e10 <line:770:3> Text=" "
|   |-ParamCommandComment 0x559b74c36e60 <col:4, line:771:3> [in] implicitly Param="p3" ParamIndex=6
|   | `-ParagraphComment 0x559b74c36f10 <line:770:13, line:771:3>
|   |   |-TextComment 0x559b74c36ec0 <line:770:13, col:39> Text=" 3rd entry point parameter."
|   |   `-TextComment 0x559b74c36ee0 <line:771:3> Text=" "
|   |-ParamCommandComment 0x559b74c36f30 <col:4, line:772:3> [in] implicitly Param="prio" ParamIndex=7
|   | `-ParagraphComment 0x559b74c36fe0 <line:771:15, line:772:3>
|   |   |-TextComment 0x559b74c36f90 <line:771:15, col:31> Text=" Thread priority."
|   |   `-TextComment 0x559b74c36fb0 <line:772:3> Text=" "
|   |-ParamCommandComment 0x559b74c37000 <col:4, line:773:3> [in] implicitly Param="options" ParamIndex=8
|   | `-ParagraphComment 0x559b74c370b0 <line:772:18, line:773:3>
|   |   |-TextComment 0x559b74c37060 <line:772:18, col:33> Text=" Thread options."
|   |   `-TextComment 0x559b74c37080 <line:773:3> Text=" "
|   |-ParamCommandComment 0x559b74c370d0 <col:4, col:80> [in] implicitly Param="delay" ParamIndex=9
|   | `-ParagraphComment 0x559b74c37160 <col:16, col:80>
|   |   `-TextComment 0x559b74c37130 <col:16, col:80> Text=" Scheduling delay (in milliseconds), or K_NO_WAIT (for no delay)."
|   |-ParagraphComment 0x559b74c371b0 <line:775:3>
|   | `-TextComment 0x559b74c37180 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c371d0 <col:4, col:28> Name="return"
|   | `-ParagraphComment 0x559b74c37230 <col:11, col:28>
|   |   `-TextComment 0x559b74c37200 <col:11, col:28> Text=" ID of new thread."
|   |-ParagraphComment 0x559b74c37280 <line:777:3>
|   | `-TextComment 0x559b74c37250 <col:3> Text=" "
|   |-VerbatimLineComment 0x559b74c372a0 <col:4, col:21> Text=" K-THREAD-001"
|   `-ParagraphComment 0x559b74c37310 <line:778:1>
|     `-TextComment 0x559b74c372e0 <col:1> Text=" "
|-FunctionDecl 0x559b74b81270 <line:795:1, line:797:18> line:795:27 k_thread_user_mode_enter 'void (k_thread_entry_t, void *, void *, void *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x559b74b7dec8 <col:52, col:69> col:69 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x559b74b80fa0 <line:796:10, col:16> col:16 p1 'void *'
| |-ParmVarDecl 0x559b74b81018 <col:20, col:26> col:26 p2 'void *'
| |-ParmVarDecl 0x559b74b81090 <line:797:10, col:16> col:16 p3 'void *'
| `-FullComment 0x559b74c37990 <line:787:3, line:794:1>
|   |-ParagraphComment 0x559b74c37480 <line:787:3>
|   | `-TextComment 0x559b74c37450 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c374a0 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x559b74c37500 <col:10, col:61>
|   |   `-TextComment 0x559b74c374d0 <col:10, col:61> Text=" Drop a thread's privileges permanently to user mode"
|   |-ParagraphComment 0x559b74c37550 <line:789:3>
|   | `-TextComment 0x559b74c37520 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c37570 <col:4, line:790:3> [in] implicitly Param="entry" ParamIndex=0
|   | `-ParagraphComment 0x559b74c37620 <line:789:16, line:790:3>
|   |   |-TextComment 0x559b74c375d0 <line:789:16, col:48> Text=" Function to start executing from"
|   |   `-TextComment 0x559b74c375f0 <line:790:3> Text=" "
|   |-ParamCommandComment 0x559b74c37640 <col:4, line:791:3> [in] implicitly Param="p1" ParamIndex=1
|   | `-ParagraphComment 0x559b74c376f0 <line:790:13, line:791:3>
|   |   |-TextComment 0x559b74c376a0 <line:790:13, col:38> Text=" 1st entry point parameter"
|   |   `-TextComment 0x559b74c376c0 <line:791:3> Text=" "
|   |-ParamCommandComment 0x559b74c37710 <col:4, line:792:3> [in] implicitly Param="p2" ParamIndex=2
|   | `-ParagraphComment 0x559b74c377c0 <line:791:13, line:792:3>
|   |   |-TextComment 0x559b74c37770 <line:791:13, col:38> Text=" 2nd entry point parameter"
|   |   `-TextComment 0x559b74c37790 <line:792:3> Text=" "
|   |-ParamCommandComment 0x559b74c377e0 <col:4, line:793:3> [in] implicitly Param="p3" ParamIndex=3
|   | `-ParagraphComment 0x559b74c37890 <line:792:13, line:793:3>
|   |   |-TextComment 0x559b74c37840 <line:792:13, col:38> Text=" 3rd entry point parameter"
|   |   `-TextComment 0x559b74c37860 <line:793:3> Text=" "
|   |-VerbatimLineComment 0x559b74c378b0 <col:4, col:21> Text=" K-THREAD-003"
|   `-ParagraphComment 0x559b74c37920 <line:794:1>
|     `-TextComment 0x559b74c378f0 <col:1> Text=" "
|-FunctionDecl 0x559b74b81550 <line:831:1, line:835:1> line:831:20 k_thread_resource_pool_assign 'void (struct k_thread *, struct k_mem_pool *)' static inline
| |-ParmVarDecl 0x559b74b813b0 <col:50, col:67> col:67 used thread 'struct k_thread *'
| |-ParmVarDecl 0x559b74b81438 <line:832:8, col:27> col:27 used pool 'struct k_mem_pool *'
| |-CompoundStmt 0x559b74b81708 <line:833:1, line:835:1>
| | `-BinaryOperator 0x559b74b816b8 <line:834:2, col:26> 'struct k_mem_pool *' '='
| |   |-MemberExpr 0x559b74b81640 <col:2, col:10> 'struct k_mem_pool *' lvalue ->resource_pool 0x559b74b32770
| |   | `-ImplicitCastExpr 0x559b74b81628 <col:2> 'struct k_thread *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x559b74b81600 <col:2> 'struct k_thread *' lvalue ParmVar 0x559b74b813b0 'thread' 'struct k_thread *'
| |   `-ImplicitCastExpr 0x559b74b816a0 <col:26> 'struct k_mem_pool *' <LValueToRValue>
| |     `-DeclRefExpr 0x559b74b81678 <col:26> 'struct k_mem_pool *' lvalue ParmVar 0x559b74b81438 'pool' 'struct k_mem_pool *'
| `-FullComment 0x559b74c37ee0 <line:817:3, line:830:1>
|   |-ParagraphComment 0x559b74c37a30 <line:817:3>
|   | `-TextComment 0x559b74c37a00 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c37a50 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x559b74c37ab0 <col:10, col:51>
|   |   `-TextComment 0x559b74c37a80 <col:10, col:51> Text=" Assign a resource memory pool to a thread"
|   |-ParagraphComment 0x559b74c37b50 <line:819:3, line:821:51>
|   | |-TextComment 0x559b74c37ad0 <line:819:3, col:73> Text=" By default, threads have no resource pool assigned unless their parent"
|   | |-TextComment 0x559b74c37af0 <line:820:3, col:70> Text=" thread has a resource pool, in which case it is inherited. Multiple"
|   | `-TextComment 0x559b74c37b10 <line:821:3, col:51> Text=" threads may be assigned to the same memory pool."
|   |-ParagraphComment 0x559b74c37bc0 <line:823:3, line:824:17>
|   | |-TextComment 0x559b74c37b70 <line:823:3, col:74> Text=" Changing a thread's resource pool will not migrate allocations from the"
|   | `-TextComment 0x559b74c37b90 <line:824:3, col:17> Text=" previous pool."
|   |-ParagraphComment 0x559b74c37c10 <line:826:3>
|   | `-TextComment 0x559b74c37be0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c37c30 <col:4, line:828:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x559b74c37d10 <line:826:17, line:828:3>
|   |   |-TextComment 0x559b74c37c90 <line:826:17, col:77> Text=" Target thread to assign a memory pool for resource requests,"
|   |   |-TextComment 0x559b74c37cb0 <line:827:3, col:75> Text="               or NULL if the thread should no longer have a memory pool."
|   |   `-TextComment 0x559b74c37cd0 <line:828:3> Text=" "
|   |-ParamCommandComment 0x559b74c37d30 <col:4, line:829:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x559b74c37de0 <line:828:15, line:829:3>
|   |   |-TextComment 0x559b74c37d90 <line:828:15, col:48> Text=" Memory pool to use for resources."
|   |   `-TextComment 0x559b74c37db0 <line:829:3> Text=" "
|   |-VerbatimLineComment 0x559b74c37e00 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x559b74c37e70 <line:830:1>
|     `-TextComment 0x559b74c37e40 <col:1> Text=" "
|-FunctionDecl 0x559b74b81830 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:864:33> col:17 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x559b74b81730 <col:25, col:31> col:31 ms 's32_t':'int'
| `-FullComment 0x559b74c383c0 <line:855:3, line:863:1>
|   |-ParagraphComment 0x559b74c37f80 <line:855:3>
|   | `-TextComment 0x559b74c37f50 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c37fa0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x559b74c38000 <col:10, col:42>
|   |   `-TextComment 0x559b74c37fd0 <col:10, col:42> Text=" Put the current thread to sleep."
|   |-ParagraphComment 0x559b74c380d0 <line:857:3, col:78>
|   | |-TextComment 0x559b74c38020 <col:3, col:53> Text=" This routine puts the current thread to sleep for "
|   | |-InlineCommandComment 0x559b74c38070 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="duration"
|   | `-TextComment 0x559b74c38090 <col:65, col:78> Text=" milliseconds."
|   |-ParagraphComment 0x559b74c38120 <line:859:3>
|   | `-TextComment 0x559b74c380f0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c38140 <col:4, col:45> [in] implicitly Param="ms" ParamIndex=0
|   | `-ParagraphComment 0x559b74c381d0 <col:13, col:45>
|   |   `-TextComment 0x559b74c381a0 <col:13, col:45> Text=" Number of milliseconds to sleep."
|   |-ParagraphComment 0x559b74c38220 <line:861:3>
|   | `-TextComment 0x559b74c381f0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c38240 <col:4, line:862:44> Name="return"
|   | `-ParagraphComment 0x559b74c382c0 <line:861:11, line:862:44>
|   |   |-TextComment 0x559b74c38270 <line:861:11, col:79> Text=" Zero if the requested time has elapsed or the number of milliseconds"
|   |   `-TextComment 0x559b74c38290 <line:862:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x559b74c382e0 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x559b74c38350 <line:863:1>
|     `-TextComment 0x559b74c38320 <col:1> Text=" "
|-FunctionDecl 0x559b74b819a0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:880:34> col:17 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x559b74b81918 <col:26, col:32> col:32 us 's32_t':'int'
| `-FullComment 0x559b74c388c0 <line:867:3, line:879:1>
|   |-ParagraphComment 0x559b74c38460 <line:867:3>
|   | `-TextComment 0x559b74c38430 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c38480 <col:4, col:70> Name="brief"
|   | `-ParagraphComment 0x559b74c384e0 <col:10, col:70>
|   |   `-TextComment 0x559b74c384b0 <col:10, col:70> Text=" Put the current thread to sleep with microsecond resolution."
|   |-ParagraphComment 0x559b74c385d0 <line:869:3, line:873:71>
|   | |-TextComment 0x559b74c38500 <line:869:3, col:71> Text=" This function is unlikely to work as expected without kernel tuning."
|   | |-TextComment 0x559b74c38520 <line:870:3, col:71> Text=" In particular, because the lower bound on the duration of a sleep is"
|   | |-TextComment 0x559b74c38540 <line:871:3, col:74> Text=" the duration of a tick, CONFIG_SYS_CLOCK_TICKS_PER_SEC must be adjusted"
|   | |-TextComment 0x559b74c38560 <line:872:3, col:73> Text=" to achieve the resolution desired. The implications of doing this must"
|   | `-TextComment 0x559b74c38580 <line:873:3, col:71> Text=" be understood before attempting to use k_usleep(). Use with caution."
|   |-ParagraphComment 0x559b74c38620 <line:875:3>
|   | `-TextComment 0x559b74c385f0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c38640 <col:4, col:45> [in] implicitly Param="us" ParamIndex=0
|   | `-ParagraphComment 0x559b74c386d0 <col:13, col:45>
|   |   `-TextComment 0x559b74c386a0 <col:13, col:45> Text=" Number of microseconds to sleep."
|   |-ParagraphComment 0x559b74c38720 <line:877:3>
|   | `-TextComment 0x559b74c386f0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c38740 <col:4, line:878:44> Name="return"
|   | `-ParagraphComment 0x559b74c387c0 <line:877:11, line:878:44>
|   |   |-TextComment 0x559b74c38770 <line:877:11, col:79> Text=" Zero if the requested time has elapsed or the number of microseconds"
|   |   `-TextComment 0x559b74c38790 <line:878:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x559b74c387e0 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x559b74c38850 <line:879:1>
|     `-TextComment 0x559b74c38820 <col:1> Text=" "
|-FunctionDecl 0x559b74b81b50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:890:46> col:16 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x559b74b81a88 <col:28, col:34> col:34 usec_to_wait 'u32_t':'unsigned int'
| `-FullComment 0x559b74c38c20 <line:883:3, line:888:14>
|   |-ParagraphComment 0x559b74c38990 <line:883:3>
|   | `-TextComment 0x559b74c38960 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c389b0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x559b74c38a10 <col:10, col:48>
|   |   `-TextComment 0x559b74c389e0 <col:10, col:48> Text=" Cause the current thread to busy wait."
|   |-ParagraphComment 0x559b74c38b00 <line:885:3, line:886:32>
|   | |-TextComment 0x559b74c38a30 <line:885:3, col:76> Text=" This routine causes the current thread to execute a "do nothing" loop for"
|   | |-TextComment 0x559b74c38a50 <line:886:3> Text=" "
|   | |-InlineCommandComment 0x559b74c38aa0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="usec_to_wait"
|   | `-TextComment 0x559b74c38ac0 <col:19, col:32> Text=" microseconds."
|   |-ParagraphComment 0x559b74c38b50 <line:888:3>
|   | `-TextComment 0x559b74c38b20 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c38b70 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c38bd0 <col:11, col:14>
|       `-TextComment 0x559b74c38ba0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74b81cb8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:902:28> col:16 k_yield 'void (void)' static inline
| `-FullComment 0x559b74c38fc0 <line:893:3, line:901:1>
|   |-ParagraphComment 0x559b74c38cc0 <line:893:3>
|   | `-TextComment 0x559b74c38c90 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c38ce0 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x559b74c38d40 <col:10, col:35>
|   |   `-TextComment 0x559b74c38d10 <col:10, col:35> Text=" Yield the current thread."
|   |-ParagraphComment 0x559b74c38de0 <line:895:3, line:897:67>
|   | |-TextComment 0x559b74c38d60 <line:895:3, col:71> Text=" This routine causes the current thread to yield execution to another"
|   | |-TextComment 0x559b74c38d80 <line:896:3, col:77> Text=" thread of the same or higher priority. If there are no other ready threads"
|   | `-TextComment 0x559b74c38da0 <line:897:3, col:67> Text=" of the same or higher priority, the routine returns immediately."
|   |-ParagraphComment 0x559b74c38e30 <line:899:3>
|   | `-TextComment 0x559b74c38e00 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c38e50 <col:4, line:900:3> Name="return"
|   | `-ParagraphComment 0x559b74c38ed0 <line:899:11, line:900:3>
|   |   |-TextComment 0x559b74c38e80 <line:899:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c38ea0 <line:900:3> Text=" "
|   |-VerbatimLineComment 0x559b74c38ef0 <col:4, col:21> Text=" K-THREAD-015"
|   `-ParagraphComment 0x559b74c38f60 <line:901:1>
|     `-TextComment 0x559b74c38f30 <col:1> Text=" "
|-FunctionDecl 0x559b74b81ea0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:916:39> col:16 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x559b74b81d98 <col:25, col:33> col:33 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x559b74c39570 <line:905:3, line:915:1>
|   |-ParagraphComment 0x559b74c39060 <line:905:3>
|   | `-TextComment 0x559b74c39030 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c39080 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x559b74c390e0 <col:10, col:36>
|   |   `-TextComment 0x559b74c390b0 <col:10, col:36> Text=" Wake up a sleeping thread."
|   |-ParagraphComment 0x559b74c391b0 <line:907:3, col:61>
|   | |-TextComment 0x559b74c39100 <col:3, col:37> Text=" This routine prematurely wakes up "
|   | |-InlineCommandComment 0x559b74c39150 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x559b74c39170 <col:47, col:61> Text=" from sleeping."
|   |-ParagraphComment 0x559b74c39280 <line:909:3, col:69>
|   | |-TextComment 0x559b74c391d0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x559b74c39220 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x559b74c39240 <col:16, col:69> Text=" is not currently sleeping, the routine has no effect."
|   |-ParagraphComment 0x559b74c392d0 <line:911:3>
|   | `-TextComment 0x559b74c392a0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c392f0 <col:4, col:38> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x559b74c39380 <col:17, col:38>
|   |   `-TextComment 0x559b74c39350 <col:17, col:38> Text=" ID of thread to wake."
|   |-ParagraphComment 0x559b74c393d0 <line:913:3>
|   | `-TextComment 0x559b74c393a0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c393f0 <col:4, line:914:3> Name="return"
|   | `-ParagraphComment 0x559b74c39470 <line:913:11, line:914:3>
|   |   |-TextComment 0x559b74c39420 <line:913:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c39440 <line:914:3> Text=" "
|   |-VerbatimLineComment 0x559b74c39490 <col:4, col:21> Text=" K-THREAD-014"
|   `-ParagraphComment 0x559b74c39500 <line:915:1>
|     `-TextComment 0x559b74c394d0 <col:1> Text=" "
|-FunctionDecl 0x559b74b82090 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:925:37> col:19 k_current_get 'k_tid_t (void)' static inline
| `-FullComment 0x559b74c398a0 <line:919:3, line:924:1>
|   |-ParagraphComment 0x559b74c39610 <line:919:3>
|   | `-TextComment 0x559b74c395e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c39630 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x559b74c39690 <col:10, col:46>
|   |   `-TextComment 0x559b74c39660 <col:10, col:46> Text=" Get thread ID of the current thread."
|   |-ParagraphComment 0x559b74c396e0 <line:921:3>
|   | `-TextComment 0x559b74c396b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c39700 <col:4, col:32> Name="return"
|   | `-ParagraphComment 0x559b74c39760 <col:11, col:32>
|   |   `-TextComment 0x559b74c39730 <col:11, col:32> Text=" ID of current thread."
|   |-ParagraphComment 0x559b74c397b0 <line:923:3>
|   | `-TextComment 0x559b74c39780 <col:3> Text=" "
|   |-VerbatimLineComment 0x559b74c397d0 <col:4, col:21> Text=" K-THREAD-013"
|   `-ParagraphComment 0x559b74c39840 <line:924:1>
|     `-TextComment 0x559b74c39810 <col:1> Text=" "
|-FunctionDecl 0x559b74b821f0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:942:45> col:16 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x559b74b82168 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x559b74c39e40 <line:928:3, line:941:1>
|   |-ParagraphComment 0x559b74c39940 <line:928:3>
|   | `-TextComment 0x559b74c39910 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c39960 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x559b74c399c0 <col:10, col:25>
|   |   `-TextComment 0x559b74c39990 <col:10, col:25> Text=" Abort a thread."
|   |-ParagraphComment 0x559b74c39b50 <line:930:3, line:935:38>
|   | |-TextComment 0x559b74c399e0 <line:930:3, col:47> Text=" This routine permanently stops execution of "
|   | |-InlineCommandComment 0x559b74c39a30 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="thread."
|   | |-TextComment 0x559b74c39a50 <col:58, col:77> Text=" The thread is taken"
|   | |-TextComment 0x559b74c39a70 <line:931:3, col:73> Text=" off all kernel queues it is part of (i.e. the ready queue, the timeout"
|   | |-TextComment 0x559b74c39a90 <line:932:3, col:75> Text=" queue, or a kernel object wait queue). However, any kernel resources the"
|   | |-TextComment 0x559b74c39ab0 <line:933:3, col:72> Text=" thread might currently own (such as mutexes or memory blocks) are not"
|   | |-TextComment 0x559b74c39ad0 <line:934:3, col:77> Text=" released. It is the responsibility of the caller of this routine to ensure"
|   | `-TextComment 0x559b74c39af0 <line:935:3, col:38> Text=" all necessary cleanup is performed."
|   |-ParagraphComment 0x559b74c39ba0 <line:937:3>
|   | `-TextComment 0x559b74c39b70 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c39bc0 <col:4, col:39> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x559b74c39c50 <col:17, col:39>
|   |   `-TextComment 0x559b74c39c20 <col:17, col:39> Text=" ID of thread to abort."
|   |-ParagraphComment 0x559b74c39ca0 <line:939:3>
|   | `-TextComment 0x559b74c39c70 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c39cc0 <col:4, line:940:3> Name="return"
|   | `-ParagraphComment 0x559b74c39d40 <line:939:11, line:940:3>
|   |   |-TextComment 0x559b74c39cf0 <line:939:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c39d10 <line:940:3> Text=" "
|   |-VerbatimLineComment 0x559b74c39d60 <col:4, col:21> Text=" K-THREAD-012"
|   `-ParagraphComment 0x559b74c39dd0 <line:941:1>
|     `-TextComment 0x559b74c39da0 <col:1> Text=" "
|-FunctionDecl 0x559b74b82360 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:955:45> col:16 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x559b74b822d8 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x559b74c3a210 <line:946:3, line:954:1>
|   |-ParagraphComment 0x559b74c39ee0 <line:946:3>
|   | `-TextComment 0x559b74c39eb0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c39f00 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x559b74c39f60 <col:10, col:34>
|   |   `-TextComment 0x559b74c39f30 <col:10, col:34> Text=" Start an inactive thread"
|   |-ParagraphComment 0x559b74c3a000 <line:948:3, line:950:9>
|   | |-TextComment 0x559b74c39f80 <line:948:3, col:73> Text=" If a thread was created with K_FOREVER in the delay parameter, it will"
|   | |-TextComment 0x559b74c39fa0 <line:949:3, col:69> Text=" not be added to the scheduling queue until this function is called"
|   | `-TextComment 0x559b74c39fc0 <line:950:3, col:9> Text=" on it."
|   |-ParagraphComment 0x559b74c3a050 <line:952:3>
|   | `-TextComment 0x559b74c3a020 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c3a070 <col:4, line:953:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x559b74c3a120 <line:952:17, line:953:3>
|   |   |-TextComment 0x559b74c3a0d0 <line:952:17, col:32> Text=" thread to start"
|   |   `-TextComment 0x559b74c3a0f0 <line:953:3> Text=" "
|   |-VerbatimLineComment 0x559b74c3a140 <col:4, col:21> Text=" K-THREAD-011"
|   `-ParagraphComment 0x559b74c3a1b0 <line:954:1>
|     `-TextComment 0x559b74c3a180 <col:1> Text=" "
|-RecordDecl 0x559b74b82438 <line:964:1, line:977:1> line:964:8 struct _static_thread_data definition
| |-FieldDecl 0x559b74b82508 <line:965:2, col:19> col:19 init_thread 'struct k_thread *'
| |-FieldDecl 0x559b74b82560 <line:966:2, col:20> col:20 init_stack 'k_thread_stack_t *'
| |-FieldDecl 0x559b74b825c0 <line:967:2, col:15> col:15 init_stack_size 'unsigned int'
| |-FieldDecl 0x559b74b82618 <line:968:2, col:19> col:19 init_entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-FieldDecl 0x559b74b82678 <line:969:2, col:8> col:8 init_p1 'void *'
| |-FieldDecl 0x559b74b826d8 <line:970:2, col:8> col:8 init_p2 'void *'
| |-FieldDecl 0x559b74b82738 <line:971:2, col:8> col:8 init_p3 'void *'
| |-FieldDecl 0x559b74b82798 <line:972:2, col:6> col:6 init_prio 'int'
| |-FieldDecl 0x559b74b827f0 <line:973:2, col:8> col:8 init_options 'u32_t':'unsigned int'
| |-FieldDecl 0x559b74b82848 <line:974:2, col:8> col:8 init_delay 's32_t':'int'
| |-FieldDecl 0x559b74b82930 <line:975:2, col:25> col:9 init_abort 'void (*)(void)'
| `-FieldDecl 0x559b74b82990 <line:976:2, col:14> col:14 init_name 'const char *'
|-FunctionDecl 0x559b74b82b88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1053:51> col:15 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x559b74b82a78 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x559b74c3a720 <line:1044:3, line:1052:1>
|   |-ParagraphComment 0x559b74c3a2b0 <line:1044:3>
|   | `-TextComment 0x559b74c3a280 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3a2d0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x559b74c3a330 <col:10, col:34>
|   |   `-TextComment 0x559b74c3a300 <col:10, col:34> Text=" Get a thread's priority."
|   |-ParagraphComment 0x559b74c3a3d0 <line:1046:3, col:39>
|   | |-TextComment 0x559b74c3a350 <col:3, col:37> Text=" This routine gets the priority of "
|   | `-InlineCommandComment 0x559b74c3a3a0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x559b74c3a420 <line:1048:3>
|   | `-TextComment 0x559b74c3a3f0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c3a440 <col:4, col:55> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x559b74c3a4d0 <col:17, col:55>
|   |   `-TextComment 0x559b74c3a4a0 <col:17, col:55> Text=" ID of thread whose priority is needed."
|   |-ParagraphComment 0x559b74c3a520 <line:1050:3>
|   | `-TextComment 0x559b74c3a4f0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3a540 <col:4, line:1051:3> Name="return"
|   | `-ParagraphComment 0x559b74c3a620 <line:1050:11, line:1051:3>
|   |   |-TextComment 0x559b74c3a570 <line:1050:11, col:23> Text=" Priority of "
|   |   |-InlineCommandComment 0x559b74c3a5c0 <col:24, col:25> Name="a" RenderEmphasized Arg[0]="thread."
|   |   `-TextComment 0x559b74c3a5e0 <line:1051:3> Text=" "
|   |-VerbatimLineComment 0x559b74c3a640 <col:4, col:21> Text=" K-THREAD-009"
|   `-ParagraphComment 0x559b74c3a6b0 <line:1052:1>
|     `-TextComment 0x559b74c3a680 <col:1> Text=" "
|-FunctionDecl 0x559b74b82df0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1083:62> col:16 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x559b74b82c68 <col:38, col:46> col:46 thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x559b74b82ce0 <col:54, col:58> col:58 prio 'int'
| `-FullComment 0x559b74c3b0f0 <line:1056:3, line:1082:1>
|   |-ParagraphComment 0x559b74c3a7c0 <line:1056:3>
|   | `-TextComment 0x559b74c3a790 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3a7e0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x559b74c3a840 <col:10, col:34>
|   |   `-TextComment 0x559b74c3a810 <col:10, col:34> Text=" Set a thread's priority."
|   |-ParagraphComment 0x559b74c3a8e0 <line:1058:3, col:54>
|   | |-TextComment 0x559b74c3a860 <col:3, col:52> Text=" This routine immediately changes the priority of "
|   | `-InlineCommandComment 0x559b74c3a8b0 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x559b74c3a9e0 <line:1060:3, line:1061:10>
|   | |-TextComment 0x559b74c3a900 <line:1060:3, col:64> Text=" Rescheduling can occur immediately depending on the priority "
|   | |-InlineCommandComment 0x559b74c3a960 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x559b74c3a980 <col:74, col:76> Text=" is"
|   | `-TextComment 0x559b74c3a9a0 <line:1061:3, col:10> Text=" set to:"
|   |-ParagraphComment 0x559b74c3aad0 <line:1063:3, line:1064:75>
|   | |-TextComment 0x559b74c3aa00 <line:1063:3, col:71> Text=" - If its priority is raised above the priority of the caller of this"
|   | |-TextComment 0x559b74c3aa20 <line:1064:3, col:44> Text=" function, and the caller is preemptible, "
|   | |-InlineCommandComment 0x559b74c3aa70 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x559b74c3aa90 <col:54, col:75> Text=" will be scheduled in."
|   |-ParagraphComment 0x559b74c3ab70 <line:1066:3, line:1068:41>
|   | |-TextComment 0x559b74c3aaf0 <line:1066:3, col:75> Text=" - If the caller operates on itself, it lowers its priority below that of"
|   | |-TextComment 0x559b74c3ab10 <line:1067:3, col:76> Text=" other threads in the system, and the caller is preemptible, the thread of"
|   | `-TextComment 0x559b74c3ab30 <line:1068:3, col:41> Text=" highest priority will be scheduled in."
|   |-ParagraphComment 0x559b74c3ac10 <line:1070:3, line:1072:20>
|   | |-TextComment 0x559b74c3ab90 <line:1070:3, col:74> Text=" Priority can be assigned in the range of -CONFIG_NUM_COOP_PRIORITIES to"
|   | |-TextComment 0x559b74c3abb0 <line:1071:3, col:76> Text=" CONFIG_NUM_PREEMPT_PRIORITIES-1, where -CONFIG_NUM_COOP_PRIORITIES is the"
|   | `-TextComment 0x559b74c3abd0 <line:1072:3, col:20> Text=" highest priority."
|   |-ParagraphComment 0x559b74c3ac60 <line:1074:3>
|   | `-TextComment 0x559b74c3ac30 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c3ac80 <col:4, line:1075:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x559b74c3ad30 <line:1074:17, line:1075:3>
|   |   |-TextComment 0x559b74c3ace0 <line:1074:17, col:58> Text=" ID of thread whose priority is to be set."
|   |   `-TextComment 0x559b74c3ad00 <line:1075:3> Text=" "
|   |-ParamCommandComment 0x559b74c3ad50 <col:4, col:28> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x559b74c3ade0 <col:15, col:28>
|   |   `-TextComment 0x559b74c3adb0 <col:15, col:28> Text=" New priority."
|   |-ParagraphComment 0x559b74c3ae30 <line:1077:3>
|   | `-TextComment 0x559b74c3ae00 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3ae50 <col:4, line:1078:57> Name="warning"
|   | `-ParagraphComment 0x559b74c3aed0 <line:1077:12, line:1078:57>
|   |   |-TextComment 0x559b74c3ae80 <line:1077:12, col:73> Text=" Changing the priority of a thread currently involved in mutex"
|   |   `-TextComment 0x559b74c3aea0 <line:1078:3, col:57> Text=" priority inheritance may result in undefined behavior."
|   |-ParagraphComment 0x559b74c3af20 <line:1080:3>
|   | `-TextComment 0x559b74c3aef0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3af40 <col:4, line:1081:3> Name="return"
|   | `-ParagraphComment 0x559b74c3afc0 <line:1080:11, line:1081:3>
|   |   |-TextComment 0x559b74c3af70 <line:1080:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c3af90 <line:1081:3> Text=" "
|   |-VerbatimLineComment 0x559b74c3afe0 <col:4, col:21> Text=" K-THREAD-008"
|   `-ParagraphComment 0x559b74c3b050 <line:1082:1>
|     `-TextComment 0x559b74c3b020 <col:1> Text=" "
|-FunctionDecl 0x559b74b83670 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1213:47> col:16 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x559b74b82ed8 <col:33, col:41> col:41 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x559b74c3b7e0 <line:1196:3, line:1212:1>
|   |-ParagraphComment 0x559b74c3b190 <line:1196:3>
|   | `-TextComment 0x559b74c3b160 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3b1b0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x559b74c3b210 <col:10, col:27>
|   |   `-TextComment 0x559b74c3b1e0 <col:10, col:27> Text=" Suspend a thread."
|   |-ParagraphComment 0x559b74c3b420 <line:1198:3, line:1204:48>
|   | |-TextComment 0x559b74c3b230 <line:1198:3, col:58> Text=" This routine prevents the kernel scheduler from making "
|   | |-InlineCommandComment 0x559b74c3b280 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x559b74c3b2a0 <line:1199:3, col:56> Text=" the current thread. All other internal operations on "
|   | |-InlineCommandComment 0x559b74c3b2f0 <col:57, col:58> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x559b74c3b310 <col:66, col:69> Text=" are"
|   | |-TextComment 0x559b74c3b330 <line:1200:3, col:68> Text=" still performed; for example, kernel objects it is waiting on are"
|   | |-TextComment 0x559b74c3b350 <line:1201:3, col:55> Text=" still handed to it.  Note that any existing timeouts"
|   | |-TextComment 0x559b74c3b370 <line:1202:3, col:66> Text=" (e.g. k_sleep(), or a timeout argument to k_sem_take() et. al.)"
|   | |-TextComment 0x559b74c3b390 <line:1203:3, col:62> Text=" will be canceled.  On resume, the thread will begin running"
|   | `-TextComment 0x559b74c3b3b0 <line:1204:3, col:48> Text=" immediately and return from the blocked call."
|   |-ParagraphComment 0x559b74c3b4f0 <line:1206:3, col:64>
|   | |-TextComment 0x559b74c3b440 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x559b74c3b490 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x559b74c3b4b0 <col:16, col:64> Text=" is already suspended, the routine has no effect."
|   |-ParagraphComment 0x559b74c3b540 <line:1208:3>
|   | `-TextComment 0x559b74c3b510 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c3b560 <col:4, col:41> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x559b74c3b5f0 <col:17, col:41>
|   |   `-TextComment 0x559b74c3b5c0 <col:17, col:41> Text=" ID of thread to suspend."
|   |-ParagraphComment 0x559b74c3b640 <line:1210:3>
|   | `-TextComment 0x559b74c3b610 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3b660 <col:4, line:1211:3> Name="return"
|   | `-ParagraphComment 0x559b74c3b6e0 <line:1210:11, line:1211:3>
|   |   |-TextComment 0x559b74c3b690 <line:1210:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c3b6b0 <line:1211:3> Text=" "
|   |-VerbatimLineComment 0x559b74c3b700 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x559b74c3b770 <line:1212:1>
|     `-TextComment 0x559b74c3b740 <col:1> Text=" "
|-FunctionDecl 0x559b74b837e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1228:46> col:16 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x559b74b83758 <col:32, col:40> col:40 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x559b74c3bdb0 <line:1216:3, line:1227:1>
|   |-ParagraphComment 0x559b74c3b880 <line:1216:3>
|   | `-TextComment 0x559b74c3b850 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3b8a0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x559b74c3b900 <col:10, col:36>
|   |   `-TextComment 0x559b74c3b8d0 <col:10, col:36> Text=" Resume a suspended thread."
|   |-ParagraphComment 0x559b74c3b9f0 <line:1218:3, line:1219:50>
|   | |-TextComment 0x559b74c3b920 <line:1218:3, col:52> Text=" This routine allows the kernel scheduler to make "
|   | |-InlineCommandComment 0x559b74c3b970 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x559b74c3b990 <col:62, col:73> Text=" the current"
|   | `-TextComment 0x559b74c3b9b0 <line:1219:3, col:50> Text=" thread, when it is next eligible for that role."
|   |-ParagraphComment 0x559b74c3bac0 <line:1221:3, col:70>
|   | |-TextComment 0x559b74c3ba10 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x559b74c3ba60 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x559b74c3ba80 <col:16, col:70> Text=" is not currently suspended, the routine has no effect."
|   |-ParagraphComment 0x559b74c3bb10 <line:1223:3>
|   | `-TextComment 0x559b74c3bae0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c3bb30 <col:4, col:40> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x559b74c3bbc0 <col:17, col:40>
|   |   `-TextComment 0x559b74c3bb90 <col:17, col:40> Text=" ID of thread to resume."
|   |-ParagraphComment 0x559b74c3bc10 <line:1225:3>
|   | `-TextComment 0x559b74c3bbe0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3bc30 <col:4, line:1226:3> Name="return"
|   | `-ParagraphComment 0x559b74c3bcb0 <line:1225:11, line:1226:3>
|   |   |-TextComment 0x559b74c3bc60 <line:1225:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c3bc80 <line:1226:3> Text=" "
|   |-VerbatimLineComment 0x559b74c3bcd0 <col:4, col:21> Text=" K-THREAD-006"
|   `-ParagraphComment 0x559b74c3bd40 <line:1227:1>
|     `-TextComment 0x559b74c3bd10 <col:1> Text=" "
|-FunctionDecl 0x559b74b83a50 <line:1258:1, col:57> col:13 k_sched_time_slice_set 'void (s32_t, int)' extern
| |-ParmVarDecl 0x559b74b838c8 <col:36, col:42> col:42 slice 's32_t':'int'
| |-ParmVarDecl 0x559b74b83940 <col:49, col:53> col:53 prio 'int'
| `-FullComment 0x559b74c3c700 <line:1231:3, line:1256:14>
|   |-ParagraphComment 0x559b74c3be50 <line:1231:3>
|   | `-TextComment 0x559b74c3be20 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3be70 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559b74c3bed0 <col:10, col:44>
|   |   `-TextComment 0x559b74c3bea0 <col:10, col:44> Text=" Set time-slicing period and scope."
|   |-ParagraphComment 0x559b74c3bf40 <line:1233:3, line:1234:23>
|   | |-TextComment 0x559b74c3bef0 <line:1233:3, col:72> Text=" This routine specifies how the scheduler will perform time slicing of"
|   | `-TextComment 0x559b74c3bf10 <line:1234:3, col:23> Text=" preemptible threads."
|   |-ParagraphComment 0x559b74c3c130 <line:1236:3, line:1240:74>
|   | |-TextComment 0x559b74c3bf60 <line:1236:3, col:27> Text=" To enable time slicing, "
|   | |-InlineCommandComment 0x559b74c3bfb0 <col:28, col:29> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x559b74c3bfd0 <col:36, col:67> Text=" must be non-zero. The scheduler"
|   | |-TextComment 0x559b74c3bff0 <line:1237:3, col:69> Text=" ensures that no thread runs for more than the specified time limit"
|   | |-TextComment 0x559b74c3c010 <line:1238:3, col:71> Text=" before other threads of that priority are given a chance to execute."
|   | |-TextComment 0x559b74c3c030 <line:1239:3, col:44> Text=" Any thread whose priority is higher than "
|   | |-InlineCommandComment 0x559b74c3c080 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="prio"
|   | |-TextComment 0x559b74c3c0a0 <col:52, col:72> Text=" is exempted, and may"
|   | `-TextComment 0x559b74c3c0c0 <line:1240:3, col:74> Text=" execute as long as desired without being preempted due to time slicing."
|   |-ParagraphComment 0x559b74c3c1f0 <line:1242:3, line:1245:32>
|   | |-TextComment 0x559b74c3c150 <line:1242:3, col:80> Text=" Time slicing only limits the maximum amount of time a thread may continuously"
|   | |-TextComment 0x559b74c3c170 <line:1243:3, col:74> Text=" execute. Once the scheduler selects a thread for execution, there is no"
|   | |-TextComment 0x559b74c3c190 <line:1244:3, col:79> Text=" minimum guaranteed time the thread will execute before threads of greater or"
|   | `-TextComment 0x559b74c3c1b0 <line:1245:3, col:32> Text=" equal priority are scheduled."
|   |-ParagraphComment 0x559b74c3c290 <line:1247:3, line:1249:46>
|   | |-TextComment 0x559b74c3c210 <line:1247:3, col:68> Text=" When the current thread is the only one of that priority eligible"
|   | |-TextComment 0x559b74c3c230 <line:1248:3, col:71> Text=" for execution, this routine has no effect; the thread is immediately"
|   | `-TextComment 0x559b74c3c250 <line:1249:3, col:46> Text=" rescheduled after the slice period expires."
|   |-ParagraphComment 0x559b74c3c3e0 <line:1251:3, col:65>
|   | |-TextComment 0x559b74c3c2b0 <col:3, col:36> Text=" To disable timeslicing, set both "
|   | |-InlineCommandComment 0x559b74c3c300 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x559b74c3c320 <col:45, col:49> Text=" and "
|   | |-InlineCommandComment 0x559b74c3c370 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="prio"
|   | `-TextComment 0x559b74c3c390 <col:57, col:65> Text=" to zero."
|   |-ParagraphComment 0x559b74c3c430 <line:1253:3>
|   | `-TextComment 0x559b74c3c400 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c3c450 <col:4, line:1254:3> [in] implicitly Param="slice" ParamIndex=0
|   | `-ParagraphComment 0x559b74c3c500 <line:1253:16, line:1254:3>
|   |   |-TextComment 0x559b74c3c4b0 <line:1253:16, col:60> Text=" Maximum time slice length (in milliseconds)."
|   |   `-TextComment 0x559b74c3c4d0 <line:1254:3> Text=" "
|   |-ParamCommandComment 0x559b74c3c520 <col:4, col:71> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x559b74c3c5b0 <col:15, col:71>
|   |   `-TextComment 0x559b74c3c580 <col:15, col:71> Text=" Highest thread priority level eligible for time slicing."
|   |-ParagraphComment 0x559b74c3c600 <line:1256:3>
|   | `-TextComment 0x559b74c3c5d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c3c620 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c3c680 <col:11, col:14>
|       `-TextComment 0x559b74c3c650 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74b83c18 <line:1278:1, col:29> col:13 k_is_in_isr 'bool (void)' extern
| `-FullComment 0x559b74c3cb40 <line:1268:3, line:1276:37>
|   |-ParagraphComment 0x559b74c3c7a0 <line:1268:3>
|   | `-TextComment 0x559b74c3c770 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3c7c0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x559b74c3c820 <col:10, col:58>
|   |   `-TextComment 0x559b74c3c7f0 <col:10, col:58> Text=" Determine if code is running at interrupt level."
|   |-ParagraphComment 0x559b74c3c890 <line:1270:3, line:1271:36>
|   | |-TextComment 0x559b74c3c840 <line:1270:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x559b74c3c860 <line:1271:3, col:36> Text=" whether it is a thread or an ISR."
|   |-ParagraphComment 0x559b74c3c8e0 <line:1273:3>
|   | `-TextComment 0x559b74c3c8b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3c900 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c3c970 <col:9, col:31>
|   |   `-TextComment 0x559b74c3c940 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c3c9c0 <line:1275:3>
|   | `-TextComment 0x559b74c3c990 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3c9e0 <col:4, line:1276:3> Name="return"
|   | `-ParagraphComment 0x559b74c3ca60 <line:1275:11, line:1276:3>
|   |   |-TextComment 0x559b74c3ca10 <line:1275:11, col:40> Text=" false if invoked by a thread."
|   |   `-TextComment 0x559b74c3ca30 <line:1276:3> Text=" "
|   `-BlockCommandComment 0x559b74c3ca80 <col:4, col:37> Name="return"
|     `-ParagraphComment 0x559b74c3cae0 <col:11, col:37>
|       `-TextComment 0x559b74c3cab0 <col:11, col:37> Text=" true if invoked by an ISR."
|-FunctionDecl 0x559b74b83d80 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1296:39> col:15 k_is_preempt_thread 'int (void)' static inline
| `-FullComment 0x559b74c3d050 <line:1281:3, line:1294:55>
|   |-ParagraphComment 0x559b74c3cbe0 <line:1281:3>
|   | `-TextComment 0x559b74c3cbb0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3cc00 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x559b74c3cc60 <col:10, col:63>
|   |   `-TextComment 0x559b74c3cc30 <col:10, col:63> Text=" Determine if code is running in a preemptible thread."
|   |-ParagraphComment 0x559b74c3cd00 <line:1283:3, line:1285:52>
|   | |-TextComment 0x559b74c3cc80 <line:1283:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | |-TextComment 0x559b74c3cca0 <line:1284:3, col:78> Text=" whether it can be preempted by another thread. The routine returns a 'true'"
|   | `-TextComment 0x559b74c3ccc0 <line:1285:3, col:52> Text=" value if all of the following conditions are met:"
|   |-ParagraphComment 0x559b74c3cda0 <line:1287:3, line:1289:45>
|   | |-TextComment 0x559b74c3cd20 <line:1287:3, col:49> Text=" - The code is running in a thread, not at ISR."
|   | |-TextComment 0x559b74c3cd40 <line:1288:3, col:55> Text=" - The thread's priority is in the preemptible range."
|   | `-TextComment 0x559b74c3cd60 <line:1289:3, col:45> Text=" - The thread has not locked the scheduler."
|   |-ParagraphComment 0x559b74c3cdf0 <line:1291:3>
|   | `-TextComment 0x559b74c3cdc0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3ce10 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c3ce70 <col:9, col:31>
|   |   `-TextComment 0x559b74c3ce40 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c3cec0 <line:1293:3>
|   | `-TextComment 0x559b74c3ce90 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3cee0 <col:4, line:1294:3> Name="return"
|   | `-ParagraphComment 0x559b74c3cf60 <line:1293:11, line:1294:3>
|   |   |-TextComment 0x559b74c3cf10 <line:1293:11, col:61> Text=" 0 if invoked by an ISR or by a cooperative thread."
|   |   `-TextComment 0x559b74c3cf30 <line:1294:3> Text=" "
|   `-BlockCommandComment 0x559b74c3cf80 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x559b74c3cfe0 <col:11, col:55>
|       `-TextComment 0x559b74c3cfb0 <col:11, col:55> Text=" Non-zero if invoked by a preemptible thread."
|-FunctionDecl 0x559b74b83ed8 <line:1309:1, line:1314:1> line:1309:20 k_is_pre_kernel 'bool (void)' static inline
| |-CompoundStmt 0x559b74b84128 <line:1310:1, line:1314:1>
| | |-DeclStmt 0x559b74b83ff8 <line:1311:2, col:31>
| | | `-VarDecl 0x559b74b83f88 parent 0x559b749d8918 <col:2, col:14> col:14 used z_sys_post_kernel 'bool' extern
| | `-ReturnStmt 0x559b74b84088 <line:1313:2, col:10>
| |   `-ImplicitCastExpr 0x559b74b84070 <col:9, col:10> 'bool' <IntegralToBoolean>
| |     `-UnaryOperator 0x559b74b84050 <col:9, col:10> 'int' prefix '!'
| |       `-ImplicitCastExpr 0x559b74b84038 <col:10> 'bool' <LValueToRValue>
| |         `-DeclRefExpr 0x559b74b84010 <col:10> 'bool' lvalue Var 0x559b74b83f88 'z_sys_post_kernel' 'bool'
| `-FullComment 0x559b74c3d480 <line:1299:3, line:1307:67>
|   |-ParagraphComment 0x559b74c3d0f0 <line:1299:3>
|   | `-TextComment 0x559b74c3d0c0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3d110 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x559b74c3d170 <col:10, col:64>
|   |   `-TextComment 0x559b74c3d140 <col:10, col:64> Text=" Test whether startup is in the before-main-task phase."
|   |-ParagraphComment 0x559b74c3d1e0 <line:1301:3, line:1302:62>
|   | |-TextComment 0x559b74c3d190 <line:1301:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x559b74c3d1b0 <line:1302:3, col:62> Text=" whether it being invoked before the kernel is fully active."
|   |-ParagraphComment 0x559b74c3d230 <line:1304:3>
|   | `-TextComment 0x559b74c3d200 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3d250 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c3d2b0 <col:9, col:31>
|   |   `-TextComment 0x559b74c3d280 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c3d300 <line:1306:3>
|   | `-TextComment 0x559b74c3d2d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3d320 <col:4, line:1307:3> Name="return"
|   | `-ParagraphComment 0x559b74c3d3a0 <line:1306:11, line:1307:3>
|   |   |-TextComment 0x559b74c3d350 <line:1306:11, col:60> Text=" true if invoked before post-kernel initialization"
|   |   `-TextComment 0x559b74c3d370 <line:1307:3> Text=" "
|   `-BlockCommandComment 0x559b74c3d3c0 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x559b74c3d420 <col:11, col:67>
|       `-TextComment 0x559b74c3d3f0 <col:11, col:67> Text=" false if invoked during/after post-kernel initialization"
|-FunctionDecl 0x559b74b841d8 <line:1343:1, col:30> col:13 k_sched_lock 'void (void)' extern
| `-FullComment 0x559b74c3d950 <line:1326:3, line:1341:14>
|   |-ParagraphComment 0x559b74c3d520 <line:1326:3>
|   | `-TextComment 0x559b74c3d4f0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3d540 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x559b74c3d5a0 <col:10, col:29>
|   |   `-TextComment 0x559b74c3d570 <col:10, col:29> Text=" Lock the scheduler."
|   |-ParagraphComment 0x559b74c3d690 <line:1328:3, line:1332:78>
|   | |-TextComment 0x559b74c3d5c0 <line:1328:3, col:75> Text=" This routine prevents the current thread from being preempted by another"
|   | |-TextComment 0x559b74c3d5e0 <line:1329:3, col:75> Text=" thread by instructing the scheduler to treat it as a cooperative thread."
|   | |-TextComment 0x559b74c3d600 <line:1330:3, col:74> Text=" If the thread subsequently performs an operation that makes it unready,"
|   | |-TextComment 0x559b74c3d620 <line:1331:3, col:72> Text=" it will be context switched out in the normal manner. When the thread"
|   | `-TextComment 0x559b74c3d640 <line:1332:3, col:78> Text=" again becomes the current thread, its non-preemptible status is maintained."
|   |-ParagraphComment 0x559b74c3d6e0 <line:1334:3, col:42>
|   | `-TextComment 0x559b74c3d6b0 <col:3, col:42> Text=" This routine can be called recursively."
|   |-ParagraphComment 0x559b74c3d730 <line:1336:3>
|   | `-TextComment 0x559b74c3d700 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3d750 <col:4, line:1339:68> Name="note"
|   | `-ParagraphComment 0x559b74c3d820 <line:1336:9, line:1339:68>
|   |   |-TextComment 0x559b74c3d780 <line:1336:9, col:68> Text=" k_sched_lock() and k_sched_unlock() should normally be used"
|   |   |-TextComment 0x559b74c3d7a0 <line:1337:3, col:72> Text=" when the operation being performed can be safely interrupted by ISRs."
|   |   |-TextComment 0x559b74c3d7c0 <line:1338:3, col:70> Text=" However, if the amount of processing involved is very small, better"
|   |   `-TextComment 0x559b74c3d7e0 <line:1339:3, col:68> Text=" performance may be obtained by using irq_lock() and irq_unlock()."
|   |-ParagraphComment 0x559b74c3d870 <line:1341:3>
|   | `-TextComment 0x559b74c3d840 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c3d890 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c3d8f0 <col:11, col:14>
|       `-TextComment 0x559b74c3d8c0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74b84338 <line:1354:1, col:32> col:13 k_sched_unlock 'void (void)' extern
| `-FullComment 0x559b74c3dc30 <line:1346:3, line:1352:14>
|   |-ParagraphComment 0x559b74c3d9f0 <line:1346:3>
|   | `-TextComment 0x559b74c3d9c0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3da10 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x559b74c3da70 <col:10, col:31>
|   |   `-TextComment 0x559b74c3da40 <col:10, col:31> Text=" Unlock the scheduler."
|   |-ParagraphComment 0x559b74c3db10 <line:1348:3, line:1350:41>
|   | |-TextComment 0x559b74c3da90 <line:1348:3, col:73> Text=" This routine reverses the effect of a previous call to k_sched_lock()."
|   | |-TextComment 0x559b74c3dab0 <line:1349:3, col:77> Text=" A thread must call the routine once for each time it called k_sched_lock()"
|   | `-TextComment 0x559b74c3dad0 <line:1350:3, col:41> Text=" before the thread becomes preemptible."
|   |-ParagraphComment 0x559b74c3db60 <line:1352:3>
|   | `-TextComment 0x559b74c3db30 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c3db80 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c3dbe0 <col:11, col:14>
|       `-TextComment 0x559b74c3dbb0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74b844a8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1371:52> col:16 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x559b74b84420 <col:41, col:47> col:47 value 'void *'
| `-FullComment 0x559b74c3e1c0 <line:1357:3, line:1370:1>
|   |-ParagraphComment 0x559b74c3dcd0 <line:1357:3>
|   | `-TextComment 0x559b74c3dca0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3dcf0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c3dd50 <col:10, col:43>
|   |   `-TextComment 0x559b74c3dd20 <col:10, col:43> Text=" Set current thread's custom data."
|   |-ParagraphComment 0x559b74c3ddf0 <line:1359:3, col:71>
|   | |-TextComment 0x559b74c3dd70 <col:3, col:63> Text=" This routine sets the custom data for the current thread to "
|   | |-TextComment 0x559b74c3dd90 <col:64> Text="@"
|   | `-TextComment 0x559b74c3ddb0 <col:65, col:71> Text=" value."
|   |-ParagraphComment 0x559b74c3de90 <line:1361:3, line:1363:44>
|   | |-TextComment 0x559b74c3de10 <line:1361:3, col:72> Text=" Custom data is not used by the kernel itself, and is freely available"
|   | |-TextComment 0x559b74c3de30 <line:1362:3, col:68> Text=" for a thread to use as it sees fit. It can be used as a framework"
|   | `-TextComment 0x559b74c3de50 <line:1363:3, col:44> Text=" upon which to build thread-local storage."
|   |-ParagraphComment 0x559b74c3dee0 <line:1365:3>
|   | `-TextComment 0x559b74c3deb0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c3df00 <col:4, col:38> [in] implicitly Param="value" ParamIndex=0
|   | `-ParagraphComment 0x559b74c3df90 <col:16, col:38>
|   |   `-TextComment 0x559b74c3df60 <col:16, col:38> Text=" New custom data value."
|   |-ParagraphComment 0x559b74c3dfe0 <line:1367:3>
|   | `-TextComment 0x559b74c3dfb0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3e000 <col:4, col:14> Name="return"
|   | `-ParagraphComment 0x559b74c3e060 <col:11, col:14>
|   |   `-TextComment 0x559b74c3e030 <col:11, col:14> Text=" N/A"
|   |-ParagraphComment 0x559b74c3e0b0 <line:1369:3>
|   | `-TextComment 0x559b74c3e080 <col:3> Text=" "
|   |-VerbatimLineComment 0x559b74c3e0d0 <col:4, col:21> Text=" K-THREAD-016"
|   `-ParagraphComment 0x559b74c3e140 <line:1370:1>
|     `-TextComment 0x559b74c3e110 <col:1> Text=" "
|-FunctionDecl 0x559b74b84680 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1381:46> col:17 k_thread_custom_data_get 'void *(void)' static inline
| `-FullComment 0x559b74c3e510 <line:1374:3, line:1380:1>
|   |-ParagraphComment 0x559b74c3e260 <line:1374:3>
|   | `-TextComment 0x559b74c3e230 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3e280 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c3e2e0 <col:10, col:43>
|   |   `-TextComment 0x559b74c3e2b0 <col:10, col:43> Text=" Get current thread's custom data."
|   |-ParagraphComment 0x559b74c3e330 <line:1376:3, col:63>
|   | `-TextComment 0x559b74c3e300 <col:3, col:63> Text=" This routine returns the custom data for the current thread."
|   |-ParagraphComment 0x559b74c3e380 <line:1378:3>
|   | `-TextComment 0x559b74c3e350 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3e3a0 <col:4, line:1379:3> Name="return"
|   | `-ParagraphComment 0x559b74c3e420 <line:1378:11, line:1379:3>
|   |   |-TextComment 0x559b74c3e3d0 <line:1378:11, col:37> Text=" Current custom data value."
|   |   `-TextComment 0x559b74c3e3f0 <line:1379:3> Text=" "
|   |-VerbatimLineComment 0x559b74c3e440 <col:4, col:21> Text=" K-THREAD-007"
|   `-ParagraphComment 0x559b74c3e4b0 <line:1380:1>
|     `-TextComment 0x559b74c3e480 <col:1> Text=" "
|-FunctionDecl 0x559b74b848e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1396:69> col:15 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x559b74b84758 <col:33, col:41> col:41 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x559b74b847d0 <col:52, col:64> col:64 value 'const char *'
| `-FullComment 0x559b74c3eaf0 <line:1384:3, line:1394:39>
|   |-ParagraphComment 0x559b74c3e5b0 <line:1384:3>
|   | `-TextComment 0x559b74c3e580 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3e5d0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x559b74c3e630 <col:10, col:33>
|   |   `-TextComment 0x559b74c3e600 <col:10, col:33> Text=" Set current thread name"
|   |-ParagraphComment 0x559b74c3e6a0 <line:1386:3, line:1387:25>
|   | |-TextComment 0x559b74c3e650 <line:1386:3, col:75> Text=" Set the name of the thread to be used when THREAD_MONITOR is enabled for"
|   | `-TextComment 0x559b74c3e670 <line:1387:3, col:25> Text=" tracing and debugging."
|   |-ParagraphComment 0x559b74c3e6f0 <line:1389:3>
|   | `-TextComment 0x559b74c3e6c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c3e710 <col:4, line:1390:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x559b74c3e7c0 <line:1389:20, line:1390:3>
|   |   |-TextComment 0x559b74c3e770 <line:1389:20, col:73> Text=" Thread to set name, or NULL to set the current thread"
|   |   `-TextComment 0x559b74c3e790 <line:1390:3> Text=" "
|   `-ParamCommandComment 0x559b74c3e7e0 <col:4, line:1394:39> [in] implicitly Param="value" ParamIndex=1
|     `-ParagraphComment 0x559b74c3eaa0 <line:1390:16, line:1394:39>
|       |-TextComment 0x559b74c3e840 <line:1390:16, col:27> Text=" Name string"
|       |-TextComment 0x559b74c3e860 <line:1391:3> Text=" "
|       |-InlineCommandComment 0x559b74c3e8b0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x559b74c3e8d0 <col:11, col:23> Text=" 0 on success"
|       |-TextComment 0x559b74c3e8f0 <line:1392:3> Text=" "
|       |-InlineCommandComment 0x559b74c3e910 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x559b74c3e950 <col:11, col:59> Text=" -EFAULT Memory access error with supplied string"
|       |-TextComment 0x559b74c3e970 <line:1393:3> Text=" "
|       |-InlineCommandComment 0x559b74c3e990 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x559b74c3e9b0 <col:11, col:63> Text=" -ENOSYS Thread name configuration option not enabled"
|       |-TextComment 0x559b74c3e9d0 <line:1394:3> Text=" "
|       |-InlineCommandComment 0x559b74c3e9f0 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x559b74c3ea10 <col:11, col:39> Text=" -EINVAL Thread name too long"
|-FunctionDecl 0x559b74b84ae8 <line:1406:1, col:48> col:13 k_thread_name_get 'const char *(k_tid_t)'
| |-ParmVarDecl 0x559b74b849d8 <col:31, col:39> col:39 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x559b74c3ee20 <line:1399:3, line:1404:60>
|   |-ParagraphComment 0x559b74c3eb90 <line:1399:3>
|   | `-TextComment 0x559b74c3eb60 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3ebb0 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x559b74c3ec10 <col:10, col:25>
|   |   `-TextComment 0x559b74c3ebe0 <col:10, col:25> Text=" Get thread name"
|   |-ParagraphComment 0x559b74c3ec60 <line:1401:3, col:27>
|   | `-TextComment 0x559b74c3ec30 <col:3, col:27> Text=" Get the name of a thread"
|   |-ParagraphComment 0x559b74c3ecb0 <line:1403:3>
|   | `-TextComment 0x559b74c3ec80 <col:3> Text=" "
|   `-ParamCommandComment 0x559b74c3ecd0 <col:4, line:1404:60> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x559b74c3edd0 <line:1403:20, line:1404:60>
|       |-TextComment 0x559b74c3ed30 <line:1403:20, col:29> Text=" Thread ID"
|       |-TextComment 0x559b74c3ed50 <line:1404:3> Text=" "
|       |-InlineCommandComment 0x559b74c3ed70 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x559b74c3ed90 <col:11, col:60> Text=" Thread name, or NULL if configuration not enabled"
|-FunctionDecl 0x559b74b84de8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1420:17> line:1419:15 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x559b74b84bc8 <col:34, col:42> col:42 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x559b74b84c40 <col:53, col:59> col:59 buf 'char *'
| |-ParmVarDecl 0x559b74b84cb0 <line:1420:6, col:13> col:13 size 'size_t':'unsigned long'
| `-FullComment 0x559b74c3f410 <line:1409:3, line:1417:20>
|   |-ParagraphComment 0x559b74c3eec0 <line:1409:3>
|   | `-TextComment 0x559b74c3ee90 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3eee0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x559b74c3ef40 <col:10, col:53>
|   |   `-TextComment 0x559b74c3ef10 <col:10, col:53> Text=" Copy the thread name into a supplied buffer"
|   |-ParagraphComment 0x559b74c3ef90 <line:1411:3>
|   | `-TextComment 0x559b74c3ef60 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c3efb0 <col:4, line:1412:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x559b74c3f060 <line:1411:20, line:1412:3>
|   |   |-TextComment 0x559b74c3f010 <line:1411:20, col:53> Text=" Thread to obtain name information"
|   |   `-TextComment 0x559b74c3f030 <line:1412:3> Text=" "
|   |-ParamCommandComment 0x559b74c3f080 <col:4, line:1413:3> [in] implicitly Param="buf" ParamIndex=1
|   | `-ParagraphComment 0x559b74c3f130 <line:1412:14, line:1413:3>
|   |   |-TextComment 0x559b74c3f0e0 <line:1412:14, col:32> Text=" Destination buffer"
|   |   `-TextComment 0x559b74c3f100 <line:1413:3> Text=" "
|   `-ParamCommandComment 0x559b74c3f150 <col:4, line:1417:20> [in] implicitly Param="size" ParamIndex=2
|     `-ParagraphComment 0x559b74c3f3c0 <line:1413:15, line:1417:20>
|       |-TextComment 0x559b74c3f1b0 <line:1413:15, col:38> Text=" Destination buffer size"
|       |-TextComment 0x559b74c3f1d0 <line:1414:3> Text=" "
|       |-InlineCommandComment 0x559b74c3f1f0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x559b74c3f210 <col:11, col:47> Text=" -ENOSPC Destination buffer too small"
|       |-TextComment 0x559b74c3f230 <line:1415:3> Text=" "
|       |-InlineCommandComment 0x559b74c3f250 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x559b74c3f270 <col:11, col:38> Text=" -EFAULT Memory access error"
|       |-TextComment 0x559b74c3f290 <line:1416:3> Text=" "
|       |-InlineCommandComment 0x559b74c3f2b0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x559b74c3f2d0 <col:11, col:50> Text=" -ENOSYS Thread name feature not enabled"
|       |-TextComment 0x559b74c3f2f0 <line:1417:3> Text=" "
|       |-InlineCommandComment 0x559b74c3f310 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x559b74c3f330 <col:11, col:20> Text=" 0 Success"
|-FunctionDecl 0x559b74b84f68 <line:1430:1, col:49> col:13 k_thread_state_str 'const char *(k_tid_t)'
| |-ParmVarDecl 0x559b74b84ed8 <col:32, col:40> col:40 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x559b74c3f740 <line:1423:3, line:1428:61>
|   |-ParagraphComment 0x559b74c3f4b0 <line:1423:3>
|   | `-TextComment 0x559b74c3f480 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3f4d0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x559b74c3f530 <col:10, col:33>
|   |   `-TextComment 0x559b74c3f500 <col:10, col:33> Text=" Get thread state string"
|   |-ParagraphComment 0x559b74c3f580 <line:1425:3, col:45>
|   | `-TextComment 0x559b74c3f550 <col:3, col:45> Text=" Get the human friendly thread state string"
|   |-ParagraphComment 0x559b74c3f5d0 <line:1427:3>
|   | `-TextComment 0x559b74c3f5a0 <col:3> Text=" "
|   `-ParamCommandComment 0x559b74c3f5f0 <col:4, line:1428:61> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x559b74c3f6f0 <line:1427:20, line:1428:61>
|       |-TextComment 0x559b74c3f650 <line:1427:20, col:29> Text=" Thread ID"
|       |-TextComment 0x559b74c3f670 <line:1428:3> Text=" "
|       |-InlineCommandComment 0x559b74c3f690 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x559b74c3f6b0 <col:11, col:61> Text=" Thread state string, empty if no state flag is set"
|-RecordDecl 0x559b74b851e8 prev 0x559b74b73420 <line:1517:1, line:1545:1> line:1517:8 struct k_timer definition
| |-FullComment 0x559b74c3f890 <line:1514:3, col:24>
| | `-ParagraphComment 0x559b74c3f860 <col:3, col:24>
| |   |-TextComment 0x559b74c3f7b0 <col:3> Text=" "
| |   |-InlineCommandComment 0x559b74c3f800 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x559b74c3f820 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x559b74b85290 <line:1523:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| |-FieldDecl 0x559b74b852e8 <line:1526:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x559b74b85580 <line:1529:2, col:41> col:9 expiry_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x559b74b876e8 <line:1532:2, col:39> col:9 stop_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x559b74b87740 <line:1535:2, col:8> col:8 period 's32_t':'int'
| |-FieldDecl 0x559b74b87798 <line:1538:2, col:8> col:8 status 'u32_t':'unsigned int'
| `-FieldDecl 0x559b74b877f8 <line:1541:2, col:8> col:8 referenced user_data 'void *'
|-TypedefDecl 0x559b74b879e8 <line:1587:1, col:55> col:16 referenced k_timer_expiry_t 'void (*)(struct k_timer *)'
| |-PointerType 0x559b74b85520 'void (*)(struct k_timer *)'
| | `-ParenType 0x559b74b854c0 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x559b74b85480 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x559b749d8970 'void'
| |     `-PointerType 0x559b74b85390 'struct k_timer *'
| |       `-ElaboratedType 0x559b74b85330 'struct k_timer' sugar
| |         `-RecordType 0x559b74b734b0 'struct k_timer'
| |           `-Record 0x559b74b851e8 'k_timer'
| `-FullComment 0x559b74c3fd20 <line:1576:3, line:1585:14>
|   |-ParagraphComment 0x559b74c3f930 <line:1576:3>
|   | `-TextComment 0x559b74c3f900 <col:3> Text=" "
|   |-VerbatimLineComment 0x559b74c3f950 <col:4, col:29> Text=" k_timer_expiry_t"
|   |-ParagraphComment 0x559b74c3f9c0 <line:1577:3>
|   | `-TextComment 0x559b74c3f990 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3f9e0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x559b74c3fa40 <col:10, col:37>
|   |   `-TextComment 0x559b74c3fa10 <col:10, col:37> Text=" Timer expiry function type."
|   |-ParagraphComment 0x559b74c3fae0 <line:1579:3, line:1581:54>
|   | |-TextComment 0x559b74c3fa60 <line:1579:3, col:78> Text=" A timer's expiry function is executed by the system clock interrupt handler"
|   | |-TextComment 0x559b74c3fa80 <line:1580:3, col:76> Text=" each time the timer expires. The expiry function is optional, and is only"
|   | `-TextComment 0x559b74c3faa0 <line:1581:3, col:54> Text=" invoked if the timer has been initialized with one."
|   |-ParagraphComment 0x559b74c3fb30 <line:1583:3>
|   | `-TextComment 0x559b74c3fb00 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c3fb50 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559b74c3fbe0 <col:16, col:37>
|   |   `-TextComment 0x559b74c3fbb0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x559b74c3fc30 <line:1585:3>
|   | `-TextComment 0x559b74c3fc00 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c3fc50 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c3fcb0 <col:11, col:14>
|       `-TextComment 0x559b74c3fc80 <col:11, col:14> Text=" N/A"
|-TypedefDecl 0x559b74b87b28 <line:1602:1, col:53> col:16 referenced k_timer_stop_t 'void (*)(struct k_timer *)'
| |-PointerType 0x559b74b85520 'void (*)(struct k_timer *)'
| | `-ParenType 0x559b74b854c0 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x559b74b85480 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x559b749d8970 'void'
| |     `-PointerType 0x559b74b85390 'struct k_timer *'
| |       `-ElaboratedType 0x559b74b85330 'struct k_timer' sugar
| |         `-RecordType 0x559b74b734b0 'struct k_timer'
| |           `-Record 0x559b74b851e8 'k_timer'
| `-FullComment 0x559b74c401d0 <line:1590:3, line:1600:14>
|   |-ParagraphComment 0x559b74c3fdc0 <line:1590:3>
|   | `-TextComment 0x559b74c3fd90 <col:3> Text=" "
|   |-VerbatimLineComment 0x559b74c3fde0 <col:4, col:27> Text=" k_timer_stop_t"
|   |-ParagraphComment 0x559b74c3fe50 <line:1591:3>
|   | `-TextComment 0x559b74c3fe20 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c3fe70 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x559b74c3fed0 <col:10, col:35>
|   |   `-TextComment 0x559b74c3fea0 <col:10, col:35> Text=" Timer stop function type."
|   |-ParagraphComment 0x559b74c3ff90 <line:1593:3, line:1596:24>
|   | |-TextComment 0x559b74c3fef0 <line:1593:3, col:75> Text=" A timer's stop function is executed if the timer is stopped prematurely."
|   | |-TextComment 0x559b74c3ff10 <line:1594:3, col:71> Text=" The function runs in the context of the thread that stops the timer."
|   | |-TextComment 0x559b74c3ff30 <line:1595:3, col:75> Text=" The stop function is optional, and is only invoked if the timer has been"
|   | `-TextComment 0x559b74c3ff50 <line:1596:3, col:24> Text=" initialized with one."
|   |-ParagraphComment 0x559b74c3ffe0 <line:1598:3>
|   | `-TextComment 0x559b74c3ffb0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c40000 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559b74c40090 <col:16, col:37>
|   |   `-TextComment 0x559b74c40060 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x559b74c400e0 <line:1600:3>
|   | `-TextComment 0x559b74c400b0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c40100 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c40160 <col:11, col:14>
|       `-TextComment 0x559b74c40130 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74b87e50 <line:1630:1, line:1632:27> line:1630:13 k_timer_init 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' extern
| |-ParmVarDecl 0x559b74b87c00 <col:26, col:42> col:42 timer 'struct k_timer *'
| |-ParmVarDecl 0x559b74b87c90 <line:1631:5, col:22> col:22 expiry_fn 'k_timer_expiry_t':'void (*)(struct k_timer *)'
| |-ParmVarDecl 0x559b74b87d20 <line:1632:5, col:20> col:20 stop_fn 'k_timer_stop_t':'void (*)(struct k_timer *)'
| `-FullComment 0x559b74c40720 <line:1620:3, line:1628:14>
|   |-ParagraphComment 0x559b74c40270 <line:1620:3>
|   | `-TextComment 0x559b74c40240 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c40290 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x559b74c402f0 <col:10, col:29>
|   |   `-TextComment 0x559b74c402c0 <col:10, col:29> Text=" Initialize a timer."
|   |-ParagraphComment 0x559b74c40340 <line:1622:3, col:60>
|   | `-TextComment 0x559b74c40310 <col:3, col:60> Text=" This routine initializes a timer, prior to its first use."
|   |-ParagraphComment 0x559b74c40390 <line:1624:3>
|   | `-TextComment 0x559b74c40360 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c403b0 <col:4, line:1625:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559b74c40460 <line:1624:16, line:1625:3>
|   |   |-TextComment 0x559b74c40410 <line:1624:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x559b74c40430 <line:1625:3> Text=" "
|   |-ParamCommandComment 0x559b74c40480 <col:4, line:1626:3> [in] implicitly Param="expiry_fn" ParamIndex=1
|   | `-ParagraphComment 0x559b74c40530 <line:1625:20, line:1626:3>
|   |   |-TextComment 0x559b74c404e0 <line:1625:20, col:67> Text=" Function to invoke each time the timer expires."
|   |   `-TextComment 0x559b74c40500 <line:1626:3> Text=" "
|   |-ParamCommandComment 0x559b74c40550 <col:4, col:77> [in] implicitly Param="stop_fn" ParamIndex=2
|   | `-ParagraphComment 0x559b74c405e0 <col:18, col:77>
|   |   `-TextComment 0x559b74c405b0 <col:18, col:77> Text="   Function to invoke if the timer is stopped while running."
|   |-ParagraphComment 0x559b74c40630 <line:1628:3>
|   | `-TextComment 0x559b74c40600 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c40650 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c406b0 <col:11, col:14>
|       `-TextComment 0x559b74c40680 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74b87f58 <line:1634:1, col:30> col:13 k_trigger_update 'void ()' extern
|-FunctionDecl 0x559b74b88260 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1653:37> line:1652:16 k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x559b74b88050 <col:30, col:46> col:46 timer 'struct k_timer *'
| |-ParmVarDecl 0x559b74b880c0 <line:1653:9, col:15> col:15 duration 's32_t':'int'
| |-ParmVarDecl 0x559b74b88130 <col:25, col:31> col:31 period 's32_t':'int'
| `-FullComment 0x559b74c40d40 <line:1637:3, line:1650:14>
|   |-ParagraphComment 0x559b74c407c0 <line:1637:3>
|   | `-TextComment 0x559b74c40790 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c407e0 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x559b74c40840 <col:10, col:24>
|   |   `-TextComment 0x559b74c40810 <col:10, col:24> Text=" Start a timer."
|   |-ParagraphComment 0x559b74c408b0 <line:1639:3, line:1640:71>
|   | |-TextComment 0x559b74c40860 <line:1639:3, col:72> Text=" This routine starts a timer, and resets its status to zero. The timer"
|   | `-TextComment 0x559b74c40880 <line:1640:3, col:71> Text=" begins counting down using the specified duration and period values."
|   |-ParagraphComment 0x559b74c40960 <line:1642:3, line:1644:44>
|   | |-TextComment 0x559b74c408d0 <line:1642:3, col:68> Text=" Attempting to start a timer that is already running is permitted."
|   | |-TextComment 0x559b74c408f0 <line:1643:3, col:73> Text=" The timer's status is reset to zero and the timer begins counting down"
|   | `-TextComment 0x559b74c40910 <line:1644:3, col:44> Text=" using the new duration and period values."
|   |-ParagraphComment 0x559b74c409b0 <line:1646:3>
|   | `-TextComment 0x559b74c40980 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c409d0 <col:4, line:1647:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559b74c40a80 <line:1646:16, line:1647:3>
|   |   |-TextComment 0x559b74c40a30 <line:1646:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x559b74c40a50 <line:1647:3> Text=" "
|   |-ParamCommandComment 0x559b74c40aa0 <col:4, line:1648:3> [in] implicitly Param="duration" ParamIndex=1
|   | `-ParagraphComment 0x559b74c40b50 <line:1647:19, line:1648:3>
|   |   |-TextComment 0x559b74c40b00 <line:1647:19, col:61> Text="  Initial timer duration (in milliseconds)."
|   |   `-TextComment 0x559b74c40b20 <line:1648:3> Text=" "
|   |-ParamCommandComment 0x559b74c40b70 <col:4, col:51> [in] implicitly Param="period" ParamIndex=2
|   | `-ParagraphComment 0x559b74c40c00 <col:17, col:51>
|   |   `-TextComment 0x559b74c40bd0 <col:17, col:51> Text="    Timer period (in milliseconds)."
|   |-ParagraphComment 0x559b74c40c50 <line:1650:3>
|   | `-TextComment 0x559b74c40c20 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c40c70 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c40cd0 <col:11, col:14>
|       `-TextComment 0x559b74c40ca0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74b883f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1671:50> col:16 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x559b74b88370 <col:29, col:45> col:45 timer 'struct k_timer *'
| `-FullComment 0x559b74c412f0 <line:1656:3, line:1669:14>
|   |-ParagraphComment 0x559b74c40de0 <line:1656:3>
|   | `-TextComment 0x559b74c40db0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c40e00 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x559b74c40e60 <col:10, col:23>
|   |   `-TextComment 0x559b74c40e30 <col:10, col:23> Text=" Stop a timer."
|   |-ParagraphComment 0x559b74c40ed0 <line:1658:3, line:1659:43>
|   | |-TextComment 0x559b74c40e80 <line:1658:3, col:77> Text=" This routine stops a running timer prematurely. The timer's stop function,"
|   | `-TextComment 0x559b74c40ea0 <line:1659:3, col:43> Text=" if one exists, is invoked by the caller."
|   |-ParagraphComment 0x559b74c40f40 <line:1661:3, line:1662:23>
|   | |-TextComment 0x559b74c40ef0 <line:1661:3, col:74> Text=" Attempting to stop a timer that is not running is permitted, but has no"
|   | `-TextComment 0x559b74c40f10 <line:1662:3, col:23> Text=" effect on the timer."
|   |-ParagraphComment 0x559b74c40f90 <line:1664:3>
|   | `-TextComment 0x559b74c40f60 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c40fb0 <col:4, line:1665:48> Name="note"
|   | `-ParagraphComment 0x559b74c410b0 <line:1664:9, line:1665:48>
|   |   |-TextComment 0x559b74c40fe0 <line:1664:9, col:78> Text=" Can be called by ISRs.  The stop handler has to be callable from ISRs"
|   |   |-TextComment 0x559b74c41000 <line:1665:3, col:6> Text=" if "
|   |   |-InlineCommandComment 0x559b74c41050 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="k_timer_stop"
|   |   `-TextComment 0x559b74c41070 <col:22, col:48> Text=" is to be called from ISRs."
|   |-ParagraphComment 0x559b74c41100 <line:1667:3>
|   | `-TextComment 0x559b74c410d0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c41120 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559b74c411b0 <col:16, col:37>
|   |   `-TextComment 0x559b74c41180 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x559b74c41200 <line:1669:3>
|   | `-TextComment 0x559b74c411d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c41220 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c41280 <col:11, col:14>
|       `-TextComment 0x559b74c41250 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74b885f0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1685:57> col:17 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x559b74b884f0 <col:36, col:52> col:52 timer 'struct k_timer *'
| `-FullComment 0x559b74c41700 <line:1674:3, line:1683:24>
|   |-ParagraphComment 0x559b74c41390 <line:1674:3>
|   | `-TextComment 0x559b74c41360 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c413b0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x559b74c41410 <col:10, col:28>
|   |   `-TextComment 0x559b74c413e0 <col:10, col:28> Text=" Read timer status."
|   |-ParagraphComment 0x559b74c41480 <line:1676:3, line:1677:49>
|   | |-TextComment 0x559b74c41430 <line:1676:3, col:77> Text=" This routine reads the timer's status, which indicates the number of times"
|   | `-TextComment 0x559b74c41450 <line:1677:3, col:49> Text=" it has expired since its status was last read."
|   |-ParagraphComment 0x559b74c414d0 <line:1679:3, col:58>
|   | `-TextComment 0x559b74c414a0 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x559b74c41520 <line:1681:3>
|   | `-TextComment 0x559b74c414f0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c41540 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559b74c415d0 <col:16, col:37>
|   |   `-TextComment 0x559b74c415a0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x559b74c41620 <line:1683:3>
|   | `-TextComment 0x559b74c415f0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c41640 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x559b74c416a0 <col:11, col:24>
|       `-TextComment 0x559b74c41670 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x559b74b88fe8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1704:58> col:17 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x559b74b88f60 <col:37, col:53> col:53 timer 'struct k_timer *'
| `-FullComment 0x559b74c41be0 <line:1688:3, line:1702:24>
|   |-ParagraphComment 0x559b74c417a0 <line:1688:3>
|   | `-TextComment 0x559b74c41770 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c417c0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c41820 <col:10, col:49>
|   |   `-TextComment 0x559b74c417f0 <col:10, col:49> Text=" Synchronize thread to timer expiration."
|   |-ParagraphComment 0x559b74c418e0 <line:1690:3, line:1693:73>
|   | |-TextComment 0x559b74c41840 <line:1690:3, col:78> Text=" This routine blocks the calling thread until the timer's status is non-zero"
|   | |-TextComment 0x559b74c41860 <line:1691:3, col:76> Text=" (indicating that it has expired at least once since it was last examined)"
|   | |-TextComment 0x559b74c41880 <line:1692:3, col:68> Text=" or the timer is stopped. If the timer status is already non-zero,"
|   | `-TextComment 0x559b74c418a0 <line:1693:3, col:73> Text=" or the timer is already stopped, the caller continues without waiting."
|   |-ParagraphComment 0x559b74c41930 <line:1695:3, col:58>
|   | `-TextComment 0x559b74c41900 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x559b74c419a0 <line:1697:3, line:1698:20>
|   | |-TextComment 0x559b74c41950 <line:1697:3, col:74> Text=" This routine must not be used by interrupt handlers, since they are not"
|   | `-TextComment 0x559b74c41970 <line:1698:3, col:20> Text=" allowed to block."
|   |-ParagraphComment 0x559b74c419f0 <line:1700:3>
|   | `-TextComment 0x559b74c419c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c41a10 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559b74c41aa0 <col:16, col:37>
|   |   `-TextComment 0x559b74c41a70 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x559b74c41af0 <line:1702:3>
|   | `-TextComment 0x559b74c41ac0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c41b10 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x559b74c41b70 <col:11, col:24>
|       `-TextComment 0x559b74c41b40 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x559b74b891c0 <line:1706:1, col:58> col:14 used z_timeout_remaining 's32_t (struct _timeout *)' extern
| `-ParmVarDecl 0x559b74b890b8 <col:34, col:51> col:51 timeout 'struct _timeout *'
|-FunctionDecl 0x559b74b89348 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1718:60> col:17 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x559b74b892c0 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x559b74c41fa0 <line:1709:3, line:1716:44>
|   |-ParagraphComment 0x559b74c41c80 <line:1709:3>
|   | `-TextComment 0x559b74c41c50 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c41ca0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x559b74c41d00 <col:10, col:57>
|   |   `-TextComment 0x559b74c41cd0 <col:10, col:57> Text=" Get time remaining before a timer next expires."
|   |-ParagraphComment 0x559b74c41d70 <line:1711:3, line:1712:68>
|   | |-TextComment 0x559b74c41d20 <line:1711:3, col:74> Text=" This routine computes the (approximate) time remaining before a running"
|   | `-TextComment 0x559b74c41d40 <line:1712:3, col:68> Text=" timer next expires. If the timer is not running, it returns zero."
|   |-ParagraphComment 0x559b74c41dc0 <line:1714:3>
|   | `-TextComment 0x559b74c41d90 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c41de0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559b74c41e70 <col:16, col:37>
|   |   `-TextComment 0x559b74c41e40 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x559b74c41ec0 <line:1716:3>
|   | `-TextComment 0x559b74c41e90 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c41ee0 <col:4, col:44> Name="return"
|     `-ParagraphComment 0x559b74c41f40 <col:11, col:44>
|       `-TextComment 0x559b74c41f10 <col:11, col:44> Text=" Remaining time (in milliseconds)."
|-FunctionDecl 0x559b74b894a0 <line:1720:1, line:1724:1> line:1720:21 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x559b74b89418 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x559b74b89a28 <line:1721:1, line:1724:1>
|   |-DeclStmt 0x559b74b89720 <line:1722:2, col:58>
|   | `-VarDecl 0x559b74b89558 <col:2, col:57> col:14 used ticks 'const s32_t':'const int' cinit
|   |   `-CallExpr 0x559b74b896f0 <col:22, col:57> 's32_t':'int'
|   |     |-ImplicitCastExpr 0x559b74b896d8 <col:22> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559b74b895b8 <col:22> 's32_t (struct _timeout *)' Function 0x559b74b891c0 'z_timeout_remaining' 's32_t (struct _timeout *)'
|   |     `-UnaryOperator 0x559b74b89658 <col:42, col:50> 'struct _timeout *' prefix '&'
|   |       `-MemberExpr 0x559b74b89620 <col:43, col:50> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x559b74b85290
|   |         `-ImplicitCastExpr 0x559b74b89608 <col:43> 'struct k_timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x559b74b895e0 <col:43> 'struct k_timer *' lvalue ParmVar 0x559b74b89418 'timer' 'struct k_timer *'
|   `-ReturnStmt 0x559b74b899e0 <line:1723:2, col:61>
|     `-ConditionalOperator 0x559b74b89958 <col:9, col:61> 'unsigned int'
|       |-ParenExpr 0x559b74b897c0 <col:9, col:19> 'int'
|       | `-BinaryOperator 0x559b74b89798 <col:10, col:18> 'int' '>'
|       |   |-ImplicitCastExpr 0x559b74b89780 <col:10> 's32_t':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x559b74b89738 <col:10> 'const s32_t':'const int' lvalue Var 0x559b74b89558 'ticks' 'const s32_t':'const int'
|       |   `-IntegerLiteral 0x559b74b89760 <col:18> 'int' 0
|       |-CStyleCastExpr 0x559b74b89910 <col:23, col:57> 'u32_t':'unsigned int' <IntegralCast>
|       | `-CallExpr 0x559b74b898a0 <col:30, col:57> 'u64_t':'unsigned long long'
|       |   |-ImplicitCastExpr 0x559b74b89888 <col:30> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x559b74b897e0 <col:30> 'u64_t (u64_t)' Function 0x559b74b592a0 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
|       |   `-ImplicitCastExpr 0x559b74b898e8 <col:52> 'u64_t':'unsigned long long' <IntegralCast>
|       |     `-ImplicitCastExpr 0x559b74b898d0 <col:52> 's32_t':'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x559b74b89808 <col:52> 'const s32_t':'const int' lvalue Var 0x559b74b89558 'ticks' 'const s32_t':'const int'
|       `-IntegerLiteral 0x559b74b89938 <col:61> 'unsigned int' 0
|-FunctionDecl 0x559b74b89c00 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1740:76> col:16 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x559b74b89a70 <col:38, col:54> col:54 timer 'struct k_timer *'
| |-ParmVarDecl 0x559b74b89ae8 <col:61, col:67> col:67 user_data 'void *'
| `-FullComment 0x559b74c425b0 <line:1727:3, line:1738:14>
|   |-ParagraphComment 0x559b74c42040 <line:1727:3>
|   | `-TextComment 0x559b74c42010 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c42060 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x559b74c420c0 <col:10, col:52>
|   |   `-TextComment 0x559b74c42090 <col:10, col:52> Text=" Associate user-specific data with a timer."
|   |-ParagraphComment 0x559b74c42230 <line:1729:3, line:1730:9>
|   | |-TextComment 0x559b74c420e0 <line:1729:3, col:28> Text=" This routine records the "
|   | |-InlineCommandComment 0x559b74c42130 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="user_data"
|   | |-TextComment 0x559b74c42150 <col:41, col:50> Text=" with the "
|   | |-InlineCommandComment 0x559b74c421a0 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="timer,"
|   | |-TextComment 0x559b74c421c0 <col:60, col:75> Text=" to be retrieved"
|   | `-TextComment 0x559b74c421e0 <line:1730:3, col:9> Text=" later."
|   |-ParagraphComment 0x559b74c422a0 <line:1732:3, line:1733:73>
|   | |-TextComment 0x559b74c42250 <line:1732:3, col:78> Text=" It can be used e.g. in a timer handler shared across multiple subsystems to"
|   | `-TextComment 0x559b74c42270 <line:1733:3, col:73> Text=" retrieve data specific to the subsystem this timer is associated with."
|   |-ParagraphComment 0x559b74c422f0 <line:1735:3>
|   | `-TextComment 0x559b74c422c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c42310 <col:4, line:1736:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559b74c423c0 <line:1735:16, line:1736:3>
|   |   |-TextComment 0x559b74c42370 <line:1735:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x559b74c42390 <line:1736:3> Text=" "
|   |-ParamCommandComment 0x559b74c423e0 <col:4, col:58> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x559b74c42470 <col:20, col:58>
|   |   `-TextComment 0x559b74c42440 <col:20, col:58> Text=" User data to associate with the timer."
|   |-ParagraphComment 0x559b74c424c0 <line:1738:3>
|   | `-TextComment 0x559b74c42490 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c424e0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c42540 <col:11, col:14>
|       `-TextComment 0x559b74c42510 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74b89e08 <line:1745:1, line:1749:1> line:1745:20 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x559b74b89d00 <col:49, col:65> col:65 used timer 'struct k_timer *'
| |-ParmVarDecl 0x559b74b89d78 <line:1746:13, col:19> col:19 used user_data 'void *'
| |-CompoundStmt 0x559b74b8a3f8 <line:1747:1, line:1749:1>
| | `-BinaryOperator 0x559b74b8a3a8 <line:1748:2, col:21> 'void *' '='
| |   |-MemberExpr 0x559b74b8a330 <col:2, col:9> 'void *' lvalue ->user_data 0x559b74b877f8
| |   | `-ImplicitCastExpr 0x559b74b89ee0 <col:2> 'struct k_timer *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x559b74b89eb8 <col:2> 'struct k_timer *' lvalue ParmVar 0x559b74b89d00 'timer' 'struct k_timer *'
| |   `-ImplicitCastExpr 0x559b74b8a390 <col:21> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x559b74b8a368 <col:21> 'void *' lvalue ParmVar 0x559b74b89d78 'user_data' 'void *'
| `-FullComment 0x559b74c426a0 <line:1743:3, col:12>
|   `-ParagraphComment 0x559b74c42670 <col:3, col:12>
|     |-TextComment 0x559b74c42620 <col:3> Text=" "
|     `-InlineCommandComment 0x559b74c42640 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x559b74b8a548 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1758:60> col:17 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x559b74b8a438 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x559b74c429f0 <line:1752:3, line:1756:25>
|   |-ParagraphComment 0x559b74c42740 <line:1752:3>
|   | `-TextComment 0x559b74c42710 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c42760 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x559b74c427c0 <col:10, col:55>
|   |   `-TextComment 0x559b74c42790 <col:10, col:55> Text=" Retrieve the user-specific data from a timer."
|   |-ParagraphComment 0x559b74c42810 <line:1754:3>
|   | `-TextComment 0x559b74c427e0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c42830 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559b74c428c0 <col:16, col:37>
|   |   `-TextComment 0x559b74c42890 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x559b74c42910 <line:1756:3>
|   | `-TextComment 0x559b74c428e0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c42930 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x559b74c429a0 <col:11, col:25>
|       `-TextComment 0x559b74c42970 <col:11, col:25> Text=" The user data."
|-FunctionDecl 0x559b74b8a6a8 <line:1760:1, line:1763:1> line:1760:21 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x559b74b8a618 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x559b74b8a888 <line:1761:1, line:1763:1>
|   `-ReturnStmt 0x559b74b8a7e0 <line:1762:2, col:16>
|     `-ImplicitCastExpr 0x559b74b8a7c8 <col:9, col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x559b74b8a790 <col:9, col:16> 'void *' lvalue ->user_data 0x559b74b877f8
|         `-ImplicitCastExpr 0x559b74b8a778 <col:9> 'struct k_timer *' <LValueToRValue>
|           `-DeclRefExpr 0x559b74b8a750 <col:9> 'struct k_timer *' lvalue ParmVar 0x559b74b8a618 'timer' 'struct k_timer *'
|-FunctionDecl 0x559b74b8a930 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1787:34> col:17 used k_uptime_get 's64_t (void)' static inline
| `-FullComment 0x559b74c42ed0 <line:1773:3, line:1785:42>
|   |-ParagraphComment 0x559b74c42a90 <line:1773:3>
|   | `-TextComment 0x559b74c42a60 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c42ab0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x559b74c42b10 <col:10, col:28>
|   |   `-TextComment 0x559b74c42ae0 <col:10, col:28> Text=" Get system uptime."
|   |-ParagraphComment 0x559b74c42b80 <line:1775:3, line:1776:19>
|   | |-TextComment 0x559b74c42b30 <line:1775:3, col:65> Text=" This routine returns the elapsed time since the system booted,"
|   | `-TextComment 0x559b74c42b50 <line:1776:3, col:19> Text=" in milliseconds."
|   |-ParagraphComment 0x559b74c42bd0 <line:1778:3>
|   | `-TextComment 0x559b74c42ba0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c42bf0 <col:4, line:1783:13> Name="note"
|   | `-ParagraphComment 0x559b74c42da0 <line:1779:3, line:1783:13>
|   |   |-TextComment 0x559b74c42c20 <line:1779:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x559b74c42c70 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x559b74c42c90 <line:1780:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x559b74c42cb0 <line:1781:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x559b74c42cd0 <line:1782:3, col:61> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option."
|   |   |-TextComment 0x559b74c42cf0 <line:1783:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x559b74c42d40 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x559b74c42df0 <line:1785:3>
|   | `-TextComment 0x559b74c42dc0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c42e10 <col:4, col:42> Name="return"
|     `-ParagraphComment 0x559b74c42e70 <col:11, col:42>
|       `-TextComment 0x559b74c42e40 <col:11, col:42> Text=" Current uptime in milliseconds."
|-FunctionDecl 0x559b74b8aa90 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1805:1> line:1799:32 k_enable_sys_clock_always_on 'int (void)' static inline
| |-CompoundStmt 0x559b74b8ac38 <line:1800:1, line:1805:1>
| | |-CompoundStmt 0x559b74b8ab90 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x559b74b8aba0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1802:57>
| | `-ReturnStmt 0x559b74b8abf0 <line:1804:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-UnaryOperator 0x559b74b8abd0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1804:9, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     `-IntegerLiteral 0x559b74b8abb0 <col:16> 'int' 0
| |-DeprecatedAttr 0x559b74b8ab30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x559b74c43170 </vagrant/ext/zephyros/zephyr/include/kernel.h:1790:3, line:1796:56>
|   |-ParagraphComment 0x559b74c42f70 <line:1790:3>
|   | `-TextComment 0x559b74c42f40 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c42f90 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x559b74c42ff0 <col:10, col:51>
|   |   `-TextComment 0x559b74c42fc0 <col:10, col:51> Text=" Enable clock always on in tickless kernel"
|   |-ParagraphComment 0x559b74c43090 <line:1792:3, line:1794:11>
|   | |-TextComment 0x559b74c43010 <line:1792:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|   | |-TextComment 0x559b74c43030 <line:1793:3, col:66> Text=" functionality has been migrated to the SYSTEM_CLOCK_SLOPPY_IDLE"
|   | `-TextComment 0x559b74c43050 <line:1794:3, col:11> Text=" kconfig."
|   `-ParagraphComment 0x559b74c43130 <line:1796:3, col:56>
|     |-TextComment 0x559b74c430b0 <col:3> Text=" "
|     |-InlineCommandComment 0x559b74c430d0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x559b74c430f0 <col:11, col:56> Text=" prev_status Previous status of always on flag"
|-FunctionDecl 0x559b74b8acf0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1820:1> line:1816:33 k_disable_sys_clock_always_on 'void (void)' static inline
| |-CompoundStmt 0x559b74b8ae38 <line:1817:1, line:1820:1>
| | |-CompoundStmt 0x559b74b8adf0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | `-NullStmt 0x559b74b8ae00 </vagrant/ext/zephyros/zephyr/include/kernel.h:1819:57>
| |-DeprecatedAttr 0x559b74b8ad90 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x559b74c43370 </vagrant/ext/zephyros/zephyr/include/kernel.h:1809:3, line:1813:11>
|   |-ParagraphComment 0x559b74c43210 <line:1809:3>
|   | `-TextComment 0x559b74c431e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c43230 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x559b74c43290 <col:10, col:52>
|   |   `-TextComment 0x559b74c43260 <col:10, col:52> Text=" Disable clock always on in tickless kernel"
|   `-ParagraphComment 0x559b74c43330 <line:1811:3, line:1813:11>
|     |-TextComment 0x559b74c432b0 <line:1811:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|     |-TextComment 0x559b74c432d0 <line:1812:3, col:63> Text=" functionality has been migrated to the SYS_CLOCK_SLOPPY_IDLE"
|     `-TextComment 0x559b74c432f0 <line:1813:3, col:11> Text=" kconfig."
|-FunctionDecl 0x559b74b8aee8 <line:1844:1, line:1847:1> line:1844:21 k_uptime_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x559b74b8b0c8 <line:1845:1, line:1847:1>
| | `-ReturnStmt 0x559b74b8b080 <line:1846:2, col:29>
| |   `-CStyleCastExpr 0x559b74b8b058 <col:9, col:29> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b8b020 <col:16, col:29> 's64_t':'long long'
| |       `-ImplicitCastExpr 0x559b74b8b008 <col:16> 's64_t (*)(void)' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x559b74b8af88 <col:16> 's64_t (void)' Function 0x559b74b8a930 'k_uptime_get' 's64_t (void)'
| `-FullComment 0x559b74c438e0 <line:1824:3, line:1842:66>
|   |-ParagraphComment 0x559b74c43410 <line:1824:3>
|   | `-TextComment 0x559b74c433e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c43430 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x559b74c43490 <col:10, col:45>
|   |   `-TextComment 0x559b74c43460 <col:10, col:45> Text=" Get system uptime (32-bit version)."
|   |-ParagraphComment 0x559b74c43500 <line:1826:3, line:1827:16>
|   | |-TextComment 0x559b74c434b0 <line:1826:3, col:65> Text=" This routine returns the lower 32 bits of the system uptime in"
|   | `-TextComment 0x559b74c434d0 <line:1827:3, col:16> Text=" milliseconds."
|   |-ParagraphComment 0x559b74c435f0 <line:1829:3, line:1833:38>
|   | |-TextComment 0x559b74c43520 <line:1829:3, col:67> Text=" Because correct conversion requires full precision of the system"
|   | |-TextComment 0x559b74c43540 <line:1830:3, col:69> Text=" clock there is no benefit to using this over k_uptime_get() unless"
|   | |-TextComment 0x559b74c43560 <line:1831:3, col:69> Text=" you know the application will never run long enough for the system"
|   | |-TextComment 0x559b74c43580 <line:1832:3, col:68> Text=" clock to approach 2^32 ticks.  Calls to this function may involve"
|   | `-TextComment 0x559b74c435a0 <line:1833:3, col:38> Text=" interrupt blocking and 64-bit math."
|   |-ParagraphComment 0x559b74c43640 <line:1835:3>
|   | `-TextComment 0x559b74c43610 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c43660 <col:4, line:1840:13> Name="note"
|   | `-ParagraphComment 0x559b74c437b0 <line:1836:3, line:1840:13>
|   |   |-TextComment 0x559b74c43690 <line:1836:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x559b74c436b0 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x559b74c436d0 <line:1837:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x559b74c436f0 <line:1838:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x559b74c43710 <line:1839:3, col:60> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option"
|   |   |-TextComment 0x559b74c43730 <line:1840:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x559b74c43750 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x559b74c43800 <line:1842:3>
|   | `-TextComment 0x559b74c437d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c43820 <col:4, col:66> Name="return"
|     `-ParagraphComment 0x559b74c43880 <col:11, col:66>
|       `-TextComment 0x559b74c43850 <col:11, col:66> Text=" The low 32 bits of the current uptime, in milliseconds."
|-FunctionDecl 0x559b74b8b250 <line:1860:1, line:1869:1> line:1860:21 used k_uptime_delta 's64_t (s64_t *)' static inline
| |-ParmVarDecl 0x559b74b8b148 <col:36, col:43> col:43 used reftime 's64_t *'
| |-CompoundStmt 0x559b74b8b8a8 <line:1861:1, line:1869:1>
| | |-DeclStmt 0x559b74b8b558 <line:1862:2, col:21>
| | | |-VarDecl 0x559b74b8b470 <col:2, col:8> col:8 used uptime 's64_t':'long long'
| | | `-VarDecl 0x559b74b8b4e0 <col:2, col:16> col:16 used delta 's64_t':'long long'
| | |-BinaryOperator 0x559b74b8b600 <line:1864:2, col:24> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x559b74b8b570 <col:2> 's64_t':'long long' lvalue Var 0x559b74b8b470 'uptime' 's64_t':'long long'
| | | `-CallExpr 0x559b74b8b5d8 <col:11, col:24> 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x559b74b8b5c0 <col:11> 's64_t (*)(void)' <FunctionToPointerDecay>
| | |     `-DeclRefExpr 0x559b74b8b598 <col:11> 's64_t (void)' Function 0x559b74b8a930 'k_uptime_get' 's64_t (void)'
| | |-BinaryOperator 0x559b74b8b730 <line:1865:2, col:20> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x559b74b8b628 <col:2> 's64_t':'long long' lvalue Var 0x559b74b8b4e0 'delta' 's64_t':'long long'
| | | `-BinaryOperator 0x559b74b8b708 <col:10, col:20> 'long long' '-'
| | |   |-ImplicitCastExpr 0x559b74b8b6d8 <col:10> 's64_t':'long long' <LValueToRValue>
| | |   | `-DeclRefExpr 0x559b74b8b650 <col:10> 's64_t':'long long' lvalue Var 0x559b74b8b470 'uptime' 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x559b74b8b6f0 <col:19, col:20> 's64_t':'long long' <LValueToRValue>
| | |     `-UnaryOperator 0x559b74b8b6b8 <col:19, col:20> 's64_t':'long long' lvalue prefix '*'
| | |       `-ImplicitCastExpr 0x559b74b8b6a0 <col:20> 's64_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x559b74b8b678 <col:20> 's64_t *' lvalue ParmVar 0x559b74b8b148 'reftime' 's64_t *'
| | |-BinaryOperator 0x559b74b8b7f8 <line:1866:2, col:13> 's64_t':'long long' '='
| | | |-UnaryOperator 0x559b74b8b798 <col:2, col:3> 's64_t':'long long' lvalue prefix '*'
| | | | `-ImplicitCastExpr 0x559b74b8b780 <col:3> 's64_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x559b74b8b758 <col:3> 's64_t *' lvalue ParmVar 0x559b74b8b148 'reftime' 's64_t *'
| | | `-ImplicitCastExpr 0x559b74b8b7e0 <col:13> 's64_t':'long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x559b74b8b7b8 <col:13> 's64_t':'long long' lvalue Var 0x559b74b8b470 'uptime' 's64_t':'long long'
| | `-ReturnStmt 0x559b74b8b860 <line:1868:2, col:9>
| |   `-ImplicitCastExpr 0x559b74b8b848 <col:9> 's64_t':'long long' <LValueToRValue>
| |     `-DeclRefExpr 0x559b74b8b820 <col:9> 's64_t':'long long' lvalue Var 0x559b74b8b4e0 'delta' 's64_t':'long long'
| `-FullComment 0x559b74c43cc0 <line:1850:3, line:1858:24>
|   |-ParagraphComment 0x559b74c43980 <line:1850:3>
|   | `-TextComment 0x559b74c43950 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c439a0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x559b74c43a00 <col:10, col:27>
|   |   `-TextComment 0x559b74c439d0 <col:10, col:27> Text=" Get elapsed time."
|   |-ParagraphComment 0x559b74c43a70 <line:1852:3, line:1853:50>
|   | |-TextComment 0x559b74c43a20 <line:1852:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x559b74c43a40 <line:1853:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x559b74c43ac0 <line:1855:3>
|   | `-TextComment 0x559b74c43a90 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c43ae0 <col:4, line:1856:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x559b74c43b90 <line:1855:18, line:1856:37>
|   |   |-TextComment 0x559b74c43b40 <line:1855:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x559b74c43b60 <line:1856:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x559b74c43be0 <line:1858:3>
|   | `-TextComment 0x559b74c43bb0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c43c00 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x559b74c43c60 <col:11, col:24>
|       `-TextComment 0x559b74c43c30 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x559b74b8b9f0 <line:1887:1, line:1890:1> line:1887:21 k_uptime_delta_32 'u32_t (s64_t *)' static inline
| |-ParmVarDecl 0x559b74b8b8f0 <col:39, col:46> col:46 used reftime 's64_t *'
| |-CompoundStmt 0x559b74b8bc28 <line:1888:1, line:1890:1>
| | `-ReturnStmt 0x559b74b8bbe0 <line:1889:2, col:38>
| |   `-CStyleCastExpr 0x559b74b8bbb8 <col:9, col:38> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559b74b8bb60 <col:16, col:38> 's64_t':'long long'
| |       |-ImplicitCastExpr 0x559b74b8bb48 <col:16> 's64_t (*)(s64_t *)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74b8ba98 <col:16> 's64_t (s64_t *)' Function 0x559b74b8b250 'k_uptime_delta' 's64_t (s64_t *)'
| |       `-ImplicitCastExpr 0x559b74b8bb90 <col:31> 's64_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x559b74b8bac0 <col:31> 's64_t *' lvalue ParmVar 0x559b74b8b8f0 'reftime' 's64_t *'
| `-FullComment 0x559b74c44160 <line:1872:3, line:1885:24>
|   |-ParagraphComment 0x559b74c43d60 <line:1872:3>
|   | `-TextComment 0x559b74c43d30 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c43d80 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559b74c43de0 <col:10, col:44>
|   |   `-TextComment 0x559b74c43db0 <col:10, col:44> Text=" Get elapsed time (32-bit version)."
|   |-ParagraphComment 0x559b74c43e50 <line:1874:3, line:1875:50>
|   | |-TextComment 0x559b74c43e00 <line:1874:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x559b74c43e20 <line:1875:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x559b74c43f10 <line:1877:3, line:1880:41>
|   | |-TextComment 0x559b74c43e70 <line:1877:3, col:78> Text=" This routine can be more efficient than k_uptime_delta(), as it reduces the"
|   | |-TextComment 0x559b74c43e90 <line:1878:3, col:73> Text=" need for interrupt locking and 64-bit math. However, the 32-bit result"
|   | |-TextComment 0x559b74c43eb0 <line:1879:3, col:72> Text=" cannot hold an elapsed time larger than approximately 50 days, so the"
|   | `-TextComment 0x559b74c43ed0 <line:1880:3, col:41> Text=" caller must handle possible rollovers."
|   |-ParagraphComment 0x559b74c43f60 <line:1882:3>
|   | `-TextComment 0x559b74c43f30 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c43f80 <col:4, line:1883:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x559b74c44030 <line:1882:18, line:1883:37>
|   |   |-TextComment 0x559b74c43fe0 <line:1882:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x559b74c44000 <line:1883:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x559b74c44080 <line:1885:3>
|   | `-TextComment 0x559b74c44050 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c440a0 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x559b74c44100 <col:11, col:24>
|       `-TextComment 0x559b74c440d0 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x559b74b8bcd0 <line:1900:1, line:1903:1> line:1900:21 k_cycle_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x559b74b8be78 <line:1901:1, line:1903:1>
| | `-ReturnStmt 0x559b74b8be08 <line:1902:2, col:29>
| |   `-CallExpr 0x559b74b8bde0 <col:9, col:29> 'u32_t':'unsigned int'
| |     `-ImplicitCastExpr 0x559b74b8bdc8 <col:9> 'u32_t (*)(void)' <FunctionToPointerDecay>
| |       `-DeclRefExpr 0x559b74b8bd70 <col:9> 'u32_t (void)' Function 0x559b74b38358 'arch_k_cycle_get_32' 'u32_t (void)'
| `-FullComment 0x559b74c44410 <line:1893:3, line:1898:57>
|   |-ParagraphComment 0x559b74c44200 <line:1893:3>
|   | `-TextComment 0x559b74c441d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c44220 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x559b74c44280 <col:10, col:34>
|   |   `-TextComment 0x559b74c44250 <col:10, col:34> Text=" Read the hardware clock."
|   |-ParagraphComment 0x559b74c442f0 <line:1895:3, line:1896:9>
|   | |-TextComment 0x559b74c442a0 <line:1895:3, col:78> Text=" This routine returns the current time, as measured by the system's hardware"
|   | `-TextComment 0x559b74c442c0 <line:1896:3, col:9> Text=" clock."
|   |-ParagraphComment 0x559b74c44340 <line:1898:3>
|   | `-TextComment 0x559b74c44310 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c44360 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x559b74c443c0 <col:11, col:57>
|       `-TextComment 0x559b74c44390 <col:11, col:57> Text=" Current hardware clock up-counter (in cycles)."
|-RecordDecl 0x559b74b8be90 prev 0x559b74b73000 <line:1913:1, line:1924:1> line:1913:8 struct k_queue definition
| |-FullComment 0x559b74c44530 <line:1910:3, col:24>
| | `-ParagraphComment 0x559b74c44500 <col:3, col:24>
| |   |-TextComment 0x559b74c44480 <col:3> Text=" "
| |   |-InlineCommandComment 0x559b74c444a0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x559b74c444c0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x559b74b8bf28 <line:1914:2, col:15> col:15 referenced data_q 'sys_sflist_t':'struct _sflist'
| |-FieldDecl 0x559b74b8bf90 <line:1915:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-RecordDecl 0x559b74b8bfd8 <line:1916:2, line:1920:2> line:1916:2 union definition
| | `-FieldDecl 0x559b74b8c090 <line:1917:3, col:13> col:13 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x559b74b8c170 <line:1916:2> col:2 implicit 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
| `-IndirectFieldDecl 0x559b74b8c1c8 <line:1917:13> col:13 implicit wait_q '_wait_q_t':'_wait_q_t'
|   |-Field 0x559b74b8c170 '' 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
|   `-Field 0x559b74b8c090 'wait_q' '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x559b74b8cb30 <line:1939:1, col:67> col:14 used z_queue_node_peek 'void *(sys_sfnode_t *, bool)' extern
| |-ParmVarDecl 0x559b74b8c268 <col:32, col:46> col:46 node 'sys_sfnode_t *'
| `-ParmVarDecl 0x559b74b8c2d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/kernel.h:1939:57> col:57 needs_free 'bool'
|-FunctionDecl 0x559b74b8ce20 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1960:50> col:16 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x559b74b8cd20 <col:29, col:45> col:45 queue 'struct k_queue *'
| `-FullComment 0x559b74c448d0 <line:1952:3, line:1958:14>
|   |-ParagraphComment 0x559b74c445d0 <line:1952:3>
|   | `-TextComment 0x559b74c445a0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c445f0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x559b74c44650 <col:10, col:29>
|   |   `-TextComment 0x559b74c44620 <col:10, col:29> Text=" Initialize a queue."
|   |-ParagraphComment 0x559b74c446a0 <line:1954:3, col:67>
|   | `-TextComment 0x559b74c44670 <col:3, col:67> Text=" This routine initializes a queue object, prior to its first use."
|   |-ParagraphComment 0x559b74c446f0 <line:1956:3>
|   | `-TextComment 0x559b74c446c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c44710 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x559b74c447a0 <col:16, col:37>
|   |   `-TextComment 0x559b74c44770 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x559b74c447f0 <line:1958:3>
|   | `-TextComment 0x559b74c447c0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c44810 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c44870 <col:11, col:14>
|       `-TextComment 0x559b74c44840 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74b8cfa8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1977:57> col:16 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x559b74b8cf20 <col:36, col:52> col:52 queue 'struct k_queue *'
| `-FullComment 0x559b74c44e80 <line:1963:3, line:1975:14>
|   |-ParagraphComment 0x559b74c44980 <line:1963:3>
|   | `-TextComment 0x559b74c44940 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c449a0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x559b74c44a00 <col:10, col:36>
|   |   `-TextComment 0x559b74c449d0 <col:10, col:36> Text=" Cancel waiting on a queue."
|   |-ParagraphComment 0x559b74c44b70 <line:1965:3, line:1969:35>
|   | |-TextComment 0x559b74c44a20 <line:1965:3, col:47> Text=" This routine causes first thread pending on "
|   | |-InlineCommandComment 0x559b74c44a70 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="queue,"
|   | |-TextComment 0x559b74c44a90 <col:57, col:67> Text=" if any, to"
|   | |-TextComment 0x559b74c44ab0 <line:1966:3, col:74> Text=" return from k_queue_get() call with NULL value (as if timeout expired)."
|   | |-TextComment 0x559b74c44ad0 <line:1967:3, col:67> Text=" If the queue is being waited on by k_poll(), it will return with"
|   | |-TextComment 0x559b74c44af0 <line:1968:3, col:69> Text=" -EINTR and K_POLL_STATE_CANCELLED state (and per above, subsequent"
|   | `-TextComment 0x559b74c44b10 <line:1969:3, col:35> Text=" k_queue_get() will return NULL)."
|   |-ParagraphComment 0x559b74c44bc0 <line:1971:3>
|   | `-TextComment 0x559b74c44b90 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c44be0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c44c40 <col:9, col:31>
|   |   `-TextComment 0x559b74c44c10 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c44c90 <line:1973:3>
|   | `-TextComment 0x559b74c44c60 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c44cb0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x559b74c44d40 <col:16, col:37>
|   |   `-TextComment 0x559b74c44d10 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x559b74c44d90 <line:1975:3>
|   | `-TextComment 0x559b74c44d60 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c44db0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c44e10 <col:11, col:14>
|       `-TextComment 0x559b74c44de0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74b8d230 <line:1993:1, col:61> col:13 used k_queue_append 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x559b74b8d0a0 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x559b74b8d118 <col:51, col:57> col:57 data 'void *'
| `-FullComment 0x559b74c454a0 <line:1980:3, line:1991:14>
|   |-ParagraphComment 0x559b74c44f20 <line:1980:3>
|   | `-TextComment 0x559b74c44ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c44f40 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c44fa0 <col:10, col:50>
|   |   `-TextComment 0x559b74c44f70 <col:10, col:50> Text=" Append an element to the end of a queue."
|   |-ParagraphComment 0x559b74c450c0 <line:1982:3, line:1984:24>
|   | |-TextComment 0x559b74c44fc0 <line:1982:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x559b74c45010 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x559b74c45030 <col:49, col:74> Text=" A queue data item must be"
|   | |-TextComment 0x559b74c45050 <line:1983:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x559b74c45070 <line:1984:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x559b74c45110 <line:1986:3>
|   | `-TextComment 0x559b74c450e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c45130 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c45190 <col:9, col:31>
|   |   `-TextComment 0x559b74c45160 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c451e0 <line:1988:3>
|   | `-TextComment 0x559b74c451b0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c45200 <col:4, line:1989:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x559b74c452b0 <line:1988:16, line:1989:3>
|   |   |-TextComment 0x559b74c45260 <line:1988:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x559b74c45280 <line:1989:3> Text=" "
|   |-ParamCommandComment 0x559b74c452d0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x559b74c45360 <col:15, col:40>
|   |   `-TextComment 0x559b74c45330 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x559b74c453b0 <line:1991:3>
|   | `-TextComment 0x559b74c45380 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c453d0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c45430 <col:11, col:14>
|       `-TextComment 0x559b74c45400 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74b8d4c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2011:71> col:17 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x559b74b8d330 <col:38, col:54> col:54 queue 'struct k_queue *'
| |-ParmVarDecl 0x559b74b8d3a8 <col:61, col:67> col:67 data 'void *'
| `-FullComment 0x559b74c45b20 <line:1996:3, line:2009:78>
|   |-ParagraphComment 0x559b74c45540 <line:1996:3>
|   | `-TextComment 0x559b74c45510 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c45560 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c455c0 <col:10, col:39>
|   |   `-TextComment 0x559b74c45590 <col:10, col:39> Text=" Append an element to a queue."
|   |-ParagraphComment 0x559b74c45700 <line:1998:3, line:2001:50>
|   | |-TextComment 0x559b74c455e0 <line:1998:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x559b74c45630 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x559b74c45650 <col:49, col:76> Text=" There is an implicit memory"
|   | |-TextComment 0x559b74c45670 <line:1999:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x559b74c45690 <line:2000:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x559b74c456b0 <line:2001:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x559b74c45750 <line:2003:3>
|   | `-TextComment 0x559b74c45720 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c45770 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c457d0 <col:9, col:31>
|   |   `-TextComment 0x559b74c457a0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c45820 <line:2005:3>
|   | `-TextComment 0x559b74c457f0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c45840 <col:4, line:2006:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x559b74c458f0 <line:2005:16, line:2006:3>
|   |   |-TextComment 0x559b74c458a0 <line:2005:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x559b74c458c0 <line:2006:3> Text=" "
|   |-ParamCommandComment 0x559b74c45910 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x559b74c459a0 <col:15, col:40>
|   |   `-TextComment 0x559b74c45970 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x559b74c45ab0 <line:2008:3, line:2009:78>
|     |-TextComment 0x559b74c459c0 <line:2008:3> Text=" "
|     |-InlineCommandComment 0x559b74c459e0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x559b74c45a00 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x559b74c45a20 <line:2009:3> Text=" "
|     |-InlineCommandComment 0x559b74c45a40 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x559b74c45a60 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x559b74b8d6c8 <line:2027:1, col:62> col:13 k_queue_prepend 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x559b74b8d5c0 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x559b74b8d638 <col:52, col:58> col:58 data 'void *'
| `-FullComment 0x559b74c46140 <line:2014:3, line:2025:14>
|   |-ParagraphComment 0x559b74c45bc0 <line:2014:3>
|   | `-TextComment 0x559b74c45b90 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c45be0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c45c40 <col:10, col:40>
|   |   `-TextComment 0x559b74c45c10 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x559b74c45d60 <line:2016:3, line:2018:24>
|   | |-TextComment 0x559b74c45c60 <line:2016:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x559b74c45cb0 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x559b74c45cd0 <col:50, col:75> Text=" A queue data item must be"
|   | |-TextComment 0x559b74c45cf0 <line:2017:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x559b74c45d10 <line:2018:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x559b74c45db0 <line:2020:3>
|   | `-TextComment 0x559b74c45d80 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c45dd0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c45e30 <col:9, col:31>
|   |   `-TextComment 0x559b74c45e00 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c45e80 <line:2022:3>
|   | `-TextComment 0x559b74c45e50 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c45ea0 <col:4, line:2023:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x559b74c45f50 <line:2022:16, line:2023:3>
|   |   |-TextComment 0x559b74c45f00 <line:2022:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x559b74c45f20 <line:2023:3> Text=" "
|   |-ParamCommandComment 0x559b74c45f70 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x559b74c46000 <col:15, col:40>
|   |   `-TextComment 0x559b74c45fd0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x559b74c46050 <line:2025:3>
|   | `-TextComment 0x559b74c46020 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c46070 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c460d0 <col:11, col:14>
|       `-TextComment 0x559b74c460a0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74b8d8d8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2045:72> col:17 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x559b74b8d7d0 <col:39, col:55> col:55 queue 'struct k_queue *'
| |-ParmVarDecl 0x559b74b8d848 <col:62, col:68> col:68 data 'void *'
| `-FullComment 0x559b74c467c0 <line:2030:3, line:2043:78>
|   |-ParagraphComment 0x559b74c461e0 <line:2030:3>
|   | `-TextComment 0x559b74c461b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c46200 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c46260 <col:10, col:40>
|   |   `-TextComment 0x559b74c46230 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x559b74c463a0 <line:2032:3, line:2035:50>
|   | |-TextComment 0x559b74c46280 <line:2032:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x559b74c462d0 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x559b74c462f0 <col:50, col:77> Text=" There is an implicit memory"
|   | |-TextComment 0x559b74c46310 <line:2033:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x559b74c46330 <line:2034:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x559b74c46350 <line:2035:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x559b74c463f0 <line:2037:3>
|   | `-TextComment 0x559b74c463c0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c46410 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c46470 <col:9, col:31>
|   |   `-TextComment 0x559b74c46440 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c464c0 <line:2039:3>
|   | `-TextComment 0x559b74c46490 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c464e0 <col:4, line:2040:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x559b74c46590 <line:2039:16, line:2040:3>
|   |   |-TextComment 0x559b74c46540 <line:2039:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x559b74c46560 <line:2040:3> Text=" "
|   |-ParamCommandComment 0x559b74c465b0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x559b74c46640 <col:15, col:40>
|   |   `-TextComment 0x559b74c46610 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x559b74c46750 <line:2042:3, line:2043:78>
|     |-TextComment 0x559b74c46660 <line:2042:3> Text=" "
|     |-InlineCommandComment 0x559b74c46680 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x559b74c466a0 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x559b74c466c0 <line:2043:3> Text=" "
|     |-InlineCommandComment 0x559b74c466e0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x559b74c46700 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x559b74b8dc10 <line:2062:1, col:73> col:13 k_queue_insert 'void (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x559b74b8d9e0 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x559b74b8da58 <col:51, col:57> col:57 prev 'void *'
| |-ParmVarDecl 0x559b74b8dad0 <col:63, col:69> col:69 data 'void *'
| `-FullComment 0x559b74c46ee0 <line:2048:3, line:2060:14>
|   |-ParagraphComment 0x559b74c46860 <line:2048:3>
|   | `-TextComment 0x559b74c46830 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c46880 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c468e0 <col:10, col:40>
|   |   `-TextComment 0x559b74c468b0 <col:10, col:40> Text=" Inserts an element to a queue."
|   |-ParagraphComment 0x559b74c46a20 <line:2050:3, line:2052:45>
|   | |-TextComment 0x559b74c46900 <line:2050:3, col:39> Text=" This routine inserts a data item to "
|   | |-InlineCommandComment 0x559b74c46950 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x559b74c46990 <col:48, col:76> Text=" after previous item. A queue"
|   | |-TextComment 0x559b74c469b0 <line:2051:3, col:70> Text=" data item must be aligned on a word boundary, and the first word of"
|   | `-TextComment 0x559b74c469d0 <line:2052:3, col:45> Text=" the item is reserved for the kernel's use."
|   |-ParagraphComment 0x559b74c46a70 <line:2054:3>
|   | `-TextComment 0x559b74c46a40 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c46a90 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c46af0 <col:9, col:31>
|   |   `-TextComment 0x559b74c46ac0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c46b40 <line:2056:3>
|   | `-TextComment 0x559b74c46b10 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c46b60 <col:4, line:2057:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x559b74c46c10 <line:2056:16, line:2057:3>
|   |   |-TextComment 0x559b74c46bc0 <line:2056:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x559b74c46be0 <line:2057:3> Text=" "
|   |-ParamCommandComment 0x559b74c46c30 <col:4, line:2058:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x559b74c46ce0 <line:2057:15, line:2058:3>
|   |   |-TextComment 0x559b74c46c90 <line:2057:15, col:49> Text=" Address of the previous data item."
|   |   `-TextComment 0x559b74c46cb0 <line:2058:3> Text=" "
|   |-ParamCommandComment 0x559b74c46d00 <col:4, col:40> [in] implicitly Param="data" ParamIndex=2
|   | `-ParagraphComment 0x559b74c46d90 <col:15, col:40>
|   |   `-TextComment 0x559b74c46d60 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x559b74c46de0 <line:2060:3>
|   | `-TextComment 0x559b74c46db0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c46e00 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c46e60 <col:11, col:14>
|       `-TextComment 0x559b74c46e30 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74b8df48 <line:2082:1, col:77> col:12 k_queue_append_list 'int (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x559b74b8dd20 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x559b74b8dd98 <col:55, col:61> col:61 head 'void *'
| |-ParmVarDecl 0x559b74b8de10 <col:67, col:73> col:73 tail 'void *'
| `-FullComment 0x559b74c47690 <line:2065:3, line:2081:1>
|   |-ParagraphComment 0x559b74c46f80 <line:2065:3>
|   | `-TextComment 0x559b74c46f50 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c46fa0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x559b74c47000 <col:10, col:58>
|   |   `-TextComment 0x559b74c46fd0 <col:10, col:58> Text=" Atomically append a list of elements to a queue."
|   |-ParagraphComment 0x559b74c47140 <line:2067:3, line:2070:19>
|   | |-TextComment 0x559b74c47020 <line:2067:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x559b74c47070 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x559b74c47090 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x559b74c470b0 <line:2068:3, col:70> Text=" The data items must be in a singly-linked list, with the first word"
|   | |-TextComment 0x559b74c470d0 <line:2069:3, col:69> Text=" in each data item pointing to the next data item; the list must be"
|   | `-TextComment 0x559b74c470f0 <line:2070:3, col:19> Text=" NULL-terminated."
|   |-ParagraphComment 0x559b74c47190 <line:2072:3>
|   | `-TextComment 0x559b74c47160 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c471b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c47210 <col:9, col:31>
|   |   `-TextComment 0x559b74c471e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c47260 <line:2074:3>
|   | `-TextComment 0x559b74c47230 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c47280 <col:4, line:2075:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x559b74c47330 <line:2074:16, line:2075:3>
|   |   |-TextComment 0x559b74c472e0 <line:2074:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x559b74c47300 <line:2075:3> Text=" "
|   |-ParamCommandComment 0x559b74c47350 <col:4, line:2076:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x559b74c47400 <line:2075:15, line:2076:3>
|   |   |-TextComment 0x559b74c473b0 <line:2075:15, col:59> Text=" Pointer to first node in singly-linked list."
|   |   `-TextComment 0x559b74c473d0 <line:2076:3> Text=" "
|   |-ParamCommandComment 0x559b74c47420 <col:4, col:58> [in] implicitly Param="tail" ParamIndex=2
|   | `-ParagraphComment 0x559b74c474b0 <col:15, col:58>
|   |   `-TextComment 0x559b74c47480 <col:15, col:58> Text=" Pointer to last node in singly-linked list."
|   |-ParagraphComment 0x559b74c475c0 <line:2078:3, line:2079:43>
|   | |-TextComment 0x559b74c474d0 <line:2078:3> Text=" "
|   | |-InlineCommandComment 0x559b74c474f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c47510 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x559b74c47530 <line:2079:3> Text=" "
|   | |-InlineCommandComment 0x559b74c47550 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x559b74c47570 <col:11, col:43> Text=" -EINVAL on invalid supplied data"
|   `-ParagraphComment 0x559b74c47610 <line:2081:1>
|     `-TextComment 0x559b74c475e0 <col:1> Text=" "
|-FunctionDecl 0x559b74b8e1d8 <line:2099:1, col:72> col:12 k_queue_merge_slist 'int (struct k_queue *, sys_slist_t *)' extern
| |-ParmVarDecl 0x559b74b8e050 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x559b74b8e0c0 <col:55, col:68> col:68 list 'sys_slist_t *'
| `-FullComment 0x559b74c47cf0 <line:2085:3, line:2097:34>
|   |-ParagraphComment 0x559b74c47730 <line:2085:3>
|   | `-TextComment 0x559b74c47700 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c47750 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x559b74c477b0 <col:10, col:55>
|   |   `-TextComment 0x559b74c47780 <col:10, col:55> Text=" Atomically add a list of elements to a queue."
|   |-ParagraphComment 0x559b74c478d0 <line:2087:3, line:2089:67>
|   | |-TextComment 0x559b74c477d0 <line:2087:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x559b74c47820 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x559b74c47840 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x559b74c47860 <line:2088:3, col:69> Text=" The data items must be in a singly-linked list implemented using a"
|   | `-TextComment 0x559b74c47880 <line:2089:3, col:67> Text=" sys_slist_t object. Upon completion, the original list is empty."
|   |-ParagraphComment 0x559b74c47920 <line:2091:3>
|   | `-TextComment 0x559b74c478f0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c47940 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c479a0 <col:9, col:31>
|   |   `-TextComment 0x559b74c47970 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c479f0 <line:2093:3>
|   | `-TextComment 0x559b74c479c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c47a10 <col:4, line:2094:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x559b74c47ac0 <line:2093:16, line:2094:3>
|   |   |-TextComment 0x559b74c47a70 <line:2093:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x559b74c47a90 <line:2094:3> Text=" "
|   |-ParamCommandComment 0x559b74c47ae0 <col:4, col:45> [in] implicitly Param="list" ParamIndex=1
|   | `-ParagraphComment 0x559b74c47b70 <col:15, col:45>
|   |   `-TextComment 0x559b74c47b40 <col:15, col:45> Text=" Pointer to sys_slist_t object."
|   `-ParagraphComment 0x559b74c47c80 <line:2096:3, line:2097:34>
|     |-TextComment 0x559b74c47b90 <line:2096:3> Text=" "
|     |-InlineCommandComment 0x559b74c47bb0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x559b74c47bd0 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x559b74c47bf0 <line:2097:3> Text=" "
|     |-InlineCommandComment 0x559b74c47c10 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x559b74c47c30 <col:11, col:34> Text=" -EINVAL on invalid data"
|-FunctionDecl 0x559b74b8e468 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2117:65> col:17 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x559b74b8e2e0 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x559b74b8e350 <col:52, col:58> col:58 timeout 's32_t':'int'
| `-FullComment 0x559b74c483d0 <line:2102:3, line:2115:48>
|   |-ParagraphComment 0x559b74c47d90 <line:2102:3>
|   | `-TextComment 0x559b74c47d60 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c47db0 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x559b74c47e10 <col:10, col:38>
|   |   `-TextComment 0x559b74c47de0 <col:10, col:38> Text=" Get an element from a queue."
|   |-ParagraphComment 0x559b74c47f00 <line:2104:3, line:2105:46>
|   | |-TextComment 0x559b74c47e30 <line:2104:3, col:45> Text=" This routine removes first data item from "
|   | |-InlineCommandComment 0x559b74c47e80 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x559b74c47ea0 <col:55, col:76> Text=" The first word of the"
|   | `-TextComment 0x559b74c47ec0 <line:2105:3, col:46> Text=" data item is reserved for the kernel's use."
|   |-ParagraphComment 0x559b74c47f50 <line:2107:3>
|   | `-TextComment 0x559b74c47f20 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c47f70 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x559b74c48050 <col:9, col:72>
|   |   |-TextComment 0x559b74c47fa0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x559b74c47ff0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x559b74c48010 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x559b74c480a0 <line:2109:3>
|   | `-TextComment 0x559b74c48070 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c480c0 <col:4, line:2110:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x559b74c48170 <line:2109:16, line:2110:3>
|   |   |-TextComment 0x559b74c48120 <line:2109:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x559b74c48140 <line:2110:3> Text=" "
|   |-ParamCommandComment 0x559b74c48190 <col:4, line:2112:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x559b74c48270 <line:2110:18, line:2112:28>
|   |   |-TextComment 0x559b74c481f0 <line:2110:18, col:71> Text=" Non-negative waiting period to obtain a data item (in"
|   |   |-TextComment 0x559b74c48210 <line:2111:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x559b74c48230 <line:2112:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x559b74c482c0 <line:2114:3>
|   | `-TextComment 0x559b74c48290 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c482e0 <col:4, line:2115:48> Name="return"
|     `-ParagraphComment 0x559b74c48360 <line:2114:11, line:2115:48>
|       |-TextComment 0x559b74c48310 <line:2114:11, col:67> Text=" Address of the data item if successful; NULL if returned"
|       `-TextComment 0x559b74c48330 <line:2115:3, col:48> Text=" without waiting, or waiting period timed out."
|-FunctionDecl 0x559b74b8e700 <line:2133:1, line:2136:1> line:2133:20 k_queue_remove 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x559b74b8e570 <col:35, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x559b74b8e5e8 <col:58, col:64> col:64 used data 'void *'
| |-CompoundStmt 0x559b74b8e9d8 <line:2134:1, line:2136:1>
| | `-ReturnStmt 0x559b74b8e998 <line:2135:2, col:72>
| |   `-CallExpr 0x559b74b8e960 <col:9, col:72> 'bool'
| |     |-ImplicitCastExpr 0x559b74b8e948 <col:9> 'bool (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74b8e7b0 <col:9> 'bool (sys_sflist_t *, sys_sfnode_t *)' Function 0x559b74b050c0 'sys_sflist_find_and_remove' 'bool (sys_sflist_t *, sys_sfnode_t *)'
| |     |-UnaryOperator 0x559b74b8e850 <col:36, col:44> 'sys_sflist_t *' prefix '&'
| |     | `-MemberExpr 0x559b74b8e818 <col:37, col:44> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x559b74b8bf28
| |     |   `-ImplicitCastExpr 0x559b74b8e800 <col:37> 'struct k_queue *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x559b74b8e7d8 <col:37> 'struct k_queue *' lvalue ParmVar 0x559b74b8e570 'queue' 'struct k_queue *'
| |     `-CStyleCastExpr 0x559b74b8e8c0 <col:52, col:68> 'sys_sfnode_t *' <BitCast>
| |       `-ImplicitCastExpr 0x559b74b8e8a8 <col:68> 'void *' <LValueToRValue>
| |         `-DeclRefExpr 0x559b74b8e870 <col:68> 'void *' lvalue ParmVar 0x559b74b8e5e8 'data' 'void *'
| `-FullComment 0x559b74c48a10 <line:2120:3, line:2131:40>
|   |-ParagraphComment 0x559b74c48470 <line:2120:3>
|   | `-TextComment 0x559b74c48440 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c48490 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x559b74c484f0 <col:10, col:41>
|   |   `-TextComment 0x559b74c484c0 <col:10, col:41> Text=" Remove an element from a queue."
|   |-ParagraphComment 0x559b74c48610 <line:2122:3, line:2124:76>
|   | |-TextComment 0x559b74c48510 <line:2122:3, col:39> Text=" This routine removes data item from "
|   | |-InlineCommandComment 0x559b74c48560 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x559b74c48580 <col:49, col:70> Text=" The first word of the"
|   | |-TextComment 0x559b74c485a0 <line:2123:3, col:77> Text=" data item is reserved for the kernel's use. Removing elements from k_queue"
|   | `-TextComment 0x559b74c485c0 <line:2124:3, col:76> Text=" rely on sys_slist_find_and_remove which is not a constant time operation."
|   |-ParagraphComment 0x559b74c48660 <line:2126:3>
|   | `-TextComment 0x559b74c48630 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c48680 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x559b74c486e0 <col:9, col:30>
|   |   `-TextComment 0x559b74c486b0 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x559b74c48730 <line:2128:3>
|   | `-TextComment 0x559b74c48700 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c48750 <col:4, line:2129:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x559b74c48800 <line:2128:16, line:2129:3>
|   |   |-TextComment 0x559b74c487b0 <line:2128:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x559b74c487d0 <line:2129:3> Text=" "
|   |-ParamCommandComment 0x559b74c48820 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x559b74c488b0 <col:15, col:40>
|   |   `-TextComment 0x559b74c48880 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x559b74c48900 <line:2131:3>
|   | `-TextComment 0x559b74c488d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c48920 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x559b74c489a0 <col:11, col:40>
|       `-TextComment 0x559b74c48950 <col:11, col:40> Text=" true if data item was removed"
|-FunctionDecl 0x559b74b8eb50 <line:2152:1, line:2164:1> line:2152:20 k_queue_unique_append 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x559b74b8ea18 <col:42, col:58> col:58 used queue 'struct k_queue *'
| |-ParmVarDecl 0x559b74b8ea90 <col:65, col:71> col:71 used data 'void *'
| |-CompoundStmt 0x559b74b8f388 <line:2153:1, line:2164:1>
| | |-DeclStmt 0x559b74b8ec70 <line:2154:2, col:20>
| | | `-VarDecl 0x559b74b8ec10 <col:2, col:16> col:16 used test 'sys_sfnode_t *'
| | |-ForStmt 0x559b74b8f178 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:2, /vagrant/ext/zephyros/zephyr/include/kernel.h:2160:2>
| | | |-BinaryOperator 0x559b74b8edb8 <line:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x559b74b8ec88 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x559b74b8ec10 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x559b74b8ed88 <<scratch space>:153:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x559b74b8ed70 <<scratch space>:153:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x559b74b8ecb0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8980 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
| | | |   `-UnaryOperator 0x559b74b8ed50 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:27, col:35> 'sys_sflist_t *' prefix '&'
| | | |     `-MemberExpr 0x559b74b8ed18 <col:28, col:35> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x559b74b8bf28
| | | |       `-ImplicitCastExpr 0x559b74b8ed00 <col:28> 'struct k_queue *' <LValueToRValue>
| | | |         `-DeclRefExpr 0x559b74b8ecd8 <col:28> 'struct k_queue *' lvalue ParmVar 0x559b74b8ea18 'queue' 'struct k_queue *'
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x559b74b8eeb8 <col:43, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| | | | |-ImplicitCastExpr 0x559b74b8ee88 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x559b74b8ede0 <col:43> 'sys_sfnode_t *' lvalue Var 0x559b74b8ec10 'test' 'sys_sfnode_t *'
| | | | `-ImplicitCastExpr 0x559b74b8eea0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
| | | |   `-ParenExpr 0x559b74b8ee68 <col:14, col:24> 'void *'
| | | |     `-CStyleCastExpr 0x559b74b8ee40 <col:15, col:23> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x559b74b8ee08 <col:23> 'int' 0
| | | |-BinaryOperator 0x559b74b8efb8 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x559b74b8eee0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x559b74b8ec10 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x559b74b8ef70 <<scratch space>:155:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x559b74b8ef58 <<scratch space>:155:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x559b74b8ef08 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x559b74afa358 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
| | | |   `-ImplicitCastExpr 0x559b74b8efa0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x559b74b8ef30 <col:43> 'sys_sfnode_t *' lvalue Var 0x559b74b8ec10 'test' 'sys_sfnode_t *'
| | | `-CompoundStmt 0x559b74b8f160 <col:49, line:2160:2>
| | |   `-IfStmt 0x559b74b8f128 <line:2157:3, line:2159:3>
| | |     |-<<<NULL>>>
| | |     |-<<<NULL>>>
| | |     |-BinaryOperator 0x559b74b8f098 <line:2157:7, col:32> 'int' '=='
| | |     | |-ImplicitCastExpr 0x559b74b8f080 <col:7> 'sys_sfnode_t *' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x559b74b8efe0 <col:7> 'sys_sfnode_t *' lvalue Var 0x559b74b8ec10 'test' 'sys_sfnode_t *'
| | |     | `-CStyleCastExpr 0x559b74b8f058 <col:15, col:32> 'sys_sfnode_t *' <BitCast>
| | |     |   `-ImplicitCastExpr 0x559b74b8f040 <col:32> 'void *' <LValueToRValue>
| | |     |     `-DeclRefExpr 0x559b74b8f008 <col:32> 'void *' lvalue ParmVar 0x559b74b8ea90 'data' 'void *'
| | |     |-CompoundStmt 0x559b74b8f110 <col:38, line:2159:3>
| | |     | `-ReturnStmt 0x559b74b8f0f8 <line:2158:4, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| | |     |   `-ImplicitCastExpr 0x559b74b8f0e0 <col:16> 'bool' <IntegralToBoolean>
| | |     |     `-IntegerLiteral 0x559b74b8f0c0 <col:16> 'int' 0
| | |     `-<<<NULL>>>
| | |-CallExpr 0x559b74b8f2a0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2162:2, col:28> 'void'
| | | |-ImplicitCastExpr 0x559b74b8f288 <col:2> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x559b74b8f1b0 <col:2> 'void (struct k_queue *, void *)' Function 0x559b74b8d230 'k_queue_append' 'void (struct k_queue *, void *)'
| | | |-ImplicitCastExpr 0x559b74b8f2d8 <col:17> 'struct k_queue *' <LValueToRValue>
| | | | `-DeclRefExpr 0x559b74b8f1d8 <col:17> 'struct k_queue *' lvalue ParmVar 0x559b74b8ea18 'queue' 'struct k_queue *'
| | | `-ImplicitCastExpr 0x559b74b8f2f0 <col:24> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x559b74b8f200 <col:24> 'void *' lvalue ParmVar 0x559b74b8ea90 'data' 'void *'
| | `-ReturnStmt 0x559b74b8f340 <line:2163:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
| |   `-ImplicitCastExpr 0x559b74b8f328 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x559b74b8f308 <col:16> 'int' 1
| `-FullComment 0x559b74c49030 </vagrant/ext/zephyros/zephyr/include/kernel.h:2139:3, line:2150:52>
|   |-ParagraphComment 0x559b74c48ab0 <line:2139:3>
|   | `-TextComment 0x559b74c48a80 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c48ad0 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x559b74c48b30 <col:10, col:72>
|   |   `-TextComment 0x559b74c48b00 <col:10, col:72> Text=" Append an element to a queue only if it's not present already."
|   |-ParagraphComment 0x559b74c48c50 <line:2141:3, line:2143:78>
|   | |-TextComment 0x559b74c48b50 <line:2141:3, col:37> Text=" This routine appends data item to "
|   | |-InlineCommandComment 0x559b74c48ba0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x559b74c48bc0 <col:47, col:73> Text=" The first word of the data"
|   | |-TextComment 0x559b74c48be0 <line:2142:3, col:71> Text=" item is reserved for the kernel's use. Appending elements to k_queue"
|   | `-TextComment 0x559b74c48c00 <line:2143:3, col:78> Text=" relies on sys_slist_is_node_in_list which is not a constant time operation."
|   |-ParagraphComment 0x559b74c48ca0 <line:2145:3>
|   | `-TextComment 0x559b74c48c70 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c48cc0 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x559b74c48d20 <col:9, col:30>
|   |   `-TextComment 0x559b74c48cf0 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x559b74c48d70 <line:2147:3>
|   | `-TextComment 0x559b74c48d40 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c48d90 <col:4, line:2148:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x559b74c48e40 <line:2147:16, line:2148:3>
|   |   |-TextComment 0x559b74c48df0 <line:2147:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x559b74c48e10 <line:2148:3> Text=" "
|   |-ParamCommandComment 0x559b74c48e60 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x559b74c48ef0 <col:15, col:40>
|   |   `-TextComment 0x559b74c48ec0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x559b74c48f40 <line:2150:3>
|   | `-TextComment 0x559b74c48f10 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c48f60 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x559b74c48fc0 <col:11, col:52>
|       `-TextComment 0x559b74c48f90 <col:11, col:52> Text=" true if data item was added, false if not"
|-FunctionDecl 0x559b74b8f4e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2179:53> col:15 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x559b74b8f3e0 <col:32, col:48> col:48 queue 'struct k_queue *'
| `-FullComment 0x559b74c49570 <line:2167:3, line:2177:34>
|   |-ParagraphComment 0x559b74c490d0 <line:2167:3>
|   | `-TextComment 0x559b74c490a0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c490f0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x559b74c49150 <col:10, col:56>
|   |   `-TextComment 0x559b74c49120 <col:10, col:56> Text=" Query a queue to see if it has data available."
|   |-ParagraphComment 0x559b74c491c0 <line:2169:3, line:2170:59>
|   | |-TextComment 0x559b74c49170 <line:2169:3, col:77> Text=" Note that the data might be already gone by the time this function returns"
|   | `-TextComment 0x559b74c49190 <line:2170:3, col:59> Text=" if other threads are also trying to read from the queue."
|   |-ParagraphComment 0x559b74c49210 <line:2172:3>
|   | `-TextComment 0x559b74c491e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c49230 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c49290 <col:9, col:31>
|   |   `-TextComment 0x559b74c49260 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c492e0 <line:2174:3>
|   | `-TextComment 0x559b74c492b0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c49300 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x559b74c49390 <col:16, col:37>
|   |   `-TextComment 0x559b74c49360 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x559b74c493e0 <line:2176:3>
|   | `-TextComment 0x559b74c493b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c49400 <col:4, line:2177:3> Name="return"
|   | `-ParagraphComment 0x559b74c49480 <line:2176:11, line:2177:3>
|   |   |-TextComment 0x559b74c49430 <line:2176:11, col:42> Text=" Non-zero if the queue is empty."
|   |   `-TextComment 0x559b74c49450 <line:2177:3> Text=" "
|   `-BlockCommandComment 0x559b74c494a0 <col:4, col:34> Name="return"
|     `-ParagraphComment 0x559b74c49500 <col:11, col:34>
|       `-TextComment 0x559b74c494d0 <col:11, col:34> Text=" 0 if data is available."
|-FunctionDecl 0x559b74b8f648 <line:2181:1, line:2184:1> line:2181:19 used z_impl_k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x559b74b8f5b8 <col:43, col:59> col:59 used queue 'struct k_queue *'
| `-CompoundStmt 0x559b74b8f878 <line:2182:1, line:2184:1>
|   `-ReturnStmt 0x559b74b8f838 <line:2183:2, col:48>
|     `-CStyleCastExpr 0x559b74b8f810 <col:9, col:48> 'int' <IntegralCast>
|       `-CallExpr 0x559b74b8f7c8 <col:14, col:48> 'bool'
|         |-ImplicitCastExpr 0x559b74b8f7b0 <col:14> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x559b74b8f6f0 <col:14> 'bool (sys_sflist_t *)' Function 0x559b74af9ae0 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|         `-UnaryOperator 0x559b74b8f790 <col:34, col:42> 'sys_sflist_t *' prefix '&'
|           `-MemberExpr 0x559b74b8f758 <col:35, col:42> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x559b74b8bf28
|             `-ImplicitCastExpr 0x559b74b8f740 <col:35> 'struct k_queue *' <LValueToRValue>
|               `-DeclRefExpr 0x559b74b8f718 <col:35> 'struct k_queue *' lvalue ParmVar 0x559b74b8f5b8 'queue' 'struct k_queue *'
|-FunctionDecl 0x559b74b8f9c8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2195:56> col:17 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x559b74b8f8b8 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x559b74c49910 <line:2187:3, line:2193:51>
|   |-ParagraphComment 0x559b74c49610 <line:2187:3>
|   | `-TextComment 0x559b74c495e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c49630 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559b74c49690 <col:10, col:44>
|   |   `-TextComment 0x559b74c49660 <col:10, col:44> Text=" Peek element at the head of queue."
|   |-ParagraphComment 0x559b74c496e0 <line:2189:3, col:61>
|   | `-TextComment 0x559b74c496b0 <col:3, col:61> Text=" Return element from the head of queue without removing it."
|   |-ParagraphComment 0x559b74c49730 <line:2191:3>
|   | `-TextComment 0x559b74c49700 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c49750 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x559b74c497e0 <col:16, col:37>
|   |   `-TextComment 0x559b74c497b0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x559b74c49830 <line:2193:3>
|   | `-TextComment 0x559b74c49800 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c49850 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x559b74c498b0 <col:11, col:51>
|       `-TextComment 0x559b74c49880 <col:11, col:51> Text=" Head element, or NULL if queue is empty."
|-FunctionDecl 0x559b74b904a0 <line:2197:1, line:2200:1> line:2197:21 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x559b74b8fa98 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x559b74b907a8 <line:2198:1, line:2200:1>
|   `-ReturnStmt 0x559b74b90760 <line:2199:2, col:70>
|     `-CallExpr 0x559b74b90710 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x559b74b906f8 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74b90548 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x559b74b8cb30 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x559b74b90648 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x559b74b90630 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x559b74b90570 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8980 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x559b74b90610 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x559b74b905d8 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x559b74b8bf28
|       |     `-ImplicitCastExpr 0x559b74b905c0 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x559b74b90598 <col:49> 'struct k_queue *' lvalue ParmVar 0x559b74b8fa98 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x559b74b90748 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x559b74b90678 <col:16> 'int' 0
|-FunctionDecl 0x559b74b90878 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2211:56> col:17 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x559b74b907e8 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x559b74c49cb0 <line:2203:3, line:2209:51>
|   |-ParagraphComment 0x559b74c499b0 <line:2203:3>
|   | `-TextComment 0x559b74c49980 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c499d0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559b74c49a30 <col:10, col:44>
|   |   `-TextComment 0x559b74c49a00 <col:10, col:44> Text=" Peek element at the tail of queue."
|   |-ParagraphComment 0x559b74c49a80 <line:2205:3, col:61>
|   | `-TextComment 0x559b74c49a50 <col:3, col:61> Text=" Return element from the tail of queue without removing it."
|   |-ParagraphComment 0x559b74c49ad0 <line:2207:3>
|   | `-TextComment 0x559b74c49aa0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c49af0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x559b74c49b80 <col:16, col:37>
|   |   `-TextComment 0x559b74c49b50 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x559b74c49bd0 <line:2209:3>
|   | `-TextComment 0x559b74c49ba0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c49bf0 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x559b74c49c50 <col:11, col:51>
|       `-TextComment 0x559b74c49c20 <col:11, col:51> Text=" Tail element, or NULL if queue is empty."
|-FunctionDecl 0x559b74b909d8 <line:2213:1, line:2216:1> line:2213:21 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x559b74b90948 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x559b74b90ca8 <line:2214:1, line:2216:1>
|   `-ReturnStmt 0x559b74b90c38 <line:2215:2, col:70>
|     `-CallExpr 0x559b74b90be8 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x559b74b90bd0 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74b90a80 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x559b74b8cb30 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x559b74b90b80 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x559b74b90b68 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x559b74b90aa8 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559b74af8ba8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x559b74b90b48 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x559b74b90b10 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x559b74b8bf28
|       |     `-ImplicitCastExpr 0x559b74b90af8 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x559b74b90ad0 <col:49> 'struct k_queue *' lvalue ParmVar 0x559b74b90948 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x559b74b90c20 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x559b74b90bb0 <col:16> 'int' 0
|-RecordDecl 0x559b74b90cc0 prev 0x559b74b730b0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2310:1, line:2312:1> line:2310:8 struct k_fifo definition
| `-FieldDecl 0x559b74b90d68 <line:2311:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-RecordDecl 0x559b74b91158 prev 0x559b74b73160 <line:2525:1, line:2527:1> line:2525:8 struct k_lifo definition
| |-FullComment 0x559b74c49dd0 <line:2523:4, col:7>
| | `-ParagraphComment 0x559b74c49da0 <col:4, col:7>
| |   |-TextComment 0x559b74c49d20 <col:4> Text=" "
| |   |-TextComment 0x559b74c49d40 <col:5> Text="@"
| |   `-TextComment 0x559b74c49d60 <col:6, col:7> Text="} "
| `-FieldDecl 0x559b74b91200 <line:2526:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-TypedefDecl 0x559b74b91438 <line:2641:1, col:19> col:19 referenced stack_data_t 'uintptr_t':'unsigned long'
| `-TypedefType 0x559b74b100b0 'uintptr_t' sugar
|   |-Typedef 0x559b74a24938 'uintptr_t'
|   `-BuiltinType 0x559b749d8ad0 'unsigned long'
|-RecordDecl 0x559b74a8e1b0 prev 0x559b74b73210 <line:2643:1, line:2651:1> line:2643:8 struct k_stack definition
| |-FieldDecl 0x559b74a8e248 <line:2644:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x559b74a8e2b0 <line:2645:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-FieldDecl 0x559b74a8e388 <line:2646:2, col:16> col:16 base 'stack_data_t *'
| |-FieldDecl 0x559b74a8e3e0 <col:2, col:23> col:23 next 'stack_data_t *'
| |-FieldDecl 0x559b74a8e438 <col:2, col:30> col:30 top 'stack_data_t *'
| `-FieldDecl 0x559b74a8e490 <line:2650:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x559b74a8e830 <line:2686:1, line:2687:44> line:2686:6 k_stack_init 'void (struct k_stack *, stack_data_t *, u32_t)'
| |-ParmVarDecl 0x559b74a8e620 <col:19, col:35> col:35 stack 'struct k_stack *'
| |-ParmVarDecl 0x559b74a8e690 <line:2687:5, col:19> col:19 buffer 'stack_data_t *'
| |-ParmVarDecl 0x559b74a8e700 <col:27, col:33> col:33 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x559b74c4a3e0 <line:2675:3, line:2685:1>
|   |-ParagraphComment 0x559b74c49e70 <line:2675:3>
|   | `-TextComment 0x559b74c49e40 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c49e90 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x559b74c49ef0 <col:10, col:29>
|   |   `-TextComment 0x559b74c49ec0 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x559b74c49f40 <line:2677:3, col:67>
|   | `-TextComment 0x559b74c49f10 <col:3, col:67> Text=" This routine initializes a stack object, prior to its first use."
|   |-ParagraphComment 0x559b74c49f90 <line:2679:3>
|   | `-TextComment 0x559b74c49f60 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c49fb0 <col:4, line:2680:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x559b74c4a060 <line:2679:16, line:2680:3>
|   |   |-TextComment 0x559b74c4a010 <line:2679:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x559b74c4a030 <line:2680:3> Text=" "
|   |-ParamCommandComment 0x559b74c4a080 <col:4, line:2681:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x559b74c4a130 <line:2680:17, line:2681:3>
|   |   |-TextComment 0x559b74c4a0e0 <line:2680:17, col:62> Text=" Address of array used to hold stacked values."
|   |   `-TextComment 0x559b74c4a100 <line:2681:3> Text=" "
|   |-ParamCommandComment 0x559b74c4a150 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=2
|   | `-ParagraphComment 0x559b74c4a1e0 <col:22, col:67>
|   |   `-TextComment 0x559b74c4a1b0 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x559b74c4a230 <line:2683:3>
|   | `-TextComment 0x559b74c4a200 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4a250 <col:4, line:2684:3> Name="return"
|   | `-ParagraphComment 0x559b74c4a2d0 <line:2683:11, line:2684:3>
|   |   |-TextComment 0x559b74c4a280 <line:2683:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c4a2a0 <line:2684:3> Text=" "
|   |-VerbatimLineComment 0x559b74c4a2f0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x559b74c4a360 <line:2685:1>
|     `-TextComment 0x559b74c4a330 <col:1> Text=" "
|-FunctionDecl 0x559b74a8eac0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2706:25> line:2705:17 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x559b74a8e940 <col:36, col:52> col:52 stack 'struct k_stack *'
| |-ParmVarDecl 0x559b74a8e9b0 <line:2706:8, col:14> col:14 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x559b74c4a9b0 <line:2691:3, line:2703:1>
|   |-ParagraphComment 0x559b74c4a480 <line:2691:3>
|   | `-TextComment 0x559b74c4a450 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4a4a0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x559b74c4a500 <col:10, col:29>
|   |   `-TextComment 0x559b74c4a4d0 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x559b74c4a5c0 <line:2693:3, line:2696:72>
|   | |-TextComment 0x559b74c4a520 <line:2693:3, col:76> Text=" This routine initializes a stack object, prior to its first use. Internal"
|   | |-TextComment 0x559b74c4a540 <line:2694:3, col:69> Text=" buffers will be allocated from the calling thread's resource pool."
|   | |-TextComment 0x559b74c4a560 <line:2695:3, col:66> Text=" This memory will be released if k_stack_cleanup() is called, or"
|   | `-TextComment 0x559b74c4a580 <line:2696:3, col:72> Text=" userspace is enabled and the stack object loses all references to it."
|   |-ParagraphComment 0x559b74c4a610 <line:2698:3>
|   | `-TextComment 0x559b74c4a5e0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c4a630 <col:4, line:2699:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x559b74c4a6e0 <line:2698:16, line:2699:3>
|   |   |-TextComment 0x559b74c4a690 <line:2698:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x559b74c4a6b0 <line:2699:3> Text=" "
|   |-ParamCommandComment 0x559b74c4a700 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=1
|   | `-ParagraphComment 0x559b74c4a790 <col:22, col:67>
|   |   `-TextComment 0x559b74c4a760 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x559b74c4a7e0 <line:2701:3>
|   | `-TextComment 0x559b74c4a7b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4a800 <col:4, line:2702:3> Name="return"
|   | `-ParagraphComment 0x559b74c4a880 <line:2701:11, line:2702:3>
|   |   |-TextComment 0x559b74c4a830 <line:2701:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x559b74c4a850 <line:2702:3> Text=" "
|   |-VerbatimLineComment 0x559b74c4a8a0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x559b74c4a910 <line:2703:1>
|     `-TextComment 0x559b74c4a8e0 <col:1> Text=" "
|-FunctionDecl 0x559b74a8ecc8 <line:2720:1, col:42> col:5 k_stack_cleanup 'int (struct k_stack *)'
| |-ParmVarDecl 0x559b74a8ebc0 <col:21, col:37> col:37 stack 'struct k_stack *'
| `-FullComment 0x559b74c4ae70 <line:2709:3, line:2719:1>
|   |-ParagraphComment 0x559b74c4aa50 <line:2709:3>
|   | `-TextComment 0x559b74c4aa20 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4aa70 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559b74c4aad0 <col:10, col:44>
|   |   `-TextComment 0x559b74c4aaa0 <col:10, col:44> Text=" Release a stack's allocated buffer"
|   |-ParagraphComment 0x559b74c4ab70 <line:2711:3, line:2713:46>
|   | |-TextComment 0x559b74c4aaf0 <line:2711:3, col:65> Text=" If a stack object was given a dynamically allocated buffer via"
|   | |-TextComment 0x559b74c4ab10 <line:2712:3, col:70> Text=" k_stack_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x559b74c4ab30 <line:2713:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x559b74c4abc0 <line:2715:3>
|   | `-TextComment 0x559b74c4ab90 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c4abe0 <col:4, line:2718:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x559b74c4ad80 <line:2715:16, line:2718:3>
|   |   |-TextComment 0x559b74c4ac40 <line:2715:16, col:37> Text=" Address of the stack."
|   |   |-TextComment 0x559b74c4ac60 <line:2716:3> Text=" "
|   |   |-InlineCommandComment 0x559b74c4ac80 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x559b74c4aca0 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x559b74c4acc0 <line:2717:3> Text=" "
|   |   |-InlineCommandComment 0x559b74c4ace0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x559b74c4ad00 <col:11, col:46> Text=" -EAGAIN when object is still in use"
|   |   `-TextComment 0x559b74c4ad20 <line:2718:3> Text=" "
|   |-VerbatimLineComment 0x559b74c4ada0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x559b74c4ae10 <line:2719:1>
|     `-TextComment 0x559b74c4ade0 <col:1> Text=" "
|-FunctionDecl 0x559b74a8ef48 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2736:68> col:15 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x559b74a8edc0 <col:28, col:44> col:44 stack 'struct k_stack *'
| |-ParmVarDecl 0x559b74a8ee30 <col:51, col:64> col:64 data 'stack_data_t':'unsigned long'
| `-FullComment 0x559b74c4b5a0 <line:2723:3, line:2735:1>
|   |-ParagraphComment 0x559b74c4af10 <line:2723:3>
|   | `-TextComment 0x559b74c4aee0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4af30 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c4af90 <col:10, col:39>
|   |   `-TextComment 0x559b74c4af60 <col:10, col:39> Text=" Push an element onto a stack."
|   |-ParagraphComment 0x559b74c4b0b0 <line:2725:3, col:55>
|   | |-TextComment 0x559b74c4afb0 <col:3, col:42> Text=" This routine adds a stack_data_t value "
|   | |-InlineCommandComment 0x559b74c4b000 <col:43, col:44> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x559b74c4b020 <col:50, col:53> Text=" to "
|   | `-InlineCommandComment 0x559b74c4b070 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="stack."
|   |-ParagraphComment 0x559b74c4b100 <line:2727:3>
|   | `-TextComment 0x559b74c4b0d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4b120 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c4b180 <col:9, col:31>
|   |   `-TextComment 0x559b74c4b150 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c4b1d0 <line:2729:3>
|   | `-TextComment 0x559b74c4b1a0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c4b1f0 <col:4, line:2730:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x559b74c4b2a0 <line:2729:16, line:2730:3>
|   |   |-TextComment 0x559b74c4b250 <line:2729:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x559b74c4b270 <line:2730:3> Text=" "
|   |-ParamCommandComment 0x559b74c4b2c0 <col:4, col:44> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x559b74c4b350 <col:15, col:44>
|   |   `-TextComment 0x559b74c4b320 <col:15, col:44> Text=" Value to push onto the stack."
|   |-ParagraphComment 0x559b74c4b490 <line:2732:3, line:2734:3>
|   | |-TextComment 0x559b74c4b370 <line:2732:3> Text=" "
|   | |-InlineCommandComment 0x559b74c4b390 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c4b3b0 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x559b74c4b3d0 <line:2733:3> Text=" "
|   | |-InlineCommandComment 0x559b74c4b3f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c4b410 <col:11, col:35> Text=" -ENOMEM if stack is full"
|   | `-TextComment 0x559b74c4b430 <line:2734:3> Text=" "
|   |-VerbatimLineComment 0x559b74c4b4b0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x559b74c4b520 <line:2735:1>
|     `-TextComment 0x559b74c4b4f0 <col:1> Text=" "
|-FunctionDecl 0x559b74a8f5e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2758:19> line:2757:15 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x559b74a8f050 <col:27, col:43> col:43 stack 'struct k_stack *'
| |-ParmVarDecl 0x559b74a8f0c0 <col:50, col:64> col:64 data 'stack_data_t *'
| |-ParmVarDecl 0x559b74a8f130 <line:2758:6, col:12> col:12 timeout 's32_t':'int'
| `-FullComment 0x559b74c4bf10 <line:2739:3, line:2756:1>
|   |-ParagraphComment 0x559b74c4b640 <line:2739:3>
|   | `-TextComment 0x559b74c4b610 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4b660 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x559b74c4b6c0 <col:10, col:38>
|   |   `-TextComment 0x559b74c4b690 <col:10, col:38> Text=" Pop an element from a stack."
|   |-ParagraphComment 0x559b74c4b810 <line:2741:3, line:2742:47>
|   | |-TextComment 0x559b74c4b6e0 <line:2741:3, col:50> Text=" This routine removes a stack_data_t value from "
|   | |-InlineCommandComment 0x559b74c4b730 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="stack"
|   | |-TextComment 0x559b74c4b750 <col:59, col:73> Text=" in a "last in,"
|   | |-TextComment 0x559b74c4b770 <line:2742:3, col:45> Text=" first out" manner and stores the value in "
|   | `-InlineCommandComment 0x559b74c4b7c0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="data."
|   |-ParagraphComment 0x559b74c4b860 <line:2744:3>
|   | `-TextComment 0x559b74c4b830 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4b880 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x559b74c4b960 <col:9, col:72>
|   |   |-TextComment 0x559b74c4b8b0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x559b74c4b900 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x559b74c4b920 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x559b74c4b9b0 <line:2746:3>
|   | `-TextComment 0x559b74c4b980 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c4b9d0 <col:4, line:2747:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x559b74c4ba80 <line:2746:16, line:2747:3>
|   |   |-TextComment 0x559b74c4ba30 <line:2746:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x559b74c4ba50 <line:2747:3> Text=" "
|   |-ParamCommandComment 0x559b74c4baa0 <col:4, line:2748:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x559b74c4bb50 <line:2747:15, line:2748:3>
|   |   |-TextComment 0x559b74c4bb00 <line:2747:15, col:71> Text=" Address of area to hold the value popped from the stack."
|   |   `-TextComment 0x559b74c4bb20 <line:2748:3> Text=" "
|   |-ParamCommandComment 0x559b74c4bb70 <col:4, line:2750:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x559b74c4bc50 <line:2748:18, line:2750:28>
|   |   |-TextComment 0x559b74c4bbd0 <line:2748:18, col:67> Text=" Non-negative waiting period to obtain a value (in"
|   |   |-TextComment 0x559b74c4bbf0 <line:2749:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x559b74c4bc10 <line:2750:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x559b74c4be00 <line:2752:3, line:2755:3>
|   | |-TextComment 0x559b74c4bc70 <line:2752:3> Text=" "
|   | |-InlineCommandComment 0x559b74c4bc90 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c4bcb0 <col:11, col:39> Text=" 0 Element popped from stack."
|   | |-TextComment 0x559b74c4bcd0 <line:2753:3> Text=" "
|   | |-InlineCommandComment 0x559b74c4bcf0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c4bd10 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x559b74c4bd30 <line:2754:3> Text=" "
|   | |-InlineCommandComment 0x559b74c4bd50 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c4bd70 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x559b74c4bd90 <line:2755:3> Text=" "
|   |-VerbatimLineComment 0x559b74c4be20 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x559b74c4be90 <line:2756:1>
|     `-TextComment 0x559b74c4be60 <col:1> Text=" "
|-RecordDecl 0x559b74a8f6f8 <line:2780:1, col:8> col:8 struct k_work
| `-FullComment 0x559b74c4c030 <line:2778:4, col:7>
|   `-ParagraphComment 0x559b74c4c000 <col:4, col:7>
|     |-TextComment 0x559b74c4bf80 <col:4> Text=" "
|     |-TextComment 0x559b74c4bfa0 <col:5> Text="@"
|     `-TextComment 0x559b74c4bfc0 <col:6, col:7> Text="} "
|-RecordDecl 0x559b74a8f7a0 <line:2781:1, col:8> col:8 struct k_work_poll
|-TypedefDecl 0x559b74a8fb20 <line:2784:1, col:68> col:15 referenced _poller_cb_t 'int (*)(struct k_poll_event *, u32_t)'
| `-PointerType 0x559b74a8fab0 'int (*)(struct k_poll_event *, u32_t)'
|   `-ParenType 0x559b74a8fa50 'int (struct k_poll_event *, u32_t)' sugar
|     `-FunctionProtoType 0x559b74a8fa10 'int (struct k_poll_event *, u32_t)' cdecl
|       |-BuiltinType 0x559b749d8a10 'int'
|       |-PointerType 0x559b74a8f8b0 'struct k_poll_event *'
|       | `-ElaboratedType 0x559b74a8f850 'struct k_poll_event' sugar
|       |   `-RecordType 0x559b74b73560 'struct k_poll_event'
|       |     `-Record 0x559b74bbddd8 'k_poll_event'
|       `-TypedefType 0x559b74a6c840 'u32_t' sugar
|         |-Typedef 0x559b74a48b00 'u32_t'
|         `-BuiltinType 0x559b749d8ab0 'unsigned int'
|-RecordDecl 0x559b74a8fb78 <line:2785:1, line:2789:1> line:2785:8 struct _poller definition
| |-FieldDecl 0x559b74a8fc30 <line:2786:2, col:16> col:16 is_polling 'volatile bool'
| |-FieldDecl 0x559b74a8fca0 <line:2787:2, col:19> col:19 thread 'struct k_thread *'
| `-FieldDecl 0x559b74a8fd20 <line:2788:2, col:15> col:15 cb '_poller_cb_t':'int (*)(struct k_poll_event *, u32_t)'
|-TypedefDecl 0x559b74a90020 <line:2808:1, col:53> col:16 referenced k_work_handler_t 'void (*)(struct k_work *)'
| |-PointerType 0x559b74a8ffc0 'void (*)(struct k_work *)'
| | `-ParenType 0x559b74a8ff60 'void (struct k_work *)' sugar
| |   `-FunctionProtoType 0x559b74a8ff20 'void (struct k_work *)' cdecl
| |     |-BuiltinType 0x559b749d8970 'void'
| |     `-PointerType 0x559b74a8fe30 'struct k_work *'
| |       `-ElaboratedType 0x559b74a8fdd0 'struct k_work' sugar
| |         `-RecordType 0x559b74a8f780 'struct k_work'
| |           `-Record 0x559b74a90328 'k_work'
| `-FullComment 0x559b74c4c550 <line:2797:3, line:2807:1>
|   |-ParagraphComment 0x559b74c4c0d0 <line:2797:3>
|   | `-TextComment 0x559b74c4c0a0 <col:3> Text=" "
|   |-VerbatimLineComment 0x559b74c4c0f0 <col:4, col:29> Text=" k_work_handler_t"
|   |-ParagraphComment 0x559b74c4c160 <line:2798:3>
|   | `-TextComment 0x559b74c4c130 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4c180 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x559b74c4c1e0 <col:10, col:42>
|   |   `-TextComment 0x559b74c4c1b0 <col:10, col:42> Text=" Work item handler function type."
|   |-ParagraphComment 0x559b74c4c250 <line:2800:3, line:2801:52>
|   | |-TextComment 0x559b74c4c200 <line:2800:3, col:69> Text=" A work item's handler function is executed by a workqueue's thread"
|   | `-TextComment 0x559b74c4c220 <line:2801:3, col:52> Text=" when the work item is processed by the workqueue."
|   |-ParagraphComment 0x559b74c4c2a0 <line:2803:3>
|   | `-TextComment 0x559b74c4c270 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c4c2c0 <col:4, col:40> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559b74c4c350 <col:15, col:40>
|   |   `-TextComment 0x559b74c4c320 <col:15, col:40> Text=" Address of the work item."
|   |-ParagraphComment 0x559b74c4c3a0 <line:2805:3>
|   | `-TextComment 0x559b74c4c370 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4c3c0 <col:4, line:2806:3> Name="return"
|   | `-ParagraphComment 0x559b74c4c440 <line:2805:11, line:2806:3>
|   |   |-TextComment 0x559b74c4c3f0 <line:2805:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c4c410 <line:2806:3> Text=" "
|   |-VerbatimLineComment 0x559b74c4c460 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x559b74c4c4d0 <line:2807:1>
|     `-TextComment 0x559b74c4c4a0 <col:1> Text=" "
|-RecordDecl 0x559b74a900a8 <line:2814:1, line:2817:1> line:2814:8 invalid struct k_work_q definition
| |-FullComment 0x559b74c4c670 <line:2811:3, col:24>
| | `-ParagraphComment 0x559b74c4c640 <col:3, col:24>
| |   |-TextComment 0x559b74c4c5c0 <col:3> Text=" "
| |   |-InlineCommandComment 0x559b74c4c5e0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x559b74c4c600 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x559b74a90170 <line:2815:2, col:17> col:17 referenced queue 'struct k_queue':'struct k_queue'
| `-FieldDecl 0x559b74a901d8 <line:2816:2, col:18> col:18 invalid thread 'struct k_thread':'struct k_thread'
|-EnumDecl 0x559b74a90220 <line:2819:1, line:2821:1> line:2819:1
| `-EnumConstantDecl 0x559b74a902e0 <line:2820:2> col:2 referenced K_WORK_STATE_PENDING 'int'
|-RecordDecl 0x559b74a90328 prev 0x559b74a8f6f8 <line:2823:1, line:2827:1> line:2823:8 struct k_work definition
| |-FieldDecl 0x559b74a903c8 <line:2824:2, col:8> col:8 _reserved 'void *'
| |-FieldDecl 0x559b74a90440 <line:2825:2, col:19> col:19 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FieldDecl 0x559b74a908c8 <line:2826:2, col:18> col:11 referenced flags 'atomic_t [1]'
|-RecordDecl 0x559b74a90910 <line:2829:1, line:2833:1> line:2829:8 struct k_delayed_work definition
| |-FieldDecl 0x559b74a909e0 <line:2830:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x559b74a90a48 <line:2831:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x559b74a90b40 <line:2832:2, col:19> col:19 work_q 'struct k_work_q *'
|-RecordDecl 0x559b74a90be0 prev 0x559b74a8f7a0 <line:2835:1, line:2843:1> line:2835:8 struct k_work_poll definition
| |-FieldDecl 0x559b74a90c88 <line:2836:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x559b74a90d20 <line:2837:2, col:17> col:17 poller 'struct _poller':'struct _poller'
| |-FieldDecl 0x559b74a90d90 <line:2838:2, col:23> col:23 events 'struct k_poll_event *'
| |-FieldDecl 0x559b74a90df0 <line:2839:2, col:6> col:6 num_events 'int'
| |-FieldDecl 0x559b74a90e48 <line:2840:2, col:19> col:19 real_handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-FieldDecl 0x559b74a90eb0 <line:2841:2, col:18> col:18 timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x559b74a90f10 <line:2842:2, col:6> col:6 poll_result 'int'
|-VarDecl 0x559b74a90f78 <line:2845:1, col:24> col:24 used k_sys_work_q 'struct k_work_q':'struct k_work_q' extern
|-FunctionDecl 0x559b74a91210 <line:2886:1, line:2889:1> line:2886:20 k_work_init 'void (struct k_work *, k_work_handler_t)' static inline
| |-ParmVarDecl 0x559b74a91090 <col:32, col:47> col:47 used work 'struct k_work *'
| |-ParmVarDecl 0x559b74a91100 <col:53, col:70> col:70 used handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-CompoundStmt 0x559b74a916b8 <line:2887:1, line:2889:1>
| | `-BinaryOperator 0x559b74a91660 <line:2888:2, line:2856:2> 'struct k_work':'struct k_work' '='
| |   |-UnaryOperator 0x559b74a91300 <line:2888:2, col:3> 'struct k_work':'struct k_work' lvalue prefix '*'
| |   | `-ImplicitCastExpr 0x559b74a912e8 <col:3> 'struct k_work *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x559b74a912c0 <col:3> 'struct k_work *' lvalue ParmVar 0x559b74a91090 'work' 'struct k_work *'
| |   `-ImplicitCastExpr 0x559b74a91648 <col:10, line:2856:2> 'struct k_work':'struct k_work' <LValueToRValue>
| |     `-CompoundLiteralExpr 0x559b74a91620 <line:2888:10, line:2856:2> 'struct k_work':'struct k_work' lvalue
| |       `-InitListExpr 0x559b74a91568 <line:2852:2, line:2856:2> 'struct k_work':'struct k_work'
| |         |-ParenExpr 0x559b74a913a0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'void *'
| |         | `-CStyleCastExpr 0x559b74a91378 <col:15, col:23> 'void *' <NullToPointer>
| |         |   `-IntegerLiteral 0x559b74a91340 <col:23> 'int' 0
| |         |-ImplicitCastExpr 0x559b74a915c0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2888:44> 'k_work_handler_t':'void (*)(struct k_work *)' <LValueToRValue>
| |         | `-DeclRefExpr 0x559b74a91400 <col:44> 'k_work_handler_t':'void (*)(struct k_work *)' lvalue ParmVar 0x559b74a91100 'handler' 'k_work_handler_t':'void (*)(struct k_work *)'
| |         `-InitListExpr 0x559b74a915d8 <line:2855:11, col:15> 'atomic_t [1]'
| |           `-IntegerLiteral 0x559b74a91468 <col:13> 'int' 0
| `-FullComment 0x559b74c4cbb0 <line:2876:3, line:2885:1>
|   |-ParagraphComment 0x559b74c4c710 <line:2876:3>
|   | `-TextComment 0x559b74c4c6e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4c730 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x559b74c4c790 <col:10, col:33>
|   |   `-TextComment 0x559b74c4c760 <col:10, col:33> Text=" Initialize a work item."
|   |-ParagraphComment 0x559b74c4c7e0 <line:2878:3, col:74>
|   | `-TextComment 0x559b74c4c7b0 <col:3, col:74> Text=" This routine initializes a workqueue work item, prior to its first use."
|   |-ParagraphComment 0x559b74c4c830 <line:2880:3>
|   | `-TextComment 0x559b74c4c800 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c4c850 <col:4, line:2881:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559b74c4c900 <line:2880:15, line:2881:3>
|   |   |-TextComment 0x559b74c4c8b0 <line:2880:15, col:36> Text=" Address of work item."
|   |   `-TextComment 0x559b74c4c8d0 <line:2881:3> Text=" "
|   |-ParamCommandComment 0x559b74c4c920 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x559b74c4c9c0 <col:18, col:70>
|   |   `-TextComment 0x559b74c4c980 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x559b74c4ca10 <line:2883:3>
|   | `-TextComment 0x559b74c4c9e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4ca30 <col:4, line:2884:3> Name="return"
|   | `-ParagraphComment 0x559b74c4cab0 <line:2883:11, line:2884:3>
|   |   |-TextComment 0x559b74c4ca60 <line:2883:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c4ca80 <line:2884:3> Text=" "
|   |-VerbatimLineComment 0x559b74c4cad0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x559b74c4cb40 <line:2885:1>
|     `-TextComment 0x559b74c4cb10 <col:1> Text=" "
|-FunctionDecl 0x559b74a92010 <line:2913:1, line:2919:1> line:2913:20 used k_work_submit_to_queue 'void (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x559b74a916f8 <col:43, col:60> col:60 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x559b74a91780 <line:2914:8, col:23> col:23 used work 'struct k_work *'
| |-CompoundStmt 0x559b74a92458 <line:2915:1, line:2919:1>
| | `-IfStmt 0x559b74a923f0 <line:2916:2, line:2918:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-UnaryOperator 0x559b74a92250 <line:2916:6, col:64> 'int' prefix '!'
| |   | `-CallExpr 0x559b74a92200 <col:7, col:64> 'bool'
| |   |   |-ImplicitCastExpr 0x559b74a921e8 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x559b74a920c0 <col:7> 'bool (atomic_t *, int)' Function 0x559b74a6d610 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| |   |   |-ImplicitCastExpr 0x559b74a92238 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| |   |   | `-MemberExpr 0x559b74a92128 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x559b74a908c8
| |   |   |   `-ImplicitCastExpr 0x559b74a92110 <col:31> 'struct k_work *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x559b74a920e8 <col:31> 'struct k_work *' lvalue ParmVar 0x559b74a91780 'work' 'struct k_work *'
| |   |   `-DeclRefExpr 0x559b74a92160 <col:44> 'int' EnumConstant 0x559b74a902e0 'K_WORK_STATE_PENDING' 'int'
| |   |-CompoundStmt 0x559b74a923d8 <col:67, line:2918:2>
| |   | `-CallExpr 0x559b74a92370 <line:2917:3, col:38> 'void'
| |   |   |-ImplicitCastExpr 0x559b74a92358 <col:3> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x559b74a92270 <col:3> 'void (struct k_queue *, void *)' Function 0x559b74b8d230 'k_queue_append' 'void (struct k_queue *, void *)'
| |   |   |-UnaryOperator 0x559b74a92310 <col:18, col:27> 'struct k_queue *' prefix '&'
| |   |   | `-MemberExpr 0x559b74a922d8 <col:19, col:27> 'struct k_queue':'struct k_queue' lvalue ->queue 0x559b74a90170
| |   |   |   `-ImplicitCastExpr 0x559b74a922c0 <col:19> 'struct k_work_q *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x559b74a92298 <col:19> 'struct k_work_q *' lvalue ParmVar 0x559b74a916f8 'work_q' 'struct k_work_q *'
| |   |   `-ImplicitCastExpr 0x559b74a923c0 <col:34> 'void *' <BitCast>
| |   |     `-ImplicitCastExpr 0x559b74a923a8 <col:34> 'struct k_work *' <LValueToRValue>
| |   |       `-DeclRefExpr 0x559b74a92330 <col:34> 'struct k_work *' lvalue ParmVar 0x559b74a91780 'work' 'struct k_work *'
| |   `-<<<NULL>>>
| `-FullComment 0x559b74c4d480 <line:2892:3, line:2912:1>
|   |-ParagraphComment 0x559b74c4cc50 <line:2892:3>
|   | `-TextComment 0x559b74c4cc20 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4cc70 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x559b74c4ccd0 <col:10, col:29>
|   |   `-TextComment 0x559b74c4cca0 <col:10, col:29> Text=" Submit a work item."
|   |-ParagraphComment 0x559b74c4cee0 <line:2894:3, line:2899:15>
|   | |-TextComment 0x559b74c4ccf0 <line:2894:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x559b74c4cd40 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x559b74c4cd60 <col:42, col:70> Text=" to be processed by workqueue"
|   | |-TextComment 0x559b74c4cd80 <line:2895:3> Text=" "
|   | |-InlineCommandComment 0x559b74c4cdd0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x559b74c4cdf0 <col:14, col:74> Text=" If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x559b74c4ce10 <line:2896:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x559b74c4ce30 <line:2897:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x559b74c4ce50 <line:2898:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x559b74c4ce70 <line:2899:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x559b74c4cf30 <line:2901:3>
|   | `-TextComment 0x559b74c4cf00 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4cf50 <col:4, line:2903:20> Name="warning"
|   | `-ParagraphComment 0x559b74c4cfd0 <line:2902:3, line:2903:20>
|   |   |-TextComment 0x559b74c4cf80 <line:2902:3, col:73> Text=" A submitted work item must not be modified until it has been processed"
|   |   `-TextComment 0x559b74c4cfa0 <line:2903:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x559b74c4d020 <line:2905:3>
|   | `-TextComment 0x559b74c4cff0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4d040 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c4d0a0 <col:9, col:31>
|   |   `-TextComment 0x559b74c4d070 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c4d0f0 <line:2907:3>
|   | `-TextComment 0x559b74c4d0c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c4d110 <col:4, line:2908:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x559b74c4d1c0 <line:2907:17, line:2908:3>
|   |   |-TextComment 0x559b74c4d170 <line:2907:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x559b74c4d190 <line:2908:3> Text=" "
|   |-ParamCommandComment 0x559b74c4d1e0 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x559b74c4d270 <col:15, col:36>
|   |   `-TextComment 0x559b74c4d240 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x559b74c4d2c0 <line:2910:3>
|   | `-TextComment 0x559b74c4d290 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4d2e0 <col:4, line:2911:3> Name="return"
|   | `-ParagraphComment 0x559b74c4d360 <line:2910:11, line:2911:3>
|   |   |-TextComment 0x559b74c4d310 <line:2910:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c4d330 <line:2911:3> Text=" "
|   |-VerbatimLineComment 0x559b74c4d380 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x559b74c4d3f0 <line:2912:1>
|     `-TextComment 0x559b74c4d3c0 <col:1> Text=" "
|-FunctionDecl 0x559b74a92638 <line:2942:1, line:2959:1> line:2942:19 k_work_submit_to_user_queue 'int (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x559b74a92498 <col:47, col:64> col:64 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x559b74a92520 <line:2943:12, col:27> col:27 used work 'struct k_work *'
| |-CompoundStmt 0x559b74a92e58 <line:2944:1, line:2959:1>
| | |-DeclStmt 0x559b74a927a0 <line:2945:2, col:18>
| | | `-VarDecl 0x559b74a92700 <col:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> /vagrant/ext/zephyros/zephyr/include/kernel.h:2945:6 used ret 'int' cinit
| | |   `-UnaryOperator 0x559b74a92780 <col:12, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> 'int' prefix '-'
| | |     `-IntegerLiteral 0x559b74a92760 <col:15> 'int' 16
| | |-IfStmt 0x559b74a92da0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2947:2, line:2956:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x559b74a928e8 <line:2947:6, col:64> 'int' prefix '!'
| | | | `-CallExpr 0x559b74a92898 <col:7, col:64> 'bool'
| | | |   |-ImplicitCastExpr 0x559b74a92880 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x559b74a927b8 <col:7> 'bool (atomic_t *, int)' Function 0x559b74a6d610 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| | | |   |-ImplicitCastExpr 0x559b74a928d0 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| | | |   | `-MemberExpr 0x559b74a92820 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x559b74a908c8
| | | |   |   `-ImplicitCastExpr 0x559b74a92808 <col:31> 'struct k_work *' <LValueToRValue>
| | | |   |     `-DeclRefExpr 0x559b74a927e0 <col:31> 'struct k_work *' lvalue ParmVar 0x559b74a92520 'work' 'struct k_work *'
| | | |   `-DeclRefExpr 0x559b74a92858 <col:44> 'int' EnumConstant 0x559b74a902e0 'K_WORK_STATE_PENDING' 'int'
| | | |-CompoundStmt 0x559b74a92d80 <col:67, line:2956:2>
| | | | |-BinaryOperator 0x559b74a92af8 <line:2948:3, col:50> 'int' '='
| | | | | |-DeclRefExpr 0x559b74a92908 <col:3> 'int' lvalue Var 0x559b74a92700 'ret' 'int'
| | | | | `-CallExpr 0x559b74a92a90 <col:9, col:50> 's32_t':'int'
| | | | |   |-ImplicitCastExpr 0x559b74a92a78 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | |   | `-DeclRefExpr 0x559b74a92930 <col:9> 's32_t (struct k_queue *, void *)' Function 0x559b74b8d4c0 'k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
| | | | |   |-UnaryOperator 0x559b74a929d0 <col:30, col:39> 'struct k_queue *' prefix '&'
| | | | |   | `-MemberExpr 0x559b74a92998 <col:31, col:39> 'struct k_queue':'struct k_queue' lvalue ->queue 0x559b74a90170
| | | | |   |   `-ImplicitCastExpr 0x559b74a92980 <col:31> 'struct k_work_q *' <LValueToRValue>
| | | | |   |     `-DeclRefExpr 0x559b74a92958 <col:31> 'struct k_work_q *' lvalue ParmVar 0x559b74a92498 'work_q' 'struct k_work_q *'
| | | | |   `-ImplicitCastExpr 0x559b74a92ae0 <col:46> 'void *' <BitCast>
| | | | |     `-ImplicitCastExpr 0x559b74a92ac8 <col:46> 'struct k_work *' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x559b74a929f0 <col:46> 'struct k_work *' lvalue ParmVar 0x559b74a92520 'work' 'struct k_work *'
| | | | `-IfStmt 0x559b74a92d48 <line:2953:3, line:2955:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-BinaryOperator 0x559b74a92b80 <line:2953:7, col:14> 'int' '!='
| | | |   | |-ImplicitCastExpr 0x559b74a92b68 <col:7> 'int' <LValueToRValue>
| | | |   | | `-DeclRefExpr 0x559b74a92b20 <col:7> 'int' lvalue Var 0x559b74a92700 'ret' 'int'
| | | |   | `-IntegerLiteral 0x559b74a92b48 <col:14> 'int' 0
| | | |   |-CompoundStmt 0x559b74a92d30 <col:17, line:2955:3>
| | | |   | `-CallExpr 0x559b74a92ce0 <line:2954:4, col:54> 'void'
| | | |   |   |-ImplicitCastExpr 0x559b74a92cc8 <col:4> 'void (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   |   | `-DeclRefExpr 0x559b74a92ba8 <col:4> 'void (atomic_t *, int)' Function 0x559b74a6e110 'atomic_clear_bit' 'void (atomic_t *, int)'
| | | |   |   |-ImplicitCastExpr 0x559b74a92d18 <col:21, col:27> 'atomic_t *' <ArrayToPointerDecay>
| | | |   |   | `-MemberExpr 0x559b74a92c10 <col:21, col:27> 'atomic_t [1]' lvalue ->flags 0x559b74a908c8
| | | |   |   |   `-ImplicitCastExpr 0x559b74a92bf8 <col:21> 'struct k_work *' <LValueToRValue>
| | | |   |   |     `-DeclRefExpr 0x559b74a92bd0 <col:21> 'struct k_work *' lvalue ParmVar 0x559b74a92520 'work' 'struct k_work *'
| | | |   |   `-DeclRefExpr 0x559b74a92c48 <col:34> 'int' EnumConstant 0x559b74a902e0 'K_WORK_STATE_PENDING' 'int'
| | | |   `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x559b74a92e18 <line:2958:2, col:9>
| |   `-ImplicitCastExpr 0x559b74a92e00 <col:9> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x559b74a92dd8 <col:9> 'int' lvalue Var 0x559b74a92700 'ret' 'int'
| `-FullComment 0x559b74c4dc40 <line:2922:3, line:2941:1>
|   |-ParagraphComment 0x559b74c4d520 <line:2922:3>
|   | `-TextComment 0x559b74c4d4f0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4d540 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x559b74c4d5a0 <col:10, col:53>
|   |   `-TextComment 0x559b74c4d570 <col:10, col:53> Text=" Submit a work item to a user mode workqueue"
|   |-ParagraphComment 0x559b74c4d690 <line:2924:3, line:2928:71>
|   | |-TextComment 0x559b74c4d5c0 <line:2924:3, col:73> Text=" Submits a work item to a workqueue that runs in user mode. A temporary"
|   | |-TextComment 0x559b74c4d5e0 <line:2925:3, col:75> Text=" memory allocation is made from the caller's resource pool which is freed"
|   | |-TextComment 0x559b74c4d600 <line:2926:3, col:65> Text=" once the worker thread consumes the k_work item. The workqueue"
|   | |-TextComment 0x559b74c4d620 <line:2927:3, col:80> Text=" thread must have memory access to the k_work item being submitted. The caller"
|   | `-TextComment 0x559b74c4d640 <line:2928:3, col:71> Text=" must have permission granted on the work_q parameter's queue object."
|   |-ParagraphComment 0x559b74c4d6e0 <line:2930:3, col:61>
|   | `-TextComment 0x559b74c4d6b0 <col:3, col:61> Text=" Otherwise this works the same as k_work_submit_to_queue()."
|   |-ParagraphComment 0x559b74c4d730 <line:2932:3>
|   | `-TextComment 0x559b74c4d700 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4d750 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c4d7b0 <col:9, col:31>
|   |   `-TextComment 0x559b74c4d780 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c4d800 <line:2934:3>
|   | `-TextComment 0x559b74c4d7d0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c4d820 <col:4, line:2935:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x559b74c4d8d0 <line:2934:17, line:2935:3>
|   |   |-TextComment 0x559b74c4d880 <line:2934:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x559b74c4d8a0 <line:2935:3> Text=" "
|   |-ParamCommandComment 0x559b74c4d8f0 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x559b74c4d980 <col:15, col:36>
|   |   `-TextComment 0x559b74c4d950 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x559b74c4db30 <line:2937:3, line:2940:3>
|   | |-TextComment 0x559b74c4d9a0 <line:2937:3> Text=" "
|   | |-InlineCommandComment 0x559b74c4d9c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c4d9e0 <col:11, col:64> Text=" -EBUSY if the work item was already in some workqueue"
|   | |-TextComment 0x559b74c4da00 <line:2938:3> Text=" "
|   | |-InlineCommandComment 0x559b74c4da20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c4da40 <col:11, col:67> Text=" -ENOMEM if no memory for thread resource pool allocation"
|   | |-TextComment 0x559b74c4da60 <line:2939:3> Text=" "
|   | |-InlineCommandComment 0x559b74c4da80 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c4daa0 <col:11, col:20> Text=" 0 Success"
|   | `-TextComment 0x559b74c4dac0 <line:2940:3> Text=" "
|   |-VerbatimLineComment 0x559b74c4db50 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x559b74c4dbc0 <line:2941:1>
|     `-TextComment 0x559b74c4db90 <col:1> Text=" "
|-FunctionDecl 0x559b74a92ff0 <line:2974:1, line:2977:1> line:2974:20 k_work_pending 'bool (struct k_work *)' static inline
| |-ParmVarDecl 0x559b74a92ea8 <col:35, col:50> col:50 used work 'struct k_work *'
| |-CompoundStmt 0x559b74a93278 <line:2975:1, line:2977:1>
| | `-ReturnStmt 0x559b74a93238 <line:2976:2, col:58>
| |   `-CallExpr 0x559b74a931d0 <col:9, col:58> 'bool'
| |     |-ImplicitCastExpr 0x559b74a931b8 <col:9> 'bool (*)(const atomic_t *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74a93098 <col:9> 'bool (const atomic_t *, int)' Function 0x559b74a6bdd0 'atomic_test_bit' 'bool (const atomic_t *, int)'
| |     |-ImplicitCastExpr 0x559b74a93220 <col:25, col:31> 'const atomic_t *' <BitCast>
| |     | `-ImplicitCastExpr 0x559b74a93208 <col:25, col:31> 'atomic_t *' <ArrayToPointerDecay>
| |     |   `-MemberExpr 0x559b74a93100 <col:25, col:31> 'atomic_t [1]' lvalue ->flags 0x559b74a908c8
| |     |     `-ImplicitCastExpr 0x559b74a930e8 <col:25> 'struct k_work *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x559b74a930c0 <col:25> 'struct k_work *' lvalue ParmVar 0x559b74a92ea8 'work' 'struct k_work *'
| |     `-DeclRefExpr 0x559b74a93138 <col:38> 'int' EnumConstant 0x559b74a902e0 'K_WORK_STATE_PENDING' 'int'
| `-FullComment 0x559b74c4e220 <line:2962:3, line:2973:1>
|   |-ParagraphComment 0x559b74c4dce0 <line:2962:3>
|   | `-TextComment 0x559b74c4dcb0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4dd00 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x559b74c4dd60 <col:10, col:42>
|   |   `-TextComment 0x559b74c4dd30 <col:10, col:42> Text=" Check if a work item is pending."
|   |-ParagraphComment 0x559b74c4de50 <line:2964:3, line:2965:9>
|   | |-TextComment 0x559b74c4dd80 <line:2964:3, col:39> Text=" This routine indicates if work item "
|   | |-InlineCommandComment 0x559b74c4ddd0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x559b74c4ddf0 <col:47, col:74> Text=" is pending in a workqueue's"
|   | `-TextComment 0x559b74c4de10 <line:2965:3, col:9> Text=" queue."
|   |-ParagraphComment 0x559b74c4dea0 <line:2967:3>
|   | `-TextComment 0x559b74c4de70 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4dec0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c4df20 <col:9, col:31>
|   |   `-TextComment 0x559b74c4def0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c4df70 <line:2969:3>
|   | `-TextComment 0x559b74c4df40 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c4df90 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559b74c4e020 <col:15, col:36>
|   |   `-TextComment 0x559b74c4dff0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x559b74c4e070 <line:2971:3>
|   | `-TextComment 0x559b74c4e040 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4e090 <col:4, line:2972:3> Name="return"
|   | `-ParagraphComment 0x559b74c4e110 <line:2971:11, line:2972:3>
|   |   |-TextComment 0x559b74c4e0c0 <line:2971:11, col:71> Text=" true if work item is pending, or false if it is not pending."
|   |   `-TextComment 0x559b74c4e0e0 <line:2972:3> Text=" "
|   |-VerbatimLineComment 0x559b74c4e130 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x559b74c4e1a0 <line:2973:1>
|     `-TextComment 0x559b74c4e170 <col:1> Text=" "
|-FunctionDecl 0x559b74a93550 <line:2996:1, line:2998:34> line:2996:13 k_work_q_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x559b74a932b8 <col:28, col:45> col:45 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x559b74a93328 <line:2997:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x559b74a93398 <line:2998:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74a93410 <col:26, col:30> col:30 prio 'int'
| `-FullComment 0x559b74c4ea30 <line:2980:3, line:2995:1>
|   |-ParagraphComment 0x559b74c4e2c0 <line:2980:3>
|   | `-TextComment 0x559b74c4e290 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4e2e0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x559b74c4e340 <col:10, col:28>
|   |   `-TextComment 0x559b74c4e310 <col:10, col:28> Text=" Start a workqueue."
|   |-ParagraphComment 0x559b74c4e430 <line:2982:3, line:2983:41>
|   | |-TextComment 0x559b74c4e360 <line:2982:3, col:33> Text=" This routine starts workqueue "
|   | |-InlineCommandComment 0x559b74c4e3b0 <col:34, col:35> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x559b74c4e3d0 <col:44, col:73> Text=" The workqueue spawns its work"
|   | `-TextComment 0x559b74c4e3f0 <line:2983:3, col:41> Text=" processing thread, which runs forever."
|   |-ParagraphComment 0x559b74c4e480 <line:2985:3>
|   | `-TextComment 0x559b74c4e450 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c4e4a0 <col:4, line:2986:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x559b74c4e550 <line:2985:17, line:2986:3>
|   |   |-TextComment 0x559b74c4e500 <line:2985:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x559b74c4e520 <line:2986:3> Text=" "
|   |-ParamCommandComment 0x559b74c4e570 <col:4, line:2988:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x559b74c4e650 <line:2986:16, line:2988:3>
|   |   |-TextComment 0x559b74c4e5d0 <line:2986:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x559b74c4e5f0 <line:2987:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x559b74c4e610 <line:2988:3> Text=" "
|   |-ParamCommandComment 0x559b74c4e670 <col:4, line:2991:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x559b74c4e770 <line:2988:21, line:2991:3>
|   |   |-TextComment 0x559b74c4e6d0 <line:2988:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x559b74c4e6f0 <line:2989:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x559b74c4e710 <line:2990:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x559b74c4e730 <line:2991:3> Text=" "
|   |-ParamCommandComment 0x559b74c4e790 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x559b74c4e820 <col:15, col:51>
|   |   `-TextComment 0x559b74c4e7f0 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x559b74c4e870 <line:2993:3>
|   | `-TextComment 0x559b74c4e840 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4e890 <col:4, line:2994:3> Name="return"
|   | `-ParagraphComment 0x559b74c4e910 <line:2993:11, line:2994:3>
|   |   |-TextComment 0x559b74c4e8c0 <line:2993:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c4e8e0 <line:2994:3> Text=" "
|   |-VerbatimLineComment 0x559b74c4e930 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x559b74c4e9a0 <line:2995:1>
|     `-TextComment 0x559b74c4e970 <col:1> Text=" "
|-FunctionDecl 0x559b74a93858 <line:3020:1, line:3022:32> line:3020:13 k_work_q_user_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x559b74a93660 <col:33, col:50> col:50 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x559b74a936d0 <line:3021:5, col:23> col:23 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x559b74a93740 <line:3022:5, col:12> col:12 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74a937b8 <col:24, col:28> col:28 prio 'int'
| `-FullComment 0x559b74c4f230 <line:3001:3, line:3019:1>
|   |-ParagraphComment 0x559b74c4ead0 <line:3001:3>
|   | `-TextComment 0x559b74c4eaa0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4eaf0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x559b74c4eb50 <col:10, col:40>
|   |   `-TextComment 0x559b74c4eb20 <col:10, col:40> Text=" Start a workqueue in user mode"
|   |-ParagraphComment 0x559b74c4ec40 <line:3003:3, line:3007:21>
|   | |-TextComment 0x559b74c4eb70 <line:3003:3, col:77> Text=" This works identically to k_work_q_start() except it is callable from user"
|   | |-TextComment 0x559b74c4eb90 <line:3004:3, col:61> Text=" mode, and the worker thread created will run in user mode."
|   | |-TextComment 0x559b74c4ebb0 <line:3005:3, col:74> Text=" The caller must have permissions granted on both the work_q parameter's"
|   | |-TextComment 0x559b74c4ebd0 <line:3006:3, col:75> Text=" thread and queue objects, and the same restrictions on priority apply as"
|   | `-TextComment 0x559b74c4ebf0 <line:3007:3, col:21> Text=" k_thread_create()."
|   |-ParagraphComment 0x559b74c4ec90 <line:3009:3>
|   | `-TextComment 0x559b74c4ec60 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c4ecb0 <col:4, line:3010:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x559b74c4ed60 <line:3009:17, line:3010:3>
|   |   |-TextComment 0x559b74c4ed10 <line:3009:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x559b74c4ed30 <line:3010:3> Text=" "
|   |-ParamCommandComment 0x559b74c4ed80 <col:4, line:3012:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x559b74c4ee60 <line:3010:16, line:3012:3>
|   |   |-TextComment 0x559b74c4ede0 <line:3010:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x559b74c4ee00 <line:3011:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x559b74c4ee20 <line:3012:3> Text=" "
|   |-ParamCommandComment 0x559b74c4ee80 <col:4, line:3015:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x559b74c4ef80 <line:3012:21, line:3015:3>
|   |   |-TextComment 0x559b74c4eee0 <line:3012:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x559b74c4ef00 <line:3013:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x559b74c4ef20 <line:3014:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x559b74c4ef40 <line:3015:3> Text=" "
|   |-ParamCommandComment 0x559b74c4efa0 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x559b74c4f030 <col:15, col:51>
|   |   `-TextComment 0x559b74c4f000 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x559b74c4f080 <line:3017:3>
|   | `-TextComment 0x559b74c4f050 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4f0a0 <col:4, line:3018:3> Name="return"
|   | `-ParagraphComment 0x559b74c4f120 <line:3017:11, line:3018:3>
|   |   |-TextComment 0x559b74c4f0d0 <line:3017:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c4f0f0 <line:3018:3> Text=" "
|   |-VerbatimLineComment 0x559b74c4f140 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x559b74c4f1b0 <line:3019:1>
|     `-TextComment 0x559b74c4f180 <col:1> Text=" "
|-FunctionDecl 0x559b74a93b80 <line:3036:1, line:3037:29> line:3036:13 k_delayed_work_init 'void (struct k_delayed_work *, k_work_handler_t)' extern
| |-ParmVarDecl 0x559b74a93a00 <col:33, col:56> col:56 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x559b74a93a70 <line:3037:5, col:22> col:22 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x559b74c4f780 <line:3025:3, line:3035:1>
|   |-ParagraphComment 0x559b74c4f2d0 <line:3025:3>
|   | `-TextComment 0x559b74c4f2a0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4f2f0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x559b74c4f350 <col:10, col:41>
|   |   `-TextComment 0x559b74c4f320 <col:10, col:41> Text=" Initialize a delayed work item."
|   |-ParagraphComment 0x559b74c4f3c0 <line:3027:3, line:3028:17>
|   | |-TextComment 0x559b74c4f370 <line:3027:3, col:67> Text=" This routine initializes a workqueue delayed work item, prior to"
|   | `-TextComment 0x559b74c4f390 <line:3028:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x559b74c4f410 <line:3030:3>
|   | `-TextComment 0x559b74c4f3e0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c4f430 <col:4, line:3031:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559b74c4f4e0 <line:3030:15, line:3031:3>
|   |   |-TextComment 0x559b74c4f490 <line:3030:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x559b74c4f4b0 <line:3031:3> Text=" "
|   |-ParamCommandComment 0x559b74c4f500 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x559b74c4f590 <col:18, col:70>
|   |   `-TextComment 0x559b74c4f560 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x559b74c4f5e0 <line:3033:3>
|   | `-TextComment 0x559b74c4f5b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4f600 <col:4, line:3034:3> Name="return"
|   | `-ParagraphComment 0x559b74c4f680 <line:3033:11, line:3034:3>
|   |   |-TextComment 0x559b74c4f630 <line:3033:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c4f650 <line:3034:3> Text=" "
|   |-VerbatimLineComment 0x559b74c4f6a0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x559b74c4f710 <line:3035:1>
|     `-TextComment 0x559b74c4f6e0 <col:1> Text=" "
|-FunctionDecl 0x559b74a93eb8 <line:3071:1, line:3073:19> line:3071:12 used k_delayed_work_submit_to_queue 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' extern
| |-ParmVarDecl 0x559b74a93c80 <col:43, col:60> col:60 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x559b74a93d08 <line:3072:8, col:31> col:31 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x559b74a93d78 <line:3073:8, col:14> col:14 delay 's32_t':'int'
| `-FullComment 0x559b74c50380 <line:3040:3, line:3070:1>
|   |-ParagraphComment 0x559b74c4f820 <line:3040:3>
|   | `-TextComment 0x559b74c4f7f0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4f840 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x559b74c4f8a0 <col:10, col:37>
|   |   `-TextComment 0x559b74c4f870 <col:10, col:37> Text=" Submit a delayed work item."
|   |-ParagraphComment 0x559b74c4fb10 <line:3042:3, line:3046:37>
|   | |-TextComment 0x559b74c4f8c0 <line:3042:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x559b74c4f910 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x559b74c4f930 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x559b74c4f950 <line:3043:3> Text=" "
|   | |-InlineCommandComment 0x559b74c4f9a0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x559b74c4f9c0 <col:13, col:30> Text=" after a delay of "
|   | |-InlineCommandComment 0x559b74c4fa10 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x559b74c4fa30 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x559b74c4fa50 <line:3044:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x559b74c4fa70 <line:3045:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x559b74c4fa90 <line:3046:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x559b74c4fc20 <line:3048:3, line:3053:28>
|   | |-TextComment 0x559b74c4fb30 <line:3048:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x559b74c4fb50 <line:3049:3, col:65> Text=" counting down cancels the existing submission and restarts the"
|   | |-TextComment 0x559b74c4fb70 <line:3050:3, col:61> Text=" countdown using the new delay.  Note that this behavior is"
|   | |-TextComment 0x559b74c4fb90 <line:3051:3, col:62> Text=" inherently subject to race conditions with the pre-existing"
|   | |-TextComment 0x559b74c4fbb0 <line:3052:3, col:69> Text=" timeouts and work queue, so care must be taken to synchronize such"
|   | `-TextComment 0x559b74c4fbd0 <line:3053:3, col:28> Text=" resubmissions externally."
|   |-ParagraphComment 0x559b74c4fc70 <line:3055:3>
|   | `-TextComment 0x559b74c4fc40 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4fc90 <col:4, line:3057:20> Name="warning"
|   | `-ParagraphComment 0x559b74c4fd10 <line:3056:3, line:3057:20>
|   |   |-TextComment 0x559b74c4fcc0 <line:3056:3, col:71> Text=" A delayed work item must not be modified until it has been processed"
|   |   `-TextComment 0x559b74c4fce0 <line:3057:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x559b74c4fd60 <line:3059:3>
|   | `-TextComment 0x559b74c4fd30 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c4fd80 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c4fde0 <col:9, col:31>
|   |   `-TextComment 0x559b74c4fdb0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c4fe30 <line:3061:3>
|   | `-TextComment 0x559b74c4fe00 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c4fe50 <col:4, line:3062:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x559b74c4ff00 <line:3061:17, line:3062:3>
|   |   |-TextComment 0x559b74c4feb0 <line:3061:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x559b74c4fed0 <line:3062:3> Text=" "
|   |-ParamCommandComment 0x559b74c4ff20 <col:4, line:3063:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x559b74c4ffd0 <line:3062:15, line:3063:3>
|   |   |-TextComment 0x559b74c4ff80 <line:3062:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x559b74c4ffa0 <line:3063:3> Text=" "
|   |-ParamCommandComment 0x559b74c4fff0 <col:4, line:3064:18> [in] implicitly Param="delay" ParamIndex=2
|   | `-ParagraphComment 0x559b74c500a0 <line:3063:16, line:3064:18>
|   |   |-TextComment 0x559b74c50050 <line:3063:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x559b74c50070 <line:3064:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x559b74c50250 <line:3066:3, line:3069:3>
|   | |-TextComment 0x559b74c500c0 <line:3066:3> Text=" "
|   | |-InlineCommandComment 0x559b74c500e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c50100 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x559b74c50120 <line:3067:3> Text=" "
|   | |-InlineCommandComment 0x559b74c50140 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c50160 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x559b74c50180 <line:3068:3> Text=" "
|   | |-InlineCommandComment 0x559b74c501a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c501c0 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x559b74c501e0 <line:3069:3> Text=" "
|   |-VerbatimLineComment 0x559b74c50270 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x559b74c502e0 <line:3070:1>
|     `-TextComment 0x559b74c502b0 <col:1> Text=" "
|-FunctionDecl 0x559b74ba5cb8 <line:3094:1, col:61> col:12 k_delayed_work_cancel 'int (struct k_delayed_work *)' extern
| |-ParmVarDecl 0x559b74ba5bb0 <col:34, col:57> col:57 work 'struct k_delayed_work *'
| `-FullComment 0x559b74c50af0 <line:3076:3, line:3093:1>
|   |-ParagraphComment 0x559b74c50420 <line:3076:3>
|   | `-TextComment 0x559b74c503f0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c50440 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x559b74c504a0 <col:10, col:37>
|   |   `-TextComment 0x559b74c50470 <col:10, col:37> Text=" Cancel a delayed work item."
|   |-ParagraphComment 0x559b74c50590 <line:3078:3, line:3080:12>
|   | |-TextComment 0x559b74c504c0 <line:3078:3, col:60> Text=" This routine cancels the submission of delayed work item "
|   | |-InlineCommandComment 0x559b74c50510 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x559b74c50530 <line:3079:3, col:72> Text=" A delayed work item can only be canceled while its countdown is still"
|   | `-TextComment 0x559b74c50550 <line:3080:3, col:12> Text=" underway."
|   |-ParagraphComment 0x559b74c505e0 <line:3082:3>
|   | `-TextComment 0x559b74c505b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c50600 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c50660 <col:9, col:31>
|   |   `-TextComment 0x559b74c50630 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c506b0 <line:3084:3>
|   | `-TextComment 0x559b74c50680 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c506d0 <col:4, line:3086:55> Name="note"
|   | `-ParagraphComment 0x559b74c50780 <line:3084:9, line:3086:55>
|   |   |-TextComment 0x559b74c50700 <line:3084:9, col:69> Text=" The result of calling this on a k_delayed_work item that has"
|   |   |-TextComment 0x559b74c50720 <line:3085:3, col:52> Text=" not been submitted (i.e. before the return of the"
|   |   `-TextComment 0x559b74c50740 <line:3086:3, col:55> Text=" k_delayed_work_submit_to_queue() call) is undefined."
|   |-ParagraphComment 0x559b74c507d0 <line:3088:3>
|   | `-TextComment 0x559b74c507a0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c507f0 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559b74c50880 <col:15, col:44>
|   |   `-TextComment 0x559b74c50850 <col:15, col:44> Text=" Address of delayed work item."
|   |-ParagraphComment 0x559b74c509e0 <line:3090:3, line:3092:3>
|   | |-TextComment 0x559b74c508a0 <line:3090:3> Text=" "
|   | |-InlineCommandComment 0x559b74c508c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c508e0 <col:11, col:42> Text=" 0 Work item countdown canceled."
|   | |-TextComment 0x559b74c50900 <line:3091:3> Text=" "
|   | |-InlineCommandComment 0x559b74c50920 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c50940 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | `-TextComment 0x559b74c50960 <line:3092:3> Text=" "
|   |-VerbatimLineComment 0x559b74c50a00 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x559b74c50a70 <line:3093:1>
|     `-TextComment 0x559b74c50a40 <col:1> Text=" "
|-FunctionDecl 0x559b74ba5e38 <line:3118:1, line:3121:1> line:3118:20 k_work_submit 'void (struct k_work *)' static inline
| |-ParmVarDecl 0x559b74ba5db0 <col:34, col:49> col:49 used work 'struct k_work *'
| |-CompoundStmt 0x559b74ba6068 <line:3119:1, line:3121:1>
| | `-CallExpr 0x559b74ba5ff0 <line:3120:2, col:44> 'void'
| |   |-ImplicitCastExpr 0x559b74ba5fd8 <col:2> 'void (*)(struct k_work_q *, struct k_work *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x559b74ba5ee0 <col:2> 'void (struct k_work_q *, struct k_work *)' Function 0x559b74a92010 'k_work_submit_to_queue' 'void (struct k_work_q *, struct k_work *)'
| |   |-UnaryOperator 0x559b74ba5f30 <col:25, col:26> 'struct k_work_q *' prefix '&'
| |   | `-DeclRefExpr 0x559b74ba5f08 <col:26> 'struct k_work_q':'struct k_work_q' lvalue Var 0x559b74a90f78 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |   `-ImplicitCastExpr 0x559b74ba6028 <col:40> 'struct k_work *' <LValueToRValue>
| |     `-DeclRefExpr 0x559b74ba5f50 <col:40> 'struct k_work *' lvalue ParmVar 0x559b74ba5db0 'work' 'struct k_work *'
| `-FullComment 0x559b74c512a0 <line:3097:3, line:3117:1>
|   |-ParagraphComment 0x559b74c50b90 <line:3097:3>
|   | `-TextComment 0x559b74c50b60 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c50bb0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x559b74c50c10 <col:10, col:53>
|   |   `-TextComment 0x559b74c50be0 <col:10, col:53> Text=" Submit a work item to the system workqueue."
|   |-ParagraphComment 0x559b74c50da0 <line:3099:3, line:3104:15>
|   | |-TextComment 0x559b74c50c30 <line:3099:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x559b74c50c80 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x559b74c50ca0 <col:42, col:71> Text=" to be processed by the system"
|   | |-TextComment 0x559b74c50cc0 <line:3100:3, col:74> Text=" workqueue. If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x559b74c50ce0 <line:3101:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x559b74c50d00 <line:3102:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x559b74c50d20 <line:3103:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x559b74c50d40 <line:3104:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x559b74c50df0 <line:3106:3>
|   | `-TextComment 0x559b74c50dc0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c50e10 <col:4, line:3109:50> Name="warning"
|   | `-ParagraphComment 0x559b74c50ec0 <line:3107:3, line:3109:50>
|   |   |-TextComment 0x559b74c50e40 <line:3107:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x559b74c50e60 <line:3108:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x559b74c50e80 <line:3109:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x559b74c50f10 <line:3111:3>
|   | `-TextComment 0x559b74c50ee0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c50f30 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c50f90 <col:9, col:31>
|   |   `-TextComment 0x559b74c50f60 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c50fe0 <line:3113:3>
|   | `-TextComment 0x559b74c50fb0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c51000 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559b74c51090 <col:15, col:36>
|   |   `-TextComment 0x559b74c51060 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x559b74c510e0 <line:3115:3>
|   | `-TextComment 0x559b74c510b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c51100 <col:4, line:3116:3> Name="return"
|   | `-ParagraphComment 0x559b74c51180 <line:3115:11, line:3116:3>
|   |   |-TextComment 0x559b74c51130 <line:3115:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c51150 <line:3116:3> Text=" "
|   |-VerbatimLineComment 0x559b74c511a0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x559b74c51210 <line:3117:1>
|     `-TextComment 0x559b74c511e0 <col:1> Text=" "
|-FunctionDecl 0x559b74ba6238 <line:3156:1, line:3160:1> line:3156:19 k_delayed_work_submit 'int (struct k_delayed_work *, s32_t)' static inline
| |-ParmVarDecl 0x559b74ba60a8 <col:41, col:64> col:64 used work 'struct k_delayed_work *'
| |-ParmVarDecl 0x559b74ba6118 <line:3157:6, col:12> col:12 used delay 's32_t':'int'
| |-CompoundStmt 0x559b74ba64d8 <line:3158:1, line:3160:1>
| | `-ReturnStmt 0x559b74ba6490 <line:3159:2, col:66>
| |   `-CallExpr 0x559b74ba6420 <col:9, col:66> 'int'
| |     |-ImplicitCastExpr 0x559b74ba6408 <col:9> 'int (*)(struct k_work_q *, struct k_delayed_work *, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74ba62e8 <col:9> 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' Function 0x559b74a93eb8 'k_delayed_work_submit_to_queue' 'int (struct k_work_q *, struct k_delayed_work *, s32_t)'
| |     |-UnaryOperator 0x559b74ba6338 <col:40, col:41> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x559b74ba6310 <col:41> 'struct k_work_q':'struct k_work_q' lvalue Var 0x559b74a90f78 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x559b74ba6460 <col:55> 'struct k_delayed_work *' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74ba6358 <col:55> 'struct k_delayed_work *' lvalue ParmVar 0x559b74ba60a8 'work' 'struct k_delayed_work *'
| |     `-ImplicitCastExpr 0x559b74ba6478 <col:61> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x559b74ba6380 <col:61> 's32_t':'int' lvalue ParmVar 0x559b74ba6118 'delay' 's32_t':'int'
| `-FullComment 0x559b74c51da0 <line:3124:3, line:3155:1>
|   |-ParagraphComment 0x559b74c51340 <line:3124:3>
|   | `-TextComment 0x559b74c51310 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c51360 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x559b74c513c0 <col:10, col:61>
|   |   `-TextComment 0x559b74c51390 <col:10, col:61> Text=" Submit a delayed work item to the system workqueue."
|   |-ParagraphComment 0x559b74c515b0 <line:3126:3, line:3130:37>
|   | |-TextComment 0x559b74c513e0 <line:3126:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x559b74c51430 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x559b74c51450 <col:44, col:73> Text=" to be processed by the system"
|   | |-TextComment 0x559b74c51470 <line:3127:3, col:30> Text=" workqueue after a delay of "
|   | |-InlineCommandComment 0x559b74c514c0 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x559b74c514e0 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x559b74c51500 <line:3128:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x559b74c51520 <line:3129:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x559b74c51540 <line:3130:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x559b74c516f0 <line:3132:3, line:3138:72>
|   | |-TextComment 0x559b74c515d0 <line:3132:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x559b74c515f0 <line:3133:3, col:75> Text=" counting down cancels the existing submission and restarts the countdown"
|   | |-TextComment 0x559b74c51610 <line:3134:3, col:68> Text=" using the new delay. If the work item is currently pending on the"
|   | |-TextComment 0x559b74c51630 <line:3135:3, col:74> Text=" workqueue's queue because the countdown has completed it is too late to"
|   | |-TextComment 0x559b74c51650 <line:3136:3, col:77> Text=" resubmit the item, and resubmission fails without impacting the work item."
|   | |-TextComment 0x559b74c51670 <line:3137:3, col:80> Text=" If the work item has already been processed, or is currently being processed,"
|   | `-TextComment 0x559b74c51690 <line:3138:3, col:72> Text=" its work is considered complete and the work item can be resubmitted."
|   |-ParagraphComment 0x559b74c51740 <line:3140:3>
|   | `-TextComment 0x559b74c51710 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c51760 <col:4, line:3143:50> Name="warning"
|   | `-ParagraphComment 0x559b74c51810 <line:3141:3, line:3143:50>
|   |   |-TextComment 0x559b74c51790 <line:3141:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x559b74c517b0 <line:3142:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x559b74c517d0 <line:3143:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x559b74c51860 <line:3145:3>
|   | `-TextComment 0x559b74c51830 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c51880 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c518e0 <col:9, col:31>
|   |   `-TextComment 0x559b74c518b0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c51930 <line:3147:3>
|   | `-TextComment 0x559b74c51900 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c51950 <col:4, line:3148:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559b74c51a00 <line:3147:15, line:3148:3>
|   |   |-TextComment 0x559b74c519b0 <line:3147:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x559b74c519d0 <line:3148:3> Text=" "
|   |-ParamCommandComment 0x559b74c51a20 <col:4, line:3149:18> [in] implicitly Param="delay" ParamIndex=1
|   | `-ParagraphComment 0x559b74c51ad0 <line:3148:16, line:3149:18>
|   |   |-TextComment 0x559b74c51a80 <line:3148:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x559b74c51aa0 <line:3149:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x559b74c51c80 <line:3151:3, line:3154:3>
|   | |-TextComment 0x559b74c51af0 <line:3151:3> Text=" "
|   | |-InlineCommandComment 0x559b74c51b10 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c51b30 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x559b74c51b50 <line:3152:3> Text=" "
|   | |-InlineCommandComment 0x559b74c51b70 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c51b90 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x559b74c51bb0 <line:3153:3> Text=" "
|   | |-InlineCommandComment 0x559b74c51bd0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c51bf0 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x559b74c51c10 <line:3154:3> Text=" "
|   |-VerbatimLineComment 0x559b74c51ca0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x559b74c51d10 <line:3155:1>
|     `-TextComment 0x559b74c51ce0 <col:1> Text=" "
|-FunctionDecl 0x559b74ba65e0 <line:3174:1, line:3177:1> line:3174:21 k_delayed_work_remaining_get 's32_t (struct k_delayed_work *)' static inline
| |-ParmVarDecl 0x559b74ba6518 <col:50, col:73> col:73 used work 'struct k_delayed_work *'
| |-CompoundStmt 0x559b74ba6878 <line:3175:1, line:3177:1>
| | `-ReturnStmt 0x559b74ba6830 <line:3176:2, col:66>
| |   `-ImplicitCastExpr 0x559b74ba6818 <col:9, col:66> 's32_t':'int' <IntegralCast>
| |     `-CallExpr 0x559b74ba67d0 <col:9, col:66> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559b74ba67b8 <col:9> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559b74ba6688 <col:9> 'u64_t (u64_t)' Function 0x559b74b592a0 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
| |       `-ImplicitCastExpr 0x559b74ba6800 <col:31, col:65> 'u64_t':'unsigned long long' <IntegralCast>
| |         `-CallExpr 0x559b74ba6788 <col:31, col:65> 's32_t':'int'
| |           |-ImplicitCastExpr 0x559b74ba6770 <col:31> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x559b74ba66b0 <col:31> 's32_t (struct _timeout *)' Function 0x559b74b891c0 'z_timeout_remaining' 's32_t (struct _timeout *)'
| |           `-UnaryOperator 0x559b74ba6750 <col:51, col:58> 'struct _timeout *' prefix '&'
| |             `-MemberExpr 0x559b74ba6718 <col:52, col:58> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x559b74a90a48
| |               `-ImplicitCastExpr 0x559b74ba6700 <col:52> 'struct k_delayed_work *' <LValueToRValue>
| |                 `-DeclRefExpr 0x559b74ba66d8 <col:52> 'struct k_delayed_work *' lvalue ParmVar 0x559b74ba6518 'work' 'struct k_delayed_work *'
| `-FullComment 0x559b74c52250 <line:3163:3, line:3173:1>
|   |-ParagraphComment 0x559b74c51e40 <line:3163:3>
|   | `-TextComment 0x559b74c51e10 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c51e60 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x559b74c51ec0 <col:10, col:66>
|   |   `-TextComment 0x559b74c51e90 <col:10, col:66> Text=" Get time remaining before a delayed work gets scheduled."
|   |-ParagraphComment 0x559b74c51f60 <line:3165:3, line:3167:30>
|   | |-TextComment 0x559b74c51ee0 <line:3165:3, col:66> Text=" This routine computes the (approximate) time remaining before a"
|   | |-TextComment 0x559b74c51f00 <line:3166:3, col:71> Text=" delayed work gets executed. If the delayed work is not waiting to be"
|   | `-TextComment 0x559b74c51f20 <line:3167:3, col:30> Text=" scheduled, it returns zero."
|   |-ParagraphComment 0x559b74c51fb0 <line:3169:3>
|   | `-TextComment 0x559b74c51f80 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c51fd0 <col:4, col:37> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559b74c52060 <col:15, col:37>
|   |   `-TextComment 0x559b74c52030 <col:15, col:37> Text="     Delayed work item."
|   |-ParagraphComment 0x559b74c520b0 <line:3171:3>
|   | `-TextComment 0x559b74c52080 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c520d0 <col:4, line:3172:3> Name="return"
|   | `-ParagraphComment 0x559b74c52150 <line:3171:11, line:3172:3>
|   |   |-TextComment 0x559b74c52100 <line:3171:11, col:44> Text=" Remaining time (in milliseconds)."
|   |   `-TextComment 0x559b74c52120 <line:3172:3> Text=" "
|   |-VerbatimLineComment 0x559b74c52170 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x559b74c521e0 <line:3173:1>
|     `-TextComment 0x559b74c521b0 <col:1> Text=" "
|-FunctionDecl 0x559b74ba6ac0 <line:3190:1, line:3191:33> line:3190:13 k_work_poll_init 'void (struct k_work_poll *, k_work_handler_t)' extern
| |-ParmVarDecl 0x559b74ba6940 <col:30, col:50> col:50 work 'struct k_work_poll *'
| |-ParmVarDecl 0x559b74ba69b0 <line:3191:9, col:26> col:26 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x559b74c526e0 <line:3180:3, line:3188:14>
|   |-ParagraphComment 0x559b74c522f0 <line:3180:3>
|   | `-TextComment 0x559b74c522c0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c52310 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c52370 <col:10, col:43>
|   |   `-TextComment 0x559b74c52340 <col:10, col:43> Text=" Initialize a triggered work item."
|   |-ParagraphComment 0x559b74c523e0 <line:3182:3, line:3183:17>
|   | |-TextComment 0x559b74c52390 <line:3182:3, col:69> Text=" This routine initializes a workqueue triggered work item, prior to"
|   | `-TextComment 0x559b74c523b0 <line:3183:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x559b74c52430 <line:3185:3>
|   | `-TextComment 0x559b74c52400 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c52450 <col:4, line:3186:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559b74c52500 <line:3185:15, line:3186:3>
|   |   |-TextComment 0x559b74c524b0 <line:3185:15, col:46> Text=" Address of triggered work item."
|   |   `-TextComment 0x559b74c524d0 <line:3186:3> Text=" "
|   |-ParamCommandComment 0x559b74c52520 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x559b74c525b0 <col:18, col:70>
|   |   `-TextComment 0x559b74c52580 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x559b74c52600 <line:3188:3>
|   | `-TextComment 0x559b74c525d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559b74c52620 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559b74c52680 <col:11, col:14>
|       `-TextComment 0x559b74c52650 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559b74ba6f48 <line:3227:1, line:3231:25> line:3227:12 used k_work_poll_submit_to_queue 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x559b74ba6be8 <col:40, col:57> col:57 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x559b74ba6c70 <line:3228:12, col:32> col:32 work 'struct k_work_poll *'
| |-ParmVarDecl 0x559b74ba6cf8 <line:3229:12, col:33> col:33 events 'struct k_poll_event *'
| |-ParmVarDecl 0x559b74ba6d70 <line:3230:12, col:16> col:16 num_events 'int'
| |-ParmVarDecl 0x559b74ba6de0 <line:3231:12, col:18> col:18 timeout 's32_t':'int'
| `-FullComment 0x559b74c53400 <line:3194:3, line:3225:69>
|   |-ParagraphComment 0x559b74c52780 <line:3194:3>
|   | `-TextComment 0x559b74c52750 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c527a0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c52800 <col:10, col:39>
|   |   `-TextComment 0x559b74c527d0 <col:10, col:39> Text=" Submit a triggered work item."
|   |-ParagraphComment 0x559b74c52a90 <line:3196:3, line:3200:50>
|   | |-TextComment 0x559b74c52820 <line:3196:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x559b74c52870 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x559b74c52890 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x559b74c528b0 <line:3197:3> Text=" "
|   | |-InlineCommandComment 0x559b74c52900 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x559b74c52920 <col:13, col:35> Text=" when one of the given "
|   | |-InlineCommandComment 0x559b74c52970 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x559b74c52990 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x559b74c529b0 <line:3198:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x559b74c529f0 <line:3199:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x559b74c52a10 <line:3200:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x559b74c52b80 <line:3202:3, line:3206:70>
|   | |-TextComment 0x559b74c52ab0 <line:3202:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x559b74c52ad0 <line:3203:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x559b74c52af0 <line:3204:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x559b74c52b10 <line:3205:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x559b74c52b30 <line:3206:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x559b74c52bd0 <line:3208:3>
|   | `-TextComment 0x559b74c52ba0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c52bf0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c52c50 <col:9, col:31>
|   |   `-TextComment 0x559b74c52c20 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c52ca0 <line:3210:3>
|   | `-TextComment 0x559b74c52c70 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c52cc0 <col:4, line:3213:57> Name="warning"
|   | `-ParagraphComment 0x559b74c52d70 <line:3211:3, line:3213:57>
|   |   |-TextComment 0x559b74c52cf0 <line:3211:3, col:75> Text=" Provided array of events as well as a triggered work item must be placed"
|   |   |-TextComment 0x559b74c52d10 <line:3212:3, col:67> Text=" in persistent memory (valid until work handler execution or work"
|   |   `-TextComment 0x559b74c52d30 <line:3213:3, col:57> Text=" cancellation) and cannot be modified after submission."
|   |-ParagraphComment 0x559b74c52dc0 <line:3215:3>
|   | `-TextComment 0x559b74c52d90 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c52de0 <col:4, line:3216:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x559b74c52e90 <line:3215:17, line:3216:3>
|   |   |-TextComment 0x559b74c52e40 <line:3215:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x559b74c52e60 <line:3216:3> Text=" "
|   |-ParamCommandComment 0x559b74c52eb0 <col:4, line:3217:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x559b74c52f60 <line:3216:15, line:3217:3>
|   |   |-TextComment 0x559b74c52f10 <line:3216:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x559b74c52f30 <line:3217:3> Text=" "
|   |-ParamCommandComment 0x559b74c52f80 <col:4, line:3218:3> [in] implicitly Param="events" ParamIndex=2
|   | `-ParagraphComment 0x559b74c53030 <line:3217:17, line:3218:3>
|   |   |-TextComment 0x559b74c52fe0 <line:3217:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x559b74c53000 <line:3218:3> Text=" "
|   |-ParamCommandComment 0x559b74c53050 <col:4, line:3219:3> [in] implicitly Param="num_events" ParamIndex=3
|   | `-ParagraphComment 0x559b74c53100 <line:3218:21, line:3219:3>
|   |   |-TextComment 0x559b74c530b0 <line:3218:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x559b74c530d0 <line:3219:3> Text=" "
|   |-ParamCommandComment 0x559b74c53120 <col:4, line:3220:42> [in] implicitly Param="timeout" ParamIndex=4
|   | `-ParagraphComment 0x559b74c531d0 <line:3219:18, line:3220:42>
|   |   |-TextComment 0x559b74c53180 <line:3219:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x559b74c531a0 <line:3220:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x559b74c53360 <line:3223:3, line:3225:69>
|     |-TextComment 0x559b74c531f0 <line:3223:3> Text=" "
|     |-InlineCommandComment 0x559b74c53210 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x559b74c53230 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x559b74c53250 <line:3224:3> Text=" "
|     |-InlineCommandComment 0x559b74c53270 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x559b74c53290 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x559b74c532b0 <line:3225:3> Text=" "
|     |-InlineCommandComment 0x559b74c532d0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x559b74c532f0 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x559b74ba7318 <line:3264:1, line:3271:1> line:3264:19 k_work_poll_submit 'int (struct k_work_poll *, struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x559b74ba7060 <col:38, col:58> col:58 used work 'struct k_work_poll *'
| |-ParmVarDecl 0x559b74ba70e8 <line:3265:10, col:31> col:31 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x559b74ba7160 <line:3266:10, col:14> col:14 used num_events 'int'
| |-ParmVarDecl 0x559b74ba71d0 <line:3267:10, col:16> col:16 used timeout 's32_t':'int'
| |-CompoundStmt 0x559b74ba7658 <line:3268:1, line:3271:1>
| | `-ReturnStmt 0x559b74ba7610 <line:3269:2, line:3270:34>
| |   `-CallExpr 0x559b74ba7560 <line:3269:9, line:3270:34> 'int'
| |     |-ImplicitCastExpr 0x559b74ba7548 <line:3269:9> 'int (*)(struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559b74ba73d8 <col:9> 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' Function 0x559b74ba6f48 'k_work_poll_submit_to_queue' 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)'
| |     |-UnaryOperator 0x559b74ba7428 <col:37, col:38> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x559b74ba7400 <col:38> 'struct k_work_q':'struct k_work_q' lvalue Var 0x559b74a90f78 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x559b74ba75b0 <col:52> 'struct k_work_poll *' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74ba7448 <col:52> 'struct k_work_poll *' lvalue ParmVar 0x559b74ba7060 'work' 'struct k_work_poll *'
| |     |-ImplicitCastExpr 0x559b74ba75c8 <line:3270:7> 'struct k_poll_event *' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74ba7470 <col:7> 'struct k_poll_event *' lvalue ParmVar 0x559b74ba70e8 'events' 'struct k_poll_event *'
| |     |-ImplicitCastExpr 0x559b74ba75e0 <col:15> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x559b74ba7498 <col:15> 'int' lvalue ParmVar 0x559b74ba7160 'num_events' 'int'
| |     `-ImplicitCastExpr 0x559b74ba75f8 <col:27> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x559b74ba74c0 <col:27> 's32_t':'int' lvalue ParmVar 0x559b74ba71d0 'timeout' 's32_t':'int'
| `-FullComment 0x559b74c53f70 <line:3234:3, line:3262:69>
|   |-ParagraphComment 0x559b74c534a0 <line:3234:3>
|   | `-TextComment 0x559b74c53470 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c534c0 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x559b74c53520 <col:10, col:63>
|   |   `-TextComment 0x559b74c534f0 <col:10, col:63> Text=" Submit a triggered work item to the system workqueue."
|   |-ParagraphComment 0x559b74c53710 <line:3236:3, line:3240:50>
|   | |-TextComment 0x559b74c53540 <line:3236:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x559b74c53590 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x559b74c535b0 <col:44, col:69> Text=" to be processed by system"
|   | |-TextComment 0x559b74c535d0 <line:3237:3, col:35> Text=" workqueue when one of the given "
|   | |-InlineCommandComment 0x559b74c53620 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x559b74c53640 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x559b74c53660 <line:3238:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x559b74c53680 <line:3239:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x559b74c536a0 <line:3240:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x559b74c53800 <line:3242:3, line:3246:70>
|   | |-TextComment 0x559b74c53730 <line:3242:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x559b74c53750 <line:3243:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x559b74c53770 <line:3244:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x559b74c53790 <line:3245:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x559b74c537b0 <line:3246:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x559b74c53850 <line:3248:3>
|   | `-TextComment 0x559b74c53820 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c53870 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c538d0 <col:9, col:31>
|   |   `-TextComment 0x559b74c538a0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c53920 <line:3250:3>
|   | `-TextComment 0x559b74c538f0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c53940 <col:4, line:3252:63> Name="warning"
|   | `-ParagraphComment 0x559b74c539c0 <line:3251:3, line:3252:63>
|   |   |-TextComment 0x559b74c53970 <line:3251:3, col:72> Text=" Provided array of events as well as a triggered work item must not be"
|   |   `-TextComment 0x559b74c53990 <line:3252:3, col:63> Text=" modified until the item has been processed by the workqueue."
|   |-ParagraphComment 0x559b74c53a10 <line:3254:3>
|   | `-TextComment 0x559b74c539e0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c53a30 <col:4, line:3255:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559b74c53ae0 <line:3254:15, line:3255:3>
|   |   |-TextComment 0x559b74c53a90 <line:3254:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x559b74c53ab0 <line:3255:3> Text=" "
|   |-ParamCommandComment 0x559b74c53b00 <col:4, line:3256:3> [in] implicitly Param="events" ParamIndex=1
|   | `-ParagraphComment 0x559b74c53bb0 <line:3255:17, line:3256:3>
|   |   |-TextComment 0x559b74c53b60 <line:3255:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x559b74c53b80 <line:3256:3> Text=" "
|   |-ParamCommandComment 0x559b74c53bd0 <col:4, line:3257:3> [in] implicitly Param="num_events" ParamIndex=2
|   | `-ParagraphComment 0x559b74c53c80 <line:3256:21, line:3257:3>
|   |   |-TextComment 0x559b74c53c30 <line:3256:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x559b74c53c50 <line:3257:3> Text=" "
|   |-ParamCommandComment 0x559b74c53ca0 <col:4, line:3258:42> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x559b74c53d50 <line:3257:18, line:3258:42>
|   |   |-TextComment 0x559b74c53d00 <line:3257:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x559b74c53d20 <line:3258:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x559b74c53ee0 <line:3260:3, line:3262:69>
|     |-TextComment 0x559b74c53d70 <line:3260:3> Text=" "
|     |-InlineCommandComment 0x559b74c53d90 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x559b74c53db0 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x559b74c53dd0 <line:3261:3> Text=" "
|     |-InlineCommandComment 0x559b74c53df0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x559b74c53e10 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x559b74c53e30 <line:3262:3> Text=" "
|     |-InlineCommandComment 0x559b74c53e50 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x559b74c53e70 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x559b74ba77a8 <line:3287:1, col:55> col:12 k_work_poll_cancel 'int (struct k_work_poll *)' extern
| |-ParmVarDecl 0x559b74ba7698 <col:31, col:51> col:51 work 'struct k_work_poll *'
| `-FullComment 0x559b74c544c0 <line:3274:3, line:3285:74>
|   |-ParagraphComment 0x559b74c54010 <line:3274:3>
|   | `-TextComment 0x559b74c53fe0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c54030 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c54090 <col:10, col:39>
|   |   `-TextComment 0x559b74c54060 <col:10, col:39> Text=" Cancel a triggered work item."
|   |-ParagraphComment 0x559b74c54180 <line:3276:3, line:3278:14>
|   | |-TextComment 0x559b74c540b0 <line:3276:3, col:62> Text=" This routine cancels the submission of triggered work item "
|   | |-InlineCommandComment 0x559b74c54100 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x559b74c54120 <line:3277:3, col:72> Text=" A triggered work item can only be canceled if no event triggered work"
|   | `-TextComment 0x559b74c54140 <line:3278:3, col:14> Text=" submission."
|   |-ParagraphComment 0x559b74c541d0 <line:3280:3>
|   | `-TextComment 0x559b74c541a0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c541f0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c54250 <col:9, col:31>
|   |   `-TextComment 0x559b74c54220 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c542a0 <line:3282:3>
|   | `-TextComment 0x559b74c54270 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c542c0 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559b74c54350 <col:15, col:44>
|   |   `-TextComment 0x559b74c54320 <col:15, col:44> Text=" Address of delayed work item."
|   `-ParagraphComment 0x559b74c54460 <line:3284:3, line:3285:74>
|     |-TextComment 0x559b74c54370 <line:3284:3> Text=" "
|     |-InlineCommandComment 0x559b74c54390 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x559b74c543b0 <col:11, col:32> Text=" 0 Work item canceled."
|     |-TextComment 0x559b74c543d0 <line:3285:3> Text=" "
|     |-InlineCommandComment 0x559b74c543f0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x559b74c54410 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|-RecordDecl 0x559b74ba78a8 prev 0x559b74b72c98 <line:3300:1, line:3314:1> line:3300:8 struct k_mutex definition
| |-FullComment 0x559b74c54650 <line:3297:3, line:3299:1>
| | |-ParagraphComment 0x559b74c54580 <line:3297:3, line:3298:3>
| | | |-TextComment 0x559b74c54530 <line:3297:3, col:18> Text=" Mutex Structure"
| | | `-TextComment 0x559b74c54550 <line:3298:3> Text=" "
| | |-VerbatimLineComment 0x559b74c545a0 <col:4, col:23> Text=" mutex_apis"
| | `-ParagraphComment 0x559b74c54610 <line:3299:1>
| |   `-TextComment 0x559b74c545e0 <col:1> Text=" "
| |-FieldDecl 0x559b74ba7968 <line:3302:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x559b74c54720 <line:3301:5, col:22>
| |   `-ParagraphComment 0x559b74c546f0 <col:5, col:22>
| |     `-TextComment 0x559b74c546c0 <col:5, col:22> Text=" Mutex wait queue "
| |-FieldDecl 0x559b74ba7a00 <line:3304:2, col:19> col:19 owner 'struct k_thread *'
| | `-FullComment 0x559b74c547f0 <line:3303:5, col:17>
| |   `-ParagraphComment 0x559b74c547c0 <col:5, col:17>
| |     `-TextComment 0x559b74c54790 <col:5, col:17> Text=" Mutex owner "
| |-FieldDecl 0x559b74ba7a88 <line:3307:2, col:8> col:8 lock_count 'u32_t':'unsigned int'
| | `-FullComment 0x559b74c548c0 <line:3306:5, col:24>
| |   `-ParagraphComment 0x559b74c54890 <col:5, col:24>
| |     `-TextComment 0x559b74c54860 <col:5, col:24> Text=" Current lock count "
| `-FieldDecl 0x559b74ba7b10 <line:3310:2, col:6> col:6 owner_orig_prio 'int'
|   `-FullComment 0x559b74c54990 <line:3309:5, col:30>
|     `-ParagraphComment 0x559b74c54960 <col:5, col:30>
|       `-TextComment 0x559b74c54930 <col:5, col:30> Text=" Original thread priority "
|-FunctionDecl 0x559b74ba7de8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3361:49> col:15 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x559b74ba7ce0 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| `-FullComment 0x559b74c54e80 <line:3349:3, line:3360:1>
|   |-ParagraphComment 0x559b74c54a70 <line:3349:3>
|   | `-TextComment 0x559b74c54a40 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c54a90 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x559b74c54af0 <col:10, col:29>
|   |   `-TextComment 0x559b74c54ac0 <col:10, col:29> Text=" Initialize a mutex."
|   |-ParagraphComment 0x559b74c54b40 <line:3351:3, col:67>
|   | `-TextComment 0x559b74c54b10 <col:3, col:67> Text=" This routine initializes a mutex object, prior to its first use."
|   |-ParagraphComment 0x559b74c54b90 <line:3353:3, col:70>
|   | `-TextComment 0x559b74c54b60 <col:3, col:70> Text=" Upon completion, the mutex is available and does not have an owner."
|   |-ParagraphComment 0x559b74c54be0 <line:3355:3>
|   | `-TextComment 0x559b74c54bb0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c54c00 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x559b74c54c90 <col:16, col:37>
|   |   `-TextComment 0x559b74c54c60 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x559b74c54d30 <line:3357:3, col:33>
|   | |-TextComment 0x559b74c54cb0 <col:3> Text=" "
|   | |-InlineCommandComment 0x559b74c54cd0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x559b74c54cf0 <col:11, col:33> Text=" 0 Mutex object created"
|   |-ParagraphComment 0x559b74c54d80 <line:3359:3>
|   | `-TextComment 0x559b74c54d50 <col:3> Text=" "
|   |-VerbatimLineComment 0x559b74c54da0 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x559b74c54e10 <line:3360:1>
|     `-TextComment 0x559b74c54de0 <col:1> Text=" "
|-FunctionDecl 0x559b74ba8068 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3384:64> col:15 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x559b74ba7ee0 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| |-ParmVarDecl 0x559b74ba7f50 <col:51, col:57> col:57 timeout 's32_t':'int'
| `-FullComment 0x559b74c55600 <line:3365:3, line:3383:1>
|   |-ParagraphComment 0x559b74c54f20 <line:3365:3>
|   | `-TextComment 0x559b74c54ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c54f40 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x559b74c54fa0 <col:10, col:23>
|   |   `-TextComment 0x559b74c54f70 <col:10, col:23> Text=" Lock a mutex."
|   |-ParagraphComment 0x559b74c550c0 <line:3367:3, line:3369:20>
|   | |-TextComment 0x559b74c54fc0 <line:3367:3, col:22> Text=" This routine locks "
|   | |-InlineCommandComment 0x559b74c55010 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x559b74c55030 <col:32, col:73> Text=" If the mutex is locked by another thread,"
|   | |-TextComment 0x559b74c55050 <line:3368:3, col:70> Text=" the calling thread waits until the mutex becomes available or until"
|   | `-TextComment 0x559b74c55070 <line:3369:3, col:20> Text=" a timeout occurs."
|   |-ParagraphComment 0x559b74c55130 <line:3371:3, line:3372:62>
|   | |-TextComment 0x559b74c550e0 <line:3371:3, col:77> Text=" A thread is permitted to lock a mutex it has already locked. The operation"
|   | `-TextComment 0x559b74c55100 <line:3372:3, col:62> Text=" completes immediately and the lock count is increased by 1."
|   |-ParagraphComment 0x559b74c55180 <line:3374:3>
|   | `-TextComment 0x559b74c55150 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c551a0 <col:4, line:3375:3> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x559b74c55250 <line:3374:16, line:3375:3>
|   |   |-TextComment 0x559b74c55200 <line:3374:16, col:37> Text=" Address of the mutex."
|   |   `-TextComment 0x559b74c55220 <line:3375:3> Text=" "
|   |-ParamCommandComment 0x559b74c55270 <col:4, line:3377:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x559b74c55350 <line:3375:18, line:3377:28>
|   |   |-TextComment 0x559b74c552d0 <line:3375:18, col:67> Text=" Non-negative waiting period to lock the mutex (in"
|   |   |-TextComment 0x559b74c552f0 <line:3376:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x559b74c55310 <line:3377:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x559b74c55500 <line:3379:3, line:3382:3>
|   | |-TextComment 0x559b74c55370 <line:3379:3> Text=" "
|   | |-InlineCommandComment 0x559b74c55390 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c553b0 <col:11, col:26> Text=" 0 Mutex locked."
|   | |-TextComment 0x559b74c553d0 <line:3380:3> Text=" "
|   | |-InlineCommandComment 0x559b74c553f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c55410 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x559b74c55430 <line:3381:3> Text=" "
|   | |-InlineCommandComment 0x559b74c55450 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c55470 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x559b74c55490 <line:3382:3> Text=" "
|   |-VerbatimLineComment 0x559b74c55520 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x559b74c55590 <line:3383:1>
|     `-TextComment 0x559b74c55560 <col:1> Text=" "
|-FunctionDecl 0x559b74ba8200 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3404:51> col:15 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x559b74ba8170 <col:30, col:46> col:46 mutex 'struct k_mutex *'
| `-FullComment 0x559b74c55c90 <line:3387:3, line:3403:1>
|   |-ParagraphComment 0x559b74c556a0 <line:3387:3>
|   | `-TextComment 0x559b74c55670 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c556c0 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x559b74c55720 <col:10, col:25>
|   |   `-TextComment 0x559b74c556f0 <col:10, col:25> Text=" Unlock a mutex."
|   |-ParagraphComment 0x559b74c55810 <line:3389:3, line:3390:18>
|   | |-TextComment 0x559b74c55740 <line:3389:3, col:24> Text=" This routine unlocks "
|   | |-InlineCommandComment 0x559b74c55790 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x559b74c557b0 <col:34, col:73> Text=" The mutex must already be locked by the"
|   | `-TextComment 0x559b74c557d0 <line:3390:3, col:18> Text=" calling thread."
|   |-ParagraphComment 0x559b74c558b0 <line:3392:3, line:3394:10>
|   | |-TextComment 0x559b74c55830 <line:3392:3, col:78> Text=" The mutex cannot be claimed by another thread until it has been unlocked by"
|   | |-TextComment 0x559b74c55850 <line:3393:3, col:71> Text=" the calling thread as many times as it was previously locked by that"
|   | `-TextComment 0x559b74c55870 <line:3394:3, col:10> Text=" thread."
|   |-ParagraphComment 0x559b74c55900 <line:3396:3>
|   | `-TextComment 0x559b74c558d0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c55920 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x559b74c559b0 <col:16, col:37>
|   |   `-TextComment 0x559b74c55980 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x559b74c55b40 <line:3398:3, line:3400:42>
|   | |-TextComment 0x559b74c559d0 <line:3398:3> Text=" "
|   | |-InlineCommandComment 0x559b74c559f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c55a10 <col:11, col:28> Text=" 0 Mutex unlocked."
|   | |-TextComment 0x559b74c55a30 <line:3399:3> Text=" "
|   | |-InlineCommandComment 0x559b74c55a50 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c55a70 <col:11, col:59> Text=" -EPERM The current thread does not own the mutex"
|   | |-TextComment 0x559b74c55a90 <line:3400:3> Text=" "
|   | |-InlineCommandComment 0x559b74c55ab0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x559b74c55ad0 <col:11, col:42> Text=" -EINVAL The mutex is not locked"
|   |-ParagraphComment 0x559b74c55b90 <line:3402:3>
|   | `-TextComment 0x559b74c55b60 <col:3> Text=" "
|   |-VerbatimLineComment 0x559b74c55bb0 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x559b74c55c20 <line:3403:1>
|     `-TextComment 0x559b74c55bf0 <col:1> Text=" "
|-RecordDecl 0x559b74ba8308 prev 0x559b74b72d40 <line:3414:1, line:3422:1> line:3414:8 struct k_sem definition
| |-FullComment 0x559b74c55db0 <line:3411:3, col:24>
| | `-ParagraphComment 0x559b74c55d80 <col:3, col:24>
| |   |-TextComment 0x559b74c55d00 <col:3> Text=" "
| |   |-InlineCommandComment 0x559b74c55d20 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x559b74c55d40 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x559b74ba83a0 <line:3415:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x559b74ba83f8 <line:3416:2, col:8> col:8 referenced count 'u32_t':'unsigned int'
| `-FieldDecl 0x559b74ba8450 <line:3417:2, col:8> col:8 limit 'u32_t':'unsigned int'
|-FunctionDecl 0x559b74ba8808 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3460:24> line:3459:15 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x559b74ba85e0 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x559b74ba8658 <col:45, col:58> col:58 initial_count 'unsigned int'
| |-ParmVarDecl 0x559b74ba86d0 <line:3460:6, col:19> col:19 limit 'unsigned int'
| `-FullComment 0x559b74c56430 <line:3446:3, line:3458:1>
|   |-ParagraphComment 0x559b74c55e50 <line:3446:3>
|   | `-TextComment 0x559b74c55e20 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c55e70 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x559b74c55ed0 <col:10, col:33>
|   |   `-TextComment 0x559b74c55ea0 <col:10, col:33> Text=" Initialize a semaphore."
|   |-ParagraphComment 0x559b74c55f20 <line:3448:3, col:71>
|   | `-TextComment 0x559b74c55ef0 <col:3, col:71> Text=" This routine initializes a semaphore object, prior to its first use."
|   |-ParagraphComment 0x559b74c55f70 <line:3450:3>
|   | `-TextComment 0x559b74c55f40 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c55f90 <col:4, line:3451:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x559b74c56040 <line:3450:14, line:3451:3>
|   |   |-TextComment 0x559b74c55ff0 <line:3450:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x559b74c56010 <line:3451:3> Text=" "
|   |-ParamCommandComment 0x559b74c56060 <col:4, line:3452:3> [in] implicitly Param="initial_count" ParamIndex=1
|   | `-ParagraphComment 0x559b74c56110 <line:3451:24, line:3452:3>
|   |   |-TextComment 0x559b74c560c0 <line:3451:24, col:48> Text=" Initial semaphore count."
|   |   `-TextComment 0x559b74c560e0 <line:3452:3> Text=" "
|   |-ParamCommandComment 0x559b74c56130 <col:4, col:50> [in] implicitly Param="limit" ParamIndex=2
|   | `-ParagraphComment 0x559b74c561c0 <col:16, col:50>
|   |   `-TextComment 0x559b74c56190 <col:16, col:50> Text=" Maximum permitted semaphore count."
|   |-ParagraphComment 0x559b74c562d0 <line:3454:3, line:3455:33>
|   | |-TextComment 0x559b74c561e0 <line:3454:3> Text=" "
|   | |-InlineCommandComment 0x559b74c56200 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c56220 <col:11, col:43> Text=" 0 Semaphore created successfully"
|   | |-TextComment 0x559b74c56240 <line:3455:3> Text=" "
|   | |-InlineCommandComment 0x559b74c56260 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x559b74c56280 <col:11, col:33> Text=" -EINVAL Invalid values"
|   |-ParagraphComment 0x559b74c56320 <line:3457:3>
|   | `-TextComment 0x559b74c562f0 <col:3> Text=" "
|   |-VerbatimLineComment 0x559b74c56340 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x559b74c563b0 <line:3458:1>
|     `-TextComment 0x559b74c56380 <col:1> Text=" "
|-FunctionDecl 0x559b74ba8a98 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3479:58> col:15 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x559b74ba8910 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x559b74ba8980 <col:45, col:51> col:51 timeout 's32_t':'int'
| `-FullComment 0x559b74c56c30 <line:3463:3, line:3478:1>
|   |-ParagraphComment 0x559b74c564d0 <line:3463:3>
|   | `-TextComment 0x559b74c564a0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c564f0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x559b74c56550 <col:10, col:27>
|   |   `-TextComment 0x559b74c56520 <col:10, col:27> Text=" Take a semaphore."
|   |-ParagraphComment 0x559b74c565f0 <line:3465:3, col:24>
|   | |-TextComment 0x559b74c56570 <col:3, col:22> Text=" This routine takes "
|   | `-InlineCommandComment 0x559b74c565c0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x559b74c56640 <line:3467:3>
|   | `-TextComment 0x559b74c56610 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c56660 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x559b74c56740 <col:9, col:72>
|   |   |-TextComment 0x559b74c56690 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x559b74c566e0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x559b74c56700 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x559b74c56790 <line:3469:3>
|   | `-TextComment 0x559b74c56760 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c567b0 <col:4, line:3470:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x559b74c56860 <line:3469:14, line:3470:3>
|   |   |-TextComment 0x559b74c56810 <line:3469:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x559b74c56830 <line:3470:3> Text=" "
|   |-ParamCommandComment 0x559b74c56880 <col:4, line:3472:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x559b74c56960 <line:3470:18, line:3472:28>
|   |   |-TextComment 0x559b74c568e0 <line:3470:18, col:71> Text=" Non-negative waiting period to take the semaphore (in"
|   |   |-TextComment 0x559b74c56900 <line:3471:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x559b74c56920 <line:3472:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x559b74c56b20 <line:3474:3, line:3477:3>
|   | |-TextComment 0x559b74c56980 <line:3474:3> Text=" "
|   | |-InlineCommandComment 0x559b74c569a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c569c0 <col:11, col:29> Text=" 0 Semaphore taken."
|   | |-TextComment 0x559b74c569e0 <line:3475:3> Text=" "
|   | |-InlineCommandComment 0x559b74c56a10 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c56a30 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x559b74c56a50 <line:3476:3> Text=" "
|   | |-InlineCommandComment 0x559b74c56a70 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c56a90 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x559b74c56ab0 <line:3477:3> Text=" "
|   |-VerbatimLineComment 0x559b74c56b40 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x559b74c56bb0 <line:3478:1>
|     `-TextComment 0x559b74c56b80 <col:1> Text=" "
|-FunctionDecl 0x559b74ba9cf0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3494:44> col:16 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x559b74ba9bf0 <col:27, col:41> col:41 sem 'struct k_sem *'
| `-FullComment 0x559b74c57210 <line:3482:3, line:3493:1>
|   |-ParagraphComment 0x559b74c56cd0 <line:3482:3>
|   | `-TextComment 0x559b74c56ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c56cf0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x559b74c56d50 <col:10, col:27>
|   |   `-TextComment 0x559b74c56d20 <col:10, col:27> Text=" Give a semaphore."
|   |-ParagraphComment 0x559b74c56e40 <line:3484:3, line:3485:19>
|   | |-TextComment 0x559b74c56d70 <line:3484:3, col:22> Text=" This routine gives "
|   | |-InlineCommandComment 0x559b74c56dc0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem,"
|   | |-TextComment 0x559b74c56de0 <col:30, col:76> Text=" unless the semaphore is already at its maximum"
|   | `-TextComment 0x559b74c56e00 <line:3485:3, col:19> Text=" permitted count."
|   |-ParagraphComment 0x559b74c56e90 <line:3487:3>
|   | `-TextComment 0x559b74c56e60 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c56eb0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c56f10 <col:9, col:31>
|   |   `-TextComment 0x559b74c56ee0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c56f60 <line:3489:3>
|   | `-TextComment 0x559b74c56f30 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c56f80 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x559b74c57010 <col:14, col:39>
|   |   `-TextComment 0x559b74c56fe0 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x559b74c57060 <line:3491:3>
|   | `-TextComment 0x559b74c57030 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c57080 <col:4, line:3492:3> Name="return"
|   | `-ParagraphComment 0x559b74c57100 <line:3491:11, line:3492:3>
|   |   |-TextComment 0x559b74c570b0 <line:3491:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c570d0 <line:3492:3> Text=" "
|   |-VerbatimLineComment 0x559b74c57120 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x559b74c57190 <line:3493:1>
|     `-TextComment 0x559b74c57160 <col:1> Text=" "
|-FunctionDecl 0x559b74ba9e78 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3506:45> col:16 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x559b74ba9df0 <col:28, col:42> col:42 sem 'struct k_sem *'
| `-FullComment 0x559b74c576f0 <line:3497:3, line:3505:1>
|   |-ParagraphComment 0x559b74c572b0 <line:3497:3>
|   | `-TextComment 0x559b74c57280 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c572d0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559b74c57330 <col:10, col:44>
|   |   `-TextComment 0x559b74c57300 <col:10, col:44> Text=" Reset a semaphore's count to zero."
|   |-ParagraphComment 0x559b74c57400 <line:3499:3, col:49>
|   | |-TextComment 0x559b74c57350 <col:3, col:34> Text=" This routine sets the count of "
|   | |-InlineCommandComment 0x559b74c573a0 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x559b74c573c0 <col:41, col:49> Text=" to zero."
|   |-ParagraphComment 0x559b74c57450 <line:3501:3>
|   | `-TextComment 0x559b74c57420 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c57470 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x559b74c57500 <col:14, col:39>
|   |   `-TextComment 0x559b74c574d0 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x559b74c57550 <line:3503:3>
|   | `-TextComment 0x559b74c57520 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c57570 <col:4, line:3504:3> Name="return"
|   | `-ParagraphComment 0x559b74c575f0 <line:3503:11, line:3504:3>
|   |   |-TextComment 0x559b74c575a0 <line:3503:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c575c0 <line:3504:3> Text=" "
|   |-VerbatimLineComment 0x559b74c57610 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x559b74c57680 <line:3505:1>
|     `-TextComment 0x559b74c57650 <col:1> Text=" "
|-FunctionDecl 0x559b74ba9ff8 <line:3511:1, line:3514:1> line:3511:20 used z_impl_k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x559b74ba9f70 <col:39, col:53> col:53 used sem 'struct k_sem *'
| |-CompoundStmt 0x559b74baa188 <line:3512:1, line:3514:1>
| | `-BinaryOperator 0x559b74baa138 <line:3513:2, col:15> 'u32_t':'unsigned int' '='
| |   |-MemberExpr 0x559b74baa0e0 <col:2, col:7> 'u32_t':'unsigned int' lvalue ->count 0x559b74ba83f8
| |   | `-ImplicitCastExpr 0x559b74baa0c8 <col:2> 'struct k_sem *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x559b74baa0a0 <col:2> 'struct k_sem *' lvalue ParmVar 0x559b74ba9f70 'sem' 'struct k_sem *'
| |   `-IntegerLiteral 0x559b74baa118 <col:15> 'unsigned int' 0
| `-FullComment 0x559b74c577e0 <line:3509:3, col:12>
|   `-ParagraphComment 0x559b74c577b0 <col:3, col:12>
|     |-TextComment 0x559b74c57760 <col:3> Text=" "
|     `-InlineCommandComment 0x559b74c57780 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x559b74baa2d8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3526:57> col:24 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x559b74baa1c8 <col:40, col:54> col:54 sem 'struct k_sem *'
| `-FullComment 0x559b74c57c90 <line:3517:3, line:3525:1>
|   |-ParagraphComment 0x559b74c57880 <line:3517:3>
|   | `-TextComment 0x559b74c57850 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c578a0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x559b74c57900 <col:10, col:34>
|   |   `-TextComment 0x559b74c578d0 <col:10, col:34> Text=" Get a semaphore's count."
|   |-ParagraphComment 0x559b74c579a0 <line:3519:3, col:47>
|   | |-TextComment 0x559b74c57920 <col:3, col:45> Text=" This routine returns the current count of "
|   | `-InlineCommandComment 0x559b74c57970 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x559b74c579f0 <line:3521:3>
|   | `-TextComment 0x559b74c579c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c57a10 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x559b74c57aa0 <col:14, col:39>
|   |   `-TextComment 0x559b74c57a70 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x559b74c57af0 <line:3523:3>
|   | `-TextComment 0x559b74c57ac0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c57b10 <col:4, line:3524:3> Name="return"
|   | `-ParagraphComment 0x559b74c57b90 <line:3523:11, line:3524:3>
|   |   |-TextComment 0x559b74c57b40 <line:3523:11, col:35> Text=" Current semaphore count."
|   |   `-TextComment 0x559b74c57b60 <line:3524:3> Text=" "
|   |-VerbatimLineComment 0x559b74c57bb0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x559b74c57c20 <line:3525:1>
|     `-TextComment 0x559b74c57bf0 <col:1> Text=" "
|-FunctionDecl 0x559b74baa460 <line:3531:1, line:3534:1> line:3531:28 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x559b74baa3d0 <col:51, col:65> col:65 used sem 'struct k_sem *'
| |-CompoundStmt 0x559b74baa668 <line:3532:1, line:3534:1>
| | `-ReturnStmt 0x559b74baa598 <line:3533:2, col:14>
| |   `-ImplicitCastExpr 0x559b74baa580 <col:9, col:14> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x559b74baa548 <col:9, col:14> 'u32_t':'unsigned int' lvalue ->count 0x559b74ba83f8
| |       `-ImplicitCastExpr 0x559b74baa530 <col:9> 'struct k_sem *' <LValueToRValue>
| |         `-DeclRefExpr 0x559b74baa508 <col:9> 'struct k_sem *' lvalue ParmVar 0x559b74baa3d0 'sem' 'struct k_sem *'
| `-FullComment 0x559b74c57d80 <line:3529:3, col:12>
|   `-ParagraphComment 0x559b74c57d50 <col:3, col:12>
|     |-TextComment 0x559b74c57d00 <col:3> Text=" "
|     `-InlineCommandComment 0x559b74c57d20 <col:4, col:12> Name="internal" RenderNormal
|-RecordDecl 0x559b74baa680 prev 0x559b74b72df0 <line:3565:1, line:3590:1> line:3565:8 struct k_msgq definition
| |-FullComment 0x559b74c57ed0 <line:3563:3, col:33>
| | |-ParagraphComment 0x559b74c57e20 <col:3>
| | | `-TextComment 0x559b74c57df0 <col:3> Text=" "
| | `-BlockCommandComment 0x559b74c57e40 <col:4, col:33> Name="brief"
| |   `-ParagraphComment 0x559b74c57ea0 <col:10, col:33>
| |     `-TextComment 0x559b74c57e70 <col:10, col:33> Text=" Message Queue Structure"
| |-FieldDecl 0x559b74baa748 <line:3567:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x559b74c57fa0 <line:3566:5, col:30>
| |   `-ParagraphComment 0x559b74c57f70 <col:5, col:30>
| |     `-TextComment 0x559b74c57f40 <col:5, col:30> Text=" Message queue wait queue "
| |-FieldDecl 0x559b74baa7d8 <line:3569:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x559b74c58070 <line:3568:5, col:10>
| |   `-ParagraphComment 0x559b74c58040 <col:5, col:10>
| |     `-TextComment 0x559b74c58010 <col:5, col:10> Text=" Lock "
| |-FieldDecl 0x559b74baa858 <line:3571:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x559b74c58140 <line:3570:5, col:18>
| |   `-ParagraphComment 0x559b74c58110 <col:5, col:18>
| |     `-TextComment 0x559b74c580e0 <col:5, col:18> Text=" Message size "
| |-FieldDecl 0x559b74baa8d8 <line:3573:2, col:8> col:8 referenced max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x559b74c58210 <line:3572:5, col:32>
| |   `-ParagraphComment 0x559b74c581e0 <col:5, col:32>
| |     `-TextComment 0x559b74c581b0 <col:5, col:32> Text=" Maximal number of messages "
| |-FieldDecl 0x559b74baa960 <line:3575:2, col:8> col:8 buffer_start 'char *'
| | `-FullComment 0x559b74c582e0 <line:3574:5, col:29>
| |   `-ParagraphComment 0x559b74c582b0 <col:5, col:29>
| |     `-TextComment 0x559b74c58280 <col:5, col:29> Text=" Start of message buffer "
| |-FieldDecl 0x559b74baa9f0 <line:3577:2, col:8> col:8 buffer_end 'char *'
| | `-FullComment 0x559b74c583b0 <line:3576:5, col:27>
| |   `-ParagraphComment 0x559b74c58380 <col:5, col:27>
| |     `-TextComment 0x559b74c58350 <col:5, col:27> Text=" End of message buffer "
| |-FieldDecl 0x559b74baaa80 <line:3579:2, col:8> col:8 read_ptr 'char *'
| | `-FullComment 0x559b74c58480 <line:3578:5, col:18>
| |   `-ParagraphComment 0x559b74c58450 <col:5, col:18>
| |     `-TextComment 0x559b74c58420 <col:5, col:18> Text=" Read pointer "
| |-FieldDecl 0x559b74baab10 <line:3581:2, col:8> col:8 write_ptr 'char *'
| | `-FullComment 0x559b74c58550 <line:3580:5, col:19>
| |   `-ParagraphComment 0x559b74c58520 <col:5, col:19>
| |     `-TextComment 0x559b74c584f0 <col:5, col:19> Text=" Write pointer "
| |-FieldDecl 0x559b74baab98 <line:3583:2, col:8> col:8 referenced used_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x559b74c58620 <line:3582:5, col:29>
| |   `-ParagraphComment 0x559b74c585f0 <col:5, col:29>
| |     `-TextComment 0x559b74c585c0 <col:5, col:29> Text=" Number of used messages "
| `-FieldDecl 0x559b74b5a078 <line:3589:2, col:7> col:7 flags 'u8_t':'unsigned char'
|   `-FullComment 0x559b74c586f0 <line:3588:5, col:19>
|     `-ParagraphComment 0x559b74c586c0 <col:5, col:19>
|       `-TextComment 0x559b74c58690 <col:5, col:19> Text=" Message queue "
|-RecordDecl 0x559b74b5a148 <line:3619:1, line:3626:1> line:3619:8 struct k_msgq_attrs definition
| |-FullComment 0x559b74c58840 <line:3617:3, col:34>
| | |-ParagraphComment 0x559b74c58790 <col:3>
| | | `-TextComment 0x559b74c58760 <col:3> Text=" "
| | `-BlockCommandComment 0x559b74c587b0 <col:4, col:34> Name="brief"
| |   `-ParagraphComment 0x559b74c58810 <col:10, col:34>
| |     `-TextComment 0x559b74c587e0 <col:10, col:34> Text=" Message Queue Attributes"
| |-FieldDecl 0x559b74b5a228 <line:3621:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x559b74c58910 <line:3620:5, col:18>
| |   `-ParagraphComment 0x559b74c588e0 <col:5, col:18>
| |     `-TextComment 0x559b74c588b0 <col:5, col:18> Text=" Message Size "
| |-FieldDecl 0x559b74b5a2a8 <line:3623:2, col:8> col:8 max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x559b74c589e0 <line:3622:5, col:32>
| |   `-ParagraphComment 0x559b74c589b0 <col:5, col:32>
| |     `-TextComment 0x559b74c58980 <col:5, col:32> Text=" Maximal number of messages "
| `-FieldDecl 0x559b74b5a328 <line:3625:2, col:8> col:8 used_msgs 'u32_t':'unsigned int'
|   `-FullComment 0x559b74c58ac0 <line:3624:5, col:19>
|     `-ParagraphComment 0x559b74c58a90 <col:5, col:19>
|       `-TextComment 0x559b74c58a60 <col:5, col:19> Text=" Used messages "
|-FunctionDecl 0x559b74b5a720 <line:3676:1, line:3677:18> line:3676:6 k_msgq_init 'void (struct k_msgq *, char *, size_t, u32_t)'
| |-ParmVarDecl 0x559b74b5a480 <col:18, col:33> col:33 q 'struct k_msgq *'
| |-ParmVarDecl 0x559b74b5a4f8 <col:36, col:42> col:42 buffer 'char *'
| |-ParmVarDecl 0x559b74b5a568 <col:50, col:57> col:57 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74b5a5d8 <line:3677:4, col:10> col:10 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x559b74c593f0 <line:3658:3, line:3675:1>
|   |-ParagraphComment 0x559b74c58b60 <line:3658:3>
|   | `-TextComment 0x559b74c58b30 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c58b80 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x559b74c58be0 <col:10, col:37>
|   |   `-TextComment 0x559b74c58bb0 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x559b74c58c30 <line:3660:3, col:75>
|   | `-TextComment 0x559b74c58c00 <col:3, col:75> Text=" This routine initializes a message queue object, prior to its first use."
|   |-ParagraphComment 0x559b74c58e70 <line:3662:3, line:3666:32>
|   | |-TextComment 0x559b74c58c50 <line:3662:3, col:58> Text=" The message queue's ring buffer must contain space for "
|   | |-InlineCommandComment 0x559b74c58ca0 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="max_msgs"
|   | |-TextComment 0x559b74c58cc0 <col:70, col:79> Text=" messages,"
|   | |-TextComment 0x559b74c58ce0 <line:3663:3, col:20> Text=" each of which is "
|   | |-InlineCommandComment 0x559b74c58d30 <col:21, col:22> Name="a" RenderEmphasized Arg[0]="msg_size"
|   | |-TextComment 0x559b74c58d50 <col:32, col:76> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x559b74c58d70 <line:3664:3, col:74> Text=" N-byte boundary, where N is a power of 2 (i.e. 1, 2, 4, ...). To ensure"
|   | |-TextComment 0x559b74c58d90 <line:3665:3, col:60> Text=" that each message is similarly aligned to this boundary, "
|   | |-InlineCommandComment 0x559b74c58de0 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="q_msg_size"
|   | `-TextComment 0x559b74c58e00 <line:3666:3, col:32> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x559b74c58ec0 <line:3668:3>
|   | `-TextComment 0x559b74c58e90 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c58ee0 <col:4, line:3669:3> [in] implicitly Param="q" ParamIndex=0
|   | `-ParagraphComment 0x559b74c58f90 <line:3668:12, line:3669:3>
|   |   |-TextComment 0x559b74c58f40 <line:3668:12, col:41> Text=" Address of the message queue."
|   |   `-TextComment 0x559b74c58f60 <line:3669:3> Text=" "
|   |-ParamCommandComment 0x559b74c58fb0 <col:4, line:3670:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x559b74c59060 <line:3669:17, line:3670:3>
|   |   |-TextComment 0x559b74c59010 <line:3669:17, col:67> Text=" Pointer to ring buffer that holds queued messages."
|   |   `-TextComment 0x559b74c59030 <line:3670:3> Text=" "
|   |-ParamCommandComment 0x559b74c59080 <col:4, line:3671:3> [in] implicitly Param="msg_size" ParamIndex=2
|   | `-ParagraphComment 0x559b74c59130 <line:3670:19, line:3671:3>
|   |   |-TextComment 0x559b74c590e0 <line:3670:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x559b74c59100 <line:3671:3> Text=" "
|   |-ParamCommandComment 0x559b74c59150 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=3
|   | `-ParagraphComment 0x559b74c591e0 <col:19, col:65>
|   |   `-TextComment 0x559b74c591b0 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x559b74c59230 <line:3673:3>
|   | `-TextComment 0x559b74c59200 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c59250 <col:4, line:3674:3> Name="return"
|   | `-ParagraphComment 0x559b74c592d0 <line:3673:11, line:3674:3>
|   |   |-TextComment 0x559b74c59280 <line:3673:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c592a0 <line:3674:3> Text=" "
|   |-VerbatimLineComment 0x559b74c592f0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x559b74c59360 <line:3675:1>
|     `-TextComment 0x559b74c59330 <col:1> Text=" "
|-FunctionDecl 0x559b74b5aa48 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3700:19> line:3699:15 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x559b74b5a830 <col:33, col:48> col:48 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x559b74b5a8a0 <col:54, col:61> col:61 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74b5a910 <line:3700:5, col:11> col:11 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x559b74c59b40 <line:3680:3, line:3698:1>
|   |-ParagraphComment 0x559b74c59490 <line:3680:3>
|   | `-TextComment 0x559b74c59460 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c594b0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x559b74c59510 <col:10, col:37>
|   |   `-TextComment 0x559b74c594e0 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x559b74c595b0 <line:3682:3, line:3684:8>
|   | |-TextComment 0x559b74c59530 <line:3682:3, col:75> Text=" This routine initializes a message queue object, prior to its first use,"
|   | |-TextComment 0x559b74c59550 <line:3683:3, col:73> Text=" allocating its internal ring buffer from the calling thread's resource"
|   | `-TextComment 0x559b74c59570 <line:3684:3, col:8> Text=" pool."
|   |-ParagraphComment 0x559b74c59650 <line:3686:3, line:3688:25>
|   | |-TextComment 0x559b74c595d0 <line:3686:3, col:66> Text=" Memory allocated for the ring buffer can be released by calling"
|   | |-TextComment 0x559b74c595f0 <line:3687:3, col:73> Text=" k_msgq_cleanup(), or if userspace is enabled and the msgq object loses"
|   | `-TextComment 0x559b74c59610 <line:3688:3, col:25> Text=" all of its references."
|   |-ParagraphComment 0x559b74c596a0 <line:3690:3>
|   | `-TextComment 0x559b74c59670 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c596c0 <col:4, line:3691:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x559b74c59770 <line:3690:15, line:3691:3>
|   |   |-TextComment 0x559b74c59720 <line:3690:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x559b74c59740 <line:3691:3> Text=" "
|   |-ParamCommandComment 0x559b74c59790 <col:4, line:3692:3> [in] implicitly Param="msg_size" ParamIndex=1
|   | `-ParagraphComment 0x559b74c59840 <line:3691:19, line:3692:3>
|   |   |-TextComment 0x559b74c597f0 <line:3691:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x559b74c59810 <line:3692:3> Text=" "
|   |-ParamCommandComment 0x559b74c59860 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=2
|   | `-ParagraphComment 0x559b74c598f0 <col:19, col:65>
|   |   `-TextComment 0x559b74c598c0 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x559b74c59940 <line:3694:3>
|   | `-TextComment 0x559b74c59910 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c59960 <col:4, line:3697:3> Name="return"
|   | `-ParagraphComment 0x559b74c59a30 <line:3694:11, line:3697:3>
|   |   |-TextComment 0x559b74c59990 <line:3694:11, col:72> Text=" 0 on success, -ENOMEM if there was insufficient memory in the"
|   |   |-TextComment 0x559b74c599b0 <line:3695:3, col:66> Text="	thread's resource pool, or -EINVAL if the size parameters cause"
|   |   |-TextComment 0x559b74c599d0 <line:3696:3, col:23> Text="	an integer overflow."
|   |   `-TextComment 0x559b74c599f0 <line:3697:3> Text=" "
|   |-VerbatimLineComment 0x559b74c59a50 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x559b74c59ac0 <line:3698:1>
|     `-TextComment 0x559b74c59a90 <col:1> Text=" "
|-FunctionDecl 0x559b74b5ac58 <line:3712:1, col:39> col:5 k_msgq_cleanup 'int (struct k_msgq *)'
| |-ParmVarDecl 0x559b74b5ab50 <col:20, col:35> col:35 msgq 'struct k_msgq *'
| `-FullComment 0x559b74c59f10 <line:3703:3, line:3710:33>
|   |-ParagraphComment 0x559b74c59be0 <line:3703:3>
|   | `-TextComment 0x559b74c59bb0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c59c00 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x559b74c59c60 <col:10, col:46>
|   |   `-TextComment 0x559b74c59c30 <col:10, col:46> Text=" Release allocated buffer for a queue"
|   |-ParagraphComment 0x559b74c59cb0 <line:3705:3, col:49>
|   | `-TextComment 0x559b74c59c80 <col:3, col:49> Text=" Releases memory allocated for the ring buffer."
|   |-ParagraphComment 0x559b74c59d00 <line:3707:3>
|   | `-TextComment 0x559b74c59cd0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c59d20 <col:4, col:39> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x559b74c59db0 <col:15, col:39>
|   |   `-TextComment 0x559b74c59d80 <col:15, col:39> Text=" message queue to cleanup"
|   `-ParagraphComment 0x559b74c59ec0 <line:3709:3, line:3710:33>
|     |-TextComment 0x559b74c59dd0 <line:3709:3> Text=" "
|     |-InlineCommandComment 0x559b74c59df0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x559b74c59e10 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x559b74c59e30 <line:3710:3> Text=" "
|     |-InlineCommandComment 0x559b74c59e50 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x559b74c59e70 <col:11, col:33> Text=" -EBUSY Queue not empty"
|-FunctionDecl 0x559b74b5af78 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3732:72> col:15 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x559b74b5ad50 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x559b74b5adc8 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x559b74b5ae38 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x559b74c5a750 <line:3715:3, line:3731:1>
|   |-ParagraphComment 0x559b74c59fb0 <line:3715:3>
|   | `-TextComment 0x559b74c59f80 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c59fd0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559b74c5a030 <col:10, col:44>
|   |   `-TextComment 0x559b74c5a000 <col:10, col:44> Text=" Send a message to a message queue."
|   |-ParagraphComment 0x559b74c5a0d0 <line:3717:3, col:51>
|   | |-TextComment 0x559b74c5a050 <col:3, col:49> Text=" This routine sends a message to message queue "
|   | `-InlineCommandComment 0x559b74c5a0a0 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="q."
|   |-ParagraphComment 0x559b74c5a120 <line:3719:3>
|   | `-TextComment 0x559b74c5a0f0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5a140 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c5a1a0 <col:9, col:31>
|   |   `-TextComment 0x559b74c5a170 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c5a1f0 <line:3721:3>
|   | `-TextComment 0x559b74c5a1c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c5a210 <col:4, line:3722:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x559b74c5a2c0 <line:3721:15, line:3722:3>
|   |   |-TextComment 0x559b74c5a270 <line:3721:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x559b74c5a290 <line:3722:3> Text=" "
|   |-ParamCommandComment 0x559b74c5a2e0 <col:4, line:3723:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x559b74c5a390 <line:3722:15, line:3723:3>
|   |   |-TextComment 0x559b74c5a340 <line:3722:15, col:38> Text=" Pointer to the message."
|   |   `-TextComment 0x559b74c5a360 <line:3723:3> Text=" "
|   |-ParamCommandComment 0x559b74c5a3b0 <col:4, line:3725:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x559b74c5a490 <line:3723:18, line:3725:28>
|   |   |-TextComment 0x559b74c5a410 <line:3723:18, col:68> Text=" Non-negative waiting period to add the message (in"
|   |   |-TextComment 0x559b74c5a430 <line:3724:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x559b74c5a450 <line:3725:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x559b74c5a640 <line:3727:3, line:3730:3>
|   | |-TextComment 0x559b74c5a4b0 <line:3727:3> Text=" "
|   | |-InlineCommandComment 0x559b74c5a4d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c5a4f0 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x559b74c5a510 <line:3728:3> Text=" "
|   | |-InlineCommandComment 0x559b74c5a530 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c5a550 <col:11, col:60> Text=" -ENOMSG Returned without waiting or queue purged."
|   | |-TextComment 0x559b74c5a570 <line:3729:3> Text=" "
|   | |-InlineCommandComment 0x559b74c5a590 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c5a5b0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x559b74c5a5d0 <line:3730:3> Text=" "
|   |-VerbatimLineComment 0x559b74c5a660 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x559b74c5a6d0 <line:3731:1>
|     `-TextComment 0x559b74c5a6a0 <col:1> Text=" "
|-FunctionDecl 0x559b74bae668 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3753:72> col:15 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x559b74bae4e0 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x559b74bae558 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x559b74bae5c8 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x559b74c5b070 <line:3735:3, line:3752:1>
|   |-ParagraphComment 0x559b74c5a7f0 <line:3735:3>
|   | `-TextComment 0x559b74c5a7c0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5a810 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c5a870 <col:10, col:49>
|   |   `-TextComment 0x559b74c5a840 <col:10, col:49> Text=" Receive a message from a message queue."
|   |-ParagraphComment 0x559b74c5a960 <line:3737:3, line:3738:21>
|   | |-TextComment 0x559b74c5a890 <line:3737:3, col:54> Text=" This routine receives a message from message queue "
|   | |-InlineCommandComment 0x559b74c5a8e0 <col:55, col:56> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x559b74c5a900 <col:59, col:74> Text=" in a "first in,"
|   | `-TextComment 0x559b74c5a920 <line:3738:3, col:21> Text=" first out" manner."
|   |-ParagraphComment 0x559b74c5a9b0 <line:3740:3>
|   | `-TextComment 0x559b74c5a980 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5a9d0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x559b74c5aac0 <col:9, col:72>
|   |   |-TextComment 0x559b74c5aa00 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x559b74c5aa60 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x559b74c5aa80 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x559b74c5ab10 <line:3742:3>
|   | `-TextComment 0x559b74c5aae0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c5ab30 <col:4, line:3743:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x559b74c5abe0 <line:3742:15, line:3743:3>
|   |   |-TextComment 0x559b74c5ab90 <line:3742:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x559b74c5abb0 <line:3743:3> Text=" "
|   |-ParamCommandComment 0x559b74c5ac00 <col:4, line:3744:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x559b74c5acb0 <line:3743:15, line:3744:3>
|   |   |-TextComment 0x559b74c5ac60 <line:3743:15, col:60> Text=" Address of area to hold the received message."
|   |   `-TextComment 0x559b74c5ac80 <line:3744:3> Text=" "
|   |-ParamCommandComment 0x559b74c5acd0 <col:4, line:3746:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x559b74c5adb0 <line:3744:18, line:3746:28>
|   |   |-TextComment 0x559b74c5ad30 <line:3744:18, col:72> Text=" Non-negative waiting period to receive the message (in"
|   |   |-TextComment 0x559b74c5ad50 <line:3745:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x559b74c5ad70 <line:3746:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x559b74c5af60 <line:3748:3, line:3751:3>
|   | |-TextComment 0x559b74c5add0 <line:3748:3> Text=" "
|   | |-InlineCommandComment 0x559b74c5adf0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c5ae10 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x559b74c5ae30 <line:3749:3> Text=" "
|   | |-InlineCommandComment 0x559b74c5ae50 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c5ae70 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x559b74c5ae90 <line:3750:3> Text=" "
|   | |-InlineCommandComment 0x559b74c5aeb0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c5aed0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x559b74c5aef0 <line:3751:3> Text=" "
|   |-VerbatimLineComment 0x559b74c5af80 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x559b74c5aff0 <line:3752:1>
|     `-TextComment 0x559b74c5afc0 <col:1> Text=" "
|-FunctionDecl 0x559b74bae908 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3770:58> col:15 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x559b74bae770 <col:27, col:42> col:42 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x559b74bae7e8 <col:48, col:54> col:54 data 'void *'
| `-FullComment 0x559b74c5b770 <line:3756:3, line:3769:1>
|   |-ParagraphComment 0x559b74c5b110 <line:3756:3>
|   | `-TextComment 0x559b74c5b0e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5b130 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x559b74c5b190 <col:10, col:51>
|   |   `-TextComment 0x559b74c5b160 <col:10, col:51> Text=" Peek/read a message from a message queue."
|   |-ParagraphComment 0x559b74c5b280 <line:3758:3, line:3759:57>
|   | |-TextComment 0x559b74c5b1b0 <line:3758:3, col:51> Text=" This routine reads a message from message queue "
|   | |-InlineCommandComment 0x559b74c5b200 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x559b74c5b220 <col:56, col:71> Text=" in a "first in,"
|   | `-TextComment 0x559b74c5b240 <line:3759:3, col:57> Text=" first out" manner and leaves the message in the queue."
|   |-ParagraphComment 0x559b74c5b2d0 <line:3761:3>
|   | `-TextComment 0x559b74c5b2a0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5b2f0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559b74c5b350 <col:9, col:31>
|   |   `-TextComment 0x559b74c5b320 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559b74c5b3a0 <line:3763:3>
|   | `-TextComment 0x559b74c5b370 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c5b3c0 <col:4, line:3764:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x559b74c5b470 <line:3763:15, line:3764:3>
|   |   |-TextComment 0x559b74c5b420 <line:3763:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x559b74c5b440 <line:3764:3> Text=" "
|   |-ParamCommandComment 0x559b74c5b490 <col:4, col:71> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x559b74c5b520 <col:15, col:71>
|   |   `-TextComment 0x559b74c5b4f0 <col:15, col:71> Text=" Address of area to hold the message read from the queue."
|   |-ParagraphComment 0x559b74c5b660 <line:3766:3, line:3768:3>
|   | |-TextComment 0x559b74c5b540 <line:3766:3> Text=" "
|   | |-InlineCommandComment 0x559b74c5b560 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c5b580 <col:11, col:26> Text=" 0 Message read."
|   | |-TextComment 0x559b74c5b5a0 <line:3767:3> Text=" "
|   | |-InlineCommandComment 0x559b74c5b5c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c5b5e0 <col:11, col:58> Text=" -ENOMSG Returned when the queue has no message."
|   | `-TextComment 0x559b74c5b600 <line:3768:3> Text=" "
|   |-VerbatimLineComment 0x559b74c5b680 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x559b74c5b6f0 <line:3769:1>
|     `-TextComment 0x559b74c5b6c0 <col:1> Text=" "
|-FunctionDecl 0x559b74baeb10 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3784:48> col:16 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x559b74baea10 <col:29, col:44> col:44 msgq 'struct k_msgq *'
| `-FullComment 0x559b74c5bc20 <line:3773:3, line:3783:1>
|   |-ParagraphComment 0x559b74c5b810 <line:3773:3>
|   | `-TextComment 0x559b74c5b7e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5b830 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x559b74c5b890 <col:10, col:32>
|   |   `-TextComment 0x559b74c5b860 <col:10, col:32> Text=" Purge a message queue."
|   |-ParagraphComment 0x559b74c5b930 <line:3775:3, line:3777:61>
|   | |-TextComment 0x559b74c5b8b0 <line:3775:3, col:74> Text=" This routine discards all unreceived messages in a message queue's ring"
|   | |-TextComment 0x559b74c5b8d0 <line:3776:3, col:72> Text=" buffer. Any threads that are blocked waiting to send a message to the"
|   | `-TextComment 0x559b74c5b8f0 <line:3777:3, col:61> Text=" message queue are unblocked and see an -ENOMSG error code."
|   |-ParagraphComment 0x559b74c5b980 <line:3779:3>
|   | `-TextComment 0x559b74c5b950 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c5b9a0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x559b74c5ba30 <col:15, col:44>
|   |   `-TextComment 0x559b74c5ba00 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x559b74c5ba80 <line:3781:3>
|   | `-TextComment 0x559b74c5ba50 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5baa0 <col:4, line:3782:3> Name="return"
|   | `-ParagraphComment 0x559b74c5bb20 <line:3781:11, line:3782:3>
|   |   |-TextComment 0x559b74c5bad0 <line:3781:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c5baf0 <line:3782:3> Text=" "
|   |-VerbatimLineComment 0x559b74c5bb40 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x559b74c5bbb0 <line:3783:1>
|     `-TextComment 0x559b74c5bb80 <col:1> Text=" "
|-FunctionDecl 0x559b74baed10 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3797:56> col:17 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x559b74baec10 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x559b74c5c0a0 <line:3787:3, line:3796:1>
|   |-ParagraphComment 0x559b74c5bcc0 <line:3787:3>
|   | `-TextComment 0x559b74c5bc90 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5bce0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x559b74c5bd40 <col:10, col:58>
|   |   `-TextComment 0x559b74c5bd10 <col:10, col:58> Text=" Get the amount of free space in a message queue."
|   |-ParagraphComment 0x559b74c5bdb0 <line:3789:3, line:3790:15>
|   | |-TextComment 0x559b74c5bd60 <line:3789:3, col:73> Text=" This routine returns the number of unused entries in a message queue's"
|   | `-TextComment 0x559b74c5bd80 <line:3790:3, col:15> Text=" ring buffer."
|   |-ParagraphComment 0x559b74c5be00 <line:3792:3>
|   | `-TextComment 0x559b74c5bdd0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c5be20 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x559b74c5beb0 <col:15, col:44>
|   |   `-TextComment 0x559b74c5be80 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x559b74c5bf00 <line:3794:3>
|   | `-TextComment 0x559b74c5bed0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5bf20 <col:4, line:3795:3> Name="return"
|   | `-ParagraphComment 0x559b74c5bfa0 <line:3794:11, line:3795:3>
|   |   |-TextComment 0x559b74c5bf50 <line:3794:11, col:48> Text=" Number of unused ring buffer entries."
|   |   `-TextComment 0x559b74c5bf70 <line:3795:3> Text=" "
|   |-VerbatimLineComment 0x559b74c5bfc0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x559b74c5c030 <line:3796:1>
|     `-TextComment 0x559b74c5c000 <col:1> Text=" "
|-FunctionDecl 0x559b74baf030 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3811:32> line:3810:17 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x559b74baee10 <col:34, col:49> col:49 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x559b74baef20 <line:3811:6, col:27> col:27 attrs 'struct k_msgq_attrs *'
| `-FullComment 0x559b74c5c5d0 <line:3800:3, line:3809:1>
|   |-ParagraphComment 0x559b74c5c140 <line:3800:3>
|   | `-TextComment 0x559b74c5c110 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5c160 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x559b74c5c1c0 <col:10, col:50>
|   |   `-TextComment 0x559b74c5c190 <col:10, col:50> Text=" Get basic attributes of a message queue."
|   |-ParagraphComment 0x559b74c5c210 <line:3802:3, col:77>
|   | `-TextComment 0x559b74c5c1e0 <col:3, col:77> Text=" This routine fetches basic attributes of message queue into attr argument."
|   |-ParagraphComment 0x559b74c5c260 <line:3804:3>
|   | `-TextComment 0x559b74c5c230 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c5c280 <col:4, line:3805:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x559b74c5c330 <line:3804:15, line:3805:3>
|   |   |-TextComment 0x559b74c5c2e0 <line:3804:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x559b74c5c300 <line:3805:3> Text=" "
|   |-ParamCommandComment 0x559b74c5c350 <col:4, col:61> [in] implicitly Param="attrs" ParamIndex=1
|   | `-ParagraphComment 0x559b74c5c3e0 <col:16, col:61>
|   |   `-TextComment 0x559b74c5c3b0 <col:16, col:61> Text=" pointer to message queue attribute structure."
|   |-ParagraphComment 0x559b74c5c430 <line:3807:3>
|   | `-TextComment 0x559b74c5c400 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5c450 <col:4, line:3808:3> Name="return"
|   | `-ParagraphComment 0x559b74c5c4d0 <line:3807:11, line:3808:3>
|   |   |-TextComment 0x559b74c5c480 <line:3807:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c5c4a0 <line:3808:3> Text=" "
|   |-VerbatimLineComment 0x559b74c5c4f0 <col:4, col:19> Text=" K-MSGQ-003"
|   `-ParagraphComment 0x559b74c5c560 <line:3809:1>
|     `-TextComment 0x559b74c5c530 <col:1> Text=" "
|-FunctionDecl 0x559b74baf190 <line:3814:1, line:3817:1> line:3814:21 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x559b74baf108 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x559b74baf3c8 <line:3815:1, line:3817:1>
|   `-ReturnStmt 0x559b74baf380 <line:3816:2, col:32>
|     `-BinaryOperator 0x559b74baf358 <col:9, col:32> 'unsigned int' '-'
|       |-ImplicitCastExpr 0x559b74baf328 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-MemberExpr 0x559b74baf278 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->max_msgs 0x559b74baa8d8
|       |   `-ImplicitCastExpr 0x559b74baf260 <col:9> 'struct k_msgq *' <LValueToRValue>
|       |     `-DeclRefExpr 0x559b74baf238 <col:9> 'struct k_msgq *' lvalue ParmVar 0x559b74baf108 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x559b74baf340 <col:26, col:32> 'u32_t':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x559b74baf2f0 <col:26, col:32> 'u32_t':'unsigned int' lvalue ->used_msgs 0x559b74baab98
|           `-ImplicitCastExpr 0x559b74baf2d8 <col:26> 'struct k_msgq *' <LValueToRValue>
|             `-DeclRefExpr 0x559b74baf2b0 <col:26> 'struct k_msgq *' lvalue ParmVar 0x559b74baf108 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x559b74baf910 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3829:56> col:17 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x559b74baf408 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x559b74c5ca40 <line:3820:3, line:3828:1>
|   |-ParagraphComment 0x559b74c5c670 <line:3820:3>
|   | `-TextComment 0x559b74c5c640 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5c690 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x559b74c5c6f0 <col:10, col:56>
|   |   `-TextComment 0x559b74c5c6c0 <col:10, col:56> Text=" Get the number of messages in a message queue."
|   |-ParagraphComment 0x559b74c5c740 <line:3822:3, col:80>
|   | `-TextComment 0x559b74c5c710 <col:3, col:80> Text=" This routine returns the number of messages in a message queue's ring buffer."
|   |-ParagraphComment 0x559b74c5c790 <line:3824:3>
|   | `-TextComment 0x559b74c5c760 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c5c7b0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x559b74c5c840 <col:15, col:44>
|   |   `-TextComment 0x559b74c5c810 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x559b74c5c890 <line:3826:3>
|   | `-TextComment 0x559b74c5c860 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5c8b0 <col:4, line:3827:3> Name="return"
|   | `-ParagraphComment 0x559b74c5c930 <line:3826:11, line:3827:3>
|   |   |-TextComment 0x559b74c5c8e0 <line:3826:11, col:30> Text=" Number of messages."
|   |   `-TextComment 0x559b74c5c900 <line:3827:3> Text=" "
|   |-VerbatimLineComment 0x559b74c5c950 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x559b74c5c9c0 <line:3828:1>
|     `-TextComment 0x559b74c5c990 <col:1> Text=" "
|-FunctionDecl 0x559b74bafa68 <line:3831:1, line:3834:1> line:3831:21 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x559b74baf9e0 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x559b74bafc18 <line:3832:1, line:3834:1>
|   `-ReturnStmt 0x559b74bafba0 <line:3833:2, col:15>
|     `-ImplicitCastExpr 0x559b74bafb88 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x559b74bafb50 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->used_msgs 0x559b74baab98
|         `-ImplicitCastExpr 0x559b74bafb38 <col:9> 'struct k_msgq *' <LValueToRValue>
|           `-DeclRefExpr 0x559b74bafb10 <col:9> 'struct k_msgq *' lvalue ParmVar 0x559b74baf9e0 'msgq' 'struct k_msgq *'
|-RecordDecl 0x559b74bafc30 <line:3849:1, line:3853:1> line:3849:8 struct k_mem_block_id definition
| |-FullComment 0x559b74c5cca0 <line:3839:3, line:3841:5>
| | |-ParagraphComment 0x559b74c5cae0 <line:3839:3>
| | | `-TextComment 0x559b74c5cab0 <col:3> Text=" "
| | |-VerbatimLineComment 0x559b74c5cb00 <col:4, col:44> Text=" mem_pool_apis Memory Pool APIs"
| | |-ParagraphComment 0x559b74c5cb70 <line:3840:3>
| | | `-TextComment 0x559b74c5cb40 <col:3> Text=" "
| | |-VerbatimLineComment 0x559b74c5cb90 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x559b74c5cc50 <line:3841:3, col:5>
| |   |-TextComment 0x559b74c5cbd0 <col:3> Text=" "
| |   |-TextComment 0x559b74c5cbf0 <col:4> Text="@"
| |   `-TextComment 0x559b74c5cc10 <col:5> Text="{"
| |-FieldDecl 0x559b74bafd10 <line:3850:2, col:15> col:8 pool 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x559b74bafce0 <col:15> 'int' 8
| |-FieldDecl 0x559b74bafd88 <line:3851:2, col:16> col:8 level 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x559b74bafd58 <col:16> 'int' 4
| `-FieldDecl 0x559b74bafe00 <line:3852:2, col:16> col:8 block 'u32_t':'unsigned int'
|   `-IntegerLiteral 0x559b74bafdd0 <col:16> 'int' 20
|-RecordDecl 0x559b74bafe48 <line:3855:1, line:3858:1> line:3855:8 struct k_mem_block definition
| |-FieldDecl 0x559b74baff08 <line:3856:2, col:8> col:8 data 'void *'
| `-FieldDecl 0x559b74baffa0 <line:3857:2, col:24> col:24 id 'struct k_mem_block_id':'struct k_mem_block_id'
|-RecordDecl 0x559b74bb0078 <line:3872:1, line:3895:1> line:3872:8 struct k_mbox_msg definition
| |-FullComment 0x559b74c5ce50 <line:3869:3, line:3871:1>
| | |-ParagraphComment 0x559b74c5cd40 <line:3869:3>
| | | `-TextComment 0x559b74c5cd10 <col:3> Text=" "
| | |-BlockCommandComment 0x559b74c5cd60 <col:4, col:35> Name="brief"
| | | `-ParagraphComment 0x559b74c5cdc0 <col:10, col:35>
| | |   `-TextComment 0x559b74c5cd90 <col:10, col:35> Text=" Mailbox Message Structure"
| | `-ParagraphComment 0x559b74c5ce10 <line:3871:1>
| |   `-TextComment 0x559b74c5cde0 <col:1> Text=" "
| |-FieldDecl 0x559b74bb0158 <line:3874:2, col:8> col:8 _mailbox 'u32_t':'unsigned int'
| | `-FullComment 0x559b74c5cf20 <line:3873:5, col:55>
| |   `-ParagraphComment 0x559b74c5cef0 <col:5, col:55>
| |     `-TextComment 0x559b74c5cec0 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x559b74bb01d8 <line:3876:2, col:9> col:9 size 'size_t':'unsigned long'
| | `-FullComment 0x559b74c5cff0 <line:3875:5, col:32>
| |   `-ParagraphComment 0x559b74c5cfc0 <col:5, col:32>
| |     `-TextComment 0x559b74c5cf90 <col:5, col:32> Text=" size of message (in bytes) "
| |-FieldDecl 0x559b74bb0258 <line:3878:2, col:8> col:8 info 'u32_t':'unsigned int'
| | `-FullComment 0x559b74c5d0c0 <line:3877:5, col:43>
| |   `-ParagraphComment 0x559b74c5d090 <col:5, col:43>
| |     `-TextComment 0x559b74c5d060 <col:5, col:43> Text=" application-defined information value "
| |-FieldDecl 0x559b74bb02e0 <line:3880:2, col:8> col:8 tx_data 'void *'
| | `-FullComment 0x559b74c5d190 <line:3879:5, col:34>
| |   `-ParagraphComment 0x559b74c5d160 <col:5, col:34>
| |     `-TextComment 0x559b74c5d130 <col:5, col:34> Text=" sender's message data buffer "
| |-FieldDecl 0x559b74bb0370 <line:3882:2, col:8> col:8 _rx_data 'void *'
| | `-FullComment 0x559b74c5d260 <line:3881:5, col:55>
| |   `-ParagraphComment 0x559b74c5d230 <col:5, col:55>
| |     `-TextComment 0x559b74c5d200 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x559b74bb0440 <line:3884:2, col:21> col:21 tx_block 'struct k_mem_block':'struct k_mem_block'
| | `-FullComment 0x559b74c5d330 <line:3883:5, col:35>
| |   `-ParagraphComment 0x559b74c5d300 <col:5, col:35>
| |     `-TextComment 0x559b74c5d2d0 <col:5, col:35> Text=" message data block descriptor "
| |-FieldDecl 0x559b74bb04c8 <line:3886:2, col:10> col:10 rx_source_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x559b74c5d400 <line:3885:5, col:22>
| |   `-ParagraphComment 0x559b74c5d3d0 <col:5, col:22>
| |     `-TextComment 0x559b74c5d3a0 <col:5, col:22> Text=" source thread id "
| |-FieldDecl 0x559b74bb0548 <line:3888:2, col:10> col:10 tx_target_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x559b74c5d4d0 <line:3887:5, col:22>
| |   `-ParagraphComment 0x559b74c5d4a0 <col:5, col:22>
| |     `-TextComment 0x559b74c5d470 <col:5, col:22> Text=" target thread id "
| `-FieldDecl 0x559b74bb05c8 <line:3890:2, col:10> col:10 _syncing_thread 'k_tid_t':'struct k_thread *'
|   `-FullComment 0x559b74c5d5a0 <line:3889:5, col:65>
|     `-ParagraphComment 0x559b74c5d570 <col:5, col:65>
|       `-TextComment 0x559b74c5d540 <col:5, col:65> Text=" internal use only - thread waiting on send (may be a dummy) "
|-RecordDecl 0x559b74bb0638 prev 0x559b74b72ea0 <line:3900:1, line:3909:1> line:3900:8 struct k_mbox definition
| |-FullComment 0x559b74c5d750 <line:3897:3, line:3899:1>
| | |-ParagraphComment 0x559b74c5d640 <line:3897:3>
| | | `-TextComment 0x559b74c5d610 <col:3> Text=" "
| | |-BlockCommandComment 0x559b74c5d660 <col:4, col:27> Name="brief"
| | | `-ParagraphComment 0x559b74c5d6c0 <col:10, col:27>
| | |   `-TextComment 0x559b74c5d690 <col:10, col:27> Text=" Mailbox Structure"
| | `-ParagraphComment 0x559b74c5d710 <line:3899:1>
| |   `-TextComment 0x559b74c5d6e0 <col:1> Text=" "
| |-FieldDecl 0x559b74bb06f8 <line:3902:2, col:12> col:12 tx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x559b74c5d820 <line:3901:5, col:29>
| |   `-ParagraphComment 0x559b74c5d7f0 <col:5, col:29>
| |     `-TextComment 0x559b74c5d7c0 <col:5, col:29> Text=" Transmit messages queue "
| |-FieldDecl 0x559b74bb0778 <line:3904:2, col:12> col:12 rx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x559b74c5d8f0 <line:3903:5, col:27>
| |   `-ParagraphComment 0x559b74c5d8c0 <col:5, col:27>
| |     `-TextComment 0x559b74c5d890 <col:5, col:27> Text=" Receive message queue "
| `-FieldDecl 0x559b74bb07e0 <line:3905:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
|-FunctionDecl 0x559b74bb1fd0 <line:3951:1, col:44> col:13 k_mbox_init 'void (struct k_mbox *)' extern
| |-ParmVarDecl 0x559b74bb1ed0 <col:25, col:40> col:40 mbox 'struct k_mbox *'
| `-FullComment 0x559b74c5dd50 <line:3942:3, line:3950:1>
|   |-ParagraphComment 0x559b74c5d990 <line:3942:3>
|   | `-TextComment 0x559b74c5d960 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5d9b0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x559b74c5da10 <col:10, col:31>
|   |   `-TextComment 0x559b74c5d9e0 <col:10, col:31> Text=" Initialize a mailbox."
|   |-ParagraphComment 0x559b74c5da60 <line:3944:3, col:69>
|   | `-TextComment 0x559b74c5da30 <col:3, col:69> Text=" This routine initializes a mailbox object, prior to its first use."
|   |-ParagraphComment 0x559b74c5dab0 <line:3946:3>
|   | `-TextComment 0x559b74c5da80 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c5dad0 <col:4, col:38> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x559b74c5db60 <col:15, col:38>
|   |   `-TextComment 0x559b74c5db30 <col:15, col:38> Text=" Address of the mailbox."
|   |-ParagraphComment 0x559b74c5dbb0 <line:3948:3>
|   | `-TextComment 0x559b74c5db80 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5dbd0 <col:4, line:3949:3> Name="return"
|   | `-ParagraphComment 0x559b74c5dc50 <line:3948:11, line:3949:3>
|   |   |-TextComment 0x559b74c5dc00 <line:3948:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c5dc20 <line:3949:3> Text=" "
|   |-VerbatimLineComment 0x559b74c5dc70 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x559b74c5dce0 <line:3950:1>
|     `-TextComment 0x559b74c5dcb0 <col:1> Text=" "
|-FunctionDecl 0x559b74bb2388 <line:3973:1, line:3974:22> line:3973:12 k_mbox_put 'int (struct k_mbox *, struct k_mbox_msg *, s32_t)' extern
| |-ParmVarDecl 0x559b74bb20d0 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x559b74bb21e0 <col:44, col:63> col:63 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x559b74bb2250 <line:3974:9, col:15> col:15 timeout 's32_t':'int'
| `-FullComment 0x559b74c5e580 <line:3954:3, line:3972:1>
|   |-ParagraphComment 0x559b74c5ddf0 <line:3954:3>
|   | `-TextComment 0x559b74c5ddc0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5de10 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x559b74c5de70 <col:10, col:57>
|   |   `-TextComment 0x559b74c5de40 <col:10, col:57> Text=" Send a mailbox message in a synchronous manner."
|   |-ParagraphComment 0x559b74c5df90 <line:3956:3, line:3958:55>
|   | |-TextComment 0x559b74c5de90 <line:3956:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x559b74c5dee0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x559b74c5df00 <col:43, col:75> Text=" and waits for a receiver to both"
|   | |-TextComment 0x559b74c5df20 <line:3957:3, col:75> Text=" receive and process it. The message data may be in a buffer, in a memory"
|   | `-TextComment 0x559b74c5df40 <line:3958:3, col:55> Text=" pool block, or non-existent (i.e. an empty message)."
|   |-ParagraphComment 0x559b74c5dfe0 <line:3960:3>
|   | `-TextComment 0x559b74c5dfb0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c5e000 <col:4, line:3961:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x559b74c5e0b0 <line:3960:15, line:3961:3>
|   |   |-TextComment 0x559b74c5e060 <line:3960:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x559b74c5e080 <line:3961:3> Text=" "
|   |-ParamCommandComment 0x559b74c5e0d0 <col:4, line:3962:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x559b74c5e180 <line:3961:17, line:3962:3>
|   |   |-TextComment 0x559b74c5e130 <line:3961:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x559b74c5e150 <line:3962:3> Text=" "
|   |-ParamCommandComment 0x559b74c5e1a0 <col:4, line:3966:45> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x559b74c5e2d0 <line:3962:18, line:3966:45>
|   |   |-TextComment 0x559b74c5e200 <line:3962:18, col:80> Text=" Non-negative waiting period for the message to be received (in"
|   |   |-TextComment 0x559b74c5e220 <line:3963:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   |-TextComment 0x559b74c5e240 <line:3964:3, col:68> Text="                and K_FOREVER. Once the message has been received,"
|   |   |-TextComment 0x559b74c5e260 <line:3965:3, col:73> Text="                this routine waits as long as necessary for the message"
|   |   `-TextComment 0x559b74c5e280 <line:3966:3, col:45> Text="                to be completely processed."
|   |-ParagraphComment 0x559b74c5e480 <line:3968:3, line:3971:3>
|   | |-TextComment 0x559b74c5e2f0 <line:3968:3> Text=" "
|   | |-InlineCommandComment 0x559b74c5e310 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c5e330 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x559b74c5e350 <line:3969:3> Text=" "
|   | |-InlineCommandComment 0x559b74c5e370 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c5e390 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x559b74c5e3b0 <line:3970:3> Text=" "
|   | |-InlineCommandComment 0x559b74c5e3d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c5e3f0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x559b74c5e410 <line:3971:3> Text=" "
|   |-VerbatimLineComment 0x559b74c5e4a0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x559b74c5e510 <line:3972:1>
|     `-TextComment 0x559b74c5e4e0 <col:1> Text=" "
|-FunctionDecl 0x559b74bb26d0 <line:3992:1, line:3993:26> line:3992:13 k_mbox_async_put 'void (struct k_mbox *, struct k_mbox_msg *, struct k_sem *)' extern
| |-ParmVarDecl 0x559b74bb2490 <col:30, col:45> col:45 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x559b74bb2518 <col:51, col:70> col:70 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x559b74bb25a0 <line:3993:9, col:23> col:23 sem 'struct k_sem *'
| `-FullComment 0x559b74c5ed10 <line:3977:3, line:3991:1>
|   |-ParagraphComment 0x559b74c5e620 <line:3977:3>
|   | `-TextComment 0x559b74c5e5f0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5e640 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x559b74c5e6a0 <col:10, col:59>
|   |   `-TextComment 0x559b74c5e670 <col:10, col:59> Text=" Send a mailbox message in an asynchronous manner."
|   |-ParagraphComment 0x559b74c5e860 <line:3979:3, line:3983:29>
|   | |-TextComment 0x559b74c5e6c0 <line:3979:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x559b74c5e710 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x559b74c5e730 <col:43, col:73> Text=" without waiting for a receiver"
|   | |-TextComment 0x559b74c5e750 <line:3980:3, col:78> Text=" to process it. The message data may be in a buffer, in a memory pool block,"
|   | |-TextComment 0x559b74c5e770 <line:3981:3, col:70> Text=" or non-existent (i.e. an empty message). Optionally, the semaphore "
|   | |-InlineCommandComment 0x559b74c5e7c0 <col:71, col:72> Name="a" RenderEmphasized Arg[0]="sem"
|   | |-TextComment 0x559b74c5e7e0 <line:3982:3, col:71> Text=" will be given when the message has been both received and completely"
|   | `-TextComment 0x559b74c5e800 <line:3983:3, col:29> Text=" processed by the receiver."
|   |-ParagraphComment 0x559b74c5e8b0 <line:3985:3>
|   | `-TextComment 0x559b74c5e880 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c5e8d0 <col:4, line:3986:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x559b74c5e980 <line:3985:15, line:3986:3>
|   |   |-TextComment 0x559b74c5e930 <line:3985:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x559b74c5e950 <line:3986:3> Text=" "
|   |-ParamCommandComment 0x559b74c5e9a0 <col:4, line:3987:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x559b74c5ea60 <line:3986:17, line:3987:3>
|   |   |-TextComment 0x559b74c5ea00 <line:3986:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x559b74c5ea20 <line:3987:3> Text=" "
|   |-ParamCommandComment 0x559b74c5ea80 <col:4, col:64> [in] implicitly Param="sem" ParamIndex=2
|   | `-ParagraphComment 0x559b74c5eb10 <col:14, col:64>
|   |   `-TextComment 0x559b74c5eae0 <col:14, col:64> Text=" Address of a semaphore, or NULL if none is needed."
|   |-ParagraphComment 0x559b74c5eb60 <line:3989:3>
|   | `-TextComment 0x559b74c5eb30 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5eb80 <col:4, line:3990:3> Name="return"
|   | `-ParagraphComment 0x559b74c5ec00 <line:3989:11, line:3990:3>
|   |   |-TextComment 0x559b74c5ebb0 <line:3989:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c5ebd0 <line:3990:3> Text=" "
|   |-VerbatimLineComment 0x559b74c5ec20 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x559b74c5ec90 <line:3991:1>
|     `-TextComment 0x559b74c5ec60 <col:1> Text=" "
|-FunctionDecl 0x559b74bb2a98 <line:4014:1, line:4015:36> line:4014:12 k_mbox_get 'int (struct k_mbox *, struct k_mbox_msg *, void *, s32_t)' extern
| |-ParmVarDecl 0x559b74bb27e0 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x559b74bb2868 <col:44, col:63> col:63 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x559b74bb28e0 <line:4015:9, col:15> col:15 buffer 'void *'
| |-ParmVarDecl 0x559b74bb2950 <col:23, col:29> col:29 timeout 's32_t':'int'
| `-FullComment 0x559b74c5f5d0 <line:3996:3, line:4013:1>
|   |-ParagraphComment 0x559b74c5edb0 <line:3996:3>
|   | `-TextComment 0x559b74c5ed80 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5edd0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x559b74c5ee30 <col:10, col:36>
|   |   `-TextComment 0x559b74c5ee00 <col:10, col:36> Text=" Receive a mailbox message."
|   |-ParagraphComment 0x559b74c5ef20 <line:3998:3, line:3999:40>
|   | |-TextComment 0x559b74c5ee50 <line:3998:3, col:40> Text=" This routine receives a message from "
|   | |-InlineCommandComment 0x559b74c5eea0 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="mbox,"
|   | |-TextComment 0x559b74c5eec0 <col:49, col:74> Text=" then optionally retrieves"
|   | `-TextComment 0x559b74c5eee0 <line:3999:3, col:40> Text=" its data and disposes of the message."
|   |-ParagraphComment 0x559b74c5ef70 <line:4001:3>
|   | `-TextComment 0x559b74c5ef40 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c5ef90 <col:4, line:4002:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x559b74c5f040 <line:4001:15, line:4002:3>
|   |   |-TextComment 0x559b74c5eff0 <line:4001:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x559b74c5f010 <line:4002:3> Text=" "
|   |-ParamCommandComment 0x559b74c5f060 <col:4, line:4003:3> [in] implicitly Param="rx_msg" ParamIndex=1
|   | `-ParagraphComment 0x559b74c5f110 <line:4002:17, line:4003:3>
|   |   |-TextComment 0x559b74c5f0c0 <line:4002:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x559b74c5f0e0 <line:4003:3> Text=" "
|   |-ParamCommandComment 0x559b74c5f130 <col:4, line:4005:3> [in] implicitly Param="buffer" ParamIndex=2
|   | `-ParagraphComment 0x559b74c5f210 <line:4003:17, line:4005:3>
|   |   |-TextComment 0x559b74c5f190 <line:4003:17, col:77> Text=" Address of the buffer to receive data, or NULL to defer data"
|   |   |-TextComment 0x559b74c5f1b0 <line:4004:3, col:60> Text="               retrieval and message disposal until later."
|   |   `-TextComment 0x559b74c5f1d0 <line:4005:3> Text=" "
|   |-ParamCommandComment 0x559b74c5f230 <col:4, line:4007:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x559b74c5f310 <line:4005:18, line:4007:32>
|   |   |-TextComment 0x559b74c5f290 <line:4005:18, col:78> Text=" Non-negative waiting period for a message to be received (in"
|   |   |-TextComment 0x559b74c5f2b0 <line:4006:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x559b74c5f2d0 <line:4007:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x559b74c5f4c0 <line:4009:3, line:4012:3>
|   | |-TextComment 0x559b74c5f330 <line:4009:3> Text=" "
|   | |-InlineCommandComment 0x559b74c5f350 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c5f370 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x559b74c5f390 <line:4010:3> Text=" "
|   | |-InlineCommandComment 0x559b74c5f3b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c5f3d0 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x559b74c5f3f0 <line:4011:3> Text=" "
|   | |-InlineCommandComment 0x559b74c5f410 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c5f430 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x559b74c5f450 <line:4012:3> Text=" "
|   |-VerbatimLineComment 0x559b74c5f4e0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x559b74c5f550 <line:4013:1>
|     `-TextComment 0x559b74c5f520 <col:1> Text=" "
|-FunctionDecl 0x559b74bb2d40 <line:4033:1, col:68> col:13 k_mbox_data_get 'void (struct k_mbox_msg *, void *)' extern
| |-ParmVarDecl 0x559b74bb2bb0 <col:29, col:48> col:48 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x559b74bb2c28 <col:56, col:62> col:62 buffer 'void *'
| `-FullComment 0x559b74c5fbc0 <line:4018:3, line:4032:1>
|   |-ParagraphComment 0x559b74c5f670 <line:4018:3>
|   | `-TextComment 0x559b74c5f640 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5f690 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x559b74c5f6f0 <col:10, col:54>
|   |   `-TextComment 0x559b74c5f6c0 <col:10, col:54> Text=" Retrieve mailbox message data into a buffer."
|   |-ParagraphComment 0x559b74c5f760 <line:4020:3, line:4021:57>
|   | |-TextComment 0x559b74c5f710 <line:4020:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | `-TextComment 0x559b74c5f730 <line:4021:3, col:57> Text=" its data into a buffer, then disposing of the message."
|   |-ParagraphComment 0x559b74c5f7d0 <line:4023:3, line:4024:31>
|   | |-TextComment 0x559b74c5f780 <line:4023:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | `-TextComment 0x559b74c5f7a0 <line:4024:3, col:31> Text=" without retrieving its data."
|   |-ParagraphComment 0x559b74c5f820 <line:4026:3>
|   | `-TextComment 0x559b74c5f7f0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c5f840 <col:4, line:4027:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x559b74c5f8f0 <line:4026:17, line:4027:3>
|   |   |-TextComment 0x559b74c5f8a0 <line:4026:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x559b74c5f8c0 <line:4027:3> Text=" "
|   |-ParamCommandComment 0x559b74c5f910 <col:4, line:4028:26> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x559b74c5f9c0 <line:4027:17, line:4028:26>
|   |   |-TextComment 0x559b74c5f970 <line:4027:17, col:74> Text=" Address of the buffer to receive data, or NULL to discard"
|   |   `-TextComment 0x559b74c5f990 <line:4028:3, col:26> Text="               the data."
|   |-ParagraphComment 0x559b74c5fa10 <line:4030:3>
|   | `-TextComment 0x559b74c5f9e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5fa30 <col:4, line:4031:3> Name="return"
|   | `-ParagraphComment 0x559b74c5fab0 <line:4030:11, line:4031:3>
|   |   |-TextComment 0x559b74c5fa60 <line:4030:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c5fa80 <line:4031:3> Text=" "
|   |-VerbatimLineComment 0x559b74c5fad0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x559b74c5fb40 <line:4032:1>
|     `-TextComment 0x559b74c5fb10 <col:1> Text=" "
|-FunctionDecl 0x559b74bb3178 <line:4066:1, line:4068:46> line:4066:12 k_mbox_data_block_get 'int (struct k_mbox_msg *, struct k_mem_pool *, struct k_mem_block *, s32_t)' extern
| |-ParmVarDecl 0x559b74bb2e58 <col:34, col:53> col:53 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x559b74bb2ee0 <line:4067:6, col:25> col:25 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x559b74bb2fc0 <line:4068:6, col:26> col:26 block 'struct k_mem_block *'
| |-ParmVarDecl 0x559b74bb3030 <col:33, col:39> col:39 timeout 's32_t':'int'
| `-FullComment 0x559b74c605f0 <line:4036:3, line:4065:1>
|   |-ParagraphComment 0x559b74c5fc60 <line:4036:3>
|   | `-TextComment 0x559b74c5fc30 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c5fc80 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x559b74c5fce0 <col:10, col:65>
|   |   `-TextComment 0x559b74c5fcb0 <col:10, col:65> Text=" Retrieve mailbox message data into a memory pool block."
|   |-ParagraphComment 0x559b74c5fdd0 <line:4038:3, line:4042:42>
|   | |-TextComment 0x559b74c5fd00 <line:4038:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | |-TextComment 0x559b74c5fd20 <line:4039:3, col:68> Text=" its data into a memory pool block, then disposing of the message."
|   | |-TextComment 0x559b74c5fd40 <line:4040:3, col:71> Text=" The memory pool block that results from successful retrieval must be"
|   | |-TextComment 0x559b74c5fd60 <line:4041:3, col:71> Text=" returned to the pool once the data has been processed, even in cases"
|   | `-TextComment 0x559b74c5fd80 <line:4042:3, col:42> Text=" where zero bytes of data are retrieved."
|   |-ParagraphComment 0x559b74c5fe70 <line:4044:3, line:4046:33>
|   | |-TextComment 0x559b74c5fdf0 <line:4044:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | |-TextComment 0x559b74c5fe10 <line:4045:3, col:73> Text=" without retrieving its data. In this case there is no need to return a"
|   | `-TextComment 0x559b74c5fe30 <line:4046:3, col:33> Text=" memory pool block to the pool."
|   |-ParagraphComment 0x559b74c5ff60 <line:4048:3, line:4052:55>
|   | |-TextComment 0x559b74c5fe90 <line:4048:3, col:74> Text=" This routine allocates a new memory pool block for the data only if the"
|   | |-TextComment 0x559b74c5feb0 <line:4049:3, col:78> Text=" data is not already in one. If a new block cannot be allocated, the routine"
|   | |-TextComment 0x559b74c5fed0 <line:4050:3, col:74> Text=" returns a failure code and the received message is left unchanged. This"
|   | |-TextComment 0x559b74c5fef0 <line:4051:3, col:79> Text=" permits the caller to reattempt data retrieval at a later time or to dispose"
|   | `-TextComment 0x559b74c5ff10 <line:4052:3, col:55> Text=" of the received message without retrieving its data."
|   |-ParagraphComment 0x559b74c5ffb0 <line:4054:3>
|   | `-TextComment 0x559b74c5ff80 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c5ffd0 <col:4, line:4055:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x559b74c60080 <line:4054:17, line:4055:3>
|   |   |-TextComment 0x559b74c60030 <line:4054:17, col:57> Text=" Address of a receive message descriptor."
|   |   `-TextComment 0x559b74c60050 <line:4055:3> Text=" "
|   |-ParamCommandComment 0x559b74c600a0 <col:4, line:4056:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x559b74c60150 <line:4055:15, line:4056:3>
|   |   |-TextComment 0x559b74c60100 <line:4055:15, col:63> Text=" Address of memory pool, or NULL to discard data."
|   |   `-TextComment 0x559b74c60120 <line:4056:3> Text=" "
|   |-ParamCommandComment 0x559b74c60170 <col:4, line:4057:3> [in] implicitly Param="block" ParamIndex=2
|   | `-ParagraphComment 0x559b74c60220 <line:4056:16, line:4057:3>
|   |   |-TextComment 0x559b74c601d0 <line:4056:16, col:67> Text=" Address of the area to hold memory pool block info."
|   |   `-TextComment 0x559b74c601f0 <line:4057:3> Text=" "
|   |-ParamCommandComment 0x559b74c60240 <col:4, line:4059:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x559b74c60320 <line:4057:18, line:4059:32>
|   |   |-TextComment 0x559b74c602a0 <line:4057:18, col:77> Text=" Non-negative waiting period to wait for a memory pool block"
|   |   |-TextComment 0x559b74c602c0 <line:4058:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x559b74c602e0 <line:4059:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x559b74c604d0 <line:4061:3, line:4064:3>
|   | |-TextComment 0x559b74c60340 <line:4061:3> Text=" "
|   | |-InlineCommandComment 0x559b74c60360 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c60380 <col:11, col:28> Text=" 0 Data retrieved."
|   | |-TextComment 0x559b74c603a0 <line:4062:3> Text=" "
|   | |-InlineCommandComment 0x559b74c603c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c603e0 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x559b74c60400 <line:4063:3> Text=" "
|   | |-InlineCommandComment 0x559b74c60420 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c60440 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x559b74c60460 <line:4064:3> Text=" "
|   |-VerbatimLineComment 0x559b74c604f0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x559b74c60560 <line:4065:1>
|     `-TextComment 0x559b74c60530 <col:1> Text=" "
|-RecordDecl 0x559b74bb32c8 prev 0x559b74b72f50 <line:4079:1, line:4095:1> line:4079:8 struct k_pipe definition
| |-FullComment 0x559b74c606c0 <line:4078:4, col:19>
| | `-ParagraphComment 0x559b74c60690 <col:4, col:19>
| |   `-TextComment 0x559b74c60660 <col:4, col:19> Text=" Pipe Structure "
| |-FieldDecl 0x559b74bb3368 <line:4080:2, col:17> col:17 buffer 'unsigned char *'
| | `-FullComment 0x559b74c60790 <col:38, col:63>
| |   `-ParagraphComment 0x559b74c60760 <col:38, col:63>
| |     `-TextComment 0x559b74c60730 <col:38, col:63> Text=" Pipe buffer: may be NULL "
| |-FieldDecl 0x559b74bb33e8 <line:4081:2, col:17> col:17 size 'size_t':'unsigned long'
| | `-FullComment 0x559b74c60860 <col:38, col:50>
| |   `-ParagraphComment 0x559b74c60830 <col:38, col:50>
| |     `-TextComment 0x559b74c60800 <col:38, col:50> Text=" Buffer size "
| |-FieldDecl 0x559b74bb3468 <line:4082:2, col:17> col:17 bytes_used 'size_t':'unsigned long'
| | `-FullComment 0x559b74c60930 <col:38, col:61>
| |   `-ParagraphComment 0x559b74c60900 <col:38, col:61>
| |     `-TextComment 0x559b74c608d0 <col:38, col:61> Text=" # bytes used in buffer "
| |-FieldDecl 0x559b74bb34e8 <line:4083:2, col:17> col:17 read_index 'size_t':'unsigned long'
| | `-FullComment 0x559b74c60a00 <col:38, col:67>
| |   `-ParagraphComment 0x559b74c609d0 <col:38, col:67>
| |     `-TextComment 0x559b74c609a0 <col:38, col:67> Text=" Where in buffer to read from "
| |-FieldDecl 0x559b74bb3568 <line:4084:2, col:17> col:17 write_index 'size_t':'unsigned long'
| | `-FullComment 0x559b74c60b00 <col:38, col:63>
| |   `-ParagraphComment 0x559b74c60ad0 <col:38, col:63>
| |     `-TextComment 0x559b74c60aa0 <col:38, col:63> Text=" Where in buffer to write "
| |-FieldDecl 0x559b74bb35f8 <line:4085:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x559b74c60bd0 <col:31, col:52>
| |   `-ParagraphComment 0x559b74c60ba0 <col:31, col:52>
| |     `-TextComment 0x559b74c60b70 <col:31, col:52> Text=" Synchronization lock "
| |-RecordDecl 0x559b74bb3668 <line:4087:2, line:4090:2> line:4087:2 struct definition
| | |-FieldDecl 0x559b74bb3720 <line:4088:3, col:18> col:18 readers '_wait_q_t':'_wait_q_t'
| | | `-FullComment 0x559b74c60ca0 <col:31, col:49>
| | |   `-ParagraphComment 0x559b74c60c70 <col:31, col:49>
| | |     `-TextComment 0x559b74c60c40 <col:31, col:49> Text=" Reader wait queue "
| | `-FieldDecl 0x559b74bb37a8 <line:4089:3, col:18> col:18 writers '_wait_q_t':'_wait_q_t'
| |   `-FullComment 0x559b74c60d70 <col:31, col:49>
| |     `-ParagraphComment 0x559b74c60d40 <col:31, col:49>
| |       `-TextComment 0x559b74c60d10 <col:31, col:49> Text=" Writer wait queue "
| |-FieldDecl 0x559b74bb3870 <line:4087:2, line:4090:4> col:4 wait_q 'struct (anonymous struct at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)':'struct k_pipe::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)'
| `-FieldDecl 0x559b74bb38c8 <line:4094:2, col:14> col:14 flags 'u8_t':'unsigned char'
|   `-FullComment 0x559b74c60e40 <col:26, col:32>
|     `-ParagraphComment 0x559b74c60e10 <col:26, col:32>
|       `-TextComment 0x559b74c60de0 <col:26, col:32> Text=" Flags "
|-FunctionDecl 0x559b74bb3d00 <line:4158:1, col:73> col:6 k_pipe_init 'void (struct k_pipe *, unsigned char *, size_t)'
| |-ParmVarDecl 0x559b74bb3ae0 <col:18, col:33> col:33 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x559b74bb3b58 <col:39, col:54> col:54 buffer 'unsigned char *'
| |-ParmVarDecl 0x559b74bb3bc8 <col:62, col:69> col:69 size 'size_t':'unsigned long'
| `-FullComment 0x559b74c614a0 <line:4145:3, line:4157:1>
|   |-ParagraphComment 0x559b74c60ee0 <line:4145:3>
|   | `-TextComment 0x559b74c60eb0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c60f00 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x559b74c60f60 <col:10, col:28>
|   |   `-TextComment 0x559b74c60f30 <col:10, col:28> Text=" Initialize a pipe."
|   |-ParagraphComment 0x559b74c60fb0 <line:4147:3, col:66>
|   | `-TextComment 0x559b74c60f80 <col:3, col:66> Text=" This routine initializes a pipe object, prior to its first use."
|   |-ParagraphComment 0x559b74c61000 <line:4149:3>
|   | `-TextComment 0x559b74c60fd0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c61020 <col:4, line:4150:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x559b74c610d0 <line:4149:15, line:4150:3>
|   |   |-TextComment 0x559b74c61080 <line:4149:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x559b74c610a0 <line:4150:3> Text=" "
|   |-ParamCommandComment 0x559b74c610f0 <col:4, line:4152:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x559b74c611d0 <line:4150:17, line:4152:3>
|   |   |-TextComment 0x559b74c61150 <line:4150:17, col:77> Text=" Address of the pipe's ring buffer, or NULL if no ring buffer"
|   |   |-TextComment 0x559b74c61170 <line:4151:3, col:25> Text="               is used."
|   |   `-TextComment 0x559b74c61190 <line:4152:3> Text=" "
|   |-ParamCommandComment 0x559b74c611f0 <col:4, line:4153:30> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x559b74c612a0 <line:4152:15, line:4153:30>
|   |   |-TextComment 0x559b74c61250 <line:4152:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   `-TextComment 0x559b74c61270 <line:4153:3, col:30> Text="             buffer is used."
|   |-ParagraphComment 0x559b74c612f0 <line:4155:3>
|   | `-TextComment 0x559b74c612c0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c61310 <col:4, line:4156:3> Name="return"
|   | `-ParagraphComment 0x559b74c61390 <line:4155:11, line:4156:3>
|   |   |-TextComment 0x559b74c61340 <line:4155:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c61360 <line:4156:3> Text=" "
|   |-VerbatimLineComment 0x559b74c613b0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x559b74c61420 <line:4157:1>
|     `-TextComment 0x559b74c613f0 <col:1> Text=" "
|-FunctionDecl 0x559b74bb5958 <line:4172:1, col:39> col:5 k_pipe_cleanup 'int (struct k_pipe *)'
| |-ParmVarDecl 0x559b74bb5850 <col:20, col:35> col:35 pipe 'struct k_pipe *'
| `-FullComment 0x559b74c61960 <line:4161:3, line:4171:1>
|   |-ParagraphComment 0x559b74c61540 <line:4161:3>
|   | `-TextComment 0x559b74c61510 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c61560 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x559b74c615c0 <col:10, col:43>
|   |   `-TextComment 0x559b74c61590 <col:10, col:43> Text=" Release a pipe's allocated buffer"
|   |-ParagraphComment 0x559b74c61660 <line:4163:3, line:4165:46>
|   | |-TextComment 0x559b74c615e0 <line:4163:3, col:64> Text=" If a pipe object was given a dynamically allocated buffer via"
|   | |-TextComment 0x559b74c61600 <line:4164:3, col:69> Text=" k_pipe_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x559b74c61620 <line:4165:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x559b74c616b0 <line:4167:3>
|   | `-TextComment 0x559b74c61680 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c616d0 <col:4, line:4170:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x559b74c61870 <line:4167:15, line:4170:3>
|   |   |-TextComment 0x559b74c61730 <line:4167:15, col:35> Text=" Address of the pipe."
|   |   |-TextComment 0x559b74c61750 <line:4168:3> Text=" "
|   |   |-InlineCommandComment 0x559b74c61770 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x559b74c61790 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x559b74c617b0 <line:4169:3> Text=" "
|   |   |-InlineCommandComment 0x559b74c617d0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x559b74c617f0 <col:11, col:37> Text=" -EAGAIN nothing to cleanup"
|   |   `-TextComment 0x559b74c61810 <line:4170:3> Text=" "
|   |-VerbatimLineComment 0x559b74c61890 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x559b74c61900 <line:4171:1>
|     `-TextComment 0x559b74c618d0 <col:1> Text=" "
|-FunctionDecl 0x559b74bb5bd8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4190:65> col:15 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x559b74bb5a50 <col:33, col:48> col:48 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x559b74bb5ac0 <col:54, col:61> col:61 size 'size_t':'unsigned long'
| `-FullComment 0x559b74c61f80 <line:4175:3, line:4189:1>
|   |-ParagraphComment 0x559b74c61a00 <line:4175:3>
|   | `-TextComment 0x559b74c619d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c61a20 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x559b74c61a80 <col:10, col:56>
|   |   `-TextComment 0x559b74c61a50 <col:10, col:56> Text=" Initialize a pipe and allocate a buffer for it"
|   |-ParagraphComment 0x559b74c61b20 <line:4177:3, line:4179:74>
|   | |-TextComment 0x559b74c61aa0 <line:4177:3, col:76> Text=" Storage for the buffer region will be allocated from the calling thread's"
|   | |-TextComment 0x559b74c61ac0 <line:4178:3, col:77> Text=" resource pool. This memory will be released if k_pipe_cleanup() is called,"
|   | `-TextComment 0x559b74c61ae0 <line:4179:3, col:74> Text=" or userspace is enabled and the pipe object loses all references to it."
|   |-ParagraphComment 0x559b74c61b70 <line:4181:3, col:69>
|   | `-TextComment 0x559b74c61b40 <col:3, col:69> Text=" This function should only be called on uninitialized pipe objects."
|   |-ParagraphComment 0x559b74c61bc0 <line:4183:3>
|   | `-TextComment 0x559b74c61b90 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c61be0 <col:4, line:4184:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x559b74c61c90 <line:4183:15, line:4184:3>
|   |   |-TextComment 0x559b74c61c40 <line:4183:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x559b74c61c60 <line:4184:3> Text=" "
|   |-ParamCommandComment 0x559b74c61cb0 <col:4, line:4188:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x559b74c61e80 <line:4184:15, line:4188:3>
|   |   |-TextComment 0x559b74c61d10 <line:4184:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   |-TextComment 0x559b74c61d30 <line:4185:3, col:30> Text="             buffer is used."
|   |   |-TextComment 0x559b74c61d50 <line:4186:3> Text=" "
|   |   |-InlineCommandComment 0x559b74c61d70 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x559b74c61d90 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x559b74c61db0 <line:4187:3> Text=" "
|   |   |-InlineCommandComment 0x559b74c61dd0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x559b74c61df0 <col:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x559b74c61e10 <line:4188:3> Text=" "
|   |-VerbatimLineComment 0x559b74c61ea0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x559b74c61f10 <line:4189:1>
|     `-TextComment 0x559b74c61ee0 <col:1> Text=" "
|-FunctionDecl 0x559b74bb60c8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4214:35> line:4212:15 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x559b74bb5ce0 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x559b74bb5d58 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x559b74bb5dc8 <line:4213:5, col:12> col:12 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74bb5e68 <col:28, col:36> col:36 bytes_written 'size_t *'
| |-ParmVarDecl 0x559b74bb5ed8 <line:4214:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74bb5f48 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x559b74c62b00 <line:4193:3, line:4211:1>
|   |-ParagraphComment 0x559b74c62020 <line:4193:3>
|   | `-TextComment 0x559b74c61ff0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c62040 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x559b74c620a0 <col:10, col:31>
|   |   `-TextComment 0x559b74c62070 <col:10, col:31> Text=" Write data to a pipe."
|   |-ParagraphComment 0x559b74c621c0 <line:4195:3, col:66>
|   | |-TextComment 0x559b74c620c0 <col:3, col:29> Text=" This routine writes up to "
|   | |-InlineCommandComment 0x559b74c62110 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bytes_to_write"
|   | |-TextComment 0x559b74c62130 <col:47, col:64> Text=" bytes of data to "
|   | `-InlineCommandComment 0x559b74c62180 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x559b74c62210 <line:4197:3>
|   | `-TextComment 0x559b74c621e0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c62230 <col:4, line:4198:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x559b74c622e0 <line:4197:15, line:4198:3>
|   |   |-TextComment 0x559b74c62290 <line:4197:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x559b74c622b0 <line:4198:3> Text=" "
|   |-ParamCommandComment 0x559b74c62300 <col:4, line:4199:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x559b74c623b0 <line:4198:15, line:4199:3>
|   |   |-TextComment 0x559b74c62360 <line:4198:15, col:40> Text=" Address of data to write."
|   |   `-TextComment 0x559b74c62380 <line:4199:3> Text=" "
|   |-ParamCommandComment 0x559b74c623d0 <col:4, line:4200:3> [in] implicitly Param="bytes_to_write" ParamIndex=2
|   | `-ParagraphComment 0x559b74c62480 <line:4199:25, line:4200:3>
|   |   |-TextComment 0x559b74c62430 <line:4199:25, col:49> Text=" Size of data (in bytes)."
|   |   `-TextComment 0x559b74c62450 <line:4200:3> Text=" "
|   |-ParamCommandComment 0x559b74c624a0 <col:4, line:4201:3> [in] implicitly Param="bytes_written" ParamIndex=3
|   | `-ParagraphComment 0x559b74c62550 <line:4200:24, line:4201:3>
|   |   |-TextComment 0x559b74c62500 <line:4200:24, col:76> Text=" Address of area to hold the number of bytes written."
|   |   `-TextComment 0x559b74c62520 <line:4201:3> Text=" "
|   |-ParamCommandComment 0x559b74c62570 <col:4, line:4202:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x559b74c62620 <line:4201:19, line:4202:3>
|   |   |-TextComment 0x559b74c625d0 <line:4201:19, col:52> Text=" Minimum number of bytes to write."
|   |   `-TextComment 0x559b74c625f0 <line:4202:3> Text=" "
|   |-ParamCommandComment 0x559b74c62640 <col:4, line:4204:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x559b74c62720 <line:4202:18, line:4204:32>
|   |   |-TextComment 0x559b74c626a0 <line:4202:18, col:80> Text=" Non-negative waiting period to wait for the data to be written"
|   |   |-TextComment 0x559b74c626c0 <line:4203:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x559b74c626e0 <line:4204:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x559b74c629d0 <line:4206:3, line:4210:3>
|   | |-TextComment 0x559b74c62740 <line:4206:3> Text=" "
|   | |-InlineCommandComment 0x559b74c62760 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c62780 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x559b74c627d0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x559b74c627f0 <col:34, col:61> Text=" bytes of data were written."
|   | |-TextComment 0x559b74c62810 <line:4207:3> Text=" "
|   | |-InlineCommandComment 0x559b74c62830 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c62850 <col:11, col:71> Text=" -EIO Returned without waiting; zero data bytes were written."
|   | |-TextComment 0x559b74c62870 <line:4208:3> Text=" "
|   | |-InlineCommandComment 0x559b74c62890 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c628b0 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x559b74c62900 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x559b74c62920 <line:4209:3, col:53> Text="                 minus one data bytes were written."
|   | `-TextComment 0x559b74c62940 <line:4210:3> Text=" "
|   |-VerbatimLineComment 0x559b74c629f0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x559b74c62a70 <line:4211:1>
|     `-TextComment 0x559b74c62a30 <col:1> Text=" "
|-FunctionDecl 0x559b74bb64e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4239:35> line:4237:15 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x559b74bb61f0 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x559b74bb6268 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x559b74bb62d8 <line:4238:5, col:12> col:12 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74bb6348 <col:27, col:35> col:35 bytes_read 'size_t *'
| |-ParmVarDecl 0x559b74bb63b8 <line:4239:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74bb6428 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x559b74c636f0 <line:4217:3, line:4236:1>
|   |-ParagraphComment 0x559b74c62ba0 <line:4217:3>
|   | `-TextComment 0x559b74c62b70 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c62bc0 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x559b74c62c20 <col:10, col:32>
|   |   `-TextComment 0x559b74c62bf0 <col:10, col:32> Text=" Read data from a pipe."
|   |-ParagraphComment 0x559b74c62d40 <line:4219:3, col:66>
|   | |-TextComment 0x559b74c62c40 <col:3, col:28> Text=" This routine reads up to "
|   | |-InlineCommandComment 0x559b74c62c90 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="bytes_to_read"
|   | |-TextComment 0x559b74c62cb0 <col:45, col:64> Text=" bytes of data from "
|   | `-InlineCommandComment 0x559b74c62d00 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x559b74c62d90 <line:4221:3>
|   | `-TextComment 0x559b74c62d60 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c62db0 <col:4, line:4222:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x559b74c62e60 <line:4221:15, line:4222:3>
|   |   |-TextComment 0x559b74c62e10 <line:4221:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x559b74c62e30 <line:4222:3> Text=" "
|   |-ParamCommandComment 0x559b74c62e80 <col:4, line:4223:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x559b74c62f30 <line:4222:15, line:4223:3>
|   |   |-TextComment 0x559b74c62ee0 <line:4222:15, col:56> Text=" Address to place the data read from pipe."
|   |   `-TextComment 0x559b74c62f00 <line:4223:3> Text=" "
|   |-ParamCommandComment 0x559b74c62f50 <col:4, line:4224:3> [in] implicitly Param="bytes_to_read" ParamIndex=2
|   | `-ParagraphComment 0x559b74c63000 <line:4223:24, line:4224:3>
|   |   |-TextComment 0x559b74c62fb0 <line:4223:24, col:61> Text=" Maximum number of data bytes to read."
|   |   `-TextComment 0x559b74c62fd0 <line:4224:3> Text=" "
|   |-ParamCommandComment 0x559b74c63020 <col:4, line:4225:3> [in] implicitly Param="bytes_read" ParamIndex=3
|   | `-ParagraphComment 0x559b74c630d0 <line:4224:21, line:4225:3>
|   |   |-TextComment 0x559b74c63080 <line:4224:21, col:70> Text=" Address of area to hold the number of bytes read."
|   |   `-TextComment 0x559b74c630a0 <line:4225:3> Text=" "
|   |-ParamCommandComment 0x559b74c630f0 <col:4, line:4226:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x559b74c631a0 <line:4225:19, line:4226:3>
|   |   |-TextComment 0x559b74c63150 <line:4225:19, col:56> Text=" Minimum number of data bytes to read."
|   |   `-TextComment 0x559b74c63170 <line:4226:3> Text=" "
|   |-ParamCommandComment 0x559b74c631c0 <col:4, line:4228:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x559b74c632a0 <line:4226:18, line:4228:32>
|   |   |-TextComment 0x559b74c63220 <line:4226:18, col:77> Text=" Non-negative waiting period to wait for the data to be read"
|   |   |-TextComment 0x559b74c63240 <line:4227:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x559b74c63260 <line:4228:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x559b74c635d0 <line:4230:3, line:4235:3>
|   | |-TextComment 0x559b74c632c0 <line:4230:3> Text=" "
|   | |-InlineCommandComment 0x559b74c632e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c63300 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x559b74c63350 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x559b74c63370 <col:34, col:58> Text=" bytes of data were read."
|   | |-TextComment 0x559b74c63390 <line:4231:3> Text=" "
|   | |-InlineCommandComment 0x559b74c633b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c633d0 <col:11, col:46> Text=" -EINVAL invalid parameters supplied"
|   | |-TextComment 0x559b74c633f0 <line:4232:3> Text=" "
|   | |-InlineCommandComment 0x559b74c63410 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c63430 <col:11, col:68> Text=" -EIO Returned without waiting; zero data bytes were read."
|   | |-TextComment 0x559b74c63450 <line:4233:3> Text=" "
|   | |-InlineCommandComment 0x559b74c63470 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c63490 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x559b74c634e0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x559b74c63500 <line:4234:3, col:50> Text="                 minus one data bytes were read."
|   | `-TextComment 0x559b74c63520 <line:4235:3> Text=" "
|   |-VerbatimLineComment 0x559b74c635f0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x559b74c63660 <line:4236:1>
|     `-TextComment 0x559b74c63630 <col:1> Text=" "
|-FunctionDecl 0x559b74bb68f0 <line:4256:1, line:4257:39> line:4256:13 k_pipe_block_put 'void (struct k_pipe *, struct k_mem_block *, size_t, struct k_sem *)' extern
| |-ParmVarDecl 0x559b74bb6600 <col:30, col:45> col:45 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x559b74bb6688 <col:51, col:71> col:71 block 'struct k_mem_block *'
| |-ParmVarDecl 0x559b74bb66f8 <line:4257:9, col:16> col:16 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74bb6780 <col:22, col:36> col:36 sem 'struct k_sem *'
| `-FullComment 0x559b74c63f70 <line:4242:3, line:4255:1>
|   |-ParagraphComment 0x559b74c63790 <line:4242:3>
|   | `-TextComment 0x559b74c63760 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c637b0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x559b74c63810 <col:10, col:39>
|   |   `-TextComment 0x559b74c637e0 <col:10, col:39> Text=" Write memory block to a pipe."
|   |-ParagraphComment 0x559b74c63a00 <line:4244:3, line:4246:79>
|   | |-TextComment 0x559b74c63830 <line:4244:3, col:63> Text=" This routine writes the data contained in a memory block to "
|   | |-InlineCommandComment 0x559b74c63880 <col:64, col:65> Name="a" RenderEmphasized Arg[0]="pipe."
|   | |-TextComment 0x559b74c638a0 <line:4245:3, col:74> Text=" Once all of the data in the block has been written to the pipe, it will"
|   | |-TextComment 0x559b74c638c0 <line:4246:3, col:25> Text=" free the memory block "
|   | |-InlineCommandComment 0x559b74c63910 <col:26, col:27> Name="a" RenderEmphasized Arg[0]="block"
|   | |-TextComment 0x559b74c63930 <col:34, col:57> Text=" and give the semaphore "
|   | |-InlineCommandComment 0x559b74c63980 <col:58, col:59> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x559b74c639a0 <col:64, col:79> Text=" (if specified)."
|   |-ParagraphComment 0x559b74c63a50 <line:4248:3>
|   | `-TextComment 0x559b74c63a20 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c63a70 <col:4, line:4249:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x559b74c63b20 <line:4248:15, line:4249:3>
|   |   |-TextComment 0x559b74c63ad0 <line:4248:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x559b74c63af0 <line:4249:3> Text=" "
|   |-ParamCommandComment 0x559b74c63b40 <col:4, line:4250:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x559b74c63bf0 <line:4249:16, line:4250:3>
|   |   |-TextComment 0x559b74c63ba0 <line:4249:16, col:52> Text=" Memory block containing data to send"
|   |   `-TextComment 0x559b74c63bc0 <line:4250:3> Text=" "
|   |-ParamCommandComment 0x559b74c63c10 <col:4, line:4251:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x559b74c63cc0 <line:4250:15, line:4251:3>
|   |   |-TextComment 0x559b74c63c70 <line:4250:15, col:59> Text=" Number of data bytes in memory block to send"
|   |   `-TextComment 0x559b74c63c90 <line:4251:3> Text=" "
|   |-ParamCommandComment 0x559b74c63ce0 <col:4, col:61> [in] implicitly Param="sem" ParamIndex=3
|   | `-ParagraphComment 0x559b74c63d70 <col:14, col:61>
|   |   `-TextComment 0x559b74c63d40 <col:14, col:61> Text=" Semaphore to signal upon completion (else NULL)"
|   |-ParagraphComment 0x559b74c63dc0 <line:4253:3>
|   | `-TextComment 0x559b74c63d90 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c63de0 <col:4, line:4254:3> Name="return"
|   | `-ParagraphComment 0x559b74c63e60 <line:4253:11, line:4254:3>
|   |   |-TextComment 0x559b74c63e10 <line:4253:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c63e30 <line:4254:3> Text=" "
|   |-VerbatimLineComment 0x559b74c63e80 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x559b74c63ef0 <line:4255:1>
|     `-TextComment 0x559b74c63ec0 <col:1> Text=" "
|-RecordDecl 0x559b74bb6a08 prev 0x559b74b732c0 <line:4265:1, line:4275:1> line:4265:8 struct k_mem_slab definition
| |-FullComment 0x559b74c64090 <line:4262:3, col:24>
| | `-ParagraphComment 0x559b74c64060 <col:3, col:24>
| |   |-TextComment 0x559b74c63fe0 <col:3> Text=" "
| |   |-InlineCommandComment 0x559b74c64000 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x559b74c64020 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x559b74bb6aa0 <line:4266:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x559b74bb6af8 <line:4267:2, col:8> col:8 referenced num_blocks 'u32_t':'unsigned int'
| |-FieldDecl 0x559b74bb6b50 <line:4268:2, col:9> col:9 block_size 'size_t':'unsigned long'
| |-FieldDecl 0x559b74bb6bb0 <line:4269:2, col:8> col:8 buffer 'char *'
| |-FieldDecl 0x559b74bb6c10 <line:4270:2, col:8> col:8 free_list 'char *'
| `-FieldDecl 0x559b74bb6c68 <line:4271:2, col:8> col:8 referenced num_used 'u32_t':'unsigned int'
|-FunctionDecl 0x559b74bb70c8 <line:4351:1, line:4352:42> line:4351:12 k_mem_slab_init 'int (struct k_mem_slab *, void *, size_t, u32_t)' extern
| |-ParmVarDecl 0x559b74bb6e20 <col:28, col:47> col:47 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x559b74bb6e98 <col:53, col:59> col:59 buffer 'void *'
| |-ParmVarDecl 0x559b74bb6f08 <line:4352:7, col:14> col:14 block_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74bb6f78 <col:26, col:32> col:32 num_blocks 'u32_t':'unsigned int'
| `-FullComment 0x559b74c64af0 <line:4330:3, line:4350:1>
|   |-ParagraphComment 0x559b74c64130 <line:4330:3>
|   | `-TextComment 0x559b74c64100 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c64150 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x559b74c641b0 <col:10, col:35>
|   |   `-TextComment 0x559b74c64180 <col:10, col:35> Text=" Initialize a memory slab."
|   |-ParagraphComment 0x559b74c64200 <line:4332:3, col:53>
|   | `-TextComment 0x559b74c641d0 <col:3, col:53> Text=" Initializes a memory slab, prior to its first use."
|   |-ParagraphComment 0x559b74c64490 <line:4334:3, line:4339:51>
|   | |-TextComment 0x559b74c64220 <line:4334:3, col:37> Text=" The memory slab's buffer contains "
|   | |-InlineCommandComment 0x559b74c64270 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="slab_num_blocks"
|   | |-TextComment 0x559b74c64290 <col:56, col:69> Text=" memory blocks"
|   | |-TextComment 0x559b74c642b0 <line:4335:3, col:12> Text=" that are "
|   | |-InlineCommandComment 0x559b74c64300 <col:13, col:14> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | |-TextComment 0x559b74c64320 <col:31, col:75> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x559b74c64340 <line:4336:3, col:68> Text=" N-byte boundary matching a word boundary, where N is a power of 2"
|   | |-TextComment 0x559b74c64360 <line:4337:3, col:42> Text=" (i.e. 4 on 32-bit systems, 8, 16, ...)."
|   | |-TextComment 0x559b74c64380 <line:4338:3, col:74> Text=" To ensure that each memory block is similarly aligned to this boundary,"
|   | |-TextComment 0x559b74c643a0 <line:4339:3> Text=" "
|   | |-InlineCommandComment 0x559b74c643f0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | `-TextComment 0x559b74c64410 <col:22, col:51> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x559b74c644e0 <line:4341:3>
|   | `-TextComment 0x559b74c644b0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c64500 <col:4, line:4342:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x559b74c645b0 <line:4341:15, line:4342:3>
|   |   |-TextComment 0x559b74c64560 <line:4341:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x559b74c64580 <line:4342:3> Text=" "
|   |-ParamCommandComment 0x559b74c645d0 <col:4, line:4343:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x559b74c64680 <line:4342:17, line:4343:3>
|   |   |-TextComment 0x559b74c64630 <line:4342:17, col:62> Text=" Pointer to buffer used for the memory blocks."
|   |   `-TextComment 0x559b74c64650 <line:4343:3> Text=" "
|   |-ParamCommandComment 0x559b74c646a0 <col:4, line:4344:3> [in] implicitly Param="block_size" ParamIndex=2
|   | `-ParagraphComment 0x559b74c64750 <line:4343:21, line:4344:3>
|   |   |-TextComment 0x559b74c64700 <line:4343:21, col:58> Text=" Size of each memory block (in bytes)."
|   |   `-TextComment 0x559b74c64720 <line:4344:3> Text=" "
|   |-ParamCommandComment 0x559b74c64770 <col:4, col:45> [in] implicitly Param="num_blocks" ParamIndex=3
|   | `-ParagraphComment 0x559b74c64800 <col:21, col:45>
|   |   `-TextComment 0x559b74c647d0 <col:21, col:45> Text=" Number of memory blocks."
|   |-ParagraphComment 0x559b74c64910 <line:4346:3, line:4347:40>
|   | |-TextComment 0x559b74c64820 <line:4346:3> Text=" "
|   | |-InlineCommandComment 0x559b74c64840 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c64860 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x559b74c64880 <line:4347:3> Text=" "
|   | |-InlineCommandComment 0x559b74c648a0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x559b74c648c0 <col:11, col:40> Text=" -EINVAL invalid data supplied"
|   |-ParagraphComment 0x559b74c64960 <line:4349:3>
|   | `-TextComment 0x559b74c64930 <col:3> Text=" "
|   |-VerbatimLineComment 0x559b74c64980 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x559b74c649f0 <line:4350:1>
|     `-TextComment 0x559b74c649c0 <col:1> Text=" "
|-FunctionDecl 0x559b74bb7408 <line:4372:1, line:4373:21> line:4372:12 k_mem_slab_alloc 'int (struct k_mem_slab *, void **, s32_t)' extern
| |-ParmVarDecl 0x559b74bb71e0 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x559b74bb7258 <col:54, col:61> col:61 mem 'void **'
| |-ParmVarDecl 0x559b74bb72c8 <line:4373:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x559b74c65300 <line:4355:3, line:4371:1>
|   |-ParagraphComment 0x559b74c64b90 <line:4355:3>
|   | `-TextComment 0x559b74c64b60 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c64bb0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x559b74c64c10 <col:10, col:45>
|   |   `-TextComment 0x559b74c64be0 <col:10, col:45> Text=" Allocate memory from a memory slab."
|   |-ParagraphComment 0x559b74c64c60 <line:4357:3, col:60>
|   | `-TextComment 0x559b74c64c30 <col:3, col:60> Text=" This routine allocates a memory block from a memory slab."
|   |-ParagraphComment 0x559b74c64cb0 <line:4359:3>
|   | `-TextComment 0x559b74c64c80 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c64cd0 <col:4, line:4360:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x559b74c64d80 <line:4359:15, line:4360:3>
|   |   |-TextComment 0x559b74c64d30 <line:4359:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x559b74c64d50 <line:4360:3> Text=" "
|   |-ParamCommandComment 0x559b74c64da0 <col:4, line:4361:3> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x559b74c64e50 <line:4360:14, line:4361:3>
|   |   |-TextComment 0x559b74c64e00 <line:4360:14, col:44> Text=" Pointer to block address area."
|   |   `-TextComment 0x559b74c64e20 <line:4361:3> Text=" "
|   |-ParamCommandComment 0x559b74c64e70 <col:4, line:4363:52> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x559b74c64f50 <line:4361:18, line:4363:52>
|   |   |-TextComment 0x559b74c64ed0 <line:4361:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x559b74c64ef0 <line:4362:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x559b74c64f10 <line:4363:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x559b74c65200 <line:4365:3, line:4370:3>
|   | |-TextComment 0x559b74c64f70 <line:4365:3> Text=" "
|   | |-InlineCommandComment 0x559b74c64f90 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c64fb0 <col:11, col:68> Text=" 0 Memory allocated. The block address area pointed at by "
|   | |-InlineCommandComment 0x559b74c65000 <col:69, col:70> Name="a" RenderEmphasized Arg[0]="mem"
|   | |-TextComment 0x559b74c65020 <line:4366:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x559b74c65040 <line:4367:3> Text=" "
|   | |-InlineCommandComment 0x559b74c65060 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c65080 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x559b74c650a0 <line:4368:3> Text=" "
|   | |-InlineCommandComment 0x559b74c650c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c650e0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x559b74c65100 <line:4369:3> Text=" "
|   | |-InlineCommandComment 0x559b74c65120 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c65140 <col:11, col:40> Text=" -EINVAL Invalid data supplied"
|   | `-TextComment 0x559b74c65160 <line:4370:3> Text=" "
|   |-VerbatimLineComment 0x559b74c65220 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x559b74c65290 <line:4371:1>
|     `-TextComment 0x559b74c65260 <col:1> Text=" "
|-FunctionDecl 0x559b74bb76a0 <line:4387:1, col:64> col:13 k_mem_slab_free 'void (struct k_mem_slab *, void **)' extern
| |-ParmVarDecl 0x559b74bb7510 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x559b74bb7588 <col:54, col:61> col:61 mem 'void **'
| `-FullComment 0x559b74c65850 <line:4376:3, line:4386:1>
|   |-ParagraphComment 0x559b74c653a0 <line:4376:3>
|   | `-TextComment 0x559b74c65370 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c653c0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x559b74c65420 <col:10, col:51>
|   |   `-TextComment 0x559b74c653f0 <col:10, col:51> Text=" Free memory allocated from a memory slab."
|   |-ParagraphComment 0x559b74c65490 <line:4378:3, line:4379:26>
|   | |-TextComment 0x559b74c65440 <line:4378:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x559b74c65460 <line:4379:3, col:26> Text=" associated memory slab."
|   |-ParagraphComment 0x559b74c654e0 <line:4381:3>
|   | `-TextComment 0x559b74c654b0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c65500 <col:4, line:4382:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x559b74c655b0 <line:4381:15, line:4382:3>
|   |   |-TextComment 0x559b74c65560 <line:4381:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x559b74c65580 <line:4382:3> Text=" "
|   |-ParamCommandComment 0x559b74c655d0 <col:4, col:75> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x559b74c65660 <col:14, col:75>
|   |   `-TextComment 0x559b74c65630 <col:14, col:75> Text=" Pointer to block address area (as set by k_mem_slab_alloc())."
|   |-ParagraphComment 0x559b74c656b0 <line:4384:3>
|   | `-TextComment 0x559b74c65680 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c656d0 <col:4, line:4385:3> Name="return"
|   | `-ParagraphComment 0x559b74c65750 <line:4384:11, line:4385:3>
|   |   |-TextComment 0x559b74c65700 <line:4384:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c65720 <line:4385:3> Text=" "
|   |-VerbatimLineComment 0x559b74c65770 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x559b74c657e0 <line:4386:1>
|     `-TextComment 0x559b74c657b0 <col:1> Text=" "
|-FunctionDecl 0x559b74bb8630 <line:4400:1, line:4403:1> line:4400:21 k_mem_slab_num_used_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x559b74bb77a0 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x559b74bb87a8 <line:4401:1, line:4403:1>
| | `-ReturnStmt 0x559b74bb8768 <line:4402:2, col:15>
| |   `-ImplicitCastExpr 0x559b74bb8750 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x559b74bb8718 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_used 0x559b74bb6c68
| |       `-ImplicitCastExpr 0x559b74bb8700 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |         `-DeclRefExpr 0x559b74bb86d8 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x559b74bb77a0 'slab' 'struct k_mem_slab *'
| `-FullComment 0x559b74c65d30 <line:4390:3, line:4399:1>
|   |-ParagraphComment 0x559b74c658f0 <line:4390:3>
|   | `-TextComment 0x559b74c658c0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c65910 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x559b74c65970 <col:10, col:57>
|   |   `-TextComment 0x559b74c65940 <col:10, col:57> Text=" Get the number of used blocks in a memory slab."
|   |-ParagraphComment 0x559b74c65a40 <line:4392:3, line:4393:18>
|   | |-TextComment 0x559b74c65990 <line:4392:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x559b74c659b0 <line:4393:3, col:16> Text=" allocated in "
|   | `-InlineCommandComment 0x559b74c65a00 <col:17, col:18> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x559b74c65a90 <line:4395:3>
|   | `-TextComment 0x559b74c65a60 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c65ab0 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x559b74c65b40 <col:15, col:42>
|   |   `-TextComment 0x559b74c65b10 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x559b74c65b90 <line:4397:3>
|   | `-TextComment 0x559b74c65b60 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c65bb0 <col:4, line:4398:3> Name="return"
|   | `-ParagraphComment 0x559b74c65c30 <line:4397:11, line:4398:3>
|   |   |-TextComment 0x559b74c65be0 <line:4397:11, col:45> Text=" Number of allocated memory blocks."
|   |   `-TextComment 0x559b74c65c00 <line:4398:3> Text=" "
|   |-VerbatimLineComment 0x559b74c65c50 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x559b74c65cc0 <line:4399:1>
|     `-TextComment 0x559b74c65c90 <col:1> Text=" "
|-FunctionDecl 0x559b74bb8870 <line:4416:1, line:4419:1> line:4416:21 k_mem_slab_num_free_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x559b74bb87e8 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x559b74bb8ad8 <line:4417:1, line:4419:1>
| | `-ReturnStmt 0x559b74bb8a60 <line:4418:2, col:34>
| |   `-BinaryOperator 0x559b74bb8a38 <col:9, col:34> 'unsigned int' '-'
| |     |-ImplicitCastExpr 0x559b74bb8a08 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     | `-MemberExpr 0x559b74bb8958 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_blocks 0x559b74bb6af8
| |     |   `-ImplicitCastExpr 0x559b74bb8940 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x559b74bb8918 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x559b74bb87e8 'slab' 'struct k_mem_slab *'
| |     `-ImplicitCastExpr 0x559b74bb8a20 <col:28, col:34> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-MemberExpr 0x559b74bb89d0 <col:28, col:34> 'u32_t':'unsigned int' lvalue ->num_used 0x559b74bb6c68
| |         `-ImplicitCastExpr 0x559b74bb89b8 <col:28> 'struct k_mem_slab *' <LValueToRValue>
| |           `-DeclRefExpr 0x559b74bb8990 <col:28> 'struct k_mem_slab *' lvalue ParmVar 0x559b74bb87e8 'slab' 'struct k_mem_slab *'
| `-FullComment 0x559b74c66210 <line:4406:3, line:4415:1>
|   |-ParagraphComment 0x559b74c65dd0 <line:4406:3>
|   | `-TextComment 0x559b74c65da0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c65df0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x559b74c65e50 <col:10, col:59>
|   |   `-TextComment 0x559b74c65e20 <col:10, col:59> Text=" Get the number of unused blocks in a memory slab."
|   |-ParagraphComment 0x559b74c65f20 <line:4408:3, line:4409:20>
|   | |-TextComment 0x559b74c65e70 <line:4408:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x559b74c65e90 <line:4409:3, col:18> Text=" unallocated in "
|   | `-InlineCommandComment 0x559b74c65ee0 <col:19, col:20> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x559b74c65f70 <line:4411:3>
|   | `-TextComment 0x559b74c65f40 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c65f90 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x559b74c66020 <col:15, col:42>
|   |   `-TextComment 0x559b74c65ff0 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x559b74c66070 <line:4413:3>
|   | `-TextComment 0x559b74c66040 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c66090 <col:4, line:4414:3> Name="return"
|   | `-ParagraphComment 0x559b74c66110 <line:4413:11, line:4414:3>
|   |   |-TextComment 0x559b74c660c0 <line:4413:11, col:47> Text=" Number of unallocated memory blocks."
|   |   `-TextComment 0x559b74c660e0 <line:4414:3> Text=" "
|   |-VerbatimLineComment 0x559b74c66130 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x559b74c661a0 <line:4415:1>
|     `-TextComment 0x559b74c66170 <col:1> Text=" "
|-RecordDecl 0x559b74bb8af0 prev 0x559b74b73370 <line:4427:1, line:4430:1> line:4427:8 struct k_mem_pool definition
| |-FullComment 0x559b74c66330 <line:4424:3, col:24>
| | `-ParagraphComment 0x559b74c66300 <col:3, col:24>
| |   |-TextComment 0x559b74c66280 <col:3> Text=" "
| |   |-InlineCommandComment 0x559b74c662a0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x559b74c662c0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x559b74bb8b98 <line:4428:2, col:27> col:27 base 'struct sys_mem_pool_base':'struct sys_mem_pool_base'
| `-FieldDecl 0x559b74bb8bf0 <line:4429:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x559b74bb9048 <line:4495:1, line:4496:34> line:4495:12 k_mem_pool_alloc 'int (struct k_mem_pool *, struct k_mem_block *, size_t, s32_t)' extern
| |-ParmVarDecl 0x559b74bb8d90 <col:29, col:48> col:48 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x559b74bb8e18 <col:54, col:74> col:74 block 'struct k_mem_block *'
| |-ParmVarDecl 0x559b74bb8e88 <line:4496:8, col:15> col:15 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74bb8ef8 <col:21, col:27> col:27 timeout 's32_t':'int'
| `-FullComment 0x559b74c66c10 <line:4478:3, line:4494:1>
|   |-ParagraphComment 0x559b74c663d0 <line:4478:3>
|   | `-TextComment 0x559b74c663a0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c663f0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x559b74c66450 <col:10, col:45>
|   |   `-TextComment 0x559b74c66420 <col:10, col:45> Text=" Allocate memory from a memory pool."
|   |-ParagraphComment 0x559b74c664a0 <line:4480:3, col:60>
|   | `-TextComment 0x559b74c66470 <col:3, col:60> Text=" This routine allocates a memory block from a memory pool."
|   |-ParagraphComment 0x559b74c664f0 <line:4482:3>
|   | `-TextComment 0x559b74c664c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c66510 <col:4, line:4483:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x559b74c665c0 <line:4482:15, line:4483:3>
|   |   |-TextComment 0x559b74c66570 <line:4482:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x559b74c66590 <line:4483:3> Text=" "
|   |-ParamCommandComment 0x559b74c665e0 <col:4, line:4484:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x559b74c66690 <line:4483:16, line:4484:3>
|   |   |-TextComment 0x559b74c66640 <line:4483:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |   `-TextComment 0x559b74c66660 <line:4484:3> Text=" "
|   |-ParamCommandComment 0x559b74c666b0 <col:4, line:4485:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x559b74c66760 <line:4484:15, line:4485:3>
|   |   |-TextComment 0x559b74c66710 <line:4484:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x559b74c66730 <line:4485:3> Text=" "
|   |-ParamCommandComment 0x559b74c66780 <col:4, line:4487:52> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x559b74c66860 <line:4485:18, line:4487:52>
|   |   |-TextComment 0x559b74c667e0 <line:4485:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x559b74c66800 <line:4486:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x559b74c66820 <line:4487:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x559b74c66b00 <line:4489:3, line:4493:3>
|   | |-TextComment 0x559b74c66880 <line:4489:3> Text=" "
|   | |-InlineCommandComment 0x559b74c668a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c668c0 <col:11, col:35> Text=" 0 Memory allocated. The "
|   | |-InlineCommandComment 0x559b74c66910 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x559b74c66930 <col:43, col:72> Text=" field of the block descriptor"
|   | |-TextComment 0x559b74c66950 <line:4490:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x559b74c66970 <line:4491:3> Text=" "
|   | |-InlineCommandComment 0x559b74c66990 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c669b0 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x559b74c669d0 <line:4492:3> Text=" "
|   | |-InlineCommandComment 0x559b74c669f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c66a10 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x559b74c66a30 <line:4493:3> Text=" "
|   |-VerbatimLineComment 0x559b74c66b20 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x559b74c66b90 <line:4494:1>
|     `-TextComment 0x559b74c66b60 <col:1> Text=" "
|-FunctionDecl 0x559b74bb92e8 <line:4508:1, col:68> col:14 k_mem_pool_malloc 'void *(struct k_mem_pool *, size_t)' extern
| |-ParmVarDecl 0x559b74bb9160 <col:32, col:51> col:51 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x559b74bb91d0 <col:57, col:64> col:64 size 'size_t':'unsigned long'
| `-FullComment 0x559b74c67110 <line:4499:3, line:4507:1>
|   |-ParagraphComment 0x559b74c66cb0 <line:4499:3>
|   | `-TextComment 0x559b74c66c80 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c66cd0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x559b74c66d30 <col:10, col:68>
|   |   `-TextComment 0x559b74c66d00 <col:10, col:68> Text=" Allocate memory from a memory pool with malloc() semantics"
|   |-ParagraphComment 0x559b74c66d80 <line:4501:3, col:47>
|   | `-TextComment 0x559b74c66d50 <col:3, col:47> Text=" Such memory must be released using k_free()."
|   |-ParagraphComment 0x559b74c66dd0 <line:4503:3>
|   | `-TextComment 0x559b74c66da0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c66df0 <col:4, line:4504:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x559b74c66ea0 <line:4503:15, line:4504:3>
|   |   |-TextComment 0x559b74c66e50 <line:4503:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x559b74c66e70 <line:4504:3> Text=" "
|   |-ParamCommandComment 0x559b74c66ec0 <col:4, line:4505:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x559b74c66f70 <line:4504:15, line:4505:3>
|   |   |-TextComment 0x559b74c66f20 <line:4504:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x559b74c66f40 <line:4505:3> Text=" "
|   |-BlockCommandComment 0x559b74c66f90 <col:4, line:4506:3> Name="return"
|   | `-ParagraphComment 0x559b74c67010 <line:4505:11, line:4506:3>
|   |   |-TextComment 0x559b74c66fc0 <line:4505:11, col:72> Text=" Address of the allocated memory if successful, otherwise NULL"
|   |   `-TextComment 0x559b74c66fe0 <line:4506:3> Text=" "
|   |-VerbatimLineComment 0x559b74c67030 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x559b74c670a0 <line:4507:1>
|     `-TextComment 0x559b74c67070 <col:1> Text=" "
|-FunctionDecl 0x559b74bb94f0 <line:4521:1, col:54> col:13 k_mem_pool_free 'void (struct k_mem_block *)' extern
| |-ParmVarDecl 0x559b74bb93f0 <col:29, col:49> col:49 block 'struct k_mem_block *'
| `-FullComment 0x559b74c67590 <line:4511:3, line:4520:1>
|   |-ParagraphComment 0x559b74c671b0 <line:4511:3>
|   | `-TextComment 0x559b74c67180 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c671d0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x559b74c67230 <col:10, col:51>
|   |   `-TextComment 0x559b74c67200 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x559b74c672a0 <line:4513:3, line:4514:15>
|   | |-TextComment 0x559b74c67250 <line:4513:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x559b74c67270 <line:4514:3, col:15> Text=" memory pool."
|   |-ParagraphComment 0x559b74c672f0 <line:4516:3>
|   | `-TextComment 0x559b74c672c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c67310 <col:4, col:69> [in] implicitly Param="block" ParamIndex=0
|   | `-ParagraphComment 0x559b74c673a0 <col:16, col:69>
|   |   `-TextComment 0x559b74c67370 <col:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |-ParagraphComment 0x559b74c673f0 <line:4518:3>
|   | `-TextComment 0x559b74c673c0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c67410 <col:4, line:4519:3> Name="return"
|   | `-ParagraphComment 0x559b74c67490 <line:4518:11, line:4519:3>
|   |   |-TextComment 0x559b74c67440 <line:4518:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c67460 <line:4519:3> Text=" "
|   |-VerbatimLineComment 0x559b74c674b0 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x559b74c67520 <line:4520:1>
|     `-TextComment 0x559b74c674f0 <col:1> Text=" "
|-FunctionDecl 0x559b74bbb950 <line:4534:1, col:57> col:13 k_mem_pool_free_id 'void (struct k_mem_block_id *)' extern
| |-ParmVarDecl 0x559b74bbb850 <col:32, col:55> col:55 id 'struct k_mem_block_id *'
| `-FullComment 0x559b74c67a10 <line:4524:3, line:4533:1>
|   |-ParagraphComment 0x559b74c67630 <line:4524:3>
|   | `-TextComment 0x559b74c67600 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c67650 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x559b74c676b0 <col:10, col:51>
|   |   `-TextComment 0x559b74c67680 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x559b74c67720 <line:4526:3, line:4527:14>
|   | |-TextComment 0x559b74c676d0 <line:4526:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x559b74c676f0 <line:4527:3, col:14> Text=" memory pool"
|   |-ParagraphComment 0x559b74c67770 <line:4529:3>
|   | `-TextComment 0x559b74c67740 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c67790 <col:4, col:37> [in] implicitly Param="id" ParamIndex=0
|   | `-ParagraphComment 0x559b74c67820 <col:13, col:37>
|   |   `-TextComment 0x559b74c677f0 <col:13, col:37> Text=" Memory block identifier."
|   |-ParagraphComment 0x559b74c67870 <line:4531:3>
|   | `-TextComment 0x559b74c67840 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c67890 <col:4, line:4532:3> Name="return"
|   | `-ParagraphComment 0x559b74c67910 <line:4531:11, line:4532:3>
|   |   |-TextComment 0x559b74c678c0 <line:4531:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c678e0 <line:4532:3> Text=" "
|   |-VerbatimLineComment 0x559b74c67930 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x559b74c679a0 <line:4533:1>
|     `-TextComment 0x559b74c67970 <col:1> Text=" "
|-FunctionDecl 0x559b74bbbba8 <line:4557:1, col:34> col:14 k_malloc 'void *(size_t)' extern
| |-ParmVarDecl 0x559b74bbba98 <col:23, col:30> col:30 size 'size_t':'unsigned long'
| `-FullComment 0x559b74c67e90 <line:4547:3, line:4556:1>
|   |-ParagraphComment 0x559b74c67ab0 <line:4547:3>
|   | `-TextComment 0x559b74c67a80 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c67ad0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x559b74c67b30 <col:10, col:36>
|   |   `-TextComment 0x559b74c67b00 <col:10, col:36> Text=" Allocate memory from heap."
|   |-ParagraphComment 0x559b74c67ba0 <line:4549:3, line:4550:39>
|   | |-TextComment 0x559b74c67b50 <line:4549:3, col:66> Text=" This routine provides traditional malloc() semantics. Memory is"
|   | `-TextComment 0x559b74c67b70 <line:4550:3, col:39> Text=" allocated from the heap memory pool."
|   |-ParagraphComment 0x559b74c67bf0 <line:4552:3>
|   | `-TextComment 0x559b74c67bc0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c67c10 <col:4, col:53> [in] implicitly Param="size" ParamIndex=0
|   | `-ParagraphComment 0x559b74c67ca0 <col:15, col:53>
|   |   `-TextComment 0x559b74c67c70 <col:15, col:53> Text=" Amount of memory requested (in bytes)."
|   |-ParagraphComment 0x559b74c67cf0 <line:4554:3>
|   | `-TextComment 0x559b74c67cc0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c67d10 <col:4, line:4555:3> Name="return"
|   | `-ParagraphComment 0x559b74c67d90 <line:4554:11, line:4555:3>
|   |   |-TextComment 0x559b74c67d40 <line:4554:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x559b74c67d60 <line:4555:3> Text=" "
|   |-VerbatimLineComment 0x559b74c67db0 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x559b74c67e20 <line:4556:1>
|     `-TextComment 0x559b74c67df0 <col:1> Text=" "
|-FunctionDecl 0x559b74bbbd18 <line:4573:1, col:29> col:13 k_free 'void (void *)' extern
| |-ParmVarDecl 0x559b74bbbc90 <col:20, col:26> col:26 ptr 'void *'
| `-FullComment 0x559b74c68410 <line:4560:3, line:4572:1>
|   |-ParagraphComment 0x559b74c67f30 <line:4560:3>
|   | `-TextComment 0x559b74c67f00 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c67f50 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x559b74c67fb0 <col:10, col:42>
|   |   `-TextComment 0x559b74c67f80 <col:10, col:42> Text=" Free memory allocated from heap."
|   |-ParagraphComment 0x559b74c68050 <line:4562:3, line:4564:23>
|   | |-TextComment 0x559b74c67fd0 <line:4562:3, col:71> Text=" This routine provides traditional free() semantics. The memory being"
|   | |-TextComment 0x559b74c67ff0 <line:4563:3, col:65> Text=" returned must have been allocated from the heap memory pool or"
|   | `-TextComment 0x559b74c68010 <line:4564:3, col:23> Text=" k_mem_pool_malloc()."
|   |-ParagraphComment 0x559b74c68120 <line:4566:3, col:48>
|   | |-TextComment 0x559b74c68070 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x559b74c680c0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="ptr"
|   | `-TextComment 0x559b74c680e0 <col:13, col:48> Text=" is NULL, no operation is performed."
|   |-ParagraphComment 0x559b74c68170 <line:4568:3>
|   | `-TextComment 0x559b74c68140 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c68190 <col:4, col:53> [in] implicitly Param="ptr" ParamIndex=0
|   | `-ParagraphComment 0x559b74c68220 <col:14, col:53>
|   |   `-TextComment 0x559b74c681f0 <col:14, col:53> Text=" Pointer to previously allocated memory."
|   |-ParagraphComment 0x559b74c68270 <line:4570:3>
|   | `-TextComment 0x559b74c68240 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c68290 <col:4, line:4571:3> Name="return"
|   | `-ParagraphComment 0x559b74c68310 <line:4570:11, line:4571:3>
|   |   |-TextComment 0x559b74c682c0 <line:4570:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c682e0 <line:4571:3> Text=" "
|   |-VerbatimLineComment 0x559b74c68330 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x559b74c683a0 <line:4572:1>
|     `-TextComment 0x559b74c68370 <col:1> Text=" "
|-FunctionDecl 0x559b74bbbf88 <line:4587:1, col:48> col:14 k_calloc 'void *(size_t, size_t)' extern
| |-ParmVarDecl 0x559b74bbbdf8 <col:23, col:30> col:30 nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74bbbe68 <col:37, col:44> col:44 size 'size_t':'unsigned long'
| `-FullComment 0x559b74c68960 <line:4576:3, line:4586:1>
|   |-ParagraphComment 0x559b74c684b0 <line:4576:3>
|   | `-TextComment 0x559b74c68480 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c684d0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x559b74c68530 <col:10, col:48>
|   |   `-TextComment 0x559b74c68500 <col:10, col:48> Text=" Allocate memory from heap, array style"
|   |-ParagraphComment 0x559b74c685a0 <line:4578:3, line:4579:50>
|   | |-TextComment 0x559b74c68550 <line:4578:3, col:66> Text=" This routine provides traditional calloc() semantics. Memory is"
|   | `-TextComment 0x559b74c68570 <line:4579:3, col:50> Text=" allocated from the heap memory pool and zeroed."
|   |-ParagraphComment 0x559b74c685f0 <line:4581:3>
|   | `-TextComment 0x559b74c685c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c68610 <col:4, line:4582:3> [in] implicitly Param="nmemb" ParamIndex=0
|   | `-ParagraphComment 0x559b74c686c0 <line:4581:16, line:4582:3>
|   |   |-TextComment 0x559b74c68670 <line:4581:16, col:57> Text=" Number of elements in the requested array"
|   |   `-TextComment 0x559b74c68690 <line:4582:3> Text=" "
|   |-ParamCommandComment 0x559b74c686e0 <col:4, col:53> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x559b74c68770 <col:15, col:53>
|   |   `-TextComment 0x559b74c68740 <col:15, col:53> Text=" Size of each array element (in bytes)."
|   |-ParagraphComment 0x559b74c687c0 <line:4584:3>
|   | `-TextComment 0x559b74c68790 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c687e0 <col:4, line:4585:3> Name="return"
|   | `-ParagraphComment 0x559b74c68860 <line:4584:11, line:4585:3>
|   |   |-TextComment 0x559b74c68810 <line:4584:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x559b74c68830 <line:4585:3> Text=" "
|   |-VerbatimLineComment 0x559b74c68880 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x559b74c688f0 <line:4586:1>
|     `-TextComment 0x559b74c688c0 <col:1> Text=" "
|-EnumDecl 0x559b74bbc068 <line:4600:1, line:4614:1> line:4600:6 _poll_types_bits
| |-EnumConstantDecl 0x559b74bbc120 <line:4602:2> col:2 _POLL_TYPE_IGNORE 'int'
| |-EnumConstantDecl 0x559b74bbc168 <line:4605:2> col:2 _POLL_TYPE_SIGNAL 'int'
| |-EnumConstantDecl 0x559b74bbc1b0 <line:4608:2> col:2 _POLL_TYPE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x559b74bbc1f8 <line:4611:2> col:2 _POLL_TYPE_DATA_AVAILABLE 'int'
| `-EnumConstantDecl 0x559b74bbc240 <line:4613:2> col:2 referenced _POLL_NUM_TYPES 'int'
|-EnumDecl 0x559b74bbc288 <line:4619:1, line:4636:1> line:4619:6 _poll_states_bits
| |-EnumConstantDecl 0x559b74bbc340 <line:4621:2> col:2 _POLL_STATE_NOT_READY 'int'
| |-EnumConstantDecl 0x559b74bbc388 <line:4624:2> col:2 _POLL_STATE_SIGNALED 'int'
| |-EnumConstantDecl 0x559b74bbc3d0 <line:4627:2> col:2 _POLL_STATE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x559b74bbc418 <line:4630:2> col:2 _POLL_STATE_DATA_AVAILABLE 'int'
| |-EnumConstantDecl 0x559b74bbc460 <line:4633:2> col:2 _POLL_STATE_CANCELLED 'int'
| `-EnumConstantDecl 0x559b74bbc4a8 <line:4635:2> col:2 referenced _POLL_NUM_STATES 'int'
|-EnumDecl 0x559b74bbc518 <line:4667:1, line:4672:1> line:4667:6 k_poll_modes
| |-EnumConstantDecl 0x559b74bbc5f0 <line:4669:2, col:28> col:2 K_POLL_MODE_NOTIFY_ONLY 'int'
| | `-IntegerLiteral 0x559b74bbc5d0 <col:28> 'int' 0
| `-EnumConstantDecl 0x559b74bbc638 <line:4671:2> col:2 K_POLL_NUM_MODES 'int'
|-RecordDecl 0x559b74bbc680 prev 0x559b74b73580 <line:4683:1, line:4695:1> line:4683:8 struct k_poll_signal definition
| |-FieldDecl 0x559b74bbc748 <line:4685:2, col:14> col:14 poll_events 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x559b74c68a30 <line:4684:5, col:28>
| |   `-ParagraphComment 0x559b74c68a00 <col:5, col:28>
| |     `-TextComment 0x559b74c689d0 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x559b74bbdcd0 <line:4691:2, col:15> col:15 referenced signaled 'unsigned int'
| | `-FullComment 0x559b74c68b60 <line:4688:4, line:4689:24>
| |   `-ParagraphComment 0x559b74c68b30 <line:4688:4, line:4689:24>
| |     |-TextComment 0x559b74c68ae0 <line:4688:4, col:71> Text=" 1 if the event has been signaled, 0 otherwise. Stays set to 1 until"
| |     `-TextComment 0x559b74c68b00 <line:4689:4, col:24> Text=" user resets it to 0."
| `-FieldDecl 0x559b74bbdd60 <line:4694:2, col:6> col:6 result 'int'
|   `-FullComment 0x559b74c68c30 <line:4693:5, col:67>
|     `-ParagraphComment 0x559b74c68c00 <col:5, col:67>
|       `-TextComment 0x559b74c68bd0 <col:5, col:67> Text=" custom result value passed to k_poll_signal_raise() if needed "
|-RecordDecl 0x559b74bbddd8 prev 0x559b74b734d0 <line:4707:1, line:4737:1> line:4707:8 struct k_poll_event definition
| |-FullComment 0x559b74c68de0 <line:4704:3, line:4706:1>
| | |-ParagraphComment 0x559b74c68cd0 <line:4704:3>
| | | `-TextComment 0x559b74c68ca0 <col:3> Text=" "
| | |-BlockCommandComment 0x559b74c68cf0 <col:4, col:20> Name="brief"
| | | `-ParagraphComment 0x559b74c68d50 <col:10, col:20>
| | |   `-TextComment 0x559b74c68d20 <col:10, col:20> Text=" Poll Event"
| | `-ParagraphComment 0x559b74c68da0 <line:4706:1>
| |   `-TextComment 0x559b74c68d70 <col:1> Text=" "
| |-FieldDecl 0x559b74bbde98 <line:4709:2, col:14> col:14 _node 'sys_dnode_t':'struct _dnode'
| | `-FullComment 0x559b74c68eb0 <line:4708:5, col:28>
| |   `-ParagraphComment 0x559b74c68e80 <col:5, col:28>
| |     `-TextComment 0x559b74c68e50 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x559b74bbdf90 <line:4712:2, col:18> col:18 poller 'struct _poller *'
| | `-FullComment 0x559b74c68f80 <line:4711:5, col:28>
| |   `-ParagraphComment 0x559b74c68f50 <col:5, col:28>
| |     `-TextComment 0x559b74c68f20 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x559b74bbe038 <line:4715:2, col:12> col:8 tag 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x559b74bbe008 <col:12> 'int' 8
| | `-FullComment 0x559b74c69050 <line:4714:5, col:63>
| |   `-ParagraphComment 0x559b74c69020 <col:5, col:63>
| |     `-TextComment 0x559b74c68ff0 <col:5, col:63> Text=" optional user-specified tag, opaque, untouched by the API "
| |-FieldDecl 0x559b74bbe0e0 <line:4718:2, col:13> col:8 type 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x559b74bbe0a8 <col:13> 'int' EnumConstant 0x559b74bbc240 '_POLL_NUM_TYPES' 'int'
| | `-FullComment 0x559b74c69120 <line:4717:5, col:67>
| |   `-ParagraphComment 0x559b74c690f0 <col:5, col:67>
| |     `-TextComment 0x559b74c690c0 <col:5, col:67> Text=" bitfield of event types (bitwise-ORed K_POLL_TYPE_xxx values) "
| |-FieldDecl 0x559b74bbe190 <line:4721:2, col:14> col:8 state 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x559b74bbe158 <col:14> 'int' EnumConstant 0x559b74bbc4a8 '_POLL_NUM_STATES' 'int'
| | `-FullComment 0x559b74c691f0 <line:4720:5, col:69>
| |   `-ParagraphComment 0x559b74c691c0 <col:5, col:69>
| |     `-TextComment 0x559b74c69190 <col:5, col:69> Text=" bitfield of event states (bitwise-ORed K_POLL_STATE_xxx values) "
| |-FieldDecl 0x559b74bbe238 <line:4724:2, col:13> col:8 mode 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x559b74bbe208 <col:13> 'int' 1
| | `-FullComment 0x559b74c692c0 <line:4723:5, col:47>
| |   `-ParagraphComment 0x559b74c69290 <col:5, col:47>
| |     `-TextComment 0x559b74c69260 <col:5, col:47> Text=" mode of operation, from enum k_poll_modes "
| |-FieldDecl 0x559b74bbe490 <line:4727:2, line:4646:9> line:4727:8 unused 'u32_t':'unsigned int'
| | |-ParenExpr 0x559b74bbe460 <line:4641:2, line:4646:9> 'int'
| | | `-BinaryOperator 0x559b74bbe438 <line:4641:3, line:4646:8> 'int' '-'
| | |   |-IntegerLiteral 0x559b74bbe2a8 <line:4641:3> 'int' 32
| | |   `-ParenExpr 0x559b74bbe418 <col:8, line:4646:8> 'int'
| | |     `-BinaryOperator 0x559b74bbe3f0 <line:4641:9, line:4645:11> 'int' '+'
| | |       |-BinaryOperator 0x559b74bbe3a8 <line:4641:9, line:4644:11> 'int' '+'
| | |       | |-BinaryOperator 0x559b74bbe358 <line:4641:9, line:4643:11> 'int' '+'
| | |       | | |-BinaryOperator 0x559b74bbe308 <line:4641:9, line:4642:11> 'int' '+'
| | |       | | | |-IntegerLiteral 0x559b74bbe2c8 <line:4641:9> 'int' 0
| | |       | | | `-IntegerLiteral 0x559b74bbe2e8 <line:4642:11> 'int' 8
| | |       | | `-DeclRefExpr 0x559b74bbe330 <line:4643:11> 'int' EnumConstant 0x559b74bbc240 '_POLL_NUM_TYPES' 'int'
| | |       | `-DeclRefExpr 0x559b74bbe380 <line:4644:11> 'int' EnumConstant 0x559b74bbc4a8 '_POLL_NUM_STATES' 'int'
| | |       `-IntegerLiteral 0x559b74bbe3d0 <line:4645:11> 'int' 1
| | `-FullComment 0x559b74c69390 <line:4726:5, col:32>
| |   `-ParagraphComment 0x559b74c69360 <col:5, col:32>
| |     `-TextComment 0x559b74c69330 <col:5, col:32> Text=" unused bits in 32-bit word "
| |-RecordDecl 0x559b74bbe508 <line:4730:2, line:4736:2> line:4730:2 union definition
| | |-FullComment 0x559b74c69460 <line:4729:5, col:19>
| | | `-ParagraphComment 0x559b74c69430 <col:5, col:19>
| | |   `-TextComment 0x559b74c69400 <col:5, col:19> Text=" per-type data "
| | |-FieldDecl 0x559b74bbe5c8 <line:4731:3, col:9> col:9 obj 'void *'
| | |-FieldDecl 0x559b74bbe6c0 <line:4732:3, col:25> col:25 signal 'struct k_poll_signal *'
| | |-FieldDecl 0x559b74bbe730 <line:4733:3, col:17> col:17 sem 'struct k_sem *'
| | |-FieldDecl 0x559b74bbe830 <line:4734:3, col:18> col:18 fifo 'struct k_fifo *'
| | `-FieldDecl 0x559b74bbe8a0 <line:4735:3, col:19> col:19 queue 'struct k_queue *'
| |-FieldDecl 0x559b74bbe940 <line:4730:2> col:2 implicit 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| |-IndirectFieldDecl 0x559b74bbe998 <line:4731:9> col:9 implicit obj 'void *'
| | |-Field 0x559b74bbe940 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x559b74bbe5c8 'obj' 'void *'
| |-IndirectFieldDecl 0x559b74bbe9e8 <line:4732:25> col:25 implicit signal 'struct k_poll_signal *'
| | |-Field 0x559b74bbe940 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x559b74bbe6c0 'signal' 'struct k_poll_signal *'
| |-IndirectFieldDecl 0x559b74bbea38 <line:4733:17> col:17 implicit sem 'struct k_sem *'
| | |-Field 0x559b74bbe940 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x559b74bbe730 'sem' 'struct k_sem *'
| |-IndirectFieldDecl 0x559b74bbea88 <line:4734:18> col:18 implicit fifo 'struct k_fifo *'
| | |-Field 0x559b74bbe940 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x559b74bbe830 'fifo' 'struct k_fifo *'
| `-IndirectFieldDecl 0x559b74bbead8 <line:4735:19> col:19 implicit queue 'struct k_queue *'
|   |-Field 0x559b74bbe940 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
|   `-Field 0x559b74bbe8a0 'queue' 'struct k_queue *'
|-FunctionDecl 0x559b74bbf810 <line:4778:1, line:4779:29> line:4778:13 k_poll_event_init 'void (struct k_poll_event *, u32_t, int, void *)' extern
| |-ParmVarDecl 0x559b74bbeb70 <col:31, col:52> col:52 event 'struct k_poll_event *'
| |-ParmVarDecl 0x559b74bbebe0 <col:59, col:65> col:65 type 'u32_t':'unsigned int'
| |-ParmVarDecl 0x559b74bbec58 <line:4779:10, col:14> col:14 mode 'int'
| |-ParmVarDecl 0x559b74bbf6d0 <col:20, col:26> col:26 obj 'void *'
| `-FullComment 0x559b74c69be0 <line:4761:3, line:4776:1>
|   |-ParagraphComment 0x559b74c69500 <line:4761:3>
|   | `-TextComment 0x559b74c694d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c69520 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x559b74c69580 <col:10, col:53>
|   |   `-TextComment 0x559b74c69550 <col:10, col:53> Text=" Initialize one struct k_poll_event instance"
|   |-ParagraphComment 0x559b74c695f0 <line:4763:3, line:4764:53>
|   | |-TextComment 0x559b74c695a0 <line:4763:3, col:73> Text=" After this routine is called on a poll event, the event it ready to be"
|   | `-TextComment 0x559b74c695c0 <line:4764:3, col:53> Text=" placed in an event array to be passed to k_poll()."
|   |-ParagraphComment 0x559b74c69640 <line:4766:3>
|   | `-TextComment 0x559b74c69610 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c69660 <col:4, line:4767:3> [in] implicitly Param="event" ParamIndex=0
|   | `-ParagraphComment 0x559b74c69710 <line:4766:16, line:4767:3>
|   |   |-TextComment 0x559b74c696c0 <line:4766:16, col:40> Text=" The event to initialize."
|   |   `-TextComment 0x559b74c696e0 <line:4767:3> Text=" "
|   |-ParamCommandComment 0x559b74c69730 <col:4, line:4771:3> [in] implicitly Param="type" ParamIndex=1
|   | `-ParagraphComment 0x559b74c69860 <line:4767:15, line:4771:3>
|   |   |-TextComment 0x559b74c69790 <line:4767:15, col:73> Text=" A bitfield of the types of event, from the K_POLL_TYPE_xxx"
|   |   |-TextComment 0x559b74c697b0 <line:4768:3, col:77> Text="             values. Only values that apply to the same object being polled"
|   |   |-TextComment 0x559b74c697d0 <line:4769:3, col:77> Text="             can be used together. Choosing K_POLL_TYPE_IGNORE disables the"
|   |   |-TextComment 0x559b74c697f0 <line:4770:3, col:21> Text="             event."
|   |   `-TextComment 0x559b74c69810 <line:4771:3> Text=" "
|   |-ParamCommandComment 0x559b74c69880 <col:4, line:4772:3> [in] implicitly Param="mode" ParamIndex=2
|   | `-ParagraphComment 0x559b74c69930 <line:4771:15, line:4772:3>
|   |   |-TextComment 0x559b74c698e0 <line:4771:15, col:51> Text=" Future. Use K_POLL_MODE_NOTIFY_ONLY."
|   |   `-TextComment 0x559b74c69900 <line:4772:3> Text=" "
|   |-ParamCommandComment 0x559b74c69950 <col:4, col:43> [in] implicitly Param="obj" ParamIndex=3
|   | `-ParagraphComment 0x559b74c699e0 <col:14, col:43>
|   |   `-TextComment 0x559b74c699b0 <col:14, col:43> Text=" Kernel object or poll signal."
|   |-ParagraphComment 0x559b74c69a30 <line:4774:3>
|   | `-TextComment 0x559b74c69a00 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c69a50 <col:4, line:4775:3> Name="return"
|   | `-ParagraphComment 0x559b74c69ad0 <line:4774:11, line:4775:3>
|   |   |-TextComment 0x559b74c69a80 <line:4774:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c69aa0 <line:4775:3> Text=" "
|   |-VerbatimLineComment 0x559b74c69af0 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x559b74c69b60 <line:4776:1>
|     `-TextComment 0x559b74c69b30 <col:1> Text=" "
|-FunctionDecl 0x559b74bbfb48 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4827:21> line:4826:15 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x559b74bbf920 <col:22, col:43> col:43 events 'struct k_poll_event *'
| |-ParmVarDecl 0x559b74bbf998 <col:51, col:55> col:55 num_events 'int'
| |-ParmVarDecl 0x559b74bbfa08 <line:4827:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x559b74c6a800 <line:4782:3, line:4824:1>
|   |-ParagraphComment 0x559b74c69c80 <line:4782:3>
|   | `-TextComment 0x559b74c69c50 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c69ca0 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x559b74c69d00 <col:10, col:63>
|   |   `-TextComment 0x559b74c69cd0 <col:10, col:63> Text=" Wait for one or many of multiple poll events to occur"
|   |-ParagraphComment 0x559b74c69da0 <line:4784:3, line:4786:61>
|   | |-TextComment 0x559b74c69d20 <line:4784:3, col:71> Text=" This routine allows a thread to wait concurrently for one or many of"
|   | |-TextComment 0x559b74c69d40 <line:4785:3, col:76> Text=" multiple poll events to have occurred. Such events can be a kernel object"
|   | `-TextComment 0x559b74c69d60 <line:4786:3, col:61> Text=" being available, like a semaphore, or a poll signal event."
|   |-ParagraphComment 0x559b74c69f30 <line:4788:3, line:4796:68>
|   | |-TextComment 0x559b74c69dc0 <line:4788:3, col:78> Text=" When an event notifies that a kernel object is available, the kernel object"
|   | |-TextComment 0x559b74c69de0 <line:4789:3, col:76> Text=" is not "given" to the thread calling k_poll(): it merely signals the fact"
|   | |-TextComment 0x559b74c69e00 <line:4790:3, col:76> Text=" that the object was available when the k_poll() call was in effect. Also,"
|   | |-TextComment 0x559b74c69e20 <line:4791:3, col:78> Text=" all threads trying to acquire an object the regular way, i.e. by pending on"
|   | |-TextComment 0x559b74c69e40 <line:4792:3, col:74> Text=" the object, have precedence over the thread polling on the object. This"
|   | |-TextComment 0x559b74c69e60 <line:4793:3, col:75> Text=" means that the polling thread will never get the poll event on an object"
|   | |-TextComment 0x559b74c69e80 <line:4794:3, col:75> Text=" until the object becomes available and its pend queue is empty. For this"
|   | |-TextComment 0x559b74c69ea0 <line:4795:3, col:76> Text=" reason, the k_poll() call is more effective when the objects being polled"
|   | `-TextComment 0x559b74c69ec0 <line:4796:3, col:68> Text=" only have one thread, the polling thread, trying to acquire them."
|   |-ParagraphComment 0x559b74c69fd0 <line:4798:3, line:4800:44>
|   | |-TextComment 0x559b74c69f50 <line:4798:3, col:78> Text=" When k_poll() returns 0, the caller should loop on all the events that were"
|   | |-TextComment 0x559b74c69f70 <line:4799:3, col:72> Text=" passed to k_poll() and check the state field for the values that were"
|   | `-TextComment 0x559b74c69f90 <line:4800:3, col:44> Text=" expected and take the associated actions."
|   |-ParagraphComment 0x559b74c6a040 <line:4802:3, line:4803:41>
|   | |-TextComment 0x559b74c69ff0 <line:4802:3, col:78> Text=" Before being reused for another call to k_poll(), the user has to reset the"
|   | `-TextComment 0x559b74c6a010 <line:4803:3, col:41> Text=" state field to K_POLL_STATE_NOT_READY."
|   |-ParagraphComment 0x559b74c6a0b0 <line:4805:3, line:4806:30>
|   | |-TextComment 0x559b74c6a060 <line:4805:3, col:77> Text=" When called from user mode, a temporary memory allocation is required from"
|   | `-TextComment 0x559b74c6a080 <line:4806:3, col:30> Text=" the caller's resource pool."
|   |-ParagraphComment 0x559b74c6a100 <line:4808:3>
|   | `-TextComment 0x559b74c6a0d0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c6a120 <col:4, line:4809:3> [in] implicitly Param="events" ParamIndex=0
|   | `-ParagraphComment 0x559b74c6a1d0 <line:4808:17, line:4809:3>
|   |   |-TextComment 0x559b74c6a180 <line:4808:17, col:65> Text=" An array of pointers to events to be polled for."
|   |   `-TextComment 0x559b74c6a1a0 <line:4809:3> Text=" "
|   |-ParamCommandComment 0x559b74c6a1f0 <col:4, line:4810:3> [in] implicitly Param="num_events" ParamIndex=1
|   | `-ParagraphComment 0x559b74c6a2a0 <line:4809:21, line:4810:3>
|   |   |-TextComment 0x559b74c6a250 <line:4809:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x559b74c6a270 <line:4810:3> Text=" "
|   |-ParamCommandComment 0x559b74c6a2c0 <col:4, line:4812:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x559b74c6a3a0 <line:4810:18, line:4812:28>
|   |   |-TextComment 0x559b74c6a320 <line:4810:18, col:74> Text=" Non-negative waiting period for an event to be ready (in"
|   |   |-TextComment 0x559b74c6a340 <line:4811:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x559b74c6a360 <line:4812:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x559b74c6a6e0 <line:4814:3, line:4823:3>
|   | |-TextComment 0x559b74c6a3c0 <line:4814:3> Text=" "
|   | |-InlineCommandComment 0x559b74c6a3e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c6a400 <col:11, col:42> Text=" 0 One or more events are ready."
|   | |-TextComment 0x559b74c6a420 <line:4815:3> Text=" "
|   | |-InlineCommandComment 0x559b74c6a440 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c6a460 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x559b74c6a480 <line:4816:3> Text=" "
|   | |-InlineCommandComment 0x559b74c6a4a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c6a4c0 <col:11, col:57> Text=" -EINTR Polling has been interrupted, e.g. with"
|   | |-TextComment 0x559b74c6a4e0 <line:4817:3, col:76> Text="         k_queue_cancel_wait(). All output events are still set and valid,"
|   | |-TextComment 0x559b74c6a500 <line:4818:3, col:77> Text="         cancelled event(s) will be set to K_POLL_STATE_CANCELLED. In other"
|   | |-TextComment 0x559b74c6a520 <line:4819:3, col:75> Text="         words, -EINTR status means that at least one of output events is"
|   | |-TextComment 0x559b74c6a540 <line:4820:3, col:34> Text="         K_POLL_STATE_CANCELLED."
|   | |-TextComment 0x559b74c6a560 <line:4821:3> Text=" "
|   | |-InlineCommandComment 0x559b74c6a580 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c6a5a0 <col:11, col:76> Text=" -ENOMEM Thread resource pool insufficient memory (user mode only)"
|   | |-TextComment 0x559b74c6a5c0 <line:4822:3> Text=" "
|   | |-InlineCommandComment 0x559b74c6a5e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c6a600 <col:11, col:50> Text=" -EINVAL Bad parameters (user mode only)"
|   | `-TextComment 0x559b74c6a620 <line:4823:3> Text=" "
|   |-VerbatimLineComment 0x559b74c6a700 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x559b74c6a770 <line:4824:1>
|     `-TextComment 0x559b74c6a740 <col:1> Text=" "
|-FunctionDecl 0x559b74bbfd50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4840:63> col:16 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x559b74bbfc50 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| `-FullComment 0x559b74c6ac80 <line:4830:3, line:4838:1>
|   |-ParagraphComment 0x559b74c6a8a0 <line:4830:3>
|   | `-TextComment 0x559b74c6a870 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6a8c0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x559b74c6a920 <col:10, col:42>
|   |   `-TextComment 0x559b74c6a8f0 <col:10, col:42> Text=" Initialize a poll signal object."
|   |-ParagraphComment 0x559b74c6a970 <line:4832:3, col:71>
|   | `-TextComment 0x559b74c6a940 <col:3, col:71> Text=" Ready a poll signal object to be signaled via k_poll_signal_raise()."
|   |-ParagraphComment 0x559b74c6a9c0 <line:4834:3>
|   | `-TextComment 0x559b74c6a990 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c6a9e0 <col:4, col:31> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x559b74c6aa70 <col:17, col:31>
|   |   `-TextComment 0x559b74c6aa40 <col:17, col:31> Text=" A poll signal."
|   |-ParagraphComment 0x559b74c6aae0 <line:4836:3>
|   | `-TextComment 0x559b74c6aab0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6ab00 <col:4, line:4837:3> Name="return"
|   | `-ParagraphComment 0x559b74c6ab80 <line:4836:11, line:4837:3>
|   |   |-TextComment 0x559b74c6ab30 <line:4836:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c6ab50 <line:4837:3> Text=" "
|   |-VerbatimLineComment 0x559b74c6aba0 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x559b74c6ac10 <line:4838:1>
|     `-TextComment 0x559b74c6abe0 <col:1> Text=" "
|-FunctionDecl 0x559b74bbfea8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4848:64> col:16 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| `-ParmVarDecl 0x559b74bbfe20 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
|-FunctionDecl 0x559b74bc0000 <line:4850:1, line:4853:1> line:4850:20 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x559b74bbff78 <col:47, col:69> col:69 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x559b74bc0198 <line:4851:1, line:4853:1>
|   `-BinaryOperator 0x559b74bc0140 <line:4852:2, col:21> 'unsigned int' '='
|     |-MemberExpr 0x559b74bc00e8 <col:2, col:10> 'unsigned int' lvalue ->signaled 0x559b74bbdcd0
|     | `-ImplicitCastExpr 0x559b74bc00d0 <col:2> 'struct k_poll_signal *' <LValueToRValue>
|     |   `-DeclRefExpr 0x559b74bc00a8 <col:2> 'struct k_poll_signal *' lvalue ParmVar 0x559b74bbff78 'signal' 'struct k_poll_signal *'
|     `-IntegerLiteral 0x559b74bc0120 <col:21> 'unsigned int' 0
|-FunctionDecl 0x559b74bc0400 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4867:43> line:4866:16 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x559b74bc01d8 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x559b74bc0250 <line:4867:8, col:22> col:22 signaled 'unsigned int *'
| |-ParmVarDecl 0x559b74bc02c8 <col:32, col:37> col:37 result 'int *'
| `-FullComment 0x559b74c6b1d0 <line:4856:3, line:4865:1>
|   |-ParagraphComment 0x559b74c6ad20 <line:4856:3>
|   | `-TextComment 0x559b74c6acf0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6ad40 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x559b74c6ada0 <col:10, col:68>
|   |   `-TextComment 0x559b74c6ad70 <col:10, col:68> Text=" Fetch the signaled state and result value of a poll signal"
|   |-ParagraphComment 0x559b74c6adf0 <line:4858:3>
|   | `-TextComment 0x559b74c6adc0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c6ae10 <col:4, line:4859:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x559b74c6aec0 <line:4858:17, line:4859:3>
|   |   |-TextComment 0x559b74c6ae70 <line:4858:17, col:37> Text=" A poll signal object"
|   |   `-TextComment 0x559b74c6ae90 <line:4859:3> Text=" "
|   |-ParamCommandComment 0x559b74c6aee0 <col:4, line:4861:3> [in] implicitly Param="signaled" ParamIndex=1
|   | `-ParagraphComment 0x559b74c6afc0 <line:4859:19, line:4861:3>
|   |   |-TextComment 0x559b74c6af40 <line:4859:19, col:73> Text=" An integer buffer which will be written nonzero if the"
|   |   |-TextComment 0x559b74c6af60 <line:4860:3, col:26> Text="		   object was signaled"
|   |   `-TextComment 0x559b74c6af80 <line:4861:3> Text=" "
|   |-ParamCommandComment 0x559b74c6afe0 <col:4, line:4864:3> [in] implicitly Param="result" ParamIndex=2
|   | `-ParagraphComment 0x559b74c6b0e0 <line:4861:17, line:4864:3>
|   |   |-TextComment 0x559b74c6b040 <line:4861:17, col:77> Text=" An integer destination buffer which will be written with the"
|   |   |-TextComment 0x559b74c6b060 <line:4862:3, col:63> Text="		   result value if the object was signaled, or an undefined"
|   |   |-TextComment 0x559b74c6b080 <line:4863:3, col:27> Text="		   value if it was not."
|   |   `-TextComment 0x559b74c6b0a0 <line:4864:3> Text=" "
|   |-VerbatimLineComment 0x559b74c6b100 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x559b74c6b170 <line:4865:1>
|     `-TextComment 0x559b74c6b140 <col:1> Text=" "
|-FunctionDecl 0x559b74bc0b50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4894:75> col:15 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x559b74bc0510 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x559b74bc0588 <col:65, col:69> col:69 result 'int'
| `-FullComment 0x559b74c6ba40 <line:4870:3, line:4892:1>
|   |-ParagraphComment 0x559b74c6b270 <line:4870:3>
|   | `-TextComment 0x559b74c6b240 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6b290 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x559b74c6b2f0 <col:10, col:38>
|   |   `-TextComment 0x559b74c6b2c0 <col:10, col:38> Text=" Signal a poll signal object."
|   |-ParagraphComment 0x559b74c6b410 <line:4872:3, line:4874:57>
|   | |-TextComment 0x559b74c6b310 <line:4872:3, col:77> Text=" This routine makes ready a poll signal, which is basically a poll event of"
|   | |-TextComment 0x559b74c6b330 <line:4873:3, col:77> Text=" type K_POLL_TYPE_SIGNAL. If a thread was polling on that event, it will be"
|   | |-TextComment 0x559b74c6b350 <line:4874:3, col:24> Text=" made ready to run. A "
|   | |-InlineCommandComment 0x559b74c6b3a0 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="result"
|   | `-TextComment 0x559b74c6b3c0 <col:34, col:57> Text=" value can be specified."
|   |-ParagraphComment 0x559b74c6b500 <line:4876:3, line:4880:27>
|   | |-TextComment 0x559b74c6b430 <line:4876:3, col:64> Text=" The poll signal contains a 'signaled' field that, when set by"
|   | |-TextComment 0x559b74c6b450 <line:4877:3, col:73> Text=" k_poll_signal_raise(), stays set until the user sets it back to 0 with"
|   | |-TextComment 0x559b74c6b470 <line:4878:3, col:74> Text=" k_poll_signal_reset(). It thus has to be reset by the user before being"
|   | |-TextComment 0x559b74c6b490 <line:4879:3, col:76> Text=" passed again to k_poll() or k_poll() will consider it being signaled, and"
|   | `-TextComment 0x559b74c6b4b0 <line:4880:3, col:27> Text=" will return immediately."
|   |-ParagraphComment 0x559b74c6b550 <line:4882:3>
|   | `-TextComment 0x559b74c6b520 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6b570 <col:4, line:4884:65> Name="note"
|   | `-ParagraphComment 0x559b74c6b620 <line:4882:9, line:4884:65>
|   |   |-TextComment 0x559b74c6b5a0 <line:4882:9, col:69> Text=" The result is stored and the 'signaled' field is set even if"
|   |   |-TextComment 0x559b74c6b5c0 <line:4883:3, col:70> Text=" this function returns an error indicating that an expiring poll was"
|   |   `-TextComment 0x559b74c6b5e0 <line:4884:3, col:65> Text=" not notified.  The next k_poll() will detect the missed raise."
|   |-ParagraphComment 0x559b74c6b670 <line:4886:3>
|   | `-TextComment 0x559b74c6b640 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c6b690 <col:4, line:4887:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x559b74c6b740 <line:4886:17, line:4887:3>
|   |   |-TextComment 0x559b74c6b6f0 <line:4886:17, col:31> Text=" A poll signal."
|   |   `-TextComment 0x559b74c6b710 <line:4887:3> Text=" "
|   |-ParamCommandComment 0x559b74c6b760 <col:4, col:70> [in] implicitly Param="result" ParamIndex=1
|   | `-ParagraphComment 0x559b74c6b7f0 <col:17, col:70>
|   |   `-TextComment 0x559b74c6b7c0 <col:17, col:70> Text=" The value to store in the result field of the signal."
|   |-ParagraphComment 0x559b74c6b930 <line:4889:3, line:4891:3>
|   | |-TextComment 0x559b74c6b810 <line:4889:3> Text=" "
|   | |-InlineCommandComment 0x559b74c6b830 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c6b850 <col:11, col:51> Text=" 0 The signal was delivered successfully."
|   | |-TextComment 0x559b74c6b870 <line:4890:3> Text=" "
|   | |-InlineCommandComment 0x559b74c6b890 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559b74c6b8b0 <col:11, col:78> Text=" -EAGAIN The polling thread's timeout is in the process of expiring."
|   | `-TextComment 0x559b74c6b8d0 <line:4891:3> Text=" "
|   |-VerbatimLineComment 0x559b74c6b950 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x559b74c6b9c0 <line:4892:1>
|     `-TextComment 0x559b74c6b990 <col:1> Text=" "
|-FunctionDecl 0x559b74bc0dc0 <line:4899:1, col:70> col:13 z_handle_obj_poll_events 'void (sys_dlist_t *, u32_t)' extern
| |-ParmVarDecl 0x559b74bc0c38 <col:38, col:51> col:51 events 'sys_dlist_t *'
| |-ParmVarDecl 0x559b74bc0ca8 <col:59, col:65> col:65 state 'u32_t':'unsigned int'
| `-FullComment 0x559b74c6bb30 <line:4897:3, col:12>
|   `-ParagraphComment 0x559b74c6bb00 <col:3, col:12>
|     |-TextComment 0x559b74c6bab0 <col:3> Text=" "
|     `-InlineCommandComment 0x559b74c6bad0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x559b74bc0f58 <line:4921:1, line:4924:1> line:4921:20 k_cpu_idle 'void (void)' static inline
| |-CompoundStmt 0x559b74bc1088 <line:4922:1, line:4924:1>
| | `-CallExpr 0x559b74bc1038 <line:4923:2, col:16> 'void'
| |   `-ImplicitCastExpr 0x559b74bc1020 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
| |     `-DeclRefExpr 0x559b74bc0ff8 <col:2> 'void (void)' Function 0x559b74b386d0 'arch_cpu_idle' 'void (void)'
| `-FullComment 0x559b74c6c130 <line:4904:3, line:4920:1>
|   |-ParagraphComment 0x559b74c6bbd0 <line:4904:3>
|   | `-TextComment 0x559b74c6bba0 <col:3> Text=" "
|   |-VerbatimLineComment 0x559b74c6bbf0 <col:4, col:43> Text=" cpu_idle_apis CPU Idling APIs"
|   |-ParagraphComment 0x559b74c6bc60 <line:4905:3>
|   | `-TextComment 0x559b74c6bc30 <col:3> Text=" "
|   |-VerbatimLineComment 0x559b74c6bc80 <col:4, col:24> Text=" kernel_apis"
|   |-ParagraphComment 0x559b74c6bd40 <line:4906:3, col:5>
|   | |-TextComment 0x559b74c6bcc0 <col:3> Text=" "
|   | |-TextComment 0x559b74c6bce0 <col:4> Text="@"
|   | `-TextComment 0x559b74c6bd00 <col:5> Text="{"
|   |-ParagraphComment 0x559b74c6bd90 <line:4909:3>
|   | `-TextComment 0x559b74c6bd60 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6bdb0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x559b74c6be10 <col:10, col:28>
|   |   `-TextComment 0x559b74c6bde0 <col:10, col:28> Text=" Make the CPU idle."
|   |-ParagraphComment 0x559b74c6be60 <line:4911:3, col:63>
|   | `-TextComment 0x559b74c6be30 <col:3, col:63> Text=" This function makes the CPU idle until an event wakes it up."
|   |-ParagraphComment 0x559b74c6bf20 <line:4913:3, line:4916:59>
|   | |-TextComment 0x559b74c6be80 <line:4913:3, col:77> Text=" In a regular system, the idle thread should be the only thread responsible"
|   | |-TextComment 0x559b74c6bea0 <line:4914:3, col:71> Text=" for making the CPU idle and triggering any type of power management."
|   | |-TextComment 0x559b74c6bec0 <line:4915:3, col:79> Text=" However, in some more constrained systems, such as a single-threaded system,"
|   | `-TextComment 0x559b74c6bee0 <line:4916:3, col:59> Text=" the only thread would be responsible for this if needed."
|   |-ParagraphComment 0x559b74c6bf70 <line:4918:3>
|   | `-TextComment 0x559b74c6bf40 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6bf90 <col:4, line:4919:3> Name="return"
|   | `-ParagraphComment 0x559b74c6c010 <line:4918:11, line:4919:3>
|   |   |-TextComment 0x559b74c6bfc0 <line:4918:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c6bfe0 <line:4919:3> Text=" "
|   |-VerbatimLineComment 0x559b74c6c030 <col:4, col:23> Text=" K-CPU-IDLE-001"
|   `-ParagraphComment 0x559b74c6c0a0 <line:4920:1>
|     `-TextComment 0x559b74c6c070 <col:1> Text=" "
|-FunctionDecl 0x559b74bc1140 <line:4937:1, line:4940:1> line:4937:20 k_cpu_atomic_idle 'void (unsigned int)' static inline
| |-ParmVarDecl 0x559b74bc10b8 <col:38, col:51> col:51 used key 'unsigned int'
| |-CompoundStmt 0x559b74bc12f8 <line:4938:1, line:4940:1>
| | `-CallExpr 0x559b74bc1250 <line:4939:2, col:26> 'void'
| |   |-ImplicitCastExpr 0x559b74bc1238 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x559b74bc11e8 <col:2> 'void (unsigned int)' Function 0x559b74b38870 'arch_cpu_atomic_idle' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x559b74bc1280 <col:23> 'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x559b74bc1210 <col:23> 'unsigned int' lvalue ParmVar 0x559b74bc10b8 'key' 'unsigned int'
| `-FullComment 0x559b74c6c5b0 <line:4927:3, line:4936:1>
|   |-ParagraphComment 0x559b74c6c1d0 <line:4927:3>
|   | `-TextComment 0x559b74c6c1a0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6c1f0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c6c250 <col:10, col:49>
|   |   `-TextComment 0x559b74c6c220 <col:10, col:49> Text=" Make the CPU idle in an atomic fashion."
|   |-ParagraphComment 0x559b74c6c2c0 <line:4929:3, line:4930:54>
|   | |-TextComment 0x559b74c6c270 <line:4929:3, col:75> Text=" Similar to k_cpu_idle(), but called with interrupts locked if operations"
|   | `-TextComment 0x559b74c6c290 <line:4930:3, col:54> Text=" must be done atomically before making the CPU idle."
|   |-ParagraphComment 0x559b74c6c310 <line:4932:3>
|   | `-TextComment 0x559b74c6c2e0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c6c330 <col:4, col:61> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x559b74c6c3c0 <col:14, col:61>
|   |   `-TextComment 0x559b74c6c390 <col:14, col:61> Text=" Interrupt locking key obtained from irq_lock()."
|   |-ParagraphComment 0x559b74c6c410 <line:4934:3>
|   | `-TextComment 0x559b74c6c3e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6c430 <col:4, line:4935:3> Name="return"
|   | `-ParagraphComment 0x559b74c6c4b0 <line:4934:11, line:4935:3>
|   |   |-TextComment 0x559b74c6c460 <line:4934:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559b74c6c480 <line:4935:3> Text=" "
|   |-VerbatimLineComment 0x559b74c6c4d0 <col:4, col:23> Text=" K-CPU-IDLE-002"
|   `-ParagraphComment 0x559b74c6c540 <line:4936:1>
|     `-TextComment 0x559b74c6c510 <col:1> Text=" "
|-FunctionDecl 0x559b74bc1420 <line:4949:1, col:51> col:13 z_sys_power_save_idle_exit 'void (s32_t)' extern
| |-ParmVarDecl 0x559b74bc1320 <col:40, col:46> col:46 ticks 's32_t':'int'
| `-FullComment 0x559b74c6c6a0 <line:4947:3, col:12>
|   `-ParagraphComment 0x559b74c6c670 <col:3, col:12>
|     |-TextComment 0x559b74c6c620 <col:3> Text=" "
|     `-InlineCommandComment 0x559b74c6c640 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x559b74bc1880 <line:5008:1, line:5010:30> line:5008:13 z_init_thread_base 'void (struct _thread_base *, int, u32_t, unsigned int)' extern
| |-ParmVarDecl 0x559b74bc15e0 <col:32, col:53> col:53 thread_base 'struct _thread_base *'
| |-ParmVarDecl 0x559b74bc1658 <line:5009:10, col:14> col:14 priority 'int'
| |-ParmVarDecl 0x559b74bc16c8 <col:24, col:30> col:30 initial_state 'u32_t':'unsigned int'
| |-ParmVarDecl 0x559b74bc1740 <line:5010:10, col:23> col:23 options 'unsigned int'
| `-FullComment 0x559b74c6c790 <line:5006:3, col:12>
|   `-ParagraphComment 0x559b74c6c760 <col:3, col:12>
|     |-TextComment 0x559b74c6c710 <col:3> Text=" "
|     `-InlineCommandComment 0x559b74c6c730 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x559b74bc1a28 <line:5027:1, col:39> col:13 z_is_thread_essential 'bool (void)' extern
| `-FullComment 0x559b74c6c880 <line:5025:3, col:12>
|   `-ParagraphComment 0x559b74c6c850 <col:3, col:12>
|     |-TextComment 0x559b74c6c800 <col:3> Text=" "
|     `-InlineCommandComment 0x559b74c6c820 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x559b74bc3f58 <line:5031:1, col:58> col:13 z_timer_expiration_handler 'void (struct _timeout *)' extern
| |-ParmVarDecl 0x559b74bc3ed0 <col:40, col:57> col:57 t 'struct _timeout *'
| `-FullComment 0x559b74c6c970 <line:5029:3, col:12>
|   `-ParagraphComment 0x559b74c6c940 <col:3, col:12>
|     |-TextComment 0x559b74c6c8f0 <col:3> Text=" "
|     `-InlineCommandComment 0x559b74c6c910 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x559b74bc4298 <line:5177:1, line:5180:1> line:5177:21 Z_THREAD_STACK_BUFFER 'char *(k_thread_stack_t *)' static inline
| |-ParmVarDecl 0x559b74bc4188 <col:43, col:61> col:61 used sym 'k_thread_stack_t *'
| |-CompoundStmt 0x559b74bc4438 <line:5178:1, line:5180:1>
| | `-ReturnStmt 0x559b74bc43c0 <line:5179:2, col:17>
| |   `-CStyleCastExpr 0x559b74bc4398 <col:9, col:17> 'char *' <BitCast>
| |     `-ImplicitCastExpr 0x559b74bc4380 <col:17> 'k_thread_stack_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x559b74bc4340 <col:17> 'k_thread_stack_t *' lvalue ParmVar 0x559b74bc4188 'sym' 'k_thread_stack_t *'
| `-FullComment 0x559b74c6cdc0 <line:5168:3, line:5176:1>
|   |-ParagraphComment 0x559b74c6ca10 <line:5168:3>
|   | `-TextComment 0x559b74c6c9e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6ca30 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x559b74c6ca90 <col:10, col:52>
|   |   `-TextComment 0x559b74c6ca60 <col:10, col:52> Text=" Get a pointer to the physical stack buffer"
|   |-ParagraphComment 0x559b74c6cb10 <line:5170:3, line:5171:76>
|   | |-TextComment 0x559b74c6cac0 <line:5170:3, col:72> Text=" This macro is deprecated. If a stack buffer needs to be examined, the"
|   | `-TextComment 0x559b74c6cae0 <line:5171:3, col:76> Text=" bounds should be obtained from the associated thread's stack_info struct."
|   |-ParagraphComment 0x559b74c6cb60 <line:5173:3>
|   | `-TextComment 0x559b74c6cb30 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c6cb80 <col:4, line:5174:3> [in] implicitly Param="sym" ParamIndex=0
|   | `-ParagraphComment 0x559b74c6cc30 <line:5173:14, line:5174:3>
|   |   |-TextComment 0x559b74c6cbe0 <line:5173:14, col:40> Text=" Declared stack symbol name"
|   |   `-TextComment 0x559b74c6cc00 <line:5174:3> Text=" "
|   |-BlockCommandComment 0x559b74c6cc50 <col:4, line:5175:3> Name="return"
|   | `-ParagraphComment 0x559b74c6ccd0 <line:5174:11, line:5175:3>
|   |   |-TextComment 0x559b74c6cc80 <line:5174:11, col:38> Text=" The buffer itself, a char *"
|   |   `-TextComment 0x559b74c6cca0 <line:5175:3> Text=" "
|   |-VerbatimLineComment 0x559b74c6ccf0 <col:4, col:21> Text=" K-TSTACK-001"
|   `-ParagraphComment 0x559b74c6cd60 <line:5176:1>
|     `-TextComment 0x559b74c6cd30 <col:1> Text=" "
|-RecordDecl 0x559b74bc4450 prev 0x559b74b736b8 <line:5207:1, line:5216:1> line:5207:8 struct k_mem_partition definition
| |-FieldDecl 0x559b74bc4518 <line:5209:2, col:12> col:12 start 'uintptr_t':'unsigned long'
| | `-FullComment 0x559b74c6ce90 <line:5208:5, col:39>
| |   `-ParagraphComment 0x559b74c6ce60 <col:5, col:39>
| |     `-TextComment 0x559b74c6ce30 <col:5, col:39> Text=" start address of memory partition "
| `-FieldDecl 0x559b74bc4598 <line:5211:2, col:9> col:9 size 'size_t':'unsigned long'
|   `-FullComment 0x559b74c6cf60 <line:5210:5, col:30>
|     `-ParagraphComment 0x559b74c6cf30 <col:5, col:30>
|       `-TextComment 0x559b74c6cf00 <col:5, col:30> Text=" size of memory partition "
|-RecordDecl 0x559b74bc4608 prev 0x559b74b73630 <line:5222:1, line:5231:1> line:5222:8 struct k_mem_domain definition
| |-FullComment 0x559b74c6d110 <line:5219:3, line:5221:1>
| | |-ParagraphComment 0x559b74c6d000 <line:5219:3>
| | | `-TextComment 0x559b74c6cfd0 <col:3> Text=" "
| | |-BlockCommandComment 0x559b74c6d020 <col:4, col:23> Name="brief"
| | | `-ParagraphComment 0x559b74c6d080 <col:10, col:23>
| | |   `-TextComment 0x559b74c6d050 <col:10, col:23> Text=" Memory Domain"
| | `-ParagraphComment 0x559b74c6d0d0 <line:5221:1>
| |   `-TextComment 0x559b74c6d0a0 <col:1> Text=" "
| |-FieldDecl 0x559b74bc46c8 <line:5228:2, col:14> col:14 mem_domain_q 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x559b74c6d1e0 <line:5227:5, col:14>
| |   `-ParagraphComment 0x559b74c6d1b0 <col:5, col:14>
| |     `-TextComment 0x559b74c6d180 <col:5, col:14> Text=" domain q "
| `-FieldDecl 0x559b74bc4748 <line:5230:2, col:7> col:7 num_partitions 'u8_t':'unsigned char'
|   `-FullComment 0x559b74c6d2b0 <line:5229:5, col:40>
|     `-ParagraphComment 0x559b74c6d280 <col:5, col:40>
|       `-TextComment 0x559b74c6d250 <col:5, col:40> Text=" number of partitions in the domain "
|-FunctionDecl 0x559b74bc4c20 <line:5248:1, line:5249:41> line:5248:13 k_mem_domain_init 'void (struct k_mem_domain *, u8_t, struct k_mem_partition **)' extern
| |-ParmVarDecl 0x559b74bc4870 <col:31, col:52> col:52 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x559b74bc48e0 <col:60, col:65> col:65 num_parts 'u8_t':'unsigned char'
| |-ParmVarDecl 0x559b74bc4af0 <line:5249:10, col:40> col:34 parts 'struct k_mem_partition **':'struct k_mem_partition **'
| `-FullComment 0x559b74c6d880 <line:5235:3, line:5247:1>
|   |-ParagraphComment 0x559b74c6d350 <line:5235:3>
|   | `-TextComment 0x559b74c6d320 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6d370 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x559b74c6d3d0 <col:10, col:37>
|   |   `-TextComment 0x559b74c6d3a0 <col:10, col:37> Text=" Initialize a memory domain."
|   |-ParagraphComment 0x559b74c6d420 <line:5237:3, col:68>
|   | `-TextComment 0x559b74c6d3f0 <col:3, col:68> Text=" Initialize a memory domain with given name and memory partitions."
|   |-ParagraphComment 0x559b74c6d490 <line:5239:3, line:5240:25>
|   | |-TextComment 0x559b74c6d440 <line:5239:3, col:71> Text=" See documentation for k_mem_domain_add_partition() for details about"
|   | `-TextComment 0x559b74c6d460 <line:5240:3, col:25> Text=" partition constraints."
|   |-ParagraphComment 0x559b74c6d4e0 <line:5242:3>
|   | `-TextComment 0x559b74c6d4b0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c6d500 <col:4, line:5243:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x559b74c6d5b0 <line:5242:17, line:5243:3>
|   |   |-TextComment 0x559b74c6d560 <line:5242:17, col:53> Text=" The memory domain to be initialized."
|   |   `-TextComment 0x559b74c6d580 <line:5243:3> Text=" "
|   |-ParamCommandComment 0x559b74c6d5d0 <col:4, line:5244:3> [in] implicitly Param="num_parts" ParamIndex=1
|   | `-ParagraphComment 0x559b74c6d680 <line:5243:20, line:5244:3>
|   |   |-TextComment 0x559b74c6d630 <line:5243:20, col:67> Text=" The number of array items of "parts" parameter."
|   |   `-TextComment 0x559b74c6d650 <line:5244:3> Text=" "
|   |-ParamCommandComment 0x559b74c6d6a0 <col:4, line:5246:3> [in] implicitly Param="parts" ParamIndex=2
|   | `-ParagraphComment 0x559b74c6d780 <line:5244:16, line:5246:3>
|   |   |-TextComment 0x559b74c6d700 <line:5244:16, col:74> Text=" An array of pointers to the memory partitions. Can be NULL"
|   |   |-TextComment 0x559b74c6d720 <line:5245:3, col:37> Text="              if num_parts is zero."
|   |   `-TextComment 0x559b74c6d740 <line:5246:3> Text=" "
|   |-VerbatimLineComment 0x559b74c6d7a0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x559b74c6d810 <line:5247:1>
|     `-TextComment 0x559b74c6d7e0 <col:1> Text=" "
|-FunctionDecl 0x559b74bc4e30 <line:5258:1, col:61> col:13 k_mem_domain_destroy 'void (struct k_mem_domain *)' extern
| |-ParmVarDecl 0x559b74bc4d30 <col:34, col:55> col:55 domain 'struct k_mem_domain *'
| `-FullComment 0x559b74c6dc00 <line:5251:3, line:5257:1>
|   |-ParagraphComment 0x559b74c6d920 <line:5251:3>
|   | `-TextComment 0x559b74c6d8f0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6d940 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x559b74c6d9a0 <col:10, col:34>
|   |   `-TextComment 0x559b74c6d970 <col:10, col:34> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x559b74c6d9f0 <line:5253:3, col:27>
|   | `-TextComment 0x559b74c6d9c0 <col:3, col:27> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x559b74c6da40 <line:5255:3>
|   | `-TextComment 0x559b74c6da10 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c6da60 <col:4, line:5256:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x559b74c6db10 <line:5255:17, line:5256:3>
|   |   |-TextComment 0x559b74c6dac0 <line:5255:17, col:51> Text=" The memory domain to be destroyed."
|   |   `-TextComment 0x559b74c6dae0 <line:5256:3> Text=" "
|   |-VerbatimLineComment 0x559b74c6db30 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x559b74c6dba0 <line:5257:1>
|     `-TextComment 0x559b74c6db70 <col:1> Text=" "
|-FunctionDecl 0x559b74bc5760 <line:5284:1, line:5285:39> line:5284:13 k_mem_domain_add_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x559b74bc55c0 <col:40, col:61> col:61 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x559b74bc5648 <line:5285:11, col:35> col:35 part 'struct k_mem_partition *'
| `-FullComment 0x559b74c6e2a0 <line:5261:3, line:5283:1>
|   |-ParagraphComment 0x559b74c6dca0 <line:5261:3>
|   | `-TextComment 0x559b74c6dc70 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6dcc0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x559b74c6dd20 <col:10, col:54>
|   |   `-TextComment 0x559b74c6dcf0 <col:10, col:54> Text=" Add a memory partition into a memory domain."
|   |-ParagraphComment 0x559b74c6dd90 <line:5263:3, line:5264:29>
|   | |-TextComment 0x559b74c6dd40 <line:5263:3, col:74> Text=" Add a memory partition into a memory domain. Partitions must conform to"
|   | `-TextComment 0x559b74c6dd60 <line:5264:3, col:29> Text=" the following constraints:"
|   |-ParagraphComment 0x559b74c6df40 <line:5266:3, line:5275:28>
|   | |-TextComment 0x559b74c6ddb0 <line:5266:3, col:71> Text=" - Partition bounds must be within system RAM boundaries on MMU-based"
|   | |-TextComment 0x559b74c6ddd0 <line:5267:3, col:13> Text="   systems."
|   | |-TextComment 0x559b74c6ddf0 <line:5268:3, col:69> Text=" - Partitions in the same memory domain may not overlap each other."
|   | |-TextComment 0x559b74c6de10 <line:5269:3, col:63> Text=" - Partitions must not be defined which expose private kernel"
|   | |-TextComment 0x559b74c6de30 <line:5270:3, col:39> Text="   data structures or kernel objects."
|   | |-TextComment 0x559b74c6de50 <line:5271:3, col:75> Text=" - The starting address alignment, and the partition size must conform to"
|   | |-TextComment 0x559b74c6de70 <line:5272:3, col:72> Text="   the constraints of the underlying memory management hardware, which"
|   | |-TextComment 0x559b74c6de90 <line:5273:3, col:29> Text="   varies per architecture."
|   | |-TextComment 0x559b74c6deb0 <line:5274:3, col:75> Text=" - Memory domain partitions are only intended to control access to memory"
|   | `-TextComment 0x559b74c6ded0 <line:5275:3, col:28> Text="   from user mode threads."
|   |-ParagraphComment 0x559b74c6dfb0 <line:5277:3, line:5278:12>
|   | |-TextComment 0x559b74c6df60 <line:5277:3, col:70> Text=" Violating these constraints may lead to CPU exceptions or undefined"
|   | `-TextComment 0x559b74c6df80 <line:5278:3, col:12> Text=" behavior."
|   |-ParagraphComment 0x559b74c6e000 <line:5280:3>
|   | `-TextComment 0x559b74c6dfd0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c6e020 <col:4, line:5281:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x559b74c6e0d0 <line:5280:17, line:5281:3>
|   |   |-TextComment 0x559b74c6e080 <line:5280:17, col:66> Text=" The memory domain to be added a memory partition."
|   |   `-TextComment 0x559b74c6e0a0 <line:5281:3> Text=" "
|   |-ParamCommandComment 0x559b74c6e0f0 <col:4, line:5282:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x559b74c6e1a0 <line:5281:15, line:5282:3>
|   |   |-TextComment 0x559b74c6e150 <line:5281:15, col:47> Text=" The memory partition to be added"
|   |   `-TextComment 0x559b74c6e170 <line:5282:3> Text=" "
|   |-VerbatimLineComment 0x559b74c6e1c0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x559b74c6e230 <line:5283:1>
|     `-TextComment 0x559b74c6e200 <col:1> Text=" "
|-FunctionDecl 0x559b74bc5978 <line:5296:1, line:5297:35> line:5296:13 k_mem_domain_remove_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x559b74bc5860 <col:43, col:64> col:64 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x559b74bc58e8 <line:5297:7, col:31> col:31 part 'struct k_mem_partition *'
| `-FullComment 0x559b74c6e6f0 <line:5288:3, line:5295:1>
|   |-ParagraphComment 0x559b74c6e340 <line:5288:3>
|   | `-TextComment 0x559b74c6e310 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6e360 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x559b74c6e3c0 <col:10, col:57>
|   |   `-TextComment 0x559b74c6e390 <col:10, col:57> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x559b74c6e410 <line:5290:3, col:50>
|   | `-TextComment 0x559b74c6e3e0 <col:3, col:50> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x559b74c6e460 <line:5292:3>
|   | `-TextComment 0x559b74c6e430 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c6e480 <col:4, line:5293:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x559b74c6e530 <line:5292:17, line:5293:3>
|   |   |-TextComment 0x559b74c6e4e0 <line:5292:17, col:68> Text=" The memory domain to be removed a memory partition."
|   |   `-TextComment 0x559b74c6e500 <line:5293:3> Text=" "
|   |-ParamCommandComment 0x559b74c6e550 <col:4, line:5294:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x559b74c6e600 <line:5293:15, line:5294:3>
|   |   |-TextComment 0x559b74c6e5b0 <line:5293:15, col:49> Text=" The memory partition to be removed"
|   |   `-TextComment 0x559b74c6e5d0 <line:5294:3> Text=" "
|   |-VerbatimLineComment 0x559b74c6e620 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x559b74c6e690 <line:5295:1>
|     `-TextComment 0x559b74c6e660 <col:1> Text=" "
|-FunctionDecl 0x559b74bc5c00 <line:5309:1, line:5310:23> line:5309:13 k_mem_domain_add_thread 'void (struct k_mem_domain *, k_tid_t)' extern
| |-ParmVarDecl 0x559b74bc5a80 <col:37, col:58> col:58 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x559b74bc5af0 <line:5310:9, col:17> col:17 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x559b74c6ebb0 <line:5300:3, line:5308:1>
|   |-ParagraphComment 0x559b74c6e790 <line:5300:3>
|   | `-TextComment 0x559b74c6e760 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6e7b0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559b74c6e810 <col:10, col:44>
|   |   `-TextComment 0x559b74c6e7e0 <col:10, col:44> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x559b74c6e860 <line:5302:3, col:37>
|   | `-TextComment 0x559b74c6e830 <col:3, col:37> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x559b74c6e8b0 <line:5304:3>
|   | `-TextComment 0x559b74c6e880 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c6e8d0 <col:4, line:5305:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x559b74c6e980 <line:5304:17, line:5305:3>
|   |   |-TextComment 0x559b74c6e930 <line:5304:17, col:77> Text=" The memory domain that the thread is going to be added into."
|   |   `-TextComment 0x559b74c6e950 <line:5305:3> Text=" "
|   |-ParamCommandComment 0x559b74c6e9a0 <col:4, col:71> [in] implicitly Param="thread" ParamIndex=1
|   | `-ParagraphComment 0x559b74c6ea30 <col:17, col:71>
|   |   `-TextComment 0x559b74c6ea00 <col:17, col:71> Text=" ID of thread going to be added into the memory domain."
|   |-ParagraphComment 0x559b74c6ea80 <line:5307:3>
|   | `-TextComment 0x559b74c6ea50 <col:3> Text=" "
|   |-VerbatimLineComment 0x559b74c6ead0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x559b74c6eb40 <line:5308:1>
|     `-TextComment 0x559b74c6eb10 <col:1> Text=" "
|-FunctionDecl 0x559b74bc5d70 <line:5320:1, col:54> col:13 k_mem_domain_remove_thread 'void (k_tid_t)' extern
| |-ParmVarDecl 0x559b74bc5ce8 <col:40, col:48> col:48 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x559b74c6ef30 <line:5313:3, line:5319:1>
|   |-ParagraphComment 0x559b74c6ec50 <line:5313:3>
|   | `-TextComment 0x559b74c6ec20 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6ec70 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x559b74c6ecd0 <col:10, col:49>
|   |   `-TextComment 0x559b74c6eca0 <col:10, col:49> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x559b74c6ed20 <line:5315:3, col:42>
|   | `-TextComment 0x559b74c6ecf0 <col:3, col:42> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x559b74c6ed70 <line:5317:3>
|   | `-TextComment 0x559b74c6ed40 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c6ed90 <col:4, line:5318:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x559b74c6ee40 <line:5317:17, line:5318:3>
|   |   |-TextComment 0x559b74c6edf0 <line:5317:17, col:73> Text=" ID of thread going to be removed from its memory domain."
|   |   `-TextComment 0x559b74c6ee10 <line:5318:3> Text=" "
|   |-VerbatimLineComment 0x559b74c6ee60 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x559b74c6eed0 <line:5319:1>
|     `-TextComment 0x559b74c6eea0 <col:1> Text=" "
|-FunctionDecl 0x559b74bc5f68 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:5356:54> col:15 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x559b74bc5ea0 <col:31, col:48> col:48 thread 'struct k_thread *'
| `-FullComment 0x559b74c6f550 <line:5337:3, line:5354:74>
|   |-ParagraphComment 0x559b74c6efd0 <line:5337:3>
|   | `-TextComment 0x559b74c6efa0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6eff0 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x559b74c6f050 <col:10, col:69>
|   |   `-TextComment 0x559b74c6f020 <col:10, col:69> Text=" Disable preservation of floating point context information."
|   |-ParagraphComment 0x559b74c6f0c0 <line:5339:3, line:5340:56>
|   | |-TextComment 0x559b74c6f070 <line:5339:3, col:60> Text=" This routine informs the kernel that the specified thread"
|   | `-TextComment 0x559b74c6f090 <line:5340:3, col:56> Text=" will no longer be using the floating point registers."
|   |-ParagraphComment 0x559b74c6f110 <line:5342:3>
|   | `-TextComment 0x559b74c6f0e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6f130 <col:4, line:5344:63> Name="warning"
|   | `-ParagraphComment 0x559b74c6f1b0 <line:5343:3, line:5344:63>
|   |   |-TextComment 0x559b74c6f160 <line:5343:3, col:73> Text=" Some architectures apply restrictions on how the disabling of floating"
|   |   `-TextComment 0x559b74c6f180 <line:5344:3, col:63> Text=" point preservation may be requested, see arch_float_disable."
|   |-ParagraphComment 0x559b74c6f200 <line:5346:3>
|   | `-TextComment 0x559b74c6f1d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559b74c6f220 <col:4, line:5348:52> Name="warning"
|   | `-ParagraphComment 0x559b74c6f2a0 <line:5347:3, line:5348:52>
|   |   |-TextComment 0x559b74c6f250 <line:5347:3, col:73> Text=" This routine should only be used to disable floating point support for"
|   |   `-TextComment 0x559b74c6f270 <line:5348:3, col:52> Text=" a thread that currently has such support enabled."
|   |-ParagraphComment 0x559b74c6f2f0 <line:5350:3>
|   | `-TextComment 0x559b74c6f2c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559b74c6f310 <col:4, col:30> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x559b74c6f3a0 <col:17, col:30>
|   |   `-TextComment 0x559b74c6f370 <col:17, col:30> Text=" ID of thread."
|   `-ParagraphComment 0x559b74c6f4e0 <line:5352:3, line:5354:74>
|     |-TextComment 0x559b74c6f3c0 <line:5352:3> Text=" "
|     |-InlineCommandComment 0x559b74c6f3e0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x559b74c6f400 <col:11, col:30> Text=" 0       On success."
|     |-TextComment 0x559b74c6f420 <line:5353:3> Text=" "
|     |-InlineCommandComment 0x559b74c6f440 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x559b74c6f460 <col:11, col:70> Text=" -ENOSYS If the floating point disabling is not implemented."
|     `-TextComment 0x559b74c6f480 <line:5354:3, col:74> Text="         -EINVAL If the floating point disabling could not be performed."
|-FunctionDecl 0x559b74bcaed0 prev 0x559b74b76ad0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:24:1, col:81> col:13 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' extern
| |-ParmVarDecl 0x559b74bc63b0 <col:42, col:49> col:49 object 'void *'
| `-ParmVarDecl 0x559b74bc6438 <col:57, col:75> col:75 thread 'struct k_thread *'
|-FunctionDecl 0x559b74bcb0b0 prev 0x559b74b78c00 <line:25:1, line:35:1> line:25:20 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x559b74bcaf98 <col:42, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x559b74bcb020 <col:57, col:75> col:75 used thread 'struct k_thread *'
| `-CompoundStmt 0x559b74bcb3b8 <line:26:1, line:35:1>
|   |-DoStmt 0x559b74bcb240 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bcb208 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bcb1b8 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bcb220 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bcb350 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:34:2, col:45> 'void'
|     |-ImplicitCastExpr 0x559b74bcb338 <col:2> 'void (*)(void *, struct k_thread *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bcb260 <col:2> 'void (void *, struct k_thread *)' Function 0x559b74bcaed0 'z_impl_k_object_access_grant' 'void (void *, struct k_thread *)'
|     |-ImplicitCastExpr 0x559b74bcb388 <col:31> 'void *' <LValueToRValue>
|     | `-DeclRefExpr 0x559b74bcb288 <col:31> 'void *' lvalue ParmVar 0x559b74bcaf98 'object' 'void *'
|     `-ImplicitCastExpr 0x559b74bcb3a0 <col:39> 'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bcb2b0 <col:39> 'struct k_thread *' lvalue ParmVar 0x559b74bcb020 'thread' 'struct k_thread *'
|-FunctionDecl 0x559b74bcb478 prev 0x559b74b786f8 <line:38:1, col:50> col:13 used z_impl_k_object_release 'void (void *)' extern
| `-ParmVarDecl 0x559b74bcb3f0 <col:37, col:44> col:44 object 'void *'
|-FunctionDecl 0x559b74bcb5c0 prev 0x559b74b78f88 <line:39:1, line:49:1> line:39:20 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x559b74bcb538 <col:37, col:44> col:44 used object 'void *'
| `-CompoundStmt 0x559b74bcb818 <line:40:1, line:49:1>
|   |-DoStmt 0x559b74bcb748 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bcb710 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bcb6c0 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bcb728 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bcb7d0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:48:2, col:32> 'void'
|     |-ImplicitCastExpr 0x559b74bcb7b8 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bcb768 <col:2> 'void (void *)' Function 0x559b74bcb478 'z_impl_k_object_release' 'void (void *)'
|     `-ImplicitCastExpr 0x559b74bcb800 <col:26> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bcb790 <col:26> 'void *' lvalue ParmVar 0x559b74bcb538 'object' 'void *'
|-FunctionDecl 0x559b74bcb8e8 prev 0x559b74b794a8 <line:52:1, col:57> col:15 used z_impl_k_object_alloc 'void *(enum k_objects)' extern
| `-ParmVarDecl 0x559b74bcb858 <col:37, col:52> col:52 otype 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x559b74bcba40 prev 0x559b74b79350 <line:53:1, line:62:1> line:53:22 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x559b74bcb9b0 <col:37, col:52> col:52 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x559b74bcbd10 <line:54:1, line:62:1>
|   |-DoStmt 0x559b74bcbbc8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bcbb90 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bcbb40 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bcbba8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bcbcf8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:61:2, col:36>
|     `-CallExpr 0x559b74bcbcb0 <col:9, col:36> 'void *'
|       |-ImplicitCastExpr 0x559b74bcbc98 <col:9> 'void *(*)(enum k_objects)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bcbbe8 <col:9> 'void *(enum k_objects)' Function 0x559b74bcb8e8 'z_impl_k_object_alloc' 'void *(enum k_objects)'
|       `-ImplicitCastExpr 0x559b74bcbce0 <col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bcbc10 <col:31> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x559b74bcb9b0 'otype' 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x559b74bcc270 <line:65:1, col:207> col:16 used z_impl_k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' extern
| |-ParmVarDecl 0x559b74bcbd58 <col:39, col:57> col:57 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x559b74bcbdc8 <col:69, col:88> col:88 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x559b74bcbe38 <col:95, col:102> col:102 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74bcbee0 <col:114, col:131> col:131 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x559b74bcbf58 <col:138, col:145> col:145 p1 'void *'
| |-ParmVarDecl 0x559b74bcbfd0 <col:149, col:156> col:156 p2 'void *'
| |-ParmVarDecl 0x559b74bcc048 <col:160, col:167> col:167 p3 'void *'
| |-ParmVarDecl 0x559b74bcc0c0 <col:171, col:175> col:175 prio 'int'
| |-ParmVarDecl 0x559b74bcc130 <col:181, col:187> col:187 options 'u32_t':'unsigned int'
| `-ParmVarDecl 0x559b74bcc1a0 <col:196, col:202> col:202 delay 's32_t':'int'
|-FunctionDecl 0x559b74bcc868 prev 0x559b74b7dda0 <line:66:1, line:82:1> line:66:23 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x559b74bcc388 <col:39, col:57> col:57 used new_thread 'struct k_thread *'
| |-ParmVarDecl 0x559b74bcc3f8 <col:69, col:88> col:88 used stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x559b74bcc468 <col:95, col:102> col:102 used stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74bcc4d8 <col:114, col:131> col:131 used entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x559b74bcc550 <col:138, col:145> col:145 used p1 'void *'
| |-ParmVarDecl 0x559b74bcc5c8 <col:149, col:156> col:156 used p2 'void *'
| |-ParmVarDecl 0x559b74bcc640 <col:160, col:167> col:167 used p3 'void *'
| |-ParmVarDecl 0x559b74bcc6b8 <col:171, col:175> col:175 used prio 'int'
| |-ParmVarDecl 0x559b74bcc728 <col:181, col:187> col:187 used options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x559b74bcc798 <col:196, col:202> col:202 used delay 's32_t':'int'
| `-CompoundStmt 0x559b74bcce00 <line:67:1, line:82:1>
|   |-DoStmt 0x559b74bcca38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bcca00 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bcc9b0 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bcca18 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bccde8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:81:2, col:102>
|     `-CallExpr 0x559b74bccc80 <col:9, col:102> 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x559b74bccc68 <col:9> 'k_tid_t (*)(struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bcca58 <col:9> 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' Function 0x559b74bcc270 'z_impl_k_thread_create' 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)'
|       |-ImplicitCastExpr 0x559b74bcccf8 <col:32> 'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bcca80 <col:32> 'struct k_thread *' lvalue ParmVar 0x559b74bcc388 'new_thread' 'struct k_thread *'
|       |-ImplicitCastExpr 0x559b74bccd10 <col:44> 'k_thread_stack_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bccaa8 <col:44> 'k_thread_stack_t *' lvalue ParmVar 0x559b74bcc3f8 'stack' 'k_thread_stack_t *'
|       |-ImplicitCastExpr 0x559b74bccd28 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bccad0 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x559b74bcc468 'stack_size' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x559b74bccd40 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bccaf8 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' lvalue ParmVar 0x559b74bcc4d8 'entry' 'k_thread_entry_t':'void (*)(void *, void *, void *)'
|       |-ImplicitCastExpr 0x559b74bccd58 <col:70> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bccb20 <col:70> 'void *' lvalue ParmVar 0x559b74bcc550 'p1' 'void *'
|       |-ImplicitCastExpr 0x559b74bccd70 <col:74> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bccb48 <col:74> 'void *' lvalue ParmVar 0x559b74bcc5c8 'p2' 'void *'
|       |-ImplicitCastExpr 0x559b74bccd88 <col:78> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bccb70 <col:78> 'void *' lvalue ParmVar 0x559b74bcc640 'p3' 'void *'
|       |-ImplicitCastExpr 0x559b74bccda0 <col:82> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bccb98 <col:82> 'int' lvalue ParmVar 0x559b74bcc6b8 'prio' 'int'
|       |-ImplicitCastExpr 0x559b74bccdb8 <col:88> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bccbc0 <col:88> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74bcc728 'options' 'u32_t':'unsigned int'
|       `-ImplicitCastExpr 0x559b74bccdd0 <col:97> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bccbe8 <col:97> 's32_t':'int' lvalue ParmVar 0x559b74bcc798 'delay' 's32_t':'int'
|-FunctionDecl 0x559b74bccef0 <line:85:1, col:37> col:14 used z_impl_k_sleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x559b74bcce30 <col:29, col:35> col:35 ms 's32_t':'int'
|-FunctionDecl 0x559b74bcd030 prev 0x559b74b81830 <line:86:1, line:95:1> line:86:21 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x559b74bccfa8 <col:29, col:35> col:35 used ms 's32_t':'int'
| `-CompoundStmt 0x559b74bcd300 <line:87:1, line:95:1>
|   |-DoStmt 0x559b74bcd1b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bcd180 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bcd130 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bcd198 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bcd2e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:94:2, col:26>
|     `-CallExpr 0x559b74bcd2a0 <col:9, col:26> 's32_t':'int'
|       |-ImplicitCastExpr 0x559b74bcd288 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bcd1d8 <col:9> 's32_t (s32_t)' Function 0x559b74bccef0 'z_impl_k_sleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x559b74bcd2d0 <col:24> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bcd200 <col:24> 's32_t':'int' lvalue ParmVar 0x559b74bccfa8 'ms' 's32_t':'int'
|-FunctionDecl 0x559b74bcd3b8 <line:98:1, col:38> col:14 used z_impl_k_usleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x559b74bcd330 <col:30, col:36> col:36 us 's32_t':'int'
|-FunctionDecl 0x559b74bcd4f8 prev 0x559b74b819a0 <line:99:1, line:108:1> line:99:21 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x559b74bcd470 <col:30, col:36> col:36 used us 's32_t':'int'
| `-CompoundStmt 0x559b74bcd768 <line:100:1, line:108:1>
|   |-DoStmt 0x559b74bcd680 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bcd648 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bcd5f8 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bcd660 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bcd750 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:107:2, col:27>
|     `-CallExpr 0x559b74bcd708 <col:9, col:27> 's32_t':'int'
|       |-ImplicitCastExpr 0x559b74bcd6f0 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bcd6a0 <col:9> 's32_t (s32_t)' Function 0x559b74bcd3b8 'z_impl_k_usleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x559b74bcd738 <col:25> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bcd6c8 <col:25> 's32_t':'int' lvalue ParmVar 0x559b74bcd470 'us' 's32_t':'int'
|-FunctionDecl 0x559b74bcd820 <line:111:1, col:50> col:13 used z_impl_k_busy_wait 'void (u32_t)' extern
| `-ParmVarDecl 0x559b74bcd798 <col:32, col:38> col:38 usec_to_wait 'u32_t':'unsigned int'
|-FunctionDecl 0x559b74bcd960 prev 0x559b74b81b50 <line:112:1, line:122:1> line:112:20 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x559b74bcd8d8 <col:32, col:38> col:38 used usec_to_wait 'u32_t':'unsigned int'
| `-CompoundStmt 0x559b74bcdbe8 <line:113:1, line:122:1>
|   |-DoStmt 0x559b74bcdae8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bcdab0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bcda60 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bcdac8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bcdba0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:121:2, col:33> 'void'
|     |-ImplicitCastExpr 0x559b74bcdb88 <col:2> 'void (*)(u32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bcdb08 <col:2> 'void (u32_t)' Function 0x559b74bcd820 'z_impl_k_busy_wait' 'void (u32_t)'
|     `-ImplicitCastExpr 0x559b74bcdbd0 <col:21> 'u32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bcdb30 <col:21> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74bcd8d8 'usec_to_wait' 'u32_t':'unsigned int'
|-FunctionDecl 0x559b74bcdc28 <line:125:1, col:28> col:13 used z_impl_k_yield 'void ()' extern
|-FunctionDecl 0x559b74bcdce8 prev 0x559b74b81cb8 <line:126:1, line:136:1> line:126:20 k_yield 'void (void)' static inline
| `-CompoundStmt 0x559b74bcdf28 <line:127:1, line:136:1>
|   |-DoStmt 0x559b74bcde68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bcde30 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bcdde0 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bcde48 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bcdf00 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:135:2, col:17> 'void'
|     `-ImplicitCastExpr 0x559b74bcded8 <col:2> 'void (*)()' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x559b74bcde88 <col:2> 'void ()' Function 0x559b74bcdc28 'z_impl_k_yield' 'void ()'
|-FunctionDecl 0x559b74bcdfe0 <line:139:1, col:43> col:13 used z_impl_k_wakeup 'void (k_tid_t)' extern
| `-ParmVarDecl 0x559b74bcdf58 <col:29, col:37> col:37 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x559b74bce120 prev 0x559b74b81ea0 <line:140:1, line:150:1> line:140:20 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x559b74bce098 <col:29, col:37> col:37 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x559b74bce3d8 <line:141:1, line:150:1>
|   |-DoStmt 0x559b74bce2a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bce270 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bce220 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bce288 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bce390 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:149:2, col:24> 'void'
|     |-ImplicitCastExpr 0x559b74bce378 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bce2c8 <col:2> 'void (k_tid_t)' Function 0x559b74bcdfe0 'z_impl_k_wakeup' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x559b74bce3c0 <col:18> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bce2f0 <col:18> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x559b74bce098 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x559b74bce478 <line:153:1, col:37> col:16 used z_impl_k_current_get 'k_tid_t ()' extern
|-FunctionDecl 0x559b74bce538 prev 0x559b74b82090 <line:154:1, line:163:1> line:154:23 k_current_get 'k_tid_t (void)' static inline
| `-CompoundStmt 0x559b74bce7b0 <line:155:1, line:163:1>
|   |-DoStmt 0x559b74bce6b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bce680 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bce630 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bce698 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bce798 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:162:2, col:30>
|     `-CallExpr 0x559b74bce770 <col:9, col:30> 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x559b74bce758 <col:9> 'k_tid_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x559b74bce6d8 <col:9> 'k_tid_t ()' Function 0x559b74bce478 'z_impl_k_current_get' 'k_tid_t ()'
|-FunctionDecl 0x559b74bce868 <line:166:1, col:49> col:13 used z_impl_k_thread_abort 'void (k_tid_t)' extern
| `-ParmVarDecl 0x559b74bce7e0 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x559b74bce9a8 prev 0x559b74b821f0 <line:167:1, line:177:1> line:167:20 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x559b74bce920 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x559b74bcec00 <line:168:1, line:177:1>
|   |-DoStmt 0x559b74bceb30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bceaf8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bceaa8 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bceb10 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bcebb8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:176:2, col:30> 'void'
|     |-ImplicitCastExpr 0x559b74bceba0 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bceb50 <col:2> 'void (k_tid_t)' Function 0x559b74bce868 'z_impl_k_thread_abort' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x559b74bcebe8 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bceb78 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x559b74bce920 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x559b74bcecb8 <line:180:1, col:49> col:13 used z_impl_k_thread_start 'void (k_tid_t)' extern
| `-ParmVarDecl 0x559b74bcec30 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x559b74bcedf8 prev 0x559b74b82360 <line:181:1, line:191:1> line:181:20 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x559b74bced70 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x559b74bcf068 <line:182:1, line:191:1>
|   |-DoStmt 0x559b74bcef98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bcef60 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bcef10 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bcef78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bcf020 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:190:2, col:30> 'void'
|     |-ImplicitCastExpr 0x559b74bcf008 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bcefb8 <col:2> 'void (k_tid_t)' Function 0x559b74bcecb8 'z_impl_k_thread_start' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x559b74bcf050 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bcefe0 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x559b74bced70 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x559b74bcf128 <line:194:1, col:55> col:12 used z_impl_k_thread_priority_get 'int (k_tid_t)' extern
| `-ParmVarDecl 0x559b74bcf098 <col:41, col:49> col:49 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x559b74bcf270 prev 0x559b74b82b88 <line:195:1, line:204:1> line:195:19 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x559b74bcf1e0 <col:41, col:49> col:49 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x559b74bcf540 <line:196:1, line:204:1>
|   |-DoStmt 0x559b74bcf3f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bcf3c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bcf370 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bcf3d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bcf528 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:203:2, col:44>
|     `-CallExpr 0x559b74bcf4e0 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x559b74bcf4c8 <col:9> 'int (*)(k_tid_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bcf418 <col:9> 'int (k_tid_t)' Function 0x559b74bcf128 'z_impl_k_thread_priority_get' 'int (k_tid_t)'
|       `-ImplicitCastExpr 0x559b74bcf510 <col:38> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bcf440 <col:38> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x559b74bcf1e0 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x559b74bcf678 <line:207:1, col:66> col:13 used z_impl_k_thread_priority_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x559b74bcf570 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x559b74bcf5e8 <col:58, col:62> col:62 prio 'int'
|-FunctionDecl 0x559b74bcf840 prev 0x559b74b82df0 <line:208:1, line:218:1> line:208:20 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x559b74bcf738 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x559b74bcf7b0 <col:58, col:62> col:62 used prio 'int'
| `-CompoundStmt 0x559b74bcfb48 <line:209:1, line:218:1>
|   |-DoStmt 0x559b74bcf9d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bcf998 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bcf948 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bcf9b0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bcfae0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:217:2, col:43> 'void'
|     |-ImplicitCastExpr 0x559b74bcfac8 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bcf9f0 <col:2> 'void (k_tid_t, int)' Function 0x559b74bcf678 'z_impl_k_thread_priority_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x559b74bcfb18 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x559b74bcfa18 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x559b74bcf738 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x559b74bcfb30 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bcfa40 <col:39> 'int' lvalue ParmVar 0x559b74bcf7b0 'prio' 'int'
|-FunctionDecl 0x559b74bcfc80 <line:221:1, col:70> col:13 used z_impl_k_thread_deadline_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x559b74bcfb78 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x559b74bcfbf0 <col:58, col:62> col:62 deadline 'int'
|-FunctionDecl 0x559b74bcfe48 <line:222:1, line:232:1> line:222:20 k_thread_deadline_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x559b74bcfd40 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x559b74bcfdb8 <col:58, col:62> col:62 used deadline 'int'
| `-CompoundStmt 0x559b74bd0118 <line:223:1, line:232:1>
|   |-DoStmt 0x559b74bd0000 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bcffc8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bcff78 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bcffe0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bd00b0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:231:2, col:47> 'void'
|     |-ImplicitCastExpr 0x559b74bd0098 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bd0020 <col:2> 'void (k_tid_t, int)' Function 0x559b74bcfc80 'z_impl_k_thread_deadline_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x559b74bd00e8 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x559b74bd0048 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x559b74bcfd40 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x559b74bd0100 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bd0070 <col:39> 'int' lvalue ParmVar 0x559b74bcfdb8 'deadline' 'int'
|-FunctionDecl 0x559b74bd01d0 <line:235:1, col:51> col:13 used z_impl_k_thread_suspend 'void (k_tid_t)' extern
| `-ParmVarDecl 0x559b74bd0148 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x559b74bd0310 prev 0x559b74b83670 <line:236:1, line:246:1> line:236:20 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x559b74bd0288 <col:37, col:45> col:45 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x559b74bd0568 <line:237:1, line:246:1>
|   |-DoStmt 0x559b74bd0498 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd0460 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd0410 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd0478 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bd0520 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:245:2, col:32> 'void'
|     |-ImplicitCastExpr 0x559b74bd0508 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bd04b8 <col:2> 'void (k_tid_t)' Function 0x559b74bd01d0 'z_impl_k_thread_suspend' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x559b74bd0550 <col:26> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bd04e0 <col:26> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x559b74bd0288 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x559b74bd0620 <line:249:1, col:50> col:13 used z_impl_k_thread_resume 'void (k_tid_t)' extern
| `-ParmVarDecl 0x559b74bd0598 <col:36, col:44> col:44 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x559b74bd0760 prev 0x559b74b837e0 <line:250:1, line:260:1> line:250:20 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x559b74bd06d8 <col:36, col:44> col:44 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x559b74bd09b8 <line:251:1, line:260:1>
|   |-DoStmt 0x559b74bd08e8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd08b0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd0860 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd08c8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bd0970 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:259:2, col:31> 'void'
|     |-ImplicitCastExpr 0x559b74bd0958 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bd0908 <col:2> 'void (k_tid_t)' Function 0x559b74bd0620 'z_impl_k_thread_resume' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x559b74bd09a0 <col:25> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bd0930 <col:25> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x559b74bd06d8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x559b74bd0a30 <line:263:1, col:39> col:12 used z_impl_k_is_preempt_thread 'int ()' extern
|-FunctionDecl 0x559b74bd0af8 prev 0x559b74b83d80 <line:264:1, line:273:1> line:264:19 k_is_preempt_thread 'int (void)' static inline
| `-CompoundStmt 0x559b74bd0d40 <line:265:1, line:273:1>
|   |-DoStmt 0x559b74bd0c78 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd0c40 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd0bf0 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd0c58 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd0d28 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:272:2, col:36>
|     `-CallExpr 0x559b74bd0d00 <col:9, col:36> 'int'
|       `-ImplicitCastExpr 0x559b74bd0ce8 <col:9> 'int (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x559b74bd0c98 <col:9> 'int ()' Function 0x559b74bd0a30 'z_impl_k_is_preempt_thread' 'int ()'
|-FunctionDecl 0x559b74bd0e00 <line:276:1, col:57> col:13 used z_impl_k_thread_custom_data_set 'void (void *)' extern
| `-ParmVarDecl 0x559b74bd0d78 <col:45, col:52> col:52 value 'void *'
|-FunctionDecl 0x559b74bd0f58 prev 0x559b74b844a8 <line:277:1, line:287:1> line:277:20 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x559b74bd0ec0 <col:45, col:52> col:52 used value 'void *'
| `-CompoundStmt 0x559b74bd11b0 <line:278:1, line:287:1>
|   |-DoStmt 0x559b74bd10e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd10a8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd1058 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd10c0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bd1168 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:286:2, col:39> 'void'
|     |-ImplicitCastExpr 0x559b74bd1150 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bd1100 <col:2> 'void (void *)' Function 0x559b74bd0e00 'z_impl_k_thread_custom_data_set' 'void (void *)'
|     `-ImplicitCastExpr 0x559b74bd1198 <col:34> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bd1128 <col:34> 'void *' lvalue ParmVar 0x559b74bd0ec0 'value' 'void *'
|-FunctionDecl 0x559b74bd1220 <line:290:1, col:47> col:15 used z_impl_k_thread_custom_data_get 'void *()' extern
|-FunctionDecl 0x559b74bd12e8 prev 0x559b74b84680 <line:291:1, line:300:1> line:291:22 k_thread_custom_data_get 'void *(void)' static inline
| `-CompoundStmt 0x559b74bd1530 <line:292:1, line:300:1>
|   |-DoStmt 0x559b74bd1468 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd1430 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd13e0 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd1448 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd1518 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:299:2, col:41>
|     `-CallExpr 0x559b74bd14f0 <col:9, col:41> 'void *'
|       `-ImplicitCastExpr 0x559b74bd14d8 <col:9> 'void *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x559b74bd1488 <col:9> 'void *()' Function 0x559b74bd1220 'z_impl_k_thread_custom_data_get' 'void *()'
|-FunctionDecl 0x559b74bd1670 <line:303:1, col:74> col:12 used z_impl_k_thread_name_set 'int (k_tid_t, const char *)' extern
| |-ParmVarDecl 0x559b74bd1560 <col:37, col:45> col:45 thread_id 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x559b74bd15d8 <col:56, col:69> col:69 value 'const char *'
|-FunctionDecl 0x559b74bd1840 prev 0x559b74b848e8 <line:304:1, line:313:1> line:304:19 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x559b74bd1730 <col:37, col:45> col:45 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x559b74bd17a8 <col:56, col:69> col:69 used value 'const char *'
| `-CompoundStmt 0x559b74bd1b60 <line:305:1, line:313:1>
|   |-DoStmt 0x559b74bd19d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd1998 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd1948 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd19b0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd1b48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:312:2, col:50>
|     `-CallExpr 0x559b74bd1ae0 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x559b74bd1ac8 <col:9> 'int (*)(k_tid_t, const char *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bd19f0 <col:9> 'int (k_tid_t, const char *)' Function 0x559b74bd1670 'z_impl_k_thread_name_set' 'int (k_tid_t, const char *)'
|       |-ImplicitCastExpr 0x559b74bd1b18 <col:34> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bd1a18 <col:34> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x559b74bd1730 'thread_id' 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x559b74bd1b30 <col:45> 'const char *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bd1a40 <col:45> 'const char *' lvalue ParmVar 0x559b74bd17a8 'value' 'const char *'
|-FunctionDecl 0x559b74bd1d18 <line:316:1, col:80> col:12 used z_impl_k_thread_name_copy 'int (k_tid_t, char *, size_t)' extern
| |-ParmVarDecl 0x559b74bd1b90 <col:38, col:46> col:46 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x559b74bd1c08 <col:57, col:64> col:64 buf 'char *'
| `-ParmVarDecl 0x559b74bd1c78 <col:69, col:76> col:76 size 'size_t':'unsigned long'
|-FunctionDecl 0x559b74bd1f80 prev 0x559b74b84de8 <line:317:1, line:326:1> line:317:19 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x559b74bd1de0 <col:38, col:46> col:46 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x559b74bd1e58 <col:57, col:64> col:64 used buf 'char *'
| |-ParmVarDecl 0x559b74bd1ec8 <col:69, col:76> col:76 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x559b74bd22f0 <line:318:1, line:326:1>
|   |-DoStmt 0x559b74bd2118 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd20e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd2090 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd20f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd22d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:325:2, col:55>
|     `-CallExpr 0x559b74bd2250 <col:9, col:55> 'int'
|       |-ImplicitCastExpr 0x559b74bd2238 <col:9> 'int (*)(k_tid_t, char *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bd2138 <col:9> 'int (k_tid_t, char *, size_t)' Function 0x559b74bd1d18 'z_impl_k_thread_name_copy' 'int (k_tid_t, char *, size_t)'
|       |-ImplicitCastExpr 0x559b74bd2290 <col:35> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bd2160 <col:35> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x559b74bd1de0 'thread_id' 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x559b74bd22a8 <col:46> 'char *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bd2188 <col:46> 'char *' lvalue ParmVar 0x559b74bd1e58 'buf' 'char *'
|       `-ImplicitCastExpr 0x559b74bd22c0 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bd21b0 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x559b74bd1ec8 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x559b74bd24b0 <line:329:1, col:86> col:13 used z_impl_k_timer_start 'void (struct k_timer *, s32_t, s32_t)' extern
| |-ParmVarDecl 0x559b74bd2338 <col:34, col:51> col:51 timer 'struct k_timer *'
| |-ParmVarDecl 0x559b74bd23a8 <col:58, col:64> col:64 duration 's32_t':'int'
| `-ParmVarDecl 0x559b74bd2418 <col:74, col:80> col:80 period 's32_t':'int'
|-FunctionDecl 0x559b74bd2708 prev 0x559b74b88260 <line:330:1, line:340:1> line:330:20 k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x559b74bd2590 <col:34, col:51> col:51 used timer 'struct k_timer *'
| |-ParmVarDecl 0x559b74bd2600 <col:58, col:64> col:64 used duration 's32_t':'int'
| |-ParmVarDecl 0x559b74bd2670 <col:74, col:80> col:80 used period 's32_t':'int'
| `-CompoundStmt 0x559b74bd2a58 <line:331:1, line:340:1>
|   |-DoStmt 0x559b74bd28a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd2868 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd2818 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd2880 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bd29d0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:339:2, col:46> 'void'
|     |-ImplicitCastExpr 0x559b74bd29b8 <col:2> 'void (*)(struct k_timer *, s32_t, s32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bd28c0 <col:2> 'void (struct k_timer *, s32_t, s32_t)' Function 0x559b74bd24b0 'z_impl_k_timer_start' 'void (struct k_timer *, s32_t, s32_t)'
|     |-ImplicitCastExpr 0x559b74bd2a10 <col:23> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x559b74bd28e8 <col:23> 'struct k_timer *' lvalue ParmVar 0x559b74bd2590 'timer' 'struct k_timer *'
|     |-ImplicitCastExpr 0x559b74bd2a28 <col:30> 's32_t':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x559b74bd2910 <col:30> 's32_t':'int' lvalue ParmVar 0x559b74bd2600 'duration' 's32_t':'int'
|     `-ImplicitCastExpr 0x559b74bd2a40 <col:40> 's32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bd2938 <col:40> 's32_t':'int' lvalue ParmVar 0x559b74bd2670 'period' 's32_t':'int'
|-FunctionDecl 0x559b74bd2b28 <line:343:1, col:55> col:13 used z_impl_k_timer_stop 'void (struct k_timer *)' extern
| `-ParmVarDecl 0x559b74bd2aa0 <col:33, col:50> col:50 timer 'struct k_timer *'
|-FunctionDecl 0x559b74bd2c80 prev 0x559b74b883f8 <line:344:1, line:354:1> line:344:20 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x559b74bd2bf8 <col:33, col:50> col:50 used timer 'struct k_timer *'
| `-CompoundStmt 0x559b74bd2f08 <line:345:1, line:354:1>
|   |-DoStmt 0x559b74bd2e08 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd2dd0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd2d80 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd2de8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bd2ec0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:353:2, col:27> 'void'
|     |-ImplicitCastExpr 0x559b74bd2ea8 <col:2> 'void (*)(struct k_timer *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bd2e28 <col:2> 'void (struct k_timer *)' Function 0x559b74bd2b28 'z_impl_k_timer_stop' 'void (struct k_timer *)'
|     `-ImplicitCastExpr 0x559b74bd2ef0 <col:22> 'struct k_timer *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bd2e50 <col:22> 'struct k_timer *' lvalue ParmVar 0x559b74bd2bf8 'timer' 'struct k_timer *'
|-FunctionDecl 0x559b74bd3810 <line:357:1, col:62> col:14 used z_impl_k_timer_status_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x559b74bd3788 <col:40, col:57> col:57 timer 'struct k_timer *'
|-FunctionDecl 0x559b74bd3968 prev 0x559b74b885f0 <line:358:1, line:367:1> line:358:21 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x559b74bd38e0 <col:40, col:57> col:57 used timer 'struct k_timer *'
| `-CompoundStmt 0x559b74bd3c30 <line:359:1, line:367:1>
|   |-DoStmt 0x559b74bd3af0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd3ab8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd3a68 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd3ad0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd3c18 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:366:2, col:40>
|     `-CallExpr 0x559b74bd3bd0 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x559b74bd3bb8 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bd3b10 <col:9> 'u32_t (struct k_timer *)' Function 0x559b74bd3810 'z_impl_k_timer_status_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x559b74bd3c00 <col:35> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bd3b38 <col:35> 'struct k_timer *' lvalue ParmVar 0x559b74bd38e0 'timer' 'struct k_timer *'
|-FunctionDecl 0x559b74bd3d00 <line:370:1, col:63> col:14 used z_impl_k_timer_status_sync 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x559b74bd3c78 <col:41, col:58> col:58 timer 'struct k_timer *'
|-FunctionDecl 0x559b74bd3e58 prev 0x559b74b88fe8 <line:371:1, line:380:1> line:371:21 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x559b74bd3dd0 <col:41, col:58> col:58 used timer 'struct k_timer *'
| `-CompoundStmt 0x559b74bd40c8 <line:372:1, line:380:1>
|   |-DoStmt 0x559b74bd3fe0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd3fa8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd3f58 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd3fc0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd40b0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:379:2, col:41>
|     `-CallExpr 0x559b74bd4068 <col:9, col:41> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x559b74bd4050 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bd4000 <col:9> 'u32_t (struct k_timer *)' Function 0x559b74bd3d00 'z_impl_k_timer_status_sync' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x559b74bd4098 <col:36> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bd4028 <col:36> 'struct k_timer *' lvalue ParmVar 0x559b74bd3dd0 'timer' 'struct k_timer *'
|-FunctionDecl 0x559b74bd4198 prev 0x559b74b894a0 <line:383:1, col:65> col:14 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x559b74bd4110 <col:43, col:60> col:60 timer 'struct k_timer *'
|-FunctionDecl 0x559b74bd42f0 prev 0x559b74b89348 <line:384:1, line:393:1> line:384:21 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x559b74bd4268 <col:43, col:60> col:60 used timer 'struct k_timer *'
| `-CompoundStmt 0x559b74bd4560 <line:385:1, line:393:1>
|   |-DoStmt 0x559b74bd4478 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd4440 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd43f0 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd4458 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd4548 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:392:2, col:43>
|     `-CallExpr 0x559b74bd4500 <col:9, col:43> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x559b74bd44e8 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bd4498 <col:9> 'u32_t (struct k_timer *)' Function 0x559b74bd4198 'z_impl_k_timer_remaining_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x559b74bd4530 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bd44c0 <col:38> 'struct k_timer *' lvalue ParmVar 0x559b74bd4268 'timer' 'struct k_timer *'
|-FunctionDecl 0x559b74bd46b0 prev 0x559b74b89e08 <line:396:1, col:82> col:13 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' extern
| |-ParmVarDecl 0x559b74bd45a8 <col:42, col:59> col:59 timer 'struct k_timer *'
| `-ParmVarDecl 0x559b74bd4620 <col:66, col:73> col:73 user_data 'void *'
|-FunctionDecl 0x559b74bd48a0 prev 0x559b74b89c00 <line:397:1, line:407:1> line:397:20 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x559b74bd4798 <col:42, col:59> col:59 used timer 'struct k_timer *'
| |-ParmVarDecl 0x559b74bd4810 <col:66, col:73> col:73 used user_data 'void *'
| `-CompoundStmt 0x559b74bd4ba8 <line:398:1, line:407:1>
|   |-DoStmt 0x559b74bd4a30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd49f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd49a8 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd4a10 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bd4b40 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:406:2, col:47> 'void'
|     |-ImplicitCastExpr 0x559b74bd4b28 <col:2> 'void (*)(struct k_timer *, void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bd4a50 <col:2> 'void (struct k_timer *, void *)' Function 0x559b74bd46b0 'z_impl_k_timer_user_data_set' 'void (struct k_timer *, void *)'
|     |-ImplicitCastExpr 0x559b74bd4b78 <col:31> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x559b74bd4a78 <col:31> 'struct k_timer *' lvalue ParmVar 0x559b74bd4798 'timer' 'struct k_timer *'
|     `-ImplicitCastExpr 0x559b74bd4b90 <col:38> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bd4aa0 <col:38> 'void *' lvalue ParmVar 0x559b74bd4810 'user_data' 'void *'
|-FunctionDecl 0x559b74bd4c80 prev 0x559b74b8a6a8 <line:410:1, col:66> col:15 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' extern
| `-ParmVarDecl 0x559b74bd4bf0 <col:44, col:61> col:61 timer 'struct k_timer *'
|-FunctionDecl 0x559b74bd4de0 prev 0x559b74b8a548 <line:411:1, line:420:1> line:411:22 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x559b74bd4d50 <col:44, col:61> col:61 used timer 'struct k_timer *'
| `-CompoundStmt 0x559b74bd50b0 <line:412:1, line:420:1>
|   |-DoStmt 0x559b74bd4f68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd4f30 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd4ee0 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd4f48 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd5098 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:419:2, col:43>
|     `-CallExpr 0x559b74bd5050 <col:9, col:43> 'void *'
|       |-ImplicitCastExpr 0x559b74bd5038 <col:9> 'void *(*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bd4f88 <col:9> 'void *(struct k_timer *)' Function 0x559b74bd4c80 'z_impl_k_timer_user_data_get' 'void *(struct k_timer *)'
|       `-ImplicitCastExpr 0x559b74bd5080 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bd4fb0 <col:38> 'struct k_timer *' lvalue ParmVar 0x559b74bd4d50 'timer' 'struct k_timer *'
|-FunctionDecl 0x559b74bd5148 <line:423:1, col:34> col:14 used z_impl_k_uptime_get 's64_t ()' extern
|-FunctionDecl 0x559b74bd5208 prev 0x559b74b8a930 <line:424:1, line:435:1> line:424:21 used k_uptime_get 's64_t (void)' static inline
| `-CompoundStmt 0x559b74bd5480 <line:425:1, line:435:1>
|   |-DoStmt 0x559b74bd5388 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd5350 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd5300 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd5368 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd5468 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:434:2, col:29>
|     `-CallExpr 0x559b74bd5440 <col:9, col:29> 's64_t':'long long'
|       `-ImplicitCastExpr 0x559b74bd5428 <col:9> 's64_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x559b74bd53a8 <col:9> 's64_t ()' Function 0x559b74bd5148 'z_impl_k_uptime_get' 's64_t ()'
|-FunctionDecl 0x559b74bd5550 <line:438:1, col:55> col:13 used z_impl_k_queue_init 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x559b74bd54c8 <col:33, col:50> col:50 queue 'struct k_queue *'
|-FunctionDecl 0x559b74bd56a8 prev 0x559b74b8ce20 <line:439:1, line:449:1> line:439:20 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x559b74bd5620 <col:33, col:50> col:50 used queue 'struct k_queue *'
| `-CompoundStmt 0x559b74bd5988 <line:440:1, line:449:1>
|   |-DoStmt 0x559b74bd5860 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd5828 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd57d8 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd5840 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bd5940 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:448:2, col:27> 'void'
|     |-ImplicitCastExpr 0x559b74bd5928 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bd5880 <col:2> 'void (struct k_queue *)' Function 0x559b74bd5550 'z_impl_k_queue_init' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x559b74bd5970 <col:22> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bd58a8 <col:22> 'struct k_queue *' lvalue ParmVar 0x559b74bd5620 'queue' 'struct k_queue *'
|-FunctionDecl 0x559b74bd5a58 <line:452:1, col:62> col:13 used z_impl_k_queue_cancel_wait 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x559b74bd59d0 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x559b74bd5bb0 prev 0x559b74b8cfa8 <line:453:1, line:463:1> line:453:20 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x559b74bd5b28 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x559b74bd5e08 <line:454:1, line:463:1>
|   |-DoStmt 0x559b74bd5d38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd5d00 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd5cb0 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd5d18 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bd5dc0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:462:2, col:34> 'void'
|     |-ImplicitCastExpr 0x559b74bd5da8 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bd5d58 <col:2> 'void (struct k_queue *)' Function 0x559b74bd5a58 'z_impl_k_queue_cancel_wait' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x559b74bd5df0 <col:29> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bd5d80 <col:29> 'struct k_queue *' lvalue ParmVar 0x559b74bd5b28 'queue' 'struct k_queue *'
|-FunctionDecl 0x559b74bd5f58 <line:466:1, col:77> col:14 used z_impl_k_queue_alloc_append 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x559b74bd5e50 <col:42, col:59> col:59 queue 'struct k_queue *'
| `-ParmVarDecl 0x559b74bd5ec8 <col:66, col:73> col:73 data 'void *'
|-FunctionDecl 0x559b74bd6138 prev 0x559b74b8d4c0 <line:467:1, line:476:1> line:467:21 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x559b74bd6030 <col:42, col:59> col:59 used queue 'struct k_queue *'
| |-ParmVarDecl 0x559b74bd60a8 <col:66, col:73> col:73 used data 'void *'
| `-CompoundStmt 0x559b74bd63f8 <line:468:1, line:476:1>
|   |-DoStmt 0x559b74bd62c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd6290 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd6240 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd62a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd63e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:475:2, col:48>
|     `-CallExpr 0x559b74bd6378 <col:9, col:48> 's32_t':'int'
|       |-ImplicitCastExpr 0x559b74bd6360 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bd62e8 <col:9> 's32_t (struct k_queue *, void *)' Function 0x559b74bd5f58 'z_impl_k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x559b74bd63b0 <col:37> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bd6310 <col:37> 'struct k_queue *' lvalue ParmVar 0x559b74bd6030 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x559b74bd63c8 <col:44> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bd6338 <col:44> 'void *' lvalue ParmVar 0x559b74bd60a8 'data' 'void *'
|-FunctionDecl 0x559b74bd6548 <line:479:1, col:78> col:14 used z_impl_k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x559b74bd6440 <col:43, col:60> col:60 queue 'struct k_queue *'
| `-ParmVarDecl 0x559b74bd64b8 <col:67, col:74> col:74 data 'void *'
|-FunctionDecl 0x559b74bd6790 prev 0x559b74b8d8d8 <line:480:1, line:489:1> line:480:21 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x559b74bd6620 <col:43, col:60> col:60 used queue 'struct k_queue *'
| |-ParmVarDecl 0x559b74bd6698 <col:67, col:74> col:74 used data 'void *'
| `-CompoundStmt 0x559b74bd6a50 <line:481:1, line:489:1>
|   |-DoStmt 0x559b74bd6920 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd68e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd6898 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd6900 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd6a38 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:488:2, col:49>
|     `-CallExpr 0x559b74bd69d0 <col:9, col:49> 's32_t':'int'
|       |-ImplicitCastExpr 0x559b74bd69b8 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bd6940 <col:9> 's32_t (struct k_queue *, void *)' Function 0x559b74bd6548 'z_impl_k_queue_alloc_prepend' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x559b74bd6a08 <col:38> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bd6968 <col:38> 'struct k_queue *' lvalue ParmVar 0x559b74bd6620 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x559b74bd6a20 <col:45> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bd6990 <col:45> 'void *' lvalue ParmVar 0x559b74bd6698 'data' 'void *'
|-FunctionDecl 0x559b74bd6ba0 <line:492:1, col:71> col:15 used z_impl_k_queue_get 'void *(struct k_queue *, s32_t)' extern
| |-ParmVarDecl 0x559b74bd6a98 <col:34, col:51> col:51 queue 'struct k_queue *'
| `-ParmVarDecl 0x559b74bd6b08 <col:58, col:64> col:64 timeout 's32_t':'int'
|-FunctionDecl 0x559b74bd6d80 prev 0x559b74b8e468 <line:493:1, line:502:1> line:493:22 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x559b74bd6c78 <col:34, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x559b74bd6ce8 <col:58, col:64> col:64 used timeout 's32_t':'int'
| `-CompoundStmt 0x559b74bd70a0 <line:494:1, line:502:1>
|   |-DoStmt 0x559b74bd6f10 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd6ed8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd6e88 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd6ef0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd7088 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:501:2, col:42>
|     `-CallExpr 0x559b74bd7020 <col:9, col:42> 'void *'
|       |-ImplicitCastExpr 0x559b74bd7008 <col:9> 'void *(*)(struct k_queue *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bd6f30 <col:9> 'void *(struct k_queue *, s32_t)' Function 0x559b74bd6ba0 'z_impl_k_queue_get' 'void *(struct k_queue *, s32_t)'
|       |-ImplicitCastExpr 0x559b74bd7058 <col:28> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bd6f58 <col:28> 'struct k_queue *' lvalue ParmVar 0x559b74bd6c78 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x559b74bd7070 <col:35> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bd6f80 <col:35> 's32_t':'int' lvalue ParmVar 0x559b74bd6ce8 'timeout' 's32_t':'int'
|-FunctionDecl 0x559b74bd7178 prev 0x559b74b8f648 <line:505:1, col:58> col:12 used z_impl_k_queue_is_empty 'int (struct k_queue *)' extern
| `-ParmVarDecl 0x559b74bd70e8 <col:36, col:53> col:53 queue 'struct k_queue *'
|-FunctionDecl 0x559b74bd72d8 prev 0x559b74b8f4e8 <line:506:1, line:515:1> line:506:19 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x559b74bd7248 <col:36, col:53> col:53 used queue 'struct k_queue *'
| `-CompoundStmt 0x559b74bd75a0 <line:507:1, line:515:1>
|   |-DoStmt 0x559b74bd7460 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd7428 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd73d8 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd7440 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd7588 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:514:2, col:38>
|     `-CallExpr 0x559b74bd7540 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x559b74bd7528 <col:9> 'int (*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bd7480 <col:9> 'int (struct k_queue *)' Function 0x559b74bd7178 'z_impl_k_queue_is_empty' 'int (struct k_queue *)'
|       `-ImplicitCastExpr 0x559b74bd7570 <col:33> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bd74a8 <col:33> 'struct k_queue *' lvalue ParmVar 0x559b74bd7248 'queue' 'struct k_queue *'
|-FunctionDecl 0x559b74bd7678 prev 0x559b74b904a0 <line:518:1, col:62> col:15 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x559b74bd75e8 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x559b74bd7830 prev 0x559b74b8f9c8 <line:519:1, line:528:1> line:519:22 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x559b74bd77a0 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x559b74bd7b00 <line:520:1, line:528:1>
|   |-DoStmt 0x559b74bd79b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd7980 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd7930 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd7998 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd7ae8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:527:2, col:39>
|     `-CallExpr 0x559b74bd7aa0 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x559b74bd7a88 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bd79d8 <col:9> 'void *(struct k_queue *)' Function 0x559b74bd7678 'z_impl_k_queue_peek_head' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x559b74bd7ad0 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bd7a00 <col:34> 'struct k_queue *' lvalue ParmVar 0x559b74bd77a0 'queue' 'struct k_queue *'
|-FunctionDecl 0x559b74bd7bd8 prev 0x559b74b909d8 <line:531:1, col:62> col:15 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x559b74bd7b48 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x559b74bd7d38 prev 0x559b74b90878 <line:532:1, line:541:1> line:532:22 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x559b74bd7ca8 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x559b74bd7fa8 <line:533:1, line:541:1>
|   |-DoStmt 0x559b74bd7ec0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd7e88 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd7e38 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd7ea0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd7f90 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:540:2, col:39>
|     `-CallExpr 0x559b74bd7f48 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x559b74bd7f30 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bd7ee0 <col:9> 'void *(struct k_queue *)' Function 0x559b74bd7bd8 'z_impl_k_queue_peek_tail' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x559b74bd7f78 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bd7f08 <col:34> 'struct k_queue *' lvalue ParmVar 0x559b74bd7ca8 'queue' 'struct k_queue *'
|-FunctionDecl 0x559b74bd82a8 <line:544:1, col:83> col:12 used z_impl_k_futex_wait 'int (struct k_futex *, int, s32_t)' extern
| |-ParmVarDecl 0x559b74bd8080 <col:32, col:49> col:49 futex 'struct k_futex *'
| |-ParmVarDecl 0x559b74bd80f8 <col:56, col:60> col:60 expected 'int'
| `-ParmVarDecl 0x559b74bd8168 <col:70, col:76> col:76 timeout 's32_t':'int'
|-FunctionDecl 0x559b74bd8510 <line:545:1, line:554:1> line:545:19 k_futex_wait 'int (struct k_futex *, int, s32_t)' static inline
| |-ParmVarDecl 0x559b74bd8388 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x559b74bd8400 <col:56, col:60> col:60 used expected 'int'
| |-ParmVarDecl 0x559b74bd8470 <col:70, col:76> col:76 used timeout 's32_t':'int'
| `-CompoundStmt 0x559b74bd8890 <line:546:1, line:554:1>
|   |-DoStmt 0x559b74bd86a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd8670 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd8620 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd8688 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd8878 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:553:2, col:53>
|     `-CallExpr 0x559b74bd87f0 <col:9, col:53> 'int'
|       |-ImplicitCastExpr 0x559b74bd87d8 <col:9> 'int (*)(struct k_futex *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bd86c8 <col:9> 'int (struct k_futex *, int, s32_t)' Function 0x559b74bd82a8 'z_impl_k_futex_wait' 'int (struct k_futex *, int, s32_t)'
|       |-ImplicitCastExpr 0x559b74bd8830 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bd86f0 <col:29> 'struct k_futex *' lvalue ParmVar 0x559b74bd8388 'futex' 'struct k_futex *'
|       |-ImplicitCastExpr 0x559b74bd8848 <col:36> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bd8718 <col:36> 'int' lvalue ParmVar 0x559b74bd8400 'expected' 'int'
|       `-ImplicitCastExpr 0x559b74bd8860 <col:46> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bd8740 <col:46> 's32_t':'int' lvalue ParmVar 0x559b74bd8470 'timeout' 's32_t':'int'
|-FunctionDecl 0x559b74bd8a68 <line:557:1, col:69> col:12 used z_impl_k_futex_wake 'int (struct k_futex *, bool)' extern
| |-ParmVarDecl 0x559b74bd88d8 <col:32, col:49> col:49 futex 'struct k_futex *'
| `-ParmVarDecl 0x559b74bd8948 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:557:61> col:61 wake_all 'bool'
|-FunctionDecl 0x559b74bd8c48 <line:558:1, line:567:1> line:558:19 k_futex_wake 'int (struct k_futex *, bool)' static inline
| |-ParmVarDecl 0x559b74bd8b40 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x559b74bd8bb0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:558:61> col:61 used wake_all 'bool'
| `-CompoundStmt 0x559b74bd8f60 <line:559:1, line:567:1>
|   |-DoStmt 0x559b74bd8dd8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd8da0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd8d50 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd8db8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd8f48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:566:2, col:44>
|     `-CallExpr 0x559b74bd8ee0 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x559b74bd8ec8 <col:9> 'int (*)(struct k_futex *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bd8df8 <col:9> 'int (struct k_futex *, bool)' Function 0x559b74bd8a68 'z_impl_k_futex_wake' 'int (struct k_futex *, bool)'
|       |-ImplicitCastExpr 0x559b74bd8f18 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bd8e20 <col:29> 'struct k_futex *' lvalue ParmVar 0x559b74bd8b40 'futex' 'struct k_futex *'
|       `-ImplicitCastExpr 0x559b74bd8f30 <col:36> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bd8e48 <col:36> 'bool' lvalue ParmVar 0x559b74bd8bb0 'wake_all' 'bool'
|-FunctionDecl 0x559b74bd90a8 <line:570:1, col:81> col:14 used z_impl_k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' extern
| |-ParmVarDecl 0x559b74bd8fa8 <col:40, col:57> col:57 stack 'struct k_stack *'
| `-ParmVarDecl 0x559b74bd9018 <col:64, col:70> col:70 num_entries 'u32_t':'unsigned int'
|-FunctionDecl 0x559b74bd9280 prev 0x559b74a8eac0 <line:571:1, line:580:1> line:571:21 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x559b74bd9180 <col:40, col:57> col:57 used stack 'struct k_stack *'
| |-ParmVarDecl 0x559b74bd91f0 <col:64, col:70> col:70 used num_entries 'u32_t':'unsigned int'
| `-CompoundStmt 0x559b74bd95a0 <line:572:1, line:580:1>
|   |-DoStmt 0x559b74bd9410 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd93d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd9388 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd93f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd9588 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:579:2, col:53>
|     `-CallExpr 0x559b74bd9520 <col:9, col:53> 's32_t':'int'
|       |-ImplicitCastExpr 0x559b74bd9508 <col:9> 's32_t (*)(struct k_stack *, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bd9430 <col:9> 's32_t (struct k_stack *, u32_t)' Function 0x559b74bd90a8 'z_impl_k_stack_alloc_init' 's32_t (struct k_stack *, u32_t)'
|       |-ImplicitCastExpr 0x559b74bd9558 <col:35> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bd9458 <col:35> 'struct k_stack *' lvalue ParmVar 0x559b74bd9180 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x559b74bd9570 <col:42> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bd9480 <col:42> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74bd91f0 'num_entries' 'u32_t':'unsigned int'
|-FunctionDecl 0x559b74bd96f0 <line:583:1, col:73> col:12 used z_impl_k_stack_push 'int (struct k_stack *, stack_data_t)' extern
| |-ParmVarDecl 0x559b74bd95e8 <col:32, col:49> col:49 stack 'struct k_stack *'
| `-ParmVarDecl 0x559b74bd9658 <col:56, col:69> col:69 data 'stack_data_t':'unsigned long'
|-FunctionDecl 0x559b74bd98f0 prev 0x559b74a8ef48 <line:584:1, line:593:1> line:584:19 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x559b74bd97e8 <col:32, col:49> col:49 used stack 'struct k_stack *'
| |-ParmVarDecl 0x559b74bd9858 <col:56, col:69> col:69 used data 'stack_data_t':'unsigned long'
| `-CompoundStmt 0x559b74bd9c10 <line:585:1, line:593:1>
|   |-DoStmt 0x559b74bd9a80 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bd9a48 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bd99f8 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bd9a60 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bd9bf8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:592:2, col:40>
|     `-CallExpr 0x559b74bd9b90 <col:9, col:40> 'int'
|       |-ImplicitCastExpr 0x559b74bd9b78 <col:9> 'int (*)(struct k_stack *, stack_data_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bd9aa0 <col:9> 'int (struct k_stack *, stack_data_t)' Function 0x559b74bd96f0 'z_impl_k_stack_push' 'int (struct k_stack *, stack_data_t)'
|       |-ImplicitCastExpr 0x559b74bd9bc8 <col:29> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bd9ac8 <col:29> 'struct k_stack *' lvalue ParmVar 0x559b74bd97e8 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x559b74bd9be0 <col:36> 'stack_data_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bd9af0 <col:36> 'stack_data_t':'unsigned long' lvalue ParmVar 0x559b74bd9858 'data' 'stack_data_t':'unsigned long'
|-FunctionDecl 0x559b74bd9dd8 <line:596:1, col:89> col:12 used z_impl_k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' extern
| |-ParmVarDecl 0x559b74bd9c58 <col:31, col:48> col:48 stack 'struct k_stack *'
| |-ParmVarDecl 0x559b74bd9cc8 <col:55, col:70> col:70 data 'stack_data_t *'
| `-ParmVarDecl 0x559b74bd9d38 <col:76, col:82> col:82 timeout 's32_t':'int'
|-FunctionDecl 0x559b74bda038 prev 0x559b74a8f5e8 <line:597:1, line:606:1> line:597:19 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x559b74bd9eb8 <col:31, col:48> col:48 used stack 'struct k_stack *'
| |-ParmVarDecl 0x559b74bd9f28 <col:55, col:70> col:70 used data 'stack_data_t *'
| |-ParmVarDecl 0x559b74bd9f98 <col:76, col:82> col:82 used timeout 's32_t':'int'
| `-CompoundStmt 0x559b74bda3a0 <line:598:1, line:606:1>
|   |-DoStmt 0x559b74bda1d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bda198 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bda148 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bda1b0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bda388 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:605:2, col:48>
|     `-CallExpr 0x559b74bda300 <col:9, col:48> 'int'
|       |-ImplicitCastExpr 0x559b74bda2e8 <col:9> 'int (*)(struct k_stack *, stack_data_t *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bda1f0 <col:9> 'int (struct k_stack *, stack_data_t *, s32_t)' Function 0x559b74bd9dd8 'z_impl_k_stack_pop' 'int (struct k_stack *, stack_data_t *, s32_t)'
|       |-ImplicitCastExpr 0x559b74bda340 <col:28> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bda218 <col:28> 'struct k_stack *' lvalue ParmVar 0x559b74bd9eb8 'stack' 'struct k_stack *'
|       |-ImplicitCastExpr 0x559b74bda358 <col:35> 'stack_data_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bda240 <col:35> 'stack_data_t *' lvalue ParmVar 0x559b74bd9f28 'data' 'stack_data_t *'
|       `-ImplicitCastExpr 0x559b74bda370 <col:41> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bda268 <col:41> 's32_t':'int' lvalue ParmVar 0x559b74bd9f98 'timeout' 's32_t':'int'
|-FunctionDecl 0x559b74bda478 <line:609:1, col:54> col:12 used z_impl_k_mutex_init 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x559b74bda3e8 <col:32, col:49> col:49 mutex 'struct k_mutex *'
|-FunctionDecl 0x559b74bda5d8 prev 0x559b74ba7de8 <line:610:1, line:619:1> line:610:19 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x559b74bda548 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x559b74bda8d0 <line:611:1, line:619:1>
|   |-DoStmt 0x559b74bda760 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bda728 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bda6d8 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bda740 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bda8b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:618:2, col:34>
|     `-CallExpr 0x559b74bda870 <col:9, col:34> 'int'
|       |-ImplicitCastExpr 0x559b74bda858 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bda780 <col:9> 'int (struct k_mutex *)' Function 0x559b74bda478 'z_impl_k_mutex_init' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x559b74bda8a0 <col:29> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bda7d0 <col:29> 'struct k_mutex *' lvalue ParmVar 0x559b74bda548 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x559b74bdaa20 <line:622:1, col:69> col:12 used z_impl_k_mutex_lock 'int (struct k_mutex *, s32_t)' extern
| |-ParmVarDecl 0x559b74bda918 <col:32, col:49> col:49 mutex 'struct k_mutex *'
| `-ParmVarDecl 0x559b74bda988 <col:56, col:62> col:62 timeout 's32_t':'int'
|-FunctionDecl 0x559b74bdac00 prev 0x559b74ba8068 <line:623:1, line:632:1> line:623:19 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x559b74bdaaf8 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| |-ParmVarDecl 0x559b74bdab68 <col:56, col:62> col:62 used timeout 's32_t':'int'
| `-CompoundStmt 0x559b74bdaf20 <line:624:1, line:632:1>
|   |-DoStmt 0x559b74bdad90 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bdad58 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bdad08 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bdad70 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bdaf08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:631:2, col:43>
|     `-CallExpr 0x559b74bdaea0 <col:9, col:43> 'int'
|       |-ImplicitCastExpr 0x559b74bdae88 <col:9> 'int (*)(struct k_mutex *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bdadb0 <col:9> 'int (struct k_mutex *, s32_t)' Function 0x559b74bdaa20 'z_impl_k_mutex_lock' 'int (struct k_mutex *, s32_t)'
|       |-ImplicitCastExpr 0x559b74bdaed8 <col:29> 'struct k_mutex *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bdadd8 <col:29> 'struct k_mutex *' lvalue ParmVar 0x559b74bdaaf8 'mutex' 'struct k_mutex *'
|       `-ImplicitCastExpr 0x559b74bdaef0 <col:36> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bdae00 <col:36> 's32_t':'int' lvalue ParmVar 0x559b74bdab68 'timeout' 's32_t':'int'
|-FunctionDecl 0x559b74bdaff8 <line:635:1, col:56> col:12 used z_impl_k_mutex_unlock 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x559b74bdaf68 <col:34, col:51> col:51 mutex 'struct k_mutex *'
|-FunctionDecl 0x559b74bdb158 prev 0x559b74ba8200 <line:636:1, line:645:1> line:636:19 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x559b74bdb0c8 <col:34, col:51> col:51 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x559b74bdb3c8 <line:637:1, line:645:1>
|   |-DoStmt 0x559b74bdb2e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bdb2a8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bdb258 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bdb2c0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bdb3b0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:644:2, col:36>
|     `-CallExpr 0x559b74bdb368 <col:9, col:36> 'int'
|       |-ImplicitCastExpr 0x559b74bdb350 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bdb300 <col:9> 'int (struct k_mutex *)' Function 0x559b74bdaff8 'z_impl_k_mutex_unlock' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x559b74bdb398 <col:31> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bdb328 <col:31> 'struct k_mutex *' lvalue ParmVar 0x559b74bdb0c8 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x559b74bdb5a0 <line:648:1, col:96> col:12 used z_impl_k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' extern
| |-ParmVarDecl 0x559b74bdb410 <col:30, col:45> col:45 sem 'struct k_sem *'
| |-ParmVarDecl 0x559b74bdb488 <col:50, col:63> col:63 initial_count 'unsigned int'
| `-ParmVarDecl 0x559b74bdb500 <col:78, col:91> col:91 limit 'unsigned int'
|-FunctionDecl 0x559b74bdb810 prev 0x559b74ba8808 <line:649:1, line:658:1> line:649:19 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x559b74bdb680 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x559b74bdb6f8 <col:50, col:63> col:63 used initial_count 'unsigned int'
| |-ParmVarDecl 0x559b74bdb770 <col:78, col:91> col:91 used limit 'unsigned int'
| `-CompoundStmt 0x559b74bdbb80 <line:650:1, line:658:1>
|   |-DoStmt 0x559b74bdb9a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bdb970 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bdb920 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bdb988 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bdbb68 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:657:2, col:52>
|     `-CallExpr 0x559b74bdbae0 <col:9, col:52> 'int'
|       |-ImplicitCastExpr 0x559b74bdbac8 <col:9> 'int (*)(struct k_sem *, unsigned int, unsigned int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bdb9c8 <col:9> 'int (struct k_sem *, unsigned int, unsigned int)' Function 0x559b74bdb5a0 'z_impl_k_sem_init' 'int (struct k_sem *, unsigned int, unsigned int)'
|       |-ImplicitCastExpr 0x559b74bdbb20 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bdb9f0 <col:27> 'struct k_sem *' lvalue ParmVar 0x559b74bdb680 'sem' 'struct k_sem *'
|       |-ImplicitCastExpr 0x559b74bdbb38 <col:32> 'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bdba18 <col:32> 'unsigned int' lvalue ParmVar 0x559b74bdb6f8 'initial_count' 'unsigned int'
|       `-ImplicitCastExpr 0x559b74bdbb50 <col:47> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bdba40 <col:47> 'unsigned int' lvalue ParmVar 0x559b74bdb770 'limit' 'unsigned int'
|-FunctionDecl 0x559b74bdbcd0 <line:661:1, col:63> col:12 used z_impl_k_sem_take 'int (struct k_sem *, s32_t)' extern
| |-ParmVarDecl 0x559b74bdbbc8 <col:30, col:45> col:45 sem 'struct k_sem *'
| `-ParmVarDecl 0x559b74bdbc38 <col:50, col:56> col:56 timeout 's32_t':'int'
|-FunctionDecl 0x559b74bdbeb0 prev 0x559b74ba8a98 <line:662:1, line:671:1> line:662:19 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x559b74bdbda8 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x559b74bdbe18 <col:50, col:56> col:56 used timeout 's32_t':'int'
| `-CompoundStmt 0x559b74bdc1d0 <line:663:1, line:671:1>
|   |-DoStmt 0x559b74bdc040 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bdc008 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bdbfb8 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bdc020 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bdc1b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:670:2, col:39>
|     `-CallExpr 0x559b74bdc150 <col:9, col:39> 'int'
|       |-ImplicitCastExpr 0x559b74bdc138 <col:9> 'int (*)(struct k_sem *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bdc060 <col:9> 'int (struct k_sem *, s32_t)' Function 0x559b74bdbcd0 'z_impl_k_sem_take' 'int (struct k_sem *, s32_t)'
|       |-ImplicitCastExpr 0x559b74bdc188 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bdc088 <col:27> 'struct k_sem *' lvalue ParmVar 0x559b74bdbda8 'sem' 'struct k_sem *'
|       `-ImplicitCastExpr 0x559b74bdc1a0 <col:32> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bdc0b0 <col:32> 's32_t':'int' lvalue ParmVar 0x559b74bdbe18 'timeout' 's32_t':'int'
|-FunctionDecl 0x559b74bdc2a0 <line:674:1, col:49> col:13 used z_impl_k_sem_give 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x559b74bdc218 <col:31, col:46> col:46 sem 'struct k_sem *'
|-FunctionDecl 0x559b74bdc3f8 prev 0x559b74ba9cf0 <line:675:1, line:685:1> line:675:20 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x559b74bdc370 <col:31, col:46> col:46 used sem 'struct k_sem *'
| `-CompoundStmt 0x559b74bdc6a8 <line:676:1, line:685:1>
|   |-DoStmt 0x559b74bdc580 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bdc548 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bdc4f8 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bdc560 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bdc660 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:684:2, col:23> 'void'
|     |-ImplicitCastExpr 0x559b74bdc648 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bdc5a0 <col:2> 'void (struct k_sem *)' Function 0x559b74bdc2a0 'z_impl_k_sem_give' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x559b74bdc690 <col:20> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bdc5c8 <col:20> 'struct k_sem *' lvalue ParmVar 0x559b74bdc370 'sem' 'struct k_sem *'
|-FunctionDecl 0x559b74bdc7e0 prev 0x559b74ba9ff8 <line:688:1, col:50> col:13 used z_impl_k_sem_reset 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x559b74bdc6f0 <col:32, col:47> col:47 sem 'struct k_sem *'
|-FunctionDecl 0x559b74bdc938 prev 0x559b74ba9e78 <line:689:1, line:699:1> line:689:20 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x559b74bdc8b0 <col:32, col:47> col:47 used sem 'struct k_sem *'
| `-CompoundStmt 0x559b74bdcb90 <line:690:1, line:699:1>
|   |-DoStmt 0x559b74bdcac0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bdca88 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bdca38 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bdcaa0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bdcb48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:698:2, col:24> 'void'
|     |-ImplicitCastExpr 0x559b74bdcb30 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bdcae0 <col:2> 'void (struct k_sem *)' Function 0x559b74bdc7e0 'z_impl_k_sem_reset' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x559b74bdcb78 <col:21> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bdcb08 <col:21> 'struct k_sem *' lvalue ParmVar 0x559b74bdc8b0 'sem' 'struct k_sem *'
|-FunctionDecl 0x559b74bdcc68 prev 0x559b74baa460 <line:702:1, col:62> col:21 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' extern
| `-ParmVarDecl 0x559b74bdcbd8 <col:44, col:59> col:59 sem 'struct k_sem *'
|-FunctionDecl 0x559b74bdcdc8 prev 0x559b74baa2d8 <line:703:1, line:712:1> line:703:28 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x559b74bdcd38 <col:44, col:59> col:59 used sem 'struct k_sem *'
| `-CompoundStmt 0x559b74bdd090 <line:704:1, line:712:1>
|   |-DoStmt 0x559b74bdcf50 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bdcf18 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bdcec8 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bdcf30 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bdd078 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:711:2, col:35>
|     `-CallExpr 0x559b74bdd030 <col:9, col:35> 'unsigned int'
|       |-ImplicitCastExpr 0x559b74bdd018 <col:9> 'unsigned int (*)(struct k_sem *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bdcf70 <col:9> 'unsigned int (struct k_sem *)' Function 0x559b74bdcc68 'z_impl_k_sem_count_get' 'unsigned int (struct k_sem *)'
|       `-ImplicitCastExpr 0x559b74bdd060 <col:32> 'struct k_sem *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bdcf98 <col:32> 'struct k_sem *' lvalue ParmVar 0x559b74bdcd38 'sem' 'struct k_sem *'
|-FunctionDecl 0x559b74bdd258 <line:715:1, col:90> col:12 used z_impl_k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' extern
| |-ParmVarDecl 0x559b74bdd0d8 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x559b74bdd148 <col:59, col:66> col:66 msg_size 'size_t':'unsigned long'
| `-ParmVarDecl 0x559b74bdd1b8 <col:76, col:82> col:82 max_msgs 'u32_t':'unsigned int'
|-FunctionDecl 0x559b74bdd4b8 prev 0x559b74b5aa48 <line:716:1, line:725:1> line:716:19 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x559b74bdd338 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x559b74bdd3a8 <col:59, col:66> col:66 used msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74bdd418 <col:76, col:82> col:82 used max_msgs 'u32_t':'unsigned int'
| `-CompoundStmt 0x559b74bdd820 <line:717:1, line:725:1>
|   |-DoStmt 0x559b74bdd650 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bdd618 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bdd5c8 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bdd630 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bdd808 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:724:2, col:58>
|     `-CallExpr 0x559b74bdd780 <col:9, col:58> 'int'
|       |-ImplicitCastExpr 0x559b74bdd768 <col:9> 'int (*)(struct k_msgq *, size_t, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bdd670 <col:9> 'int (struct k_msgq *, size_t, u32_t)' Function 0x559b74bdd258 'z_impl_k_msgq_alloc_init' 'int (struct k_msgq *, size_t, u32_t)'
|       |-ImplicitCastExpr 0x559b74bdd7c0 <col:34> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bdd698 <col:34> 'struct k_msgq *' lvalue ParmVar 0x559b74bdd338 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x559b74bdd7d8 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bdd6c0 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x559b74bdd3a8 'msg_size' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x559b74bdd7f0 <col:50> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bdd6e8 <col:50> 'u32_t':'unsigned int' lvalue ParmVar 0x559b74bdd418 'max_msgs' 'u32_t':'unsigned int'
|-FunctionDecl 0x559b74bdd9f0 <line:728:1, col:78> col:12 used z_impl_k_msgq_put 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x559b74bdd868 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x559b74bdd8e0 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x559b74bdd950 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x559b74bddc58 prev 0x559b74b5af78 <line:729:1, line:738:1> line:729:19 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x559b74bddad0 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x559b74bddb48 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x559b74bddbb8 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x559b74bddfc0 <line:730:1, line:738:1>
|   |-DoStmt 0x559b74bdddf0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bdddb8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bddd68 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bdddd0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bddfa8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:737:2, col:46>
|     `-CallExpr 0x559b74bddf20 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x559b74bddf08 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bdde10 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x559b74bdd9f0 'z_impl_k_msgq_put' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x559b74bddf60 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bdde38 <col:27> 'struct k_msgq *' lvalue ParmVar 0x559b74bddad0 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x559b74bddf78 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bdde60 <col:33> 'void *' lvalue ParmVar 0x559b74bddb48 'data' 'void *'
|       `-ImplicitCastExpr 0x559b74bddf90 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bdde88 <col:39> 's32_t':'int' lvalue ParmVar 0x559b74bddbb8 'timeout' 's32_t':'int'
|-FunctionDecl 0x559b74bde190 <line:741:1, col:78> col:12 used z_impl_k_msgq_get 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x559b74bde008 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x559b74bde080 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x559b74bde0f0 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x559b74bde3f8 prev 0x559b74bae668 <line:742:1, line:751:1> line:742:19 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x559b74bde270 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x559b74bde2e8 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x559b74bde358 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x559b74bde708 <line:743:1, line:751:1>
|   |-DoStmt 0x559b74bde590 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bde558 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bde508 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bde570 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bde6f0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:750:2, col:46>
|     `-CallExpr 0x559b74bde668 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x559b74bde650 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bde5b0 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x559b74bde190 'z_impl_k_msgq_get' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x559b74bde6a8 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bde5d8 <col:27> 'struct k_msgq *' lvalue ParmVar 0x559b74bde270 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x559b74bde6c0 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bde600 <col:33> 'void *' lvalue ParmVar 0x559b74bde2e8 'data' 'void *'
|       `-ImplicitCastExpr 0x559b74bde6d8 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bde628 <col:39> 's32_t':'int' lvalue ParmVar 0x559b74bde358 'timeout' 's32_t':'int'
|-FunctionDecl 0x559b74bde888 <line:754:1, col:64> col:12 used z_impl_k_msgq_peek 'int (struct k_msgq *, void *)' extern
| |-ParmVarDecl 0x559b74bde750 <col:31, col:47> col:47 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x559b74bde7f0 <col:53, col:60> col:60 data 'void *'
|-FunctionDecl 0x559b74bdea70 prev 0x559b74bae908 <line:755:1, line:764:1> line:755:19 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x559b74bde960 <col:31, col:47> col:47 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x559b74bde9d8 <col:53, col:60> col:60 used data 'void *'
| `-CompoundStmt 0x559b74bded90 <line:756:1, line:764:1>
|   |-DoStmt 0x559b74bdec00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bdebc8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bdeb78 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bdebe0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bded78 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:763:2, col:38>
|     `-CallExpr 0x559b74bded10 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x559b74bdecf8 <col:9> 'int (*)(struct k_msgq *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bdec20 <col:9> 'int (struct k_msgq *, void *)' Function 0x559b74bde888 'z_impl_k_msgq_peek' 'int (struct k_msgq *, void *)'
|       |-ImplicitCastExpr 0x559b74bded48 <col:28> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74bdec48 <col:28> 'struct k_msgq *' lvalue ParmVar 0x559b74bde960 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x559b74bded60 <col:34> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bdec70 <col:34> 'void *' lvalue ParmVar 0x559b74bde9d8 'data' 'void *'
|-FunctionDecl 0x559b74bdee60 <line:767:1, col:53> col:13 used z_impl_k_msgq_purge 'void (struct k_msgq *)' extern
| `-ParmVarDecl 0x559b74bdedd8 <col:33, col:49> col:49 msgq 'struct k_msgq *'
|-FunctionDecl 0x559b74bdefb8 prev 0x559b74baeb10 <line:768:1, line:778:1> line:768:20 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x559b74bdef30 <col:33, col:49> col:49 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x559b74bdf268 <line:769:1, line:778:1>
|   |-DoStmt 0x559b74bdf140 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bdf108 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bdf0b8 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bdf120 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bdf220 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:777:2, col:26> 'void'
|     |-ImplicitCastExpr 0x559b74bdf208 <col:2> 'void (*)(struct k_msgq *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bdf160 <col:2> 'void (struct k_msgq *)' Function 0x559b74bdee60 'z_impl_k_msgq_purge' 'void (struct k_msgq *)'
|     `-ImplicitCastExpr 0x559b74bdf250 <col:22> 'struct k_msgq *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bdf188 <col:22> 'struct k_msgq *' lvalue ParmVar 0x559b74bdef30 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x559b74bdf338 prev 0x559b74baf190 <line:781:1, col:61> col:14 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x559b74bdf2b0 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x559b74bdf490 prev 0x559b74baed10 <line:782:1, line:791:1> line:782:21 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x559b74bdf408 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x559b74bdf760 <line:783:1, line:791:1>
|   |-DoStmt 0x559b74bdf618 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bdf5e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bdf590 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bdf5f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74bdf748 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:790:2, col:40>
|     `-CallExpr 0x559b74bdf700 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x559b74bdf6e8 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74bdf638 <col:9> 'u32_t (struct k_msgq *)' Function 0x559b74bdf338 'z_impl_k_msgq_num_free_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x559b74bdf730 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74bdf660 <col:36> 'struct k_msgq *' lvalue ParmVar 0x559b74bdf408 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x559b74bdf8c0 <line:794:1, col:86> col:13 used z_impl_k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' extern
| |-ParmVarDecl 0x559b74bdf7a8 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x559b74bdf830 <col:59, col:81> col:81 attrs 'struct k_msgq_attrs *'
|-FunctionDecl 0x559b74bdfab0 prev 0x559b74baf030 <line:795:1, line:805:1> line:795:20 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x559b74bdf998 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x559b74bdfa20 <col:59, col:81> col:81 used attrs 'struct k_msgq_attrs *'
| `-CompoundStmt 0x559b74bdfdb8 <line:796:1, line:805:1>
|   |-DoStmt 0x559b74bdfc40 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74bdfc08 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74bdfbb8 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74bdfc20 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74bdfd50 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:804:2, col:37> 'void'
|     |-ImplicitCastExpr 0x559b74bdfd38 <col:2> 'void (*)(struct k_msgq *, struct k_msgq_attrs *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74bdfc60 <col:2> 'void (struct k_msgq *, struct k_msgq_attrs *)' Function 0x559b74bdf8c0 'z_impl_k_msgq_get_attrs' 'void (struct k_msgq *, struct k_msgq_attrs *)'
|     |-ImplicitCastExpr 0x559b74bdfd88 <col:26> 'struct k_msgq *' <LValueToRValue>
|     | `-DeclRefExpr 0x559b74bdfc88 <col:26> 'struct k_msgq *' lvalue ParmVar 0x559b74bdf998 'msgq' 'struct k_msgq *'
|     `-ImplicitCastExpr 0x559b74bdfda0 <col:32> 'struct k_msgq_attrs *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74bdfcb0 <col:32> 'struct k_msgq_attrs *' lvalue ParmVar 0x559b74bdfa20 'attrs' 'struct k_msgq_attrs *'
|-FunctionDecl 0x559b74bdfe88 prev 0x559b74bafa68 <line:808:1, col:61> col:14 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x559b74bdfe00 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x559b74bdffe0 prev 0x559b74baf910 <line:809:1, line:818:1> line:809:21 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x559b74bdff58 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x559b74be0250 <line:810:1, line:818:1>
|   |-DoStmt 0x559b74be0168 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74be0130 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74be00e0 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74be0148 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74be0238 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:817:2, col:40>
|     `-CallExpr 0x559b74be01f0 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x559b74be01d8 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74be0188 <col:9> 'u32_t (struct k_msgq *)' Function 0x559b74bdfe88 'z_impl_k_msgq_num_used_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x559b74be0220 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74be01b0 <col:36> 'struct k_msgq *' lvalue ParmVar 0x559b74bdff58 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x559b74be03a0 <line:821:1, col:70> col:12 used z_impl_k_pipe_alloc_init 'int (struct k_pipe *, size_t)' extern
| |-ParmVarDecl 0x559b74be0298 <col:37, col:53> col:53 pipe 'struct k_pipe *'
| `-ParmVarDecl 0x559b74be0308 <col:59, col:66> col:66 size 'size_t':'unsigned long'
|-FunctionDecl 0x559b74be0580 prev 0x559b74bb5bd8 <line:822:1, line:831:1> line:822:19 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x559b74be0478 <col:37, col:53> col:53 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x559b74be04e8 <col:59, col:66> col:66 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x559b74be08c0 <line:823:1, line:831:1>
|   |-DoStmt 0x559b74be0710 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74be06d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74be0688 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74be06f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74be08a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:830:2, col:44>
|     `-CallExpr 0x559b74be0840 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x559b74be0828 <col:9> 'int (*)(struct k_pipe *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74be0730 <col:9> 'int (struct k_pipe *, size_t)' Function 0x559b74be03a0 'z_impl_k_pipe_alloc_init' 'int (struct k_pipe *, size_t)'
|       |-ImplicitCastExpr 0x559b74be0878 <col:34> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74be0758 <col:34> 'struct k_pipe *' lvalue ParmVar 0x559b74be0478 'pipe' 'struct k_pipe *'
|       `-ImplicitCastExpr 0x559b74be0890 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x559b74be0780 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x559b74be04e8 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x559b74be0bf8 <line:834:1, col:142> col:12 used z_impl_k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x559b74be0908 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x559b74be0980 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x559b74be09f0 <col:65, col:72> col:72 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74be0a60 <col:88, col:97> col:97 bytes_written 'size_t *'
| |-ParmVarDecl 0x559b74be0ad0 <col:112, col:119> col:119 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x559b74be0b40 <col:129, col:135> col:135 timeout 's32_t':'int'
|-FunctionDecl 0x559b74be0fe0 prev 0x559b74bb60c8 <line:835:1, line:844:1> line:835:19 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x559b74be0cf0 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x559b74be0d68 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x559b74be0dd8 <col:65, col:72> col:72 used bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74be0e48 <col:88, col:97> col:97 used bytes_written 'size_t *'
| |-ParmVarDecl 0x559b74be0eb8 <col:112, col:119> col:119 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74be0f28 <col:129, col:135> col:135 used timeout 's32_t':'int'
| `-CompoundStmt 0x559b74be1440 <line:836:1, line:844:1>
|   |-DoStmt 0x559b74be1190 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74be1158 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74be1108 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74be1170 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74be1428 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:843:2, col:87>
|     `-CallExpr 0x559b74be1340 <col:9, col:87> 'int'
|       |-ImplicitCastExpr 0x559b74be1328 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74be11b0 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x559b74be0bf8 'z_impl_k_pipe_put' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x559b74be1398 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74be11d8 <col:27> 'struct k_pipe *' lvalue ParmVar 0x559b74be0cf0 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x559b74be13b0 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74be1200 <col:33> 'void *' lvalue ParmVar 0x559b74be0d68 'data' 'void *'
|       |-ImplicitCastExpr 0x559b74be13c8 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74be1228 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x559b74be0dd8 'bytes_to_write' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x559b74be13e0 <col:55> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74be1250 <col:55> 'size_t *' lvalue ParmVar 0x559b74be0e48 'bytes_written' 'size_t *'
|       |-ImplicitCastExpr 0x559b74be13f8 <col:70> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74be1278 <col:70> 'size_t':'unsigned long' lvalue ParmVar 0x559b74be0eb8 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x559b74be1410 <col:80> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74be12a0 <col:80> 's32_t':'int' lvalue ParmVar 0x559b74be0f28 'timeout' 's32_t':'int'
|-FunctionDecl 0x559b74be1778 <line:847:1, col:138> col:12 used z_impl_k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x559b74be1488 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x559b74be1500 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x559b74be1570 <col:65, col:72> col:72 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74be15e0 <col:87, col:96> col:96 bytes_read 'size_t *'
| |-ParmVarDecl 0x559b74be1650 <col:108, col:115> col:115 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x559b74be16c0 <col:125, col:131> col:131 timeout 's32_t':'int'
|-FunctionDecl 0x559b74be1b60 prev 0x559b74bb64e0 <line:848:1, line:857:1> line:848:19 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x559b74be1870 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x559b74be18e8 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x559b74be1958 <col:65, col:72> col:72 used bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74be19c8 <col:87, col:96> col:96 used bytes_read 'size_t *'
| |-ParmVarDecl 0x559b74be1a38 <col:108, col:115> col:115 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x559b74be1aa8 <col:125, col:131> col:131 used timeout 's32_t':'int'
| `-CompoundStmt 0x559b74be1f60 <line:849:1, line:857:1>
|   |-DoStmt 0x559b74be1d10 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74be1cd8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74be1c88 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74be1cf0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74be1f48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:856:2, col:83>
|     `-CallExpr 0x559b74be1e60 <col:9, col:83> 'int'
|       |-ImplicitCastExpr 0x559b74be1e48 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74be1d30 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x559b74be1778 'z_impl_k_pipe_get' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x559b74be1eb8 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74be1d58 <col:27> 'struct k_pipe *' lvalue ParmVar 0x559b74be1870 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x559b74be1ed0 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74be1d80 <col:33> 'void *' lvalue ParmVar 0x559b74be18e8 'data' 'void *'
|       |-ImplicitCastExpr 0x559b74be1ee8 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74be1da8 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x559b74be1958 'bytes_to_read' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x559b74be1f00 <col:54> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74be1dd0 <col:54> 'size_t *' lvalue ParmVar 0x559b74be19c8 'bytes_read' 'size_t *'
|       |-ImplicitCastExpr 0x559b74be1f18 <col:66> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74be1df8 <col:66> 'size_t':'unsigned long' lvalue ParmVar 0x559b74be1a38 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x559b74be1f30 <col:76> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74be1e20 <col:76> 's32_t':'int' lvalue ParmVar 0x559b74be1aa8 'timeout' 's32_t':'int'
|-FunctionDecl 0x559b74be2130 <line:860:1, col:85> col:12 used z_impl_k_poll 'int (struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x559b74be1fa8 <col:26, col:48> col:48 events 'struct k_poll_event *'
| |-ParmVarDecl 0x559b74be2020 <col:56, col:60> col:60 num_events 'int'
| `-ParmVarDecl 0x559b74be2090 <col:72, col:78> col:78 timeout 's32_t':'int'
|-FunctionDecl 0x559b74be2398 prev 0x559b74bbfb48 <line:861:1, line:870:1> line:861:19 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x559b74be2210 <col:26, col:48> col:48 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x559b74be2288 <col:56, col:60> col:60 used num_events 'int'
| |-ParmVarDecl 0x559b74be22f8 <col:72, col:78> col:78 used timeout 's32_t':'int'
| `-CompoundStmt 0x559b74be2700 <line:862:1, line:870:1>
|   |-DoStmt 0x559b74be2530 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74be24f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74be24a8 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74be2510 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74be26e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:869:2, col:50>
|     `-CallExpr 0x559b74be2660 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x559b74be2648 <col:9> 'int (*)(struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74be2550 <col:9> 'int (struct k_poll_event *, int, s32_t)' Function 0x559b74be2130 'z_impl_k_poll' 'int (struct k_poll_event *, int, s32_t)'
|       |-ImplicitCastExpr 0x559b74be26a0 <col:23> 'struct k_poll_event *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74be2578 <col:23> 'struct k_poll_event *' lvalue ParmVar 0x559b74be2210 'events' 'struct k_poll_event *'
|       |-ImplicitCastExpr 0x559b74be26b8 <col:31> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74be25a0 <col:31> 'int' lvalue ParmVar 0x559b74be2288 'num_events' 'int'
|       `-ImplicitCastExpr 0x559b74be26d0 <col:43> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74be25c8 <col:43> 's32_t':'int' lvalue ParmVar 0x559b74be22f8 'timeout' 's32_t':'int'
|-FunctionDecl 0x559b74be2810 <line:873:1, col:68> col:13 used z_impl_k_poll_signal_init 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x559b74be2748 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
|-FunctionDecl 0x559b74be2968 prev 0x559b74bbfd50 <line:874:1, line:884:1> line:874:20 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x559b74be28e0 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x559b74be2c18 <line:875:1, line:884:1>
|   |-DoStmt 0x559b74be2af0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74be2ab8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74be2a68 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74be2ad0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74be2bd0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:883:2, col:34> 'void'
|     |-ImplicitCastExpr 0x559b74be2bb8 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74be2b10 <col:2> 'void (struct k_poll_signal *)' Function 0x559b74be2810 'z_impl_k_poll_signal_init' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x559b74be2c00 <col:28> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74be2b38 <col:28> 'struct k_poll_signal *' lvalue ParmVar 0x559b74be28e0 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x559b74be2ce8 prev 0x559b74bc0000 <line:887:1, col:69> col:13 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x559b74be2c60 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
|-FunctionDecl 0x559b74be2e40 prev 0x559b74bbfea8 <line:888:1, line:898:1> line:888:20 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x559b74be2db8 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x559b74be3098 <line:889:1, line:898:1>
|   |-DoStmt 0x559b74be2fc8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74be2f90 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74be2f40 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74be2fa8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74be3050 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:897:2, col:35> 'void'
|     |-ImplicitCastExpr 0x559b74be3038 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74be2fe8 <col:2> 'void (struct k_poll_signal *)' Function 0x559b74be2ce8 'z_impl_k_poll_signal_reset' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x559b74be3080 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74be3010 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x559b74be2db8 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x559b74be3268 <line:901:1, col:108> col:13 used z_impl_k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' extern
| |-ParmVarDecl 0x559b74be30e0 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x559b74be3158 <col:71, col:86> col:86 signaled 'unsigned int *'
| `-ParmVarDecl 0x559b74be31d0 <col:96, col:102> col:102 result 'int *'
|-FunctionDecl 0x559b74be34d0 prev 0x559b74bc0400 <line:902:1, line:912:1> line:902:20 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x559b74be3348 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x559b74be33c0 <col:71, col:86> col:86 used signaled 'unsigned int *'
| |-ParmVarDecl 0x559b74be3438 <col:96, col:102> col:102 used result 'int *'
| `-CompoundStmt 0x559b74be3828 <line:903:1, line:912:1>
|   |-DoStmt 0x559b74be3668 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74be3630 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74be35e0 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74be3648 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74be37a0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:911:2, col:53> 'void'
|     |-ImplicitCastExpr 0x559b74be3788 <col:2> 'void (*)(struct k_poll_signal *, unsigned int *, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74be3688 <col:2> 'void (struct k_poll_signal *, unsigned int *, int *)' Function 0x559b74be3268 'z_impl_k_poll_signal_check' 'void (struct k_poll_signal *, unsigned int *, int *)'
|     |-ImplicitCastExpr 0x559b74be37e0 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|     | `-DeclRefExpr 0x559b74be36b0 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x559b74be3348 'signal' 'struct k_poll_signal *'
|     |-ImplicitCastExpr 0x559b74be37f8 <col:37> 'unsigned int *' <LValueToRValue>
|     | `-DeclRefExpr 0x559b74be36d8 <col:37> 'unsigned int *' lvalue ParmVar 0x559b74be33c0 'signaled' 'unsigned int *'
|     `-ImplicitCastExpr 0x559b74be3810 <col:47> 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x559b74be3700 <col:47> 'int *' lvalue ParmVar 0x559b74be3438 'result' 'int *'
|-FunctionDecl 0x559b74be3980 <line:915:1, col:80> col:12 used z_impl_k_poll_signal_raise 'int (struct k_poll_signal *, int)' extern
| |-ParmVarDecl 0x559b74be3870 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
| `-ParmVarDecl 0x559b74be38e8 <col:70, col:74> col:74 result 'int'
|-FunctionDecl 0x559b74be3b68 prev 0x559b74bc0b50 <line:916:1, line:925:1> line:916:19 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x559b74be3a58 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x559b74be3ad0 <col:70, col:74> col:74 used result 'int'
| `-CompoundStmt 0x559b74be3e80 <line:917:1, line:925:1>
|   |-DoStmt 0x559b74be3cf8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74be3cc0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74be3c70 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74be3cd8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74be3e68 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:924:2, col:50>
|     `-CallExpr 0x559b74be3e00 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x559b74be3de8 <col:9> 'int (*)(struct k_poll_signal *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74be3d18 <col:9> 'int (struct k_poll_signal *, int)' Function 0x559b74be3980 'z_impl_k_poll_signal_raise' 'int (struct k_poll_signal *, int)'
|       |-ImplicitCastExpr 0x559b74be3e38 <col:36> 'struct k_poll_signal *' <LValueToRValue>
|       | `-DeclRefExpr 0x559b74be3d40 <col:36> 'struct k_poll_signal *' lvalue ParmVar 0x559b74be3a58 'signal' 'struct k_poll_signal *'
|       `-ImplicitCastExpr 0x559b74be3e50 <col:44> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x559b74be3d68 <col:44> 'int' lvalue ParmVar 0x559b74be3ad0 'result' 'int'
|-FunctionDecl 0x559b74be4040 <line:928:1, col:48> col:13 used z_impl_k_str_out 'void (char *, size_t)' extern
| |-ParmVarDecl 0x559b74be3eb8 <col:30, col:37> col:37 c 'char *'
| `-ParmVarDecl 0x559b74be3f28 <col:40, col:47> col:47 n 'size_t':'unsigned long'
|-FunctionDecl 0x559b74be4208 <line:929:1, line:939:1> line:929:20 k_str_out 'void (char *, size_t)' static inline
| |-ParmVarDecl 0x559b74be4108 <col:30, col:37> col:37 used c 'char *'
| |-ParmVarDecl 0x559b74be4178 <col:40, col:47> col:47 used n 'size_t':'unsigned long'
| `-CompoundStmt 0x559b74be4508 <line:930:1, line:939:1>
|   |-DoStmt 0x559b74be4398 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74be4360 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74be4310 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74be4378 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559b74be44a0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:938:2, col:23> 'void'
|     |-ImplicitCastExpr 0x559b74be4488 <col:2> 'void (*)(char *, size_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559b74be43b8 <col:2> 'void (char *, size_t)' Function 0x559b74be4040 'z_impl_k_str_out' 'void (char *, size_t)'
|     |-ImplicitCastExpr 0x559b74be44d8 <col:19> 'char *' <LValueToRValue>
|     | `-DeclRefExpr 0x559b74be43e0 <col:19> 'char *' lvalue ParmVar 0x559b74be4108 'c' 'char *'
|     `-ImplicitCastExpr 0x559b74be44f0 <col:22> 'size_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x559b74be4408 <col:22> 'size_t':'unsigned long' lvalue ParmVar 0x559b74be4178 'n' 'size_t':'unsigned long'
|-FunctionDecl 0x559b74be45e0 <line:942:1, col:59> col:12 used z_impl_k_float_disable 'int (struct k_thread *)' extern
| `-ParmVarDecl 0x559b74be4550 <col:35, col:53> col:53 thread 'struct k_thread *'
|-FunctionDecl 0x559b74be4740 prev 0x559b74bc5f68 <line:943:1, line:952:1> line:943:19 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x559b74be46b0 <col:35, col:53> col:53 used thread 'struct k_thread *'
| `-CompoundStmt 0x559b74be5a00 <line:944:1, line:952:1>
|   |-DoStmt 0x559b74be58e8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559b74be58b0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559b74be5860 <col:2, col:39>
|   | `-IntegerLiteral 0x559b74be58c8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559b74be59e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:951:2, col:38>
|     `-CallExpr 0x559b74be59a0 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x559b74be5988 <col:9> 'int (*)(struct k_thread *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559b74be5908 <col:9> 'int (struct k_thread *)' Function 0x559b74be45e0 'z_impl_k_float_disable' 'int (struct k_thread *)'
|       `-ImplicitCastExpr 0x559b74be59d0 <col:32> 'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x559b74be5930 <col:32> 'struct k_thread *' lvalue ParmVar 0x559b74be46b0 'thread' 'struct k_thread *'
|-FunctionDecl 0x559b74be5b00 </vagrant/apps/plc_4out/./_build/arm-tfm/install/export/tfm/inc/tfm_gpio_veneers.h:11:1, col:32> col:10 tfm_gpio_read_all 'uint32_t (void)'
|-FunctionDecl 0x559b74be5cd0 <line:12:1, col:40> col:9 tfm_gpio_write_all 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x559b74be5bd0 <col:28, col:37> col:37 out 'uint32_t':'unsigned int'
|-FunctionDecl 0x559b74be5e10 <line:13:1, col:46> col:9 tfm_gpio_enable_outputs 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x559b74be5d88 <col:33, col:42> col:42 pins 'uint32_t':'unsigned int'
|-FunctionDecl 0x559b74be5fd0 <line:14:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559b74be5ec8 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559b74be6110 <line:16:1, col:43> col:9 tfm_gpio_enable_output 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559b74be6088 <col:32, col:40> col:40 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559b74be6250 <line:17:1, col:33> col:9 tfm_gpio_set 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559b74be61c8 <col:22, col:30> col:30 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559b74be6390 <line:18:1, col:35> col:9 tfm_gpio_clear 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559b74be6308 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559b74be64d0 <line:19:1, col:37> col:9 tfm_gpio_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559b74be6448 <col:26, col:34> col:34 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559b74be6610 prev 0x559b74be5fd0 <line:20:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559b74be6588 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-RecordDecl 0x559b74be66b8 <line:34:9, line:38:1> line:34:9 struct definition
| |-FieldDecl 0x559b74be6770 <line:35:5, col:13> col:13 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x559b74be67c8 <line:36:5, col:13> col:13 polarity 'uint8_t':'unsigned char'
| `-FieldDecl 0x559b74be68b0 <line:37:5, col:21> col:12 cb 'void (*)(void)'
|-TypedefDecl 0x559b74be6950 <line:34:1, line:38:3> col:3 referenced gpio_int_config 'struct gpio_int_config':'gpio_int_config'
| `-ElaboratedType 0x559b74be6900 'struct gpio_int_config' sugar
|   `-RecordType 0x559b74be6740 'gpio_int_config'
|     `-Record 0x559b74be66b8 ''
|-FunctionDecl 0x559b74be6bd0 <line:40:1, col:68> col:9 tfm_gpio_interrupt_enable 'uint8_t (uint8_t, gpio_int_config *)'
| |-ParmVarDecl 0x559b74be69d0 <col:35, col:43> col:43 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x559b74be6ab8 <col:48, col:65> col:65 cfg 'gpio_int_config *'
|-FunctionDecl 0x559b74be6d18 <line:41:1, col:47> col:9 tfm_gpio_interrupt_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559b74be6c90 <col:36, col:44> col:44 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x559b74be6dd8 </vagrant/apps/plc_4out/./inc/plc_platform.h:5:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x559b749d89f0 'short'
|-TypedefDecl 0x559b74be6e48 <line:6:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x559b749d8a70 'unsigned char'
|-EnumDecl 0x559b74be6ea0 <line:25:9, line:29:1> line:25:9
| |-EnumConstantDecl 0x559b74be6f80 <line:26:2, col:6> col:2 R 'int'
| | `-IntegerLiteral 0x559b74be6f60 <col:6> 'int' 2
| |-EnumConstantDecl 0x559b74be6fe8 <line:27:2, col:6> col:2 G 'int'
| | `-IntegerLiteral 0x559b74be6fc8 <col:6> 'int' 3
| `-EnumConstantDecl 0x559b74be7050 <line:28:2, col:6> col:2 B 'int'
|   `-IntegerLiteral 0x559b74be7030 <col:6> 'int' 4
|-TypedefDecl 0x559b74be70f0 <line:25:1, line:29:3> col:3 referenced LED 'enum LED':'LED'
| `-ElaboratedType 0x559b74be70a0 'enum LED' sugar
|   `-EnumType 0x559b74be6f40 'LED'
|     `-Enum 0x559b74be6ea0 ''
|-FunctionDecl 0x559b74be7320 <line:31:1, col:56> col:6 enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x559b74be7198 <col:25, col:34> col:34 pins 'uint8_t *'
| `-ParmVarDecl 0x559b74be7208 <col:40, col:48> col:48 num_pins 'uint8_t':'unsigned char'
|-FunctionDecl 0x559b74be74e0 <line:33:1, col:35> col:6 enable_pin_output 'void (uint8_t)'
| `-ParmVarDecl 0x559b74be73e0 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559b74be7618 <line:35:1, col:24> col:6 read_in_table 'void (void)'
|-FunctionDecl 0x559b74be7748 <line:37:1, col:26> col:6 write_out_table 'void (void)'
|-FunctionDecl 0x559b74be94b8 <line:41:1, col:25> col:6 set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x559b74be9430 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
| `-FullComment 0x559b74c6f620 <line:39:4, col:42>
|   `-ParagraphComment 0x559b74c6f5f0 <col:4, col:42>
|     `-TextComment 0x559b74c6f5c0 <col:4, col:42> Text="************** For User ***************"
|-FunctionDecl 0x559b74be95f8 <line:43:1, col:25> col:6 clr_pin 'void (uint8_t)'
| `-ParmVarDecl 0x559b74be9570 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559b74be9850 <line:45:1, col:37> col:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x559b74be96b0 <col:16, col:24> col:24 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x559b74be9740 <col:29, col:34> col:34 val 'BOOL':'unsigned char'
|-FunctionDecl 0x559b74be99d0 <line:47:1, col:26> col:6 read_pin 'BOOL (uint8_t)'
| `-ParmVarDecl 0x559b74be9910 <col:15, col:23> col:23 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559b74be9bb0 <line:49:1, col:22> col:6 LED_on 'void (LED)'
| `-ParmVarDecl 0x559b74be9ab0 <col:13, col:17> col:17 color 'LED':'LED'
|-FunctionDecl 0x559b74be9cf0 <line:51:1, col:23> col:6 LED_off 'void (LED)'
| `-ParmVarDecl 0x559b74be9c68 <col:14, col:18> col:18 color 'LED':'LED'
|-FunctionDecl 0x559b74be9eb0 <line:53:1, col:24> col:6 read_LED 'BOOL (LED)'
| `-ParmVarDecl 0x559b74be9da8 <col:15, col:19> col:19 color 'LED':'LED'
|-FunctionDecl 0x559b74bea0f0 <line:55:1, col:33> col:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x559b74be9f68 <col:16, col:20> col:20 color 'LED':'LED'
| `-ParmVarDecl 0x559b74be9fd8 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-FunctionDecl 0x559b74bea238 <line:57:1, col:40> col:6 read_button_active_low 'BOOL (uint8_t)'
| `-ParmVarDecl 0x559b74bea1b0 <col:29, col:37> col:37 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x559b74bea2f8 prev 0x559b74be6dd8 </vagrant/apps/plc_4out/./inc/ladder.h:7:1, col:22> col:22 referenced SWORD 'short'
| `-BuiltinType 0x559b749d89f0 'short'
|-TypedefDecl 0x559b74bea368 prev 0x559b74be6e48 <line:8:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x559b749d8a70 'unsigned char'
|-VarDecl 0x559b74bea4a8 <line:13:1, col:99> col:16 output_pins 'uint8_t [5]' static cinit
| |-InitListExpr 0x559b74bea668 <col:68, col:99> 'uint8_t [5]'
| | |-ImplicitCastExpr 0x559b74bea6a8 </vagrant/apps/plc_4out/./inc/plc_platform.h:11:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x559b74bea560 <col:14> 'int' 3
| | |-ImplicitCastExpr 0x559b74bea6c8 <line:16:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x559b74bea580 <col:14> 'int' 8
| | |-ImplicitCastExpr 0x559b74bea6f0 <line:17:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x559b74bea5a0 <col:14> 'int' 9
| | |-ImplicitCastExpr 0x559b74bea728 <line:18:15> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x559b74bea5c0 <col:15> 'int' 10
| | `-ImplicitCastExpr 0x559b74bea740 <line:19:15> 'uint8_t':'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x559b74bea5e0 <col:15> 'int' 11
| `-SectionAttr 0x559b74bea508 </vagrant/apps/plc_4out/./inc/ladder.h:13:45, col:62> section ".rodata"
|-FunctionDecl 0x559b74bea8d8 <line:18:1, col:19> col:6 PlcCycle 'void (void)'
| `-FullComment 0x559b74c6f6f0 <line:15:4, col:57>
|   `-ParagraphComment 0x559b74c6f6c0 <col:4, col:57>
|     `-TextComment 0x559b74c6f690 <col:4, col:57> Text="************ DO NOT EDIT THESE FUNCTIONS *************"
|-FunctionDecl 0x559b74beaa28 <line:21:1, col:36> col:6 plc_callback 'void (struct k_timer *)'
| `-ParmVarDecl 0x559b74bea9a0 <col:19, col:35> col:35 t 'struct k_timer *'
|-FunctionDecl 0x559b74beab60 <line:24:1, col:19> col:6 init_plc 'void (void)'
|-FunctionDecl 0x559b74bead70 <line:31:1, col:27> col:6 used Read_U_b_XMStart 'BOOL (void)'
| `-FullComment 0x559b74c6f7c0 <line:29:4, col:57>
|   `-ParagraphComment 0x559b74c6f790 <col:4, col:57>
|     `-TextComment 0x559b74c6f760 <col:4, col:57> Text="*********** FUNCTIONS CREATED BY LDMICRO *************"
|-FunctionDecl 0x559b74beaea0 <line:33:1, col:25> col:6 used Read_U_b_XStop 'BOOL (void)'
|-FunctionDecl 0x559b74beafd0 <line:35:1, col:24> col:6 Read_U_b_YLED 'BOOL (void)'
|-FunctionDecl 0x559b74beb140 <line:36:1, col:27> col:6 used Write_U_b_YLED 'void (BOOL)'
| `-ParmVarDecl 0x559b74beb080 <col:21, col:26> col:26 v 'BOOL':'unsigned char'
|-FunctionDecl 0x559b74beb278 <line:38:1, col:25> col:6 Read_U_b_YOut0 'BOOL (void)'
|-FunctionDecl 0x559b74bec530 <line:39:1, col:28> col:6 used Write_U_b_YOut0 'void (BOOL)'
| `-ParmVarDecl 0x559b74beb328 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x559b74bec668 <line:41:1, col:25> col:6 Read_U_b_YOut1 'BOOL (void)'
|-FunctionDecl 0x559b74bec7a0 <line:42:1, col:28> col:6 used Write_U_b_YOut1 'void (BOOL)'
| `-ParmVarDecl 0x559b74bec718 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x559b74bec8d8 <line:44:1, col:25> col:6 Read_U_b_YOut2 'BOOL (void)'
|-FunctionDecl 0x559b74beca10 <line:45:1, col:28> col:6 used Write_U_b_YOut2 'void (BOOL)'
| `-ParmVarDecl 0x559b74bec988 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x559b74becb48 <line:47:1, col:25> col:6 Read_U_b_YOut3 'BOOL (void)'
|-FunctionDecl 0x559b74becc80 <line:48:1, col:28> col:6 used Write_U_b_YOut3 'void (BOOL)'
| `-ParmVarDecl 0x559b74becbf8 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-VarDecl 0x559b74becd38 <./src/4Outs_v1.c:26:16, line:43:23> col:13 used I_b_mcr 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x559b74becdb8 <col:23> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x559b74becd98 <col:23> 'int' 0
|-VarDecl 0x559b74becde0 <line:26:16, line:46:28> col:13 used I_b_rung_top 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x559b74bece60 <col:28> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x559b74bece40 <col:28> 'int' 0
|-VarDecl 0x559b74bece88 <line:26:16, line:49:31> col:13 used I_b_parOut_0000 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x559b74becf08 <col:31> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x559b74becee8 <col:31> 'int' 0
|-VarDecl 0x559b74becf30 <line:26:16, line:52:32> col:13 used I_b_parThis_0000 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x559b74becfb0 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x559b74becf90 <col:32> 'int' 0
|-FunctionDecl 0x559b74bed058 prev 0x559b74bead70 <line:57:7, col:40> col:19 used Read_U_b_XMStart 'BOOL (void)' extern
|-VarDecl 0x559b74bed108 <line:26:16, line:59:27> col:13 used U_b_RMaster 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x559b74bed188 <col:27> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x559b74bed168 <col:27> 'int' 0
|-FunctionDecl 0x559b74bed230 prev 0x559b74beaea0 <line:64:7, col:38> col:19 used Read_U_b_XStop 'BOOL (void)' extern
|-VarDecl 0x559b74bed2e0 <line:26:16, line:66:26> col:13 used U_b_RDone3 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x559b74bed360 <col:26> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x559b74bed340 <col:26> 'int' 0
|-FunctionDecl 0x559b74bed408 prev 0x559b74beafd0 <line:71:7, col:30> col:12 Read_U_b_YLED 'BOOL (void)'
|-FunctionDecl 0x559b74bed540 prev 0x559b74beb140 <line:72:7, col:33> col:12 used Write_U_b_YLED 'void (BOOL)'
| `-ParmVarDecl 0x559b74bed4b8 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-VarDecl 0x559b74bed620 <line:26:16, line:74:23> col:14 used U_i_T0 'SWORD':'short' static cinit
| `-ImplicitCastExpr 0x559b74bed6a0 <col:23> 'SWORD':'short' <IntegralCast>
|   `-IntegerLiteral 0x559b74bed680 <col:23> 'int' 0
|-VarDecl 0x559b74bed6c8 <line:26:16, line:75:26> col:13 used U_b_RDone0 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x559b74bed748 <col:26> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x559b74bed728 <col:26> 'int' 0
|-VarDecl 0x559b74bed770 <line:26:16, line:78:23> col:14 used U_i_T1 'SWORD':'short' static cinit
| `-ImplicitCastExpr 0x559b74bed7f0 <col:23> 'SWORD':'short' <IntegralCast>
|   `-IntegerLiteral 0x559b74bed7d0 <col:23> 'int' 0
|-VarDecl 0x559b74bed818 <line:26:16, line:79:26> col:13 used U_b_RDone1 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x559b74bed898 <col:26> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x559b74bed878 <col:26> 'int' 0
|-VarDecl 0x559b74bed8c0 <line:26:16, line:82:23> col:14 used U_i_T2 'SWORD':'short' static cinit
| `-ImplicitCastExpr 0x559b74bed940 <col:23> 'SWORD':'short' <IntegralCast>
|   `-IntegerLiteral 0x559b74bed920 <col:23> 'int' 0
|-VarDecl 0x559b74bed968 <line:26:16, line:83:26> col:13 used U_b_RDone2 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x559b74bed9e8 <col:26> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x559b74bed9c8 <col:26> 'int' 0
|-VarDecl 0x559b74beda10 <line:26:16, line:86:23> col:14 used U_i_T3 'SWORD':'short' static cinit
| `-ImplicitCastExpr 0x559b74beda90 <col:23> 'SWORD':'short' <IntegralCast>
|   `-IntegerLiteral 0x559b74beda70 <col:23> 'int' 0
|-FunctionDecl 0x559b74bedb38 prev 0x559b74beb278 <line:89:7, col:31> col:12 Read_U_b_YOut0 'BOOL (void)'
|-FunctionDecl 0x559b74bedc70 prev 0x559b74bec530 <line:90:7, col:34> col:12 used Write_U_b_YOut0 'void (BOOL)'
| `-ParmVarDecl 0x559b74bedbe8 <col:28, col:33> col:33 v 'BOOL':'unsigned char'
|-FunctionDecl 0x559b74bedda8 prev 0x559b74bec668 <line:94:7, col:31> col:12 Read_U_b_YOut1 'BOOL (void)'
|-FunctionDecl 0x559b74bedee0 prev 0x559b74bec7a0 <line:95:7, col:34> col:12 used Write_U_b_YOut1 'void (BOOL)'
| `-ParmVarDecl 0x559b74bede58 <col:28, col:33> col:33 v 'BOOL':'unsigned char'
|-FunctionDecl 0x559b74bee018 prev 0x559b74bec8d8 <line:99:7, col:31> col:12 Read_U_b_YOut2 'BOOL (void)'
|-FunctionDecl 0x559b74bee150 prev 0x559b74beca10 <line:100:7, col:34> col:12 used Write_U_b_YOut2 'void (BOOL)'
| `-ParmVarDecl 0x559b74bee0c8 <col:28, col:33> col:33 v 'BOOL':'unsigned char'
|-FunctionDecl 0x559b74bee288 prev 0x559b74becb48 <line:104:7, col:31> col:12 Read_U_b_YOut3 'BOOL (void)'
|-FunctionDecl 0x559b74bee3c0 prev 0x559b74becc80 <line:105:7, col:34> col:12 used Write_U_b_YOut3 'void (BOOL)'
| `-ParmVarDecl 0x559b74bee338 <col:28, col:33> col:33 v 'BOOL':'unsigned char'
`-FunctionDecl 0x559b74bf0790 prev 0x559b74bea8d8 <line:112:1, line:339:1> line:112:6 PlcCycle 'void (void)'
  `-CompoundStmt 0x559b74b4caf0 <line:113:1, line:339:1>
    |-BinaryOperator 0x559b74bf0890 <line:45:26, line:114:19> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74bf0830 <line:45:26> 'BOOL':'unsigned char' lvalue Var 0x559b74becd38 'I_b_mcr' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74bf0878 <line:114:19> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x559b74bf0858 <col:19> 'int' 1
    |-BinaryOperator 0x559b74bf0920 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74bf08b8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74bf0908 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74bf08e0 <col:24> 'BOOL':'unsigned char' lvalue Var 0x559b74becd38 'I_b_mcr' 'BOOL':'unsigned char'
    |-BinaryOperator 0x559b74bf09a8 <line:51:34, line:121:27> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74bf0948 <line:51:34> 'BOOL':'unsigned char' lvalue Var 0x559b74bece88 'I_b_parOut_0000' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74bf0990 <line:121:27> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x559b74bf0970 <col:27> 'int' 0
    |-BinaryOperator 0x559b74bf0a38 <line:54:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74bf09d0 <line:54:35> 'BOOL':'unsigned char' lvalue Var 0x559b74becf30 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74bf0a20 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74bf09f8 <col:29> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x559b74bf0be8 <line:123:5, line:125:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74bf0b28 <line:123:8, col:26> 'int' prefix '!'
    | | `-CallExpr 0x559b74bf0b00 <col:9, col:26> 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74bf0ae8 <col:9> 'BOOL (*)(void)' <FunctionToPointerDecay>
    | |     `-DeclRefExpr 0x559b74bf0a60 <col:9> 'BOOL (void)' Function 0x559b74bed058 'Read_U_b_XMStart' 'BOOL (void)'
    | |-CompoundStmt 0x559b74bf0bd0 <col:29, line:125:5>
    | | `-BinaryOperator 0x559b74bf0ba8 <line:54:35, line:124:32> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74bf0b48 <line:54:35> 'BOOL':'unsigned char' lvalue Var 0x559b74becf30 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74bf0b90 <line:124:32> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74bf0b70 <col:32> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74bf0d00 <line:127:5, line:129:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x559b74bf0c48 <line:53:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x559b74bf0c20 <col:33> 'BOOL':'unsigned char' lvalue Var 0x559b74becf30 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74bf0ce8 <line:127:33, line:129:5>
    | | `-BinaryOperator 0x559b74bf0cc0 <line:51:34, line:128:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74bf0c60 <line:51:34> 'BOOL':'unsigned char' lvalue Var 0x559b74bece88 'I_b_parOut_0000' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74bf0ca8 <line:128:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74bf0c88 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x559b74bf0da0 <line:54:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74bf0d38 <line:54:35> 'BOOL':'unsigned char' lvalue Var 0x559b74becf30 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74bf0d88 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74bf0d60 <col:29> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x559b74bf0ec8 <line:131:5, line:133:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74bf0e08 <line:131:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x559b74bf0df0 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x559b74bf0dc8 <col:28> 'BOOL':'unsigned char' lvalue Var 0x559b74bed108 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74bf0eb0 <line:131:29, line:133:5>
    | | `-BinaryOperator 0x559b74bf0e88 <line:54:35, line:132:32> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74bf0e28 <line:54:35> 'BOOL':'unsigned char' lvalue Var 0x559b74becf30 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74bf0e70 <line:132:32> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74bf0e50 <col:32> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74bf0fe0 <line:135:5, line:137:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x559b74bf0f28 <line:53:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x559b74bf0f00 <col:33> 'BOOL':'unsigned char' lvalue Var 0x559b74becf30 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74bf0fc8 <line:135:33, line:137:5>
    | | `-BinaryOperator 0x559b74bf0fa0 <line:51:34, line:136:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74bf0f40 <line:51:34> 'BOOL':'unsigned char' lvalue Var 0x559b74bece88 'I_b_parOut_0000' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74bf0f88 <line:136:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74bf0f68 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x559b74bf1080 <line:48:31, line:50:32> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74bf1018 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74bf1068 <line:50:32> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74bf1040 <col:32> 'BOOL':'unsigned char' lvalue Var 0x559b74bece88 'I_b_parOut_0000' 'BOOL':'unsigned char'
    |-IfStmt 0x559b74bf11b0 <line:140:5, line:142:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-CallExpr 0x559b74bf10e8 <line:140:8, col:23> 'BOOL':'unsigned char'
    | | `-ImplicitCastExpr 0x559b74bf10d0 <col:8> 'BOOL (*)(void)' <FunctionToPointerDecay>
    | |   `-DeclRefExpr 0x559b74bf10a8 <col:8> 'BOOL (void)' Function 0x559b74bed230 'Read_U_b_XStop' 'BOOL (void)'
    | |-CompoundStmt 0x559b74bf1198 <col:26, line:142:5>
    | | `-BinaryOperator 0x559b74bf1170 <line:48:31, line:141:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74bf1110 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74bf1158 <line:141:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74bf1138 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74bf12c8 <line:144:5, line:146:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x559b74bf1210 <line:67:27> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x559b74bf11e8 <col:27> 'BOOL':'unsigned char' lvalue Var 0x559b74bed2e0 'U_b_RDone3' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74bf12b0 <line:144:27, line:146:5>
    | | `-BinaryOperator 0x559b74bf1288 <line:48:31, line:145:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74bf1228 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74bf1270 <line:145:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74bf1250 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-BinaryOperator 0x559b74bf1368 <line:61:30, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74bf1300 <line:61:30> 'BOOL':'unsigned char' lvalue Var 0x559b74bed108 'U_b_RMaster' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74bf1350 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74bf1328 <col:29> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x559b74bf13f8 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74bf1390 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74bf13e0 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74bf13b8 <col:24> 'BOOL':'unsigned char' lvalue Var 0x559b74becd38 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x559b74bf1520 <line:156:5, line:158:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74bf1460 <line:156:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x559b74bf1448 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x559b74bf1420 <col:28> 'BOOL':'unsigned char' lvalue Var 0x559b74bed108 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74bf1508 <line:156:29, line:158:5>
    | | `-BinaryOperator 0x559b74bf14e0 <line:48:31, line:157:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74bf1480 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74bf14c8 <line:157:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74bf14a8 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74bf1638 <line:160:5, line:162:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x559b74bf1580 <line:60:28> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x559b74bf1558 <col:28> 'BOOL':'unsigned char' lvalue Var 0x559b74bed108 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74bf1620 <line:160:28, line:162:5>
    | | `-BinaryOperator 0x559b74bf15f8 <line:48:31, line:161:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74bf1598 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74bf15e0 <line:161:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74bf15c0 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-CallExpr 0x559b74bf1730 <line:164:5, col:39> 'void'
    | |-ImplicitCastExpr 0x559b74bf1718 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x559b74bf1670 <col:5> 'void (BOOL)' Function 0x559b74bed540 'Write_U_b_YLED' 'void (BOOL)'
    | `-ImplicitCastExpr 0x559b74bf1760 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74bf1698 <col:29> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x559b74bf17e0 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74bf1778 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74bf17c8 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74bf17a0 <col:24> 'BOOL':'unsigned char' lvalue Var 0x559b74becd38 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x559b74bf1908 <line:172:5, line:174:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74bf1848 <line:172:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x559b74bf1830 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x559b74bf1808 <col:28> 'BOOL':'unsigned char' lvalue Var 0x559b74bed108 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74bf18f0 <line:172:29, line:174:5>
    | | `-BinaryOperator 0x559b74bf18c8 <line:48:31, line:173:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74bf1868 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74bf18b0 <line:173:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74bf1890 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74bf1c00 <line:176:5, line:183:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x559b74bf1968 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x559b74bf1940 <col:29> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74bf1b48 <line:176:29, line:181:5>
    | | `-IfStmt 0x559b74bf1b10 <line:177:9, line:180:9>
    | |   |-<<<NULL>>>
    | |   |-<<<NULL>>>
    | |   |-BinaryOperator 0x559b74bf19f8 <line:177:12, col:21> 'int' '<'
    | |   | |-ImplicitCastExpr 0x559b74bf19e0 <col:12> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x559b74bf19c8 <col:12> 'SWORD':'short' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x559b74bf1980 <col:12> 'SWORD':'short' lvalue Var 0x559b74bed620 'U_i_T0' 'SWORD':'short'
    | |   | `-IntegerLiteral 0x559b74bf19a8 <col:21> 'int' 500
    | |   |-CompoundStmt 0x559b74bf1af0 <col:26, line:180:9>
    | |   | |-UnaryOperator 0x559b74bf1a48 <line:178:13, col:19> 'SWORD':'short' postfix '++'
    | |   | | `-DeclRefExpr 0x559b74bf1a20 <col:13> 'SWORD':'short' lvalue Var 0x559b74bed620 'U_i_T0' 'SWORD':'short'
    | |   | `-BinaryOperator 0x559b74bf1ac8 <line:48:31, line:179:32> 'BOOL':'unsigned char' '='
    | |   |   |-DeclRefExpr 0x559b74bf1a68 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   |   `-ImplicitCastExpr 0x559b74bf1ab0 <line:179:32> 'BOOL':'unsigned char' <IntegralCast>
    | |   |     `-IntegerLiteral 0x559b74bf1a90 <col:32> 'int' 0
    | |   `-<<<NULL>>>
    | `-CompoundStmt 0x559b74bf1be8 <line:181:12, line:183:5>
    |   `-BinaryOperator 0x559b74bf1bc0 <line:182:9, col:18> 'SWORD':'short' '='
    |     |-DeclRefExpr 0x559b74bf1b60 <col:9> 'SWORD':'short' lvalue Var 0x559b74bed620 'U_i_T0' 'SWORD':'short'
    |     `-ImplicitCastExpr 0x559b74bf1ba8 <col:18> 'SWORD':'short' <IntegralCast>
    |       `-IntegerLiteral 0x559b74bf1b88 <col:18> 'int' 0
    |-BinaryOperator 0x559b74bf1ca0 <line:77:29, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74bf1c38 <line:77:29> 'BOOL':'unsigned char' lvalue Var 0x559b74bed6c8 'U_b_RDone0' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74bf1c88 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74bf1c60 <col:29> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x559b74bf1d30 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74bf1cc8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74bf1d18 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74bf1cf0 <col:24> 'BOOL':'unsigned char' lvalue Var 0x559b74becd38 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x559b74bf1e58 <line:193:5, line:195:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74bf1d98 <line:193:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x559b74bf1d80 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x559b74bf1d58 <col:28> 'BOOL':'unsigned char' lvalue Var 0x559b74bed108 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74bf1e40 <line:193:29, line:195:5>
    | | `-BinaryOperator 0x559b74bf1e18 <line:48:31, line:194:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74bf1db8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74bf1e00 <line:194:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74bf1de0 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74bf1f90 <line:197:5, line:199:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74bf1ed0 <line:197:8, line:76:27> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x559b74bf1eb8 <col:27> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x559b74bf1e90 <col:27> 'BOOL':'unsigned char' lvalue Var 0x559b74bed6c8 'U_b_RDone0' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74bf1f78 <line:197:28, line:199:5>
    | | `-BinaryOperator 0x559b74bf1f50 <line:48:31, line:198:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74bf1ef0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74bf1f38 <line:198:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74bf1f18 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74bf2288 <line:201:5, line:208:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x559b74bf1ff0 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x559b74bf1fc8 <col:29> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74bf21d0 <line:201:29, line:206:5>
    | | `-IfStmt 0x559b74bf2198 <line:202:9, line:205:9>
    | |   |-<<<NULL>>>
    | |   |-<<<NULL>>>
    | |   |-BinaryOperator 0x559b74bf2080 <line:202:12, col:21> 'int' '<'
    | |   | |-ImplicitCastExpr 0x559b74bf2068 <col:12> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x559b74bf2050 <col:12> 'SWORD':'short' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x559b74bf2008 <col:12> 'SWORD':'short' lvalue Var 0x559b74bed770 'U_i_T1' 'SWORD':'short'
    | |   | `-IntegerLiteral 0x559b74bf2030 <col:21> 'int' 500
    | |   |-CompoundStmt 0x559b74bf2178 <col:26, line:205:9>
    | |   | |-UnaryOperator 0x559b74bf20d0 <line:203:13, col:19> 'SWORD':'short' postfix '++'
    | |   | | `-DeclRefExpr 0x559b74bf20a8 <col:13> 'SWORD':'short' lvalue Var 0x559b74bed770 'U_i_T1' 'SWORD':'short'
    | |   | `-BinaryOperator 0x559b74bf2150 <line:48:31, line:204:32> 'BOOL':'unsigned char' '='
    | |   |   |-DeclRefExpr 0x559b74bf20f0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   |   `-ImplicitCastExpr 0x559b74bf2138 <line:204:32> 'BOOL':'unsigned char' <IntegralCast>
    | |   |     `-IntegerLiteral 0x559b74bf2118 <col:32> 'int' 0
    | |   `-<<<NULL>>>
    | `-CompoundStmt 0x559b74bf2270 <line:206:12, line:208:5>
    |   `-BinaryOperator 0x559b74bf2248 <line:207:9, col:18> 'SWORD':'short' '='
    |     |-DeclRefExpr 0x559b74bf21e8 <col:9> 'SWORD':'short' lvalue Var 0x559b74bed770 'U_i_T1' 'SWORD':'short'
    |     `-ImplicitCastExpr 0x559b74bf2230 <col:18> 'SWORD':'short' <IntegralCast>
    |       `-IntegerLiteral 0x559b74bf2210 <col:18> 'int' 0
    |-BinaryOperator 0x559b74bf2328 <line:81:29, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74bf22c0 <line:81:29> 'BOOL':'unsigned char' lvalue Var 0x559b74bed818 'U_b_RDone1' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74bf2310 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74bf22e8 <col:29> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x559b74bf23b8 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74bf2350 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74bf23a0 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74bf2378 <col:24> 'BOOL':'unsigned char' lvalue Var 0x559b74becd38 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x559b74bf24e0 <line:218:5, line:220:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74bf2420 <line:218:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x559b74bf2408 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x559b74bf23e0 <col:28> 'BOOL':'unsigned char' lvalue Var 0x559b74bed108 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74bf24c8 <line:218:29, line:220:5>
    | | `-BinaryOperator 0x559b74bf24a0 <line:48:31, line:219:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74bf2440 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74bf2488 <line:219:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74bf2468 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74bf2618 <line:222:5, line:224:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74bf2558 <line:222:8, line:80:27> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x559b74bf2540 <col:27> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x559b74bf2518 <col:27> 'BOOL':'unsigned char' lvalue Var 0x559b74bed818 'U_b_RDone1' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74bf2600 <line:222:28, line:224:5>
    | | `-BinaryOperator 0x559b74bf25d8 <line:48:31, line:223:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74bf2578 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74bf25c0 <line:223:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74bf25a0 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74b4b1b8 <line:226:5, line:233:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x559b74bf2678 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x559b74bf2650 <col:29> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74b4b100 <line:226:29, line:231:5>
    | | `-IfStmt 0x559b74b4b0c8 <line:227:9, line:230:9>
    | |   |-<<<NULL>>>
    | |   |-<<<NULL>>>
    | |   |-BinaryOperator 0x559b74bf2708 <line:227:12, col:21> 'int' '<'
    | |   | |-ImplicitCastExpr 0x559b74bf26f0 <col:12> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x559b74bf26d8 <col:12> 'SWORD':'short' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x559b74bf2690 <col:12> 'SWORD':'short' lvalue Var 0x559b74bed8c0 'U_i_T2' 'SWORD':'short'
    | |   | `-IntegerLiteral 0x559b74bf26b8 <col:21> 'int' 500
    | |   |-CompoundStmt 0x559b74b4b0a8 <col:26, line:230:9>
    | |   | |-UnaryOperator 0x559b74bf2758 <line:228:13, col:19> 'SWORD':'short' postfix '++'
    | |   | | `-DeclRefExpr 0x559b74bf2730 <col:13> 'SWORD':'short' lvalue Var 0x559b74bed8c0 'U_i_T2' 'SWORD':'short'
    | |   | `-BinaryOperator 0x559b74b4b080 <line:48:31, line:229:32> 'BOOL':'unsigned char' '='
    | |   |   |-DeclRefExpr 0x559b74b4b020 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   |   `-ImplicitCastExpr 0x559b74b4b068 <line:229:32> 'BOOL':'unsigned char' <IntegralCast>
    | |   |     `-IntegerLiteral 0x559b74b4b048 <col:32> 'int' 0
    | |   `-<<<NULL>>>
    | `-CompoundStmt 0x559b74b4b1a0 <line:231:12, line:233:5>
    |   `-BinaryOperator 0x559b74b4b178 <line:232:9, col:18> 'SWORD':'short' '='
    |     |-DeclRefExpr 0x559b74b4b118 <col:9> 'SWORD':'short' lvalue Var 0x559b74bed8c0 'U_i_T2' 'SWORD':'short'
    |     `-ImplicitCastExpr 0x559b74b4b160 <col:18> 'SWORD':'short' <IntegralCast>
    |       `-IntegerLiteral 0x559b74b4b140 <col:18> 'int' 0
    |-BinaryOperator 0x559b74b4b258 <line:85:29, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74b4b1f0 <line:85:29> 'BOOL':'unsigned char' lvalue Var 0x559b74bed968 'U_b_RDone2' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74b4b240 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74b4b218 <col:29> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x559b74b4b2e8 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74b4b280 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74b4b2d0 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74b4b2a8 <col:24> 'BOOL':'unsigned char' lvalue Var 0x559b74becd38 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x559b74b4b410 <line:243:5, line:245:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74b4b350 <line:243:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x559b74b4b338 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x559b74b4b310 <col:28> 'BOOL':'unsigned char' lvalue Var 0x559b74bed108 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74b4b3f8 <line:243:29, line:245:5>
    | | `-BinaryOperator 0x559b74b4b3d0 <line:48:31, line:244:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74b4b370 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74b4b3b8 <line:244:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74b4b398 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74b4b548 <line:247:5, line:249:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74b4b488 <line:247:8, line:84:27> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x559b74b4b470 <col:27> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x559b74b4b448 <col:27> 'BOOL':'unsigned char' lvalue Var 0x559b74bed968 'U_b_RDone2' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74b4b530 <line:247:28, line:249:5>
    | | `-BinaryOperator 0x559b74b4b508 <line:48:31, line:248:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74b4b4a8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74b4b4f0 <line:248:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74b4b4d0 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74b4b840 <line:251:5, line:258:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x559b74b4b5a8 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x559b74b4b580 <col:29> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74b4b788 <line:251:29, line:256:5>
    | | `-IfStmt 0x559b74b4b750 <line:252:9, line:255:9>
    | |   |-<<<NULL>>>
    | |   |-<<<NULL>>>
    | |   |-BinaryOperator 0x559b74b4b638 <line:252:12, col:21> 'int' '<'
    | |   | |-ImplicitCastExpr 0x559b74b4b620 <col:12> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x559b74b4b608 <col:12> 'SWORD':'short' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x559b74b4b5c0 <col:12> 'SWORD':'short' lvalue Var 0x559b74beda10 'U_i_T3' 'SWORD':'short'
    | |   | `-IntegerLiteral 0x559b74b4b5e8 <col:21> 'int' 500
    | |   |-CompoundStmt 0x559b74b4b730 <col:26, line:255:9>
    | |   | |-UnaryOperator 0x559b74b4b688 <line:253:13, col:19> 'SWORD':'short' postfix '++'
    | |   | | `-DeclRefExpr 0x559b74b4b660 <col:13> 'SWORD':'short' lvalue Var 0x559b74beda10 'U_i_T3' 'SWORD':'short'
    | |   | `-BinaryOperator 0x559b74b4b708 <line:48:31, line:254:32> 'BOOL':'unsigned char' '='
    | |   |   |-DeclRefExpr 0x559b74b4b6a8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   |   `-ImplicitCastExpr 0x559b74b4b6f0 <line:254:32> 'BOOL':'unsigned char' <IntegralCast>
    | |   |     `-IntegerLiteral 0x559b74b4b6d0 <col:32> 'int' 0
    | |   `-<<<NULL>>>
    | `-CompoundStmt 0x559b74b4b828 <line:256:12, line:258:5>
    |   `-BinaryOperator 0x559b74b4b800 <line:257:9, col:18> 'SWORD':'short' '='
    |     |-DeclRefExpr 0x559b74b4b7a0 <col:9> 'SWORD':'short' lvalue Var 0x559b74beda10 'U_i_T3' 'SWORD':'short'
    |     `-ImplicitCastExpr 0x559b74b4b7e8 <col:18> 'SWORD':'short' <IntegralCast>
    |       `-IntegerLiteral 0x559b74b4b7c8 <col:18> 'int' 0
    |-BinaryOperator 0x559b74b4b8e0 <line:68:29, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74b4b878 <line:68:29> 'BOOL':'unsigned char' lvalue Var 0x559b74bed2e0 'U_b_RDone3' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74b4b8c8 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74b4b8a0 <col:29> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x559b74b4b970 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74b4b908 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74b4b958 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74b4b930 <col:24> 'BOOL':'unsigned char' lvalue Var 0x559b74becd38 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x559b74b4ba98 <line:268:5, line:270:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74b4b9d8 <line:268:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x559b74b4b9c0 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x559b74b4b998 <col:28> 'BOOL':'unsigned char' lvalue Var 0x559b74bed108 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74b4ba80 <line:268:29, line:270:5>
    | | `-BinaryOperator 0x559b74b4ba58 <line:48:31, line:269:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74b4b9f8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74b4ba40 <line:269:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74b4ba20 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74b4bbb0 <line:272:5, line:274:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x559b74b4baf8 <line:76:27> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x559b74b4bad0 <col:27> 'BOOL':'unsigned char' lvalue Var 0x559b74bed6c8 'U_b_RDone0' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74b4bb98 <line:272:27, line:274:5>
    | | `-BinaryOperator 0x559b74b4bb70 <line:48:31, line:273:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74b4bb10 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74b4bb58 <line:273:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74b4bb38 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-CallExpr 0x559b74b4bc50 <line:276:5, col:40> 'void'
    | |-ImplicitCastExpr 0x559b74b4bc38 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x559b74b4bbe8 <col:5> 'void (BOOL)' Function 0x559b74bedc70 'Write_U_b_YOut0' 'void (BOOL)'
    | `-ImplicitCastExpr 0x559b74b4bc80 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74b4bc10 <col:29> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x559b74b4bd00 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74b4bc98 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74b4bce8 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74b4bcc0 <col:24> 'BOOL':'unsigned char' lvalue Var 0x559b74becd38 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x559b74b4be28 <line:284:5, line:286:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74b4bd68 <line:284:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x559b74b4bd50 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x559b74b4bd28 <col:28> 'BOOL':'unsigned char' lvalue Var 0x559b74bed108 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74b4be10 <line:284:29, line:286:5>
    | | `-BinaryOperator 0x559b74b4bde8 <line:48:31, line:285:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74b4bd88 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74b4bdd0 <line:285:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74b4bdb0 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74b4bf60 <line:288:5, line:290:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74b4bea0 <line:288:8, line:76:27> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x559b74b4be88 <col:27> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x559b74b4be60 <col:27> 'BOOL':'unsigned char' lvalue Var 0x559b74bed6c8 'U_b_RDone0' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74b4bf48 <line:288:28, line:290:5>
    | | `-BinaryOperator 0x559b74b4bf20 <line:48:31, line:289:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74b4bec0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74b4bf08 <line:289:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74b4bee8 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74b4c078 <line:292:5, line:294:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x559b74b4bfc0 <line:80:27> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x559b74b4bf98 <col:27> 'BOOL':'unsigned char' lvalue Var 0x559b74bed818 'U_b_RDone1' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74b4c060 <line:292:27, line:294:5>
    | | `-BinaryOperator 0x559b74b4c038 <line:48:31, line:293:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74b4bfd8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74b4c020 <line:293:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74b4c000 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-CallExpr 0x559b74b4c118 <line:296:5, col:40> 'void'
    | |-ImplicitCastExpr 0x559b74b4c100 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x559b74b4c0b0 <col:5> 'void (BOOL)' Function 0x559b74bedee0 'Write_U_b_YOut1' 'void (BOOL)'
    | `-ImplicitCastExpr 0x559b74b4c148 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74b4c0d8 <col:29> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x559b74b4c1c8 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74b4c160 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74b4c1b0 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74b4c188 <col:24> 'BOOL':'unsigned char' lvalue Var 0x559b74becd38 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x559b74b4c2f0 <line:304:5, line:306:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74b4c230 <line:304:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x559b74b4c218 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x559b74b4c1f0 <col:28> 'BOOL':'unsigned char' lvalue Var 0x559b74bed108 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74b4c2d8 <line:304:29, line:306:5>
    | | `-BinaryOperator 0x559b74b4c2b0 <line:48:31, line:305:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74b4c250 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74b4c298 <line:305:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74b4c278 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74b4c428 <line:308:5, line:310:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74b4c368 <line:308:8, line:80:27> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x559b74b4c350 <col:27> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x559b74b4c328 <col:27> 'BOOL':'unsigned char' lvalue Var 0x559b74bed818 'U_b_RDone1' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74b4c410 <line:308:28, line:310:5>
    | | `-BinaryOperator 0x559b74b4c3e8 <line:48:31, line:309:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74b4c388 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74b4c3d0 <line:309:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74b4c3b0 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74b4c540 <line:312:5, line:314:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x559b74b4c488 <line:84:27> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x559b74b4c460 <col:27> 'BOOL':'unsigned char' lvalue Var 0x559b74bed968 'U_b_RDone2' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74b4c528 <line:312:27, line:314:5>
    | | `-BinaryOperator 0x559b74b4c500 <line:48:31, line:313:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74b4c4a0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74b4c4e8 <line:313:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74b4c4c8 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-CallExpr 0x559b74b4c5e0 <line:316:5, col:40> 'void'
    | |-ImplicitCastExpr 0x559b74b4c5c8 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x559b74b4c578 <col:5> 'void (BOOL)' Function 0x559b74bee150 'Write_U_b_YOut2' 'void (BOOL)'
    | `-ImplicitCastExpr 0x559b74b4c610 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74b4c5a0 <col:29> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x559b74b4c690 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x559b74b4c628 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x559b74b4c678 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x559b74b4c650 <col:24> 'BOOL':'unsigned char' lvalue Var 0x559b74becd38 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x559b74b4c7b8 <line:324:5, line:326:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74b4c6f8 <line:324:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x559b74b4c6e0 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x559b74b4c6b8 <col:28> 'BOOL':'unsigned char' lvalue Var 0x559b74bed108 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74b4c7a0 <line:324:29, line:326:5>
    | | `-BinaryOperator 0x559b74b4c778 <line:48:31, line:325:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74b4c718 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74b4c760 <line:325:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74b4c740 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74b4c8f0 <line:328:5, line:330:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x559b74b4c830 <line:328:8, line:84:27> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x559b74b4c818 <col:27> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x559b74b4c7f0 <col:27> 'BOOL':'unsigned char' lvalue Var 0x559b74bed968 'U_b_RDone2' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74b4c8d8 <line:328:28, line:330:5>
    | | `-BinaryOperator 0x559b74b4c8b0 <line:48:31, line:329:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74b4c850 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74b4c898 <line:329:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74b4c878 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x559b74b4ca08 <line:332:5, line:334:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x559b74b4c950 <line:67:27> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x559b74b4c928 <col:27> 'BOOL':'unsigned char' lvalue Var 0x559b74bed2e0 'U_b_RDone3' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559b74b4c9f0 <line:332:27, line:334:5>
    | | `-BinaryOperator 0x559b74b4c9c8 <line:48:31, line:333:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x559b74b4c968 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x559b74b4c9b0 <line:333:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x559b74b4c990 <col:28> 'int' 0
    | `-<<<NULL>>>
    `-CallExpr 0x559b74b4caa8 <line:336:5, col:40> 'void'
      |-ImplicitCastExpr 0x559b74b4ca90 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x559b74b4ca40 <col:5> 'void (BOOL)' Function 0x559b74bee3c0 'Write_U_b_YOut3' 'void (BOOL)'
      `-ImplicitCastExpr 0x559b74b4cad8 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
        `-DeclRefExpr 0x559b74b4ca68 <col:29> 'BOOL':'unsigned char' lvalue Var 0x559b74becde0 'I_b_rung_top' 'BOOL':'unsigned char'
TranslationUnitDecl 0x55558d7b5918 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55558d7b5e90 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55558d7b5bb0 '__int128'
|-TypedefDecl 0x55558d7b5f00 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55558d7b5bd0 'unsigned __int128'
|-TypedefDecl 0x55558d7b61d8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55558d7b5fe0 'struct __NSConstantString_tag'
|   `-Record 0x55558d7b5f58 '__NSConstantString_tag'
|-TypedefDecl 0x55558d7b6270 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55558d7b6230 'char *'
|   `-BuiltinType 0x55558d7b59b0 'char'
|-TypedefDecl 0x55558d7b6538 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55558d7b64e0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55558d7b6350 'struct __va_list_tag'
|     `-Record 0x55558d7b62c8 '__va_list_tag'
|-TypedefDecl 0x55558d818990 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:143:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x55558d7b5a30 'long'
|-TypedefDecl 0x55558d818a00 <line:209:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x55558d7b5ad0 'unsigned long'
|-TypedefDecl 0x55558d818a70 <line:321:1, col:24> col:24 wchar_t 'int'
| `-BuiltinType 0x55558d7b5a10 'int'
|-RecordDecl 0x55558d818ac8 <line:415:9, line:426:1> line:415:9 struct definition
| |-FieldDecl 0x55558d818bc0 <line:416:3, col:13> col:13 __max_align_ll 'long long'
| | `-AlignedAttr 0x55558d818c08 <col:43, col:77> aligned
| |   `-UnaryExprOrTypeTraitExpr 0x55558d818b88 <col:55, col:76> 'unsigned long' alignof 'long long'
| `-FieldDecl 0x55558d818ca8 <line:417:3, col:15> col:15 __max_align_ld 'long double'
|   `-AlignedAttr 0x55558d818cf0 <col:45, col:81> aligned
|     `-UnaryExprOrTypeTraitExpr 0x55558d818c70 <col:57, col:80> 'unsigned long' alignof 'long double'
|-TypedefDecl 0x55558d818d90 <line:415:1, line:426:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x55558d818d40 'struct max_align_t' sugar
|   `-RecordType 0x55558d818b50 'max_align_t'
|     `-Record 0x55558d818ac8 ''
|-TypedefDecl 0x55558d818e30 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h:40:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x55558d818e00 '__builtin_va_list' sugar
|   |-Typedef 0x55558d7b6538 '__builtin_va_list'
|   `-ConstantArrayType 0x55558d7b64e0 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x55558d7b6350 'struct __va_list_tag'
|       `-Record 0x55558d7b62c8 '__va_list_tag'
|-TypedefDecl 0x55558d818ec0 <line:99:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x55558d818e90 '__gnuc_va_list' sugar
|   |-Typedef 0x55558d818e30 '__gnuc_va_list'
|   `-TypedefType 0x55558d818e00 '__builtin_va_list' sugar
|     |-Typedef 0x55558d7b6538 '__builtin_va_list'
|     `-ConstantArrayType 0x55558d7b64e0 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x55558d7b6350 'struct __va_list_tag'
|         `-Record 0x55558d7b62c8 '__va_list_tag'
|-TypedefDecl 0x55558d818f30 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdint.h:40:1, col:24> col:24 int8_t 'signed char'
| `-BuiltinType 0x55558d7b59d0 'signed char'
|-TypedefDecl 0x55558d818fa0 <line:41:1, col:25> col:25 int16_t 'short'
| `-BuiltinType 0x55558d7b59f0 'short'
|-TypedefDecl 0x55558d819010 <line:42:1, col:25> col:25 int32_t 'int'
| `-BuiltinType 0x55558d7b5a10 'int'
|-TypedefDecl 0x55558d819080 <line:43:1, col:25> col:25 int64_t 'long'
| `-BuiltinType 0x55558d7b5a30 'long'
|-TypedefDecl 0x55558d8190f0 <line:45:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x55558d7b59d0 'signed char'
|-TypedefDecl 0x55558d819160 <line:46:1, col:29> col:29 int_fast16_t 'short'
| `-BuiltinType 0x55558d7b59f0 'short'
|-TypedefDecl 0x55558d8191d0 <line:47:1, col:29> col:29 int_fast32_t 'int'
| `-BuiltinType 0x55558d7b5a10 'int'
|-TypedefDecl 0x55558d819240 <line:48:1, col:29> col:29 int_fast64_t 'long'
| `-BuiltinType 0x55558d7b5a30 'long'
|-TypedefDecl 0x55558d8192b0 <line:50:1, col:29> col:29 int_least8_t 'signed char'
| `-BuiltinType 0x55558d7b59d0 'signed char'
|-TypedefDecl 0x55558d819320 <line:51:1, col:30> col:30 int_least16_t 'short'
| `-BuiltinType 0x55558d7b59f0 'short'
|-TypedefDecl 0x55558d819390 <line:52:1, col:30> col:30 int_least32_t 'int'
| `-BuiltinType 0x55558d7b5a10 'int'
|-TypedefDecl 0x55558d819400 <line:53:1, col:30> col:30 int_least64_t 'long'
| `-BuiltinType 0x55558d7b5a30 'long'
|-TypedefDecl 0x55558d819470 <line:55:1, col:25> col:25 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x55558d7b5a70 'unsigned char'
|-TypedefDecl 0x55558d8194e0 <line:56:1, col:26> col:26 uint16_t 'unsigned short'
| `-BuiltinType 0x55558d7b5a90 'unsigned short'
|-TypedefDecl 0x55558d819550 <line:57:1, col:26> col:26 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x55558d7b5ab0 'unsigned int'
|-TypedefDecl 0x55558d8195c0 <line:58:1, col:26> col:26 uint64_t 'unsigned long'
| `-BuiltinType 0x55558d7b5ad0 'unsigned long'
|-TypedefDecl 0x55558d819630 <line:60:1, col:29> col:29 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x55558d7b5a70 'unsigned char'
|-TypedefDecl 0x55558d8196a0 <line:61:1, col:30> col:30 uint_fast16_t 'unsigned short'
| `-BuiltinType 0x55558d7b5a90 'unsigned short'
|-TypedefDecl 0x55558d819710 <line:62:1, col:30> col:30 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x55558d7b5ab0 'unsigned int'
|-TypedefDecl 0x55558d819780 <line:63:1, col:30> col:30 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x55558d7b5ad0 'unsigned long'
|-TypedefDecl 0x55558d8197f0 <line:65:1, col:30> col:30 uint_least8_t 'unsigned char'
| `-BuiltinType 0x55558d7b5a70 'unsigned char'
|-TypedefDecl 0x55558d819860 <line:66:1, col:31> col:31 uint_least16_t 'unsigned short'
| `-BuiltinType 0x55558d7b5a90 'unsigned short'
|-TypedefDecl 0x55558d835790 <line:67:1, col:31> col:31 uint_least32_t 'unsigned int'
| `-BuiltinType 0x55558d7b5ab0 'unsigned int'
|-TypedefDecl 0x55558d835800 <line:68:1, col:31> col:31 uint_least64_t 'unsigned long'
| `-BuiltinType 0x55558d7b5ad0 'unsigned long'
|-TypedefDecl 0x55558d835870 <line:70:1, col:26> col:26 intptr_t 'long'
| `-BuiltinType 0x55558d7b5a30 'long'
|-TypedefDecl 0x55558d8358e0 <line:71:1, col:26> col:26 uintptr_t 'unsigned long'
| `-BuiltinType 0x55558d7b5ad0 'unsigned long'
|-FunctionDecl 0x55558d835a90 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:51:1, line:54:1> line:51:40 used printk 'void (const char *, ...)' static inline
| |-ParmVarDecl 0x55558d8359d0 <col:47, col:59> col:59 used fmt 'const char *'
| |-CompoundStmt 0x55558d835c98 <line:52:1, line:54:1>
| | `-CStyleCastExpr 0x55558d835c70 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55558d835c58 <col:29, col:31> 'const char *' <LValueToRValue>
| |     `-ParenExpr 0x55558d835c38 <col:29, col:31> 'const char *' lvalue
| |       `-DeclRefExpr 0x55558d835bd0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:53:13> 'const char *' lvalue ParmVar 0x55558d8359d0 'fmt' 'const char *'
| `-FormatAttr 0x55558d835b38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 2
|-FunctionDecl 0x55558d835f20 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:56:1, line:60:1> line:56:40 vprintk 'void (const char *, struct __va_list_tag *)' static inline
| |-ParmVarDecl 0x55558d835d18 <col:48, col:60> col:60 used fmt 'const char *'
| |-ParmVarDecl 0x55558d835e10 <col:65, col:73> col:73 used ap 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x55558d8361b8 <line:57:1, line:60:1>
| | |-CStyleCastExpr 0x55558d8360c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55558d8360b0 <col:29, col:31> 'const char *' <LValueToRValue>
| | |   `-ParenExpr 0x55558d836090 <col:29, col:31> 'const char *' lvalue
| | |     `-DeclRefExpr 0x55558d836028 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:58:13> 'const char *' lvalue ParmVar 0x55558d835d18 'fmt' 'const char *'
| | `-CStyleCastExpr 0x55558d836190 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55558d836178 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue>
| |     `-ParenExpr 0x55558d836158 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue
| |       `-DeclRefExpr 0x55558d8360f0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:59:13> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x55558d835e10 'ap' 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x55558d835fd0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 0
|-FunctionDecl 0x55558d836488 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:63:1, line:64:26> line:63:32 snprintk 'int (char *, size_t, const char *, ...)' extern
| |-ParmVarDecl 0x55558d836240 <col:41, col:47> col:47 str 'char *'
| |-ParmVarDecl 0x55558d8362d0 <col:52, col:59> col:59 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55558d836348 <line:64:6, col:18> col:18 fmt 'const char *'
| `-FormatAttr 0x55558d836540 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 4
|-FunctionDecl 0x55558d839a68 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:65:1, line:66:35> line:65:32 vsnprintk 'int (char *, size_t, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x55558d836600 <col:42, col:48> col:48 str 'char *'
| |-ParmVarDecl 0x55558d836670 <col:53, col:60> col:60 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55558d8366e8 <line:66:8, col:20> col:20 fmt 'const char *'
| |-ParmVarDecl 0x55558d839920 <col:25, col:33> col:33 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x55558d839b28 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x55558d83a070 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:68:1, line:69:34> line:68:33 z_vprintk 'void (int (*)(int, void *), void *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x55558d839dd0 <col:43, col:68> col:49 out 'int (*)(int, void *)'
| |-ParmVarDecl 0x55558d839e48 <col:71, col:77> col:77 ctx 'void *'
| |-ParmVarDecl 0x55558d839ec0 <line:69:7, col:19> col:19 fmt 'const char *'
| |-ParmVarDecl 0x55558d839f30 <col:24, col:32> col:32 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x55558d83a130 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x55558d83a2a0 </vagrant/apps/plc_4out/./_build/arm-tfm/install/export/tfm/inc/tfm_gpio_veneers.h:11:1, col:32> col:10 used tfm_gpio_read_all 'uint32_t (void)'
|-FunctionDecl 0x55558d83a470 <line:12:1, col:40> col:9 used tfm_gpio_write_all 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x55558d83a370 <col:28, col:37> col:37 out 'uint32_t':'unsigned int'
|-FunctionDecl 0x55558d83a5b0 <line:13:1, col:46> col:9 used tfm_gpio_enable_outputs 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x55558d83a528 <col:33, col:42> col:42 pins 'uint32_t':'unsigned int'
|-FunctionDecl 0x55558d83a770 <line:14:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55558d83a668 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55558d83c500 <line:16:1, col:43> col:9 used tfm_gpio_enable_output 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55558d83a828 <col:32, col:40> col:40 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55558d83c640 <line:17:1, col:33> col:9 tfm_gpio_set 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55558d83c5b8 <col:22, col:30> col:30 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55558d83c780 <line:18:1, col:35> col:9 tfm_gpio_clear 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55558d83c6f8 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55558d83c8c0 <line:19:1, col:37> col:9 tfm_gpio_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55558d83c838 <col:26, col:34> col:34 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55558d83ca00 prev 0x55558d83a770 <line:20:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55558d83c978 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-RecordDecl 0x55558d83caa8 <line:34:9, line:38:1> line:34:9 struct definition
| |-FieldDecl 0x55558d83cb60 <line:35:5, col:13> col:13 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x55558d83cbb8 <line:36:5, col:13> col:13 polarity 'uint8_t':'unsigned char'
| `-FieldDecl 0x55558d83cd58 <line:37:5, col:21> col:12 cb 'void (*)(void)'
|-TypedefDecl 0x55558d83cdf0 <line:34:1, line:38:3> col:3 referenced gpio_int_config 'struct gpio_int_config':'gpio_int_config'
| `-ElaboratedType 0x55558d83cda0 'struct gpio_int_config' sugar
|   `-RecordType 0x55558d83cb30 'gpio_int_config'
|     `-Record 0x55558d83caa8 ''
|-FunctionDecl 0x55558d83d070 <line:40:1, col:68> col:9 tfm_gpio_interrupt_enable 'uint8_t (uint8_t, gpio_int_config *)'
| |-ParmVarDecl 0x55558d83ce70 <col:35, col:43> col:43 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x55558d83cf58 <col:48, col:65> col:65 cfg 'gpio_int_config *'
|-FunctionDecl 0x55558d83d1b8 <line:41:1, col:47> col:9 tfm_gpio_interrupt_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55558d83d130 <col:36, col:44> col:44 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x55558d83d278 </vagrant/apps/plc_4out/./inc/plc_platform.h:5:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x55558d7b59f0 'short'
|-TypedefDecl 0x55558d83d2e8 <line:6:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x55558d7b5a70 'unsigned char'
|-EnumDecl 0x55558d83d340 <line:25:9, line:29:1> line:25:9
| |-EnumConstantDecl 0x55558d83d420 <line:26:2, col:6> col:2 R 'int'
| | `-IntegerLiteral 0x55558d83d400 <col:6> 'int' 2
| |-EnumConstantDecl 0x55558d83d488 <line:27:2, col:6> col:2 G 'int'
| | `-IntegerLiteral 0x55558d83d468 <col:6> 'int' 3
| `-EnumConstantDecl 0x55558d83f990 <line:28:2, col:6> col:2 B 'int'
|   `-IntegerLiteral 0x55558d83d4d0 <col:6> 'int' 4
|-TypedefDecl 0x55558d83fa30 <line:25:1, line:29:3> col:3 referenced LED 'enum LED':'LED'
| `-ElaboratedType 0x55558d83f9e0 'enum LED' sugar
|   `-EnumType 0x55558d83d3e0 'LED'
|     `-Enum 0x55558d83d340 ''
|-FunctionDecl 0x55558d83fc90 <line:31:1, col:56> col:6 enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x55558d83fb08 <col:25, col:34> col:34 pins 'uint8_t *'
| `-ParmVarDecl 0x55558d83fb78 <col:40, col:48> col:48 num_pins 'uint8_t':'unsigned char'
|-FunctionDecl 0x55558d83fe50 <line:33:1, col:35> col:6 enable_pin_output 'void (uint8_t)'
| `-ParmVarDecl 0x55558d83fd50 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55558d83ff88 <line:35:1, col:24> col:6 read_in_table 'void (void)'
|-FunctionDecl 0x55558d8400b8 <line:37:1, col:26> col:6 write_out_table 'void (void)'
|-FunctionDecl 0x55558d840220 <line:41:1, col:25> col:6 used set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x55558d840198 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
| `-FullComment 0x55558d8446e0 <line:39:4, col:42>
|   `-ParagraphComment 0x55558d8446b0 <col:4, col:42>
|     `-TextComment 0x55558d844680 <col:4, col:42> Text="************** For User ***************"
|-FunctionDecl 0x55558d840360 <line:43:1, col:25> col:6 used clr_pin 'void (uint8_t)'
| `-ParmVarDecl 0x55558d8402d8 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55558d8405c0 <line:45:1, col:37> col:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x55558d840418 <col:16, col:24> col:24 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x55558d8404b0 <col:29, col:34> col:34 val 'BOOL':'unsigned char'
|-FunctionDecl 0x55558d840740 <line:47:1, col:26> col:6 used read_pin 'BOOL (uint8_t)'
| `-ParmVarDecl 0x55558d840680 <col:15, col:23> col:23 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55558d8409a0 <line:49:1, col:22> col:6 used LED_on 'void (LED)'
| `-ParmVarDecl 0x55558d840820 <col:13, col:17> col:17 color 'LED':'LED'
|-FunctionDecl 0x55558d840ae0 <line:51:1, col:23> col:6 used LED_off 'void (LED)'
| `-ParmVarDecl 0x55558d840a58 <col:14, col:18> col:18 color 'LED':'LED'
|-FunctionDecl 0x55558d840ca0 <line:53:1, col:24> col:6 read_LED 'BOOL (LED)'
| `-ParmVarDecl 0x55558d840b98 <col:15, col:19> col:19 color 'LED':'LED'
|-FunctionDecl 0x55558d840ee0 <line:55:1, col:33> col:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x55558d840d58 <col:16, col:20> col:20 color 'LED':'LED'
| `-ParmVarDecl 0x55558d840dc8 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55558d841028 <line:57:1, col:40> col:6 read_button_active_low 'BOOL (uint8_t)'
| `-ParmVarDecl 0x55558d840fa0 <col:29, col:37> col:37 pin 'uint8_t':'unsigned char'
|-VarDecl 0x55558d8410e0 <./src/plc_platform.c:6:1, col:33> col:17 used gpio_in_table 'uint32_t':'unsigned int' static cinit
| `-ImplicitCastExpr 0x55558d841160 <col:33> 'uint32_t':'unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x55558d841140 <col:33> 'int' 0
|-VarDecl 0x55558d841188 <line:7:1, col:34> col:17 used gpio_out_table 'uint32_t':'unsigned int' static cinit
| `-ImplicitCastExpr 0x55558d841208 <col:34> 'uint32_t':'unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x55558d8411e8 <col:34> 'int' 0
|-VarDecl 0x55558d841230 <line:10:1, col:10> col:10 cntr 'uint32_t':'unsigned int'
|-FunctionDecl 0x55558d8413a0 prev 0x55558d83fc90 <line:12:1, line:20:1> line:12:6 enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x55558d8412a0 <col:25, col:34> col:34 used pins 'uint8_t *'
| |-ParmVarDecl 0x55558d841310 <col:40, col:48> col:48 used num_pins 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55558d841d80 <col:58, line:20:1>
|   |-DeclStmt 0x55558d8414f8 <line:13:2, col:18>
|   | `-VarDecl 0x55558d841460 <col:2, col:17> col:11 used out 'uint32_t':'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x55558d8414e0 <col:17> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-IntegerLiteral 0x55558d8414c0 <col:17> 'int' 0
|   |-ForStmt 0x55558d8418c0 <line:14:2, line:16:2>
|   | |-DeclStmt 0x55558d8415b8 <line:14:7, col:20>
|   | | `-VarDecl 0x55558d841520 <col:7, col:19> col:15 used i 'uint8_t':'unsigned char' cinit
|   | |   `-ImplicitCastExpr 0x55558d8415a0 <col:19> 'uint8_t':'unsigned char' <IntegralCast>
|   | |     `-IntegerLiteral 0x55558d841580 <col:19> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55558d841680 <col:22, col:26> 'int' '<'
|   | | |-ImplicitCastExpr 0x55558d841638 <col:22> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x55558d841620 <col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55558d8415d0 <col:22> 'uint8_t':'unsigned char' lvalue Var 0x55558d841520 'i' 'uint8_t':'unsigned char'
|   | | `-ImplicitCastExpr 0x55558d841668 <col:26> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x55558d841650 <col:26> 'uint8_t':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55558d8415f8 <col:26> 'uint8_t':'unsigned char' lvalue ParmVar 0x55558d841310 'num_pins' 'uint8_t':'unsigned char'
|   | |-UnaryOperator 0x55558d8416d0 <col:36, col:37> 'uint8_t':'unsigned char' postfix '++'
|   | | `-DeclRefExpr 0x55558d8416a8 <col:36> 'uint8_t':'unsigned char' lvalue Var 0x55558d841520 'i' 'uint8_t':'unsigned char'
|   | `-CompoundStmt 0x55558d8418a8 <col:41, line:16:2>
|   |   `-CompoundAssignOperator 0x55558d841870 <line:15:3, col:23> 'uint32_t':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |     |-DeclRefExpr 0x55558d8416f0 <col:3> 'uint32_t':'unsigned int' lvalue Var 0x55558d841460 'out' 'uint32_t':'unsigned int'
|   |     `-ImplicitCastExpr 0x55558d841858 <col:10, col:23> 'unsigned int' <IntegralCast>
|   |       `-ParenExpr 0x55558d841838 <col:10, col:23> 'int'
|   |         `-BinaryOperator 0x55558d841810 <col:11, col:22> 'int' '<<'
|   |           |-IntegerLiteral 0x55558d841718 <col:11> 'int' 1
|   |           `-ImplicitCastExpr 0x55558d8417f8 <col:16, col:22> 'int' <IntegralCast>
|   |             `-ImplicitCastExpr 0x55558d8417e0 <col:16, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|   |               `-ArraySubscriptExpr 0x55558d8417b8 <col:16, col:22> 'uint8_t':'unsigned char' lvalue
|   |                 |-ImplicitCastExpr 0x55558d841788 <col:16> 'uint8_t *' <LValueToRValue>
|   |                 | `-DeclRefExpr 0x55558d841738 <col:16> 'uint8_t *' lvalue ParmVar 0x55558d8412a0 'pins' 'uint8_t *'
|   |                 `-ImplicitCastExpr 0x55558d8417a0 <col:21> 'uint8_t':'unsigned char' <LValueToRValue>
|   |                   `-DeclRefExpr 0x55558d841760 <col:21> 'uint8_t':'unsigned char' lvalue Var 0x55558d841520 'i' 'uint8_t':'unsigned char'
|   |-CallExpr 0x55558d841be0 <line:17:2, col:38> 'void'
|   | |-ImplicitCastExpr 0x55558d841bc8 <col:2> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55558d8418f8 <col:2> 'void (const char *, ...)' Function 0x55558d835a90 'printk' 'void (const char *, ...)'
|   | |-ImplicitCastExpr 0x55558d841c30 <col:9> 'const char *' <BitCast>
|   | | `-ImplicitCastExpr 0x55558d841c18 <col:9> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x55558d841958 <col:9> 'char [22]' lvalue "Enabling Outputs: %x\n"
|   | `-ImplicitCastExpr 0x55558d841c48 <col:35> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55558d841b70 <col:35> 'uint32_t':'unsigned int' lvalue Var 0x55558d841460 'out' 'uint32_t':'unsigned int'
|   |-CallExpr 0x55558d841d20 <line:18:2, col:29> 'uint8_t':'unsigned char'
|   | |-ImplicitCastExpr 0x55558d841d08 <col:2> 'uint8_t (*)(uint32_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55558d841c60 <col:2> 'uint8_t (uint32_t)' Function 0x55558d83a5b0 'tfm_gpio_enable_outputs' 'uint8_t (uint32_t)'
|   | `-ImplicitCastExpr 0x55558d841d50 <col:26> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55558d841c88 <col:26> 'uint32_t':'unsigned int' lvalue Var 0x55558d841460 'out' 'uint32_t':'unsigned int'
|   `-ReturnStmt 0x55558d841d68 <line:19:2>
|-FunctionDecl 0x55558d841e50 prev 0x55558d83fe50 <line:22:1, line:27:1> line:22:6 enable_pin_output 'void (uint8_t)'
| |-ParmVarDecl 0x55558d841dc8 <col:24, col:32> col:32 used pin 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55558d8421f0 <col:37, line:27:1>
|   |-IfStmt 0x55558d8421a0 <line:23:2, line:25:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55558d842040 <line:23:6, col:37> 'int' '!='
|   | | |-ImplicitCastExpr 0x55558d842028 <col:6, col:32> 'int' <IntegralCast>
|   | | | `-CallExpr 0x55558d841fc0 <col:6, col:32> 'uint8_t':'unsigned char'
|   | | |   |-ImplicitCastExpr 0x55558d841fa8 <col:6> 'uint8_t (*)(uint8_t)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x55558d841ef8 <col:6> 'uint8_t (uint8_t)' Function 0x55558d83c500 'tfm_gpio_enable_output' 'uint8_t (uint8_t)'
|   | | |   `-ImplicitCastExpr 0x55558d841ff0 <col:29> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55558d841f20 <col:29> 'uint8_t':'unsigned char' lvalue ParmVar 0x55558d841dc8 'pin' 'uint8_t':'unsigned char'
|   | | `-IntegerLiteral 0x55558d842008 <col:37> 'int' 0
|   | |-CompoundStmt 0x55558d842188 <col:40, line:25:2>
|   | | `-CallExpr 0x55558d842128 <line:24:3, col:37> 'void'
|   | |   |-ImplicitCastExpr 0x55558d842110 <col:3> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55558d842068 <col:3> 'void (const char *, ...)' Function 0x55558d835a90 'printk' 'void (const char *, ...)'
|   | |   `-ImplicitCastExpr 0x55558d842170 <col:10> 'const char *' <BitCast>
|   | |     `-ImplicitCastExpr 0x55558d842158 <col:10> 'char *' <ArrayToPointerDecay>
|   | |       `-StringLiteral 0x55558d8420c8 <col:10> 'char [26]' lvalue "Error! Cannot Enable Pin!"
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55558d8421d8 <line:26:2>
|-FunctionDecl 0x55558d8422a0 prev 0x55558d83ff88 <line:29:1, line:36:1> line:29:6 read_in_table 'void (void)'
| `-CompoundStmt 0x55558d842468 <col:26, line:36:1>
|   |-BinaryOperator 0x55558d842428 <line:30:2, col:36> 'uint32_t':'unsigned int' '='
|   | |-DeclRefExpr 0x55558d842340 <col:2> 'uint32_t':'unsigned int' lvalue Var 0x55558d8410e0 'gpio_in_table' 'uint32_t':'unsigned int'
|   | `-CallExpr 0x55558d842400 <col:18, col:36> 'uint32_t':'unsigned int'
|   |   `-ImplicitCastExpr 0x55558d8423e8 <col:18> 'uint32_t (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55558d842368 <col:18> 'uint32_t (void)' Function 0x55558d83a2a0 'tfm_gpio_read_all' 'uint32_t (void)'
|   `-ReturnStmt 0x55558d842450 <line:35:2>
|-FunctionDecl 0x55558d842518 prev 0x55558d8400b8 <line:38:1, line:46:1> line:38:6 write_out_table 'void (void)'
| `-CompoundStmt 0x55558d842680 <col:28, line:46:1>
|   |-CallExpr 0x55558d842620 <line:44:2, col:35> 'uint8_t':'unsigned char'
|   | |-ImplicitCastExpr 0x55558d842608 <col:2> 'uint8_t (*)(uint32_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55558d8425b8 <col:2> 'uint8_t (uint32_t)' Function 0x55558d83a470 'tfm_gpio_write_all' 'uint8_t (uint32_t)'
|   | `-ImplicitCastExpr 0x55558d842650 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55558d8425e0 <col:21> 'uint32_t':'unsigned int' lvalue Var 0x55558d841188 'gpio_out_table' 'uint32_t':'unsigned int'
|   `-ReturnStmt 0x55558d842668 <line:45:2>
|-FunctionDecl 0x55558d842738 prev 0x55558d840220 <line:48:1, line:52:1> line:48:6 used set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x55558d8426b0 <col:14, col:22> col:22 used pin 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55558d842a38 <col:27, line:52:1>
|   |-IfStmt 0x55558d8428b0 <line:49:2, col:26>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55558d842858 <col:6, col:12> 'int' '>'
|   | | |-ImplicitCastExpr 0x55558d842840 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x55558d842828 <col:6> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55558d8427e0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x55558d8426b0 'pin' 'uint8_t':'unsigned char'
|   | | `-IntegerLiteral 0x55558d842808 <col:12> 'int' 15
|   | |-CompoundStmt 0x55558d842898 <col:16, col:26>
|   | | `-ReturnStmt 0x55558d842880 <col:18>
|   | `-<<<NULL>>>
|   |-CompoundAssignOperator 0x55558d8429e8 <line:50:2, col:29> 'uint32_t':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-DeclRefExpr 0x55558d8428e8 <col:2> 'uint32_t':'unsigned int' lvalue Var 0x55558d841188 'gpio_out_table' 'uint32_t':'unsigned int'
|   | `-ImplicitCastExpr 0x55558d8429d0 <col:20, col:29> 'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x55558d8429b0 <col:20, col:29> 'int'
|   |     `-BinaryOperator 0x55558d842988 <col:21, col:26> 'int' '<<'
|   |       |-IntegerLiteral 0x55558d842910 <col:21> 'int' 1
|   |       `-ImplicitCastExpr 0x55558d842970 <col:26> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x55558d842958 <col:26> 'uint8_t':'unsigned char' <LValueToRValue>
|   |           `-DeclRefExpr 0x55558d842930 <col:26> 'uint8_t':'unsigned char' lvalue ParmVar 0x55558d8426b0 'pin' 'uint8_t':'unsigned char'
|   `-ReturnStmt 0x55558d842a20 <line:51:2>
|-FunctionDecl 0x55558d842b80 prev 0x55558d840360 <line:54:1, line:58:1> line:54:6 used clr_pin 'void (uint8_t)'
| |-ParmVarDecl 0x55558d842a70 <col:14, col:22> col:22 used pin 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55558d842ea0 <col:27, line:58:1>
|   |-IfStmt 0x55558d842cf8 <line:55:2, col:26>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55558d842ca0 <col:6, col:12> 'int' '>'
|   | | |-ImplicitCastExpr 0x55558d842c88 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x55558d842c70 <col:6> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55558d842c28 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x55558d842a70 'pin' 'uint8_t':'unsigned char'
|   | | `-IntegerLiteral 0x55558d842c50 <col:12> 'int' 15
|   | |-CompoundStmt 0x55558d842ce0 <col:16, col:26>
|   | | `-ReturnStmt 0x55558d842cc8 <col:18>
|   | `-<<<NULL>>>
|   |-CompoundAssignOperator 0x55558d842e50 <line:56:2, col:30> 'uint32_t':'unsigned int' '&=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-DeclRefExpr 0x55558d842d30 <col:2> 'uint32_t':'unsigned int' lvalue Var 0x55558d841188 'gpio_out_table' 'uint32_t':'unsigned int'
|   | `-ImplicitCastExpr 0x55558d842e38 <col:20, col:30> 'unsigned int' <IntegralCast>
|   |   `-UnaryOperator 0x55558d842e18 <col:20, col:30> 'int' prefix '~'
|   |     `-ParenExpr 0x55558d842df8 <col:21, col:30> 'int'
|   |       `-BinaryOperator 0x55558d842dd0 <col:22, col:27> 'int' '<<'
|   |         |-IntegerLiteral 0x55558d842d58 <col:22> 'int' 1
|   |         `-ImplicitCastExpr 0x55558d842db8 <col:27> 'int' <IntegralCast>
|   |           `-ImplicitCastExpr 0x55558d842da0 <col:27> 'uint8_t':'unsigned char' <LValueToRValue>
|   |             `-DeclRefExpr 0x55558d842d78 <col:27> 'uint8_t':'unsigned char' lvalue ParmVar 0x55558d842a70 'pin' 'uint8_t':'unsigned char'
|   `-ReturnStmt 0x55558d842e88 <line:57:2>
|-FunctionDecl 0x55558d842fd8 prev 0x55558d8405c0 <line:60:1, line:67:1> line:60:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x55558d842ed8 <col:16, col:24> col:24 used pin 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x55558d842f48 <col:29, col:34> col:34 used val 'BOOL':'unsigned char'
| `-CompoundStmt 0x55558d843308 <col:39, line:67:1>
|   |-IfStmt 0x55558d8432b8 <line:61:2, line:65:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x55558d8430b0 <line:61:6> 'BOOL':'unsigned char' <LValueToRValue>
|   | | `-DeclRefExpr 0x55558d843088 <col:6> 'BOOL':'unsigned char' lvalue ParmVar 0x55558d842f48 'val' 'BOOL':'unsigned char'
|   | |-CompoundStmt 0x55558d8431d8 <col:11, line:63:2>
|   | | `-CallExpr 0x55558d843190 <line:62:3, col:14> 'void'
|   | |   |-ImplicitCastExpr 0x55558d843178 <col:3> 'void (*)(uint8_t)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55558d8430c8 <col:3> 'void (uint8_t)' Function 0x55558d842738 'set_pin' 'void (uint8_t)'
|   | |   `-ImplicitCastExpr 0x55558d8431c0 <col:11> 'uint8_t':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55558d8430f0 <col:11> 'uint8_t':'unsigned char' lvalue ParmVar 0x55558d842ed8 'pin' 'uint8_t':'unsigned char'
|   | `-CompoundStmt 0x55558d8432a0 <line:63:9, line:65:2>
|   |   `-CallExpr 0x55558d843258 <line:64:3, col:14> 'void'
|   |     |-ImplicitCastExpr 0x55558d843240 <col:3> 'void (*)(uint8_t)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55558d8431f0 <col:3> 'void (uint8_t)' Function 0x55558d842b80 'clr_pin' 'void (uint8_t)'
|   |     `-ImplicitCastExpr 0x55558d843288 <col:11> 'uint8_t':'unsigned char' <LValueToRValue>
|   |       `-DeclRefExpr 0x55558d843218 <col:11> 'uint8_t':'unsigned char' lvalue ParmVar 0x55558d842ed8 'pin' 'uint8_t':'unsigned char'
|   `-ReturnStmt 0x55558d8432f0 <line:66:2>
|-FunctionDecl 0x55558d8433c0 prev 0x55558d840740 <line:69:1, line:72:1> line:69:6 used read_pin 'BOOL (uint8_t)'
| |-ParmVarDecl 0x55558d843338 <col:15, col:23> col:23 used pin 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55558d843788 <col:28, line:72:1>
|   |-IfStmt 0x55558d843578 <line:70:2, col:30>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55558d8434e0 <col:6, col:12> 'int' '>'
|   | | |-ImplicitCastExpr 0x55558d8434c8 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x55558d8434b0 <col:6> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55558d843468 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x55558d843338 'pin' 'uint8_t':'unsigned char'
|   | | `-IntegerLiteral 0x55558d843490 <col:12> 'int' 15
|   | |-CompoundStmt 0x55558d843560 <col:16, col:30>
|   | | `-ReturnStmt 0x55558d843548 <col:18, col:25>
|   | |   `-ImplicitCastExpr 0x55558d843530 <col:25> 'uint8_t':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55558d843508 <col:25> 'uint8_t':'unsigned char' lvalue ParmVar 0x55558d843338 'pin' 'uint8_t':'unsigned char'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55558d843770 <line:71:2, col:41>
|     `-ImplicitCastExpr 0x55558d843758 <col:9, col:41> 'BOOL':'unsigned char' <IntegralCast>
|       `-BinaryOperator 0x55558d843730 <col:9, col:41> 'int' '%'
|         |-ImplicitCastExpr 0x55558d843718 <col:9, col:37> 'int' <IntegralCast>
|         | `-CStyleCastExpr 0x55558d8436d0 <col:9, col:37> 'BOOL':'unsigned char' <IntegralCast>
|         |   `-ParenExpr 0x55558d8436b0 <col:16, col:37> 'uint32_t':'unsigned int'
|         |     `-BinaryOperator 0x55558d843648 <col:17, col:34> 'uint32_t':'unsigned int' '>>'
|         |       |-ImplicitCastExpr 0x55558d843600 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|         |       | `-DeclRefExpr 0x55558d8435b0 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55558d8410e0 'gpio_in_table' 'uint32_t':'unsigned int'
|         |       `-ImplicitCastExpr 0x55558d843630 <col:34> 'int' <IntegralCast>
|         |         `-ImplicitCastExpr 0x55558d843618 <col:34> 'uint8_t':'unsigned char' <LValueToRValue>
|         |           `-DeclRefExpr 0x55558d8435d8 <col:34> 'uint8_t':'unsigned char' lvalue ParmVar 0x55558d843338 'pin' 'uint8_t':'unsigned char'
|         `-IntegerLiteral 0x55558d8436f8 <col:41> 'int' 2
|-FunctionDecl 0x55558d843840 prev 0x55558d8409a0 <line:74:1, line:77:1> line:74:6 used LED_on 'void (LED)'
| |-ParmVarDecl 0x55558d8437b8 <col:13, col:17> col:17 used color 'LED':'LED'
| `-CompoundStmt 0x55558d8439c8 <col:24, line:77:1>
|   |-CallExpr 0x55558d843950 <line:75:2, col:15> 'void'
|   | |-ImplicitCastExpr 0x55558d843938 <col:2> 'void (*)(uint8_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55558d8438e8 <col:2> 'void (uint8_t)' Function 0x55558d842b80 'clr_pin' 'void (uint8_t)'
|   | `-ImplicitCastExpr 0x55558d843998 <col:10> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-ImplicitCastExpr 0x55558d843980 <col:10> 'LED':'LED' <LValueToRValue>
|   |     `-DeclRefExpr 0x55558d843910 <col:10> 'LED':'LED' lvalue ParmVar 0x55558d8437b8 'color' 'LED':'LED'
|   `-ReturnStmt 0x55558d8439b0 <line:76:2>
|-FunctionDecl 0x55558d843a80 prev 0x55558d840ae0 <line:79:1, line:82:1> line:79:6 used LED_off 'void (LED)'
| |-ParmVarDecl 0x55558d8439f8 <col:14, col:18> col:18 used color 'LED':'LED'
| `-CompoundStmt 0x55558d843c20 <col:25, line:82:1>
|   |-CallExpr 0x55558d843ba8 <line:80:2, col:15> 'void'
|   | |-ImplicitCastExpr 0x55558d843b90 <col:2> 'void (*)(uint8_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55558d843b28 <col:2> 'void (uint8_t)' Function 0x55558d842738 'set_pin' 'void (uint8_t)'
|   | `-ImplicitCastExpr 0x55558d843bf0 <col:10> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-ImplicitCastExpr 0x55558d843bd8 <col:10> 'LED':'LED' <LValueToRValue>
|   |     `-DeclRefExpr 0x55558d843b50 <col:10> 'LED':'LED' lvalue ParmVar 0x55558d8439f8 'color' 'LED':'LED'
|   `-ReturnStmt 0x55558d843c08 <line:81:2>
|-FunctionDecl 0x55558d843cd8 prev 0x55558d840ca0 <line:84:1, line:86:1> line:84:6 read_LED 'BOOL (LED)'
| |-ParmVarDecl 0x55558d843c50 <col:15, col:19> col:19 used color 'LED':'LED'
| `-CompoundStmt 0x55558d843ec0 <col:26, line:86:1>
|   `-ReturnStmt 0x55558d843ea8 <line:85:2, col:30>
|     `-CStyleCastExpr 0x55558d843e80 <col:9, col:30> 'BOOL':'unsigned char' <NoOp>
|       `-CallExpr 0x55558d843e10 <col:16, col:30> 'BOOL':'unsigned char'
|         |-ImplicitCastExpr 0x55558d843df8 <col:16> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55558d843d80 <col:16> 'BOOL (uint8_t)' Function 0x55558d8433c0 'read_pin' 'BOOL (uint8_t)'
|         `-ImplicitCastExpr 0x55558d843e58 <col:25> 'uint8_t':'unsigned char' <IntegralCast>
|           `-ImplicitCastExpr 0x55558d843e40 <col:25> 'LED':'LED' <LValueToRValue>
|             `-DeclRefExpr 0x55558d843da8 <col:25> 'LED':'LED' lvalue ParmVar 0x55558d843c50 'color' 'LED':'LED'
|-FunctionDecl 0x55558d843fe8 prev 0x55558d840ee0 <line:88:1, line:94:1> line:88:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x55558d843ee8 <col:16, col:20> col:20 used color 'LED':'LED'
| |-ParmVarDecl 0x55558d843f58 <col:27, col:32> col:32 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x55558d844360 <col:35, line:94:1>
|   `-IfStmt 0x55558d844328 <line:89:2, line:93:2>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55558d844110 <line:89:6, col:11> 'int' '=='
|     | |-ImplicitCastExpr 0x55558d8440f8 <col:6> 'int' <IntegralCast>
|     | | `-ImplicitCastExpr 0x55558d8440e0 <col:6> 'BOOL':'unsigned char' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55558d844098 <col:6> 'BOOL':'unsigned char' lvalue ParmVar 0x55558d843f58 'v' 'BOOL':'unsigned char'
|     | `-IntegerLiteral 0x55558d8440c0 <col:11> 'int' 0
|     |-CompoundStmt 0x55558d844248 <col:14, line:91:2>
|     | `-CallExpr 0x55558d844200 <line:90:3, col:16> 'void'
|     |   |-ImplicitCastExpr 0x55558d8441e8 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55558d844138 <col:3> 'void (LED)' Function 0x55558d843a80 'LED_off' 'void (LED)'
|     |   `-ImplicitCastExpr 0x55558d844230 <col:11> 'LED':'LED' <LValueToRValue>
|     |     `-DeclRefExpr 0x55558d844160 <col:11> 'LED':'LED' lvalue ParmVar 0x55558d843ee8 'color' 'LED':'LED'
|     `-CompoundStmt 0x55558d844310 <line:91:9, line:93:2>
|       `-CallExpr 0x55558d8442c8 <line:92:3, col:15> 'void'
|         |-ImplicitCastExpr 0x55558d8442b0 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55558d844260 <col:3> 'void (LED)' Function 0x55558d843840 'LED_on' 'void (LED)'
|         `-ImplicitCastExpr 0x55558d8442f8 <col:10> 'LED':'LED' <LValueToRValue>
|           `-DeclRefExpr 0x55558d844288 <col:10> 'LED':'LED' lvalue ParmVar 0x55558d843ee8 'color' 'LED':'LED'
`-FunctionDecl 0x55558d844410 prev 0x55558d841028 <line:96:1, line:98:1> line:96:6 read_button_active_low 'BOOL (uint8_t)'
  |-ParmVarDecl 0x55558d844388 <col:29, col:37> col:37 used pin 'uint8_t':'unsigned char'
  `-CompoundStmt 0x55558d844620 <col:42, line:98:1>
    `-ReturnStmt 0x55558d844608 <line:97:2, col:29>
      `-ImplicitCastExpr 0x55558d8445f0 <col:9, col:29> 'BOOL':'unsigned char' <IntegralCast>
        `-ConditionalOperator 0x55558d8445c0 <col:9, col:29> 'int'
          |-ImplicitCastExpr 0x55558d8445a8 <col:9, col:21> 'int' <IntegralCast>
          | `-CallExpr 0x55558d844520 <col:9, col:21> 'BOOL':'unsigned char'
          |   |-ImplicitCastExpr 0x55558d844508 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
          |   | `-DeclRefExpr 0x55558d8444b8 <col:9> 'BOOL (uint8_t)' Function 0x55558d8433c0 'read_pin' 'BOOL (uint8_t)'
          |   `-ImplicitCastExpr 0x55558d844550 <col:18> 'uint8_t':'unsigned char' <LValueToRValue>
          |     `-DeclRefExpr 0x55558d8444e0 <col:18> 'uint8_t':'unsigned char' lvalue ParmVar 0x55558d844388 'pin' 'uint8_t':'unsigned char'
          |-IntegerLiteral 0x55558d844568 <col:25> 'int' 0
          `-IntegerLiteral 0x55558d844588 <col:29> 'int' 1
TranslationUnitDecl 0x55b64bd0f698 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55b64bd0fc10 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55b64bd0f930 '__int128'
|-TypedefDecl 0x55b64bd0fc80 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55b64bd0f950 'unsigned __int128'
|-TypedefDecl 0x55b64bd0ff58 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55b64bd0fd60 'struct __NSConstantString_tag'
|   `-Record 0x55b64bd0fcd8 '__NSConstantString_tag'
|-TypedefDecl 0x55b64bd0fff0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55b64bd0ffb0 'char *'
|   `-BuiltinType 0x55b64bd0f730 'char'
|-TypedefDecl 0x55b64bd102b8 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55b64bd10260 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55b64bd100d0 'struct __va_list_tag'
|     `-Record 0x55b64bd10048 '__va_list_tag'
|-TypedefDecl 0x55b64bd722e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:143:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x55b64bd0f7b0 'long'
|-TypedefDecl 0x55b64bd72350 <line:209:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x55b64bd0f850 'unsigned long'
|-TypedefDecl 0x55b64bd723c0 <line:321:1, col:24> col:24 wchar_t 'int'
| `-BuiltinType 0x55b64bd0f790 'int'
|-RecordDecl 0x55b64bd72418 <line:415:9, line:426:1> line:415:9 struct definition
| |-FieldDecl 0x55b64bd72510 <line:416:3, col:13> col:13 __max_align_ll 'long long'
| | `-AlignedAttr 0x55b64bd72558 <col:43, col:77> aligned
| |   `-UnaryExprOrTypeTraitExpr 0x55b64bd724d8 <col:55, col:76> 'unsigned long' alignof 'long long'
| `-FieldDecl 0x55b64bd725f8 <line:417:3, col:15> col:15 __max_align_ld 'long double'
|   `-AlignedAttr 0x55b64bd72640 <col:45, col:81> aligned
|     `-UnaryExprOrTypeTraitExpr 0x55b64bd725c0 <col:57, col:80> 'unsigned long' alignof 'long double'
|-TypedefDecl 0x55b64bd726e0 <line:415:1, line:426:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x55b64bd72690 'struct max_align_t' sugar
|   `-RecordType 0x55b64bd724a0 'max_align_t'
|     `-Record 0x55b64bd72418 ''
|-TypedefDecl 0x55b64bd72780 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h:40:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x55b64bd72750 '__builtin_va_list' sugar
|   |-Typedef 0x55b64bd102b8 '__builtin_va_list'
|   `-ConstantArrayType 0x55b64bd10260 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x55b64bd100d0 'struct __va_list_tag'
|       `-Record 0x55b64bd10048 '__va_list_tag'
|-TypedefDecl 0x55b64bd72810 <line:99:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x55b64bd727e0 '__gnuc_va_list' sugar
|   |-Typedef 0x55b64bd72780 '__gnuc_va_list'
|   `-TypedefType 0x55b64bd72750 '__builtin_va_list' sugar
|     |-Typedef 0x55b64bd102b8 '__builtin_va_list'
|     `-ConstantArrayType 0x55b64bd10260 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x55b64bd100d0 'struct __va_list_tag'
|         `-Record 0x55b64bd10048 '__va_list_tag'
|-TypedefDecl 0x55b64bd72880 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdint.h:40:1, col:24> col:24 int8_t 'signed char'
| `-BuiltinType 0x55b64bd0f750 'signed char'
|-TypedefDecl 0x55b64bd728f0 <line:41:1, col:25> col:25 int16_t 'short'
| `-BuiltinType 0x55b64bd0f770 'short'
|-TypedefDecl 0x55b64bd72960 <line:42:1, col:25> col:25 int32_t 'int'
| `-BuiltinType 0x55b64bd0f790 'int'
|-TypedefDecl 0x55b64bd729d0 <line:43:1, col:25> col:25 int64_t 'long'
| `-BuiltinType 0x55b64bd0f7b0 'long'
|-TypedefDecl 0x55b64bd72a40 <line:45:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x55b64bd0f750 'signed char'
|-TypedefDecl 0x55b64bd72ab0 <line:46:1, col:29> col:29 int_fast16_t 'short'
| `-BuiltinType 0x55b64bd0f770 'short'
|-TypedefDecl 0x55b64bd72b20 <line:47:1, col:29> col:29 int_fast32_t 'int'
| `-BuiltinType 0x55b64bd0f790 'int'
|-TypedefDecl 0x55b64bd72b90 <line:48:1, col:29> col:29 int_fast64_t 'long'
| `-BuiltinType 0x55b64bd0f7b0 'long'
|-TypedefDecl 0x55b64bd72c00 <line:50:1, col:29> col:29 int_least8_t 'signed char'
| `-BuiltinType 0x55b64bd0f750 'signed char'
|-TypedefDecl 0x55b64bd72c70 <line:51:1, col:30> col:30 int_least16_t 'short'
| `-BuiltinType 0x55b64bd0f770 'short'
|-TypedefDecl 0x55b64bd72ce0 <line:52:1, col:30> col:30 int_least32_t 'int'
| `-BuiltinType 0x55b64bd0f790 'int'
|-TypedefDecl 0x55b64bd72d50 <line:53:1, col:30> col:30 int_least64_t 'long'
| `-BuiltinType 0x55b64bd0f7b0 'long'
|-TypedefDecl 0x55b64bd72dc0 <line:55:1, col:25> col:25 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x55b64bd0f7f0 'unsigned char'
|-TypedefDecl 0x55b64bd72e30 <line:56:1, col:26> col:26 uint16_t 'unsigned short'
| `-BuiltinType 0x55b64bd0f810 'unsigned short'
|-TypedefDecl 0x55b64bd72ea0 <line:57:1, col:26> col:26 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x55b64bd0f830 'unsigned int'
|-TypedefDecl 0x55b64bd72f10 <line:58:1, col:26> col:26 uint64_t 'unsigned long'
| `-BuiltinType 0x55b64bd0f850 'unsigned long'
|-TypedefDecl 0x55b64bd72f80 <line:60:1, col:29> col:29 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x55b64bd0f7f0 'unsigned char'
|-TypedefDecl 0x55b64bd72ff0 <line:61:1, col:30> col:30 uint_fast16_t 'unsigned short'
| `-BuiltinType 0x55b64bd0f810 'unsigned short'
|-TypedefDecl 0x55b64bd73060 <line:62:1, col:30> col:30 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x55b64bd0f830 'unsigned int'
|-TypedefDecl 0x55b64bd730d0 <line:63:1, col:30> col:30 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x55b64bd0f850 'unsigned long'
|-TypedefDecl 0x55b64bd73140 <line:65:1, col:30> col:30 uint_least8_t 'unsigned char'
| `-BuiltinType 0x55b64bd0f7f0 'unsigned char'
|-TypedefDecl 0x55b64bd731b0 <line:66:1, col:31> col:31 uint_least16_t 'unsigned short'
| `-BuiltinType 0x55b64bd0f810 'unsigned short'
|-TypedefDecl 0x55b64bd8f130 <line:67:1, col:31> col:31 uint_least32_t 'unsigned int'
| `-BuiltinType 0x55b64bd0f830 'unsigned int'
|-TypedefDecl 0x55b64bd8f1a0 <line:68:1, col:31> col:31 uint_least64_t 'unsigned long'
| `-BuiltinType 0x55b64bd0f850 'unsigned long'
|-TypedefDecl 0x55b64bd8f210 <line:70:1, col:26> col:26 intptr_t 'long'
| `-BuiltinType 0x55b64bd0f7b0 'long'
|-TypedefDecl 0x55b64bd8f280 <line:71:1, col:26> col:26 referenced uintptr_t 'unsigned long'
| `-BuiltinType 0x55b64bd0f850 'unsigned long'
|-FunctionDecl 0x55b64bd8f430 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:51:1, line:54:1> line:51:40 printk 'void (const char *, ...)' static inline
| |-ParmVarDecl 0x55b64bd8f370 <col:47, col:59> col:59 used fmt 'const char *'
| |-CompoundStmt 0x55b64bd8f638 <line:52:1, line:54:1>
| | `-CStyleCastExpr 0x55b64bd8f610 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55b64bd8f5f8 <col:29, col:31> 'const char *' <LValueToRValue>
| |     `-ParenExpr 0x55b64bd8f5d8 <col:29, col:31> 'const char *' lvalue
| |       `-DeclRefExpr 0x55b64bd8f570 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:53:13> 'const char *' lvalue ParmVar 0x55b64bd8f370 'fmt' 'const char *'
| `-FormatAttr 0x55b64bd8f4d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 2
|-FunctionDecl 0x55b64bd8f8c0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:56:1, line:60:1> line:56:40 vprintk 'void (const char *, struct __va_list_tag *)' static inline
| |-ParmVarDecl 0x55b64bd8f6b8 <col:48, col:60> col:60 used fmt 'const char *'
| |-ParmVarDecl 0x55b64bd8f7b0 <col:65, col:73> col:73 used ap 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x55b64bd8fb58 <line:57:1, line:60:1>
| | |-CStyleCastExpr 0x55b64bd8fa68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55b64bd8fa50 <col:29, col:31> 'const char *' <LValueToRValue>
| | |   `-ParenExpr 0x55b64bd8fa30 <col:29, col:31> 'const char *' lvalue
| | |     `-DeclRefExpr 0x55b64bd8f9c8 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:58:13> 'const char *' lvalue ParmVar 0x55b64bd8f6b8 'fmt' 'const char *'
| | `-CStyleCastExpr 0x55b64bd8fb30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55b64bd8fb18 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue>
| |     `-ParenExpr 0x55b64bd8faf8 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue
| |       `-DeclRefExpr 0x55b64bd8fa90 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:59:13> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x55b64bd8f7b0 'ap' 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x55b64bd8f970 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 0
|-FunctionDecl 0x55b64bd8fe28 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:63:1, line:64:26> line:63:32 snprintk 'int (char *, size_t, const char *, ...)' extern
| |-ParmVarDecl 0x55b64bd8fbe0 <col:41, col:47> col:47 str 'char *'
| |-ParmVarDecl 0x55b64bd8fc70 <col:52, col:59> col:59 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64bd8fce8 <line:64:6, col:18> col:18 fmt 'const char *'
| `-FormatAttr 0x55b64bd8fee0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 4
|-FunctionDecl 0x55b64bd93408 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:65:1, line:66:35> line:65:32 vsnprintk 'int (char *, size_t, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x55b64bd8ffa0 <col:42, col:48> col:48 str 'char *'
| |-ParmVarDecl 0x55b64bd90010 <col:53, col:60> col:60 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64bd90088 <line:66:8, col:20> col:20 fmt 'const char *'
| |-ParmVarDecl 0x55b64bd932c0 <col:25, col:33> col:33 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x55b64bd934c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x55b64bd93a10 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:68:1, line:69:34> line:68:33 z_vprintk 'void (int (*)(int, void *), void *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x55b64bd93770 <col:43, col:68> col:49 out 'int (*)(int, void *)'
| |-ParmVarDecl 0x55b64bd937e8 <col:71, col:77> col:77 ctx 'void *'
| |-ParmVarDecl 0x55b64bd93860 <line:69:7, col:19> col:19 fmt 'const char *'
| |-ParmVarDecl 0x55b64bd938d0 <col:24, col:32> col:32 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x55b64bd93ad0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-TypedefDecl 0x55b64bd93ba0 </vagrant/ext/zephyros/zephyr/include/zephyr/types.h:16:1, col:29> col:29 referenced s8_t 'signed char'
| `-BuiltinType 0x55b64bd0f750 'signed char'
|-TypedefDecl 0x55b64bd93c10 <line:17:1, col:29> col:29 s16_t 'short'
| `-BuiltinType 0x55b64bd0f770 'short'
|-TypedefDecl 0x55b64bd93c80 <line:18:1, col:29> col:29 referenced s32_t 'int'
| `-BuiltinType 0x55b64bd0f790 'int'
|-TypedefDecl 0x55b64bd93cf0 <line:19:1, col:29> col:29 referenced s64_t 'long long'
| `-BuiltinType 0x55b64bd0f7d0 'long long'
|-TypedefDecl 0x55b64bd93d60 <line:21:1, col:29> col:29 referenced u8_t 'unsigned char'
| `-BuiltinType 0x55b64bd0f7f0 'unsigned char'
|-TypedefDecl 0x55b64bd93dd0 <line:22:1, col:29> col:29 referenced u16_t 'unsigned short'
| `-BuiltinType 0x55b64bd0f810 'unsigned short'
|-TypedefDecl 0x55b64bd93e40 <line:23:1, col:29> col:29 referenced u32_t 'unsigned int'
| `-BuiltinType 0x55b64bd0f830 'unsigned int'
|-TypedefDecl 0x55b64bd93eb0 <line:24:1, col:29> col:29 referenced u64_t 'unsigned long long'
| `-BuiltinType 0x55b64bd0f870 'unsigned long long'
|-TypedefDecl 0x55b64bd93f20 <line:27:1, col:29> col:29 ulong_t 'unsigned long'
| `-BuiltinType 0x55b64bd0f850 'unsigned long'
|-TypedefDecl 0x55b64bd93fc0 </vagrant/ext/zephyros/zephyr/include/sys/atomic.h:21:1, col:13> col:13 referenced atomic_t 'int'
| `-BuiltinType 0x55b64bd0f790 'int'
|-TypedefDecl 0x55b64bd94050 <line:22:1, col:18> col:18 referenced atomic_val_t 'atomic_t':'int'
| `-TypedefType 0x55b64bd94020 'atomic_t' sugar
|   |-Typedef 0x55b64bd93fc0 'atomic_t'
|   `-BuiltinType 0x55b64bd0f790 'int'
|-FunctionDecl 0x55b64bda1248 <line:56:1, line:57:31> line:56:12 atomic_cas 'int (atomic_t *, atomic_val_t, atomic_val_t)' extern
| |-ParmVarDecl 0x55b64bd94178 <col:23, col:33> col:33 target 'atomic_t *'
| |-ParmVarDecl 0x55b64bd94210 <col:41, col:54> col:54 old_value 'atomic_val_t':'int'
| `-ParmVarDecl 0x55b64bda1110 <line:57:9, col:22> col:22 new_value 'atomic_val_t':'int'
|-FunctionDecl 0x55b64bda14c0 <line:79:1, col:68> col:21 atomic_add 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55b64bda1338 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x55b64bda13a8 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x55b64bda16a8 <line:101:1, col:68> col:21 atomic_sub 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55b64bda15a8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x55b64bda1618 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x55b64bda18a0 <line:120:1, col:48> col:21 atomic_inc 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x55b64bda1798 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x55b64bda1a10 <line:139:1, col:48> col:21 atomic_dec 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x55b64bda1988 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x55b64bda1c30 <line:158:1, col:54> col:21 used atomic_get 'atomic_val_t (const atomic_t *)' extern
| `-ParmVarDecl 0x55b64bda1b28 <col:32, col:48> col:48 target 'const atomic_t *'
|-FunctionDecl 0x55b64bda1e18 <line:185:1, col:68> col:21 atomic_set 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55b64bda1d18 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x55b64bda1d88 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x55b64bda1f90 <line:205:1, col:50> col:21 atomic_clear 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x55b64bda1f08 <col:34, col:44> col:44 target 'atomic_t *'
|-FunctionDecl 0x55b64bda21b0 <line:229:1, col:67> col:21 used atomic_or 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55b64bda2078 <col:31, col:41> col:41 target 'atomic_t *'
| `-ParmVarDecl 0x55b64bda2120 <col:49, col:62> col:62 value 'atomic_val_t':'int'
|-FunctionDecl 0x55b64bda2398 <line:252:1, col:68> col:21 atomic_xor 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55b64bda2298 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x55b64bda2308 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x55b64bda2588 <line:275:1, col:68> col:21 used atomic_and 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55b64bda2488 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x55b64bda24f8 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x55b64bda2778 <line:298:1, col:69> col:21 atomic_nand 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55b64bda2678 <col:33, col:43> col:43 target 'atomic_t *'
| `-ParmVarDecl 0x55b64bda26e8 <col:51, col:64> col:64 value 'atomic_val_t':'int'
|-FunctionDecl 0x55b64bda2ab0 <line:351:1, line:356:1> line:351:20 used atomic_test_bit 'bool (const atomic_t *, int)' static inline
| |-ParmVarDecl 0x55b64bda2928 <col:36, col:52> col:52 used target 'const atomic_t *'
| |-ParmVarDecl 0x55b64bda29a0 <col:60, col:64> col:64 used bit 'int'
| |-CompoundStmt 0x55b64bda4aa8 <line:352:1, line:356:1>
| | |-DeclStmt 0x55b64bda2eb0 <line:353:2, col:57>
| | | `-VarDecl 0x55b64bda2b70 <col:2, col:56> col:15 used val 'atomic_val_t':'int' cinit
| | |   `-CallExpr 0x55b64bda2e80 <col:21, col:56> 'atomic_val_t':'int'
| | |     |-ImplicitCastExpr 0x55b64bda2e68 <col:21> 'atomic_val_t (*)(const atomic_t *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x55b64bda2bd0 <col:21> 'atomic_val_t (const atomic_t *)' Function 0x55b64bda1c30 'atomic_get' 'atomic_val_t (const atomic_t *)'
| | |     `-ParenExpr 0x55b64bda2df0 <line:318:32, col:63> 'const atomic_t *'
| | |       `-BinaryOperator 0x55b64bda2dc8 <col:33, col:62> 'const atomic_t *' '+'
| | |         |-ImplicitCastExpr 0x55b64bda2db0 <col:33, col:38> 'const atomic_t *' <LValueToRValue>
| | |         | `-ParenExpr 0x55b64bda2c20 <col:33, col:38> 'const atomic_t *' lvalue
| | |         |   `-DeclRefExpr 0x55b64bda2bf8 <line:353:44> 'const atomic_t *' lvalue ParmVar 0x55b64bda2928 'target' 'const atomic_t *'
| | |         `-ParenExpr 0x55b64bda2d90 <line:318:42, col:62> 'unsigned long'
| | |           `-BinaryOperator 0x55b64bda2d68 <col:43, line:316:46> 'unsigned long' '/'
| | |             |-ImplicitCastExpr 0x55b64bda2d50 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |             | `-ImplicitCastExpr 0x55b64bda2d38 <col:43, col:47> 'int' <LValueToRValue>
| | |             |   `-ParenExpr 0x55b64bda2c68 <col:43, col:47> 'int' lvalue
| | |             |     `-DeclRefExpr 0x55b64bda2c40 <line:353:52> 'int' lvalue ParmVar 0x55b64bda29a0 'bit' 'int'
| | |             `-ParenExpr 0x55b64bda2d18 <line:316:21, col:46> 'unsigned long'
| | |               `-BinaryOperator 0x55b64bda2cf0 <col:22, col:45> 'unsigned long' '*'
| | |                 |-UnaryExprOrTypeTraitExpr 0x55b64bda2c98 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |                 `-ImplicitCastExpr 0x55b64bda2cd8 <col:45> 'unsigned long' <IntegralCast>
| | |                   `-IntegerLiteral 0x55b64bda2cb8 <col:45> 'int' 8
| | `-ReturnStmt 0x55b64bda4a68 <line:355:2, col:53>
| |   `-ImplicitCastExpr 0x55b64bda4a50 <col:9, col:53> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55b64bda4a28 <col:9, col:53> 'int' '!='
| |       |-ParenExpr 0x55b64bda49e8 <col:9, col:48> 'int'
| |       | `-BinaryOperator 0x55b64bda49c0 <col:10, col:47> 'int' '&'
| |       |   |-IntegerLiteral 0x55b64bda2ec8 <col:10> 'int' 1
| |       |   `-ParenExpr 0x55b64bda49a0 <col:14, col:47> 'atomic_val_t':'int'
| |       |     `-BinaryOperator 0x55b64bda30f8 <col:15, col:46> 'atomic_val_t':'int' '>>'
| |       |       |-ImplicitCastExpr 0x55b64bda30e0 <col:15> 'atomic_val_t':'int' <LValueToRValue>
| |       |       | `-DeclRefExpr 0x55b64bda2ee8 <col:15> 'atomic_val_t':'int' lvalue Var 0x55b64bda2b70 'val' 'atomic_val_t':'int'
| |       |       `-ParenExpr 0x55b64bda30c0 <col:22, col:46> 'unsigned long'
| |       |         `-BinaryOperator 0x55b64bda3098 <col:23, col:45> 'unsigned long' '&'
| |       |           |-ImplicitCastExpr 0x55b64bda3080 <col:23> 'unsigned long' <IntegralCast>
| |       |           | `-ImplicitCastExpr 0x55b64bda3068 <col:23> 'int' <LValueToRValue>
| |       |           |   `-DeclRefExpr 0x55b64bda2f10 <col:23> 'int' lvalue ParmVar 0x55b64bda29a0 'bit' 'int'
| |       |           `-ParenExpr 0x55b64bda3048 <col:29, col:45> 'unsigned long'
| |       |             `-BinaryOperator 0x55b64bda3020 <line:316:21, line:355:44> 'unsigned long' '-'
| |       |               |-ParenExpr 0x55b64bda2fc8 <line:316:21, col:46> 'unsigned long'
| |       |               | `-BinaryOperator 0x55b64bda2fa0 <col:22, col:45> 'unsigned long' '*'
| |       |               |   |-UnaryExprOrTypeTraitExpr 0x55b64bda2f48 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |       |               |   `-ImplicitCastExpr 0x55b64bda2f88 <col:45> 'unsigned long' <IntegralCast>
| |       |               |     `-IntegerLiteral 0x55b64bda2f68 <col:45> 'int' 8
| |       |               `-ImplicitCastExpr 0x55b64bda3008 <line:355:44> 'unsigned long' <IntegralCast>
| |       |                 `-IntegerLiteral 0x55b64bda2fe8 <col:44> 'int' 1
| |       `-IntegerLiteral 0x55b64bda4a08 <col:53> 'int' 0
| `-FullComment 0x55b64bf21f70 <line:341:3, line:349:55>
|   |-ParagraphComment 0x55b64bf21a80 <line:341:3>
|   | `-TextComment 0x55b64bf21a50 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf21aa0 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x55b64bf21b00 <col:10, col:32>
|   |   `-TextComment 0x55b64bf21ad0 <col:10, col:32> Text=" Atomically test a bit."
|   |-ParagraphComment 0x55b64bf21c70 <line:343:3, line:344:66>
|   | |-TextComment 0x55b64bf21b20 <line:343:3, col:41> Text=" This routine tests whether bit number "
|   | |-InlineCommandComment 0x55b64bf21b70 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55b64bf21b90 <col:48, col:51> Text=" of "
|   | |-InlineCommandComment 0x55b64bf21be0 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x55b64bf21c00 <col:61, col:75> Text=" is set or not."
|   | `-TextComment 0x55b64bf21c20 <line:344:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55b64bf21cc0 <line:346:3>
|   | `-TextComment 0x55b64bf21c90 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf21ce0 <col:4, line:347:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf21d90 <line:346:17, line:347:3>
|   |   |-TextComment 0x55b64bf21d40 <line:346:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55b64bf21d60 <line:347:3> Text=" "
|   |-ParamCommandComment 0x55b64bf21db0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf21e40 <col:14, col:43>
|   |   `-TextComment 0x55b64bf21e10 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x55b64bf21e90 <line:349:3>
|   | `-TextComment 0x55b64bf21e60 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf21eb0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55b64bf21f10 <col:11, col:55>
|       `-TextComment 0x55b64bf21ee0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x55b64bda4c60 <line:369:1, line:377:1> line:369:20 atomic_test_and_clear_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x55b64bda4ad8 <col:46, col:56> col:56 used target 'atomic_t *'
| |-ParmVarDecl 0x55b64bda4b50 <col:64, col:68> col:68 used bit 'int'
| |-CompoundStmt 0x55b64bda5608 <line:370:1, line:377:1>
| | |-DeclStmt 0x55b64bda5060 <line:371:2, col:38>
| | | `-VarDecl 0x55b64bda4d20 <col:2, line:317:66> line:371:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x55b64bda5040 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x55b64bda5018 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x55b64bda4d80 <col:27> 'int' 1
| | |       `-ParenExpr 0x55b64bda4ff8 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x55b64bda4fd0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x55b64bda4fb8 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x55b64bda4e60 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x55b64bda4e48 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x55b64bda4e28 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x55b64bda4dc0 <line:371:34> 'int' lvalue ParmVar 0x55b64bda4b50 'bit' 'int'
| | |           `-ParenExpr 0x55b64bda4f98 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x55b64bda4f70 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x55b64bda4f18 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x55b64bda4ef0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x55b64bda4e98 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x55b64bda4ed8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x55b64bda4eb8 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x55b64bda4f58 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x55b64bda4f38 <col:63> 'int' 1
| | |-DeclStmt 0x55b64bda50e8 <line:372:2, col:18>
| | | `-VarDecl 0x55b64bda5088 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x55b64bda5478 <line:374:2, col:50> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x55b64bda5100 <col:2> 'atomic_val_t':'int' lvalue Var 0x55b64bda5088 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x55b64bda5440 <col:8, col:50> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x55b64bda5428 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x55b64bda5128 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55b64bda2588 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x55b64bda5348 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x55b64bda5320 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x55b64bda5308 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x55b64bda5178 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x55b64bda5150 <line:374:31> 'atomic_t *' lvalue ParmVar 0x55b64bda4ad8 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x55b64bda52e8 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x55b64bda52c0 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x55b64bda52a8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x55b64bda5290 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x55b64bda51c0 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x55b64bda5198 <line:374:39> 'int' lvalue ParmVar 0x55b64bda4b50 'bit' 'int'
| | |   |       `-ParenExpr 0x55b64bda5270 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x55b64bda5248 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x55b64bda51f0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x55b64bda5230 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x55b64bda5210 <col:45> 'int' 8
| | |   `-UnaryOperator 0x55b64bda53a8 <line:374:45, col:46> 'atomic_val_t':'int' prefix '~'
| | |     `-ImplicitCastExpr 0x55b64bda5390 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x55b64bda5368 <col:46> 'atomic_val_t':'int' lvalue Var 0x55b64bda4d20 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x55b64bda55c8 <line:376:2, col:25>
| |   `-ImplicitCastExpr 0x55b64bda55b0 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55b64bda5588 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x55b64bda5548 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x55b64bda5520 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x55b64bda54f0 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x55b64bda54a0 <col:10> 'atomic_val_t':'int' lvalue Var 0x55b64bda5088 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x55b64bda5508 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x55b64bda54c8 <col:16> 'atomic_val_t':'int' lvalue Var 0x55b64bda4d20 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x55b64bda5568 <col:25> 'int' 0
| `-FullComment 0x55b64bf22500 <line:359:3, line:367:55>
|   |-ParagraphComment 0x55b64bf22010 <line:359:3>
|   | `-TextComment 0x55b64bf21fe0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf22030 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55b64bf22090 <col:10, col:42>
|   |   `-TextComment 0x55b64bf22060 <col:10, col:42> Text=" Atomically test and clear a bit."
|   |-ParagraphComment 0x55b64bf22200 <line:361:3, line:362:66>
|   | |-TextComment 0x55b64bf220b0 <line:361:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x55b64bf22100 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55b64bf22120 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x55b64bf22170 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x55b64bf22190 <col:51, col:76> Text=" and return its old value."
|   | `-TextComment 0x55b64bf221b0 <line:362:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55b64bf22250 <line:364:3>
|   | `-TextComment 0x55b64bf22220 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf22270 <col:4, line:365:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf22320 <line:364:17, line:365:3>
|   |   |-TextComment 0x55b64bf222d0 <line:364:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55b64bf222f0 <line:365:3> Text=" "
|   |-ParamCommandComment 0x55b64bf22340 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf223d0 <col:14, col:43>
|   |   `-TextComment 0x55b64bf223a0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x55b64bf22420 <line:367:3>
|   | `-TextComment 0x55b64bf223f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf22440 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55b64bf224a0 <col:11, col:55>
|       `-TextComment 0x55b64bf22470 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x55b64bda5750 <line:390:1, line:398:1> line:390:20 used atomic_test_and_set_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x55b64bda5648 <col:44, col:54> col:54 used target 'atomic_t *'
| |-ParmVarDecl 0x55b64bda56c0 <col:62, col:66> col:66 used bit 'int'
| |-CompoundStmt 0x55b64bda6088 <line:391:1, line:398:1>
| | |-DeclStmt 0x55b64bda5b58 <line:392:2, col:38>
| | | `-VarDecl 0x55b64bda5810 <col:2, line:317:66> line:392:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x55b64bda5b38 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x55b64bda5b10 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x55b64bda5870 <col:27> 'int' 1
| | |       `-ParenExpr 0x55b64bda5af0 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x55b64bda5ac8 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x55b64bda5ab0 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x55b64bda5930 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x55b64bda5918 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x55b64bda58f8 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x55b64bda5890 <line:392:34> 'int' lvalue ParmVar 0x55b64bda56c0 'bit' 'int'
| | |           `-ParenExpr 0x55b64bda5a90 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x55b64bda5a68 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x55b64bda5a10 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x55b64bda59e8 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x55b64bda5968 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x55b64bda59d0 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x55b64bda59b0 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x55b64bda5a50 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x55b64bda5a30 <col:63> 'int' 1
| | |-DeclStmt 0x55b64bda5be0 <line:393:2, col:18>
| | | `-VarDecl 0x55b64bda5b80 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x55b64bda5ef0 <line:395:2, col:48> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x55b64bda5bf8 <col:2> 'atomic_val_t':'int' lvalue Var 0x55b64bda5b80 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x55b64bda5ea0 <col:8, col:48> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x55b64bda5e88 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x55b64bda5c20 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55b64bda21b0 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x55b64bda5e40 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x55b64bda5e18 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x55b64bda5e00 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x55b64bda5c70 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x55b64bda5c48 <line:395:30> 'atomic_t *' lvalue ParmVar 0x55b64bda5648 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x55b64bda5de0 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x55b64bda5db8 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x55b64bda5da0 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x55b64bda5d88 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x55b64bda5cb8 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x55b64bda5c90 <line:395:38> 'int' lvalue ParmVar 0x55b64bda56c0 'bit' 'int'
| | |   |       `-ParenExpr 0x55b64bda5d68 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x55b64bda5d40 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x55b64bda5ce8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x55b64bda5d28 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x55b64bda5d08 <col:45> 'int' 8
| | |   `-ImplicitCastExpr 0x55b64bda5ed8 <line:395:44> 'atomic_val_t':'int' <LValueToRValue>
| | |     `-DeclRefExpr 0x55b64bda5e60 <col:44> 'atomic_val_t':'int' lvalue Var 0x55b64bda5810 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x55b64bda6040 <line:397:2, col:25>
| |   `-ImplicitCastExpr 0x55b64bda6028 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55b64bda6000 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x55b64bda5fc0 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x55b64bda5f98 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x55b64bda5f68 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x55b64bda5f18 <col:10> 'atomic_val_t':'int' lvalue Var 0x55b64bda5b80 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x55b64bda5f80 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x55b64bda5f40 <col:16> 'atomic_val_t':'int' lvalue Var 0x55b64bda5810 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x55b64bda5fe0 <col:25> 'int' 0
| `-FullComment 0x55b64bf27300 <line:380:3, line:388:55>
|   |-ParagraphComment 0x55b64bf225a0 <line:380:3>
|   | `-TextComment 0x55b64bf22570 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf225c0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x55b64bf22620 <col:10, col:31>
|   |   `-TextComment 0x55b64bf225f0 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x55b64bf22790 <line:382:3, line:383:66>
|   | |-TextComment 0x55b64bf22640 <line:382:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x55b64bf22690 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55b64bf226b0 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x55b64bf22700 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x55b64bf22720 <col:49, col:74> Text=" and return its old value."
|   | `-TextComment 0x55b64bf22740 <line:383:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55b64bf227e0 <line:385:3>
|   | `-TextComment 0x55b64bf227b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf22800 <col:4, line:386:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf228b0 <line:385:17, line:386:3>
|   |   |-TextComment 0x55b64bf22860 <line:385:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55b64bf22880 <line:386:3> Text=" "
|   |-ParamCommandComment 0x55b64bf228d0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf22960 <col:14, col:43>
|   |   `-TextComment 0x55b64bf22930 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x55b64bf229b0 <line:388:3>
|   | `-TextComment 0x55b64bf22980 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf229d0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55b64bf22a30 <col:11, col:55>
|       `-TextComment 0x55b64bf22a00 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x55b64bda6250 <line:411:1, line:416:1> line:411:20 used atomic_clear_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x55b64bda60c8 <col:37, col:47> col:47 used target 'atomic_t *'
| |-ParmVarDecl 0x55b64bda6140 <col:55, col:59> col:59 used bit 'int'
| |-CompoundStmt 0x55b64bda69c0 <line:412:1, line:416:1>
| | |-DeclStmt 0x55b64bda6630 <line:413:2, col:38>
| | | `-VarDecl 0x55b64bda6310 <col:2, line:317:66> line:413:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x55b64bda6610 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x55b64bda65e8 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x55b64bda6370 <col:27> 'int' 1
| | |       `-ParenExpr 0x55b64bda65c8 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x55b64bda65a0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x55b64bda6588 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x55b64bda6430 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x55b64bda6418 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x55b64bda63f8 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x55b64bda6390 <line:413:34> 'int' lvalue ParmVar 0x55b64bda6140 'bit' 'int'
| | |           `-ParenExpr 0x55b64bda6568 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x55b64bda6540 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x55b64bda64e8 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x55b64bda64c0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x55b64bda6468 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x55b64bda64a8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x55b64bda6488 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x55b64bda6528 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x55b64bda6508 <col:63> 'int' 1
| | `-CStyleCastExpr 0x55b64bda6948 <line:415:2, col:50> 'void' <ToVoid>
| |   `-CallExpr 0x55b64bda6900 <col:8, col:50> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x55b64bda68e8 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64bda6648 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55b64bda2588 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x55b64bda6868 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x55b64bda6840 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x55b64bda6828 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x55b64bda6698 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x55b64bda6670 <line:415:31> 'atomic_t *' lvalue ParmVar 0x55b64bda60c8 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x55b64bda6808 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x55b64bda67e0 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x55b64bda67c8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x55b64bda67b0 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x55b64bda66e0 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x55b64bda66b8 <line:415:39> 'int' lvalue ParmVar 0x55b64bda6140 'bit' 'int'
| |     |       `-ParenExpr 0x55b64bda6790 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x55b64bda6768 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x55b64bda6710 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x55b64bda6750 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x55b64bda6730 <col:45> 'int' 8
| |     `-UnaryOperator 0x55b64bda68c8 <line:415:45, col:46> 'atomic_val_t':'int' prefix '~'
| |       `-ImplicitCastExpr 0x55b64bda68b0 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| |         `-DeclRefExpr 0x55b64bda6888 <col:46> 'atomic_val_t':'int' lvalue Var 0x55b64bda6310 'mask' 'atomic_val_t':'int'
| `-FullComment 0x55b64bf27870 <line:401:3, line:409:14>
|   |-ParagraphComment 0x55b64bf273a0 <line:401:3>
|   | `-TextComment 0x55b64bf27370 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf273c0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55b64bf27420 <col:10, col:33>
|   |   `-TextComment 0x55b64bf273f0 <col:10, col:33> Text=" Atomically clear a bit."
|   |-ParagraphComment 0x55b64bf27570 <line:403:3, line:404:66>
|   | |-TextComment 0x55b64bf27440 <line:403:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x55b64bf27490 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55b64bf274b0 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x55b64bf27500 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x55b64bf27520 <line:404:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55b64bf275c0 <line:406:3>
|   | `-TextComment 0x55b64bf27590 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf275e0 <col:4, line:407:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf27690 <line:406:17, line:407:3>
|   |   |-TextComment 0x55b64bf27640 <line:406:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55b64bf27660 <line:407:3> Text=" "
|   |-ParamCommandComment 0x55b64bf276b0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf27740 <col:14, col:43>
|   |   `-TextComment 0x55b64bf27710 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x55b64bf27790 <line:409:3>
|   | `-TextComment 0x55b64bf27760 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf277b0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf27810 <col:11, col:14>
|       `-TextComment 0x55b64bf277e0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bda6af8 <line:429:1, line:434:1> line:429:20 atomic_set_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x55b64bda69f0 <col:35, col:45> col:45 used target 'atomic_t *'
| |-ParmVarDecl 0x55b64bda6a68 <col:53, col:57> col:57 used bit 'int'
| |-CompoundStmt 0x55b64bda7228 <line:430:1, line:434:1>
| | |-DeclStmt 0x55b64bda6ed8 <line:431:2, col:38>
| | | `-VarDecl 0x55b64bda6bb8 <col:2, line:317:66> line:431:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x55b64bda6eb8 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x55b64bda6e90 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x55b64bda6c18 <col:27> 'int' 1
| | |       `-ParenExpr 0x55b64bda6e70 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x55b64bda6e48 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x55b64bda6e30 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x55b64bda6cd8 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x55b64bda6cc0 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x55b64bda6ca0 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x55b64bda6c38 <line:431:34> 'int' lvalue ParmVar 0x55b64bda6a68 'bit' 'int'
| | |           `-ParenExpr 0x55b64bda6e10 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x55b64bda6de8 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x55b64bda6d90 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x55b64bda6d68 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x55b64bda6d10 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x55b64bda6d50 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x55b64bda6d30 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x55b64bda6dd0 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x55b64bda6db0 <col:63> 'int' 1
| | `-CStyleCastExpr 0x55b64bda71d0 <line:433:2, col:48> 'void' <ToVoid>
| |   `-CallExpr 0x55b64bda7170 <col:8, col:48> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x55b64bda7158 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64bda6ef0 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55b64bda21b0 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x55b64bda7110 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x55b64bda70e8 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x55b64bda70d0 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x55b64bda6f40 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x55b64bda6f18 <line:433:30> 'atomic_t *' lvalue ParmVar 0x55b64bda69f0 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x55b64bda70b0 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x55b64bda7088 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x55b64bda7070 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x55b64bda7058 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x55b64bda6f88 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x55b64bda6f60 <line:433:38> 'int' lvalue ParmVar 0x55b64bda6a68 'bit' 'int'
| |     |       `-ParenExpr 0x55b64bda7038 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x55b64bda7010 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x55b64bda6fb8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x55b64bda6ff8 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x55b64bda6fd8 <col:45> 'int' 8
| |     `-ImplicitCastExpr 0x55b64bda71a8 <line:433:44> 'atomic_val_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x55b64bda7130 <col:44> 'atomic_val_t':'int' lvalue Var 0x55b64bda6bb8 'mask' 'atomic_val_t':'int'
| `-FullComment 0x55b64bf27de0 <line:419:3, line:427:14>
|   |-ParagraphComment 0x55b64bf27910 <line:419:3>
|   | `-TextComment 0x55b64bf278e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf27930 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x55b64bf27990 <col:10, col:31>
|   |   `-TextComment 0x55b64bf27960 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x55b64bf27ae0 <line:421:3, line:422:66>
|   | |-TextComment 0x55b64bf279b0 <line:421:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x55b64bf27a00 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55b64bf27a20 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x55b64bf27a70 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x55b64bf27a90 <line:422:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55b64bf27b30 <line:424:3>
|   | `-TextComment 0x55b64bf27b00 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf27b50 <col:4, line:425:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf27c00 <line:424:17, line:425:3>
|   |   |-TextComment 0x55b64bf27bb0 <line:424:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55b64bf27bd0 <line:425:3> Text=" "
|   |-ParamCommandComment 0x55b64bf27c20 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf27cb0 <col:14, col:43>
|   |   `-TextComment 0x55b64bf27c80 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x55b64bf27d00 <line:427:3>
|   | `-TextComment 0x55b64bf27cd0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf27d20 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf27d80 <col:11, col:14>
|       `-TextComment 0x55b64bf27d50 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bda7470 <line:448:1, line:457:1> line:448:20 atomic_set_bit_to 'void (atomic_t *, int, bool)' static inline
| |-ParmVarDecl 0x55b64bda7258 <col:38, col:48> col:48 used target 'atomic_t *'
| |-ParmVarDecl 0x55b64bda72d0 <col:56, col:60> col:60 used bit 'int'
| |-ParmVarDecl 0x55b64bda7340 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/atomic.h:448:70> col:70 used val 'bool'
| |-CompoundStmt 0x55b64bda9808 <line:449:1, line:457:1>
| | |-DeclStmt 0x55b64bda7858 <line:450:2, col:38>
| | | `-VarDecl 0x55b64bda7538 <col:2, line:317:66> line:450:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x55b64bda7838 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x55b64bda7810 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x55b64bda7598 <col:27> 'int' 1
| | |       `-ParenExpr 0x55b64bda77f0 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x55b64bda77c8 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x55b64bda77b0 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x55b64bda7658 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x55b64bda7640 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x55b64bda7620 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x55b64bda75b8 <line:450:34> 'int' lvalue ParmVar 0x55b64bda72d0 'bit' 'int'
| | |           `-ParenExpr 0x55b64bda7790 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x55b64bda7768 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x55b64bda7710 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x55b64bda76e8 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x55b64bda7690 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x55b64bda76d0 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x55b64bda76b0 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x55b64bda7750 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x55b64bda7730 <col:63> 'int' 1
| | `-IfStmt 0x55b64bda9718 <line:452:2, line:456:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x55b64bda7898 <line:452:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x55b64bda7870 <col:6> 'bool' lvalue ParmVar 0x55b64bda7340 'val' 'bool'
| |   |-CompoundStmt 0x55b64bda93c0 <col:11, line:454:2>
| |   | `-CStyleCastExpr 0x55b64bda9398 <line:453:3, col:49> 'void' <ToVoid>
| |   |   `-CallExpr 0x55b64bda9338 <col:9, col:49> 'atomic_val_t':'int'
| |   |     |-ImplicitCastExpr 0x55b64bda9320 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x55b64bda78b0 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55b64bda21b0 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |   |     |-ParenExpr 0x55b64bda92d8 <line:318:32, col:63> 'atomic_t *'
| |   |     | `-BinaryOperator 0x55b64bda92b0 <col:33, col:62> 'atomic_t *' '+'
| |   |     |   |-ImplicitCastExpr 0x55b64bda9298 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |   |     |   | `-ParenExpr 0x55b64bda7900 <col:33, col:38> 'atomic_t *' lvalue
| |   |     |   |   `-DeclRefExpr 0x55b64bda78d8 <line:453:31> 'atomic_t *' lvalue ParmVar 0x55b64bda7258 'target' 'atomic_t *'
| |   |     |   `-ParenExpr 0x55b64bda9278 <line:318:42, col:62> 'unsigned long'
| |   |     |     `-BinaryOperator 0x55b64bda9250 <col:43, line:316:46> 'unsigned long' '/'
| |   |     |       |-ImplicitCastExpr 0x55b64bda9238 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |   |     |       | `-ImplicitCastExpr 0x55b64bda9220 <col:43, col:47> 'int' <LValueToRValue>
| |   |     |       |   `-ParenExpr 0x55b64bda7948 <col:43, col:47> 'int' lvalue
| |   |     |       |     `-DeclRefExpr 0x55b64bda7920 <line:453:39> 'int' lvalue ParmVar 0x55b64bda72d0 'bit' 'int'
| |   |     |       `-ParenExpr 0x55b64bda9200 <line:316:21, col:46> 'unsigned long'
| |   |     |         `-BinaryOperator 0x55b64bda91d8 <col:22, col:45> 'unsigned long' '*'
| |   |     |           |-UnaryExprOrTypeTraitExpr 0x55b64bda7978 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |   |     |           `-ImplicitCastExpr 0x55b64bda91c0 <col:45> 'unsigned long' <IntegralCast>
| |   |     |             `-IntegerLiteral 0x55b64bda7998 <col:45> 'int' 8
| |   |     `-ImplicitCastExpr 0x55b64bda9370 <line:453:45> 'atomic_val_t':'int' <LValueToRValue>
| |   |       `-DeclRefExpr 0x55b64bda92f8 <col:45> 'atomic_val_t':'int' lvalue Var 0x55b64bda7538 'mask' 'atomic_val_t':'int'
| |   `-CompoundStmt 0x55b64bda9700 <line:454:9, line:456:2>
| |     `-CStyleCastExpr 0x55b64bda96d8 <line:455:3, col:51> 'void' <ToVoid>
| |       `-CallExpr 0x55b64bda9690 <col:9, col:51> 'atomic_val_t':'int'
| |         |-ImplicitCastExpr 0x55b64bda9678 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x55b64bda93d8 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55b64bda2588 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |         |-ParenExpr 0x55b64bda95f8 <line:318:32, col:63> 'atomic_t *'
| |         | `-BinaryOperator 0x55b64bda95d0 <col:33, col:62> 'atomic_t *' '+'
| |         |   |-ImplicitCastExpr 0x55b64bda95b8 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |         |   | `-ParenExpr 0x55b64bda9428 <col:33, col:38> 'atomic_t *' lvalue
| |         |   |   `-DeclRefExpr 0x55b64bda9400 <line:455:32> 'atomic_t *' lvalue ParmVar 0x55b64bda7258 'target' 'atomic_t *'
| |         |   `-ParenExpr 0x55b64bda9598 <line:318:42, col:62> 'unsigned long'
| |         |     `-BinaryOperator 0x55b64bda9570 <col:43, line:316:46> 'unsigned long' '/'
| |         |       |-ImplicitCastExpr 0x55b64bda9558 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |         |       | `-ImplicitCastExpr 0x55b64bda9540 <col:43, col:47> 'int' <LValueToRValue>
| |         |       |   `-ParenExpr 0x55b64bda9470 <col:43, col:47> 'int' lvalue
| |         |       |     `-DeclRefExpr 0x55b64bda9448 <line:455:40> 'int' lvalue ParmVar 0x55b64bda72d0 'bit' 'int'
| |         |       `-ParenExpr 0x55b64bda9520 <line:316:21, col:46> 'unsigned long'
| |         |         `-BinaryOperator 0x55b64bda94f8 <col:22, col:45> 'unsigned long' '*'
| |         |           |-UnaryExprOrTypeTraitExpr 0x55b64bda94a0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |         |           `-ImplicitCastExpr 0x55b64bda94e0 <col:45> 'unsigned long' <IntegralCast>
| |         |             `-IntegerLiteral 0x55b64bda94c0 <col:45> 'int' 8
| |         `-UnaryOperator 0x55b64bda9658 <line:455:46, col:47> 'atomic_val_t':'int' prefix '~'
| |           `-ImplicitCastExpr 0x55b64bda9640 <col:47> 'atomic_val_t':'int' <LValueToRValue>
| |             `-DeclRefExpr 0x55b64bda9618 <col:47> 'atomic_val_t':'int' lvalue Var 0x55b64bda7538 'mask' 'atomic_val_t':'int'
| `-FullComment 0x55b64bf284b0 <line:437:3, line:446:14>
|   |-ParagraphComment 0x55b64bf27e80 <line:437:3>
|   | `-TextComment 0x55b64bf27e50 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf27ea0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x55b64bf27f00 <col:10, col:48>
|   |   `-TextComment 0x55b64bf27ed0 <col:10, col:48> Text=" Atomically set a bit to a given value."
|   |-ParagraphComment 0x55b64bf280d0 <line:439:3, line:440:66>
|   | |-TextComment 0x55b64bf27f20 <line:439:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x55b64bf27f70 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55b64bf27f90 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x55b64bf27fe0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x55b64bf28000 <col:49, col:58> Text=" to value "
|   | |-InlineCommandComment 0x55b64bf28050 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="val."
|   | `-TextComment 0x55b64bf28070 <line:440:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55b64bf28120 <line:442:3>
|   | `-TextComment 0x55b64bf280f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf28140 <col:4, line:443:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf281f0 <line:442:17, line:443:3>
|   |   |-TextComment 0x55b64bf281a0 <line:442:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55b64bf281c0 <line:443:3> Text=" "
|   |-ParamCommandComment 0x55b64bf28210 <col:4, line:444:3> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf282c0 <line:443:14, line:444:3>
|   |   |-TextComment 0x55b64bf28270 <line:443:14, col:43> Text=" Bit number (starting from 0)."
|   |   `-TextComment 0x55b64bf28290 <line:444:3> Text=" "
|   |-ParamCommandComment 0x55b64bf282e0 <col:4, col:38> [in] implicitly Param="val" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf28370 <col:14, col:38>
|   |   `-TextComment 0x55b64bf28340 <col:14, col:38> Text=" true for 1, false for 0."
|   |-ParagraphComment 0x55b64bf283c0 <line:446:3>
|   | `-TextComment 0x55b64bf28390 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf283e0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf28440 <col:11, col:14>
|       `-TextComment 0x55b64bf28410 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bda9900 </vagrant/ext/zephyros/zephyr/include/sys/util.h:113:1, line:116:1> line:113:20 is_power_of_two 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x55b64bda9840 <col:36, col:49> col:49 used x 'unsigned int'
| `-CompoundStmt 0x55b64bda9c58 <line:114:1, line:116:1>
|   `-ReturnStmt 0x55b64bda9c40 <line:115:2, col:42>
|     `-ImplicitCastExpr 0x55b64bda9c28 <col:9, col:42> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55b64bda9c00 <col:9, col:42> 'int' '&&'
|         |-ParenExpr 0x55b64bda9a30 <col:9, col:17> 'int'
|         | `-BinaryOperator 0x55b64bda9a08 <col:10, col:15> 'int' '!='
|         |   |-ImplicitCastExpr 0x55b64bda99f0 <col:10> 'unsigned int' <LValueToRValue>
|         |   | `-DeclRefExpr 0x55b64bda99a8 <col:10> 'unsigned int' lvalue ParmVar 0x55b64bda9840 'x' 'unsigned int'
|         |   `-IntegerLiteral 0x55b64bda99d0 <col:15> 'unsigned int' 0
|         `-ParenExpr 0x55b64bda9be0 <col:22, col:42> 'int'
|           `-BinaryOperator 0x55b64bda9bb8 <col:23, col:40> 'int' '=='
|             |-ParenExpr 0x55b64bda9b78 <col:23, col:35> 'unsigned int'
|             | `-BinaryOperator 0x55b64bda9b50 <col:24, col:34> 'unsigned int' '&'
|             |   |-ImplicitCastExpr 0x55b64bda9b38 <col:24> 'unsigned int' <LValueToRValue>
|             |   | `-DeclRefExpr 0x55b64bda9a50 <col:24> 'unsigned int' lvalue ParmVar 0x55b64bda9840 'x' 'unsigned int'
|             |   `-ParenExpr 0x55b64bda9b18 <col:28, col:34> 'unsigned int'
|             |     `-BinaryOperator 0x55b64bda9af0 <col:29, col:33> 'unsigned int' '-'
|             |       |-ImplicitCastExpr 0x55b64bda9ac0 <col:29> 'unsigned int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x55b64bda9a78 <col:29> 'unsigned int' lvalue ParmVar 0x55b64bda9840 'x' 'unsigned int'
|             |       `-ImplicitCastExpr 0x55b64bda9ad8 <col:33> 'unsigned int' <IntegralCast>
|             |         `-IntegerLiteral 0x55b64bda9aa0 <col:33> 'int' 1
|             `-IntegerLiteral 0x55b64bda9b98 <col:40> 'unsigned int' 0
|-FunctionDecl 0x55b64bda9e40 <line:118:1, line:134:1> line:118:21 arithmetic_shift_right 's64_t (s64_t, u8_t)' static inline
| |-ParmVarDecl 0x55b64bda9ca0 <col:44, col:50> col:50 used value 's64_t':'long long'
| |-ParmVarDecl 0x55b64bda9d30 <col:57, col:62> col:62 used shift 'u8_t':'unsigned char'
| `-CompoundStmt 0x55b64bdb1d48 <line:119:1, line:134:1>
|   |-DeclStmt 0x55b64bda9f60 <line:120:2, col:16>
|   | `-VarDecl 0x55b64bda9f00 <col:2, col:8> col:8 used sign_ext 's64_t':'long long'
|   |-IfStmt 0x55b64bdaa088 <line:122:2, line:124:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55b64bda9ff0 <line:122:6, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x55b64bda9fd8 <col:6> 'unsigned int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x55b64bda9fc0 <col:6> 'u8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55b64bda9f78 <col:6> 'u8_t':'unsigned char' lvalue ParmVar 0x55b64bda9d30 'shift' 'u8_t':'unsigned char'
|   | | `-IntegerLiteral 0x55b64bda9fa0 <col:15> 'unsigned int' 0
|   | |-CompoundStmt 0x55b64bdaa070 <col:19, line:124:2>
|   | | `-ReturnStmt 0x55b64bdaa058 <line:123:3, col:10>
|   | |   `-ImplicitCastExpr 0x55b64bdaa040 <col:10> 's64_t':'long long' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55b64bdaa018 <col:10> 's64_t':'long long' lvalue ParmVar 0x55b64bda9ca0 'value' 's64_t':'long long'
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x55b64bdb19e0 <line:127:2, col:29> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x55b64bdaa0c0 <col:2> 's64_t':'long long' lvalue Var 0x55b64bda9f00 'sign_ext' 's64_t':'long long'
|   | `-BinaryOperator 0x55b64bdb19b8 <col:13, col:29> 'long long' '&'
|   |   |-ParenExpr 0x55b64bdaa170 <col:13, col:25> 's64_t':'long long'
|   |   | `-BinaryOperator 0x55b64bdaa148 <col:14, col:23> 's64_t':'long long' '>>'
|   |   |   |-ImplicitCastExpr 0x55b64bdaa130 <col:14> 's64_t':'long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x55b64bdaa0e8 <col:14> 's64_t':'long long' lvalue ParmVar 0x55b64bda9ca0 'value' 's64_t':'long long'
|   |   |   `-IntegerLiteral 0x55b64bdaa110 <col:23> 'int' 63
|   |   `-ImplicitCastExpr 0x55b64bdb19a0 <col:29> 'long long' <IntegralCast>
|   |     `-IntegerLiteral 0x55b64bdaa190 <col:29> 'int' 1
|   |-BinaryOperator 0x55b64bdb1a90 <line:130:2, col:14> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x55b64bdb1a08 <col:2> 's64_t':'long long' lvalue Var 0x55b64bda9f00 'sign_ext' 's64_t':'long long'
|   | `-UnaryOperator 0x55b64bdb1a70 <col:13, col:14> 's64_t':'long long' prefix '-'
|   |   `-ImplicitCastExpr 0x55b64bdb1a58 <col:14> 's64_t':'long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x55b64bdb1a30 <col:14> 's64_t':'long long' lvalue Var 0x55b64bda9f00 'sign_ext' 's64_t':'long long'
|   `-ReturnStmt 0x55b64bdb1d08 <line:133:2, col:53>
|     `-BinaryOperator 0x55b64bdb1ce0 <col:9, col:53> 'long long' '|'
|       |-ParenExpr 0x55b64bdb1b78 <col:9, col:24> 's64_t':'long long'
|       | `-BinaryOperator 0x55b64bdb1b50 <col:10, col:19> 's64_t':'long long' '>>'
|       |   |-ImplicitCastExpr 0x55b64bdb1b08 <col:10> 's64_t':'long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x55b64bdb1ab8 <col:10> 's64_t':'long long' lvalue ParmVar 0x55b64bda9ca0 'value' 's64_t':'long long'
|       |   `-ImplicitCastExpr 0x55b64bdb1b38 <col:19> 'int' <IntegralCast>
|       |     `-ImplicitCastExpr 0x55b64bdb1b20 <col:19> 'u8_t':'unsigned char' <LValueToRValue>
|       |       `-DeclRefExpr 0x55b64bdb1ae0 <col:19> 'u8_t':'unsigned char' lvalue ParmVar 0x55b64bda9d30 'shift' 'u8_t':'unsigned char'
|       `-ParenExpr 0x55b64bdb1cc0 <col:28, col:53> 's64_t':'long long'
|         `-BinaryOperator 0x55b64bdb1c98 <col:29, col:52> 's64_t':'long long' '<<'
|           |-ImplicitCastExpr 0x55b64bdb1c80 <col:29> 's64_t':'long long' <LValueToRValue>
|           | `-DeclRefExpr 0x55b64bdb1b98 <col:29> 's64_t':'long long' lvalue Var 0x55b64bda9f00 'sign_ext' 's64_t':'long long'
|           `-ParenExpr 0x55b64bdb1c60 <col:41, col:52> 'int'
|             `-BinaryOperator 0x55b64bdb1c38 <col:42, col:47> 'int' '-'
|               |-IntegerLiteral 0x55b64bdb1bc0 <col:42> 'int' 64
|               `-ImplicitCastExpr 0x55b64bdb1c20 <col:47> 'int' <IntegralCast>
|                 `-ImplicitCastExpr 0x55b64bdb1c08 <col:47> 'u8_t':'unsigned char' <LValueToRValue>
|                   `-DeclRefExpr 0x55b64bdb1be0 <col:47> 'u8_t':'unsigned char' lvalue ParmVar 0x55b64bda9d30 'shift' 'u8_t':'unsigned char'
|-FunctionDecl 0x55b64bdb1f78 <line:144:1, col:29> col:5 char2hex 'int (char, u8_t *)'
| |-ParmVarDecl 0x55b64bdb1d90 <col:14, col:19> col:19 c 'char'
| |-ParmVarDecl 0x55b64bdb1e58 <col:22, col:28> col:28 x 'u8_t *'
| `-FullComment 0x55b64bf288d0 <line:137:3, line:142:63>
|   |-ParagraphComment 0x55b64bf28550 <line:137:3>
|   | `-TextComment 0x55b64bf28520 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf28570 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x55b64bf285d0 <col:10, col:68>
|   |   `-TextComment 0x55b64bf285a0 <col:10, col:68> Text="      Convert a single character into a hexadecimal nibble."
|   |-ParagraphComment 0x55b64bf28620 <line:139:3>
|   | `-TextComment 0x55b64bf285f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf28640 <col:4, line:140:3> [in] explicitly Param="c" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf286f0 <line:139:17, line:140:3>
|   |   |-TextComment 0x55b64bf286a0 <line:139:17, col:45> Text="     The character to convert"
|   |   `-TextComment 0x55b64bf286c0 <line:140:3> Text=" "
|   |-ParamCommandComment 0x55b64bf28710 <col:4, col:69> [in] implicitly Param="x" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf287a0 <col:17, col:69>
|   |   `-TextComment 0x55b64bf28770 <col:17, col:69> Text="     The address of storage for the converted number."
|   |-ParagraphComment 0x55b64bf287f0 <line:142:3, col:4>
|   | `-TextComment 0x55b64bf287c0 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x55b64bf28810 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x55b64bf28870 <col:12, col:63>
|       `-TextComment 0x55b64bf28840 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x55b64bdb21f8 <line:154:1, col:29> col:5 hex2char 'int (u8_t, char *)'
| |-ParmVarDecl 0x55b64bdb2068 <col:14, col:19> col:19 x 'u8_t':'unsigned char'
| |-ParmVarDecl 0x55b64bdb20e0 <col:22, col:28> col:28 c 'char *'
| `-FullComment 0x55b64bf28cf0 <line:147:3, line:152:63>
|   |-ParagraphComment 0x55b64bf28970 <line:147:3>
|   | `-TextComment 0x55b64bf28940 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf28990 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x55b64bf289f0 <col:10, col:68>
|   |   `-TextComment 0x55b64bf289c0 <col:10, col:68> Text="      Convert a single hexadecimal nibble into a character."
|   |-ParagraphComment 0x55b64bf28a40 <line:149:3>
|   | `-TextComment 0x55b64bf28a10 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf28a60 <col:4, line:150:3> [in] explicitly Param="c" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf28b10 <line:149:17, line:150:3>
|   |   |-TextComment 0x55b64bf28ac0 <line:149:17, col:42> Text="     The number to convert"
|   |   `-TextComment 0x55b64bf28ae0 <line:150:3> Text=" "
|   |-ParamCommandComment 0x55b64bf28b30 <col:4, col:72> [in] implicitly Param="x" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf28bc0 <col:17, col:72>
|   |   `-TextComment 0x55b64bf28b90 <col:17, col:72> Text="     The address of storage for the converted character."
|   |-ParagraphComment 0x55b64bf28c10 <line:152:3, col:4>
|   | `-TextComment 0x55b64bf28be0 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x55b64bf28c30 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x55b64bf28c90 <col:12, col:63>
|       `-TextComment 0x55b64bf28c60 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x55b64bdb25e0 <line:166:1, col:72> col:8 bin2hex 'size_t (const u8_t *, size_t, char *, size_t)'
| |-ParmVarDecl 0x55b64bdb2348 <col:16, col:28> col:28 buf 'const u8_t *'
| |-ParmVarDecl 0x55b64bdb23b8 <col:33, col:40> col:40 buflen 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64bdb2430 <col:48, col:54> col:54 hex 'char *'
| |-ParmVarDecl 0x55b64bdb24a0 <col:59, col:66> col:66 hexlen 'size_t':'unsigned long'
| `-FullComment 0x55b64bf292c0 <line:157:3, line:164:77>
|   |-ParagraphComment 0x55b64bf28d90 <line:157:3>
|   | `-TextComment 0x55b64bf28d60 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf28db0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x55b64bf28e10 <col:10, col:65>
|   |   `-TextComment 0x55b64bf28de0 <col:10, col:65> Text="      Convert a binary array into string representation."
|   |-ParagraphComment 0x55b64bf28e60 <line:159:3>
|   | `-TextComment 0x55b64bf28e30 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf28e80 <col:4, line:160:3> [in] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf28f30 <line:159:19, line:160:3>
|   |   |-TextComment 0x55b64bf28ee0 <line:159:19, col:50> Text="     The binary array to convert"
|   |   `-TextComment 0x55b64bf28f00 <line:160:3> Text=" "
|   |-ParamCommandComment 0x55b64bf28f50 <col:4, line:161:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf29000 <line:160:22, line:161:3>
|   |   |-TextComment 0x55b64bf28fb0 <line:160:22, col:64> Text="  The length of the binary array to convert"
|   |   `-TextComment 0x55b64bf28fd0 <line:161:3> Text=" "
|   |-ParamCommandComment 0x55b64bf29020 <col:4, line:162:3> [out] explicitly Param="hex" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf290d0 <line:161:19, line:162:3>
|   |   |-TextComment 0x55b64bf29080 <line:161:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x55b64bf290a0 <line:162:3> Text=" "
|   |-ParamCommandComment 0x55b64bf290f0 <col:4, col:74> [in] explicitly Param="hexlen" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf29180 <col:22, col:74>
|   |   `-TextComment 0x55b64bf29150 <col:22, col:74> Text="  Size of the storage area for string representation."
|   |-ParagraphComment 0x55b64bf291d0 <line:164:3>
|   | `-TextComment 0x55b64bf291a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf291f0 <col:4, col:77> Name="return"
|     `-ParagraphComment 0x55b64bf29250 <col:11, col:77>
|       `-TextComment 0x55b64bf29220 <col:11, col:77> Text="     The length of the converted string, or 0 if an error occurred."
|-FunctionDecl 0x55b64bdb29b0 <line:184:1, col:72> col:8 hex2bin 'size_t (const char *, size_t, u8_t *, size_t)'
| |-ParmVarDecl 0x55b64bdb26e0 <col:16, col:28> col:28 hex 'const char *'
| |-ParmVarDecl 0x55b64bdb2750 <col:33, col:40> col:40 hexlen 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64bdb27c0 <col:48, col:54> col:54 buf 'u8_t *'
| |-ParmVarDecl 0x55b64bdb2830 <col:59, col:66> col:66 buflen 'size_t':'unsigned long'
| `-FullComment 0x55b64bf298b0 <line:175:3, line:182:74>
|   |-ParagraphComment 0x55b64bf29380 <line:175:3>
|   | `-TextComment 0x55b64bf29350 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf293a0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x55b64bf29400 <col:10, col:64>
|   |   `-TextComment 0x55b64bf293d0 <col:10, col:64> Text="      Convert a hexadecimal string into a binary array."
|   |-ParagraphComment 0x55b64bf29450 <line:177:3>
|   | `-TextComment 0x55b64bf29420 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf29470 <col:4, line:178:3> [in] explicitly Param="hex" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf29520 <line:177:19, line:178:3>
|   |   |-TextComment 0x55b64bf294d0 <line:177:19, col:56> Text="     The hexadecimal string to convert"
|   |   `-TextComment 0x55b64bf294f0 <line:178:3> Text=" "
|   |-ParamCommandComment 0x55b64bf29540 <col:4, line:179:3> [in] explicitly Param="hexlen" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf295f0 <line:178:22, line:179:3>
|   |   |-TextComment 0x55b64bf295a0 <line:178:22, col:71> Text="  The length of the hexadecimal string to convert."
|   |   `-TextComment 0x55b64bf295c0 <line:179:3> Text=" "
|   |-ParamCommandComment 0x55b64bf29610 <col:4, line:180:3> [out] explicitly Param="buf" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf296c0 <line:179:19, line:180:3>
|   |   |-TextComment 0x55b64bf29670 <line:179:19, col:64> Text="     Address of where to store the binary data"
|   |   `-TextComment 0x55b64bf29690 <line:180:3> Text=" "
|   |-ParamCommandComment 0x55b64bf296e0 <col:4, col:63> [in] explicitly Param="buflen" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf29770 <col:22, col:63>
|   |   `-TextComment 0x55b64bf29740 <col:22, col:63> Text="  Size of the storage area for binary data"
|   |-ParagraphComment 0x55b64bf297c0 <line:182:3>
|   | `-TextComment 0x55b64bf29790 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf297e0 <col:4, col:74> Name="return"
|     `-ParagraphComment 0x55b64bf29840 <col:11, col:74>
|       `-TextComment 0x55b64bf29810 <col:11, col:74> Text="     The length of the binary array , or 0 if an error occurred."
|-FunctionDecl 0x55b64bdb2cc0 <line:199:1, col:50> col:6 u8_to_dec 'u8_t (char *, u8_t, u8_t)'
| |-ParmVarDecl 0x55b64bdb2ab0 <col:16, col:22> col:22 buf 'char *'
| |-ParmVarDecl 0x55b64bdb2b20 <col:27, col:32> col:32 buflen 'u8_t':'unsigned char'
| |-ParmVarDecl 0x55b64bdb2b90 <col:40, col:45> col:45 value 'u8_t':'unsigned char'
| `-FullComment 0x55b64bf29e40 <line:187:3, line:197:47>
|   |-ParagraphComment 0x55b64bf29950 <line:187:3>
|   | `-TextComment 0x55b64bf29920 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf29970 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x55b64bf299d0 <col:10, col:65>
|   |   `-TextComment 0x55b64bf299a0 <col:10, col:65> Text="      Convert a u8_t into decimal string representation."
|   |-ParagraphComment 0x55b64bf29a40 <line:189:3, line:190:60>
|   | |-TextComment 0x55b64bf299f0 <line:189:3, col:65> Text=" Convert a u8_t value into ASCII decimal string representation."
|   | `-TextComment 0x55b64bf29a10 <line:190:3, col:60> Text=" The string is terminated if there is enough space in buf."
|   |-ParagraphComment 0x55b64bf29a90 <line:192:3>
|   | `-TextComment 0x55b64bf29a60 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf29ab0 <col:4, line:193:3> [out] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf29b60 <line:192:19, line:193:3>
|   |   |-TextComment 0x55b64bf29b10 <line:192:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x55b64bf29b30 <line:193:3> Text=" "
|   |-ParamCommandComment 0x55b64bf29b80 <col:4, line:194:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf29c30 <line:193:22, line:194:3>
|   |   |-TextComment 0x55b64bf29be0 <line:193:22, col:74> Text="  Size of the storage area for string representation."
|   |   `-TextComment 0x55b64bf29c00 <line:194:3> Text=" "
|   |-ParamCommandComment 0x55b64bf29c50 <col:4, col:61> [in] explicitly Param="value" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf29ce0 <col:21, col:61>
|   |   `-TextComment 0x55b64bf29cb0 <col:21, col:61> Text="   The value to convert to decimal string"
|   |-ParagraphComment 0x55b64bf29d30 <line:196:3>
|   | `-TextComment 0x55b64bf29d00 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf29d50 <col:4, line:197:47> Name="return"
|     `-ParagraphComment 0x55b64bf29dd0 <line:196:11, line:197:47>
|       |-TextComment 0x55b64bf29d80 <line:196:11, col:74> Text="     The length of the converted string (excluding terminator if"
|       `-TextComment 0x55b64bf29da0 <line:197:3, col:47> Text="             any), or 0 if an error occurred."
|-RecordDecl 0x55b64bdb3078 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:31:1, line:40:1> line:31:8 struct _dnode definition
| |-RecordDecl 0x55b64bdb3120 <line:32:2, line:35:2> line:32:2 union definition
| | |-FieldDecl 0x55b64bdb3280 <line:33:3, col:18> col:18 referenced head 'struct _dnode *'
| | `-FieldDecl 0x55b64bdb32f0 <line:34:3, col:18> col:18 referenced next 'struct _dnode *'
| |-FieldDecl 0x55b64bdb3390 <line:32:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| |-IndirectFieldDecl 0x55b64bdb33e8 <line:33:18> col:18 implicit head 'struct _dnode *'
| | |-Field 0x55b64bdb3390 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x55b64bdb3280 'head' 'struct _dnode *'
| |-IndirectFieldDecl 0x55b64bdb3438 <line:34:18> col:18 implicit next 'struct _dnode *'
| | |-Field 0x55b64bdb3390 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x55b64bdb32f0 'next' 'struct _dnode *'
| |-RecordDecl 0x55b64bdb3478 <line:36:2, line:39:2> line:36:2 union definition
| | |-FieldDecl 0x55b64bdb3548 <line:37:3, col:18> col:18 referenced tail 'struct _dnode *'
| | `-FieldDecl 0x55b64bdb35b8 <line:38:3, col:18> col:18 referenced prev 'struct _dnode *'
| |-FieldDecl 0x55b64bdb3650 <line:36:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| |-IndirectFieldDecl 0x55b64bdb36a8 <line:37:18> col:18 implicit tail 'struct _dnode *'
| | |-Field 0x55b64bdb3650 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| | `-Field 0x55b64bdb3548 'tail' 'struct _dnode *'
| `-IndirectFieldDecl 0x55b64bdb36f8 <line:38:18> col:18 implicit prev 'struct _dnode *'
|   |-Field 0x55b64bdb3650 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
|   `-Field 0x55b64bdb35b8 'prev' 'struct _dnode *'
|-TypedefDecl 0x55b64bdb37a8 <line:42:1, col:23> col:23 referenced sys_dlist_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x55b64bdb31d0 'struct _dnode' sugar
|   `-RecordType 0x55b64bdb3100 'struct _dnode'
|     `-Record 0x55b64bdb3078 '_dnode'
|-TypedefDecl 0x55b64bdb3820 <line:43:1, col:23> col:23 referenced sys_dnode_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x55b64bdb31d0 'struct _dnode' sugar
|   `-RecordType 0x55b64bdb3100 'struct _dnode'
|     `-Record 0x55b64bdb3078 '_dnode'
|-FunctionDecl 0x55b64bdec920 <line:192:1, line:196:1> line:192:20 sys_dlist_init 'void (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55b64bdec818 <col:35, col:48> col:48 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55b64bdecd18 <line:193:1, line:196:1>
| | |-BinaryOperator 0x55b64bdecb58 <line:194:2, col:30> 'struct _dnode *' '='
| | | |-MemberExpr 0x55b64bdeca58 <col:2, col:8> 'struct _dnode *' lvalue .head 0x55b64bdb3280
| | | | `-MemberExpr 0x55b64bdeca08 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| | | |   `-ImplicitCastExpr 0x55b64bdec9f0 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55b64bdec9c8 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdec818 'list' 'sys_dlist_t *'
| | | `-CStyleCastExpr 0x55b64bdecb30 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| | |   `-ImplicitCastExpr 0x55b64bdecb18 <col:30> 'sys_dlist_t *' <LValueToRValue>
| | |     `-DeclRefExpr 0x55b64bdecab0 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdec818 'list' 'sys_dlist_t *'
| | `-BinaryOperator 0x55b64bdeccc0 <line:195:2, col:30> 'struct _dnode *' '='
| |   |-MemberExpr 0x55b64bdecc10 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x55b64bdb3548
| |   | `-MemberExpr 0x55b64bdecbc0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| |   |   `-ImplicitCastExpr 0x55b64bdecba8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55b64bdecb80 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdec818 'list' 'sys_dlist_t *'
| |   `-CStyleCastExpr 0x55b64bdecc98 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| |     `-ImplicitCastExpr 0x55b64bdecc80 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x55b64bdecc48 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdec818 'list' 'sys_dlist_t *'
| `-FullComment 0x55b64bf2a180 <line:185:3, line:189:14>
|   |-ParagraphComment 0x55b64bf29ee0 <line:185:3>
|   | `-TextComment 0x55b64bf29eb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf29f00 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55b64bf29f60 <col:10, col:44>
|   |   `-TextComment 0x55b64bf29f30 <col:10, col:44> Text=" initialize list to its empty state"
|   |-ParagraphComment 0x55b64bf29fb0 <line:187:3>
|   | `-TextComment 0x55b64bf29f80 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf29fd0 <col:4, col:37> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2a060 <col:15, col:37>
|   |   `-TextComment 0x55b64bf2a030 <col:15, col:37> Text=" the doubly-linked list"
|   |-ParagraphComment 0x55b64bf2a0b0 <line:189:3>
|   | `-TextComment 0x55b64bf2a080 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf2a0d0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf2a130 <col:11, col:14>
|       `-TextComment 0x55b64bf2a100 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bdece10 <line:208:1, line:212:1> line:208:20 used sys_dnode_init 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55b64bdecd48 <col:35, col:48> col:48 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55b64bded1f8 <line:209:1, line:212:1>
| | |-BinaryOperator 0x55b64bded018 <line:210:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| | | |-MemberExpr 0x55b64bdecf48 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:210:2, col:8> 'struct _dnode *' lvalue .next 0x55b64bdb32f0
| | | | `-MemberExpr 0x55b64bdecef8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| | | |   `-ImplicitCastExpr 0x55b64bdecee0 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55b64bdeceb8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdecd48 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55b64bded000 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| | |   `-ParenExpr 0x55b64bdecfe0 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x55b64bdecfb8 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x55b64bdecf80 <col:23> 'int' 0
| | `-BinaryOperator 0x55b64bded1a0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| |   |-MemberExpr 0x55b64bded0d0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, col:8> 'struct _dnode *' lvalue .prev 0x55b64bdb35b8
| |   | `-MemberExpr 0x55b64bded080 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| |   |   `-ImplicitCastExpr 0x55b64bded068 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55b64bded040 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdecd48 'node' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x55b64bded188 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     `-ParenExpr 0x55b64bded168 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x55b64bded140 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x55b64bded108 <col:23> 'int' 0
| `-FullComment 0x55b64bf2a4c0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:201:3, line:205:14>
|   |-ParagraphComment 0x55b64bf2a220 <line:201:3>
|   | `-TextComment 0x55b64bf2a1f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf2a240 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x55b64bf2a2a0 <col:10, col:57>
|   |   `-TextComment 0x55b64bf2a270 <col:10, col:57> Text=" initialize node to its state when not in a list"
|   |-ParagraphComment 0x55b64bf2a2f0 <line:203:3>
|   | `-TextComment 0x55b64bf2a2c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2a310 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2a3a0 <col:15, col:23>
|   |   `-TextComment 0x55b64bf2a370 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x55b64bf2a3f0 <line:205:3>
|   | `-TextComment 0x55b64bf2a3c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf2a410 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf2a470 <col:11, col:14>
|       `-TextComment 0x55b64bf2a440 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bded390 <line:222:1, line:225:1> line:222:20 sys_dnode_is_linked 'bool (const sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55b64bded288 <col:40, col:59> col:59 used node 'const sys_dnode_t *'
| |-CompoundStmt 0x55b64bded638 <line:223:1, line:225:1>
| | `-ReturnStmt 0x55b64bded5f0 <line:224:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ImplicitCastExpr 0x55b64bded5d8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55b64bded5b0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       |-ImplicitCastExpr 0x55b64bded580 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x55b64bded4c8 <col:9, col:15> 'struct _dnode *const' lvalue .next 0x55b64bdb32f0
| |       |   `-MemberExpr 0x55b64bded478 <col:9, col:15> 'const union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| |       |     `-ImplicitCastExpr 0x55b64bded460 <col:9> 'const sys_dnode_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x55b64bded438 <col:9> 'const sys_dnode_t *' lvalue ParmVar 0x55b64bded288 'node' 'const sys_dnode_t *'
| |       `-ImplicitCastExpr 0x55b64bded598 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <BitCast>
| |         `-ParenExpr 0x55b64bded560 <col:14, col:24> 'void *'
| |           `-CStyleCastExpr 0x55b64bded538 <col:15, col:23> 'void *' <NullToPointer>
| |             `-IntegerLiteral 0x55b64bded500 <col:23> 'int' 0
| `-FullComment 0x55b64bf2a800 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:215:3, line:219:65>
|   |-ParagraphComment 0x55b64bf2a560 <line:215:3>
|   | `-TextComment 0x55b64bf2a530 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf2a580 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf2a5e0 <col:10, col:49>
|   |   `-TextComment 0x55b64bf2a5b0 <col:10, col:49> Text=" check if a node is a member of any list"
|   |-ParagraphComment 0x55b64bf2a630 <line:217:3>
|   | `-TextComment 0x55b64bf2a600 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2a650 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2a6e0 <col:15, col:23>
|   |   `-TextComment 0x55b64bf2a6b0 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x55b64bf2a730 <line:219:3>
|   | `-TextComment 0x55b64bf2a700 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf2a750 <col:4, col:65> Name="return"
|     `-ParagraphComment 0x55b64bf2a7b0 <col:11, col:65>
|       `-TextComment 0x55b64bf2a780 <col:11, col:65> Text=" true if node is linked into a list, false if it is not"
|-FunctionDecl 0x55b64bdee9c0 <line:236:1, line:239:1> line:236:20 sys_dlist_is_head 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55b64bded660 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55b64bded6d0 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55b64bdeec18 <line:237:1, line:239:1>
| | `-ReturnStmt 0x55b64bdeebd0 <line:238:2, col:23>
| |   `-ImplicitCastExpr 0x55b64bdeebb8 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55b64bdeeb90 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x55b64bdeeb60 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x55b64bdeeb00 <col:9, col:15> 'struct _dnode *' lvalue .head 0x55b64bdb3280
| |       |   `-MemberExpr 0x55b64bdeeab0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| |       |     `-ImplicitCastExpr 0x55b64bdeea98 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x55b64bdeea70 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x55b64bded660 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x55b64bdeeb78 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55b64bdeeb38 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x55b64bded6d0 'node' 'sys_dnode_t *'
| `-FullComment 0x55b64bf2ac20 <line:228:3, line:233:52>
|   |-ParagraphComment 0x55b64bf2a8a0 <line:228:3>
|   | `-TextComment 0x55b64bf2a870 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf2a8c0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55b64bf2a920 <col:10, col:44>
|   |   `-TextComment 0x55b64bf2a8f0 <col:10, col:44> Text=" check if a node is the list's head"
|   |-ParagraphComment 0x55b64bf2a970 <line:230:3>
|   | `-TextComment 0x55b64bf2a940 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2a990 <col:4, line:231:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2aa40 <line:230:15, line:231:3>
|   |   |-TextComment 0x55b64bf2a9f0 <line:230:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55b64bf2aa10 <line:231:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2aa60 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf2aaf0 <col:15, col:32>
|   |   `-TextComment 0x55b64bf2aac0 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x55b64bf2ab40 <line:233:3>
|   | `-TextComment 0x55b64bf2ab10 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf2ab60 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x55b64bf2abc0 <col:11, col:52>
|       `-TextComment 0x55b64bf2ab90 <col:11, col:52> Text=" true if node is the head, false otherwise"
|-FunctionDecl 0x55b64bdeed40 <line:250:1, line:253:1> line:250:20 sys_dlist_is_tail 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55b64bdeec40 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55b64bdeecb0 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55b64bdeef98 <line:251:1, line:253:1>
| | `-ReturnStmt 0x55b64bdeef50 <line:252:2, col:23>
| |   `-ImplicitCastExpr 0x55b64bdeef38 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55b64bdeef10 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x55b64bdeeee0 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x55b64bdeee80 <col:9, col:15> 'struct _dnode *' lvalue .tail 0x55b64bdb3548
| |       |   `-MemberExpr 0x55b64bdeee30 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| |       |     `-ImplicitCastExpr 0x55b64bdeee18 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x55b64bdeedf0 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdeec40 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x55b64bdeeef8 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55b64bdeeeb8 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdeecb0 'node' 'sys_dnode_t *'
| `-FullComment 0x55b64bf2b040 <line:242:3, line:247:52>
|   |-ParagraphComment 0x55b64bf2acc0 <line:242:3>
|   | `-TextComment 0x55b64bf2ac90 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf2ace0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55b64bf2ad40 <col:10, col:44>
|   |   `-TextComment 0x55b64bf2ad10 <col:10, col:44> Text=" check if a node is the list's tail"
|   |-ParagraphComment 0x55b64bf2ad90 <line:244:3>
|   | `-TextComment 0x55b64bf2ad60 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2adb0 <col:4, line:245:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2ae60 <line:244:15, line:245:3>
|   |   |-TextComment 0x55b64bf2ae10 <line:244:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55b64bf2ae30 <line:245:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2ae80 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf2af10 <col:15, col:32>
|   |   `-TextComment 0x55b64bf2aee0 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x55b64bf2af60 <line:247:3>
|   | `-TextComment 0x55b64bf2af30 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf2af80 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x55b64bf2afe0 <col:11, col:52>
|       `-TextComment 0x55b64bf2afb0 <col:11, col:52> Text=" true if node is the tail, false otherwise"
|-FunctionDecl 0x55b64bdef0c0 <line:263:1, line:266:1> line:263:20 used sys_dlist_is_empty 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55b64bdeefc0 <col:39, col:52> col:52 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55b64bdef308 <line:264:1, line:266:1>
| | `-ReturnStmt 0x55b64bdef2c8 <line:265:2, col:23>
| |   `-ImplicitCastExpr 0x55b64bdef2b0 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55b64bdef288 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x55b64bdef258 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x55b64bdef1f8 <col:9, col:15> 'struct _dnode *' lvalue .head 0x55b64bdb3280
| |       |   `-MemberExpr 0x55b64bdef1a8 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| |       |     `-ImplicitCastExpr 0x55b64bdef190 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x55b64bdef168 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdeefc0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x55b64bdef270 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55b64bdef230 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdeefc0 'list' 'sys_dlist_t *'
| `-FullComment 0x55b64bf2d3d0 <line:256:3, line:260:41>
|   |-ParagraphComment 0x55b64bf2b0e0 <line:256:3>
|   | `-TextComment 0x55b64bf2b0b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf2b100 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55b64bf2b160 <col:10, col:36>
|   |   `-TextComment 0x55b64bf2b130 <col:10, col:36> Text=" check if the list is empty"
|   |-ParagraphComment 0x55b64bf2b1b0 <line:258:3>
|   | `-TextComment 0x55b64bf2b180 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2b1d0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2b260 <col:15, col:51>
|   |   `-TextComment 0x55b64bf2b230 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55b64bf2b2b0 <line:260:3>
|   | `-TextComment 0x55b64bf2b280 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf2b2d0 <col:4, col:41> Name="return"
|     `-ParagraphComment 0x55b64bf2d380 <col:11, col:41>
|       `-TextComment 0x55b64bf2d350 <col:11, col:41> Text=" true if empty, false otherwise"
|-FunctionDecl 0x55b64bdef3b8 <line:278:1, line:281:1> line:278:20 sys_dlist_has_multiple_nodes 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55b64bdef330 <col:49, col:62> col:62 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55b64bdef6a8 <line:279:1, line:281:1>
| | `-ReturnStmt 0x55b64bdef660 <line:280:2, col:29>
| |   `-ImplicitCastExpr 0x55b64bdef648 <col:9, col:29> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55b64bdef620 <col:9, col:29> 'int' '!='
| |       |-ImplicitCastExpr 0x55b64bdef5f0 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x55b64bdef4f0 <col:9, col:15> 'struct _dnode *' lvalue .head 0x55b64bdb3280
| |       |   `-MemberExpr 0x55b64bdef4a0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| |       |     `-ImplicitCastExpr 0x55b64bdef488 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x55b64bdef460 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdef330 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x55b64bdef608 <col:23, col:29> 'struct _dnode *' <LValueToRValue>
| |         `-MemberExpr 0x55b64bdef5b8 <col:23, col:29> 'struct _dnode *' lvalue .tail 0x55b64bdb3548
| |           `-MemberExpr 0x55b64bdef568 <col:23, col:29> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| |             `-ImplicitCastExpr 0x55b64bdef550 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |               `-DeclRefExpr 0x55b64bdef528 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdef330 'list' 'sys_dlist_t *'
| `-FullComment 0x55b64bf2d770 <line:269:3, line:275:50>
|   |-ParagraphComment 0x55b64bf2d470 <line:269:3>
|   | `-TextComment 0x55b64bf2d440 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf2d490 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x55b64bf2d4f0 <col:10, col:45>
|   |   `-TextComment 0x55b64bf2d4c0 <col:10, col:45> Text=" check if more than one node present"
|   |-ParagraphComment 0x55b64bf2d540 <line:271:3, col:62>
|   | `-TextComment 0x55b64bf2d510 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf2d590 <line:273:3>
|   | `-TextComment 0x55b64bf2d560 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2d5b0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2d640 <col:15, col:51>
|   |   `-TextComment 0x55b64bf2d610 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55b64bf2d690 <line:275:3>
|   | `-TextComment 0x55b64bf2d660 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf2d6b0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x55b64bf2d710 <col:11, col:50>
|       `-TextComment 0x55b64bf2d6e0 <col:11, col:50> Text=" true if multiple nodes, false otherwise"
|-FunctionDecl 0x55b64bdef7d0 <line:291:1, line:294:1> line:291:28 used sys_dlist_peek_head 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55b64bdef6d0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55b64bdefba8 <line:292:1, line:294:1>
| | `-ReturnStmt 0x55b64bdefb60 <line:293:2, col:49>
| |   `-ConditionalOperator 0x55b64bdefb30 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x55b64bdefae8 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x55b64bdef940 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x55b64bdef928 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x55b64bdef878 <col:9> 'bool (sys_dlist_t *)' Function 0x55b64bdef0c0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x55b64bdef970 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x55b64bdef8a0 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdef6d0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x55b64bdefb18 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x55b64bdefa00 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x55b64bdef9d8 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x55b64bdef9a0 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x55b64bdefb00 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:293:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x55b64bdefab0 <col:43, col:49> 'struct _dnode *' lvalue .head 0x55b64bdb3280
| |         `-MemberExpr 0x55b64bdefa60 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| |           `-ImplicitCastExpr 0x55b64bdefa48 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x55b64bdefa20 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdef6d0 'list' 'sys_dlist_t *'
| `-FullComment 0x55b64bf2dab0 <line:284:3, line:288:63>
|   |-ParagraphComment 0x55b64bf2d810 <line:284:3>
|   | `-TextComment 0x55b64bf2d7e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf2d830 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55b64bf2d890 <col:10, col:54>
|   |   `-TextComment 0x55b64bf2d860 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x55b64bf2d8e0 <line:286:3>
|   | `-TextComment 0x55b64bf2d8b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2d900 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2d990 <col:15, col:51>
|   |   `-TextComment 0x55b64bf2d960 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55b64bf2d9e0 <line:288:3>
|   | `-TextComment 0x55b64bf2d9b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf2da00 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x55b64bf2da60 <col:11, col:63>
|       `-TextComment 0x55b64bf2da30 <col:11, col:63> Text=" a pointer to the head element, NULL if list is empty"
|-FunctionDecl 0x55b64bdefc58 <line:306:1, line:309:1> line:306:28 sys_dlist_peek_head_not_empty 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55b64bdefbd0 <col:58, col:71> col:71 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55b64bdefe28 <line:307:1, line:309:1>
| | `-ReturnStmt 0x55b64bdefde0 <line:308:2, col:15>
| |   `-ImplicitCastExpr 0x55b64bdefdc8 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |     `-MemberExpr 0x55b64bdefd90 <col:9, col:15> 'struct _dnode *' lvalue .head 0x55b64bdb3280
| |       `-MemberExpr 0x55b64bdefd40 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| |         `-ImplicitCastExpr 0x55b64bdefd28 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |           `-DeclRefExpr 0x55b64bdefd00 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdefbd0 'list' 'sys_dlist_t *'
| `-FullComment 0x55b64bf2de50 <line:297:3, line:303:40>
|   |-ParagraphComment 0x55b64bf2db50 <line:297:3>
|   | `-TextComment 0x55b64bf2db20 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf2db70 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55b64bf2dbd0 <col:10, col:54>
|   |   `-TextComment 0x55b64bf2dba0 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x55b64bf2dc20 <line:299:3, col:42>
|   | `-TextComment 0x55b64bf2dbf0 <col:3, col:42> Text=" The list must be known to be non-empty."
|   |-ParagraphComment 0x55b64bf2dc70 <line:301:3>
|   | `-TextComment 0x55b64bf2dc40 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2dc90 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2dd20 <col:15, col:51>
|   |   `-TextComment 0x55b64bf2dcf0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55b64bf2dd70 <line:303:3>
|   | `-TextComment 0x55b64bf2dd40 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf2dd90 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x55b64bf2ddf0 <col:11, col:40>
|       `-TextComment 0x55b64bf2ddc0 <col:11, col:40> Text=" a pointer to the head element"
|-FunctionDecl 0x55b64bdeffd0 <line:322:1, line:326:1> line:322:28 used sys_dlist_peek_next_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55b64bdefe50 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55b64bdefec0 <line:323:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55b64bdf03d8 <line:324:1, line:326:1>
| | `-ReturnStmt 0x55b64bdf0390 <line:325:2, col:45>
| |   `-ConditionalOperator 0x55b64bdf0360 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x55b64bdf01c8 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x55b64bdf01a0 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x55b64bdf0170 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x55b64bdf0080 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdefec0 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x55b64bdf0188 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x55b64bdf0138 <col:18, col:24> 'struct _dnode *' lvalue .tail 0x55b64bdb3548
| |     |       `-MemberExpr 0x55b64bdf00e8 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| |     |         `-ImplicitCastExpr 0x55b64bdf00d0 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x55b64bdf00a8 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdefe50 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x55b64bdf0348 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x55b64bdf0248 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x55b64bdf0220 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x55b64bdf01e8 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x55b64bdf0330 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:325:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x55b64bdf02f8 <col:39, col:45> 'struct _dnode *' lvalue .next 0x55b64bdb32f0
| |         `-MemberExpr 0x55b64bdf02a8 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| |           `-ImplicitCastExpr 0x55b64bdf0290 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x55b64bdf0268 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdefec0 'node' 'sys_dnode_t *'
| `-FullComment 0x55b64bf2e2c0 <line:312:3, line:319:78>
|   |-ParagraphComment 0x55b64bf2def0 <line:312:3>
|   | `-TextComment 0x55b64bf2dec0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf2df10 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x55b64bf2df70 <col:10, col:72>
|   |   `-TextComment 0x55b64bf2df40 <col:10, col:72> Text=" get a reference to the next item in the list, node is not NULL"
|   |-ParagraphComment 0x55b64bf2dfc0 <line:314:3, col:69>
|   | `-TextComment 0x55b64bf2df90 <col:3, col:69> Text=" Faster than sys_dlist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x55b64bf2e010 <line:316:3>
|   | `-TextComment 0x55b64bf2dfe0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2e030 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2e0e0 <line:316:15, line:317:3>
|   |   |-TextComment 0x55b64bf2e090 <line:316:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55b64bf2e0b0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2e100 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf2e190 <col:15, col:70>
|   |   `-TextComment 0x55b64bf2e160 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x55b64bf2e1e0 <line:319:3>
|   | `-TextComment 0x55b64bf2e1b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf2e200 <col:4, col:78> Name="return"
|     `-ParagraphComment 0x55b64bf2e260 <col:11, col:78>
|       `-TextComment 0x55b64bf2e230 <col:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|-FunctionDecl 0x55b64bdf0500 <line:338:1, line:342:1> line:338:28 used sys_dlist_peek_next 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55b64bdf0400 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55b64bdf0470 <line:339:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55b64bdf0938 <line:340:1, line:342:1>
| | `-ReturnStmt 0x55b64bdf08f0 <line:341:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x55b64bdf08c0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x55b64bdf06b0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, col:22> 'int'
| |     | `-BinaryOperator 0x55b64bdf0688 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x55b64bdf0658 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x55b64bdf05b0 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf0470 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x55b64bdf0670 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x55b64bdf0638 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x55b64bdf0610 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x55b64bdf05d8 <col:23> 'int' 0
| |     |-CallExpr 0x55b64bdf07c0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x55b64bdf07a8 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x55b64bdf06d0 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x55b64bdeffd0 'sys_dlist_peek_next_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x55b64bdf07f8 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x55b64bdf06f8 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf0400 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x55b64bdf0810 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x55b64bdf0720 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf0470 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x55b64bdf08a8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x55b64bdf0888 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x55b64bdf0860 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x55b64bdf0828 <col:23> 'int' 0
| `-FullComment 0x55b64bf2e700 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:329:3, line:335:68>
|   |-ParagraphComment 0x55b64bf2e360 <line:329:3>
|   | `-TextComment 0x55b64bf2e330 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf2e380 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55b64bf2e3e0 <col:10, col:54>
|   |   `-TextComment 0x55b64bf2e3b0 <col:10, col:54> Text=" get a reference to the next item in the list"
|   |-ParagraphComment 0x55b64bf2e430 <line:331:3>
|   | `-TextComment 0x55b64bf2e400 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2e450 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2e500 <line:331:15, line:332:3>
|   |   |-TextComment 0x55b64bf2e4b0 <line:331:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55b64bf2e4d0 <line:332:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2e520 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf2e5b0 <col:15, col:70>
|   |   `-TextComment 0x55b64bf2e580 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x55b64bf2e600 <line:334:3>
|   | `-TextComment 0x55b64bf2e5d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf2e620 <col:4, line:335:68> Name="return"
|     `-ParagraphComment 0x55b64bf2e6a0 <line:334:11, line:335:68>
|       |-TextComment 0x55b64bf2e650 <line:334:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|       `-TextComment 0x55b64bf2e670 <line:335:3, col:68> Text=" or NULL (when node comes from reading the head of an empty list)."
|-FunctionDecl 0x55b64bdf0ab0 <line:356:1, line:360:1> line:356:28 used sys_dlist_peek_prev_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55b64bdf09b0 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55b64bdf0a20 <line:357:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55b64bdf0eb8 <line:358:1, line:360:1>
| | `-ReturnStmt 0x55b64bdf0e70 <line:359:2, col:45>
| |   `-ConditionalOperator 0x55b64bdf0e40 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x55b64bdf0ca8 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x55b64bdf0c80 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x55b64bdf0c50 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x55b64bdf0b60 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf0a20 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x55b64bdf0c68 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x55b64bdf0c18 <col:18, col:24> 'struct _dnode *' lvalue .head 0x55b64bdb3280
| |     |       `-MemberExpr 0x55b64bdf0bc8 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| |     |         `-ImplicitCastExpr 0x55b64bdf0bb0 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x55b64bdf0b88 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf09b0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x55b64bdf0e28 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x55b64bdf0d28 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x55b64bdf0d00 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x55b64bdf0cc8 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x55b64bdf0e10 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:359:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x55b64bdf0dd8 <col:39, col:45> 'struct _dnode *' lvalue .prev 0x55b64bdb35b8
| |         `-MemberExpr 0x55b64bdf0d88 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| |           `-ImplicitCastExpr 0x55b64bdf0d70 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x55b64bdf0d48 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf0a20 'node' 'sys_dnode_t *'
| `-FullComment 0x55b64bf2eb90 <line:345:3, line:353:10>
|   |-ParagraphComment 0x55b64bf2e7a0 <line:345:3>
|   | `-TextComment 0x55b64bf2e770 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf2e7c0 <col:4, col:76> Name="brief"
|   | `-ParagraphComment 0x55b64bf2e820 <col:10, col:76>
|   |   `-TextComment 0x55b64bf2e7f0 <col:10, col:76> Text=" get a reference to the previous item in the list, node is not NULL"
|   |-ParagraphComment 0x55b64bf2e870 <line:347:3, col:69>
|   | `-TextComment 0x55b64bf2e840 <col:3, col:69> Text=" Faster than sys_dlist_peek_prev() if node is known not to be NULL."
|   |-ParagraphComment 0x55b64bf2e8c0 <line:349:3>
|   | `-TextComment 0x55b64bf2e890 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2e8e0 <col:4, line:350:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2e990 <line:349:15, line:350:3>
|   |   |-TextComment 0x55b64bf2e940 <line:349:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55b64bf2e960 <line:350:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2e9b0 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf2ea40 <col:15, col:74>
|   |   `-TextComment 0x55b64bf2ea10 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x55b64bf2ea90 <line:352:3>
|   | `-TextComment 0x55b64bf2ea60 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf2eab0 <col:4, line:353:10> Name="return"
|     `-ParagraphComment 0x55b64bf2eb30 <line:352:11, line:353:10>
|       |-TextComment 0x55b64bf2eae0 <line:352:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       `-TextComment 0x55b64bf2eb00 <line:353:3, col:10> Text="	   tail"
|-FunctionDecl 0x55b64bdf0fe0 <line:373:1, line:377:1> line:373:28 sys_dlist_peek_prev 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55b64bdf0ee0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55b64bdf0f50 <line:374:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55b64bdf13b8 <line:375:1, line:377:1>
| | `-ReturnStmt 0x55b64bdf1370 <line:376:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x55b64bdf1340 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x55b64bdf1190 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, col:22> 'int'
| |     | `-BinaryOperator 0x55b64bdf1168 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x55b64bdf1138 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x55b64bdf1090 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf0f50 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x55b64bdf1150 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x55b64bdf1118 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x55b64bdf10f0 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x55b64bdf10b8 <col:23> 'int' 0
| |     |-CallExpr 0x55b64bdf1240 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x55b64bdf1228 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x55b64bdf11b0 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x55b64bdf0ab0 'sys_dlist_peek_prev_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x55b64bdf1278 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x55b64bdf11d8 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf0ee0 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x55b64bdf1290 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x55b64bdf1200 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf0f50 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x55b64bdf1328 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x55b64bdf1308 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x55b64bdf12e0 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x55b64bdf12a8 <col:23> 'int' 0
| `-FullComment 0x55b64bf2f000 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:363:3, line:370:13>
|   |-ParagraphComment 0x55b64bf2ec30 <line:363:3>
|   | `-TextComment 0x55b64bf2ec00 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf2ec50 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x55b64bf2ecb0 <col:10, col:58>
|   |   `-TextComment 0x55b64bf2ec80 <col:10, col:58> Text=" get a reference to the previous item in the list"
|   |-ParagraphComment 0x55b64bf2ed00 <line:365:3>
|   | `-TextComment 0x55b64bf2ecd0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2ed20 <col:4, line:366:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2edd0 <line:365:15, line:366:3>
|   |   |-TextComment 0x55b64bf2ed80 <line:365:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55b64bf2eda0 <line:366:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2edf0 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf2ee80 <col:15, col:74>
|   |   `-TextComment 0x55b64bf2ee50 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x55b64bf2eed0 <line:368:3>
|   | `-TextComment 0x55b64bf2eea0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf2eef0 <col:4, line:370:13> Name="return"
|     `-ParagraphComment 0x55b64bf2efa0 <line:368:11, line:370:13>
|       |-TextComment 0x55b64bf2ef20 <line:368:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       |-TextComment 0x55b64bf2ef40 <line:369:3, col:70> Text=" 	   tail or NULL (when node comes from reading the head of an empty"
|       `-TextComment 0x55b64bf2ef60 <line:370:3, col:13> Text=" 	   list)."
|-FunctionDecl 0x55b64bdf1468 <line:387:1, line:390:1> line:387:28 sys_dlist_peek_tail 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55b64bdf13e0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55b64bdf17c8 <line:388:1, line:390:1>
| | `-ReturnStmt 0x55b64bdf1780 <line:389:2, col:49>
| |   `-ConditionalOperator 0x55b64bdf1750 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x55b64bdf1708 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x55b64bdf1578 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x55b64bdf1560 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x55b64bdf1510 <col:9> 'bool (sys_dlist_t *)' Function 0x55b64bdef0c0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x55b64bdf15a8 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x55b64bdf1538 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf13e0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x55b64bdf1738 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x55b64bdf1620 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x55b64bdf15f8 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x55b64bdf15c0 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x55b64bdf1720 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:389:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x55b64bdf16d0 <col:43, col:49> 'struct _dnode *' lvalue .tail 0x55b64bdb3548
| |         `-MemberExpr 0x55b64bdf1680 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| |           `-ImplicitCastExpr 0x55b64bdf1668 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x55b64bdf1640 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf13e0 'list' 'sys_dlist_t *'
| `-FullComment 0x55b64bf2f360 <line:380:3, line:384:63>
|   |-ParagraphComment 0x55b64bf2f0a0 <line:380:3>
|   | `-TextComment 0x55b64bf2f070 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf2f0c0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55b64bf2f120 <col:10, col:54>
|   |   `-TextComment 0x55b64bf2f0f0 <col:10, col:54> Text=" get a reference to the tail item in the list"
|   |-ParagraphComment 0x55b64bf2f170 <line:382:3>
|   | `-TextComment 0x55b64bf2f140 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2f190 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2f220 <col:15, col:51>
|   |   `-TextComment 0x55b64bf2f1f0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55b64bf2f270 <line:384:3>
|   | `-TextComment 0x55b64bf2f240 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf2f290 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x55b64bf2f2f0 <col:11, col:63>
|       `-TextComment 0x55b64bf2f2c0 <col:11, col:63> Text=" a pointer to the tail element, NULL if list is empty"
|-FunctionDecl 0x55b64bdf19c0 <line:403:1, line:410:1> line:403:20 used sys_dlist_append 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55b64bdf17f0 <col:37, col:50> col:50 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55b64bdf1860 <col:56, col:69> col:69 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55b64bdf2098 <line:404:1, line:410:1>
| | |-BinaryOperator 0x55b64bdf1b78 <line:405:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x55b64bdf1b00 <col:2, col:8> 'struct _dnode *' lvalue .next 0x55b64bdb32f0
| | | | `-MemberExpr 0x55b64bdf1ab0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| | | |   `-ImplicitCastExpr 0x55b64bdf1a98 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55b64bdf1a70 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf1860 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55b64bdf1b60 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55b64bdf1b38 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf17f0 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x55b64bdf1d48 <line:406:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x55b64bdf1c30 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x55b64bdb35b8
| | | | `-MemberExpr 0x55b64bdf1be0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| | | |   `-ImplicitCastExpr 0x55b64bdf1bc8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55b64bdf1ba0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf1860 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55b64bdf1d30 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55b64bdf1cf8 <col:15, col:21> 'struct _dnode *' lvalue .tail 0x55b64bdb3548
| | |     `-MemberExpr 0x55b64bdf1ca8 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| | |       `-ImplicitCastExpr 0x55b64bdf1c90 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55b64bdf1c68 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf17f0 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x55b64bdf1f18 <line:408:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x55b64bdf1ea0 <col:2, col:14> 'struct _dnode *' lvalue .next 0x55b64bdb32f0
| | | | `-MemberExpr 0x55b64bdf1e50 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| | | |   `-ImplicitCastExpr 0x55b64bdf1e38 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55b64bdf1e00 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x55b64bdb3548
| | | |       `-MemberExpr 0x55b64bdf1db0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| | | |         `-ImplicitCastExpr 0x55b64bdf1d98 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55b64bdf1d70 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf17f0 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x55b64bdf1f00 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55b64bdf1ed8 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf1860 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x55b64bdf2048 <line:409:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x55b64bdf1fd0 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x55b64bdb3548
| |   | `-MemberExpr 0x55b64bdf1f80 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| |   |   `-ImplicitCastExpr 0x55b64bdf1f68 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55b64bdf1f40 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf17f0 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x55b64bdf2030 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b64bdf2008 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf1860 'node' 'sys_dnode_t *'
| `-FullComment 0x55b64bf2f7d0 <line:393:3, line:400:14>
|   |-ParagraphComment 0x55b64bf2f400 <line:393:3>
|   | `-TextComment 0x55b64bf2f3d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf2f420 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55b64bf2f480 <col:10, col:34>
|   |   `-TextComment 0x55b64bf2f450 <col:10, col:34> Text=" add node to tail of list"
|   |-ParagraphComment 0x55b64bf2f4d0 <line:395:3, col:62>
|   | `-TextComment 0x55b64bf2f4a0 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf2f520 <line:397:3>
|   | `-TextComment 0x55b64bf2f4f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2f540 <col:4, line:398:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2f5f0 <line:397:15, line:398:3>
|   |   |-TextComment 0x55b64bf2f5a0 <line:397:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55b64bf2f5c0 <line:398:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2f610 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf2f6a0 <col:15, col:36>
|   |   `-TextComment 0x55b64bf2f670 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x55b64bf2f6f0 <line:400:3>
|   | `-TextComment 0x55b64bf2f6c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf2f710 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf2f770 <col:11, col:14>
|       `-TextComment 0x55b64bf2f740 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bdf21d8 <line:423:1, line:430:1> line:423:20 sys_dlist_prepend 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55b64bdf20d8 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55b64bdf2148 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55b64bdf28b8 <line:424:1, line:430:1>
| | |-BinaryOperator 0x55b64bdf2430 <line:425:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x55b64bdf2318 <col:2, col:8> 'struct _dnode *' lvalue .next 0x55b64bdb32f0
| | | | `-MemberExpr 0x55b64bdf22c8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| | | |   `-ImplicitCastExpr 0x55b64bdf22b0 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55b64bdf2288 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf2148 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55b64bdf2418 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55b64bdf23e0 <col:15, col:21> 'struct _dnode *' lvalue .head 0x55b64bdb3280
| | |     `-MemberExpr 0x55b64bdf2390 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| | |       `-ImplicitCastExpr 0x55b64bdf2378 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55b64bdf2350 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf20d8 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x55b64bdf2560 <line:426:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x55b64bdf24e8 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x55b64bdb35b8
| | | | `-MemberExpr 0x55b64bdf2498 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| | | |   `-ImplicitCastExpr 0x55b64bdf2480 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55b64bdf2458 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf2148 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55b64bdf2548 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55b64bdf2520 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf20d8 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x55b64bdf2730 <line:428:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x55b64bdf26b8 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x55b64bdb35b8
| | | | `-MemberExpr 0x55b64bdf2668 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| | | |   `-ImplicitCastExpr 0x55b64bdf2650 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55b64bdf2618 <col:2, col:8> 'struct _dnode *' lvalue .head 0x55b64bdb3280
| | | |       `-MemberExpr 0x55b64bdf25c8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| | | |         `-ImplicitCastExpr 0x55b64bdf25b0 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55b64bdf2588 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf20d8 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x55b64bdf2718 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55b64bdf26f0 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf2148 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x55b64bdf2860 <line:429:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x55b64bdf27e8 <col:2, col:8> 'struct _dnode *' lvalue .head 0x55b64bdb3280
| |   | `-MemberExpr 0x55b64bdf2798 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| |   |   `-ImplicitCastExpr 0x55b64bdf2780 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55b64bdf2758 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf20d8 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x55b64bdf2848 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b64bdf2820 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf2148 'node' 'sys_dnode_t *'
| `-FullComment 0x55b64bf2fc40 <line:413:3, line:420:14>
|   |-ParagraphComment 0x55b64bf2f870 <line:413:3>
|   | `-TextComment 0x55b64bf2f840 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf2f890 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55b64bf2f8f0 <col:10, col:34>
|   |   `-TextComment 0x55b64bf2f8c0 <col:10, col:34> Text=" add node to head of list"
|   |-ParagraphComment 0x55b64bf2f940 <line:415:3, col:62>
|   | `-TextComment 0x55b64bf2f910 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf2f990 <line:417:3>
|   | `-TextComment 0x55b64bf2f960 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2f9b0 <col:4, line:418:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2fa60 <line:417:15, line:418:3>
|   |   |-TextComment 0x55b64bf2fa10 <line:417:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55b64bf2fa30 <line:418:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2fa80 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf2fb10 <col:15, col:36>
|   |   `-TextComment 0x55b64bf2fae0 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x55b64bf2fb60 <line:420:3>
|   | `-TextComment 0x55b64bf2fb30 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf2fb80 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf2fbe0 <col:11, col:14>
|       `-TextComment 0x55b64bf2fbb0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bdf32b0 <line:440:1, line:446:1> line:440:20 used sys_dlist_insert 'void (sys_dnode_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55b64bdf28f8 <col:37, col:50> col:50 used successor 'sys_dnode_t *'
| |-ParmVarDecl 0x55b64bdf31e0 <col:61, col:74> col:74 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55b64bdf3988 <line:441:1, line:446:1>
| | |-BinaryOperator 0x55b64bdf3508 <line:442:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x55b64bdf33f0 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x55b64bdb35b8
| | | | `-MemberExpr 0x55b64bdf33a0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| | | |   `-ImplicitCastExpr 0x55b64bdf3388 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55b64bdf3360 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf31e0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55b64bdf34f0 <col:15, col:26> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55b64bdf34b8 <col:15, col:26> 'struct _dnode *' lvalue .prev 0x55b64bdb35b8
| | |     `-MemberExpr 0x55b64bdf3468 <col:15, col:26> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| | |       `-ImplicitCastExpr 0x55b64bdf3450 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55b64bdf3428 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf28f8 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x55b64bdf3638 <line:443:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x55b64bdf35c0 <col:2, col:8> 'struct _dnode *' lvalue .next 0x55b64bdb32f0
| | | | `-MemberExpr 0x55b64bdf3570 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| | | |   `-ImplicitCastExpr 0x55b64bdf3558 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55b64bdf3530 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf31e0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55b64bdf3620 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55b64bdf35f8 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf28f8 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x55b64bdf3808 <line:444:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x55b64bdf3790 <col:2, col:19> 'struct _dnode *' lvalue .next 0x55b64bdb32f0
| | | | `-MemberExpr 0x55b64bdf3740 <col:2, col:19> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| | | |   `-ImplicitCastExpr 0x55b64bdf3728 <col:2, col:13> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55b64bdf36f0 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x55b64bdb35b8
| | | |       `-MemberExpr 0x55b64bdf36a0 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| | | |         `-ImplicitCastExpr 0x55b64bdf3688 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55b64bdf3660 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf28f8 'successor' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55b64bdf37f0 <col:26> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55b64bdf37c8 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf31e0 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x55b64bdf3938 <line:445:2, col:20> 'struct _dnode *' '='
| |   |-MemberExpr 0x55b64bdf38c0 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x55b64bdb35b8
| |   | `-MemberExpr 0x55b64bdf3870 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| |   |   `-ImplicitCastExpr 0x55b64bdf3858 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55b64bdf3830 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf28f8 'successor' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x55b64bdf3920 <col:20> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b64bdf38f8 <col:20> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf31e0 'node' 'sys_dnode_t *'
| `-FullComment 0x55b64bf2ffd0 <line:433:3, line:438:36>
|   |-ParagraphComment 0x55b64bf2fce0 <line:433:3>
|   | `-TextComment 0x55b64bf2fcb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf2fd00 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x55b64bf2fd60 <col:10, col:35>
|   |   `-TextComment 0x55b64bf2fd30 <col:10, col:35> Text=" Insert a node into a list"
|   |-ParagraphComment 0x55b64bf2fdb0 <line:435:3, col:52>
|   | `-TextComment 0x55b64bf2fd80 <col:3, col:52> Text=" Insert a node before a specified node in a dlist."
|   |-ParagraphComment 0x55b64bf2fe00 <line:437:3>
|   | `-TextComment 0x55b64bf2fdd0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf2fe20 <col:4, line:438:3> [in] implicitly Param="successor" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf2fed0 <line:437:20, line:438:3>
|   |   |-TextComment 0x55b64bf2fe80 <line:437:20, col:69> Text=" the position before which "node" will be inserted"
|   |   `-TextComment 0x55b64bf2fea0 <line:438:3> Text=" "
|   `-ParamCommandComment 0x55b64bf2fef0 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55b64bf2ff80 <col:15, col:36>
|       `-TextComment 0x55b64bf2ff50 <col:15, col:36> Text=" the element to insert"
|-FunctionDecl 0x55b64bdf3e90 <line:465:1, line:482:1> line:465:20 sys_dlist_insert_at 'void (sys_dlist_t *, sys_dnode_t *, int (*)(sys_dnode_t *, void *), void *)' static inline
| |-ParmVarDecl 0x55b64bdf39c8 <col:40, col:53> col:53 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55b64bdf3a38 <col:59, col:72> col:72 used node 'sys_dnode_t *'
| |-ParmVarDecl 0x55b64bdf3cd0 <line:466:2, col:43> col:8 used cond 'int (*)(sys_dnode_t *, void *)'
| |-ParmVarDecl 0x55b64bdf3d48 <col:46, col:52> col:52 used data 'void *'
| |-CompoundStmt 0x55b64bdf9b58 <line:467:1, line:482:1>
| | `-IfStmt 0x55b64bdf9af0 <line:468:2, line:481:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-CallExpr 0x55b64bdf3fb8 <line:468:6, col:29> 'bool'
| |   | |-ImplicitCastExpr 0x55b64bdf3fa0 <col:6> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x55b64bdf3f50 <col:6> 'bool (sys_dlist_t *)' Function 0x55b64bdef0c0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |   | `-ImplicitCastExpr 0x55b64bdf3fe8 <col:25> 'sys_dlist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55b64bdf3f78 <col:25> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf39c8 'list' 'sys_dlist_t *'
| |   |-CompoundStmt 0x55b64bdf4158 <col:32, line:470:2>
| |   | `-CallExpr 0x55b64bdf40f0 <line:469:3, col:30> 'void'
| |   |   |-ImplicitCastExpr 0x55b64bdf40d8 <col:3> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x55b64bdf4000 <col:3> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x55b64bdf19c0 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |   |   |-ImplicitCastExpr 0x55b64bdf4128 <col:20> 'sys_dlist_t *' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x55b64bdf4028 <col:20> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf39c8 'list' 'sys_dlist_t *'
| |   |   `-ImplicitCastExpr 0x55b64bdf4140 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55b64bdf4050 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf3a38 'node' 'sys_dnode_t *'
| |   `-CompoundStmt 0x55b64bdf9ac8 <line:470:9, line:481:2>
| |     |-DeclStmt 0x55b64bdf9308 <line:471:3, col:47>
| |     | `-VarDecl 0x55b64bdf4180 <col:3, col:46> col:16 used pos 'sys_dnode_t *' cinit
| |     |   `-CallExpr 0x55b64bdf92c0 <col:22, col:46> 'sys_dnode_t *'
| |     |     |-ImplicitCastExpr 0x55b64bdf92a8 <col:22> 'sys_dnode_t *(*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x55b64bdf9200 <col:22> 'sys_dnode_t *(sys_dlist_t *)' Function 0x55b64bdef7d0 'sys_dlist_peek_head' 'sys_dnode_t *(sys_dlist_t *)'
| |     |     `-ImplicitCastExpr 0x55b64bdf92f0 <col:42> 'sys_dlist_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x55b64bdf9228 <col:42> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf39c8 'list' 'sys_dlist_t *'
| |     |-WhileStmt 0x55b64bdf9728 <line:473:3, line:475:3>
| |     | |-<<<NULL>>>
| |     | |-BinaryOperator 0x55b64bdf95a0 <line:473:10, col:48> 'int' '&&'
| |     | | |-ParenExpr 0x55b64bdf9420 <col:10, col:22> 'int'
| |     | | | `-BinaryOperator 0x55b64bdf93f8 <col:11, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     | | |   |-ImplicitCastExpr 0x55b64bdf93c8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:11> 'sys_dnode_t *' <LValueToRValue>
| |     | | |   | `-DeclRefExpr 0x55b64bdf9320 <col:11> 'sys_dnode_t *' lvalue Var 0x55b64bdf4180 'pos' 'sys_dnode_t *'
| |     | | |   `-ImplicitCastExpr 0x55b64bdf93e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     | | |     `-ParenExpr 0x55b64bdf93a8 <col:14, col:24> 'void *'
| |     | | |       `-CStyleCastExpr 0x55b64bdf9380 <col:15, col:23> 'void *' <NullToPointer>
| |     | | |         `-IntegerLiteral 0x55b64bdf9348 <col:23> 'int' 0
| |     | | `-ParenExpr 0x55b64bdf9580 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:27, col:48> 'int'
| |     | |   `-BinaryOperator 0x55b64bdf9558 <col:28, col:47> 'int' '=='
| |     | |     |-CallExpr 0x55b64bdf94d0 <col:28, col:42> 'int'
| |     | |     | |-ImplicitCastExpr 0x55b64bdf94b8 <col:28> 'int (*)(sys_dnode_t *, void *)' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x55b64bdf9440 <col:28> 'int (*)(sys_dnode_t *, void *)' lvalue ParmVar 0x55b64bdf3cd0 'cond' 'int (*)(sys_dnode_t *, void *)'
| |     | |     | |-ImplicitCastExpr 0x55b64bdf9508 <col:33> 'sys_dnode_t *' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x55b64bdf9468 <col:33> 'sys_dnode_t *' lvalue Var 0x55b64bdf4180 'pos' 'sys_dnode_t *'
| |     | |     | `-ImplicitCastExpr 0x55b64bdf9520 <col:38> 'void *' <LValueToRValue>
| |     | |     |   `-DeclRefExpr 0x55b64bdf9490 <col:38> 'void *' lvalue ParmVar 0x55b64bdf3d48 'data' 'void *'
| |     | |     `-IntegerLiteral 0x55b64bdf9538 <col:47> 'int' 0
| |     | `-CompoundStmt 0x55b64bdf9710 <col:51, line:475:3>
| |     |   `-BinaryOperator 0x55b64bdf96e8 <line:474:4, col:39> 'sys_dnode_t *' '='
| |     |     |-DeclRefExpr 0x55b64bdf95c8 <col:4> 'sys_dnode_t *' lvalue Var 0x55b64bdf4180 'pos' 'sys_dnode_t *'
| |     |     `-CallExpr 0x55b64bdf9680 <col:10, col:39> 'sys_dnode_t *'
| |     |       |-ImplicitCastExpr 0x55b64bdf9668 <col:10> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     |       | `-DeclRefExpr 0x55b64bdf95f0 <col:10> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x55b64bdf0500 'sys_dlist_peek_next' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     |       |-ImplicitCastExpr 0x55b64bdf96b8 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |     |       | `-DeclRefExpr 0x55b64bdf9618 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf39c8 'list' 'sys_dlist_t *'
| |     |       `-ImplicitCastExpr 0x55b64bdf96d0 <col:36> 'sys_dnode_t *' <LValueToRValue>
| |     |         `-DeclRefExpr 0x55b64bdf9640 <col:36> 'sys_dnode_t *' lvalue Var 0x55b64bdf4180 'pos' 'sys_dnode_t *'
| |     `-IfStmt 0x55b64bdf9a90 <line:476:3, line:480:3>
| |       |-<<<NULL>>>
| |       |-<<<NULL>>>
| |       |-BinaryOperator 0x55b64bdf9820 <line:476:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       | |-ImplicitCastExpr 0x55b64bdf97f0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:7> 'sys_dnode_t *' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55b64bdf9748 <col:7> 'sys_dnode_t *' lvalue Var 0x55b64bdf4180 'pos' 'sys_dnode_t *'
| |       | `-ImplicitCastExpr 0x55b64bdf9808 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |       |   `-ParenExpr 0x55b64bdf97d0 <col:14, col:24> 'void *'
| |       |     `-CStyleCastExpr 0x55b64bdf97a8 <col:15, col:23> 'void *' <NullToPointer>
| |       |       `-IntegerLiteral 0x55b64bdf9770 <col:23> 'int' 0
| |       |-CompoundStmt 0x55b64bdf9968 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:20, line:478:3>
| |       | `-CallExpr 0x55b64bdf9900 <line:477:4, col:30> 'void'
| |       |   |-ImplicitCastExpr 0x55b64bdf98e8 <col:4> 'void (*)(sys_dnode_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |       |   | `-DeclRefExpr 0x55b64bdf9848 <col:4> 'void (sys_dnode_t *, sys_dnode_t *)' Function 0x55b64bdf32b0 'sys_dlist_insert' 'void (sys_dnode_t *, sys_dnode_t *)'
| |       |   |-ImplicitCastExpr 0x55b64bdf9938 <col:21> 'sys_dnode_t *' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x55b64bdf9870 <col:21> 'sys_dnode_t *' lvalue Var 0x55b64bdf4180 'pos' 'sys_dnode_t *'
| |       |   `-ImplicitCastExpr 0x55b64bdf9950 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x55b64bdf9898 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf3a38 'node' 'sys_dnode_t *'
| |       `-CompoundStmt 0x55b64bdf9a78 <line:478:10, line:480:3>
| |         `-CallExpr 0x55b64bdf9a10 <line:479:4, col:31> 'void'
| |           |-ImplicitCastExpr 0x55b64bdf99f8 <col:4> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x55b64bdf9980 <col:4> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x55b64bdf19c0 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |           |-ImplicitCastExpr 0x55b64bdf9a48 <col:21> 'sys_dlist_t *' <LValueToRValue>
| |           | `-DeclRefExpr 0x55b64bdf99a8 <col:21> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdf39c8 'list' 'sys_dlist_t *'
| |           `-ImplicitCastExpr 0x55b64bdf9a60 <col:27> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x55b64bdf99d0 <col:27> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf3a38 'node' 'sys_dnode_t *'
| `-FullComment 0x55b64bf30690 <line:449:3, line:462:14>
|   |-ParagraphComment 0x55b64bf30070 <line:449:3>
|   | `-TextComment 0x55b64bf30040 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf30090 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55b64bf300f0 <col:10, col:33>
|   |   `-TextComment 0x55b64bf300c0 <col:10, col:33> Text=" insert node at position"
|   |-ParagraphComment 0x55b64bf301b0 <line:451:3, line:454:62>
|   | |-TextComment 0x55b64bf30110 <line:451:3, col:76> Text=" Insert a node in a location depending on a external condition. The cond()"
|   | |-TextComment 0x55b64bf30130 <line:452:3, col:74> Text=" function checks if the node is to be inserted _before_ the current node"
|   | |-TextComment 0x55b64bf30150 <line:453:3, col:31> Text=" against which it is checked."
|   | `-TextComment 0x55b64bf30170 <line:454:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf30200 <line:456:3>
|   | `-TextComment 0x55b64bf301d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf30220 <col:4, line:457:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf302d0 <line:456:15, line:457:3>
|   |   |-TextComment 0x55b64bf30280 <line:456:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55b64bf302a0 <line:457:3> Text=" "
|   |-ParamCommandComment 0x55b64bf302f0 <col:4, line:458:3> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf303a0 <line:457:15, line:458:3>
|   |   |-TextComment 0x55b64bf30350 <line:457:15, col:36> Text=" the element to insert"
|   |   `-TextComment 0x55b64bf30370 <line:458:3> Text=" "
|   |-ParamCommandComment 0x55b64bf303c0 <col:4, line:460:3> [in] implicitly Param="cond" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf304a0 <line:458:15, line:460:3>
|   |   |-TextComment 0x55b64bf30420 <line:458:15, col:76> Text=" a function that determines if the current node is the correct"
|   |   |-TextComment 0x55b64bf30440 <line:459:3, col:27> Text="             insert point"
|   |   `-TextComment 0x55b64bf30460 <line:460:3> Text=" "
|   |-ParamCommandComment 0x55b64bf304c0 <col:4, col:34> [in] implicitly Param="data" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf30550 <col:15, col:34>
|   |   `-TextComment 0x55b64bf30520 <col:15, col:34> Text=" parameter to cond()"
|   |-ParagraphComment 0x55b64bf305a0 <line:462:3>
|   | `-TextComment 0x55b64bf30570 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf305c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf30620 <col:11, col:14>
|       `-TextComment 0x55b64bf305f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bdf9c08 <line:495:1, line:500:1> line:495:20 used sys_dlist_remove 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55b64bdf9b80 <col:37, col:50> col:50 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55b64bdfa678 <line:496:1, line:500:1>
| | |-BinaryOperator 0x55b64bdf9ef8 <line:497:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x55b64bdf9de0 <col:2, col:14> 'struct _dnode *' lvalue .next 0x55b64bdb32f0
| | | | `-MemberExpr 0x55b64bdf9d90 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| | | |   `-ImplicitCastExpr 0x55b64bdf9d78 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55b64bdf9d40 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x55b64bdb35b8
| | | |       `-MemberExpr 0x55b64bdf9cf0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| | | |         `-ImplicitCastExpr 0x55b64bdf9cd8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55b64bdf9cb0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf9b80 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55b64bdf9ee0 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55b64bdf9ea8 <col:21, col:27> 'struct _dnode *' lvalue .next 0x55b64bdb32f0
| | |     `-MemberExpr 0x55b64bdf9e58 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| | |       `-ImplicitCastExpr 0x55b64bdf9e40 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55b64bdf9e18 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf9b80 'node' 'sys_dnode_t *'
| | |-BinaryOperator 0x55b64bdfa168 <line:498:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x55b64bdfa050 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x55b64bdb35b8
| | | | `-MemberExpr 0x55b64bdfa000 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| | | |   `-ImplicitCastExpr 0x55b64bdf9fe8 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55b64bdf9fb0 <col:2, col:8> 'struct _dnode *' lvalue .next 0x55b64bdb32f0
| | | |       `-MemberExpr 0x55b64bdf9f60 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| | | |         `-ImplicitCastExpr 0x55b64bdf9f48 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55b64bdf9f20 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf9b80 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55b64bdfa150 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55b64bdfa118 <col:21, col:27> 'struct _dnode *' lvalue .prev 0x55b64bdb35b8
| | |     `-MemberExpr 0x55b64bdfa0c8 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55b64bdb3650
| | |       `-ImplicitCastExpr 0x55b64bdfa0b0 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55b64bdfa088 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf9b80 'node' 'sys_dnode_t *'
| | `-CallExpr 0x55b64bdfa600 <line:499:2, col:21> 'void'
| |   |-ImplicitCastExpr 0x55b64bdfa5e8 <col:2> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x55b64bdfa190 <col:2> 'void (sys_dnode_t *)' Function 0x55b64bdece10 'sys_dnode_init' 'void (sys_dnode_t *)'
| |   `-ImplicitCastExpr 0x55b64bdfa630 <col:17> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b64bdfa1b8 <col:17> 'sys_dnode_t *' lvalue ParmVar 0x55b64bdf9b80 'node' 'sys_dnode_t *'
| `-FullComment 0x55b64bf30a50 <line:485:3, line:492:14>
|   |-ParagraphComment 0x55b64bf30730 <line:485:3>
|   | `-TextComment 0x55b64bf30700 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf30750 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55b64bf307b0 <col:10, col:44>
|   |   `-TextComment 0x55b64bf30780 <col:10, col:44> Text=" remove a specific node from a list"
|   |-ParagraphComment 0x55b64bf30820 <line:487:3, line:488:62>
|   | |-TextComment 0x55b64bf307d0 <line:487:3, col:71> Text=" The list is implicit from the node. The node must be part of a list."
|   | `-TextComment 0x55b64bf307f0 <line:488:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf30870 <line:490:3>
|   | `-TextComment 0x55b64bf30840 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf30890 <col:4, col:33> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf30920 <col:15, col:33>
|   |   `-TextComment 0x55b64bf308f0 <col:15, col:33> Text=" the node to remove"
|   |-ParagraphComment 0x55b64bf30970 <line:492:3>
|   | `-TextComment 0x55b64bf30940 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf30990 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf309f0 <col:11, col:14>
|       `-TextComment 0x55b64bf309c0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bdfa738 <line:512:1, line:522:1> line:512:28 sys_dlist_get 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55b64bdfa6b0 <col:42, col:55> col:55 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55b64bdfac88 <line:513:1, line:522:1>
| | |-DeclStmt 0x55b64bdfa8e8 <line:514:2, col:26>
| | | `-VarDecl 0x55b64bdfa7f0 <col:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:514:15 used node 'sys_dnode_t *' cinit
| | |   `-ImplicitCastExpr 0x55b64bdfa8d0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| | |     `-ParenExpr 0x55b64bdfa8b0 <col:14, col:24> 'void *'
| | |       `-CStyleCastExpr 0x55b64bdfa888 <col:15, col:23> 'void *' <NullToPointer>
| | |         `-IntegerLiteral 0x55b64bdfa850 <col:23> 'int' 0
| | |-IfStmt 0x55b64bdfabd0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:516:2, line:519:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x55b64bdfa9b0 <line:516:6, col:30> 'int' prefix '!'
| | | | `-CallExpr 0x55b64bdfa968 <col:7, col:30> 'bool'
| | | |   |-ImplicitCastExpr 0x55b64bdfa950 <col:7> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x55b64bdfa900 <col:7> 'bool (sys_dlist_t *)' Function 0x55b64bdef0c0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| | | |   `-ImplicitCastExpr 0x55b64bdfa998 <col:26> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55b64bdfa928 <col:26> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdfa6b0 'list' 'sys_dlist_t *'
| | | |-CompoundStmt 0x55b64bdfabb0 <col:33, line:519:2>
| | | | |-BinaryOperator 0x55b64bdfaad8 <line:517:3, col:16> 'sys_dnode_t *' '='
| | | | | |-DeclRefExpr 0x55b64bdfa9d0 <col:3> 'sys_dnode_t *' lvalue Var 0x55b64bdfa7f0 'node' 'sys_dnode_t *'
| | | | | `-ImplicitCastExpr 0x55b64bdfaac0 <col:10, col:16> 'struct _dnode *' <LValueToRValue>
| | | | |   `-MemberExpr 0x55b64bdfaa88 <col:10, col:16> 'struct _dnode *' lvalue .head 0x55b64bdb3280
| | | | |     `-MemberExpr 0x55b64bdfaa38 <col:10, col:16> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55b64bdb3390
| | | | |       `-ImplicitCastExpr 0x55b64bdfaa20 <col:10> 'sys_dlist_t *' <LValueToRValue>
| | | | |         `-DeclRefExpr 0x55b64bdfa9f8 <col:10> 'sys_dlist_t *' lvalue ParmVar 0x55b64bdfa6b0 'list' 'sys_dlist_t *'
| | | | `-CallExpr 0x55b64bdfab68 <line:518:3, col:24> 'void'
| | | |   |-ImplicitCastExpr 0x55b64bdfab50 <col:3> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x55b64bdfab00 <col:3> 'void (sys_dnode_t *)' Function 0x55b64bdf9c08 'sys_dlist_remove' 'void (sys_dnode_t *)'
| | | |   `-ImplicitCastExpr 0x55b64bdfab98 <col:20> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55b64bdfab28 <col:20> 'sys_dnode_t *' lvalue Var 0x55b64bdfa7f0 'node' 'sys_dnode_t *'
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x55b64bdfac48 <line:521:2, col:9>
| |   `-ImplicitCastExpr 0x55b64bdfac30 <col:9> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b64bdfac08 <col:9> 'sys_dnode_t *' lvalue Var 0x55b64bdfa7f0 'node' 'sys_dnode_t *'
| `-FullComment 0x55b64bf30df0 <line:503:3, line:509:60>
|   |-ParagraphComment 0x55b64bf30af0 <line:503:3>
|   | `-TextComment 0x55b64bf30ac0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf30b10 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x55b64bf30b70 <col:10, col:38>
|   |   `-TextComment 0x55b64bf30b40 <col:10, col:38> Text=" get the first node in a list"
|   |-ParagraphComment 0x55b64bf30bc0 <line:505:3, col:62>
|   | `-TextComment 0x55b64bf30b90 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf30c10 <line:507:3>
|   | `-TextComment 0x55b64bf30be0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf30c30 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf30cc0 <col:15, col:51>
|   |   `-TextComment 0x55b64bf30c90 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55b64bf30d10 <line:509:3>
|   | `-TextComment 0x55b64bf30ce0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf30d30 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x55b64bf30d90 <col:11, col:60>
|       `-TextComment 0x55b64bf30d60 <col:11, col:60> Text=" the first node in the list, NULL if list is empty"
|-RecordDecl 0x55b64bdfacb0 </vagrant/ext/zephyros/zephyr/include/sys/rb.h:48:1, line:50:1> line:48:8 struct rbnode definition
| `-FieldDecl 0x55b64bdfaec0 <line:49:2, col:27> col:17 children 'struct rbnode *[2]'
|-TypedefDecl 0x55b64bdfb198 <line:74:1, col:65> col:16 referenced rb_lessthan_t 'bool (*)(struct rbnode *, struct rbnode *)'
| |-PointerType 0x55b64bdfb130 'bool (*)(struct rbnode *, struct rbnode *)'
| | `-ParenType 0x55b64bdfb0d0 'bool (struct rbnode *, struct rbnode *)' sugar
| |   `-FunctionProtoType 0x55b64bdfb090 'bool (struct rbnode *, struct rbnode *)' cdecl
| |     |-BuiltinType 0x55b64bd0f710 'bool'
| |     |-PointerType 0x55b64bdfade0 'struct rbnode *'
| |     | `-ElaboratedType 0x55b64bdfad80 'struct rbnode' sugar
| |     |   `-RecordType 0x55b64bdfad40 'struct rbnode'
| |     |     `-Record 0x55b64bdfacb0 'rbnode'
| |     `-PointerType 0x55b64bdfade0 'struct rbnode *'
| |       `-ElaboratedType 0x55b64bdfad80 'struct rbnode' sugar
| |         `-RecordType 0x55b64bdfad40 'struct rbnode'
| |           `-Record 0x55b64bdfacb0 'rbnode'
| `-FullComment 0x55b64bf31150 <line:62:3, line:72:36>
|   |-ParagraphComment 0x55b64bf30e90 <line:62:3>
|   | `-TextComment 0x55b64bf30e60 <col:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf30eb0 <col:4, col:26> Text=" rb_lessthan_t"
|   |-ParagraphComment 0x55b64bf30f20 <line:63:3>
|   | `-TextComment 0x55b64bf30ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf30f40 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x55b64bf30fa0 <col:10, col:45>
|   |   `-TextComment 0x55b64bf30f70 <col:10, col:45> Text=" Red/black tree comparison predicate"
|   |-ParagraphComment 0x55b64bf31010 <line:65:3, line:66:68>
|   | |-TextComment 0x55b64bf30fc0 <line:65:3, col:69> Text=" Compares the two nodes and returns true if node A is strictly less"
|   | `-TextComment 0x55b64bf30fe0 <line:66:3, col:68> Text=" than B according to the tree's sorting criteria, false otherwise."
|   `-ParagraphComment 0x55b64bf31100 <line:68:3, line:72:36>
|     |-TextComment 0x55b64bf31030 <line:68:3, col:70> Text=" Note that during insert, the new node being inserted will always be"
|     |-TextComment 0x55b64bf31050 <line:69:3, col:68> Text=" "A", where "B" is the existing node within the tree against which"
|     |-TextComment 0x55b64bf31070 <line:70:3, col:64> Text=" it is being compared.  This trait can be used (with care!) to"
|     |-TextComment 0x55b64bf31090 <line:71:3, col:70> Text=" implement "most/least recently added" semantics between nodes which"
|     `-TextComment 0x55b64bf310b0 <line:72:3, col:36> Text=" would otherwise compare as equal."
|-RecordDecl 0x55b64bdfb1f0 <line:76:1, line:84:1> line:76:8 struct rbtree definition
| |-FieldDecl 0x55b64bdfb2c8 <line:77:2, col:17> col:17 referenced root 'struct rbnode *'
| |-FieldDecl 0x55b64bdfb340 <line:78:2, col:16> col:16 lessthan_fn 'rb_lessthan_t':'bool (*)(struct rbnode *, struct rbnode *)'
| `-FieldDecl 0x55b64bdfb3a0 <line:79:2, col:6> col:6 max_depth 'int'
|-TypedefDecl 0x55b64bdfd858 <line:86:1, col:61> col:16 referenced rb_visit_t 'void (*)(struct rbnode *, void *)'
| `-PointerType 0x55b64bdfd7f0 'void (*)(struct rbnode *, void *)'
|   `-ParenType 0x55b64bdfd790 'void (struct rbnode *, void *)' sugar
|     `-FunctionProtoType 0x55b64bdfb530 'void (struct rbnode *, void *)' cdecl
|       |-BuiltinType 0x55b64bd0f6f0 'void'
|       |-PointerType 0x55b64bdfade0 'struct rbnode *'
|       | `-ElaboratedType 0x55b64bdfad80 'struct rbnode' sugar
|       |   `-RecordType 0x55b64bdfad40 'struct rbnode'
|       |     `-Record 0x55b64bdfacb0 'rbnode'
|       `-PointerType 0x55b64bd0fb90 'void *'
|         `-BuiltinType 0x55b64bd0f6f0 'void'
|-FunctionDecl 0x55b64bdfda78 <line:88:1, col:56> col:16 z_rb_child 'struct rbnode *(struct rbnode *, int)'
| |-ParmVarDecl 0x55b64bdfd8d8 <col:27, col:42> col:42 node 'struct rbnode *'
| `-ParmVarDecl 0x55b64bdfd950 <col:48, col:52> col:52 side 'int'
|-FunctionDecl 0x55b64bdfdc58 <line:89:1, col:38> col:5 z_rb_is_black 'int (struct rbnode *)'
| `-ParmVarDecl 0x55b64bdfdb50 <col:19, col:34> col:34 node 'struct rbnode *'
|-FunctionDecl 0x55b64bdfdf70 <line:91:1, col:70> col:6 used z_rb_walk 'void (struct rbnode *, rb_visit_t, void *)'
| |-ParmVarDecl 0x55b64bdfdd28 <col:16, col:31> col:31 node 'struct rbnode *'
| |-ParmVarDecl 0x55b64bdfddc0 <col:37, col:48> col:48 visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| `-ParmVarDecl 0x55b64bdfde38 <col:58, col:64> col:64 cookie 'void *'
|-FunctionDecl 0x55b64bdfe288 <line:93:1, col:61> col:16 used z_rb_get_minmax 'struct rbnode *(struct rbtree *, int)'
| |-ParmVarDecl 0x55b64bdfe0e0 <col:32, col:47> col:47 tree 'struct rbtree *'
| `-ParmVarDecl 0x55b64bdfe158 <col:53, col:57> col:57 side 'int'
|-FunctionDecl 0x55b64bdfe530 <line:98:1, col:56> col:6 rb_insert 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x55b64bdfe390 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x55b64bdfe418 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x55b64bf312a0 <line:96:3, col:31>
|   |-ParagraphComment 0x55b64bf311f0 <col:3>
|   | `-TextComment 0x55b64bf311c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf31210 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x55b64bf31270 <col:10, col:31>
|       `-TextComment 0x55b64bf31240 <col:10, col:31> Text=" Insert node into tree"
|-FunctionDecl 0x55b64bdfe7a0 <line:103:1, col:56> col:6 rb_remove 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x55b64bdfe630 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x55b64bdfe6b8 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x55b64bf31400 <line:101:3, col:31>
|   |-ParagraphComment 0x55b64bf31340 <col:3>
|   | `-TextComment 0x55b64bf31310 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf31370 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x55b64bf313d0 <col:10, col:31>
|       `-TextComment 0x55b64bf313a0 <col:10, col:31> Text=" Remove node from tree"
|-FunctionDecl 0x55b64bdfe9b8 <line:108:1, line:111:1> line:108:30 rb_get_min 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x55b64bdfe8a0 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x55b64bdfebd8 <line:109:1, line:111:1>
| | `-ReturnStmt 0x55b64bdfeb90 <line:110:2, col:32>
| |   `-CallExpr 0x55b64bdfeb40 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x55b64bdfeb28 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64bdfea60 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x55b64bdfe288 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x55b64bdfeb78 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64bdfea88 <col:25> 'struct rbtree *' lvalue ParmVar 0x55b64bdfe8a0 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x55b64bdfeab0 <col:31> 'int' 0
| `-FullComment 0x55b64bf31550 <line:106:3, col:54>
|   |-ParagraphComment 0x55b64bf314a0 <col:3>
|   | `-TextComment 0x55b64bf31470 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf314c0 <col:4, col:54> Name="brief"
|     `-ParagraphComment 0x55b64bf31520 <col:10, col:54>
|       `-TextComment 0x55b64bf314f0 <col:10, col:54> Text=" Returns the lowest-sorted member of the tree"
|-FunctionDecl 0x55b64bdfecb8 <line:116:1, line:119:1> line:116:30 rb_get_max 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x55b64bdfec18 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x55b64bdfee78 <line:117:1, line:119:1>
| | `-ReturnStmt 0x55b64bdfee38 <line:118:2, col:32>
| |   `-CallExpr 0x55b64bdfede8 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x55b64bdfedd0 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64bdfed60 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x55b64bdfe288 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x55b64bdfee20 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64bdfed88 <col:25> 'struct rbtree *' lvalue ParmVar 0x55b64bdfec18 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x55b64bdfedb0 <col:31> 'int' 1
| `-FullComment 0x55b64bf316a0 <line:114:3, col:55>
|   |-ParagraphComment 0x55b64bf315f0 <col:3>
|   | `-TextComment 0x55b64bf315c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf31610 <col:4, col:55> Name="brief"
|     `-ParagraphComment 0x55b64bf31670 <col:10, col:55>
|       `-TextComment 0x55b64bf31640 <col:10, col:55> Text=" Returns the highest-sorted member of the tree"
|-FunctionDecl 0x55b64bdff050 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/rb.h:130:58> col:6 rb_contains 'bool (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x55b64bdfeeb8 <col:18, col:33> col:33 tree 'struct rbtree *'
| |-ParmVarDecl 0x55b64bdfef40 <col:39, col:54> col:54 node 'struct rbnode *'
| `-FullComment 0x55b64bf318f0 <line:122:3, line:128:10>
|   |-ParagraphComment 0x55b64bf31740 <line:122:3>
|   | `-TextComment 0x55b64bf31710 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf31760 <col:4, col:60> Name="brief"
|   | `-ParagraphComment 0x55b64bf317c0 <col:10, col:60>
|   |   `-TextComment 0x55b64bf31790 <col:10, col:60> Text=" Returns true if the given node is part of the tree"
|   `-ParagraphComment 0x55b64bf318b0 <line:124:3, line:128:10>
|     |-TextComment 0x55b64bf317e0 <line:124:3, col:66> Text=" Note that this does not internally dereference the node pointer"
|     |-TextComment 0x55b64bf31800 <line:125:3, col:69> Text=" (though the tree's lessthan callback might!), it just tests it for"
|     |-TextComment 0x55b64bf31820 <line:126:3, col:68> Text=" equality with items in the tree.  So it's feasible to use this to"
|     |-TextComment 0x55b64bf31840 <line:127:3, col:66> Text=" implement a "set" construct by simply testing the pointer value"
|     `-TextComment 0x55b64bf31860 <line:128:3, col:10> Text=" itself."
|-FunctionDecl 0x55b64bdff370 <line:141:1, line:145:1> line:141:20 rb_walk 'void (struct rbtree *, rb_visit_t, void *)' static inline
| |-ParmVarDecl 0x55b64bdff150 <col:28, col:43> col:43 used tree 'struct rbtree *'
| |-ParmVarDecl 0x55b64bdff1c0 <col:49, col:60> col:60 used visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |-ParmVarDecl 0x55b64bdff238 <line:142:7, col:13> col:13 used cookie 'void *'
| |-CompoundStmt 0x55b64bdff618 <line:143:1, line:145:1>
| | `-CallExpr 0x55b64bdff590 <line:144:2, col:40> 'void'
| |   |-ImplicitCastExpr 0x55b64bdff578 <col:2> 'void (*)(struct rbnode *, rb_visit_t, void *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x55b64bdff428 <col:2> 'void (struct rbnode *, rb_visit_t, void *)' Function 0x55b64bdfdf70 'z_rb_walk' 'void (struct rbnode *, rb_visit_t, void *)'
| |   |-ImplicitCastExpr 0x55b64bdff5d0 <col:12, col:18> 'struct rbnode *' <LValueToRValue>
| |   | `-MemberExpr 0x55b64bdff490 <col:12, col:18> 'struct rbnode *' lvalue ->root 0x55b64bdfb2c8
| |   |   `-ImplicitCastExpr 0x55b64bdff478 <col:12> 'struct rbtree *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55b64bdff450 <col:12> 'struct rbtree *' lvalue ParmVar 0x55b64bdff150 'tree' 'struct rbtree *'
| |   |-ImplicitCastExpr 0x55b64bdff5e8 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' <LValueToRValue>
| |   | `-DeclRefExpr 0x55b64bdff4c8 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' lvalue ParmVar 0x55b64bdff1c0 'visit_fn' 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |   `-ImplicitCastExpr 0x55b64bdff600 <col:34> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b64bdff4f0 <col:34> 'void *' lvalue ParmVar 0x55b64bdff238 'cookie' 'void *'
| `-FullComment 0x55b64bf31b10 <line:134:3, line:139:18>
|   |-ParagraphComment 0x55b64bf31990 <line:134:3>
|   | `-TextComment 0x55b64bf31960 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf319b0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55b64bf31a10 <col:10, col:33>
|   |   `-TextComment 0x55b64bf319e0 <col:10, col:33> Text=" Walk/enumerate a rbtree"
|   `-ParagraphComment 0x55b64bf31ad0 <line:136:3, line:139:18>
|     |-TextComment 0x55b64bf31a30 <line:136:3, col:69> Text=" Very simple recursive enumeration.  Low code size, but requiring a"
|     |-TextComment 0x55b64bf31a50 <line:137:3, col:70> Text=" separate function can be clumsy for the user and there is no way to"
|     |-TextComment 0x55b64bf31a70 <line:138:3, col:65> Text=" break out of the loop early.  See RB_FOR_EACH for an iterative"
|     `-TextComment 0x55b64bf31a90 <line:139:3, col:18> Text=" implementation."
|-RecordDecl 0x55b64bdff630 <line:148:1, line:152:1> line:148:8 struct _rb_foreach definition
| |-FieldDecl 0x55b64bdff7b0 <line:149:2, col:18> col:18 stack 'struct rbnode **'
| |-FieldDecl 0x55b64bdff810 <line:150:2, col:8> col:8 is_left 'char *'
| `-FieldDecl 0x55b64bdff870 <line:151:2, col:6> col:6 top 'int'
|-FunctionDecl 0x55b64bdffb18 <line:169:1, col:76> col:16 z_rb_foreach_next 'struct rbnode *(struct rbtree *, struct _rb_foreach *)'
| |-ParmVarDecl 0x55b64bdff8e0 <col:34, col:49> col:49 tree 'struct rbtree *'
| `-ParmVarDecl 0x55b64bdff9f0 <col:55, col:75> col:75 f 'struct _rb_foreach *'
|-RecordDecl 0x55b64bdffc88 </vagrant/ext/zephyros/zephyr/include/sched_priq.h:32:1, col:8> col:8 struct k_thread
|-FunctionDecl 0x55b64bdffee8 <line:34:1, col:50> col:18 z_priq_dumb_best 'struct k_thread *(sys_dlist_t *)'
| `-ParmVarDecl 0x55b64bdffd40 <col:35, col:48> col:48 pq 'sys_dlist_t *'
|-FunctionDecl 0x55b64be00140 <line:35:1, col:65> col:6 z_priq_dumb_remove 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x55b64bdfffa0 <col:25, col:38> col:38 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x55b64be00028 <col:42, col:59> col:59 thread 'struct k_thread *'
|-FunctionDecl 0x55b64be00318 <line:36:1, col:62> col:6 z_priq_dumb_add 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x55b64be00200 <col:22, col:35> col:35 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x55b64be00288 <col:39, col:56> col:56 thread 'struct k_thread *'
|-RecordDecl 0x55b64be003c8 <line:38:1, line:41:1> line:38:8 struct _priq_rb definition
| |-FieldDecl 0x55b64be00490 <line:39:2, col:16> col:16 tree 'struct rbtree':'struct rbtree'
| `-FieldDecl 0x55b64be004f0 <line:40:2, col:6> col:6 next_order_key 'int'
|-FunctionDecl 0x55b64be028b0 <line:43:1, col:64> col:6 z_priq_rb_add 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x55b64be00640 <col:20, col:37> col:37 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x55b64be006c8 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x55b64be02aa0 <line:44:1, col:67> col:6 z_priq_rb_remove 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x55b64be02988 <col:23, col:40> col:40 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x55b64be02a10 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x55b64be02c98 <line:45:1, col:52> col:18 z_priq_rb_best 'struct k_thread *(struct _priq_rb *)'
| `-ParmVarDecl 0x55b64be02b78 <col:33, col:50> col:50 pq 'struct _priq_rb *'
|-RecordDecl 0x55b64be02d40 <line:54:1, line:57:1> line:54:8 struct _priq_mq definition
| |-FieldDecl 0x55b64be02f48 <line:55:2, col:23> col:14 queues 'sys_dlist_t [32]'
| `-FieldDecl 0x55b64be02fa8 <line:56:2, col:15> col:15 bitmask 'unsigned int'
|-FunctionDecl 0x55b64be03240 <line:59:1, col:64> col:6 z_priq_mq_add 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x55b64be030a0 <col:20, col:37> col:37 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x55b64be03128 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x55b64be03430 <line:60:1, col:67> col:6 z_priq_mq_remove 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x55b64be03318 <col:23, col:40> col:40 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x55b64be033a0 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x55b64be03628 <line:61:1, col:52> col:18 z_priq_mq_best 'struct k_thread *(struct _priq_mq *)'
| `-ParmVarDecl 0x55b64be03508 <col:33, col:50> col:50 pq 'struct _priq_mq *'
|-RecordDecl 0x55b64be036f8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:29:1, line:31:1> line:29:8 struct _snode definition
| `-FieldDecl 0x55b64be15ad0 <line:30:2, col:17> col:17 referenced next 'struct _snode *'
|-TypedefDecl 0x55b64be15b38 <line:33:1, col:23> col:23 referenced sys_snode_t 'struct _snode':'struct _snode'
| `-ElaboratedType 0x55b64be037a0 'struct _snode' sugar
|   `-RecordType 0x55b64be03780 'struct _snode'
|     `-Record 0x55b64be036f8 '_snode'
|-RecordDecl 0x55b64be15b90 <line:35:1, line:38:1> line:35:8 struct _slist definition
| |-FieldDecl 0x55b64be15c98 <line:36:2, col:15> col:15 referenced head 'sys_snode_t *'
| `-FieldDecl 0x55b64be15cf0 <line:37:2, col:15> col:15 referenced tail 'sys_snode_t *'
|-TypedefDecl 0x55b64be15d90 <line:40:1, col:23> col:23 referenced sys_slist_t 'struct _slist':'struct _slist'
| `-ElaboratedType 0x55b64be15d40 'struct _slist' sugar
|   `-RecordType 0x55b64be15c20 'struct _slist'
|     `-Record 0x55b64be15b90 '_slist'
|-FunctionDecl 0x55b64be160a0 <line:190:1, line:194:1> line:190:20 used sys_slist_init 'void (sys_slist_t *)' static inline
| |-ParmVarDecl 0x55b64be15f98 <col:35, col:48> col:48 used list 'sys_slist_t *'
| |-CompoundStmt 0x55b64be163b8 <line:191:1, line:194:1>
| | |-BinaryOperator 0x55b64be16258 <line:192:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| | | |-MemberExpr 0x55b64be16188 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:192:2, col:8> 'sys_snode_t *' lvalue ->head 0x55b64be15c98
| | | | `-ImplicitCastExpr 0x55b64be16170 <col:2> 'sys_slist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55b64be16148 <col:2> 'sys_slist_t *' lvalue ParmVar 0x55b64be15f98 'list' 'sys_slist_t *'
| | | `-ImplicitCastExpr 0x55b64be16240 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| | |   `-ParenExpr 0x55b64be16220 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x55b64be161f8 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x55b64be161c0 <col:23> 'int' 0
| | `-BinaryOperator 0x55b64be16390 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| |   |-MemberExpr 0x55b64be162c0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, col:8> 'sys_snode_t *' lvalue ->tail 0x55b64be15cf0
| |   | `-ImplicitCastExpr 0x55b64be162a8 <col:2> 'sys_slist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55b64be16280 <col:2> 'sys_slist_t *' lvalue ParmVar 0x55b64be15f98 'list' 'sys_slist_t *'
| |   `-ImplicitCastExpr 0x55b64be16378 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| |     `-ParenExpr 0x55b64be16358 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x55b64be16330 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x55b64be162f8 <col:23> 'int' 0
| `-FullComment 0x55b64bf31d70 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:186:3, line:188:50>
|   |-ParagraphComment 0x55b64bf31bb0 <line:186:3>
|   | `-TextComment 0x55b64bf31b80 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf31bd0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55b64bf31c30 <col:10, col:27>
|   |   `-TextComment 0x55b64bf31c00 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x55b64bf31c80 <line:188:3>
|   | `-TextComment 0x55b64bf31c50 <col:3> Text=" "
|   `-ParamCommandComment 0x55b64bf31ca0 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x55b64bf31d30 <col:15, col:50>
|       `-TextComment 0x55b64bf31d00 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x55b64be164f0 <line:198:1, line:201:1> line:198:28 used z_snode_next_peek 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64be163e8 <col:46, col:59> col:59 used node 'sys_snode_t *'
| `-CompoundStmt 0x55b64be16640 <line:199:1, line:201:1>
|   `-ReturnStmt 0x55b64be16628 <line:200:2, col:15>
|     `-ImplicitCastExpr 0x55b64be16610 <col:9, col:15> 'struct _snode *' <LValueToRValue>
|       `-MemberExpr 0x55b64be165d8 <col:9, col:15> 'struct _snode *' lvalue ->next 0x55b64be15ad0
|         `-ImplicitCastExpr 0x55b64be165c0 <col:9> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55b64be16598 <col:9> 'sys_snode_t *' lvalue ParmVar 0x55b64be163e8 'node' 'sys_snode_t *'
|-FunctionDecl 0x55b64be167f0 <line:203:1, line:206:1> line:203:20 used z_snode_next_set 'void (sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64be16668 <col:37, col:50> col:50 used parent 'sys_snode_t *'
| |-ParmVarDecl 0x55b64be166d8 <col:58, col:71> col:71 used child 'sys_snode_t *'
| `-CompoundStmt 0x55b64be16980 <line:204:1, line:206:1>
|   `-BinaryOperator 0x55b64be16958 <line:205:2, col:17> 'struct _snode *' '='
|     |-MemberExpr 0x55b64be168e0 <col:2, col:10> 'struct _snode *' lvalue ->next 0x55b64be15ad0
|     | `-ImplicitCastExpr 0x55b64be168c8 <col:2> 'sys_snode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b64be168a0 <col:2> 'sys_snode_t *' lvalue ParmVar 0x55b64be16668 'parent' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x55b64be16940 <col:17> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64be16918 <col:17> 'sys_snode_t *' lvalue ParmVar 0x55b64be166d8 'child' 'sys_snode_t *'
|-FunctionDecl 0x55b64be19450 <line:208:1, line:211:1> line:208:20 used z_slist_head_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64be169a8 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55b64be16a18 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x55b64be195e0 <line:209:1, line:211:1>
|   `-BinaryOperator 0x55b64be195b8 <line:210:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x55b64be19540 <col:2, col:8> 'sys_snode_t *' lvalue ->head 0x55b64be15c98
|     | `-ImplicitCastExpr 0x55b64be19528 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b64be19500 <col:2> 'sys_slist_t *' lvalue ParmVar 0x55b64be169a8 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x55b64be195a0 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64be19578 <col:15> 'sys_snode_t *' lvalue ParmVar 0x55b64be16a18 'node' 'sys_snode_t *'
|-FunctionDecl 0x55b64be19708 <line:213:1, line:216:1> line:213:20 used z_slist_tail_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64be19608 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55b64be19678 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x55b64be198c8 <line:214:1, line:216:1>
|   `-BinaryOperator 0x55b64be19870 <line:215:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x55b64be197f8 <col:2, col:8> 'sys_snode_t *' lvalue ->tail 0x55b64be15cf0
|     | `-ImplicitCastExpr 0x55b64be197e0 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b64be197b8 <col:2> 'sys_slist_t *' lvalue ParmVar 0x55b64be19608 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x55b64be19858 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64be19830 <col:15> 'sys_snode_t *' lvalue ParmVar 0x55b64be19678 'node' 'sys_snode_t *'
|-FunctionDecl 0x55b64be199f0 <line:225:1, line:228:1> line:225:28 used sys_slist_peek_head 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55b64be198f0 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x55b64be19b68 <line:226:1, line:228:1>
| | `-ReturnStmt 0x55b64be19b28 <line:227:2, col:15>
| |   `-ImplicitCastExpr 0x55b64be19b10 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x55b64be19ad8 <col:9, col:15> 'sys_snode_t *' lvalue ->head 0x55b64be15c98
| |       `-ImplicitCastExpr 0x55b64be19ac0 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55b64be19a98 <col:9> 'sys_slist_t *' lvalue ParmVar 0x55b64be198f0 'list' 'sys_slist_t *'
| `-FullComment 0x55b64bf320b0 <line:219:3, line:223:68>
|   |-ParagraphComment 0x55b64bf31e10 <line:219:3>
|   | `-TextComment 0x55b64bf31de0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf31e30 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf31e90 <col:10, col:43>
|   |   `-TextComment 0x55b64bf31e60 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x55b64bf31ee0 <line:221:3>
|   | `-TextComment 0x55b64bf31eb0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf31f00 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf31f90 <col:15, col:62>
|   |   `-TextComment 0x55b64bf31f60 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x55b64bf31fe0 <line:223:3>
|   | `-TextComment 0x55b64bf31fb0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf32000 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x55b64bf32060 <col:11, col:68>
|       `-TextComment 0x55b64bf32030 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x55b64be19c18 <line:237:1, line:240:1> line:237:28 used sys_slist_peek_tail 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55b64be19b90 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x55b64be19d98 <line:238:1, line:240:1>
| | `-ReturnStmt 0x55b64be19d50 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x55b64be19d38 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x55b64be19d00 <col:9, col:15> 'sys_snode_t *' lvalue ->tail 0x55b64be15cf0
| |       `-ImplicitCastExpr 0x55b64be19ce8 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55b64be19cc0 <col:9> 'sys_slist_t *' lvalue ParmVar 0x55b64be19b90 'list' 'sys_slist_t *'
| `-FullComment 0x55b64bf323f0 <line:231:3, line:235:67>
|   |-ParagraphComment 0x55b64bf32150 <line:231:3>
|   | `-TextComment 0x55b64bf32120 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf32170 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55b64bf321d0 <col:10, col:42>
|   |   `-TextComment 0x55b64bf321a0 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x55b64bf32220 <line:233:3>
|   | `-TextComment 0x55b64bf321f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf32240 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf322d0 <col:15, col:61>
|   |   `-TextComment 0x55b64bf322a0 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x55b64bf32320 <line:235:3>
|   | `-TextComment 0x55b64bf322f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf32340 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x55b64bf323a0 <col:11, col:67>
|       `-TextComment 0x55b64bf32370 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x55b64be19ec0 <line:253:1, col:56> col:20 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x55b64be19dc0 <col:39, col:52> col:52 list 'sys_slist_t *'
| `-FullComment 0x55b64bf32730 <line:247:3, line:251:57>
|   |-ParagraphComment 0x55b64bf32490 <line:247:3>
|   | `-TextComment 0x55b64bf32460 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf324b0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55b64bf32510 <col:10, col:41>
|   |   `-TextComment 0x55b64bf324e0 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x55b64bf32560 <line:249:3>
|   | `-TextComment 0x55b64bf32530 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf32580 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf32610 <col:15, col:44>
|   |   `-TextComment 0x55b64bf325e0 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x55b64bf32660 <line:251:3>
|   | `-TextComment 0x55b64bf32630 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf32680 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x55b64bf326e0 <col:11, col:57>
|       `-TextComment 0x55b64bf326b0 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x55b64be1a000 prev 0x55b64be19ec0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:3:1 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x55b64be19f78 <line:5:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_slist_t *'
| `-CompoundStmt 0x55b64be1a2f8 <line:60:2, line:62:2>
|   `-ReturnStmt 0x55b64be1a2b0 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x55b64be1a298 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x55b64be1a278 <col:10, col:54> 'int'
|         `-BinaryOperator 0x55b64be1a250 <<scratch space>:7:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x55b64be1a170 <<scratch space>:7:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_snode_t *'
|           | |-ImplicitCastExpr 0x55b64be1a158 <<scratch space>:7:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x55b64be1a0a8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be199f0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|           | `-ImplicitCastExpr 0x55b64be1a1a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_slist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x55b64be1a0d0 <col:41> 'sys_slist_t *' lvalue ParmVar 0x55b64be19f78 'list' 'sys_slist_t *'
|           `-ImplicitCastExpr 0x55b64be1a238 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|             `-ParenExpr 0x55b64be1a218 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x55b64be1a1f0 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x55b64be1a1b8 <col:23> 'int' 0
|-FunctionDecl 0x55b64be1c410 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:266:1, col:74> col:28 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64be1a320 <col:57, col:70> col:70 node 'sys_snode_t *'
| `-FullComment 0x55b64bf32ad0 <line:258:3, line:264:55>
|   |-ParagraphComment 0x55b64bf327d0 <line:258:3>
|   | `-TextComment 0x55b64bf327a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf327f0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x55b64bf32850 <col:10, col:64>
|   |   `-TextComment 0x55b64bf32820 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x55b64bf328a0 <line:260:3, col:69>
|   | `-TextComment 0x55b64bf32870 <col:3, col:69> Text=" Faster then sys_slist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x55b64bf328f0 <line:262:3>
|   | `-TextComment 0x55b64bf328c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf32910 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf329a0 <col:15, col:64>
|   |   `-TextComment 0x55b64bf32970 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x55b64bf329f0 <line:264:3>
|   | `-TextComment 0x55b64bf329c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf32a10 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55b64bf32a70 <col:11, col:55>
|       `-TextComment 0x55b64bf32a40 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x55b64be1c550 prev 0x55b64be1c410 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:11:1 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64be1c4c8 <line:13:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_snode_t *'
| `-CompoundStmt 0x55b64be1c748 <line:67:2, line:69:2>
|   `-ReturnStmt 0x55b64be1c708 <line:68:3, col:42>
|     `-CallExpr 0x55b64be1c6c0 <<scratch space>:15:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x55b64be1c6a8 <<scratch space>:15:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64be1c5f8 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55b64be164f0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       `-ImplicitCastExpr 0x55b64be1c6f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_snode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64be1c620 <col:38> 'sys_snode_t *' lvalue ParmVar 0x55b64be1c4c8 'node' 'sys_snode_t *'
|-FunctionDecl 0x55b64be1c7f8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:277:1, col:65> col:28 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64be1c770 <col:48, col:61> col:61 node 'sys_snode_t *'
| `-FullComment 0x55b64bf32e10 <line:271:3, line:275:55>
|   |-ParagraphComment 0x55b64bf32b70 <line:271:3>
|   | `-TextComment 0x55b64bf32b40 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf32b90 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55b64bf32bf0 <col:10, col:46>
|   |   `-TextComment 0x55b64bf32bc0 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x55b64bf32c40 <line:273:3>
|   | `-TextComment 0x55b64bf32c10 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf32c60 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf32cf0 <col:15, col:64>
|   |   `-TextComment 0x55b64bf32cc0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x55b64bf32d40 <line:275:3>
|   | `-TextComment 0x55b64bf32d10 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf32d60 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55b64bf32dc0 <col:11, col:55>
|       `-TextComment 0x55b64bf32d90 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x55b64be1c938 prev 0x55b64be1c7f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:19:1 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64be1c8b0 <line:21:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_snode_t *'
| `-CompoundStmt 0x55b64be1cc98 <line:74:2, line:78:2>
|   `-ReturnStmt 0x55b64be1cc58 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x55b64be1cc28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *'
|       |-BinaryOperator 0x55b64be1cab8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x55b64be1ca88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_snode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x55b64be1c9e0 <col:10> 'sys_snode_t *' lvalue ParmVar 0x55b64be1c8b0 'node' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x55b64be1caa0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x55b64be1ca68 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x55b64be1ca40 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x55b64be1ca08 <col:23> 'int' 0
|       |-CallExpr 0x55b64be1cb48 <<scratch space>:23:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_snode_t *'
|       | |-ImplicitCastExpr 0x55b64be1cb30 <<scratch space>:23:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55b64be1cae0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55b64be1c550 'sys_slist_peek_next_no_check' 'sys_snode_t *(sys_snode_t *)'
|       | `-ImplicitCastExpr 0x55b64be1cb78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x55b64be1cb08 <col:43> 'sys_snode_t *' lvalue ParmVar 0x55b64be1c8b0 'node' 'sys_snode_t *'
|       `-ImplicitCastExpr 0x55b64be1cc10 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|         `-ParenExpr 0x55b64be1cbf0 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x55b64be1cbc8 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x55b64be1cb90 <col:23> 'int' 0
|-FunctionDecl 0x55b64be1cdc0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:289:1, line:290:27> line:289:20 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64be1ccc0 <col:38, col:51> col:51 list 'sys_slist_t *'
| |-ParmVarDecl 0x55b64be1cd30 <line:290:10, col:23> col:23 node 'sys_snode_t *'
| `-FullComment 0x55b64bf331a0 <line:282:3, line:287:47>
|   |-ParagraphComment 0x55b64bf32eb0 <line:282:3>
|   | `-TextComment 0x55b64bf32e80 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf32ed0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55b64bf32f30 <col:10, col:42>
|   |   `-TextComment 0x55b64bf32f00 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x55b64bf32f80 <line:284:3, col:62>
|   | `-TextComment 0x55b64bf32f50 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf32fd0 <line:286:3>
|   | `-TextComment 0x55b64bf32fa0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf32ff0 <col:4, line:287:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf330a0 <line:286:15, line:287:3>
|   |   |-TextComment 0x55b64bf33050 <line:286:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55b64bf33070 <line:287:3> Text=" "
|   `-ParamCommandComment 0x55b64bf330c0 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55b64bf33150 <col:15, col:47>
|       `-TextComment 0x55b64bf33120 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x55b64be1cf80 prev 0x55b64be1cdc0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:25:1 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64be1ce80 <line:27:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55b64be1cef0 <<scratch space>:29:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_snode_t *'
| `-CompoundStmt 0x55b64be1e378 <line:84:2, line:93:2>
|   |-CallExpr 0x55b64be1d1a0 <<scratch space>:31:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x55b64be1d188 <<scratch space>:31:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55b64be1d030 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55b64be167f0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x55b64be1d1d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55b64be1d058 <col:30> 'sys_snode_t *' lvalue ParmVar 0x55b64be1cef0 'node' 'sys_snode_t *'
|   | `-CallExpr 0x55b64be1d0e8 <<scratch space>:33:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x55b64be1d0d0 <<scratch space>:33:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55b64be1d080 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be199f0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x55b64be1d118 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55b64be1d0a8 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55b64be1ce80 'list' 'sys_slist_t *'
|   |-CallExpr 0x55b64be1d2e0 <<scratch space>:35:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x55b64be1d2c8 <<scratch space>:35:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55b64be1d1f0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55b64be19450 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x55b64be1d318 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55b64be1d218 <col:30> 'sys_slist_t *' lvalue ParmVar 0x55b64be1ce80 'list' 'sys_slist_t *'
|   | `-ImplicitCastExpr 0x55b64be1d330 <col:36> 'sys_snode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55b64be1d240 <col:36> 'sys_snode_t *' lvalue ParmVar 0x55b64be1cef0 'node' 'sys_snode_t *'
|   `-IfStmt 0x55b64be1e310 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55b64be1e168 <<scratch space>:37:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x55b64be1d3b0 <<scratch space>:37:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x55b64be1d398 <<scratch space>:37:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55b64be1d348 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be19c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x55b64be1d3e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b64be1d370 <col:37> 'sys_slist_t *' lvalue ParmVar 0x55b64be1ce80 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x55b64be1e150 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x55b64be1e130 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55b64be1e108 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55b64be1e0d0 <col:23> 'int' 0
|     |-CompoundStmt 0x55b64be1e2f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x55b64be1e2a8 <<scratch space>:39:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x55b64be1e290 <<scratch space>:39:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b64be1e190 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55b64be19708 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x55b64be1e2e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55b64be1e1b8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55b64be1ce80 'list' 'sys_slist_t *'
|     |   `-CallExpr 0x55b64be1e248 <<scratch space>:41:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_snode_t *'
|     |     |-ImplicitCastExpr 0x55b64be1e230 <<scratch space>:41:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x55b64be1e1e0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be199f0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|     |     `-ImplicitCastExpr 0x55b64be1e278 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_slist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b64be1e208 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55b64be1ce80 'list' 'sys_slist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x55b64be1e4b0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:302:1, line:303:26> line:302:20 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64be1e3b0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x55b64be1e420 <line:303:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x55b64bf34560 <line:295:3, line:300:46>
|   |-ParagraphComment 0x55b64bf33240 <line:295:3>
|   | `-TextComment 0x55b64bf33210 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf33260 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55b64bf332c0 <col:10, col:41>
|   |   `-TextComment 0x55b64bf33290 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x55b64bf33310 <line:297:3, col:62>
|   | `-TextComment 0x55b64bf332e0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf34390 <line:299:3>
|   | `-TextComment 0x55b64bf33330 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf343b0 <col:4, line:300:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf34460 <line:299:15, line:300:3>
|   |   |-TextComment 0x55b64bf34410 <line:299:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55b64bf34430 <line:300:3> Text=" "
|   `-ParamCommandComment 0x55b64bf34480 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55b64bf34510 <col:15, col:46>
|       `-TextComment 0x55b64bf344e0 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x55b64be1e670 prev 0x55b64be1e4b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:43:1 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64be1e570 <line:45:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55b64be1e5e0 <<scratch space>:47:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x55b64be1eed8 <line:99:2, line:111:2>
|   |-CallExpr 0x55b64be1e808 <<scratch space>:49:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x55b64be1e7f0 <<scratch space>:49:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55b64be1e720 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55b64be167f0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x55b64be1e840 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55b64be1e748 <col:30> 'sys_snode_t *' lvalue ParmVar 0x55b64be1e5e0 'node' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x55b64be1e858 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |   `-ParenExpr 0x55b64be1e7d0 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x55b64be1e7a8 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x55b64be1e770 <col:23> 'int' 0
|   `-IfStmt 0x55b64be1ee70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55b64be1e9b8 <<scratch space>:51:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x55b64be1e8d8 <<scratch space>:51:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x55b64be1e8c0 <<scratch space>:51:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55b64be1e870 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be19c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x55b64be1e908 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b64be1e898 <col:37> 'sys_slist_t *' lvalue ParmVar 0x55b64be1e570 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x55b64be1e9a0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x55b64be1e980 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55b64be1e958 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55b64be1e920 <col:23> 'int' 0
|     |-CompoundStmt 0x55b64be1ebd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x55b64be1ea70 <<scratch space>:53:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x55b64be1ea58 <<scratch space>:53:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55b64be1e9e0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55b64be19708 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     | | |-ImplicitCastExpr 0x55b64be1eaa8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_slist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55b64be1ea08 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55b64be1e570 'list' 'sys_slist_t *'
|     | | `-ImplicitCastExpr 0x55b64be1eac0 <col:37> 'sys_snode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b64be1ea30 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55b64be1e5e0 'node' 'sys_snode_t *'
|     | `-CallExpr 0x55b64be1eb68 <<scratch space>:55:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x55b64be1eb50 <<scratch space>:55:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b64be1ead8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55b64be19450 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x55b64be1eba0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55b64be1eb00 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55b64be1e570 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x55b64be1ebb8 <col:37> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55b64be1eb28 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55b64be1e5e0 'node' 'sys_snode_t *'
|     `-CompoundStmt 0x55b64be1ee50 <line:105:10, line:110:3>
|       |-CallExpr 0x55b64be1ed08 <<scratch space>:57:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x55b64be1ecf0 <<scratch space>:57:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55b64be1ebf0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55b64be167f0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|       | |-CallExpr 0x55b64be1ec80 <line:59:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x55b64be1ec68 <<scratch space>:59:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55b64be1ec18 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be19c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|       | | `-ImplicitCastExpr 0x55b64be1ecb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_slist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x55b64be1ec40 <col:35> 'sys_slist_t *' lvalue ParmVar 0x55b64be1e570 'list' 'sys_slist_t *'
|       | `-ImplicitCastExpr 0x55b64be1ed40 <line:108:5> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x55b64be1ecc8 <col:5> 'sys_snode_t *' lvalue ParmVar 0x55b64be1e5e0 'node' 'sys_snode_t *'
|       `-CallExpr 0x55b64be1ede8 <<scratch space>:61:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x55b64be1edd0 <<scratch space>:61:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55b64be1ed58 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55b64be19708 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|         |-ImplicitCastExpr 0x55b64be1ee20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_slist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x55b64be1ed80 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55b64be1e570 'list' 'sys_slist_t *'
|         `-ImplicitCastExpr 0x55b64be1ee38 <col:37> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55b64be1eda8 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55b64be1e5e0 'node' 'sys_snode_t *'
|-FunctionDecl 0x55b64be1f160 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:320:1, line:321:29> line:320:20 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x55b64be1ef08 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x55b64be1ef80 <line:321:7, col:13> col:13 head 'void *'
| |-ParmVarDecl 0x55b64be1eff8 <col:19, col:25> col:25 tail 'void *'
| `-FullComment 0x55b64bf34ac0 <line:308:3, line:318:66>
|   |-ParagraphComment 0x55b64bf34600 <line:308:3>
|   | `-TextComment 0x55b64bf345d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf34620 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55b64bf34680 <col:10, col:41>
|   |   `-TextComment 0x55b64bf34650 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x55b64bf34770 <line:310:3, line:312:62>
|   | |-TextComment 0x55b64bf346a0 <line:310:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x55b64bf346c0 <line:311:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x55b64bf34710 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x55b64bf34730 <line:312:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf347c0 <line:314:3, col:48>
|   | `-TextComment 0x55b64bf34790 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x55b64bf34810 <line:316:3>
|   | `-TextComment 0x55b64bf347e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf34830 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf348e0 <line:316:15, line:317:3>
|   |   |-TextComment 0x55b64bf34890 <line:316:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55b64bf348b0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x55b64bf34900 <col:4, line:318:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf349b0 <line:317:15, line:318:3>
|   |   |-TextComment 0x55b64bf34960 <line:317:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x55b64bf34980 <line:318:3> Text=" "
|   `-ParamCommandComment 0x55b64bf349d0 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x55b64bf34a60 <col:15, col:66>
|       `-TextComment 0x55b64bf34a30 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x55b64be1f3b0 prev 0x55b64be1f160 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:63:1 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x55b64be1f228 <line:65:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55b64be1f2a0 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x55b64be1f318 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x55b64be1fa68 <col:31, line:127:42>
|   |-IfStmt 0x55b64be1f8d8 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55b64be1f5b0 <<scratch space>:67:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x55b64be1f4d0 <<scratch space>:67:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x55b64be1f4b8 <<scratch space>:67:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55b64be1f468 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be19c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x55b64be1f500 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55b64be1f490 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55b64be1f228 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x55b64be1f598 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x55b64be1f578 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55b64be1f550 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55b64be1f518 <col:23> 'int' 0
|   | |-CompoundStmt 0x55b64be1f708 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x55b64be1f6b8 <<scratch space>:69:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x55b64be1f6a0 <<scratch space>:69:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55b64be1f5d8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55b64be19450 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x55b64be1f6f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55b64be1f600 <col:30> 'sys_slist_t *' lvalue ParmVar 0x55b64be1f228 'list' 'sys_slist_t *'
|   | |   `-CStyleCastExpr 0x55b64be1f678 <line:120:6, col:31> 'sys_snode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x55b64be1f660 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55b64be1f628 <col:31> 'void *' lvalue ParmVar 0x55b64be1f2a0 'head' 'void *'
|   | `-CompoundStmt 0x55b64be1f8c0 <line:121:9, line:125:2>
|   |   `-CallExpr 0x55b64be1f888 <<scratch space>:73:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x55b64be1f870 <<scratch space>:73:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b64be1f720 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55b64be167f0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |     |-CallExpr 0x55b64be1f7b0 <line:75:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_snode_t *'
|   |     | |-ImplicitCastExpr 0x55b64be1f798 <<scratch space>:75:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x55b64be1f748 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be19c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | `-ImplicitCastExpr 0x55b64be1f7e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_slist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55b64be1f770 <col:34> 'sys_slist_t *' lvalue ParmVar 0x55b64be1f228 'list' 'sys_slist_t *'
|   |     `-CStyleCastExpr 0x55b64be1f848 <line:124:4, col:29> 'sys_snode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x55b64be1f830 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x55b64be1f7f8 <col:29> 'void *' lvalue ParmVar 0x55b64be1f2a0 'head' 'void *'
|   `-CallExpr 0x55b64be1f9f0 <<scratch space>:79:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x55b64be1f9d8 <<scratch space>:79:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64be1f910 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55b64be19708 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x55b64be1fa28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_slist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b64be1f938 <col:29> 'sys_slist_t *' lvalue ParmVar 0x55b64be1f228 'list' 'sys_slist_t *'
|     `-CStyleCastExpr 0x55b64be1f9b0 <line:127:10, col:35> 'sys_snode_t *' <BitCast>
|       `-ImplicitCastExpr 0x55b64be1f998 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64be1f960 <col:35> 'void *' lvalue ParmVar 0x55b64be1f318 'tail' 'void *'
|-FunctionDecl 0x55b64be1fc20 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:334:1, line:335:34> line:334:20 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x55b64be1fa98 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x55b64be1fb08 <line:335:7, col:20> col:20 list_to_append 'sys_slist_t *'
| `-FullComment 0x55b64bf34e70 <line:326:3, line:332:57>
|   |-ParagraphComment 0x55b64bf34b60 <line:326:3>
|   | `-TextComment 0x55b64bf34b30 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf34b80 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x55b64bf34be0 <col:10, col:65>
|   |   `-TextComment 0x55b64bf34bb0 <col:10, col:65> Text=" merge two slists, appending the second one to the first"
|   |-ParagraphComment 0x55b64bf34c50 <line:328:3, line:329:62>
|   | |-TextComment 0x55b64bf34c00 <line:328:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x55b64bf34c20 <line:329:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf34ca0 <line:331:3>
|   | `-TextComment 0x55b64bf34c70 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf34cc0 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf34d70 <line:331:15, line:332:3>
|   |   |-TextComment 0x55b64bf34d20 <line:331:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55b64bf34d40 <line:332:3> Text=" "
|   `-ParamCommandComment 0x55b64bf34d90 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x55b64bf34e20 <col:25, col:57>
|       `-TextComment 0x55b64bf34df0 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x55b64be1fde0 prev 0x55b64be1fc20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:84:1 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x55b64be1fce0 <line:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55b64be1fd50 <<scratch space>:88:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_slist_t *'
| `-CompoundStmt 0x55b64bda7db8 <line:135:2, line:141:2>
|   |-DeclStmt 0x55b64be1ff88 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x55b64be1fea0 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_snode_t *'
|   | `-VarDecl 0x55b64be1ff10 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_snode_t *'
|   |-BinaryOperator 0x55b64be20078 <line:137:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x55b64be1ffa0 <col:3> 'sys_snode_t *' lvalue Var 0x55b64be1fea0 'head' 'sys_snode_t *'
|   | `-CallExpr 0x55b64be20030 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x55b64be20018 <<scratch space>:92:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55b64be1ffc8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be199f0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x55b64be20060 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55b64be1fff0 <col:40> 'sys_slist_t *' lvalue ParmVar 0x55b64be1fd50 'list_to_append' 'sys_slist_t *'
|   |-BinaryOperator 0x55b64bda7a80 <line:138:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x55b64be200a0 <col:3> 'sys_snode_t *' lvalue Var 0x55b64be1ff10 'tail' 'sys_snode_t *'
|   | `-CallExpr 0x55b64bda7a38 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x55b64bda7a20 <<scratch space>:94:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55b64bda79d0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be19c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x55b64bda7a68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55b64bda79f8 <col:40> 'sys_slist_t *' lvalue ParmVar 0x55b64be1fd50 'list_to_append' 'sys_slist_t *'
|   |-CallExpr 0x55b64bda7bc0 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x55b64bda7ba8 <<scratch space>:96:1> 'void (*)(sys_slist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55b64bda7aa8 <col:1> 'void (sys_slist_t *, void *, void *)' Function 0x55b64be1f3b0 'sys_slist_append_list' 'void (sys_slist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x55b64bda7c00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55b64bda7ad0 <col:35> 'sys_slist_t *' lvalue ParmVar 0x55b64be1fce0 'list' 'sys_slist_t *'
|   | |-ImplicitCastExpr 0x55b64bda7c30 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x55b64bda7c18 <col:41> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b64bda7af8 <col:41> 'sys_snode_t *' lvalue Var 0x55b64be1fea0 'head' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x55b64bda7c60 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x55b64bda7c48 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55b64bda7b20 <col:47> 'sys_snode_t *' lvalue Var 0x55b64be1ff10 'tail' 'sys_snode_t *'
|   `-CallExpr 0x55b64bda7d40 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x55b64bda7d28 <<scratch space>:98:1> 'void (*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bda7c78 <col:1> 'void (sys_slist_t *)' Function 0x55b64be160a0 'sys_slist_init' 'void (sys_slist_t *)'
|     `-ImplicitCastExpr 0x55b64bda7d70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_slist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bda7ca0 <col:28> 'sys_slist_t *' lvalue ParmVar 0x55b64be1fd50 'list_to_append' 'sys_slist_t *'
|-FunctionDecl 0x55b64bda8010 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:348:1, line:350:26> line:348:20 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64bda7e00 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x55b64bda7e70 <line:349:9, col:22> col:22 prev 'sys_snode_t *'
| |-ParmVarDecl 0x55b64bda7ee0 <line:350:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x55b64bf352e0 <line:340:3, line:346:46>
|   |-ParagraphComment 0x55b64bf34f10 <line:340:3>
|   | `-TextComment 0x55b64bf34ee0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf34f30 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55b64bf34f90 <col:10, col:41>
|   |   `-TextComment 0x55b64bf34f60 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x55b64bf34fe0 <line:342:3, col:62>
|   | `-TextComment 0x55b64bf34fb0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf35030 <line:344:3>
|   | `-TextComment 0x55b64bf35000 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf35050 <col:4, line:345:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf35100 <line:344:15, line:345:3>
|   |   |-TextComment 0x55b64bf350b0 <line:344:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55b64bf350d0 <line:345:3> Text=" "
|   |-ParamCommandComment 0x55b64bf35120 <col:4, line:346:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf351d0 <line:345:15, line:346:3>
|   |   |-TextComment 0x55b64bf35180 <line:345:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x55b64bf351a0 <line:346:3> Text=" "
|   `-ParamCommandComment 0x55b64bf351f0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x55b64bf35280 <col:15, col:46>
|       `-TextComment 0x55b64bf35250 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x55b64bda8250 prev 0x55b64bda8010 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:100:1 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64bda80d8 <line:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55b64bda8148 <<scratch space>:104:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_snode_t *'
| |-ParmVarDecl 0x55b64bda81b8 <<scratch space>:106:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x55b64be231c8 <line:148:2, line:158:2>
|   `-IfStmt 0x55b64be23168 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55b64bda83e0 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x55b64bda83b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_snode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x55b64bda8308 <col:7> 'sys_snode_t *' lvalue ParmVar 0x55b64bda8148 'prev' 'sys_snode_t *'
|     | `-ImplicitCastExpr 0x55b64bda83c8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x55b64bda8390 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55b64bda8368 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55b64bda8330 <col:23> 'int' 0
|     |-CompoundStmt 0x55b64bda8500 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x55b64bda8498 <<scratch space>:108:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x55b64bda8480 <<scratch space>:108:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b64bda8408 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55b64be1cf80 'sys_slist_prepend' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x55b64bda84d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55b64bda8430 <col:32> 'sys_slist_t *' lvalue ParmVar 0x55b64bda80d8 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x55b64bda84e8 <col:38> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55b64bda8458 <col:38> 'sys_snode_t *' lvalue ParmVar 0x55b64bda81b8 'node' 'sys_snode_t *'
|     `-IfStmt 0x55b64be23130 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x55b64bda8660 <<scratch space>:110:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x55b64bda8580 <<scratch space>:110:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x55b64bda8568 <<scratch space>:110:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55b64bda8518 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55b64be164f0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       | | `-ImplicitCastExpr 0x55b64bda85b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_snode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x55b64bda8540 <col:42> 'sys_snode_t *' lvalue ParmVar 0x55b64bda8148 'prev' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x55b64bda8648 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x55b64bda8628 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x55b64bda8600 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x55b64bda85c8 <col:23> 'int' 0
|       |-CompoundStmt 0x55b64bda8780 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x55b64bda8718 <<scratch space>:112:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x55b64bda8700 <<scratch space>:112:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55b64bda8688 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55b64be1e670 'sys_slist_append' 'void (sys_slist_t *, sys_snode_t *)'
|       |   |-ImplicitCastExpr 0x55b64bda8750 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_slist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x55b64bda86b0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55b64bda80d8 'list' 'sys_slist_t *'
|       |   `-ImplicitCastExpr 0x55b64bda8768 <col:37> 'sys_snode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55b64bda86d8 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55b64bda81b8 'node' 'sys_snode_t *'
|       `-CompoundStmt 0x55b64be23110 <line:153:10, line:157:3>
|         |-CallExpr 0x55b64bda88b0 <<scratch space>:114:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x55b64bda8898 <<scratch space>:114:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x55b64bda8798 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55b64be167f0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|         | |-ImplicitCastExpr 0x55b64bda88e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_snode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x55b64bda87c0 <col:31> 'sys_snode_t *' lvalue ParmVar 0x55b64bda81b8 'node' 'sys_snode_t *'
|         | `-CallExpr 0x55b64bda8850 <<scratch space>:116:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_snode_t *'
|         |   |-ImplicitCastExpr 0x55b64bda8838 <<scratch space>:116:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x55b64bda87e8 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55b64be164f0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|         |   `-ImplicitCastExpr 0x55b64bda8880 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_snode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x55b64bda8810 <col:33> 'sys_snode_t *' lvalue ParmVar 0x55b64bda8148 'prev' 'sys_snode_t *'
|         `-CallExpr 0x55b64bda8990 <<scratch space>:118:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x55b64bda8978 <<scratch space>:118:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x55b64bda8900 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55b64be167f0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|           |-ImplicitCastExpr 0x55b64be230e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_snode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x55b64bda8928 <col:31> 'sys_snode_t *' lvalue ParmVar 0x55b64bda8148 'prev' 'sys_snode_t *'
|           `-ImplicitCastExpr 0x55b64be230f8 <col:37> 'sys_snode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x55b64bda8950 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55b64bda81b8 'node' 'sys_snode_t *'
|-FunctionDecl 0x55b64be23278 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:364:1, col:69> col:28 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55b64be231f0 <col:52, col:65> col:65 list 'sys_slist_t *'
| `-FullComment 0x55b64bf356a0 <line:355:3, line:362:50>
|   |-ParagraphComment 0x55b64bf35380 <line:355:3>
|   | `-TextComment 0x55b64bf35350 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf353a0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55b64bf35400 <col:10, col:59>
|   |   `-TextComment 0x55b64bf353d0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x55b64bf35470 <line:357:3, line:358:62>
|   | |-TextComment 0x55b64bf35420 <line:357:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x55b64bf35440 <line:358:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf354c0 <line:360:3>
|   | `-TextComment 0x55b64bf35490 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf354e0 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf35570 <col:15, col:46>
|   |   `-TextComment 0x55b64bf35540 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x55b64bf355c0 <line:362:3>
|   | `-TextComment 0x55b64bf35590 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf355e0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x55b64bf35640 <col:11, col:50>
|       `-TextComment 0x55b64bf35610 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x55b64be233b8 prev 0x55b64be23278 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:122:1 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55b64be23330 <line:124:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_slist_t *'
| `-CompoundStmt 0x55b64be23a58 <line:163:2, line:175:2>
|   |-DeclStmt 0x55b64be23580 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x55b64be23470 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_snode_t *' cinit
|   |   `-CallExpr 0x55b64be23538 <<scratch space>:128:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_snode_t *'
|   |     |-ImplicitCastExpr 0x55b64be23520 <<scratch space>:128:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b64be234d0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be199f0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |     `-ImplicitCastExpr 0x55b64be23568 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_slist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55b64be234f8 <col:35> 'sys_slist_t *' lvalue ParmVar 0x55b64be23330 'list' 'sys_slist_t *'
|   |-CallExpr 0x55b64be236b0 <<scratch space>:130:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x55b64be23698 <<scratch space>:130:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55b64be23598 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55b64be19450 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x55b64be236e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55b64be235c0 <col:30> 'sys_slist_t *' lvalue ParmVar 0x55b64be23330 'list' 'sys_slist_t *'
|   | `-CallExpr 0x55b64be23650 <<scratch space>:132:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x55b64be23638 <<scratch space>:132:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55b64be235e8 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55b64be164f0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   `-ImplicitCastExpr 0x55b64be23680 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55b64be23610 <col:33> 'sys_snode_t *' lvalue Var 0x55b64be23470 'node' 'sys_snode_t *'
|   |-IfStmt 0x55b64be23998 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55b64be237f0 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x55b64be23768 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x55b64be23750 <<scratch space>:134:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55b64be23700 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be19c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x55b64be23798 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55b64be23728 <col:37> 'sys_slist_t *' lvalue ParmVar 0x55b64be23330 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x55b64be237d8 <col:46> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b64be237b0 <col:46> 'sys_snode_t *' lvalue Var 0x55b64be23470 'node' 'sys_snode_t *'
|   | |-CompoundStmt 0x55b64be23980 <col:52, line:172:3>
|   | | `-CallExpr 0x55b64be23930 <<scratch space>:136:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x55b64be23918 <<scratch space>:136:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55b64be23818 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55b64be19708 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x55b64be23968 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55b64be23840 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55b64be23330 'list' 'sys_slist_t *'
|   | |   `-CallExpr 0x55b64be238d0 <<scratch space>:138:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_snode_t *'
|   | |     |-ImplicitCastExpr 0x55b64be238b8 <<scratch space>:138:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x55b64be23868 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be199f0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |     `-ImplicitCastExpr 0x55b64be23900 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_slist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55b64be23890 <col:35> 'sys_slist_t *' lvalue ParmVar 0x55b64be23330 'list' 'sys_slist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55b64be23a10 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x55b64be239f8 <col:10> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64be239d0 <col:10> 'sys_snode_t *' lvalue Var 0x55b64be23470 'node' 'sys_snode_t *'
|-FunctionDecl 0x55b64be23b20 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:377:1, col:59> col:28 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55b64be23a98 <col:42, col:55> col:55 list 'sys_slist_t *'
| `-FullComment 0x55b64bf35a40 <line:369:3, line:375:69>
|   |-ParagraphComment 0x55b64bf35740 <line:369:3>
|   | `-TextComment 0x55b64bf35710 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf35760 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55b64bf357c0 <col:10, col:59>
|   |   `-TextComment 0x55b64bf35790 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x55b64bf35810 <line:371:3, col:62>
|   | `-TextComment 0x55b64bf357e0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf35860 <line:373:3>
|   | `-TextComment 0x55b64bf35830 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf35880 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf35910 <col:15, col:46>
|   |   `-TextComment 0x55b64bf358e0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x55b64bf35960 <line:375:3>
|   | `-TextComment 0x55b64bf35930 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf35980 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x55b64bf359e0 <col:11, col:69>
|       `-TextComment 0x55b64bf359b0 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x55b64be23c60 prev 0x55b64be23b20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:142:1 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55b64be23bd8 <line:144:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_slist_t *'
| `-CompoundStmt 0x55b64be23fe8 <line:180:2, line:183:2>
|   `-ReturnStmt 0x55b64be23fa8 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x55b64be23f78 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x55b64be23f48 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x55b64be23dd0 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x55b64be23db8 <<scratch space>:146:1> 'bool (*)(sys_slist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55b64be23d08 <col:1> 'bool (sys_slist_t *)' Function 0x55b64be1a000 'sys_slist_is_empty' 'bool (sys_slist_t *)'
|       |   `-ImplicitCastExpr 0x55b64be23e00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_slist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55b64be23d30 <col:39> 'sys_slist_t *' lvalue ParmVar 0x55b64be23bd8 'list' 'sys_slist_t *'
|       |-ImplicitCastExpr 0x55b64be23f60 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       | `-ParenExpr 0x55b64be23e78 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x55b64be23e50 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x55b64be23e18 <col:23> 'int' 0
|       `-CallExpr 0x55b64be23f00 <<scratch space>:148:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|         |-ImplicitCastExpr 0x55b64be23ee8 <<scratch space>:148:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55b64be23e98 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be233b8 'sys_slist_get_not_empty' 'sys_snode_t *(sys_slist_t *)'
|         `-ImplicitCastExpr 0x55b64be23f30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_slist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55b64be23ec0 <col:38> 'sys_slist_t *' lvalue ParmVar 0x55b64be23bd8 'list' 'sys_slist_t *'
|-FunctionDecl 0x55b64be24198 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:391:1, line:393:26> line:391:20 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64be24010 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x55b64be24080 <line:392:9, col:22> col:22 prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x55b64be24100 <line:393:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x55b64bf35ee0 <line:382:3, line:389:46>
|   |-ParagraphComment 0x55b64bf35ae0 <line:382:3>
|   | `-TextComment 0x55b64bf35ab0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf35b00 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x55b64bf35b60 <col:10, col:23>
|   |   `-TextComment 0x55b64bf35b30 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x55b64bf35bb0 <line:384:3, col:62>
|   | `-TextComment 0x55b64bf35b80 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf35c00 <line:386:3>
|   | `-TextComment 0x55b64bf35bd0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf35c20 <col:4, line:387:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf35cd0 <line:386:15, line:387:3>
|   |   |-TextComment 0x55b64bf35c80 <line:386:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55b64bf35ca0 <line:387:3> Text=" "
|   |-ParamCommandComment 0x55b64bf35cf0 <col:4, line:389:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf35dd0 <line:387:20, line:389:3>
|   |   |-TextComment 0x55b64bf35d50 <line:387:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x55b64bf35d70 <line:388:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x55b64bf35d90 <line:389:3> Text=" "
|   `-ParamCommandComment 0x55b64bf35df0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x55b64bf35e80 <col:15, col:46>
|       `-TextComment 0x55b64bf35e50 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x55b64be243d8 prev 0x55b64be24198 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:150:1 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64be24260 <line:152:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55b64be242d0 <<scratch space>:154:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x55b64be24340 <<scratch space>:156:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x55b64be24f88 <line:190:2, line:212:2>
|   |-IfStmt 0x55b64be24dd0 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55b64be24568 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x55b64be24538 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55b64be24490 <col:7> 'sys_snode_t *' lvalue ParmVar 0x55b64be242d0 'prev_node' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x55b64be24550 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x55b64be24518 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55b64be244f0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55b64be244b8 <col:23> 'int' 0
|   | |-CompoundStmt 0x55b64be249c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x55b64be246a8 <<scratch space>:158:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x55b64be24690 <<scratch space>:158:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55b64be24590 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55b64be19450 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | | | |-ImplicitCastExpr 0x55b64be246e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_slist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55b64be245b8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55b64be24260 'list' 'sys_slist_t *'
|   | | | `-CallExpr 0x55b64be24648 <<scratch space>:160:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_snode_t *'
|   | | |   |-ImplicitCastExpr 0x55b64be24630 <<scratch space>:160:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x55b64be245e0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55b64be164f0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   | | |   `-ImplicitCastExpr 0x55b64be24678 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_snode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55b64be24608 <col:33> 'sys_snode_t *' lvalue ParmVar 0x55b64be24340 'node' 'sys_snode_t *'
|   | | `-IfStmt 0x55b64be24990 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x55b64be247e8 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x55b64be24760 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_snode_t *'
|   | |   | | |-ImplicitCastExpr 0x55b64be24748 <<scratch space>:162:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x55b64be246f8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be19c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | |   | | `-ImplicitCastExpr 0x55b64be24790 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_slist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x55b64be24720 <col:38> 'sys_slist_t *' lvalue ParmVar 0x55b64be24260 'list' 'sys_slist_t *'
|   | |   | `-ImplicitCastExpr 0x55b64be247d0 <col:47> 'sys_snode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x55b64be247a8 <col:47> 'sys_snode_t *' lvalue ParmVar 0x55b64be24340 'node' 'sys_snode_t *'
|   | |   |-CompoundStmt 0x55b64be24978 <col:53, line:199:4>
|   | |   | `-CallExpr 0x55b64be24928 <<scratch space>:164:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x55b64be24910 <<scratch space>:164:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x55b64be24810 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55b64be19708 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |   |-ImplicitCastExpr 0x55b64be24960 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_slist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x55b64be24838 <col:32> 'sys_slist_t *' lvalue ParmVar 0x55b64be24260 'list' 'sys_slist_t *'
|   | |   |   `-CallExpr 0x55b64be248c8 <<scratch space>:166:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_snode_t *'
|   | |   |     |-ImplicitCastExpr 0x55b64be248b0 <<scratch space>:166:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x55b64be24860 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be199f0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   |     `-ImplicitCastExpr 0x55b64be248f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_slist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x55b64be24888 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55b64be24260 'list' 'sys_slist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x55b64be24db0 <line:200:10, line:209:3>
|   |   |-CallExpr 0x55b64be24b00 <<scratch space>:168:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x55b64be24ae8 <<scratch space>:168:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x55b64be249e8 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55b64be167f0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |   | |-ImplicitCastExpr 0x55b64be24b38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_snode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x55b64be24a10 <col:31> 'sys_snode_t *' lvalue ParmVar 0x55b64be242d0 'prev_node' 'sys_snode_t *'
|   |   | `-CallExpr 0x55b64be24aa0 <<scratch space>:170:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_snode_t *'
|   |   |   |-ImplicitCastExpr 0x55b64be24a88 <<scratch space>:170:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x55b64be24a38 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55b64be164f0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   |   `-ImplicitCastExpr 0x55b64be24ad0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_snode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55b64be24a60 <col:33> 'sys_snode_t *' lvalue ParmVar 0x55b64be24340 'node' 'sys_snode_t *'
|   |   `-IfStmt 0x55b64be24d78 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x55b64be24c40 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x55b64be24bb8 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_snode_t *'
|   |     | | |-ImplicitCastExpr 0x55b64be24ba0 <<scratch space>:172:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x55b64be24b50 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be19c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | | `-ImplicitCastExpr 0x55b64be24be8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_slist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55b64be24b78 <col:38> 'sys_slist_t *' lvalue ParmVar 0x55b64be24260 'list' 'sys_slist_t *'
|   |     | `-ImplicitCastExpr 0x55b64be24c28 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55b64be24c00 <col:47> 'sys_snode_t *' lvalue ParmVar 0x55b64be24340 'node' 'sys_snode_t *'
|   |     |-CompoundStmt 0x55b64be24d60 <col:53, line:208:4>
|   |     | `-CallExpr 0x55b64be24cf8 <<scratch space>:174:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x55b64be24ce0 <<scratch space>:174:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x55b64be24c68 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55b64be19708 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   |     |   |-ImplicitCastExpr 0x55b64be24d30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_slist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x55b64be24c90 <col:32> 'sys_slist_t *' lvalue ParmVar 0x55b64be24260 'list' 'sys_slist_t *'
|   |     |   `-ImplicitCastExpr 0x55b64be24d48 <line:207:13> 'sys_snode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55b64be24cb8 <col:13> 'sys_snode_t *' lvalue ParmVar 0x55b64be242d0 'prev_node' 'sys_snode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x55b64be24ef0 <<scratch space>:176:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x55b64be24ed8 <<scratch space>:176:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64be24e08 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55b64be167f0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x55b64be24f28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_snode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b64be24e30 <col:30> 'sys_snode_t *' lvalue ParmVar 0x55b64be24340 'node' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x55b64be24f40 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       `-ParenExpr 0x55b64be24eb8 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x55b64be24e90 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x55b64be24e58 <col:23> 'int' 0
|-FunctionDecl 0x55b64be25170 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:407:1, line:408:28> line:407:20 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64be24fb8 <col:46, col:59> col:59 list 'sys_slist_t *'
| |-ParmVarDecl 0x55b64be25028 <line:408:11, col:24> col:24 node 'sys_snode_t *'
| `-FullComment 0x55b64bf36350 <line:398:3, line:405:35>
|   |-ParagraphComment 0x55b64bf35f80 <line:398:3>
|   | `-TextComment 0x55b64bf35f50 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf35fa0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55b64bf36000 <col:10, col:44>
|   |   `-TextComment 0x55b64bf35fd0 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x55b64bf36050 <line:400:3, col:62>
|   | `-TextComment 0x55b64bf36020 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf360a0 <line:402:3>
|   | `-TextComment 0x55b64bf36070 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf360c0 <col:4, line:403:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf36170 <line:402:15, line:403:3>
|   |   |-TextComment 0x55b64bf36120 <line:402:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55b64bf36140 <line:403:3> Text=" "
|   |-ParamCommandComment 0x55b64bf36190 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf36220 <col:15, col:60>
|   |   `-TextComment 0x55b64bf361f0 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x55b64bf36270 <line:405:3>
|   | `-TextComment 0x55b64bf36240 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf36290 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf362f0 <col:11, col:35>
|       `-TextComment 0x55b64bf362c0 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x55b64be25330 prev 0x55b64be25170 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:178:1 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55b64be25230 <line:180:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55b64be252a0 <<scratch space>:182:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_snode_t *'
| `-CompoundStmt 0x55b64be25cd8 <line:218:2, line:233:2>
|   |-DeclStmt 0x55b64be254e8 <<scratch space>:184:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x55b64be253f0 <<scratch space>:184:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_snode_t *' cinit
|   |   `-ImplicitCastExpr 0x55b64be254d0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |     `-ParenExpr 0x55b64be254b0 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x55b64be25488 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x55b64be25450 <col:23> 'int' 0
|   |-DeclStmt 0x55b64be25570 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x55b64be25510 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_snode_t *'
|   |-ForStmt 0x55b64be25c20 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x55b64be25660 <line:222:42, line:15:47> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x55b64be25588 <line:222:42> 'sys_snode_t *' lvalue Var 0x55b64be25510 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x55b64be25618 <<scratch space>:188:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x55b64be25600 <<scratch space>:188:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55b64be255b0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55b64be199f0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   `-ImplicitCastExpr 0x55b64be25648 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_slist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55b64be255d8 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55b64be25230 'list' 'sys_slist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55b64be25760 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x55b64be25730 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55b64be25688 <col:42> 'sys_snode_t *' lvalue Var 0x55b64be25510 'test' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x55b64be25748 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x55b64be25710 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55b64be256e8 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55b64be256b0 <col:23> 'int' 0
|   | |-BinaryOperator 0x55b64be25860 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x55b64be25788 <line:222:42> 'sys_snode_t *' lvalue Var 0x55b64be25510 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x55b64be25818 <<scratch space>:190:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x55b64be25800 <<scratch space>:190:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55b64be257b0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55b64be1c938 'sys_slist_peek_next' 'sys_snode_t *(sys_snode_t *)'
|   | |   `-ImplicitCastExpr 0x55b64be25848 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55b64be257d8 <col:42> 'sys_snode_t *' lvalue Var 0x55b64be25510 'test' 'sys_snode_t *'
|   | `-CompoundStmt 0x55b64be25c00 <col:48, line:230:3>
|   |   |-IfStmt 0x55b64be25b38 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x55b64be25908 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x55b64be258d8 <col:8> 'sys_snode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x55b64be25888 <col:8> 'sys_snode_t *' lvalue Var 0x55b64be25510 'test' 'sys_snode_t *'
|   |   | | `-ImplicitCastExpr 0x55b64be258f0 <col:16> 'sys_snode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55b64be258b0 <col:16> 'sys_snode_t *' lvalue ParmVar 0x55b64be252a0 'node' 'sys_snode_t *'
|   |   | |-CompoundStmt 0x55b64be25b18 <col:22, line:227:4>
|   |   | | |-CallExpr 0x55b64be25a40 <<scratch space>:192:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x55b64be25a28 <<scratch space>:192:1> 'void (*)(sys_slist_t *, sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x55b64be25930 <col:1> 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' Function 0x55b64be243d8 'sys_slist_remove' 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)'
|   |   | | | |-ImplicitCastExpr 0x55b64be25a80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_slist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x55b64be25958 <col:32> 'sys_slist_t *' lvalue ParmVar 0x55b64be25230 'list' 'sys_slist_t *'
|   |   | | | |-ImplicitCastExpr 0x55b64be25a98 <col:38> 'sys_snode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x55b64be25980 <col:38> 'sys_snode_t *' lvalue Var 0x55b64be253f0 'prev' 'sys_snode_t *'
|   |   | | | `-ImplicitCastExpr 0x55b64be25ab0 <line:225:11> 'sys_snode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x55b64be259a8 <col:11> 'sys_snode_t *' lvalue ParmVar 0x55b64be252a0 'node' 'sys_snode_t *'
|   |   | | `-ReturnStmt 0x55b64be25b00 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x55b64be25ae8 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x55b64be25ac8 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x55b64be25bd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_snode_t *' '='
|   |     |-DeclRefExpr 0x55b64be25b70 <col:4> 'sys_snode_t *' lvalue Var 0x55b64be253f0 'prev' 'sys_snode_t *'
|   |     `-ImplicitCastExpr 0x55b64be25bc0 <col:11> 'sys_snode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55b64be25b98 <col:11> 'sys_snode_t *' lvalue Var 0x55b64be25510 'test' 'sys_snode_t *'
|   `-ReturnStmt 0x55b64be25c90 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x55b64be25c78 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x55b64be25c58 <col:16> 'int' 0
|-TypedefDecl 0x55b64be25d40 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:29:1, col:15> col:15 referenced unative_t 'u64_t':'unsigned long long'
| `-TypedefType 0x55b64be25d10 'u64_t' sugar
|   |-Typedef 0x55b64bd93eb0 'u64_t'
|   `-BuiltinType 0x55b64bd0f870 'unsigned long long'
|-RecordDecl 0x55b64be25d98 <line:34:1, line:36:1> line:34:8 struct _sfnode definition
| `-FieldDecl 0x55b64be25e70 <line:35:2, col:12> col:12 referenced next_and_flags 'unative_t':'unsigned long long'
|-TypedefDecl 0x55b64be25f10 <line:38:1, col:24> col:24 referenced sys_sfnode_t 'struct _sfnode':'struct _sfnode'
| `-ElaboratedType 0x55b64be25ec0 'struct _sfnode' sugar
|   `-RecordType 0x55b64be25e20 'struct _sfnode'
|     `-Record 0x55b64be25d98 '_sfnode'
|-RecordDecl 0x55b64be25f68 <line:40:1, line:43:1> line:40:8 struct _sflist definition
| |-FieldDecl 0x55b64be26098 <line:41:2, col:16> col:16 referenced head 'sys_sfnode_t *'
| `-FieldDecl 0x55b64be2b8b0 <line:42:2, col:16> col:16 referenced tail 'sys_sfnode_t *'
|-TypedefDecl 0x55b64be2b950 <line:45:1, col:24> col:24 referenced sys_sflist_t 'struct _sflist':'struct _sflist'
| `-ElaboratedType 0x55b64be2b900 'struct _sflist' sugar
|   `-RecordType 0x55b64be25ff0 'struct _sflist'
|     `-Record 0x55b64be25f68 '_sflist'
|-FunctionDecl 0x55b64be2bc60 <line:196:1, line:200:1> line:196:20 used sys_sflist_init 'void (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55b64be2bb58 <col:36, col:50> col:50 used list 'sys_sflist_t *'
| |-CompoundStmt 0x55b64be2bf78 <line:197:1, line:200:1>
| | |-BinaryOperator 0x55b64be2be18 <line:198:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| | | |-MemberExpr 0x55b64be2bd48 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:198:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x55b64be26098
| | | | `-ImplicitCastExpr 0x55b64be2bd30 <col:2> 'sys_sflist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55b64be2bd08 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x55b64be2bb58 'list' 'sys_sflist_t *'
| | | `-ImplicitCastExpr 0x55b64be2be00 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| | |   `-ParenExpr 0x55b64be2bde0 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x55b64be2bdb8 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x55b64be2bd80 <col:23> 'int' 0
| | `-BinaryOperator 0x55b64be2bf50 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| |   |-MemberExpr 0x55b64be2be80 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x55b64be2b8b0
| |   | `-ImplicitCastExpr 0x55b64be2be68 <col:2> 'sys_sflist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55b64be2be40 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x55b64be2bb58 'list' 'sys_sflist_t *'
| |   `-ImplicitCastExpr 0x55b64be2bf38 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| |     `-ParenExpr 0x55b64be2bf18 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x55b64be2bef0 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x55b64be2beb8 <col:23> 'int' 0
| `-FullComment 0x55b64bf375e0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:192:3, line:194:50>
|   |-ParagraphComment 0x55b64bf37420 <line:192:3>
|   | `-TextComment 0x55b64bf373f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf37440 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55b64bf374a0 <col:10, col:27>
|   |   `-TextComment 0x55b64bf37470 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x55b64bf374f0 <line:194:3>
|   | `-TextComment 0x55b64bf374c0 <col:3> Text=" "
|   `-ParamCommandComment 0x55b64bf37510 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x55b64bf375a0 <col:15, col:50>
|       `-TextComment 0x55b64bf37570 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x55b64be2c0b0 <line:205:1, line:208:1> line:205:29 used z_sfnode_next_peek 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be2bfa8 <col:48, col:62> col:62 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55b64be2c308 <line:206:1, line:208:1>
|   `-ReturnStmt 0x55b64be2c2f0 <line:207:2, col:71>
|     `-CStyleCastExpr 0x55b64be2c2c8 <col:9, col:71> 'sys_sfnode_t *' <IntegralToPointer>
|       `-ParenExpr 0x55b64be2c2a8 <col:25, col:71> 'unsigned long long'
|         `-BinaryOperator 0x55b64be2c240 <col:26, line:203:31> 'unsigned long long' '&'
|           |-ImplicitCastExpr 0x55b64be2c210 <line:207:26, col:32> 'unative_t':'unsigned long long' <LValueToRValue>
|           | `-MemberExpr 0x55b64be2c198 <col:26, col:32> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x55b64be25e70
|           |   `-ImplicitCastExpr 0x55b64be2c180 <col:26> 'sys_sfnode_t *' <LValueToRValue>
|           |     `-DeclRefExpr 0x55b64be2c158 <col:26> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be2bfa8 'node' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x55b64be2c228 <col:49, line:203:31> 'unsigned long long' <IntegralCast>
|             `-UnaryOperator 0x55b64be2c1f0 <line:207:49, line:203:31> 'unsigned long' prefix '~'
|               `-IntegerLiteral 0x55b64be2c1d0 <col:31> 'unsigned long' 3
|-FunctionDecl 0x55b64be2c430 <line:210:1, col:59> col:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| `-ParmVarDecl 0x55b64be2c330 <col:41, col:55> col:55 node 'sys_sfnode_t *'
|-FunctionDecl 0x55b64be2c670 <line:212:1, line:218:1> line:212:20 used z_sfnode_next_set 'void (sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be2c4e8 <col:38, col:52> col:52 used parent 'sys_sfnode_t *'
| |-ParmVarDecl 0x55b64be2c558 <line:213:12, col:26> col:26 used child 'sys_sfnode_t *'
| `-CompoundStmt 0x55b64be2da68 <line:214:1, line:218:1>
|   |-DeclStmt 0x55b64be2c898 <line:215:2, col:47>
|   | `-VarDecl 0x55b64be2c730 <col:2, col:46> col:7 used cur_flags 'u8_t':'unsigned char' cinit
|   |   `-CallExpr 0x55b64be2c850 <col:19, col:46> 'u8_t':'unsigned char'
|   |     |-ImplicitCastExpr 0x55b64be2c838 <col:19> 'u8_t (*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b64be2c790 <col:19> 'u8_t (sys_sfnode_t *)' Function 0x55b64be2c430 'sys_sfnode_flags_get' 'u8_t (sys_sfnode_t *)'
|   |     `-ImplicitCastExpr 0x55b64be2c880 <col:40> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55b64be2c7b8 <col:40> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be2c4e8 'parent' 'sys_sfnode_t *'
|   `-BinaryOperator 0x55b64be2da40 <line:217:2, col:50> 'unative_t':'unsigned long long' '='
|     |-MemberExpr 0x55b64be2d910 <col:2, col:10> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x55b64be25e70
|     | `-ImplicitCastExpr 0x55b64be2d8f8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b64be2d8d0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be2c4e8 'parent' 'sys_sfnode_t *'
|     `-BinaryOperator 0x55b64be2da18 <col:27, col:50> 'unsigned long long' '|'
|       |-ImplicitCastExpr 0x55b64be2da00 <col:27> 'unsigned long long' <IntegralCast>
|       | `-ImplicitCastExpr 0x55b64be2d9e8 <col:27> 'u8_t':'unsigned char' <LValueToRValue>
|       |   `-DeclRefExpr 0x55b64be2d948 <col:27> 'u8_t':'unsigned char' lvalue Var 0x55b64be2c730 'cur_flags' 'u8_t':'unsigned char'
|       `-CStyleCastExpr 0x55b64be2d9c0 <col:39, col:50> 'unative_t':'unsigned long long' <PointerToIntegral>
|         `-ImplicitCastExpr 0x55b64be2d9a8 <col:50> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55b64be2d970 <col:50> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be2c558 'child' 'sys_sfnode_t *'
|-FunctionDecl 0x55b64be2dc20 <line:220:1, line:223:1> line:220:20 used z_sflist_head_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be2da98 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55b64be2db08 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55b64be2ddb0 <line:221:1, line:223:1>
|   `-BinaryOperator 0x55b64be2dd88 <line:222:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x55b64be2dd10 <col:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x55b64be26098
|     | `-ImplicitCastExpr 0x55b64be2dcf8 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b64be2dcd0 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x55b64be2da98 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x55b64be2dd70 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64be2dd48 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be2db08 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55b64be2ded8 <line:225:1, line:228:1> line:225:20 used z_sflist_tail_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be2ddd8 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55b64be2de48 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55b64be2e098 <line:226:1, line:228:1>
|   `-BinaryOperator 0x55b64be2e040 <line:227:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x55b64be2dfc8 <col:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x55b64be2b8b0
|     | `-ImplicitCastExpr 0x55b64be2dfb0 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b64be2df88 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x55b64be2ddd8 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x55b64be2e028 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64be2e000 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be2de48 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55b64be2e1c0 <line:237:1, line:240:1> line:237:29 used sys_sflist_peek_head 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55b64be2e0c0 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x55b64be2e338 <line:238:1, line:240:1>
| | `-ReturnStmt 0x55b64be2e2f8 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x55b64be2e2e0 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x55b64be2e2a8 <col:9, col:15> 'sys_sfnode_t *' lvalue ->head 0x55b64be26098
| |       `-ImplicitCastExpr 0x55b64be2e290 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55b64be2e268 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x55b64be2e0c0 'list' 'sys_sflist_t *'
| `-FullComment 0x55b64bf37920 <line:231:3, line:235:68>
|   |-ParagraphComment 0x55b64bf37680 <line:231:3>
|   | `-TextComment 0x55b64bf37650 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf376a0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf37700 <col:10, col:43>
|   |   `-TextComment 0x55b64bf376d0 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x55b64bf37750 <line:233:3>
|   | `-TextComment 0x55b64bf37720 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf37770 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf37800 <col:15, col:62>
|   |   `-TextComment 0x55b64bf377d0 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x55b64bf37850 <line:235:3>
|   | `-TextComment 0x55b64bf37820 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf37870 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x55b64bf378d0 <col:11, col:68>
|       `-TextComment 0x55b64bf378a0 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x55b64be2e3e8 <line:249:1, line:252:1> line:249:29 used sys_sflist_peek_tail 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55b64be2e360 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x55b64be2e568 <line:250:1, line:252:1>
| | `-ReturnStmt 0x55b64be2e520 <line:251:2, col:15>
| |   `-ImplicitCastExpr 0x55b64be2e508 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x55b64be2e4d0 <col:9, col:15> 'sys_sfnode_t *' lvalue ->tail 0x55b64be2b8b0
| |       `-ImplicitCastExpr 0x55b64be2e4b8 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55b64be2e490 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x55b64be2e360 'list' 'sys_sflist_t *'
| `-FullComment 0x55b64bf37c60 <line:243:3, line:247:67>
|   |-ParagraphComment 0x55b64bf379c0 <line:243:3>
|   | `-TextComment 0x55b64bf37990 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf379e0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55b64bf37a40 <col:10, col:42>
|   |   `-TextComment 0x55b64bf37a10 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x55b64bf37a90 <line:245:3>
|   | `-TextComment 0x55b64bf37a60 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf37ab0 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf37b40 <col:15, col:61>
|   |   `-TextComment 0x55b64bf37b10 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x55b64bf37b90 <line:247:3>
|   | `-TextComment 0x55b64bf37b60 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf37bb0 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x55b64bf37c10 <col:11, col:67>
|       `-TextComment 0x55b64bf37be0 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x55b64be2e618 prev 0x55b64be2c430 <line:264:1, line:267:1> line:264:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be2e590 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-CompoundStmt 0x55b64be2e808 <line:265:1, line:267:1>
| | `-ReturnStmt 0x55b64be2e7c8 <line:266:2, line:203:31>
| |   `-ImplicitCastExpr 0x55b64be2e7b0 <line:266:9, line:203:31> 'u8_t':'unsigned char' <IntegralCast>
| |     `-BinaryOperator 0x55b64be2e788 <line:266:9, line:203:31> 'unsigned long long' '&'
| |       |-ImplicitCastExpr 0x55b64be2e758 <line:266:9, col:15> 'unative_t':'unsigned long long' <LValueToRValue>
| |       | `-MemberExpr 0x55b64be2e700 <col:9, col:15> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x55b64be25e70
| |       |   `-ImplicitCastExpr 0x55b64be2e6e8 <col:9> 'sys_sfnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x55b64be2e6c0 <col:9> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be2e590 'node' 'sys_sfnode_t *'
| |       `-ImplicitCastExpr 0x55b64be2e770 <line:203:31> 'unsigned long long' <IntegralCast>
| |         `-IntegerLiteral 0x55b64be2e738 <col:31> 'unsigned long' 3
| `-FullComment 0x55b64bf37f70 <line:259:3, line:262:60>
|   |-ParagraphComment 0x55b64bf37d00 <line:259:3>
|   | `-TextComment 0x55b64bf37cd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf37d20 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55b64bf37d80 <col:10, col:51>
|   |   `-TextComment 0x55b64bf37d50 <col:10, col:51> Text=" Fetch flags value for a particular sfnode"
|   |-ParagraphComment 0x55b64bf37dd0 <line:261:3>
|   | `-TextComment 0x55b64bf37da0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf37df0 <col:4, line:262:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf37ea0 <line:261:15, line:262:3>
|   |   |-TextComment 0x55b64bf37e50 <line:261:15, col:56> Text=" A pointer to the node to fetch flags from"
|   |   `-TextComment 0x55b64bf37e70 <line:262:3> Text=" "
|   `-BlockCommandComment 0x55b64bf37ec0 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x55b64bf37f20 <col:11, col:60>
|       `-TextComment 0x55b64bf37ef0 <col:11, col:60> Text=" The value of flags, which will be between 0 and 3"
|-FunctionDecl 0x55b64be2e9f0 <line:282:1, line:286:1> line:282:20 sys_sfnode_init 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x55b64be2e830 <col:36, col:50> col:50 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x55b64be2e8e0 <col:56, col:61> col:61 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x55b64be2ebe8 <line:283:1, line:286:1>
| | |-CompoundStmt 0x55b64be2eaa0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x55b64be2eab0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:284:70>
| | `-BinaryOperator 0x55b64be2eb90 <line:285:2, col:25> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x55b64be2eb00 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x55b64be25e70
| |   | `-ImplicitCastExpr 0x55b64be2eae8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55b64be2eac0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be2e830 'node' 'sys_sfnode_t *'
| |   `-ImplicitCastExpr 0x55b64be2eb78 <col:25> 'unative_t':'unsigned long long' <IntegralCast>
| |     `-ImplicitCastExpr 0x55b64be2eb60 <col:25> 'u8_t':'unsigned char' <LValueToRValue>
| |       `-DeclRefExpr 0x55b64be2eb38 <col:25> 'u8_t':'unsigned char' lvalue ParmVar 0x55b64be2e8e0 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x55b64bf383d0 <line:270:3, line:280:62>
|   |-ParagraphComment 0x55b64bf38010 <line:270:3>
|   | `-TextComment 0x55b64bf37fe0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf38030 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x55b64bf38090 <col:10, col:35>
|   |   `-TextComment 0x55b64bf38060 <col:10, col:35> Text=" Initialize an sflist node"
|   |-ParagraphComment 0x55b64bf38130 <line:272:3, line:274:64>
|   | |-TextComment 0x55b64bf380b0 <line:272:3, col:79> Text=" Set an initial flags value for this slist node, which can be a value between"
|   | |-TextComment 0x55b64bf380d0 <line:273:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x55b64bf380f0 <line:274:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x55b64bf381a0 <line:276:3, line:277:61>
|   | |-TextComment 0x55b64bf38150 <line:276:3, col:73> Text=" This is ever so slightly faster than sys_sfnode_flags_set() and should"
|   | `-TextComment 0x55b64bf38170 <line:277:3, col:61> Text=" only be used on a node that hasn't been added to any list."
|   |-ParagraphComment 0x55b64bf381f0 <line:279:3>
|   | `-TextComment 0x55b64bf381c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf38210 <col:4, line:280:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf382c0 <line:279:15, line:280:3>
|   |   |-TextComment 0x55b64bf38270 <line:279:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x55b64bf38290 <line:280:3> Text=" "
|   `-ParamCommandComment 0x55b64bf382e0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x55b64bf38370 <col:16, col:62>
|       `-TextComment 0x55b64bf38340 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x55b64be2ed20 <line:298:1, line:302:1> line:298:20 sys_sfnode_flags_set 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x55b64be2ec20 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x55b64be2ec90 <col:61, col:66> col:66 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x55b64be2f0d8 <line:299:1, line:302:1>
| | |-CompoundStmt 0x55b64be2edd0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x55b64be2ede0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:300:70>
| | `-BinaryOperator 0x55b64be2f080 <line:301:2, col:65> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x55b64be2ee30 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x55b64be25e70
| |   | `-ImplicitCastExpr 0x55b64be2ee18 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55b64be2edf0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be2ec20 'node' 'sys_sfnode_t *'
| |   `-BinaryOperator 0x55b64be2f058 <col:25, col:65> 'unsigned long long' '|'
| |     |-CStyleCastExpr 0x55b64be2efd8 <col:25, col:61> 'unative_t':'unsigned long long' <PointerToIntegral>
| |     | `-ParenExpr 0x55b64be2efb8 <col:36, col:61> 'sys_sfnode_t *'
| |     |   `-CallExpr 0x55b64be2ef30 <col:37, col:60> 'sys_sfnode_t *'
| |     |     |-ImplicitCastExpr 0x55b64be2ef18 <col:37> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x55b64be2ee68 <col:37> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55b64be2c0b0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
| |     |     `-ImplicitCastExpr 0x55b64be2ef60 <col:56> 'sys_sfnode_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x55b64be2ee90 <col:56> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be2ec20 'node' 'sys_sfnode_t *'
| |     `-ImplicitCastExpr 0x55b64be2f040 <col:65> 'unsigned long long' <IntegralCast>
| |       `-ImplicitCastExpr 0x55b64be2f028 <col:65> 'u8_t':'unsigned char' <LValueToRValue>
| |         `-DeclRefExpr 0x55b64be2f000 <col:65> 'u8_t':'unsigned char' lvalue ParmVar 0x55b64be2ec90 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x55b64bf387b0 <line:289:3, line:296:62>
|   |-ParagraphComment 0x55b64bf38470 <line:289:3>
|   | `-TextComment 0x55b64bf38440 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf38490 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55b64bf384f0 <col:10, col:44>
|   |   `-TextComment 0x55b64bf384c0 <col:10, col:44> Text=" Set flags value for an sflist node"
|   |-ParagraphComment 0x55b64bf38590 <line:291:3, line:293:64>
|   | |-TextComment 0x55b64bf38510 <line:291:3, col:70> Text=" Set a flags value for this slist node, which can be a value between"
|   | |-TextComment 0x55b64bf38530 <line:292:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x55b64bf38550 <line:293:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x55b64bf385e0 <line:295:3>
|   | `-TextComment 0x55b64bf385b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf38600 <col:4, line:296:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf386b0 <line:295:15, line:296:3>
|   |   |-TextComment 0x55b64bf38660 <line:295:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x55b64bf38680 <line:296:3> Text=" "
|   `-ParamCommandComment 0x55b64bf386d0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x55b64bf38760 <col:16, col:62>
|       `-TextComment 0x55b64bf38730 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x55b64be2f210 <line:315:1, col:58> col:20 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55b64be2f110 <col:40, col:54> col:54 list 'sys_sflist_t *'
| `-FullComment 0x55b64bf38af0 <line:309:3, line:313:57>
|   |-ParagraphComment 0x55b64bf38850 <line:309:3>
|   | `-TextComment 0x55b64bf38820 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf38870 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55b64bf388d0 <col:10, col:41>
|   |   `-TextComment 0x55b64bf388a0 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x55b64bf38920 <line:311:3>
|   | `-TextComment 0x55b64bf388f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf38940 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf389d0 <col:15, col:44>
|   |   `-TextComment 0x55b64bf389a0 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x55b64bf38a20 <line:313:3>
|   | `-TextComment 0x55b64bf389f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf38a40 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x55b64bf38aa0 <col:11, col:57>
|       `-TextComment 0x55b64bf38a70 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x55b64be2f350 prev 0x55b64be2f210 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:194:1 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55b64be2f2c8 <line:196:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_sflist_t *'
| `-CompoundStmt 0x55b64be2f648 <line:60:2, line:62:2>
|   `-ReturnStmt 0x55b64be2f600 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x55b64be2f5e8 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x55b64be2f5c8 <col:10, col:54> 'int'
|         `-BinaryOperator 0x55b64be2f5a0 <<scratch space>:198:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x55b64be2f4c0 <<scratch space>:198:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_sfnode_t *'
|           | |-ImplicitCastExpr 0x55b64be2f4a8 <<scratch space>:198:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x55b64be2f3f8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|           | `-ImplicitCastExpr 0x55b64be2f4f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_sflist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x55b64be2f420 <col:41> 'sys_sflist_t *' lvalue ParmVar 0x55b64be2f2c8 'list' 'sys_sflist_t *'
|           `-ImplicitCastExpr 0x55b64be2f588 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|             `-ParenExpr 0x55b64be2f568 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x55b64be2f540 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x55b64be2f508 <col:23> 'int' 0
|-FunctionDecl 0x55b64be2f6f8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:328:1, col:77> col:29 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be2f670 <col:59, col:73> col:73 node 'sys_sfnode_t *'
| `-FullComment 0x55b64bf38e90 <line:320:3, line:326:55>
|   |-ParagraphComment 0x55b64bf38b90 <line:320:3>
|   | `-TextComment 0x55b64bf38b60 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf38bb0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x55b64bf38c10 <col:10, col:64>
|   |   `-TextComment 0x55b64bf38be0 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x55b64bf38c60 <line:322:3, col:70>
|   | `-TextComment 0x55b64bf38c30 <col:3, col:70> Text=" Faster then sys_sflist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x55b64bf38cb0 <line:324:3>
|   | `-TextComment 0x55b64bf38c80 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf38cd0 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf38d60 <col:15, col:64>
|   |   `-TextComment 0x55b64bf38d30 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x55b64bf38db0 <line:326:3>
|   | `-TextComment 0x55b64bf38d80 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf38dd0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55b64bf38e30 <col:11, col:55>
|       `-TextComment 0x55b64bf38e00 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x55b64be2f838 prev 0x55b64be2f6f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:202:1 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be2f7b0 <line:204:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55b64be309f8 <line:67:2, line:69:2>
|   `-ReturnStmt 0x55b64be309b0 <line:68:3, col:42>
|     `-CallExpr 0x55b64be30968 <<scratch space>:206:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x55b64be30950 <<scratch space>:206:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64be30900 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55b64be2c0b0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       `-ImplicitCastExpr 0x55b64be30998 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_sfnode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64be30928 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be2f7b0 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55b64be30aa8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:339:1, col:68> col:29 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be30a20 <col:50, col:64> col:64 node 'sys_sfnode_t *'
| `-FullComment 0x55b64bf391d0 <line:333:3, line:337:55>
|   |-ParagraphComment 0x55b64bf38f30 <line:333:3>
|   | `-TextComment 0x55b64bf38f00 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf38f50 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55b64bf38fb0 <col:10, col:46>
|   |   `-TextComment 0x55b64bf38f80 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x55b64bf39000 <line:335:3>
|   | `-TextComment 0x55b64bf38fd0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf39020 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf390b0 <col:15, col:64>
|   |   `-TextComment 0x55b64bf39080 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x55b64bf39100 <line:337:3>
|   | `-TextComment 0x55b64bf390d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf39120 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55b64bf39180 <col:11, col:55>
|       `-TextComment 0x55b64bf39150 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x55b64be30be8 prev 0x55b64be30aa8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:210:1 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be30b60 <line:212:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55b64be30f48 <line:74:2, line:78:2>
|   `-ReturnStmt 0x55b64be30f08 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x55b64be30ed8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *'
|       |-BinaryOperator 0x55b64be30d68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x55b64be30d38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_sfnode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x55b64be30c90 <col:10> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be30b60 'node' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x55b64be30d50 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x55b64be30d18 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x55b64be30cf0 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x55b64be30cb8 <col:23> 'int' 0
|       |-CallExpr 0x55b64be30df8 <<scratch space>:214:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x55b64be30de0 <<scratch space>:214:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55b64be30d90 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55b64be2f838 'sys_sflist_peek_next_no_check' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | `-ImplicitCastExpr 0x55b64be30e28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x55b64be30db8 <col:43> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be30b60 'node' 'sys_sfnode_t *'
|       `-ImplicitCastExpr 0x55b64be30ec0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|         `-ParenExpr 0x55b64be30ea0 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x55b64be30e78 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x55b64be30e40 <col:23> 'int' 0
|-FunctionDecl 0x55b64be31070 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:351:1, line:352:29> line:351:20 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be30f70 <col:39, col:53> col:53 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55b64be30fe0 <line:352:11, col:25> col:25 node 'sys_sfnode_t *'
| `-FullComment 0x55b64bf39570 <line:344:3, line:349:47>
|   |-ParagraphComment 0x55b64bf39270 <line:344:3>
|   | `-TextComment 0x55b64bf39240 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf39290 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55b64bf392f0 <col:10, col:42>
|   |   `-TextComment 0x55b64bf392c0 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x55b64bf39340 <line:346:3, col:63>
|   | `-TextComment 0x55b64bf39310 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf39390 <line:348:3>
|   | `-TextComment 0x55b64bf39360 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf393c0 <col:4, line:349:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf39470 <line:348:15, line:349:3>
|   |   |-TextComment 0x55b64bf39420 <line:348:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55b64bf39440 <line:349:3> Text=" "
|   `-ParamCommandComment 0x55b64bf39490 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55b64bf39520 <col:15, col:47>
|       `-TextComment 0x55b64bf394f0 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x55b64be31230 prev 0x55b64be31070 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:216:1 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be31130 <line:218:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55b64be311a0 <<scratch space>:220:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55b64be31978 <line:84:2, line:93:2>
|   |-CallExpr 0x55b64be31450 <<scratch space>:222:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x55b64be31438 <<scratch space>:222:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55b64be312e0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55b64be2c670 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x55b64be31488 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55b64be31308 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be311a0 'node' 'sys_sfnode_t *'
|   | `-CallExpr 0x55b64be31398 <<scratch space>:224:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x55b64be31380 <<scratch space>:224:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55b64be31330 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x55b64be313c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55b64be31358 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55b64be31130 'list' 'sys_sflist_t *'
|   |-CallExpr 0x55b64be31590 <<scratch space>:226:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x55b64be31578 <<scratch space>:226:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55b64be314a0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55b64be2dc20 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x55b64be315c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55b64be314c8 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x55b64be31130 'list' 'sys_sflist_t *'
|   | `-ImplicitCastExpr 0x55b64be315e0 <col:36> 'sys_sfnode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55b64be314f0 <col:36> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be311a0 'node' 'sys_sfnode_t *'
|   `-IfStmt 0x55b64be31910 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55b64be31740 <<scratch space>:228:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x55b64be31660 <<scratch space>:228:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x55b64be31648 <<scratch space>:228:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55b64be315f8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x55b64be31690 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b64be31620 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x55b64be31130 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x55b64be31728 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x55b64be31708 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55b64be316e0 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55b64be316a8 <col:23> 'int' 0
|     |-CompoundStmt 0x55b64be318d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x55b64be31880 <<scratch space>:230:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x55b64be31868 <<scratch space>:230:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b64be31768 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55b64be2ded8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x55b64be318b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55b64be31790 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55b64be31130 'list' 'sys_sflist_t *'
|     |   `-CallExpr 0x55b64be31820 <<scratch space>:232:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_sfnode_t *'
|     |     |-ImplicitCastExpr 0x55b64be31808 <<scratch space>:232:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x55b64be317b8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|     |     `-ImplicitCastExpr 0x55b64be31850 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_sflist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b64be317e0 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55b64be31130 'list' 'sys_sflist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x55b64be31ab0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:364:1, line:365:28> line:364:20 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be319b0 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55b64be31a20 <line:365:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x55b64bf39900 <line:357:3, line:362:46>
|   |-ParagraphComment 0x55b64bf39610 <line:357:3>
|   | `-TextComment 0x55b64bf395e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf39630 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55b64bf39690 <col:10, col:41>
|   |   `-TextComment 0x55b64bf39660 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x55b64bf396e0 <line:359:3, col:63>
|   | `-TextComment 0x55b64bf396b0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf39730 <line:361:3>
|   | `-TextComment 0x55b64bf39700 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf39750 <col:4, line:362:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf39800 <line:361:15, line:362:3>
|   |   |-TextComment 0x55b64bf397b0 <line:361:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55b64bf397d0 <line:362:3> Text=" "
|   `-ParamCommandComment 0x55b64bf39820 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55b64bf398b0 <col:15, col:46>
|       `-TextComment 0x55b64bf39880 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x55b64be31c70 prev 0x55b64be31ab0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:234:1 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be31b70 <line:236:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55b64be31be0 <<scratch space>:238:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55b64be324d8 <line:99:2, line:111:2>
|   |-CallExpr 0x55b64be31e08 <<scratch space>:240:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x55b64be31df0 <<scratch space>:240:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55b64be31d20 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55b64be2c670 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x55b64be31e40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55b64be31d48 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be31be0 'node' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x55b64be31e58 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |   `-ParenExpr 0x55b64be31dd0 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x55b64be31da8 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x55b64be31d70 <col:23> 'int' 0
|   `-IfStmt 0x55b64be32470 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55b64be31fb8 <<scratch space>:242:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x55b64be31ed8 <<scratch space>:242:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x55b64be31ec0 <<scratch space>:242:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55b64be31e70 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x55b64be31f08 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b64be31e98 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x55b64be31b70 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x55b64be31fa0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x55b64be31f80 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55b64be31f58 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55b64be31f20 <col:23> 'int' 0
|     |-CompoundStmt 0x55b64be321d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x55b64be32070 <<scratch space>:244:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x55b64be32058 <<scratch space>:244:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55b64be31fe0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55b64be2ded8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     | | |-ImplicitCastExpr 0x55b64be320a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_sflist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55b64be32008 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55b64be31b70 'list' 'sys_sflist_t *'
|     | | `-ImplicitCastExpr 0x55b64be320c0 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b64be32030 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be31be0 'node' 'sys_sfnode_t *'
|     | `-CallExpr 0x55b64be32168 <<scratch space>:246:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x55b64be32150 <<scratch space>:246:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b64be320d8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55b64be2dc20 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x55b64be321a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55b64be32100 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55b64be31b70 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x55b64be321b8 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55b64be32128 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be31be0 'node' 'sys_sfnode_t *'
|     `-CompoundStmt 0x55b64be32450 <line:105:10, line:110:3>
|       |-CallExpr 0x55b64be32308 <<scratch space>:248:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x55b64be322f0 <<scratch space>:248:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55b64be321f0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55b64be2c670 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|       | |-CallExpr 0x55b64be32280 <line:250:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x55b64be32268 <<scratch space>:250:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55b64be32218 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | | `-ImplicitCastExpr 0x55b64be322b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_sflist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x55b64be32240 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x55b64be31b70 'list' 'sys_sflist_t *'
|       | `-ImplicitCastExpr 0x55b64be32340 <line:108:5> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x55b64be322c8 <col:5> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be31be0 'node' 'sys_sfnode_t *'
|       `-CallExpr 0x55b64be323e8 <<scratch space>:252:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x55b64be323d0 <<scratch space>:252:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55b64be32358 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55b64be2ded8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|         |-ImplicitCastExpr 0x55b64be32420 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_sflist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x55b64be32380 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55b64be31b70 'list' 'sys_sflist_t *'
|         `-ImplicitCastExpr 0x55b64be32438 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55b64be323a8 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be31be0 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55b64be32730 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:382:1, line:383:30> line:382:20 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x55b64be32508 <col:43, col:57> col:57 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55b64be32580 <line:383:8, col:14> col:14 head 'void *'
| |-ParmVarDecl 0x55b64be325f8 <col:20, col:26> col:26 tail 'void *'
| `-FullComment 0x55b64bf39e60 <line:370:3, line:380:66>
|   |-ParagraphComment 0x55b64bf399a0 <line:370:3>
|   | `-TextComment 0x55b64bf39970 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf399c0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55b64bf39a20 <col:10, col:41>
|   |   `-TextComment 0x55b64bf399f0 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x55b64bf39b10 <line:372:3, line:374:63>
|   | |-TextComment 0x55b64bf39a40 <line:372:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x55b64bf39a60 <line:373:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x55b64bf39ab0 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x55b64bf39ad0 <line:374:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf39b60 <line:376:3, col:48>
|   | `-TextComment 0x55b64bf39b30 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x55b64bf39bb0 <line:378:3>
|   | `-TextComment 0x55b64bf39b80 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf39bd0 <col:4, line:379:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf39c80 <line:378:15, line:379:3>
|   |   |-TextComment 0x55b64bf39c30 <line:378:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55b64bf39c50 <line:379:3> Text=" "
|   |-ParamCommandComment 0x55b64bf39ca0 <col:4, line:380:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf39d50 <line:379:15, line:380:3>
|   |   |-TextComment 0x55b64bf39d00 <line:379:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x55b64bf39d20 <line:380:3> Text=" "
|   `-ParamCommandComment 0x55b64bf39d70 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x55b64bf39e00 <col:15, col:66>
|       `-TextComment 0x55b64bf39dd0 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x55b64be329b8 prev 0x55b64be32730 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:254:1 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x55b64be327f8 <line:256:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55b64be32870 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x55b64be32920 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x55b64be33078 <col:31, line:127:42>
|   |-IfStmt 0x55b64be32ee0 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55b64be32bb8 <<scratch space>:258:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x55b64be32ad8 <<scratch space>:258:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x55b64be32ac0 <<scratch space>:258:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55b64be32a70 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x55b64be32b08 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55b64be32a98 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55b64be327f8 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x55b64be32ba0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x55b64be32b80 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55b64be32b58 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55b64be32b20 <col:23> 'int' 0
|   | |-CompoundStmt 0x55b64be32d10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x55b64be32cc0 <<scratch space>:260:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x55b64be32ca8 <<scratch space>:260:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55b64be32be0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55b64be2dc20 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x55b64be32cf8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55b64be32c08 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x55b64be327f8 'list' 'sys_sflist_t *'
|   | |   `-CStyleCastExpr 0x55b64be32c80 <line:120:6, col:31> 'sys_sfnode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x55b64be32c68 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55b64be32c30 <col:31> 'void *' lvalue ParmVar 0x55b64be32870 'head' 'void *'
|   | `-CompoundStmt 0x55b64be32ec8 <line:121:9, line:125:2>
|   |   `-CallExpr 0x55b64be32e90 <<scratch space>:264:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x55b64be32e78 <<scratch space>:264:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b64be32d28 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55b64be2c670 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |     |-CallExpr 0x55b64be32db8 <line:266:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_sfnode_t *'
|   |     | |-ImplicitCastExpr 0x55b64be32da0 <<scratch space>:266:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x55b64be32d50 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | `-ImplicitCastExpr 0x55b64be32de8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_sflist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55b64be32d78 <col:34> 'sys_sflist_t *' lvalue ParmVar 0x55b64be327f8 'list' 'sys_sflist_t *'
|   |     `-CStyleCastExpr 0x55b64be32e50 <line:124:4, col:29> 'sys_sfnode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x55b64be32e38 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x55b64be32e00 <col:29> 'void *' lvalue ParmVar 0x55b64be32870 'head' 'void *'
|   `-CallExpr 0x55b64be32ff8 <<scratch space>:270:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x55b64be32fe0 <<scratch space>:270:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64be32f18 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55b64be2ded8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x55b64be33030 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_sflist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b64be32f40 <col:29> 'sys_sflist_t *' lvalue ParmVar 0x55b64be327f8 'list' 'sys_sflist_t *'
|     `-CStyleCastExpr 0x55b64be32fb8 <line:127:10, col:35> 'sys_sfnode_t *' <BitCast>
|       `-ImplicitCastExpr 0x55b64be32fa0 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64be32f68 <col:35> 'void *' lvalue ParmVar 0x55b64be32920 'tail' 'void *'
|-FunctionDecl 0x55b64be33230 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:396:1, line:397:37> line:396:20 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55b64be330a8 <col:44, col:58> col:58 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55b64be33118 <line:397:9, col:23> col:23 list_to_append 'sys_sflist_t *'
| `-FullComment 0x55b64bf3a210 <line:388:3, line:394:57>
|   |-ParagraphComment 0x55b64bf39f00 <line:388:3>
|   | `-TextComment 0x55b64bf39ed0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf39f20 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x55b64bf39f80 <col:10, col:66>
|   |   `-TextComment 0x55b64bf39f50 <col:10, col:66> Text=" merge two sflists, appending the second one to the first"
|   |-ParagraphComment 0x55b64bf39ff0 <line:390:3, line:391:63>
|   | |-TextComment 0x55b64bf39fa0 <line:390:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x55b64bf39fc0 <line:391:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf3a040 <line:393:3>
|   | `-TextComment 0x55b64bf3a010 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3a060 <col:4, line:394:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf3a110 <line:393:15, line:394:3>
|   |   |-TextComment 0x55b64bf3a0c0 <line:393:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55b64bf3a0e0 <line:394:3> Text=" "
|   `-ParamCommandComment 0x55b64bf3a130 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x55b64bf3a1c0 <col:25, col:57>
|       `-TextComment 0x55b64bf3a190 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x55b64be333f0 prev 0x55b64be33230 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:275:1 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55b64be332f0 <line:277:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55b64be33360 <<scratch space>:279:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_sflist_t *'
| `-CompoundStmt 0x55b64be212a8 <line:135:2, line:141:2>
|   |-DeclStmt 0x55b64be33598 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x55b64be334b0 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_sfnode_t *'
|   | `-VarDecl 0x55b64be33520 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_sfnode_t *'
|   |-BinaryOperator 0x55b64be33688 <line:137:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x55b64be335b0 <col:3> 'sys_sfnode_t *' lvalue Var 0x55b64be334b0 'head' 'sys_sfnode_t *'
|   | `-CallExpr 0x55b64be33640 <<scratch space>:2:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x55b64be33628 <<scratch space>:2:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55b64be335d8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x55b64be33670 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55b64be33600 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x55b64be33360 'list_to_append' 'sys_sflist_t *'
|   |-BinaryOperator 0x55b64be33788 <line:138:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x55b64be336b0 <col:3> 'sys_sfnode_t *' lvalue Var 0x55b64be33520 'tail' 'sys_sfnode_t *'
|   | `-CallExpr 0x55b64be33740 <<scratch space>:4:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x55b64be33728 <<scratch space>:4:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55b64be336d8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x55b64be33770 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55b64be33700 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x55b64be33360 'list_to_append' 'sys_sflist_t *'
|   |-CallExpr 0x55b64be338c0 <<scratch space>:6:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x55b64be338a8 <<scratch space>:6:1> 'void (*)(sys_sflist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55b64be337b0 <col:1> 'void (sys_sflist_t *, void *, void *)' Function 0x55b64be329b8 'sys_sflist_append_list' 'void (sys_sflist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x55b64be33900 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55b64be337d8 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x55b64be332f0 'list' 'sys_sflist_t *'
|   | |-ImplicitCastExpr 0x55b64be21128 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x55b64be21110 <col:41> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b64be33800 <col:41> 'sys_sfnode_t *' lvalue Var 0x55b64be334b0 'head' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x55b64be21158 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x55b64be21140 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55b64be33828 <col:47> 'sys_sfnode_t *' lvalue Var 0x55b64be33520 'tail' 'sys_sfnode_t *'
|   `-CallExpr 0x55b64be21230 <<scratch space>:8:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x55b64be21218 <<scratch space>:8:1> 'void (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64be21170 <col:1> 'void (sys_sflist_t *)' Function 0x55b64be2bc60 'sys_sflist_init' 'void (sys_sflist_t *)'
|     `-ImplicitCastExpr 0x55b64be21260 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_sflist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64be21198 <col:28> 'sys_sflist_t *' lvalue ParmVar 0x55b64be33360 'list_to_append' 'sys_sflist_t *'
|-FunctionDecl 0x55b64be21500 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:410:1, line:412:28> line:410:20 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be212f0 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55b64be21360 <line:411:10, col:24> col:24 prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x55b64be213d0 <line:412:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x55b64bf3a680 <line:402:3, line:408:46>
|   |-ParagraphComment 0x55b64bf3a2b0 <line:402:3>
|   | `-TextComment 0x55b64bf3a280 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3a2d0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55b64bf3a330 <col:10, col:41>
|   |   `-TextComment 0x55b64bf3a300 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x55b64bf3a380 <line:404:3, col:63>
|   | `-TextComment 0x55b64bf3a350 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf3a3d0 <line:406:3>
|   | `-TextComment 0x55b64bf3a3a0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3a3f0 <col:4, line:407:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf3a4a0 <line:406:15, line:407:3>
|   |   |-TextComment 0x55b64bf3a450 <line:406:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55b64bf3a470 <line:407:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3a4c0 <col:4, line:408:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf3a570 <line:407:15, line:408:3>
|   |   |-TextComment 0x55b64bf3a520 <line:407:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x55b64bf3a540 <line:408:3> Text=" "
|   `-ParamCommandComment 0x55b64bf3a590 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x55b64bf3a620 <col:15, col:46>
|       `-TextComment 0x55b64bf3a5f0 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x55b64be21740 prev 0x55b64be21500 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:10:1 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be215c8 <line:12:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55b64be21638 <<scratch space>:14:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x55b64be216a8 <<scratch space>:16:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55b64be21fa8 <line:148:2, line:158:2>
|   `-IfStmt 0x55b64be21f40 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55b64be218d0 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x55b64be218a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_sfnode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x55b64be217f8 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be21638 'prev' 'sys_sfnode_t *'
|     | `-ImplicitCastExpr 0x55b64be218b8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x55b64be21880 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55b64be21858 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55b64be21820 <col:23> 'int' 0
|     |-CompoundStmt 0x55b64be219f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x55b64be21988 <<scratch space>:18:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x55b64be21970 <<scratch space>:18:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b64be218f8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55b64be31230 'sys_sflist_prepend' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x55b64be219c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55b64be21920 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x55b64be215c8 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x55b64be219d8 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55b64be21948 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be216a8 'node' 'sys_sfnode_t *'
|     `-IfStmt 0x55b64be21f08 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x55b64be21b50 <<scratch space>:20:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x55b64be21a70 <<scratch space>:20:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x55b64be21a58 <<scratch space>:20:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55b64be21a08 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55b64be2c0b0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | | `-ImplicitCastExpr 0x55b64be21aa0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_sfnode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x55b64be21a30 <col:42> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be21638 'prev' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x55b64be21b38 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x55b64be21b18 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x55b64be21af0 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x55b64be21ab8 <col:23> 'int' 0
|       |-CompoundStmt 0x55b64be21c70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x55b64be21c08 <<scratch space>:22:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x55b64be21bf0 <<scratch space>:22:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55b64be21b78 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55b64be31c70 'sys_sflist_append' 'void (sys_sflist_t *, sys_sfnode_t *)'
|       |   |-ImplicitCastExpr 0x55b64be21c40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_sflist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x55b64be21ba0 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55b64be215c8 'list' 'sys_sflist_t *'
|       |   `-ImplicitCastExpr 0x55b64be21c58 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55b64be21bc8 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be216a8 'node' 'sys_sfnode_t *'
|       `-CompoundStmt 0x55b64be21ee8 <line:153:10, line:157:3>
|         |-CallExpr 0x55b64be21da0 <<scratch space>:24:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x55b64be21d88 <<scratch space>:24:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x55b64be21c88 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55b64be2c670 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|         | |-ImplicitCastExpr 0x55b64be21dd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_sfnode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x55b64be21cb0 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be216a8 'node' 'sys_sfnode_t *'
|         | `-CallExpr 0x55b64be21d40 <<scratch space>:26:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_sfnode_t *'
|         |   |-ImplicitCastExpr 0x55b64be21d28 <<scratch space>:26:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x55b64be21cd8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55b64be2c0b0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|         |   `-ImplicitCastExpr 0x55b64be21d70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_sfnode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x55b64be21d00 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be21638 'prev' 'sys_sfnode_t *'
|         `-CallExpr 0x55b64be21e80 <<scratch space>:28:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x55b64be21e68 <<scratch space>:28:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x55b64be21df0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55b64be2c670 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|           |-ImplicitCastExpr 0x55b64be21eb8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_sfnode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x55b64be21e18 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be21638 'prev' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x55b64be21ed0 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x55b64be21e40 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be216a8 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55b64be22058 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:426:1, col:72> col:29 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55b64be21fd0 <col:54, col:68> col:68 list 'sys_sflist_t *'
| `-FullComment 0x55b64bf3aa40 <line:417:3, line:424:50>
|   |-ParagraphComment 0x55b64bf3a720 <line:417:3>
|   | `-TextComment 0x55b64bf3a6f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3a740 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55b64bf3a7a0 <col:10, col:59>
|   |   `-TextComment 0x55b64bf3a770 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x55b64bf3a810 <line:419:3, line:420:63>
|   | |-TextComment 0x55b64bf3a7c0 <line:419:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x55b64bf3a7e0 <line:420:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf3a860 <line:422:3>
|   | `-TextComment 0x55b64bf3a830 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3a880 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf3a910 <col:15, col:46>
|   |   `-TextComment 0x55b64bf3a8e0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x55b64bf3a960 <line:424:3>
|   | `-TextComment 0x55b64bf3a930 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3a980 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x55b64bf3a9e0 <col:11, col:50>
|       `-TextComment 0x55b64bf3a9b0 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x55b64be399a8 prev 0x55b64be22058 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:32:1 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55b64be39920 <line:34:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_sflist_t *'
| `-CompoundStmt 0x55b64be3a048 <line:163:2, line:175:2>
|   |-DeclStmt 0x55b64be39b70 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x55b64be39a60 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_sfnode_t *' cinit
|   |   `-CallExpr 0x55b64be39b28 <<scratch space>:38:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_sfnode_t *'
|   |     |-ImplicitCastExpr 0x55b64be39b10 <<scratch space>:38:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b64be39ac0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     `-ImplicitCastExpr 0x55b64be39b58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_sflist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55b64be39ae8 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x55b64be39920 'list' 'sys_sflist_t *'
|   |-CallExpr 0x55b64be39ca0 <<scratch space>:40:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x55b64be39c88 <<scratch space>:40:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55b64be39b88 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55b64be2dc20 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x55b64be39cd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55b64be39bb0 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x55b64be39920 'list' 'sys_sflist_t *'
|   | `-CallExpr 0x55b64be39c40 <<scratch space>:42:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x55b64be39c28 <<scratch space>:42:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55b64be39bd8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55b64be2c0b0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   `-ImplicitCastExpr 0x55b64be39c70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55b64be39c00 <col:33> 'sys_sfnode_t *' lvalue Var 0x55b64be39a60 'node' 'sys_sfnode_t *'
|   |-IfStmt 0x55b64be39f88 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55b64be39de0 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x55b64be39d58 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x55b64be39d40 <<scratch space>:44:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55b64be39cf0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x55b64be39d88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55b64be39d18 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x55b64be39920 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x55b64be39dc8 <col:46> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b64be39da0 <col:46> 'sys_sfnode_t *' lvalue Var 0x55b64be39a60 'node' 'sys_sfnode_t *'
|   | |-CompoundStmt 0x55b64be39f70 <col:52, line:172:3>
|   | | `-CallExpr 0x55b64be39f20 <<scratch space>:46:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x55b64be39f08 <<scratch space>:46:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55b64be39e08 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55b64be2ded8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x55b64be39f58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55b64be39e30 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55b64be39920 'list' 'sys_sflist_t *'
|   | |   `-CallExpr 0x55b64be39ec0 <<scratch space>:48:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_sfnode_t *'
|   | |     |-ImplicitCastExpr 0x55b64be39ea8 <<scratch space>:48:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x55b64be39e58 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |     `-ImplicitCastExpr 0x55b64be39ef0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_sflist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55b64be39e80 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x55b64be39920 'list' 'sys_sflist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55b64be3a000 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x55b64be39fe8 <col:10> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64be39fc0 <col:10> 'sys_sfnode_t *' lvalue Var 0x55b64be39a60 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55b64be3a110 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:439:1, col:62> col:29 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55b64be3a088 <col:44, col:58> col:58 list 'sys_sflist_t *'
| `-FullComment 0x55b64bf3ade0 <line:431:3, line:437:69>
|   |-ParagraphComment 0x55b64bf3aae0 <line:431:3>
|   | `-TextComment 0x55b64bf3aab0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3ab00 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55b64bf3ab60 <col:10, col:59>
|   |   `-TextComment 0x55b64bf3ab30 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x55b64bf3abb0 <line:433:3, col:63>
|   | `-TextComment 0x55b64bf3ab80 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf3ac00 <line:435:3>
|   | `-TextComment 0x55b64bf3abd0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3ac20 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf3acb0 <col:15, col:46>
|   |   `-TextComment 0x55b64bf3ac80 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x55b64bf3ad00 <line:437:3>
|   | `-TextComment 0x55b64bf3acd0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3ad20 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x55b64bf3ad80 <col:11, col:69>
|       `-TextComment 0x55b64bf3ad50 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x55b64be3a250 prev 0x55b64be3a110 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:52:1 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55b64be3a1c8 <line:54:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_sflist_t *'
| `-CompoundStmt 0x55b64be3a5d8 <line:180:2, line:183:2>
|   `-ReturnStmt 0x55b64be3a598 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x55b64be3a568 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x55b64be3a538 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x55b64be3a3c0 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x55b64be3a3a8 <<scratch space>:56:1> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55b64be3a2f8 <col:1> 'bool (sys_sflist_t *)' Function 0x55b64be2f350 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|       |   `-ImplicitCastExpr 0x55b64be3a3f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_sflist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55b64be3a320 <col:39> 'sys_sflist_t *' lvalue ParmVar 0x55b64be3a1c8 'list' 'sys_sflist_t *'
|       |-ImplicitCastExpr 0x55b64be3a550 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       | `-ParenExpr 0x55b64be3a468 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x55b64be3a440 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x55b64be3a408 <col:23> 'int' 0
|       `-CallExpr 0x55b64be3a4f0 <<scratch space>:58:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|         |-ImplicitCastExpr 0x55b64be3a4d8 <<scratch space>:58:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55b64be3a488 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be399a8 'sys_sflist_get_not_empty' 'sys_sfnode_t *(sys_sflist_t *)'
|         `-ImplicitCastExpr 0x55b64be3a520 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_sflist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55b64be3a4b0 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x55b64be3a1c8 'list' 'sys_sflist_t *'
|-FunctionDecl 0x55b64be3a778 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:453:1, line:455:28> line:453:20 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be3a600 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55b64be3a670 <line:454:10, col:24> col:24 prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x55b64be3a6e0 <line:455:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x55b64bf3b280 <line:444:3, line:451:46>
|   |-ParagraphComment 0x55b64bf3ae80 <line:444:3>
|   | `-TextComment 0x55b64bf3ae50 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3aea0 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x55b64bf3af00 <col:10, col:23>
|   |   `-TextComment 0x55b64bf3aed0 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x55b64bf3af50 <line:446:3, col:63>
|   | `-TextComment 0x55b64bf3af20 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf3afa0 <line:448:3>
|   | `-TextComment 0x55b64bf3af70 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3afc0 <col:4, line:449:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf3b070 <line:448:15, line:449:3>
|   |   |-TextComment 0x55b64bf3b020 <line:448:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55b64bf3b040 <line:449:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3b090 <col:4, line:451:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf3b170 <line:449:20, line:451:3>
|   |   |-TextComment 0x55b64bf3b0f0 <line:449:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x55b64bf3b110 <line:450:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x55b64bf3b130 <line:451:3> Text=" "
|   `-ParamCommandComment 0x55b64bf3b190 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x55b64bf3b220 <col:15, col:46>
|       `-TextComment 0x55b64bf3b1f0 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x55b64be3a9c8 prev 0x55b64be3a778 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:60:1 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be3a840 <line:62:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55b64be3a8b0 <<scratch space>:64:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x55b64be3a930 <<scratch space>:66:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55b64be3b578 <line:190:2, line:212:2>
|   |-IfStmt 0x55b64be3b3c0 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55b64be3ab58 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x55b64be3ab28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55b64be3aa80 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be3a8b0 'prev_node' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x55b64be3ab40 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x55b64be3ab08 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55b64be3aae0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55b64be3aaa8 <col:23> 'int' 0
|   | |-CompoundStmt 0x55b64be3afb8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x55b64be3ac98 <<scratch space>:68:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x55b64be3ac80 <<scratch space>:68:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55b64be3ab80 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55b64be2dc20 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | | | |-ImplicitCastExpr 0x55b64be3acd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_sflist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55b64be3aba8 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55b64be3a840 'list' 'sys_sflist_t *'
|   | | | `-CallExpr 0x55b64be3ac38 <<scratch space>:70:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_sfnode_t *'
|   | | |   |-ImplicitCastExpr 0x55b64be3ac20 <<scratch space>:70:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x55b64be3abd0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55b64be2c0b0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | | |   `-ImplicitCastExpr 0x55b64be3ac68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_sfnode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55b64be3abf8 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be3a930 'node' 'sys_sfnode_t *'
|   | | `-IfStmt 0x55b64be3af80 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x55b64be3add8 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x55b64be3ad50 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_sfnode_t *'
|   | |   | | |-ImplicitCastExpr 0x55b64be3ad38 <<scratch space>:72:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x55b64be3ace8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   | | `-ImplicitCastExpr 0x55b64be3ad80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_sflist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x55b64be3ad10 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x55b64be3a840 'list' 'sys_sflist_t *'
|   | |   | `-ImplicitCastExpr 0x55b64be3adc0 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x55b64be3ad98 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be3a930 'node' 'sys_sfnode_t *'
|   | |   |-CompoundStmt 0x55b64be3af68 <col:53, line:199:4>
|   | |   | `-CallExpr 0x55b64be3af18 <<scratch space>:74:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x55b64be3af00 <<scratch space>:74:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x55b64be3ae00 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55b64be2ded8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |   |-ImplicitCastExpr 0x55b64be3af50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_sflist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x55b64be3ae28 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x55b64be3a840 'list' 'sys_sflist_t *'
|   | |   |   `-CallExpr 0x55b64be3aeb8 <<scratch space>:76:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_sfnode_t *'
|   | |   |     |-ImplicitCastExpr 0x55b64be3aea0 <<scratch space>:76:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x55b64be3ae50 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   |     `-ImplicitCastExpr 0x55b64be3aee8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_sflist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x55b64be3ae78 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55b64be3a840 'list' 'sys_sflist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x55b64be3b3a0 <line:200:10, line:209:3>
|   |   |-CallExpr 0x55b64be3b0f0 <<scratch space>:78:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x55b64be3b0d8 <<scratch space>:78:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x55b64be3afd8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55b64be2c670 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |   | |-ImplicitCastExpr 0x55b64be3b128 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x55b64be3b000 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be3a8b0 'prev_node' 'sys_sfnode_t *'
|   |   | `-CallExpr 0x55b64be3b090 <<scratch space>:80:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_sfnode_t *'
|   |   |   |-ImplicitCastExpr 0x55b64be3b078 <<scratch space>:80:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x55b64be3b028 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55b64be2c0b0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   |   `-ImplicitCastExpr 0x55b64be3b0c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_sfnode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55b64be3b050 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be3a930 'node' 'sys_sfnode_t *'
|   |   `-IfStmt 0x55b64be3b368 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x55b64be3b230 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x55b64be3b1a8 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_sfnode_t *'
|   |     | | |-ImplicitCastExpr 0x55b64be3b190 <<scratch space>:82:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x55b64be3b140 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | | `-ImplicitCastExpr 0x55b64be3b1d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_sflist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55b64be3b168 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x55b64be3a840 'list' 'sys_sflist_t *'
|   |     | `-ImplicitCastExpr 0x55b64be3b218 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55b64be3b1f0 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be3a930 'node' 'sys_sfnode_t *'
|   |     |-CompoundStmt 0x55b64be3b350 <col:53, line:208:4>
|   |     | `-CallExpr 0x55b64be3b2e8 <<scratch space>:84:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x55b64be3b2d0 <<scratch space>:84:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x55b64be3b258 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55b64be2ded8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   |     |   |-ImplicitCastExpr 0x55b64be3b320 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_sflist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x55b64be3b280 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x55b64be3a840 'list' 'sys_sflist_t *'
|   |     |   `-ImplicitCastExpr 0x55b64be3b338 <line:207:13> 'sys_sfnode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55b64be3b2a8 <col:13> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be3a8b0 'prev_node' 'sys_sfnode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x55b64be3b4e0 <<scratch space>:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x55b64be3b4c8 <<scratch space>:86:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64be3b3f8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55b64be2c670 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x55b64be3b518 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_sfnode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b64be3b420 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be3a930 'node' 'sys_sfnode_t *'
|     `-ImplicitCastExpr 0x55b64be3b530 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       `-ParenExpr 0x55b64be3b4a8 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x55b64be3b480 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x55b64be3b448 <col:23> 'int' 0
|-FunctionDecl 0x55b64be3b730 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:469:1, line:470:30> line:469:20 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be3b5a8 <col:47, col:61> col:61 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55b64be3b618 <line:470:12, col:26> col:26 node 'sys_sfnode_t *'
| `-FullComment 0x55b64bf3b700 <line:460:3, line:467:35>
|   |-ParagraphComment 0x55b64bf3b320 <line:460:3>
|   | `-TextComment 0x55b64bf3b2f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3b340 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55b64bf3b3a0 <col:10, col:44>
|   |   `-TextComment 0x55b64bf3b370 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x55b64bf3b400 <line:462:3, col:63>
|   | `-TextComment 0x55b64bf3b3d0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55b64bf3b450 <line:464:3>
|   | `-TextComment 0x55b64bf3b420 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3b470 <col:4, line:465:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf3b520 <line:464:15, line:465:3>
|   |   |-TextComment 0x55b64bf3b4d0 <line:464:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55b64bf3b4f0 <line:465:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3b540 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf3b5d0 <col:15, col:60>
|   |   `-TextComment 0x55b64bf3b5a0 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x55b64bf3b620 <line:467:3>
|   | `-TextComment 0x55b64bf3b5f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3b640 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf3b6a0 <col:11, col:35>
|       `-TextComment 0x55b64bf3b670 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x55b64be3b940 prev 0x55b64be3b730 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:88:1 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55b64be3b7f0 <line:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55b64be3b860 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55b64be3c2b8 <line:218:2, line:233:2>
|   |-DeclStmt 0x55b64be3baf8 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x55b64be3ba00 <<scratch space>:94:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_sfnode_t *' cinit
|   |   `-ImplicitCastExpr 0x55b64be3bae0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |     `-ParenExpr 0x55b64be3bac0 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x55b64be3ba98 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x55b64be3ba60 <col:23> 'int' 0
|   |-DeclStmt 0x55b64be3bb80 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x55b64be3bb20 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_sfnode_t *'
|   |-ForStmt 0x55b64be3c230 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x55b64be3bc70 <line:222:42, line:15:47> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x55b64be3bb98 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x55b64be3bb20 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x55b64be3bc28 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x55b64be3bc10 <<scratch space>:98:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55b64be3bbc0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   `-ImplicitCastExpr 0x55b64be3bc58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_sflist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55b64be3bbe8 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55b64be3b7f0 'list' 'sys_sflist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55b64be3bd70 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x55b64be3bd40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55b64be3bc98 <col:42> 'sys_sfnode_t *' lvalue Var 0x55b64be3bb20 'test' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x55b64be3bd58 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x55b64be3bd20 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55b64be3bcf8 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55b64be3bcc0 <col:23> 'int' 0
|   | |-BinaryOperator 0x55b64be3be70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x55b64be3bd98 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x55b64be3bb20 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x55b64be3be28 <<scratch space>:100:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x55b64be3be10 <<scratch space>:100:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55b64be3bdc0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55b64be30be8 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | |   `-ImplicitCastExpr 0x55b64be3be58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55b64be3bde8 <col:42> 'sys_sfnode_t *' lvalue Var 0x55b64be3bb20 'test' 'sys_sfnode_t *'
|   | `-CompoundStmt 0x55b64be3c210 <col:48, line:230:3>
|   |   |-IfStmt 0x55b64be3c148 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x55b64be3bf18 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x55b64be3bee8 <col:8> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x55b64be3be98 <col:8> 'sys_sfnode_t *' lvalue Var 0x55b64be3bb20 'test' 'sys_sfnode_t *'
|   |   | | `-ImplicitCastExpr 0x55b64be3bf00 <col:16> 'sys_sfnode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55b64be3bec0 <col:16> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be3b860 'node' 'sys_sfnode_t *'
|   |   | |-CompoundStmt 0x55b64be3c128 <col:22, line:227:4>
|   |   | | |-CallExpr 0x55b64be3c050 <<scratch space>:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x55b64be3c038 <<scratch space>:102:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x55b64be3bf40 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' Function 0x55b64be3a9c8 'sys_sflist_remove' 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)'
|   |   | | | |-ImplicitCastExpr 0x55b64be3c090 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_sflist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x55b64be3bf68 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x55b64be3b7f0 'list' 'sys_sflist_t *'
|   |   | | | |-ImplicitCastExpr 0x55b64be3c0a8 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x55b64be3bf90 <col:38> 'sys_sfnode_t *' lvalue Var 0x55b64be3ba00 'prev' 'sys_sfnode_t *'
|   |   | | | `-ImplicitCastExpr 0x55b64be3c0c0 <line:225:11> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x55b64be3bfb8 <col:11> 'sys_sfnode_t *' lvalue ParmVar 0x55b64be3b860 'node' 'sys_sfnode_t *'
|   |   | | `-ReturnStmt 0x55b64be3c110 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x55b64be3c0f8 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x55b64be3c0d8 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x55b64be3c1e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_sfnode_t *' '='
|   |     |-DeclRefExpr 0x55b64be3c180 <col:4> 'sys_sfnode_t *' lvalue Var 0x55b64be3ba00 'prev' 'sys_sfnode_t *'
|   |     `-ImplicitCastExpr 0x55b64be3c1d0 <col:11> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55b64be3c1a8 <col:11> 'sys_sfnode_t *' lvalue Var 0x55b64be3bb20 'test' 'sys_sfnode_t *'
|   `-ReturnStmt 0x55b64be3c2a0 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x55b64be3c288 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x55b64be3c268 <col:16> 'int' 0
|-RecordDecl 0x55b64be3c2e8 </vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:18:1, line:24:1> line:18:8 struct sys_mem_pool_lvl definition
| |-RecordDecl 0x55b64be3c390 <line:19:2, line:22:2> line:19:2 union definition
| | |-FieldDecl 0x55b64be3c4a8 <line:20:3, col:10> col:10 bits_p 'u32_t *'
| | `-FieldDecl 0x55b64be3c618 <line:21:3, col:31> col:9 bits 'u32_t [2]'
| |-FieldDecl 0x55b64be3c6b0 <line:19:2> col:2 implicit 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| |-IndirectFieldDecl 0x55b64be3c708 <line:20:10> col:10 implicit bits_p 'u32_t *'
| | |-Field 0x55b64be3c6b0 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x55b64be3c4a8 'bits_p' 'u32_t *'
| |-IndirectFieldDecl 0x55b64be3c758 <line:21:9> col:9 implicit bits 'u32_t [2]'
| | |-Field 0x55b64be3c6b0 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x55b64be3c618 'bits' 'u32_t [2]'
| `-FieldDecl 0x55b64be3c7a8 <line:23:2, col:14> col:14 free_list 'sys_dlist_t':'struct _dnode'
|-RecordDecl 0x55b64be3c840 <line:29:1, line:37:1> line:29:8 struct sys_mem_pool_base definition
| |-FieldDecl 0x55b64be3d720 <line:30:2, col:8> col:8 buf 'void *'
| |-FieldDecl 0x55b64be3d778 <line:31:2, col:9> col:9 max_sz 'size_t':'unsigned long'
| |-FieldDecl 0x55b64be3d7f0 <line:32:2, col:8> col:8 n_max 'u16_t':'unsigned short'
| |-FieldDecl 0x55b64be3d848 <line:33:2, col:7> col:7 n_levels 'u8_t':'unsigned char'
| |-FieldDecl 0x55b64be3d8c0 <line:34:2, col:7> col:7 max_inline_level 's8_t':'signed char'
| |-FieldDecl 0x55b64be3d9c0 <line:35:2, col:27> col:27 levels 'struct sys_mem_pool_lvl *'
| `-FieldDecl 0x55b64be3da18 <line:36:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x55b64be3dc10 <line:98:1, col:58> col:6 z_sys_mem_pool_base_init 'void (struct sys_mem_pool_base *)'
| `-ParmVarDecl 0x55b64be3db10 <col:31, col:57> col:57 p 'struct sys_mem_pool_base *'
|-FunctionDecl 0x55b64be3e038 <line:100:1, line:101:55> line:100:5 z_sys_mem_pool_block_alloc 'int (struct sys_mem_pool_base *, size_t, u32_t *, u32_t *, void **)'
| |-ParmVarDecl 0x55b64be3dce0 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x55b64be3dd50 <col:61, col:68> col:68 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64be3ddc0 <line:101:10, col:17> col:17 level_p 'u32_t *'
| |-ParmVarDecl 0x55b64be3de30 <col:26, col:33> col:33 block_p 'u32_t *'
| `-ParmVarDecl 0x55b64be3ded0 <col:42, col:49> col:49 data_p 'void **'
|-FunctionDecl 0x55b64be3e340 <line:103:1, line:104:21> line:103:6 z_sys_mem_pool_block_free 'void (struct sys_mem_pool_base *, u32_t, u32_t)'
| |-ParmVarDecl 0x55b64be3e128 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x55b64be3e198 <col:61, col:67> col:67 level 'u32_t':'unsigned int'
| `-ParmVarDecl 0x55b64be3e208 <line:104:10, col:16> col:16 block 'u32_t':'unsigned int'
|-RecordDecl 0x55b64be3e3f8 </vagrant/ext/zephyros/zephyr/include/kernel_structs.h:83:1, line:96:1> line:83:8 struct _ready_q definition
| `-FieldDecl 0x55b64be3e4c8 <line:86:2, col:19> col:19 cache 'struct k_thread *'
|-TypedefDecl 0x55b64be3e560 <line:98:1, col:25> col:25 _ready_q_t 'struct _ready_q':'struct _ready_q'
| `-ElaboratedType 0x55b64be3e510 'struct _ready_q' sugar
|   `-RecordType 0x55b64be3e480 'struct _ready_q'
|     `-Record 0x55b64be3e3f8 '_ready_q'
|-RecordDecl 0x55b64be3e5b8 <line:100:1, line:134:1> line:100:8 struct _cpu definition
| |-FieldDecl 0x55b64be3e670 <line:102:2, col:8> col:8 nested 'u32_t':'unsigned int'
| |-FieldDecl 0x55b64be3e6d0 <line:105:2, col:8> col:8 irq_stack 'char *'
| |-FieldDecl 0x55b64be46fb8 <line:108:2, col:19> col:19 current 'struct k_thread *'
| |-FieldDecl 0x55b64be47028 <line:111:2, col:19> col:19 idle_thread 'struct k_thread *'
| `-FieldDecl 0x55b64be47080 <line:128:2, col:7> col:7 id 'u8_t':'unsigned char'
|-TypedefDecl 0x55b64be47120 <line:136:1, col:21> col:21 _cpu_t 'struct _cpu':'struct _cpu'
| `-ElaboratedType 0x55b64be470d0 'struct _cpu' sugar
|   `-RecordType 0x55b64be3e640 'struct _cpu'
|     `-Record 0x55b64be3e5b8 '_cpu'
|-RecordDecl 0x55b64be47178 <line:138:1, line:191:1> line:138:8 struct z_kernel definition
| |-RecordDecl 0x55b64be47220 <line:143:2, line:157:2> line:143:2 invalid union definition
| | |-FieldDecl 0x55b64be47318 <line:144:3, col:15> col:15 invalid cpus 'struct _cpu':'struct _cpu'
| | |-RecordDecl 0x55b64be47360 <line:146:3, line:155:3> line:146:3 struct definition
| | | |-FieldDecl 0x55b64be47420 <line:148:4, col:10> col:10 nested 'u32_t':'unsigned int'
| | | |-FieldDecl 0x55b64be47480 <line:151:4, col:10> col:10 irq_stack 'char *'
| | | `-FieldDecl 0x55b64be474f0 <line:154:4, col:21> col:21 current 'struct k_thread *'
| | |-FieldDecl 0x55b64be47590 <line:146:3> col:3 implicit 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | |-IndirectFieldDecl 0x55b64be475e8 <line:148:10> col:10 implicit nested 'u32_t':'unsigned int'
| | | |-Field 0x55b64be47590 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x55b64be47420 'nested' 'u32_t':'unsigned int'
| | |-IndirectFieldDecl 0x55b64be47638 <line:151:10> col:10 implicit irq_stack 'char *'
| | | |-Field 0x55b64be47590 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x55b64be47480 'irq_stack' 'char *'
| | `-IndirectFieldDecl 0x55b64be47688 <line:154:21> col:21 implicit current 'struct k_thread *'
| |   |-Field 0x55b64be47590 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| |   `-Field 0x55b64be474f0 'current' 'struct k_thread *'
| `-FieldDecl 0x55b64be47750 <line:172:2, col:18> col:18 ready_q 'struct _ready_q':'struct _ready_q'
|-TypedefDecl 0x55b64be47830 <line:193:1, col:25> col:25 _kernel_t 'struct z_kernel':'struct z_kernel'
| `-ElaboratedType 0x55b64be477e0 'struct z_kernel' sugar
|   `-RecordType 0x55b64be47200 'struct z_kernel'
|     `-Record 0x55b64be47178 'z_kernel'
|-VarDecl 0x55b64be478a8 <line:195:1, col:24> col:24 _kernel 'struct z_kernel':'struct z_kernel' extern
|-FunctionDecl 0x55b64be47a60 </vagrant/ext/zephyros/zephyr/include/kernel_version.h:47:1, col:41> col:14 sys_kernel_version_get 'u32_t (void)' extern
| `-FullComment 0x55b64bf3b9b0 <line:40:3, line:45:25>
|   |-ParagraphComment 0x55b64bf3b7a0 <line:40:3>
|   | `-TextComment 0x55b64bf3b770 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3b7c0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x55b64bf3b820 <col:10, col:56>
|   |   `-TextComment 0x55b64bf3b7f0 <col:10, col:56> Text=" Return the kernel version of the present build"
|   |-ParagraphComment 0x55b64bf3b890 <line:42:3, line:43:27>
|   | |-TextComment 0x55b64bf3b840 <line:42:3, col:76> Text=" The kernel version is a four-byte value, whose format is described in the"
|   | `-TextComment 0x55b64bf3b860 <line:43:3, col:27> Text=" file "kernel_version.h"."
|   |-ParagraphComment 0x55b64bf3b8e0 <line:45:3>
|   | `-TextComment 0x55b64bf3b8b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3b900 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x55b64bf3b960 <col:11, col:25>
|       `-TextComment 0x55b64bf3b930 <col:11, col:25> Text=" kernel version"
|-FunctionDecl 0x55b64be47c48 </vagrant/ext/zephyros/zephyr/include/random/rand32.h:45:1, col:33> col:14 sys_rand32_get 'u32_t (void)' extern
| `-FullComment 0x55b64bf3bd00 <line:37:3, line:43:31>
|   |-ParagraphComment 0x55b64bf3ba50 <line:37:3>
|   | `-TextComment 0x55b64bf3ba20 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3ba70 <col:4, line:38:20> Name="brief"
|   | `-ParagraphComment 0x55b64bf3baf0 <line:37:10, line:38:20>
|   |   |-TextComment 0x55b64bf3baa0 <line:37:10, col:63> Text=" Return a 32-bit random value that should pass general"
|   |   `-TextComment 0x55b64bf3bac0 <line:38:3, col:20> Text=" randomness tests."
|   |-ParagraphComment 0x55b64bf3bb40 <line:40:3>
|   | `-TextComment 0x55b64bf3bb10 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3bb60 <col:4, line:41:23> Name="note"
|   | `-ParagraphComment 0x55b64bf3bbe0 <line:40:9, line:41:23>
|   |   |-TextComment 0x55b64bf3bb90 <line:40:9, col:68> Text=" The random value returned is not a cryptographically secure"
|   |   `-TextComment 0x55b64bf3bbb0 <line:41:3, col:23> Text=" random number value."
|   |-ParagraphComment 0x55b64bf3bc30 <line:43:3>
|   | `-TextComment 0x55b64bf3bc00 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3bc50 <col:4, col:31> Name="return"
|     `-ParagraphComment 0x55b64bf3bcb0 <col:11, col:31>
|       `-TextComment 0x55b64bf3bc80 <col:11, col:31> Text=" 32-bit random value."
|-FunctionDecl 0x55b64be47eb0 <line:57:1, col:47> col:13 sys_rand_get 'void (void *, size_t)' extern
| |-ParmVarDecl 0x55b64be47d30 <col:26, col:32> col:32 dst 'void *'
| |-ParmVarDecl 0x55b64be47da0 <col:37, col:44> col:44 len 'size_t':'unsigned long'
| `-FullComment 0x55b64bf3c1b0 <line:47:3, line:56:1>
|   |-ParagraphComment 0x55b64bf3bda0 <line:47:3>
|   | `-TextComment 0x55b64bf3bd70 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3bdc0 <col:4, line:48:33> Name="brief"
|   | `-ParagraphComment 0x55b64bf3be40 <line:47:10, line:48:33>
|   |   |-TextComment 0x55b64bf3bdf0 <line:47:10, col:73> Text=" Fill the destination buffer with random data values that should"
|   |   `-TextComment 0x55b64bf3be10 <line:48:3, col:33> Text=" pass general randomness tests."
|   |-ParagraphComment 0x55b64bf3be90 <line:50:3>
|   | `-TextComment 0x55b64bf3be60 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3beb0 <col:4, line:51:31> Name="note"
|   | `-ParagraphComment 0x55b64bf3bf30 <line:50:9, line:51:31>
|   |   |-TextComment 0x55b64bf3bee0 <line:50:9, col:72> Text=" The random values returned are not considered cryptographically"
|   |   `-TextComment 0x55b64bf3bf00 <line:51:3, col:31> Text=" secure random number values."
|   |-ParagraphComment 0x55b64bf3bf80 <line:53:3>
|   | `-TextComment 0x55b64bf3bf50 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3bfa0 <col:4, line:54:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf3c050 <line:53:20, line:54:3>
|   |   |-TextComment 0x55b64bf3c000 <line:53:20, col:64> Text=" destination buffer to fill with random data."
|   |   `-TextComment 0x55b64bf3c020 <line:54:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3c070 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf3c100 <col:14, col:45>
|   |   `-TextComment 0x55b64bf3c0d0 <col:14, col:45> Text=" size of the destination buffer."
|   `-ParagraphComment 0x55b64bf3c150 <line:56:1>
|     `-TextComment 0x55b64bf3c120 <col:1> Text=" "
|-FunctionDecl 0x55b64be4afb8 <line:72:1, col:48> col:12 sys_csrand_get 'int (void *, size_t)' extern
| |-ParmVarDecl 0x55b64be4ae28 <col:27, col:33> col:33 dst 'void *'
| |-ParmVarDecl 0x55b64be4ae98 <col:38, col:45> col:45 len 'size_t':'unsigned long'
| `-FullComment 0x55b64bf3c740 <line:60:3, line:71:1>
|   |-ParagraphComment 0x55b64bf3c250 <line:60:3>
|   | `-TextComment 0x55b64bf3c220 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3c270 <col:4, line:61:22> Name="brief"
|   | `-ParagraphComment 0x55b64bf3c2f0 <line:60:10, line:61:22>
|   |   |-TextComment 0x55b64bf3c2a0 <line:60:10, col:67> Text=" Fill the destination buffer with cryptographically secure"
|   |   `-TextComment 0x55b64bf3c2c0 <line:61:3, col:22> Text=" random data values."
|   |-ParagraphComment 0x55b64bf3c340 <line:63:3>
|   | `-TextComment 0x55b64bf3c310 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3c360 <col:4, line:64:42> Name="note"
|   | `-ParagraphComment 0x55b64bf3c3e0 <line:63:9, line:64:42>
|   |   |-TextComment 0x55b64bf3c390 <line:63:9, col:75> Text=" If the random values requested do not need to be cryptographically"
|   |   `-TextComment 0x55b64bf3c3b0 <line:64:3, col:42> Text=" secure then use sys_rand_get() instead."
|   |-ParagraphComment 0x55b64bf3c430 <line:66:3>
|   | `-TextComment 0x55b64bf3c400 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3c450 <col:4, line:67:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf3c500 <line:66:20, line:67:3>
|   |   |-TextComment 0x55b64bf3c4b0 <line:66:20, col:47> Text=" destination buffer to fill."
|   |   `-TextComment 0x55b64bf3c4d0 <line:67:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3c520 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf3c5b0 <col:14, col:45>
|   |   `-TextComment 0x55b64bf3c580 <col:14, col:45> Text=" size of the destination buffer."
|   |-ParagraphComment 0x55b64bf3c600 <line:69:3>
|   | `-TextComment 0x55b64bf3c5d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3c620 <col:4, col:53> Name="return"
|   | `-ParagraphComment 0x55b64bf3c680 <col:11, col:53>
|   |   `-TextComment 0x55b64bf3c650 <col:11, col:53> Text=" 0 if success, -EIO if entropy reseed error"
|   `-ParagraphComment 0x55b64bf3c6d0 <line:71:1>
|     `-TextComment 0x55b64bf3c6a0 <col:1> Text=" "
|-TypedefDecl 0x55b64be4b5e0 </vagrant/ext/zephyros/zephyr/include/syscall.h:85:1, line:88:17> line:85:21 _k_syscall_handler_t 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| |-PointerType 0x55b64be4b550 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| | `-ParenType 0x55b64be4b4f0 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' sugar
| |   `-FunctionProtoType 0x55b64be4b480 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' cdecl
| |     |-TypedefType 0x55b64be4b0d0 'uintptr_t' sugar
| |     | |-Typedef 0x55b64bd8f280 'uintptr_t'
| |     | `-BuiltinType 0x55b64bd0f850 'unsigned long'
| |     |-TypedefType 0x55b64be4b0d0 'uintptr_t' sugar
| |     | |-Typedef 0x55b64bd8f280 'uintptr_t'
| |     | `-BuiltinType 0x55b64bd0f850 'unsigned long'
| |     |-TypedefType 0x55b64be4b0d0 'uintptr_t' sugar
| |     | |-Typedef 0x55b64bd8f280 'uintptr_t'
| |     | `-BuiltinType 0x55b64bd0f850 'unsigned long'
| |     |-TypedefType 0x55b64be4b0d0 'uintptr_t' sugar
| |     | |-Typedef 0x55b64bd8f280 'uintptr_t'
| |     | `-BuiltinType 0x55b64bd0f850 'unsigned long'
| |     |-TypedefType 0x55b64be4b0d0 'uintptr_t' sugar
| |     | |-Typedef 0x55b64bd8f280 'uintptr_t'
| |     | `-BuiltinType 0x55b64bd0f850 'unsigned long'
| |     |-TypedefType 0x55b64be4b0d0 'uintptr_t' sugar
| |     | |-Typedef 0x55b64bd8f280 'uintptr_t'
| |     | `-BuiltinType 0x55b64bd0f850 'unsigned long'
| |     |-TypedefType 0x55b64be4b0d0 'uintptr_t' sugar
| |     | |-Typedef 0x55b64bd8f280 'uintptr_t'
| |     | `-BuiltinType 0x55b64bd0f850 'unsigned long'
| |     `-PointerType 0x55b64bd0fb90 'void *'
| |       `-BuiltinType 0x55b64bd0f6f0 'void'
| `-FullComment 0x55b64bf3d3e0 <line:50:3, line:84:1>
|   |-ParagraphComment 0x55b64bf3c7e0 <line:50:3>
|   | `-TextComment 0x55b64bf3c7b0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf3c800 <col:4, col:33> Text=" _k_syscall_handler_t"
|   |-ParagraphComment 0x55b64bf3c870 <line:51:3>
|   | `-TextComment 0x55b64bf3c840 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3c890 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf3c8f0 <col:10, col:43>
|   |   `-TextComment 0x55b64bf3c8c0 <col:10, col:43> Text=" System call handler function type"
|   |-ParagraphComment 0x55b64bf3c960 <line:53:3, line:54:67>
|   | |-TextComment 0x55b64bf3c910 <line:53:3, col:70> Text=" These are kernel-side skeleton functions for system calls. They are"
|   | `-TextComment 0x55b64bf3c930 <line:54:3, col:67> Text=" necessary to sanitize the arguments passed into the system call:"
|   |-ParagraphComment 0x55b64bf3cb40 <line:56:3, line:66:41>
|   | |-TextComment 0x55b64bf3c980 <line:56:3, col:78> Text=" - Any kernel object or device pointers are validated with _SYSCALL_IS_OBJ()"
|   | |-TextComment 0x55b64bf3c9a0 <line:57:3, col:79> Text=" - Any memory buffers passed in are checked to ensure that the calling thread"
|   | |-TextComment 0x55b64bf3c9c0 <line:58:3, col:32> Text="   actually has access to them"
|   | |-TextComment 0x55b64bf3c9e0 <line:59:3, col:69> Text=" - Many kernel calls do no sanity checking of parameters other than"
|   | |-TextComment 0x55b64bf3ca00 <line:60:3, col:69> Text="   assertions. The handler must check all of these conditions using"
|   | |-TextComment 0x55b64bf3ca20 <line:61:3, col:22> Text="   _SYSCALL_ASSERT()"
|   | |-TextComment 0x55b64bf3ca40 <line:62:3, col:78> Text=" - If the system call has more than 6 arguments, then arg6 will be a pointer"
|   | |-TextComment 0x55b64bf3ca60 <line:63:3, col:74> Text="   to some struct containing arguments 6+. The struct itself needs to be"
|   | |-TextComment 0x55b64bf3ca80 <line:64:3, col:78> Text="   validated like any other buffer passed in from userspace, and its members"
|   | |-TextComment 0x55b64bf3caa0 <line:65:3, col:70> Text="   individually validated (if necessary) and then passed to the real"
|   | `-TextComment 0x55b64bf3cac0 <line:66:3, col:41> Text="   implementation like normal arguments"
|   |-ParagraphComment 0x55b64bf3cbb0 <line:68:3, line:69:70>
|   | |-TextComment 0x55b64bf3cb60 <line:68:3, col:75> Text=" Even if the system call implementation has no return value, these always"
|   | `-TextComment 0x55b64bf3cb80 <line:69:3, col:70> Text=" return something, even 0, to prevent register leakage to userspace."
|   |-ParagraphComment 0x55b64bf3cc00 <line:71:3, col:80>
|   | `-TextComment 0x55b64bf3cbd0 <col:3, col:80> Text=" Once everything has been validated, the real implementation will be executed."
|   |-ParagraphComment 0x55b64bf3cc50 <line:73:3>
|   | `-TextComment 0x55b64bf3cc20 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3cc70 <col:4, line:74:3> [in] implicitly Param="arg1" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf3cd20 <line:73:15, line:74:3>
|   |   |-TextComment 0x55b64bf3ccd0 <line:73:15, col:37> Text=" system call argument 1"
|   |   `-TextComment 0x55b64bf3ccf0 <line:74:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3cd40 <col:4, line:75:3> [in] implicitly Param="arg2" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf3cdf0 <line:74:15, line:75:3>
|   |   |-TextComment 0x55b64bf3cda0 <line:74:15, col:37> Text=" system call argument 2"
|   |   `-TextComment 0x55b64bf3cdc0 <line:75:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3ce10 <col:4, line:76:3> [in] implicitly Param="arg3" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf3cec0 <line:75:15, line:76:3>
|   |   |-TextComment 0x55b64bf3ce70 <line:75:15, col:37> Text=" system call argument 3"
|   |   `-TextComment 0x55b64bf3ce90 <line:76:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3cee0 <col:4, line:77:3> [in] implicitly Param="arg4" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf3cf90 <line:76:15, line:77:3>
|   |   |-TextComment 0x55b64bf3cf40 <line:76:15, col:37> Text=" system call argument 4"
|   |   `-TextComment 0x55b64bf3cf60 <line:77:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3cfb0 <col:4, line:78:3> [in] implicitly Param="arg5" ParamIndex=4
|   | `-ParagraphComment 0x55b64bf3d060 <line:77:15, line:78:3>
|   |   |-TextComment 0x55b64bf3d010 <line:77:15, col:37> Text=" system call argument 5"
|   |   `-TextComment 0x55b64bf3d030 <line:78:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3d080 <col:4, line:79:3> [in] implicitly Param="arg6" ParamIndex=5
|   | `-ParagraphComment 0x55b64bf3d130 <line:78:15, line:79:3>
|   |   |-TextComment 0x55b64bf3d0e0 <line:78:15, col:37> Text=" system call argument 6"
|   |   `-TextComment 0x55b64bf3d100 <line:79:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3d150 <col:4, line:81:3> [in] implicitly Param="ssf" ParamIndex=6
|   | `-ParagraphComment 0x55b64bf3d230 <line:79:14, line:81:3>
|   |   |-TextComment 0x55b64bf3d1b0 <line:79:14, col:75> Text=" System call stack frame pointer. Used to generate kernel oops"
|   |   |-TextComment 0x55b64bf3d1d0 <line:80:3, col:70> Text="            via _arch_syscall_oops_at(). Contents are arch-specific."
|   |   `-TextComment 0x55b64bf3d1f0 <line:81:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3d250 <col:4, line:82:22> Name="return"
|   | `-ParagraphComment 0x55b64bf3d2d0 <line:81:11, line:82:22>
|   |   |-TextComment 0x55b64bf3d280 <line:81:11, col:75> Text=" system call return value, or 0 if the system call implementation"
|   |   `-TextComment 0x55b64bf3d2a0 <line:82:3, col:22> Text="         return void"
|   `-ParagraphComment 0x55b64bf3d320 <line:84:1>
|     `-TextComment 0x55b64bf3d2f0 <col:1> Text=" "
|-FunctionDecl 0x55b64be4b700 <line:93:1, line:106:1> line:93:27 z_syscall_trap 'bool (void)' static inline
| |-CompoundStmt 0x55b64be4b928 <line:94:1, line:106:1>
| | |-DeclStmt 0x55b64be4b890 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/syscall.h:95:18>
| | | `-VarDecl 0x55b64be4b7f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, line:15:16> /vagrant/ext/zephyros/zephyr/include/syscall.h:95:7 used ret 'bool' cinit
| | |   `-ImplicitCastExpr 0x55b64be4b878 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
| | |     `-IntegerLiteral 0x55b64be4b858 <col:16> 'int' 0
| | `-ReturnStmt 0x55b64be4b8e8 </vagrant/ext/zephyros/zephyr/include/syscall.h:105:2, col:9>
| |   `-ImplicitCastExpr 0x55b64be4b8d0 <col:9> 'bool' <LValueToRValue>
| |     `-DeclRefExpr 0x55b64be4b8a8 <col:9> 'bool' lvalue Var 0x55b64be4b7f8 'ret' 'bool'
| `-AlwaysInlineAttr 0x55b64be4b7a0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x55b64be4b9d8 </vagrant/ext/zephyros/zephyr/include/syscall.h:113:1, line:120:1> line:113:20 _is_user_context 'bool (void)' static inline
| |-CompoundStmt 0x55b64be4bb28 <line:114:1, line:120:1>
| | `-ReturnStmt 0x55b64be4bab0 <line:118:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-ImplicitCastExpr 0x55b64be4ba98 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x55b64be4ba78 <col:16> 'int' 0
| `-FullComment 0x55b64bf3d590 </vagrant/ext/zephyros/zephyr/include/syscall.h:109:3, line:111:69>
|   |-ParagraphComment 0x55b64bf3d480 <line:109:3, col:53>
|   | `-TextComment 0x55b64bf3d450 <col:3, col:53> Text=" Indicate whether the CPU is currently in user mode"
|   |-ParagraphComment 0x55b64bf3d4d0 <line:111:3>
|   | `-TextComment 0x55b64bf3d4a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3d4f0 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x55b64bf3d550 <col:11, col:69>
|       `-TextComment 0x55b64bf3d520 <col:11, col:69> Text=" true if the CPU is currently running with user permissions"
|-RecordDecl 0x55b64be4bb40 prev 0x55b64bdffc88 </vagrant/ext/zephyros/zephyr/include/sys/arch_interface.h:41:1, col:8> col:8 struct k_thread
|-RecordDecl 0x55b64be4bbc8 <line:42:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x55b64be4bc70 <line:44:9, col:16> col:16 struct _k_thread_stack_element
|-TypedefDecl 0x55b64be4bd70 <col:1, col:40> col:40 referenced k_thread_stack_t 'struct _k_thread_stack_element':'struct _k_thread_stack_element'
| `-ElaboratedType 0x55b64be4bd20 'struct _k_thread_stack_element' sugar
|   `-RecordType 0x55b64be4bd00 'struct _k_thread_stack_element'
|     `-Record 0x55b64beadac0 '_k_thread_stack_element'
|-TypedefDecl 0x55b64be6cc60 <line:46:1, col:62> col:16 referenced k_thread_entry_t 'void (*)(void *, void *, void *)'
| `-PointerType 0x55b64be6cbf0 'void (*)(void *, void *, void *)'
|   `-ParenType 0x55b64be6cb90 'void (void *, void *, void *)' sugar
|     `-FunctionProtoType 0x55b64be6cb40 'void (void *, void *, void *)' cdecl
|       |-BuiltinType 0x55b64bd0f6f0 'void'
|       |-PointerType 0x55b64bd0fb90 'void *'
|       | `-BuiltinType 0x55b64bd0f6f0 'void'
|       |-PointerType 0x55b64bd0fb90 'void *'
|       | `-BuiltinType 0x55b64bd0f6f0 'void'
|       `-PointerType 0x55b64bd0fb90 'void *'
|         `-BuiltinType 0x55b64bd0f6f0 'void'
|-FunctionDecl 0x55b64be6cda8 <line:59:1, col:45> col:21 used arch_k_cycle_get_32 'u32_t (void)' static inline
| `-FullComment 0x55b64bf3d740 <line:55:3, line:57:24>
|   |-ParagraphComment 0x55b64bf3d630 <line:55:3, col:70>
|   | `-TextComment 0x55b64bf3d600 <col:3, col:70> Text=" Obtain the current cycle count, in units that are hardware-specific"
|   |-ParagraphComment 0x55b64bf3d680 <line:57:3>
|   | `-TextComment 0x55b64bf3d650 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3d6a0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x55b64bf3d700 <col:8, col:24>
|       `-TextComment 0x55b64bf3d6d0 <col:8, col:24> Text=" k_cycle_get_32()"
|-FunctionDecl 0x55b64be6d120 <line:132:1, col:24> col:6 used arch_cpu_idle 'void (void)'
| `-FullComment 0x55b64bf3dac0 <line:120:3, line:130:20>
|   |-ParagraphComment 0x55b64bf3d7e0 <line:120:3>
|   | `-TextComment 0x55b64bf3d7b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3d800 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55b64bf3d860 <col:10, col:33>
|   |   `-TextComment 0x55b64bf3d830 <col:10, col:33> Text=" Power save idle routine"
|   |-ParagraphComment 0x55b64bf3d900 <line:122:3, line:124:47>
|   | |-TextComment 0x55b64bf3d880 <line:122:3, col:74> Text=" This function will be called by the kernel idle loop or possibly within"
|   | |-TextComment 0x55b64bf3d8a0 <line:123:3, col:68> Text=" an implementation of z_sys_power_save_idle in the kernel when the"
|   | `-TextComment 0x55b64bf3d8c0 <line:124:3, col:47> Text=" '_sys_power_save_flag' variable is non-zero."
|   |-ParagraphComment 0x55b64bf3d9a0 <line:126:3, line:128:35>
|   | |-TextComment 0x55b64bf3d920 <line:126:3, col:72> Text=" Architectures that do not implement power management instructions may"
|   | |-TextComment 0x55b64bf3d940 <line:127:3, col:69> Text=" immediately return, otherwise a power-saving instruction should be"
|   | `-TextComment 0x55b64bf3d960 <line:128:3, col:35> Text=" issued to wait for an interrupt."
|   |-ParagraphComment 0x55b64bf3d9f0 <line:130:3>
|   | `-TextComment 0x55b64bf3d9c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3da10 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x55b64bf3da70 <col:8, col:20>
|       `-TextComment 0x55b64bf3da40 <col:8, col:20> Text=" k_cpu_idle()"
|-FunctionDecl 0x55b64be6d2c0 <line:152:1, col:43> col:6 used arch_cpu_atomic_idle 'void (unsigned int)'
| |-ParmVarDecl 0x55b64be6d200 <col:27, col:40> col:40 key 'unsigned int'
| `-FullComment 0x55b64bf3dfd0 <line:135:3, line:150:76>
|   |-ParagraphComment 0x55b64bf3db60 <line:135:3>
|   | `-TextComment 0x55b64bf3db30 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3db80 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x55b64bf3dbe0 <col:10, col:66>
|   |   `-TextComment 0x55b64bf3dbb0 <col:10, col:66> Text=" Atomically re-enable interrupts and enter low power mode"
|   |-ParagraphComment 0x55b64bf3dc30 <line:137:3, col:62>
|   | `-TextComment 0x55b64bf3dc00 <col:3, col:62> Text=" The requirements for arch_cpu_atomic_idle() are as follows:"
|   |-ParagraphComment 0x55b64bf3dd20 <line:139:3, line:143:44>
|   | |-TextComment 0x55b64bf3dc50 <line:139:3, col:67> Text=" -# Enabling interrupts and entering a low-power mode needs to be"
|   | |-TextComment 0x55b64bf3dc70 <line:140:3, col:73> Text="    atomic, i.e. there should be no period of time where interrupts are"
|   | |-TextComment 0x55b64bf3dc90 <line:141:3, col:77> Text="    enabled before the processor enters a low-power mode.  See the comments"
|   | |-TextComment 0x55b64bf3dcb0 <line:142:3, col:62> Text="    in k_lifo_get(), for example, of the race condition that"
|   | `-TextComment 0x55b64bf3dcd0 <line:143:3, col:44> Text="    occurs if this requirement is not met."
|   |-ParagraphComment 0x55b64bf3dd90 <line:145:3, line:146:65>
|   | |-TextComment 0x55b64bf3dd40 <line:145:3, col:74> Text=" -# After waking up from the low-power mode, the interrupt lockout state"
|   | `-TextComment 0x55b64bf3dd60 <line:146:3, col:65> Text="    must be restored as indicated in the 'key' input parameter."
|   |-ParagraphComment 0x55b64bf3dde0 <line:148:3>
|   | `-TextComment 0x55b64bf3ddb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3de00 <col:4, col:27> Name="see"
|   | `-ParagraphComment 0x55b64bf3de60 <col:8, col:27>
|   |   `-TextComment 0x55b64bf3de30 <col:8, col:27> Text=" k_cpu_atomic_idle()"
|   |-ParagraphComment 0x55b64bf3deb0 <line:150:3>
|   | `-TextComment 0x55b64bf3de80 <col:3> Text=" "
|   `-ParamCommandComment 0x55b64bf3ded0 <col:4, col:76> [in] implicitly Param="key" ParamIndex=0
|     `-ParagraphComment 0x55b64bf3df60 <col:14, col:76>
|       `-TextComment 0x55b64bf3df30 <col:14, col:76> Text=" Lockout key returned by previous invocation of arch_irq_lock()"
|-TypedefDecl 0x55b64be6d5b0 <line:167:1, col:57> col:30 referenced arch_cpustart_t 'void (*)(void *) __attribute__((noreturn))'
| |-PointerType 0x55b64be6d550 'void (*)(void *) __attribute__((noreturn))'
| | `-ParenType 0x55b64be6d4f0 'void (void *) __attribute__((noreturn))' sugar
| |   `-FunctionProtoType 0x55b64be6d4b0 'void (void *) __attribute__((noreturn))' noreturn cdecl
| |     |-BuiltinType 0x55b64bd0f6f0 'void'
| |     `-PointerType 0x55b64bd0fb90 'void *'
| |       `-BuiltinType 0x55b64bd0f6f0 'void'
| `-FullComment 0x55b64bf3e1b0 <line:163:3, line:165:52>
|   |-ParagraphComment 0x55b64bf3e070 <line:163:3, col:25>
|   | `-TextComment 0x55b64bf3e040 <col:3, col:25> Text=" Per-cpu entry function"
|   |-ParagraphComment 0x55b64bf3e0c0 <line:165:3>
|   | `-TextComment 0x55b64bf3e090 <col:3> Text=" "
|   `-ParamCommandComment 0x55b64bf3e0e0 <col:4, col:52> [in] implicitly Param="context"
|     `-ParagraphComment 0x55b64bf3e170 <col:18, col:52>
|       `-TextComment 0x55b64bf3e140 <col:18, col:52> Text=" parameter, implementation specific"
|-FunctionDecl 0x55b64be6ea58 <line:189:1, line:190:36> line:189:6 arch_start_cpu 'void (int, k_thread_stack_t *, int, arch_cpustart_t, void *)'
| |-ParmVarDecl 0x55b64be6d650 <col:21, col:25> col:25 cpu_num 'int'
| |-ParmVarDecl 0x55b64be6d738 <col:34, col:52> col:52 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55b64be6d7b0 <col:59, col:63> col:63 sz 'int'
| |-ParmVarDecl 0x55b64be6d840 <line:190:7, col:23> col:23 fn 'arch_cpustart_t':'void (*)(void *) __attribute__((noreturn))'
| |-ParmVarDecl 0x55b64be6d8b8 <col:27, col:33> col:33 arg 'void *'
| `-FullComment 0x55b64bf3e930 <line:170:3, line:187:51>
|   |-ParagraphComment 0x55b64bf3e250 <line:170:3>
|   | `-TextComment 0x55b64bf3e220 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf3e270 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55b64bf3e2d0 <col:10, col:53>
|   |   `-TextComment 0x55b64bf3e2a0 <col:10, col:53> Text=" Start a numbered CPU on a MP-capable system"
|   |-ParagraphComment 0x55b64bf3e3c0 <line:172:3, line:176:68>
|   | |-TextComment 0x55b64bf3e2f0 <line:172:3, col:77> Text=" This starts and initializes a specific CPU.  The main thread on startup is"
|   | |-TextComment 0x55b64bf3e310 <line:173:3, col:78> Text=" running on CPU zero, other processors are numbered sequentially.  On return"
|   | |-TextComment 0x55b64bf3e330 <line:174:3, col:78> Text=" from this function, the CPU is known to have begun operating and will enter"
|   | |-TextComment 0x55b64bf3e350 <line:175:3, col:79> Text=" the provided function.  Its interrupts will be initialized but disabled such"
|   | `-TextComment 0x55b64bf3e370 <line:176:3, col:68> Text=" that irq_unlock() with the provided key will work to enable them."
|   |-ParagraphComment 0x55b64bf3e480 <line:178:3, line:181:41>
|   | |-TextComment 0x55b64bf3e3e0 <line:178:3, col:67> Text=" Normally, in SMP mode this function will be called by the kernel"
|   | |-TextComment 0x55b64bf3e400 <line:179:3, col:79> Text=" initialization and should not be used as a user API.  But it is defined here"
|   | |-TextComment 0x55b64bf3e420 <line:180:3, col:76> Text=" for special-purpose apps which want Zephyr running on one core and to use"
|   | `-TextComment 0x55b64bf3e440 <line:181:3, col:41> Text=" others for design-specific processing."
|   |-ParagraphComment 0x55b64bf3e4d0 <line:183:3>
|   | `-TextComment 0x55b64bf3e4a0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3e4f0 <col:4, line:184:3> [in] implicitly Param="cpu_num" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf3e5a0 <line:183:18, line:184:3>
|   |   |-TextComment 0x55b64bf3e550 <line:183:18, col:43> Text=" Integer number of the CPU"
|   |   `-TextComment 0x55b64bf3e570 <line:184:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3e5c0 <col:4, line:185:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf3e670 <line:184:16, line:185:3>
|   |   |-TextComment 0x55b64bf3e620 <line:184:16, col:40> Text=" Stack memory for the CPU"
|   |   `-TextComment 0x55b64bf3e640 <line:185:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3e690 <col:4, line:186:3> [in] implicitly Param="sz" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf3e740 <line:185:13, line:186:3>
|   |   |-TextComment 0x55b64bf3e6f0 <line:185:13, col:40> Text=" Stack buffer size, in bytes"
|   |   `-TextComment 0x55b64bf3e710 <line:186:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3e760 <col:4, line:187:3> [in] implicitly Param="fn" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf3e810 <line:186:13, line:187:3>
|   |   |-TextComment 0x55b64bf3e7c0 <line:186:13, col:50> Text=" Function to begin running on the CPU."
|   |   `-TextComment 0x55b64bf3e7e0 <line:187:3> Text=" "
|   `-ParamCommandComment 0x55b64bf3e830 <col:4, col:51> [in] implicitly Param="arg" ParamIndex=4
|     `-ParagraphComment 0x55b64bf3e8c0 <col:14, col:51>
|       `-TextComment 0x55b64bf3e890 <col:14, col:51> Text=" Untyped argument to be passed to "fn""
|-FunctionDecl 0x55b64be6ec40 <line:204:1, col:46> col:28 used arch_irq_lock 'unsigned int (void)' static inline
| `-FullComment 0x55b64bf3eae0 <line:200:3, line:202:18>
|   |-ParagraphComment 0x55b64bf3e9d0 <line:200:3, col:37>
|   | `-TextComment 0x55b64bf3e9a0 <col:3, col:37> Text=" Lock interrupts on the current CPU"
|   |-ParagraphComment 0x55b64bf3ea20 <line:202:3>
|   | `-TextComment 0x55b64bf3e9f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3ea40 <col:4, col:18> Name="see"
|     `-ParagraphComment 0x55b64bf3eaa0 <col:8, col:18>
|       `-TextComment 0x55b64bf3ea70 <col:8, col:18> Text=" irq_lock()"
|-FunctionDecl 0x55b64be6eda8 <line:211:1, col:52> col:20 used arch_irq_unlock 'void (unsigned int)' static inline
| |-ParmVarDecl 0x55b64be6ed20 <col:36, col:49> col:49 key 'unsigned int'
| `-FullComment 0x55b64bf3ec90 <line:207:3, line:209:20>
|   |-ParagraphComment 0x55b64bf3eb80 <line:207:3, col:39>
|   | `-TextComment 0x55b64bf3eb50 <col:3, col:39> Text=" Unlock interrupts on the current CPU"
|   |-ParagraphComment 0x55b64bf3ebd0 <line:209:3>
|   | `-TextComment 0x55b64bf3eba0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3ebf0 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x55b64bf3ec50 <col:8, col:20>
|       `-TextComment 0x55b64bf3ec20 <col:8, col:20> Text=" irq_unlock()"
|-FunctionDecl 0x55b64be6ef18 <line:220:1, col:54> col:20 arch_irq_unlocked 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x55b64be6ee90 <col:38, col:51> col:51 key 'unsigned int'
| `-FullComment 0x55b64bf3ef30 <line:214:3, line:218:39>
|   |-ParagraphComment 0x55b64bf3ed30 <line:214:3, col:68>
|   | `-TextComment 0x55b64bf3ed00 <col:3, col:68> Text=" Test if calling arch_irq_unlock() with this key would unlock irqs"
|   |-ParagraphComment 0x55b64bf3ed80 <line:216:3>
|   | `-TextComment 0x55b64bf3ed50 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3eda0 <col:4, line:217:3> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf3ee50 <line:216:14, line:217:3>
|   |   |-TextComment 0x55b64bf3ee00 <line:216:14, col:47> Text=" value returned by arch_irq_lock()"
|   |   `-TextComment 0x55b64bf3ee20 <line:217:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3ee70 <col:4, line:218:39> Name="return"
|     `-ParagraphComment 0x55b64bf3eef0 <line:217:11, line:218:39>
|       |-TextComment 0x55b64bf3eea0 <line:217:11, col:72> Text=" true if interrupts were unlocked prior to the arch_irq_lock()"
|       `-TextComment 0x55b64bf3eec0 <line:218:3, col:39> Text=" call that produced the key argument."
|-FunctionDecl 0x55b64be6f088 <line:227:1, col:39> col:6 arch_irq_disable 'void (unsigned int)'
| |-ParmVarDecl 0x55b64be6f000 <col:23, col:36> col:36 irq 'unsigned int'
| `-FullComment 0x55b64bf3f0e0 <line:223:3, line:225:21>
|   |-ParagraphComment 0x55b64bf3efd0 <line:223:3, col:39>
|   | `-TextComment 0x55b64bf3efa0 <col:3, col:39> Text=" Disable the specified interrupt line"
|   |-ParagraphComment 0x55b64bf3f020 <line:225:3>
|   | `-TextComment 0x55b64bf3eff0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3f040 <col:4, col:21> Name="see"
|     `-ParagraphComment 0x55b64bf3f0a0 <col:8, col:21>
|       `-TextComment 0x55b64bf3f070 <col:8, col:21> Text=" irq_disable()"
|-FunctionDecl 0x55b64be6f1f8 <line:234:1, col:38> col:6 arch_irq_enable 'void (unsigned int)'
| |-ParmVarDecl 0x55b64be6f170 <col:22, col:35> col:35 irq 'unsigned int'
| `-FullComment 0x55b64bf3f290 <line:230:3, line:232:20>
|   |-ParagraphComment 0x55b64bf3f180 <line:230:3, col:38>
|   | `-TextComment 0x55b64bf3f150 <col:3, col:38> Text=" Enable the specified interrupt line"
|   |-ParagraphComment 0x55b64bf3f1d0 <line:232:3>
|   | `-TextComment 0x55b64bf3f1a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3f1f0 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x55b64bf3f250 <col:8, col:20>
|       `-TextComment 0x55b64bf3f220 <col:8, col:20> Text=" irq_enable()"
|-FunctionDecl 0x55b64be6f3a8 <line:241:1, col:41> col:5 arch_irq_is_enabled 'int (unsigned int)'
| |-ParmVarDecl 0x55b64be6f2e0 <col:25, col:38> col:38 irq 'unsigned int'
| `-FullComment 0x55b64bf3f460 <line:237:3, line:239:24>
|   |-ParagraphComment 0x55b64bf3f330 <line:237:3, col:39>
|   | `-TextComment 0x55b64bf3f300 <col:3, col:39> Text=" Test if an interrupt line is enabled"
|   |-ParagraphComment 0x55b64bf3f380 <line:239:3>
|   | `-TextComment 0x55b64bf3f350 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3f3a0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x55b64bf3f420 <col:8, col:24>
|       `-TextComment 0x55b64bf3f3f0 <col:8, col:24> Text=" irq_is_enabled()"
|-FunctionDecl 0x55b64be6f8f8 <line:254:1, line:256:37> line:254:5 used arch_irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |-ParmVarDecl 0x55b64be6f490 <col:30, col:43> col:43 irq 'unsigned int'
| |-ParmVarDecl 0x55b64be6f508 <col:48, col:61> col:61 priority 'unsigned int'
| |-ParmVarDecl 0x55b64be6f6a0 <line:255:9, col:40> col:16 routine 'void (*)(void *)'
| |-ParmVarDecl 0x55b64be6f718 <line:256:9, col:15> col:15 parameter 'void *'
| |-ParmVarDecl 0x55b64be6f788 <col:26, col:32> col:32 flags 'u32_t':'unsigned int'
| `-FullComment 0x55b64bf3fa80 <line:244:3, line:252:48>
|   |-ParagraphComment 0x55b64bf3f500 <line:244:3, col:53>
|   | `-TextComment 0x55b64bf3f4d0 <col:3, col:53> Text=" Arch-specific hook to install a dynamic interrupt."
|   |-ParagraphComment 0x55b64bf3f550 <line:246:3>
|   | `-TextComment 0x55b64bf3f520 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3f570 <col:4, line:247:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf3f620 <line:246:14, line:247:3>
|   |   |-TextComment 0x55b64bf3f5d0 <line:246:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x55b64bf3f5f0 <line:247:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3f640 <col:4, line:248:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf3f6f0 <line:247:19, line:248:3>
|   |   |-TextComment 0x55b64bf3f6a0 <line:247:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x55b64bf3f6c0 <line:248:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3f710 <col:4, line:249:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf3f7c0 <line:248:18, line:249:3>
|   |   |-TextComment 0x55b64bf3f770 <line:248:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x55b64bf3f790 <line:249:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3f7e0 <col:4, line:250:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf3f890 <line:249:20, line:250:3>
|   |   |-TextComment 0x55b64bf3f840 <line:249:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x55b64bf3f860 <line:250:3> Text=" "
|   |-ParamCommandComment 0x55b64bf3f8b0 <col:4, col:52> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x55b64bf3f940 <col:16, col:52>
|   |   `-TextComment 0x55b64bf3f910 <col:16, col:52> Text=" Arch-specific IRQ configuration flag"
|   |-ParagraphComment 0x55b64bf3f990 <line:252:3>
|   | `-TextComment 0x55b64bf3f960 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3f9b0 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x55b64bf3fa10 <col:11, col:48>
|       `-TextComment 0x55b64bf3f9e0 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x55b64be6fd58 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:27:1, line:34:1> line:27:19 used sys_clock_hw_cycles_per_sec 'int (void)' static inline
| `-CompoundStmt 0x55b64be6fe08 <line:28:1, line:34:1>
|-FunctionDecl 0x55b64be70260 <line:55:1, line:105:1> line:55:28 used z_tmcvt 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' static inline
| |-ParmVarDecl 0x55b64be6fe28 <col:36, col:42> col:42 used t 'u64_t':'unsigned long long'
| |-ParmVarDecl 0x55b64be6fe98 <col:45, col:51> col:51 used from_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55b64be6ff08 <col:60, col:66> col:66 used to_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55b64be6ff78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:13> col:13 used const_hz 'bool'
| |-ParmVarDecl 0x55b64be6ffe8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:28> col:28 used result32 'bool'
| |-ParmVarDecl 0x55b64be70058 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:13> col:13 used round_up 'bool'
| |-ParmVarDecl 0x55b64be700c8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:28> col:28 used round_off 'bool'
| |-CompoundStmt 0x55b64be749f8 <line:58:1, line:105:1>
| | |-DeclStmt 0x55b64be706c0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:48>
| | | `-VarDecl 0x55b64be70390 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:47> line:59:7 used mul_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x55b64be706a8 <col:19, line:60:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x55b64be70680 <line:59:19, line:60:47> 'int' '&&'
| | |       |-BinaryOperator 0x55b64be70510 <line:59:19, line:60:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x55b64be704f8 <line:59:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x55b64be704e0 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x55b64be703f0 <col:19> 'bool' lvalue ParmVar 0x55b64be6ff78 'const_hz' 'bool'
| | |       | `-ParenExpr 0x55b64be704c0 <line:60:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x55b64be70498 <col:4, col:12> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x55b64be70468 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x55b64be70418 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6ff08 'to_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x55b64be70480 <col:12> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x55b64be70440 <col:12> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6fe98 'from_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x55b64be70660 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x55b64be70638 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x55b64be705e0 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x55b64be705b8 <col:26, col:34> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x55b64be70588 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x55b64be70538 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6ff08 'to_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x55b64be705a0 <col:34> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x55b64be70560 <col:34> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6fe98 'from_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x55b64be70620 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x55b64be70600 <col:46> 'int' 0
| | |-DeclStmt 0x55b64be731f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:48>
| | | `-VarDecl 0x55b64be706e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:47> line:61:7 used div_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x55b64be70a00 <col:19, line:62:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x55b64be709d8 <line:61:19, line:62:47> 'int' '&&'
| | |       |-BinaryOperator 0x55b64be70868 <line:61:19, line:62:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x55b64be70850 <line:61:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x55b64be70838 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x55b64be70748 <col:19> 'bool' lvalue ParmVar 0x55b64be6ff78 'const_hz' 'bool'
| | |       | `-ParenExpr 0x55b64be70818 <line:62:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x55b64be707f0 <col:4, col:14> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x55b64be707c0 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x55b64be70770 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6fe98 'from_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x55b64be707d8 <col:14> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x55b64be70798 <col:14> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6ff08 'to_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x55b64be709b8 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x55b64be70990 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x55b64be70938 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x55b64be70910 <col:26, col:36> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x55b64be708e0 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x55b64be70890 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6fe98 'from_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x55b64be708f8 <col:36> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x55b64be708b8 <col:36> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6ff08 'to_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x55b64be70978 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x55b64be70958 <col:46> 'int' 0
| | |-IfStmt 0x55b64be73458 <line:64:2, line:66:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x55b64be73288 <line:64:6, col:17> 'int' '=='
| | | | |-ImplicitCastExpr 0x55b64be73258 <col:6> 'u32_t':'unsigned int' <LValueToRValue>
| | | | | `-DeclRefExpr 0x55b64be73208 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6fe98 'from_hz' 'u32_t':'unsigned int'
| | | | `-ImplicitCastExpr 0x55b64be73270 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55b64be73230 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6ff08 'to_hz' 'u32_t':'unsigned int'
| | | |-CompoundStmt 0x55b64be73440 <col:24, line:66:2>
| | | | `-ReturnStmt 0x55b64be73428 <line:65:3, col:34>
| | | |   `-ConditionalOperator 0x55b64be733f8 <col:10, col:34> 'unsigned long long'
| | | |     |-ImplicitCastExpr 0x55b64be733b0 <col:10> 'int' <IntegralCast>
| | | |     | `-ImplicitCastExpr 0x55b64be73398 <col:10> 'bool' <LValueToRValue>
| | | |     |   `-DeclRefExpr 0x55b64be732b0 <col:10> 'bool' lvalue ParmVar 0x55b64be6ffe8 'result32' 'bool'
| | | |     |-ImplicitCastExpr 0x55b64be733e0 <col:21, col:30> 'unsigned long long' <IntegralCast>
| | | |     | `-ParenExpr 0x55b64be73350 <col:21, col:30> 'u32_t':'unsigned int'
| | | |     |   `-CStyleCastExpr 0x55b64be73328 <col:22, col:29> 'u32_t':'unsigned int' <IntegralCast>
| | | |     |     `-ImplicitCastExpr 0x55b64be73310 <col:29> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |     |       `-DeclRefExpr 0x55b64be732d8 <col:29> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be6fe28 't' 'u64_t':'unsigned long long'
| | | |     `-ImplicitCastExpr 0x55b64be733c8 <col:34> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |       `-DeclRefExpr 0x55b64be73370 <col:34> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be6fe28 't' 'u64_t':'unsigned long long'
| | | `-<<<NULL>>>
| | |-DeclStmt 0x55b64be73538 <line:68:2, col:15>
| | | `-VarDecl 0x55b64be734a0 <col:2, col:14> col:8 used off 'u64_t':'unsigned long long' cinit
| | |   `-ImplicitCastExpr 0x55b64be73520 <col:14> 'u64_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x55b64be73500 <col:14> 'int' 0
| | |-IfStmt 0x55b64be73b18 <line:70:2, line:78:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x55b64be73590 <line:70:6, col:7> 'int' prefix '!'
| | | | `-ImplicitCastExpr 0x55b64be73578 <col:7> 'bool' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55b64be73550 <col:7> 'bool' lvalue Var 0x55b64be70390 'mul_ratio' 'bool'
| | | |-CompoundStmt 0x55b64be73af8 <col:18, line:78:2>
| | | | |-DeclStmt 0x55b64be737b0 <line:71:3, col:59>
| | | | | `-VarDecl 0x55b64be735c0 <col:3, col:52> col:9 used rdivisor 'u32_t':'unsigned int' cinit
| | | | |   `-ConditionalOperator 0x55b64be73780 <col:20, col:52> 'unsigned int'
| | | | |     |-ImplicitCastExpr 0x55b64be73750 <col:20> 'int' <IntegralCast>
| | | | |     | `-ImplicitCastExpr 0x55b64be73738 <col:20> 'bool' <LValueToRValue>
| | | | |     |   `-DeclRefExpr 0x55b64be73620 <col:20> 'bool' lvalue Var 0x55b64be706e8 'div_ratio' 'bool'
| | | | |     |-ParenExpr 0x55b64be736f0 <col:32, col:48> 'unsigned int'
| | | | |     | `-BinaryOperator 0x55b64be736c8 <col:33, col:43> 'unsigned int' '/'
| | | | |     |   |-ImplicitCastExpr 0x55b64be73698 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |   | `-DeclRefExpr 0x55b64be73648 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6fe98 'from_hz' 'u32_t':'unsigned int'
| | | | |     |   `-ImplicitCastExpr 0x55b64be736b0 <col:43> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |     `-DeclRefExpr 0x55b64be73670 <col:43> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6ff08 'to_hz' 'u32_t':'unsigned int'
| | | | |     `-ImplicitCastExpr 0x55b64be73768 <col:52> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x55b64be73710 <col:52> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6fe98 'from_hz' 'u32_t':'unsigned int'
| | | | `-IfStmt 0x55b64be73ac0 <line:73:3, line:77:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-ImplicitCastExpr 0x55b64be737f0 <line:73:7> 'bool' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x55b64be737c8 <col:7> 'bool' lvalue ParmVar 0x55b64be70058 'round_up' 'bool'
| | | |   |-CompoundStmt 0x55b64be73910 <col:17, line:75:3>
| | | |   | `-BinaryOperator 0x55b64be738e8 <line:74:4, col:21> 'u64_t':'unsigned long long' '='
| | | |   |   |-DeclRefExpr 0x55b64be73808 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x55b64be734a0 'off' 'u64_t':'unsigned long long'
| | | |   |   `-ImplicitCastExpr 0x55b64be738d0 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |   |     `-BinaryOperator 0x55b64be738a8 <col:10, col:21> 'unsigned int' '-'
| | | |   |       |-ImplicitCastExpr 0x55b64be73878 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   |       | `-DeclRefExpr 0x55b64be73830 <col:10> 'u32_t':'unsigned int' lvalue Var 0x55b64be735c0 'rdivisor' 'u32_t':'unsigned int'
| | | |   |       `-ImplicitCastExpr 0x55b64be73890 <col:21> 'unsigned int' <IntegralCast>
| | | |   |         `-IntegerLiteral 0x55b64be73858 <col:21> 'int' 1
| | | |   `-IfStmt 0x55b64be73a88 <line:75:10, line:77:3>
| | | |     |-<<<NULL>>>
| | | |     |-<<<NULL>>>
| | | |     |-ImplicitCastExpr 0x55b64be73950 <line:75:14> 'bool' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x55b64be73928 <col:14> 'bool' lvalue ParmVar 0x55b64be700c8 'round_off' 'bool'
| | | |     |-CompoundStmt 0x55b64be73a70 <col:25, line:77:3>
| | | |     | `-BinaryOperator 0x55b64be73a48 <line:76:4, col:21> 'u64_t':'unsigned long long' '='
| | | |     |   |-DeclRefExpr 0x55b64be73968 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x55b64be734a0 'off' 'u64_t':'unsigned long long'
| | | |     |   `-ImplicitCastExpr 0x55b64be73a30 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |     |     `-BinaryOperator 0x55b64be73a08 <col:10, col:21> 'unsigned int' '/'
| | | |     |       |-ImplicitCastExpr 0x55b64be739d8 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |     |       | `-DeclRefExpr 0x55b64be73990 <col:10> 'u32_t':'unsigned int' lvalue Var 0x55b64be735c0 'rdivisor' 'u32_t':'unsigned int'
| | | |     |       `-ImplicitCastExpr 0x55b64be739f0 <col:21> 'unsigned int' <IntegralCast>
| | | |     |         `-IntegerLiteral 0x55b64be739b8 <col:21> 'int' 2
| | | |     `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-IfStmt 0x55b64be74990 <line:85:2, line:104:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x55b64be73b78 <line:85:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x55b64be73b50 <col:6> 'bool' lvalue Var 0x55b64be706e8 'div_ratio' 'bool'
| |   |-CompoundStmt 0x55b64be73ff0 <col:17, line:92:2>
| |   | |-CompoundAssignOperator 0x55b64be73bf8 <line:86:3, col:8> 'u64_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| |   | | |-DeclRefExpr 0x55b64be73b90 <col:3> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be6fe28 't' 'u64_t':'unsigned long long'
| |   | | `-ImplicitCastExpr 0x55b64be73be0 <col:8> 'u64_t':'unsigned long long' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x55b64be73bb8 <col:8> 'u64_t':'unsigned long long' lvalue Var 0x55b64be734a0 'off' 'u64_t':'unsigned long long'
| |   | `-IfStmt 0x55b64be73fb8 <line:87:3, line:91:3>
| |   |   |-<<<NULL>>>
| |   |   |-<<<NULL>>>
| |   |   |-ImplicitCastExpr 0x55b64be73c58 <line:87:7> 'bool' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x55b64be73c30 <col:7> 'bool' lvalue ParmVar 0x55b64be6ffe8 'result32' 'bool'
| |   |   |-CompoundStmt 0x55b64be73e28 <col:17, line:89:3>
| |   |   | `-ReturnStmt 0x55b64be73e10 <line:88:4, col:40>
| |   |   |   `-ImplicitCastExpr 0x55b64be73df8 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |   |   |     `-BinaryOperator 0x55b64be73dd0 <col:11, col:40> 'unsigned int' '/'
| |   |   |       |-ParenExpr 0x55b64be73ce8 <col:11, col:20> 'u32_t':'unsigned int'
| |   |   |       | `-CStyleCastExpr 0x55b64be73cc0 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |   |   |       |   `-ImplicitCastExpr 0x55b64be73ca8 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |   |       |     `-DeclRefExpr 0x55b64be73c70 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be6fe28 't' 'u64_t':'unsigned long long'
| |   |   |       `-ParenExpr 0x55b64be73db0 <col:24, col:40> 'unsigned int'
| |   |   |         `-BinaryOperator 0x55b64be73d88 <col:25, col:35> 'unsigned int' '/'
| |   |   |           |-ImplicitCastExpr 0x55b64be73d58 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |           | `-DeclRefExpr 0x55b64be73d08 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6fe98 'from_hz' 'u32_t':'unsigned int'
| |   |   |           `-ImplicitCastExpr 0x55b64be73d70 <col:35> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |             `-DeclRefExpr 0x55b64be73d30 <col:35> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6ff08 'to_hz' 'u32_t':'unsigned int'
| |   |   `-CompoundStmt 0x55b64be73fa0 <line:89:10, line:91:3>
| |   |     `-ReturnStmt 0x55b64be73f88 <line:90:4, col:31>
| |   |       `-BinaryOperator 0x55b64be73f60 <col:11, col:31> 'unsigned long long' '/'
| |   |         |-ImplicitCastExpr 0x55b64be73f30 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |         | `-DeclRefExpr 0x55b64be73e40 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be6fe28 't' 'u64_t':'unsigned long long'
| |   |         `-ImplicitCastExpr 0x55b64be73f48 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |   |           `-ParenExpr 0x55b64be73f10 <col:15, col:31> 'unsigned int'
| |   |             `-BinaryOperator 0x55b64be73ee8 <col:16, col:26> 'unsigned int' '/'
| |   |               |-ImplicitCastExpr 0x55b64be73eb8 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |   |               | `-DeclRefExpr 0x55b64be73e68 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6fe98 'from_hz' 'u32_t':'unsigned int'
| |   |               `-ImplicitCastExpr 0x55b64be73ed0 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| |   |                 `-DeclRefExpr 0x55b64be73e90 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6ff08 'to_hz' 'u32_t':'unsigned int'
| |   `-IfStmt 0x55b64be74958 <line:92:9, line:104:2>
| |     |-<<<NULL>>>
| |     |-<<<NULL>>>
| |     |-ImplicitCastExpr 0x55b64be74038 <line:92:13> 'bool' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be74010 <col:13> 'bool' lvalue Var 0x55b64be70390 'mul_ratio' 'bool'
| |     |-CompoundStmt 0x55b64be74420 <col:24, line:98:2>
| |     | `-IfStmt 0x55b64be743e8 <line:93:3, line:97:3>
| |     |   |-<<<NULL>>>
| |     |   |-<<<NULL>>>
| |     |   |-ImplicitCastExpr 0x55b64be74078 <line:93:7> 'bool' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x55b64be74050 <col:7> 'bool' lvalue ParmVar 0x55b64be6ffe8 'result32' 'bool'
| |     |   |-CompoundStmt 0x55b64be74258 <col:17, line:95:3>
| |     |   | `-ReturnStmt 0x55b64be74240 <line:94:4, col:40>
| |     |   |   `-ImplicitCastExpr 0x55b64be74228 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |     |   |     `-BinaryOperator 0x55b64be74200 <col:11, col:40> 'unsigned int' '*'
| |     |   |       |-ParenExpr 0x55b64be74108 <col:11, col:20> 'u32_t':'unsigned int'
| |     |   |       | `-CStyleCastExpr 0x55b64be740e0 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |     |   |       |   `-ImplicitCastExpr 0x55b64be740c8 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |   |       |     `-DeclRefExpr 0x55b64be74090 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be6fe28 't' 'u64_t':'unsigned long long'
| |     |   |       `-ParenExpr 0x55b64be741d0 <col:24, col:40> 'unsigned int'
| |     |   |         `-BinaryOperator 0x55b64be741a8 <col:25, col:33> 'unsigned int' '/'
| |     |   |           |-ImplicitCastExpr 0x55b64be74178 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |           | `-DeclRefExpr 0x55b64be74128 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6ff08 'to_hz' 'u32_t':'unsigned int'
| |     |   |           `-ImplicitCastExpr 0x55b64be74190 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |             `-DeclRefExpr 0x55b64be74150 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6fe98 'from_hz' 'u32_t':'unsigned int'
| |     |   `-CompoundStmt 0x55b64be743d0 <line:95:10, line:97:3>
| |     |     `-ReturnStmt 0x55b64be743b8 <line:96:4, col:31>
| |     |       `-BinaryOperator 0x55b64be74390 <col:11, col:31> 'unsigned long long' '*'
| |     |         |-ImplicitCastExpr 0x55b64be74360 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |         | `-DeclRefExpr 0x55b64be74270 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be6fe28 't' 'u64_t':'unsigned long long'
| |     |         `-ImplicitCastExpr 0x55b64be74378 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |     |           `-ParenExpr 0x55b64be74340 <col:15, col:31> 'unsigned int'
| |     |             `-BinaryOperator 0x55b64be74318 <col:16, col:24> 'unsigned int' '/'
| |     |               |-ImplicitCastExpr 0x55b64be742e8 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |     |               | `-DeclRefExpr 0x55b64be74298 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6ff08 'to_hz' 'u32_t':'unsigned int'
| |     |               `-ImplicitCastExpr 0x55b64be74300 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |     |                 `-DeclRefExpr 0x55b64be742c0 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6fe98 'from_hz' 'u32_t':'unsigned int'
| |     `-CompoundStmt 0x55b64be74940 <line:98:9, line:104:2>
| |       `-IfStmt 0x55b64be74908 <line:99:3, line:103:3>
| |         |-<<<NULL>>>
| |         |-<<<NULL>>>
| |         |-ImplicitCastExpr 0x55b64be74460 <line:99:7> 'bool' <LValueToRValue>
| |         | `-DeclRefExpr 0x55b64be74438 <col:7> 'bool' lvalue ParmVar 0x55b64be6ffe8 'result32' 'bool'
| |         |-CompoundStmt 0x55b64be746f8 <col:17, line:101:3>
| |         | `-ReturnStmt 0x55b64be746e0 <line:100:4, col:46>
| |         |   `-ImplicitCastExpr 0x55b64be746c8 <col:11, col:46> 'u64_t':'unsigned long long' <IntegralCast>
| |         |     `-CStyleCastExpr 0x55b64be746a0 <col:11, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |         |       `-ParenExpr 0x55b64be74680 <col:18, col:46> 'unsigned long long'
| |         |         `-BinaryOperator 0x55b64be74618 <col:19, col:39> 'unsigned long long' '/'
| |         |           |-ParenExpr 0x55b64be745a0 <col:19, col:35> 'unsigned long long'
| |         |           | `-BinaryOperator 0x55b64be74578 <col:20, col:32> 'unsigned long long' '+'
| |         |           |   |-BinaryOperator 0x55b64be74510 <col:20, col:24> 'unsigned long long' '*'
| |         |           |   | |-ImplicitCastExpr 0x55b64be744c8 <col:20> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |   | | `-DeclRefExpr 0x55b64be74478 <col:20> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be6fe28 't' 'u64_t':'unsigned long long'
| |         |           |   | `-ImplicitCastExpr 0x55b64be744f8 <col:24> 'unsigned long long' <IntegralCast>
| |         |           |   |   `-ImplicitCastExpr 0x55b64be744e0 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |         |           |   |     `-DeclRefExpr 0x55b64be744a0 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6ff08 'to_hz' 'u32_t':'unsigned int'
| |         |           |   `-ImplicitCastExpr 0x55b64be74560 <col:32> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |     `-DeclRefExpr 0x55b64be74538 <col:32> 'u64_t':'unsigned long long' lvalue Var 0x55b64be734a0 'off' 'u64_t':'unsigned long long'
| |         |           `-ImplicitCastExpr 0x55b64be74600 <col:39> 'unsigned long long' <IntegralCast>
| |         |             `-ImplicitCastExpr 0x55b64be745e8 <col:39> 'u32_t':'unsigned int' <LValueToRValue>
| |         |               `-DeclRefExpr 0x55b64be745c0 <col:39> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6fe98 'from_hz' 'u32_t':'unsigned int'
| |         `-CompoundStmt 0x55b64be748f0 <line:101:10, line:103:3>
| |           `-ReturnStmt 0x55b64be748d8 <line:102:4, col:31>
| |             `-BinaryOperator 0x55b64be748b0 <col:11, col:31> 'unsigned long long' '/'
| |               |-ParenExpr 0x55b64be74838 <col:11, col:27> 'unsigned long long'
| |               | `-BinaryOperator 0x55b64be74810 <col:12, col:24> 'unsigned long long' '+'
| |               |   |-BinaryOperator 0x55b64be747a8 <col:12, col:16> 'unsigned long long' '*'
| |               |   | |-ImplicitCastExpr 0x55b64be74760 <col:12> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |   | | `-DeclRefExpr 0x55b64be74710 <col:12> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be6fe28 't' 'u64_t':'unsigned long long'
| |               |   | `-ImplicitCastExpr 0x55b64be74790 <col:16> 'unsigned long long' <IntegralCast>
| |               |   |   `-ImplicitCastExpr 0x55b64be74778 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |               |   |     `-DeclRefExpr 0x55b64be74738 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6ff08 'to_hz' 'u32_t':'unsigned int'
| |               |   `-ImplicitCastExpr 0x55b64be747f8 <col:24> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |     `-DeclRefExpr 0x55b64be747d0 <col:24> 'u64_t':'unsigned long long' lvalue Var 0x55b64be734a0 'off' 'u64_t':'unsigned long long'
| |               `-ImplicitCastExpr 0x55b64be74898 <col:31> 'unsigned long long' <IntegralCast>
| |                 `-ImplicitCastExpr 0x55b64be74880 <col:31> 'u32_t':'unsigned int' <LValueToRValue>
| |                   `-DeclRefExpr 0x55b64be74858 <col:31> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be6fe98 'from_hz' 'u32_t':'unsigned int'
| `-AlwaysInlineAttr 0x55b64be70338 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x55b64be74b50 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:190:1, line:194:1> line:190:21 k_ms_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be74a48 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be74fa8 <line:191:1, line:194:1>
| | `-ReturnStmt 0x55b64be74f68 <line:193:2, col:65>
| |   `-ImplicitCastExpr 0x55b64be74f50 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be74e30 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be74e18 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be74bf8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be74ea8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be74e90 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be74c20 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be74a48 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be74ec0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be74c48 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55b64be74ed8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be74cd0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be74cb8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be74c68 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be74ef0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be74d38 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be74d18 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be74cf8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be74f08 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be74d58 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be74f20 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be74d78 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55b64be74f38 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be74d98 <col:16> 'int' 0
| `-FullComment 0x55b64bf3fd60 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:182:4, line:188:35>
|   |-ParagraphComment 0x55b64bf3fb20 <line:182:4>
|   | `-TextComment 0x55b64bf3faf0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf3fb40 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf3fba0 <col:11, col:50>
|   |   `-TextComment 0x55b64bf3fb70 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf3fc40 <line:184:3, line:186:44>
|   | |-TextComment 0x55b64bf3fbc0 <line:184:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55b64bf3fbe0 <line:185:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf3fc00 <line:186:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf3fc90 <line:188:3>
|   | `-TextComment 0x55b64bf3fc60 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3fcb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf3fd10 <col:11, col:35>
|       `-TextComment 0x55b64bf3fce0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be750d0 <line:204:1, line:208:1> line:204:21 k_ms_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be74fd0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be76a18 <line:205:1, line:208:1>
| | `-ReturnStmt 0x55b64be769d8 <line:207:2, col:66>
| |   `-CallExpr 0x55b64be768d0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be768b8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be75178 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be76930 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be751a0 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be74fd0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be76948 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be751c8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55b64be76960 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be767d0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be767b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be76790 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be76978 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be76838 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be76818 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be767f8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be76990 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be76858 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be769a8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be76878 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55b64be769c0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be76898 <col:16> 'int' 0
| `-FullComment 0x55b64bf40040 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:196:4, line:202:35>
|   |-ParagraphComment 0x55b64bf3fe00 <line:196:4>
|   | `-TextComment 0x55b64bf3fdd0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf3fe20 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf3fe80 <col:11, col:50>
|   |   `-TextComment 0x55b64bf3fe50 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf3ff20 <line:198:3, line:200:44>
|   | |-TextComment 0x55b64bf3fea0 <line:198:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55b64bf3fec0 <line:199:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf3fee0 <line:200:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf3ff70 <line:202:3>
|   | `-TextComment 0x55b64bf3ff40 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf3ff90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf3fff0 <col:11, col:35>
|       `-TextComment 0x55b64bf3ffc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be76ac8 <line:218:1, line:222:1> line:218:21 k_ms_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be76a40 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be76e98 <line:219:1, line:222:1>
| | `-ReturnStmt 0x55b64be76e58 <line:221:2, col:64>
| |   `-ImplicitCastExpr 0x55b64be76e40 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be76d20 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be76d08 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be76b70 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be76d98 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be76d80 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be76b98 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be76a40 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be76db0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be76bc0 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55b64be76dc8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be76c20 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be76c08 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be76be0 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be76de0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be76c88 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be76c68 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be76c48 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be76df8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be76ca8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be76e10 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be76cc8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55b64be76e28 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be76ce8 <col:16> 'int' 1
| `-FullComment 0x55b64bf40320 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:210:4, line:216:35>
|   |-ParagraphComment 0x55b64bf400e0 <line:210:4>
|   | `-TextComment 0x55b64bf400b0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf40100 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf40160 <col:11, col:50>
|   |   `-TextComment 0x55b64bf40130 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf40200 <line:212:3, line:214:37>
|   | |-TextComment 0x55b64bf40180 <line:212:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55b64bf401a0 <line:213:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf401c0 <line:214:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf40250 <line:216:3>
|   | `-TextComment 0x55b64bf40220 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf40270 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf402d0 <col:11, col:35>
|       `-TextComment 0x55b64bf402a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be76f48 <line:232:1, line:236:1> line:232:21 k_ms_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be76ec0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be772e8 <line:233:1, line:236:1>
| | `-ReturnStmt 0x55b64be772a8 <line:235:2, col:65>
| |   `-CallExpr 0x55b64be771a0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be77188 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be76ff0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be77200 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be77018 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be76ec0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be77218 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be77040 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55b64be77230 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be770a0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be77088 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be77060 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be77248 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be77108 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be770e8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be770c8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be77260 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be77128 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be77278 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be77148 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55b64be77290 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be77168 <col:16> 'int' 1
| `-FullComment 0x55b64bf40600 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:224:4, line:230:35>
|   |-ParagraphComment 0x55b64bf403c0 <line:224:4>
|   | `-TextComment 0x55b64bf40390 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf403e0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf40440 <col:11, col:50>
|   |   `-TextComment 0x55b64bf40410 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf404e0 <line:226:3, line:228:37>
|   | |-TextComment 0x55b64bf40460 <line:226:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55b64bf40480 <line:227:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf404a0 <line:228:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf40530 <line:230:3>
|   | `-TextComment 0x55b64bf40500 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf40550 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf405b0 <col:11, col:35>
|       `-TextComment 0x55b64bf40580 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be77398 <line:246:1, line:250:1> line:246:21 k_ms_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be77310 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be77768 <line:247:1, line:250:1>
| | `-ReturnStmt 0x55b64be77728 <line:249:2, col:64>
| |   `-ImplicitCastExpr 0x55b64be77710 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be775f0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be775d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be77440 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be77668 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be77650 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be77468 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be77310 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be77680 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be77490 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55b64be77698 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be774f0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be774d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be774b0 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be776b0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be77558 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be77538 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be77518 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be776c8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be77578 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be776e0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be77598 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55b64be776f8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be775b8 <col:16> 'int' 0
| `-FullComment 0x55b64bf408e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:238:4, line:244:35>
|   |-ParagraphComment 0x55b64bf406a0 <line:238:4>
|   | `-TextComment 0x55b64bf40670 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf406c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf40720 <col:11, col:50>
|   |   `-TextComment 0x55b64bf406f0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf407c0 <line:240:3, line:242:45>
|   | |-TextComment 0x55b64bf40740 <line:240:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55b64bf40760 <line:241:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf40780 <line:242:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf40810 <line:244:3>
|   | `-TextComment 0x55b64bf407e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf40830 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf40890 <col:11, col:35>
|       `-TextComment 0x55b64bf40860 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be77828 <line:260:1, line:264:1> line:260:21 k_ms_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be777a0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be77bc8 <line:261:1, line:264:1>
| | `-ReturnStmt 0x55b64be77b88 <line:263:2, col:65>
| |   `-CallExpr 0x55b64be77a80 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be77a68 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be778d0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be77ae0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be778f8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be777a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be77af8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be77920 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55b64be77b10 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be77980 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be77968 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be77940 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be77b28 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be779e8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be779c8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be779a8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be77b40 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be77a08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be77b58 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be77a28 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55b64be77b70 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be77a48 <col:16> 'int' 0
| `-FullComment 0x55b64bf40bc0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:252:4, line:258:35>
|   |-ParagraphComment 0x55b64bf40980 <line:252:4>
|   | `-TextComment 0x55b64bf40950 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf409a0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf40a00 <col:11, col:50>
|   |   `-TextComment 0x55b64bf409d0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf40aa0 <line:254:3, line:256:45>
|   | |-TextComment 0x55b64bf40a20 <line:254:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55b64bf40a40 <line:255:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf40a60 <line:256:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf40af0 <line:258:3>
|   | `-TextComment 0x55b64bf40ac0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf40b10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf40b70 <col:11, col:35>
|       `-TextComment 0x55b64bf40b40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be77c78 <line:274:1, line:278:1> line:274:21 k_ms_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be77bf0 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be77ec8 <line:275:1, line:278:1>
| `-FullComment 0x55b64bf40ea0 <line:266:4, line:272:35>
|   |-ParagraphComment 0x55b64bf40c60 <line:266:4>
|   | `-TextComment 0x55b64bf40c30 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf40c80 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf40ce0 <col:11, col:40>
|   |   `-TextComment 0x55b64bf40cb0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55b64bf40d80 <line:268:3, line:270:44>
|   | |-TextComment 0x55b64bf40d00 <line:268:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55b64bf40d20 <line:269:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf40d40 <line:270:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf40dd0 <line:272:3>
|   | `-TextComment 0x55b64bf40da0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf40df0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf40e50 <col:11, col:35>
|       `-TextComment 0x55b64bf40e20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be77f70 <line:288:1, line:292:1> line:288:21 k_ms_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be77ee8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be781b8 <line:289:1, line:292:1>
| `-FullComment 0x55b64bf41180 <line:280:4, line:286:35>
|   |-ParagraphComment 0x55b64bf40f40 <line:280:4>
|   | `-TextComment 0x55b64bf40f10 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf40f60 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf40fc0 <col:11, col:40>
|   |   `-TextComment 0x55b64bf40f90 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55b64bf41060 <line:282:3, line:284:44>
|   | |-TextComment 0x55b64bf40fe0 <line:282:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55b64bf41000 <line:283:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf41020 <line:284:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf410b0 <line:286:3>
|   | `-TextComment 0x55b64bf41080 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf410d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf41130 <col:11, col:35>
|       `-TextComment 0x55b64bf41100 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be78260 <line:302:1, line:306:1> line:302:21 k_ms_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be781d8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be784a8 <line:303:1, line:306:1>
| `-FullComment 0x55b64bf41480 <line:294:4, line:300:35>
|   |-ParagraphComment 0x55b64bf41220 <line:294:4>
|   | `-TextComment 0x55b64bf411f0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf41240 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf412a0 <col:11, col:40>
|   |   `-TextComment 0x55b64bf41270 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55b64bf41340 <line:296:3, line:298:37>
|   | |-TextComment 0x55b64bf412c0 <line:296:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55b64bf412e0 <line:297:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf41300 <line:298:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf41390 <line:300:3>
|   | `-TextComment 0x55b64bf41360 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf413b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf41430 <col:11, col:35>
|       `-TextComment 0x55b64bf41400 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be78550 <line:316:1, line:320:1> line:316:21 k_ms_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be784c8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be78f10 <line:317:1, line:320:1>
| `-FullComment 0x55b64bf41760 <line:308:4, line:314:35>
|   |-ParagraphComment 0x55b64bf41520 <line:308:4>
|   | `-TextComment 0x55b64bf414f0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf41540 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf415a0 <col:11, col:40>
|   |   `-TextComment 0x55b64bf41570 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55b64bf41640 <line:310:3, line:312:37>
|   | |-TextComment 0x55b64bf415c0 <line:310:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55b64bf415e0 <line:311:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf41600 <line:312:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf41690 <line:314:3>
|   | `-TextComment 0x55b64bf41660 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf416b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf41710 <col:11, col:35>
|       `-TextComment 0x55b64bf416e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be78fb8 <line:330:1, line:334:1> line:330:21 k_ms_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be78f30 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be79208 <line:331:1, line:334:1>
| `-FullComment 0x55b64bf41a40 <line:322:4, line:328:35>
|   |-ParagraphComment 0x55b64bf41800 <line:322:4>
|   | `-TextComment 0x55b64bf417d0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf41820 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf41880 <col:11, col:40>
|   |   `-TextComment 0x55b64bf41850 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55b64bf41920 <line:324:3, line:326:45>
|   | |-TextComment 0x55b64bf418a0 <line:324:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55b64bf418c0 <line:325:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf418e0 <line:326:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf41970 <line:328:3>
|   | `-TextComment 0x55b64bf41940 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf41990 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf419f0 <col:11, col:35>
|       `-TextComment 0x55b64bf419c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be792b0 <line:344:1, line:348:1> line:344:21 k_ms_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be79228 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be794f8 <line:345:1, line:348:1>
| `-FullComment 0x55b64bf41d20 <line:336:4, line:342:35>
|   |-ParagraphComment 0x55b64bf41ae0 <line:336:4>
|   | `-TextComment 0x55b64bf41ab0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf41b00 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf41b60 <col:11, col:40>
|   |   `-TextComment 0x55b64bf41b30 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55b64bf41c00 <line:338:3, line:340:45>
|   | |-TextComment 0x55b64bf41b80 <line:338:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55b64bf41ba0 <line:339:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf41bc0 <line:340:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf41c50 <line:342:3>
|   | `-TextComment 0x55b64bf41c20 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf41c70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf41cd0 <col:11, col:35>
|       `-TextComment 0x55b64bf41ca0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be795a0 <line:358:1, line:362:1> line:358:21 k_us_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be79518 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be79978 <line:359:1, line:362:1>
| | `-ReturnStmt 0x55b64be79930 <line:361:2, col:65>
| |   `-ImplicitCastExpr 0x55b64be79918 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be797f8 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be797e0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be79648 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be79870 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be79858 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be79670 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be79518 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be79888 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be79698 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55b64be798a0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be796f8 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be796e0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be796b8 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be798b8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be79760 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be79740 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be79720 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be798d0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be79780 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be798e8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be797a0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55b64be79900 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be797c0 <col:16> 'int' 0
| `-FullComment 0x55b64bf42000 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:350:4, line:356:35>
|   |-ParagraphComment 0x55b64bf41dc0 <line:350:4>
|   | `-TextComment 0x55b64bf41d90 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf41de0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf41e40 <col:11, col:50>
|   |   `-TextComment 0x55b64bf41e10 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf41ee0 <line:352:3, line:354:44>
|   | |-TextComment 0x55b64bf41e60 <line:352:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55b64bf41e80 <line:353:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf41ea0 <line:354:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf41f30 <line:356:3>
|   | `-TextComment 0x55b64bf41f00 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf41f50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf41fb0 <col:11, col:35>
|       `-TextComment 0x55b64bf41f80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be79a28 <line:372:1, line:376:1> line:372:21 k_us_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be799a0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be79dc8 <line:373:1, line:376:1>
| | `-ReturnStmt 0x55b64be79d88 <line:375:2, col:66>
| |   `-CallExpr 0x55b64be79c80 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be79c68 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be79ad0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be79ce0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be79af8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be799a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be79cf8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be79b20 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55b64be79d10 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be79b80 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be79b68 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be79b40 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be79d28 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be79be8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be79bc8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be79ba8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be79d40 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be79c08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be79d58 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be79c28 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55b64be79d70 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be79c48 <col:16> 'int' 0
| `-FullComment 0x55b64bf422e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:364:4, line:370:35>
|   |-ParagraphComment 0x55b64bf420a0 <line:364:4>
|   | `-TextComment 0x55b64bf42070 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf420c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf42120 <col:11, col:50>
|   |   `-TextComment 0x55b64bf420f0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf421c0 <line:366:3, line:368:44>
|   | |-TextComment 0x55b64bf42140 <line:366:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55b64bf42160 <line:367:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf42180 <line:368:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf42210 <line:370:3>
|   | `-TextComment 0x55b64bf421e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf42230 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf42290 <col:11, col:35>
|       `-TextComment 0x55b64bf42260 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be79f20 <line:386:1, line:390:1> line:386:21 k_us_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be79df0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be7a2f8 <line:387:1, line:390:1>
| | `-ReturnStmt 0x55b64be7a2b0 <line:389:2, col:64>
| |   `-ImplicitCastExpr 0x55b64be7a298 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be7a178 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be7a160 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be79fc8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be7a1f0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be7a1d8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be79ff0 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be79df0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be7a208 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be7a018 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55b64be7a220 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be7a078 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be7a060 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be7a038 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be7a238 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be7a0e0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be7a0c0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be7a0a0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be7a250 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be7a100 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be7a268 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be7a120 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55b64be7a280 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be7a140 <col:16> 'int' 1
| `-FullComment 0x55b64bf425c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:378:4, line:384:35>
|   |-ParagraphComment 0x55b64bf42380 <line:378:4>
|   | `-TextComment 0x55b64bf42350 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf423a0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf42400 <col:11, col:50>
|   |   `-TextComment 0x55b64bf423d0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf424a0 <line:380:3, line:382:37>
|   | |-TextComment 0x55b64bf42420 <line:380:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55b64bf42440 <line:381:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf42460 <line:382:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf424f0 <line:384:3>
|   | `-TextComment 0x55b64bf424c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf42510 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf42570 <col:11, col:35>
|       `-TextComment 0x55b64bf42540 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be7a3a8 <line:400:1, line:404:1> line:400:21 k_us_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be7a320 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be7a748 <line:401:1, line:404:1>
| | `-ReturnStmt 0x55b64be7a708 <line:403:2, col:65>
| |   `-CallExpr 0x55b64be7a600 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be7a5e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be7a450 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be7a660 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be7a478 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be7a320 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be7a678 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be7a4a0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55b64be7a690 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be7a500 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be7a4e8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be7a4c0 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be7a6a8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be7a568 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be7a548 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be7a528 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be7a6c0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be7a588 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be7a6d8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be7a5a8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55b64be7a6f0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be7a5c8 <col:16> 'int' 1
| `-FullComment 0x55b64bf428a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:392:4, line:398:35>
|   |-ParagraphComment 0x55b64bf42660 <line:392:4>
|   | `-TextComment 0x55b64bf42630 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf42680 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf426e0 <col:11, col:50>
|   |   `-TextComment 0x55b64bf426b0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf42780 <line:394:3, line:396:37>
|   | |-TextComment 0x55b64bf42700 <line:394:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55b64bf42720 <line:395:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf42740 <line:396:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf427d0 <line:398:3>
|   | `-TextComment 0x55b64bf427a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf427f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf42850 <col:11, col:35>
|       `-TextComment 0x55b64bf42820 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be7a7f8 <line:414:1, line:418:1> line:414:21 k_us_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be7a770 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be7abc8 <line:415:1, line:418:1>
| | `-ReturnStmt 0x55b64be7ab88 <line:417:2, col:64>
| |   `-ImplicitCastExpr 0x55b64be7ab70 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be7aa50 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be7aa38 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be7a8a0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be7aac8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be7aab0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be7a8c8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be7a770 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be7aae0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be7a8f0 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55b64be7aaf8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be7a950 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be7a938 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be7a910 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be7ab10 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be7a9b8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be7a998 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be7a978 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be7ab28 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be7a9d8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be7ab40 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be7a9f8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55b64be7ab58 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be7aa18 <col:16> 'int' 0
| `-FullComment 0x55b64bf42b80 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:406:4, line:412:35>
|   |-ParagraphComment 0x55b64bf42940 <line:406:4>
|   | `-TextComment 0x55b64bf42910 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf42960 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf429c0 <col:11, col:50>
|   |   `-TextComment 0x55b64bf42990 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf42a60 <line:408:3, line:410:45>
|   | |-TextComment 0x55b64bf429e0 <line:408:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55b64bf42a00 <line:409:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf42a20 <line:410:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf42ab0 <line:412:3>
|   | `-TextComment 0x55b64bf42a80 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf42ad0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf42b30 <col:11, col:35>
|       `-TextComment 0x55b64bf42b00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be7ac78 <line:428:1, line:432:1> line:428:21 k_us_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be7abf0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be7b058 <line:429:1, line:432:1>
| | `-ReturnStmt 0x55b64be7b018 <line:431:2, col:65>
| |   `-CallExpr 0x55b64be7aed0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be7aeb8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be7ad20 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be7af70 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be7ad48 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be7abf0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be7af88 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be7ad70 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55b64be7afa0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be7add0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be7adb8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be7ad90 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be7afb8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be7ae38 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be7ae18 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be7adf8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be7afd0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be7ae58 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be7afe8 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be7ae78 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55b64be7b000 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be7ae98 <col:16> 'int' 0
| `-FullComment 0x55b64bf42e60 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:420:4, line:426:35>
|   |-ParagraphComment 0x55b64bf42c20 <line:420:4>
|   | `-TextComment 0x55b64bf42bf0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf42c40 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf42ca0 <col:11, col:50>
|   |   `-TextComment 0x55b64bf42c70 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf42d40 <line:422:3, line:424:45>
|   | |-TextComment 0x55b64bf42cc0 <line:422:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55b64bf42ce0 <line:423:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf42d00 <line:424:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf42d90 <line:426:3>
|   | `-TextComment 0x55b64bf42d60 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf42db0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf42e10 <col:11, col:35>
|       `-TextComment 0x55b64bf42de0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be7b108 <line:442:1, line:446:1> line:442:21 k_us_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be7b080 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be7b358 <line:443:1, line:446:1>
| `-FullComment 0x55b64bf43140 <line:434:4, line:440:35>
|   |-ParagraphComment 0x55b64bf42f00 <line:434:4>
|   | `-TextComment 0x55b64bf42ed0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf42f20 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf42f80 <col:11, col:40>
|   |   `-TextComment 0x55b64bf42f50 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55b64bf43020 <line:436:3, line:438:44>
|   | |-TextComment 0x55b64bf42fa0 <line:436:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55b64bf42fc0 <line:437:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf42fe0 <line:438:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf43070 <line:440:3>
|   | `-TextComment 0x55b64bf43040 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf43090 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf430f0 <col:11, col:35>
|       `-TextComment 0x55b64bf430c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be7b400 <line:456:1, line:460:1> line:456:21 k_us_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be7b378 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be7b648 <line:457:1, line:460:1>
| `-FullComment 0x55b64bf43440 <line:448:4, line:454:35>
|   |-ParagraphComment 0x55b64bf431e0 <line:448:4>
|   | `-TextComment 0x55b64bf431b0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf43200 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf43260 <col:11, col:40>
|   |   `-TextComment 0x55b64bf43230 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55b64bf43300 <line:450:3, line:452:44>
|   | |-TextComment 0x55b64bf43280 <line:450:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55b64bf432a0 <line:451:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf432c0 <line:452:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf43350 <line:454:3>
|   | `-TextComment 0x55b64bf43320 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf43370 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf433d0 <col:11, col:35>
|       `-TextComment 0x55b64bf433a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be7b6f0 <line:470:1, line:474:1> line:470:21 k_us_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be7b668 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be7b938 <line:471:1, line:474:1>
| `-FullComment 0x55b64bf43720 <line:462:4, line:468:35>
|   |-ParagraphComment 0x55b64bf434e0 <line:462:4>
|   | `-TextComment 0x55b64bf434b0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf43500 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf43560 <col:11, col:40>
|   |   `-TextComment 0x55b64bf43530 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55b64bf43600 <line:464:3, line:466:37>
|   | |-TextComment 0x55b64bf43580 <line:464:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55b64bf435a0 <line:465:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf435c0 <line:466:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf43650 <line:468:3>
|   | `-TextComment 0x55b64bf43620 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf43670 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf436d0 <col:11, col:35>
|       `-TextComment 0x55b64bf436a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be7b9e0 <line:484:1, line:488:1> line:484:21 k_us_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be7b958 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be7bc28 <line:485:1, line:488:1>
| `-FullComment 0x55b64bf43a00 <line:476:4, line:482:35>
|   |-ParagraphComment 0x55b64bf437c0 <line:476:4>
|   | `-TextComment 0x55b64bf43790 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf437e0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf43840 <col:11, col:40>
|   |   `-TextComment 0x55b64bf43810 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55b64bf438e0 <line:478:3, line:480:37>
|   | |-TextComment 0x55b64bf43860 <line:478:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55b64bf43880 <line:479:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf438a0 <line:480:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf43930 <line:482:3>
|   | `-TextComment 0x55b64bf43900 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf43950 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf439b0 <col:11, col:35>
|       `-TextComment 0x55b64bf43980 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be7bcd0 <line:498:1, line:502:1> line:498:21 k_us_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be7bc48 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be7bf18 <line:499:1, line:502:1>
| `-FullComment 0x55b64bf43ce0 <line:490:4, line:496:35>
|   |-ParagraphComment 0x55b64bf43aa0 <line:490:4>
|   | `-TextComment 0x55b64bf43a70 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf43ac0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf43b20 <col:11, col:40>
|   |   `-TextComment 0x55b64bf43af0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55b64bf43bc0 <line:492:3, line:494:45>
|   | |-TextComment 0x55b64bf43b40 <line:492:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55b64bf43b60 <line:493:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf43b80 <line:494:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf43c10 <line:496:3>
|   | `-TextComment 0x55b64bf43be0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf43c30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf43c90 <col:11, col:35>
|       `-TextComment 0x55b64bf43c60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be7bfd8 <line:512:1, line:516:1> line:512:21 k_us_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be7bf50 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be7c228 <line:513:1, line:516:1>
| `-FullComment 0x55b64bf43fc0 <line:504:4, line:510:35>
|   |-ParagraphComment 0x55b64bf43d80 <line:504:4>
|   | `-TextComment 0x55b64bf43d50 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf43da0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf43e00 <col:11, col:40>
|   |   `-TextComment 0x55b64bf43dd0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55b64bf43ea0 <line:506:3, line:508:45>
|   | |-TextComment 0x55b64bf43e20 <line:506:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55b64bf43e40 <line:507:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf43e60 <line:508:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf43ef0 <line:510:3>
|   | `-TextComment 0x55b64bf43ec0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf43f10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf43f70 <col:11, col:35>
|       `-TextComment 0x55b64bf43f40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be7c2d0 <line:526:1, line:530:1> line:526:21 k_ns_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be7c248 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be7c6a8 <line:527:1, line:530:1>
| | `-ReturnStmt 0x55b64be7c660 <line:529:2, col:65>
| |   `-ImplicitCastExpr 0x55b64be7c648 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be7c528 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be7c510 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be7c378 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be7c5a0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be7c588 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be7c3a0 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be7c248 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be7c5b8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be7c3c8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55b64be7c5d0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be7c428 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be7c410 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be7c3e8 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be7c5e8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be7c490 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be7c470 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be7c450 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be7c600 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be7c4b0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be7c618 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be7c4d0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55b64be7c630 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be7c4f0 <col:16> 'int' 0
| `-FullComment 0x55b64bf442a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:518:4, line:524:35>
|   |-ParagraphComment 0x55b64bf44060 <line:518:4>
|   | `-TextComment 0x55b64bf44030 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf44080 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf440e0 <col:11, col:49>
|   |   `-TextComment 0x55b64bf440b0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf44180 <line:520:3, line:522:44>
|   | |-TextComment 0x55b64bf44100 <line:520:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55b64bf44120 <line:521:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf44140 <line:522:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf441d0 <line:524:3>
|   | `-TextComment 0x55b64bf441a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf441f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf44250 <col:11, col:35>
|       `-TextComment 0x55b64bf44220 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be7c758 <line:540:1, line:544:1> line:540:21 k_ns_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be7c6d0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be7caf8 <line:541:1, line:544:1>
| | `-ReturnStmt 0x55b64be7cab8 <line:543:2, col:66>
| |   `-CallExpr 0x55b64be7c9b0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be7c998 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be7c800 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be7ca10 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be7c828 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be7c6d0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be7ca28 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be7c850 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55b64be7ca40 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be7c8b0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be7c898 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be7c870 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be7ca58 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be7c918 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be7c8f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be7c8d8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be7ca70 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be7c938 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be7ca88 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be7c958 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55b64be7caa0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be7c978 <col:16> 'int' 0
| `-FullComment 0x55b64bf44580 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:532:4, line:538:35>
|   |-ParagraphComment 0x55b64bf44340 <line:532:4>
|   | `-TextComment 0x55b64bf44310 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf44360 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf443c0 <col:11, col:49>
|   |   `-TextComment 0x55b64bf44390 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf44460 <line:534:3, line:536:44>
|   | |-TextComment 0x55b64bf443e0 <line:534:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55b64bf44400 <line:535:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf44420 <line:536:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf444b0 <line:538:3>
|   | `-TextComment 0x55b64bf44480 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf444d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf44530 <col:11, col:35>
|       `-TextComment 0x55b64bf44500 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be7cba8 <line:554:1, line:558:1> line:554:21 k_ns_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be7cb20 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be7dfa8 <line:555:1, line:558:1>
| | `-ReturnStmt 0x55b64be7df60 <line:557:2, col:64>
| |   `-ImplicitCastExpr 0x55b64be7cf20 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be7ce00 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be7cde8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be7cc50 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be7ce78 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be7ce60 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be7cc78 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be7cb20 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be7ce90 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be7cca0 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55b64be7cea8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be7cd00 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be7cce8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be7ccc0 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be7cec0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be7cd68 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be7cd48 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be7cd28 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be7ced8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be7cd88 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be7cef0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be7cda8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55b64be7cf08 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be7cdc8 <col:16> 'int' 1
| `-FullComment 0x55b64bf44860 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:546:4, line:552:35>
|   |-ParagraphComment 0x55b64bf44620 <line:546:4>
|   | `-TextComment 0x55b64bf445f0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf44640 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf446a0 <col:11, col:49>
|   |   `-TextComment 0x55b64bf44670 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf44740 <line:548:3, line:550:37>
|   | |-TextComment 0x55b64bf446c0 <line:548:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55b64bf446e0 <line:549:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf44700 <line:550:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf44790 <line:552:3>
|   | `-TextComment 0x55b64bf44760 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf447b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf44810 <col:11, col:35>
|       `-TextComment 0x55b64bf447e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be7e058 <line:568:1, line:572:1> line:568:21 k_ns_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be7dfd0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be7e3f8 <line:569:1, line:572:1>
| | `-ReturnStmt 0x55b64be7e3b8 <line:571:2, col:65>
| |   `-CallExpr 0x55b64be7e2b0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be7e298 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be7e100 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be7e310 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be7e128 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be7dfd0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be7e328 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be7e150 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55b64be7e340 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be7e1b0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be7e198 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be7e170 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be7e358 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be7e218 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be7e1f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be7e1d8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be7e370 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be7e238 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be7e388 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be7e258 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55b64be7e3a0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be7e278 <col:16> 'int' 1
| `-FullComment 0x55b64bf44b40 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:560:4, line:566:35>
|   |-ParagraphComment 0x55b64bf44900 <line:560:4>
|   | `-TextComment 0x55b64bf448d0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf44920 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf44980 <col:11, col:49>
|   |   `-TextComment 0x55b64bf44950 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf44a20 <line:562:3, line:564:37>
|   | |-TextComment 0x55b64bf449a0 <line:562:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55b64bf449c0 <line:563:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf449e0 <line:564:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf44a70 <line:566:3>
|   | `-TextComment 0x55b64bf44a40 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf44a90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf44af0 <col:11, col:35>
|       `-TextComment 0x55b64bf44ac0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be7e4a8 <line:582:1, line:586:1> line:582:21 k_ns_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be7e420 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be7e878 <line:583:1, line:586:1>
| | `-ReturnStmt 0x55b64be7e838 <line:585:2, col:64>
| |   `-ImplicitCastExpr 0x55b64be7e820 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be7e700 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be7e6e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be7e550 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be7e778 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be7e760 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be7e578 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be7e420 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be7e790 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be7e5a0 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55b64be7e7a8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be7e600 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be7e5e8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be7e5c0 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be7e7c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be7e668 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be7e648 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be7e628 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be7e7d8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be7e688 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be7e7f0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be7e6a8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55b64be7e808 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be7e6c8 <col:16> 'int' 0
| `-FullComment 0x55b64bf44e20 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:574:4, line:580:35>
|   |-ParagraphComment 0x55b64bf44be0 <line:574:4>
|   | `-TextComment 0x55b64bf44bb0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf44c00 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf44c60 <col:11, col:49>
|   |   `-TextComment 0x55b64bf44c30 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf44d00 <line:576:3, line:578:45>
|   | |-TextComment 0x55b64bf44c80 <line:576:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55b64bf44ca0 <line:577:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf44cc0 <line:578:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf44d50 <line:580:3>
|   | `-TextComment 0x55b64bf44d20 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf44d70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf44dd0 <col:11, col:35>
|       `-TextComment 0x55b64bf44da0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be7e928 <line:596:1, line:600:1> line:596:21 k_ns_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be7e8a0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be7ecc8 <line:597:1, line:600:1>
| | `-ReturnStmt 0x55b64be7ec88 <line:599:2, col:65>
| |   `-CallExpr 0x55b64be7eb80 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be7eb68 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be7e9d0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be7ebe0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be7e9f8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be7e8a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be7ebf8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be7ea20 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55b64be7ec10 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be7ea80 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be7ea68 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be7ea40 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be7ec28 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be7eae8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be7eac8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be7eaa8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be7ec40 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be7eb08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be7ec58 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be7eb28 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55b64be7ec70 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be7eb48 <col:16> 'int' 0
| `-FullComment 0x55b64bf45100 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:588:4, line:594:35>
|   |-ParagraphComment 0x55b64bf44ec0 <line:588:4>
|   | `-TextComment 0x55b64bf44e90 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf44ee0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf44f40 <col:11, col:49>
|   |   `-TextComment 0x55b64bf44f10 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55b64bf44fe0 <line:590:3, line:592:45>
|   | |-TextComment 0x55b64bf44f60 <line:590:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55b64bf44f80 <line:591:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf44fa0 <line:592:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf45030 <line:594:3>
|   | `-TextComment 0x55b64bf45000 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf45050 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf450b0 <col:11, col:35>
|       `-TextComment 0x55b64bf45080 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be7ed78 <line:610:1, line:614:1> line:610:21 k_ns_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be7ecf0 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be33998 <line:611:1, line:614:1>
| `-FullComment 0x55b64bf453e0 <line:602:4, line:608:35>
|   |-ParagraphComment 0x55b64bf451a0 <line:602:4>
|   | `-TextComment 0x55b64bf45170 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf451c0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf45220 <col:11, col:39>
|   |   `-TextComment 0x55b64bf451f0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55b64bf452c0 <line:604:3, line:606:44>
|   | |-TextComment 0x55b64bf45240 <line:604:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55b64bf45260 <line:605:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf45280 <line:606:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf45310 <line:608:3>
|   | `-TextComment 0x55b64bf452e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf45330 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf45390 <col:11, col:35>
|       `-TextComment 0x55b64bf45360 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be33a40 <line:624:1, line:628:1> line:624:21 k_ns_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be339b8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be33c88 <line:625:1, line:628:1>
| `-FullComment 0x55b64bf456d0 <line:616:4, line:622:35>
|   |-ParagraphComment 0x55b64bf45490 <line:616:4>
|   | `-TextComment 0x55b64bf45460 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf454b0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf45510 <col:11, col:39>
|   |   `-TextComment 0x55b64bf454e0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55b64bf455b0 <line:618:3, line:620:44>
|   | |-TextComment 0x55b64bf45530 <line:618:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55b64bf45550 <line:619:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf45570 <line:620:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf45600 <line:622:3>
|   | `-TextComment 0x55b64bf455d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf45620 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf45680 <col:11, col:35>
|       `-TextComment 0x55b64bf45650 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be33d30 <line:638:1, line:642:1> line:638:21 k_ns_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be33ca8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be33f78 <line:639:1, line:642:1>
| `-FullComment 0x55b64bf459b0 <line:630:4, line:636:35>
|   |-ParagraphComment 0x55b64bf45770 <line:630:4>
|   | `-TextComment 0x55b64bf45740 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf45790 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf457f0 <col:11, col:39>
|   |   `-TextComment 0x55b64bf457c0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55b64bf45890 <line:632:3, line:634:37>
|   | |-TextComment 0x55b64bf45810 <line:632:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55b64bf45830 <line:633:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf45850 <line:634:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf458e0 <line:636:3>
|   | `-TextComment 0x55b64bf458b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf45900 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf45960 <col:11, col:35>
|       `-TextComment 0x55b64bf45930 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be34020 <line:652:1, line:656:1> line:652:21 k_ns_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be33f98 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be34268 <line:653:1, line:656:1>
| `-FullComment 0x55b64bf45c90 <line:644:4, line:650:35>
|   |-ParagraphComment 0x55b64bf45a50 <line:644:4>
|   | `-TextComment 0x55b64bf45a20 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf45a70 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf45ad0 <col:11, col:39>
|   |   `-TextComment 0x55b64bf45aa0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55b64bf45b70 <line:646:3, line:648:37>
|   | |-TextComment 0x55b64bf45af0 <line:646:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55b64bf45b10 <line:647:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf45b30 <line:648:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf45bc0 <line:650:3>
|   | `-TextComment 0x55b64bf45b90 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf45be0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf45c40 <col:11, col:35>
|       `-TextComment 0x55b64bf45c10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be34310 <line:666:1, line:670:1> line:666:21 k_ns_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be34288 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be344d8 <line:667:1, line:670:1>
| `-FullComment 0x55b64bf45f70 <line:658:4, line:664:35>
|   |-ParagraphComment 0x55b64bf45d30 <line:658:4>
|   | `-TextComment 0x55b64bf45d00 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf45d50 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf45db0 <col:11, col:39>
|   |   `-TextComment 0x55b64bf45d80 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55b64bf45e50 <line:660:3, line:662:45>
|   | |-TextComment 0x55b64bf45dd0 <line:660:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55b64bf45df0 <line:661:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf45e10 <line:662:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf45ea0 <line:664:3>
|   | `-TextComment 0x55b64bf45e70 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf45ec0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf45f20 <col:11, col:35>
|       `-TextComment 0x55b64bf45ef0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be34580 <line:680:1, line:684:1> line:680:21 k_ns_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be344f8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be34748 <line:681:1, line:684:1>
| `-FullComment 0x55b64bf46250 <line:672:4, line:678:35>
|   |-ParagraphComment 0x55b64bf46010 <line:672:4>
|   | `-TextComment 0x55b64bf45fe0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf46030 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf46090 <col:11, col:39>
|   |   `-TextComment 0x55b64bf46060 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55b64bf46130 <line:674:3, line:676:45>
|   | |-TextComment 0x55b64bf460b0 <line:674:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55b64bf460d0 <line:675:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf460f0 <line:676:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf46180 <line:678:3>
|   | `-TextComment 0x55b64bf46150 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf461a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf46200 <col:11, col:35>
|       `-TextComment 0x55b64bf461d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be347f0 <line:694:1, line:698:1> line:694:21 k_cyc_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be34768 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be34bd8 <line:695:1, line:698:1>
| | `-ReturnStmt 0x55b64be34b98 <line:697:2, col:65>
| |   `-ImplicitCastExpr 0x55b64be34b80 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be34a60 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be34a48 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be34898 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be34ad8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be34ac0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be348c0 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be34768 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be34af0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be34940 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be34910 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be348e8 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be34b08 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be34968 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55b64be34b20 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be349c8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be349a8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be34988 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be34b38 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be349e8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be34b50 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be34a08 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55b64be34b68 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be34a28 <col:16> 'int' 0
| `-FullComment 0x55b64bf46530 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:686:4, line:692:35>
|   |-ParagraphComment 0x55b64bf462f0 <line:686:4>
|   | `-TextComment 0x55b64bf462c0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf46310 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf46370 <col:11, col:50>
|   |   `-TextComment 0x55b64bf46340 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55b64bf46410 <line:688:3, line:690:44>
|   | |-TextComment 0x55b64bf46390 <line:688:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55b64bf463b0 <line:689:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf463d0 <line:690:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf46460 <line:692:3>
|   | `-TextComment 0x55b64bf46430 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf46480 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf464e0 <col:11, col:35>
|       `-TextComment 0x55b64bf464b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be34c88 <line:708:1, line:712:1> line:708:21 k_cyc_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be34c00 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be35028 <line:709:1, line:712:1>
| | `-ReturnStmt 0x55b64be34fe8 <line:711:2, col:66>
| |   `-CallExpr 0x55b64be34ee0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be34ec8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be34d30 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be34f40 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be34d58 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be34c00 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be34f58 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be34dc0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be34da8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be34d80 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be34f70 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be34de8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55b64be34f88 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be34e48 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be34e28 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be34e08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be34fa0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be34e68 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be34fb8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be34e88 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55b64be34fd0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be34ea8 <col:16> 'int' 0
| `-FullComment 0x55b64bf46810 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:700:4, line:706:35>
|   |-ParagraphComment 0x55b64bf465d0 <line:700:4>
|   | `-TextComment 0x55b64bf465a0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf465f0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf46650 <col:11, col:50>
|   |   `-TextComment 0x55b64bf46620 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55b64bf466f0 <line:702:3, line:704:44>
|   | |-TextComment 0x55b64bf46670 <line:702:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55b64bf46690 <line:703:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf466b0 <line:704:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf46740 <line:706:3>
|   | `-TextComment 0x55b64bf46710 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf46760 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf467c0 <col:11, col:35>
|       `-TextComment 0x55b64bf46790 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be350d8 <line:722:1, line:726:1> line:722:21 k_cyc_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be35050 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be354a8 <line:723:1, line:726:1>
| | `-ReturnStmt 0x55b64be35468 <line:725:2, col:64>
| |   `-ImplicitCastExpr 0x55b64be35450 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be35330 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be35318 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be35180 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be353a8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be35390 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be351a8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be35050 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be353c0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be35210 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be351f8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be351d0 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be353d8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be35238 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55b64be353f0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be35298 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be35278 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be35258 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be35408 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be352b8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be35420 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be352d8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55b64be35438 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be352f8 <col:16> 'int' 1
| `-FullComment 0x55b64bf46af0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:714:4, line:720:35>
|   |-ParagraphComment 0x55b64bf468b0 <line:714:4>
|   | `-TextComment 0x55b64bf46880 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf468d0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf46930 <col:11, col:50>
|   |   `-TextComment 0x55b64bf46900 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55b64bf469d0 <line:716:3, line:718:37>
|   | |-TextComment 0x55b64bf46950 <line:716:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55b64bf46970 <line:717:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf46990 <line:718:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf46a20 <line:720:3>
|   | `-TextComment 0x55b64bf469f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf46a40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf46aa0 <col:11, col:35>
|       `-TextComment 0x55b64bf46a70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be35558 <line:736:1, line:740:1> line:736:21 k_cyc_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be354d0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be358f8 <line:737:1, line:740:1>
| | `-ReturnStmt 0x55b64be358b8 <line:739:2, col:65>
| |   `-CallExpr 0x55b64be357b0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be35798 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be35600 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be35810 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be35628 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be354d0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be35828 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be35690 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be35678 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be35650 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be35840 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be356b8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55b64be35858 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be35718 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be356f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be356d8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be35870 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be35738 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be35888 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be35758 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55b64be358a0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be35778 <col:16> 'int' 1
| `-FullComment 0x55b64bf46dd0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:728:4, line:734:35>
|   |-ParagraphComment 0x55b64bf46b90 <line:728:4>
|   | `-TextComment 0x55b64bf46b60 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf46bb0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf46c10 <col:11, col:50>
|   |   `-TextComment 0x55b64bf46be0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55b64bf46cb0 <line:730:3, line:732:37>
|   | |-TextComment 0x55b64bf46c30 <line:730:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55b64bf46c50 <line:731:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf46c70 <line:732:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf46d00 <line:734:3>
|   | `-TextComment 0x55b64bf46cd0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf46d20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf46d80 <col:11, col:35>
|       `-TextComment 0x55b64bf46d50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be359d8 <line:750:1, line:754:1> line:750:21 k_cyc_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be35950 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be35da8 <line:751:1, line:754:1>
| | `-ReturnStmt 0x55b64be35d68 <line:753:2, col:64>
| |   `-ImplicitCastExpr 0x55b64be35d50 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be35c30 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be35c18 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be35a80 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be35ca8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be35c90 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be35aa8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be35950 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be35cc0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be35b10 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be35af8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be35ad0 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be35cd8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be35b38 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55b64be35cf0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be35b98 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be35b78 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be35b58 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be35d08 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be35bb8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be35d20 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be35bd8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55b64be35d38 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be35bf8 <col:16> 'int' 0
| `-FullComment 0x55b64bf470b0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:742:4, line:748:35>
|   |-ParagraphComment 0x55b64bf46e70 <line:742:4>
|   | `-TextComment 0x55b64bf46e40 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf46e90 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf46ef0 <col:11, col:50>
|   |   `-TextComment 0x55b64bf46ec0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55b64bf46f90 <line:744:3, line:746:45>
|   | |-TextComment 0x55b64bf46f10 <line:744:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55b64bf46f30 <line:745:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf46f50 <line:746:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf46fe0 <line:748:3>
|   | `-TextComment 0x55b64bf46fb0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf47000 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf47060 <col:11, col:35>
|       `-TextComment 0x55b64bf47030 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be35e58 <line:764:1, line:768:1> line:764:21 k_cyc_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be35dd0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be361f8 <line:765:1, line:768:1>
| | `-ReturnStmt 0x55b64be361b8 <line:767:2, col:65>
| |   `-CallExpr 0x55b64be360b0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be36098 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be35f00 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be36110 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be35f28 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be35dd0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be36128 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be35f90 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be35f78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be35f50 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be36140 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be35fb8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55b64be36158 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be36018 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be35ff8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be35fd8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be36170 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be36038 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be36188 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be36058 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55b64be361a0 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be36078 <col:16> 'int' 0
| `-FullComment 0x55b64bf47390 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:756:4, line:762:35>
|   |-ParagraphComment 0x55b64bf47150 <line:756:4>
|   | `-TextComment 0x55b64bf47120 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf47170 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf471d0 <col:11, col:50>
|   |   `-TextComment 0x55b64bf471a0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55b64bf47270 <line:758:3, line:760:45>
|   | |-TextComment 0x55b64bf471f0 <line:758:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55b64bf47210 <line:759:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf47230 <line:760:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf472c0 <line:762:3>
|   | `-TextComment 0x55b64bf47290 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf472e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf47340 <col:11, col:35>
|       `-TextComment 0x55b64bf47310 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be362a8 <line:778:1, line:782:1> line:778:21 k_cyc_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be36220 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be36678 <line:779:1, line:782:1>
| | `-ReturnStmt 0x55b64be36638 <line:781:2, col:65>
| |   `-ImplicitCastExpr 0x55b64be36620 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be36500 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be364e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be36350 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be36578 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be36560 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be36378 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be36220 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be36590 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be363e0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be363c8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be363a0 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be365a8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be36408 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55b64be365c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be36468 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be36448 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be36428 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be365d8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be36488 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be365f0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be364a8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55b64be36608 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be364c8 <col:16> 'int' 0
| `-FullComment 0x55b64bf47680 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:770:4, line:776:35>
|   |-ParagraphComment 0x55b64bf47440 <line:770:4>
|   | `-TextComment 0x55b64bf47400 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf47460 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf474c0 <col:11, col:50>
|   |   `-TextComment 0x55b64bf47490 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55b64bf47560 <line:772:3, line:774:44>
|   | |-TextComment 0x55b64bf474e0 <line:772:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55b64bf47500 <line:773:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf47520 <line:774:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf475b0 <line:776:3>
|   | `-TextComment 0x55b64bf47580 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf475d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf47630 <col:11, col:35>
|       `-TextComment 0x55b64bf47600 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be36728 <line:792:1, line:796:1> line:792:21 k_cyc_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be366a0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be36ae8 <line:793:1, line:796:1>
| | `-ReturnStmt 0x55b64be36aa0 <line:795:2, col:66>
| |   `-CallExpr 0x55b64be36998 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be36980 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be367d0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be369f8 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be367f8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be366a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be36a10 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be36860 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be36848 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be36820 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be36a28 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be36888 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55b64be36a40 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be368e8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be368c8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be368a8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be36a58 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be36908 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be36a70 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be36928 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55b64be36a88 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be36960 <col:16> 'int' 0
| `-FullComment 0x55b64bf47960 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:784:4, line:790:35>
|   |-ParagraphComment 0x55b64bf47720 <line:784:4>
|   | `-TextComment 0x55b64bf476f0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf47740 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf477a0 <col:11, col:50>
|   |   `-TextComment 0x55b64bf47770 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55b64bf47840 <line:786:3, line:788:44>
|   | |-TextComment 0x55b64bf477c0 <line:786:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55b64bf477e0 <line:787:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf47800 <line:788:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf47890 <line:790:3>
|   | `-TextComment 0x55b64bf47860 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf478b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf47910 <col:11, col:35>
|       `-TextComment 0x55b64bf478e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be36b98 <line:806:1, line:810:1> line:806:21 k_cyc_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be36b10 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be36f68 <line:807:1, line:810:1>
| | `-ReturnStmt 0x55b64be36f28 <line:809:2, col:64>
| |   `-ImplicitCastExpr 0x55b64be36f10 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be36df0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be36dd8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be36c40 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be36e68 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be36e50 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be36c68 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be36b10 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be36e80 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be36cd0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be36cb8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be36c90 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be36e98 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be36cf8 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55b64be36eb0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be36d58 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be36d38 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be36d18 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be36ec8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be36d78 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be36ee0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be36d98 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55b64be36ef8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be36db8 <col:16> 'int' 1
| `-FullComment 0x55b64bf47c40 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:798:4, line:804:35>
|   |-ParagraphComment 0x55b64bf47a00 <line:798:4>
|   | `-TextComment 0x55b64bf479d0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf47a20 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf47a80 <col:11, col:50>
|   |   `-TextComment 0x55b64bf47a50 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55b64bf47b20 <line:800:3, line:802:37>
|   | |-TextComment 0x55b64bf47aa0 <line:800:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55b64bf47ac0 <line:801:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf47ae0 <line:802:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf47b70 <line:804:3>
|   | `-TextComment 0x55b64bf47b40 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf47b90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf47bf0 <col:11, col:35>
|       `-TextComment 0x55b64bf47bc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be37018 <line:820:1, line:824:1> line:820:21 k_cyc_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be36f90 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be373b8 <line:821:1, line:824:1>
| | `-ReturnStmt 0x55b64be37378 <line:823:2, col:65>
| |   `-CallExpr 0x55b64be37270 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be37258 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be370c0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be372d0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be370e8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be36f90 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be372e8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be37150 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be37138 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be37110 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be37300 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be37178 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55b64be37318 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be371d8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be371b8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be37198 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be37330 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be371f8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be37348 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be37218 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55b64be37360 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be37238 <col:16> 'int' 1
| `-FullComment 0x55b64bf47f20 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:812:4, line:818:35>
|   |-ParagraphComment 0x55b64bf47ce0 <line:812:4>
|   | `-TextComment 0x55b64bf47cb0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf47d00 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf47d60 <col:11, col:50>
|   |   `-TextComment 0x55b64bf47d30 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55b64bf47e00 <line:814:3, line:816:37>
|   | |-TextComment 0x55b64bf47d80 <line:814:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55b64bf47da0 <line:815:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf47dc0 <line:816:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf47e50 <line:818:3>
|   | `-TextComment 0x55b64bf47e20 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf47e70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf47ed0 <col:11, col:35>
|       `-TextComment 0x55b64bf47ea0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be37468 <line:834:1, line:838:1> line:834:21 k_cyc_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be373e0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be37838 <line:835:1, line:838:1>
| | `-ReturnStmt 0x55b64be377f8 <line:837:2, col:64>
| |   `-ImplicitCastExpr 0x55b64be377e0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be376c0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be376a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be37510 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be37738 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be37720 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be37538 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be373e0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be37750 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be375a0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be37588 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be37560 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be37768 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be375c8 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55b64be37780 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be37628 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be37608 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be375e8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be37798 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be37648 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be377b0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be37668 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55b64be377c8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be37688 <col:16> 'int' 0
| `-FullComment 0x55b64bf48200 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:826:4, line:832:35>
|   |-ParagraphComment 0x55b64bf47fc0 <line:826:4>
|   | `-TextComment 0x55b64bf47f90 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf47fe0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf48040 <col:11, col:50>
|   |   `-TextComment 0x55b64bf48010 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55b64bf480e0 <line:828:3, line:830:45>
|   | |-TextComment 0x55b64bf48060 <line:828:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55b64bf48080 <line:829:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf480a0 <line:830:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf48130 <line:832:3>
|   | `-TextComment 0x55b64bf48100 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf48150 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf481b0 <col:11, col:35>
|       `-TextComment 0x55b64bf48180 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be37970 <line:848:1, line:852:1> line:848:21 k_cyc_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be37860 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be37d18 <line:849:1, line:852:1>
| | `-ReturnStmt 0x55b64be37cd0 <line:851:2, col:65>
| |   `-CallExpr 0x55b64be37bc8 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be37bb0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be37a18 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be37c28 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be37a40 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be37860 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be37c40 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be37aa8 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be37a90 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be37a68 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be37c58 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be37ad0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55b64be37c70 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be37b30 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be37b10 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be37af0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be37c88 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be37b50 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be37ca0 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be37b70 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55b64be37cb8 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be37b90 <col:16> 'int' 0
| `-FullComment 0x55b64bf484e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:840:4, line:846:35>
|   |-ParagraphComment 0x55b64bf482a0 <line:840:4>
|   | `-TextComment 0x55b64bf48270 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf482c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf48320 <col:11, col:50>
|   |   `-TextComment 0x55b64bf482f0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55b64bf483c0 <line:842:3, line:844:45>
|   | |-TextComment 0x55b64bf48340 <line:842:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55b64bf48360 <line:843:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf48380 <line:844:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf48410 <line:846:3>
|   | `-TextComment 0x55b64bf483e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf48430 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf48490 <col:11, col:35>
|       `-TextComment 0x55b64bf48460 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be37dc8 <line:862:1, line:866:1> line:862:21 k_cyc_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be37d40 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be38198 <line:863:1, line:866:1>
| | `-ReturnStmt 0x55b64be38158 <line:865:2, col:65>
| |   `-ImplicitCastExpr 0x55b64be38140 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be38020 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be38008 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be37e70 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be38098 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be38080 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be37e98 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be37d40 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be380b0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be37f00 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be37ee8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be37ec0 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be380c8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be37f28 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55b64be380e0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be37f88 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be37f68 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be37f48 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be380f8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be37fa8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be38110 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be37fc8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55b64be38128 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be37fe8 <col:16> 'int' 0
| `-FullComment 0x55b64bf487c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:854:4, line:860:35>
|   |-ParagraphComment 0x55b64bf48580 <line:854:4>
|   | `-TextComment 0x55b64bf48550 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf485a0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf48600 <col:11, col:49>
|   |   `-TextComment 0x55b64bf485d0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55b64bf486a0 <line:856:3, line:858:44>
|   | |-TextComment 0x55b64bf48620 <line:856:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55b64bf48640 <line:857:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf48660 <line:858:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf486f0 <line:860:3>
|   | `-TextComment 0x55b64bf486c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf48710 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf48770 <col:11, col:35>
|       `-TextComment 0x55b64bf48740 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be38248 <line:876:1, line:880:1> line:876:21 k_cyc_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be381c0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be385e8 <line:877:1, line:880:1>
| | `-ReturnStmt 0x55b64be385a8 <line:879:2, col:66>
| |   `-CallExpr 0x55b64be384a0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be38488 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be382f0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be38500 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be38318 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be381c0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be38518 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be38380 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be38368 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be38340 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be38530 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be383a8 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55b64be38548 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be38408 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be383e8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be383c8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be38560 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be38428 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be38578 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be38448 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55b64be38590 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be38468 <col:16> 'int' 0
| `-FullComment 0x55b64bf48aa0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:868:4, line:874:35>
|   |-ParagraphComment 0x55b64bf48860 <line:868:4>
|   | `-TextComment 0x55b64bf48830 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf48880 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf488e0 <col:11, col:49>
|   |   `-TextComment 0x55b64bf488b0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55b64bf48980 <line:870:3, line:872:44>
|   | |-TextComment 0x55b64bf48900 <line:870:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55b64bf48920 <line:871:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf48940 <line:872:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf489d0 <line:874:3>
|   | `-TextComment 0x55b64bf489a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf489f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf48a50 <col:11, col:35>
|       `-TextComment 0x55b64bf48a20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be38698 <line:890:1, line:894:1> line:890:21 k_cyc_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be38610 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be8b068 <line:891:1, line:894:1>
| | `-ReturnStmt 0x55b64be8b020 <line:893:2, col:64>
| |   `-ImplicitCastExpr 0x55b64be8b008 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be388f0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be388d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be38740 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be8af60 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be38950 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be38768 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be38610 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be8af78 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be387d0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be387b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be38790 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be8af90 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be387f8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55b64be8afa8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be38858 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be38838 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be38818 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be8afc0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be38878 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be8afd8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be38898 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55b64be8aff0 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be388b8 <col:16> 'int' 1
| `-FullComment 0x55b64bf48d80 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:882:4, line:888:35>
|   |-ParagraphComment 0x55b64bf48b40 <line:882:4>
|   | `-TextComment 0x55b64bf48b10 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf48b60 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf48bc0 <col:11, col:49>
|   |   `-TextComment 0x55b64bf48b90 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55b64bf48c60 <line:884:3, line:886:37>
|   | |-TextComment 0x55b64bf48be0 <line:884:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55b64bf48c00 <line:885:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf48c20 <line:886:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf48cb0 <line:888:3>
|   | `-TextComment 0x55b64bf48c80 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf48cd0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf48d30 <col:11, col:35>
|       `-TextComment 0x55b64bf48d00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8b118 <line:904:1, line:908:1> line:904:21 k_cyc_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be8b090 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be8b4b8 <line:905:1, line:908:1>
| | `-ReturnStmt 0x55b64be8b478 <line:907:2, col:65>
| |   `-CallExpr 0x55b64be8b370 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be8b358 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be8b1c0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be8b3d0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be8b1e8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be8b090 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be8b3e8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be8b250 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be8b238 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be8b210 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be8b400 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be8b278 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55b64be8b418 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be8b2d8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be8b2b8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be8b298 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be8b430 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be8b2f8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be8b448 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be8b318 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55b64be8b460 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be8b338 <col:16> 'int' 1
| `-FullComment 0x55b64bf49060 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:896:4, line:902:35>
|   |-ParagraphComment 0x55b64bf48e20 <line:896:4>
|   | `-TextComment 0x55b64bf48df0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf48e40 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf48ea0 <col:11, col:49>
|   |   `-TextComment 0x55b64bf48e70 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55b64bf48f40 <line:898:3, line:900:37>
|   | |-TextComment 0x55b64bf48ec0 <line:898:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55b64bf48ee0 <line:899:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf48f00 <line:900:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf48f90 <line:902:3>
|   | `-TextComment 0x55b64bf48f60 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf48fb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf49010 <col:11, col:35>
|       `-TextComment 0x55b64bf48fe0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8b568 <line:918:1, line:922:1> line:918:21 k_cyc_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be8b4e0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be8b938 <line:919:1, line:922:1>
| | `-ReturnStmt 0x55b64be8b8f8 <line:921:2, col:64>
| |   `-ImplicitCastExpr 0x55b64be8b8e0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64be8b7c0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64be8b7a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64be8b610 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55b64be8b838 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55b64be8b820 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b64be8b638 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be8b4e0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55b64be8b850 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55b64be8b6a0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55b64be8b688 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55b64be8b660 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55b64be8b868 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55b64be8b6c8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55b64be8b880 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55b64be8b728 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55b64be8b708 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55b64be8b6e8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55b64be8b898 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be8b748 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55b64be8b8b0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55b64be8b768 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55b64be8b8c8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55b64be8b788 <col:16> 'int' 0
| `-FullComment 0x55b64bf49340 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:910:4, line:916:35>
|   |-ParagraphComment 0x55b64bf49100 <line:910:4>
|   | `-TextComment 0x55b64bf490d0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf49120 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf49180 <col:11, col:49>
|   |   `-TextComment 0x55b64bf49150 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55b64bf49220 <line:912:3, line:914:45>
|   | |-TextComment 0x55b64bf491a0 <line:912:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55b64bf491c0 <line:913:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf491e0 <line:914:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf49270 <line:916:3>
|   | `-TextComment 0x55b64bf49240 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf49290 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf492f0 <col:11, col:35>
|       `-TextComment 0x55b64bf492c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8b9e8 <line:932:1, line:936:1> line:932:21 k_cyc_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be8b960 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be8bd88 <line:933:1, line:936:1>
| | `-ReturnStmt 0x55b64be8bd48 <line:935:2, col:65>
| |   `-CallExpr 0x55b64be8bc40 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be8bc28 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be8ba90 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55b64be70260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55b64be8bca0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be8bab8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55b64be8b960 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55b64be8bcb8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55b64be8bb20 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55b64be8bb08 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55b64be8bae0 <col:18> 'int (void)' Function 0x55b64be6fd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55b64be8bcd0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55b64be8bb48 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55b64be8bce8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55b64be8bba8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55b64be8bb88 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55b64be8bb68 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be8bd00 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be8bbc8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55b64be8bd18 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55b64be8bbe8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55b64be8bd30 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55b64be8bc08 <col:16> 'int' 0
| `-FullComment 0x55b64bf49630 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:924:4, line:930:35>
|   |-ParagraphComment 0x55b64bf493e0 <line:924:4>
|   | `-TextComment 0x55b64bf493b0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf49400 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf49470 <col:11, col:49>
|   |   `-TextComment 0x55b64bf49440 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55b64bf49510 <line:926:3, line:928:45>
|   | |-TextComment 0x55b64bf49490 <line:926:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55b64bf494b0 <line:927:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf494d0 <line:928:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf49560 <line:930:3>
|   | `-TextComment 0x55b64bf49530 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf49580 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf495e0 <col:11, col:35>
|       `-TextComment 0x55b64bf495b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8be38 <line:946:1, line:950:1> line:946:21 k_cyc_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be8bdb0 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be8c098 <line:947:1, line:950:1>
| `-FullComment 0x55b64bf49910 <line:938:4, line:944:35>
|   |-ParagraphComment 0x55b64bf496d0 <line:938:4>
|   | `-TextComment 0x55b64bf496a0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf496f0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf49750 <col:11, col:43>
|   |   `-TextComment 0x55b64bf49720 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55b64bf497f0 <line:940:3, line:942:44>
|   | |-TextComment 0x55b64bf49770 <line:940:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55b64bf49790 <line:941:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf497b0 <line:942:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf49840 <line:944:3>
|   | `-TextComment 0x55b64bf49810 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf49860 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf498c0 <col:11, col:35>
|       `-TextComment 0x55b64bf49890 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8c140 <line:960:1, line:964:1> line:960:21 k_cyc_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be8c0b8 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be8c388 <line:961:1, line:964:1>
| `-FullComment 0x55b64bf49bf0 <line:952:4, line:958:35>
|   |-ParagraphComment 0x55b64bf499b0 <line:952:4>
|   | `-TextComment 0x55b64bf49980 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf499d0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf49a30 <col:11, col:43>
|   |   `-TextComment 0x55b64bf49a00 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55b64bf49ad0 <line:954:3, line:956:44>
|   | |-TextComment 0x55b64bf49a50 <line:954:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55b64bf49a70 <line:955:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf49a90 <line:956:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf49b20 <line:958:3>
|   | `-TextComment 0x55b64bf49af0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf49b40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf49ba0 <col:11, col:35>
|       `-TextComment 0x55b64bf49b70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8c430 <line:974:1, line:978:1> line:974:21 k_cyc_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be8c3a8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be8c678 <line:975:1, line:978:1>
| `-FullComment 0x55b64bf49ed0 <line:966:4, line:972:35>
|   |-ParagraphComment 0x55b64bf49c90 <line:966:4>
|   | `-TextComment 0x55b64bf49c60 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf49cb0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf49d10 <col:11, col:43>
|   |   `-TextComment 0x55b64bf49ce0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55b64bf49db0 <line:968:3, line:970:37>
|   | |-TextComment 0x55b64bf49d30 <line:968:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55b64bf49d50 <line:969:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf49d70 <line:970:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf49e00 <line:972:3>
|   | `-TextComment 0x55b64bf49dd0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf49e20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf49e80 <col:11, col:35>
|       `-TextComment 0x55b64bf49e50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8c720 <line:988:1, line:992:1> line:988:21 k_cyc_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be8c698 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be8c968 <line:989:1, line:992:1>
| `-FullComment 0x55b64bf4a1b0 <line:980:4, line:986:35>
|   |-ParagraphComment 0x55b64bf49f70 <line:980:4>
|   | `-TextComment 0x55b64bf49f40 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf49f90 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf49ff0 <col:11, col:43>
|   |   `-TextComment 0x55b64bf49fc0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55b64bf4a090 <line:982:3, line:984:37>
|   | |-TextComment 0x55b64bf4a010 <line:982:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55b64bf4a030 <line:983:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf4a050 <line:984:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf4a0e0 <line:986:3>
|   | `-TextComment 0x55b64bf4a0b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4a100 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4a160 <col:11, col:35>
|       `-TextComment 0x55b64bf4a130 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8ca10 <line:1002:1, line:1006:1> line:1002:21 k_cyc_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be8c988 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be8cc58 <line:1003:1, line:1006:1>
| `-FullComment 0x55b64bf4a490 <line:994:4, line:1000:35>
|   |-ParagraphComment 0x55b64bf4a250 <line:994:4>
|   | `-TextComment 0x55b64bf4a220 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4a270 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf4a2d0 <col:11, col:43>
|   |   `-TextComment 0x55b64bf4a2a0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55b64bf4a370 <line:996:3, line:998:45>
|   | |-TextComment 0x55b64bf4a2f0 <line:996:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55b64bf4a310 <line:997:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf4a330 <line:998:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf4a3c0 <line:1000:3>
|   | `-TextComment 0x55b64bf4a390 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4a3e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4a440 <col:11, col:35>
|       `-TextComment 0x55b64bf4a410 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8cd00 <line:1016:1, line:1020:1> line:1016:21 k_cyc_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be8cc78 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be8cf48 <line:1017:1, line:1020:1>
| `-FullComment 0x55b64bf4a770 <line:1008:4, line:1014:35>
|   |-ParagraphComment 0x55b64bf4a530 <line:1008:4>
|   | `-TextComment 0x55b64bf4a500 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4a550 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf4a5b0 <col:11, col:43>
|   |   `-TextComment 0x55b64bf4a580 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55b64bf4a650 <line:1010:3, line:1012:45>
|   | |-TextComment 0x55b64bf4a5d0 <line:1010:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55b64bf4a5f0 <line:1011:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf4a610 <line:1012:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf4a6a0 <line:1014:3>
|   | `-TextComment 0x55b64bf4a670 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4a6c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4a720 <col:11, col:35>
|       `-TextComment 0x55b64bf4a6f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8d008 <line:1030:1, line:1034:1> line:1030:21 k_ticks_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be8cf80 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be8d1c8 <line:1031:1, line:1034:1>
| `-FullComment 0x55b64bf4aa50 <line:1022:4, line:1028:35>
|   |-ParagraphComment 0x55b64bf4a810 <line:1022:4>
|   | `-TextComment 0x55b64bf4a7e0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4a830 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf4a890 <col:11, col:40>
|   |   `-TextComment 0x55b64bf4a860 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55b64bf4a930 <line:1024:3, line:1026:44>
|   | |-TextComment 0x55b64bf4a8b0 <line:1024:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55b64bf4a8d0 <line:1025:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf4a8f0 <line:1026:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf4a980 <line:1028:3>
|   | `-TextComment 0x55b64bf4a950 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4a9a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4aa00 <col:11, col:35>
|       `-TextComment 0x55b64bf4a9d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8d270 <line:1044:1, line:1048:1> line:1044:21 used k_ticks_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be8d1e8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be8d438 <line:1045:1, line:1048:1>
| `-FullComment 0x55b64bf4ad30 <line:1036:4, line:1042:35>
|   |-ParagraphComment 0x55b64bf4aaf0 <line:1036:4>
|   | `-TextComment 0x55b64bf4aac0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4ab10 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf4ab70 <col:11, col:40>
|   |   `-TextComment 0x55b64bf4ab40 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55b64bf4ac10 <line:1038:3, line:1040:44>
|   | |-TextComment 0x55b64bf4ab90 <line:1038:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55b64bf4abb0 <line:1039:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf4abd0 <line:1040:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf4ac60 <line:1042:3>
|   | `-TextComment 0x55b64bf4ac30 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4ac80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4ace0 <col:11, col:35>
|       `-TextComment 0x55b64bf4acb0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8d4e0 <line:1058:1, line:1062:1> line:1058:21 k_ticks_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be8d458 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be8d6a8 <line:1059:1, line:1062:1>
| `-FullComment 0x55b64bf4b010 <line:1050:4, line:1056:35>
|   |-ParagraphComment 0x55b64bf4add0 <line:1050:4>
|   | `-TextComment 0x55b64bf4ada0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4adf0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf4ae50 <col:11, col:40>
|   |   `-TextComment 0x55b64bf4ae20 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55b64bf4aef0 <line:1052:3, line:1054:37>
|   | |-TextComment 0x55b64bf4ae70 <line:1052:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55b64bf4ae90 <line:1053:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf4aeb0 <line:1054:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf4af40 <line:1056:3>
|   | `-TextComment 0x55b64bf4af10 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4af60 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4afc0 <col:11, col:35>
|       `-TextComment 0x55b64bf4af90 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8d750 <line:1072:1, line:1076:1> line:1072:21 k_ticks_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be8d6c8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be8d918 <line:1073:1, line:1076:1>
| `-FullComment 0x55b64bf4b2f0 <line:1064:4, line:1070:35>
|   |-ParagraphComment 0x55b64bf4b0b0 <line:1064:4>
|   | `-TextComment 0x55b64bf4b080 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4b0d0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf4b130 <col:11, col:40>
|   |   `-TextComment 0x55b64bf4b100 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55b64bf4b1d0 <line:1066:3, line:1068:37>
|   | |-TextComment 0x55b64bf4b150 <line:1066:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55b64bf4b170 <line:1067:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf4b190 <line:1068:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf4b220 <line:1070:3>
|   | `-TextComment 0x55b64bf4b1f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4b240 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4b2a0 <col:11, col:35>
|       `-TextComment 0x55b64bf4b270 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8d9c0 <line:1086:1, line:1090:1> line:1086:21 k_ticks_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be8d938 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be8db88 <line:1087:1, line:1090:1>
| `-FullComment 0x55b64bf4b5f0 <line:1078:4, line:1084:35>
|   |-ParagraphComment 0x55b64bf4b390 <line:1078:4>
|   | `-TextComment 0x55b64bf4b360 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4b3b0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf4b410 <col:11, col:40>
|   |   `-TextComment 0x55b64bf4b3e0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55b64bf4b4d0 <line:1080:3, line:1082:45>
|   | |-TextComment 0x55b64bf4b450 <line:1080:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55b64bf4b470 <line:1081:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf4b490 <line:1082:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf4b520 <line:1084:3>
|   | `-TextComment 0x55b64bf4b4f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4b540 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4b5a0 <col:11, col:35>
|       `-TextComment 0x55b64bf4b570 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8dc30 <line:1100:1, line:1104:1> line:1100:21 k_ticks_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be8dba8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be8ddf8 <line:1101:1, line:1104:1>
| `-FullComment 0x55b64bf4b8d0 <line:1092:4, line:1098:35>
|   |-ParagraphComment 0x55b64bf4b690 <line:1092:4>
|   | `-TextComment 0x55b64bf4b660 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4b6b0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf4b710 <col:11, col:40>
|   |   `-TextComment 0x55b64bf4b6e0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55b64bf4b7b0 <line:1094:3, line:1096:45>
|   | |-TextComment 0x55b64bf4b730 <line:1094:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55b64bf4b750 <line:1095:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf4b770 <line:1096:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf4b800 <line:1098:3>
|   | `-TextComment 0x55b64bf4b7d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4b820 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4b880 <col:11, col:35>
|       `-TextComment 0x55b64bf4b850 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8dea0 <line:1114:1, line:1118:1> line:1114:21 k_ticks_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be8de18 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be8f098 <line:1115:1, line:1118:1>
| `-FullComment 0x55b64bf4bbb0 <line:1106:4, line:1112:35>
|   |-ParagraphComment 0x55b64bf4b970 <line:1106:4>
|   | `-TextComment 0x55b64bf4b940 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4b990 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf4b9f0 <col:11, col:40>
|   |   `-TextComment 0x55b64bf4b9c0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55b64bf4ba90 <line:1108:3, line:1110:44>
|   | |-TextComment 0x55b64bf4ba10 <line:1108:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55b64bf4ba30 <line:1109:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf4ba50 <line:1110:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf4bae0 <line:1112:3>
|   | `-TextComment 0x55b64bf4bab0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4bb00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4bb60 <col:11, col:35>
|       `-TextComment 0x55b64bf4bb30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8f140 <line:1128:1, line:1132:1> line:1128:21 k_ticks_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be8f0b8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be8f308 <line:1129:1, line:1132:1>
| `-FullComment 0x55b64bf4be90 <line:1120:4, line:1126:35>
|   |-ParagraphComment 0x55b64bf4bc50 <line:1120:4>
|   | `-TextComment 0x55b64bf4bc20 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4bc70 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf4bcd0 <col:11, col:40>
|   |   `-TextComment 0x55b64bf4bca0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55b64bf4bd70 <line:1122:3, line:1124:44>
|   | |-TextComment 0x55b64bf4bcf0 <line:1122:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55b64bf4bd10 <line:1123:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf4bd30 <line:1124:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf4bdc0 <line:1126:3>
|   | `-TextComment 0x55b64bf4bd90 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4bde0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4be40 <col:11, col:35>
|       `-TextComment 0x55b64bf4be10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8f3b0 <line:1142:1, line:1146:1> line:1142:21 k_ticks_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be8f328 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be8f578 <line:1143:1, line:1146:1>
| `-FullComment 0x55b64bf4c170 <line:1134:4, line:1140:35>
|   |-ParagraphComment 0x55b64bf4bf30 <line:1134:4>
|   | `-TextComment 0x55b64bf4bf00 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4bf50 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf4bfb0 <col:11, col:40>
|   |   `-TextComment 0x55b64bf4bf80 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55b64bf4c050 <line:1136:3, line:1138:37>
|   | |-TextComment 0x55b64bf4bfd0 <line:1136:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55b64bf4bff0 <line:1137:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf4c010 <line:1138:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf4c0a0 <line:1140:3>
|   | `-TextComment 0x55b64bf4c070 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4c0c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4c120 <col:11, col:35>
|       `-TextComment 0x55b64bf4c0f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8f620 <line:1156:1, line:1160:1> line:1156:21 k_ticks_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be8f598 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be8f7e8 <line:1157:1, line:1160:1>
| `-FullComment 0x55b64bf4c450 <line:1148:4, line:1154:35>
|   |-ParagraphComment 0x55b64bf4c210 <line:1148:4>
|   | `-TextComment 0x55b64bf4c1e0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4c230 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf4c290 <col:11, col:40>
|   |   `-TextComment 0x55b64bf4c260 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55b64bf4c330 <line:1150:3, line:1152:37>
|   | |-TextComment 0x55b64bf4c2b0 <line:1150:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55b64bf4c2d0 <line:1151:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf4c2f0 <line:1152:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf4c380 <line:1154:3>
|   | `-TextComment 0x55b64bf4c350 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4c3a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4c400 <col:11, col:35>
|       `-TextComment 0x55b64bf4c3d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8f890 <line:1170:1, line:1174:1> line:1170:21 k_ticks_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be8f808 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be8fa58 <line:1171:1, line:1174:1>
| `-FullComment 0x55b64bf4c730 <line:1162:4, line:1168:35>
|   |-ParagraphComment 0x55b64bf4c4f0 <line:1162:4>
|   | `-TextComment 0x55b64bf4c4c0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4c510 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf4c570 <col:11, col:40>
|   |   `-TextComment 0x55b64bf4c540 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55b64bf4c610 <line:1164:3, line:1166:45>
|   | |-TextComment 0x55b64bf4c590 <line:1164:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55b64bf4c5b0 <line:1165:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf4c5d0 <line:1166:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf4c660 <line:1168:3>
|   | `-TextComment 0x55b64bf4c630 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4c680 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4c6e0 <col:11, col:35>
|       `-TextComment 0x55b64bf4c6b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8fb00 <line:1184:1, line:1188:1> line:1184:21 k_ticks_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be8fa78 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be8fcc8 <line:1185:1, line:1188:1>
| `-FullComment 0x55b64bf4ca10 <line:1176:4, line:1182:35>
|   |-ParagraphComment 0x55b64bf4c7d0 <line:1176:4>
|   | `-TextComment 0x55b64bf4c7a0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4c7f0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf4c850 <col:11, col:40>
|   |   `-TextComment 0x55b64bf4c820 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55b64bf4c8f0 <line:1178:3, line:1180:45>
|   | |-TextComment 0x55b64bf4c870 <line:1178:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55b64bf4c890 <line:1179:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf4c8b0 <line:1180:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf4c940 <line:1182:3>
|   | `-TextComment 0x55b64bf4c910 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4c960 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4c9c0 <col:11, col:35>
|       `-TextComment 0x55b64bf4c990 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be8fd70 <line:1198:1, line:1202:1> line:1198:21 k_ticks_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be8fce8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be8ff38 <line:1199:1, line:1202:1>
| `-FullComment 0x55b64bf4ccf0 <line:1190:4, line:1196:35>
|   |-ParagraphComment 0x55b64bf4cab0 <line:1190:4>
|   | `-TextComment 0x55b64bf4ca80 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4cad0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf4cb30 <col:11, col:39>
|   |   `-TextComment 0x55b64bf4cb00 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55b64bf4cbd0 <line:1192:3, line:1194:44>
|   | |-TextComment 0x55b64bf4cb50 <line:1192:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55b64bf4cb70 <line:1193:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf4cb90 <line:1194:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf4cc20 <line:1196:3>
|   | `-TextComment 0x55b64bf4cbf0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4cc40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4cca0 <col:11, col:35>
|       `-TextComment 0x55b64bf4cc70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be90038 <line:1212:1, line:1216:1> line:1212:21 k_ticks_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be8ffb0 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be901f8 <line:1213:1, line:1216:1>
| `-FullComment 0x55b64bf4cfd0 <line:1204:4, line:1210:35>
|   |-ParagraphComment 0x55b64bf4cd90 <line:1204:4>
|   | `-TextComment 0x55b64bf4cd60 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4cdb0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf4ce10 <col:11, col:39>
|   |   `-TextComment 0x55b64bf4cde0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55b64bf4ceb0 <line:1206:3, line:1208:44>
|   | |-TextComment 0x55b64bf4ce30 <line:1206:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55b64bf4ce50 <line:1207:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf4ce70 <line:1208:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf4cf00 <line:1210:3>
|   | `-TextComment 0x55b64bf4ced0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4cf20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4cf80 <col:11, col:35>
|       `-TextComment 0x55b64bf4cf50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be902a0 <line:1226:1, line:1230:1> line:1226:21 k_ticks_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be90218 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be90468 <line:1227:1, line:1230:1>
| `-FullComment 0x55b64bf4d2b0 <line:1218:4, line:1224:35>
|   |-ParagraphComment 0x55b64bf4d070 <line:1218:4>
|   | `-TextComment 0x55b64bf4d040 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4d090 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf4d0f0 <col:11, col:39>
|   |   `-TextComment 0x55b64bf4d0c0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55b64bf4d190 <line:1220:3, line:1222:37>
|   | |-TextComment 0x55b64bf4d110 <line:1220:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55b64bf4d130 <line:1221:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf4d150 <line:1222:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf4d1e0 <line:1224:3>
|   | `-TextComment 0x55b64bf4d1b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4d200 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4d260 <col:11, col:35>
|       `-TextComment 0x55b64bf4d230 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be90510 <line:1240:1, line:1244:1> line:1240:21 k_ticks_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be90488 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be906d8 <line:1241:1, line:1244:1>
| `-FullComment 0x55b64bf4d5a0 <line:1232:4, line:1238:35>
|   |-ParagraphComment 0x55b64bf4d350 <line:1232:4>
|   | `-TextComment 0x55b64bf4d320 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4d370 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf4d3d0 <col:11, col:39>
|   |   `-TextComment 0x55b64bf4d3a0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55b64bf4d480 <line:1234:3, line:1236:37>
|   | |-TextComment 0x55b64bf4d3f0 <line:1234:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55b64bf4d410 <line:1235:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf4d430 <line:1236:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf4d4d0 <line:1238:3>
|   | `-TextComment 0x55b64bf4d4a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4d4f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4d550 <col:11, col:35>
|       `-TextComment 0x55b64bf4d520 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be90780 <line:1254:1, line:1258:1> line:1254:21 k_ticks_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be906f8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be90948 <line:1255:1, line:1258:1>
| `-FullComment 0x55b64bf4d880 <line:1246:4, line:1252:35>
|   |-ParagraphComment 0x55b64bf4d640 <line:1246:4>
|   | `-TextComment 0x55b64bf4d610 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4d660 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf4d6c0 <col:11, col:39>
|   |   `-TextComment 0x55b64bf4d690 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55b64bf4d760 <line:1248:3, line:1250:45>
|   | |-TextComment 0x55b64bf4d6e0 <line:1248:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55b64bf4d700 <line:1249:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf4d720 <line:1250:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf4d7b0 <line:1252:3>
|   | `-TextComment 0x55b64bf4d780 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4d7d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4d830 <col:11, col:35>
|       `-TextComment 0x55b64bf4d800 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be909f0 <line:1268:1, line:1272:1> line:1268:21 k_ticks_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be90968 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be90bb8 <line:1269:1, line:1272:1>
| `-FullComment 0x55b64bf4db60 <line:1260:4, line:1266:35>
|   |-ParagraphComment 0x55b64bf4d920 <line:1260:4>
|   | `-TextComment 0x55b64bf4d8f0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4d940 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf4d9a0 <col:11, col:39>
|   |   `-TextComment 0x55b64bf4d970 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55b64bf4da40 <line:1262:3, line:1264:45>
|   | |-TextComment 0x55b64bf4d9c0 <line:1262:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55b64bf4d9e0 <line:1263:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf4da00 <line:1264:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf4da90 <line:1266:3>
|   | `-TextComment 0x55b64bf4da60 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4dab0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4db10 <col:11, col:35>
|       `-TextComment 0x55b64bf4dae0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be90c60 <line:1282:1, line:1286:1> line:1282:21 k_ticks_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be90bd8 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be90ea8 <line:1283:1, line:1286:1>
| `-FullComment 0x55b64bf4de40 <line:1274:4, line:1280:35>
|   |-ParagraphComment 0x55b64bf4dc00 <line:1274:4>
|   | `-TextComment 0x55b64bf4dbd0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4dc20 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf4dc80 <col:11, col:43>
|   |   `-TextComment 0x55b64bf4dc50 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55b64bf4dd20 <line:1276:3, line:1278:44>
|   | |-TextComment 0x55b64bf4dca0 <line:1276:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55b64bf4dcc0 <line:1277:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf4dce0 <line:1278:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf4dd70 <line:1280:3>
|   | `-TextComment 0x55b64bf4dd40 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4dd90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4ddf0 <col:11, col:35>
|       `-TextComment 0x55b64bf4ddc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be90fc0 <line:1296:1, line:1300:1> line:1296:21 k_ticks_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be90ec8 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be91208 <line:1297:1, line:1300:1>
| `-FullComment 0x55b64bf4e120 <line:1288:4, line:1294:35>
|   |-ParagraphComment 0x55b64bf4dee0 <line:1288:4>
|   | `-TextComment 0x55b64bf4deb0 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4df00 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf4df60 <col:11, col:43>
|   |   `-TextComment 0x55b64bf4df30 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55b64bf4e000 <line:1290:3, line:1292:44>
|   | |-TextComment 0x55b64bf4df80 <line:1290:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55b64bf4dfa0 <line:1291:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf4dfc0 <line:1292:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55b64bf4e050 <line:1294:3>
|   | `-TextComment 0x55b64bf4e020 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4e070 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4e0d0 <col:11, col:35>
|       `-TextComment 0x55b64bf4e0a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be912b0 <line:1310:1, line:1314:1> line:1310:21 k_ticks_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be91228 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be914f8 <line:1311:1, line:1314:1>
| `-FullComment 0x55b64bf4e400 <line:1302:4, line:1308:35>
|   |-ParagraphComment 0x55b64bf4e1c0 <line:1302:4>
|   | `-TextComment 0x55b64bf4e190 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4e1e0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf4e240 <col:11, col:43>
|   |   `-TextComment 0x55b64bf4e210 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55b64bf4e2e0 <line:1304:3, line:1306:37>
|   | |-TextComment 0x55b64bf4e260 <line:1304:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55b64bf4e280 <line:1305:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf4e2a0 <line:1306:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf4e330 <line:1308:3>
|   | `-TextComment 0x55b64bf4e300 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4e350 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4e3b0 <col:11, col:35>
|       `-TextComment 0x55b64bf4e380 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be915a0 <line:1324:1, line:1328:1> line:1324:21 k_ticks_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be91518 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be917e8 <line:1325:1, line:1328:1>
| `-FullComment 0x55b64bf4e6e0 <line:1316:4, line:1322:35>
|   |-ParagraphComment 0x55b64bf4e4a0 <line:1316:4>
|   | `-TextComment 0x55b64bf4e470 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4e4c0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf4e520 <col:11, col:43>
|   |   `-TextComment 0x55b64bf4e4f0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55b64bf4e5c0 <line:1318:3, line:1320:37>
|   | |-TextComment 0x55b64bf4e540 <line:1318:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55b64bf4e560 <line:1319:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf4e580 <line:1320:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55b64bf4e610 <line:1322:3>
|   | `-TextComment 0x55b64bf4e5e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4e630 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4e690 <col:11, col:35>
|       `-TextComment 0x55b64bf4e660 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be91890 <line:1338:1, line:1342:1> line:1338:21 k_ticks_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55b64be91808 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be91ad8 <line:1339:1, line:1342:1>
| `-FullComment 0x55b64bf4e9c0 <line:1330:4, line:1336:35>
|   |-ParagraphComment 0x55b64bf4e780 <line:1330:4>
|   | `-TextComment 0x55b64bf4e750 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4e7a0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf4e800 <col:11, col:43>
|   |   `-TextComment 0x55b64bf4e7d0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55b64bf4e8a0 <line:1332:3, line:1334:45>
|   | |-TextComment 0x55b64bf4e820 <line:1332:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55b64bf4e840 <line:1333:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55b64bf4e860 <line:1334:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf4e8f0 <line:1336:3>
|   | `-TextComment 0x55b64bf4e8c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4e910 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4e970 <col:11, col:35>
|       `-TextComment 0x55b64bf4e940 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be91b80 <line:1352:1, line:1356:1> line:1352:21 k_ticks_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55b64be91af8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55b64be91e28 <line:1353:1, line:1356:1>
| `-FullComment 0x55b64bf4eca0 <line:1344:4, line:1350:35>
|   |-ParagraphComment 0x55b64bf4ea60 <line:1344:4>
|   | `-TextComment 0x55b64bf4ea30 <col:4> Text=" "
|   |-BlockCommandComment 0x55b64bf4ea80 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf4eae0 <col:11, col:43>
|   |   `-TextComment 0x55b64bf4eab0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55b64bf4eb80 <line:1346:3, line:1348:45>
|   | |-TextComment 0x55b64bf4eb00 <line:1346:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55b64bf4eb20 <line:1347:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55b64bf4eb40 <line:1348:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55b64bf4ebd0 <line:1350:3>
|   | `-TextComment 0x55b64bf4eba0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf4ebf0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55b64bf4ec50 <col:11, col:35>
|       `-TextComment 0x55b64bf4ec20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55b64be91ec8 </vagrant/ext/zephyros/zephyr/include/sys_clock.h:117:1, col:25> col:7 z_tick_get_32 'u32_t (void)'
| `-FullComment 0x55b64bf4ef30 <line:112:3, line:116:1>
|   |-ParagraphComment 0x55b64bf4ed40 <line:112:3>
|   | `-TextComment 0x55b64bf4ed10 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf4ed60 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x55b64bf4edc0 <col:10, col:64>
|   |   `-TextComment 0x55b64bf4ed90 <col:10, col:64> Text=" Return the lower part of the current system tick count"
|   |-ParagraphComment 0x55b64bf4ee10 <line:114:3>
|   | `-TextComment 0x55b64bf4ede0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf4ee30 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x55b64bf4ee90 <col:11, col:40>
|   |   `-TextComment 0x55b64bf4ee60 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x55b64bf4eee0 <line:116:1>
|     `-TextComment 0x55b64bf4eeb0 <col:1> Text=" "
|-FunctionDecl 0x55b64be940d0 <line:126:1, col:22> col:7 z_tick_get 's64_t (void)'
| `-FullComment 0x55b64bf4f1c0 <line:121:3, line:125:1>
|   |-ParagraphComment 0x55b64bf4efd0 <line:121:3>
|   | `-TextComment 0x55b64bf4efa0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf4eff0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55b64bf4f050 <col:10, col:46>
|   |   `-TextComment 0x55b64bf4f020 <col:10, col:46> Text=" Return the current system tick count"
|   |-ParagraphComment 0x55b64bf4f0a0 <line:123:3>
|   | `-TextComment 0x55b64bf4f070 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf4f0c0 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x55b64bf4f120 <col:11, col:40>
|   |   `-TextComment 0x55b64bf4f0f0 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x55b64bf4f170 <line:125:1>
|     `-TextComment 0x55b64bf4f140 <col:1> Text=" "
|-RecordDecl 0x55b64be94170 <line:135:1, col:8> col:8 struct _timeout
|-TypedefDecl 0x55b64be94470 <line:136:1, col:51> col:16 referenced _timeout_func_t 'void (*)(struct _timeout *)'
| `-PointerType 0x55b64be94410 'void (*)(struct _timeout *)'
|   `-ParenType 0x55b64be943b0 'void (struct _timeout *)' sugar
|     `-FunctionProtoType 0x55b64be94370 'void (struct _timeout *)' cdecl
|       |-BuiltinType 0x55b64bd0f6f0 'void'
|       `-PointerType 0x55b64be94280 'struct _timeout *'
|         `-ElaboratedType 0x55b64be94220 'struct _timeout' sugar
|           `-RecordType 0x55b64be94200 'struct _timeout'
|             `-Record 0x55b64be944c8 '_timeout'
|-RecordDecl 0x55b64be944c8 prev 0x55b64be94170 <line:138:1, line:142:1> line:138:8 struct _timeout definition
| |-FieldDecl 0x55b64be94560 <line:139:2, col:14> col:14 node 'sys_dnode_t':'struct _dnode'
| |-FieldDecl 0x55b64be945e0 <line:140:2, col:8> col:8 dticks 's32_t':'int'
| `-FieldDecl 0x55b64be94660 <line:141:2, col:18> col:18 fn '_timeout_func_t':'void (*)(struct _timeout *)'
|-RecordDecl 0x55b64be946a8 </vagrant/ext/zephyros/zephyr/include/spinlock.h:25:1, line:27:1> line:25:8 struct k_spinlock_key definition
| `-FieldDecl 0x55b64be94768 <line:26:2, col:6> col:6 referenced key 'int'
|-TypedefDecl 0x55b64be94800 <line:29:1, col:31> col:31 referenced k_spinlock_key_t 'struct k_spinlock_key':'struct k_spinlock_key'
| `-ElaboratedType 0x55b64be947b0 'struct k_spinlock_key' sugar
|   `-RecordType 0x55b64be94730 'struct k_spinlock_key'
|     `-Record 0x55b64be946a8 'k_spinlock_key'
|-RecordDecl 0x55b64be94858 <line:31:1, line:60:1> line:31:8 struct k_spinlock definition
|-FunctionDecl 0x55b64be94ad0 <line:62:1, line:86:1> line:62:39 k_spin_lock 'k_spinlock_key_t (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x55b64be949d0 <col:51, col:70> col:70 used l 'struct k_spinlock *'
| |-CompoundStmt 0x55b64be94ee8 <line:63:1, line:86:1>
| | |-CStyleCastExpr 0x55b64be94c60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55b64be94c48 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x55b64be94c28 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x55b64be94bc0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:64:13> 'struct k_spinlock *' lvalue ParmVar 0x55b64be949d0 'l' 'struct k_spinlock *'
| | |-DeclStmt 0x55b64be94cf8 <line:65:2, col:20>
| | | `-VarDecl 0x55b64be94c98 <col:2, col:19> col:19 used k 'k_spinlock_key_t':'struct k_spinlock_key'
| | |-BinaryOperator 0x55b64be94e20 <line:71:2, col:24> 'int' '='
| | | |-MemberExpr 0x55b64be94d38 <col:2, col:4> 'int' lvalue .key 0x55b64be94768
| | | | `-DeclRefExpr 0x55b64be94d10 <col:2> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x55b64be94c98 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| | | `-ImplicitCastExpr 0x55b64be94e08 <col:10, col:24> 'int' <IntegralCast>
| | |   `-CallExpr 0x55b64be94de0 <col:10, col:24> 'unsigned int'
| | |     `-ImplicitCastExpr 0x55b64be94dc8 <col:10> 'unsigned int (*)(void)' <FunctionToPointerDecay>
| | |       `-DeclRefExpr 0x55b64be94d70 <col:10> 'unsigned int (void)' Function 0x55b64be6ec40 'arch_irq_lock' 'unsigned int (void)'
| | `-ReturnStmt 0x55b64be94ed0 <line:85:2, col:9>
| |   `-ImplicitCastExpr 0x55b64be94eb8 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' <LValueToRValue>
| |     `-DeclRefExpr 0x55b64be94e90 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x55b64be94c98 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x55b64be94b78 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x55b64be96e60 </vagrant/ext/zephyros/zephyr/include/spinlock.h:88:1, line:107:1> line:88:27 k_spin_unlock 'void (struct k_spinlock *, k_spinlock_key_t)' static inline
| |-ParmVarDecl 0x55b64be94f40 <col:41, col:60> col:60 used l 'struct k_spinlock *'
| |-ParmVarDecl 0x55b64be96d50 <line:89:6, col:23> col:23 used key 'k_spinlock_key_t':'struct k_spinlock_key'
| |-CompoundStmt 0x55b64be97150 <line:90:1, line:107:1>
| | |-CStyleCastExpr 0x55b64be96ff8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55b64be96fe0 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x55b64be96fc0 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x55b64be96f58 </vagrant/ext/zephyros/zephyr/include/spinlock.h:91:13> 'struct k_spinlock *' lvalue ParmVar 0x55b64be94f40 'l' 'struct k_spinlock *'
| | `-CallExpr 0x55b64be970f0 <line:106:2, col:25> 'void'
| |   |-ImplicitCastExpr 0x55b64be970d8 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x55b64be97020 <col:2> 'void (unsigned int)' Function 0x55b64be6eda8 'arch_irq_unlock' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x55b64be97138 <col:18, col:22> 'unsigned int' <IntegralCast>
| |     `-ImplicitCastExpr 0x55b64be97120 <col:18, col:22> 'int' <LValueToRValue>
| |       `-MemberExpr 0x55b64be97070 <col:18, col:22> 'int' lvalue .key 0x55b64be94768
| |         `-DeclRefExpr 0x55b64be97048 <col:18> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue ParmVar 0x55b64be96d50 'key' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x55b64be96f10 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x55b64be972a0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:112:1, line:121:1> line:112:27 k_spin_release 'void (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x55b64be97198 <col:42, col:61> col:61 used l 'struct k_spinlock *'
| |-CompoundStmt 0x55b64be974b8 <line:113:1, line:121:1>
| | `-CStyleCastExpr 0x55b64be97430 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55b64be97418 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| |     `-ParenExpr 0x55b64be973f8 <col:29, col:31> 'struct k_spinlock *' lvalue
| |       `-DeclRefExpr 0x55b64be97390 </vagrant/ext/zephyros/zephyr/include/spinlock.h:114:13> 'struct k_spinlock *' lvalue ParmVar 0x55b64be97198 'l' 'struct k_spinlock *'
| `-AlwaysInlineAttr 0x55b64be97348 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-EnumDecl 0x55b64be974d0 </vagrant/ext/zephyros/zephyr/include/fatal.h:23:1, line:42:1> line:23:6 k_fatal_error_reason
| |-FullComment 0x55b64bf4f420 <line:18:3, line:20:5>
| | |-ParagraphComment 0x55b64bf4f260 <line:18:3>
| | | `-TextComment 0x55b64bf4f230 <col:3> Text=" "
| | |-VerbatimLineComment 0x55b64bf4f280 <col:4, col:41> Text=" fatal_apis Fatal error APIs"
| | |-ParagraphComment 0x55b64bf4f2f0 <line:19:3>
| | | `-TextComment 0x55b64bf4f2c0 <col:3> Text=" "
| | |-VerbatimLineComment 0x55b64bf4f310 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x55b64bf4f3d0 <line:20:3, col:5>
| |   |-TextComment 0x55b64bf4f350 <col:3> Text=" "
| |   |-TextComment 0x55b64bf4f370 <col:4> Text="@"
| |   `-TextComment 0x55b64bf4f390 <col:5> Text="{"
| |-EnumConstantDecl 0x55b64be975b8 <line:25:2> col:2 K_ERR_CPU_EXCEPTION 'int'
| | `-FullComment 0x55b64bf24380 <line:24:5, col:55>
| |   `-ParagraphComment 0x55b64bf24350 <col:5, col:55>
| |     `-TextComment 0x55b64bf24320 <col:5, col:55> Text=" Generic CPU exception, not covered by other codes "
| |-EnumConstantDecl 0x55b64be97628 <line:28:2> col:2 K_ERR_SPURIOUS_IRQ 'int'
| | `-FullComment 0x55b64bf24450 <line:27:5, col:34>
| |   `-ParagraphComment 0x55b64bf24420 <col:5, col:34>
| |     `-TextComment 0x55b64bf243f0 <col:5, col:34> Text=" Unhandled hardware interrupt "
| |-EnumConstantDecl 0x55b64be97698 <line:31:2> col:2 K_ERR_STACK_CHK_FAIL 'int'
| | `-FullComment 0x55b64bf24520 <line:30:5, col:50>
| |   `-ParagraphComment 0x55b64bf244f0 <col:5, col:50>
| |     `-TextComment 0x55b64bf244c0 <col:5, col:50> Text=" Faulting context overflowed its stack buffer "
| |-EnumConstantDecl 0x55b64be97708 <line:34:2> col:2 K_ERR_KERNEL_OOPS 'int'
| | `-FullComment 0x55b64bf245f0 <line:33:5, col:38>
| |   `-ParagraphComment 0x55b64bf245c0 <col:5, col:38>
| |     `-TextComment 0x55b64bf24590 <col:5, col:38> Text=" Moderate severity software error "
| `-EnumConstantDecl 0x55b64be97778 <line:37:2> col:2 K_ERR_KERNEL_PANIC 'int'
|   `-FullComment 0x55b64bf246c0 <line:36:5, col:34>
|     `-ParagraphComment 0x55b64bf24690 <col:5, col:34>
|       `-TextComment 0x55b64bf24660 <col:5, col:34> Text=" High severity software error "
|-FunctionDecl 0x55b64be978c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:86:26, /vagrant/ext/zephyros/zephyr/include/fatal.h:52:52> col:20 k_fatal_halt 'void (unsigned int) __attribute__((noreturn))'
| |-ParmVarDecl 0x55b64be97800 <col:33, col:46> col:46 reason 'unsigned int'
| `-FullComment 0x55b64bf249a0 <line:45:3, line:50:44>
|   |-ParagraphComment 0x55b64bf24760 <line:45:3>
|   | `-TextComment 0x55b64bf24730 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf24780 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55b64bf247e0 <col:10, col:42>
|   |   `-TextComment 0x55b64bf247b0 <col:10, col:42> Text=" Halt the system on a fatal error"
|   |-ParagraphComment 0x55b64bf24850 <line:47:3, line:48:76>
|   | |-TextComment 0x55b64bf24800 <line:47:3, col:72> Text=" Invokes architecture-specific code to power off or halt the system in"
|   | `-TextComment 0x55b64bf24820 <line:48:3, col:76> Text=" a low power state. Lacking that, lock interrupts and sit in an idle loop."
|   |-ParagraphComment 0x55b64bf248a0 <line:50:3>
|   | `-TextComment 0x55b64bf24870 <col:3> Text=" "
|   `-ParamCommandComment 0x55b64bf248c0 <col:4, col:44> [in] implicitly Param="reason" ParamIndex=0
|     `-ParagraphComment 0x55b64bf24950 <col:17, col:44>
|       `-TextComment 0x55b64bf24920 <col:17, col:44> Text=" Fatal exception reason code"
|-FunctionDecl 0x55b64be97b00 <line:83:1, col:76> col:6 invalid k_sys_fatal_error_handler 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x55b64be979b0 <col:32, col:45> col:45 reason 'unsigned int'
| |-ParmVarDecl 0x55b64be97a28 <col:53, col:73> col:73 invalid esf 'const int *'
| `-FullComment 0x55b64bf25080 <line:55:3, line:81:71>
|   |-ParagraphComment 0x55b64bf24a40 <line:55:3>
|   | `-TextComment 0x55b64bf24a10 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf24a60 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55b64bf24ac0 <col:10, col:36>
|   |   `-TextComment 0x55b64bf24a90 <col:10, col:36> Text=" Fatal error policy handler"
|   |-ParagraphComment 0x55b64bf24b30 <line:57:3, line:58:67>
|   | |-TextComment 0x55b64bf24ae0 <line:57:3, col:73> Text=" This function is not invoked by application code, but is declared as a"
|   | `-TextComment 0x55b64bf24b00 <line:58:3, col:67> Text=" weak symbol so that applications may introduce their own policy."
|   |-ParagraphComment 0x55b64bf24bd0 <line:60:3, line:62:71>
|   | |-TextComment 0x55b64bf24b50 <line:60:3, col:63> Text=" The default implementation of this function halts the system"
|   | |-TextComment 0x55b64bf24b70 <line:61:3, col:66> Text=" unconditionally. Depending on architecture support, this may be"
|   | `-TextComment 0x55b64bf24b90 <line:62:3, col:71> Text=" a simple infinite loop, power off the hardware, or exit an emulator."
|   |-ParagraphComment 0x55b64bf24c40 <line:64:3, line:65:11>
|   | |-TextComment 0x55b64bf24bf0 <line:64:3, col:72> Text=" If this function returns, then the currently executing thread will be"
|   | `-TextComment 0x55b64bf24c10 <line:65:3, col:11> Text=" aborted."
|   |-ParagraphComment 0x55b64bf24c90 <line:67:3, col:42>
|   | `-TextComment 0x55b64bf24c60 <col:3, col:42> Text=" A few notes for custom implementations:"
|   |-ParagraphComment 0x55b64bf24e20 <line:69:3, line:77:23>
|   | |-TextComment 0x55b64bf24cb0 <line:69:3, col:74> Text=" - If the error is determined to be unrecoverable, LOG_PANIC() should be"
|   | |-TextComment 0x55b64bf24cd0 <line:70:3, col:50> Text="   invoked to flush any pending logging buffers."
|   | |-TextComment 0x55b64bf24cf0 <line:71:3, col:76> Text=" - K_ERR_KERNEL_PANIC indicates a severe unrecoverable error in the kernel"
|   | |-TextComment 0x55b64bf24d10 <line:72:3, col:76> Text="   itself, and should not be considered recoverable. There is an assertion"
|   | |-TextComment 0x55b64bf24d30 <line:73:3, col:40> Text="   in z_fatal_error() to enforce this."
|   | |-TextComment 0x55b64bf24d50 <line:74:3, col:76> Text=" - Even outside of a kernel panic, unless the fault occurred in user mode,"
|   | |-TextComment 0x55b64bf24d70 <line:75:3, col:73> Text="   the kernel itself may be in an inconsistent state, with API calls to"
|   | |-TextComment 0x55b64bf24d90 <line:76:3, col:72> Text="   kernel objects possibly exhibiting undefined behavior or triggering"
|   | `-TextComment 0x55b64bf24db0 <line:77:3, col:23> Text="   another exception."
|   |-ParagraphComment 0x55b64bf24e70 <line:79:3>
|   | `-TextComment 0x55b64bf24e40 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf24e90 <col:4, line:80:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf24f40 <line:79:17, line:80:3>
|   |   |-TextComment 0x55b64bf24ef0 <line:79:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x55b64bf24f10 <line:80:3> Text=" "
|   `-ParamCommandComment 0x55b64bf24f60 <col:4, line:81:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x55b64bf25010 <line:80:14, line:81:71>
|       |-TextComment 0x55b64bf24fc0 <line:80:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x55b64bf24fe0 <line:81:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x55b64be989f0 <line:99:1, col:64> col:6 invalid z_fatal_error 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x55b64be97bf0 <col:20, col:33> col:33 reason 'unsigned int'
| |-ParmVarDecl 0x55b64be97c68 <col:41, col:61> col:61 invalid esf 'const int *'
| `-FullComment 0x55b64bf25470 <line:86:3, line:97:71>
|   |-ParagraphComment 0x55b64bf25120 <line:86:3, col:50>
|   | `-TextComment 0x55b64bf250f0 <col:3, col:50> Text=" Called by architecture code upon a fatal error."
|   |-ParagraphComment 0x55b64bf251c0 <line:88:3, line:90:31>
|   | |-TextComment 0x55b64bf25140 <line:88:3, col:76> Text=" This function dumps out architecture-agnostic information about the error"
|   | |-TextComment 0x55b64bf25160 <line:89:3, col:61> Text=" and then makes a policy decision on what to do by invoking"
|   | `-TextComment 0x55b64bf25180 <line:90:3, col:31> Text=" k_sys_fatal_error_handler()."
|   |-ParagraphComment 0x55b64bf25230 <line:92:3, line:93:24>
|   | |-TextComment 0x55b64bf251e0 <line:92:3, col:71> Text=" On architectures where k_thread_abort() never returns, this function"
|   | `-TextComment 0x55b64bf25200 <line:93:3, col:24> Text=" never returns either."
|   |-ParagraphComment 0x55b64bf25280 <line:95:3>
|   | `-TextComment 0x55b64bf25250 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf252a0 <col:4, line:96:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf25350 <line:95:17, line:96:3>
|   |   |-TextComment 0x55b64bf25300 <line:95:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x55b64bf25320 <line:96:3> Text=" "
|   `-ParamCommandComment 0x55b64bf25370 <col:4, line:97:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x55b64bf25420 <line:96:14, line:97:71>
|       |-TextComment 0x55b64bf253d0 <line:96:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x55b64bf253f0 <line:97:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x55b64be98ec0 </vagrant/ext/zephyros/zephyr/include/irq.h:66:1, line:73:1> line:67:1 irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' static inline
| |-ParmVarDecl 0x55b64be98ba0 <col:21, col:34> col:34 used irq 'unsigned int'
| |-ParmVarDecl 0x55b64be98c18 <col:39, col:52> col:52 used priority 'unsigned int'
| |-ParmVarDecl 0x55b64be98d28 <line:68:7, col:38> col:14 used routine 'void (*)(void *)'
| |-ParmVarDecl 0x55b64be98da0 <col:41, col:47> col:47 used parameter 'void *'
| |-ParmVarDecl 0x55b64be98e10 <line:69:7, col:13> col:13 used flags 'u32_t':'unsigned int'
| |-CompoundStmt 0x55b64be99408 <line:70:1, line:73:1>
| | `-ReturnStmt 0x55b64be991b8 <line:71:2, line:72:11>
| |   `-CallExpr 0x55b64be990f0 <line:71:9, line:72:11> 'int'
| |     |-ImplicitCastExpr 0x55b64be990d8 <line:71:9> 'int (*)(unsigned int, unsigned int, void (*)(void *), void *, u32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64be98f88 <col:9> 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' Function 0x55b64be6f8f8 'arch_irq_connect_dynamic' 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |     |-ImplicitCastExpr 0x55b64be99140 <col:34> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be98fb0 <col:34> 'unsigned int' lvalue ParmVar 0x55b64be98ba0 'irq' 'unsigned int'
| |     |-ImplicitCastExpr 0x55b64be99158 <col:39> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be98fd8 <col:39> 'unsigned int' lvalue ParmVar 0x55b64be98c18 'priority' 'unsigned int'
| |     |-ImplicitCastExpr 0x55b64be99170 <col:49> 'void (*)(void *)' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be99000 <col:49> 'void (*)(void *)' lvalue ParmVar 0x55b64be98d28 'routine' 'void (*)(void *)'
| |     |-ImplicitCastExpr 0x55b64be99188 <col:58> 'void *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64be99028 <col:58> 'void *' lvalue ParmVar 0x55b64be98da0 'parameter' 'void *'
| |     `-ImplicitCastExpr 0x55b64be991a0 <line:72:6> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-DeclRefExpr 0x55b64be99050 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64be98e10 'flags' 'u32_t':'unsigned int'
| `-FullComment 0x55b64bf25ae0 <line:54:3, line:64:48>
|   |-ParagraphComment 0x55b64bf25510 <line:54:3, col:33>
|   | `-TextComment 0x55b64bf254e0 <col:3, col:33> Text=" Configure a dynamic interrupt."
|   |-ParagraphComment 0x55b64bf25560 <line:56:3, col:80>
|   | `-TextComment 0x55b64bf25530 <col:3, col:80> Text=" Use this instead of IRQ_CONNECT() if arguments cannot be known at build time."
|   |-ParagraphComment 0x55b64bf255b0 <line:58:3>
|   | `-TextComment 0x55b64bf25580 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf255d0 <col:4, line:59:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf25680 <line:58:14, line:59:3>
|   |   |-TextComment 0x55b64bf25630 <line:58:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x55b64bf25650 <line:59:3> Text=" "
|   |-ParamCommandComment 0x55b64bf256a0 <col:4, line:60:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf25750 <line:59:19, line:60:3>
|   |   |-TextComment 0x55b64bf25700 <line:59:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x55b64bf25720 <line:60:3> Text=" "
|   |-ParamCommandComment 0x55b64bf25770 <col:4, line:61:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf25820 <line:60:18, line:61:3>
|   |   |-TextComment 0x55b64bf257d0 <line:60:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x55b64bf257f0 <line:61:3> Text=" "
|   |-ParamCommandComment 0x55b64bf25840 <col:4, line:62:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf258f0 <line:61:20, line:62:3>
|   |   |-TextComment 0x55b64bf258a0 <line:61:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x55b64bf258c0 <line:62:3> Text=" "
|   |-ParamCommandComment 0x55b64bf25910 <col:4, col:53> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x55b64bf259a0 <col:16, col:53>
|   |   `-TextComment 0x55b64bf25970 <col:16, col:53> Text=" Arch-specific IRQ configuration flags"
|   |-ParagraphComment 0x55b64bf259f0 <line:64:3>
|   | `-TextComment 0x55b64bf259c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf25a10 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x55b64bf25a70 <col:11, col:48>
|       `-TextComment 0x55b64bf25a40 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x55b64be994e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/sys/errno_private.h:28:28> col:16 z_errno 'int *(void)' static inline
| `-FullComment 0x55b64bf25d00 <line:21:3, line:26:59>
|   |-ParagraphComment 0x55b64bf25b80 <line:21:3, col:57>
|   | `-TextComment 0x55b64bf25b50 <col:3, col:57> Text=" return a pointer to a memory location containing errno"
|   |-ParagraphComment 0x55b64bf25bf0 <line:23:3, line:24:52>
|   | |-TextComment 0x55b64bf25ba0 <line:23:3, col:69> Text=" errno is thread-specific, and can't just be a global. This pointer"
|   | `-TextComment 0x55b64bf25bc0 <line:24:3, col:52> Text=" is guaranteed to be read/writable from user mode."
|   |-ParagraphComment 0x55b64bf25c40 <line:26:3>
|   | `-TextComment 0x55b64bf25c10 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf25c60 <col:4, col:59> Name="return"
|     `-ParagraphComment 0x55b64bf25cc0 <col:11, col:59>
|       `-TextComment 0x55b64bf25c90 <col:11, col:59> Text=" Memory location of errno data for current thread"
|-FunctionDecl 0x55b64be995e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:24:1, col:29> col:14 used z_impl_z_errno 'int *()' extern
|-FunctionDecl 0x55b64be996a8 prev 0x55b64be994e8 <line:25:1, line:34:1> line:25:21 z_errno 'int *(void)' static inline
| `-CompoundStmt 0x55b64be99998 <line:26:1, line:34:1>
|   |-DoStmt 0x55b64be998a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64be99868 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64be99818 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64be99880 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64be99958 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:33:2, col:24>
|     `-CallExpr 0x55b64be99930 <col:9, col:24> 'int *'
|       `-ImplicitCastExpr 0x55b64be99918 <col:9> 'int *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55b64be998c0 <col:9> 'int *()' Function 0x55b64be995e0 'z_impl_z_errno' 'int *()'
|-RecordDecl 0x55b64bea6ba0 </vagrant/ext/zephyros/zephyr/include/kernel.h:91:9, line:93:1> line:91:9 struct definition
| `-FieldDecl 0x55b64bea6c60 <line:92:2, col:14> col:14 waitq 'sys_dlist_t':'struct _dnode'
|-TypedefDecl 0x55b64bea6d00 <line:91:1, line:93:3> col:3 referenced _wait_q_t 'struct _wait_q_t':'_wait_q_t'
| `-ElaboratedType 0x55b64bea6cb0 'struct _wait_q_t' sugar
|   `-RecordType 0x55b64bea6c30 '_wait_q_t'
|     `-Record 0x55b64bea6ba0 ''
|-RecordDecl 0x55b64bea6d70 prev 0x55b64be4bb40 <line:120:1, col:8> col:8 struct k_thread
|-RecordDecl 0x55b64bea6df8 <line:121:1, col:8> col:8 struct k_mutex
|-RecordDecl 0x55b64bea6ea0 <line:122:1, col:8> col:8 struct k_sem
|-RecordDecl 0x55b64bea6f50 <line:123:1, col:8> col:8 struct k_msgq
|-RecordDecl 0x55b64bea7000 <line:124:1, col:8> col:8 struct k_mbox
|-RecordDecl 0x55b64bea70b0 <line:125:1, col:8> col:8 struct k_pipe
|-RecordDecl 0x55b64bea7160 <line:126:1, col:8> col:8 struct k_queue
|-RecordDecl 0x55b64bea7210 <line:127:1, col:8> col:8 struct k_fifo
|-RecordDecl 0x55b64bea72c0 <line:128:1, col:8> col:8 struct k_lifo
|-RecordDecl 0x55b64bea7370 <line:129:1, col:8> col:8 struct k_stack
|-RecordDecl 0x55b64bea7420 <line:130:1, col:8> col:8 struct k_mem_slab
|-RecordDecl 0x55b64bea74d0 <line:131:1, col:8> col:8 struct k_mem_pool
|-RecordDecl 0x55b64bea7580 <line:132:1, col:8> col:8 struct k_timer
|-RecordDecl 0x55b64bea7630 <line:133:1, col:8> col:8 struct k_poll_event
|-RecordDecl 0x55b64bea76e0 <line:134:1, col:8> col:8 struct k_poll_signal
|-RecordDecl 0x55b64bea7790 prev 0x55b64be4bbc8 <line:135:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x55b64bea7818 <line:136:1, col:8> col:8 struct k_mem_partition
|-RecordDecl 0x55b64bea78c0 <line:137:1, col:8> col:8 struct k_futex
|-EnumDecl 0x55b64bea7998 <line:146:1, line:160:1> line:146:6 k_objects
| |-FullComment 0x55b64bf25f00 <line:140:3, line:144:33>
| | |-ParagraphComment 0x55b64bf25da0 <line:140:3>
| | | `-TextComment 0x55b64bf25d70 <col:3> Text=" "
| | |-BlockCommandComment 0x55b64bf25dc0 <col:4, col:29> Name="brief"
| | | `-ParagraphComment 0x55b64bf25e20 <col:10, col:29>
| | |   `-TextComment 0x55b64bf25df0 <col:10, col:29> Text=" Kernel Object Types"
| | `-ParagraphComment 0x55b64bf25ec0 <line:142:3, line:144:33>
| |   |-TextComment 0x55b64bf25e40 <line:142:3, col:77> Text=" This enumeration needs to be kept in sync with the lists of kernel objects"
| |   |-TextComment 0x55b64bf25e60 <line:143:3, col:79> Text=" and subsystems in scripts/gen_kobject_list.py, as well as the otype_to_str()"
| |   `-TextComment 0x55b64bf25e80 <line:144:3, col:33> Text=" function in kernel/userspace.c"
| |-EnumConstantDecl 0x55b64bea7a50 <line:147:2> col:2 K_OBJ_ANY 'int'
| |-EnumConstantDecl 0x55b64bea7ac8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/kobj-types-enum.h:2:1> col:1 K_OBJ_MEM_SLAB 'int'
| |-EnumConstantDecl 0x55b64bea7b10 <line:3:1> col:1 K_OBJ_MSGQ 'int'
| |-EnumConstantDecl 0x55b64bea7b58 <line:4:1> col:1 K_OBJ_MUTEX 'int'
| |-EnumConstantDecl 0x55b64bea9e80 <line:5:1> col:1 K_OBJ_PIPE 'int'
| |-EnumConstantDecl 0x55b64bea9ec8 <line:6:1> col:1 K_OBJ_QUEUE 'int'
| |-EnumConstantDecl 0x55b64bea9f10 <line:7:1> col:1 K_OBJ_POLL_SIGNAL 'int'
| |-EnumConstantDecl 0x55b64bea9f58 <line:8:1> col:1 K_OBJ_SEM 'int'
| |-EnumConstantDecl 0x55b64bea9fa0 <line:9:1> col:1 K_OBJ_STACK 'int'
| |-EnumConstantDecl 0x55b64bea9fe8 <line:10:1> col:1 K_OBJ_THREAD 'int'
| |-EnumConstantDecl 0x55b64beaa030 <line:11:1> col:1 K_OBJ_TIMER 'int'
| |-EnumConstantDecl 0x55b64beaa078 <line:12:1> col:1 K_OBJ__THREAD_STACK_ELEMENT 'int'
| |-EnumConstantDecl 0x55b64beaa0c0 <line:13:1> col:1 K_OBJ_SYS_MUTEX 'int'
| |-EnumConstantDecl 0x55b64beaa108 <line:14:1> col:1 K_OBJ_FUTEX 'int'
| |-EnumConstantDecl 0x55b64beaa150 <line:16:1> col:1 K_OBJ_DRIVER_ADC 'int'
| |-EnumConstantDecl 0x55b64beaa198 <line:17:1> col:1 K_OBJ_DRIVER_AIO_CMP 'int'
| |-EnumConstantDecl 0x55b64beaa1e0 <line:18:1> col:1 K_OBJ_DRIVER_COUNTER 'int'
| |-EnumConstantDecl 0x55b64beaa228 <line:19:1> col:1 K_OBJ_DRIVER_CRYPTO 'int'
| |-EnumConstantDecl 0x55b64beaa270 <line:20:1> col:1 K_OBJ_DRIVER_DMA 'int'
| |-EnumConstantDecl 0x55b64beaa2b8 <line:21:1> col:1 K_OBJ_DRIVER_FLASH 'int'
| |-EnumConstantDecl 0x55b64beaa300 <line:22:1> col:1 K_OBJ_DRIVER_GPIO 'int'
| |-EnumConstantDecl 0x55b64beaa348 <line:23:1> col:1 K_OBJ_DRIVER_I2C 'int'
| |-EnumConstantDecl 0x55b64beaa390 <line:24:1> col:1 K_OBJ_DRIVER_I2S 'int'
| |-EnumConstantDecl 0x55b64beaa3d8 <line:25:1> col:1 K_OBJ_DRIVER_IPM 'int'
| |-EnumConstantDecl 0x55b64beaa420 <line:26:1> col:1 K_OBJ_DRIVER_LED 'int'
| |-EnumConstantDecl 0x55b64beaa468 <line:27:1> col:1 K_OBJ_DRIVER_PINMUX 'int'
| |-EnumConstantDecl 0x55b64beaa4b0 <line:28:1> col:1 K_OBJ_DRIVER_PWM 'int'
| |-EnumConstantDecl 0x55b64beaa4f8 <line:29:1> col:1 K_OBJ_DRIVER_ENTROPY 'int'
| |-EnumConstantDecl 0x55b64beaa540 <line:30:1> col:1 K_OBJ_DRIVER_SENSOR 'int'
| |-EnumConstantDecl 0x55b64beaa588 <line:31:1> col:1 K_OBJ_DRIVER_SPI 'int'
| |-EnumConstantDecl 0x55b64beaa5d0 <line:32:1> col:1 K_OBJ_DRIVER_UART 'int'
| |-EnumConstantDecl 0x55b64beaa618 <line:33:1> col:1 K_OBJ_DRIVER_CAN 'int'
| |-EnumConstantDecl 0x55b64beaa660 <line:34:1> col:1 K_OBJ_DRIVER_PTP_CLOCK 'int'
| |-EnumConstantDecl 0x55b64beaa6a8 <line:35:1> col:1 K_OBJ_DRIVER_EEPROM 'int'
| |-EnumConstantDecl 0x55b64beaa6f0 <line:36:1> col:1 K_OBJ_DRIVER_WDT 'int'
| |-EnumConstantDecl 0x55b64beaa738 <line:37:1> col:1 K_OBJ_DRIVER_SAMPLE 'int'
| `-EnumConstantDecl 0x55b64beaa7a8 </vagrant/ext/zephyros/zephyr/include/kernel.h:159:2> col:2 K_OBJ_LAST 'int'
|   `-FullComment 0x55b64bf26020 <line:156:5, col:13>
|     `-ParagraphComment 0x55b64bf25ff0 <col:5, col:13>
|       |-TextComment 0x55b64bf25f70 <col:5> Text=" "
|       `-InlineCommandComment 0x55b64bf25fc0 <col:6, col:13> Name="endcond" RenderNormal
|-FunctionDecl 0x55b64beaa8e8 <line:229:1, line:232:1> line:229:20 z_object_init 'void (void *)' static inline
| |-ParmVarDecl 0x55b64beaa860 <col:34, col:40> col:40 used obj 'void *'
| |-CompoundStmt 0x55b64beaaa88 <line:230:1, line:232:1>
| | `-CStyleCastExpr 0x55b64beaaa30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55b64beaaa18 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x55b64beaa9f8 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x55b64beaa990 </vagrant/ext/zephyros/zephyr/include/kernel.h:231:13> 'void *' lvalue ParmVar 0x55b64beaa860 'obj' 'void *'
| `-FullComment 0x55b64bf26140 <line:227:3, col:12>
|   `-ParagraphComment 0x55b64bf26110 <col:3, col:12>
|     |-TextComment 0x55b64bf26090 <col:3> Text=" "
|     `-InlineCommandComment 0x55b64bf260e0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55b64beaac50 <line:237:1, line:242:1> line:237:20 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x55b64beaaab8 <col:49, col:55> col:55 used object 'void *'
| |-ParmVarDecl 0x55b64beaab40 <line:238:13, col:30> col:30 used thread 'struct k_thread *'
| |-CompoundStmt 0x55b64beac3f8 <line:239:1, line:242:1>
| | |-CStyleCastExpr 0x55b64beaada0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55b64beaad88 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x55b64beaad68 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x55b64beaad00 </vagrant/ext/zephyros/zephyr/include/kernel.h:240:13> 'void *' lvalue ParmVar 0x55b64beaaab8 'object' 'void *'
| | `-CStyleCastExpr 0x55b64beac3a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55b64beaae50 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x55b64beaae30 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x55b64beaadc8 </vagrant/ext/zephyros/zephyr/include/kernel.h:241:13> 'struct k_thread *' lvalue ParmVar 0x55b64beaab40 'thread' 'struct k_thread *'
| `-FullComment 0x55b64bf26230 <line:235:3, col:12>
|   `-ParagraphComment 0x55b64bf26200 <col:3, col:12>
|     |-TextComment 0x55b64bf261b0 <col:3> Text=" "
|     `-InlineCommandComment 0x55b64bf261d0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55b64beac548 <line:247:1, line:252:1> line:247:20 k_object_access_revoke 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x55b64beac430 <col:43, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x55b64beac4b8 <line:248:8, col:25> col:25 used thread 'struct k_thread *'
| |-CompoundStmt 0x55b64beac7b8 <line:249:1, line:252:1>
| | |-CStyleCastExpr 0x55b64beac698 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55b64beac680 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x55b64beac660 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x55b64beac5f8 </vagrant/ext/zephyros/zephyr/include/kernel.h:250:13> 'void *' lvalue ParmVar 0x55b64beac430 'object' 'void *'
| | `-CStyleCastExpr 0x55b64beac760 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55b64beac748 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x55b64beac728 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x55b64beac6c0 </vagrant/ext/zephyros/zephyr/include/kernel.h:251:13> 'struct k_thread *' lvalue ParmVar 0x55b64beac4b8 'thread' 'struct k_thread *'
| `-FullComment 0x55b64bf544d0 <line:245:3, col:12>
|   `-ParagraphComment 0x55b64bf544a0 <col:3, col:12>
|     |-TextComment 0x55b64bf262a0 <col:3> Text=" "
|     `-InlineCommandComment 0x55b64bf262c0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55b64beac878 <line:257:1, line:260:1> line:257:20 used z_impl_k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x55b64beac7f0 <col:44, col:50> col:50 used object 'void *'
| |-CompoundStmt 0x55b64beac9e8 <line:258:1, line:260:1>
| | `-CStyleCastExpr 0x55b64beac9c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55b64beac9a8 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x55b64beac988 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x55b64beac920 </vagrant/ext/zephyros/zephyr/include/kernel.h:259:13> 'void *' lvalue ParmVar 0x55b64beac7f0 'object' 'void *'
| `-FullComment 0x55b64bf545c0 <line:255:3, col:12>
|   `-ParagraphComment 0x55b64bf54590 <col:3, col:12>
|     |-TextComment 0x55b64bf54540 <col:3> Text=" "
|     `-InlineCommandComment 0x55b64bf54560 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55b64beacaa0 <line:262:1, line:265:1> line:262:20 k_object_access_all_grant 'void (void *)' static inline
| |-ParmVarDecl 0x55b64beaca18 <col:46, col:52> col:52 used object 'void *'
| `-CompoundStmt 0x55b64beacc38 <line:263:1, line:265:1>
|   `-CStyleCastExpr 0x55b64beacbe8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|     `-ImplicitCastExpr 0x55b64beacbd0 <col:29, col:31> 'void *' <LValueToRValue>
|       `-ParenExpr 0x55b64beacbb0 <col:29, col:31> 'void *' lvalue
|         `-DeclRefExpr 0x55b64beacb48 </vagrant/ext/zephyros/zephyr/include/kernel.h:264:13> 'void *' lvalue ParmVar 0x55b64beaca18 'object' 'void *'
|-FunctionDecl 0x55b64beacd80 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:279:75> col:16 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x55b64beacc68 <col:38, col:44> col:44 object 'void *'
| |-ParmVarDecl 0x55b64beaccf0 <col:52, col:69> col:69 thread 'struct k_thread *'
| `-FullComment 0x55b64bf54920 <line:270:3, line:277:53>
|   |-ParagraphComment 0x55b64bf54660 <line:270:3, col:43>
|   | `-TextComment 0x55b64bf54630 <col:3, col:43> Text=" Grant a thread access to a kernel object"
|   |-ParagraphComment 0x55b64bf54700 <line:272:3, line:274:67>
|   | |-TextComment 0x55b64bf54680 <line:272:3, col:72> Text=" The thread will be granted access to the object if the caller is from"
|   | |-TextComment 0x55b64bf546a0 <line:273:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x55b64bf546c0 <line:274:3, col:67> Text=" on both the object and the thread whose access is being granted."
|   |-ParagraphComment 0x55b64bf54750 <line:276:3>
|   | `-TextComment 0x55b64bf54720 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf54770 <col:4, line:277:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf54820 <line:276:17, line:277:3>
|   |   |-TextComment 0x55b64bf547d0 <line:276:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x55b64bf547f0 <line:277:3> Text=" "
|   `-ParamCommandComment 0x55b64bf54840 <col:4, col:53> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x55b64bf548d0 <col:17, col:53>
|       `-TextComment 0x55b64bf548a0 <col:17, col:53> Text=" Thread to grant access to the object"
|-FunctionDecl 0x55b64beacf88 prev 0x55b64beac548 <line:291:1, col:66> col:6 k_object_access_revoke 'void (void *, struct k_thread *)'
| |-ParmVarDecl 0x55b64beace70 <col:29, col:35> col:35 object 'void *'
| |-ParmVarDecl 0x55b64beacef8 <col:43, col:60> col:60 thread 'struct k_thread *'
| `-FullComment 0x55b64bf54c80 <line:282:3, line:289:54>
|   |-ParagraphComment 0x55b64bf549c0 <line:282:3, col:46>
|   | `-TextComment 0x55b64bf54990 <col:3, col:46> Text=" Revoke a thread's access to a kernel object"
|   |-ParagraphComment 0x55b64bf54a60 <line:284:3, line:286:67>
|   | |-TextComment 0x55b64bf549e0 <line:284:3, col:66> Text=" The thread will lose access to the object if the caller is from"
|   | |-TextComment 0x55b64bf54a00 <line:285:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x55b64bf54a20 <line:286:3, col:67> Text=" on both the object and the thread whose access is being revoked."
|   |-ParagraphComment 0x55b64bf54ab0 <line:288:3>
|   | `-TextComment 0x55b64bf54a80 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf54ad0 <col:4, line:289:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf54b80 <line:288:17, line:289:3>
|   |   |-TextComment 0x55b64bf54b30 <line:288:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x55b64bf54b50 <line:289:3> Text=" "
|   `-ParamCommandComment 0x55b64bf54ba0 <col:4, col:54> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x55b64bf54c30 <col:17, col:54>
|       `-TextComment 0x55b64bf54c00 <col:17, col:54> Text=" Thread to remove access to the object"
|-FunctionDecl 0x55b64bead108 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:302:45> col:16 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x55b64bead080 <col:33, col:39> col:39 object 'void *'
| `-FullComment 0x55b64bf54fb0 <line:294:3, line:301:1>
|   |-ParagraphComment 0x55b64bf54d20 <line:294:3>
|   | `-TextComment 0x55b64bf54cf0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf54d40 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55b64bf54da0 <col:10, col:27>
|   |   `-TextComment 0x55b64bf54d70 <col:10, col:27> Text=" Release an object"
|   |-ParagraphComment 0x55b64bf54e10 <line:296:3, line:297:72>
|   | |-TextComment 0x55b64bf54dc0 <line:296:3, col:64> Text=" Allows user threads to drop their own permission on an object"
|   | `-TextComment 0x55b64bf54de0 <line:297:3, col:72> Text=" Their permissions are automatically cleared when a thread terminates."
|   |-ParagraphComment 0x55b64bf54e60 <line:299:3>
|   | `-TextComment 0x55b64bf54e30 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf54e80 <col:4, col:42> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf54f10 <col:17, col:42>
|   |   `-TextComment 0x55b64bf54ee0 <col:17, col:42> Text=" The object to be released"
|   `-ParagraphComment 0x55b64bf54f60 <line:301:1>
|     `-TextComment 0x55b64bf54f30 <col:1> Text=" "
|-FunctionDecl 0x55b64bead278 prev 0x55b64beacaa0 <line:321:1, col:44> col:6 k_object_access_all_grant 'void (void *)'
| |-ParmVarDecl 0x55b64bead1f0 <col:32, col:38> col:38 object 'void *'
| `-FullComment 0x55b64bf55370 <line:305:3, line:319:41>
|   |-ParagraphComment 0x55b64bf55050 <line:305:3, col:59>
|   | `-TextComment 0x55b64bf55020 <col:3, col:59> Text=" Grant all present and future threads access to an object"
|   |-ParagraphComment 0x55b64bf55110 <line:307:3, line:310:59>
|   | |-TextComment 0x55b64bf55070 <line:307:3, col:77> Text=" If the caller is from supervisor mode, or the caller is from user mode and"
|   | |-TextComment 0x55b64bf55090 <line:308:3, col:72> Text=" have sufficient permissions on the object, then that object will have"
|   | |-TextComment 0x55b64bf550b0 <line:309:3, col:76> Text=" permissions granted to it for *all* current and future threads running in"
|   | `-TextComment 0x55b64bf550d0 <line:310:3, col:59> Text=" the system, effectively becoming a public kernel object."
|   |-ParagraphComment 0x55b64bf551b0 <line:312:3, line:314:43>
|   | |-TextComment 0x55b64bf55130 <line:312:3, col:79> Text=" Use of this API should be avoided on systems that are running untrusted code"
|   | |-TextComment 0x55b64bf55150 <line:313:3, col:76> Text=" as it is possible for such code to derive the addresses of kernel objects"
|   | `-TextComment 0x55b64bf55170 <line:314:3, col:43> Text=" and perform unwanted operations on them."
|   |-ParagraphComment 0x55b64bf55220 <line:316:3, line:317:25>
|   | |-TextComment 0x55b64bf551d0 <line:316:3, col:75> Text=" It is not possible to revoke permissions on public objects; once public,"
|   | `-TextComment 0x55b64bf551f0 <line:317:3, col:25> Text=" any thread may use it."
|   |-ParagraphComment 0x55b64bf55270 <line:319:3>
|   | `-TextComment 0x55b64bf55240 <col:3> Text=" "
|   `-ParamCommandComment 0x55b64bf55290 <col:4, col:41> [in] implicitly Param="object" ParamIndex=0
|     `-ParagraphComment 0x55b64bf55320 <col:17, col:41>
|       `-TextComment 0x55b64bf552f0 <col:17, col:41> Text=" Address of kernel object"
|-FunctionDecl 0x55b64bead4b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:337:52> col:17 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x55b64bead3b0 <col:32, col:47> col:47 otype 'enum k_objects':'enum k_objects'
| `-FullComment 0x55b64bf55730 <line:324:3, line:335:12>
|   |-ParagraphComment 0x55b64bf55410 <line:324:3, col:48>
|   | `-TextComment 0x55b64bf553e0 <col:3, col:48> Text=" Allocate a kernel object of a designated type"
|   |-ParagraphComment 0x55b64bf554d0 <line:326:3, line:329:78>
|   | |-TextComment 0x55b64bf55430 <line:326:3, col:74> Text=" This will instantiate at runtime a kernel object of the specified type,"
|   | |-TextComment 0x55b64bf55450 <line:327:3, col:77> Text=" returning a pointer to it. The object will be returned in an uninitialized"
|   | |-TextComment 0x55b64bf55470 <line:328:3, col:76> Text=" state, with the calling thread being granted permission on it. The memory"
|   | `-TextComment 0x55b64bf55490 <line:329:3, col:78> Text=" for the object will be allocated out of the calling thread's resource pool."
|   |-ParagraphComment 0x55b64bf55520 <line:331:3, col:59>
|   | `-TextComment 0x55b64bf554f0 <col:3, col:59> Text=" Currently, allocation of thread stacks is not supported."
|   |-ParagraphComment 0x55b64bf55570 <line:333:3>
|   | `-TextComment 0x55b64bf55540 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf55590 <col:4, line:334:3> [in] implicitly Param="otype" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf55640 <line:333:16, line:334:3>
|   |   |-TextComment 0x55b64bf555f0 <line:333:16, col:44> Text=" Requested kernel object type"
|   |   `-TextComment 0x55b64bf55610 <line:334:3> Text=" "
|   `-BlockCommandComment 0x55b64bf55660 <col:4, line:335:12> Name="return"
|     `-ParagraphComment 0x55b64bf556e0 <line:334:11, line:335:12>
|       |-TextComment 0x55b64bf55690 <line:334:11, col:77> Text=" A pointer to the allocated kernel object, or NULL if memory wasn't"
|       `-TextComment 0x55b64bf556b0 <line:335:3, col:12> Text=" available"
|-FunctionDecl 0x55b64bead610 <line:352:1, line:357:1> line:352:21 used z_impl_k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x55b64bead580 <col:43, col:58> col:58 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x55b64bead848 <line:353:1, line:357:1>
|   |-CStyleCastExpr 0x55b64bead758 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|   | `-ImplicitCastExpr 0x55b64bead740 <col:29, col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|   |   `-ParenExpr 0x55b64bead720 <col:29, col:31> 'enum k_objects':'enum k_objects' lvalue
|   |     `-DeclRefExpr 0x55b64bead6b8 </vagrant/ext/zephyros/zephyr/include/kernel.h:354:13> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x55b64bead580 'otype' 'enum k_objects':'enum k_objects'
|   `-ReturnStmt 0x55b64bead800 <line:356:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ParenExpr 0x55b64bead7e0 <col:14, col:24> 'void *'
|       `-CStyleCastExpr 0x55b64bead7b8 <col:15, col:23> 'void *' <NullToPointer>
|         `-IntegerLiteral 0x55b64bead780 <col:23> 'int' 0
|-FunctionDecl 0x55b64bead908 </vagrant/ext/zephyros/zephyr/include/kernel.h:363:1, line:366:1> line:363:20 k_obj_free 'void (void *)' static inline
| |-ParmVarDecl 0x55b64bead880 <col:31, col:37> col:37 used obj 'void *'
| |-CompoundStmt 0x55b64beadaa8 <line:364:1, line:366:1>
| | `-CStyleCastExpr 0x55b64beada50 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55b64beada38 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x55b64beada18 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x55b64bead9b0 </vagrant/ext/zephyros/zephyr/include/kernel.h:365:13> 'void *' lvalue ParmVar 0x55b64bead880 'obj' 'void *'
| `-FullComment 0x55b64bf55990 <line:359:3, line:362:1>
|   |-ParagraphComment 0x55b64bf557d0 <line:359:3>
|   | `-TextComment 0x55b64bf557a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf557f0 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x55b64bf55850 <col:10, col:24>
|   |   `-TextComment 0x55b64bf55820 <col:10, col:24> Text=" Free an object"
|   |-ParagraphComment 0x55b64bf558a0 <line:361:3>
|   | `-TextComment 0x55b64bf55870 <col:3> Text=" "
|   `-ParamCommandComment 0x55b64bf558c0 <col:4, line:362:1> [in] implicitly Param="obj" ParamIndex=0
|     `-ParagraphComment 0x55b64bf55950 <col:1>
|       `-TextComment 0x55b64bf55920 <col:1> Text=" "
|-RecordDecl 0x55b64beadac0 prev 0x55b64be4bc70 <line:387:1, line:389:1> line:387:17 struct _k_thread_stack_element definition
| |-PackedAttr 0x55b64beadb48 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:168:40>
| `-FieldDecl 0x55b64beadba0 </vagrant/ext/zephyros/zephyr/include/kernel.h:388:2, col:7> col:7 data 'char'
|-RecordDecl 0x55b64beadc48 <line:427:1, line:503:1> line:427:8 struct _thread_base definition
| |-RecordDecl 0x55b64beadcf0 <line:430:2, line:433:2> line:430:2 union definition
| | |-FieldDecl 0x55b64beaddb0 <line:431:3, col:15> col:15 qnode_dlist 'sys_dnode_t':'struct _dnode'
| | `-FieldDecl 0x55b64beade18 <line:432:3, col:17> col:17 qnode_rb 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x55b64beadeb0 <line:430:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| |-IndirectFieldDecl 0x55b64beadf08 <line:431:15> col:15 implicit qnode_dlist 'sys_dnode_t':'struct _dnode'
| | |-Field 0x55b64beadeb0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x55b64beaddb0 'qnode_dlist' 'sys_dnode_t':'struct _dnode'
| |-IndirectFieldDecl 0x55b64beadf58 <line:432:17> col:17 implicit qnode_rb 'struct rbnode':'struct rbnode'
| | |-Field 0x55b64beadeb0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x55b64beade18 'qnode_rb' 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x55b64beae028 <line:438:2, col:13> col:13 pended_on '_wait_q_t *'
| |-FieldDecl 0x55b64beae080 <line:441:2, col:7> col:7 user_options 'u8_t':'unsigned char'
| |-FieldDecl 0x55b64beae0d8 <line:444:2, col:7> col:7 thread_state 'u8_t':'unsigned char'
| |-RecordDecl 0x55b64beae120 <line:460:2, line:471:2> line:460:2 union definition
| | |-RecordDecl 0x55b64beae1d0 <line:461:3, line:469:3> line:461:3 struct definition
| | | |-FieldDecl 0x55b64beae290 <line:466:4, col:9> col:9 prio 's8_t':'signed char'
| | | `-FieldDecl 0x55b64beae2e8 <line:467:4, col:9> col:9 sched_locked 'u8_t':'unsigned char'
| | |-FieldDecl 0x55b64be49e00 <line:461:3> col:3 implicit 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | |-IndirectFieldDecl 0x55b64be49e58 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | | |-Field 0x55b64be49e00 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x55b64beae290 'prio' 's8_t':'signed char'
| | |-IndirectFieldDecl 0x55b64be49ea8 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | | |-Field 0x55b64be49e00 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x55b64beae2e8 'sched_locked' 'u8_t':'unsigned char'
| | `-FieldDecl 0x55b64be49ef8 <line:470:3, col:9> col:9 preempt 'u16_t':'unsigned short'
| |-FieldDecl 0x55b64be49fe0 <line:460:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| |-IndirectFieldDecl 0x55b64be4a040 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | |-Field 0x55b64be49fe0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x55b64be49e00 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x55b64beae290 'prio' 's8_t':'signed char'
| |-IndirectFieldDecl 0x55b64be4a098 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | |-Field 0x55b64be49fe0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x55b64be49e00 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x55b64beae2e8 'sched_locked' 'u8_t':'unsigned char'
| |-IndirectFieldDecl 0x55b64be4a0e8 <line:470:9> col:9 implicit preempt 'u16_t':'unsigned short'
| | |-Field 0x55b64be49fe0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | `-Field 0x55b64be49ef8 'preempt' 'u16_t':'unsigned short'
| |-FieldDecl 0x55b64be4a138 <line:477:2, col:8> col:8 order_key 'u32_t':'unsigned int'
| `-FieldDecl 0x55b64be4a198 <line:497:2, col:8> col:8 swap_data 'void *'
|-TypedefDecl 0x55b64be4a2d0 <line:505:1, col:29> col:29 _thread_base_t 'struct _thread_base':'struct _thread_base'
| `-ElaboratedType 0x55b64be4a280 'struct _thread_base' sugar
|   `-RecordType 0x55b64beadcd0 'struct _thread_base'
|     `-Record 0x55b64beadc48 '_thread_base'
|-RecordDecl 0x55b64be4a358 prev 0x55b64bea6d70 <line:545:1, line:618:1> line:545:8 invalid struct k_thread definition
| |-FullComment 0x55b64bf55b00 <line:542:3, line:543:19>
| | |-ParagraphComment 0x55b64bf55a30 <line:542:3>
| | | `-TextComment 0x55b64bf55a00 <col:3> Text=" "
| | |-VerbatimLineComment 0x55b64bf55a50 <col:4, col:24> Text=" thread_apis"
| | `-ParagraphComment 0x55b64bf55ac0 <line:543:3, col:19>
| |   `-TextComment 0x55b64bf55a90 <col:3, col:19> Text=" Thread Structure"
| |-FieldDecl 0x55b64be4a400 <line:547:2, col:22> col:22 base 'struct _thread_base':'struct _thread_base'
| |-RecordDecl 0x55b64be4a478 parent 0x55b64bd0f698 <line:550:2, col:9> col:9 struct _callee_saved
| |-FieldDecl 0x55b64be4a580 <col:2, col:23> col:23 invalid callee_saved 'struct _callee_saved':'struct _callee_saved'
| | `-FullComment 0x55b64bf55bd0 <line:549:5, col:59>
| |   `-ParagraphComment 0x55b64bf55ba0 <col:5, col:59>
| |     `-TextComment 0x55b64bf55b70 <col:5, col:59> Text=" defined by the architecture, but all archs need these "
| |-FieldDecl 0x55b64be4a610 <line:553:2, col:8> col:8 init_data 'void *'
| | `-FullComment 0x55b64bf55ca0 <line:552:5, col:29>
| |   `-ParagraphComment 0x55b64bf55c70 <col:5, col:29>
| |     `-TextComment 0x55b64bf55c40 <col:5, col:29> Text=" static thread init data "
| |-FieldDecl 0x55b64be4a7b8 <line:559:2, col:23> col:9 fn_abort 'void (*)(void)'
| | `-FullComment 0x55b64bf55e30 <line:556:4, line:558:4>
| |   |-ParagraphComment 0x55b64bf55d60 <line:556:4, line:557:4>
| |   | |-TextComment 0x55b64bf55d10 <line:556:4, col:18> Text=" abort function"
| |   | `-TextComment 0x55b64bf55d30 <line:557:4> Text=" "
| |   |-VerbatimLineComment 0x55b64bf55d80 <col:5, col:22> Text=" K-THREAD-002"
| |   `-ParagraphComment 0x55b64bf55df0 <line:558:4>
| |     `-TextComment 0x55b64bf55dc0 <col:4> Text=" "
| |-FieldDecl 0x55b64be4a8e0 <line:614:2, col:21> col:21 referenced resource_pool 'struct k_mem_pool *'
| | `-FullComment 0x55b64bf55f00 <line:613:5, col:19>
| |   `-ParagraphComment 0x55b64bf55ed0 <col:5, col:19>
| |     `-TextComment 0x55b64bf55ea0 <col:5, col:19> Text=" resource pool "
| |-RecordDecl 0x55b64be4a958 parent 0x55b64bd0f698 <line:617:2, col:9> col:9 struct _thread_arch
| `-FieldDecl 0x55b64be4aa60 <col:2, col:22> col:22 invalid arch 'struct _thread_arch':'struct _thread_arch'
|   `-FullComment 0x55b64bf55fd0 <line:616:5, col:47>
|     `-ParagraphComment 0x55b64bf55fa0 <col:5, col:47>
|       `-TextComment 0x55b64bf55f70 <col:5, col:47> Text=" arch-specifics: must always be at the end "
|-TypedefDecl 0x55b64be4ab90 <line:620:1, col:25> col:25 _thread_t 'struct k_thread':'struct k_thread'
| `-ElaboratedType 0x55b64bdffda0 'struct k_thread' sugar
|   `-RecordType 0x55b64bdffd10 'struct k_thread'
|     `-Record 0x55b64be4a358 'k_thread'
|-TypedefDecl 0x55b64be4ac10 <line:621:1, col:26> col:26 referenced k_tid_t 'struct k_thread *'
| `-PointerType 0x55b64bdffe00 'struct k_thread *'
|   `-ElaboratedType 0x55b64bdffda0 'struct k_thread' sugar
|     `-RecordType 0x55b64bdffd10 'struct k_thread'
|       `-Record 0x55b64be4a358 'k_thread'
|-EnumDecl 0x55b64be4ac68 <line:623:1, line:627:1> line:623:6 execution_context_types
| |-EnumConstantDecl 0x55b64be4ad40 <line:624:2, col:10> col:2 K_ISR 'int'
| | `-IntegerLiteral 0x55b64be4ad20 <col:10> 'int' 0
| |-EnumConstantDecl 0x55b64be4ad88 <line:625:2> col:2 K_COOP_THREAD 'int'
| `-EnumConstantDecl 0x55b64beb0fe0 <line:626:2> col:2 K_PREEMPT_THREAD 'int'
|-TypedefDecl 0x55b64beb1308 <line:634:1, line:635:23> line:634:16 referenced k_thread_user_cb_t 'void (*)(const struct k_thread *, void *)'
| |-PointerType 0x55b64beb12a0 'void (*)(const struct k_thread *, void *)'
| | `-ParenType 0x55b64beb1240 'void (const struct k_thread *, void *)' sugar
| |   `-FunctionProtoType 0x55b64beb1200 'void (const struct k_thread *, void *)' cdecl
| |     |-BuiltinType 0x55b64bd0f6f0 'void'
| |     |-PointerType 0x55b64beb1090 'const struct k_thread *'
| |     | `-QualType 0x55b64bdffda1 'const struct k_thread' const
| |     |   `-ElaboratedType 0x55b64bdffda0 'struct k_thread' sugar
| |     |     `-RecordType 0x55b64bdffd10 'struct k_thread'
| |     |       `-Record 0x55b64be4a358 'k_thread'
| |     `-PointerType 0x55b64bd0fb90 'void *'
| |       `-BuiltinType 0x55b64bd0f6f0 'void'
| `-FullComment 0x55b64bf56190 <line:630:3, line:631:5>
|   |-ParagraphComment 0x55b64bf56070 <line:630:3>
|   | `-TextComment 0x55b64bf56040 <col:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf56090 <col:4, col:27> Text=" thread_apis"
|   `-ParagraphComment 0x55b64bf56150 <line:631:3, col:5>
|     |-TextComment 0x55b64bf560d0 <col:3> Text=" "
|     |-TextComment 0x55b64bf560f0 <col:4> Text="@"
|     `-TextComment 0x55b64bf56110 <col:5> Text="{"
|-FunctionDecl 0x55b64beb1550 <line:654:1, col:73> col:13 k_thread_foreach 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x55b64beb13c0 <col:30, col:49> col:49 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x55b64beb1438 <col:58, col:64> col:64 user_data 'void *'
| `-FullComment 0x55b64bf568b0 <line:638:3, line:652:14>
|   |-ParagraphComment 0x55b64bf56230 <line:638:3>
|   | `-TextComment 0x55b64bf56200 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf56250 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55b64bf562b0 <col:10, col:53>
|   |   `-TextComment 0x55b64bf56280 <col:10, col:53> Text=" Iterate over all the threads in the system."
|   |-ParagraphComment 0x55b64bf56320 <line:640:3, line:641:46>
|   | |-TextComment 0x55b64bf562d0 <line:640:3, col:63> Text=" This routine iterates over all the threads in the system and"
|   | `-TextComment 0x55b64bf562f0 <line:641:3, col:46> Text=" calls the user_cb function for each thread."
|   |-ParagraphComment 0x55b64bf56370 <line:643:3>
|   | `-TextComment 0x55b64bf56340 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf56390 <col:4, line:644:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf56440 <line:643:18, line:644:3>
|   |   |-TextComment 0x55b64bf563f0 <line:643:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x55b64bf56410 <line:644:3> Text=" "
|   |-ParamCommandComment 0x55b64bf56460 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf56500 <col:20, col:41>
|   |   `-TextComment 0x55b64bf564d0 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x55b64bf56550 <line:646:3>
|   | `-TextComment 0x55b64bf56520 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf56570 <col:4, line:648:3> Name="note"
|   | `-ParagraphComment 0x55b64bf56620 <line:646:9, line:648:3>
|   |   |-TextComment 0x55b64bf565a0 <line:646:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x55b64bf565c0 <line:647:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x55b64bf565e0 <line:648:3> Text=" "
|   |-BlockCommandComment 0x55b64bf56640 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x55b64bf566a0 <col:9, col:23>
|   |   `-TextComment 0x55b64bf56670 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x55b64bf566c0 <col:24, col:71> Text=" k_spin_lock to protect the _kernel.threads"
|   |-ParagraphComment 0x55b64bf56750 <line:649:3, line:650:46>
|   | |-TextComment 0x55b64bf56700 <line:649:3, col:72> Text=" list which means creation of new threads and terminations of existing"
|   | `-TextComment 0x55b64bf56720 <line:650:3, col:46> Text=" threads are blocked until this API returns."
|   |-ParagraphComment 0x55b64bf567a0 <line:652:3>
|   | `-TextComment 0x55b64bf56770 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf567c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf56820 <col:11, col:14>
|       `-TextComment 0x55b64bf567f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64beb1740 <line:683:1, line:684:45> line:683:13 k_thread_foreach_unlocked 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x55b64beb1638 <line:684:2, col:21> col:21 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x55b64beb16b0 <col:30, col:36> col:36 user_data 'void *'
| `-FullComment 0x55b64bf573b0 <line:657:3, line:681:72>
|   |-ParagraphComment 0x55b64bf56950 <line:657:3>
|   | `-TextComment 0x55b64bf56920 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf56970 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x55b64bf569d0 <col:10, col:69>
|   |   `-TextComment 0x55b64bf569a0 <col:10, col:69> Text=" Iterate over all the threads in the system without locking."
|   |-ParagraphComment 0x55b64bf56a20 <line:659:3, col:44>
|   | `-TextComment 0x55b64bf569f0 <col:3, col:44> Text=" This routine works exactly the same like "
|   |-VerbatimLineComment 0x55b64bf56a40 <col:45, col:66> Text=" k_thread_foreach"
|   |-ParagraphComment 0x55b64bf56ab0 <line:660:3, col:51>
|   | `-TextComment 0x55b64bf56a80 <col:3, col:51> Text=" but unlocks interrupts when user_cb is executed."
|   |-ParagraphComment 0x55b64bf56b00 <line:662:3>
|   | `-TextComment 0x55b64bf56ad0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf56b20 <col:4, line:663:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf56bd0 <line:662:18, line:663:3>
|   |   |-TextComment 0x55b64bf56b80 <line:662:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x55b64bf56ba0 <line:663:3> Text=" "
|   |-ParamCommandComment 0x55b64bf56bf0 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf56c80 <col:20, col:41>
|   |   `-TextComment 0x55b64bf56c50 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x55b64bf56cd0 <line:665:3>
|   | `-TextComment 0x55b64bf56ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf56cf0 <col:4, line:667:3> Name="note"
|   | `-ParagraphComment 0x55b64bf56da0 <line:665:9, line:667:3>
|   |   |-TextComment 0x55b64bf56d20 <line:665:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x55b64bf56d40 <line:666:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x55b64bf56d60 <line:667:3> Text=" "
|   |-BlockCommandComment 0x55b64bf56dc0 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x55b64bf56e20 <col:9, col:23>
|   |   `-TextComment 0x55b64bf56df0 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x55b64bf56e40 <col:24, col:80> Text=" k_spin_lock only when accessing the _kernel.threads"
|   |-ParagraphComment 0x55b64bf57020 <line:668:3, line:674:3>
|   | |-TextComment 0x55b64bf56e80 <line:668:3, col:74> Text=" queue elements. It unlocks it during user callback function processing."
|   | |-TextComment 0x55b64bf56ea0 <line:669:3, col:38> Text=" If a new task is created when this "
|   | |-InlineCommandComment 0x55b64bf56ef0 <col:39, col:40> Name="c" RenderMonospaced Arg[0]="foreach"
|   | |-TextComment 0x55b64bf56f10 <col:49, col:73> Text=" function is in progress,"
|   | |-TextComment 0x55b64bf56f30 <line:670:3, col:63> Text=" the added new task would not be included in the enumeration."
|   | |-TextComment 0x55b64bf56f50 <line:671:3, col:75> Text=" If a task is aborted during this enumeration, there would be a race here"
|   | |-TextComment 0x55b64bf56f70 <line:672:3, col:77> Text=" and there is a possibility that this aborted task would be included in the"
|   | |-TextComment 0x55b64bf56f90 <line:673:3, col:15> Text=" enumeration."
|   | `-TextComment 0x55b64bf56fb0 <line:674:3> Text=" "
|   `-BlockCommandComment 0x55b64bf57040 <col:4, line:681:72> Name="note"
|     `-ParagraphComment 0x55b64bf57320 <line:674:9, line:681:72>
|       |-TextComment 0x55b64bf57070 <line:674:9, col:63> Text=" If the task is aborted and the memory occupied by its "
|       |-InlineCommandComment 0x55b64bf570c0 <col:64, col:65> Name="c" RenderMonospaced Arg[0]="k_thread"
|       |-TextComment 0x55b64bf570e0 <line:675:3, col:33> Text=" structure is reused when this "
|       |-InlineCommandComment 0x55b64bf57140 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="k_thread_foreach_unlocked"
|       |-TextComment 0x55b64bf57160 <col:62, col:76> Text=" is in progress"
|       |-TextComment 0x55b64bf57180 <line:676:3, col:52> Text=" it might even lead to the system behave unstable."
|       |-TextComment 0x55b64bf571a0 <line:677:3, col:59> Text=" This function may never return, as it would follow some "
|       |-InlineCommandComment 0x55b64bf571f0 <col:60, col:61> Name="c" RenderMonospaced Arg[0]="next"
|       |-TextComment 0x55b64bf57210 <col:67, col:71> Text=" task"
|       |-TextComment 0x55b64bf57230 <line:678:3, col:73> Text=" pointers treating given pointer as a pointer to the k_thread structure"
|       |-TextComment 0x55b64bf57250 <line:679:3, col:45> Text=" while it is something different right now."
|       |-TextComment 0x55b64bf57270 <line:680:3, col:77> Text=" Do not reuse the memory that was occupied by k_thread structure of aborted"
|       `-TextComment 0x55b64bf57290 <line:681:3, col:72> Text=" task if it was aborted after this function was called in any context."
|-FunctionDecl 0x55b64beb5000 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:784:43> line:779:19 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x55b64beb1958 <col:35, col:52> col:52 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x55b64beb19c8 <line:780:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55b64beb1a38 <line:781:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64beb1ad0 <line:782:7, col:24> col:24 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x55b64beb1b48 <line:783:7, col:13> col:13 p1 'void *'
| |-ParmVarDecl 0x55b64beb1bc0 <col:17, col:23> col:23 p2 'void *'
| |-ParmVarDecl 0x55b64beb1c38 <col:27, col:33> col:33 p3 'void *'
| |-ParmVarDecl 0x55b64beb1cb0 <line:784:7, col:11> col:11 prio 'int'
| |-ParmVarDecl 0x55b64beb1d20 <col:17, col:23> col:23 options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55b64beb1d90 <col:32, col:38> col:38 delay 's32_t':'int'
| `-FullComment 0x55b64bf58210 <line:746:3, line:778:1>
|   |-ParagraphComment 0x55b64bf57450 <line:746:3>
|   | `-TextComment 0x55b64bf57420 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf57470 <col:4, col:26> Name="brief"
|   | `-ParagraphComment 0x55b64bf574d0 <col:10, col:26>
|   |   `-TextComment 0x55b64bf574a0 <col:10, col:26> Text=" Create a thread."
|   |-ParagraphComment 0x55b64bf57520 <line:748:3, col:70>
|   | `-TextComment 0x55b64bf574f0 <col:3, col:70> Text=" This routine initializes a thread, then schedules it for execution."
|   |-ParagraphComment 0x55b64bf575e0 <line:750:3, line:753:11>
|   | |-TextComment 0x55b64bf57540 <line:750:3, col:78> Text=" The new thread may be scheduled for immediate execution or a delayed start."
|   | |-TextComment 0x55b64bf57560 <line:751:3, col:71> Text=" If the newly spawned thread does not have a delayed start the kernel"
|   | |-TextComment 0x55b64bf57580 <line:752:3, col:70> Text=" scheduler may preempt the current thread to allow the new thread to"
|   | `-TextComment 0x55b64bf575a0 <line:753:3, col:11> Text=" execute."
|   |-ParagraphComment 0x55b64bf57680 <line:755:3, line:757:44>
|   | |-TextComment 0x55b64bf57600 <line:755:3, col:73> Text=" Thread options are architecture-specific, and can include K_ESSENTIAL,"
|   | |-TextComment 0x55b64bf57620 <line:756:3, col:77> Text=" K_FP_REGS, and K_SSE_REGS. Multiple options may be specified by separating"
|   | `-TextComment 0x55b64bf57640 <line:757:3, col:44> Text=" them using "|" (the logical OR operator)."
|   |-ParagraphComment 0x55b64bf57740 <line:759:3, line:762:13>
|   | |-TextComment 0x55b64bf576a0 <line:759:3, col:79> Text=" Historically, users often would use the beginning of the stack memory region"
|   | |-TextComment 0x55b64bf576c0 <line:760:3, col:75> Text=" to store the struct k_thread data, although corruption will occur if the"
|   | |-TextComment 0x55b64bf576e0 <line:761:3, col:80> Text=" stack overflows this region and stack protection features may not detect this"
|   | `-TextComment 0x55b64bf57700 <line:762:3, col:13> Text=" situation."
|   |-ParagraphComment 0x55b64bf57790 <line:764:3>
|   | `-TextComment 0x55b64bf57760 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf577b0 <col:4, line:765:3> [in] implicitly Param="new_thread" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf57860 <line:764:21, line:765:3>
|   |   |-TextComment 0x55b64bf57810 <line:764:21, col:61> Text=" Pointer to uninitialized struct k_thread"
|   |   `-TextComment 0x55b64bf57830 <line:765:3> Text=" "
|   |-ParamCommandComment 0x55b64bf57880 <col:4, line:766:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf57930 <line:765:16, line:766:3>
|   |   |-TextComment 0x55b64bf578e0 <line:765:16, col:43> Text=" Pointer to the stack space."
|   |   `-TextComment 0x55b64bf57900 <line:766:3> Text=" "
|   |-ParamCommandComment 0x55b64bf57950 <col:4, line:767:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf57a00 <line:766:21, line:767:3>
|   |   |-TextComment 0x55b64bf579b0 <line:766:21, col:41> Text=" Stack size in bytes."
|   |   `-TextComment 0x55b64bf579d0 <line:767:3> Text=" "
|   |-ParamCommandComment 0x55b64bf57a20 <col:4, line:768:3> [in] implicitly Param="entry" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf57ad0 <line:767:16, line:768:3>
|   |   |-TextComment 0x55b64bf57a80 <line:767:16, col:38> Text=" Thread entry function."
|   |   `-TextComment 0x55b64bf57aa0 <line:768:3> Text=" "
|   |-ParamCommandComment 0x55b64bf57af0 <col:4, line:769:3> [in] implicitly Param="p1" ParamIndex=4
|   | `-ParagraphComment 0x55b64bf57ba0 <line:768:13, line:769:3>
|   |   |-TextComment 0x55b64bf57b50 <line:768:13, col:39> Text=" 1st entry point parameter."
|   |   `-TextComment 0x55b64bf57b70 <line:769:3> Text=" "
|   |-ParamCommandComment 0x55b64bf57bc0 <col:4, line:770:3> [in] implicitly Param="p2" ParamIndex=5
|   | `-ParagraphComment 0x55b64bf57c70 <line:769:13, line:770:3>
|   |   |-TextComment 0x55b64bf57c20 <line:769:13, col:39> Text=" 2nd entry point parameter."
|   |   `-TextComment 0x55b64bf57c40 <line:770:3> Text=" "
|   |-ParamCommandComment 0x55b64bf57c90 <col:4, line:771:3> [in] implicitly Param="p3" ParamIndex=6
|   | `-ParagraphComment 0x55b64bf57d40 <line:770:13, line:771:3>
|   |   |-TextComment 0x55b64bf57cf0 <line:770:13, col:39> Text=" 3rd entry point parameter."
|   |   `-TextComment 0x55b64bf57d10 <line:771:3> Text=" "
|   |-ParamCommandComment 0x55b64bf57d60 <col:4, line:772:3> [in] implicitly Param="prio" ParamIndex=7
|   | `-ParagraphComment 0x55b64bf57e10 <line:771:15, line:772:3>
|   |   |-TextComment 0x55b64bf57dc0 <line:771:15, col:31> Text=" Thread priority."
|   |   `-TextComment 0x55b64bf57de0 <line:772:3> Text=" "
|   |-ParamCommandComment 0x55b64bf57e30 <col:4, line:773:3> [in] implicitly Param="options" ParamIndex=8
|   | `-ParagraphComment 0x55b64bf57ee0 <line:772:18, line:773:3>
|   |   |-TextComment 0x55b64bf57e90 <line:772:18, col:33> Text=" Thread options."
|   |   `-TextComment 0x55b64bf57eb0 <line:773:3> Text=" "
|   |-ParamCommandComment 0x55b64bf57f00 <col:4, col:80> [in] implicitly Param="delay" ParamIndex=9
|   | `-ParagraphComment 0x55b64bf57f90 <col:16, col:80>
|   |   `-TextComment 0x55b64bf57f60 <col:16, col:80> Text=" Scheduling delay (in milliseconds), or K_NO_WAIT (for no delay)."
|   |-ParagraphComment 0x55b64bf57fe0 <line:775:3>
|   | `-TextComment 0x55b64bf57fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf58000 <col:4, col:28> Name="return"
|   | `-ParagraphComment 0x55b64bf58060 <col:11, col:28>
|   |   `-TextComment 0x55b64bf58030 <col:11, col:28> Text=" ID of new thread."
|   |-ParagraphComment 0x55b64bf580b0 <line:777:3>
|   | `-TextComment 0x55b64bf58080 <col:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf580d0 <col:4, col:21> Text=" K-THREAD-001"
|   `-ParagraphComment 0x55b64bf58140 <line:778:1>
|     `-TextComment 0x55b64bf58110 <col:1> Text=" "
|-FunctionDecl 0x55b64beb5470 <line:795:1, line:797:18> line:795:27 k_thread_user_mode_enter 'void (k_thread_entry_t, void *, void *, void *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55b64beb5128 <col:52, col:69> col:69 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x55b64beb51a0 <line:796:10, col:16> col:16 p1 'void *'
| |-ParmVarDecl 0x55b64beb5218 <col:20, col:26> col:26 p2 'void *'
| |-ParmVarDecl 0x55b64beb5290 <line:797:10, col:16> col:16 p3 'void *'
| `-FullComment 0x55b64bf587d0 <line:787:3, line:794:1>
|   |-ParagraphComment 0x55b64bf582b0 <line:787:3>
|   | `-TextComment 0x55b64bf58280 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf582d0 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x55b64bf58330 <col:10, col:61>
|   |   `-TextComment 0x55b64bf58300 <col:10, col:61> Text=" Drop a thread's privileges permanently to user mode"
|   |-ParagraphComment 0x55b64bf58380 <line:789:3>
|   | `-TextComment 0x55b64bf58350 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf583a0 <col:4, line:790:3> [in] implicitly Param="entry" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf58450 <line:789:16, line:790:3>
|   |   |-TextComment 0x55b64bf58400 <line:789:16, col:48> Text=" Function to start executing from"
|   |   `-TextComment 0x55b64bf58420 <line:790:3> Text=" "
|   |-ParamCommandComment 0x55b64bf58470 <col:4, line:791:3> [in] implicitly Param="p1" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf58530 <line:790:13, line:791:3>
|   |   |-TextComment 0x55b64bf584e0 <line:790:13, col:38> Text=" 1st entry point parameter"
|   |   `-TextComment 0x55b64bf58500 <line:791:3> Text=" "
|   |-ParamCommandComment 0x55b64bf58550 <col:4, line:792:3> [in] implicitly Param="p2" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf58600 <line:791:13, line:792:3>
|   |   |-TextComment 0x55b64bf585b0 <line:791:13, col:38> Text=" 2nd entry point parameter"
|   |   `-TextComment 0x55b64bf585d0 <line:792:3> Text=" "
|   |-ParamCommandComment 0x55b64bf58620 <col:4, line:793:3> [in] implicitly Param="p3" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf586d0 <line:792:13, line:793:3>
|   |   |-TextComment 0x55b64bf58680 <line:792:13, col:38> Text=" 3rd entry point parameter"
|   |   `-TextComment 0x55b64bf586a0 <line:793:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf586f0 <col:4, col:21> Text=" K-THREAD-003"
|   `-ParagraphComment 0x55b64bf58760 <line:794:1>
|     `-TextComment 0x55b64bf58730 <col:1> Text=" "
|-FunctionDecl 0x55b64beb5750 <line:831:1, line:835:1> line:831:20 k_thread_resource_pool_assign 'void (struct k_thread *, struct k_mem_pool *)' static inline
| |-ParmVarDecl 0x55b64beb55b0 <col:50, col:67> col:67 used thread 'struct k_thread *'
| |-ParmVarDecl 0x55b64beb5638 <line:832:8, col:27> col:27 used pool 'struct k_mem_pool *'
| |-CompoundStmt 0x55b64beb5908 <line:833:1, line:835:1>
| | `-BinaryOperator 0x55b64beb58b8 <line:834:2, col:26> 'struct k_mem_pool *' '='
| |   |-MemberExpr 0x55b64beb5840 <col:2, col:10> 'struct k_mem_pool *' lvalue ->resource_pool 0x55b64be4a8e0
| |   | `-ImplicitCastExpr 0x55b64beb5828 <col:2> 'struct k_thread *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55b64beb5800 <col:2> 'struct k_thread *' lvalue ParmVar 0x55b64beb55b0 'thread' 'struct k_thread *'
| |   `-ImplicitCastExpr 0x55b64beb58a0 <col:26> 'struct k_mem_pool *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b64beb5878 <col:26> 'struct k_mem_pool *' lvalue ParmVar 0x55b64beb5638 'pool' 'struct k_mem_pool *'
| `-FullComment 0x55b64bf58d20 <line:817:3, line:830:1>
|   |-ParagraphComment 0x55b64bf58870 <line:817:3>
|   | `-TextComment 0x55b64bf58840 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf58890 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55b64bf588f0 <col:10, col:51>
|   |   `-TextComment 0x55b64bf588c0 <col:10, col:51> Text=" Assign a resource memory pool to a thread"
|   |-ParagraphComment 0x55b64bf58990 <line:819:3, line:821:51>
|   | |-TextComment 0x55b64bf58910 <line:819:3, col:73> Text=" By default, threads have no resource pool assigned unless their parent"
|   | |-TextComment 0x55b64bf58930 <line:820:3, col:70> Text=" thread has a resource pool, in which case it is inherited. Multiple"
|   | `-TextComment 0x55b64bf58950 <line:821:3, col:51> Text=" threads may be assigned to the same memory pool."
|   |-ParagraphComment 0x55b64bf58a00 <line:823:3, line:824:17>
|   | |-TextComment 0x55b64bf589b0 <line:823:3, col:74> Text=" Changing a thread's resource pool will not migrate allocations from the"
|   | `-TextComment 0x55b64bf589d0 <line:824:3, col:17> Text=" previous pool."
|   |-ParagraphComment 0x55b64bf58a50 <line:826:3>
|   | `-TextComment 0x55b64bf58a20 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf58a70 <col:4, line:828:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf58b50 <line:826:17, line:828:3>
|   |   |-TextComment 0x55b64bf58ad0 <line:826:17, col:77> Text=" Target thread to assign a memory pool for resource requests,"
|   |   |-TextComment 0x55b64bf58af0 <line:827:3, col:75> Text="               or NULL if the thread should no longer have a memory pool."
|   |   `-TextComment 0x55b64bf58b10 <line:828:3> Text=" "
|   |-ParamCommandComment 0x55b64bf58b70 <col:4, line:829:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf58c20 <line:828:15, line:829:3>
|   |   |-TextComment 0x55b64bf58bd0 <line:828:15, col:48> Text=" Memory pool to use for resources."
|   |   `-TextComment 0x55b64bf58bf0 <line:829:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf58c40 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x55b64bf58cb0 <line:830:1>
|     `-TextComment 0x55b64bf58c80 <col:1> Text=" "
|-FunctionDecl 0x55b64beb5a30 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:864:33> col:17 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x55b64beb5930 <col:25, col:31> col:31 ms 's32_t':'int'
| `-FullComment 0x55b64bf59200 <line:855:3, line:863:1>
|   |-ParagraphComment 0x55b64bf58dc0 <line:855:3>
|   | `-TextComment 0x55b64bf58d90 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf58de0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55b64bf58e40 <col:10, col:42>
|   |   `-TextComment 0x55b64bf58e10 <col:10, col:42> Text=" Put the current thread to sleep."
|   |-ParagraphComment 0x55b64bf58f10 <line:857:3, col:78>
|   | |-TextComment 0x55b64bf58e60 <col:3, col:53> Text=" This routine puts the current thread to sleep for "
|   | |-InlineCommandComment 0x55b64bf58eb0 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="duration"
|   | `-TextComment 0x55b64bf58ed0 <col:65, col:78> Text=" milliseconds."
|   |-ParagraphComment 0x55b64bf58f60 <line:859:3>
|   | `-TextComment 0x55b64bf58f30 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf58f80 <col:4, col:45> [in] implicitly Param="ms" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf59010 <col:13, col:45>
|   |   `-TextComment 0x55b64bf58fe0 <col:13, col:45> Text=" Number of milliseconds to sleep."
|   |-ParagraphComment 0x55b64bf59060 <line:861:3>
|   | `-TextComment 0x55b64bf59030 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf59080 <col:4, line:862:44> Name="return"
|   | `-ParagraphComment 0x55b64bf59100 <line:861:11, line:862:44>
|   |   |-TextComment 0x55b64bf590b0 <line:861:11, col:79> Text=" Zero if the requested time has elapsed or the number of milliseconds"
|   |   `-TextComment 0x55b64bf590d0 <line:862:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x55b64bf59120 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x55b64bf59190 <line:863:1>
|     `-TextComment 0x55b64bf59160 <col:1> Text=" "
|-FunctionDecl 0x55b64beb5ba0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:880:34> col:17 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x55b64beb5b18 <col:26, col:32> col:32 us 's32_t':'int'
| `-FullComment 0x55b64bf59700 <line:867:3, line:879:1>
|   |-ParagraphComment 0x55b64bf592a0 <line:867:3>
|   | `-TextComment 0x55b64bf59270 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf592c0 <col:4, col:70> Name="brief"
|   | `-ParagraphComment 0x55b64bf59320 <col:10, col:70>
|   |   `-TextComment 0x55b64bf592f0 <col:10, col:70> Text=" Put the current thread to sleep with microsecond resolution."
|   |-ParagraphComment 0x55b64bf59410 <line:869:3, line:873:71>
|   | |-TextComment 0x55b64bf59340 <line:869:3, col:71> Text=" This function is unlikely to work as expected without kernel tuning."
|   | |-TextComment 0x55b64bf59360 <line:870:3, col:71> Text=" In particular, because the lower bound on the duration of a sleep is"
|   | |-TextComment 0x55b64bf59380 <line:871:3, col:74> Text=" the duration of a tick, CONFIG_SYS_CLOCK_TICKS_PER_SEC must be adjusted"
|   | |-TextComment 0x55b64bf593a0 <line:872:3, col:73> Text=" to achieve the resolution desired. The implications of doing this must"
|   | `-TextComment 0x55b64bf593c0 <line:873:3, col:71> Text=" be understood before attempting to use k_usleep(). Use with caution."
|   |-ParagraphComment 0x55b64bf59460 <line:875:3>
|   | `-TextComment 0x55b64bf59430 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf59480 <col:4, col:45> [in] implicitly Param="us" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf59510 <col:13, col:45>
|   |   `-TextComment 0x55b64bf594e0 <col:13, col:45> Text=" Number of microseconds to sleep."
|   |-ParagraphComment 0x55b64bf59560 <line:877:3>
|   | `-TextComment 0x55b64bf59530 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf59580 <col:4, line:878:44> Name="return"
|   | `-ParagraphComment 0x55b64bf59600 <line:877:11, line:878:44>
|   |   |-TextComment 0x55b64bf595b0 <line:877:11, col:79> Text=" Zero if the requested time has elapsed or the number of microseconds"
|   |   `-TextComment 0x55b64bf595d0 <line:878:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x55b64bf59620 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x55b64bf59690 <line:879:1>
|     `-TextComment 0x55b64bf59660 <col:1> Text=" "
|-FunctionDecl 0x55b64beb5d50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:890:46> col:16 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x55b64beb5c88 <col:28, col:34> col:34 usec_to_wait 'u32_t':'unsigned int'
| `-FullComment 0x55b64bf59a30 <line:883:3, line:888:14>
|   |-ParagraphComment 0x55b64bf597a0 <line:883:3>
|   | `-TextComment 0x55b64bf59770 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf597c0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x55b64bf59820 <col:10, col:48>
|   |   `-TextComment 0x55b64bf597f0 <col:10, col:48> Text=" Cause the current thread to busy wait."
|   |-ParagraphComment 0x55b64bf59910 <line:885:3, line:886:32>
|   | |-TextComment 0x55b64bf59840 <line:885:3, col:76> Text=" This routine causes the current thread to execute a "do nothing" loop for"
|   | |-TextComment 0x55b64bf59860 <line:886:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf598b0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="usec_to_wait"
|   | `-TextComment 0x55b64bf598d0 <col:19, col:32> Text=" microseconds."
|   |-ParagraphComment 0x55b64bf59960 <line:888:3>
|   | `-TextComment 0x55b64bf59930 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf59980 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf599e0 <col:11, col:14>
|       `-TextComment 0x55b64bf599b0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64beb5eb8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:902:28> col:16 k_yield 'void (void)' static inline
| `-FullComment 0x55b64bf59dd0 <line:893:3, line:901:1>
|   |-ParagraphComment 0x55b64bf59ad0 <line:893:3>
|   | `-TextComment 0x55b64bf59aa0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf59af0 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x55b64bf59b50 <col:10, col:35>
|   |   `-TextComment 0x55b64bf59b20 <col:10, col:35> Text=" Yield the current thread."
|   |-ParagraphComment 0x55b64bf59bf0 <line:895:3, line:897:67>
|   | |-TextComment 0x55b64bf59b70 <line:895:3, col:71> Text=" This routine causes the current thread to yield execution to another"
|   | |-TextComment 0x55b64bf59b90 <line:896:3, col:77> Text=" thread of the same or higher priority. If there are no other ready threads"
|   | `-TextComment 0x55b64bf59bb0 <line:897:3, col:67> Text=" of the same or higher priority, the routine returns immediately."
|   |-ParagraphComment 0x55b64bf59c40 <line:899:3>
|   | `-TextComment 0x55b64bf59c10 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf59c60 <col:4, line:900:3> Name="return"
|   | `-ParagraphComment 0x55b64bf59ce0 <line:899:11, line:900:3>
|   |   |-TextComment 0x55b64bf59c90 <line:899:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf59cb0 <line:900:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf59d00 <col:4, col:21> Text=" K-THREAD-015"
|   `-ParagraphComment 0x55b64bf59d70 <line:901:1>
|     `-TextComment 0x55b64bf59d40 <col:1> Text=" "
|-FunctionDecl 0x55b64beb60b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:916:39> col:16 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55b64beb5f98 <col:25, col:33> col:33 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55b64bf5a380 <line:905:3, line:915:1>
|   |-ParagraphComment 0x55b64bf59e70 <line:905:3>
|   | `-TextComment 0x55b64bf59e40 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf59e90 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55b64bf59ef0 <col:10, col:36>
|   |   `-TextComment 0x55b64bf59ec0 <col:10, col:36> Text=" Wake up a sleeping thread."
|   |-ParagraphComment 0x55b64bf59fc0 <line:907:3, col:61>
|   | |-TextComment 0x55b64bf59f10 <col:3, col:37> Text=" This routine prematurely wakes up "
|   | |-InlineCommandComment 0x55b64bf59f60 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55b64bf59f80 <col:47, col:61> Text=" from sleeping."
|   |-ParagraphComment 0x55b64bf5a090 <line:909:3, col:69>
|   | |-TextComment 0x55b64bf59fe0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x55b64bf5a030 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55b64bf5a050 <col:16, col:69> Text=" is not currently sleeping, the routine has no effect."
|   |-ParagraphComment 0x55b64bf5a0e0 <line:911:3>
|   | `-TextComment 0x55b64bf5a0b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf5a100 <col:4, col:38> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf5a190 <col:17, col:38>
|   |   `-TextComment 0x55b64bf5a160 <col:17, col:38> Text=" ID of thread to wake."
|   |-ParagraphComment 0x55b64bf5a1e0 <line:913:3>
|   | `-TextComment 0x55b64bf5a1b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5a200 <col:4, line:914:3> Name="return"
|   | `-ParagraphComment 0x55b64bf5a280 <line:913:11, line:914:3>
|   |   |-TextComment 0x55b64bf5a230 <line:913:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf5a250 <line:914:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf5a2a0 <col:4, col:21> Text=" K-THREAD-014"
|   `-ParagraphComment 0x55b64bf5a310 <line:915:1>
|     `-TextComment 0x55b64bf5a2e0 <col:1> Text=" "
|-FunctionDecl 0x55b64beb6280 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:925:37> col:19 k_current_get 'k_tid_t (void)' static inline
| `-FullComment 0x55b64bf5a6d0 <line:919:3, line:924:1>
|   |-ParagraphComment 0x55b64bf5a420 <line:919:3>
|   | `-TextComment 0x55b64bf5a3f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5a440 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55b64bf5a4c0 <col:10, col:46>
|   |   `-TextComment 0x55b64bf5a470 <col:10, col:46> Text=" Get thread ID of the current thread."
|   |-ParagraphComment 0x55b64bf5a510 <line:921:3>
|   | `-TextComment 0x55b64bf5a4e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5a530 <col:4, col:32> Name="return"
|   | `-ParagraphComment 0x55b64bf5a590 <col:11, col:32>
|   |   `-TextComment 0x55b64bf5a560 <col:11, col:32> Text=" ID of current thread."
|   |-ParagraphComment 0x55b64bf5a5e0 <line:923:3>
|   | `-TextComment 0x55b64bf5a5b0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf5a600 <col:4, col:21> Text=" K-THREAD-013"
|   `-ParagraphComment 0x55b64bf5a670 <line:924:1>
|     `-TextComment 0x55b64bf5a640 <col:1> Text=" "
|-FunctionDecl 0x55b64beb63e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:942:45> col:16 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55b64beb6358 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55b64bf5ac70 <line:928:3, line:941:1>
|   |-ParagraphComment 0x55b64bf5a770 <line:928:3>
|   | `-TextComment 0x55b64bf5a740 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5a790 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x55b64bf5a7f0 <col:10, col:25>
|   |   `-TextComment 0x55b64bf5a7c0 <col:10, col:25> Text=" Abort a thread."
|   |-ParagraphComment 0x55b64bf5a980 <line:930:3, line:935:38>
|   | |-TextComment 0x55b64bf5a810 <line:930:3, col:47> Text=" This routine permanently stops execution of "
|   | |-InlineCommandComment 0x55b64bf5a860 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="thread."
|   | |-TextComment 0x55b64bf5a880 <col:58, col:77> Text=" The thread is taken"
|   | |-TextComment 0x55b64bf5a8a0 <line:931:3, col:73> Text=" off all kernel queues it is part of (i.e. the ready queue, the timeout"
|   | |-TextComment 0x55b64bf5a8c0 <line:932:3, col:75> Text=" queue, or a kernel object wait queue). However, any kernel resources the"
|   | |-TextComment 0x55b64bf5a8e0 <line:933:3, col:72> Text=" thread might currently own (such as mutexes or memory blocks) are not"
|   | |-TextComment 0x55b64bf5a900 <line:934:3, col:77> Text=" released. It is the responsibility of the caller of this routine to ensure"
|   | `-TextComment 0x55b64bf5a920 <line:935:3, col:38> Text=" all necessary cleanup is performed."
|   |-ParagraphComment 0x55b64bf5a9d0 <line:937:3>
|   | `-TextComment 0x55b64bf5a9a0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf5a9f0 <col:4, col:39> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf5aa80 <col:17, col:39>
|   |   `-TextComment 0x55b64bf5aa50 <col:17, col:39> Text=" ID of thread to abort."
|   |-ParagraphComment 0x55b64bf5aad0 <line:939:3>
|   | `-TextComment 0x55b64bf5aaa0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5aaf0 <col:4, line:940:3> Name="return"
|   | `-ParagraphComment 0x55b64bf5ab70 <line:939:11, line:940:3>
|   |   |-TextComment 0x55b64bf5ab20 <line:939:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf5ab40 <line:940:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf5ab90 <col:4, col:21> Text=" K-THREAD-012"
|   `-ParagraphComment 0x55b64bf5ac00 <line:941:1>
|     `-TextComment 0x55b64bf5abd0 <col:1> Text=" "
|-FunctionDecl 0x55b64beb6550 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:955:45> col:16 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55b64beb64c8 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55b64bf5b040 <line:946:3, line:954:1>
|   |-ParagraphComment 0x55b64bf5ad10 <line:946:3>
|   | `-TextComment 0x55b64bf5ace0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5ad30 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55b64bf5ad90 <col:10, col:34>
|   |   `-TextComment 0x55b64bf5ad60 <col:10, col:34> Text=" Start an inactive thread"
|   |-ParagraphComment 0x55b64bf5ae30 <line:948:3, line:950:9>
|   | |-TextComment 0x55b64bf5adb0 <line:948:3, col:73> Text=" If a thread was created with K_FOREVER in the delay parameter, it will"
|   | |-TextComment 0x55b64bf5add0 <line:949:3, col:69> Text=" not be added to the scheduling queue until this function is called"
|   | `-TextComment 0x55b64bf5adf0 <line:950:3, col:9> Text=" on it."
|   |-ParagraphComment 0x55b64bf5ae80 <line:952:3>
|   | `-TextComment 0x55b64bf5ae50 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf5aea0 <col:4, line:953:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf5af50 <line:952:17, line:953:3>
|   |   |-TextComment 0x55b64bf5af00 <line:952:17, col:32> Text=" thread to start"
|   |   `-TextComment 0x55b64bf5af20 <line:953:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf5af70 <col:4, col:21> Text=" K-THREAD-011"
|   `-ParagraphComment 0x55b64bf5afe0 <line:954:1>
|     `-TextComment 0x55b64bf5afb0 <col:1> Text=" "
|-RecordDecl 0x55b64beb6628 <line:964:1, line:977:1> line:964:8 struct _static_thread_data definition
| |-FieldDecl 0x55b64beb66f8 <line:965:2, col:19> col:19 init_thread 'struct k_thread *'
| |-FieldDecl 0x55b64beb6750 <line:966:2, col:20> col:20 init_stack 'k_thread_stack_t *'
| |-FieldDecl 0x55b64beb67b0 <line:967:2, col:15> col:15 init_stack_size 'unsigned int'
| |-FieldDecl 0x55b64beb6808 <line:968:2, col:19> col:19 init_entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-FieldDecl 0x55b64beb6868 <line:969:2, col:8> col:8 init_p1 'void *'
| |-FieldDecl 0x55b64beb68c8 <line:970:2, col:8> col:8 init_p2 'void *'
| |-FieldDecl 0x55b64beb6928 <line:971:2, col:8> col:8 init_p3 'void *'
| |-FieldDecl 0x55b64beb6988 <line:972:2, col:6> col:6 init_prio 'int'
| |-FieldDecl 0x55b64beb69e0 <line:973:2, col:8> col:8 init_options 'u32_t':'unsigned int'
| |-FieldDecl 0x55b64beb6a38 <line:974:2, col:8> col:8 init_delay 's32_t':'int'
| |-FieldDecl 0x55b64beb6b20 <line:975:2, col:25> col:9 init_abort 'void (*)(void)'
| `-FieldDecl 0x55b64beb6b80 <line:976:2, col:14> col:14 init_name 'const char *'
|-FunctionDecl 0x55b64beb6d78 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1053:51> col:15 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x55b64beb6c68 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55b64bf5b550 <line:1044:3, line:1052:1>
|   |-ParagraphComment 0x55b64bf5b0e0 <line:1044:3>
|   | `-TextComment 0x55b64bf5b0b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5b100 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55b64bf5b160 <col:10, col:34>
|   |   `-TextComment 0x55b64bf5b130 <col:10, col:34> Text=" Get a thread's priority."
|   |-ParagraphComment 0x55b64bf5b200 <line:1046:3, col:39>
|   | |-TextComment 0x55b64bf5b180 <col:3, col:37> Text=" This routine gets the priority of "
|   | `-InlineCommandComment 0x55b64bf5b1d0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x55b64bf5b250 <line:1048:3>
|   | `-TextComment 0x55b64bf5b220 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf5b270 <col:4, col:55> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf5b300 <col:17, col:55>
|   |   `-TextComment 0x55b64bf5b2d0 <col:17, col:55> Text=" ID of thread whose priority is needed."
|   |-ParagraphComment 0x55b64bf5b350 <line:1050:3>
|   | `-TextComment 0x55b64bf5b320 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5b370 <col:4, line:1051:3> Name="return"
|   | `-ParagraphComment 0x55b64bf5b450 <line:1050:11, line:1051:3>
|   |   |-TextComment 0x55b64bf5b3a0 <line:1050:11, col:23> Text=" Priority of "
|   |   |-InlineCommandComment 0x55b64bf5b3f0 <col:24, col:25> Name="a" RenderEmphasized Arg[0]="thread."
|   |   `-TextComment 0x55b64bf5b410 <line:1051:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf5b470 <col:4, col:21> Text=" K-THREAD-009"
|   `-ParagraphComment 0x55b64bf5b4e0 <line:1052:1>
|     `-TextComment 0x55b64bf5b4b0 <col:1> Text=" "
|-FunctionDecl 0x55b64beb76d0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1083:62> col:16 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x55b64beb6e58 <col:38, col:46> col:46 thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55b64beb6ed0 <col:54, col:58> col:58 prio 'int'
| `-FullComment 0x55b64bf5bf10 <line:1056:3, line:1082:1>
|   |-ParagraphComment 0x55b64bf5b5f0 <line:1056:3>
|   | `-TextComment 0x55b64bf5b5c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5b610 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55b64bf5b670 <col:10, col:34>
|   |   `-TextComment 0x55b64bf5b640 <col:10, col:34> Text=" Set a thread's priority."
|   |-ParagraphComment 0x55b64bf5b710 <line:1058:3, col:54>
|   | |-TextComment 0x55b64bf5b690 <col:3, col:52> Text=" This routine immediately changes the priority of "
|   | `-InlineCommandComment 0x55b64bf5b6e0 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x55b64bf5b800 <line:1060:3, line:1061:10>
|   | |-TextComment 0x55b64bf5b730 <line:1060:3, col:64> Text=" Rescheduling can occur immediately depending on the priority "
|   | |-InlineCommandComment 0x55b64bf5b780 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x55b64bf5b7a0 <col:74, col:76> Text=" is"
|   | `-TextComment 0x55b64bf5b7c0 <line:1061:3, col:10> Text=" set to:"
|   |-ParagraphComment 0x55b64bf5b8f0 <line:1063:3, line:1064:75>
|   | |-TextComment 0x55b64bf5b820 <line:1063:3, col:71> Text=" - If its priority is raised above the priority of the caller of this"
|   | |-TextComment 0x55b64bf5b840 <line:1064:3, col:44> Text=" function, and the caller is preemptible, "
|   | |-InlineCommandComment 0x55b64bf5b890 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55b64bf5b8b0 <col:54, col:75> Text=" will be scheduled in."
|   |-ParagraphComment 0x55b64bf5b990 <line:1066:3, line:1068:41>
|   | |-TextComment 0x55b64bf5b910 <line:1066:3, col:75> Text=" - If the caller operates on itself, it lowers its priority below that of"
|   | |-TextComment 0x55b64bf5b930 <line:1067:3, col:76> Text=" other threads in the system, and the caller is preemptible, the thread of"
|   | `-TextComment 0x55b64bf5b950 <line:1068:3, col:41> Text=" highest priority will be scheduled in."
|   |-ParagraphComment 0x55b64bf5ba30 <line:1070:3, line:1072:20>
|   | |-TextComment 0x55b64bf5b9b0 <line:1070:3, col:74> Text=" Priority can be assigned in the range of -CONFIG_NUM_COOP_PRIORITIES to"
|   | |-TextComment 0x55b64bf5b9d0 <line:1071:3, col:76> Text=" CONFIG_NUM_PREEMPT_PRIORITIES-1, where -CONFIG_NUM_COOP_PRIORITIES is the"
|   | `-TextComment 0x55b64bf5b9f0 <line:1072:3, col:20> Text=" highest priority."
|   |-ParagraphComment 0x55b64bf5ba80 <line:1074:3>
|   | `-TextComment 0x55b64bf5ba50 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf5baa0 <col:4, line:1075:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf5bb50 <line:1074:17, line:1075:3>
|   |   |-TextComment 0x55b64bf5bb00 <line:1074:17, col:58> Text=" ID of thread whose priority is to be set."
|   |   `-TextComment 0x55b64bf5bb20 <line:1075:3> Text=" "
|   |-ParamCommandComment 0x55b64bf5bb70 <col:4, col:28> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf5bc00 <col:15, col:28>
|   |   `-TextComment 0x55b64bf5bbd0 <col:15, col:28> Text=" New priority."
|   |-ParagraphComment 0x55b64bf5bc50 <line:1077:3>
|   | `-TextComment 0x55b64bf5bc20 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5bc70 <col:4, line:1078:57> Name="warning"
|   | `-ParagraphComment 0x55b64bf5bcf0 <line:1077:12, line:1078:57>
|   |   |-TextComment 0x55b64bf5bca0 <line:1077:12, col:73> Text=" Changing the priority of a thread currently involved in mutex"
|   |   `-TextComment 0x55b64bf5bcc0 <line:1078:3, col:57> Text=" priority inheritance may result in undefined behavior."
|   |-ParagraphComment 0x55b64bf5bd40 <line:1080:3>
|   | `-TextComment 0x55b64bf5bd10 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5bd60 <col:4, line:1081:3> Name="return"
|   | `-ParagraphComment 0x55b64bf5bde0 <line:1080:11, line:1081:3>
|   |   |-TextComment 0x55b64bf5bd90 <line:1080:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf5bdb0 <line:1081:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf5be00 <col:4, col:21> Text=" K-THREAD-008"
|   `-ParagraphComment 0x55b64bf5be70 <line:1082:1>
|     `-TextComment 0x55b64bf5be40 <col:1> Text=" "
|-FunctionDecl 0x55b64beb7840 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1213:47> col:16 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55b64beb77b8 <col:33, col:41> col:41 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55b64bf5c620 <line:1196:3, line:1212:1>
|   |-ParagraphComment 0x55b64bf5bfb0 <line:1196:3>
|   | `-TextComment 0x55b64bf5bf80 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5bfd0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55b64bf5c030 <col:10, col:27>
|   |   `-TextComment 0x55b64bf5c000 <col:10, col:27> Text=" Suspend a thread."
|   |-ParagraphComment 0x55b64bf5c240 <line:1198:3, line:1204:48>
|   | |-TextComment 0x55b64bf5c050 <line:1198:3, col:58> Text=" This routine prevents the kernel scheduler from making "
|   | |-InlineCommandComment 0x55b64bf5c0a0 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x55b64bf5c0c0 <line:1199:3, col:56> Text=" the current thread. All other internal operations on "
|   | |-InlineCommandComment 0x55b64bf5c110 <col:57, col:58> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x55b64bf5c130 <col:66, col:69> Text=" are"
|   | |-TextComment 0x55b64bf5c150 <line:1200:3, col:68> Text=" still performed; for example, kernel objects it is waiting on are"
|   | |-TextComment 0x55b64bf5c170 <line:1201:3, col:55> Text=" still handed to it.  Note that any existing timeouts"
|   | |-TextComment 0x55b64bf5c190 <line:1202:3, col:66> Text=" (e.g. k_sleep(), or a timeout argument to k_sem_take() et. al.)"
|   | |-TextComment 0x55b64bf5c1b0 <line:1203:3, col:62> Text=" will be canceled.  On resume, the thread will begin running"
|   | `-TextComment 0x55b64bf5c1d0 <line:1204:3, col:48> Text=" immediately and return from the blocked call."
|   |-ParagraphComment 0x55b64bf5c310 <line:1206:3, col:64>
|   | |-TextComment 0x55b64bf5c260 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x55b64bf5c2b0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55b64bf5c2d0 <col:16, col:64> Text=" is already suspended, the routine has no effect."
|   |-ParagraphComment 0x55b64bf5c360 <line:1208:3>
|   | `-TextComment 0x55b64bf5c330 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf5c380 <col:4, col:41> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf5c410 <col:17, col:41>
|   |   `-TextComment 0x55b64bf5c3e0 <col:17, col:41> Text=" ID of thread to suspend."
|   |-ParagraphComment 0x55b64bf5c460 <line:1210:3>
|   | `-TextComment 0x55b64bf5c430 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5c480 <col:4, line:1211:3> Name="return"
|   | `-ParagraphComment 0x55b64bf5c520 <line:1210:11, line:1211:3>
|   |   |-TextComment 0x55b64bf5c4d0 <line:1210:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf5c4f0 <line:1211:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf5c540 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x55b64bf5c5b0 <line:1212:1>
|     `-TextComment 0x55b64bf5c580 <col:1> Text=" "
|-FunctionDecl 0x55b64beb79b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1228:46> col:16 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55b64beb7928 <col:32, col:40> col:40 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55b64bf5cbf0 <line:1216:3, line:1227:1>
|   |-ParagraphComment 0x55b64bf5c6c0 <line:1216:3>
|   | `-TextComment 0x55b64bf5c690 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5c6e0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55b64bf5c740 <col:10, col:36>
|   |   `-TextComment 0x55b64bf5c710 <col:10, col:36> Text=" Resume a suspended thread."
|   |-ParagraphComment 0x55b64bf5c830 <line:1218:3, line:1219:50>
|   | |-TextComment 0x55b64bf5c760 <line:1218:3, col:52> Text=" This routine allows the kernel scheduler to make "
|   | |-InlineCommandComment 0x55b64bf5c7b0 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x55b64bf5c7d0 <col:62, col:73> Text=" the current"
|   | `-TextComment 0x55b64bf5c7f0 <line:1219:3, col:50> Text=" thread, when it is next eligible for that role."
|   |-ParagraphComment 0x55b64bf5c900 <line:1221:3, col:70>
|   | |-TextComment 0x55b64bf5c850 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x55b64bf5c8a0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55b64bf5c8c0 <col:16, col:70> Text=" is not currently suspended, the routine has no effect."
|   |-ParagraphComment 0x55b64bf5c950 <line:1223:3>
|   | `-TextComment 0x55b64bf5c920 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf5c970 <col:4, col:40> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf5ca00 <col:17, col:40>
|   |   `-TextComment 0x55b64bf5c9d0 <col:17, col:40> Text=" ID of thread to resume."
|   |-ParagraphComment 0x55b64bf5ca50 <line:1225:3>
|   | `-TextComment 0x55b64bf5ca20 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5ca70 <col:4, line:1226:3> Name="return"
|   | `-ParagraphComment 0x55b64bf5caf0 <line:1225:11, line:1226:3>
|   |   |-TextComment 0x55b64bf5caa0 <line:1225:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf5cac0 <line:1226:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf5cb10 <col:4, col:21> Text=" K-THREAD-006"
|   `-ParagraphComment 0x55b64bf5cb80 <line:1227:1>
|     `-TextComment 0x55b64bf5cb50 <col:1> Text=" "
|-FunctionDecl 0x55b64beb7c20 <line:1258:1, col:57> col:13 k_sched_time_slice_set 'void (s32_t, int)' extern
| |-ParmVarDecl 0x55b64beb7a98 <col:36, col:42> col:42 slice 's32_t':'int'
| |-ParmVarDecl 0x55b64beb7b10 <col:49, col:53> col:53 prio 'int'
| `-FullComment 0x55b64bf5d540 <line:1231:3, line:1256:14>
|   |-ParagraphComment 0x55b64bf5cc90 <line:1231:3>
|   | `-TextComment 0x55b64bf5cc60 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5ccb0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55b64bf5cd10 <col:10, col:44>
|   |   `-TextComment 0x55b64bf5cce0 <col:10, col:44> Text=" Set time-slicing period and scope."
|   |-ParagraphComment 0x55b64bf5cd80 <line:1233:3, line:1234:23>
|   | |-TextComment 0x55b64bf5cd30 <line:1233:3, col:72> Text=" This routine specifies how the scheduler will perform time slicing of"
|   | `-TextComment 0x55b64bf5cd50 <line:1234:3, col:23> Text=" preemptible threads."
|   |-ParagraphComment 0x55b64bf5cf70 <line:1236:3, line:1240:74>
|   | |-TextComment 0x55b64bf5cda0 <line:1236:3, col:27> Text=" To enable time slicing, "
|   | |-InlineCommandComment 0x55b64bf5cdf0 <col:28, col:29> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x55b64bf5ce10 <col:36, col:67> Text=" must be non-zero. The scheduler"
|   | |-TextComment 0x55b64bf5ce30 <line:1237:3, col:69> Text=" ensures that no thread runs for more than the specified time limit"
|   | |-TextComment 0x55b64bf5ce50 <line:1238:3, col:71> Text=" before other threads of that priority are given a chance to execute."
|   | |-TextComment 0x55b64bf5ce70 <line:1239:3, col:44> Text=" Any thread whose priority is higher than "
|   | |-InlineCommandComment 0x55b64bf5cec0 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="prio"
|   | |-TextComment 0x55b64bf5cee0 <col:52, col:72> Text=" is exempted, and may"
|   | `-TextComment 0x55b64bf5cf00 <line:1240:3, col:74> Text=" execute as long as desired without being preempted due to time slicing."
|   |-ParagraphComment 0x55b64bf5d030 <line:1242:3, line:1245:32>
|   | |-TextComment 0x55b64bf5cf90 <line:1242:3, col:80> Text=" Time slicing only limits the maximum amount of time a thread may continuously"
|   | |-TextComment 0x55b64bf5cfb0 <line:1243:3, col:74> Text=" execute. Once the scheduler selects a thread for execution, there is no"
|   | |-TextComment 0x55b64bf5cfd0 <line:1244:3, col:79> Text=" minimum guaranteed time the thread will execute before threads of greater or"
|   | `-TextComment 0x55b64bf5cff0 <line:1245:3, col:32> Text=" equal priority are scheduled."
|   |-ParagraphComment 0x55b64bf5d0d0 <line:1247:3, line:1249:46>
|   | |-TextComment 0x55b64bf5d050 <line:1247:3, col:68> Text=" When the current thread is the only one of that priority eligible"
|   | |-TextComment 0x55b64bf5d070 <line:1248:3, col:71> Text=" for execution, this routine has no effect; the thread is immediately"
|   | `-TextComment 0x55b64bf5d090 <line:1249:3, col:46> Text=" rescheduled after the slice period expires."
|   |-ParagraphComment 0x55b64bf5d220 <line:1251:3, col:65>
|   | |-TextComment 0x55b64bf5d0f0 <col:3, col:36> Text=" To disable timeslicing, set both "
|   | |-InlineCommandComment 0x55b64bf5d140 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x55b64bf5d160 <col:45, col:49> Text=" and "
|   | |-InlineCommandComment 0x55b64bf5d1b0 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="prio"
|   | `-TextComment 0x55b64bf5d1d0 <col:57, col:65> Text=" to zero."
|   |-ParagraphComment 0x55b64bf5d270 <line:1253:3>
|   | `-TextComment 0x55b64bf5d240 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf5d290 <col:4, line:1254:3> [in] implicitly Param="slice" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf5d340 <line:1253:16, line:1254:3>
|   |   |-TextComment 0x55b64bf5d2f0 <line:1253:16, col:60> Text=" Maximum time slice length (in milliseconds)."
|   |   `-TextComment 0x55b64bf5d310 <line:1254:3> Text=" "
|   |-ParamCommandComment 0x55b64bf5d360 <col:4, col:71> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf5d3f0 <col:15, col:71>
|   |   `-TextComment 0x55b64bf5d3c0 <col:15, col:71> Text=" Highest thread priority level eligible for time slicing."
|   |-ParagraphComment 0x55b64bf5d440 <line:1256:3>
|   | `-TextComment 0x55b64bf5d410 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf5d460 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf5d4c0 <col:11, col:14>
|       `-TextComment 0x55b64bf5d490 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64beb7de8 <line:1278:1, col:29> col:13 k_is_in_isr 'bool (void)' extern
| `-FullComment 0x55b64bf5d970 <line:1268:3, line:1276:37>
|   |-ParagraphComment 0x55b64bf5d5e0 <line:1268:3>
|   | `-TextComment 0x55b64bf5d5b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5d600 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x55b64bf5d660 <col:10, col:58>
|   |   `-TextComment 0x55b64bf5d630 <col:10, col:58> Text=" Determine if code is running at interrupt level."
|   |-ParagraphComment 0x55b64bf5d6d0 <line:1270:3, line:1271:36>
|   | |-TextComment 0x55b64bf5d680 <line:1270:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x55b64bf5d6a0 <line:1271:3, col:36> Text=" whether it is a thread or an ISR."
|   |-ParagraphComment 0x55b64bf5d720 <line:1273:3>
|   | `-TextComment 0x55b64bf5d6f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5d740 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf5d7a0 <col:9, col:31>
|   |   `-TextComment 0x55b64bf5d770 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf5d7f0 <line:1275:3>
|   | `-TextComment 0x55b64bf5d7c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5d810 <col:4, line:1276:3> Name="return"
|   | `-ParagraphComment 0x55b64bf5d890 <line:1275:11, line:1276:3>
|   |   |-TextComment 0x55b64bf5d840 <line:1275:11, col:40> Text=" false if invoked by a thread."
|   |   `-TextComment 0x55b64bf5d860 <line:1276:3> Text=" "
|   `-BlockCommandComment 0x55b64bf5d8b0 <col:4, col:37> Name="return"
|     `-ParagraphComment 0x55b64bf5d910 <col:11, col:37>
|       `-TextComment 0x55b64bf5d8e0 <col:11, col:37> Text=" true if invoked by an ISR."
|-FunctionDecl 0x55b64beb7f50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1296:39> col:15 k_is_preempt_thread 'int (void)' static inline
| `-FullComment 0x55b64bf5de80 <line:1281:3, line:1294:55>
|   |-ParagraphComment 0x55b64bf5da10 <line:1281:3>
|   | `-TextComment 0x55b64bf5d9e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5da30 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x55b64bf5da90 <col:10, col:63>
|   |   `-TextComment 0x55b64bf5da60 <col:10, col:63> Text=" Determine if code is running in a preemptible thread."
|   |-ParagraphComment 0x55b64bf5db30 <line:1283:3, line:1285:52>
|   | |-TextComment 0x55b64bf5dab0 <line:1283:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | |-TextComment 0x55b64bf5dad0 <line:1284:3, col:78> Text=" whether it can be preempted by another thread. The routine returns a 'true'"
|   | `-TextComment 0x55b64bf5daf0 <line:1285:3, col:52> Text=" value if all of the following conditions are met:"
|   |-ParagraphComment 0x55b64bf5dbd0 <line:1287:3, line:1289:45>
|   | |-TextComment 0x55b64bf5db50 <line:1287:3, col:49> Text=" - The code is running in a thread, not at ISR."
|   | |-TextComment 0x55b64bf5db70 <line:1288:3, col:55> Text=" - The thread's priority is in the preemptible range."
|   | `-TextComment 0x55b64bf5db90 <line:1289:3, col:45> Text=" - The thread has not locked the scheduler."
|   |-ParagraphComment 0x55b64bf5dc20 <line:1291:3>
|   | `-TextComment 0x55b64bf5dbf0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5dc40 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf5dca0 <col:9, col:31>
|   |   `-TextComment 0x55b64bf5dc70 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf5dcf0 <line:1293:3>
|   | `-TextComment 0x55b64bf5dcc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5dd10 <col:4, line:1294:3> Name="return"
|   | `-ParagraphComment 0x55b64bf5dd90 <line:1293:11, line:1294:3>
|   |   |-TextComment 0x55b64bf5dd40 <line:1293:11, col:61> Text=" 0 if invoked by an ISR or by a cooperative thread."
|   |   `-TextComment 0x55b64bf5dd60 <line:1294:3> Text=" "
|   `-BlockCommandComment 0x55b64bf5ddb0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55b64bf5de10 <col:11, col:55>
|       `-TextComment 0x55b64bf5dde0 <col:11, col:55> Text=" Non-zero if invoked by a preemptible thread."
|-FunctionDecl 0x55b64beb80a8 <line:1309:1, line:1314:1> line:1309:20 k_is_pre_kernel 'bool (void)' static inline
| |-CompoundStmt 0x55b64beb82f8 <line:1310:1, line:1314:1>
| | |-DeclStmt 0x55b64beb81c8 <line:1311:2, col:31>
| | | `-VarDecl 0x55b64beb8158 parent 0x55b64bd0f698 <col:2, col:14> col:14 used z_sys_post_kernel 'bool' extern
| | `-ReturnStmt 0x55b64beb8258 <line:1313:2, col:10>
| |   `-ImplicitCastExpr 0x55b64beb8240 <col:9, col:10> 'bool' <IntegralToBoolean>
| |     `-UnaryOperator 0x55b64beb8220 <col:9, col:10> 'int' prefix '!'
| |       `-ImplicitCastExpr 0x55b64beb8208 <col:10> 'bool' <LValueToRValue>
| |         `-DeclRefExpr 0x55b64beb81e0 <col:10> 'bool' lvalue Var 0x55b64beb8158 'z_sys_post_kernel' 'bool'
| `-FullComment 0x55b64bf5e2b0 <line:1299:3, line:1307:67>
|   |-ParagraphComment 0x55b64bf5df20 <line:1299:3>
|   | `-TextComment 0x55b64bf5def0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5df40 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x55b64bf5dfa0 <col:10, col:64>
|   |   `-TextComment 0x55b64bf5df70 <col:10, col:64> Text=" Test whether startup is in the before-main-task phase."
|   |-ParagraphComment 0x55b64bf5e010 <line:1301:3, line:1302:62>
|   | |-TextComment 0x55b64bf5dfc0 <line:1301:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x55b64bf5dfe0 <line:1302:3, col:62> Text=" whether it being invoked before the kernel is fully active."
|   |-ParagraphComment 0x55b64bf5e060 <line:1304:3>
|   | `-TextComment 0x55b64bf5e030 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5e080 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf5e0e0 <col:9, col:31>
|   |   `-TextComment 0x55b64bf5e0b0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf5e130 <line:1306:3>
|   | `-TextComment 0x55b64bf5e100 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5e150 <col:4, line:1307:3> Name="return"
|   | `-ParagraphComment 0x55b64bf5e1d0 <line:1306:11, line:1307:3>
|   |   |-TextComment 0x55b64bf5e180 <line:1306:11, col:60> Text=" true if invoked before post-kernel initialization"
|   |   `-TextComment 0x55b64bf5e1a0 <line:1307:3> Text=" "
|   `-BlockCommandComment 0x55b64bf5e1f0 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x55b64bf5e250 <col:11, col:67>
|       `-TextComment 0x55b64bf5e220 <col:11, col:67> Text=" false if invoked during/after post-kernel initialization"
|-FunctionDecl 0x55b64beb83a8 <line:1343:1, col:30> col:13 k_sched_lock 'void (void)' extern
| `-FullComment 0x55b64bf5f1a0 <line:1326:3, line:1341:14>
|   |-ParagraphComment 0x55b64bf5e350 <line:1326:3>
|   | `-TextComment 0x55b64bf5e320 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5e370 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55b64bf5e3d0 <col:10, col:29>
|   |   `-TextComment 0x55b64bf5e3a0 <col:10, col:29> Text=" Lock the scheduler."
|   |-ParagraphComment 0x55b64bf5eee0 <line:1328:3, line:1332:78>
|   | |-TextComment 0x55b64bf5e3f0 <line:1328:3, col:75> Text=" This routine prevents the current thread from being preempted by another"
|   | |-TextComment 0x55b64bf5e410 <line:1329:3, col:75> Text=" thread by instructing the scheduler to treat it as a cooperative thread."
|   | |-TextComment 0x55b64bf5e430 <line:1330:3, col:74> Text=" If the thread subsequently performs an operation that makes it unready,"
|   | |-TextComment 0x55b64bf5e450 <line:1331:3, col:72> Text=" it will be context switched out in the normal manner. When the thread"
|   | `-TextComment 0x55b64bf5e470 <line:1332:3, col:78> Text=" again becomes the current thread, its non-preemptible status is maintained."
|   |-ParagraphComment 0x55b64bf5ef30 <line:1334:3, col:42>
|   | `-TextComment 0x55b64bf5ef00 <col:3, col:42> Text=" This routine can be called recursively."
|   |-ParagraphComment 0x55b64bf5ef80 <line:1336:3>
|   | `-TextComment 0x55b64bf5ef50 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5efa0 <col:4, line:1339:68> Name="note"
|   | `-ParagraphComment 0x55b64bf5f070 <line:1336:9, line:1339:68>
|   |   |-TextComment 0x55b64bf5efd0 <line:1336:9, col:68> Text=" k_sched_lock() and k_sched_unlock() should normally be used"
|   |   |-TextComment 0x55b64bf5eff0 <line:1337:3, col:72> Text=" when the operation being performed can be safely interrupted by ISRs."
|   |   |-TextComment 0x55b64bf5f010 <line:1338:3, col:70> Text=" However, if the amount of processing involved is very small, better"
|   |   `-TextComment 0x55b64bf5f030 <line:1339:3, col:68> Text=" performance may be obtained by using irq_lock() and irq_unlock()."
|   |-ParagraphComment 0x55b64bf5f0c0 <line:1341:3>
|   | `-TextComment 0x55b64bf5f090 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf5f0e0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf5f140 <col:11, col:14>
|       `-TextComment 0x55b64bf5f110 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64beb8508 <line:1354:1, col:32> col:13 k_sched_unlock 'void (void)' extern
| `-FullComment 0x55b64bf5f480 <line:1346:3, line:1352:14>
|   |-ParagraphComment 0x55b64bf5f240 <line:1346:3>
|   | `-TextComment 0x55b64bf5f210 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5f260 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x55b64bf5f2c0 <col:10, col:31>
|   |   `-TextComment 0x55b64bf5f290 <col:10, col:31> Text=" Unlock the scheduler."
|   |-ParagraphComment 0x55b64bf5f360 <line:1348:3, line:1350:41>
|   | |-TextComment 0x55b64bf5f2e0 <line:1348:3, col:73> Text=" This routine reverses the effect of a previous call to k_sched_lock()."
|   | |-TextComment 0x55b64bf5f300 <line:1349:3, col:77> Text=" A thread must call the routine once for each time it called k_sched_lock()"
|   | `-TextComment 0x55b64bf5f320 <line:1350:3, col:41> Text=" before the thread becomes preemptible."
|   |-ParagraphComment 0x55b64bf5f3b0 <line:1352:3>
|   | `-TextComment 0x55b64bf5f380 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf5f3d0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf5f430 <col:11, col:14>
|       `-TextComment 0x55b64bf5f400 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64beb86e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1371:52> col:16 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x55b64beb85f0 <col:41, col:47> col:47 value 'void *'
| `-FullComment 0x55b64bf5fa10 <line:1357:3, line:1370:1>
|   |-ParagraphComment 0x55b64bf5f520 <line:1357:3>
|   | `-TextComment 0x55b64bf5f4f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5f540 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf5f5a0 <col:10, col:43>
|   |   `-TextComment 0x55b64bf5f570 <col:10, col:43> Text=" Set current thread's custom data."
|   |-ParagraphComment 0x55b64bf5f640 <line:1359:3, col:71>
|   | |-TextComment 0x55b64bf5f5c0 <col:3, col:63> Text=" This routine sets the custom data for the current thread to "
|   | |-TextComment 0x55b64bf5f5e0 <col:64> Text="@"
|   | `-TextComment 0x55b64bf5f600 <col:65, col:71> Text=" value."
|   |-ParagraphComment 0x55b64bf5f6e0 <line:1361:3, line:1363:44>
|   | |-TextComment 0x55b64bf5f660 <line:1361:3, col:72> Text=" Custom data is not used by the kernel itself, and is freely available"
|   | |-TextComment 0x55b64bf5f680 <line:1362:3, col:68> Text=" for a thread to use as it sees fit. It can be used as a framework"
|   | `-TextComment 0x55b64bf5f6a0 <line:1363:3, col:44> Text=" upon which to build thread-local storage."
|   |-ParagraphComment 0x55b64bf5f730 <line:1365:3>
|   | `-TextComment 0x55b64bf5f700 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf5f750 <col:4, col:38> [in] implicitly Param="value" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf5f7e0 <col:16, col:38>
|   |   `-TextComment 0x55b64bf5f7b0 <col:16, col:38> Text=" New custom data value."
|   |-ParagraphComment 0x55b64bf5f830 <line:1367:3>
|   | `-TextComment 0x55b64bf5f800 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5f850 <col:4, col:14> Name="return"
|   | `-ParagraphComment 0x55b64bf5f8b0 <col:11, col:14>
|   |   `-TextComment 0x55b64bf5f880 <col:11, col:14> Text=" N/A"
|   |-ParagraphComment 0x55b64bf5f900 <line:1369:3>
|   | `-TextComment 0x55b64bf5f8d0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf5f920 <col:4, col:21> Text=" K-THREAD-016"
|   `-ParagraphComment 0x55b64bf5f990 <line:1370:1>
|     `-TextComment 0x55b64bf5f960 <col:1> Text=" "
|-FunctionDecl 0x55b64beb8888 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1381:46> col:17 k_thread_custom_data_get 'void *(void)' static inline
| `-FullComment 0x55b64bf5fd60 <line:1374:3, line:1380:1>
|   |-ParagraphComment 0x55b64bf5fab0 <line:1374:3>
|   | `-TextComment 0x55b64bf5fa80 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5fad0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf5fb30 <col:10, col:43>
|   |   `-TextComment 0x55b64bf5fb00 <col:10, col:43> Text=" Get current thread's custom data."
|   |-ParagraphComment 0x55b64bf5fb80 <line:1376:3, col:63>
|   | `-TextComment 0x55b64bf5fb50 <col:3, col:63> Text=" This routine returns the custom data for the current thread."
|   |-ParagraphComment 0x55b64bf5fbd0 <line:1378:3>
|   | `-TextComment 0x55b64bf5fba0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5fbf0 <col:4, line:1379:3> Name="return"
|   | `-ParagraphComment 0x55b64bf5fc70 <line:1378:11, line:1379:3>
|   |   |-TextComment 0x55b64bf5fc20 <line:1378:11, col:37> Text=" Current custom data value."
|   |   `-TextComment 0x55b64bf5fc40 <line:1379:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf5fc90 <col:4, col:21> Text=" K-THREAD-007"
|   `-ParagraphComment 0x55b64bf5fd00 <line:1380:1>
|     `-TextComment 0x55b64bf5fcd0 <col:1> Text=" "
|-FunctionDecl 0x55b64beb8af8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1396:69> col:15 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x55b64beb8968 <col:33, col:41> col:41 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55b64beb89e0 <col:52, col:64> col:64 value 'const char *'
| `-FullComment 0x55b64bf60320 <line:1384:3, line:1394:39>
|   |-ParagraphComment 0x55b64bf5fe00 <line:1384:3>
|   | `-TextComment 0x55b64bf5fdd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf5fe20 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55b64bf5fe80 <col:10, col:33>
|   |   `-TextComment 0x55b64bf5fe50 <col:10, col:33> Text=" Set current thread name"
|   |-ParagraphComment 0x55b64bf5fef0 <line:1386:3, line:1387:25>
|   | |-TextComment 0x55b64bf5fea0 <line:1386:3, col:75> Text=" Set the name of the thread to be used when THREAD_MONITOR is enabled for"
|   | `-TextComment 0x55b64bf5fec0 <line:1387:3, col:25> Text=" tracing and debugging."
|   |-ParagraphComment 0x55b64bf5ff40 <line:1389:3>
|   | `-TextComment 0x55b64bf5ff10 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf5ff60 <col:4, line:1390:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf60010 <line:1389:20, line:1390:3>
|   |   |-TextComment 0x55b64bf5ffc0 <line:1389:20, col:73> Text=" Thread to set name, or NULL to set the current thread"
|   |   `-TextComment 0x55b64bf5ffe0 <line:1390:3> Text=" "
|   `-ParamCommandComment 0x55b64bf60030 <col:4, line:1394:39> [in] implicitly Param="value" ParamIndex=1
|     `-ParagraphComment 0x55b64bf602d0 <line:1390:16, line:1394:39>
|       |-TextComment 0x55b64bf60090 <line:1390:16, col:27> Text=" Name string"
|       |-TextComment 0x55b64bf600b0 <line:1391:3> Text=" "
|       |-InlineCommandComment 0x55b64bf60100 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55b64bf60120 <col:11, col:23> Text=" 0 on success"
|       |-TextComment 0x55b64bf60140 <line:1392:3> Text=" "
|       |-InlineCommandComment 0x55b64bf60160 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55b64bf60180 <col:11, col:59> Text=" -EFAULT Memory access error with supplied string"
|       |-TextComment 0x55b64bf601a0 <line:1393:3> Text=" "
|       |-InlineCommandComment 0x55b64bf601c0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55b64bf601e0 <col:11, col:63> Text=" -ENOSYS Thread name configuration option not enabled"
|       |-TextComment 0x55b64bf60200 <line:1394:3> Text=" "
|       |-InlineCommandComment 0x55b64bf60220 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x55b64bf60240 <col:11, col:39> Text=" -EINVAL Thread name too long"
|-FunctionDecl 0x55b64beb8cf8 <line:1406:1, col:48> col:13 k_thread_name_get 'const char *(k_tid_t)'
| |-ParmVarDecl 0x55b64beb8be8 <col:31, col:39> col:39 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55b64bf60650 <line:1399:3, line:1404:60>
|   |-ParagraphComment 0x55b64bf603c0 <line:1399:3>
|   | `-TextComment 0x55b64bf60390 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf603e0 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x55b64bf60440 <col:10, col:25>
|   |   `-TextComment 0x55b64bf60410 <col:10, col:25> Text=" Get thread name"
|   |-ParagraphComment 0x55b64bf60490 <line:1401:3, col:27>
|   | `-TextComment 0x55b64bf60460 <col:3, col:27> Text=" Get the name of a thread"
|   |-ParagraphComment 0x55b64bf604e0 <line:1403:3>
|   | `-TextComment 0x55b64bf604b0 <col:3> Text=" "
|   `-ParamCommandComment 0x55b64bf60500 <col:4, line:1404:60> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x55b64bf60600 <line:1403:20, line:1404:60>
|       |-TextComment 0x55b64bf60560 <line:1403:20, col:29> Text=" Thread ID"
|       |-TextComment 0x55b64bf60580 <line:1404:3> Text=" "
|       |-InlineCommandComment 0x55b64bf605a0 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x55b64bf605c0 <col:11, col:60> Text=" Thread name, or NULL if configuration not enabled"
|-FunctionDecl 0x55b64beb8ff8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1420:17> line:1419:15 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x55b64beb8dd8 <col:34, col:42> col:42 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55b64beb8e50 <col:53, col:59> col:59 buf 'char *'
| |-ParmVarDecl 0x55b64beb8ec0 <line:1420:6, col:13> col:13 size 'size_t':'unsigned long'
| `-FullComment 0x55b64bf60c40 <line:1409:3, line:1417:20>
|   |-ParagraphComment 0x55b64bf606f0 <line:1409:3>
|   | `-TextComment 0x55b64bf606c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf60710 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55b64bf60770 <col:10, col:53>
|   |   `-TextComment 0x55b64bf60740 <col:10, col:53> Text=" Copy the thread name into a supplied buffer"
|   |-ParagraphComment 0x55b64bf607c0 <line:1411:3>
|   | `-TextComment 0x55b64bf60790 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf607e0 <col:4, line:1412:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf60890 <line:1411:20, line:1412:3>
|   |   |-TextComment 0x55b64bf60840 <line:1411:20, col:53> Text=" Thread to obtain name information"
|   |   `-TextComment 0x55b64bf60860 <line:1412:3> Text=" "
|   |-ParamCommandComment 0x55b64bf608b0 <col:4, line:1413:3> [in] implicitly Param="buf" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf60960 <line:1412:14, line:1413:3>
|   |   |-TextComment 0x55b64bf60910 <line:1412:14, col:32> Text=" Destination buffer"
|   |   `-TextComment 0x55b64bf60930 <line:1413:3> Text=" "
|   `-ParamCommandComment 0x55b64bf60980 <col:4, line:1417:20> [in] implicitly Param="size" ParamIndex=2
|     `-ParagraphComment 0x55b64bf60bf0 <line:1413:15, line:1417:20>
|       |-TextComment 0x55b64bf609e0 <line:1413:15, col:38> Text=" Destination buffer size"
|       |-TextComment 0x55b64bf60a00 <line:1414:3> Text=" "
|       |-InlineCommandComment 0x55b64bf60a20 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55b64bf60a40 <col:11, col:47> Text=" -ENOSPC Destination buffer too small"
|       |-TextComment 0x55b64bf60a60 <line:1415:3> Text=" "
|       |-InlineCommandComment 0x55b64bf60a80 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55b64bf60aa0 <col:11, col:38> Text=" -EFAULT Memory access error"
|       |-TextComment 0x55b64bf60ac0 <line:1416:3> Text=" "
|       |-InlineCommandComment 0x55b64bf60ae0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55b64bf60b00 <col:11, col:50> Text=" -ENOSYS Thread name feature not enabled"
|       |-TextComment 0x55b64bf60b20 <line:1417:3> Text=" "
|       |-InlineCommandComment 0x55b64bf60b40 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x55b64bf60b60 <col:11, col:20> Text=" 0 Success"
|-FunctionDecl 0x55b64beb9178 <line:1430:1, col:49> col:13 k_thread_state_str 'const char *(k_tid_t)'
| |-ParmVarDecl 0x55b64beb90e8 <col:32, col:40> col:40 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55b64bf60f80 <line:1423:3, line:1428:61>
|   |-ParagraphComment 0x55b64bf60ce0 <line:1423:3>
|   | `-TextComment 0x55b64bf60cb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf60d00 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55b64bf60d60 <col:10, col:33>
|   |   `-TextComment 0x55b64bf60d30 <col:10, col:33> Text=" Get thread state string"
|   |-ParagraphComment 0x55b64bf60db0 <line:1425:3, col:45>
|   | `-TextComment 0x55b64bf60d80 <col:3, col:45> Text=" Get the human friendly thread state string"
|   |-ParagraphComment 0x55b64bf60e00 <line:1427:3>
|   | `-TextComment 0x55b64bf60dd0 <col:3> Text=" "
|   `-ParamCommandComment 0x55b64bf60e20 <col:4, line:1428:61> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x55b64bf60f30 <line:1427:20, line:1428:61>
|       |-TextComment 0x55b64bf60e80 <line:1427:20, col:29> Text=" Thread ID"
|       |-TextComment 0x55b64bf60ea0 <line:1428:3> Text=" "
|       |-InlineCommandComment 0x55b64bf60ec0 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x55b64bf60ef0 <col:11, col:61> Text=" Thread state string, empty if no state flag is set"
|-RecordDecl 0x55b64beb93f8 prev 0x55b64bea7580 <line:1517:1, line:1545:1> line:1517:8 struct k_timer definition
| |-FullComment 0x55b64bf610d0 <line:1514:3, col:24>
| | `-ParagraphComment 0x55b64bf610a0 <col:3, col:24>
| |   |-TextComment 0x55b64bf60ff0 <col:3> Text=" "
| |   |-InlineCommandComment 0x55b64bf61040 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55b64bf61060 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55b64beb94a0 <line:1523:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| |-FieldDecl 0x55b64beb94f8 <line:1526:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x55b64bebb7d0 <line:1529:2, col:41> col:9 expiry_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x55b64bebb8d8 <line:1532:2, col:39> col:9 stop_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x55b64bebb930 <line:1535:2, col:8> col:8 period 's32_t':'int'
| |-FieldDecl 0x55b64bebb988 <line:1538:2, col:8> col:8 status 'u32_t':'unsigned int'
| `-FieldDecl 0x55b64bebb9e8 <line:1541:2, col:8> col:8 referenced user_data 'void *'
|-TypedefDecl 0x55b64bebbbd8 <line:1587:1, col:55> col:16 referenced k_timer_expiry_t 'void (*)(struct k_timer *)'
| |-PointerType 0x55b64bebb770 'void (*)(struct k_timer *)'
| | `-ParenType 0x55b64bebb710 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x55b64beb9690 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x55b64bd0f6f0 'void'
| |     `-PointerType 0x55b64beb95a0 'struct k_timer *'
| |       `-ElaboratedType 0x55b64beb9540 'struct k_timer' sugar
| |         `-RecordType 0x55b64bea7610 'struct k_timer'
| |           `-Record 0x55b64beb93f8 'k_timer'
| `-FullComment 0x55b64bf61560 <line:1576:3, line:1585:14>
|   |-ParagraphComment 0x55b64bf61170 <line:1576:3>
|   | `-TextComment 0x55b64bf61140 <col:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf61190 <col:4, col:29> Text=" k_timer_expiry_t"
|   |-ParagraphComment 0x55b64bf61200 <line:1577:3>
|   | `-TextComment 0x55b64bf611d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf61220 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55b64bf61280 <col:10, col:37>
|   |   `-TextComment 0x55b64bf61250 <col:10, col:37> Text=" Timer expiry function type."
|   |-ParagraphComment 0x55b64bf61320 <line:1579:3, line:1581:54>
|   | |-TextComment 0x55b64bf612a0 <line:1579:3, col:78> Text=" A timer's expiry function is executed by the system clock interrupt handler"
|   | |-TextComment 0x55b64bf612c0 <line:1580:3, col:76> Text=" each time the timer expires. The expiry function is optional, and is only"
|   | `-TextComment 0x55b64bf612e0 <line:1581:3, col:54> Text=" invoked if the timer has been initialized with one."
|   |-ParagraphComment 0x55b64bf61370 <line:1583:3>
|   | `-TextComment 0x55b64bf61340 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf61390 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf61420 <col:16, col:37>
|   |   `-TextComment 0x55b64bf613f0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55b64bf61470 <line:1585:3>
|   | `-TextComment 0x55b64bf61440 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf61490 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf614f0 <col:11, col:14>
|       `-TextComment 0x55b64bf614c0 <col:11, col:14> Text=" N/A"
|-TypedefDecl 0x55b64bebbd18 <line:1602:1, col:53> col:16 referenced k_timer_stop_t 'void (*)(struct k_timer *)'
| |-PointerType 0x55b64bebb770 'void (*)(struct k_timer *)'
| | `-ParenType 0x55b64bebb710 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x55b64beb9690 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x55b64bd0f6f0 'void'
| |     `-PointerType 0x55b64beb95a0 'struct k_timer *'
| |       `-ElaboratedType 0x55b64beb9540 'struct k_timer' sugar
| |         `-RecordType 0x55b64bea7610 'struct k_timer'
| |           `-Record 0x55b64beb93f8 'k_timer'
| `-FullComment 0x55b64bf61a10 <line:1590:3, line:1600:14>
|   |-ParagraphComment 0x55b64bf61600 <line:1590:3>
|   | `-TextComment 0x55b64bf615d0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf61620 <col:4, col:27> Text=" k_timer_stop_t"
|   |-ParagraphComment 0x55b64bf61690 <line:1591:3>
|   | `-TextComment 0x55b64bf61660 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf616b0 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x55b64bf61710 <col:10, col:35>
|   |   `-TextComment 0x55b64bf616e0 <col:10, col:35> Text=" Timer stop function type."
|   |-ParagraphComment 0x55b64bf617d0 <line:1593:3, line:1596:24>
|   | |-TextComment 0x55b64bf61730 <line:1593:3, col:75> Text=" A timer's stop function is executed if the timer is stopped prematurely."
|   | |-TextComment 0x55b64bf61750 <line:1594:3, col:71> Text=" The function runs in the context of the thread that stops the timer."
|   | |-TextComment 0x55b64bf61770 <line:1595:3, col:75> Text=" The stop function is optional, and is only invoked if the timer has been"
|   | `-TextComment 0x55b64bf61790 <line:1596:3, col:24> Text=" initialized with one."
|   |-ParagraphComment 0x55b64bf61820 <line:1598:3>
|   | `-TextComment 0x55b64bf617f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf61840 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf618d0 <col:16, col:37>
|   |   `-TextComment 0x55b64bf618a0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55b64bf61920 <line:1600:3>
|   | `-TextComment 0x55b64bf618f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf61940 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf619a0 <col:11, col:14>
|       `-TextComment 0x55b64bf61970 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bebc040 <line:1630:1, line:1632:27> line:1630:13 used k_timer_init 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' extern
| |-ParmVarDecl 0x55b64bebbdf0 <col:26, col:42> col:42 timer 'struct k_timer *'
| |-ParmVarDecl 0x55b64bebbe80 <line:1631:5, col:22> col:22 expiry_fn 'k_timer_expiry_t':'void (*)(struct k_timer *)'
| |-ParmVarDecl 0x55b64bebbf10 <line:1632:5, col:20> col:20 stop_fn 'k_timer_stop_t':'void (*)(struct k_timer *)'
| `-FullComment 0x55b64bf61f60 <line:1620:3, line:1628:14>
|   |-ParagraphComment 0x55b64bf61ab0 <line:1620:3>
|   | `-TextComment 0x55b64bf61a80 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf61ad0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55b64bf61b30 <col:10, col:29>
|   |   `-TextComment 0x55b64bf61b00 <col:10, col:29> Text=" Initialize a timer."
|   |-ParagraphComment 0x55b64bf61b80 <line:1622:3, col:60>
|   | `-TextComment 0x55b64bf61b50 <col:3, col:60> Text=" This routine initializes a timer, prior to its first use."
|   |-ParagraphComment 0x55b64bf61bd0 <line:1624:3>
|   | `-TextComment 0x55b64bf61ba0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf61bf0 <col:4, line:1625:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf61ca0 <line:1624:16, line:1625:3>
|   |   |-TextComment 0x55b64bf61c50 <line:1624:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x55b64bf61c70 <line:1625:3> Text=" "
|   |-ParamCommandComment 0x55b64bf61cc0 <col:4, line:1626:3> [in] implicitly Param="expiry_fn" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf61d70 <line:1625:20, line:1626:3>
|   |   |-TextComment 0x55b64bf61d20 <line:1625:20, col:67> Text=" Function to invoke each time the timer expires."
|   |   `-TextComment 0x55b64bf61d40 <line:1626:3> Text=" "
|   |-ParamCommandComment 0x55b64bf61d90 <col:4, col:77> [in] implicitly Param="stop_fn" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf61e20 <col:18, col:77>
|   |   `-TextComment 0x55b64bf61df0 <col:18, col:77> Text="   Function to invoke if the timer is stopped while running."
|   |-ParagraphComment 0x55b64bf61e70 <line:1628:3>
|   | `-TextComment 0x55b64bf61e40 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf61e90 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf61ef0 <col:11, col:14>
|       `-TextComment 0x55b64bf61ec0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bebc148 <line:1634:1, col:30> col:13 k_trigger_update 'void ()' extern
|-FunctionDecl 0x55b64bebc450 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1653:37> line:1652:16 used k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x55b64bebc240 <col:30, col:46> col:46 timer 'struct k_timer *'
| |-ParmVarDecl 0x55b64bebc2b0 <line:1653:9, col:15> col:15 duration 's32_t':'int'
| |-ParmVarDecl 0x55b64bebc320 <col:25, col:31> col:31 period 's32_t':'int'
| `-FullComment 0x55b64bf62570 <line:1637:3, line:1650:14>
|   |-ParagraphComment 0x55b64bf62000 <line:1637:3>
|   | `-TextComment 0x55b64bf61fd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf62020 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x55b64bf62080 <col:10, col:24>
|   |   `-TextComment 0x55b64bf62050 <col:10, col:24> Text=" Start a timer."
|   |-ParagraphComment 0x55b64bf620f0 <line:1639:3, line:1640:71>
|   | |-TextComment 0x55b64bf620a0 <line:1639:3, col:72> Text=" This routine starts a timer, and resets its status to zero. The timer"
|   | `-TextComment 0x55b64bf620c0 <line:1640:3, col:71> Text=" begins counting down using the specified duration and period values."
|   |-ParagraphComment 0x55b64bf62190 <line:1642:3, line:1644:44>
|   | |-TextComment 0x55b64bf62110 <line:1642:3, col:68> Text=" Attempting to start a timer that is already running is permitted."
|   | |-TextComment 0x55b64bf62130 <line:1643:3, col:73> Text=" The timer's status is reset to zero and the timer begins counting down"
|   | `-TextComment 0x55b64bf62150 <line:1644:3, col:44> Text=" using the new duration and period values."
|   |-ParagraphComment 0x55b64bf621e0 <line:1646:3>
|   | `-TextComment 0x55b64bf621b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf62200 <col:4, line:1647:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf622b0 <line:1646:16, line:1647:3>
|   |   |-TextComment 0x55b64bf62260 <line:1646:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x55b64bf62280 <line:1647:3> Text=" "
|   |-ParamCommandComment 0x55b64bf622d0 <col:4, line:1648:3> [in] implicitly Param="duration" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf62380 <line:1647:19, line:1648:3>
|   |   |-TextComment 0x55b64bf62330 <line:1647:19, col:61> Text="  Initial timer duration (in milliseconds)."
|   |   `-TextComment 0x55b64bf62350 <line:1648:3> Text=" "
|   |-ParamCommandComment 0x55b64bf623a0 <col:4, col:51> [in] implicitly Param="period" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf62430 <col:17, col:51>
|   |   `-TextComment 0x55b64bf62400 <col:17, col:51> Text="    Timer period (in milliseconds)."
|   |-ParagraphComment 0x55b64bf62480 <line:1650:3>
|   | `-TextComment 0x55b64bf62450 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf624a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf62500 <col:11, col:14>
|       `-TextComment 0x55b64bf624d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bebc5e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1671:50> col:16 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x55b64bebc560 <col:29, col:45> col:45 timer 'struct k_timer *'
| `-FullComment 0x55b64bf62b20 <line:1656:3, line:1669:14>
|   |-ParagraphComment 0x55b64bf62610 <line:1656:3>
|   | `-TextComment 0x55b64bf625e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf62630 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x55b64bf62690 <col:10, col:23>
|   |   `-TextComment 0x55b64bf62660 <col:10, col:23> Text=" Stop a timer."
|   |-ParagraphComment 0x55b64bf62700 <line:1658:3, line:1659:43>
|   | |-TextComment 0x55b64bf626b0 <line:1658:3, col:77> Text=" This routine stops a running timer prematurely. The timer's stop function,"
|   | `-TextComment 0x55b64bf626d0 <line:1659:3, col:43> Text=" if one exists, is invoked by the caller."
|   |-ParagraphComment 0x55b64bf62770 <line:1661:3, line:1662:23>
|   | |-TextComment 0x55b64bf62720 <line:1661:3, col:74> Text=" Attempting to stop a timer that is not running is permitted, but has no"
|   | `-TextComment 0x55b64bf62740 <line:1662:3, col:23> Text=" effect on the timer."
|   |-ParagraphComment 0x55b64bf627c0 <line:1664:3>
|   | `-TextComment 0x55b64bf62790 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf627e0 <col:4, line:1665:48> Name="note"
|   | `-ParagraphComment 0x55b64bf628e0 <line:1664:9, line:1665:48>
|   |   |-TextComment 0x55b64bf62810 <line:1664:9, col:78> Text=" Can be called by ISRs.  The stop handler has to be callable from ISRs"
|   |   |-TextComment 0x55b64bf62830 <line:1665:3, col:6> Text=" if "
|   |   |-InlineCommandComment 0x55b64bf62880 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="k_timer_stop"
|   |   `-TextComment 0x55b64bf628a0 <col:22, col:48> Text=" is to be called from ISRs."
|   |-ParagraphComment 0x55b64bf62930 <line:1667:3>
|   | `-TextComment 0x55b64bf62900 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf62950 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf629e0 <col:16, col:37>
|   |   `-TextComment 0x55b64bf629b0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55b64bf62a30 <line:1669:3>
|   | `-TextComment 0x55b64bf62a00 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf62a50 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf62ab0 <col:11, col:14>
|       `-TextComment 0x55b64bf62a80 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bebd070 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1685:57> col:17 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55b64bebcf70 <col:36, col:52> col:52 timer 'struct k_timer *'
| `-FullComment 0x55b64bf62f40 <line:1674:3, line:1683:24>
|   |-ParagraphComment 0x55b64bf62bc0 <line:1674:3>
|   | `-TextComment 0x55b64bf62b90 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf62be0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x55b64bf62c40 <col:10, col:28>
|   |   `-TextComment 0x55b64bf62c10 <col:10, col:28> Text=" Read timer status."
|   |-ParagraphComment 0x55b64bf62cb0 <line:1676:3, line:1677:49>
|   | |-TextComment 0x55b64bf62c60 <line:1676:3, col:77> Text=" This routine reads the timer's status, which indicates the number of times"
|   | `-TextComment 0x55b64bf62c80 <line:1677:3, col:49> Text=" it has expired since its status was last read."
|   |-ParagraphComment 0x55b64bf62d00 <line:1679:3, col:58>
|   | `-TextComment 0x55b64bf62cd0 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x55b64bf62d50 <line:1681:3>
|   | `-TextComment 0x55b64bf62d20 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf62d70 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf62e00 <col:16, col:37>
|   |   `-TextComment 0x55b64bf62dd0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55b64bf62e50 <line:1683:3>
|   | `-TextComment 0x55b64bf62e20 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf62e70 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x55b64bf62ed0 <col:11, col:24>
|       `-TextComment 0x55b64bf62ea0 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x55b64bebd1f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1704:58> col:17 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55b64bebd170 <col:37, col:53> col:53 timer 'struct k_timer *'
| `-FullComment 0x55b64bf63420 <line:1688:3, line:1702:24>
|   |-ParagraphComment 0x55b64bf62fe0 <line:1688:3>
|   | `-TextComment 0x55b64bf62fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf63000 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf63060 <col:10, col:49>
|   |   `-TextComment 0x55b64bf63030 <col:10, col:49> Text=" Synchronize thread to timer expiration."
|   |-ParagraphComment 0x55b64bf63120 <line:1690:3, line:1693:73>
|   | |-TextComment 0x55b64bf63080 <line:1690:3, col:78> Text=" This routine blocks the calling thread until the timer's status is non-zero"
|   | |-TextComment 0x55b64bf630a0 <line:1691:3, col:76> Text=" (indicating that it has expired at least once since it was last examined)"
|   | |-TextComment 0x55b64bf630c0 <line:1692:3, col:68> Text=" or the timer is stopped. If the timer status is already non-zero,"
|   | `-TextComment 0x55b64bf630e0 <line:1693:3, col:73> Text=" or the timer is already stopped, the caller continues without waiting."
|   |-ParagraphComment 0x55b64bf63170 <line:1695:3, col:58>
|   | `-TextComment 0x55b64bf63140 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x55b64bf631e0 <line:1697:3, line:1698:20>
|   | |-TextComment 0x55b64bf63190 <line:1697:3, col:74> Text=" This routine must not be used by interrupt handlers, since they are not"
|   | `-TextComment 0x55b64bf631b0 <line:1698:3, col:20> Text=" allowed to block."
|   |-ParagraphComment 0x55b64bf63230 <line:1700:3>
|   | `-TextComment 0x55b64bf63200 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf63250 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf632e0 <col:16, col:37>
|   |   `-TextComment 0x55b64bf632b0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55b64bf63330 <line:1702:3>
|   | `-TextComment 0x55b64bf63300 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf63350 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x55b64bf633b0 <col:11, col:24>
|       `-TextComment 0x55b64bf63380 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x55b64bebd3d0 <line:1706:1, col:58> col:14 used z_timeout_remaining 's32_t (struct _timeout *)' extern
| `-ParmVarDecl 0x55b64bebd2c8 <col:34, col:51> col:51 timeout 'struct _timeout *'
|-FunctionDecl 0x55b64bebd558 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1718:60> col:17 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55b64bebd4d0 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x55b64bf637e0 <line:1709:3, line:1716:44>
|   |-ParagraphComment 0x55b64bf634c0 <line:1709:3>
|   | `-TextComment 0x55b64bf63490 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf634e0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x55b64bf63540 <col:10, col:57>
|   |   `-TextComment 0x55b64bf63510 <col:10, col:57> Text=" Get time remaining before a timer next expires."
|   |-ParagraphComment 0x55b64bf635b0 <line:1711:3, line:1712:68>
|   | |-TextComment 0x55b64bf63560 <line:1711:3, col:74> Text=" This routine computes the (approximate) time remaining before a running"
|   | `-TextComment 0x55b64bf63580 <line:1712:3, col:68> Text=" timer next expires. If the timer is not running, it returns zero."
|   |-ParagraphComment 0x55b64bf63600 <line:1714:3>
|   | `-TextComment 0x55b64bf635d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf63620 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf636b0 <col:16, col:37>
|   |   `-TextComment 0x55b64bf63680 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55b64bf63700 <line:1716:3>
|   | `-TextComment 0x55b64bf636d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf63720 <col:4, col:44> Name="return"
|     `-ParagraphComment 0x55b64bf63780 <col:11, col:44>
|       `-TextComment 0x55b64bf63750 <col:11, col:44> Text=" Remaining time (in milliseconds)."
|-FunctionDecl 0x55b64bebd6b0 <line:1720:1, line:1724:1> line:1720:21 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55b64bebd628 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x55b64bebdc38 <line:1721:1, line:1724:1>
|   |-DeclStmt 0x55b64bebd930 <line:1722:2, col:58>
|   | `-VarDecl 0x55b64bebd768 <col:2, col:57> col:14 used ticks 'const s32_t':'const int' cinit
|   |   `-CallExpr 0x55b64bebd900 <col:22, col:57> 's32_t':'int'
|   |     |-ImplicitCastExpr 0x55b64bebd8e8 <col:22> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b64bebd7c8 <col:22> 's32_t (struct _timeout *)' Function 0x55b64bebd3d0 'z_timeout_remaining' 's32_t (struct _timeout *)'
|   |     `-UnaryOperator 0x55b64bebd868 <col:42, col:50> 'struct _timeout *' prefix '&'
|   |       `-MemberExpr 0x55b64bebd830 <col:43, col:50> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x55b64beb94a0
|   |         `-ImplicitCastExpr 0x55b64bebd818 <col:43> 'struct k_timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x55b64bebd7f0 <col:43> 'struct k_timer *' lvalue ParmVar 0x55b64bebd628 'timer' 'struct k_timer *'
|   `-ReturnStmt 0x55b64bebdbf0 <line:1723:2, col:61>
|     `-ConditionalOperator 0x55b64bebdb68 <col:9, col:61> 'unsigned int'
|       |-ParenExpr 0x55b64bebd9d0 <col:9, col:19> 'int'
|       | `-BinaryOperator 0x55b64bebd9a8 <col:10, col:18> 'int' '>'
|       |   |-ImplicitCastExpr 0x55b64bebd990 <col:10> 's32_t':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x55b64bebd948 <col:10> 'const s32_t':'const int' lvalue Var 0x55b64bebd768 'ticks' 'const s32_t':'const int'
|       |   `-IntegerLiteral 0x55b64bebd970 <col:18> 'int' 0
|       |-CStyleCastExpr 0x55b64bebdb20 <col:23, col:57> 'u32_t':'unsigned int' <IntegralCast>
|       | `-CallExpr 0x55b64bebdab0 <col:30, col:57> 'u64_t':'unsigned long long'
|       |   |-ImplicitCastExpr 0x55b64bebda98 <col:30> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55b64bebd9f0 <col:30> 'u64_t (u64_t)' Function 0x55b64be8d270 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
|       |   `-ImplicitCastExpr 0x55b64bebdaf8 <col:52> 'u64_t':'unsigned long long' <IntegralCast>
|       |     `-ImplicitCastExpr 0x55b64bebdae0 <col:52> 's32_t':'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x55b64bebda18 <col:52> 'const s32_t':'const int' lvalue Var 0x55b64bebd768 'ticks' 'const s32_t':'const int'
|       `-IntegerLiteral 0x55b64bebdb48 <col:61> 'unsigned int' 0
|-FunctionDecl 0x55b64bebde10 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1740:76> col:16 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x55b64bebdc80 <col:38, col:54> col:54 timer 'struct k_timer *'
| |-ParmVarDecl 0x55b64bebdcf8 <col:61, col:67> col:67 user_data 'void *'
| `-FullComment 0x55b64bf63df0 <line:1727:3, line:1738:14>
|   |-ParagraphComment 0x55b64bf63880 <line:1727:3>
|   | `-TextComment 0x55b64bf63850 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf638a0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x55b64bf63900 <col:10, col:52>
|   |   `-TextComment 0x55b64bf638d0 <col:10, col:52> Text=" Associate user-specific data with a timer."
|   |-ParagraphComment 0x55b64bf63a70 <line:1729:3, line:1730:9>
|   | |-TextComment 0x55b64bf63920 <line:1729:3, col:28> Text=" This routine records the "
|   | |-InlineCommandComment 0x55b64bf63970 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="user_data"
|   | |-TextComment 0x55b64bf63990 <col:41, col:50> Text=" with the "
|   | |-InlineCommandComment 0x55b64bf639e0 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="timer,"
|   | |-TextComment 0x55b64bf63a00 <col:60, col:75> Text=" to be retrieved"
|   | `-TextComment 0x55b64bf63a20 <line:1730:3, col:9> Text=" later."
|   |-ParagraphComment 0x55b64bf63ae0 <line:1732:3, line:1733:73>
|   | |-TextComment 0x55b64bf63a90 <line:1732:3, col:78> Text=" It can be used e.g. in a timer handler shared across multiple subsystems to"
|   | `-TextComment 0x55b64bf63ab0 <line:1733:3, col:73> Text=" retrieve data specific to the subsystem this timer is associated with."
|   |-ParagraphComment 0x55b64bf63b30 <line:1735:3>
|   | `-TextComment 0x55b64bf63b00 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf63b50 <col:4, line:1736:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf63c00 <line:1735:16, line:1736:3>
|   |   |-TextComment 0x55b64bf63bb0 <line:1735:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x55b64bf63bd0 <line:1736:3> Text=" "
|   |-ParamCommandComment 0x55b64bf63c20 <col:4, col:58> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf63cb0 <col:20, col:58>
|   |   `-TextComment 0x55b64bf63c80 <col:20, col:58> Text=" User data to associate with the timer."
|   |-ParagraphComment 0x55b64bf63d00 <line:1738:3>
|   | `-TextComment 0x55b64bf63cd0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf63d20 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf63d80 <col:11, col:14>
|       `-TextComment 0x55b64bf63d50 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bebe438 <line:1745:1, line:1749:1> line:1745:20 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x55b64bebdf10 <col:49, col:65> col:65 used timer 'struct k_timer *'
| |-ParmVarDecl 0x55b64bebe3a8 <line:1746:13, col:19> col:19 used user_data 'void *'
| |-CompoundStmt 0x55b64bebe5f8 <line:1747:1, line:1749:1>
| | `-BinaryOperator 0x55b64bebe5a0 <line:1748:2, col:21> 'void *' '='
| |   |-MemberExpr 0x55b64bebe528 <col:2, col:9> 'void *' lvalue ->user_data 0x55b64bebb9e8
| |   | `-ImplicitCastExpr 0x55b64bebe510 <col:2> 'struct k_timer *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55b64bebe4e8 <col:2> 'struct k_timer *' lvalue ParmVar 0x55b64bebdf10 'timer' 'struct k_timer *'
| |   `-ImplicitCastExpr 0x55b64bebe588 <col:21> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b64bebe560 <col:21> 'void *' lvalue ParmVar 0x55b64bebe3a8 'user_data' 'void *'
| `-FullComment 0x55b64bf63ee0 <line:1743:3, col:12>
|   `-ParagraphComment 0x55b64bf63eb0 <col:3, col:12>
|     |-TextComment 0x55b64bf63e60 <col:3> Text=" "
|     `-InlineCommandComment 0x55b64bf63e80 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55b64bebe748 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1758:60> col:17 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x55b64bebe638 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x55b64bf64220 <line:1752:3, line:1756:25>
|   |-ParagraphComment 0x55b64bf63f80 <line:1752:3>
|   | `-TextComment 0x55b64bf63f50 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf63fa0 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x55b64bf64000 <col:10, col:55>
|   |   `-TextComment 0x55b64bf63fd0 <col:10, col:55> Text=" Retrieve the user-specific data from a timer."
|   |-ParagraphComment 0x55b64bf64050 <line:1754:3>
|   | `-TextComment 0x55b64bf64020 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf64070 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf64100 <col:16, col:37>
|   |   `-TextComment 0x55b64bf640d0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55b64bf64150 <line:1756:3>
|   | `-TextComment 0x55b64bf64120 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf64170 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x55b64bf641d0 <col:11, col:25>
|       `-TextComment 0x55b64bf641a0 <col:11, col:25> Text=" The user data."
|-FunctionDecl 0x55b64bebe8a8 <line:1760:1, line:1763:1> line:1760:21 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x55b64bebe818 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x55b64bebea88 <line:1761:1, line:1763:1>
|   `-ReturnStmt 0x55b64bebe9e0 <line:1762:2, col:16>
|     `-ImplicitCastExpr 0x55b64bebe9c8 <col:9, col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55b64bebe990 <col:9, col:16> 'void *' lvalue ->user_data 0x55b64bebb9e8
|         `-ImplicitCastExpr 0x55b64bebe978 <col:9> 'struct k_timer *' <LValueToRValue>
|           `-DeclRefExpr 0x55b64bebe950 <col:9> 'struct k_timer *' lvalue ParmVar 0x55b64bebe818 'timer' 'struct k_timer *'
|-FunctionDecl 0x55b64bebeb30 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1787:34> col:17 used k_uptime_get 's64_t (void)' static inline
| `-FullComment 0x55b64bf64700 <line:1773:3, line:1785:42>
|   |-ParagraphComment 0x55b64bf642c0 <line:1773:3>
|   | `-TextComment 0x55b64bf64290 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf642e0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x55b64bf64340 <col:10, col:28>
|   |   `-TextComment 0x55b64bf64310 <col:10, col:28> Text=" Get system uptime."
|   |-ParagraphComment 0x55b64bf643b0 <line:1775:3, line:1776:19>
|   | |-TextComment 0x55b64bf64360 <line:1775:3, col:65> Text=" This routine returns the elapsed time since the system booted,"
|   | `-TextComment 0x55b64bf64380 <line:1776:3, col:19> Text=" in milliseconds."
|   |-ParagraphComment 0x55b64bf64400 <line:1778:3>
|   | `-TextComment 0x55b64bf643d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf64420 <col:4, line:1783:13> Name="note"
|   | `-ParagraphComment 0x55b64bf645d0 <line:1779:3, line:1783:13>
|   |   |-TextComment 0x55b64bf64450 <line:1779:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x55b64bf644a0 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x55b64bf644c0 <line:1780:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x55b64bf644e0 <line:1781:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x55b64bf64500 <line:1782:3, col:61> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option."
|   |   |-TextComment 0x55b64bf64520 <line:1783:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x55b64bf64570 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x55b64bf64620 <line:1785:3>
|   | `-TextComment 0x55b64bf645f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf64640 <col:4, col:42> Name="return"
|     `-ParagraphComment 0x55b64bf646a0 <col:11, col:42>
|       `-TextComment 0x55b64bf64670 <col:11, col:42> Text=" Current uptime in milliseconds."
|-FunctionDecl 0x55b64bebec90 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1805:1> line:1799:32 k_enable_sys_clock_always_on 'int (void)' static inline
| |-CompoundStmt 0x55b64bebee38 <line:1800:1, line:1805:1>
| | |-CompoundStmt 0x55b64bebed90 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x55b64bebeda0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1802:57>
| | `-ReturnStmt 0x55b64bebedf0 <line:1804:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-UnaryOperator 0x55b64bebedd0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1804:9, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     `-IntegerLiteral 0x55b64bebedb0 <col:16> 'int' 0
| |-DeprecatedAttr 0x55b64bebed30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x55b64bf649a0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1790:3, line:1796:56>
|   |-ParagraphComment 0x55b64bf647a0 <line:1790:3>
|   | `-TextComment 0x55b64bf64770 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf647c0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55b64bf64820 <col:10, col:51>
|   |   `-TextComment 0x55b64bf647f0 <col:10, col:51> Text=" Enable clock always on in tickless kernel"
|   |-ParagraphComment 0x55b64bf648c0 <line:1792:3, line:1794:11>
|   | |-TextComment 0x55b64bf64840 <line:1792:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|   | |-TextComment 0x55b64bf64860 <line:1793:3, col:66> Text=" functionality has been migrated to the SYSTEM_CLOCK_SLOPPY_IDLE"
|   | `-TextComment 0x55b64bf64880 <line:1794:3, col:11> Text=" kconfig."
|   `-ParagraphComment 0x55b64bf64960 <line:1796:3, col:56>
|     |-TextComment 0x55b64bf648e0 <col:3> Text=" "
|     |-InlineCommandComment 0x55b64bf64900 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55b64bf64920 <col:11, col:56> Text=" prev_status Previous status of always on flag"
|-FunctionDecl 0x55b64bebeef0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1820:1> line:1816:33 k_disable_sys_clock_always_on 'void (void)' static inline
| |-CompoundStmt 0x55b64bebf038 <line:1817:1, line:1820:1>
| | |-CompoundStmt 0x55b64bebeff0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | `-NullStmt 0x55b64bebf000 </vagrant/ext/zephyros/zephyr/include/kernel.h:1819:57>
| |-DeprecatedAttr 0x55b64bebef90 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x55b64bf64ba0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1809:3, line:1813:11>
|   |-ParagraphComment 0x55b64bf64a40 <line:1809:3>
|   | `-TextComment 0x55b64bf64a10 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf64a60 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x55b64bf64ac0 <col:10, col:52>
|   |   `-TextComment 0x55b64bf64a90 <col:10, col:52> Text=" Disable clock always on in tickless kernel"
|   `-ParagraphComment 0x55b64bf64b60 <line:1811:3, line:1813:11>
|     |-TextComment 0x55b64bf64ae0 <line:1811:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|     |-TextComment 0x55b64bf64b00 <line:1812:3, col:63> Text=" functionality has been migrated to the SYS_CLOCK_SLOPPY_IDLE"
|     `-TextComment 0x55b64bf64b20 <line:1813:3, col:11> Text=" kconfig."
|-FunctionDecl 0x55b64bebf0e8 <line:1844:1, line:1847:1> line:1844:21 k_uptime_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x55b64bebf2c8 <line:1845:1, line:1847:1>
| | `-ReturnStmt 0x55b64bebf280 <line:1846:2, col:29>
| |   `-CStyleCastExpr 0x55b64bebf258 <col:9, col:29> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64bebf220 <col:16, col:29> 's64_t':'long long'
| |       `-ImplicitCastExpr 0x55b64bebf208 <col:16> 's64_t (*)(void)' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x55b64bebf188 <col:16> 's64_t (void)' Function 0x55b64bebeb30 'k_uptime_get' 's64_t (void)'
| `-FullComment 0x55b64bf65120 <line:1824:3, line:1842:66>
|   |-ParagraphComment 0x55b64bf64c40 <line:1824:3>
|   | `-TextComment 0x55b64bf64c10 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf64c60 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x55b64bf64cc0 <col:10, col:45>
|   |   `-TextComment 0x55b64bf64c90 <col:10, col:45> Text=" Get system uptime (32-bit version)."
|   |-ParagraphComment 0x55b64bf64d30 <line:1826:3, line:1827:16>
|   | |-TextComment 0x55b64bf64ce0 <line:1826:3, col:65> Text=" This routine returns the lower 32 bits of the system uptime in"
|   | `-TextComment 0x55b64bf64d00 <line:1827:3, col:16> Text=" milliseconds."
|   |-ParagraphComment 0x55b64bf64e20 <line:1829:3, line:1833:38>
|   | |-TextComment 0x55b64bf64d50 <line:1829:3, col:67> Text=" Because correct conversion requires full precision of the system"
|   | |-TextComment 0x55b64bf64d70 <line:1830:3, col:69> Text=" clock there is no benefit to using this over k_uptime_get() unless"
|   | |-TextComment 0x55b64bf64d90 <line:1831:3, col:69> Text=" you know the application will never run long enough for the system"
|   | |-TextComment 0x55b64bf64db0 <line:1832:3, col:68> Text=" clock to approach 2^32 ticks.  Calls to this function may involve"
|   | `-TextComment 0x55b64bf64dd0 <line:1833:3, col:38> Text=" interrupt blocking and 64-bit math."
|   |-ParagraphComment 0x55b64bf64e70 <line:1835:3>
|   | `-TextComment 0x55b64bf64e40 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf64e90 <col:4, line:1840:13> Name="note"
|   | `-ParagraphComment 0x55b64bf64ff0 <line:1836:3, line:1840:13>
|   |   |-TextComment 0x55b64bf64ec0 <line:1836:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x55b64bf64ee0 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x55b64bf64f10 <line:1837:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x55b64bf64f30 <line:1838:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x55b64bf64f50 <line:1839:3, col:60> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option"
|   |   |-TextComment 0x55b64bf64f70 <line:1840:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x55b64bf64f90 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x55b64bf65040 <line:1842:3>
|   | `-TextComment 0x55b64bf65010 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf65060 <col:4, col:66> Name="return"
|     `-ParagraphComment 0x55b64bf650c0 <col:11, col:66>
|       `-TextComment 0x55b64bf65090 <col:11, col:66> Text=" The low 32 bits of the current uptime, in milliseconds."
|-FunctionDecl 0x55b64bebf5d0 <line:1860:1, line:1869:1> line:1860:21 used k_uptime_delta 's64_t (s64_t *)' static inline
| |-ParmVarDecl 0x55b64bebf4d0 <col:36, col:43> col:43 used reftime 's64_t *'
| |-CompoundStmt 0x55b64bebfab8 <line:1861:1, line:1869:1>
| | |-DeclStmt 0x55b64bebf770 <line:1862:2, col:21>
| | | |-VarDecl 0x55b64bebf688 <col:2, col:8> col:8 used uptime 's64_t':'long long'
| | | `-VarDecl 0x55b64bebf6f8 <col:2, col:16> col:16 used delta 's64_t':'long long'
| | |-BinaryOperator 0x55b64bebf818 <line:1864:2, col:24> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x55b64bebf788 <col:2> 's64_t':'long long' lvalue Var 0x55b64bebf688 'uptime' 's64_t':'long long'
| | | `-CallExpr 0x55b64bebf7f0 <col:11, col:24> 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x55b64bebf7d8 <col:11> 's64_t (*)(void)' <FunctionToPointerDecay>
| | |     `-DeclRefExpr 0x55b64bebf7b0 <col:11> 's64_t (void)' Function 0x55b64bebeb30 'k_uptime_get' 's64_t (void)'
| | |-BinaryOperator 0x55b64bebf948 <line:1865:2, col:20> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x55b64bebf840 <col:2> 's64_t':'long long' lvalue Var 0x55b64bebf6f8 'delta' 's64_t':'long long'
| | | `-BinaryOperator 0x55b64bebf920 <col:10, col:20> 'long long' '-'
| | |   |-ImplicitCastExpr 0x55b64bebf8f0 <col:10> 's64_t':'long long' <LValueToRValue>
| | |   | `-DeclRefExpr 0x55b64bebf868 <col:10> 's64_t':'long long' lvalue Var 0x55b64bebf688 'uptime' 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x55b64bebf908 <col:19, col:20> 's64_t':'long long' <LValueToRValue>
| | |     `-UnaryOperator 0x55b64bebf8d0 <col:19, col:20> 's64_t':'long long' lvalue prefix '*'
| | |       `-ImplicitCastExpr 0x55b64bebf8b8 <col:20> 's64_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55b64bebf890 <col:20> 's64_t *' lvalue ParmVar 0x55b64bebf4d0 'reftime' 's64_t *'
| | |-BinaryOperator 0x55b64bebfa10 <line:1866:2, col:13> 's64_t':'long long' '='
| | | |-UnaryOperator 0x55b64bebf9b0 <col:2, col:3> 's64_t':'long long' lvalue prefix '*'
| | | | `-ImplicitCastExpr 0x55b64bebf998 <col:3> 's64_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55b64bebf970 <col:3> 's64_t *' lvalue ParmVar 0x55b64bebf4d0 'reftime' 's64_t *'
| | | `-ImplicitCastExpr 0x55b64bebf9f8 <col:13> 's64_t':'long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55b64bebf9d0 <col:13> 's64_t':'long long' lvalue Var 0x55b64bebf688 'uptime' 's64_t':'long long'
| | `-ReturnStmt 0x55b64bebfa78 <line:1868:2, col:9>
| |   `-ImplicitCastExpr 0x55b64bebfa60 <col:9> 's64_t':'long long' <LValueToRValue>
| |     `-DeclRefExpr 0x55b64bebfa38 <col:9> 's64_t':'long long' lvalue Var 0x55b64bebf6f8 'delta' 's64_t':'long long'
| `-FullComment 0x55b64bf65500 <line:1850:3, line:1858:24>
|   |-ParagraphComment 0x55b64bf651c0 <line:1850:3>
|   | `-TextComment 0x55b64bf65190 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf651e0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55b64bf65240 <col:10, col:27>
|   |   `-TextComment 0x55b64bf65210 <col:10, col:27> Text=" Get elapsed time."
|   |-ParagraphComment 0x55b64bf652b0 <line:1852:3, line:1853:50>
|   | |-TextComment 0x55b64bf65260 <line:1852:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x55b64bf65280 <line:1853:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x55b64bf65300 <line:1855:3>
|   | `-TextComment 0x55b64bf652d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf65320 <col:4, line:1856:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf653d0 <line:1855:18, line:1856:37>
|   |   |-TextComment 0x55b64bf65380 <line:1855:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x55b64bf653a0 <line:1856:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x55b64bf65420 <line:1858:3>
|   | `-TextComment 0x55b64bf653f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf65440 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x55b64bf654a0 <col:11, col:24>
|       `-TextComment 0x55b64bf65470 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x55b64bebfc00 <line:1887:1, line:1890:1> line:1887:21 k_uptime_delta_32 'u32_t (s64_t *)' static inline
| |-ParmVarDecl 0x55b64bebfb00 <col:39, col:46> col:46 used reftime 's64_t *'
| |-CompoundStmt 0x55b64bebfe38 <line:1888:1, line:1890:1>
| | `-ReturnStmt 0x55b64bebfdf0 <line:1889:2, col:38>
| |   `-CStyleCastExpr 0x55b64bebfdc8 <col:9, col:38> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55b64bebfd70 <col:16, col:38> 's64_t':'long long'
| |       |-ImplicitCastExpr 0x55b64bebfd58 <col:16> 's64_t (*)(s64_t *)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64bebfca8 <col:16> 's64_t (s64_t *)' Function 0x55b64bebf5d0 'k_uptime_delta' 's64_t (s64_t *)'
| |       `-ImplicitCastExpr 0x55b64bebfda0 <col:31> 's64_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55b64bebfcd0 <col:31> 's64_t *' lvalue ParmVar 0x55b64bebfb00 'reftime' 's64_t *'
| `-FullComment 0x55b64bf659a0 <line:1872:3, line:1885:24>
|   |-ParagraphComment 0x55b64bf655a0 <line:1872:3>
|   | `-TextComment 0x55b64bf65570 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf655c0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55b64bf65620 <col:10, col:44>
|   |   `-TextComment 0x55b64bf655f0 <col:10, col:44> Text=" Get elapsed time (32-bit version)."
|   |-ParagraphComment 0x55b64bf65690 <line:1874:3, line:1875:50>
|   | |-TextComment 0x55b64bf65640 <line:1874:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x55b64bf65660 <line:1875:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x55b64bf65750 <line:1877:3, line:1880:41>
|   | |-TextComment 0x55b64bf656b0 <line:1877:3, col:78> Text=" This routine can be more efficient than k_uptime_delta(), as it reduces the"
|   | |-TextComment 0x55b64bf656d0 <line:1878:3, col:73> Text=" need for interrupt locking and 64-bit math. However, the 32-bit result"
|   | |-TextComment 0x55b64bf656f0 <line:1879:3, col:72> Text=" cannot hold an elapsed time larger than approximately 50 days, so the"
|   | `-TextComment 0x55b64bf65710 <line:1880:3, col:41> Text=" caller must handle possible rollovers."
|   |-ParagraphComment 0x55b64bf657a0 <line:1882:3>
|   | `-TextComment 0x55b64bf65770 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf657c0 <col:4, line:1883:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf65870 <line:1882:18, line:1883:37>
|   |   |-TextComment 0x55b64bf65820 <line:1882:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x55b64bf65840 <line:1883:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x55b64bf658c0 <line:1885:3>
|   | `-TextComment 0x55b64bf65890 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf658e0 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x55b64bf65940 <col:11, col:24>
|       `-TextComment 0x55b64bf65910 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x55b64bebfee0 <line:1900:1, line:1903:1> line:1900:21 k_cycle_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x55b64bec0088 <line:1901:1, line:1903:1>
| | `-ReturnStmt 0x55b64bec0018 <line:1902:2, col:29>
| |   `-CallExpr 0x55b64bebfff0 <col:9, col:29> 'u32_t':'unsigned int'
| |     `-ImplicitCastExpr 0x55b64bebffd8 <col:9> 'u32_t (*)(void)' <FunctionToPointerDecay>
| |       `-DeclRefExpr 0x55b64bebff80 <col:9> 'u32_t (void)' Function 0x55b64be6cda8 'arch_k_cycle_get_32' 'u32_t (void)'
| `-FullComment 0x55b64bf65c50 <line:1893:3, line:1898:57>
|   |-ParagraphComment 0x55b64bf65a40 <line:1893:3>
|   | `-TextComment 0x55b64bf65a10 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf65a60 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55b64bf65ac0 <col:10, col:34>
|   |   `-TextComment 0x55b64bf65a90 <col:10, col:34> Text=" Read the hardware clock."
|   |-ParagraphComment 0x55b64bf65b30 <line:1895:3, line:1896:9>
|   | |-TextComment 0x55b64bf65ae0 <line:1895:3, col:78> Text=" This routine returns the current time, as measured by the system's hardware"
|   | `-TextComment 0x55b64bf65b00 <line:1896:3, col:9> Text=" clock."
|   |-ParagraphComment 0x55b64bf65b80 <line:1898:3>
|   | `-TextComment 0x55b64bf65b50 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf65ba0 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x55b64bf65c00 <col:11, col:57>
|       `-TextComment 0x55b64bf65bd0 <col:11, col:57> Text=" Current hardware clock up-counter (in cycles)."
|-RecordDecl 0x55b64bec00a0 prev 0x55b64bea7160 <line:1913:1, line:1924:1> line:1913:8 struct k_queue definition
| |-FullComment 0x55b64bf65d70 <line:1910:3, col:24>
| | `-ParagraphComment 0x55b64bf65d40 <col:3, col:24>
| |   |-TextComment 0x55b64bf65cc0 <col:3> Text=" "
| |   |-InlineCommandComment 0x55b64bf65ce0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55b64bf65d00 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55b64bec0138 <line:1914:2, col:15> col:15 referenced data_q 'sys_sflist_t':'struct _sflist'
| |-FieldDecl 0x55b64bec01a0 <line:1915:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-RecordDecl 0x55b64bec01e8 <line:1916:2, line:1920:2> line:1916:2 union definition
| | `-FieldDecl 0x55b64bec02a0 <line:1917:3, col:13> col:13 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x55b64bec0380 <line:1916:2> col:2 implicit 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
| `-IndirectFieldDecl 0x55b64bec03d8 <line:1917:13> col:13 implicit wait_q '_wait_q_t':'_wait_q_t'
|   |-Field 0x55b64bec0380 '' 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
|   `-Field 0x55b64bec02a0 'wait_q' '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x55b64bec0d18 <line:1939:1, col:67> col:14 used z_queue_node_peek 'void *(sys_sfnode_t *, bool)' extern
| |-ParmVarDecl 0x55b64bec0b90 <col:32, col:46> col:46 node 'sys_sfnode_t *'
| `-ParmVarDecl 0x55b64bec0c00 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/kernel.h:1939:57> col:57 needs_free 'bool'
|-FunctionDecl 0x55b64bec1010 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1960:50> col:16 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x55b64bec0f10 <col:29, col:45> col:45 queue 'struct k_queue *'
| `-FullComment 0x55b64bf66110 <line:1952:3, line:1958:14>
|   |-ParagraphComment 0x55b64bf65e10 <line:1952:3>
|   | `-TextComment 0x55b64bf65de0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf65e30 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55b64bf65e90 <col:10, col:29>
|   |   `-TextComment 0x55b64bf65e60 <col:10, col:29> Text=" Initialize a queue."
|   |-ParagraphComment 0x55b64bf65ee0 <line:1954:3, col:67>
|   | `-TextComment 0x55b64bf65eb0 <col:3, col:67> Text=" This routine initializes a queue object, prior to its first use."
|   |-ParagraphComment 0x55b64bf65f30 <line:1956:3>
|   | `-TextComment 0x55b64bf65f00 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf65f50 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf65fe0 <col:16, col:37>
|   |   `-TextComment 0x55b64bf65fb0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55b64bf66030 <line:1958:3>
|   | `-TextComment 0x55b64bf66000 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf66050 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf660b0 <col:11, col:14>
|       `-TextComment 0x55b64bf66080 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bec1198 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1977:57> col:16 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x55b64bec1110 <col:36, col:52> col:52 queue 'struct k_queue *'
| `-FullComment 0x55b64bf666b0 <line:1963:3, line:1975:14>
|   |-ParagraphComment 0x55b64bf661b0 <line:1963:3>
|   | `-TextComment 0x55b64bf66180 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf661d0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55b64bf66230 <col:10, col:36>
|   |   `-TextComment 0x55b64bf66200 <col:10, col:36> Text=" Cancel waiting on a queue."
|   |-ParagraphComment 0x55b64bf663a0 <line:1965:3, line:1969:35>
|   | |-TextComment 0x55b64bf66250 <line:1965:3, col:47> Text=" This routine causes first thread pending on "
|   | |-InlineCommandComment 0x55b64bf662a0 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="queue,"
|   | |-TextComment 0x55b64bf662c0 <col:57, col:67> Text=" if any, to"
|   | |-TextComment 0x55b64bf662e0 <line:1966:3, col:74> Text=" return from k_queue_get() call with NULL value (as if timeout expired)."
|   | |-TextComment 0x55b64bf66300 <line:1967:3, col:67> Text=" If the queue is being waited on by k_poll(), it will return with"
|   | |-TextComment 0x55b64bf66320 <line:1968:3, col:69> Text=" -EINTR and K_POLL_STATE_CANCELLED state (and per above, subsequent"
|   | `-TextComment 0x55b64bf66340 <line:1969:3, col:35> Text=" k_queue_get() will return NULL)."
|   |-ParagraphComment 0x55b64bf663f0 <line:1971:3>
|   | `-TextComment 0x55b64bf663c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf66410 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf66470 <col:9, col:31>
|   |   `-TextComment 0x55b64bf66440 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf664c0 <line:1973:3>
|   | `-TextComment 0x55b64bf66490 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf664e0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf66570 <col:16, col:37>
|   |   `-TextComment 0x55b64bf66540 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55b64bf665c0 <line:1975:3>
|   | `-TextComment 0x55b64bf66590 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf665e0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf66640 <col:11, col:14>
|       `-TextComment 0x55b64bf66610 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bec1420 <line:1993:1, col:61> col:13 used k_queue_append 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x55b64bec1290 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x55b64bec1308 <col:51, col:57> col:57 data 'void *'
| `-FullComment 0x55b64bf66cd0 <line:1980:3, line:1991:14>
|   |-ParagraphComment 0x55b64bf66750 <line:1980:3>
|   | `-TextComment 0x55b64bf66720 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf66770 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf667d0 <col:10, col:50>
|   |   `-TextComment 0x55b64bf667a0 <col:10, col:50> Text=" Append an element to the end of a queue."
|   |-ParagraphComment 0x55b64bf668f0 <line:1982:3, line:1984:24>
|   | |-TextComment 0x55b64bf667f0 <line:1982:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x55b64bf66840 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55b64bf66860 <col:49, col:74> Text=" A queue data item must be"
|   | |-TextComment 0x55b64bf66880 <line:1983:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x55b64bf668a0 <line:1984:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x55b64bf66940 <line:1986:3>
|   | `-TextComment 0x55b64bf66910 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf66960 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf669c0 <col:9, col:31>
|   |   `-TextComment 0x55b64bf66990 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf66a10 <line:1988:3>
|   | `-TextComment 0x55b64bf669e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf66a30 <col:4, line:1989:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf66ae0 <line:1988:16, line:1989:3>
|   |   |-TextComment 0x55b64bf66a90 <line:1988:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55b64bf66ab0 <line:1989:3> Text=" "
|   |-ParamCommandComment 0x55b64bf66b00 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf66b90 <col:15, col:40>
|   |   `-TextComment 0x55b64bf66b60 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55b64bf66be0 <line:1991:3>
|   | `-TextComment 0x55b64bf66bb0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf66c00 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf66c60 <col:11, col:14>
|       `-TextComment 0x55b64bf66c30 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bec16b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2011:71> col:17 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55b64bec1520 <col:38, col:54> col:54 queue 'struct k_queue *'
| |-ParmVarDecl 0x55b64bec1598 <col:61, col:67> col:67 data 'void *'
| `-FullComment 0x55b64bf67370 <line:1996:3, line:2009:78>
|   |-ParagraphComment 0x55b64bf66d70 <line:1996:3>
|   | `-TextComment 0x55b64bf66d40 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf66d90 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf66df0 <col:10, col:39>
|   |   `-TextComment 0x55b64bf66dc0 <col:10, col:39> Text=" Append an element to a queue."
|   |-ParagraphComment 0x55b64bf66f50 <line:1998:3, line:2001:50>
|   | |-TextComment 0x55b64bf66e10 <line:1998:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x55b64bf66e60 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55b64bf66e80 <col:49, col:76> Text=" There is an implicit memory"
|   | |-TextComment 0x55b64bf66ea0 <line:1999:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x55b64bf66ec0 <line:2000:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x55b64bf66ee0 <line:2001:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x55b64bf66fa0 <line:2003:3>
|   | `-TextComment 0x55b64bf66f70 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf66fc0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf67020 <col:9, col:31>
|   |   `-TextComment 0x55b64bf66ff0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf67070 <line:2005:3>
|   | `-TextComment 0x55b64bf67040 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf67090 <col:4, line:2006:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf67140 <line:2005:16, line:2006:3>
|   |   |-TextComment 0x55b64bf670f0 <line:2005:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55b64bf67110 <line:2006:3> Text=" "
|   |-ParamCommandComment 0x55b64bf67160 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf671f0 <col:15, col:40>
|   |   `-TextComment 0x55b64bf671c0 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x55b64bf67300 <line:2008:3, line:2009:78>
|     |-TextComment 0x55b64bf67210 <line:2008:3> Text=" "
|     |-InlineCommandComment 0x55b64bf67230 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55b64bf67250 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x55b64bf67270 <line:2009:3> Text=" "
|     |-InlineCommandComment 0x55b64bf67290 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55b64bf672b0 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x55b64bec18b8 <line:2027:1, col:62> col:13 k_queue_prepend 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x55b64bec17b0 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x55b64bec1828 <col:52, col:58> col:58 data 'void *'
| `-FullComment 0x55b64bf67990 <line:2014:3, line:2025:14>
|   |-ParagraphComment 0x55b64bf67410 <line:2014:3>
|   | `-TextComment 0x55b64bf673e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf67430 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf67490 <col:10, col:40>
|   |   `-TextComment 0x55b64bf67460 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x55b64bf675b0 <line:2016:3, line:2018:24>
|   | |-TextComment 0x55b64bf674b0 <line:2016:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x55b64bf67500 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55b64bf67520 <col:50, col:75> Text=" A queue data item must be"
|   | |-TextComment 0x55b64bf67540 <line:2017:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x55b64bf67560 <line:2018:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x55b64bf67600 <line:2020:3>
|   | `-TextComment 0x55b64bf675d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf67620 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf67680 <col:9, col:31>
|   |   `-TextComment 0x55b64bf67650 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf676d0 <line:2022:3>
|   | `-TextComment 0x55b64bf676a0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf676f0 <col:4, line:2023:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf677a0 <line:2022:16, line:2023:3>
|   |   |-TextComment 0x55b64bf67750 <line:2022:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55b64bf67770 <line:2023:3> Text=" "
|   |-ParamCommandComment 0x55b64bf677c0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf67850 <col:15, col:40>
|   |   `-TextComment 0x55b64bf67820 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55b64bf678a0 <line:2025:3>
|   | `-TextComment 0x55b64bf67870 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf678c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf67920 <col:11, col:14>
|       `-TextComment 0x55b64bf678f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bec1ac8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2045:72> col:17 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55b64bec19c0 <col:39, col:55> col:55 queue 'struct k_queue *'
| |-ParmVarDecl 0x55b64bec1a38 <col:62, col:68> col:68 data 'void *'
| `-FullComment 0x55b64bf68010 <line:2030:3, line:2043:78>
|   |-ParagraphComment 0x55b64bf67a30 <line:2030:3>
|   | `-TextComment 0x55b64bf67a00 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf67a50 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf67ab0 <col:10, col:40>
|   |   `-TextComment 0x55b64bf67a80 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x55b64bf67bf0 <line:2032:3, line:2035:50>
|   | |-TextComment 0x55b64bf67ad0 <line:2032:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x55b64bf67b20 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55b64bf67b40 <col:50, col:77> Text=" There is an implicit memory"
|   | |-TextComment 0x55b64bf67b60 <line:2033:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x55b64bf67b80 <line:2034:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x55b64bf67ba0 <line:2035:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x55b64bf67c40 <line:2037:3>
|   | `-TextComment 0x55b64bf67c10 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf67c60 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf67cc0 <col:9, col:31>
|   |   `-TextComment 0x55b64bf67c90 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf67d10 <line:2039:3>
|   | `-TextComment 0x55b64bf67ce0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf67d30 <col:4, line:2040:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf67de0 <line:2039:16, line:2040:3>
|   |   |-TextComment 0x55b64bf67d90 <line:2039:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55b64bf67db0 <line:2040:3> Text=" "
|   |-ParamCommandComment 0x55b64bf67e00 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf67e90 <col:15, col:40>
|   |   `-TextComment 0x55b64bf67e60 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x55b64bf67fa0 <line:2042:3, line:2043:78>
|     |-TextComment 0x55b64bf67eb0 <line:2042:3> Text=" "
|     |-InlineCommandComment 0x55b64bf67ed0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55b64bf67ef0 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x55b64bf67f10 <line:2043:3> Text=" "
|     |-InlineCommandComment 0x55b64bf67f30 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55b64bf67f50 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x55b64bec1e10 <line:2062:1, col:73> col:13 k_queue_insert 'void (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x55b64bec1bf0 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x55b64bec1c68 <col:51, col:57> col:57 prev 'void *'
| |-ParmVarDecl 0x55b64bec1ce0 <col:63, col:69> col:69 data 'void *'
| `-FullComment 0x55b64bf68710 <line:2048:3, line:2060:14>
|   |-ParagraphComment 0x55b64bf680b0 <line:2048:3>
|   | `-TextComment 0x55b64bf68080 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf680d0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf68130 <col:10, col:40>
|   |   `-TextComment 0x55b64bf68100 <col:10, col:40> Text=" Inserts an element to a queue."
|   |-ParagraphComment 0x55b64bf68250 <line:2050:3, line:2052:45>
|   | |-TextComment 0x55b64bf68150 <line:2050:3, col:39> Text=" This routine inserts a data item to "
|   | |-InlineCommandComment 0x55b64bf681a0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x55b64bf681c0 <col:48, col:76> Text=" after previous item. A queue"
|   | |-TextComment 0x55b64bf681e0 <line:2051:3, col:70> Text=" data item must be aligned on a word boundary, and the first word of"
|   | `-TextComment 0x55b64bf68200 <line:2052:3, col:45> Text=" the item is reserved for the kernel's use."
|   |-ParagraphComment 0x55b64bf682a0 <line:2054:3>
|   | `-TextComment 0x55b64bf68270 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf682c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf68320 <col:9, col:31>
|   |   `-TextComment 0x55b64bf682f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf68370 <line:2056:3>
|   | `-TextComment 0x55b64bf68340 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf68390 <col:4, line:2057:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf68440 <line:2056:16, line:2057:3>
|   |   |-TextComment 0x55b64bf683f0 <line:2056:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55b64bf68410 <line:2057:3> Text=" "
|   |-ParamCommandComment 0x55b64bf68460 <col:4, line:2058:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf68510 <line:2057:15, line:2058:3>
|   |   |-TextComment 0x55b64bf684c0 <line:2057:15, col:49> Text=" Address of the previous data item."
|   |   `-TextComment 0x55b64bf684e0 <line:2058:3> Text=" "
|   |-ParamCommandComment 0x55b64bf68530 <col:4, col:40> [in] implicitly Param="data" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf685c0 <col:15, col:40>
|   |   `-TextComment 0x55b64bf68590 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55b64bf68610 <line:2060:3>
|   | `-TextComment 0x55b64bf685e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf68630 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf68690 <col:11, col:14>
|       `-TextComment 0x55b64bf68660 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bec2148 <line:2082:1, col:77> col:12 k_queue_append_list 'int (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x55b64bec1f20 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x55b64bec1f98 <col:55, col:61> col:61 head 'void *'
| |-ParmVarDecl 0x55b64bec2010 <col:67, col:73> col:73 tail 'void *'
| `-FullComment 0x55b64bf68ec0 <line:2065:3, line:2081:1>
|   |-ParagraphComment 0x55b64bf687b0 <line:2065:3>
|   | `-TextComment 0x55b64bf68780 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf687d0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x55b64bf68830 <col:10, col:58>
|   |   `-TextComment 0x55b64bf68800 <col:10, col:58> Text=" Atomically append a list of elements to a queue."
|   |-ParagraphComment 0x55b64bf68970 <line:2067:3, line:2070:19>
|   | |-TextComment 0x55b64bf68850 <line:2067:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x55b64bf688a0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x55b64bf688c0 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x55b64bf688e0 <line:2068:3, col:70> Text=" The data items must be in a singly-linked list, with the first word"
|   | |-TextComment 0x55b64bf68900 <line:2069:3, col:69> Text=" in each data item pointing to the next data item; the list must be"
|   | `-TextComment 0x55b64bf68920 <line:2070:3, col:19> Text=" NULL-terminated."
|   |-ParagraphComment 0x55b64bf689c0 <line:2072:3>
|   | `-TextComment 0x55b64bf68990 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf689e0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf68a40 <col:9, col:31>
|   |   `-TextComment 0x55b64bf68a10 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf68a90 <line:2074:3>
|   | `-TextComment 0x55b64bf68a60 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf68ab0 <col:4, line:2075:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf68b60 <line:2074:16, line:2075:3>
|   |   |-TextComment 0x55b64bf68b10 <line:2074:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55b64bf68b30 <line:2075:3> Text=" "
|   |-ParamCommandComment 0x55b64bf68b80 <col:4, line:2076:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf68c30 <line:2075:15, line:2076:3>
|   |   |-TextComment 0x55b64bf68be0 <line:2075:15, col:59> Text=" Pointer to first node in singly-linked list."
|   |   `-TextComment 0x55b64bf68c00 <line:2076:3> Text=" "
|   |-ParamCommandComment 0x55b64bf68c50 <col:4, col:58> [in] implicitly Param="tail" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf68ce0 <col:15, col:58>
|   |   `-TextComment 0x55b64bf68cb0 <col:15, col:58> Text=" Pointer to last node in singly-linked list."
|   |-ParagraphComment 0x55b64bf68df0 <line:2078:3, line:2079:43>
|   | |-TextComment 0x55b64bf68d00 <line:2078:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf68d20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf68d40 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x55b64bf68d60 <line:2079:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf68d80 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55b64bf68da0 <col:11, col:43> Text=" -EINVAL on invalid supplied data"
|   `-ParagraphComment 0x55b64bf68e40 <line:2081:1>
|     `-TextComment 0x55b64bf68e10 <col:1> Text=" "
|-FunctionDecl 0x55b64bec23d8 <line:2099:1, col:72> col:12 k_queue_merge_slist 'int (struct k_queue *, sys_slist_t *)' extern
| |-ParmVarDecl 0x55b64bec2250 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x55b64bec22c0 <col:55, col:68> col:68 list 'sys_slist_t *'
| `-FullComment 0x55b64bf69560 <line:2085:3, line:2097:34>
|   |-ParagraphComment 0x55b64bf68fa0 <line:2085:3>
|   | `-TextComment 0x55b64bf68f70 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf68fc0 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x55b64bf69020 <col:10, col:55>
|   |   `-TextComment 0x55b64bf68ff0 <col:10, col:55> Text=" Atomically add a list of elements to a queue."
|   |-ParagraphComment 0x55b64bf69140 <line:2087:3, line:2089:67>
|   | |-TextComment 0x55b64bf69040 <line:2087:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x55b64bf69090 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x55b64bf690b0 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x55b64bf690d0 <line:2088:3, col:69> Text=" The data items must be in a singly-linked list implemented using a"
|   | `-TextComment 0x55b64bf690f0 <line:2089:3, col:67> Text=" sys_slist_t object. Upon completion, the original list is empty."
|   |-ParagraphComment 0x55b64bf69190 <line:2091:3>
|   | `-TextComment 0x55b64bf69160 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf691b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf69210 <col:9, col:31>
|   |   `-TextComment 0x55b64bf691e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf69260 <line:2093:3>
|   | `-TextComment 0x55b64bf69230 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf69280 <col:4, line:2094:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf69330 <line:2093:16, line:2094:3>
|   |   |-TextComment 0x55b64bf692e0 <line:2093:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55b64bf69300 <line:2094:3> Text=" "
|   |-ParamCommandComment 0x55b64bf69350 <col:4, col:45> [in] implicitly Param="list" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf693e0 <col:15, col:45>
|   |   `-TextComment 0x55b64bf693b0 <col:15, col:45> Text=" Pointer to sys_slist_t object."
|   `-ParagraphComment 0x55b64bf694f0 <line:2096:3, line:2097:34>
|     |-TextComment 0x55b64bf69400 <line:2096:3> Text=" "
|     |-InlineCommandComment 0x55b64bf69420 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55b64bf69440 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x55b64bf69460 <line:2097:3> Text=" "
|     |-InlineCommandComment 0x55b64bf69480 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55b64bf694a0 <col:11, col:34> Text=" -EINVAL on invalid data"
|-FunctionDecl 0x55b64bec2668 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2117:65> col:17 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x55b64bec24e0 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x55b64bec2550 <col:52, col:58> col:58 timeout 's32_t':'int'
| `-FullComment 0x55b64bf69c40 <line:2102:3, line:2115:48>
|   |-ParagraphComment 0x55b64bf69600 <line:2102:3>
|   | `-TextComment 0x55b64bf695d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf69620 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x55b64bf69680 <col:10, col:38>
|   |   `-TextComment 0x55b64bf69650 <col:10, col:38> Text=" Get an element from a queue."
|   |-ParagraphComment 0x55b64bf69770 <line:2104:3, line:2105:46>
|   | |-TextComment 0x55b64bf696a0 <line:2104:3, col:45> Text=" This routine removes first data item from "
|   | |-InlineCommandComment 0x55b64bf696f0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55b64bf69710 <col:55, col:76> Text=" The first word of the"
|   | `-TextComment 0x55b64bf69730 <line:2105:3, col:46> Text=" data item is reserved for the kernel's use."
|   |-ParagraphComment 0x55b64bf697c0 <line:2107:3>
|   | `-TextComment 0x55b64bf69790 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf697e0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x55b64bf698c0 <col:9, col:72>
|   |   |-TextComment 0x55b64bf69810 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x55b64bf69860 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x55b64bf69880 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x55b64bf69910 <line:2109:3>
|   | `-TextComment 0x55b64bf698e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf69930 <col:4, line:2110:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf699e0 <line:2109:16, line:2110:3>
|   |   |-TextComment 0x55b64bf69990 <line:2109:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55b64bf699b0 <line:2110:3> Text=" "
|   |-ParamCommandComment 0x55b64bf69a00 <col:4, line:2112:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf69ae0 <line:2110:18, line:2112:28>
|   |   |-TextComment 0x55b64bf69a60 <line:2110:18, col:71> Text=" Non-negative waiting period to obtain a data item (in"
|   |   |-TextComment 0x55b64bf69a80 <line:2111:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55b64bf69aa0 <line:2112:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55b64bf69b30 <line:2114:3>
|   | `-TextComment 0x55b64bf69b00 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf69b50 <col:4, line:2115:48> Name="return"
|     `-ParagraphComment 0x55b64bf69bd0 <line:2114:11, line:2115:48>
|       |-TextComment 0x55b64bf69b80 <line:2114:11, col:67> Text=" Address of the data item if successful; NULL if returned"
|       `-TextComment 0x55b64bf69ba0 <line:2115:3, col:48> Text=" without waiting, or waiting period timed out."
|-FunctionDecl 0x55b64bec2900 <line:2133:1, line:2136:1> line:2133:20 k_queue_remove 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55b64bec2770 <col:35, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x55b64bec27e8 <col:58, col:64> col:64 used data 'void *'
| |-CompoundStmt 0x55b64bec2bf8 <line:2134:1, line:2136:1>
| | `-ReturnStmt 0x55b64bec2bb0 <line:2135:2, col:72>
| |   `-CallExpr 0x55b64bec2b60 <col:9, col:72> 'bool'
| |     |-ImplicitCastExpr 0x55b64bec2b48 <col:9> 'bool (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64bec29b0 <col:9> 'bool (sys_sflist_t *, sys_sfnode_t *)' Function 0x55b64be3b940 'sys_sflist_find_and_remove' 'bool (sys_sflist_t *, sys_sfnode_t *)'
| |     |-UnaryOperator 0x55b64bec2a50 <col:36, col:44> 'sys_sflist_t *' prefix '&'
| |     | `-MemberExpr 0x55b64bec2a18 <col:37, col:44> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x55b64bec0138
| |     |   `-ImplicitCastExpr 0x55b64bec2a00 <col:37> 'struct k_queue *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x55b64bec29d8 <col:37> 'struct k_queue *' lvalue ParmVar 0x55b64bec2770 'queue' 'struct k_queue *'
| |     `-CStyleCastExpr 0x55b64bec2ac0 <col:52, col:68> 'sys_sfnode_t *' <BitCast>
| |       `-ImplicitCastExpr 0x55b64bec2aa8 <col:68> 'void *' <LValueToRValue>
| |         `-DeclRefExpr 0x55b64bec2a70 <col:68> 'void *' lvalue ParmVar 0x55b64bec27e8 'data' 'void *'
| `-FullComment 0x55b64bf6a260 <line:2120:3, line:2131:40>
|   |-ParagraphComment 0x55b64bf69ce0 <line:2120:3>
|   | `-TextComment 0x55b64bf69cb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf69d00 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55b64bf69d60 <col:10, col:41>
|   |   `-TextComment 0x55b64bf69d30 <col:10, col:41> Text=" Remove an element from a queue."
|   |-ParagraphComment 0x55b64bf69e80 <line:2122:3, line:2124:76>
|   | |-TextComment 0x55b64bf69d80 <line:2122:3, col:39> Text=" This routine removes data item from "
|   | |-InlineCommandComment 0x55b64bf69dd0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55b64bf69df0 <col:49, col:70> Text=" The first word of the"
|   | |-TextComment 0x55b64bf69e10 <line:2123:3, col:77> Text=" data item is reserved for the kernel's use. Removing elements from k_queue"
|   | `-TextComment 0x55b64bf69e30 <line:2124:3, col:76> Text=" rely on sys_slist_find_and_remove which is not a constant time operation."
|   |-ParagraphComment 0x55b64bf69ed0 <line:2126:3>
|   | `-TextComment 0x55b64bf69ea0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf69ef0 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x55b64bf69f50 <col:9, col:30>
|   |   `-TextComment 0x55b64bf69f20 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x55b64bf69fa0 <line:2128:3>
|   | `-TextComment 0x55b64bf69f70 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf69fc0 <col:4, line:2129:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf6a070 <line:2128:16, line:2129:3>
|   |   |-TextComment 0x55b64bf6a020 <line:2128:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55b64bf6a040 <line:2129:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6a090 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf6a120 <col:15, col:40>
|   |   `-TextComment 0x55b64bf6a0f0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55b64bf6a170 <line:2131:3>
|   | `-TextComment 0x55b64bf6a140 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf6a190 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x55b64bf6a1f0 <col:11, col:40>
|       `-TextComment 0x55b64bf6a1c0 <col:11, col:40> Text=" true if data item was removed"
|-FunctionDecl 0x55b64bec2d40 <line:2152:1, line:2164:1> line:2152:20 k_queue_unique_append 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55b64bec2c38 <col:42, col:58> col:58 used queue 'struct k_queue *'
| |-ParmVarDecl 0x55b64bec2cb0 <col:65, col:71> col:71 used data 'void *'
| |-CompoundStmt 0x55b64bec3578 <line:2153:1, line:2164:1>
| | |-DeclStmt 0x55b64bec2e60 <line:2154:2, col:20>
| | | `-VarDecl 0x55b64bec2e00 <col:2, col:16> col:16 used test 'sys_sfnode_t *'
| | |-ForStmt 0x55b64bec3368 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:2, /vagrant/ext/zephyros/zephyr/include/kernel.h:2160:2>
| | | |-BinaryOperator 0x55b64bec2fa8 <line:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x55b64bec2e78 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x55b64bec2e00 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x55b64bec2f78 <<scratch space>:153:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x55b64bec2f60 <<scratch space>:153:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x55b64bec2ea0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
| | | |   `-UnaryOperator 0x55b64bec2f40 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:27, col:35> 'sys_sflist_t *' prefix '&'
| | | |     `-MemberExpr 0x55b64bec2f08 <col:28, col:35> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x55b64bec0138
| | | |       `-ImplicitCastExpr 0x55b64bec2ef0 <col:28> 'struct k_queue *' <LValueToRValue>
| | | |         `-DeclRefExpr 0x55b64bec2ec8 <col:28> 'struct k_queue *' lvalue ParmVar 0x55b64bec2c38 'queue' 'struct k_queue *'
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x55b64bec30a8 <col:43, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| | | | |-ImplicitCastExpr 0x55b64bec3078 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x55b64bec2fd0 <col:43> 'sys_sfnode_t *' lvalue Var 0x55b64bec2e00 'test' 'sys_sfnode_t *'
| | | | `-ImplicitCastExpr 0x55b64bec3090 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
| | | |   `-ParenExpr 0x55b64bec3058 <col:14, col:24> 'void *'
| | | |     `-CStyleCastExpr 0x55b64bec3030 <col:15, col:23> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x55b64bec2ff8 <col:23> 'int' 0
| | | |-BinaryOperator 0x55b64bec31a8 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x55b64bec30d0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x55b64bec2e00 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x55b64bec3160 <<scratch space>:155:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x55b64bec3148 <<scratch space>:155:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x55b64bec30f8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55b64be30be8 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
| | | |   `-ImplicitCastExpr 0x55b64bec3190 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55b64bec3120 <col:43> 'sys_sfnode_t *' lvalue Var 0x55b64bec2e00 'test' 'sys_sfnode_t *'
| | | `-CompoundStmt 0x55b64bec3350 <col:49, line:2160:2>
| | |   `-IfStmt 0x55b64bec3318 <line:2157:3, line:2159:3>
| | |     |-<<<NULL>>>
| | |     |-<<<NULL>>>
| | |     |-BinaryOperator 0x55b64bec3288 <line:2157:7, col:32> 'int' '=='
| | |     | |-ImplicitCastExpr 0x55b64bec3270 <col:7> 'sys_sfnode_t *' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x55b64bec31d0 <col:7> 'sys_sfnode_t *' lvalue Var 0x55b64bec2e00 'test' 'sys_sfnode_t *'
| | |     | `-CStyleCastExpr 0x55b64bec3248 <col:15, col:32> 'sys_sfnode_t *' <BitCast>
| | |     |   `-ImplicitCastExpr 0x55b64bec3230 <col:32> 'void *' <LValueToRValue>
| | |     |     `-DeclRefExpr 0x55b64bec31f8 <col:32> 'void *' lvalue ParmVar 0x55b64bec2cb0 'data' 'void *'
| | |     |-CompoundStmt 0x55b64bec3300 <col:38, line:2159:3>
| | |     | `-ReturnStmt 0x55b64bec32e8 <line:2158:4, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| | |     |   `-ImplicitCastExpr 0x55b64bec32d0 <col:16> 'bool' <IntegralToBoolean>
| | |     |     `-IntegerLiteral 0x55b64bec32b0 <col:16> 'int' 0
| | |     `-<<<NULL>>>
| | |-CallExpr 0x55b64bec3490 </vagrant/ext/zephyros/zephyr/include/kernel.h:2162:2, col:28> 'void'
| | | |-ImplicitCastExpr 0x55b64bec3478 <col:2> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x55b64bec33a0 <col:2> 'void (struct k_queue *, void *)' Function 0x55b64bec1420 'k_queue_append' 'void (struct k_queue *, void *)'
| | | |-ImplicitCastExpr 0x55b64bec34c8 <col:17> 'struct k_queue *' <LValueToRValue>
| | | | `-DeclRefExpr 0x55b64bec33c8 <col:17> 'struct k_queue *' lvalue ParmVar 0x55b64bec2c38 'queue' 'struct k_queue *'
| | | `-ImplicitCastExpr 0x55b64bec34e0 <col:24> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55b64bec33f0 <col:24> 'void *' lvalue ParmVar 0x55b64bec2cb0 'data' 'void *'
| | `-ReturnStmt 0x55b64bec3530 <line:2163:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
| |   `-ImplicitCastExpr 0x55b64bec3518 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x55b64bec34f8 <col:16> 'int' 1
| `-FullComment 0x55b64bf6a880 </vagrant/ext/zephyros/zephyr/include/kernel.h:2139:3, line:2150:52>
|   |-ParagraphComment 0x55b64bf6a300 <line:2139:3>
|   | `-TextComment 0x55b64bf6a2d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6a320 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x55b64bf6a380 <col:10, col:72>
|   |   `-TextComment 0x55b64bf6a350 <col:10, col:72> Text=" Append an element to a queue only if it's not present already."
|   |-ParagraphComment 0x55b64bf6a4a0 <line:2141:3, line:2143:78>
|   | |-TextComment 0x55b64bf6a3a0 <line:2141:3, col:37> Text=" This routine appends data item to "
|   | |-InlineCommandComment 0x55b64bf6a3f0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55b64bf6a410 <col:47, col:73> Text=" The first word of the data"
|   | |-TextComment 0x55b64bf6a430 <line:2142:3, col:71> Text=" item is reserved for the kernel's use. Appending elements to k_queue"
|   | `-TextComment 0x55b64bf6a450 <line:2143:3, col:78> Text=" relies on sys_slist_is_node_in_list which is not a constant time operation."
|   |-ParagraphComment 0x55b64bf6a4f0 <line:2145:3>
|   | `-TextComment 0x55b64bf6a4c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6a510 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x55b64bf6a570 <col:9, col:30>
|   |   `-TextComment 0x55b64bf6a540 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x55b64bf6a5c0 <line:2147:3>
|   | `-TextComment 0x55b64bf6a590 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6a5e0 <col:4, line:2148:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf6a690 <line:2147:16, line:2148:3>
|   |   |-TextComment 0x55b64bf6a640 <line:2147:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55b64bf6a660 <line:2148:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6a6b0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf6a740 <col:15, col:40>
|   |   `-TextComment 0x55b64bf6a710 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55b64bf6a790 <line:2150:3>
|   | `-TextComment 0x55b64bf6a760 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf6a7b0 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x55b64bf6a810 <col:11, col:52>
|       `-TextComment 0x55b64bf6a7e0 <col:11, col:52> Text=" true if data item was added, false if not"
|-FunctionDecl 0x55b64bec36d8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2179:53> col:15 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x55b64bec35d0 <col:32, col:48> col:48 queue 'struct k_queue *'
| `-FullComment 0x55b64bf6adc0 <line:2167:3, line:2177:34>
|   |-ParagraphComment 0x55b64bf6a920 <line:2167:3>
|   | `-TextComment 0x55b64bf6a8f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6a940 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x55b64bf6a9a0 <col:10, col:56>
|   |   `-TextComment 0x55b64bf6a970 <col:10, col:56> Text=" Query a queue to see if it has data available."
|   |-ParagraphComment 0x55b64bf6aa10 <line:2169:3, line:2170:59>
|   | |-TextComment 0x55b64bf6a9c0 <line:2169:3, col:77> Text=" Note that the data might be already gone by the time this function returns"
|   | `-TextComment 0x55b64bf6a9e0 <line:2170:3, col:59> Text=" if other threads are also trying to read from the queue."
|   |-ParagraphComment 0x55b64bf6aa60 <line:2172:3>
|   | `-TextComment 0x55b64bf6aa30 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6aa80 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf6aae0 <col:9, col:31>
|   |   `-TextComment 0x55b64bf6aab0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf6ab30 <line:2174:3>
|   | `-TextComment 0x55b64bf6ab00 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6ab50 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf6abe0 <col:16, col:37>
|   |   `-TextComment 0x55b64bf6abb0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55b64bf6ac30 <line:2176:3>
|   | `-TextComment 0x55b64bf6ac00 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6ac50 <col:4, line:2177:3> Name="return"
|   | `-ParagraphComment 0x55b64bf6acd0 <line:2176:11, line:2177:3>
|   |   |-TextComment 0x55b64bf6ac80 <line:2176:11, col:42> Text=" Non-zero if the queue is empty."
|   |   `-TextComment 0x55b64bf6aca0 <line:2177:3> Text=" "
|   `-BlockCommandComment 0x55b64bf6acf0 <col:4, col:34> Name="return"
|     `-ParagraphComment 0x55b64bf6ad50 <col:11, col:34>
|       `-TextComment 0x55b64bf6ad20 <col:11, col:34> Text=" 0 if data is available."
|-FunctionDecl 0x55b64bec3838 <line:2181:1, line:2184:1> line:2181:19 used z_impl_k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x55b64bec37a8 <col:43, col:59> col:59 used queue 'struct k_queue *'
| `-CompoundStmt 0x55b64bec3a68 <line:2182:1, line:2184:1>
|   `-ReturnStmt 0x55b64bec3a28 <line:2183:2, col:48>
|     `-CStyleCastExpr 0x55b64bec3a00 <col:9, col:48> 'int' <IntegralCast>
|       `-CallExpr 0x55b64bec39b8 <col:14, col:48> 'bool'
|         |-ImplicitCastExpr 0x55b64bec39a0 <col:14> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55b64bec38e0 <col:14> 'bool (sys_sflist_t *)' Function 0x55b64be2f350 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|         `-UnaryOperator 0x55b64bec3980 <col:34, col:42> 'sys_sflist_t *' prefix '&'
|           `-MemberExpr 0x55b64bec3948 <col:35, col:42> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x55b64bec0138
|             `-ImplicitCastExpr 0x55b64bec3930 <col:35> 'struct k_queue *' <LValueToRValue>
|               `-DeclRefExpr 0x55b64bec3908 <col:35> 'struct k_queue *' lvalue ParmVar 0x55b64bec37a8 'queue' 'struct k_queue *'
|-FunctionDecl 0x55b64bec4530 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2195:56> col:17 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55b64bec3aa8 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x55b64bf6b170 <line:2187:3, line:2193:51>
|   |-ParagraphComment 0x55b64bf6ae60 <line:2187:3>
|   | `-TextComment 0x55b64bf6ae30 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6ae80 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55b64bf6aee0 <col:10, col:44>
|   |   `-TextComment 0x55b64bf6aeb0 <col:10, col:44> Text=" Peek element at the head of queue."
|   |-ParagraphComment 0x55b64bf6af40 <line:2189:3, col:61>
|   | `-TextComment 0x55b64bf6af00 <col:3, col:61> Text=" Return element from the head of queue without removing it."
|   |-ParagraphComment 0x55b64bf6af90 <line:2191:3>
|   | `-TextComment 0x55b64bf6af60 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6afb0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf6b040 <col:16, col:37>
|   |   `-TextComment 0x55b64bf6b010 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55b64bf6b090 <line:2193:3>
|   | `-TextComment 0x55b64bf6b060 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf6b0b0 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x55b64bf6b110 <col:11, col:51>
|       `-TextComment 0x55b64bf6b0e0 <col:11, col:51> Text=" Head element, or NULL if queue is empty."
|-FunctionDecl 0x55b64bec4690 <line:2197:1, line:2200:1> line:2197:21 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55b64bec4600 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x55b64bec4998 <line:2198:1, line:2200:1>
|   `-ReturnStmt 0x55b64bec4950 <line:2199:2, col:70>
|     `-CallExpr 0x55b64bec4900 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x55b64bec48e8 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bec4738 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x55b64bec0d18 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x55b64bec4838 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x55b64bec4820 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55b64bec4760 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x55b64bec4800 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x55b64bec47c8 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x55b64bec0138
|       |     `-ImplicitCastExpr 0x55b64bec47b0 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x55b64bec4788 <col:49> 'struct k_queue *' lvalue ParmVar 0x55b64bec4600 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x55b64bec4938 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x55b64bec4868 <col:16> 'int' 0
|-FunctionDecl 0x55b64bec4a68 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2211:56> col:17 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55b64bec49d8 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x55b64bf6b510 <line:2203:3, line:2209:51>
|   |-ParagraphComment 0x55b64bf6b210 <line:2203:3>
|   | `-TextComment 0x55b64bf6b1e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6b230 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55b64bf6b290 <col:10, col:44>
|   |   `-TextComment 0x55b64bf6b260 <col:10, col:44> Text=" Peek element at the tail of queue."
|   |-ParagraphComment 0x55b64bf6b2e0 <line:2205:3, col:61>
|   | `-TextComment 0x55b64bf6b2b0 <col:3, col:61> Text=" Return element from the tail of queue without removing it."
|   |-ParagraphComment 0x55b64bf6b330 <line:2207:3>
|   | `-TextComment 0x55b64bf6b300 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6b350 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf6b3e0 <col:16, col:37>
|   |   `-TextComment 0x55b64bf6b3b0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55b64bf6b430 <line:2209:3>
|   | `-TextComment 0x55b64bf6b400 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf6b450 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x55b64bf6b4b0 <col:11, col:51>
|       `-TextComment 0x55b64bf6b480 <col:11, col:51> Text=" Tail element, or NULL if queue is empty."
|-FunctionDecl 0x55b64bec4bc8 <line:2213:1, line:2216:1> line:2213:21 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55b64bec4b38 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x55b64bec4e98 <line:2214:1, line:2216:1>
|   `-ReturnStmt 0x55b64bec4e28 <line:2215:2, col:70>
|     `-CallExpr 0x55b64bec4dd8 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x55b64bec4dc0 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bec4c70 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x55b64bec0d18 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x55b64bec4d70 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x55b64bec4d58 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55b64bec4c98 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55b64be2e3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x55b64bec4d38 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x55b64bec4d00 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x55b64bec0138
|       |     `-ImplicitCastExpr 0x55b64bec4ce8 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x55b64bec4cc0 <col:49> 'struct k_queue *' lvalue ParmVar 0x55b64bec4b38 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x55b64bec4e10 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x55b64bec4da0 <col:16> 'int' 0
|-RecordDecl 0x55b64bec4eb0 prev 0x55b64bea7210 </vagrant/ext/zephyros/zephyr/include/kernel.h:2310:1, line:2312:1> line:2310:8 struct k_fifo definition
| `-FieldDecl 0x55b64bec4f58 <line:2311:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-RecordDecl 0x55b64bec5348 prev 0x55b64bea72c0 <line:2525:1, line:2527:1> line:2525:8 struct k_lifo definition
| |-FullComment 0x55b64bf6b630 <line:2523:4, col:7>
| | `-ParagraphComment 0x55b64bf6b600 <col:4, col:7>
| |   |-TextComment 0x55b64bf6b580 <col:4> Text=" "
| |   |-TextComment 0x55b64bf6b5a0 <col:5> Text="@"
| |   `-TextComment 0x55b64bf6b5c0 <col:6, col:7> Text="} "
| `-FieldDecl 0x55b64bec53f0 <line:2526:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-TypedefDecl 0x55b64bdc1da8 <line:2641:1, col:19> col:19 referenced stack_data_t 'uintptr_t':'unsigned long'
| `-TypedefType 0x55b64be4b0d0 'uintptr_t' sugar
|   |-Typedef 0x55b64bd8f280 'uintptr_t'
|   `-BuiltinType 0x55b64bd0f850 'unsigned long'
|-RecordDecl 0x55b64bdc1e00 prev 0x55b64bea7370 <line:2643:1, line:2651:1> line:2643:8 struct k_stack definition
| |-FieldDecl 0x55b64bdc1e98 <line:2644:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x55b64bdc1f00 <line:2645:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-FieldDecl 0x55b64bdc1fd8 <line:2646:2, col:16> col:16 base 'stack_data_t *'
| |-FieldDecl 0x55b64bdc2030 <col:2, col:23> col:23 next 'stack_data_t *'
| |-FieldDecl 0x55b64bdc2088 <col:2, col:30> col:30 top 'stack_data_t *'
| `-FieldDecl 0x55b64bdc20e0 <line:2650:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x55b64bdc2480 <line:2686:1, line:2687:44> line:2686:6 k_stack_init 'void (struct k_stack *, stack_data_t *, u32_t)'
| |-ParmVarDecl 0x55b64bdc2270 <col:19, col:35> col:35 stack 'struct k_stack *'
| |-ParmVarDecl 0x55b64bdc22e0 <line:2687:5, col:19> col:19 buffer 'stack_data_t *'
| |-ParmVarDecl 0x55b64bdc2350 <col:27, col:33> col:33 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x55b64bf6bc40 <line:2675:3, line:2685:1>
|   |-ParagraphComment 0x55b64bf6b6d0 <line:2675:3>
|   | `-TextComment 0x55b64bf6b6a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6b6f0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55b64bf6b750 <col:10, col:29>
|   |   `-TextComment 0x55b64bf6b720 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x55b64bf6b7a0 <line:2677:3, col:67>
|   | `-TextComment 0x55b64bf6b770 <col:3, col:67> Text=" This routine initializes a stack object, prior to its first use."
|   |-ParagraphComment 0x55b64bf6b7f0 <line:2679:3>
|   | `-TextComment 0x55b64bf6b7c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6b810 <col:4, line:2680:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf6b8c0 <line:2679:16, line:2680:3>
|   |   |-TextComment 0x55b64bf6b870 <line:2679:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x55b64bf6b890 <line:2680:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6b8e0 <col:4, line:2681:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf6b990 <line:2680:17, line:2681:3>
|   |   |-TextComment 0x55b64bf6b940 <line:2680:17, col:62> Text=" Address of array used to hold stacked values."
|   |   `-TextComment 0x55b64bf6b960 <line:2681:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6b9b0 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf6ba40 <col:22, col:67>
|   |   `-TextComment 0x55b64bf6ba10 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x55b64bf6ba90 <line:2683:3>
|   | `-TextComment 0x55b64bf6ba60 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6bab0 <col:4, line:2684:3> Name="return"
|   | `-ParagraphComment 0x55b64bf6bb30 <line:2683:11, line:2684:3>
|   |   |-TextComment 0x55b64bf6bae0 <line:2683:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf6bb00 <line:2684:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf6bb50 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55b64bf6bbc0 <line:2685:1>
|     `-TextComment 0x55b64bf6bb90 <col:1> Text=" "
|-FunctionDecl 0x55b64bdc2710 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2706:25> line:2705:17 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x55b64bdc2590 <col:36, col:52> col:52 stack 'struct k_stack *'
| |-ParmVarDecl 0x55b64bdc2600 <line:2706:8, col:14> col:14 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x55b64bf6c1e0 <line:2691:3, line:2703:1>
|   |-ParagraphComment 0x55b64bf6bce0 <line:2691:3>
|   | `-TextComment 0x55b64bf6bcb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6bd00 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55b64bf6bd60 <col:10, col:29>
|   |   `-TextComment 0x55b64bf6bd30 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x55b64bf6be20 <line:2693:3, line:2696:72>
|   | |-TextComment 0x55b64bf6bd80 <line:2693:3, col:76> Text=" This routine initializes a stack object, prior to its first use. Internal"
|   | |-TextComment 0x55b64bf6bda0 <line:2694:3, col:69> Text=" buffers will be allocated from the calling thread's resource pool."
|   | |-TextComment 0x55b64bf6bdc0 <line:2695:3, col:66> Text=" This memory will be released if k_stack_cleanup() is called, or"
|   | `-TextComment 0x55b64bf6bde0 <line:2696:3, col:72> Text=" userspace is enabled and the stack object loses all references to it."
|   |-ParagraphComment 0x55b64bf6be70 <line:2698:3>
|   | `-TextComment 0x55b64bf6be40 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6be90 <col:4, line:2699:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf6bf40 <line:2698:16, line:2699:3>
|   |   |-TextComment 0x55b64bf6bef0 <line:2698:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x55b64bf6bf10 <line:2699:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6bf60 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf6bff0 <col:22, col:67>
|   |   `-TextComment 0x55b64bf6bfc0 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x55b64bf6c040 <line:2701:3>
|   | `-TextComment 0x55b64bf6c010 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6c060 <col:4, line:2702:3> Name="return"
|   | `-ParagraphComment 0x55b64bf6c0e0 <line:2701:11, line:2702:3>
|   |   |-TextComment 0x55b64bf6c090 <line:2701:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x55b64bf6c0b0 <line:2702:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf6c100 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55b64bf6c170 <line:2703:1>
|     `-TextComment 0x55b64bf6c140 <col:1> Text=" "
|-FunctionDecl 0x55b64bdc2918 <line:2720:1, col:42> col:5 k_stack_cleanup 'int (struct k_stack *)'
| |-ParmVarDecl 0x55b64bdc2810 <col:21, col:37> col:37 stack 'struct k_stack *'
| `-FullComment 0x55b64bf6c6a0 <line:2709:3, line:2719:1>
|   |-ParagraphComment 0x55b64bf6c280 <line:2709:3>
|   | `-TextComment 0x55b64bf6c250 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6c2a0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55b64bf6c300 <col:10, col:44>
|   |   `-TextComment 0x55b64bf6c2d0 <col:10, col:44> Text=" Release a stack's allocated buffer"
|   |-ParagraphComment 0x55b64bf6c3a0 <line:2711:3, line:2713:46>
|   | |-TextComment 0x55b64bf6c320 <line:2711:3, col:65> Text=" If a stack object was given a dynamically allocated buffer via"
|   | |-TextComment 0x55b64bf6c340 <line:2712:3, col:70> Text=" k_stack_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x55b64bf6c360 <line:2713:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x55b64bf6c3f0 <line:2715:3>
|   | `-TextComment 0x55b64bf6c3c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6c410 <col:4, line:2718:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf6c5b0 <line:2715:16, line:2718:3>
|   |   |-TextComment 0x55b64bf6c470 <line:2715:16, col:37> Text=" Address of the stack."
|   |   |-TextComment 0x55b64bf6c490 <line:2716:3> Text=" "
|   |   |-InlineCommandComment 0x55b64bf6c4b0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55b64bf6c4d0 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x55b64bf6c4f0 <line:2717:3> Text=" "
|   |   |-InlineCommandComment 0x55b64bf6c510 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55b64bf6c530 <col:11, col:46> Text=" -EAGAIN when object is still in use"
|   |   `-TextComment 0x55b64bf6c550 <line:2718:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf6c5d0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55b64bf6c640 <line:2719:1>
|     `-TextComment 0x55b64bf6c610 <col:1> Text=" "
|-FunctionDecl 0x55b64bdc2b98 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2736:68> col:15 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x55b64bdc2a10 <col:28, col:44> col:44 stack 'struct k_stack *'
| |-ParmVarDecl 0x55b64bdc2a80 <col:51, col:64> col:64 data 'stack_data_t':'unsigned long'
| `-FullComment 0x55b64bf6cdd0 <line:2723:3, line:2735:1>
|   |-ParagraphComment 0x55b64bf6c740 <line:2723:3>
|   | `-TextComment 0x55b64bf6c710 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6c760 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf6c7c0 <col:10, col:39>
|   |   `-TextComment 0x55b64bf6c790 <col:10, col:39> Text=" Push an element onto a stack."
|   |-ParagraphComment 0x55b64bf6c8e0 <line:2725:3, col:55>
|   | |-TextComment 0x55b64bf6c7e0 <col:3, col:42> Text=" This routine adds a stack_data_t value "
|   | |-InlineCommandComment 0x55b64bf6c830 <col:43, col:44> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x55b64bf6c850 <col:50, col:53> Text=" to "
|   | `-InlineCommandComment 0x55b64bf6c8a0 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="stack."
|   |-ParagraphComment 0x55b64bf6c930 <line:2727:3>
|   | `-TextComment 0x55b64bf6c900 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6c950 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf6c9b0 <col:9, col:31>
|   |   `-TextComment 0x55b64bf6c980 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf6ca00 <line:2729:3>
|   | `-TextComment 0x55b64bf6c9d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6ca20 <col:4, line:2730:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf6cad0 <line:2729:16, line:2730:3>
|   |   |-TextComment 0x55b64bf6ca80 <line:2729:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x55b64bf6caa0 <line:2730:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6caf0 <col:4, col:44> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf6cb80 <col:15, col:44>
|   |   `-TextComment 0x55b64bf6cb50 <col:15, col:44> Text=" Value to push onto the stack."
|   |-ParagraphComment 0x55b64bf6ccc0 <line:2732:3, line:2734:3>
|   | |-TextComment 0x55b64bf6cba0 <line:2732:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf6cbc0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf6cbe0 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x55b64bf6cc00 <line:2733:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf6cc20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf6cc40 <col:11, col:35> Text=" -ENOMEM if stack is full"
|   | `-TextComment 0x55b64bf6cc60 <line:2734:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf6cce0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55b64bf6cd50 <line:2735:1>
|     `-TextComment 0x55b64bf6cd20 <col:1> Text=" "
|-FunctionDecl 0x55b64bdc38a8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2758:19> line:2757:15 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x55b64bdc3688 <col:27, col:43> col:43 stack 'struct k_stack *'
| |-ParmVarDecl 0x55b64bdc36f8 <col:50, col:64> col:64 data 'stack_data_t *'
| |-ParmVarDecl 0x55b64bdc3768 <line:2758:6, col:12> col:12 timeout 's32_t':'int'
| `-FullComment 0x55b64bf6d750 <line:2739:3, line:2756:1>
|   |-ParagraphComment 0x55b64bf6ce70 <line:2739:3>
|   | `-TextComment 0x55b64bf6ce40 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6ce90 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x55b64bf6cef0 <col:10, col:38>
|   |   `-TextComment 0x55b64bf6cec0 <col:10, col:38> Text=" Pop an element from a stack."
|   |-ParagraphComment 0x55b64bf6d050 <line:2741:3, line:2742:47>
|   | |-TextComment 0x55b64bf6cf10 <line:2741:3, col:50> Text=" This routine removes a stack_data_t value from "
|   | |-InlineCommandComment 0x55b64bf6cf70 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="stack"
|   | |-TextComment 0x55b64bf6cf90 <col:59, col:73> Text=" in a "last in,"
|   | |-TextComment 0x55b64bf6cfb0 <line:2742:3, col:45> Text=" first out" manner and stores the value in "
|   | `-InlineCommandComment 0x55b64bf6d000 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="data."
|   |-ParagraphComment 0x55b64bf6d0a0 <line:2744:3>
|   | `-TextComment 0x55b64bf6d070 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6d0c0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x55b64bf6d1a0 <col:9, col:72>
|   |   |-TextComment 0x55b64bf6d0f0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x55b64bf6d140 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x55b64bf6d160 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x55b64bf6d1f0 <line:2746:3>
|   | `-TextComment 0x55b64bf6d1c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6d210 <col:4, line:2747:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf6d2c0 <line:2746:16, line:2747:3>
|   |   |-TextComment 0x55b64bf6d270 <line:2746:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x55b64bf6d290 <line:2747:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6d2e0 <col:4, line:2748:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf6d390 <line:2747:15, line:2748:3>
|   |   |-TextComment 0x55b64bf6d340 <line:2747:15, col:71> Text=" Address of area to hold the value popped from the stack."
|   |   `-TextComment 0x55b64bf6d360 <line:2748:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6d3b0 <col:4, line:2750:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf6d490 <line:2748:18, line:2750:28>
|   |   |-TextComment 0x55b64bf6d410 <line:2748:18, col:67> Text=" Non-negative waiting period to obtain a value (in"
|   |   |-TextComment 0x55b64bf6d430 <line:2749:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55b64bf6d450 <line:2750:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55b64bf6d640 <line:2752:3, line:2755:3>
|   | |-TextComment 0x55b64bf6d4b0 <line:2752:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf6d4d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf6d4f0 <col:11, col:39> Text=" 0 Element popped from stack."
|   | |-TextComment 0x55b64bf6d510 <line:2753:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf6d530 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf6d550 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x55b64bf6d570 <line:2754:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf6d590 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf6d5b0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55b64bf6d5d0 <line:2755:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf6d660 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55b64bf6d6d0 <line:2756:1>
|     `-TextComment 0x55b64bf6d6a0 <col:1> Text=" "
|-RecordDecl 0x55b64bdc39b8 <line:2780:1, col:8> col:8 struct k_work
| `-FullComment 0x55b64bf6d870 <line:2778:4, col:7>
|   `-ParagraphComment 0x55b64bf6d840 <col:4, col:7>
|     |-TextComment 0x55b64bf6d7c0 <col:4> Text=" "
|     |-TextComment 0x55b64bf6d7e0 <col:5> Text="@"
|     `-TextComment 0x55b64bf6d800 <col:6, col:7> Text="} "
|-RecordDecl 0x55b64bdc3a60 <line:2781:1, col:8> col:8 struct k_work_poll
|-TypedefDecl 0x55b64bdc3de0 <line:2784:1, col:68> col:15 referenced _poller_cb_t 'int (*)(struct k_poll_event *, u32_t)'
| `-PointerType 0x55b64bdc3d70 'int (*)(struct k_poll_event *, u32_t)'
|   `-ParenType 0x55b64bdc3d10 'int (struct k_poll_event *, u32_t)' sugar
|     `-FunctionProtoType 0x55b64bdc3cd0 'int (struct k_poll_event *, u32_t)' cdecl
|       |-BuiltinType 0x55b64bd0f790 'int'
|       |-PointerType 0x55b64bdc3b70 'struct k_poll_event *'
|       | `-ElaboratedType 0x55b64bdc3b10 'struct k_poll_event' sugar
|       |   `-RecordType 0x55b64bea76c0 'struct k_poll_event'
|       |     `-Record 0x55b64bef20f8 'k_poll_event'
|       `-TypedefType 0x55b64bda4da0 'u32_t' sugar
|         |-Typedef 0x55b64bd93e40 'u32_t'
|         `-BuiltinType 0x55b64bd0f830 'unsigned int'
|-RecordDecl 0x55b64bdc3e38 <line:2785:1, line:2789:1> line:2785:8 struct _poller definition
| |-FieldDecl 0x55b64bdc3ef0 <line:2786:2, col:16> col:16 is_polling 'volatile bool'
| |-FieldDecl 0x55b64bdc3f60 <line:2787:2, col:19> col:19 thread 'struct k_thread *'
| `-FieldDecl 0x55b64bdc3fe0 <line:2788:2, col:15> col:15 cb '_poller_cb_t':'int (*)(struct k_poll_event *, u32_t)'
|-TypedefDecl 0x55b64bdc42e0 <line:2808:1, col:53> col:16 referenced k_work_handler_t 'void (*)(struct k_work *)'
| |-PointerType 0x55b64bdc4280 'void (*)(struct k_work *)'
| | `-ParenType 0x55b64bdc4220 'void (struct k_work *)' sugar
| |   `-FunctionProtoType 0x55b64bdc41e0 'void (struct k_work *)' cdecl
| |     |-BuiltinType 0x55b64bd0f6f0 'void'
| |     `-PointerType 0x55b64bdc40f0 'struct k_work *'
| |       `-ElaboratedType 0x55b64bdc4090 'struct k_work' sugar
| |         `-RecordType 0x55b64bdc3a40 'struct k_work'
| |           `-Record 0x55b64bdc49c0 'k_work'
| `-FullComment 0x55b64bf6dd90 <line:2797:3, line:2807:1>
|   |-ParagraphComment 0x55b64bf6d910 <line:2797:3>
|   | `-TextComment 0x55b64bf6d8e0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf6d930 <col:4, col:29> Text=" k_work_handler_t"
|   |-ParagraphComment 0x55b64bf6d9a0 <line:2798:3>
|   | `-TextComment 0x55b64bf6d970 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6d9c0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55b64bf6da20 <col:10, col:42>
|   |   `-TextComment 0x55b64bf6d9f0 <col:10, col:42> Text=" Work item handler function type."
|   |-ParagraphComment 0x55b64bf6da90 <line:2800:3, line:2801:52>
|   | |-TextComment 0x55b64bf6da40 <line:2800:3, col:69> Text=" A work item's handler function is executed by a workqueue's thread"
|   | `-TextComment 0x55b64bf6da60 <line:2801:3, col:52> Text=" when the work item is processed by the workqueue."
|   |-ParagraphComment 0x55b64bf6dae0 <line:2803:3>
|   | `-TextComment 0x55b64bf6dab0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6db00 <col:4, col:40> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf6db90 <col:15, col:40>
|   |   `-TextComment 0x55b64bf6db60 <col:15, col:40> Text=" Address of the work item."
|   |-ParagraphComment 0x55b64bf6dbe0 <line:2805:3>
|   | `-TextComment 0x55b64bf6dbb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6dc00 <col:4, line:2806:3> Name="return"
|   | `-ParagraphComment 0x55b64bf6dc80 <line:2805:11, line:2806:3>
|   |   |-TextComment 0x55b64bf6dc30 <line:2805:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf6dc50 <line:2806:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf6dca0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55b64bf6dd10 <line:2807:1>
|     `-TextComment 0x55b64bf6dce0 <col:1> Text=" "
|-RecordDecl 0x55b64bdc4368 <line:2814:1, line:2817:1> line:2814:8 invalid struct k_work_q definition
| |-FullComment 0x55b64bf6deb0 <line:2811:3, col:24>
| | `-ParagraphComment 0x55b64bf6de80 <col:3, col:24>
| |   |-TextComment 0x55b64bf6de00 <col:3> Text=" "
| |   |-InlineCommandComment 0x55b64bf6de20 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55b64bf6de40 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55b64bdc4430 <line:2815:2, col:17> col:17 referenced queue 'struct k_queue':'struct k_queue'
| `-FieldDecl 0x55b64bdc4498 <line:2816:2, col:18> col:18 invalid thread 'struct k_thread':'struct k_thread'
|-EnumDecl 0x55b64bdc44e0 <line:2819:1, line:2821:1> line:2819:1
| `-EnumConstantDecl 0x55b64bdc45a0 <line:2820:2> col:2 referenced K_WORK_STATE_PENDING 'int'
|-RecordDecl 0x55b64bdc49c0 prev 0x55b64bdc39b8 <line:2823:1, line:2827:1> line:2823:8 struct k_work definition
| |-FieldDecl 0x55b64bdc4a60 <line:2824:2, col:8> col:8 _reserved 'void *'
| |-FieldDecl 0x55b64bdc4ae0 <line:2825:2, col:19> col:19 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FieldDecl 0x55b64bdc4be8 <line:2826:2, col:18> col:11 referenced flags 'atomic_t [1]'
|-RecordDecl 0x55b64bdc4c30 <line:2829:1, line:2833:1> line:2829:8 struct k_delayed_work definition
| |-FieldDecl 0x55b64bdc4d00 <line:2830:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x55b64bdc4d68 <line:2831:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x55b64bdc4e60 <line:2832:2, col:19> col:19 work_q 'struct k_work_q *'
|-RecordDecl 0x55b64bdc4f00 prev 0x55b64bdc3a60 <line:2835:1, line:2843:1> line:2835:8 struct k_work_poll definition
| |-FieldDecl 0x55b64bdc4fa8 <line:2836:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x55b64bdc5040 <line:2837:2, col:17> col:17 poller 'struct _poller':'struct _poller'
| |-FieldDecl 0x55b64bdc50b0 <line:2838:2, col:23> col:23 events 'struct k_poll_event *'
| |-FieldDecl 0x55b64bdc5110 <line:2839:2, col:6> col:6 num_events 'int'
| |-FieldDecl 0x55b64bdc5168 <line:2840:2, col:19> col:19 real_handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-FieldDecl 0x55b64bdc51d0 <line:2841:2, col:18> col:18 timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x55b64bdc5230 <line:2842:2, col:6> col:6 poll_result 'int'
|-VarDecl 0x55b64bdc5298 <line:2845:1, col:24> col:24 used k_sys_work_q 'struct k_work_q':'struct k_work_q' extern
|-FunctionDecl 0x55b64bdc5530 <line:2886:1, line:2889:1> line:2886:20 k_work_init 'void (struct k_work *, k_work_handler_t)' static inline
| |-ParmVarDecl 0x55b64bdc53b0 <col:32, col:47> col:47 used work 'struct k_work *'
| |-ParmVarDecl 0x55b64bdc5420 <col:53, col:70> col:70 used handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-CompoundStmt 0x55b64bdc6158 <line:2887:1, line:2889:1>
| | `-BinaryOperator 0x55b64bdc5980 <line:2888:2, line:2856:2> 'struct k_work':'struct k_work' '='
| |   |-UnaryOperator 0x55b64bdc5620 <line:2888:2, col:3> 'struct k_work':'struct k_work' lvalue prefix '*'
| |   | `-ImplicitCastExpr 0x55b64bdc5608 <col:3> 'struct k_work *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55b64bdc55e0 <col:3> 'struct k_work *' lvalue ParmVar 0x55b64bdc53b0 'work' 'struct k_work *'
| |   `-ImplicitCastExpr 0x55b64bdc5968 <col:10, line:2856:2> 'struct k_work':'struct k_work' <LValueToRValue>
| |     `-CompoundLiteralExpr 0x55b64bdc5940 <line:2888:10, line:2856:2> 'struct k_work':'struct k_work' lvalue
| |       `-InitListExpr 0x55b64bdc5888 <line:2852:2, line:2856:2> 'struct k_work':'struct k_work'
| |         |-ParenExpr 0x55b64bdc56c0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'void *'
| |         | `-CStyleCastExpr 0x55b64bdc5698 <col:15, col:23> 'void *' <NullToPointer>
| |         |   `-IntegerLiteral 0x55b64bdc5660 <col:23> 'int' 0
| |         |-ImplicitCastExpr 0x55b64bdc58e0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2888:44> 'k_work_handler_t':'void (*)(struct k_work *)' <LValueToRValue>
| |         | `-DeclRefExpr 0x55b64bdc5720 <col:44> 'k_work_handler_t':'void (*)(struct k_work *)' lvalue ParmVar 0x55b64bdc5420 'handler' 'k_work_handler_t':'void (*)(struct k_work *)'
| |         `-InitListExpr 0x55b64bdc58f8 <line:2855:11, col:15> 'atomic_t [1]'
| |           `-IntegerLiteral 0x55b64bdc5788 <col:13> 'int' 0
| `-FullComment 0x55b64bf6e3e0 <line:2876:3, line:2885:1>
|   |-ParagraphComment 0x55b64bf6df50 <line:2876:3>
|   | `-TextComment 0x55b64bf6df20 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6df70 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55b64bf6dfd0 <col:10, col:33>
|   |   `-TextComment 0x55b64bf6dfa0 <col:10, col:33> Text=" Initialize a work item."
|   |-ParagraphComment 0x55b64bf6e020 <line:2878:3, col:74>
|   | `-TextComment 0x55b64bf6dff0 <col:3, col:74> Text=" This routine initializes a workqueue work item, prior to its first use."
|   |-ParagraphComment 0x55b64bf6e070 <line:2880:3>
|   | `-TextComment 0x55b64bf6e040 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6e090 <col:4, line:2881:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf6e140 <line:2880:15, line:2881:3>
|   |   |-TextComment 0x55b64bf6e0f0 <line:2880:15, col:36> Text=" Address of work item."
|   |   `-TextComment 0x55b64bf6e110 <line:2881:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6e160 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf6e1f0 <col:18, col:70>
|   |   `-TextComment 0x55b64bf6e1c0 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x55b64bf6e240 <line:2883:3>
|   | `-TextComment 0x55b64bf6e210 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6e260 <col:4, line:2884:3> Name="return"
|   | `-ParagraphComment 0x55b64bf6e2e0 <line:2883:11, line:2884:3>
|   |   |-TextComment 0x55b64bf6e290 <line:2883:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf6e2b0 <line:2884:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf6e300 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55b64bf6e370 <line:2885:1>
|     `-TextComment 0x55b64bf6e340 <col:1> Text=" "
|-FunctionDecl 0x55b64bdc6330 <line:2913:1, line:2919:1> line:2913:20 used k_work_submit_to_queue 'void (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x55b64bdc6198 <col:43, col:60> col:60 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55b64bdc6220 <line:2914:8, col:23> col:23 used work 'struct k_work *'
| |-CompoundStmt 0x55b64bdc6778 <line:2915:1, line:2919:1>
| | `-IfStmt 0x55b64bdc6710 <line:2916:2, line:2918:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-UnaryOperator 0x55b64bdc6570 <line:2916:6, col:64> 'int' prefix '!'
| |   | `-CallExpr 0x55b64bdc6520 <col:7, col:64> 'bool'
| |   |   |-ImplicitCastExpr 0x55b64bdc6508 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x55b64bdc63e0 <col:7> 'bool (atomic_t *, int)' Function 0x55b64bda5750 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| |   |   |-ImplicitCastExpr 0x55b64bdc6558 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| |   |   | `-MemberExpr 0x55b64bdc6448 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x55b64bdc4be8
| |   |   |   `-ImplicitCastExpr 0x55b64bdc6430 <col:31> 'struct k_work *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x55b64bdc6408 <col:31> 'struct k_work *' lvalue ParmVar 0x55b64bdc6220 'work' 'struct k_work *'
| |   |   `-DeclRefExpr 0x55b64bdc6480 <col:44> 'int' EnumConstant 0x55b64bdc45a0 'K_WORK_STATE_PENDING' 'int'
| |   |-CompoundStmt 0x55b64bdc66f8 <col:67, line:2918:2>
| |   | `-CallExpr 0x55b64bdc6690 <line:2917:3, col:38> 'void'
| |   |   |-ImplicitCastExpr 0x55b64bdc6678 <col:3> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x55b64bdc6590 <col:3> 'void (struct k_queue *, void *)' Function 0x55b64bec1420 'k_queue_append' 'void (struct k_queue *, void *)'
| |   |   |-UnaryOperator 0x55b64bdc6630 <col:18, col:27> 'struct k_queue *' prefix '&'
| |   |   | `-MemberExpr 0x55b64bdc65f8 <col:19, col:27> 'struct k_queue':'struct k_queue' lvalue ->queue 0x55b64bdc4430
| |   |   |   `-ImplicitCastExpr 0x55b64bdc65e0 <col:19> 'struct k_work_q *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x55b64bdc65b8 <col:19> 'struct k_work_q *' lvalue ParmVar 0x55b64bdc6198 'work_q' 'struct k_work_q *'
| |   |   `-ImplicitCastExpr 0x55b64bdc66e0 <col:34> 'void *' <BitCast>
| |   |     `-ImplicitCastExpr 0x55b64bdc66c8 <col:34> 'struct k_work *' <LValueToRValue>
| |   |       `-DeclRefExpr 0x55b64bdc6650 <col:34> 'struct k_work *' lvalue ParmVar 0x55b64bdc6220 'work' 'struct k_work *'
| |   `-<<<NULL>>>
| `-FullComment 0x55b64bf6ecb0 <line:2892:3, line:2912:1>
|   |-ParagraphComment 0x55b64bf6e480 <line:2892:3>
|   | `-TextComment 0x55b64bf6e450 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6e4a0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55b64bf6e500 <col:10, col:29>
|   |   `-TextComment 0x55b64bf6e4d0 <col:10, col:29> Text=" Submit a work item."
|   |-ParagraphComment 0x55b64bf6e710 <line:2894:3, line:2899:15>
|   | |-TextComment 0x55b64bf6e520 <line:2894:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x55b64bf6e570 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55b64bf6e590 <col:42, col:70> Text=" to be processed by workqueue"
|   | |-TextComment 0x55b64bf6e5b0 <line:2895:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf6e600 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x55b64bf6e620 <col:14, col:74> Text=" If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x55b64bf6e640 <line:2896:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x55b64bf6e660 <line:2897:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x55b64bf6e680 <line:2898:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x55b64bf6e6a0 <line:2899:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x55b64bf6e760 <line:2901:3>
|   | `-TextComment 0x55b64bf6e730 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6e780 <col:4, line:2903:20> Name="warning"
|   | `-ParagraphComment 0x55b64bf6e800 <line:2902:3, line:2903:20>
|   |   |-TextComment 0x55b64bf6e7b0 <line:2902:3, col:73> Text=" A submitted work item must not be modified until it has been processed"
|   |   `-TextComment 0x55b64bf6e7d0 <line:2903:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x55b64bf6e850 <line:2905:3>
|   | `-TextComment 0x55b64bf6e820 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6e870 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf6e8d0 <col:9, col:31>
|   |   `-TextComment 0x55b64bf6e8a0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf6e920 <line:2907:3>
|   | `-TextComment 0x55b64bf6e8f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6e940 <col:4, line:2908:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf6e9f0 <line:2907:17, line:2908:3>
|   |   |-TextComment 0x55b64bf6e9a0 <line:2907:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55b64bf6e9c0 <line:2908:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6ea10 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf6eaa0 <col:15, col:36>
|   |   `-TextComment 0x55b64bf6ea70 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x55b64bf6eaf0 <line:2910:3>
|   | `-TextComment 0x55b64bf6eac0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6eb10 <col:4, line:2911:3> Name="return"
|   | `-ParagraphComment 0x55b64bf6eb90 <line:2910:11, line:2911:3>
|   |   |-TextComment 0x55b64bf6eb40 <line:2910:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf6eb60 <line:2911:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf6ebb0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55b64bf6ec20 <line:2912:1>
|     `-TextComment 0x55b64bf6ebf0 <col:1> Text=" "
|-FunctionDecl 0x55b64bdc6958 <line:2942:1, line:2959:1> line:2942:19 k_work_submit_to_user_queue 'int (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x55b64bdc67b8 <col:47, col:64> col:64 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55b64bdc6840 <line:2943:12, col:27> col:27 used work 'struct k_work *'
| |-CompoundStmt 0x55b64bdc7198 <line:2944:1, line:2959:1>
| | |-DeclStmt 0x55b64bdc6ac0 <line:2945:2, col:18>
| | | `-VarDecl 0x55b64bdc6a20 <col:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> /vagrant/ext/zephyros/zephyr/include/kernel.h:2945:6 used ret 'int' cinit
| | |   `-UnaryOperator 0x55b64bdc6aa0 <col:12, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> 'int' prefix '-'
| | |     `-IntegerLiteral 0x55b64bdc6a80 <col:15> 'int' 16
| | |-IfStmt 0x55b64bdc70c0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2947:2, line:2956:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x55b64bdc6c08 <line:2947:6, col:64> 'int' prefix '!'
| | | | `-CallExpr 0x55b64bdc6bb8 <col:7, col:64> 'bool'
| | | |   |-ImplicitCastExpr 0x55b64bdc6ba0 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x55b64bdc6ad8 <col:7> 'bool (atomic_t *, int)' Function 0x55b64bda5750 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| | | |   |-ImplicitCastExpr 0x55b64bdc6bf0 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| | | |   | `-MemberExpr 0x55b64bdc6b40 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x55b64bdc4be8
| | | |   |   `-ImplicitCastExpr 0x55b64bdc6b28 <col:31> 'struct k_work *' <LValueToRValue>
| | | |   |     `-DeclRefExpr 0x55b64bdc6b00 <col:31> 'struct k_work *' lvalue ParmVar 0x55b64bdc6840 'work' 'struct k_work *'
| | | |   `-DeclRefExpr 0x55b64bdc6b78 <col:44> 'int' EnumConstant 0x55b64bdc45a0 'K_WORK_STATE_PENDING' 'int'
| | | |-CompoundStmt 0x55b64bdc70a0 <col:67, line:2956:2>
| | | | |-BinaryOperator 0x55b64bdc6e18 <line:2948:3, col:50> 'int' '='
| | | | | |-DeclRefExpr 0x55b64bdc6c28 <col:3> 'int' lvalue Var 0x55b64bdc6a20 'ret' 'int'
| | | | | `-CallExpr 0x55b64bdc6db0 <col:9, col:50> 's32_t':'int'
| | | | |   |-ImplicitCastExpr 0x55b64bdc6d98 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | |   | `-DeclRefExpr 0x55b64bdc6c50 <col:9> 's32_t (struct k_queue *, void *)' Function 0x55b64bec16b0 'k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
| | | | |   |-UnaryOperator 0x55b64bdc6cf0 <col:30, col:39> 'struct k_queue *' prefix '&'
| | | | |   | `-MemberExpr 0x55b64bdc6cb8 <col:31, col:39> 'struct k_queue':'struct k_queue' lvalue ->queue 0x55b64bdc4430
| | | | |   |   `-ImplicitCastExpr 0x55b64bdc6ca0 <col:31> 'struct k_work_q *' <LValueToRValue>
| | | | |   |     `-DeclRefExpr 0x55b64bdc6c78 <col:31> 'struct k_work_q *' lvalue ParmVar 0x55b64bdc67b8 'work_q' 'struct k_work_q *'
| | | | |   `-ImplicitCastExpr 0x55b64bdc6e00 <col:46> 'void *' <BitCast>
| | | | |     `-ImplicitCastExpr 0x55b64bdc6de8 <col:46> 'struct k_work *' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x55b64bdc6d10 <col:46> 'struct k_work *' lvalue ParmVar 0x55b64bdc6840 'work' 'struct k_work *'
| | | | `-IfStmt 0x55b64bdc7068 <line:2953:3, line:2955:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-BinaryOperator 0x55b64bdc6ea0 <line:2953:7, col:14> 'int' '!='
| | | |   | |-ImplicitCastExpr 0x55b64bdc6e88 <col:7> 'int' <LValueToRValue>
| | | |   | | `-DeclRefExpr 0x55b64bdc6e40 <col:7> 'int' lvalue Var 0x55b64bdc6a20 'ret' 'int'
| | | |   | `-IntegerLiteral 0x55b64bdc6e68 <col:14> 'int' 0
| | | |   |-CompoundStmt 0x55b64bdc7050 <col:17, line:2955:3>
| | | |   | `-CallExpr 0x55b64bdc7000 <line:2954:4, col:54> 'void'
| | | |   |   |-ImplicitCastExpr 0x55b64bdc6fe8 <col:4> 'void (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   |   | `-DeclRefExpr 0x55b64bdc6ec8 <col:4> 'void (atomic_t *, int)' Function 0x55b64bda6250 'atomic_clear_bit' 'void (atomic_t *, int)'
| | | |   |   |-ImplicitCastExpr 0x55b64bdc7038 <col:21, col:27> 'atomic_t *' <ArrayToPointerDecay>
| | | |   |   | `-MemberExpr 0x55b64bdc6f30 <col:21, col:27> 'atomic_t [1]' lvalue ->flags 0x55b64bdc4be8
| | | |   |   |   `-ImplicitCastExpr 0x55b64bdc6f18 <col:21> 'struct k_work *' <LValueToRValue>
| | | |   |   |     `-DeclRefExpr 0x55b64bdc6ef0 <col:21> 'struct k_work *' lvalue ParmVar 0x55b64bdc6840 'work' 'struct k_work *'
| | | |   |   `-DeclRefExpr 0x55b64bdc6f68 <col:34> 'int' EnumConstant 0x55b64bdc45a0 'K_WORK_STATE_PENDING' 'int'
| | | |   `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x55b64bdc7158 <line:2958:2, col:9>
| |   `-ImplicitCastExpr 0x55b64bdc7140 <col:9> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55b64bdc70f8 <col:9> 'int' lvalue Var 0x55b64bdc6a20 'ret' 'int'
| `-FullComment 0x55b64bf6f480 <line:2922:3, line:2941:1>
|   |-ParagraphComment 0x55b64bf6ed50 <line:2922:3>
|   | `-TextComment 0x55b64bf6ed20 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6ed70 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55b64bf6edd0 <col:10, col:53>
|   |   `-TextComment 0x55b64bf6eda0 <col:10, col:53> Text=" Submit a work item to a user mode workqueue"
|   |-ParagraphComment 0x55b64bf6eec0 <line:2924:3, line:2928:71>
|   | |-TextComment 0x55b64bf6edf0 <line:2924:3, col:73> Text=" Submits a work item to a workqueue that runs in user mode. A temporary"
|   | |-TextComment 0x55b64bf6ee10 <line:2925:3, col:75> Text=" memory allocation is made from the caller's resource pool which is freed"
|   | |-TextComment 0x55b64bf6ee30 <line:2926:3, col:65> Text=" once the worker thread consumes the k_work item. The workqueue"
|   | |-TextComment 0x55b64bf6ee50 <line:2927:3, col:80> Text=" thread must have memory access to the k_work item being submitted. The caller"
|   | `-TextComment 0x55b64bf6ee70 <line:2928:3, col:71> Text=" must have permission granted on the work_q parameter's queue object."
|   |-ParagraphComment 0x55b64bf6ef10 <line:2930:3, col:61>
|   | `-TextComment 0x55b64bf6eee0 <col:3, col:61> Text=" Otherwise this works the same as k_work_submit_to_queue()."
|   |-ParagraphComment 0x55b64bf6ef70 <line:2932:3>
|   | `-TextComment 0x55b64bf6ef30 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6ef90 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf6eff0 <col:9, col:31>
|   |   `-TextComment 0x55b64bf6efc0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf6f040 <line:2934:3>
|   | `-TextComment 0x55b64bf6f010 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6f060 <col:4, line:2935:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf6f110 <line:2934:17, line:2935:3>
|   |   |-TextComment 0x55b64bf6f0c0 <line:2934:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55b64bf6f0e0 <line:2935:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6f130 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf6f1c0 <col:15, col:36>
|   |   `-TextComment 0x55b64bf6f190 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x55b64bf6f370 <line:2937:3, line:2940:3>
|   | |-TextComment 0x55b64bf6f1e0 <line:2937:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf6f200 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf6f220 <col:11, col:64> Text=" -EBUSY if the work item was already in some workqueue"
|   | |-TextComment 0x55b64bf6f240 <line:2938:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf6f260 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf6f280 <col:11, col:67> Text=" -ENOMEM if no memory for thread resource pool allocation"
|   | |-TextComment 0x55b64bf6f2a0 <line:2939:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf6f2c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf6f2e0 <col:11, col:20> Text=" 0 Success"
|   | `-TextComment 0x55b64bf6f300 <line:2940:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf6f390 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55b64bf6f400 <line:2941:1>
|     `-TextComment 0x55b64bf6f3d0 <col:1> Text=" "
|-FunctionDecl 0x55b64bdc72f0 <line:2974:1, line:2977:1> line:2974:20 k_work_pending 'bool (struct k_work *)' static inline
| |-ParmVarDecl 0x55b64bdc71e8 <col:35, col:50> col:50 used work 'struct k_work *'
| |-CompoundStmt 0x55b64bdc7578 <line:2975:1, line:2977:1>
| | `-ReturnStmt 0x55b64bdc7538 <line:2976:2, col:58>
| |   `-CallExpr 0x55b64bdc74d0 <col:9, col:58> 'bool'
| |     |-ImplicitCastExpr 0x55b64bdc74b8 <col:9> 'bool (*)(const atomic_t *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64bdc7398 <col:9> 'bool (const atomic_t *, int)' Function 0x55b64bda2ab0 'atomic_test_bit' 'bool (const atomic_t *, int)'
| |     |-ImplicitCastExpr 0x55b64bdc7520 <col:25, col:31> 'const atomic_t *' <BitCast>
| |     | `-ImplicitCastExpr 0x55b64bdc7508 <col:25, col:31> 'atomic_t *' <ArrayToPointerDecay>
| |     |   `-MemberExpr 0x55b64bdc7400 <col:25, col:31> 'atomic_t [1]' lvalue ->flags 0x55b64bdc4be8
| |     |     `-ImplicitCastExpr 0x55b64bdc73e8 <col:25> 'struct k_work *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x55b64bdc73c0 <col:25> 'struct k_work *' lvalue ParmVar 0x55b64bdc71e8 'work' 'struct k_work *'
| |     `-DeclRefExpr 0x55b64bdc7438 <col:38> 'int' EnumConstant 0x55b64bdc45a0 'K_WORK_STATE_PENDING' 'int'
| `-FullComment 0x55b64bf6fa60 <line:2962:3, line:2973:1>
|   |-ParagraphComment 0x55b64bf6f520 <line:2962:3>
|   | `-TextComment 0x55b64bf6f4f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6f540 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55b64bf6f5a0 <col:10, col:42>
|   |   `-TextComment 0x55b64bf6f570 <col:10, col:42> Text=" Check if a work item is pending."
|   |-ParagraphComment 0x55b64bf6f690 <line:2964:3, line:2965:9>
|   | |-TextComment 0x55b64bf6f5c0 <line:2964:3, col:39> Text=" This routine indicates if work item "
|   | |-InlineCommandComment 0x55b64bf6f610 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55b64bf6f630 <col:47, col:74> Text=" is pending in a workqueue's"
|   | `-TextComment 0x55b64bf6f650 <line:2965:3, col:9> Text=" queue."
|   |-ParagraphComment 0x55b64bf6f6e0 <line:2967:3>
|   | `-TextComment 0x55b64bf6f6b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6f700 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf6f760 <col:9, col:31>
|   |   `-TextComment 0x55b64bf6f730 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf6f7b0 <line:2969:3>
|   | `-TextComment 0x55b64bf6f780 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6f7d0 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf6f860 <col:15, col:36>
|   |   `-TextComment 0x55b64bf6f830 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x55b64bf6f8b0 <line:2971:3>
|   | `-TextComment 0x55b64bf6f880 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6f8d0 <col:4, line:2972:3> Name="return"
|   | `-ParagraphComment 0x55b64bf6f950 <line:2971:11, line:2972:3>
|   |   |-TextComment 0x55b64bf6f900 <line:2971:11, col:71> Text=" true if work item is pending, or false if it is not pending."
|   |   `-TextComment 0x55b64bf6f920 <line:2972:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf6f970 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55b64bf6f9e0 <line:2973:1>
|     `-TextComment 0x55b64bf6f9b0 <col:1> Text=" "
|-FunctionDecl 0x55b64bdc7850 <line:2996:1, line:2998:34> line:2996:13 k_work_q_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x55b64bdc75b8 <col:28, col:45> col:45 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55b64bdc7628 <line:2997:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55b64bdc7698 <line:2998:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64bdc7710 <col:26, col:30> col:30 prio 'int'
| `-FullComment 0x55b64bf70260 <line:2980:3, line:2995:1>
|   |-ParagraphComment 0x55b64bf6fb00 <line:2980:3>
|   | `-TextComment 0x55b64bf6fad0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf6fb20 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x55b64bf6fb80 <col:10, col:28>
|   |   `-TextComment 0x55b64bf6fb50 <col:10, col:28> Text=" Start a workqueue."
|   |-ParagraphComment 0x55b64bf6fc70 <line:2982:3, line:2983:41>
|   | |-TextComment 0x55b64bf6fba0 <line:2982:3, col:33> Text=" This routine starts workqueue "
|   | |-InlineCommandComment 0x55b64bf6fbf0 <col:34, col:35> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x55b64bf6fc10 <col:44, col:73> Text=" The workqueue spawns its work"
|   | `-TextComment 0x55b64bf6fc30 <line:2983:3, col:41> Text=" processing thread, which runs forever."
|   |-ParagraphComment 0x55b64bf6fcc0 <line:2985:3>
|   | `-TextComment 0x55b64bf6fc90 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6fce0 <col:4, line:2986:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf6fd90 <line:2985:17, line:2986:3>
|   |   |-TextComment 0x55b64bf6fd40 <line:2985:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55b64bf6fd60 <line:2986:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6fdb0 <col:4, line:2988:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf6fe90 <line:2986:16, line:2988:3>
|   |   |-TextComment 0x55b64bf6fe10 <line:2986:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x55b64bf6fe30 <line:2987:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x55b64bf6fe50 <line:2988:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6feb0 <col:4, line:2991:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf6ffb0 <line:2988:21, line:2991:3>
|   |   |-TextComment 0x55b64bf6ff10 <line:2988:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x55b64bf6ff30 <line:2989:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x55b64bf6ff50 <line:2990:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x55b64bf6ff70 <line:2991:3> Text=" "
|   |-ParamCommandComment 0x55b64bf6ffd0 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf70060 <col:15, col:51>
|   |   `-TextComment 0x55b64bf70030 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x55b64bf700b0 <line:2993:3>
|   | `-TextComment 0x55b64bf70080 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf700d0 <col:4, line:2994:3> Name="return"
|   | `-ParagraphComment 0x55b64bf70150 <line:2993:11, line:2994:3>
|   |   |-TextComment 0x55b64bf70100 <line:2993:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf70120 <line:2994:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf70170 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55b64bf701e0 <line:2995:1>
|     `-TextComment 0x55b64bf701b0 <col:1> Text=" "
|-FunctionDecl 0x55b64bdc7b58 <line:3020:1, line:3022:32> line:3020:13 k_work_q_user_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x55b64bdc7960 <col:33, col:50> col:50 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55b64bdc79d0 <line:3021:5, col:23> col:23 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55b64bdc7a40 <line:3022:5, col:12> col:12 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64bdc7ab8 <col:24, col:28> col:28 prio 'int'
| `-FullComment 0x55b64bf70a60 <line:3001:3, line:3019:1>
|   |-ParagraphComment 0x55b64bf70300 <line:3001:3>
|   | `-TextComment 0x55b64bf702d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf70320 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x55b64bf70380 <col:10, col:40>
|   |   `-TextComment 0x55b64bf70350 <col:10, col:40> Text=" Start a workqueue in user mode"
|   |-ParagraphComment 0x55b64bf70470 <line:3003:3, line:3007:21>
|   | |-TextComment 0x55b64bf703a0 <line:3003:3, col:77> Text=" This works identically to k_work_q_start() except it is callable from user"
|   | |-TextComment 0x55b64bf703c0 <line:3004:3, col:61> Text=" mode, and the worker thread created will run in user mode."
|   | |-TextComment 0x55b64bf703e0 <line:3005:3, col:74> Text=" The caller must have permissions granted on both the work_q parameter's"
|   | |-TextComment 0x55b64bf70400 <line:3006:3, col:75> Text=" thread and queue objects, and the same restrictions on priority apply as"
|   | `-TextComment 0x55b64bf70420 <line:3007:3, col:21> Text=" k_thread_create()."
|   |-ParagraphComment 0x55b64bf704c0 <line:3009:3>
|   | `-TextComment 0x55b64bf70490 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf704e0 <col:4, line:3010:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf70590 <line:3009:17, line:3010:3>
|   |   |-TextComment 0x55b64bf70540 <line:3009:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55b64bf70560 <line:3010:3> Text=" "
|   |-ParamCommandComment 0x55b64bf705b0 <col:4, line:3012:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf70690 <line:3010:16, line:3012:3>
|   |   |-TextComment 0x55b64bf70610 <line:3010:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x55b64bf70630 <line:3011:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x55b64bf70650 <line:3012:3> Text=" "
|   |-ParamCommandComment 0x55b64bf706b0 <col:4, line:3015:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf707b0 <line:3012:21, line:3015:3>
|   |   |-TextComment 0x55b64bf70710 <line:3012:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x55b64bf70730 <line:3013:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x55b64bf70750 <line:3014:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x55b64bf70770 <line:3015:3> Text=" "
|   |-ParamCommandComment 0x55b64bf707d0 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf70860 <col:15, col:51>
|   |   `-TextComment 0x55b64bf70830 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x55b64bf708b0 <line:3017:3>
|   | `-TextComment 0x55b64bf70880 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf708d0 <col:4, line:3018:3> Name="return"
|   | `-ParagraphComment 0x55b64bf70950 <line:3017:11, line:3018:3>
|   |   |-TextComment 0x55b64bf70900 <line:3017:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf70920 <line:3018:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf70970 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55b64bf709e0 <line:3019:1>
|     `-TextComment 0x55b64bf709b0 <col:1> Text=" "
|-FunctionDecl 0x55b64bdc7e80 <line:3036:1, line:3037:29> line:3036:13 k_delayed_work_init 'void (struct k_delayed_work *, k_work_handler_t)' extern
| |-ParmVarDecl 0x55b64bdc7d00 <col:33, col:56> col:56 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x55b64bdc7d70 <line:3037:5, col:22> col:22 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x55b64bf70fc0 <line:3025:3, line:3035:1>
|   |-ParagraphComment 0x55b64bf70b00 <line:3025:3>
|   | `-TextComment 0x55b64bf70ad0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf70b20 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55b64bf70b80 <col:10, col:41>
|   |   `-TextComment 0x55b64bf70b50 <col:10, col:41> Text=" Initialize a delayed work item."
|   |-ParagraphComment 0x55b64bf70bf0 <line:3027:3, line:3028:17>
|   | |-TextComment 0x55b64bf70ba0 <line:3027:3, col:67> Text=" This routine initializes a workqueue delayed work item, prior to"
|   | `-TextComment 0x55b64bf70bc0 <line:3028:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x55b64bf70c40 <line:3030:3>
|   | `-TextComment 0x55b64bf70c10 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf70c60 <col:4, line:3031:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf70d10 <line:3030:15, line:3031:3>
|   |   |-TextComment 0x55b64bf70cc0 <line:3030:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x55b64bf70ce0 <line:3031:3> Text=" "
|   |-ParamCommandComment 0x55b64bf70d30 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf70dc0 <col:18, col:70>
|   |   `-TextComment 0x55b64bf70d90 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x55b64bf70e10 <line:3033:3>
|   | `-TextComment 0x55b64bf70de0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf70e30 <col:4, line:3034:3> Name="return"
|   | `-ParagraphComment 0x55b64bf70eb0 <line:3033:11, line:3034:3>
|   |   |-TextComment 0x55b64bf70e60 <line:3033:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf70e80 <line:3034:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf70ed0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x55b64bf70f40 <line:3035:1>
|     `-TextComment 0x55b64bf70f10 <col:1> Text=" "
|-FunctionDecl 0x55b64bed9c98 <line:3071:1, line:3073:19> line:3071:12 used k_delayed_work_submit_to_queue 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' extern
| |-ParmVarDecl 0x55b64bdc7f80 <col:43, col:60> col:60 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55b64bdc8008 <line:3072:8, col:31> col:31 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x55b64bdc8078 <line:3073:8, col:14> col:14 delay 's32_t':'int'
| `-FullComment 0x55b64bf71bc0 <line:3040:3, line:3070:1>
|   |-ParagraphComment 0x55b64bf71060 <line:3040:3>
|   | `-TextComment 0x55b64bf71030 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf71080 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55b64bf710e0 <col:10, col:37>
|   |   `-TextComment 0x55b64bf710b0 <col:10, col:37> Text=" Submit a delayed work item."
|   |-ParagraphComment 0x55b64bf71350 <line:3042:3, line:3046:37>
|   | |-TextComment 0x55b64bf71100 <line:3042:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x55b64bf71150 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55b64bf71170 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x55b64bf71190 <line:3043:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf711e0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x55b64bf71200 <col:13, col:30> Text=" after a delay of "
|   | |-InlineCommandComment 0x55b64bf71250 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x55b64bf71270 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x55b64bf71290 <line:3044:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x55b64bf712b0 <line:3045:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x55b64bf712d0 <line:3046:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x55b64bf71460 <line:3048:3, line:3053:28>
|   | |-TextComment 0x55b64bf71370 <line:3048:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x55b64bf71390 <line:3049:3, col:65> Text=" counting down cancels the existing submission and restarts the"
|   | |-TextComment 0x55b64bf713b0 <line:3050:3, col:61> Text=" countdown using the new delay.  Note that this behavior is"
|   | |-TextComment 0x55b64bf713d0 <line:3051:3, col:62> Text=" inherently subject to race conditions with the pre-existing"
|   | |-TextComment 0x55b64bf713f0 <line:3052:3, col:69> Text=" timeouts and work queue, so care must be taken to synchronize such"
|   | `-TextComment 0x55b64bf71410 <line:3053:3, col:28> Text=" resubmissions externally."
|   |-ParagraphComment 0x55b64bf714b0 <line:3055:3>
|   | `-TextComment 0x55b64bf71480 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf714d0 <col:4, line:3057:20> Name="warning"
|   | `-ParagraphComment 0x55b64bf71550 <line:3056:3, line:3057:20>
|   |   |-TextComment 0x55b64bf71500 <line:3056:3, col:71> Text=" A delayed work item must not be modified until it has been processed"
|   |   `-TextComment 0x55b64bf71520 <line:3057:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x55b64bf715a0 <line:3059:3>
|   | `-TextComment 0x55b64bf71570 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf715c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf71620 <col:9, col:31>
|   |   `-TextComment 0x55b64bf715f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf71670 <line:3061:3>
|   | `-TextComment 0x55b64bf71640 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf71690 <col:4, line:3062:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf71740 <line:3061:17, line:3062:3>
|   |   |-TextComment 0x55b64bf716f0 <line:3061:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55b64bf71710 <line:3062:3> Text=" "
|   |-ParamCommandComment 0x55b64bf71760 <col:4, line:3063:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf71810 <line:3062:15, line:3063:3>
|   |   |-TextComment 0x55b64bf717c0 <line:3062:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x55b64bf717e0 <line:3063:3> Text=" "
|   |-ParamCommandComment 0x55b64bf71830 <col:4, line:3064:18> [in] implicitly Param="delay" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf718e0 <line:3063:16, line:3064:18>
|   |   |-TextComment 0x55b64bf71890 <line:3063:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x55b64bf718b0 <line:3064:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x55b64bf71a90 <line:3066:3, line:3069:3>
|   | |-TextComment 0x55b64bf71900 <line:3066:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf71920 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf71940 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x55b64bf71960 <line:3067:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf71980 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf719a0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x55b64bf719c0 <line:3068:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf719e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf71a00 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x55b64bf71a20 <line:3069:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf71ab0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x55b64bf71b20 <line:3070:1>
|     `-TextComment 0x55b64bf71af0 <col:1> Text=" "
|-FunctionDecl 0x55b64bed9ea8 <line:3094:1, col:61> col:12 k_delayed_work_cancel 'int (struct k_delayed_work *)' extern
| |-ParmVarDecl 0x55b64bed9da0 <col:34, col:57> col:57 work 'struct k_delayed_work *'
| `-FullComment 0x55b64bf72310 <line:3076:3, line:3093:1>
|   |-ParagraphComment 0x55b64bf71c60 <line:3076:3>
|   | `-TextComment 0x55b64bf71c30 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf71c80 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55b64bf71ce0 <col:10, col:37>
|   |   `-TextComment 0x55b64bf71cb0 <col:10, col:37> Text=" Cancel a delayed work item."
|   |-ParagraphComment 0x55b64bf71dd0 <line:3078:3, line:3080:12>
|   | |-TextComment 0x55b64bf71d00 <line:3078:3, col:60> Text=" This routine cancels the submission of delayed work item "
|   | |-InlineCommandComment 0x55b64bf71d50 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x55b64bf71d70 <line:3079:3, col:72> Text=" A delayed work item can only be canceled while its countdown is still"
|   | `-TextComment 0x55b64bf71d90 <line:3080:3, col:12> Text=" underway."
|   |-ParagraphComment 0x55b64bf71e20 <line:3082:3>
|   | `-TextComment 0x55b64bf71df0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf71e40 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf71ea0 <col:9, col:31>
|   |   `-TextComment 0x55b64bf71e70 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf71ef0 <line:3084:3>
|   | `-TextComment 0x55b64bf71ec0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf71f10 <col:4, line:3086:55> Name="note"
|   | `-ParagraphComment 0x55b64bf71fc0 <line:3084:9, line:3086:55>
|   |   |-TextComment 0x55b64bf71f40 <line:3084:9, col:69> Text=" The result of calling this on a k_delayed_work item that has"
|   |   |-TextComment 0x55b64bf71f60 <line:3085:3, col:52> Text=" not been submitted (i.e. before the return of the"
|   |   `-TextComment 0x55b64bf71f80 <line:3086:3, col:55> Text=" k_delayed_work_submit_to_queue() call) is undefined."
|   |-ParagraphComment 0x55b64bf72010 <line:3088:3>
|   | `-TextComment 0x55b64bf71fe0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf72030 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf720c0 <col:15, col:44>
|   |   `-TextComment 0x55b64bf72090 <col:15, col:44> Text=" Address of delayed work item."
|   |-ParagraphComment 0x55b64bf72200 <line:3090:3, line:3092:3>
|   | |-TextComment 0x55b64bf720e0 <line:3090:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf72100 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf72120 <col:11, col:42> Text=" 0 Work item countdown canceled."
|   | |-TextComment 0x55b64bf72140 <line:3091:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf72160 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf72180 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | `-TextComment 0x55b64bf721a0 <line:3092:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf72220 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x55b64bf72290 <line:3093:1>
|     `-TextComment 0x55b64bf72260 <col:1> Text=" "
|-FunctionDecl 0x55b64beda028 <line:3118:1, line:3121:1> line:3118:20 k_work_submit 'void (struct k_work *)' static inline
| |-ParmVarDecl 0x55b64bed9fa0 <col:34, col:49> col:49 used work 'struct k_work *'
| |-CompoundStmt 0x55b64beda258 <line:3119:1, line:3121:1>
| | `-CallExpr 0x55b64beda1e0 <line:3120:2, col:44> 'void'
| |   |-ImplicitCastExpr 0x55b64beda1c8 <col:2> 'void (*)(struct k_work_q *, struct k_work *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x55b64beda0d0 <col:2> 'void (struct k_work_q *, struct k_work *)' Function 0x55b64bdc6330 'k_work_submit_to_queue' 'void (struct k_work_q *, struct k_work *)'
| |   |-UnaryOperator 0x55b64beda120 <col:25, col:26> 'struct k_work_q *' prefix '&'
| |   | `-DeclRefExpr 0x55b64beda0f8 <col:26> 'struct k_work_q':'struct k_work_q' lvalue Var 0x55b64bdc5298 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |   `-ImplicitCastExpr 0x55b64beda218 <col:40> 'struct k_work *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b64beda140 <col:40> 'struct k_work *' lvalue ParmVar 0x55b64bed9fa0 'work' 'struct k_work *'
| `-FullComment 0x55b64bf72ac0 <line:3097:3, line:3117:1>
|   |-ParagraphComment 0x55b64bf723b0 <line:3097:3>
|   | `-TextComment 0x55b64bf72380 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf723d0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55b64bf72430 <col:10, col:53>
|   |   `-TextComment 0x55b64bf72400 <col:10, col:53> Text=" Submit a work item to the system workqueue."
|   |-ParagraphComment 0x55b64bf725c0 <line:3099:3, line:3104:15>
|   | |-TextComment 0x55b64bf72450 <line:3099:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x55b64bf724a0 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55b64bf724c0 <col:42, col:71> Text=" to be processed by the system"
|   | |-TextComment 0x55b64bf724e0 <line:3100:3, col:74> Text=" workqueue. If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x55b64bf72500 <line:3101:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x55b64bf72520 <line:3102:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x55b64bf72540 <line:3103:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x55b64bf72560 <line:3104:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x55b64bf72610 <line:3106:3>
|   | `-TextComment 0x55b64bf725e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf72630 <col:4, line:3109:50> Name="warning"
|   | `-ParagraphComment 0x55b64bf726e0 <line:3107:3, line:3109:50>
|   |   |-TextComment 0x55b64bf72660 <line:3107:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x55b64bf72680 <line:3108:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x55b64bf726a0 <line:3109:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x55b64bf72730 <line:3111:3>
|   | `-TextComment 0x55b64bf72700 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf72750 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf727b0 <col:9, col:31>
|   |   `-TextComment 0x55b64bf72780 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf72800 <line:3113:3>
|   | `-TextComment 0x55b64bf727d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf72820 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf728b0 <col:15, col:36>
|   |   `-TextComment 0x55b64bf72880 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x55b64bf72900 <line:3115:3>
|   | `-TextComment 0x55b64bf728d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf72920 <col:4, line:3116:3> Name="return"
|   | `-ParagraphComment 0x55b64bf729a0 <line:3115:11, line:3116:3>
|   |   |-TextComment 0x55b64bf72950 <line:3115:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf72970 <line:3116:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf729c0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55b64bf72a30 <line:3117:1>
|     `-TextComment 0x55b64bf72a00 <col:1> Text=" "
|-FunctionDecl 0x55b64beda428 <line:3156:1, line:3160:1> line:3156:19 k_delayed_work_submit 'int (struct k_delayed_work *, s32_t)' static inline
| |-ParmVarDecl 0x55b64beda298 <col:41, col:64> col:64 used work 'struct k_delayed_work *'
| |-ParmVarDecl 0x55b64beda308 <line:3157:6, col:12> col:12 used delay 's32_t':'int'
| |-CompoundStmt 0x55b64beda6c8 <line:3158:1, line:3160:1>
| | `-ReturnStmt 0x55b64beda680 <line:3159:2, col:66>
| |   `-CallExpr 0x55b64beda610 <col:9, col:66> 'int'
| |     |-ImplicitCastExpr 0x55b64beda5f8 <col:9> 'int (*)(struct k_work_q *, struct k_delayed_work *, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64beda4d8 <col:9> 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' Function 0x55b64bed9c98 'k_delayed_work_submit_to_queue' 'int (struct k_work_q *, struct k_delayed_work *, s32_t)'
| |     |-UnaryOperator 0x55b64beda528 <col:40, col:41> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x55b64beda500 <col:41> 'struct k_work_q':'struct k_work_q' lvalue Var 0x55b64bdc5298 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x55b64beda650 <col:55> 'struct k_delayed_work *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64beda548 <col:55> 'struct k_delayed_work *' lvalue ParmVar 0x55b64beda298 'work' 'struct k_delayed_work *'
| |     `-ImplicitCastExpr 0x55b64beda668 <col:61> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x55b64beda570 <col:61> 's32_t':'int' lvalue ParmVar 0x55b64beda308 'delay' 's32_t':'int'
| `-FullComment 0x55b64bf735e0 <line:3124:3, line:3155:1>
|   |-ParagraphComment 0x55b64bf72b60 <line:3124:3>
|   | `-TextComment 0x55b64bf72b30 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf72b80 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x55b64bf72be0 <col:10, col:61>
|   |   `-TextComment 0x55b64bf72bb0 <col:10, col:61> Text=" Submit a delayed work item to the system workqueue."
|   |-ParagraphComment 0x55b64bf72dd0 <line:3126:3, line:3130:37>
|   | |-TextComment 0x55b64bf72c00 <line:3126:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x55b64bf72c50 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55b64bf72c70 <col:44, col:73> Text=" to be processed by the system"
|   | |-TextComment 0x55b64bf72c90 <line:3127:3, col:30> Text=" workqueue after a delay of "
|   | |-InlineCommandComment 0x55b64bf72ce0 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x55b64bf72d00 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x55b64bf72d20 <line:3128:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x55b64bf72d40 <line:3129:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x55b64bf72d60 <line:3130:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x55b64bf72f10 <line:3132:3, line:3138:72>
|   | |-TextComment 0x55b64bf72df0 <line:3132:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x55b64bf72e10 <line:3133:3, col:75> Text=" counting down cancels the existing submission and restarts the countdown"
|   | |-TextComment 0x55b64bf72e30 <line:3134:3, col:68> Text=" using the new delay. If the work item is currently pending on the"
|   | |-TextComment 0x55b64bf72e50 <line:3135:3, col:74> Text=" workqueue's queue because the countdown has completed it is too late to"
|   | |-TextComment 0x55b64bf72e70 <line:3136:3, col:77> Text=" resubmit the item, and resubmission fails without impacting the work item."
|   | |-TextComment 0x55b64bf72e90 <line:3137:3, col:80> Text=" If the work item has already been processed, or is currently being processed,"
|   | `-TextComment 0x55b64bf72eb0 <line:3138:3, col:72> Text=" its work is considered complete and the work item can be resubmitted."
|   |-ParagraphComment 0x55b64bf72f80 <line:3140:3>
|   | `-TextComment 0x55b64bf72f30 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf72fa0 <col:4, line:3143:50> Name="warning"
|   | `-ParagraphComment 0x55b64bf73050 <line:3141:3, line:3143:50>
|   |   |-TextComment 0x55b64bf72fd0 <line:3141:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x55b64bf72ff0 <line:3142:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x55b64bf73010 <line:3143:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x55b64bf730a0 <line:3145:3>
|   | `-TextComment 0x55b64bf73070 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf730c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf73120 <col:9, col:31>
|   |   `-TextComment 0x55b64bf730f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf73170 <line:3147:3>
|   | `-TextComment 0x55b64bf73140 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf73190 <col:4, line:3148:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf73240 <line:3147:15, line:3148:3>
|   |   |-TextComment 0x55b64bf731f0 <line:3147:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x55b64bf73210 <line:3148:3> Text=" "
|   |-ParamCommandComment 0x55b64bf73260 <col:4, line:3149:18> [in] implicitly Param="delay" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf73310 <line:3148:16, line:3149:18>
|   |   |-TextComment 0x55b64bf732c0 <line:3148:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x55b64bf732e0 <line:3149:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x55b64bf734c0 <line:3151:3, line:3154:3>
|   | |-TextComment 0x55b64bf73330 <line:3151:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf73350 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf73370 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x55b64bf73390 <line:3152:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf733b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf733d0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x55b64bf733f0 <line:3153:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf73410 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf73430 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x55b64bf73450 <line:3154:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf734e0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x55b64bf73550 <line:3155:1>
|     `-TextComment 0x55b64bf73520 <col:1> Text=" "
|-FunctionDecl 0x55b64beda7d0 <line:3174:1, line:3177:1> line:3174:21 k_delayed_work_remaining_get 's32_t (struct k_delayed_work *)' static inline
| |-ParmVarDecl 0x55b64beda708 <col:50, col:73> col:73 used work 'struct k_delayed_work *'
| |-CompoundStmt 0x55b64bedaa68 <line:3175:1, line:3177:1>
| | `-ReturnStmt 0x55b64bedaa20 <line:3176:2, col:66>
| |   `-ImplicitCastExpr 0x55b64bedaa08 <col:9, col:66> 's32_t':'int' <IntegralCast>
| |     `-CallExpr 0x55b64beda9c0 <col:9, col:66> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55b64beda9a8 <col:9> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55b64beda878 <col:9> 'u64_t (u64_t)' Function 0x55b64be8d270 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
| |       `-ImplicitCastExpr 0x55b64beda9f0 <col:31, col:65> 'u64_t':'unsigned long long' <IntegralCast>
| |         `-CallExpr 0x55b64beda978 <col:31, col:65> 's32_t':'int'
| |           |-ImplicitCastExpr 0x55b64beda960 <col:31> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x55b64beda8a0 <col:31> 's32_t (struct _timeout *)' Function 0x55b64bebd3d0 'z_timeout_remaining' 's32_t (struct _timeout *)'
| |           `-UnaryOperator 0x55b64beda940 <col:51, col:58> 'struct _timeout *' prefix '&'
| |             `-MemberExpr 0x55b64beda908 <col:52, col:58> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x55b64bdc4d68
| |               `-ImplicitCastExpr 0x55b64beda8f0 <col:52> 'struct k_delayed_work *' <LValueToRValue>
| |                 `-DeclRefExpr 0x55b64beda8c8 <col:52> 'struct k_delayed_work *' lvalue ParmVar 0x55b64beda708 'work' 'struct k_delayed_work *'
| `-FullComment 0x55b64bf73a90 <line:3163:3, line:3173:1>
|   |-ParagraphComment 0x55b64bf73680 <line:3163:3>
|   | `-TextComment 0x55b64bf73650 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf736a0 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x55b64bf73700 <col:10, col:66>
|   |   `-TextComment 0x55b64bf736d0 <col:10, col:66> Text=" Get time remaining before a delayed work gets scheduled."
|   |-ParagraphComment 0x55b64bf737a0 <line:3165:3, line:3167:30>
|   | |-TextComment 0x55b64bf73720 <line:3165:3, col:66> Text=" This routine computes the (approximate) time remaining before a"
|   | |-TextComment 0x55b64bf73740 <line:3166:3, col:71> Text=" delayed work gets executed. If the delayed work is not waiting to be"
|   | `-TextComment 0x55b64bf73760 <line:3167:3, col:30> Text=" scheduled, it returns zero."
|   |-ParagraphComment 0x55b64bf737f0 <line:3169:3>
|   | `-TextComment 0x55b64bf737c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf73810 <col:4, col:37> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf738a0 <col:15, col:37>
|   |   `-TextComment 0x55b64bf73870 <col:15, col:37> Text="     Delayed work item."
|   |-ParagraphComment 0x55b64bf738f0 <line:3171:3>
|   | `-TextComment 0x55b64bf738c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf73910 <col:4, line:3172:3> Name="return"
|   | `-ParagraphComment 0x55b64bf73990 <line:3171:11, line:3172:3>
|   |   |-TextComment 0x55b64bf73940 <line:3171:11, col:44> Text=" Remaining time (in milliseconds)."
|   |   `-TextComment 0x55b64bf73960 <line:3172:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf739b0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x55b64bf73a20 <line:3173:1>
|     `-TextComment 0x55b64bf739f0 <col:1> Text=" "
|-FunctionDecl 0x55b64bedacd0 <line:3190:1, line:3191:33> line:3190:13 k_work_poll_init 'void (struct k_work_poll *, k_work_handler_t)' extern
| |-ParmVarDecl 0x55b64bedab30 <col:30, col:50> col:50 work 'struct k_work_poll *'
| |-ParmVarDecl 0x55b64bedaba0 <line:3191:9, col:26> col:26 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x55b64bf73f20 <line:3180:3, line:3188:14>
|   |-ParagraphComment 0x55b64bf73b30 <line:3180:3>
|   | `-TextComment 0x55b64bf73b00 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf73b50 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf73bb0 <col:10, col:43>
|   |   `-TextComment 0x55b64bf73b80 <col:10, col:43> Text=" Initialize a triggered work item."
|   |-ParagraphComment 0x55b64bf73c20 <line:3182:3, line:3183:17>
|   | |-TextComment 0x55b64bf73bd0 <line:3182:3, col:69> Text=" This routine initializes a workqueue triggered work item, prior to"
|   | `-TextComment 0x55b64bf73bf0 <line:3183:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x55b64bf73c70 <line:3185:3>
|   | `-TextComment 0x55b64bf73c40 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf73c90 <col:4, line:3186:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf73d40 <line:3185:15, line:3186:3>
|   |   |-TextComment 0x55b64bf73cf0 <line:3185:15, col:46> Text=" Address of triggered work item."
|   |   `-TextComment 0x55b64bf73d10 <line:3186:3> Text=" "
|   |-ParamCommandComment 0x55b64bf73d60 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf73df0 <col:18, col:70>
|   |   `-TextComment 0x55b64bf73dc0 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x55b64bf73e40 <line:3188:3>
|   | `-TextComment 0x55b64bf73e10 <col:3> Text=" "
|   `-BlockCommandComment 0x55b64bf73e60 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55b64bf73ec0 <col:11, col:14>
|       `-TextComment 0x55b64bf73e90 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55b64bedb138 <line:3227:1, line:3231:25> line:3227:12 used k_work_poll_submit_to_queue 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x55b64bedadd0 <col:40, col:57> col:57 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55b64bedae58 <line:3228:12, col:32> col:32 work 'struct k_work_poll *'
| |-ParmVarDecl 0x55b64bedaee0 <line:3229:12, col:33> col:33 events 'struct k_poll_event *'
| |-ParmVarDecl 0x55b64bedaf58 <line:3230:12, col:16> col:16 num_events 'int'
| |-ParmVarDecl 0x55b64bedafc8 <line:3231:12, col:18> col:18 timeout 's32_t':'int'
| `-FullComment 0x55b64bf74c20 <line:3194:3, line:3225:69>
|   |-ParagraphComment 0x55b64bf73fc0 <line:3194:3>
|   | `-TextComment 0x55b64bf73f90 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf73fe0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf74040 <col:10, col:39>
|   |   `-TextComment 0x55b64bf74010 <col:10, col:39> Text=" Submit a triggered work item."
|   |-ParagraphComment 0x55b64bf742b0 <line:3196:3, line:3200:50>
|   | |-TextComment 0x55b64bf74060 <line:3196:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x55b64bf740b0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55b64bf740d0 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x55b64bf740f0 <line:3197:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf74140 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x55b64bf74160 <col:13, col:35> Text=" when one of the given "
|   | |-InlineCommandComment 0x55b64bf741b0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x55b64bf741d0 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x55b64bf741f0 <line:3198:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x55b64bf74210 <line:3199:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x55b64bf74230 <line:3200:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x55b64bf743a0 <line:3202:3, line:3206:70>
|   | |-TextComment 0x55b64bf742d0 <line:3202:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x55b64bf742f0 <line:3203:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x55b64bf74310 <line:3204:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x55b64bf74330 <line:3205:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x55b64bf74350 <line:3206:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x55b64bf743f0 <line:3208:3>
|   | `-TextComment 0x55b64bf743c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf74410 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf74470 <col:9, col:31>
|   |   `-TextComment 0x55b64bf74440 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf744c0 <line:3210:3>
|   | `-TextComment 0x55b64bf74490 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf744e0 <col:4, line:3213:57> Name="warning"
|   | `-ParagraphComment 0x55b64bf74590 <line:3211:3, line:3213:57>
|   |   |-TextComment 0x55b64bf74510 <line:3211:3, col:75> Text=" Provided array of events as well as a triggered work item must be placed"
|   |   |-TextComment 0x55b64bf74530 <line:3212:3, col:67> Text=" in persistent memory (valid until work handler execution or work"
|   |   `-TextComment 0x55b64bf74550 <line:3213:3, col:57> Text=" cancellation) and cannot be modified after submission."
|   |-ParagraphComment 0x55b64bf745e0 <line:3215:3>
|   | `-TextComment 0x55b64bf745b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf74600 <col:4, line:3216:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf746b0 <line:3215:17, line:3216:3>
|   |   |-TextComment 0x55b64bf74660 <line:3215:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55b64bf74680 <line:3216:3> Text=" "
|   |-ParamCommandComment 0x55b64bf746d0 <col:4, line:3217:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf74780 <line:3216:15, line:3217:3>
|   |   |-TextComment 0x55b64bf74730 <line:3216:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x55b64bf74750 <line:3217:3> Text=" "
|   |-ParamCommandComment 0x55b64bf747a0 <col:4, line:3218:3> [in] implicitly Param="events" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf74850 <line:3217:17, line:3218:3>
|   |   |-TextComment 0x55b64bf74800 <line:3217:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x55b64bf74820 <line:3218:3> Text=" "
|   |-ParamCommandComment 0x55b64bf74870 <col:4, line:3219:3> [in] implicitly Param="num_events" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf74920 <line:3218:21, line:3219:3>
|   |   |-TextComment 0x55b64bf748d0 <line:3218:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x55b64bf748f0 <line:3219:3> Text=" "
|   |-ParamCommandComment 0x55b64bf74940 <col:4, line:3220:42> [in] implicitly Param="timeout" ParamIndex=4
|   | `-ParagraphComment 0x55b64bf749f0 <line:3219:18, line:3220:42>
|   |   |-TextComment 0x55b64bf749a0 <line:3219:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x55b64bf749c0 <line:3220:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x55b64bf74b80 <line:3223:3, line:3225:69>
|     |-TextComment 0x55b64bf74a10 <line:3223:3> Text=" "
|     |-InlineCommandComment 0x55b64bf74a30 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55b64bf74a50 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x55b64bf74a70 <line:3224:3> Text=" "
|     |-InlineCommandComment 0x55b64bf74a90 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55b64bf74ab0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x55b64bf74ad0 <line:3225:3> Text=" "
|     |-InlineCommandComment 0x55b64bf74af0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55b64bf74b10 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x55b64bedb508 <line:3264:1, line:3271:1> line:3264:19 k_work_poll_submit 'int (struct k_work_poll *, struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x55b64bedb250 <col:38, col:58> col:58 used work 'struct k_work_poll *'
| |-ParmVarDecl 0x55b64bedb2d8 <line:3265:10, col:31> col:31 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x55b64bedb350 <line:3266:10, col:14> col:14 used num_events 'int'
| |-ParmVarDecl 0x55b64bedb3c0 <line:3267:10, col:16> col:16 used timeout 's32_t':'int'
| |-CompoundStmt 0x55b64bedb848 <line:3268:1, line:3271:1>
| | `-ReturnStmt 0x55b64bedb800 <line:3269:2, line:3270:34>
| |   `-CallExpr 0x55b64bedb750 <line:3269:9, line:3270:34> 'int'
| |     |-ImplicitCastExpr 0x55b64bedb738 <line:3269:9> 'int (*)(struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b64bedb5c8 <col:9> 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' Function 0x55b64bedb138 'k_work_poll_submit_to_queue' 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)'
| |     |-UnaryOperator 0x55b64bedb618 <col:37, col:38> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x55b64bedb5f0 <col:38> 'struct k_work_q':'struct k_work_q' lvalue Var 0x55b64bdc5298 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x55b64bedb7a0 <col:52> 'struct k_work_poll *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64bedb638 <col:52> 'struct k_work_poll *' lvalue ParmVar 0x55b64bedb250 'work' 'struct k_work_poll *'
| |     |-ImplicitCastExpr 0x55b64bedb7b8 <line:3270:7> 'struct k_poll_event *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64bedb660 <col:7> 'struct k_poll_event *' lvalue ParmVar 0x55b64bedb2d8 'events' 'struct k_poll_event *'
| |     |-ImplicitCastExpr 0x55b64bedb7d0 <col:15> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x55b64bedb688 <col:15> 'int' lvalue ParmVar 0x55b64bedb350 'num_events' 'int'
| |     `-ImplicitCastExpr 0x55b64bedb7e8 <col:27> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x55b64bedb6b0 <col:27> 's32_t':'int' lvalue ParmVar 0x55b64bedb3c0 'timeout' 's32_t':'int'
| `-FullComment 0x55b64bf757b0 <line:3234:3, line:3262:69>
|   |-ParagraphComment 0x55b64bf74cc0 <line:3234:3>
|   | `-TextComment 0x55b64bf74c90 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf74ce0 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x55b64bf74d40 <col:10, col:63>
|   |   `-TextComment 0x55b64bf74d10 <col:10, col:63> Text=" Submit a triggered work item to the system workqueue."
|   |-ParagraphComment 0x55b64bf74f30 <line:3236:3, line:3240:50>
|   | |-TextComment 0x55b64bf74d60 <line:3236:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x55b64bf74db0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55b64bf74dd0 <col:44, col:69> Text=" to be processed by system"
|   | |-TextComment 0x55b64bf74df0 <line:3237:3, col:35> Text=" workqueue when one of the given "
|   | |-InlineCommandComment 0x55b64bf74e40 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x55b64bf74e60 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x55b64bf74e80 <line:3238:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x55b64bf74ea0 <line:3239:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x55b64bf74ec0 <line:3240:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x55b64bf75040 <line:3242:3, line:3246:70>
|   | |-TextComment 0x55b64bf74f50 <line:3242:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x55b64bf74f90 <line:3243:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x55b64bf74fb0 <line:3244:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x55b64bf74fd0 <line:3245:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x55b64bf74ff0 <line:3246:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x55b64bf75090 <line:3248:3>
|   | `-TextComment 0x55b64bf75060 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf750b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf75110 <col:9, col:31>
|   |   `-TextComment 0x55b64bf750e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf75160 <line:3250:3>
|   | `-TextComment 0x55b64bf75130 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf75180 <col:4, line:3252:63> Name="warning"
|   | `-ParagraphComment 0x55b64bf75200 <line:3251:3, line:3252:63>
|   |   |-TextComment 0x55b64bf751b0 <line:3251:3, col:72> Text=" Provided array of events as well as a triggered work item must not be"
|   |   `-TextComment 0x55b64bf751d0 <line:3252:3, col:63> Text=" modified until the item has been processed by the workqueue."
|   |-ParagraphComment 0x55b64bf75250 <line:3254:3>
|   | `-TextComment 0x55b64bf75220 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf75270 <col:4, line:3255:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf75320 <line:3254:15, line:3255:3>
|   |   |-TextComment 0x55b64bf752d0 <line:3254:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x55b64bf752f0 <line:3255:3> Text=" "
|   |-ParamCommandComment 0x55b64bf75340 <col:4, line:3256:3> [in] implicitly Param="events" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf753f0 <line:3255:17, line:3256:3>
|   |   |-TextComment 0x55b64bf753a0 <line:3255:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x55b64bf753c0 <line:3256:3> Text=" "
|   |-ParamCommandComment 0x55b64bf75410 <col:4, line:3257:3> [in] implicitly Param="num_events" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf754c0 <line:3256:21, line:3257:3>
|   |   |-TextComment 0x55b64bf75470 <line:3256:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x55b64bf75490 <line:3257:3> Text=" "
|   |-ParamCommandComment 0x55b64bf754e0 <col:4, line:3258:42> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf75590 <line:3257:18, line:3258:42>
|   |   |-TextComment 0x55b64bf75540 <line:3257:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x55b64bf75560 <line:3258:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x55b64bf75720 <line:3260:3, line:3262:69>
|     |-TextComment 0x55b64bf755b0 <line:3260:3> Text=" "
|     |-InlineCommandComment 0x55b64bf755d0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55b64bf755f0 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x55b64bf75610 <line:3261:3> Text=" "
|     |-InlineCommandComment 0x55b64bf75630 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55b64bf75650 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x55b64bf75670 <line:3262:3> Text=" "
|     |-InlineCommandComment 0x55b64bf75690 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55b64bf756b0 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x55b64bedb998 <line:3287:1, col:55> col:12 k_work_poll_cancel 'int (struct k_work_poll *)' extern
| |-ParmVarDecl 0x55b64bedb888 <col:31, col:51> col:51 work 'struct k_work_poll *'
| `-FullComment 0x55b64bf75d00 <line:3274:3, line:3285:74>
|   |-ParagraphComment 0x55b64bf75850 <line:3274:3>
|   | `-TextComment 0x55b64bf75820 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf75870 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf758d0 <col:10, col:39>
|   |   `-TextComment 0x55b64bf758a0 <col:10, col:39> Text=" Cancel a triggered work item."
|   |-ParagraphComment 0x55b64bf759c0 <line:3276:3, line:3278:14>
|   | |-TextComment 0x55b64bf758f0 <line:3276:3, col:62> Text=" This routine cancels the submission of triggered work item "
|   | |-InlineCommandComment 0x55b64bf75940 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x55b64bf75960 <line:3277:3, col:72> Text=" A triggered work item can only be canceled if no event triggered work"
|   | `-TextComment 0x55b64bf75980 <line:3278:3, col:14> Text=" submission."
|   |-ParagraphComment 0x55b64bf75a10 <line:3280:3>
|   | `-TextComment 0x55b64bf759e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf75a30 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf75a90 <col:9, col:31>
|   |   `-TextComment 0x55b64bf75a60 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf75ae0 <line:3282:3>
|   | `-TextComment 0x55b64bf75ab0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf75b00 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf75b90 <col:15, col:44>
|   |   `-TextComment 0x55b64bf75b60 <col:15, col:44> Text=" Address of delayed work item."
|   `-ParagraphComment 0x55b64bf75ca0 <line:3284:3, line:3285:74>
|     |-TextComment 0x55b64bf75bb0 <line:3284:3> Text=" "
|     |-InlineCommandComment 0x55b64bf75bd0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55b64bf75bf0 <col:11, col:32> Text=" 0 Work item canceled."
|     |-TextComment 0x55b64bf75c10 <line:3285:3> Text=" "
|     |-InlineCommandComment 0x55b64bf75c30 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55b64bf75c50 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|-RecordDecl 0x55b64bedba98 prev 0x55b64bea6df8 <line:3300:1, line:3314:1> line:3300:8 struct k_mutex definition
| |-FullComment 0x55b64bf75e90 <line:3297:3, line:3299:1>
| | |-ParagraphComment 0x55b64bf75dc0 <line:3297:3, line:3298:3>
| | | |-TextComment 0x55b64bf75d70 <line:3297:3, col:18> Text=" Mutex Structure"
| | | `-TextComment 0x55b64bf75d90 <line:3298:3> Text=" "
| | |-VerbatimLineComment 0x55b64bf75de0 <col:4, col:23> Text=" mutex_apis"
| | `-ParagraphComment 0x55b64bf75e50 <line:3299:1>
| |   `-TextComment 0x55b64bf75e20 <col:1> Text=" "
| |-FieldDecl 0x55b64bedbb58 <line:3302:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x55b64bf75f60 <line:3301:5, col:22>
| |   `-ParagraphComment 0x55b64bf75f30 <col:5, col:22>
| |     `-TextComment 0x55b64bf75f00 <col:5, col:22> Text=" Mutex wait queue "
| |-FieldDecl 0x55b64bedbc30 <line:3304:2, col:19> col:19 owner 'struct k_thread *'
| | `-FullComment 0x55b64bf76030 <line:3303:5, col:17>
| |   `-ParagraphComment 0x55b64bf76000 <col:5, col:17>
| |     `-TextComment 0x55b64bf75fd0 <col:5, col:17> Text=" Mutex owner "
| |-FieldDecl 0x55b64bedbcb8 <line:3307:2, col:8> col:8 lock_count 'u32_t':'unsigned int'
| | `-FullComment 0x55b64bf76100 <line:3306:5, col:24>
| |   `-ParagraphComment 0x55b64bf760d0 <col:5, col:24>
| |     `-TextComment 0x55b64bf760a0 <col:5, col:24> Text=" Current lock count "
| `-FieldDecl 0x55b64bedbd40 <line:3310:2, col:6> col:6 owner_orig_prio 'int'
|   `-FullComment 0x55b64bf761d0 <line:3309:5, col:30>
|     `-ParagraphComment 0x55b64bf761a0 <col:5, col:30>
|       `-TextComment 0x55b64bf76170 <col:5, col:30> Text=" Original thread priority "
|-FunctionDecl 0x55b64bedc008 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3361:49> col:15 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x55b64bedbf00 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| `-FullComment 0x55b64bf76680 <line:3349:3, line:3360:1>
|   |-ParagraphComment 0x55b64bf76270 <line:3349:3>
|   | `-TextComment 0x55b64bf76240 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf76290 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55b64bf762f0 <col:10, col:29>
|   |   `-TextComment 0x55b64bf762c0 <col:10, col:29> Text=" Initialize a mutex."
|   |-ParagraphComment 0x55b64bf76340 <line:3351:3, col:67>
|   | `-TextComment 0x55b64bf76310 <col:3, col:67> Text=" This routine initializes a mutex object, prior to its first use."
|   |-ParagraphComment 0x55b64bf76390 <line:3353:3, col:70>
|   | `-TextComment 0x55b64bf76360 <col:3, col:70> Text=" Upon completion, the mutex is available and does not have an owner."
|   |-ParagraphComment 0x55b64bf763e0 <line:3355:3>
|   | `-TextComment 0x55b64bf763b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf76400 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf76490 <col:16, col:37>
|   |   `-TextComment 0x55b64bf76460 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x55b64bf76530 <line:3357:3, col:33>
|   | |-TextComment 0x55b64bf764b0 <col:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf764d0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55b64bf764f0 <col:11, col:33> Text=" 0 Mutex object created"
|   |-ParagraphComment 0x55b64bf76580 <line:3359:3>
|   | `-TextComment 0x55b64bf76550 <col:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf765a0 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x55b64bf76610 <line:3360:1>
|     `-TextComment 0x55b64bf765e0 <col:1> Text=" "
|-FunctionDecl 0x55b64bedc288 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3384:64> col:15 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x55b64bedc100 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| |-ParmVarDecl 0x55b64bedc170 <col:51, col:57> col:57 timeout 's32_t':'int'
| `-FullComment 0x55b64bf76e00 <line:3365:3, line:3383:1>
|   |-ParagraphComment 0x55b64bf76720 <line:3365:3>
|   | `-TextComment 0x55b64bf766f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf76740 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x55b64bf767a0 <col:10, col:23>
|   |   `-TextComment 0x55b64bf76770 <col:10, col:23> Text=" Lock a mutex."
|   |-ParagraphComment 0x55b64bf768c0 <line:3367:3, line:3369:20>
|   | |-TextComment 0x55b64bf767c0 <line:3367:3, col:22> Text=" This routine locks "
|   | |-InlineCommandComment 0x55b64bf76810 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x55b64bf76830 <col:32, col:73> Text=" If the mutex is locked by another thread,"
|   | |-TextComment 0x55b64bf76850 <line:3368:3, col:70> Text=" the calling thread waits until the mutex becomes available or until"
|   | `-TextComment 0x55b64bf76870 <line:3369:3, col:20> Text=" a timeout occurs."
|   |-ParagraphComment 0x55b64bf76930 <line:3371:3, line:3372:62>
|   | |-TextComment 0x55b64bf768e0 <line:3371:3, col:77> Text=" A thread is permitted to lock a mutex it has already locked. The operation"
|   | `-TextComment 0x55b64bf76900 <line:3372:3, col:62> Text=" completes immediately and the lock count is increased by 1."
|   |-ParagraphComment 0x55b64bf76980 <line:3374:3>
|   | `-TextComment 0x55b64bf76950 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf769a0 <col:4, line:3375:3> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf76a50 <line:3374:16, line:3375:3>
|   |   |-TextComment 0x55b64bf76a00 <line:3374:16, col:37> Text=" Address of the mutex."
|   |   `-TextComment 0x55b64bf76a20 <line:3375:3> Text=" "
|   |-ParamCommandComment 0x55b64bf76a70 <col:4, line:3377:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf76b50 <line:3375:18, line:3377:28>
|   |   |-TextComment 0x55b64bf76ad0 <line:3375:18, col:67> Text=" Non-negative waiting period to lock the mutex (in"
|   |   |-TextComment 0x55b64bf76af0 <line:3376:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55b64bf76b10 <line:3377:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55b64bf76d00 <line:3379:3, line:3382:3>
|   | |-TextComment 0x55b64bf76b70 <line:3379:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf76b90 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf76bb0 <col:11, col:26> Text=" 0 Mutex locked."
|   | |-TextComment 0x55b64bf76bd0 <line:3380:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf76bf0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf76c10 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x55b64bf76c30 <line:3381:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf76c50 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf76c70 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55b64bf76c90 <line:3382:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf76d20 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x55b64bf76d90 <line:3383:1>
|     `-TextComment 0x55b64bf76d60 <col:1> Text=" "
|-FunctionDecl 0x55b64bedc420 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3404:51> col:15 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x55b64bedc390 <col:30, col:46> col:46 mutex 'struct k_mutex *'
| `-FullComment 0x55b64bf774a0 <line:3387:3, line:3403:1>
|   |-ParagraphComment 0x55b64bf76ea0 <line:3387:3>
|   | `-TextComment 0x55b64bf76e70 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf76ec0 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x55b64bf76f20 <col:10, col:25>
|   |   `-TextComment 0x55b64bf76ef0 <col:10, col:25> Text=" Unlock a mutex."
|   |-ParagraphComment 0x55b64bf77020 <line:3389:3, line:3390:18>
|   | |-TextComment 0x55b64bf76f40 <line:3389:3, col:24> Text=" This routine unlocks "
|   | |-InlineCommandComment 0x55b64bf76fa0 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x55b64bf76fc0 <col:34, col:73> Text=" The mutex must already be locked by the"
|   | `-TextComment 0x55b64bf76fe0 <line:3390:3, col:18> Text=" calling thread."
|   |-ParagraphComment 0x55b64bf770c0 <line:3392:3, line:3394:10>
|   | |-TextComment 0x55b64bf77040 <line:3392:3, col:78> Text=" The mutex cannot be claimed by another thread until it has been unlocked by"
|   | |-TextComment 0x55b64bf77060 <line:3393:3, col:71> Text=" the calling thread as many times as it was previously locked by that"
|   | `-TextComment 0x55b64bf77080 <line:3394:3, col:10> Text=" thread."
|   |-ParagraphComment 0x55b64bf77110 <line:3396:3>
|   | `-TextComment 0x55b64bf770e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf77130 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf771c0 <col:16, col:37>
|   |   `-TextComment 0x55b64bf77190 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x55b64bf77350 <line:3398:3, line:3400:42>
|   | |-TextComment 0x55b64bf771e0 <line:3398:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf77200 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf77220 <col:11, col:28> Text=" 0 Mutex unlocked."
|   | |-TextComment 0x55b64bf77240 <line:3399:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf77260 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf77280 <col:11, col:59> Text=" -EPERM The current thread does not own the mutex"
|   | |-TextComment 0x55b64bf772a0 <line:3400:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf772c0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55b64bf772e0 <col:11, col:42> Text=" -EINVAL The mutex is not locked"
|   |-ParagraphComment 0x55b64bf773a0 <line:3402:3>
|   | `-TextComment 0x55b64bf77370 <col:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf773c0 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x55b64bf77430 <line:3403:1>
|     `-TextComment 0x55b64bf77400 <col:1> Text=" "
|-RecordDecl 0x55b64bedc528 prev 0x55b64bea6ea0 <line:3414:1, line:3422:1> line:3414:8 struct k_sem definition
| |-FullComment 0x55b64bf775c0 <line:3411:3, col:24>
| | `-ParagraphComment 0x55b64bf77590 <col:3, col:24>
| |   |-TextComment 0x55b64bf77510 <col:3> Text=" "
| |   |-InlineCommandComment 0x55b64bf77530 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55b64bf77550 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55b64bedc5c0 <line:3415:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x55b64bedc618 <line:3416:2, col:8> col:8 referenced count 'u32_t':'unsigned int'
| `-FieldDecl 0x55b64bedc670 <line:3417:2, col:8> col:8 limit 'u32_t':'unsigned int'
|-FunctionDecl 0x55b64bedca28 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3460:24> line:3459:15 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x55b64bedc800 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x55b64bedc878 <col:45, col:58> col:58 initial_count 'unsigned int'
| |-ParmVarDecl 0x55b64bedc8f0 <line:3460:6, col:19> col:19 limit 'unsigned int'
| `-FullComment 0x55b64bf77c40 <line:3446:3, line:3458:1>
|   |-ParagraphComment 0x55b64bf77660 <line:3446:3>
|   | `-TextComment 0x55b64bf77630 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf77680 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55b64bf776e0 <col:10, col:33>
|   |   `-TextComment 0x55b64bf776b0 <col:10, col:33> Text=" Initialize a semaphore."
|   |-ParagraphComment 0x55b64bf77730 <line:3448:3, col:71>
|   | `-TextComment 0x55b64bf77700 <col:3, col:71> Text=" This routine initializes a semaphore object, prior to its first use."
|   |-ParagraphComment 0x55b64bf77780 <line:3450:3>
|   | `-TextComment 0x55b64bf77750 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf777a0 <col:4, line:3451:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf77850 <line:3450:14, line:3451:3>
|   |   |-TextComment 0x55b64bf77800 <line:3450:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x55b64bf77820 <line:3451:3> Text=" "
|   |-ParamCommandComment 0x55b64bf77870 <col:4, line:3452:3> [in] implicitly Param="initial_count" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf77920 <line:3451:24, line:3452:3>
|   |   |-TextComment 0x55b64bf778d0 <line:3451:24, col:48> Text=" Initial semaphore count."
|   |   `-TextComment 0x55b64bf778f0 <line:3452:3> Text=" "
|   |-ParamCommandComment 0x55b64bf77940 <col:4, col:50> [in] implicitly Param="limit" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf779d0 <col:16, col:50>
|   |   `-TextComment 0x55b64bf779a0 <col:16, col:50> Text=" Maximum permitted semaphore count."
|   |-ParagraphComment 0x55b64bf77ae0 <line:3454:3, line:3455:33>
|   | |-TextComment 0x55b64bf779f0 <line:3454:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf77a10 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf77a30 <col:11, col:43> Text=" 0 Semaphore created successfully"
|   | |-TextComment 0x55b64bf77a50 <line:3455:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf77a70 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55b64bf77a90 <col:11, col:33> Text=" -EINVAL Invalid values"
|   |-ParagraphComment 0x55b64bf77b30 <line:3457:3>
|   | `-TextComment 0x55b64bf77b00 <col:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf77b50 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55b64bf77bc0 <line:3458:1>
|     `-TextComment 0x55b64bf77b90 <col:1> Text=" "
|-FunctionDecl 0x55b64beddd08 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3479:58> col:15 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x55b64bedcb30 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x55b64bedcba0 <col:45, col:51> col:51 timeout 's32_t':'int'
| `-FullComment 0x55b64bf78430 <line:3463:3, line:3478:1>
|   |-ParagraphComment 0x55b64bf77ce0 <line:3463:3>
|   | `-TextComment 0x55b64bf77cb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf77d00 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55b64bf77d60 <col:10, col:27>
|   |   `-TextComment 0x55b64bf77d30 <col:10, col:27> Text=" Take a semaphore."
|   |-ParagraphComment 0x55b64bf77e00 <line:3465:3, col:24>
|   | |-TextComment 0x55b64bf77d80 <col:3, col:22> Text=" This routine takes "
|   | `-InlineCommandComment 0x55b64bf77dd0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x55b64bf77e50 <line:3467:3>
|   | `-TextComment 0x55b64bf77e20 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf77e70 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x55b64bf77f50 <col:9, col:72>
|   |   |-TextComment 0x55b64bf77ea0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x55b64bf77ef0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x55b64bf77f10 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x55b64bf77fa0 <line:3469:3>
|   | `-TextComment 0x55b64bf77f70 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf77fc0 <col:4, line:3470:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf78070 <line:3469:14, line:3470:3>
|   |   |-TextComment 0x55b64bf78020 <line:3469:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x55b64bf78040 <line:3470:3> Text=" "
|   |-ParamCommandComment 0x55b64bf78090 <col:4, line:3472:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf78170 <line:3470:18, line:3472:28>
|   |   |-TextComment 0x55b64bf780f0 <line:3470:18, col:71> Text=" Non-negative waiting period to take the semaphore (in"
|   |   |-TextComment 0x55b64bf78110 <line:3471:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55b64bf78130 <line:3472:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55b64bf78320 <line:3474:3, line:3477:3>
|   | |-TextComment 0x55b64bf78190 <line:3474:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf781b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf781d0 <col:11, col:29> Text=" 0 Semaphore taken."
|   | |-TextComment 0x55b64bf781f0 <line:3475:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf78210 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf78230 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x55b64bf78250 <line:3476:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf78270 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf78290 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55b64bf782b0 <line:3477:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf78340 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55b64bf783b0 <line:3478:1>
|     `-TextComment 0x55b64bf78380 <col:1> Text=" "
|-FunctionDecl 0x55b64beddf10 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3494:44> col:16 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55b64bedde10 <col:27, col:41> col:41 sem 'struct k_sem *'
| `-FullComment 0x55b64bf78a10 <line:3482:3, line:3493:1>
|   |-ParagraphComment 0x55b64bf784d0 <line:3482:3>
|   | `-TextComment 0x55b64bf784a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf784f0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55b64bf78550 <col:10, col:27>
|   |   `-TextComment 0x55b64bf78520 <col:10, col:27> Text=" Give a semaphore."
|   |-ParagraphComment 0x55b64bf78640 <line:3484:3, line:3485:19>
|   | |-TextComment 0x55b64bf78570 <line:3484:3, col:22> Text=" This routine gives "
|   | |-InlineCommandComment 0x55b64bf785c0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem,"
|   | |-TextComment 0x55b64bf785e0 <col:30, col:76> Text=" unless the semaphore is already at its maximum"
|   | `-TextComment 0x55b64bf78600 <line:3485:3, col:19> Text=" permitted count."
|   |-ParagraphComment 0x55b64bf78690 <line:3487:3>
|   | `-TextComment 0x55b64bf78660 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf786b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf78710 <col:9, col:31>
|   |   `-TextComment 0x55b64bf786e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf78760 <line:3489:3>
|   | `-TextComment 0x55b64bf78730 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf78780 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf78810 <col:14, col:39>
|   |   `-TextComment 0x55b64bf787e0 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x55b64bf78860 <line:3491:3>
|   | `-TextComment 0x55b64bf78830 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf78880 <col:4, line:3492:3> Name="return"
|   | `-ParagraphComment 0x55b64bf78900 <line:3491:11, line:3492:3>
|   |   |-TextComment 0x55b64bf788b0 <line:3491:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf788d0 <line:3492:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf78920 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55b64bf78990 <line:3493:1>
|     `-TextComment 0x55b64bf78960 <col:1> Text=" "
|-FunctionDecl 0x55b64bede098 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3506:45> col:16 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55b64bede010 <col:28, col:42> col:42 sem 'struct k_sem *'
| `-FullComment 0x55b64bf78ef0 <line:3497:3, line:3505:1>
|   |-ParagraphComment 0x55b64bf78ab0 <line:3497:3>
|   | `-TextComment 0x55b64bf78a80 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf78ad0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55b64bf78b30 <col:10, col:44>
|   |   `-TextComment 0x55b64bf78b00 <col:10, col:44> Text=" Reset a semaphore's count to zero."
|   |-ParagraphComment 0x55b64bf78c00 <line:3499:3, col:49>
|   | |-TextComment 0x55b64bf78b50 <col:3, col:34> Text=" This routine sets the count of "
|   | |-InlineCommandComment 0x55b64bf78ba0 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x55b64bf78bc0 <col:41, col:49> Text=" to zero."
|   |-ParagraphComment 0x55b64bf78c50 <line:3501:3>
|   | `-TextComment 0x55b64bf78c20 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf78c70 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf78d00 <col:14, col:39>
|   |   `-TextComment 0x55b64bf78cd0 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x55b64bf78d50 <line:3503:3>
|   | `-TextComment 0x55b64bf78d20 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf78d70 <col:4, line:3504:3> Name="return"
|   | `-ParagraphComment 0x55b64bf78df0 <line:3503:11, line:3504:3>
|   |   |-TextComment 0x55b64bf78da0 <line:3503:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf78dc0 <line:3504:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf78e10 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55b64bf78e80 <line:3505:1>
|     `-TextComment 0x55b64bf78e50 <col:1> Text=" "
|-FunctionDecl 0x55b64bede218 <line:3511:1, line:3514:1> line:3511:20 used z_impl_k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55b64bede190 <col:39, col:53> col:53 used sem 'struct k_sem *'
| |-CompoundStmt 0x55b64bede3a8 <line:3512:1, line:3514:1>
| | `-BinaryOperator 0x55b64bede358 <line:3513:2, col:15> 'u32_t':'unsigned int' '='
| |   |-MemberExpr 0x55b64bede300 <col:2, col:7> 'u32_t':'unsigned int' lvalue ->count 0x55b64bedc618
| |   | `-ImplicitCastExpr 0x55b64bede2e8 <col:2> 'struct k_sem *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55b64bede2c0 <col:2> 'struct k_sem *' lvalue ParmVar 0x55b64bede190 'sem' 'struct k_sem *'
| |   `-IntegerLiteral 0x55b64bede338 <col:15> 'unsigned int' 0
| `-FullComment 0x55b64bf78ff0 <line:3509:3, col:12>
|   `-ParagraphComment 0x55b64bf78fc0 <col:3, col:12>
|     |-TextComment 0x55b64bf78f60 <col:3> Text=" "
|     `-InlineCommandComment 0x55b64bf78f80 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55b64bede4f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3526:57> col:24 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x55b64bede3e8 <col:40, col:54> col:54 sem 'struct k_sem *'
| `-FullComment 0x55b64bf794a0 <line:3517:3, line:3525:1>
|   |-ParagraphComment 0x55b64bf79090 <line:3517:3>
|   | `-TextComment 0x55b64bf79060 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf790b0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55b64bf79110 <col:10, col:34>
|   |   `-TextComment 0x55b64bf790e0 <col:10, col:34> Text=" Get a semaphore's count."
|   |-ParagraphComment 0x55b64bf791b0 <line:3519:3, col:47>
|   | |-TextComment 0x55b64bf79130 <col:3, col:45> Text=" This routine returns the current count of "
|   | `-InlineCommandComment 0x55b64bf79180 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x55b64bf79200 <line:3521:3>
|   | `-TextComment 0x55b64bf791d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf79220 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf792b0 <col:14, col:39>
|   |   `-TextComment 0x55b64bf79280 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x55b64bf79300 <line:3523:3>
|   | `-TextComment 0x55b64bf792d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf79320 <col:4, line:3524:3> Name="return"
|   | `-ParagraphComment 0x55b64bf793a0 <line:3523:11, line:3524:3>
|   |   |-TextComment 0x55b64bf79350 <line:3523:11, col:35> Text=" Current semaphore count."
|   |   `-TextComment 0x55b64bf79370 <line:3524:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf793c0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55b64bf79430 <line:3525:1>
|     `-TextComment 0x55b64bf79400 <col:1> Text=" "
|-FunctionDecl 0x55b64bede680 <line:3531:1, line:3534:1> line:3531:28 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x55b64bede5f0 <col:51, col:65> col:65 used sem 'struct k_sem *'
| |-CompoundStmt 0x55b64bede888 <line:3532:1, line:3534:1>
| | `-ReturnStmt 0x55b64bede7b8 <line:3533:2, col:14>
| |   `-ImplicitCastExpr 0x55b64bede7a0 <col:9, col:14> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x55b64bede768 <col:9, col:14> 'u32_t':'unsigned int' lvalue ->count 0x55b64bedc618
| |       `-ImplicitCastExpr 0x55b64bede750 <col:9> 'struct k_sem *' <LValueToRValue>
| |         `-DeclRefExpr 0x55b64bede728 <col:9> 'struct k_sem *' lvalue ParmVar 0x55b64bede5f0 'sem' 'struct k_sem *'
| `-FullComment 0x55b64bf79590 <line:3529:3, col:12>
|   `-ParagraphComment 0x55b64bf79560 <col:3, col:12>
|     |-TextComment 0x55b64bf79510 <col:3> Text=" "
|     `-InlineCommandComment 0x55b64bf79530 <col:4, col:12> Name="internal" RenderNormal
|-RecordDecl 0x55b64bede8a0 prev 0x55b64bea6f50 <line:3565:1, line:3590:1> line:3565:8 struct k_msgq definition
| |-FullComment 0x55b64bf796e0 <line:3563:3, col:33>
| | |-ParagraphComment 0x55b64bf79630 <col:3>
| | | `-TextComment 0x55b64bf79600 <col:3> Text=" "
| | `-BlockCommandComment 0x55b64bf79650 <col:4, col:33> Name="brief"
| |   `-ParagraphComment 0x55b64bf796b0 <col:10, col:33>
| |     `-TextComment 0x55b64bf79680 <col:10, col:33> Text=" Message Queue Structure"
| |-FieldDecl 0x55b64bede968 <line:3567:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x55b64bf797b0 <line:3566:5, col:30>
| |   `-ParagraphComment 0x55b64bf79780 <col:5, col:30>
| |     `-TextComment 0x55b64bf79750 <col:5, col:30> Text=" Message queue wait queue "
| |-FieldDecl 0x55b64bede9f8 <line:3569:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x55b64bf79880 <line:3568:5, col:10>
| |   `-ParagraphComment 0x55b64bf79850 <col:5, col:10>
| |     `-TextComment 0x55b64bf79820 <col:5, col:10> Text=" Lock "
| |-FieldDecl 0x55b64bedea78 <line:3571:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x55b64bf79950 <line:3570:5, col:18>
| |   `-ParagraphComment 0x55b64bf79920 <col:5, col:18>
| |     `-TextComment 0x55b64bf798f0 <col:5, col:18> Text=" Message size "
| |-FieldDecl 0x55b64bedeaf8 <line:3573:2, col:8> col:8 referenced max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x55b64bf79a20 <line:3572:5, col:32>
| |   `-ParagraphComment 0x55b64bf799f0 <col:5, col:32>
| |     `-TextComment 0x55b64bf799c0 <col:5, col:32> Text=" Maximal number of messages "
| |-FieldDecl 0x55b64bedeb80 <line:3575:2, col:8> col:8 buffer_start 'char *'
| | `-FullComment 0x55b64bf79af0 <line:3574:5, col:29>
| |   `-ParagraphComment 0x55b64bf79ac0 <col:5, col:29>
| |     `-TextComment 0x55b64bf79a90 <col:5, col:29> Text=" Start of message buffer "
| |-FieldDecl 0x55b64be8df90 <line:3577:2, col:8> col:8 buffer_end 'char *'
| | `-FullComment 0x55b64bf79bc0 <line:3576:5, col:27>
| |   `-ParagraphComment 0x55b64bf79b90 <col:5, col:27>
| |     `-TextComment 0x55b64bf79b60 <col:5, col:27> Text=" End of message buffer "
| |-FieldDecl 0x55b64be8e020 <line:3579:2, col:8> col:8 read_ptr 'char *'
| | `-FullComment 0x55b64bf79c90 <line:3578:5, col:18>
| |   `-ParagraphComment 0x55b64bf79c60 <col:5, col:18>
| |     `-TextComment 0x55b64bf79c30 <col:5, col:18> Text=" Read pointer "
| |-FieldDecl 0x55b64be8e0b0 <line:3581:2, col:8> col:8 write_ptr 'char *'
| | `-FullComment 0x55b64bf79d60 <line:3580:5, col:19>
| |   `-ParagraphComment 0x55b64bf79d30 <col:5, col:19>
| |     `-TextComment 0x55b64bf79d00 <col:5, col:19> Text=" Write pointer "
| |-FieldDecl 0x55b64be8e138 <line:3583:2, col:8> col:8 referenced used_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x55b64bf79e30 <line:3582:5, col:29>
| |   `-ParagraphComment 0x55b64bf79e00 <col:5, col:29>
| |     `-TextComment 0x55b64bf79dd0 <col:5, col:29> Text=" Number of used messages "
| `-FieldDecl 0x55b64be8e1b8 <line:3589:2, col:7> col:7 flags 'u8_t':'unsigned char'
|   `-FullComment 0x55b64bf79f00 <line:3588:5, col:19>
|     `-ParagraphComment 0x55b64bf79ed0 <col:5, col:19>
|       `-TextComment 0x55b64bf79ea0 <col:5, col:19> Text=" Message queue "
|-RecordDecl 0x55b64be8e288 <line:3619:1, line:3626:1> line:3619:8 struct k_msgq_attrs definition
| |-FullComment 0x55b64bf7a050 <line:3617:3, col:34>
| | |-ParagraphComment 0x55b64bf79fa0 <col:3>
| | | `-TextComment 0x55b64bf79f70 <col:3> Text=" "
| | `-BlockCommandComment 0x55b64bf79fc0 <col:4, col:34> Name="brief"
| |   `-ParagraphComment 0x55b64bf7a020 <col:10, col:34>
| |     `-TextComment 0x55b64bf79ff0 <col:10, col:34> Text=" Message Queue Attributes"
| |-FieldDecl 0x55b64be8e368 <line:3621:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x55b64bf7a120 <line:3620:5, col:18>
| |   `-ParagraphComment 0x55b64bf7a0f0 <col:5, col:18>
| |     `-TextComment 0x55b64bf7a0c0 <col:5, col:18> Text=" Message Size "
| |-FieldDecl 0x55b64be8e3e8 <line:3623:2, col:8> col:8 max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x55b64bf7a1f0 <line:3622:5, col:32>
| |   `-ParagraphComment 0x55b64bf7a1c0 <col:5, col:32>
| |     `-TextComment 0x55b64bf7a190 <col:5, col:32> Text=" Maximal number of messages "
| `-FieldDecl 0x55b64be8e468 <line:3625:2, col:8> col:8 used_msgs 'u32_t':'unsigned int'
|   `-FullComment 0x55b64bf7a2c0 <line:3624:5, col:19>
|     `-ParagraphComment 0x55b64bf7a290 <col:5, col:19>
|       `-TextComment 0x55b64bf7a260 <col:5, col:19> Text=" Used messages "
|-FunctionDecl 0x55b64be8e860 <line:3676:1, line:3677:18> line:3676:6 k_msgq_init 'void (struct k_msgq *, char *, size_t, u32_t)'
| |-ParmVarDecl 0x55b64be8e5c0 <col:18, col:33> col:33 q 'struct k_msgq *'
| |-ParmVarDecl 0x55b64be8e638 <col:36, col:42> col:42 buffer 'char *'
| |-ParmVarDecl 0x55b64be8e6a8 <col:50, col:57> col:57 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64be8e718 <line:3677:4, col:10> col:10 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x55b64bf7abf0 <line:3658:3, line:3675:1>
|   |-ParagraphComment 0x55b64bf7a360 <line:3658:3>
|   | `-TextComment 0x55b64bf7a330 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7a380 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55b64bf7a3e0 <col:10, col:37>
|   |   `-TextComment 0x55b64bf7a3b0 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x55b64bf7a430 <line:3660:3, col:75>
|   | `-TextComment 0x55b64bf7a400 <col:3, col:75> Text=" This routine initializes a message queue object, prior to its first use."
|   |-ParagraphComment 0x55b64bf7a670 <line:3662:3, line:3666:32>
|   | |-TextComment 0x55b64bf7a450 <line:3662:3, col:58> Text=" The message queue's ring buffer must contain space for "
|   | |-InlineCommandComment 0x55b64bf7a4a0 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="max_msgs"
|   | |-TextComment 0x55b64bf7a4c0 <col:70, col:79> Text=" messages,"
|   | |-TextComment 0x55b64bf7a4e0 <line:3663:3, col:20> Text=" each of which is "
|   | |-InlineCommandComment 0x55b64bf7a530 <col:21, col:22> Name="a" RenderEmphasized Arg[0]="msg_size"
|   | |-TextComment 0x55b64bf7a550 <col:32, col:76> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x55b64bf7a570 <line:3664:3, col:74> Text=" N-byte boundary, where N is a power of 2 (i.e. 1, 2, 4, ...). To ensure"
|   | |-TextComment 0x55b64bf7a590 <line:3665:3, col:60> Text=" that each message is similarly aligned to this boundary, "
|   | |-InlineCommandComment 0x55b64bf7a5e0 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="q_msg_size"
|   | `-TextComment 0x55b64bf7a600 <line:3666:3, col:32> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x55b64bf7a6c0 <line:3668:3>
|   | `-TextComment 0x55b64bf7a690 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7a6e0 <col:4, line:3669:3> [in] implicitly Param="q" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf7a790 <line:3668:12, line:3669:3>
|   |   |-TextComment 0x55b64bf7a740 <line:3668:12, col:41> Text=" Address of the message queue."
|   |   `-TextComment 0x55b64bf7a760 <line:3669:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7a7b0 <col:4, line:3670:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf7a860 <line:3669:17, line:3670:3>
|   |   |-TextComment 0x55b64bf7a810 <line:3669:17, col:67> Text=" Pointer to ring buffer that holds queued messages."
|   |   `-TextComment 0x55b64bf7a830 <line:3670:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7a880 <col:4, line:3671:3> [in] implicitly Param="msg_size" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf7a930 <line:3670:19, line:3671:3>
|   |   |-TextComment 0x55b64bf7a8e0 <line:3670:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x55b64bf7a900 <line:3671:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7a950 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf7a9e0 <col:19, col:65>
|   |   `-TextComment 0x55b64bf7a9b0 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x55b64bf7aa30 <line:3673:3>
|   | `-TextComment 0x55b64bf7aa00 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7aa50 <col:4, line:3674:3> Name="return"
|   | `-ParagraphComment 0x55b64bf7aad0 <line:3673:11, line:3674:3>
|   |   |-TextComment 0x55b64bf7aa80 <line:3673:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf7aaa0 <line:3674:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf7aaf0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55b64bf7ab60 <line:3675:1>
|     `-TextComment 0x55b64bf7ab30 <col:1> Text=" "
|-FunctionDecl 0x55b64be8eb88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3700:19> line:3699:15 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x55b64be8e970 <col:33, col:48> col:48 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55b64be8e9e0 <col:54, col:61> col:61 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64be8ea50 <line:3700:5, col:11> col:11 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x55b64bf7b370 <line:3680:3, line:3698:1>
|   |-ParagraphComment 0x55b64bf7ac90 <line:3680:3>
|   | `-TextComment 0x55b64bf7ac60 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7acb0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55b64bf7ad10 <col:10, col:37>
|   |   `-TextComment 0x55b64bf7ace0 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x55b64bf7adb0 <line:3682:3, line:3684:8>
|   | |-TextComment 0x55b64bf7ad30 <line:3682:3, col:75> Text=" This routine initializes a message queue object, prior to its first use,"
|   | |-TextComment 0x55b64bf7ad50 <line:3683:3, col:73> Text=" allocating its internal ring buffer from the calling thread's resource"
|   | `-TextComment 0x55b64bf7ad70 <line:3684:3, col:8> Text=" pool."
|   |-ParagraphComment 0x55b64bf7ae50 <line:3686:3, line:3688:25>
|   | |-TextComment 0x55b64bf7add0 <line:3686:3, col:66> Text=" Memory allocated for the ring buffer can be released by calling"
|   | |-TextComment 0x55b64bf7adf0 <line:3687:3, col:73> Text=" k_msgq_cleanup(), or if userspace is enabled and the msgq object loses"
|   | `-TextComment 0x55b64bf7ae10 <line:3688:3, col:25> Text=" all of its references."
|   |-ParagraphComment 0x55b64bf7aea0 <line:3690:3>
|   | `-TextComment 0x55b64bf7ae70 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7aec0 <col:4, line:3691:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf7af70 <line:3690:15, line:3691:3>
|   |   |-TextComment 0x55b64bf7af20 <line:3690:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55b64bf7af40 <line:3691:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7afc0 <col:4, line:3692:3> [in] implicitly Param="msg_size" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf7b070 <line:3691:19, line:3692:3>
|   |   |-TextComment 0x55b64bf7b020 <line:3691:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x55b64bf7b040 <line:3692:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7b090 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf7b120 <col:19, col:65>
|   |   `-TextComment 0x55b64bf7b0f0 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x55b64bf7b170 <line:3694:3>
|   | `-TextComment 0x55b64bf7b140 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7b190 <col:4, line:3697:3> Name="return"
|   | `-ParagraphComment 0x55b64bf7b260 <line:3694:11, line:3697:3>
|   |   |-TextComment 0x55b64bf7b1c0 <line:3694:11, col:72> Text=" 0 on success, -ENOMEM if there was insufficient memory in the"
|   |   |-TextComment 0x55b64bf7b1e0 <line:3695:3, col:66> Text="	thread's resource pool, or -EINVAL if the size parameters cause"
|   |   |-TextComment 0x55b64bf7b200 <line:3696:3, col:23> Text="	an integer overflow."
|   |   `-TextComment 0x55b64bf7b220 <line:3697:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf7b280 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55b64bf7b2f0 <line:3698:1>
|     `-TextComment 0x55b64bf7b2c0 <col:1> Text=" "
|-FunctionDecl 0x55b64be8ed98 <line:3712:1, col:39> col:5 k_msgq_cleanup 'int (struct k_msgq *)'
| |-ParmVarDecl 0x55b64be8ec90 <col:20, col:35> col:35 msgq 'struct k_msgq *'
| `-FullComment 0x55b64bf7b740 <line:3703:3, line:3710:33>
|   |-ParagraphComment 0x55b64bf7b410 <line:3703:3>
|   | `-TextComment 0x55b64bf7b3e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7b430 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55b64bf7b490 <col:10, col:46>
|   |   `-TextComment 0x55b64bf7b460 <col:10, col:46> Text=" Release allocated buffer for a queue"
|   |-ParagraphComment 0x55b64bf7b4e0 <line:3705:3, col:49>
|   | `-TextComment 0x55b64bf7b4b0 <col:3, col:49> Text=" Releases memory allocated for the ring buffer."
|   |-ParagraphComment 0x55b64bf7b530 <line:3707:3>
|   | `-TextComment 0x55b64bf7b500 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7b550 <col:4, col:39> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf7b5e0 <col:15, col:39>
|   |   `-TextComment 0x55b64bf7b5b0 <col:15, col:39> Text=" message queue to cleanup"
|   `-ParagraphComment 0x55b64bf7b6f0 <line:3709:3, line:3710:33>
|     |-TextComment 0x55b64bf7b600 <line:3709:3> Text=" "
|     |-InlineCommandComment 0x55b64bf7b620 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55b64bf7b640 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x55b64bf7b660 <line:3710:3> Text=" "
|     |-InlineCommandComment 0x55b64bf7b680 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55b64bf7b6a0 <col:11, col:33> Text=" -EBUSY Queue not empty"
|-FunctionDecl 0x55b64bee2628 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3732:72> col:15 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x55b64be8ee90 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55b64be8ef08 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x55b64bee24f0 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x55b64bf7bf80 <line:3715:3, line:3731:1>
|   |-ParagraphComment 0x55b64bf7b7e0 <line:3715:3>
|   | `-TextComment 0x55b64bf7b7b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7b800 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55b64bf7b860 <col:10, col:44>
|   |   `-TextComment 0x55b64bf7b830 <col:10, col:44> Text=" Send a message to a message queue."
|   |-ParagraphComment 0x55b64bf7b900 <line:3717:3, col:51>
|   | |-TextComment 0x55b64bf7b880 <col:3, col:49> Text=" This routine sends a message to message queue "
|   | `-InlineCommandComment 0x55b64bf7b8d0 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="q."
|   |-ParagraphComment 0x55b64bf7b950 <line:3719:3>
|   | `-TextComment 0x55b64bf7b920 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7b970 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf7b9d0 <col:9, col:31>
|   |   `-TextComment 0x55b64bf7b9a0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf7ba20 <line:3721:3>
|   | `-TextComment 0x55b64bf7b9f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7ba40 <col:4, line:3722:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf7baf0 <line:3721:15, line:3722:3>
|   |   |-TextComment 0x55b64bf7baa0 <line:3721:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55b64bf7bac0 <line:3722:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7bb10 <col:4, line:3723:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf7bbc0 <line:3722:15, line:3723:3>
|   |   |-TextComment 0x55b64bf7bb70 <line:3722:15, col:38> Text=" Pointer to the message."
|   |   `-TextComment 0x55b64bf7bb90 <line:3723:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7bbe0 <col:4, line:3725:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf7bcc0 <line:3723:18, line:3725:28>
|   |   |-TextComment 0x55b64bf7bc40 <line:3723:18, col:68> Text=" Non-negative waiting period to add the message (in"
|   |   |-TextComment 0x55b64bf7bc60 <line:3724:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55b64bf7bc80 <line:3725:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55b64bf7be70 <line:3727:3, line:3730:3>
|   | |-TextComment 0x55b64bf7bce0 <line:3727:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf7bd00 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf7bd20 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x55b64bf7bd40 <line:3728:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf7bd60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf7bd80 <col:11, col:60> Text=" -ENOMSG Returned without waiting or queue purged."
|   | |-TextComment 0x55b64bf7bda0 <line:3729:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf7bdc0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf7bde0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55b64bf7be00 <line:3730:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf7be90 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55b64bf7bf00 <line:3731:1>
|     `-TextComment 0x55b64bf7bed0 <col:1> Text=" "
|-FunctionDecl 0x55b64bee28b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3753:72> col:15 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x55b64bee2730 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55b64bee27a8 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x55b64bee2818 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x55b64bf7c890 <line:3735:3, line:3752:1>
|   |-ParagraphComment 0x55b64bf7c020 <line:3735:3>
|   | `-TextComment 0x55b64bf7bff0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7c040 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf7c0a0 <col:10, col:49>
|   |   `-TextComment 0x55b64bf7c070 <col:10, col:49> Text=" Receive a message from a message queue."
|   |-ParagraphComment 0x55b64bf7c190 <line:3737:3, line:3738:21>
|   | |-TextComment 0x55b64bf7c0c0 <line:3737:3, col:54> Text=" This routine receives a message from message queue "
|   | |-InlineCommandComment 0x55b64bf7c110 <col:55, col:56> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x55b64bf7c130 <col:59, col:74> Text=" in a "first in,"
|   | `-TextComment 0x55b64bf7c150 <line:3738:3, col:21> Text=" first out" manner."
|   |-ParagraphComment 0x55b64bf7c1e0 <line:3740:3>
|   | `-TextComment 0x55b64bf7c1b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7c200 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x55b64bf7c2e0 <col:9, col:72>
|   |   |-TextComment 0x55b64bf7c230 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x55b64bf7c280 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x55b64bf7c2a0 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x55b64bf7c330 <line:3742:3>
|   | `-TextComment 0x55b64bf7c300 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7c350 <col:4, line:3743:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf7c400 <line:3742:15, line:3743:3>
|   |   |-TextComment 0x55b64bf7c3b0 <line:3742:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55b64bf7c3d0 <line:3743:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7c420 <col:4, line:3744:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf7c4d0 <line:3743:15, line:3744:3>
|   |   |-TextComment 0x55b64bf7c480 <line:3743:15, col:60> Text=" Address of area to hold the received message."
|   |   `-TextComment 0x55b64bf7c4a0 <line:3744:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7c4f0 <col:4, line:3746:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf7c5d0 <line:3744:18, line:3746:28>
|   |   |-TextComment 0x55b64bf7c550 <line:3744:18, col:72> Text=" Non-negative waiting period to receive the message (in"
|   |   |-TextComment 0x55b64bf7c570 <line:3745:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55b64bf7c590 <line:3746:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55b64bf7c780 <line:3748:3, line:3751:3>
|   | |-TextComment 0x55b64bf7c5f0 <line:3748:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf7c610 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf7c630 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x55b64bf7c650 <line:3749:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf7c670 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf7c690 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x55b64bf7c6b0 <line:3750:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf7c6d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf7c6f0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55b64bf7c710 <line:3751:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf7c7a0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55b64bf7c810 <line:3752:1>
|     `-TextComment 0x55b64bf7c7e0 <col:1> Text=" "
|-FunctionDecl 0x55b64bee2b58 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3770:58> col:15 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x55b64bee29c0 <col:27, col:42> col:42 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55b64bee2a38 <col:48, col:54> col:54 data 'void *'
| `-FullComment 0x55b64bf7cf90 <line:3756:3, line:3769:1>
|   |-ParagraphComment 0x55b64bf7c930 <line:3756:3>
|   | `-TextComment 0x55b64bf7c900 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7c950 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55b64bf7c9b0 <col:10, col:51>
|   |   `-TextComment 0x55b64bf7c980 <col:10, col:51> Text=" Peek/read a message from a message queue."
|   |-ParagraphComment 0x55b64bf7caa0 <line:3758:3, line:3759:57>
|   | |-TextComment 0x55b64bf7c9d0 <line:3758:3, col:51> Text=" This routine reads a message from message queue "
|   | |-InlineCommandComment 0x55b64bf7ca20 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x55b64bf7ca40 <col:56, col:71> Text=" in a "first in,"
|   | `-TextComment 0x55b64bf7ca60 <line:3759:3, col:57> Text=" first out" manner and leaves the message in the queue."
|   |-ParagraphComment 0x55b64bf7caf0 <line:3761:3>
|   | `-TextComment 0x55b64bf7cac0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7cb10 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55b64bf7cb70 <col:9, col:31>
|   |   `-TextComment 0x55b64bf7cb40 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55b64bf7cbc0 <line:3763:3>
|   | `-TextComment 0x55b64bf7cb90 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7cbe0 <col:4, line:3764:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf7cc90 <line:3763:15, line:3764:3>
|   |   |-TextComment 0x55b64bf7cc40 <line:3763:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55b64bf7cc60 <line:3764:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7ccb0 <col:4, col:71> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf7cd40 <col:15, col:71>
|   |   `-TextComment 0x55b64bf7cd10 <col:15, col:71> Text=" Address of area to hold the message read from the queue."
|   |-ParagraphComment 0x55b64bf7ce80 <line:3766:3, line:3768:3>
|   | |-TextComment 0x55b64bf7cd60 <line:3766:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf7cd80 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf7cda0 <col:11, col:26> Text=" 0 Message read."
|   | |-TextComment 0x55b64bf7cdc0 <line:3767:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf7cde0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf7ce00 <col:11, col:58> Text=" -ENOMSG Returned when the queue has no message."
|   | `-TextComment 0x55b64bf7ce20 <line:3768:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf7cea0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55b64bf7cf10 <line:3769:1>
|     `-TextComment 0x55b64bf7cee0 <col:1> Text=" "
|-FunctionDecl 0x55b64bee2d60 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3784:48> col:16 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55b64bee2c60 <col:29, col:44> col:44 msgq 'struct k_msgq *'
| `-FullComment 0x55b64bf7d450 <line:3773:3, line:3783:1>
|   |-ParagraphComment 0x55b64bf7d040 <line:3773:3>
|   | `-TextComment 0x55b64bf7d010 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7d060 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x55b64bf7d0c0 <col:10, col:32>
|   |   `-TextComment 0x55b64bf7d090 <col:10, col:32> Text=" Purge a message queue."
|   |-ParagraphComment 0x55b64bf7d160 <line:3775:3, line:3777:61>
|   | |-TextComment 0x55b64bf7d0e0 <line:3775:3, col:74> Text=" This routine discards all unreceived messages in a message queue's ring"
|   | |-TextComment 0x55b64bf7d100 <line:3776:3, col:72> Text=" buffer. Any threads that are blocked waiting to send a message to the"
|   | `-TextComment 0x55b64bf7d120 <line:3777:3, col:61> Text=" message queue are unblocked and see an -ENOMSG error code."
|   |-ParagraphComment 0x55b64bf7d1b0 <line:3779:3>
|   | `-TextComment 0x55b64bf7d180 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7d1d0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf7d260 <col:15, col:44>
|   |   `-TextComment 0x55b64bf7d230 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x55b64bf7d2b0 <line:3781:3>
|   | `-TextComment 0x55b64bf7d280 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7d2d0 <col:4, line:3782:3> Name="return"
|   | `-ParagraphComment 0x55b64bf7d350 <line:3781:11, line:3782:3>
|   |   |-TextComment 0x55b64bf7d300 <line:3781:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf7d320 <line:3782:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf7d370 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55b64bf7d3e0 <line:3783:1>
|     `-TextComment 0x55b64bf7d3b0 <col:1> Text=" "
|-FunctionDecl 0x55b64bee2f60 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3797:56> col:17 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55b64bee2e60 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x55b64bf7d8d0 <line:3787:3, line:3796:1>
|   |-ParagraphComment 0x55b64bf7d4f0 <line:3787:3>
|   | `-TextComment 0x55b64bf7d4c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7d510 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x55b64bf7d570 <col:10, col:58>
|   |   `-TextComment 0x55b64bf7d540 <col:10, col:58> Text=" Get the amount of free space in a message queue."
|   |-ParagraphComment 0x55b64bf7d5e0 <line:3789:3, line:3790:15>
|   | |-TextComment 0x55b64bf7d590 <line:3789:3, col:73> Text=" This routine returns the number of unused entries in a message queue's"
|   | `-TextComment 0x55b64bf7d5b0 <line:3790:3, col:15> Text=" ring buffer."
|   |-ParagraphComment 0x55b64bf7d630 <line:3792:3>
|   | `-TextComment 0x55b64bf7d600 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7d650 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf7d6e0 <col:15, col:44>
|   |   `-TextComment 0x55b64bf7d6b0 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x55b64bf7d730 <line:3794:3>
|   | `-TextComment 0x55b64bf7d700 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7d750 <col:4, line:3795:3> Name="return"
|   | `-ParagraphComment 0x55b64bf7d7d0 <line:3794:11, line:3795:3>
|   |   |-TextComment 0x55b64bf7d780 <line:3794:11, col:48> Text=" Number of unused ring buffer entries."
|   |   `-TextComment 0x55b64bf7d7a0 <line:3795:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf7d7f0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55b64bf7d860 <line:3796:1>
|     `-TextComment 0x55b64bf7d830 <col:1> Text=" "
|-FunctionDecl 0x55b64bee3280 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3811:32> line:3810:17 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x55b64bee3060 <col:34, col:49> col:49 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55b64bee3170 <line:3811:6, col:27> col:27 attrs 'struct k_msgq_attrs *'
| `-FullComment 0x55b64bf7de00 <line:3800:3, line:3809:1>
|   |-ParagraphComment 0x55b64bf7d970 <line:3800:3>
|   | `-TextComment 0x55b64bf7d940 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7d990 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x55b64bf7d9f0 <col:10, col:50>
|   |   `-TextComment 0x55b64bf7d9c0 <col:10, col:50> Text=" Get basic attributes of a message queue."
|   |-ParagraphComment 0x55b64bf7da40 <line:3802:3, col:77>
|   | `-TextComment 0x55b64bf7da10 <col:3, col:77> Text=" This routine fetches basic attributes of message queue into attr argument."
|   |-ParagraphComment 0x55b64bf7da90 <line:3804:3>
|   | `-TextComment 0x55b64bf7da60 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7dab0 <col:4, line:3805:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf7db60 <line:3804:15, line:3805:3>
|   |   |-TextComment 0x55b64bf7db10 <line:3804:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55b64bf7db30 <line:3805:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7db80 <col:4, col:61> [in] implicitly Param="attrs" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf7dc10 <col:16, col:61>
|   |   `-TextComment 0x55b64bf7dbe0 <col:16, col:61> Text=" pointer to message queue attribute structure."
|   |-ParagraphComment 0x55b64bf7dc60 <line:3807:3>
|   | `-TextComment 0x55b64bf7dc30 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7dc80 <col:4, line:3808:3> Name="return"
|   | `-ParagraphComment 0x55b64bf7dd00 <line:3807:11, line:3808:3>
|   |   |-TextComment 0x55b64bf7dcb0 <line:3807:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf7dcd0 <line:3808:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf7dd20 <col:4, col:19> Text=" K-MSGQ-003"
|   `-ParagraphComment 0x55b64bf7dd90 <line:3809:1>
|     `-TextComment 0x55b64bf7dd60 <col:1> Text=" "
|-FunctionDecl 0x55b64bee33e0 <line:3814:1, line:3817:1> line:3814:21 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55b64bee3358 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55b64bee3ab8 <line:3815:1, line:3817:1>
|   `-ReturnStmt 0x55b64bee3a78 <line:3816:2, col:32>
|     `-BinaryOperator 0x55b64bee3a50 <col:9, col:32> 'unsigned int' '-'
|       |-ImplicitCastExpr 0x55b64bee3a20 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-MemberExpr 0x55b64bee3970 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->max_msgs 0x55b64bedeaf8
|       |   `-ImplicitCastExpr 0x55b64bee34b0 <col:9> 'struct k_msgq *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55b64bee3488 <col:9> 'struct k_msgq *' lvalue ParmVar 0x55b64bee3358 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x55b64bee3a38 <col:26, col:32> 'u32_t':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x55b64bee39e8 <col:26, col:32> 'u32_t':'unsigned int' lvalue ->used_msgs 0x55b64be8e138
|           `-ImplicitCastExpr 0x55b64bee39d0 <col:26> 'struct k_msgq *' <LValueToRValue>
|             `-DeclRefExpr 0x55b64bee39a8 <col:26> 'struct k_msgq *' lvalue ParmVar 0x55b64bee3358 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x55b64bee3b80 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3829:56> col:17 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55b64bee3af8 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x55b64bf7e260 <line:3820:3, line:3828:1>
|   |-ParagraphComment 0x55b64bf7dea0 <line:3820:3>
|   | `-TextComment 0x55b64bf7de70 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7dec0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x55b64bf7df20 <col:10, col:56>
|   |   `-TextComment 0x55b64bf7def0 <col:10, col:56> Text=" Get the number of messages in a message queue."
|   |-ParagraphComment 0x55b64bf7df70 <line:3822:3, col:80>
|   | `-TextComment 0x55b64bf7df40 <col:3, col:80> Text=" This routine returns the number of messages in a message queue's ring buffer."
|   |-ParagraphComment 0x55b64bf7dfc0 <line:3824:3>
|   | `-TextComment 0x55b64bf7df90 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7dfe0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf7e070 <col:15, col:44>
|   |   `-TextComment 0x55b64bf7e040 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x55b64bf7e0c0 <line:3826:3>
|   | `-TextComment 0x55b64bf7e090 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7e0e0 <col:4, line:3827:3> Name="return"
|   | `-ParagraphComment 0x55b64bf7e160 <line:3826:11, line:3827:3>
|   |   |-TextComment 0x55b64bf7e110 <line:3826:11, col:30> Text=" Number of messages."
|   |   `-TextComment 0x55b64bf7e130 <line:3827:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf7e180 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55b64bf7e1f0 <line:3828:1>
|     `-TextComment 0x55b64bf7e1c0 <col:1> Text=" "
|-FunctionDecl 0x55b64bee3cd8 <line:3831:1, line:3834:1> line:3831:21 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55b64bee3c50 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55b64bee3e88 <line:3832:1, line:3834:1>
|   `-ReturnStmt 0x55b64bee3e10 <line:3833:2, col:15>
|     `-ImplicitCastExpr 0x55b64bee3df8 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55b64bee3dc0 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->used_msgs 0x55b64be8e138
|         `-ImplicitCastExpr 0x55b64bee3da8 <col:9> 'struct k_msgq *' <LValueToRValue>
|           `-DeclRefExpr 0x55b64bee3d80 <col:9> 'struct k_msgq *' lvalue ParmVar 0x55b64bee3c50 'msgq' 'struct k_msgq *'
|-RecordDecl 0x55b64bee3ea0 <line:3849:1, line:3853:1> line:3849:8 struct k_mem_block_id definition
| |-FullComment 0x55b64bf7e4c0 <line:3839:3, line:3841:5>
| | |-ParagraphComment 0x55b64bf7e300 <line:3839:3>
| | | `-TextComment 0x55b64bf7e2d0 <col:3> Text=" "
| | |-VerbatimLineComment 0x55b64bf7e320 <col:4, col:44> Text=" mem_pool_apis Memory Pool APIs"
| | |-ParagraphComment 0x55b64bf7e390 <line:3840:3>
| | | `-TextComment 0x55b64bf7e360 <col:3> Text=" "
| | |-VerbatimLineComment 0x55b64bf7e3b0 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x55b64bf7e470 <line:3841:3, col:5>
| |   |-TextComment 0x55b64bf7e3f0 <col:3> Text=" "
| |   |-TextComment 0x55b64bf7e410 <col:4> Text="@"
| |   `-TextComment 0x55b64bf7e430 <col:5> Text="{"
| |-FieldDecl 0x55b64bee3f80 <line:3850:2, col:15> col:8 pool 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x55b64bee3f50 <col:15> 'int' 8
| |-FieldDecl 0x55b64bee3ff8 <line:3851:2, col:16> col:8 level 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x55b64bee3fc8 <col:16> 'int' 4
| `-FieldDecl 0x55b64bee4070 <line:3852:2, col:16> col:8 block 'u32_t':'unsigned int'
|   `-IntegerLiteral 0x55b64bee4040 <col:16> 'int' 20
|-RecordDecl 0x55b64bee40b8 <line:3855:1, line:3858:1> line:3855:8 struct k_mem_block definition
| |-FieldDecl 0x55b64bee4178 <line:3856:2, col:8> col:8 data 'void *'
| `-FieldDecl 0x55b64bee4210 <line:3857:2, col:24> col:24 id 'struct k_mem_block_id':'struct k_mem_block_id'
|-RecordDecl 0x55b64bee42e8 <line:3872:1, line:3895:1> line:3872:8 struct k_mbox_msg definition
| |-FullComment 0x55b64bf7e670 <line:3869:3, line:3871:1>
| | |-ParagraphComment 0x55b64bf7e560 <line:3869:3>
| | | `-TextComment 0x55b64bf7e530 <col:3> Text=" "
| | |-BlockCommandComment 0x55b64bf7e580 <col:4, col:35> Name="brief"
| | | `-ParagraphComment 0x55b64bf7e5e0 <col:10, col:35>
| | |   `-TextComment 0x55b64bf7e5b0 <col:10, col:35> Text=" Mailbox Message Structure"
| | `-ParagraphComment 0x55b64bf7e630 <line:3871:1>
| |   `-TextComment 0x55b64bf7e600 <col:1> Text=" "
| |-FieldDecl 0x55b64bee43c8 <line:3874:2, col:8> col:8 _mailbox 'u32_t':'unsigned int'
| | `-FullComment 0x55b64bf7e740 <line:3873:5, col:55>
| |   `-ParagraphComment 0x55b64bf7e710 <col:5, col:55>
| |     `-TextComment 0x55b64bf7e6e0 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x55b64bee4448 <line:3876:2, col:9> col:9 size 'size_t':'unsigned long'
| | `-FullComment 0x55b64bf7e810 <line:3875:5, col:32>
| |   `-ParagraphComment 0x55b64bf7e7e0 <col:5, col:32>
| |     `-TextComment 0x55b64bf7e7b0 <col:5, col:32> Text=" size of message (in bytes) "
| |-FieldDecl 0x55b64bee44c8 <line:3878:2, col:8> col:8 info 'u32_t':'unsigned int'
| | `-FullComment 0x55b64bf7e8e0 <line:3877:5, col:43>
| |   `-ParagraphComment 0x55b64bf7e8b0 <col:5, col:43>
| |     `-TextComment 0x55b64bf7e880 <col:5, col:43> Text=" application-defined information value "
| |-FieldDecl 0x55b64bee4550 <line:3880:2, col:8> col:8 tx_data 'void *'
| | `-FullComment 0x55b64bf7e9b0 <line:3879:5, col:34>
| |   `-ParagraphComment 0x55b64bf7e980 <col:5, col:34>
| |     `-TextComment 0x55b64bf7e950 <col:5, col:34> Text=" sender's message data buffer "
| |-FieldDecl 0x55b64bee45e0 <line:3882:2, col:8> col:8 _rx_data 'void *'
| | `-FullComment 0x55b64bf7ea80 <line:3881:5, col:55>
| |   `-ParagraphComment 0x55b64bf7ea50 <col:5, col:55>
| |     `-TextComment 0x55b64bf7ea20 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x55b64bee46b0 <line:3884:2, col:21> col:21 tx_block 'struct k_mem_block':'struct k_mem_block'
| | `-FullComment 0x55b64bf7eb50 <line:3883:5, col:35>
| |   `-ParagraphComment 0x55b64bf7eb20 <col:5, col:35>
| |     `-TextComment 0x55b64bf7eaf0 <col:5, col:35> Text=" message data block descriptor "
| |-FieldDecl 0x55b64bee4738 <line:3886:2, col:10> col:10 rx_source_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x55b64bf7ec20 <line:3885:5, col:22>
| |   `-ParagraphComment 0x55b64bf7ebf0 <col:5, col:22>
| |     `-TextComment 0x55b64bf7ebc0 <col:5, col:22> Text=" source thread id "
| |-FieldDecl 0x55b64bee47b8 <line:3888:2, col:10> col:10 tx_target_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x55b64bf7ecf0 <line:3887:5, col:22>
| |   `-ParagraphComment 0x55b64bf7ecc0 <col:5, col:22>
| |     `-TextComment 0x55b64bf7ec90 <col:5, col:22> Text=" target thread id "
| `-FieldDecl 0x55b64bee4838 <line:3890:2, col:10> col:10 _syncing_thread 'k_tid_t':'struct k_thread *'
|   `-FullComment 0x55b64bf7edc0 <line:3889:5, col:65>
|     `-ParagraphComment 0x55b64bf7ed90 <col:5, col:65>
|       `-TextComment 0x55b64bf7ed60 <col:5, col:65> Text=" internal use only - thread waiting on send (may be a dummy) "
|-RecordDecl 0x55b64bee48a8 prev 0x55b64bea7000 <line:3900:1, line:3909:1> line:3900:8 struct k_mbox definition
| |-FullComment 0x55b64bf7ef70 <line:3897:3, line:3899:1>
| | |-ParagraphComment 0x55b64bf7ee60 <line:3897:3>
| | | `-TextComment 0x55b64bf7ee30 <col:3> Text=" "
| | |-BlockCommandComment 0x55b64bf7ee80 <col:4, col:27> Name="brief"
| | | `-ParagraphComment 0x55b64bf7eee0 <col:10, col:27>
| | |   `-TextComment 0x55b64bf7eeb0 <col:10, col:27> Text=" Mailbox Structure"
| | `-ParagraphComment 0x55b64bf7ef30 <line:3899:1>
| |   `-TextComment 0x55b64bf7ef00 <col:1> Text=" "
| |-FieldDecl 0x55b64bee5990 <line:3902:2, col:12> col:12 tx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x55b64bf7f080 <line:3901:5, col:29>
| |   `-ParagraphComment 0x55b64bf7f050 <col:5, col:29>
| |     `-TextComment 0x55b64bf7f020 <col:5, col:29> Text=" Transmit messages queue "
| |-FieldDecl 0x55b64bee5a18 <line:3904:2, col:12> col:12 rx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x55b64bf7f150 <line:3903:5, col:27>
| |   `-ParagraphComment 0x55b64bf7f120 <col:5, col:27>
| |     `-TextComment 0x55b64bf7f0f0 <col:5, col:27> Text=" Receive message queue "
| `-FieldDecl 0x55b64bee5a80 <line:3905:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
|-FunctionDecl 0x55b64bee5d40 <line:3951:1, col:44> col:13 k_mbox_init 'void (struct k_mbox *)' extern
| |-ParmVarDecl 0x55b64bee5c40 <col:25, col:40> col:40 mbox 'struct k_mbox *'
| `-FullComment 0x55b64bf7f5b0 <line:3942:3, line:3950:1>
|   |-ParagraphComment 0x55b64bf7f1f0 <line:3942:3>
|   | `-TextComment 0x55b64bf7f1c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7f210 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x55b64bf7f270 <col:10, col:31>
|   |   `-TextComment 0x55b64bf7f240 <col:10, col:31> Text=" Initialize a mailbox."
|   |-ParagraphComment 0x55b64bf7f2c0 <line:3944:3, col:69>
|   | `-TextComment 0x55b64bf7f290 <col:3, col:69> Text=" This routine initializes a mailbox object, prior to its first use."
|   |-ParagraphComment 0x55b64bf7f310 <line:3946:3>
|   | `-TextComment 0x55b64bf7f2e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7f330 <col:4, col:38> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf7f3c0 <col:15, col:38>
|   |   `-TextComment 0x55b64bf7f390 <col:15, col:38> Text=" Address of the mailbox."
|   |-ParagraphComment 0x55b64bf7f410 <line:3948:3>
|   | `-TextComment 0x55b64bf7f3e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7f430 <col:4, line:3949:3> Name="return"
|   | `-ParagraphComment 0x55b64bf7f4b0 <line:3948:11, line:3949:3>
|   |   |-TextComment 0x55b64bf7f460 <line:3948:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf7f480 <line:3949:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf7f4d0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55b64bf7f540 <line:3950:1>
|     `-TextComment 0x55b64bf7f510 <col:1> Text=" "
|-FunctionDecl 0x55b64bee60f8 <line:3973:1, line:3974:22> line:3973:12 k_mbox_put 'int (struct k_mbox *, struct k_mbox_msg *, s32_t)' extern
| |-ParmVarDecl 0x55b64bee5e40 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x55b64bee5f50 <col:44, col:63> col:63 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x55b64bee5fc0 <line:3974:9, col:15> col:15 timeout 's32_t':'int'
| `-FullComment 0x55b64bf7fde0 <line:3954:3, line:3972:1>
|   |-ParagraphComment 0x55b64bf7f650 <line:3954:3>
|   | `-TextComment 0x55b64bf7f620 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7f670 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x55b64bf7f6d0 <col:10, col:57>
|   |   `-TextComment 0x55b64bf7f6a0 <col:10, col:57> Text=" Send a mailbox message in a synchronous manner."
|   |-ParagraphComment 0x55b64bf7f7f0 <line:3956:3, line:3958:55>
|   | |-TextComment 0x55b64bf7f6f0 <line:3956:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x55b64bf7f740 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x55b64bf7f760 <col:43, col:75> Text=" and waits for a receiver to both"
|   | |-TextComment 0x55b64bf7f780 <line:3957:3, col:75> Text=" receive and process it. The message data may be in a buffer, in a memory"
|   | `-TextComment 0x55b64bf7f7a0 <line:3958:3, col:55> Text=" pool block, or non-existent (i.e. an empty message)."
|   |-ParagraphComment 0x55b64bf7f840 <line:3960:3>
|   | `-TextComment 0x55b64bf7f810 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7f860 <col:4, line:3961:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf7f910 <line:3960:15, line:3961:3>
|   |   |-TextComment 0x55b64bf7f8c0 <line:3960:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x55b64bf7f8e0 <line:3961:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7f930 <col:4, line:3962:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf7f9e0 <line:3961:17, line:3962:3>
|   |   |-TextComment 0x55b64bf7f990 <line:3961:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x55b64bf7f9b0 <line:3962:3> Text=" "
|   |-ParamCommandComment 0x55b64bf7fa00 <col:4, line:3966:45> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf7fb30 <line:3962:18, line:3966:45>
|   |   |-TextComment 0x55b64bf7fa60 <line:3962:18, col:80> Text=" Non-negative waiting period for the message to be received (in"
|   |   |-TextComment 0x55b64bf7fa80 <line:3963:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   |-TextComment 0x55b64bf7faa0 <line:3964:3, col:68> Text="                and K_FOREVER. Once the message has been received,"
|   |   |-TextComment 0x55b64bf7fac0 <line:3965:3, col:73> Text="                this routine waits as long as necessary for the message"
|   |   `-TextComment 0x55b64bf7fae0 <line:3966:3, col:45> Text="                to be completely processed."
|   |-ParagraphComment 0x55b64bf7fce0 <line:3968:3, line:3971:3>
|   | |-TextComment 0x55b64bf7fb50 <line:3968:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf7fb70 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf7fb90 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x55b64bf7fbb0 <line:3969:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf7fbd0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf7fbf0 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x55b64bf7fc10 <line:3970:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf7fc30 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf7fc50 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55b64bf7fc70 <line:3971:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf7fd00 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55b64bf7fd70 <line:3972:1>
|     `-TextComment 0x55b64bf7fd40 <col:1> Text=" "
|-FunctionDecl 0x55b64bee6440 <line:3992:1, line:3993:26> line:3992:13 k_mbox_async_put 'void (struct k_mbox *, struct k_mbox_msg *, struct k_sem *)' extern
| |-ParmVarDecl 0x55b64bee6200 <col:30, col:45> col:45 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x55b64bee6288 <col:51, col:70> col:70 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x55b64bee6310 <line:3993:9, col:23> col:23 sem 'struct k_sem *'
| `-FullComment 0x55b64bf80560 <line:3977:3, line:3991:1>
|   |-ParagraphComment 0x55b64bf7fe80 <line:3977:3>
|   | `-TextComment 0x55b64bf7fe50 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf7fea0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55b64bf7ff00 <col:10, col:59>
|   |   `-TextComment 0x55b64bf7fed0 <col:10, col:59> Text=" Send a mailbox message in an asynchronous manner."
|   |-ParagraphComment 0x55b64bf800c0 <line:3979:3, line:3983:29>
|   | |-TextComment 0x55b64bf7ff20 <line:3979:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x55b64bf7ff70 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x55b64bf7ff90 <col:43, col:73> Text=" without waiting for a receiver"
|   | |-TextComment 0x55b64bf7ffb0 <line:3980:3, col:78> Text=" to process it. The message data may be in a buffer, in a memory pool block,"
|   | |-TextComment 0x55b64bf7ffd0 <line:3981:3, col:70> Text=" or non-existent (i.e. an empty message). Optionally, the semaphore "
|   | |-InlineCommandComment 0x55b64bf80020 <col:71, col:72> Name="a" RenderEmphasized Arg[0]="sem"
|   | |-TextComment 0x55b64bf80040 <line:3982:3, col:71> Text=" will be given when the message has been both received and completely"
|   | `-TextComment 0x55b64bf80060 <line:3983:3, col:29> Text=" processed by the receiver."
|   |-ParagraphComment 0x55b64bf80110 <line:3985:3>
|   | `-TextComment 0x55b64bf800e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf80130 <col:4, line:3986:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf801e0 <line:3985:15, line:3986:3>
|   |   |-TextComment 0x55b64bf80190 <line:3985:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x55b64bf801b0 <line:3986:3> Text=" "
|   |-ParamCommandComment 0x55b64bf80200 <col:4, line:3987:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf802b0 <line:3986:17, line:3987:3>
|   |   |-TextComment 0x55b64bf80260 <line:3986:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x55b64bf80280 <line:3987:3> Text=" "
|   |-ParamCommandComment 0x55b64bf802d0 <col:4, col:64> [in] implicitly Param="sem" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf80360 <col:14, col:64>
|   |   `-TextComment 0x55b64bf80330 <col:14, col:64> Text=" Address of a semaphore, or NULL if none is needed."
|   |-ParagraphComment 0x55b64bf803b0 <line:3989:3>
|   | `-TextComment 0x55b64bf80380 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf803d0 <col:4, line:3990:3> Name="return"
|   | `-ParagraphComment 0x55b64bf80450 <line:3989:11, line:3990:3>
|   |   |-TextComment 0x55b64bf80400 <line:3989:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf80420 <line:3990:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf80470 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55b64bf804e0 <line:3991:1>
|     `-TextComment 0x55b64bf804b0 <col:1> Text=" "
|-FunctionDecl 0x55b64bee6808 <line:4014:1, line:4015:36> line:4014:12 k_mbox_get 'int (struct k_mbox *, struct k_mbox_msg *, void *, s32_t)' extern
| |-ParmVarDecl 0x55b64bee6550 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x55b64bee65d8 <col:44, col:63> col:63 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x55b64bee6650 <line:4015:9, col:15> col:15 buffer 'void *'
| |-ParmVarDecl 0x55b64bee66c0 <col:23, col:29> col:29 timeout 's32_t':'int'
| `-FullComment 0x55b64bf80e20 <line:3996:3, line:4013:1>
|   |-ParagraphComment 0x55b64bf80600 <line:3996:3>
|   | `-TextComment 0x55b64bf805d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf80620 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55b64bf80680 <col:10, col:36>
|   |   `-TextComment 0x55b64bf80650 <col:10, col:36> Text=" Receive a mailbox message."
|   |-ParagraphComment 0x55b64bf80770 <line:3998:3, line:3999:40>
|   | |-TextComment 0x55b64bf806a0 <line:3998:3, col:40> Text=" This routine receives a message from "
|   | |-InlineCommandComment 0x55b64bf806f0 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="mbox,"
|   | |-TextComment 0x55b64bf80710 <col:49, col:74> Text=" then optionally retrieves"
|   | `-TextComment 0x55b64bf80730 <line:3999:3, col:40> Text=" its data and disposes of the message."
|   |-ParagraphComment 0x55b64bf807c0 <line:4001:3>
|   | `-TextComment 0x55b64bf80790 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf807e0 <col:4, line:4002:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf80890 <line:4001:15, line:4002:3>
|   |   |-TextComment 0x55b64bf80840 <line:4001:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x55b64bf80860 <line:4002:3> Text=" "
|   |-ParamCommandComment 0x55b64bf808b0 <col:4, line:4003:3> [in] implicitly Param="rx_msg" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf80960 <line:4002:17, line:4003:3>
|   |   |-TextComment 0x55b64bf80910 <line:4002:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x55b64bf80930 <line:4003:3> Text=" "
|   |-ParamCommandComment 0x55b64bf80980 <col:4, line:4005:3> [in] implicitly Param="buffer" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf80a60 <line:4003:17, line:4005:3>
|   |   |-TextComment 0x55b64bf809e0 <line:4003:17, col:77> Text=" Address of the buffer to receive data, or NULL to defer data"
|   |   |-TextComment 0x55b64bf80a00 <line:4004:3, col:60> Text="               retrieval and message disposal until later."
|   |   `-TextComment 0x55b64bf80a20 <line:4005:3> Text=" "
|   |-ParamCommandComment 0x55b64bf80a80 <col:4, line:4007:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf80b60 <line:4005:18, line:4007:32>
|   |   |-TextComment 0x55b64bf80ae0 <line:4005:18, col:78> Text=" Non-negative waiting period for a message to be received (in"
|   |   |-TextComment 0x55b64bf80b00 <line:4006:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x55b64bf80b20 <line:4007:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x55b64bf80d10 <line:4009:3, line:4012:3>
|   | |-TextComment 0x55b64bf80b80 <line:4009:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf80ba0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf80bc0 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x55b64bf80be0 <line:4010:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf80c00 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf80c20 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x55b64bf80c40 <line:4011:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf80c60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf80c80 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55b64bf80ca0 <line:4012:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf80d30 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55b64bf80da0 <line:4013:1>
|     `-TextComment 0x55b64bf80d70 <col:1> Text=" "
|-FunctionDecl 0x55b64bee6fc0 <line:4033:1, col:68> col:13 k_mbox_data_get 'void (struct k_mbox_msg *, void *)' extern
| |-ParmVarDecl 0x55b64bee6920 <col:29, col:48> col:48 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x55b64bee6ea8 <col:56, col:62> col:62 buffer 'void *'
| `-FullComment 0x55b64bf81430 <line:4018:3, line:4032:1>
|   |-ParagraphComment 0x55b64bf80ec0 <line:4018:3>
|   | `-TextComment 0x55b64bf80e90 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf80ee0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55b64bf80f40 <col:10, col:54>
|   |   `-TextComment 0x55b64bf80f10 <col:10, col:54> Text=" Retrieve mailbox message data into a buffer."
|   |-ParagraphComment 0x55b64bf80fb0 <line:4020:3, line:4021:57>
|   | |-TextComment 0x55b64bf80f60 <line:4020:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | `-TextComment 0x55b64bf80f80 <line:4021:3, col:57> Text=" its data into a buffer, then disposing of the message."
|   |-ParagraphComment 0x55b64bf81040 <line:4023:3, line:4024:31>
|   | |-TextComment 0x55b64bf80ff0 <line:4023:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | `-TextComment 0x55b64bf81010 <line:4024:3, col:31> Text=" without retrieving its data."
|   |-ParagraphComment 0x55b64bf81090 <line:4026:3>
|   | `-TextComment 0x55b64bf81060 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf810b0 <col:4, line:4027:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf81160 <line:4026:17, line:4027:3>
|   |   |-TextComment 0x55b64bf81110 <line:4026:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x55b64bf81130 <line:4027:3> Text=" "
|   |-ParamCommandComment 0x55b64bf81180 <col:4, line:4028:26> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf81230 <line:4027:17, line:4028:26>
|   |   |-TextComment 0x55b64bf811e0 <line:4027:17, col:74> Text=" Address of the buffer to receive data, or NULL to discard"
|   |   `-TextComment 0x55b64bf81200 <line:4028:3, col:26> Text="               the data."
|   |-ParagraphComment 0x55b64bf81280 <line:4030:3>
|   | `-TextComment 0x55b64bf81250 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf812a0 <col:4, line:4031:3> Name="return"
|   | `-ParagraphComment 0x55b64bf81320 <line:4030:11, line:4031:3>
|   |   |-TextComment 0x55b64bf812d0 <line:4030:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf812f0 <line:4031:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf81340 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55b64bf813b0 <line:4032:1>
|     `-TextComment 0x55b64bf81380 <col:1> Text=" "
|-FunctionDecl 0x55b64bee73e8 <line:4066:1, line:4068:46> line:4066:12 k_mbox_data_block_get 'int (struct k_mbox_msg *, struct k_mem_pool *, struct k_mem_block *, s32_t)' extern
| |-ParmVarDecl 0x55b64bee70c0 <col:34, col:53> col:53 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x55b64bee7148 <line:4067:6, col:25> col:25 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x55b64bee7230 <line:4068:6, col:26> col:26 block 'struct k_mem_block *'
| |-ParmVarDecl 0x55b64bee72a0 <col:33, col:39> col:39 timeout 's32_t':'int'
| `-FullComment 0x55b64bf81e60 <line:4036:3, line:4065:1>
|   |-ParagraphComment 0x55b64bf814d0 <line:4036:3>
|   | `-TextComment 0x55b64bf814a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf814f0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x55b64bf81550 <col:10, col:65>
|   |   `-TextComment 0x55b64bf81520 <col:10, col:65> Text=" Retrieve mailbox message data into a memory pool block."
|   |-ParagraphComment 0x55b64bf81640 <line:4038:3, line:4042:42>
|   | |-TextComment 0x55b64bf81570 <line:4038:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | |-TextComment 0x55b64bf81590 <line:4039:3, col:68> Text=" its data into a memory pool block, then disposing of the message."
|   | |-TextComment 0x55b64bf815b0 <line:4040:3, col:71> Text=" The memory pool block that results from successful retrieval must be"
|   | |-TextComment 0x55b64bf815d0 <line:4041:3, col:71> Text=" returned to the pool once the data has been processed, even in cases"
|   | `-TextComment 0x55b64bf815f0 <line:4042:3, col:42> Text=" where zero bytes of data are retrieved."
|   |-ParagraphComment 0x55b64bf816e0 <line:4044:3, line:4046:33>
|   | |-TextComment 0x55b64bf81660 <line:4044:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | |-TextComment 0x55b64bf81680 <line:4045:3, col:73> Text=" without retrieving its data. In this case there is no need to return a"
|   | `-TextComment 0x55b64bf816a0 <line:4046:3, col:33> Text=" memory pool block to the pool."
|   |-ParagraphComment 0x55b64bf817d0 <line:4048:3, line:4052:55>
|   | |-TextComment 0x55b64bf81700 <line:4048:3, col:74> Text=" This routine allocates a new memory pool block for the data only if the"
|   | |-TextComment 0x55b64bf81720 <line:4049:3, col:78> Text=" data is not already in one. If a new block cannot be allocated, the routine"
|   | |-TextComment 0x55b64bf81740 <line:4050:3, col:74> Text=" returns a failure code and the received message is left unchanged. This"
|   | |-TextComment 0x55b64bf81760 <line:4051:3, col:79> Text=" permits the caller to reattempt data retrieval at a later time or to dispose"
|   | `-TextComment 0x55b64bf81780 <line:4052:3, col:55> Text=" of the received message without retrieving its data."
|   |-ParagraphComment 0x55b64bf81820 <line:4054:3>
|   | `-TextComment 0x55b64bf817f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf81840 <col:4, line:4055:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf818f0 <line:4054:17, line:4055:3>
|   |   |-TextComment 0x55b64bf818a0 <line:4054:17, col:57> Text=" Address of a receive message descriptor."
|   |   `-TextComment 0x55b64bf818c0 <line:4055:3> Text=" "
|   |-ParamCommandComment 0x55b64bf81910 <col:4, line:4056:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf819c0 <line:4055:15, line:4056:3>
|   |   |-TextComment 0x55b64bf81970 <line:4055:15, col:63> Text=" Address of memory pool, or NULL to discard data."
|   |   `-TextComment 0x55b64bf81990 <line:4056:3> Text=" "
|   |-ParamCommandComment 0x55b64bf819e0 <col:4, line:4057:3> [in] implicitly Param="block" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf81a90 <line:4056:16, line:4057:3>
|   |   |-TextComment 0x55b64bf81a40 <line:4056:16, col:67> Text=" Address of the area to hold memory pool block info."
|   |   `-TextComment 0x55b64bf81a60 <line:4057:3> Text=" "
|   |-ParamCommandComment 0x55b64bf81ab0 <col:4, line:4059:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf81b90 <line:4057:18, line:4059:32>
|   |   |-TextComment 0x55b64bf81b10 <line:4057:18, col:77> Text=" Non-negative waiting period to wait for a memory pool block"
|   |   |-TextComment 0x55b64bf81b30 <line:4058:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x55b64bf81b50 <line:4059:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x55b64bf81d40 <line:4061:3, line:4064:3>
|   | |-TextComment 0x55b64bf81bb0 <line:4061:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf81bd0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf81bf0 <col:11, col:28> Text=" 0 Data retrieved."
|   | |-TextComment 0x55b64bf81c10 <line:4062:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf81c30 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf81c50 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x55b64bf81c70 <line:4063:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf81c90 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf81cb0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55b64bf81cd0 <line:4064:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf81d60 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55b64bf81dd0 <line:4065:1>
|     `-TextComment 0x55b64bf81da0 <col:1> Text=" "
|-RecordDecl 0x55b64bee7538 prev 0x55b64bea70b0 <line:4079:1, line:4095:1> line:4079:8 struct k_pipe definition
| |-FullComment 0x55b64bf81f30 <line:4078:4, col:19>
| | `-ParagraphComment 0x55b64bf81f00 <col:4, col:19>
| |   `-TextComment 0x55b64bf81ed0 <col:4, col:19> Text=" Pipe Structure "
| |-FieldDecl 0x55b64bee75d8 <line:4080:2, col:17> col:17 buffer 'unsigned char *'
| | `-FullComment 0x55b64bf82000 <col:38, col:63>
| |   `-ParagraphComment 0x55b64bf81fd0 <col:38, col:63>
| |     `-TextComment 0x55b64bf81fa0 <col:38, col:63> Text=" Pipe buffer: may be NULL "
| |-FieldDecl 0x55b64bee7658 <line:4081:2, col:17> col:17 size 'size_t':'unsigned long'
| | `-FullComment 0x55b64bf820d0 <col:38, col:50>
| |   `-ParagraphComment 0x55b64bf820a0 <col:38, col:50>
| |     `-TextComment 0x55b64bf82070 <col:38, col:50> Text=" Buffer size "
| |-FieldDecl 0x55b64bee76d8 <line:4082:2, col:17> col:17 bytes_used 'size_t':'unsigned long'
| | `-FullComment 0x55b64bf821a0 <col:38, col:61>
| |   `-ParagraphComment 0x55b64bf82170 <col:38, col:61>
| |     `-TextComment 0x55b64bf82140 <col:38, col:61> Text=" # bytes used in buffer "
| |-FieldDecl 0x55b64bee7758 <line:4083:2, col:17> col:17 read_index 'size_t':'unsigned long'
| | `-FullComment 0x55b64bf82270 <col:38, col:67>
| |   `-ParagraphComment 0x55b64bf82240 <col:38, col:67>
| |     `-TextComment 0x55b64bf82210 <col:38, col:67> Text=" Where in buffer to read from "
| |-FieldDecl 0x55b64bee77d8 <line:4084:2, col:17> col:17 write_index 'size_t':'unsigned long'
| | `-FullComment 0x55b64bf82340 <col:38, col:63>
| |   `-ParagraphComment 0x55b64bf82310 <col:38, col:63>
| |     `-TextComment 0x55b64bf822e0 <col:38, col:63> Text=" Where in buffer to write "
| |-FieldDecl 0x55b64bee7868 <line:4085:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x55b64bf82410 <col:31, col:52>
| |   `-ParagraphComment 0x55b64bf823e0 <col:31, col:52>
| |     `-TextComment 0x55b64bf823b0 <col:31, col:52> Text=" Synchronization lock "
| |-RecordDecl 0x55b64bee78d8 <line:4087:2, line:4090:2> line:4087:2 struct definition
| | |-FieldDecl 0x55b64bee7990 <line:4088:3, col:18> col:18 readers '_wait_q_t':'_wait_q_t'
| | | `-FullComment 0x55b64bf824e0 <col:31, col:49>
| | |   `-ParagraphComment 0x55b64bf824b0 <col:31, col:49>
| | |     `-TextComment 0x55b64bf82480 <col:31, col:49> Text=" Reader wait queue "
| | `-FieldDecl 0x55b64bee7a18 <line:4089:3, col:18> col:18 writers '_wait_q_t':'_wait_q_t'
| |   `-FullComment 0x55b64bf825b0 <col:31, col:49>
| |     `-ParagraphComment 0x55b64bf82580 <col:31, col:49>
| |       `-TextComment 0x55b64bf82550 <col:31, col:49> Text=" Writer wait queue "
| |-FieldDecl 0x55b64bee7ae0 <line:4087:2, line:4090:4> col:4 wait_q 'struct (anonymous struct at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)':'struct k_pipe::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)'
| `-FieldDecl 0x55b64bee7b38 <line:4094:2, col:14> col:14 flags 'u8_t':'unsigned char'
|   `-FullComment 0x55b64bf82680 <col:26, col:32>
|     `-ParagraphComment 0x55b64bf82650 <col:26, col:32>
|       `-TextComment 0x55b64bf82620 <col:26, col:32> Text=" Flags "
|-FunctionDecl 0x55b64bee99e0 <line:4158:1, col:73> col:6 k_pipe_init 'void (struct k_pipe *, unsigned char *, size_t)'
| |-ParmVarDecl 0x55b64bee7d50 <col:18, col:33> col:33 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55b64bee7dc8 <col:39, col:54> col:54 buffer 'unsigned char *'
| |-ParmVarDecl 0x55b64bee98b0 <col:62, col:69> col:69 size 'size_t':'unsigned long'
| `-FullComment 0x55b64bf82ce0 <line:4145:3, line:4157:1>
|   |-ParagraphComment 0x55b64bf82720 <line:4145:3>
|   | `-TextComment 0x55b64bf826f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf82740 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x55b64bf827a0 <col:10, col:28>
|   |   `-TextComment 0x55b64bf82770 <col:10, col:28> Text=" Initialize a pipe."
|   |-ParagraphComment 0x55b64bf827f0 <line:4147:3, col:66>
|   | `-TextComment 0x55b64bf827c0 <col:3, col:66> Text=" This routine initializes a pipe object, prior to its first use."
|   |-ParagraphComment 0x55b64bf82840 <line:4149:3>
|   | `-TextComment 0x55b64bf82810 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf82860 <col:4, line:4150:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf82910 <line:4149:15, line:4150:3>
|   |   |-TextComment 0x55b64bf828c0 <line:4149:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x55b64bf828e0 <line:4150:3> Text=" "
|   |-ParamCommandComment 0x55b64bf82930 <col:4, line:4152:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf82a10 <line:4150:17, line:4152:3>
|   |   |-TextComment 0x55b64bf82990 <line:4150:17, col:77> Text=" Address of the pipe's ring buffer, or NULL if no ring buffer"
|   |   |-TextComment 0x55b64bf829b0 <line:4151:3, col:25> Text="               is used."
|   |   `-TextComment 0x55b64bf829d0 <line:4152:3> Text=" "
|   |-ParamCommandComment 0x55b64bf82a30 <col:4, line:4153:30> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf82ae0 <line:4152:15, line:4153:30>
|   |   |-TextComment 0x55b64bf82a90 <line:4152:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   `-TextComment 0x55b64bf82ab0 <line:4153:3, col:30> Text="             buffer is used."
|   |-ParagraphComment 0x55b64bf82b30 <line:4155:3>
|   | `-TextComment 0x55b64bf82b00 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf82b50 <col:4, line:4156:3> Name="return"
|   | `-ParagraphComment 0x55b64bf82bd0 <line:4155:11, line:4156:3>
|   |   |-TextComment 0x55b64bf82b80 <line:4155:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf82ba0 <line:4156:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf82bf0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55b64bf82c60 <line:4157:1>
|     `-TextComment 0x55b64bf82c30 <col:1> Text=" "
|-FunctionDecl 0x55b64bee9bf8 <line:4172:1, col:39> col:5 k_pipe_cleanup 'int (struct k_pipe *)'
| |-ParmVarDecl 0x55b64bee9af0 <col:20, col:35> col:35 pipe 'struct k_pipe *'
| `-FullComment 0x55b64bf831b0 <line:4161:3, line:4171:1>
|   |-ParagraphComment 0x55b64bf82d80 <line:4161:3>
|   | `-TextComment 0x55b64bf82d50 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf82da0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55b64bf82e00 <col:10, col:43>
|   |   `-TextComment 0x55b64bf82dd0 <col:10, col:43> Text=" Release a pipe's allocated buffer"
|   |-ParagraphComment 0x55b64bf82ea0 <line:4163:3, line:4165:46>
|   | |-TextComment 0x55b64bf82e20 <line:4163:3, col:64> Text=" If a pipe object was given a dynamically allocated buffer via"
|   | |-TextComment 0x55b64bf82e40 <line:4164:3, col:69> Text=" k_pipe_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x55b64bf82e60 <line:4165:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x55b64bf82ef0 <line:4167:3>
|   | `-TextComment 0x55b64bf82ec0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf82f10 <col:4, line:4170:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf830c0 <line:4167:15, line:4170:3>
|   |   |-TextComment 0x55b64bf82f70 <line:4167:15, col:35> Text=" Address of the pipe."
|   |   |-TextComment 0x55b64bf82f90 <line:4168:3> Text=" "
|   |   |-InlineCommandComment 0x55b64bf82fb0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55b64bf82fd0 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x55b64bf83000 <line:4169:3> Text=" "
|   |   |-InlineCommandComment 0x55b64bf83020 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55b64bf83040 <col:11, col:37> Text=" -EAGAIN nothing to cleanup"
|   |   `-TextComment 0x55b64bf83060 <line:4170:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf830e0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55b64bf83150 <line:4171:1>
|     `-TextComment 0x55b64bf83120 <col:1> Text=" "
|-FunctionDecl 0x55b64bee9e78 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4190:65> col:15 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x55b64bee9cf0 <col:33, col:48> col:48 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55b64bee9d60 <col:54, col:61> col:61 size 'size_t':'unsigned long'
| `-FullComment 0x55b64bf837d0 <line:4175:3, line:4189:1>
|   |-ParagraphComment 0x55b64bf83250 <line:4175:3>
|   | `-TextComment 0x55b64bf83220 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf83270 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x55b64bf832d0 <col:10, col:56>
|   |   `-TextComment 0x55b64bf832a0 <col:10, col:56> Text=" Initialize a pipe and allocate a buffer for it"
|   |-ParagraphComment 0x55b64bf83370 <line:4177:3, line:4179:74>
|   | |-TextComment 0x55b64bf832f0 <line:4177:3, col:76> Text=" Storage for the buffer region will be allocated from the calling thread's"
|   | |-TextComment 0x55b64bf83310 <line:4178:3, col:77> Text=" resource pool. This memory will be released if k_pipe_cleanup() is called,"
|   | `-TextComment 0x55b64bf83330 <line:4179:3, col:74> Text=" or userspace is enabled and the pipe object loses all references to it."
|   |-ParagraphComment 0x55b64bf833c0 <line:4181:3, col:69>
|   | `-TextComment 0x55b64bf83390 <col:3, col:69> Text=" This function should only be called on uninitialized pipe objects."
|   |-ParagraphComment 0x55b64bf83410 <line:4183:3>
|   | `-TextComment 0x55b64bf833e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf83430 <col:4, line:4184:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf834e0 <line:4183:15, line:4184:3>
|   |   |-TextComment 0x55b64bf83490 <line:4183:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x55b64bf834b0 <line:4184:3> Text=" "
|   |-ParamCommandComment 0x55b64bf83500 <col:4, line:4188:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf836d0 <line:4184:15, line:4188:3>
|   |   |-TextComment 0x55b64bf83560 <line:4184:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   |-TextComment 0x55b64bf83580 <line:4185:3, col:30> Text="             buffer is used."
|   |   |-TextComment 0x55b64bf835a0 <line:4186:3> Text=" "
|   |   |-InlineCommandComment 0x55b64bf835c0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55b64bf835e0 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x55b64bf83600 <line:4187:3> Text=" "
|   |   |-InlineCommandComment 0x55b64bf83620 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55b64bf83640 <col:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x55b64bf83660 <line:4188:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf836f0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55b64bf83760 <line:4189:1>
|     `-TextComment 0x55b64bf83730 <col:1> Text=" "
|-FunctionDecl 0x55b64beea368 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4214:35> line:4212:15 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x55b64bee9f80 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55b64bee9ff8 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x55b64beea068 <line:4213:5, col:12> col:12 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64beea108 <col:28, col:36> col:36 bytes_written 'size_t *'
| |-ParmVarDecl 0x55b64beea178 <line:4214:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64beea1e8 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x55b64bf84340 <line:4193:3, line:4211:1>
|   |-ParagraphComment 0x55b64bf83870 <line:4193:3>
|   | `-TextComment 0x55b64bf83840 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf83890 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x55b64bf838f0 <col:10, col:31>
|   |   `-TextComment 0x55b64bf838c0 <col:10, col:31> Text=" Write data to a pipe."
|   |-ParagraphComment 0x55b64bf83a10 <line:4195:3, col:66>
|   | |-TextComment 0x55b64bf83910 <col:3, col:29> Text=" This routine writes up to "
|   | |-InlineCommandComment 0x55b64bf83960 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bytes_to_write"
|   | |-TextComment 0x55b64bf83980 <col:47, col:64> Text=" bytes of data to "
|   | `-InlineCommandComment 0x55b64bf839d0 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x55b64bf83a60 <line:4197:3>
|   | `-TextComment 0x55b64bf83a30 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf83a80 <col:4, line:4198:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf83b30 <line:4197:15, line:4198:3>
|   |   |-TextComment 0x55b64bf83ae0 <line:4197:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x55b64bf83b00 <line:4198:3> Text=" "
|   |-ParamCommandComment 0x55b64bf83b50 <col:4, line:4199:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf83c00 <line:4198:15, line:4199:3>
|   |   |-TextComment 0x55b64bf83bb0 <line:4198:15, col:40> Text=" Address of data to write."
|   |   `-TextComment 0x55b64bf83bd0 <line:4199:3> Text=" "
|   |-ParamCommandComment 0x55b64bf83c20 <col:4, line:4200:3> [in] implicitly Param="bytes_to_write" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf83cd0 <line:4199:25, line:4200:3>
|   |   |-TextComment 0x55b64bf83c80 <line:4199:25, col:49> Text=" Size of data (in bytes)."
|   |   `-TextComment 0x55b64bf83ca0 <line:4200:3> Text=" "
|   |-ParamCommandComment 0x55b64bf83cf0 <col:4, line:4201:3> [in] implicitly Param="bytes_written" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf83da0 <line:4200:24, line:4201:3>
|   |   |-TextComment 0x55b64bf83d50 <line:4200:24, col:76> Text=" Address of area to hold the number of bytes written."
|   |   `-TextComment 0x55b64bf83d70 <line:4201:3> Text=" "
|   |-ParamCommandComment 0x55b64bf83dc0 <col:4, line:4202:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x55b64bf83e70 <line:4201:19, line:4202:3>
|   |   |-TextComment 0x55b64bf83e20 <line:4201:19, col:52> Text=" Minimum number of bytes to write."
|   |   `-TextComment 0x55b64bf83e40 <line:4202:3> Text=" "
|   |-ParamCommandComment 0x55b64bf83e90 <col:4, line:4204:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x55b64bf83f70 <line:4202:18, line:4204:32>
|   |   |-TextComment 0x55b64bf83ef0 <line:4202:18, col:80> Text=" Non-negative waiting period to wait for the data to be written"
|   |   |-TextComment 0x55b64bf83f10 <line:4203:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x55b64bf83f30 <line:4204:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x55b64bf84220 <line:4206:3, line:4210:3>
|   | |-TextComment 0x55b64bf83f90 <line:4206:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf83fb0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf83fd0 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x55b64bf84020 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x55b64bf84040 <col:34, col:61> Text=" bytes of data were written."
|   | |-TextComment 0x55b64bf84060 <line:4207:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf84080 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf840a0 <col:11, col:71> Text=" -EIO Returned without waiting; zero data bytes were written."
|   | |-TextComment 0x55b64bf840c0 <line:4208:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf840e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf84100 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x55b64bf84150 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x55b64bf84170 <line:4209:3, col:53> Text="                 minus one data bytes were written."
|   | `-TextComment 0x55b64bf84190 <line:4210:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf84240 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55b64bf842b0 <line:4211:1>
|     `-TextComment 0x55b64bf84280 <col:1> Text=" "
|-FunctionDecl 0x55b64beea780 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4239:35> line:4237:15 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x55b64beea490 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55b64beea508 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x55b64beea578 <line:4238:5, col:12> col:12 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64beea5e8 <col:27, col:35> col:35 bytes_read 'size_t *'
| |-ParmVarDecl 0x55b64beea658 <line:4239:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64beea6c8 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x55b64bf84f30 <line:4217:3, line:4236:1>
|   |-ParagraphComment 0x55b64bf843e0 <line:4217:3>
|   | `-TextComment 0x55b64bf843b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf84400 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x55b64bf84460 <col:10, col:32>
|   |   `-TextComment 0x55b64bf84430 <col:10, col:32> Text=" Read data from a pipe."
|   |-ParagraphComment 0x55b64bf84580 <line:4219:3, col:66>
|   | |-TextComment 0x55b64bf84480 <col:3, col:28> Text=" This routine reads up to "
|   | |-InlineCommandComment 0x55b64bf844d0 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="bytes_to_read"
|   | |-TextComment 0x55b64bf844f0 <col:45, col:64> Text=" bytes of data from "
|   | `-InlineCommandComment 0x55b64bf84540 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x55b64bf845d0 <line:4221:3>
|   | `-TextComment 0x55b64bf845a0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf845f0 <col:4, line:4222:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf846a0 <line:4221:15, line:4222:3>
|   |   |-TextComment 0x55b64bf84650 <line:4221:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x55b64bf84670 <line:4222:3> Text=" "
|   |-ParamCommandComment 0x55b64bf846c0 <col:4, line:4223:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf84770 <line:4222:15, line:4223:3>
|   |   |-TextComment 0x55b64bf84720 <line:4222:15, col:56> Text=" Address to place the data read from pipe."
|   |   `-TextComment 0x55b64bf84740 <line:4223:3> Text=" "
|   |-ParamCommandComment 0x55b64bf84790 <col:4, line:4224:3> [in] implicitly Param="bytes_to_read" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf84840 <line:4223:24, line:4224:3>
|   |   |-TextComment 0x55b64bf847f0 <line:4223:24, col:61> Text=" Maximum number of data bytes to read."
|   |   `-TextComment 0x55b64bf84810 <line:4224:3> Text=" "
|   |-ParamCommandComment 0x55b64bf84860 <col:4, line:4225:3> [in] implicitly Param="bytes_read" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf84910 <line:4224:21, line:4225:3>
|   |   |-TextComment 0x55b64bf848c0 <line:4224:21, col:70> Text=" Address of area to hold the number of bytes read."
|   |   `-TextComment 0x55b64bf848e0 <line:4225:3> Text=" "
|   |-ParamCommandComment 0x55b64bf84930 <col:4, line:4226:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x55b64bf849e0 <line:4225:19, line:4226:3>
|   |   |-TextComment 0x55b64bf84990 <line:4225:19, col:56> Text=" Minimum number of data bytes to read."
|   |   `-TextComment 0x55b64bf849b0 <line:4226:3> Text=" "
|   |-ParamCommandComment 0x55b64bf84a00 <col:4, line:4228:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x55b64bf84ae0 <line:4226:18, line:4228:32>
|   |   |-TextComment 0x55b64bf84a60 <line:4226:18, col:77> Text=" Non-negative waiting period to wait for the data to be read"
|   |   |-TextComment 0x55b64bf84a80 <line:4227:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x55b64bf84aa0 <line:4228:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x55b64bf84e10 <line:4230:3, line:4235:3>
|   | |-TextComment 0x55b64bf84b00 <line:4230:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf84b20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf84b40 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x55b64bf84b90 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x55b64bf84bb0 <col:34, col:58> Text=" bytes of data were read."
|   | |-TextComment 0x55b64bf84bd0 <line:4231:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf84bf0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf84c10 <col:11, col:46> Text=" -EINVAL invalid parameters supplied"
|   | |-TextComment 0x55b64bf84c30 <line:4232:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf84c50 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf84c70 <col:11, col:68> Text=" -EIO Returned without waiting; zero data bytes were read."
|   | |-TextComment 0x55b64bf84c90 <line:4233:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf84cb0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf84cd0 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x55b64bf84d20 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x55b64bf84d40 <line:4234:3, col:50> Text="                 minus one data bytes were read."
|   | `-TextComment 0x55b64bf84d60 <line:4235:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf84e30 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55b64bf84ea0 <line:4236:1>
|     `-TextComment 0x55b64bf84e70 <col:1> Text=" "
|-FunctionDecl 0x55b64beeab80 <line:4256:1, line:4257:39> line:4256:13 k_pipe_block_put 'void (struct k_pipe *, struct k_mem_block *, size_t, struct k_sem *)' extern
| |-ParmVarDecl 0x55b64beea8c0 <col:30, col:45> col:45 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55b64beea948 <col:51, col:71> col:71 block 'struct k_mem_block *'
| |-ParmVarDecl 0x55b64beea9b8 <line:4257:9, col:16> col:16 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64beeaa40 <col:22, col:36> col:36 sem 'struct k_sem *'
| `-FullComment 0x55b64bf857d0 <line:4242:3, line:4255:1>
|   |-ParagraphComment 0x55b64bf84fd0 <line:4242:3>
|   | `-TextComment 0x55b64bf84fa0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf85010 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x55b64bf85070 <col:10, col:39>
|   |   `-TextComment 0x55b64bf85040 <col:10, col:39> Text=" Write memory block to a pipe."
|   |-ParagraphComment 0x55b64bf85260 <line:4244:3, line:4246:79>
|   | |-TextComment 0x55b64bf85090 <line:4244:3, col:63> Text=" This routine writes the data contained in a memory block to "
|   | |-InlineCommandComment 0x55b64bf850e0 <col:64, col:65> Name="a" RenderEmphasized Arg[0]="pipe."
|   | |-TextComment 0x55b64bf85100 <line:4245:3, col:74> Text=" Once all of the data in the block has been written to the pipe, it will"
|   | |-TextComment 0x55b64bf85120 <line:4246:3, col:25> Text=" free the memory block "
|   | |-InlineCommandComment 0x55b64bf85170 <col:26, col:27> Name="a" RenderEmphasized Arg[0]="block"
|   | |-TextComment 0x55b64bf85190 <col:34, col:57> Text=" and give the semaphore "
|   | |-InlineCommandComment 0x55b64bf851e0 <col:58, col:59> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x55b64bf85200 <col:64, col:79> Text=" (if specified)."
|   |-ParagraphComment 0x55b64bf852b0 <line:4248:3>
|   | `-TextComment 0x55b64bf85280 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf852d0 <col:4, line:4249:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf85380 <line:4248:15, line:4249:3>
|   |   |-TextComment 0x55b64bf85330 <line:4248:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x55b64bf85350 <line:4249:3> Text=" "
|   |-ParamCommandComment 0x55b64bf853a0 <col:4, line:4250:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf85450 <line:4249:16, line:4250:3>
|   |   |-TextComment 0x55b64bf85400 <line:4249:16, col:52> Text=" Memory block containing data to send"
|   |   `-TextComment 0x55b64bf85420 <line:4250:3> Text=" "
|   |-ParamCommandComment 0x55b64bf85470 <col:4, line:4251:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf85520 <line:4250:15, line:4251:3>
|   |   |-TextComment 0x55b64bf854d0 <line:4250:15, col:59> Text=" Number of data bytes in memory block to send"
|   |   `-TextComment 0x55b64bf854f0 <line:4251:3> Text=" "
|   |-ParamCommandComment 0x55b64bf85540 <col:4, col:61> [in] implicitly Param="sem" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf855d0 <col:14, col:61>
|   |   `-TextComment 0x55b64bf855a0 <col:14, col:61> Text=" Semaphore to signal upon completion (else NULL)"
|   |-ParagraphComment 0x55b64bf85620 <line:4253:3>
|   | `-TextComment 0x55b64bf855f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf85640 <col:4, line:4254:3> Name="return"
|   | `-ParagraphComment 0x55b64bf856c0 <line:4253:11, line:4254:3>
|   |   |-TextComment 0x55b64bf85670 <line:4253:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf85690 <line:4254:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf856e0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55b64bf85750 <line:4255:1>
|     `-TextComment 0x55b64bf85720 <col:1> Text=" "
|-RecordDecl 0x55b64beeac98 prev 0x55b64bea7420 <line:4265:1, line:4275:1> line:4265:8 struct k_mem_slab definition
| |-FullComment 0x55b64bf858f0 <line:4262:3, col:24>
| | `-ParagraphComment 0x55b64bf858c0 <col:3, col:24>
| |   |-TextComment 0x55b64bf85840 <col:3> Text=" "
| |   |-InlineCommandComment 0x55b64bf85860 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55b64bf85880 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55b64beead30 <line:4266:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x55b64beead88 <line:4267:2, col:8> col:8 referenced num_blocks 'u32_t':'unsigned int'
| |-FieldDecl 0x55b64beeade0 <line:4268:2, col:9> col:9 block_size 'size_t':'unsigned long'
| |-FieldDecl 0x55b64beeae40 <line:4269:2, col:8> col:8 buffer 'char *'
| |-FieldDecl 0x55b64beeaea0 <line:4270:2, col:8> col:8 free_list 'char *'
| `-FieldDecl 0x55b64beeaef8 <line:4271:2, col:8> col:8 referenced num_used 'u32_t':'unsigned int'
|-FunctionDecl 0x55b64beeb358 <line:4351:1, line:4352:42> line:4351:12 k_mem_slab_init 'int (struct k_mem_slab *, void *, size_t, u32_t)' extern
| |-ParmVarDecl 0x55b64beeb0b0 <col:28, col:47> col:47 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x55b64beeb128 <col:53, col:59> col:59 buffer 'void *'
| |-ParmVarDecl 0x55b64beeb198 <line:4352:7, col:14> col:14 block_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64beeb208 <col:26, col:32> col:32 num_blocks 'u32_t':'unsigned int'
| `-FullComment 0x55b64bf862e0 <line:4330:3, line:4350:1>
|   |-ParagraphComment 0x55b64bf85990 <line:4330:3>
|   | `-TextComment 0x55b64bf85960 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf859b0 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x55b64bf85a10 <col:10, col:35>
|   |   `-TextComment 0x55b64bf859e0 <col:10, col:35> Text=" Initialize a memory slab."
|   |-ParagraphComment 0x55b64bf85a60 <line:4332:3, col:53>
|   | `-TextComment 0x55b64bf85a30 <col:3, col:53> Text=" Initializes a memory slab, prior to its first use."
|   |-ParagraphComment 0x55b64bf85cf0 <line:4334:3, line:4339:51>
|   | |-TextComment 0x55b64bf85a80 <line:4334:3, col:37> Text=" The memory slab's buffer contains "
|   | |-InlineCommandComment 0x55b64bf85ad0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="slab_num_blocks"
|   | |-TextComment 0x55b64bf85af0 <col:56, col:69> Text=" memory blocks"
|   | |-TextComment 0x55b64bf85b10 <line:4335:3, col:12> Text=" that are "
|   | |-InlineCommandComment 0x55b64bf85b60 <col:13, col:14> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | |-TextComment 0x55b64bf85b80 <col:31, col:75> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x55b64bf85ba0 <line:4336:3, col:68> Text=" N-byte boundary matching a word boundary, where N is a power of 2"
|   | |-TextComment 0x55b64bf85bc0 <line:4337:3, col:42> Text=" (i.e. 4 on 32-bit systems, 8, 16, ...)."
|   | |-TextComment 0x55b64bf85be0 <line:4338:3, col:74> Text=" To ensure that each memory block is similarly aligned to this boundary,"
|   | |-TextComment 0x55b64bf85c00 <line:4339:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf85c50 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | `-TextComment 0x55b64bf85c70 <col:22, col:51> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x55b64bf85d40 <line:4341:3>
|   | `-TextComment 0x55b64bf85d10 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf85d60 <col:4, line:4342:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf85e10 <line:4341:15, line:4342:3>
|   |   |-TextComment 0x55b64bf85dc0 <line:4341:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x55b64bf85de0 <line:4342:3> Text=" "
|   |-ParamCommandComment 0x55b64bf85e30 <col:4, line:4343:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf85ee0 <line:4342:17, line:4343:3>
|   |   |-TextComment 0x55b64bf85e90 <line:4342:17, col:62> Text=" Pointer to buffer used for the memory blocks."
|   |   `-TextComment 0x55b64bf85eb0 <line:4343:3> Text=" "
|   |-ParamCommandComment 0x55b64bf85f00 <col:4, line:4344:3> [in] implicitly Param="block_size" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf85fb0 <line:4343:21, line:4344:3>
|   |   |-TextComment 0x55b64bf85f60 <line:4343:21, col:58> Text=" Size of each memory block (in bytes)."
|   |   `-TextComment 0x55b64bf85f80 <line:4344:3> Text=" "
|   |-ParamCommandComment 0x55b64bf85fd0 <col:4, col:45> [in] implicitly Param="num_blocks" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf86060 <col:21, col:45>
|   |   `-TextComment 0x55b64bf86030 <col:21, col:45> Text=" Number of memory blocks."
|   |-ParagraphComment 0x55b64bf86170 <line:4346:3, line:4347:40>
|   | |-TextComment 0x55b64bf86080 <line:4346:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf860a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf860c0 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x55b64bf860e0 <line:4347:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf86100 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55b64bf86120 <col:11, col:40> Text=" -EINVAL invalid data supplied"
|   |-ParagraphComment 0x55b64bf861c0 <line:4349:3>
|   | `-TextComment 0x55b64bf86190 <col:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf861e0 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x55b64bf86250 <line:4350:1>
|     `-TextComment 0x55b64bf86220 <col:1> Text=" "
|-FunctionDecl 0x55b64beeb698 <line:4372:1, line:4373:21> line:4372:12 k_mem_slab_alloc 'int (struct k_mem_slab *, void **, s32_t)' extern
| |-ParmVarDecl 0x55b64beeb470 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x55b64beeb4e8 <col:54, col:61> col:61 mem 'void **'
| |-ParmVarDecl 0x55b64beeb558 <line:4373:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x55b64bf86af0 <line:4355:3, line:4371:1>
|   |-ParagraphComment 0x55b64bf86380 <line:4355:3>
|   | `-TextComment 0x55b64bf86350 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf863a0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x55b64bf86400 <col:10, col:45>
|   |   `-TextComment 0x55b64bf863d0 <col:10, col:45> Text=" Allocate memory from a memory slab."
|   |-ParagraphComment 0x55b64bf86450 <line:4357:3, col:60>
|   | `-TextComment 0x55b64bf86420 <col:3, col:60> Text=" This routine allocates a memory block from a memory slab."
|   |-ParagraphComment 0x55b64bf864a0 <line:4359:3>
|   | `-TextComment 0x55b64bf86470 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf864c0 <col:4, line:4360:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf86570 <line:4359:15, line:4360:3>
|   |   |-TextComment 0x55b64bf86520 <line:4359:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x55b64bf86540 <line:4360:3> Text=" "
|   |-ParamCommandComment 0x55b64bf86590 <col:4, line:4361:3> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf86640 <line:4360:14, line:4361:3>
|   |   |-TextComment 0x55b64bf865f0 <line:4360:14, col:44> Text=" Pointer to block address area."
|   |   `-TextComment 0x55b64bf86610 <line:4361:3> Text=" "
|   |-ParamCommandComment 0x55b64bf86660 <col:4, line:4363:52> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf86740 <line:4361:18, line:4363:52>
|   |   |-TextComment 0x55b64bf866c0 <line:4361:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x55b64bf866e0 <line:4362:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x55b64bf86700 <line:4363:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x55b64bf869f0 <line:4365:3, line:4370:3>
|   | |-TextComment 0x55b64bf86760 <line:4365:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf86780 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf867a0 <col:11, col:68> Text=" 0 Memory allocated. The block address area pointed at by "
|   | |-InlineCommandComment 0x55b64bf867f0 <col:69, col:70> Name="a" RenderEmphasized Arg[0]="mem"
|   | |-TextComment 0x55b64bf86810 <line:4366:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x55b64bf86830 <line:4367:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf86850 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf86870 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x55b64bf86890 <line:4368:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf868b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf868d0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x55b64bf868f0 <line:4369:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf86910 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf86930 <col:11, col:40> Text=" -EINVAL Invalid data supplied"
|   | `-TextComment 0x55b64bf86950 <line:4370:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf86a10 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x55b64bf86a80 <line:4371:1>
|     `-TextComment 0x55b64bf86a50 <col:1> Text=" "
|-FunctionDecl 0x55b64beec6a0 <line:4387:1, col:64> col:13 k_mem_slab_free 'void (struct k_mem_slab *, void **)' extern
| |-ParmVarDecl 0x55b64beeb7a0 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x55b64beeb818 <col:54, col:61> col:61 mem 'void **'
| `-FullComment 0x55b64bf87070 <line:4376:3, line:4386:1>
|   |-ParagraphComment 0x55b64bf86b90 <line:4376:3>
|   | `-TextComment 0x55b64bf86b60 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf86bb0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55b64bf86c10 <col:10, col:51>
|   |   `-TextComment 0x55b64bf86be0 <col:10, col:51> Text=" Free memory allocated from a memory slab."
|   |-ParagraphComment 0x55b64bf86c80 <line:4378:3, line:4379:26>
|   | |-TextComment 0x55b64bf86c30 <line:4378:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x55b64bf86c50 <line:4379:3, col:26> Text=" associated memory slab."
|   |-ParagraphComment 0x55b64bf86cd0 <line:4381:3>
|   | `-TextComment 0x55b64bf86ca0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf86cf0 <col:4, line:4382:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf86da0 <line:4381:15, line:4382:3>
|   |   |-TextComment 0x55b64bf86d50 <line:4381:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x55b64bf86d70 <line:4382:3> Text=" "
|   |-ParamCommandComment 0x55b64bf86dc0 <col:4, col:75> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf86e50 <col:14, col:75>
|   |   `-TextComment 0x55b64bf86e20 <col:14, col:75> Text=" Pointer to block address area (as set by k_mem_slab_alloc())."
|   |-ParagraphComment 0x55b64bf86ea0 <line:4384:3>
|   | `-TextComment 0x55b64bf86e70 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf86ec0 <col:4, line:4385:3> Name="return"
|   | `-ParagraphComment 0x55b64bf86f40 <line:4384:11, line:4385:3>
|   |   |-TextComment 0x55b64bf86ef0 <line:4384:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf86f10 <line:4385:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf86f60 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x55b64bf86fd0 <line:4386:1>
|     `-TextComment 0x55b64bf86fa0 <col:1> Text=" "
|-FunctionDecl 0x55b64beec8a0 <line:4400:1, line:4403:1> line:4400:21 k_mem_slab_num_used_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x55b64beec7a0 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x55b64beeca18 <line:4401:1, line:4403:1>
| | `-ReturnStmt 0x55b64beec9d8 <line:4402:2, col:15>
| |   `-ImplicitCastExpr 0x55b64beec9c0 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x55b64beec988 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_used 0x55b64beeaef8
| |       `-ImplicitCastExpr 0x55b64beec970 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |         `-DeclRefExpr 0x55b64beec948 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x55b64beec7a0 'slab' 'struct k_mem_slab *'
| `-FullComment 0x55b64bf87550 <line:4390:3, line:4399:1>
|   |-ParagraphComment 0x55b64bf87110 <line:4390:3>
|   | `-TextComment 0x55b64bf870e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf87130 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x55b64bf87190 <col:10, col:57>
|   |   `-TextComment 0x55b64bf87160 <col:10, col:57> Text=" Get the number of used blocks in a memory slab."
|   |-ParagraphComment 0x55b64bf87260 <line:4392:3, line:4393:18>
|   | |-TextComment 0x55b64bf871b0 <line:4392:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x55b64bf871d0 <line:4393:3, col:16> Text=" allocated in "
|   | `-InlineCommandComment 0x55b64bf87220 <col:17, col:18> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x55b64bf872b0 <line:4395:3>
|   | `-TextComment 0x55b64bf87280 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf872d0 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf87360 <col:15, col:42>
|   |   `-TextComment 0x55b64bf87330 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x55b64bf873b0 <line:4397:3>
|   | `-TextComment 0x55b64bf87380 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf873d0 <col:4, line:4398:3> Name="return"
|   | `-ParagraphComment 0x55b64bf87450 <line:4397:11, line:4398:3>
|   |   |-TextComment 0x55b64bf87400 <line:4397:11, col:45> Text=" Number of allocated memory blocks."
|   |   `-TextComment 0x55b64bf87420 <line:4398:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf87470 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x55b64bf874e0 <line:4399:1>
|     `-TextComment 0x55b64bf874b0 <col:1> Text=" "
|-FunctionDecl 0x55b64beecae0 <line:4416:1, line:4419:1> line:4416:21 k_mem_slab_num_free_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x55b64beeca58 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x55b64beecd48 <line:4417:1, line:4419:1>
| | `-ReturnStmt 0x55b64beeccd0 <line:4418:2, col:34>
| |   `-BinaryOperator 0x55b64beecca8 <col:9, col:34> 'unsigned int' '-'
| |     |-ImplicitCastExpr 0x55b64beecc78 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     | `-MemberExpr 0x55b64beecbc8 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_blocks 0x55b64beead88
| |     |   `-ImplicitCastExpr 0x55b64beecbb0 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x55b64beecb88 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x55b64beeca58 'slab' 'struct k_mem_slab *'
| |     `-ImplicitCastExpr 0x55b64beecc90 <col:28, col:34> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-MemberExpr 0x55b64beecc40 <col:28, col:34> 'u32_t':'unsigned int' lvalue ->num_used 0x55b64beeaef8
| |         `-ImplicitCastExpr 0x55b64beecc28 <col:28> 'struct k_mem_slab *' <LValueToRValue>
| |           `-DeclRefExpr 0x55b64beecc00 <col:28> 'struct k_mem_slab *' lvalue ParmVar 0x55b64beeca58 'slab' 'struct k_mem_slab *'
| `-FullComment 0x55b64bf87a30 <line:4406:3, line:4415:1>
|   |-ParagraphComment 0x55b64bf875f0 <line:4406:3>
|   | `-TextComment 0x55b64bf875c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf87610 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55b64bf87670 <col:10, col:59>
|   |   `-TextComment 0x55b64bf87640 <col:10, col:59> Text=" Get the number of unused blocks in a memory slab."
|   |-ParagraphComment 0x55b64bf87740 <line:4408:3, line:4409:20>
|   | |-TextComment 0x55b64bf87690 <line:4408:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x55b64bf876b0 <line:4409:3, col:18> Text=" unallocated in "
|   | `-InlineCommandComment 0x55b64bf87700 <col:19, col:20> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x55b64bf87790 <line:4411:3>
|   | `-TextComment 0x55b64bf87760 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf877b0 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf87840 <col:15, col:42>
|   |   `-TextComment 0x55b64bf87810 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x55b64bf87890 <line:4413:3>
|   | `-TextComment 0x55b64bf87860 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf878b0 <col:4, line:4414:3> Name="return"
|   | `-ParagraphComment 0x55b64bf87930 <line:4413:11, line:4414:3>
|   |   |-TextComment 0x55b64bf878e0 <line:4413:11, col:47> Text=" Number of unallocated memory blocks."
|   |   `-TextComment 0x55b64bf87900 <line:4414:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf87950 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x55b64bf879c0 <line:4415:1>
|     `-TextComment 0x55b64bf87990 <col:1> Text=" "
|-RecordDecl 0x55b64beecd60 prev 0x55b64bea74d0 <line:4427:1, line:4430:1> line:4427:8 struct k_mem_pool definition
| |-FullComment 0x55b64bf87b50 <line:4424:3, col:24>
| | `-ParagraphComment 0x55b64bf87b20 <col:3, col:24>
| |   |-TextComment 0x55b64bf87aa0 <col:3> Text=" "
| |   |-InlineCommandComment 0x55b64bf87ac0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55b64bf87ae0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55b64beece08 <line:4428:2, col:27> col:27 base 'struct sys_mem_pool_base':'struct sys_mem_pool_base'
| `-FieldDecl 0x55b64beece60 <line:4429:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x55b64beed2b8 <line:4495:1, line:4496:34> line:4495:12 k_mem_pool_alloc 'int (struct k_mem_pool *, struct k_mem_block *, size_t, s32_t)' extern
| |-ParmVarDecl 0x55b64beed000 <col:29, col:48> col:48 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x55b64beed088 <col:54, col:74> col:74 block 'struct k_mem_block *'
| |-ParmVarDecl 0x55b64beed0f8 <line:4496:8, col:15> col:15 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64beed168 <col:21, col:27> col:27 timeout 's32_t':'int'
| `-FullComment 0x55b64bf883f0 <line:4478:3, line:4494:1>
|   |-ParagraphComment 0x55b64bf87bf0 <line:4478:3>
|   | `-TextComment 0x55b64bf87bc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf87c10 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x55b64bf87c70 <col:10, col:45>
|   |   `-TextComment 0x55b64bf87c40 <col:10, col:45> Text=" Allocate memory from a memory pool."
|   |-ParagraphComment 0x55b64bf87cc0 <line:4480:3, col:60>
|   | `-TextComment 0x55b64bf87c90 <col:3, col:60> Text=" This routine allocates a memory block from a memory pool."
|   |-ParagraphComment 0x55b64bf87d10 <line:4482:3>
|   | `-TextComment 0x55b64bf87ce0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf87d30 <col:4, line:4483:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf87de0 <line:4482:15, line:4483:3>
|   |   |-TextComment 0x55b64bf87d90 <line:4482:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x55b64bf87db0 <line:4483:3> Text=" "
|   |-ParamCommandComment 0x55b64bf87e00 <col:4, line:4484:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf87eb0 <line:4483:16, line:4484:3>
|   |   |-TextComment 0x55b64bf87e60 <line:4483:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |   `-TextComment 0x55b64bf87e80 <line:4484:3> Text=" "
|   |-ParamCommandComment 0x55b64bf87ed0 <col:4, line:4485:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf87f80 <line:4484:15, line:4485:3>
|   |   |-TextComment 0x55b64bf87f30 <line:4484:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x55b64bf87f50 <line:4485:3> Text=" "
|   |-ParamCommandComment 0x55b64bf87fa0 <col:4, line:4487:52> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf88080 <line:4485:18, line:4487:52>
|   |   |-TextComment 0x55b64bf88000 <line:4485:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x55b64bf88020 <line:4486:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x55b64bf88040 <line:4487:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x55b64bf882e0 <line:4489:3, line:4493:3>
|   | |-TextComment 0x55b64bf880a0 <line:4489:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf880c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf880e0 <col:11, col:35> Text=" 0 Memory allocated. The "
|   | |-InlineCommandComment 0x55b64bf88130 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x55b64bf88150 <col:43, col:72> Text=" field of the block descriptor"
|   | |-TextComment 0x55b64bf88170 <line:4490:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x55b64bf88190 <line:4491:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf881b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf881d0 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x55b64bf881f0 <line:4492:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf88210 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf88230 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55b64bf88250 <line:4493:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf88300 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x55b64bf88370 <line:4494:1>
|     `-TextComment 0x55b64bf88340 <col:1> Text=" "
|-FunctionDecl 0x55b64beed558 <line:4508:1, col:68> col:14 k_mem_pool_malloc 'void *(struct k_mem_pool *, size_t)' extern
| |-ParmVarDecl 0x55b64beed3d0 <col:32, col:51> col:51 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x55b64beed440 <col:57, col:64> col:64 size 'size_t':'unsigned long'
| `-FullComment 0x55b64bf888f0 <line:4499:3, line:4507:1>
|   |-ParagraphComment 0x55b64bf88490 <line:4499:3>
|   | `-TextComment 0x55b64bf88460 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf884b0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x55b64bf88510 <col:10, col:68>
|   |   `-TextComment 0x55b64bf884e0 <col:10, col:68> Text=" Allocate memory from a memory pool with malloc() semantics"
|   |-ParagraphComment 0x55b64bf88560 <line:4501:3, col:47>
|   | `-TextComment 0x55b64bf88530 <col:3, col:47> Text=" Such memory must be released using k_free()."
|   |-ParagraphComment 0x55b64bf885b0 <line:4503:3>
|   | `-TextComment 0x55b64bf88580 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf885d0 <col:4, line:4504:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf88680 <line:4503:15, line:4504:3>
|   |   |-TextComment 0x55b64bf88630 <line:4503:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x55b64bf88650 <line:4504:3> Text=" "
|   |-ParamCommandComment 0x55b64bf886a0 <col:4, line:4505:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf88750 <line:4504:15, line:4505:3>
|   |   |-TextComment 0x55b64bf88700 <line:4504:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x55b64bf88720 <line:4505:3> Text=" "
|   |-BlockCommandComment 0x55b64bf88770 <col:4, line:4506:3> Name="return"
|   | `-ParagraphComment 0x55b64bf887f0 <line:4505:11, line:4506:3>
|   |   |-TextComment 0x55b64bf887a0 <line:4505:11, col:72> Text=" Address of the allocated memory if successful, otherwise NULL"
|   |   `-TextComment 0x55b64bf887c0 <line:4506:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf88810 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x55b64bf88880 <line:4507:1>
|     `-TextComment 0x55b64bf88850 <col:1> Text=" "
|-FunctionDecl 0x55b64beee970 <line:4521:1, col:54> col:13 k_mem_pool_free 'void (struct k_mem_block *)' extern
| |-ParmVarDecl 0x55b64beee870 <col:29, col:49> col:49 block 'struct k_mem_block *'
| `-FullComment 0x55b64bf88d70 <line:4511:3, line:4520:1>
|   |-ParagraphComment 0x55b64bf88990 <line:4511:3>
|   | `-TextComment 0x55b64bf88960 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf889b0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55b64bf88a10 <col:10, col:51>
|   |   `-TextComment 0x55b64bf889e0 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x55b64bf88a80 <line:4513:3, line:4514:15>
|   | |-TextComment 0x55b64bf88a30 <line:4513:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x55b64bf88a50 <line:4514:3, col:15> Text=" memory pool."
|   |-ParagraphComment 0x55b64bf88ad0 <line:4516:3>
|   | `-TextComment 0x55b64bf88aa0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf88af0 <col:4, col:69> [in] implicitly Param="block" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf88b80 <col:16, col:69>
|   |   `-TextComment 0x55b64bf88b50 <col:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |-ParagraphComment 0x55b64bf88bd0 <line:4518:3>
|   | `-TextComment 0x55b64bf88ba0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf88bf0 <col:4, line:4519:3> Name="return"
|   | `-ParagraphComment 0x55b64bf88c70 <line:4518:11, line:4519:3>
|   |   |-TextComment 0x55b64bf88c20 <line:4518:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf88c40 <line:4519:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf88c90 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x55b64bf88d00 <line:4520:1>
|     `-TextComment 0x55b64bf88cd0 <col:1> Text=" "
|-FunctionDecl 0x55b64beeebd0 <line:4534:1, col:57> col:13 k_mem_pool_free_id 'void (struct k_mem_block_id *)' extern
| |-ParmVarDecl 0x55b64beeead0 <col:32, col:55> col:55 id 'struct k_mem_block_id *'
| `-FullComment 0x55b64bf89200 <line:4524:3, line:4533:1>
|   |-ParagraphComment 0x55b64bf88e10 <line:4524:3>
|   | `-TextComment 0x55b64bf88de0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf88e30 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55b64bf88e90 <col:10, col:51>
|   |   `-TextComment 0x55b64bf88e60 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x55b64bf88f00 <line:4526:3, line:4527:14>
|   | |-TextComment 0x55b64bf88eb0 <line:4526:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x55b64bf88ed0 <line:4527:3, col:14> Text=" memory pool"
|   |-ParagraphComment 0x55b64bf88f50 <line:4529:3>
|   | `-TextComment 0x55b64bf88f20 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf88f70 <col:4, col:37> [in] implicitly Param="id" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf89000 <col:13, col:37>
|   |   `-TextComment 0x55b64bf88fd0 <col:13, col:37> Text=" Memory block identifier."
|   |-ParagraphComment 0x55b64bf89060 <line:4531:3>
|   | `-TextComment 0x55b64bf89030 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf89080 <col:4, line:4532:3> Name="return"
|   | `-ParagraphComment 0x55b64bf89100 <line:4531:11, line:4532:3>
|   |   |-TextComment 0x55b64bf890b0 <line:4531:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf890d0 <line:4532:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf89120 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x55b64bf89190 <line:4533:1>
|     `-TextComment 0x55b64bf89160 <col:1> Text=" "
|-FunctionDecl 0x55b64beeee28 <line:4557:1, col:34> col:14 k_malloc 'void *(size_t)' extern
| |-ParmVarDecl 0x55b64beeed18 <col:23, col:30> col:30 size 'size_t':'unsigned long'
| `-FullComment 0x55b64bf89680 <line:4547:3, line:4556:1>
|   |-ParagraphComment 0x55b64bf892a0 <line:4547:3>
|   | `-TextComment 0x55b64bf89270 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf892c0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55b64bf89320 <col:10, col:36>
|   |   `-TextComment 0x55b64bf892f0 <col:10, col:36> Text=" Allocate memory from heap."
|   |-ParagraphComment 0x55b64bf89390 <line:4549:3, line:4550:39>
|   | |-TextComment 0x55b64bf89340 <line:4549:3, col:66> Text=" This routine provides traditional malloc() semantics. Memory is"
|   | `-TextComment 0x55b64bf89360 <line:4550:3, col:39> Text=" allocated from the heap memory pool."
|   |-ParagraphComment 0x55b64bf893e0 <line:4552:3>
|   | `-TextComment 0x55b64bf893b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf89400 <col:4, col:53> [in] implicitly Param="size" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf89490 <col:15, col:53>
|   |   `-TextComment 0x55b64bf89460 <col:15, col:53> Text=" Amount of memory requested (in bytes)."
|   |-ParagraphComment 0x55b64bf894e0 <line:4554:3>
|   | `-TextComment 0x55b64bf894b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf89500 <col:4, line:4555:3> Name="return"
|   | `-ParagraphComment 0x55b64bf89580 <line:4554:11, line:4555:3>
|   |   |-TextComment 0x55b64bf89530 <line:4554:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x55b64bf89550 <line:4555:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf895a0 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x55b64bf89610 <line:4556:1>
|     `-TextComment 0x55b64bf895e0 <col:1> Text=" "
|-FunctionDecl 0x55b64beeef98 <line:4573:1, col:29> col:13 k_free 'void (void *)' extern
| |-ParmVarDecl 0x55b64beeef10 <col:20, col:26> col:26 ptr 'void *'
| `-FullComment 0x55b64bf89c00 <line:4560:3, line:4572:1>
|   |-ParagraphComment 0x55b64bf89720 <line:4560:3>
|   | `-TextComment 0x55b64bf896f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf89740 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55b64bf897a0 <col:10, col:42>
|   |   `-TextComment 0x55b64bf89770 <col:10, col:42> Text=" Free memory allocated from heap."
|   |-ParagraphComment 0x55b64bf89840 <line:4562:3, line:4564:23>
|   | |-TextComment 0x55b64bf897c0 <line:4562:3, col:71> Text=" This routine provides traditional free() semantics. The memory being"
|   | |-TextComment 0x55b64bf897e0 <line:4563:3, col:65> Text=" returned must have been allocated from the heap memory pool or"
|   | `-TextComment 0x55b64bf89800 <line:4564:3, col:23> Text=" k_mem_pool_malloc()."
|   |-ParagraphComment 0x55b64bf89910 <line:4566:3, col:48>
|   | |-TextComment 0x55b64bf89860 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x55b64bf898b0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="ptr"
|   | `-TextComment 0x55b64bf898d0 <col:13, col:48> Text=" is NULL, no operation is performed."
|   |-ParagraphComment 0x55b64bf89960 <line:4568:3>
|   | `-TextComment 0x55b64bf89930 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf89980 <col:4, col:53> [in] implicitly Param="ptr" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf89a10 <col:14, col:53>
|   |   `-TextComment 0x55b64bf899e0 <col:14, col:53> Text=" Pointer to previously allocated memory."
|   |-ParagraphComment 0x55b64bf89a60 <line:4570:3>
|   | `-TextComment 0x55b64bf89a30 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf89a80 <col:4, line:4571:3> Name="return"
|   | `-ParagraphComment 0x55b64bf89b00 <line:4570:11, line:4571:3>
|   |   |-TextComment 0x55b64bf89ab0 <line:4570:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf89ad0 <line:4571:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf89b20 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x55b64bf89b90 <line:4572:1>
|     `-TextComment 0x55b64bf89b60 <col:1> Text=" "
|-FunctionDecl 0x55b64beef208 <line:4587:1, col:48> col:14 k_calloc 'void *(size_t, size_t)' extern
| |-ParmVarDecl 0x55b64beef078 <col:23, col:30> col:30 nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64beef0e8 <col:37, col:44> col:44 size 'size_t':'unsigned long'
| `-FullComment 0x55b64bf8a150 <line:4576:3, line:4586:1>
|   |-ParagraphComment 0x55b64bf89ca0 <line:4576:3>
|   | `-TextComment 0x55b64bf89c70 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf89cc0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x55b64bf89d20 <col:10, col:48>
|   |   `-TextComment 0x55b64bf89cf0 <col:10, col:48> Text=" Allocate memory from heap, array style"
|   |-ParagraphComment 0x55b64bf89d90 <line:4578:3, line:4579:50>
|   | |-TextComment 0x55b64bf89d40 <line:4578:3, col:66> Text=" This routine provides traditional calloc() semantics. Memory is"
|   | `-TextComment 0x55b64bf89d60 <line:4579:3, col:50> Text=" allocated from the heap memory pool and zeroed."
|   |-ParagraphComment 0x55b64bf89de0 <line:4581:3>
|   | `-TextComment 0x55b64bf89db0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf89e00 <col:4, line:4582:3> [in] implicitly Param="nmemb" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf89eb0 <line:4581:16, line:4582:3>
|   |   |-TextComment 0x55b64bf89e60 <line:4581:16, col:57> Text=" Number of elements in the requested array"
|   |   `-TextComment 0x55b64bf89e80 <line:4582:3> Text=" "
|   |-ParamCommandComment 0x55b64bf89ed0 <col:4, col:53> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf89f60 <col:15, col:53>
|   |   `-TextComment 0x55b64bf89f30 <col:15, col:53> Text=" Size of each array element (in bytes)."
|   |-ParagraphComment 0x55b64bf89fb0 <line:4584:3>
|   | `-TextComment 0x55b64bf89f80 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf89fd0 <col:4, line:4585:3> Name="return"
|   | `-ParagraphComment 0x55b64bf8a050 <line:4584:11, line:4585:3>
|   |   |-TextComment 0x55b64bf8a000 <line:4584:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x55b64bf8a020 <line:4585:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf8a070 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x55b64bf8a0e0 <line:4586:1>
|     `-TextComment 0x55b64bf8a0b0 <col:1> Text=" "
|-EnumDecl 0x55b64beef2e8 <line:4600:1, line:4614:1> line:4600:6 _poll_types_bits
| |-EnumConstantDecl 0x55b64beef3a0 <line:4602:2> col:2 _POLL_TYPE_IGNORE 'int'
| |-EnumConstantDecl 0x55b64beef3e8 <line:4605:2> col:2 _POLL_TYPE_SIGNAL 'int'
| |-EnumConstantDecl 0x55b64beef430 <line:4608:2> col:2 _POLL_TYPE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x55b64beef478 <line:4611:2> col:2 _POLL_TYPE_DATA_AVAILABLE 'int'
| `-EnumConstantDecl 0x55b64beef4c0 <line:4613:2> col:2 referenced _POLL_NUM_TYPES 'int'
|-EnumDecl 0x55b64beef508 <line:4619:1, line:4636:1> line:4619:6 _poll_states_bits
| |-EnumConstantDecl 0x55b64beef5c0 <line:4621:2> col:2 _POLL_STATE_NOT_READY 'int'
| |-EnumConstantDecl 0x55b64beef608 <line:4624:2> col:2 _POLL_STATE_SIGNALED 'int'
| |-EnumConstantDecl 0x55b64beef650 <line:4627:2> col:2 _POLL_STATE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x55b64beef698 <line:4630:2> col:2 _POLL_STATE_DATA_AVAILABLE 'int'
| |-EnumConstantDecl 0x55b64beef6e0 <line:4633:2> col:2 _POLL_STATE_CANCELLED 'int'
| `-EnumConstantDecl 0x55b64beef728 <line:4635:2> col:2 referenced _POLL_NUM_STATES 'int'
|-EnumDecl 0x55b64bef1d30 <line:4667:1, line:4672:1> line:4667:6 k_poll_modes
| |-EnumConstantDecl 0x55b64bef1e10 <line:4669:2, col:28> col:2 K_POLL_MODE_NOTIFY_ONLY 'int'
| | `-IntegerLiteral 0x55b64bef1df0 <col:28> 'int' 0
| `-EnumConstantDecl 0x55b64bef1e58 <line:4671:2> col:2 K_POLL_NUM_MODES 'int'
|-RecordDecl 0x55b64bef1ea0 prev 0x55b64bea76e0 <line:4683:1, line:4695:1> line:4683:8 struct k_poll_signal definition
| |-FieldDecl 0x55b64bef1f68 <line:4685:2, col:14> col:14 poll_events 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x55b64bf8a220 <line:4684:5, col:28>
| |   `-ParagraphComment 0x55b64bf8a1f0 <col:5, col:28>
| |     `-TextComment 0x55b64bf8a1c0 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x55b64bef1ff0 <line:4691:2, col:15> col:15 referenced signaled 'unsigned int'
| | `-FullComment 0x55b64bf8a310 <line:4688:4, line:4689:24>
| |   `-ParagraphComment 0x55b64bf8a2e0 <line:4688:4, line:4689:24>
| |     |-TextComment 0x55b64bf8a290 <line:4688:4, col:71> Text=" 1 if the event has been signaled, 0 otherwise. Stays set to 1 until"
| |     `-TextComment 0x55b64bf8a2b0 <line:4689:4, col:24> Text=" user resets it to 0."
| `-FieldDecl 0x55b64bef2080 <line:4694:2, col:6> col:6 result 'int'
|   `-FullComment 0x55b64bf8a3e0 <line:4693:5, col:67>
|     `-ParagraphComment 0x55b64bf8a3b0 <col:5, col:67>
|       `-TextComment 0x55b64bf8a380 <col:5, col:67> Text=" custom result value passed to k_poll_signal_raise() if needed "
|-RecordDecl 0x55b64bef20f8 prev 0x55b64bea7630 <line:4707:1, line:4737:1> line:4707:8 struct k_poll_event definition
| |-FullComment 0x55b64bf8a590 <line:4704:3, line:4706:1>
| | |-ParagraphComment 0x55b64bf8a480 <line:4704:3>
| | | `-TextComment 0x55b64bf8a450 <col:3> Text=" "
| | |-BlockCommandComment 0x55b64bf8a4a0 <col:4, col:20> Name="brief"
| | | `-ParagraphComment 0x55b64bf8a500 <col:10, col:20>
| | |   `-TextComment 0x55b64bf8a4d0 <col:10, col:20> Text=" Poll Event"
| | `-ParagraphComment 0x55b64bf8a550 <line:4706:1>
| |   `-TextComment 0x55b64bf8a520 <col:1> Text=" "
| |-FieldDecl 0x55b64bef21b8 <line:4709:2, col:14> col:14 _node 'sys_dnode_t':'struct _dnode'
| | `-FullComment 0x55b64bf8a660 <line:4708:5, col:28>
| |   `-ParagraphComment 0x55b64bf8a630 <col:5, col:28>
| |     `-TextComment 0x55b64bf8a600 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x55b64bef22b0 <line:4712:2, col:18> col:18 poller 'struct _poller *'
| | `-FullComment 0x55b64bf8a730 <line:4711:5, col:28>
| |   `-ParagraphComment 0x55b64bf8a700 <col:5, col:28>
| |     `-TextComment 0x55b64bf8a6d0 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x55b64bef2358 <line:4715:2, col:12> col:8 tag 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x55b64bef2328 <col:12> 'int' 8
| | `-FullComment 0x55b64bf8a800 <line:4714:5, col:63>
| |   `-ParagraphComment 0x55b64bf8a7d0 <col:5, col:63>
| |     `-TextComment 0x55b64bf8a7a0 <col:5, col:63> Text=" optional user-specified tag, opaque, untouched by the API "
| |-FieldDecl 0x55b64bef2400 <line:4718:2, col:13> col:8 type 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x55b64bef23c8 <col:13> 'int' EnumConstant 0x55b64beef4c0 '_POLL_NUM_TYPES' 'int'
| | `-FullComment 0x55b64bf8a8d0 <line:4717:5, col:67>
| |   `-ParagraphComment 0x55b64bf8a8a0 <col:5, col:67>
| |     `-TextComment 0x55b64bf8a870 <col:5, col:67> Text=" bitfield of event types (bitwise-ORed K_POLL_TYPE_xxx values) "
| |-FieldDecl 0x55b64bef24b0 <line:4721:2, col:14> col:8 state 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x55b64bef2478 <col:14> 'int' EnumConstant 0x55b64beef728 '_POLL_NUM_STATES' 'int'
| | `-FullComment 0x55b64bf8a9a0 <line:4720:5, col:69>
| |   `-ParagraphComment 0x55b64bf8a970 <col:5, col:69>
| |     `-TextComment 0x55b64bf8a940 <col:5, col:69> Text=" bitfield of event states (bitwise-ORed K_POLL_STATE_xxx values) "
| |-FieldDecl 0x55b64bef2558 <line:4724:2, col:13> col:8 mode 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x55b64bef2528 <col:13> 'int' 1
| | `-FullComment 0x55b64bf8aa70 <line:4723:5, col:47>
| |   `-ParagraphComment 0x55b64bf8aa40 <col:5, col:47>
| |     `-TextComment 0x55b64bf8aa10 <col:5, col:47> Text=" mode of operation, from enum k_poll_modes "
| |-FieldDecl 0x55b64bef27b0 <line:4727:2, line:4646:9> line:4727:8 unused 'u32_t':'unsigned int'
| | |-ParenExpr 0x55b64bef2780 <line:4641:2, line:4646:9> 'int'
| | | `-BinaryOperator 0x55b64bef2758 <line:4641:3, line:4646:8> 'int' '-'
| | |   |-IntegerLiteral 0x55b64bef25c8 <line:4641:3> 'int' 32
| | |   `-ParenExpr 0x55b64bef2738 <col:8, line:4646:8> 'int'
| | |     `-BinaryOperator 0x55b64bef2710 <line:4641:9, line:4645:11> 'int' '+'
| | |       |-BinaryOperator 0x55b64bef26c8 <line:4641:9, line:4644:11> 'int' '+'
| | |       | |-BinaryOperator 0x55b64bef2678 <line:4641:9, line:4643:11> 'int' '+'
| | |       | | |-BinaryOperator 0x55b64bef2628 <line:4641:9, line:4642:11> 'int' '+'
| | |       | | | |-IntegerLiteral 0x55b64bef25e8 <line:4641:9> 'int' 0
| | |       | | | `-IntegerLiteral 0x55b64bef2608 <line:4642:11> 'int' 8
| | |       | | `-DeclRefExpr 0x55b64bef2650 <line:4643:11> 'int' EnumConstant 0x55b64beef4c0 '_POLL_NUM_TYPES' 'int'
| | |       | `-DeclRefExpr 0x55b64bef26a0 <line:4644:11> 'int' EnumConstant 0x55b64beef728 '_POLL_NUM_STATES' 'int'
| | |       `-IntegerLiteral 0x55b64bef26f0 <line:4645:11> 'int' 1
| | `-FullComment 0x55b64bf8ab40 <line:4726:5, col:32>
| |   `-ParagraphComment 0x55b64bf8ab10 <col:5, col:32>
| |     `-TextComment 0x55b64bf8aae0 <col:5, col:32> Text=" unused bits in 32-bit word "
| |-RecordDecl 0x55b64bef2828 <line:4730:2, line:4736:2> line:4730:2 union definition
| | |-FullComment 0x55b64bf8ac10 <line:4729:5, col:19>
| | | `-ParagraphComment 0x55b64bf8abe0 <col:5, col:19>
| | |   `-TextComment 0x55b64bf8abb0 <col:5, col:19> Text=" per-type data "
| | |-FieldDecl 0x55b64bef28e8 <line:4731:3, col:9> col:9 obj 'void *'
| | |-FieldDecl 0x55b64bef29e0 <line:4732:3, col:25> col:25 signal 'struct k_poll_signal *'
| | |-FieldDecl 0x55b64bef2a50 <line:4733:3, col:17> col:17 sem 'struct k_sem *'
| | |-FieldDecl 0x55b64bef2b50 <line:4734:3, col:18> col:18 fifo 'struct k_fifo *'
| | `-FieldDecl 0x55b64bef2bc0 <line:4735:3, col:19> col:19 queue 'struct k_queue *'
| |-FieldDecl 0x55b64bef2c60 <line:4730:2> col:2 implicit 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| |-IndirectFieldDecl 0x55b64bef2cb8 <line:4731:9> col:9 implicit obj 'void *'
| | |-Field 0x55b64bef2c60 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x55b64bef28e8 'obj' 'void *'
| |-IndirectFieldDecl 0x55b64bef3090 <line:4732:25> col:25 implicit signal 'struct k_poll_signal *'
| | |-Field 0x55b64bef2c60 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x55b64bef29e0 'signal' 'struct k_poll_signal *'
| |-IndirectFieldDecl 0x55b64bef30e0 <line:4733:17> col:17 implicit sem 'struct k_sem *'
| | |-Field 0x55b64bef2c60 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x55b64bef2a50 'sem' 'struct k_sem *'
| |-IndirectFieldDecl 0x55b64bef3130 <line:4734:18> col:18 implicit fifo 'struct k_fifo *'
| | |-Field 0x55b64bef2c60 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x55b64bef2b50 'fifo' 'struct k_fifo *'
| `-IndirectFieldDecl 0x55b64bef3180 <line:4735:19> col:19 implicit queue 'struct k_queue *'
|   |-Field 0x55b64bef2c60 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
|   `-Field 0x55b64bef2bc0 'queue' 'struct k_queue *'
|-FunctionDecl 0x55b64bef34b0 <line:4778:1, line:4779:29> line:4778:13 k_poll_event_init 'void (struct k_poll_event *, u32_t, int, void *)' extern
| |-ParmVarDecl 0x55b64bef3210 <col:31, col:52> col:52 event 'struct k_poll_event *'
| |-ParmVarDecl 0x55b64bef3280 <col:59, col:65> col:65 type 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55b64bef32f8 <line:4779:10, col:14> col:14 mode 'int'
| |-ParmVarDecl 0x55b64bef3370 <col:20, col:26> col:26 obj 'void *'
| `-FullComment 0x55b64bf8b3a0 <line:4761:3, line:4776:1>
|   |-ParagraphComment 0x55b64bf8acb0 <line:4761:3>
|   | `-TextComment 0x55b64bf8ac80 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8acd0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55b64bf8ad30 <col:10, col:53>
|   |   `-TextComment 0x55b64bf8ad00 <col:10, col:53> Text=" Initialize one struct k_poll_event instance"
|   |-ParagraphComment 0x55b64bf8ada0 <line:4763:3, line:4764:53>
|   | |-TextComment 0x55b64bf8ad50 <line:4763:3, col:73> Text=" After this routine is called on a poll event, the event it ready to be"
|   | `-TextComment 0x55b64bf8ad70 <line:4764:3, col:53> Text=" placed in an event array to be passed to k_poll()."
|   |-ParagraphComment 0x55b64bf8adf0 <line:4766:3>
|   | `-TextComment 0x55b64bf8adc0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8ae10 <col:4, line:4767:3> [in] implicitly Param="event" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf8aec0 <line:4766:16, line:4767:3>
|   |   |-TextComment 0x55b64bf8ae70 <line:4766:16, col:40> Text=" The event to initialize."
|   |   `-TextComment 0x55b64bf8ae90 <line:4767:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8aee0 <col:4, line:4771:3> [in] implicitly Param="type" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf8b010 <line:4767:15, line:4771:3>
|   |   |-TextComment 0x55b64bf8af40 <line:4767:15, col:73> Text=" A bitfield of the types of event, from the K_POLL_TYPE_xxx"
|   |   |-TextComment 0x55b64bf8af60 <line:4768:3, col:77> Text="             values. Only values that apply to the same object being polled"
|   |   |-TextComment 0x55b64bf8af80 <line:4769:3, col:77> Text="             can be used together. Choosing K_POLL_TYPE_IGNORE disables the"
|   |   |-TextComment 0x55b64bf8afa0 <line:4770:3, col:21> Text="             event."
|   |   `-TextComment 0x55b64bf8afc0 <line:4771:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8b040 <col:4, line:4772:3> [in] implicitly Param="mode" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf8b0f0 <line:4771:15, line:4772:3>
|   |   |-TextComment 0x55b64bf8b0a0 <line:4771:15, col:51> Text=" Future. Use K_POLL_MODE_NOTIFY_ONLY."
|   |   `-TextComment 0x55b64bf8b0c0 <line:4772:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8b110 <col:4, col:43> [in] implicitly Param="obj" ParamIndex=3
|   | `-ParagraphComment 0x55b64bf8b1a0 <col:14, col:43>
|   |   `-TextComment 0x55b64bf8b170 <col:14, col:43> Text=" Kernel object or poll signal."
|   |-ParagraphComment 0x55b64bf8b1f0 <line:4774:3>
|   | `-TextComment 0x55b64bf8b1c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8b210 <col:4, line:4775:3> Name="return"
|   | `-ParagraphComment 0x55b64bf8b290 <line:4774:11, line:4775:3>
|   |   |-TextComment 0x55b64bf8b240 <line:4774:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf8b260 <line:4775:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf8b2b0 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x55b64bf8b320 <line:4776:1>
|     `-TextComment 0x55b64bf8b2f0 <col:1> Text=" "
|-FunctionDecl 0x55b64bef37e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4827:21> line:4826:15 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x55b64bef35c0 <col:22, col:43> col:43 events 'struct k_poll_event *'
| |-ParmVarDecl 0x55b64bef3638 <col:51, col:55> col:55 num_events 'int'
| |-ParmVarDecl 0x55b64bef36a8 <line:4827:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x55b64bf8bfc0 <line:4782:3, line:4824:1>
|   |-ParagraphComment 0x55b64bf8b440 <line:4782:3>
|   | `-TextComment 0x55b64bf8b410 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8b460 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x55b64bf8b4c0 <col:10, col:63>
|   |   `-TextComment 0x55b64bf8b490 <col:10, col:63> Text=" Wait for one or many of multiple poll events to occur"
|   |-ParagraphComment 0x55b64bf8b560 <line:4784:3, line:4786:61>
|   | |-TextComment 0x55b64bf8b4e0 <line:4784:3, col:71> Text=" This routine allows a thread to wait concurrently for one or many of"
|   | |-TextComment 0x55b64bf8b500 <line:4785:3, col:76> Text=" multiple poll events to have occurred. Such events can be a kernel object"
|   | `-TextComment 0x55b64bf8b520 <line:4786:3, col:61> Text=" being available, like a semaphore, or a poll signal event."
|   |-ParagraphComment 0x55b64bf8b6f0 <line:4788:3, line:4796:68>
|   | |-TextComment 0x55b64bf8b580 <line:4788:3, col:78> Text=" When an event notifies that a kernel object is available, the kernel object"
|   | |-TextComment 0x55b64bf8b5a0 <line:4789:3, col:76> Text=" is not "given" to the thread calling k_poll(): it merely signals the fact"
|   | |-TextComment 0x55b64bf8b5c0 <line:4790:3, col:76> Text=" that the object was available when the k_poll() call was in effect. Also,"
|   | |-TextComment 0x55b64bf8b5e0 <line:4791:3, col:78> Text=" all threads trying to acquire an object the regular way, i.e. by pending on"
|   | |-TextComment 0x55b64bf8b600 <line:4792:3, col:74> Text=" the object, have precedence over the thread polling on the object. This"
|   | |-TextComment 0x55b64bf8b620 <line:4793:3, col:75> Text=" means that the polling thread will never get the poll event on an object"
|   | |-TextComment 0x55b64bf8b640 <line:4794:3, col:75> Text=" until the object becomes available and its pend queue is empty. For this"
|   | |-TextComment 0x55b64bf8b660 <line:4795:3, col:76> Text=" reason, the k_poll() call is more effective when the objects being polled"
|   | `-TextComment 0x55b64bf8b680 <line:4796:3, col:68> Text=" only have one thread, the polling thread, trying to acquire them."
|   |-ParagraphComment 0x55b64bf8b790 <line:4798:3, line:4800:44>
|   | |-TextComment 0x55b64bf8b710 <line:4798:3, col:78> Text=" When k_poll() returns 0, the caller should loop on all the events that were"
|   | |-TextComment 0x55b64bf8b730 <line:4799:3, col:72> Text=" passed to k_poll() and check the state field for the values that were"
|   | `-TextComment 0x55b64bf8b750 <line:4800:3, col:44> Text=" expected and take the associated actions."
|   |-ParagraphComment 0x55b64bf8b800 <line:4802:3, line:4803:41>
|   | |-TextComment 0x55b64bf8b7b0 <line:4802:3, col:78> Text=" Before being reused for another call to k_poll(), the user has to reset the"
|   | `-TextComment 0x55b64bf8b7d0 <line:4803:3, col:41> Text=" state field to K_POLL_STATE_NOT_READY."
|   |-ParagraphComment 0x55b64bf8b870 <line:4805:3, line:4806:30>
|   | |-TextComment 0x55b64bf8b820 <line:4805:3, col:77> Text=" When called from user mode, a temporary memory allocation is required from"
|   | `-TextComment 0x55b64bf8b840 <line:4806:3, col:30> Text=" the caller's resource pool."
|   |-ParagraphComment 0x55b64bf8b8c0 <line:4808:3>
|   | `-TextComment 0x55b64bf8b890 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8b8e0 <col:4, line:4809:3> [in] implicitly Param="events" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf8b990 <line:4808:17, line:4809:3>
|   |   |-TextComment 0x55b64bf8b940 <line:4808:17, col:65> Text=" An array of pointers to events to be polled for."
|   |   `-TextComment 0x55b64bf8b960 <line:4809:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8b9b0 <col:4, line:4810:3> [in] implicitly Param="num_events" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf8ba60 <line:4809:21, line:4810:3>
|   |   |-TextComment 0x55b64bf8ba10 <line:4809:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x55b64bf8ba30 <line:4810:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8ba80 <col:4, line:4812:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf8bb60 <line:4810:18, line:4812:28>
|   |   |-TextComment 0x55b64bf8bae0 <line:4810:18, col:74> Text=" Non-negative waiting period for an event to be ready (in"
|   |   |-TextComment 0x55b64bf8bb00 <line:4811:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55b64bf8bb20 <line:4812:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55b64bf8bea0 <line:4814:3, line:4823:3>
|   | |-TextComment 0x55b64bf8bb80 <line:4814:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf8bba0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf8bbc0 <col:11, col:42> Text=" 0 One or more events are ready."
|   | |-TextComment 0x55b64bf8bbe0 <line:4815:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf8bc00 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf8bc20 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x55b64bf8bc40 <line:4816:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf8bc60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf8bc80 <col:11, col:57> Text=" -EINTR Polling has been interrupted, e.g. with"
|   | |-TextComment 0x55b64bf8bca0 <line:4817:3, col:76> Text="         k_queue_cancel_wait(). All output events are still set and valid,"
|   | |-TextComment 0x55b64bf8bcc0 <line:4818:3, col:77> Text="         cancelled event(s) will be set to K_POLL_STATE_CANCELLED. In other"
|   | |-TextComment 0x55b64bf8bce0 <line:4819:3, col:75> Text="         words, -EINTR status means that at least one of output events is"
|   | |-TextComment 0x55b64bf8bd00 <line:4820:3, col:34> Text="         K_POLL_STATE_CANCELLED."
|   | |-TextComment 0x55b64bf8bd20 <line:4821:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf8bd40 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf8bd60 <col:11, col:76> Text=" -ENOMEM Thread resource pool insufficient memory (user mode only)"
|   | |-TextComment 0x55b64bf8bd80 <line:4822:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf8bda0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf8bdc0 <col:11, col:50> Text=" -EINVAL Bad parameters (user mode only)"
|   | `-TextComment 0x55b64bf8bde0 <line:4823:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf8bec0 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x55b64bf8bf30 <line:4824:1>
|     `-TextComment 0x55b64bf8bf00 <col:1> Text=" "
|-FunctionDecl 0x55b64bef39f0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4840:63> col:16 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x55b64bef38f0 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| `-FullComment 0x55b64bf8c420 <line:4830:3, line:4838:1>
|   |-ParagraphComment 0x55b64bf8c060 <line:4830:3>
|   | `-TextComment 0x55b64bf8c030 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8c080 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55b64bf8c0e0 <col:10, col:42>
|   |   `-TextComment 0x55b64bf8c0b0 <col:10, col:42> Text=" Initialize a poll signal object."
|   |-ParagraphComment 0x55b64bf8c130 <line:4832:3, col:71>
|   | `-TextComment 0x55b64bf8c100 <col:3, col:71> Text=" Ready a poll signal object to be signaled via k_poll_signal_raise()."
|   |-ParagraphComment 0x55b64bf8c180 <line:4834:3>
|   | `-TextComment 0x55b64bf8c150 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8c1a0 <col:4, col:31> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf8c230 <col:17, col:31>
|   |   `-TextComment 0x55b64bf8c200 <col:17, col:31> Text=" A poll signal."
|   |-ParagraphComment 0x55b64bf8c280 <line:4836:3>
|   | `-TextComment 0x55b64bf8c250 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8c2a0 <col:4, line:4837:3> Name="return"
|   | `-ParagraphComment 0x55b64bf8c320 <line:4836:11, line:4837:3>
|   |   |-TextComment 0x55b64bf8c2d0 <line:4836:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf8c2f0 <line:4837:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf8c340 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x55b64bf8c3b0 <line:4838:1>
|     `-TextComment 0x55b64bf8c380 <col:1> Text=" "
|-FunctionDecl 0x55b64bef3b48 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4848:64> col:16 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| `-ParmVarDecl 0x55b64bef3ac0 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
|-FunctionDecl 0x55b64bef3ca0 <line:4850:1, line:4853:1> line:4850:20 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x55b64bef3c18 <col:47, col:69> col:69 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x55b64bef3e38 <line:4851:1, line:4853:1>
|   `-BinaryOperator 0x55b64bef3de0 <line:4852:2, col:21> 'unsigned int' '='
|     |-MemberExpr 0x55b64bef3d88 <col:2, col:10> 'unsigned int' lvalue ->signaled 0x55b64bef1ff0
|     | `-ImplicitCastExpr 0x55b64bef3d70 <col:2> 'struct k_poll_signal *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b64bef3d48 <col:2> 'struct k_poll_signal *' lvalue ParmVar 0x55b64bef3c18 'signal' 'struct k_poll_signal *'
|     `-IntegerLiteral 0x55b64bef3dc0 <col:21> 'unsigned int' 0
|-FunctionDecl 0x55b64bef4be8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4867:43> line:4866:16 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x55b64bef3e78 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55b64bef3ef0 <line:4867:8, col:22> col:22 signaled 'unsigned int *'
| |-ParmVarDecl 0x55b64bef3f68 <col:32, col:37> col:37 result 'int *'
| `-FullComment 0x55b64bf8c970 <line:4856:3, line:4865:1>
|   |-ParagraphComment 0x55b64bf8c4c0 <line:4856:3>
|   | `-TextComment 0x55b64bf8c490 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8c4e0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x55b64bf8c540 <col:10, col:68>
|   |   `-TextComment 0x55b64bf8c510 <col:10, col:68> Text=" Fetch the signaled state and result value of a poll signal"
|   |-ParagraphComment 0x55b64bf8c590 <line:4858:3>
|   | `-TextComment 0x55b64bf8c560 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8c5b0 <col:4, line:4859:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf8c660 <line:4858:17, line:4859:3>
|   |   |-TextComment 0x55b64bf8c610 <line:4858:17, col:37> Text=" A poll signal object"
|   |   `-TextComment 0x55b64bf8c630 <line:4859:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8c680 <col:4, line:4861:3> [in] implicitly Param="signaled" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf8c760 <line:4859:19, line:4861:3>
|   |   |-TextComment 0x55b64bf8c6e0 <line:4859:19, col:73> Text=" An integer buffer which will be written nonzero if the"
|   |   |-TextComment 0x55b64bf8c700 <line:4860:3, col:26> Text="		   object was signaled"
|   |   `-TextComment 0x55b64bf8c720 <line:4861:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8c780 <col:4, line:4864:3> [in] implicitly Param="result" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf8c880 <line:4861:17, line:4864:3>
|   |   |-TextComment 0x55b64bf8c7e0 <line:4861:17, col:77> Text=" An integer destination buffer which will be written with the"
|   |   |-TextComment 0x55b64bf8c800 <line:4862:3, col:63> Text="		   result value if the object was signaled, or an undefined"
|   |   |-TextComment 0x55b64bf8c820 <line:4863:3, col:27> Text="		   value if it was not."
|   |   `-TextComment 0x55b64bf8c840 <line:4864:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf8c8a0 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x55b64bf8c910 <line:4865:1>
|     `-TextComment 0x55b64bf8c8e0 <col:1> Text=" "
|-FunctionDecl 0x55b64bef4e88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4894:75> col:15 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x55b64bef4cf0 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55b64bef4d68 <col:65, col:69> col:69 result 'int'
| `-FullComment 0x55b64bf8d200 <line:4870:3, line:4892:1>
|   |-ParagraphComment 0x55b64bf8ca10 <line:4870:3>
|   | `-TextComment 0x55b64bf8c9e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8ca30 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x55b64bf8ca90 <col:10, col:38>
|   |   `-TextComment 0x55b64bf8ca60 <col:10, col:38> Text=" Signal a poll signal object."
|   |-ParagraphComment 0x55b64bf8cbb0 <line:4872:3, line:4874:57>
|   | |-TextComment 0x55b64bf8cab0 <line:4872:3, col:77> Text=" This routine makes ready a poll signal, which is basically a poll event of"
|   | |-TextComment 0x55b64bf8cad0 <line:4873:3, col:77> Text=" type K_POLL_TYPE_SIGNAL. If a thread was polling on that event, it will be"
|   | |-TextComment 0x55b64bf8caf0 <line:4874:3, col:24> Text=" made ready to run. A "
|   | |-InlineCommandComment 0x55b64bf8cb40 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="result"
|   | `-TextComment 0x55b64bf8cb60 <col:34, col:57> Text=" value can be specified."
|   |-ParagraphComment 0x55b64bf8cca0 <line:4876:3, line:4880:27>
|   | |-TextComment 0x55b64bf8cbd0 <line:4876:3, col:64> Text=" The poll signal contains a 'signaled' field that, when set by"
|   | |-TextComment 0x55b64bf8cbf0 <line:4877:3, col:73> Text=" k_poll_signal_raise(), stays set until the user sets it back to 0 with"
|   | |-TextComment 0x55b64bf8cc10 <line:4878:3, col:74> Text=" k_poll_signal_reset(). It thus has to be reset by the user before being"
|   | |-TextComment 0x55b64bf8cc30 <line:4879:3, col:76> Text=" passed again to k_poll() or k_poll() will consider it being signaled, and"
|   | `-TextComment 0x55b64bf8cc50 <line:4880:3, col:27> Text=" will return immediately."
|   |-ParagraphComment 0x55b64bf8ccf0 <line:4882:3>
|   | `-TextComment 0x55b64bf8ccc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8cd10 <col:4, line:4884:65> Name="note"
|   | `-ParagraphComment 0x55b64bf8cdc0 <line:4882:9, line:4884:65>
|   |   |-TextComment 0x55b64bf8cd40 <line:4882:9, col:69> Text=" The result is stored and the 'signaled' field is set even if"
|   |   |-TextComment 0x55b64bf8cd60 <line:4883:3, col:70> Text=" this function returns an error indicating that an expiring poll was"
|   |   `-TextComment 0x55b64bf8cd80 <line:4884:3, col:65> Text=" not notified.  The next k_poll() will detect the missed raise."
|   |-ParagraphComment 0x55b64bf8ce10 <line:4886:3>
|   | `-TextComment 0x55b64bf8cde0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8ce30 <col:4, line:4887:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf8cee0 <line:4886:17, line:4887:3>
|   |   |-TextComment 0x55b64bf8ce90 <line:4886:17, col:31> Text=" A poll signal."
|   |   `-TextComment 0x55b64bf8ceb0 <line:4887:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8cf00 <col:4, col:70> [in] implicitly Param="result" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf8cf90 <col:17, col:70>
|   |   `-TextComment 0x55b64bf8cf60 <col:17, col:70> Text=" The value to store in the result field of the signal."
|   |-ParagraphComment 0x55b64bf8d0f0 <line:4889:3, line:4891:3>
|   | |-TextComment 0x55b64bf8cfb0 <line:4889:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf8cfd0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf8cff0 <col:11, col:51> Text=" 0 The signal was delivered successfully."
|   | |-TextComment 0x55b64bf8d010 <line:4890:3> Text=" "
|   | |-InlineCommandComment 0x55b64bf8d050 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55b64bf8d070 <col:11, col:78> Text=" -EAGAIN The polling thread's timeout is in the process of expiring."
|   | `-TextComment 0x55b64bf8d090 <line:4891:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf8d110 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x55b64bf8d180 <line:4892:1>
|     `-TextComment 0x55b64bf8d150 <col:1> Text=" "
|-FunctionDecl 0x55b64bef5100 <line:4899:1, col:70> col:13 z_handle_obj_poll_events 'void (sys_dlist_t *, u32_t)' extern
| |-ParmVarDecl 0x55b64bef4f78 <col:38, col:51> col:51 events 'sys_dlist_t *'
| |-ParmVarDecl 0x55b64bef4fe8 <col:59, col:65> col:65 state 'u32_t':'unsigned int'
| `-FullComment 0x55b64bf8d2f0 <line:4897:3, col:12>
|   `-ParagraphComment 0x55b64bf8d2c0 <col:3, col:12>
|     |-TextComment 0x55b64bf8d270 <col:3> Text=" "
|     `-InlineCommandComment 0x55b64bf8d290 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55b64bef5298 <line:4921:1, line:4924:1> line:4921:20 k_cpu_idle 'void (void)' static inline
| |-CompoundStmt 0x55b64bef53c8 <line:4922:1, line:4924:1>
| | `-CallExpr 0x55b64bef5378 <line:4923:2, col:16> 'void'
| |   `-ImplicitCastExpr 0x55b64bef5360 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
| |     `-DeclRefExpr 0x55b64bef5338 <col:2> 'void (void)' Function 0x55b64be6d120 'arch_cpu_idle' 'void (void)'
| `-FullComment 0x55b64bf8d8f0 <line:4904:3, line:4920:1>
|   |-ParagraphComment 0x55b64bf8d390 <line:4904:3>
|   | `-TextComment 0x55b64bf8d360 <col:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf8d3b0 <col:4, col:43> Text=" cpu_idle_apis CPU Idling APIs"
|   |-ParagraphComment 0x55b64bf8d420 <line:4905:3>
|   | `-TextComment 0x55b64bf8d3f0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf8d440 <col:4, col:24> Text=" kernel_apis"
|   |-ParagraphComment 0x55b64bf8d500 <line:4906:3, col:5>
|   | |-TextComment 0x55b64bf8d480 <col:3> Text=" "
|   | |-TextComment 0x55b64bf8d4a0 <col:4> Text="@"
|   | `-TextComment 0x55b64bf8d4c0 <col:5> Text="{"
|   |-ParagraphComment 0x55b64bf8d550 <line:4909:3>
|   | `-TextComment 0x55b64bf8d520 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8d570 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x55b64bf8d5d0 <col:10, col:28>
|   |   `-TextComment 0x55b64bf8d5a0 <col:10, col:28> Text=" Make the CPU idle."
|   |-ParagraphComment 0x55b64bf8d620 <line:4911:3, col:63>
|   | `-TextComment 0x55b64bf8d5f0 <col:3, col:63> Text=" This function makes the CPU idle until an event wakes it up."
|   |-ParagraphComment 0x55b64bf8d6e0 <line:4913:3, line:4916:59>
|   | |-TextComment 0x55b64bf8d640 <line:4913:3, col:77> Text=" In a regular system, the idle thread should be the only thread responsible"
|   | |-TextComment 0x55b64bf8d660 <line:4914:3, col:71> Text=" for making the CPU idle and triggering any type of power management."
|   | |-TextComment 0x55b64bf8d680 <line:4915:3, col:79> Text=" However, in some more constrained systems, such as a single-threaded system,"
|   | `-TextComment 0x55b64bf8d6a0 <line:4916:3, col:59> Text=" the only thread would be responsible for this if needed."
|   |-ParagraphComment 0x55b64bf8d730 <line:4918:3>
|   | `-TextComment 0x55b64bf8d700 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8d750 <col:4, line:4919:3> Name="return"
|   | `-ParagraphComment 0x55b64bf8d7d0 <line:4918:11, line:4919:3>
|   |   |-TextComment 0x55b64bf8d780 <line:4918:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf8d7a0 <line:4919:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf8d7f0 <col:4, col:23> Text=" K-CPU-IDLE-001"
|   `-ParagraphComment 0x55b64bf8d860 <line:4920:1>
|     `-TextComment 0x55b64bf8d830 <col:1> Text=" "
|-FunctionDecl 0x55b64bef5480 <line:4937:1, line:4940:1> line:4937:20 k_cpu_atomic_idle 'void (unsigned int)' static inline
| |-ParmVarDecl 0x55b64bef53f8 <col:38, col:51> col:51 used key 'unsigned int'
| |-CompoundStmt 0x55b64bef5638 <line:4938:1, line:4940:1>
| | `-CallExpr 0x55b64bef5590 <line:4939:2, col:26> 'void'
| |   |-ImplicitCastExpr 0x55b64bef5578 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x55b64bef5528 <col:2> 'void (unsigned int)' Function 0x55b64be6d2c0 'arch_cpu_atomic_idle' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x55b64bef55c0 <col:23> 'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x55b64bef5550 <col:23> 'unsigned int' lvalue ParmVar 0x55b64bef53f8 'key' 'unsigned int'
| `-FullComment 0x55b64bf8dd70 <line:4927:3, line:4936:1>
|   |-ParagraphComment 0x55b64bf8d990 <line:4927:3>
|   | `-TextComment 0x55b64bf8d960 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8d9b0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf8da10 <col:10, col:49>
|   |   `-TextComment 0x55b64bf8d9e0 <col:10, col:49> Text=" Make the CPU idle in an atomic fashion."
|   |-ParagraphComment 0x55b64bf8da80 <line:4929:3, line:4930:54>
|   | |-TextComment 0x55b64bf8da30 <line:4929:3, col:75> Text=" Similar to k_cpu_idle(), but called with interrupts locked if operations"
|   | `-TextComment 0x55b64bf8da50 <line:4930:3, col:54> Text=" must be done atomically before making the CPU idle."
|   |-ParagraphComment 0x55b64bf8dad0 <line:4932:3>
|   | `-TextComment 0x55b64bf8daa0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8daf0 <col:4, col:61> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf8db80 <col:14, col:61>
|   |   `-TextComment 0x55b64bf8db50 <col:14, col:61> Text=" Interrupt locking key obtained from irq_lock()."
|   |-ParagraphComment 0x55b64bf8dbd0 <line:4934:3>
|   | `-TextComment 0x55b64bf8dba0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8dbf0 <col:4, line:4935:3> Name="return"
|   | `-ParagraphComment 0x55b64bf8dc70 <line:4934:11, line:4935:3>
|   |   |-TextComment 0x55b64bf8dc20 <line:4934:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55b64bf8dc40 <line:4935:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf8dc90 <col:4, col:23> Text=" K-CPU-IDLE-002"
|   `-ParagraphComment 0x55b64bf8dd00 <line:4936:1>
|     `-TextComment 0x55b64bf8dcd0 <col:1> Text=" "
|-FunctionDecl 0x55b64bef5760 <line:4949:1, col:51> col:13 z_sys_power_save_idle_exit 'void (s32_t)' extern
| |-ParmVarDecl 0x55b64bef5660 <col:40, col:46> col:46 ticks 's32_t':'int'
| `-FullComment 0x55b64bf8de60 <line:4947:3, col:12>
|   `-ParagraphComment 0x55b64bf8de30 <col:3, col:12>
|     |-TextComment 0x55b64bf8dde0 <col:3> Text=" "
|     `-InlineCommandComment 0x55b64bf8de00 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55b64bef7f70 <line:5008:1, line:5010:30> line:5008:13 z_init_thread_base 'void (struct _thread_base *, int, u32_t, unsigned int)' extern
| |-ParmVarDecl 0x55b64bef5920 <col:32, col:53> col:53 thread_base 'struct _thread_base *'
| |-ParmVarDecl 0x55b64bef5998 <line:5009:10, col:14> col:14 priority 'int'
| |-ParmVarDecl 0x55b64bef5a08 <col:24, col:30> col:30 initial_state 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55b64bef5a80 <line:5010:10, col:23> col:23 options 'unsigned int'
| `-FullComment 0x55b64bf8df50 <line:5006:3, col:12>
|   `-ParagraphComment 0x55b64bf8df20 <col:3, col:12>
|     |-TextComment 0x55b64bf8ded0 <col:3> Text=" "
|     `-InlineCommandComment 0x55b64bf8def0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55b64bef8118 <line:5027:1, col:39> col:13 z_is_thread_essential 'bool (void)' extern
| `-FullComment 0x55b64bf8e040 <line:5025:3, col:12>
|   `-ParagraphComment 0x55b64bf8e010 <col:3, col:12>
|     |-TextComment 0x55b64bf8dfc0 <col:3> Text=" "
|     `-InlineCommandComment 0x55b64bf8dfe0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55b64bef8298 <line:5031:1, col:58> col:13 z_timer_expiration_handler 'void (struct _timeout *)' extern
| |-ParmVarDecl 0x55b64bef8210 <col:40, col:57> col:57 t 'struct _timeout *'
| `-FullComment 0x55b64bf8e130 <line:5029:3, col:12>
|   `-ParagraphComment 0x55b64bf8e100 <col:3, col:12>
|     |-TextComment 0x55b64bf8e0b0 <col:3> Text=" "
|     `-InlineCommandComment 0x55b64bf8e0d0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55b64bef85d8 <line:5177:1, line:5180:1> line:5177:21 Z_THREAD_STACK_BUFFER 'char *(k_thread_stack_t *)' static inline
| |-ParmVarDecl 0x55b64bef84c8 <col:43, col:61> col:61 used sym 'k_thread_stack_t *'
| |-CompoundStmt 0x55b64bef8778 <line:5178:1, line:5180:1>
| | `-ReturnStmt 0x55b64bef8700 <line:5179:2, col:17>
| |   `-CStyleCastExpr 0x55b64bef86d8 <col:9, col:17> 'char *' <BitCast>
| |     `-ImplicitCastExpr 0x55b64bef86c0 <col:17> 'k_thread_stack_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x55b64bef8680 <col:17> 'k_thread_stack_t *' lvalue ParmVar 0x55b64bef84c8 'sym' 'k_thread_stack_t *'
| `-FullComment 0x55b64bf8e570 <line:5168:3, line:5176:1>
|   |-ParagraphComment 0x55b64bf8e1d0 <line:5168:3>
|   | `-TextComment 0x55b64bf8e1a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8e1f0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x55b64bf8e250 <col:10, col:52>
|   |   `-TextComment 0x55b64bf8e220 <col:10, col:52> Text=" Get a pointer to the physical stack buffer"
|   |-ParagraphComment 0x55b64bf8e2c0 <line:5170:3, line:5171:76>
|   | |-TextComment 0x55b64bf8e270 <line:5170:3, col:72> Text=" This macro is deprecated. If a stack buffer needs to be examined, the"
|   | `-TextComment 0x55b64bf8e290 <line:5171:3, col:76> Text=" bounds should be obtained from the associated thread's stack_info struct."
|   |-ParagraphComment 0x55b64bf8e310 <line:5173:3>
|   | `-TextComment 0x55b64bf8e2e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8e330 <col:4, line:5174:3> [in] implicitly Param="sym" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf8e3e0 <line:5173:14, line:5174:3>
|   |   |-TextComment 0x55b64bf8e390 <line:5173:14, col:40> Text=" Declared stack symbol name"
|   |   `-TextComment 0x55b64bf8e3b0 <line:5174:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8e400 <col:4, line:5175:3> Name="return"
|   | `-ParagraphComment 0x55b64bf8e480 <line:5174:11, line:5175:3>
|   |   |-TextComment 0x55b64bf8e430 <line:5174:11, col:38> Text=" The buffer itself, a char *"
|   |   `-TextComment 0x55b64bf8e450 <line:5175:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf8e4a0 <col:4, col:21> Text=" K-TSTACK-001"
|   `-ParagraphComment 0x55b64bf8e510 <line:5176:1>
|     `-TextComment 0x55b64bf8e4e0 <col:1> Text=" "
|-RecordDecl 0x55b64bef8790 prev 0x55b64bea7818 <line:5207:1, line:5216:1> line:5207:8 struct k_mem_partition definition
| |-FieldDecl 0x55b64bef8858 <line:5209:2, col:12> col:12 start 'uintptr_t':'unsigned long'
| | `-FullComment 0x55b64bf8e640 <line:5208:5, col:39>
| |   `-ParagraphComment 0x55b64bf8e610 <col:5, col:39>
| |     `-TextComment 0x55b64bf8e5e0 <col:5, col:39> Text=" start address of memory partition "
| `-FieldDecl 0x55b64bef88d8 <line:5211:2, col:9> col:9 size 'size_t':'unsigned long'
|   `-FullComment 0x55b64bf8e710 <line:5210:5, col:30>
|     `-ParagraphComment 0x55b64bf8e6e0 <col:5, col:30>
|       `-TextComment 0x55b64bf8e6b0 <col:5, col:30> Text=" size of memory partition "
|-RecordDecl 0x55b64bef8948 prev 0x55b64bea7790 <line:5222:1, line:5231:1> line:5222:8 struct k_mem_domain definition
| |-FullComment 0x55b64bf8e8c0 <line:5219:3, line:5221:1>
| | |-ParagraphComment 0x55b64bf8e7b0 <line:5219:3>
| | | `-TextComment 0x55b64bf8e780 <col:3> Text=" "
| | |-BlockCommandComment 0x55b64bf8e7d0 <col:4, col:23> Name="brief"
| | | `-ParagraphComment 0x55b64bf8e830 <col:10, col:23>
| | |   `-TextComment 0x55b64bf8e800 <col:10, col:23> Text=" Memory Domain"
| | `-ParagraphComment 0x55b64bf8e880 <line:5221:1>
| |   `-TextComment 0x55b64bf8e850 <col:1> Text=" "
| |-FieldDecl 0x55b64bef8a08 <line:5228:2, col:14> col:14 mem_domain_q 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x55b64bf8e990 <line:5227:5, col:14>
| |   `-ParagraphComment 0x55b64bf8e960 <col:5, col:14>
| |     `-TextComment 0x55b64bf8e930 <col:5, col:14> Text=" domain q "
| `-FieldDecl 0x55b64bef8a88 <line:5230:2, col:7> col:7 num_partitions 'u8_t':'unsigned char'
|   `-FullComment 0x55b64bf8ea60 <line:5229:5, col:40>
|     `-ParagraphComment 0x55b64bf8ea30 <col:5, col:40>
|       `-TextComment 0x55b64bf8ea00 <col:5, col:40> Text=" number of partitions in the domain "
|-FunctionDecl 0x55b64bef95f8 <line:5248:1, line:5249:41> line:5248:13 k_mem_domain_init 'void (struct k_mem_domain *, u8_t, struct k_mem_partition **)' extern
| |-ParmVarDecl 0x55b64bef8bb0 <col:31, col:52> col:52 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x55b64bef8c20 <col:60, col:65> col:65 num_parts 'u8_t':'unsigned char'
| |-ParmVarDecl 0x55b64bef8e30 <line:5249:10, col:40> col:34 parts 'struct k_mem_partition **':'struct k_mem_partition **'
| `-FullComment 0x55b64bf8f060 <line:5235:3, line:5247:1>
|   |-ParagraphComment 0x55b64bf8eb00 <line:5235:3>
|   | `-TextComment 0x55b64bf8ead0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8eb20 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55b64bf8eb80 <col:10, col:37>
|   |   `-TextComment 0x55b64bf8eb50 <col:10, col:37> Text=" Initialize a memory domain."
|   |-ParagraphComment 0x55b64bf8ebd0 <line:5237:3, col:68>
|   | `-TextComment 0x55b64bf8eba0 <col:3, col:68> Text=" Initialize a memory domain with given name and memory partitions."
|   |-ParagraphComment 0x55b64bf8ec40 <line:5239:3, line:5240:25>
|   | |-TextComment 0x55b64bf8ebf0 <line:5239:3, col:71> Text=" See documentation for k_mem_domain_add_partition() for details about"
|   | `-TextComment 0x55b64bf8ec10 <line:5240:3, col:25> Text=" partition constraints."
|   |-ParagraphComment 0x55b64bf8ec90 <line:5242:3>
|   | `-TextComment 0x55b64bf8ec60 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8ecb0 <col:4, line:5243:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf8ed60 <line:5242:17, line:5243:3>
|   |   |-TextComment 0x55b64bf8ed10 <line:5242:17, col:53> Text=" The memory domain to be initialized."
|   |   `-TextComment 0x55b64bf8ed30 <line:5243:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8ed80 <col:4, line:5244:3> [in] implicitly Param="num_parts" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf8ee30 <line:5243:20, line:5244:3>
|   |   |-TextComment 0x55b64bf8ede0 <line:5243:20, col:67> Text=" The number of array items of "parts" parameter."
|   |   `-TextComment 0x55b64bf8ee00 <line:5244:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8ee50 <col:4, line:5246:3> [in] implicitly Param="parts" ParamIndex=2
|   | `-ParagraphComment 0x55b64bf8ef30 <line:5244:16, line:5246:3>
|   |   |-TextComment 0x55b64bf8eeb0 <line:5244:16, col:74> Text=" An array of pointers to the memory partitions. Can be NULL"
|   |   |-TextComment 0x55b64bf8eed0 <line:5245:3, col:37> Text="              if num_parts is zero."
|   |   `-TextComment 0x55b64bf8eef0 <line:5246:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf8ef50 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55b64bf8efc0 <line:5247:1>
|     `-TextComment 0x55b64bf8ef90 <col:1> Text=" "
|-FunctionDecl 0x55b64bef9800 <line:5258:1, col:61> col:13 k_mem_domain_destroy 'void (struct k_mem_domain *)' extern
| |-ParmVarDecl 0x55b64bef9700 <col:34, col:55> col:55 domain 'struct k_mem_domain *'
| `-FullComment 0x55b64bf8f3e0 <line:5251:3, line:5257:1>
|   |-ParagraphComment 0x55b64bf8f100 <line:5251:3>
|   | `-TextComment 0x55b64bf8f0d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8f120 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55b64bf8f180 <col:10, col:34>
|   |   `-TextComment 0x55b64bf8f150 <col:10, col:34> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x55b64bf8f1d0 <line:5253:3, col:27>
|   | `-TextComment 0x55b64bf8f1a0 <col:3, col:27> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x55b64bf8f220 <line:5255:3>
|   | `-TextComment 0x55b64bf8f1f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8f240 <col:4, line:5256:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf8f2f0 <line:5255:17, line:5256:3>
|   |   |-TextComment 0x55b64bf8f2a0 <line:5255:17, col:51> Text=" The memory domain to be destroyed."
|   |   `-TextComment 0x55b64bf8f2c0 <line:5256:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf8f310 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55b64bf8f380 <line:5257:1>
|     `-TextComment 0x55b64bf8f350 <col:1> Text=" "
|-FunctionDecl 0x55b64bef9aa0 <line:5284:1, line:5285:39> line:5284:13 k_mem_domain_add_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x55b64bef9900 <col:40, col:61> col:61 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x55b64bef9988 <line:5285:11, col:35> col:35 part 'struct k_mem_partition *'
| `-FullComment 0x55b64bf8fa80 <line:5261:3, line:5283:1>
|   |-ParagraphComment 0x55b64bf8f480 <line:5261:3>
|   | `-TextComment 0x55b64bf8f450 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8f4a0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55b64bf8f500 <col:10, col:54>
|   |   `-TextComment 0x55b64bf8f4d0 <col:10, col:54> Text=" Add a memory partition into a memory domain."
|   |-ParagraphComment 0x55b64bf8f570 <line:5263:3, line:5264:29>
|   | |-TextComment 0x55b64bf8f520 <line:5263:3, col:74> Text=" Add a memory partition into a memory domain. Partitions must conform to"
|   | `-TextComment 0x55b64bf8f540 <line:5264:3, col:29> Text=" the following constraints:"
|   |-ParagraphComment 0x55b64bf8f720 <line:5266:3, line:5275:28>
|   | |-TextComment 0x55b64bf8f590 <line:5266:3, col:71> Text=" - Partition bounds must be within system RAM boundaries on MMU-based"
|   | |-TextComment 0x55b64bf8f5b0 <line:5267:3, col:13> Text="   systems."
|   | |-TextComment 0x55b64bf8f5d0 <line:5268:3, col:69> Text=" - Partitions in the same memory domain may not overlap each other."
|   | |-TextComment 0x55b64bf8f5f0 <line:5269:3, col:63> Text=" - Partitions must not be defined which expose private kernel"
|   | |-TextComment 0x55b64bf8f610 <line:5270:3, col:39> Text="   data structures or kernel objects."
|   | |-TextComment 0x55b64bf8f630 <line:5271:3, col:75> Text=" - The starting address alignment, and the partition size must conform to"
|   | |-TextComment 0x55b64bf8f650 <line:5272:3, col:72> Text="   the constraints of the underlying memory management hardware, which"
|   | |-TextComment 0x55b64bf8f670 <line:5273:3, col:29> Text="   varies per architecture."
|   | |-TextComment 0x55b64bf8f690 <line:5274:3, col:75> Text=" - Memory domain partitions are only intended to control access to memory"
|   | `-TextComment 0x55b64bf8f6b0 <line:5275:3, col:28> Text="   from user mode threads."
|   |-ParagraphComment 0x55b64bf8f790 <line:5277:3, line:5278:12>
|   | |-TextComment 0x55b64bf8f740 <line:5277:3, col:70> Text=" Violating these constraints may lead to CPU exceptions or undefined"
|   | `-TextComment 0x55b64bf8f760 <line:5278:3, col:12> Text=" behavior."
|   |-ParagraphComment 0x55b64bf8f7e0 <line:5280:3>
|   | `-TextComment 0x55b64bf8f7b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8f800 <col:4, line:5281:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf8f8b0 <line:5280:17, line:5281:3>
|   |   |-TextComment 0x55b64bf8f860 <line:5280:17, col:66> Text=" The memory domain to be added a memory partition."
|   |   `-TextComment 0x55b64bf8f880 <line:5281:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8f8d0 <col:4, line:5282:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf8f980 <line:5281:15, line:5282:3>
|   |   |-TextComment 0x55b64bf8f930 <line:5281:15, col:47> Text=" The memory partition to be added"
|   |   `-TextComment 0x55b64bf8f950 <line:5282:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf8f9a0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55b64bf8fa10 <line:5283:1>
|     `-TextComment 0x55b64bf8f9e0 <col:1> Text=" "
|-FunctionDecl 0x55b64bef9cb8 <line:5296:1, line:5297:35> line:5296:13 k_mem_domain_remove_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x55b64bef9ba0 <col:43, col:64> col:64 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x55b64bef9c28 <line:5297:7, col:31> col:31 part 'struct k_mem_partition *'
| `-FullComment 0x55b64bf8fed0 <line:5288:3, line:5295:1>
|   |-ParagraphComment 0x55b64bf8fb20 <line:5288:3>
|   | `-TextComment 0x55b64bf8faf0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8fb40 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x55b64bf8fba0 <col:10, col:57>
|   |   `-TextComment 0x55b64bf8fb70 <col:10, col:57> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x55b64bf8fbf0 <line:5290:3, col:50>
|   | `-TextComment 0x55b64bf8fbc0 <col:3, col:50> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x55b64bf8fc40 <line:5292:3>
|   | `-TextComment 0x55b64bf8fc10 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8fc60 <col:4, line:5293:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf8fd10 <line:5292:17, line:5293:3>
|   |   |-TextComment 0x55b64bf8fcc0 <line:5292:17, col:68> Text=" The memory domain to be removed a memory partition."
|   |   `-TextComment 0x55b64bf8fce0 <line:5293:3> Text=" "
|   |-ParamCommandComment 0x55b64bf8fd30 <col:4, line:5294:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf8fde0 <line:5293:15, line:5294:3>
|   |   |-TextComment 0x55b64bf8fd90 <line:5293:15, col:49> Text=" The memory partition to be removed"
|   |   `-TextComment 0x55b64bf8fdb0 <line:5294:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf8fe00 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55b64bf8fe70 <line:5295:1>
|     `-TextComment 0x55b64bf8fe40 <col:1> Text=" "
|-FunctionDecl 0x55b64bef9f40 <line:5309:1, line:5310:23> line:5309:13 k_mem_domain_add_thread 'void (struct k_mem_domain *, k_tid_t)' extern
| |-ParmVarDecl 0x55b64bef9dc0 <col:37, col:58> col:58 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x55b64bef9e30 <line:5310:9, col:17> col:17 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55b64bf90360 <line:5300:3, line:5308:1>
|   |-ParagraphComment 0x55b64bf8ff70 <line:5300:3>
|   | `-TextComment 0x55b64bf8ff40 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf8ff90 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55b64bf8fff0 <col:10, col:44>
|   |   `-TextComment 0x55b64bf8ffc0 <col:10, col:44> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x55b64bf90040 <line:5302:3, col:37>
|   | `-TextComment 0x55b64bf90010 <col:3, col:37> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x55b64bf90090 <line:5304:3>
|   | `-TextComment 0x55b64bf90060 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf900b0 <col:4, line:5305:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf90160 <line:5304:17, line:5305:3>
|   |   |-TextComment 0x55b64bf90110 <line:5304:17, col:77> Text=" The memory domain that the thread is going to be added into."
|   |   `-TextComment 0x55b64bf90130 <line:5305:3> Text=" "
|   |-ParamCommandComment 0x55b64bf90180 <col:4, col:71> [in] implicitly Param="thread" ParamIndex=1
|   | `-ParagraphComment 0x55b64bf90210 <col:17, col:71>
|   |   `-TextComment 0x55b64bf901e0 <col:17, col:71> Text=" ID of thread going to be added into the memory domain."
|   |-ParagraphComment 0x55b64bf90260 <line:5307:3>
|   | `-TextComment 0x55b64bf90230 <col:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf90280 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55b64bf902f0 <line:5308:1>
|     `-TextComment 0x55b64bf902c0 <col:1> Text=" "
|-FunctionDecl 0x55b64befa0b0 <line:5320:1, col:54> col:13 k_mem_domain_remove_thread 'void (k_tid_t)' extern
| |-ParmVarDecl 0x55b64befa028 <col:40, col:48> col:48 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55b64bf906e0 <line:5313:3, line:5319:1>
|   |-ParagraphComment 0x55b64bf90400 <line:5313:3>
|   | `-TextComment 0x55b64bf903d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf90420 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55b64bf90480 <col:10, col:49>
|   |   `-TextComment 0x55b64bf90450 <col:10, col:49> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x55b64bf904d0 <line:5315:3, col:42>
|   | `-TextComment 0x55b64bf904a0 <col:3, col:42> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x55b64bf90520 <line:5317:3>
|   | `-TextComment 0x55b64bf904f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf90540 <col:4, line:5318:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf905f0 <line:5317:17, line:5318:3>
|   |   |-TextComment 0x55b64bf905a0 <line:5317:17, col:73> Text=" ID of thread going to be removed from its memory domain."
|   |   `-TextComment 0x55b64bf905c0 <line:5318:3> Text=" "
|   |-VerbatimLineComment 0x55b64bf90610 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55b64bf90680 <line:5319:1>
|     `-TextComment 0x55b64bf90650 <col:1> Text=" "
|-FunctionDecl 0x55b64befa2a8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:5356:54> col:15 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x55b64befa1e0 <col:31, col:48> col:48 thread 'struct k_thread *'
| `-FullComment 0x55b64bf90d00 <line:5337:3, line:5354:74>
|   |-ParagraphComment 0x55b64bf90780 <line:5337:3>
|   | `-TextComment 0x55b64bf90750 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf907a0 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x55b64bf90800 <col:10, col:69>
|   |   `-TextComment 0x55b64bf907d0 <col:10, col:69> Text=" Disable preservation of floating point context information."
|   |-ParagraphComment 0x55b64bf90870 <line:5339:3, line:5340:56>
|   | |-TextComment 0x55b64bf90820 <line:5339:3, col:60> Text=" This routine informs the kernel that the specified thread"
|   | `-TextComment 0x55b64bf90840 <line:5340:3, col:56> Text=" will no longer be using the floating point registers."
|   |-ParagraphComment 0x55b64bf908c0 <line:5342:3>
|   | `-TextComment 0x55b64bf90890 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf908e0 <col:4, line:5344:63> Name="warning"
|   | `-ParagraphComment 0x55b64bf90960 <line:5343:3, line:5344:63>
|   |   |-TextComment 0x55b64bf90910 <line:5343:3, col:73> Text=" Some architectures apply restrictions on how the disabling of floating"
|   |   `-TextComment 0x55b64bf90930 <line:5344:3, col:63> Text=" point preservation may be requested, see arch_float_disable."
|   |-ParagraphComment 0x55b64bf909b0 <line:5346:3>
|   | `-TextComment 0x55b64bf90980 <col:3> Text=" "
|   |-BlockCommandComment 0x55b64bf909d0 <col:4, line:5348:52> Name="warning"
|   | `-ParagraphComment 0x55b64bf90a50 <line:5347:3, line:5348:52>
|   |   |-TextComment 0x55b64bf90a00 <line:5347:3, col:73> Text=" This routine should only be used to disable floating point support for"
|   |   `-TextComment 0x55b64bf90a20 <line:5348:3, col:52> Text=" a thread that currently has such support enabled."
|   |-ParagraphComment 0x55b64bf90aa0 <line:5350:3>
|   | `-TextComment 0x55b64bf90a70 <col:3> Text=" "
|   |-ParamCommandComment 0x55b64bf90ac0 <col:4, col:30> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55b64bf90b50 <col:17, col:30>
|   |   `-TextComment 0x55b64bf90b20 <col:17, col:30> Text=" ID of thread."
|   `-ParagraphComment 0x55b64bf90c90 <line:5352:3, line:5354:74>
|     |-TextComment 0x55b64bf90b70 <line:5352:3> Text=" "
|     |-InlineCommandComment 0x55b64bf90b90 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55b64bf90bb0 <col:11, col:30> Text=" 0       On success."
|     |-TextComment 0x55b64bf90bd0 <line:5353:3> Text=" "
|     |-InlineCommandComment 0x55b64bf90bf0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55b64bf90c10 <col:11, col:70> Text=" -ENOSYS If the floating point disabling is not implemented."
|     `-TextComment 0x55b64bf90c30 <line:5354:3, col:74> Text="         -EINVAL If the floating point disabling could not be performed."
|-FunctionDecl 0x55b64befd608 prev 0x55b64beaac50 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:24:1, col:81> col:13 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' extern
| |-ParmVarDecl 0x55b64befd4f0 <col:42, col:49> col:49 object 'void *'
| `-ParmVarDecl 0x55b64befd578 <col:57, col:75> col:75 thread 'struct k_thread *'
|-FunctionDecl 0x55b64befd7e8 prev 0x55b64beacd80 <line:25:1, line:35:1> line:25:20 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x55b64befd6d0 <col:42, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x55b64befd758 <col:57, col:75> col:75 used thread 'struct k_thread *'
| `-CompoundStmt 0x55b64befdae8 <line:26:1, line:35:1>
|   |-DoStmt 0x55b64befd978 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64befd940 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64befd8f0 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64befd958 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64befda80 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:34:2, col:45> 'void'
|     |-ImplicitCastExpr 0x55b64befda68 <col:2> 'void (*)(void *, struct k_thread *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64befd998 <col:2> 'void (void *, struct k_thread *)' Function 0x55b64befd608 'z_impl_k_object_access_grant' 'void (void *, struct k_thread *)'
|     |-ImplicitCastExpr 0x55b64befdab8 <col:31> 'void *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b64befd9c0 <col:31> 'void *' lvalue ParmVar 0x55b64befd6d0 'object' 'void *'
|     `-ImplicitCastExpr 0x55b64befdad0 <col:39> 'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64befd9e8 <col:39> 'struct k_thread *' lvalue ParmVar 0x55b64befd758 'thread' 'struct k_thread *'
|-FunctionDecl 0x55b64befdba8 prev 0x55b64beac878 <line:38:1, col:50> col:13 used z_impl_k_object_release 'void (void *)' extern
| `-ParmVarDecl 0x55b64befdb20 <col:37, col:44> col:44 object 'void *'
|-FunctionDecl 0x55b64befdcf0 prev 0x55b64bead108 <line:39:1, line:49:1> line:39:20 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x55b64befdc68 <col:37, col:44> col:44 used object 'void *'
| `-CompoundStmt 0x55b64befdf48 <line:40:1, line:49:1>
|   |-DoStmt 0x55b64befde78 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64befde40 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64befddf0 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64befde58 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64befdf00 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:48:2, col:32> 'void'
|     |-ImplicitCastExpr 0x55b64befdee8 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64befde98 <col:2> 'void (void *)' Function 0x55b64befdba8 'z_impl_k_object_release' 'void (void *)'
|     `-ImplicitCastExpr 0x55b64befdf30 <col:26> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64befdec0 <col:26> 'void *' lvalue ParmVar 0x55b64befdc68 'object' 'void *'
|-FunctionDecl 0x55b64befe018 prev 0x55b64bead610 <line:52:1, col:57> col:15 used z_impl_k_object_alloc 'void *(enum k_objects)' extern
| `-ParmVarDecl 0x55b64befdf88 <col:37, col:52> col:52 otype 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x55b64befe170 prev 0x55b64bead4b8 <line:53:1, line:62:1> line:53:22 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x55b64befe0e0 <col:37, col:52> col:52 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x55b64beff790 <line:54:1, line:62:1>
|   |-DoStmt 0x55b64befe2f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64befe2c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64befe270 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64befe2d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64beff778 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:61:2, col:36>
|     `-CallExpr 0x55b64beff730 <col:9, col:36> 'void *'
|       |-ImplicitCastExpr 0x55b64beff718 <col:9> 'void *(*)(enum k_objects)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64befe318 <col:9> 'void *(enum k_objects)' Function 0x55b64befe018 'z_impl_k_object_alloc' 'void *(enum k_objects)'
|       `-ImplicitCastExpr 0x55b64beff760 <col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|         `-DeclRefExpr 0x55b64befe340 <col:31> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x55b64befe0e0 'otype' 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x55b64beffcb8 <line:65:1, col:207> col:16 used z_impl_k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' extern
| |-ParmVarDecl 0x55b64beff7d8 <col:39, col:57> col:57 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x55b64beff848 <col:69, col:88> col:88 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55b64beff8b8 <col:95, col:102> col:102 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64beff928 <col:114, col:131> col:131 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x55b64beff9a0 <col:138, col:145> col:145 p1 'void *'
| |-ParmVarDecl 0x55b64beffa18 <col:149, col:156> col:156 p2 'void *'
| |-ParmVarDecl 0x55b64beffa90 <col:160, col:167> col:167 p3 'void *'
| |-ParmVarDecl 0x55b64beffb08 <col:171, col:175> col:175 prio 'int'
| |-ParmVarDecl 0x55b64beffb78 <col:181, col:187> col:187 options 'u32_t':'unsigned int'
| `-ParmVarDecl 0x55b64beffbe8 <col:196, col:202> col:202 delay 's32_t':'int'
|-FunctionDecl 0x55b64bf002b0 prev 0x55b64beb5000 <line:66:1, line:82:1> line:66:23 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x55b64beffdd0 <col:39, col:57> col:57 used new_thread 'struct k_thread *'
| |-ParmVarDecl 0x55b64beffe40 <col:69, col:88> col:88 used stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55b64beffeb0 <col:95, col:102> col:102 used stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64befff20 <col:114, col:131> col:131 used entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x55b64befff98 <col:138, col:145> col:145 used p1 'void *'
| |-ParmVarDecl 0x55b64bf00010 <col:149, col:156> col:156 used p2 'void *'
| |-ParmVarDecl 0x55b64bf00088 <col:160, col:167> col:167 used p3 'void *'
| |-ParmVarDecl 0x55b64bf00100 <col:171, col:175> col:175 used prio 'int'
| |-ParmVarDecl 0x55b64bf00170 <col:181, col:187> col:187 used options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55b64bf001e0 <col:196, col:202> col:202 used delay 's32_t':'int'
| `-CompoundStmt 0x55b64bf00860 <line:67:1, line:82:1>
|   |-DoStmt 0x55b64bf00480 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf00448 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf003f8 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf00460 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf00848 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:81:2, col:102>
|     `-CallExpr 0x55b64bf006d0 <col:9, col:102> 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x55b64bf006b8 <col:9> 'k_tid_t (*)(struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf004a0 <col:9> 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' Function 0x55b64beffcb8 'z_impl_k_thread_create' 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)'
|       |-ImplicitCastExpr 0x55b64bf00758 <col:32> 'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf004c8 <col:32> 'struct k_thread *' lvalue ParmVar 0x55b64beffdd0 'new_thread' 'struct k_thread *'
|       |-ImplicitCastExpr 0x55b64bf00770 <col:44> 'k_thread_stack_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf004f0 <col:44> 'k_thread_stack_t *' lvalue ParmVar 0x55b64beffe40 'stack' 'k_thread_stack_t *'
|       |-ImplicitCastExpr 0x55b64bf00788 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf00518 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x55b64beffeb0 'stack_size' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x55b64bf007a0 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf00540 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' lvalue ParmVar 0x55b64befff20 'entry' 'k_thread_entry_t':'void (*)(void *, void *, void *)'
|       |-ImplicitCastExpr 0x55b64bf007b8 <col:70> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf00568 <col:70> 'void *' lvalue ParmVar 0x55b64befff98 'p1' 'void *'
|       |-ImplicitCastExpr 0x55b64bf007d0 <col:74> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf00590 <col:74> 'void *' lvalue ParmVar 0x55b64bf00010 'p2' 'void *'
|       |-ImplicitCastExpr 0x55b64bf007e8 <col:78> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf005b8 <col:78> 'void *' lvalue ParmVar 0x55b64bf00088 'p3' 'void *'
|       |-ImplicitCastExpr 0x55b64bf00800 <col:82> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf005e0 <col:82> 'int' lvalue ParmVar 0x55b64bf00100 'prio' 'int'
|       |-ImplicitCastExpr 0x55b64bf00818 <col:88> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf00608 <col:88> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64bf00170 'options' 'u32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55b64bf00830 <col:97> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf00630 <col:97> 's32_t':'int' lvalue ParmVar 0x55b64bf001e0 'delay' 's32_t':'int'
|-FunctionDecl 0x55b64bf00918 <line:85:1, col:37> col:14 used z_impl_k_sleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x55b64bf00890 <col:29, col:35> col:35 ms 's32_t':'int'
|-FunctionDecl 0x55b64bf00a58 prev 0x55b64beb5a30 <line:86:1, line:95:1> line:86:21 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x55b64bf009d0 <col:29, col:35> col:35 used ms 's32_t':'int'
| `-CompoundStmt 0x55b64bf00d20 <line:87:1, line:95:1>
|   |-DoStmt 0x55b64bf00be0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf00ba8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf00b58 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf00bc0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf00d08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:94:2, col:26>
|     `-CallExpr 0x55b64bf00cc0 <col:9, col:26> 's32_t':'int'
|       |-ImplicitCastExpr 0x55b64bf00ca8 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf00c00 <col:9> 's32_t (s32_t)' Function 0x55b64bf00918 'z_impl_k_sleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x55b64bf00cf0 <col:24> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf00c28 <col:24> 's32_t':'int' lvalue ParmVar 0x55b64bf009d0 'ms' 's32_t':'int'
|-FunctionDecl 0x55b64bf00dd8 <line:98:1, col:38> col:14 used z_impl_k_usleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x55b64bf00d50 <col:30, col:36> col:36 us 's32_t':'int'
|-FunctionDecl 0x55b64bf00f18 prev 0x55b64beb5ba0 <line:99:1, line:108:1> line:99:21 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x55b64bf00e90 <col:30, col:36> col:36 used us 's32_t':'int'
| `-CompoundStmt 0x55b64bf01188 <line:100:1, line:108:1>
|   |-DoStmt 0x55b64bf010a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf01068 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf01018 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf01080 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf01170 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:107:2, col:27>
|     `-CallExpr 0x55b64bf01128 <col:9, col:27> 's32_t':'int'
|       |-ImplicitCastExpr 0x55b64bf01110 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf010c0 <col:9> 's32_t (s32_t)' Function 0x55b64bf00dd8 'z_impl_k_usleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x55b64bf01158 <col:25> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf010e8 <col:25> 's32_t':'int' lvalue ParmVar 0x55b64bf00e90 'us' 's32_t':'int'
|-FunctionDecl 0x55b64bf01240 <line:111:1, col:50> col:13 used z_impl_k_busy_wait 'void (u32_t)' extern
| `-ParmVarDecl 0x55b64bf011b8 <col:32, col:38> col:38 usec_to_wait 'u32_t':'unsigned int'
|-FunctionDecl 0x55b64bf01380 prev 0x55b64beb5d50 <line:112:1, line:122:1> line:112:20 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x55b64bf012f8 <col:32, col:38> col:38 used usec_to_wait 'u32_t':'unsigned int'
| `-CompoundStmt 0x55b64bf01608 <line:113:1, line:122:1>
|   |-DoStmt 0x55b64bf01508 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf014d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf01480 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf014e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf015c0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:121:2, col:33> 'void'
|     |-ImplicitCastExpr 0x55b64bf015a8 <col:2> 'void (*)(u32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf01528 <col:2> 'void (u32_t)' Function 0x55b64bf01240 'z_impl_k_busy_wait' 'void (u32_t)'
|     `-ImplicitCastExpr 0x55b64bf015f0 <col:21> 'u32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf01550 <col:21> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64bf012f8 'usec_to_wait' 'u32_t':'unsigned int'
|-FunctionDecl 0x55b64bf01648 <line:125:1, col:28> col:13 used z_impl_k_yield 'void ()' extern
|-FunctionDecl 0x55b64bf01730 prev 0x55b64beb5eb8 <line:126:1, line:136:1> line:126:20 k_yield 'void (void)' static inline
| `-CompoundStmt 0x55b64bf01968 <line:127:1, line:136:1>
|   |-DoStmt 0x55b64bf018b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf01878 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf01828 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf01890 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf01940 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:135:2, col:17> 'void'
|     `-ImplicitCastExpr 0x55b64bf01928 <col:2> 'void (*)()' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x55b64bf018d0 <col:2> 'void ()' Function 0x55b64bf01648 'z_impl_k_yield' 'void ()'
|-FunctionDecl 0x55b64bf01a20 <line:139:1, col:43> col:13 used z_impl_k_wakeup 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55b64bf01998 <col:29, col:37> col:37 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55b64bf01b60 prev 0x55b64beb60b0 <line:140:1, line:150:1> line:140:20 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55b64bf01ad8 <col:29, col:37> col:37 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55b64bf01e18 <line:141:1, line:150:1>
|   |-DoStmt 0x55b64bf01ce8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf01cb0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf01c60 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf01cc8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf01dd0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:149:2, col:24> 'void'
|     |-ImplicitCastExpr 0x55b64bf01db8 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf01d08 <col:2> 'void (k_tid_t)' Function 0x55b64bf01a20 'z_impl_k_wakeup' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55b64bf01e00 <col:18> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf01d30 <col:18> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55b64bf01ad8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55b64bf01eb8 <line:153:1, col:37> col:16 used z_impl_k_current_get 'k_tid_t ()' extern
|-FunctionDecl 0x55b64bf01f78 prev 0x55b64beb6280 <line:154:1, line:163:1> line:154:23 k_current_get 'k_tid_t (void)' static inline
| `-CompoundStmt 0x55b64bf021f0 <line:155:1, line:163:1>
|   |-DoStmt 0x55b64bf020f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf020c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf02070 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf020d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf021d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:162:2, col:30>
|     `-CallExpr 0x55b64bf021b0 <col:9, col:30> 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x55b64bf02198 <col:9> 'k_tid_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55b64bf02118 <col:9> 'k_tid_t ()' Function 0x55b64bf01eb8 'z_impl_k_current_get' 'k_tid_t ()'
|-FunctionDecl 0x55b64bf022a8 <line:166:1, col:49> col:13 used z_impl_k_thread_abort 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55b64bf02220 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55b64bf023e8 prev 0x55b64beb63e0 <line:167:1, line:177:1> line:167:20 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55b64bf02360 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55b64bf02640 <line:168:1, line:177:1>
|   |-DoStmt 0x55b64bf02570 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf02538 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf024e8 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf02550 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf025f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:176:2, col:30> 'void'
|     |-ImplicitCastExpr 0x55b64bf025e0 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf02590 <col:2> 'void (k_tid_t)' Function 0x55b64bf022a8 'z_impl_k_thread_abort' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55b64bf02628 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf025b8 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55b64bf02360 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55b64bf02720 <line:180:1, col:49> col:13 used z_impl_k_thread_start 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55b64bf02670 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55b64bf02860 prev 0x55b64beb6550 <line:181:1, line:191:1> line:181:20 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55b64bf027d8 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55b64bf02ab8 <line:182:1, line:191:1>
|   |-DoStmt 0x55b64bf029e8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf029b0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf02960 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf029c8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf02a70 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:190:2, col:30> 'void'
|     |-ImplicitCastExpr 0x55b64bf02a58 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf02a08 <col:2> 'void (k_tid_t)' Function 0x55b64bf02720 'z_impl_k_thread_start' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55b64bf02aa0 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf02a30 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55b64bf027d8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55b64bf02b78 <line:194:1, col:55> col:12 used z_impl_k_thread_priority_get 'int (k_tid_t)' extern
| `-ParmVarDecl 0x55b64bf02ae8 <col:41, col:49> col:49 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55b64bf02cc0 prev 0x55b64beb6d78 <line:195:1, line:204:1> line:195:19 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x55b64bf02c30 <col:41, col:49> col:49 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55b64bf02f90 <line:196:1, line:204:1>
|   |-DoStmt 0x55b64bf02e48 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf02e10 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf02dc0 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf02e28 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf02f78 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:203:2, col:44>
|     `-CallExpr 0x55b64bf02f30 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x55b64bf02f18 <col:9> 'int (*)(k_tid_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf02e68 <col:9> 'int (k_tid_t)' Function 0x55b64bf02b78 'z_impl_k_thread_priority_get' 'int (k_tid_t)'
|       `-ImplicitCastExpr 0x55b64bf02f60 <col:38> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf02e90 <col:38> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55b64bf02c30 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55b64bf030c8 <line:207:1, col:66> col:13 used z_impl_k_thread_priority_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x55b64bf02fc0 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x55b64bf03038 <col:58, col:62> col:62 prio 'int'
|-FunctionDecl 0x55b64bf03290 prev 0x55b64beb76d0 <line:208:1, line:218:1> line:208:20 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x55b64bf03188 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55b64bf03200 <col:58, col:62> col:62 used prio 'int'
| `-CompoundStmt 0x55b64bf03598 <line:209:1, line:218:1>
|   |-DoStmt 0x55b64bf03420 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf033e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf03398 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf03400 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf03530 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:217:2, col:43> 'void'
|     |-ImplicitCastExpr 0x55b64bf03518 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf03440 <col:2> 'void (k_tid_t, int)' Function 0x55b64bf030c8 'z_impl_k_thread_priority_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x55b64bf03568 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b64bf03468 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55b64bf03188 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x55b64bf03580 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf03490 <col:39> 'int' lvalue ParmVar 0x55b64bf03200 'prio' 'int'
|-FunctionDecl 0x55b64bf03730 <line:221:1, col:70> col:13 used z_impl_k_thread_deadline_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x55b64bf035c8 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x55b64bf03640 <col:58, col:62> col:62 deadline 'int'
|-FunctionDecl 0x55b64bf038f8 <line:222:1, line:232:1> line:222:20 k_thread_deadline_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x55b64bf037f0 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55b64bf03868 <col:58, col:62> col:62 used deadline 'int'
| `-CompoundStmt 0x55b64bf03ba0 <line:223:1, line:232:1>
|   |-DoStmt 0x55b64bf03a88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf03a50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf03a00 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf03a68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf03b38 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:231:2, col:47> 'void'
|     |-ImplicitCastExpr 0x55b64bf03b20 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf03aa8 <col:2> 'void (k_tid_t, int)' Function 0x55b64bf03730 'z_impl_k_thread_deadline_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x55b64bf03b70 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b64bf03ad0 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55b64bf037f0 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x55b64bf03b88 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf03af8 <col:39> 'int' lvalue ParmVar 0x55b64bf03868 'deadline' 'int'
|-FunctionDecl 0x55b64bf03c58 <line:235:1, col:51> col:13 used z_impl_k_thread_suspend 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55b64bf03bd0 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55b64bf03d98 prev 0x55b64beb7840 <line:236:1, line:246:1> line:236:20 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55b64bf03d10 <col:37, col:45> col:45 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55b64bf03ff0 <line:237:1, line:246:1>
|   |-DoStmt 0x55b64bf03f20 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf03ee8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf03e98 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf03f00 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf03fa8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:245:2, col:32> 'void'
|     |-ImplicitCastExpr 0x55b64bf03f90 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf03f40 <col:2> 'void (k_tid_t)' Function 0x55b64bf03c58 'z_impl_k_thread_suspend' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55b64bf03fd8 <col:26> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf03f68 <col:26> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55b64bf03d10 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55b64bf040a8 <line:249:1, col:50> col:13 used z_impl_k_thread_resume 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55b64bf04020 <col:36, col:44> col:44 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55b64bf041e8 prev 0x55b64beb79b0 <line:250:1, line:260:1> line:250:20 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55b64bf04160 <col:36, col:44> col:44 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55b64bf04440 <line:251:1, line:260:1>
|   |-DoStmt 0x55b64bf04370 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf04338 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf042e8 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf04350 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf043f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:259:2, col:31> 'void'
|     |-ImplicitCastExpr 0x55b64bf043e0 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf04390 <col:2> 'void (k_tid_t)' Function 0x55b64bf040a8 'z_impl_k_thread_resume' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55b64bf04428 <col:25> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf043b8 <col:25> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55b64bf04160 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55b64bf044b0 <line:263:1, col:39> col:12 used z_impl_k_is_preempt_thread 'int ()' extern
|-FunctionDecl 0x55b64bf04578 prev 0x55b64beb7f50 <line:264:1, line:273:1> line:264:19 k_is_preempt_thread 'int (void)' static inline
| `-CompoundStmt 0x55b64bf047f0 <line:265:1, line:273:1>
|   |-DoStmt 0x55b64bf046f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf046c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf04670 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf046d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf047d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:272:2, col:36>
|     `-CallExpr 0x55b64bf047b0 <col:9, col:36> 'int'
|       `-ImplicitCastExpr 0x55b64bf04798 <col:9> 'int (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55b64bf04740 <col:9> 'int ()' Function 0x55b64bf044b0 'z_impl_k_is_preempt_thread' 'int ()'
|-FunctionDecl 0x55b64bf048b0 <line:276:1, col:57> col:13 used z_impl_k_thread_custom_data_set 'void (void *)' extern
| `-ParmVarDecl 0x55b64bf04828 <col:45, col:52> col:52 value 'void *'
|-FunctionDecl 0x55b64bf049f8 prev 0x55b64beb86e0 <line:277:1, line:287:1> line:277:20 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x55b64bf04970 <col:45, col:52> col:52 used value 'void *'
| `-CompoundStmt 0x55b64bf04c50 <line:278:1, line:287:1>
|   |-DoStmt 0x55b64bf04b80 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf04b48 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf04af8 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf04b60 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf04c08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:286:2, col:39> 'void'
|     |-ImplicitCastExpr 0x55b64bf04bf0 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf04ba0 <col:2> 'void (void *)' Function 0x55b64bf048b0 'z_impl_k_thread_custom_data_set' 'void (void *)'
|     `-ImplicitCastExpr 0x55b64bf04c38 <col:34> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf04bc8 <col:34> 'void *' lvalue ParmVar 0x55b64bf04970 'value' 'void *'
|-FunctionDecl 0x55b64bf04cc0 <line:290:1, col:47> col:15 used z_impl_k_thread_custom_data_get 'void *()' extern
|-FunctionDecl 0x55b64bf04d88 prev 0x55b64beb8888 <line:291:1, line:300:1> line:291:22 k_thread_custom_data_get 'void *(void)' static inline
| `-CompoundStmt 0x55b64bf04fd0 <line:292:1, line:300:1>
|   |-DoStmt 0x55b64bf04f08 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf04ed0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf04e80 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf04ee8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf04fb8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:299:2, col:41>
|     `-CallExpr 0x55b64bf04f90 <col:9, col:41> 'void *'
|       `-ImplicitCastExpr 0x55b64bf04f78 <col:9> 'void *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55b64bf04f28 <col:9> 'void *()' Function 0x55b64bf04cc0 'z_impl_k_thread_custom_data_get' 'void *()'
|-FunctionDecl 0x55b64bf05110 <line:303:1, col:74> col:12 used z_impl_k_thread_name_set 'int (k_tid_t, const char *)' extern
| |-ParmVarDecl 0x55b64bf05000 <col:37, col:45> col:45 thread_id 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x55b64bf05078 <col:56, col:69> col:69 value 'const char *'
|-FunctionDecl 0x55b64bf052e0 prev 0x55b64beb8af8 <line:304:1, line:313:1> line:304:19 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x55b64bf051d0 <col:37, col:45> col:45 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55b64bf05248 <col:56, col:69> col:69 used value 'const char *'
| `-CompoundStmt 0x55b64bf05600 <line:305:1, line:313:1>
|   |-DoStmt 0x55b64bf05470 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf05438 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf053e8 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf05450 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf055e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:312:2, col:50>
|     `-CallExpr 0x55b64bf05580 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x55b64bf05568 <col:9> 'int (*)(k_tid_t, const char *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf05490 <col:9> 'int (k_tid_t, const char *)' Function 0x55b64bf05110 'z_impl_k_thread_name_set' 'int (k_tid_t, const char *)'
|       |-ImplicitCastExpr 0x55b64bf055b8 <col:34> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf054b8 <col:34> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55b64bf051d0 'thread_id' 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x55b64bf055d0 <col:45> 'const char *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf054e0 <col:45> 'const char *' lvalue ParmVar 0x55b64bf05248 'value' 'const char *'
|-FunctionDecl 0x55b64bf057f0 <line:316:1, col:80> col:12 used z_impl_k_thread_name_copy 'int (k_tid_t, char *, size_t)' extern
| |-ParmVarDecl 0x55b64bf05630 <col:38, col:46> col:46 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55b64bf056a8 <col:57, col:64> col:64 buf 'char *'
| `-ParmVarDecl 0x55b64bf05750 <col:69, col:76> col:76 size 'size_t':'unsigned long'
|-FunctionDecl 0x55b64bf05a40 prev 0x55b64beb8ff8 <line:317:1, line:326:1> line:317:19 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x55b64bf058b8 <col:38, col:46> col:46 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55b64bf05930 <col:57, col:64> col:64 used buf 'char *'
| |-ParmVarDecl 0x55b64bf059a0 <col:69, col:76> col:76 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x55b64bf05db0 <line:318:1, line:326:1>
|   |-DoStmt 0x55b64bf05bd8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf05ba0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf05b50 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf05bb8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf05d98 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:325:2, col:55>
|     `-CallExpr 0x55b64bf05d10 <col:9, col:55> 'int'
|       |-ImplicitCastExpr 0x55b64bf05cf8 <col:9> 'int (*)(k_tid_t, char *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf05bf8 <col:9> 'int (k_tid_t, char *, size_t)' Function 0x55b64bf057f0 'z_impl_k_thread_name_copy' 'int (k_tid_t, char *, size_t)'
|       |-ImplicitCastExpr 0x55b64bf05d50 <col:35> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf05c20 <col:35> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55b64bf058b8 'thread_id' 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x55b64bf05d68 <col:46> 'char *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf05c48 <col:46> 'char *' lvalue ParmVar 0x55b64bf05930 'buf' 'char *'
|       `-ImplicitCastExpr 0x55b64bf05d80 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf05c70 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x55b64bf059a0 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x55b64bf05f70 <line:329:1, col:86> col:13 used z_impl_k_timer_start 'void (struct k_timer *, s32_t, s32_t)' extern
| |-ParmVarDecl 0x55b64bf05df8 <col:34, col:51> col:51 timer 'struct k_timer *'
| |-ParmVarDecl 0x55b64bf05e68 <col:58, col:64> col:64 duration 's32_t':'int'
| `-ParmVarDecl 0x55b64bf05ed8 <col:74, col:80> col:80 period 's32_t':'int'
|-FunctionDecl 0x55b64bf061c8 prev 0x55b64bebc450 <line:330:1, line:340:1> line:330:20 used k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x55b64bf06050 <col:34, col:51> col:51 used timer 'struct k_timer *'
| |-ParmVarDecl 0x55b64bf060c0 <col:58, col:64> col:64 used duration 's32_t':'int'
| |-ParmVarDecl 0x55b64bf06130 <col:74, col:80> col:80 used period 's32_t':'int'
| `-CompoundStmt 0x55b64bf06518 <line:331:1, line:340:1>
|   |-DoStmt 0x55b64bf06360 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf06328 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf062d8 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf06340 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf06490 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:339:2, col:46> 'void'
|     |-ImplicitCastExpr 0x55b64bf06478 <col:2> 'void (*)(struct k_timer *, s32_t, s32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf06380 <col:2> 'void (struct k_timer *, s32_t, s32_t)' Function 0x55b64bf05f70 'z_impl_k_timer_start' 'void (struct k_timer *, s32_t, s32_t)'
|     |-ImplicitCastExpr 0x55b64bf064d0 <col:23> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b64bf063a8 <col:23> 'struct k_timer *' lvalue ParmVar 0x55b64bf06050 'timer' 'struct k_timer *'
|     |-ImplicitCastExpr 0x55b64bf064e8 <col:30> 's32_t':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55b64bf063d0 <col:30> 's32_t':'int' lvalue ParmVar 0x55b64bf060c0 'duration' 's32_t':'int'
|     `-ImplicitCastExpr 0x55b64bf06500 <col:40> 's32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf063f8 <col:40> 's32_t':'int' lvalue ParmVar 0x55b64bf06130 'period' 's32_t':'int'
|-FunctionDecl 0x55b64bf065e8 <line:343:1, col:55> col:13 used z_impl_k_timer_stop 'void (struct k_timer *)' extern
| `-ParmVarDecl 0x55b64bf06560 <col:33, col:50> col:50 timer 'struct k_timer *'
|-FunctionDecl 0x55b64bf06f70 prev 0x55b64bebc5e8 <line:344:1, line:354:1> line:344:20 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x55b64bf066b8 <col:33, col:50> col:50 used timer 'struct k_timer *'
| `-CompoundStmt 0x55b64bf071f8 <line:345:1, line:354:1>
|   |-DoStmt 0x55b64bf070f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf070c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf07070 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf070d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf071b0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:353:2, col:27> 'void'
|     |-ImplicitCastExpr 0x55b64bf07198 <col:2> 'void (*)(struct k_timer *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf07118 <col:2> 'void (struct k_timer *)' Function 0x55b64bf065e8 'z_impl_k_timer_stop' 'void (struct k_timer *)'
|     `-ImplicitCastExpr 0x55b64bf071e0 <col:22> 'struct k_timer *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf07140 <col:22> 'struct k_timer *' lvalue ParmVar 0x55b64bf066b8 'timer' 'struct k_timer *'
|-FunctionDecl 0x55b64bf072c8 <line:357:1, col:62> col:14 used z_impl_k_timer_status_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x55b64bf07240 <col:40, col:57> col:57 timer 'struct k_timer *'
|-FunctionDecl 0x55b64bf07420 prev 0x55b64bebd070 <line:358:1, line:367:1> line:358:21 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55b64bf07398 <col:40, col:57> col:57 used timer 'struct k_timer *'
| `-CompoundStmt 0x55b64bf076f0 <line:359:1, line:367:1>
|   |-DoStmt 0x55b64bf075a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf07570 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf07520 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf07588 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf076d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:366:2, col:40>
|     `-CallExpr 0x55b64bf07690 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55b64bf07678 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf075c8 <col:9> 'u32_t (struct k_timer *)' Function 0x55b64bf072c8 'z_impl_k_timer_status_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x55b64bf076c0 <col:35> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf075f0 <col:35> 'struct k_timer *' lvalue ParmVar 0x55b64bf07398 'timer' 'struct k_timer *'
|-FunctionDecl 0x55b64bf077c0 <line:370:1, col:63> col:14 used z_impl_k_timer_status_sync 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x55b64bf07738 <col:41, col:58> col:58 timer 'struct k_timer *'
|-FunctionDecl 0x55b64bf07918 prev 0x55b64bebd1f8 <line:371:1, line:380:1> line:371:21 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55b64bf07890 <col:41, col:58> col:58 used timer 'struct k_timer *'
| `-CompoundStmt 0x55b64bf07b88 <line:372:1, line:380:1>
|   |-DoStmt 0x55b64bf07aa0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf07a68 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf07a18 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf07a80 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf07b70 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:379:2, col:41>
|     `-CallExpr 0x55b64bf07b28 <col:9, col:41> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55b64bf07b10 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf07ac0 <col:9> 'u32_t (struct k_timer *)' Function 0x55b64bf077c0 'z_impl_k_timer_status_sync' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x55b64bf07b58 <col:36> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf07ae8 <col:36> 'struct k_timer *' lvalue ParmVar 0x55b64bf07890 'timer' 'struct k_timer *'
|-FunctionDecl 0x55b64bf07c58 prev 0x55b64bebd6b0 <line:383:1, col:65> col:14 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x55b64bf07bd0 <col:43, col:60> col:60 timer 'struct k_timer *'
|-FunctionDecl 0x55b64bf07db0 prev 0x55b64bebd558 <line:384:1, line:393:1> line:384:21 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55b64bf07d28 <col:43, col:60> col:60 used timer 'struct k_timer *'
| `-CompoundStmt 0x55b64bf08048 <line:385:1, line:393:1>
|   |-DoStmt 0x55b64bf07f38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf07f00 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf07eb0 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf07f18 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf08030 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:392:2, col:43>
|     `-CallExpr 0x55b64bf07fe8 <col:9, col:43> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55b64bf07fd0 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf07f80 <col:9> 'u32_t (struct k_timer *)' Function 0x55b64bf07c58 'z_impl_k_timer_remaining_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x55b64bf08018 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf07fa8 <col:38> 'struct k_timer *' lvalue ParmVar 0x55b64bf07d28 'timer' 'struct k_timer *'
|-FunctionDecl 0x55b64bf08198 prev 0x55b64bebe438 <line:396:1, col:82> col:13 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' extern
| |-ParmVarDecl 0x55b64bf08090 <col:42, col:59> col:59 timer 'struct k_timer *'
| `-ParmVarDecl 0x55b64bf08108 <col:66, col:73> col:73 user_data 'void *'
|-FunctionDecl 0x55b64bf08378 prev 0x55b64bebde10 <line:397:1, line:407:1> line:397:20 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x55b64bf08270 <col:42, col:59> col:59 used timer 'struct k_timer *'
| |-ParmVarDecl 0x55b64bf082e8 <col:66, col:73> col:73 used user_data 'void *'
| `-CompoundStmt 0x55b64bf08678 <line:398:1, line:407:1>
|   |-DoStmt 0x55b64bf08508 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf084d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf08480 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf084e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf08610 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:406:2, col:47> 'void'
|     |-ImplicitCastExpr 0x55b64bf085f8 <col:2> 'void (*)(struct k_timer *, void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf08528 <col:2> 'void (struct k_timer *, void *)' Function 0x55b64bf08198 'z_impl_k_timer_user_data_set' 'void (struct k_timer *, void *)'
|     |-ImplicitCastExpr 0x55b64bf08648 <col:31> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b64bf08550 <col:31> 'struct k_timer *' lvalue ParmVar 0x55b64bf08270 'timer' 'struct k_timer *'
|     `-ImplicitCastExpr 0x55b64bf08660 <col:38> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf08578 <col:38> 'void *' lvalue ParmVar 0x55b64bf082e8 'user_data' 'void *'
|-FunctionDecl 0x55b64bf08750 prev 0x55b64bebe8a8 <line:410:1, col:66> col:15 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' extern
| `-ParmVarDecl 0x55b64bf086c0 <col:44, col:61> col:61 timer 'struct k_timer *'
|-FunctionDecl 0x55b64bf088b0 prev 0x55b64bebe748 <line:411:1, line:420:1> line:411:22 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x55b64bf08820 <col:44, col:61> col:61 used timer 'struct k_timer *'
| `-CompoundStmt 0x55b64bf08b80 <line:412:1, line:420:1>
|   |-DoStmt 0x55b64bf08a38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf08a00 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf089b0 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf08a18 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf08b68 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:419:2, col:43>
|     `-CallExpr 0x55b64bf08b20 <col:9, col:43> 'void *'
|       |-ImplicitCastExpr 0x55b64bf08b08 <col:9> 'void *(*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf08a58 <col:9> 'void *(struct k_timer *)' Function 0x55b64bf08750 'z_impl_k_timer_user_data_get' 'void *(struct k_timer *)'
|       `-ImplicitCastExpr 0x55b64bf08b50 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf08a80 <col:38> 'struct k_timer *' lvalue ParmVar 0x55b64bf08820 'timer' 'struct k_timer *'
|-FunctionDecl 0x55b64bf08c18 <line:423:1, col:34> col:14 used z_impl_k_uptime_get 's64_t ()' extern
|-FunctionDecl 0x55b64bf08cd8 prev 0x55b64bebeb30 <line:424:1, line:435:1> line:424:21 used k_uptime_get 's64_t (void)' static inline
| `-CompoundStmt 0x55b64bf08f50 <line:425:1, line:435:1>
|   |-DoStmt 0x55b64bf08e58 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf08e20 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf08dd0 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf08e38 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf08f38 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:434:2, col:29>
|     `-CallExpr 0x55b64bf08f10 <col:9, col:29> 's64_t':'long long'
|       `-ImplicitCastExpr 0x55b64bf08ef8 <col:9> 's64_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55b64bf08e78 <col:9> 's64_t ()' Function 0x55b64bf08c18 'z_impl_k_uptime_get' 's64_t ()'
|-FunctionDecl 0x55b64bf09040 <line:438:1, col:55> col:13 used z_impl_k_queue_init 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x55b64bf08fb8 <col:33, col:50> col:50 queue 'struct k_queue *'
|-FunctionDecl 0x55b64bf09198 prev 0x55b64bec1010 <line:439:1, line:449:1> line:439:20 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x55b64bf09110 <col:33, col:50> col:50 used queue 'struct k_queue *'
| `-CompoundStmt 0x55b64bf09448 <line:440:1, line:449:1>
|   |-DoStmt 0x55b64bf09320 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf092e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf09298 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf09300 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf09400 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:448:2, col:27> 'void'
|     |-ImplicitCastExpr 0x55b64bf093e8 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf09340 <col:2> 'void (struct k_queue *)' Function 0x55b64bf09040 'z_impl_k_queue_init' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x55b64bf09430 <col:22> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf09368 <col:22> 'struct k_queue *' lvalue ParmVar 0x55b64bf09110 'queue' 'struct k_queue *'
|-FunctionDecl 0x55b64bf09518 <line:452:1, col:62> col:13 used z_impl_k_queue_cancel_wait 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x55b64bf09490 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x55b64bf09670 prev 0x55b64bec1198 <line:453:1, line:463:1> line:453:20 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x55b64bf095e8 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x55b64bf098c8 <line:454:1, line:463:1>
|   |-DoStmt 0x55b64bf097f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf097c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf09770 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf097d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf09880 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:462:2, col:34> 'void'
|     |-ImplicitCastExpr 0x55b64bf09868 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf09818 <col:2> 'void (struct k_queue *)' Function 0x55b64bf09518 'z_impl_k_queue_cancel_wait' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x55b64bf098b0 <col:29> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf09840 <col:29> 'struct k_queue *' lvalue ParmVar 0x55b64bf095e8 'queue' 'struct k_queue *'
|-FunctionDecl 0x55b64bf09a18 <line:466:1, col:77> col:14 used z_impl_k_queue_alloc_append 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x55b64bf09910 <col:42, col:59> col:59 queue 'struct k_queue *'
| `-ParmVarDecl 0x55b64bf09988 <col:66, col:73> col:73 data 'void *'
|-FunctionDecl 0x55b64bf09bf8 prev 0x55b64bec16b0 <line:467:1, line:476:1> line:467:21 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55b64bf09af0 <col:42, col:59> col:59 used queue 'struct k_queue *'
| |-ParmVarDecl 0x55b64bf09b68 <col:66, col:73> col:73 used data 'void *'
| `-CompoundStmt 0x55b64bf09eb8 <line:468:1, line:476:1>
|   |-DoStmt 0x55b64bf09d88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf09d50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf09d00 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf09d68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf09ea0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:475:2, col:48>
|     `-CallExpr 0x55b64bf09e38 <col:9, col:48> 's32_t':'int'
|       |-ImplicitCastExpr 0x55b64bf09e20 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf09da8 <col:9> 's32_t (struct k_queue *, void *)' Function 0x55b64bf09a18 'z_impl_k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x55b64bf09e70 <col:37> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf09dd0 <col:37> 'struct k_queue *' lvalue ParmVar 0x55b64bf09af0 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x55b64bf09e88 <col:44> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf09df8 <col:44> 'void *' lvalue ParmVar 0x55b64bf09b68 'data' 'void *'
|-FunctionDecl 0x55b64bf0a030 <line:479:1, col:78> col:14 used z_impl_k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x55b64bf09f00 <col:43, col:60> col:60 queue 'struct k_queue *'
| `-ParmVarDecl 0x55b64bf09fa0 <col:67, col:74> col:74 data 'void *'
|-FunctionDecl 0x55b64bf0a210 prev 0x55b64bec1ac8 <line:480:1, line:489:1> line:480:21 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55b64bf0a108 <col:43, col:60> col:60 used queue 'struct k_queue *'
| |-ParmVarDecl 0x55b64bf0a180 <col:67, col:74> col:74 used data 'void *'
| `-CompoundStmt 0x55b64bf0a4d0 <line:481:1, line:489:1>
|   |-DoStmt 0x55b64bf0a3a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf0a368 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf0a318 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf0a380 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf0a4b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:488:2, col:49>
|     `-CallExpr 0x55b64bf0a450 <col:9, col:49> 's32_t':'int'
|       |-ImplicitCastExpr 0x55b64bf0a438 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf0a3c0 <col:9> 's32_t (struct k_queue *, void *)' Function 0x55b64bf0a030 'z_impl_k_queue_alloc_prepend' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x55b64bf0a488 <col:38> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf0a3e8 <col:38> 'struct k_queue *' lvalue ParmVar 0x55b64bf0a108 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x55b64bf0a4a0 <col:45> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf0a410 <col:45> 'void *' lvalue ParmVar 0x55b64bf0a180 'data' 'void *'
|-FunctionDecl 0x55b64bf0a620 <line:492:1, col:71> col:15 used z_impl_k_queue_get 'void *(struct k_queue *, s32_t)' extern
| |-ParmVarDecl 0x55b64bf0a518 <col:34, col:51> col:51 queue 'struct k_queue *'
| `-ParmVarDecl 0x55b64bf0a588 <col:58, col:64> col:64 timeout 's32_t':'int'
|-FunctionDecl 0x55b64bf0a800 prev 0x55b64bec2668 <line:493:1, line:502:1> line:493:22 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x55b64bf0a6f8 <col:34, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x55b64bf0a768 <col:58, col:64> col:64 used timeout 's32_t':'int'
| `-CompoundStmt 0x55b64bf0ab20 <line:494:1, line:502:1>
|   |-DoStmt 0x55b64bf0a990 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf0a958 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf0a908 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf0a970 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf0ab08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:501:2, col:42>
|     `-CallExpr 0x55b64bf0aaa0 <col:9, col:42> 'void *'
|       |-ImplicitCastExpr 0x55b64bf0aa88 <col:9> 'void *(*)(struct k_queue *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf0a9b0 <col:9> 'void *(struct k_queue *, s32_t)' Function 0x55b64bf0a620 'z_impl_k_queue_get' 'void *(struct k_queue *, s32_t)'
|       |-ImplicitCastExpr 0x55b64bf0aad8 <col:28> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf0a9d8 <col:28> 'struct k_queue *' lvalue ParmVar 0x55b64bf0a6f8 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x55b64bf0aaf0 <col:35> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf0aa00 <col:35> 's32_t':'int' lvalue ParmVar 0x55b64bf0a768 'timeout' 's32_t':'int'
|-FunctionDecl 0x55b64bf0abf8 prev 0x55b64bec3838 <line:505:1, col:58> col:12 used z_impl_k_queue_is_empty 'int (struct k_queue *)' extern
| `-ParmVarDecl 0x55b64bf0ab68 <col:36, col:53> col:53 queue 'struct k_queue *'
|-FunctionDecl 0x55b64bf0ad58 prev 0x55b64bec36d8 <line:506:1, line:515:1> line:506:19 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x55b64bf0acc8 <col:36, col:53> col:53 used queue 'struct k_queue *'
| `-CompoundStmt 0x55b64bf0b050 <line:507:1, line:515:1>
|   |-DoStmt 0x55b64bf0aee0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf0aea8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf0ae58 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf0aec0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf0b038 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:514:2, col:38>
|     `-CallExpr 0x55b64bf0aff0 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x55b64bf0afd8 <col:9> 'int (*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf0af00 <col:9> 'int (struct k_queue *)' Function 0x55b64bf0abf8 'z_impl_k_queue_is_empty' 'int (struct k_queue *)'
|       `-ImplicitCastExpr 0x55b64bf0b020 <col:33> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf0af28 <col:33> 'struct k_queue *' lvalue ParmVar 0x55b64bf0acc8 'queue' 'struct k_queue *'
|-FunctionDecl 0x55b64bf0b128 prev 0x55b64bec4690 <line:518:1, col:62> col:15 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x55b64bf0b098 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x55b64bf0b288 prev 0x55b64bec4530 <line:519:1, line:528:1> line:519:22 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55b64bf0b1f8 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x55b64bf0b550 <line:520:1, line:528:1>
|   |-DoStmt 0x55b64bf0b410 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf0b3d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf0b388 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf0b3f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf0b538 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:527:2, col:39>
|     `-CallExpr 0x55b64bf0b4f0 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x55b64bf0b4d8 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf0b430 <col:9> 'void *(struct k_queue *)' Function 0x55b64bf0b128 'z_impl_k_queue_peek_head' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x55b64bf0b520 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf0b458 <col:34> 'struct k_queue *' lvalue ParmVar 0x55b64bf0b1f8 'queue' 'struct k_queue *'
|-FunctionDecl 0x55b64bf0b628 prev 0x55b64bec4bc8 <line:531:1, col:62> col:15 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x55b64bf0b598 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x55b64bf0b788 prev 0x55b64bec4a68 <line:532:1, line:541:1> line:532:22 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55b64bf0b6f8 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x55b64bf0b9f8 <line:533:1, line:541:1>
|   |-DoStmt 0x55b64bf0b910 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf0b8d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf0b888 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf0b8f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf0b9e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:540:2, col:39>
|     `-CallExpr 0x55b64bf0b998 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x55b64bf0b980 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf0b930 <col:9> 'void *(struct k_queue *)' Function 0x55b64bf0b628 'z_impl_k_queue_peek_tail' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x55b64bf0b9c8 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf0b958 <col:34> 'struct k_queue *' lvalue ParmVar 0x55b64bf0b6f8 'queue' 'struct k_queue *'
|-FunctionDecl 0x55b64bf0bcf8 <line:544:1, col:83> col:12 used z_impl_k_futex_wait 'int (struct k_futex *, int, s32_t)' extern
| |-ParmVarDecl 0x55b64bf0bad0 <col:32, col:49> col:49 futex 'struct k_futex *'
| |-ParmVarDecl 0x55b64bf0bb48 <col:56, col:60> col:60 expected 'int'
| `-ParmVarDecl 0x55b64bf0bbb8 <col:70, col:76> col:76 timeout 's32_t':'int'
|-FunctionDecl 0x55b64bf0bfc0 <line:545:1, line:554:1> line:545:19 k_futex_wait 'int (struct k_futex *, int, s32_t)' static inline
| |-ParmVarDecl 0x55b64bf0bdd8 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x55b64bf0be50 <col:56, col:60> col:60 used expected 'int'
| |-ParmVarDecl 0x55b64bf0bec0 <col:70, col:76> col:76 used timeout 's32_t':'int'
| `-CompoundStmt 0x55b64bf0c330 <line:546:1, line:554:1>
|   |-DoStmt 0x55b64bf0c158 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf0c120 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf0c0d0 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf0c138 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf0c318 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:553:2, col:53>
|     `-CallExpr 0x55b64bf0c290 <col:9, col:53> 'int'
|       |-ImplicitCastExpr 0x55b64bf0c278 <col:9> 'int (*)(struct k_futex *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf0c178 <col:9> 'int (struct k_futex *, int, s32_t)' Function 0x55b64bf0bcf8 'z_impl_k_futex_wait' 'int (struct k_futex *, int, s32_t)'
|       |-ImplicitCastExpr 0x55b64bf0c2d0 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf0c1a0 <col:29> 'struct k_futex *' lvalue ParmVar 0x55b64bf0bdd8 'futex' 'struct k_futex *'
|       |-ImplicitCastExpr 0x55b64bf0c2e8 <col:36> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf0c1c8 <col:36> 'int' lvalue ParmVar 0x55b64bf0be50 'expected' 'int'
|       `-ImplicitCastExpr 0x55b64bf0c300 <col:46> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf0c1f0 <col:46> 's32_t':'int' lvalue ParmVar 0x55b64bf0bec0 'timeout' 's32_t':'int'
|-FunctionDecl 0x55b64bf0c508 <line:557:1, col:69> col:12 used z_impl_k_futex_wake 'int (struct k_futex *, bool)' extern
| |-ParmVarDecl 0x55b64bf0c378 <col:32, col:49> col:49 futex 'struct k_futex *'
| `-ParmVarDecl 0x55b64bf0c3e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:557:61> col:61 wake_all 'bool'
|-FunctionDecl 0x55b64bf0c6e8 <line:558:1, line:567:1> line:558:19 k_futex_wake 'int (struct k_futex *, bool)' static inline
| |-ParmVarDecl 0x55b64bf0c5e0 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x55b64bf0c650 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:558:61> col:61 used wake_all 'bool'
| `-CompoundStmt 0x55b64bf0ca00 <line:559:1, line:567:1>
|   |-DoStmt 0x55b64bf0c878 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf0c840 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf0c7f0 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf0c858 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf0c9e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:566:2, col:44>
|     `-CallExpr 0x55b64bf0c980 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x55b64bf0c968 <col:9> 'int (*)(struct k_futex *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf0c898 <col:9> 'int (struct k_futex *, bool)' Function 0x55b64bf0c508 'z_impl_k_futex_wake' 'int (struct k_futex *, bool)'
|       |-ImplicitCastExpr 0x55b64bf0c9b8 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf0c8c0 <col:29> 'struct k_futex *' lvalue ParmVar 0x55b64bf0c5e0 'futex' 'struct k_futex *'
|       `-ImplicitCastExpr 0x55b64bf0c9d0 <col:36> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf0c8e8 <col:36> 'bool' lvalue ParmVar 0x55b64bf0c650 'wake_all' 'bool'
|-FunctionDecl 0x55b64bf0cb48 <line:570:1, col:81> col:14 used z_impl_k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' extern
| |-ParmVarDecl 0x55b64bf0ca48 <col:40, col:57> col:57 stack 'struct k_stack *'
| `-ParmVarDecl 0x55b64bf0cab8 <col:64, col:70> col:70 num_entries 'u32_t':'unsigned int'
|-FunctionDecl 0x55b64bf0cd20 prev 0x55b64bdc2710 <line:571:1, line:580:1> line:571:21 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x55b64bf0cc20 <col:40, col:57> col:57 used stack 'struct k_stack *'
| |-ParmVarDecl 0x55b64bf0cc90 <col:64, col:70> col:70 used num_entries 'u32_t':'unsigned int'
| `-CompoundStmt 0x55b64bf0d050 <line:572:1, line:580:1>
|   |-DoStmt 0x55b64bf0ceb0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf0ce78 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf0ce28 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf0ce90 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf0d038 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:579:2, col:53>
|     `-CallExpr 0x55b64bf0cfd0 <col:9, col:53> 's32_t':'int'
|       |-ImplicitCastExpr 0x55b64bf0cfa8 <col:9> 's32_t (*)(struct k_stack *, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf0ced0 <col:9> 's32_t (struct k_stack *, u32_t)' Function 0x55b64bf0cb48 'z_impl_k_stack_alloc_init' 's32_t (struct k_stack *, u32_t)'
|       |-ImplicitCastExpr 0x55b64bf0d008 <col:35> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf0cef8 <col:35> 'struct k_stack *' lvalue ParmVar 0x55b64bf0cc20 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x55b64bf0d020 <col:42> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf0cf20 <col:42> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64bf0cc90 'num_entries' 'u32_t':'unsigned int'
|-FunctionDecl 0x55b64bf0d1a0 <line:583:1, col:73> col:12 used z_impl_k_stack_push 'int (struct k_stack *, stack_data_t)' extern
| |-ParmVarDecl 0x55b64bf0d098 <col:32, col:49> col:49 stack 'struct k_stack *'
| `-ParmVarDecl 0x55b64bf0d108 <col:56, col:69> col:69 data 'stack_data_t':'unsigned long'
|-FunctionDecl 0x55b64bf0d380 prev 0x55b64bdc2b98 <line:584:1, line:593:1> line:584:19 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x55b64bf0d278 <col:32, col:49> col:49 used stack 'struct k_stack *'
| |-ParmVarDecl 0x55b64bf0d2e8 <col:56, col:69> col:69 used data 'stack_data_t':'unsigned long'
| `-CompoundStmt 0x55b64bf0d6a0 <line:585:1, line:593:1>
|   |-DoStmt 0x55b64bf0d510 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf0d4d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf0d488 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf0d4f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf0d688 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:592:2, col:40>
|     `-CallExpr 0x55b64bf0d620 <col:9, col:40> 'int'
|       |-ImplicitCastExpr 0x55b64bf0d608 <col:9> 'int (*)(struct k_stack *, stack_data_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf0d530 <col:9> 'int (struct k_stack *, stack_data_t)' Function 0x55b64bf0d1a0 'z_impl_k_stack_push' 'int (struct k_stack *, stack_data_t)'
|       |-ImplicitCastExpr 0x55b64bf0d658 <col:29> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf0d558 <col:29> 'struct k_stack *' lvalue ParmVar 0x55b64bf0d278 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x55b64bf0d670 <col:36> 'stack_data_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf0d580 <col:36> 'stack_data_t':'unsigned long' lvalue ParmVar 0x55b64bf0d2e8 'data' 'stack_data_t':'unsigned long'
|-FunctionDecl 0x55b64bf0d868 <line:596:1, col:89> col:12 used z_impl_k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' extern
| |-ParmVarDecl 0x55b64bf0d6e8 <col:31, col:48> col:48 stack 'struct k_stack *'
| |-ParmVarDecl 0x55b64bf0d758 <col:55, col:70> col:70 data 'stack_data_t *'
| `-ParmVarDecl 0x55b64bf0d7c8 <col:76, col:82> col:82 timeout 's32_t':'int'
|-FunctionDecl 0x55b64bf0dac8 prev 0x55b64bdc38a8 <line:597:1, line:606:1> line:597:19 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x55b64bf0d948 <col:31, col:48> col:48 used stack 'struct k_stack *'
| |-ParmVarDecl 0x55b64bf0d9b8 <col:55, col:70> col:70 used data 'stack_data_t *'
| |-ParmVarDecl 0x55b64bf0da28 <col:76, col:82> col:82 used timeout 's32_t':'int'
| `-CompoundStmt 0x55b64bf0de30 <line:598:1, line:606:1>
|   |-DoStmt 0x55b64bf0dc60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf0dc28 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf0dbd8 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf0dc40 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf0de18 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:605:2, col:48>
|     `-CallExpr 0x55b64bf0dd90 <col:9, col:48> 'int'
|       |-ImplicitCastExpr 0x55b64bf0dd78 <col:9> 'int (*)(struct k_stack *, stack_data_t *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf0dc80 <col:9> 'int (struct k_stack *, stack_data_t *, s32_t)' Function 0x55b64bf0d868 'z_impl_k_stack_pop' 'int (struct k_stack *, stack_data_t *, s32_t)'
|       |-ImplicitCastExpr 0x55b64bf0ddd0 <col:28> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf0dca8 <col:28> 'struct k_stack *' lvalue ParmVar 0x55b64bf0d948 'stack' 'struct k_stack *'
|       |-ImplicitCastExpr 0x55b64bf0dde8 <col:35> 'stack_data_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf0dcd0 <col:35> 'stack_data_t *' lvalue ParmVar 0x55b64bf0d9b8 'data' 'stack_data_t *'
|       `-ImplicitCastExpr 0x55b64bf0de00 <col:41> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf0dcf8 <col:41> 's32_t':'int' lvalue ParmVar 0x55b64bf0da28 'timeout' 's32_t':'int'
|-FunctionDecl 0x55b64bf0df08 <line:609:1, col:54> col:12 used z_impl_k_mutex_init 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x55b64bf0de78 <col:32, col:49> col:49 mutex 'struct k_mutex *'
|-FunctionDecl 0x55b64bf0e098 prev 0x55b64bedc008 <line:610:1, line:619:1> line:610:19 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x55b64bf0e008 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x55b64bf0e360 <line:611:1, line:619:1>
|   |-DoStmt 0x55b64bf0e220 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf0e1e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf0e198 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf0e200 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf0e348 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:618:2, col:34>
|     `-CallExpr 0x55b64bf0e300 <col:9, col:34> 'int'
|       |-ImplicitCastExpr 0x55b64bf0e2e8 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf0e240 <col:9> 'int (struct k_mutex *)' Function 0x55b64bf0df08 'z_impl_k_mutex_init' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x55b64bf0e330 <col:29> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf0e268 <col:29> 'struct k_mutex *' lvalue ParmVar 0x55b64bf0e008 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x55b64bf0e4b0 <line:622:1, col:69> col:12 used z_impl_k_mutex_lock 'int (struct k_mutex *, s32_t)' extern
| |-ParmVarDecl 0x55b64bf0e3a8 <col:32, col:49> col:49 mutex 'struct k_mutex *'
| `-ParmVarDecl 0x55b64bf0e418 <col:56, col:62> col:62 timeout 's32_t':'int'
|-FunctionDecl 0x55b64bf0e690 prev 0x55b64bedc288 <line:623:1, line:632:1> line:623:19 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x55b64bf0e588 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| |-ParmVarDecl 0x55b64bf0e5f8 <col:56, col:62> col:62 used timeout 's32_t':'int'
| `-CompoundStmt 0x55b64bf0e9b0 <line:624:1, line:632:1>
|   |-DoStmt 0x55b64bf0e820 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf0e7e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf0e798 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf0e800 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf0e998 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:631:2, col:43>
|     `-CallExpr 0x55b64bf0e930 <col:9, col:43> 'int'
|       |-ImplicitCastExpr 0x55b64bf0e918 <col:9> 'int (*)(struct k_mutex *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf0e840 <col:9> 'int (struct k_mutex *, s32_t)' Function 0x55b64bf0e4b0 'z_impl_k_mutex_lock' 'int (struct k_mutex *, s32_t)'
|       |-ImplicitCastExpr 0x55b64bf0e968 <col:29> 'struct k_mutex *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf0e868 <col:29> 'struct k_mutex *' lvalue ParmVar 0x55b64bf0e588 'mutex' 'struct k_mutex *'
|       `-ImplicitCastExpr 0x55b64bf0e980 <col:36> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf0e890 <col:36> 's32_t':'int' lvalue ParmVar 0x55b64bf0e5f8 'timeout' 's32_t':'int'
|-FunctionDecl 0x55b64bf0ea88 <line:635:1, col:56> col:12 used z_impl_k_mutex_unlock 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x55b64bf0e9f8 <col:34, col:51> col:51 mutex 'struct k_mutex *'
|-FunctionDecl 0x55b64bf0ebe8 prev 0x55b64bedc420 <line:636:1, line:645:1> line:636:19 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x55b64bf0eb58 <col:34, col:51> col:51 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x55b64bf0ee58 <line:637:1, line:645:1>
|   |-DoStmt 0x55b64bf0ed70 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf0ed38 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf0ece8 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf0ed50 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf0ee40 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:644:2, col:36>
|     `-CallExpr 0x55b64bf0edf8 <col:9, col:36> 'int'
|       |-ImplicitCastExpr 0x55b64bf0ede0 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf0ed90 <col:9> 'int (struct k_mutex *)' Function 0x55b64bf0ea88 'z_impl_k_mutex_unlock' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x55b64bf0ee28 <col:31> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf0edb8 <col:31> 'struct k_mutex *' lvalue ParmVar 0x55b64bf0eb58 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x55b64bf0f030 <line:648:1, col:96> col:12 used z_impl_k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' extern
| |-ParmVarDecl 0x55b64bf0eea0 <col:30, col:45> col:45 sem 'struct k_sem *'
| |-ParmVarDecl 0x55b64bf0ef18 <col:50, col:63> col:63 initial_count 'unsigned int'
| `-ParmVarDecl 0x55b64bf0ef90 <col:78, col:91> col:91 limit 'unsigned int'
|-FunctionDecl 0x55b64bf0f2a0 prev 0x55b64bedca28 <line:649:1, line:658:1> line:649:19 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x55b64bf0f110 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x55b64bf0f188 <col:50, col:63> col:63 used initial_count 'unsigned int'
| |-ParmVarDecl 0x55b64bf0f200 <col:78, col:91> col:91 used limit 'unsigned int'
| `-CompoundStmt 0x55b64bf0f610 <line:650:1, line:658:1>
|   |-DoStmt 0x55b64bf0f438 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf0f400 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf0f3b0 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf0f418 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf0f5f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:657:2, col:52>
|     `-CallExpr 0x55b64bf0f570 <col:9, col:52> 'int'
|       |-ImplicitCastExpr 0x55b64bf0f558 <col:9> 'int (*)(struct k_sem *, unsigned int, unsigned int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf0f458 <col:9> 'int (struct k_sem *, unsigned int, unsigned int)' Function 0x55b64bf0f030 'z_impl_k_sem_init' 'int (struct k_sem *, unsigned int, unsigned int)'
|       |-ImplicitCastExpr 0x55b64bf0f5b0 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf0f480 <col:27> 'struct k_sem *' lvalue ParmVar 0x55b64bf0f110 'sem' 'struct k_sem *'
|       |-ImplicitCastExpr 0x55b64bf0f5c8 <col:32> 'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf0f4a8 <col:32> 'unsigned int' lvalue ParmVar 0x55b64bf0f188 'initial_count' 'unsigned int'
|       `-ImplicitCastExpr 0x55b64bf0f5e0 <col:47> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf0f4d0 <col:47> 'unsigned int' lvalue ParmVar 0x55b64bf0f200 'limit' 'unsigned int'
|-FunctionDecl 0x55b64bf0f760 <line:661:1, col:63> col:12 used z_impl_k_sem_take 'int (struct k_sem *, s32_t)' extern
| |-ParmVarDecl 0x55b64bf0f658 <col:30, col:45> col:45 sem 'struct k_sem *'
| `-ParmVarDecl 0x55b64bf0f6c8 <col:50, col:56> col:56 timeout 's32_t':'int'
|-FunctionDecl 0x55b64bf0f940 prev 0x55b64beddd08 <line:662:1, line:671:1> line:662:19 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x55b64bf0f838 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x55b64bf0f8a8 <col:50, col:56> col:56 used timeout 's32_t':'int'
| `-CompoundStmt 0x55b64bf0fc60 <line:663:1, line:671:1>
|   |-DoStmt 0x55b64bf0fad0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf0fa98 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf0fa48 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf0fab0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf0fc48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:670:2, col:39>
|     `-CallExpr 0x55b64bf0fbe0 <col:9, col:39> 'int'
|       |-ImplicitCastExpr 0x55b64bf0fbc8 <col:9> 'int (*)(struct k_sem *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf0faf0 <col:9> 'int (struct k_sem *, s32_t)' Function 0x55b64bf0f760 'z_impl_k_sem_take' 'int (struct k_sem *, s32_t)'
|       |-ImplicitCastExpr 0x55b64bf0fc18 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf0fb18 <col:27> 'struct k_sem *' lvalue ParmVar 0x55b64bf0f838 'sem' 'struct k_sem *'
|       `-ImplicitCastExpr 0x55b64bf0fc30 <col:32> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf0fb40 <col:32> 's32_t':'int' lvalue ParmVar 0x55b64bf0f8a8 'timeout' 's32_t':'int'
|-FunctionDecl 0x55b64bf0fd30 <line:674:1, col:49> col:13 used z_impl_k_sem_give 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x55b64bf0fca8 <col:31, col:46> col:46 sem 'struct k_sem *'
|-FunctionDecl 0x55b64bf0fe88 prev 0x55b64beddf10 <line:675:1, line:685:1> line:675:20 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55b64bf0fe00 <col:31, col:46> col:46 used sem 'struct k_sem *'
| `-CompoundStmt 0x55b64bf10158 <line:676:1, line:685:1>
|   |-DoStmt 0x55b64bf10028 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf0fff0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf0ff88 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf10008 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf10110 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:684:2, col:23> 'void'
|     |-ImplicitCastExpr 0x55b64bf100f8 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf10048 <col:2> 'void (struct k_sem *)' Function 0x55b64bf0fd30 'z_impl_k_sem_give' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x55b64bf10140 <col:20> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf10070 <col:20> 'struct k_sem *' lvalue ParmVar 0x55b64bf0fe00 'sem' 'struct k_sem *'
|-FunctionDecl 0x55b64bf10228 prev 0x55b64bede218 <line:688:1, col:50> col:13 used z_impl_k_sem_reset 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x55b64bf101a0 <col:32, col:47> col:47 sem 'struct k_sem *'
|-FunctionDecl 0x55b64bf10380 prev 0x55b64bede098 <line:689:1, line:699:1> line:689:20 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55b64bf102f8 <col:32, col:47> col:47 used sem 'struct k_sem *'
| `-CompoundStmt 0x55b64bf105d8 <line:690:1, line:699:1>
|   |-DoStmt 0x55b64bf10508 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf104d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf10480 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf104e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf10590 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:698:2, col:24> 'void'
|     |-ImplicitCastExpr 0x55b64bf10578 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf10528 <col:2> 'void (struct k_sem *)' Function 0x55b64bf10228 'z_impl_k_sem_reset' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x55b64bf105c0 <col:21> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf10550 <col:21> 'struct k_sem *' lvalue ParmVar 0x55b64bf102f8 'sem' 'struct k_sem *'
|-FunctionDecl 0x55b64bf106b0 prev 0x55b64bede680 <line:702:1, col:62> col:21 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' extern
| `-ParmVarDecl 0x55b64bf10620 <col:44, col:59> col:59 sem 'struct k_sem *'
|-FunctionDecl 0x55b64bf10810 prev 0x55b64bede4f8 <line:703:1, line:712:1> line:703:28 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x55b64bf10780 <col:44, col:59> col:59 used sem 'struct k_sem *'
| `-CompoundStmt 0x55b64bf10ae0 <line:704:1, line:712:1>
|   |-DoStmt 0x55b64bf10998 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf10960 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf10910 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf10978 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf10ac8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:711:2, col:35>
|     `-CallExpr 0x55b64bf10a80 <col:9, col:35> 'unsigned int'
|       |-ImplicitCastExpr 0x55b64bf10a68 <col:9> 'unsigned int (*)(struct k_sem *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf109b8 <col:9> 'unsigned int (struct k_sem *)' Function 0x55b64bf106b0 'z_impl_k_sem_count_get' 'unsigned int (struct k_sem *)'
|       `-ImplicitCastExpr 0x55b64bf10ab0 <col:32> 'struct k_sem *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf109e0 <col:32> 'struct k_sem *' lvalue ParmVar 0x55b64bf10780 'sem' 'struct k_sem *'
|-FunctionDecl 0x55b64bf10ca8 <line:715:1, col:90> col:12 used z_impl_k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' extern
| |-ParmVarDecl 0x55b64bf10b28 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55b64bf10b98 <col:59, col:66> col:66 msg_size 'size_t':'unsigned long'
| `-ParmVarDecl 0x55b64bf10c08 <col:76, col:82> col:82 max_msgs 'u32_t':'unsigned int'
|-FunctionDecl 0x55b64bf10f08 prev 0x55b64be8eb88 <line:716:1, line:725:1> line:716:19 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x55b64bf10d88 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55b64bf10df8 <col:59, col:66> col:66 used msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64bf10e68 <col:76, col:82> col:82 used max_msgs 'u32_t':'unsigned int'
| `-CompoundStmt 0x55b64bf11270 <line:717:1, line:725:1>
|   |-DoStmt 0x55b64bf110a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf11068 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf11018 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf11080 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf11258 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:724:2, col:58>
|     `-CallExpr 0x55b64bf111d0 <col:9, col:58> 'int'
|       |-ImplicitCastExpr 0x55b64bf111b8 <col:9> 'int (*)(struct k_msgq *, size_t, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf110c0 <col:9> 'int (struct k_msgq *, size_t, u32_t)' Function 0x55b64bf10ca8 'z_impl_k_msgq_alloc_init' 'int (struct k_msgq *, size_t, u32_t)'
|       |-ImplicitCastExpr 0x55b64bf11210 <col:34> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf110e8 <col:34> 'struct k_msgq *' lvalue ParmVar 0x55b64bf10d88 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x55b64bf11228 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf11110 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x55b64bf10df8 'msg_size' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x55b64bf11240 <col:50> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf11138 <col:50> 'u32_t':'unsigned int' lvalue ParmVar 0x55b64bf10e68 'max_msgs' 'u32_t':'unsigned int'
|-FunctionDecl 0x55b64bf11440 <line:728:1, col:78> col:12 used z_impl_k_msgq_put 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x55b64bf112b8 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55b64bf11330 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x55b64bf113a0 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x55b64bf116a8 prev 0x55b64bee2628 <line:729:1, line:738:1> line:729:19 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x55b64bf11520 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55b64bf11598 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x55b64bf11608 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x55b64bf11a10 <line:730:1, line:738:1>
|   |-DoStmt 0x55b64bf11840 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf11808 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf117b8 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf11820 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf119f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:737:2, col:46>
|     `-CallExpr 0x55b64bf11970 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x55b64bf11958 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf11860 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x55b64bf11440 'z_impl_k_msgq_put' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x55b64bf119b0 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf11888 <col:27> 'struct k_msgq *' lvalue ParmVar 0x55b64bf11520 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x55b64bf119c8 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf118b0 <col:33> 'void *' lvalue ParmVar 0x55b64bf11598 'data' 'void *'
|       `-ImplicitCastExpr 0x55b64bf119e0 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf118d8 <col:39> 's32_t':'int' lvalue ParmVar 0x55b64bf11608 'timeout' 's32_t':'int'
|-FunctionDecl 0x55b64bf11be0 <line:741:1, col:78> col:12 used z_impl_k_msgq_get 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x55b64bf11a58 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55b64bf11ad0 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x55b64bf11b40 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x55b64bf11e48 prev 0x55b64bee28b8 <line:742:1, line:751:1> line:742:19 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x55b64bf11cc0 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55b64bf11d38 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x55b64bf11da8 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x55b64bf12178 <line:743:1, line:751:1>
|   |-DoStmt 0x55b64bf12000 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf11fa8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf11f58 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf11fc0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf12160 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:750:2, col:46>
|     `-CallExpr 0x55b64bf120d8 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x55b64bf120c0 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf12020 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x55b64bf11be0 'z_impl_k_msgq_get' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x55b64bf12118 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf12048 <col:27> 'struct k_msgq *' lvalue ParmVar 0x55b64bf11cc0 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x55b64bf12130 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf12070 <col:33> 'void *' lvalue ParmVar 0x55b64bf11d38 'data' 'void *'
|       `-ImplicitCastExpr 0x55b64bf12148 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf12098 <col:39> 's32_t':'int' lvalue ParmVar 0x55b64bf11da8 'timeout' 's32_t':'int'
|-FunctionDecl 0x55b64bf122d0 <line:754:1, col:64> col:12 used z_impl_k_msgq_peek 'int (struct k_msgq *, void *)' extern
| |-ParmVarDecl 0x55b64bf121c0 <col:31, col:47> col:47 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x55b64bf12238 <col:53, col:60> col:60 data 'void *'
|-FunctionDecl 0x55b64bf124b8 prev 0x55b64bee2b58 <line:755:1, line:764:1> line:755:19 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x55b64bf123a8 <col:31, col:47> col:47 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55b64bf12420 <col:53, col:60> col:60 used data 'void *'
| `-CompoundStmt 0x55b64bf127d0 <line:756:1, line:764:1>
|   |-DoStmt 0x55b64bf12648 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf12610 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf125c0 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf12628 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf127b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:763:2, col:38>
|     `-CallExpr 0x55b64bf12750 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x55b64bf12738 <col:9> 'int (*)(struct k_msgq *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf12668 <col:9> 'int (struct k_msgq *, void *)' Function 0x55b64bf122d0 'z_impl_k_msgq_peek' 'int (struct k_msgq *, void *)'
|       |-ImplicitCastExpr 0x55b64bf12788 <col:28> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf12690 <col:28> 'struct k_msgq *' lvalue ParmVar 0x55b64bf123a8 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x55b64bf127a0 <col:34> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf126b8 <col:34> 'void *' lvalue ParmVar 0x55b64bf12420 'data' 'void *'
|-FunctionDecl 0x55b64bf128a0 <line:767:1, col:53> col:13 used z_impl_k_msgq_purge 'void (struct k_msgq *)' extern
| `-ParmVarDecl 0x55b64bf12818 <col:33, col:49> col:49 msgq 'struct k_msgq *'
|-FunctionDecl 0x55b64bf129f8 prev 0x55b64bee2d60 <line:768:1, line:778:1> line:768:20 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55b64bf12970 <col:33, col:49> col:49 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55b64bf12ca8 <line:769:1, line:778:1>
|   |-DoStmt 0x55b64bf12b80 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf12b48 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf12af8 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf12b60 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf12c60 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:777:2, col:26> 'void'
|     |-ImplicitCastExpr 0x55b64bf12c48 <col:2> 'void (*)(struct k_msgq *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf12ba0 <col:2> 'void (struct k_msgq *)' Function 0x55b64bf128a0 'z_impl_k_msgq_purge' 'void (struct k_msgq *)'
|     `-ImplicitCastExpr 0x55b64bf12c90 <col:22> 'struct k_msgq *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf12bc8 <col:22> 'struct k_msgq *' lvalue ParmVar 0x55b64bf12970 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x55b64bf12d78 prev 0x55b64bee33e0 <line:781:1, col:61> col:14 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x55b64bf12cf0 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x55b64bf12ed0 prev 0x55b64bee2f60 <line:782:1, line:791:1> line:782:21 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55b64bf12e48 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55b64bf131a0 <line:783:1, line:791:1>
|   |-DoStmt 0x55b64bf13058 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf13020 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf12fd0 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf13038 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf13188 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:790:2, col:40>
|     `-CallExpr 0x55b64bf13140 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55b64bf13128 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf13078 <col:9> 'u32_t (struct k_msgq *)' Function 0x55b64bf12d78 'z_impl_k_msgq_num_free_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x55b64bf13170 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf130a0 <col:36> 'struct k_msgq *' lvalue ParmVar 0x55b64bf12e48 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x55b64bf13300 <line:794:1, col:86> col:13 used z_impl_k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' extern
| |-ParmVarDecl 0x55b64bf131e8 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x55b64bf13270 <col:59, col:81> col:81 attrs 'struct k_msgq_attrs *'
|-FunctionDecl 0x55b64bf134f0 prev 0x55b64bee3280 <line:795:1, line:805:1> line:795:20 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x55b64bf133d8 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55b64bf13460 <col:59, col:81> col:81 used attrs 'struct k_msgq_attrs *'
| `-CompoundStmt 0x55b64bf137f8 <line:796:1, line:805:1>
|   |-DoStmt 0x55b64bf13680 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf13648 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf135f8 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf13660 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf13790 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:804:2, col:37> 'void'
|     |-ImplicitCastExpr 0x55b64bf13778 <col:2> 'void (*)(struct k_msgq *, struct k_msgq_attrs *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf136a0 <col:2> 'void (struct k_msgq *, struct k_msgq_attrs *)' Function 0x55b64bf13300 'z_impl_k_msgq_get_attrs' 'void (struct k_msgq *, struct k_msgq_attrs *)'
|     |-ImplicitCastExpr 0x55b64bf137c8 <col:26> 'struct k_msgq *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b64bf136c8 <col:26> 'struct k_msgq *' lvalue ParmVar 0x55b64bf133d8 'msgq' 'struct k_msgq *'
|     `-ImplicitCastExpr 0x55b64bf137e0 <col:32> 'struct k_msgq_attrs *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf136f0 <col:32> 'struct k_msgq_attrs *' lvalue ParmVar 0x55b64bf13460 'attrs' 'struct k_msgq_attrs *'
|-FunctionDecl 0x55b64bf138c8 prev 0x55b64bee3cd8 <line:808:1, col:61> col:14 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x55b64bf13840 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x55b64bf13a20 prev 0x55b64bee3b80 <line:809:1, line:818:1> line:809:21 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55b64bf13998 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55b64bf13c90 <line:810:1, line:818:1>
|   |-DoStmt 0x55b64bf13ba8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf13b70 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf13b20 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf13b88 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf13c78 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:817:2, col:40>
|     `-CallExpr 0x55b64bf13c30 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55b64bf13c18 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf13bc8 <col:9> 'u32_t (struct k_msgq *)' Function 0x55b64bf138c8 'z_impl_k_msgq_num_used_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x55b64bf13c60 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf13bf0 <col:36> 'struct k_msgq *' lvalue ParmVar 0x55b64bf13998 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x55b64bf13de0 <line:821:1, col:70> col:12 used z_impl_k_pipe_alloc_init 'int (struct k_pipe *, size_t)' extern
| |-ParmVarDecl 0x55b64bf13cd8 <col:37, col:53> col:53 pipe 'struct k_pipe *'
| `-ParmVarDecl 0x55b64bf13d48 <col:59, col:66> col:66 size 'size_t':'unsigned long'
|-FunctionDecl 0x55b64bf14010 prev 0x55b64bee9e78 <line:822:1, line:831:1> line:822:19 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x55b64bf13eb8 <col:37, col:53> col:53 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55b64bf13f28 <col:59, col:66> col:66 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x55b64bf14330 <line:823:1, line:831:1>
|   |-DoStmt 0x55b64bf141a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf14168 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf14118 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf14180 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf14318 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:830:2, col:44>
|     `-CallExpr 0x55b64bf142b0 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x55b64bf14298 <col:9> 'int (*)(struct k_pipe *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf141c0 <col:9> 'int (struct k_pipe *, size_t)' Function 0x55b64bf13de0 'z_impl_k_pipe_alloc_init' 'int (struct k_pipe *, size_t)'
|       |-ImplicitCastExpr 0x55b64bf142e8 <col:34> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf141e8 <col:34> 'struct k_pipe *' lvalue ParmVar 0x55b64bf13eb8 'pipe' 'struct k_pipe *'
|       `-ImplicitCastExpr 0x55b64bf14300 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf14210 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x55b64bf13f28 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x55b64bf14668 <line:834:1, col:142> col:12 used z_impl_k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x55b64bf14378 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55b64bf143f0 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x55b64bf14460 <col:65, col:72> col:72 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64bf144d0 <col:88, col:97> col:97 bytes_written 'size_t *'
| |-ParmVarDecl 0x55b64bf14540 <col:112, col:119> col:119 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x55b64bf145b0 <col:129, col:135> col:135 timeout 's32_t':'int'
|-FunctionDecl 0x55b64bf14a50 prev 0x55b64beea368 <line:835:1, line:844:1> line:835:19 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x55b64bf14760 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55b64bf147d8 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x55b64bf14848 <col:65, col:72> col:72 used bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64bf148b8 <col:88, col:97> col:97 used bytes_written 'size_t *'
| |-ParmVarDecl 0x55b64bf14928 <col:112, col:119> col:119 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64bf14998 <col:129, col:135> col:135 used timeout 's32_t':'int'
| `-CompoundStmt 0x55b64bf14eb0 <line:836:1, line:844:1>
|   |-DoStmt 0x55b64bf14c00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf14bc8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf14b78 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf14be0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf14e98 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:843:2, col:87>
|     `-CallExpr 0x55b64bf14db0 <col:9, col:87> 'int'
|       |-ImplicitCastExpr 0x55b64bf14d98 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf14c20 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x55b64bf14668 'z_impl_k_pipe_put' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x55b64bf14e08 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf14c48 <col:27> 'struct k_pipe *' lvalue ParmVar 0x55b64bf14760 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x55b64bf14e20 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf14c70 <col:33> 'void *' lvalue ParmVar 0x55b64bf147d8 'data' 'void *'
|       |-ImplicitCastExpr 0x55b64bf14e38 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf14c98 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x55b64bf14848 'bytes_to_write' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x55b64bf14e50 <col:55> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf14cc0 <col:55> 'size_t *' lvalue ParmVar 0x55b64bf148b8 'bytes_written' 'size_t *'
|       |-ImplicitCastExpr 0x55b64bf14e68 <col:70> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf14ce8 <col:70> 'size_t':'unsigned long' lvalue ParmVar 0x55b64bf14928 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x55b64bf14e80 <col:80> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf14d10 <col:80> 's32_t':'int' lvalue ParmVar 0x55b64bf14998 'timeout' 's32_t':'int'
|-FunctionDecl 0x55b64bf151e8 <line:847:1, col:138> col:12 used z_impl_k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x55b64bf14ef8 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55b64bf14f70 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x55b64bf14fe0 <col:65, col:72> col:72 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64bf15050 <col:87, col:96> col:96 bytes_read 'size_t *'
| |-ParmVarDecl 0x55b64bf150c0 <col:108, col:115> col:115 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x55b64bf15130 <col:125, col:131> col:131 timeout 's32_t':'int'
|-FunctionDecl 0x55b64bf155d0 prev 0x55b64beea780 <line:848:1, line:857:1> line:848:19 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x55b64bf152e0 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55b64bf15358 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x55b64bf153c8 <col:65, col:72> col:72 used bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64bf15438 <col:87, col:96> col:96 used bytes_read 'size_t *'
| |-ParmVarDecl 0x55b64bf154a8 <col:108, col:115> col:115 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x55b64bf15518 <col:125, col:131> col:131 used timeout 's32_t':'int'
| `-CompoundStmt 0x55b64bf159d0 <line:849:1, line:857:1>
|   |-DoStmt 0x55b64bf15780 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf15748 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf156f8 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf15760 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf159b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:856:2, col:83>
|     `-CallExpr 0x55b64bf158d0 <col:9, col:83> 'int'
|       |-ImplicitCastExpr 0x55b64bf158b8 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf157a0 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x55b64bf151e8 'z_impl_k_pipe_get' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x55b64bf15928 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf157c8 <col:27> 'struct k_pipe *' lvalue ParmVar 0x55b64bf152e0 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x55b64bf15940 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf157f0 <col:33> 'void *' lvalue ParmVar 0x55b64bf15358 'data' 'void *'
|       |-ImplicitCastExpr 0x55b64bf15958 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf15818 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x55b64bf153c8 'bytes_to_read' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x55b64bf15970 <col:54> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf15840 <col:54> 'size_t *' lvalue ParmVar 0x55b64bf15438 'bytes_read' 'size_t *'
|       |-ImplicitCastExpr 0x55b64bf15988 <col:66> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf15868 <col:66> 'size_t':'unsigned long' lvalue ParmVar 0x55b64bf154a8 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x55b64bf159a0 <col:76> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf15890 <col:76> 's32_t':'int' lvalue ParmVar 0x55b64bf15518 'timeout' 's32_t':'int'
|-FunctionDecl 0x55b64bf15ba0 <line:860:1, col:85> col:12 used z_impl_k_poll 'int (struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x55b64bf15a18 <col:26, col:48> col:48 events 'struct k_poll_event *'
| |-ParmVarDecl 0x55b64bf15a90 <col:56, col:60> col:60 num_events 'int'
| `-ParmVarDecl 0x55b64bf15b00 <col:72, col:78> col:78 timeout 's32_t':'int'
|-FunctionDecl 0x55b64bf15e08 prev 0x55b64bef37e8 <line:861:1, line:870:1> line:861:19 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x55b64bf15c80 <col:26, col:48> col:48 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x55b64bf15cf8 <col:56, col:60> col:60 used num_events 'int'
| |-ParmVarDecl 0x55b64bf15d68 <col:72, col:78> col:78 used timeout 's32_t':'int'
| `-CompoundStmt 0x55b64bf16180 <line:862:1, line:870:1>
|   |-DoStmt 0x55b64bf15fa0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf15f68 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf15f18 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf15f80 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf16168 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:869:2, col:50>
|     `-CallExpr 0x55b64bf160e0 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x55b64bf160c8 <col:9> 'int (*)(struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf15fc0 <col:9> 'int (struct k_poll_event *, int, s32_t)' Function 0x55b64bf15ba0 'z_impl_k_poll' 'int (struct k_poll_event *, int, s32_t)'
|       |-ImplicitCastExpr 0x55b64bf16120 <col:23> 'struct k_poll_event *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf15fe8 <col:23> 'struct k_poll_event *' lvalue ParmVar 0x55b64bf15c80 'events' 'struct k_poll_event *'
|       |-ImplicitCastExpr 0x55b64bf16138 <col:31> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf16020 <col:31> 'int' lvalue ParmVar 0x55b64bf15cf8 'num_events' 'int'
|       `-ImplicitCastExpr 0x55b64bf16150 <col:43> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf16048 <col:43> 's32_t':'int' lvalue ParmVar 0x55b64bf15d68 'timeout' 's32_t':'int'
|-FunctionDecl 0x55b64bf16250 <line:873:1, col:68> col:13 used z_impl_k_poll_signal_init 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x55b64bf161c8 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
|-FunctionDecl 0x55b64bf163a8 prev 0x55b64bef39f0 <line:874:1, line:884:1> line:874:20 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x55b64bf16320 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x55b64bf16658 <line:875:1, line:884:1>
|   |-DoStmt 0x55b64bf16530 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf164f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf164a8 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf16510 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf16610 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:883:2, col:34> 'void'
|     |-ImplicitCastExpr 0x55b64bf165f8 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf16550 <col:2> 'void (struct k_poll_signal *)' Function 0x55b64bf16250 'z_impl_k_poll_signal_init' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x55b64bf16640 <col:28> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf16578 <col:28> 'struct k_poll_signal *' lvalue ParmVar 0x55b64bf16320 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x55b64bf16728 prev 0x55b64bef3ca0 <line:887:1, col:69> col:13 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x55b64bf166a0 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
|-FunctionDecl 0x55b64bf16880 prev 0x55b64bef3b48 <line:888:1, line:898:1> line:888:20 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x55b64bf167f8 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x55b64bf16ad8 <line:889:1, line:898:1>
|   |-DoStmt 0x55b64bf16a08 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf169d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf16980 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf169e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf16a90 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:897:2, col:35> 'void'
|     |-ImplicitCastExpr 0x55b64bf16a78 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf16a28 <col:2> 'void (struct k_poll_signal *)' Function 0x55b64bf16728 'z_impl_k_poll_signal_reset' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x55b64bf16ac0 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf16a50 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x55b64bf167f8 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x55b64bf16ca8 <line:901:1, col:108> col:13 used z_impl_k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' extern
| |-ParmVarDecl 0x55b64bf16b20 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55b64bf16b98 <col:71, col:86> col:86 signaled 'unsigned int *'
| `-ParmVarDecl 0x55b64bf16c10 <col:96, col:102> col:102 result 'int *'
|-FunctionDecl 0x55b64bf16f10 prev 0x55b64bef4be8 <line:902:1, line:912:1> line:902:20 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x55b64bf16d88 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55b64bf16e00 <col:71, col:86> col:86 used signaled 'unsigned int *'
| |-ParmVarDecl 0x55b64bf16e78 <col:96, col:102> col:102 used result 'int *'
| `-CompoundStmt 0x55b64bf17268 <line:903:1, line:912:1>
|   |-DoStmt 0x55b64bf170a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf17070 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf17020 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf17088 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf171e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:911:2, col:53> 'void'
|     |-ImplicitCastExpr 0x55b64bf171c8 <col:2> 'void (*)(struct k_poll_signal *, unsigned int *, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf170c8 <col:2> 'void (struct k_poll_signal *, unsigned int *, int *)' Function 0x55b64bf16ca8 'z_impl_k_poll_signal_check' 'void (struct k_poll_signal *, unsigned int *, int *)'
|     |-ImplicitCastExpr 0x55b64bf17220 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b64bf170f0 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x55b64bf16d88 'signal' 'struct k_poll_signal *'
|     |-ImplicitCastExpr 0x55b64bf17238 <col:37> 'unsigned int *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b64bf17118 <col:37> 'unsigned int *' lvalue ParmVar 0x55b64bf16e00 'signaled' 'unsigned int *'
|     `-ImplicitCastExpr 0x55b64bf17250 <col:47> 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf17140 <col:47> 'int *' lvalue ParmVar 0x55b64bf16e78 'result' 'int *'
|-FunctionDecl 0x55b64bf173c0 <line:915:1, col:80> col:12 used z_impl_k_poll_signal_raise 'int (struct k_poll_signal *, int)' extern
| |-ParmVarDecl 0x55b64bf172b0 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
| `-ParmVarDecl 0x55b64bf17328 <col:70, col:74> col:74 result 'int'
|-FunctionDecl 0x55b64bf175a8 prev 0x55b64bef4e88 <line:916:1, line:925:1> line:916:19 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x55b64bf17498 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55b64bf17510 <col:70, col:74> col:74 used result 'int'
| `-CompoundStmt 0x55b64bf178c0 <line:917:1, line:925:1>
|   |-DoStmt 0x55b64bf17738 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf17700 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf176b0 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf17718 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf178a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:924:2, col:50>
|     `-CallExpr 0x55b64bf17840 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x55b64bf17828 <col:9> 'int (*)(struct k_poll_signal *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf17758 <col:9> 'int (struct k_poll_signal *, int)' Function 0x55b64bf173c0 'z_impl_k_poll_signal_raise' 'int (struct k_poll_signal *, int)'
|       |-ImplicitCastExpr 0x55b64bf17878 <col:36> 'struct k_poll_signal *' <LValueToRValue>
|       | `-DeclRefExpr 0x55b64bf17780 <col:36> 'struct k_poll_signal *' lvalue ParmVar 0x55b64bf17498 'signal' 'struct k_poll_signal *'
|       `-ImplicitCastExpr 0x55b64bf17890 <col:44> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf177a8 <col:44> 'int' lvalue ParmVar 0x55b64bf17510 'result' 'int'
|-FunctionDecl 0x55b64bf17a80 <line:928:1, col:48> col:13 used z_impl_k_str_out 'void (char *, size_t)' extern
| |-ParmVarDecl 0x55b64bf178f8 <col:30, col:37> col:37 c 'char *'
| `-ParmVarDecl 0x55b64bf17968 <col:40, col:47> col:47 n 'size_t':'unsigned long'
|-FunctionDecl 0x55b64bf17c48 <line:929:1, line:939:1> line:929:20 k_str_out 'void (char *, size_t)' static inline
| |-ParmVarDecl 0x55b64bf17b48 <col:30, col:37> col:37 used c 'char *'
| |-ParmVarDecl 0x55b64bf17bb8 <col:40, col:47> col:47 used n 'size_t':'unsigned long'
| `-CompoundStmt 0x55b64bf17f48 <line:930:1, line:939:1>
|   |-DoStmt 0x55b64bf17dd8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf17da0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf17d50 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf17db8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55b64bf17ee0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:938:2, col:23> 'void'
|     |-ImplicitCastExpr 0x55b64bf17ec8 <col:2> 'void (*)(char *, size_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b64bf17df8 <col:2> 'void (char *, size_t)' Function 0x55b64bf17a80 'z_impl_k_str_out' 'void (char *, size_t)'
|     |-ImplicitCastExpr 0x55b64bf17f18 <col:19> 'char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b64bf17e20 <col:19> 'char *' lvalue ParmVar 0x55b64bf17b48 'c' 'char *'
|     `-ImplicitCastExpr 0x55b64bf17f30 <col:22> 'size_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55b64bf17e48 <col:22> 'size_t':'unsigned long' lvalue ParmVar 0x55b64bf17bb8 'n' 'size_t':'unsigned long'
|-FunctionDecl 0x55b64bf19040 <line:942:1, col:59> col:12 used z_impl_k_float_disable 'int (struct k_thread *)' extern
| `-ParmVarDecl 0x55b64bf17f90 <col:35, col:53> col:53 thread 'struct k_thread *'
|-FunctionDecl 0x55b64bf191a0 prev 0x55b64befa2a8 <line:943:1, line:952:1> line:943:19 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x55b64bf19110 <col:35, col:53> col:53 used thread 'struct k_thread *'
| `-CompoundStmt 0x55b64bf19440 <line:944:1, line:952:1>
|   |-DoStmt 0x55b64bf19328 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55b64bf192f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55b64bf192a0 <col:2, col:39>
|   | `-IntegerLiteral 0x55b64bf19308 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55b64bf19428 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:951:2, col:38>
|     `-CallExpr 0x55b64bf193e0 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x55b64bf193c8 <col:9> 'int (*)(struct k_thread *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b64bf19348 <col:9> 'int (struct k_thread *)' Function 0x55b64bf19040 'z_impl_k_float_disable' 'int (struct k_thread *)'
|       `-ImplicitCastExpr 0x55b64bf19410 <col:32> 'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x55b64bf19370 <col:32> 'struct k_thread *' lvalue ParmVar 0x55b64bf19110 'thread' 'struct k_thread *'
|-FunctionDecl 0x55b64bf19540 </vagrant/apps/plc_4out/./_build/arm-tfm/install/export/tfm/inc/tfm_gpio_veneers.h:11:1, col:32> col:10 tfm_gpio_read_all 'uint32_t (void)'
|-FunctionDecl 0x55b64bf19710 <line:12:1, col:40> col:9 tfm_gpio_write_all 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x55b64bf19610 <col:28, col:37> col:37 out 'uint32_t':'unsigned int'
|-FunctionDecl 0x55b64bf19850 <line:13:1, col:46> col:9 tfm_gpio_enable_outputs 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x55b64bf197c8 <col:33, col:42> col:42 pins 'uint32_t':'unsigned int'
|-FunctionDecl 0x55b64bf19a10 <line:14:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55b64bf19908 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55b64bf19b50 <line:16:1, col:43> col:9 tfm_gpio_enable_output 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55b64bf19ac8 <col:32, col:40> col:40 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55b64bf19c90 <line:17:1, col:33> col:9 tfm_gpio_set 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55b64bf19c08 <col:22, col:30> col:30 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55b64bf19dd0 <line:18:1, col:35> col:9 tfm_gpio_clear 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55b64bf19d48 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55b64bf19f10 <line:19:1, col:37> col:9 tfm_gpio_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55b64bf19e88 <col:26, col:34> col:34 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55b64bf1a050 prev 0x55b64bf19a10 <line:20:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55b64bf19fc8 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-RecordDecl 0x55b64bf1a0f8 <line:34:9, line:38:1> line:34:9 struct definition
| |-FieldDecl 0x55b64bf1a1b0 <line:35:5, col:13> col:13 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x55b64bf1a208 <line:36:5, col:13> col:13 polarity 'uint8_t':'unsigned char'
| `-FieldDecl 0x55b64bf1a2f0 <line:37:5, col:21> col:12 cb 'void (*)(void)'
|-TypedefDecl 0x55b64bf1a390 <line:34:1, line:38:3> col:3 referenced gpio_int_config 'struct gpio_int_config':'gpio_int_config'
| `-ElaboratedType 0x55b64bf1a340 'struct gpio_int_config' sugar
|   `-RecordType 0x55b64bf1a180 'gpio_int_config'
|     `-Record 0x55b64bf1a0f8 ''
|-FunctionDecl 0x55b64bf1a610 <line:40:1, col:68> col:9 tfm_gpio_interrupt_enable 'uint8_t (uint8_t, gpio_int_config *)'
| |-ParmVarDecl 0x55b64bf1a410 <col:35, col:43> col:43 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x55b64bf1a4f8 <col:48, col:65> col:65 cfg 'gpio_int_config *'
|-FunctionDecl 0x55b64bf1a758 <line:41:1, col:47> col:9 tfm_gpio_interrupt_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55b64bf1a6d0 <col:36, col:44> col:44 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x55b64bf1a818 </vagrant/apps/plc_4out/./inc/plc_platform.h:5:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x55b64bd0f770 'short'
|-TypedefDecl 0x55b64bf1a888 <line:6:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x55b64bd0f7f0 'unsigned char'
|-EnumDecl 0x55b64bf1a8e0 <line:25:9, line:29:1> line:25:9
| |-EnumConstantDecl 0x55b64bf1a9c0 <line:26:2, col:6> col:2 R 'int'
| | `-IntegerLiteral 0x55b64bf1a9a0 <col:6> 'int' 2
| |-EnumConstantDecl 0x55b64bf1aa28 <line:27:2, col:6> col:2 G 'int'
| | `-IntegerLiteral 0x55b64bf1aa08 <col:6> 'int' 3
| `-EnumConstantDecl 0x55b64bf1aa90 <line:28:2, col:6> col:2 B 'int'
|   `-IntegerLiteral 0x55b64bf1aa70 <col:6> 'int' 4
|-TypedefDecl 0x55b64bf1ab30 <line:25:1, line:29:3> col:3 referenced LED 'enum LED':'LED'
| `-ElaboratedType 0x55b64bf1aae0 'enum LED' sugar
|   `-EnumType 0x55b64bf1a980 'LED'
|     `-Enum 0x55b64bf1a8e0 ''
|-FunctionDecl 0x55b64bf1ad60 <line:31:1, col:56> col:6 enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x55b64bf1abd8 <col:25, col:34> col:34 pins 'uint8_t *'
| `-ParmVarDecl 0x55b64bf1ac48 <col:40, col:48> col:48 num_pins 'uint8_t':'unsigned char'
|-FunctionDecl 0x55b64bf1af20 <line:33:1, col:35> col:6 enable_pin_output 'void (uint8_t)'
| `-ParmVarDecl 0x55b64bf1ae20 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55b64bf1d9d0 <line:35:1, col:24> col:6 read_in_table 'void (void)'
|-FunctionDecl 0x55b64bf1db00 <line:37:1, col:26> col:6 write_out_table 'void (void)'
|-FunctionDecl 0x55b64bf1dc60 <line:41:1, col:25> col:6 set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x55b64bf1dbd8 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
| `-FullComment 0x55b64bf90dd0 <line:39:4, col:42>
|   `-ParagraphComment 0x55b64bf90da0 <col:4, col:42>
|     `-TextComment 0x55b64bf90d70 <col:4, col:42> Text="************** For User ***************"
|-FunctionDecl 0x55b64bf1dda0 <line:43:1, col:25> col:6 clr_pin 'void (uint8_t)'
| `-ParmVarDecl 0x55b64bf1dd18 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55b64bf1e000 <line:45:1, col:37> col:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x55b64bf1de58 <col:16, col:24> col:24 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x55b64bf1def0 <col:29, col:34> col:34 val 'BOOL':'unsigned char'
|-FunctionDecl 0x55b64bf1e180 <line:47:1, col:26> col:6 read_pin 'BOOL (uint8_t)'
| `-ParmVarDecl 0x55b64bf1e0c0 <col:15, col:23> col:23 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55b64bf1e360 <line:49:1, col:22> col:6 LED_on 'void (LED)'
| `-ParmVarDecl 0x55b64bf1e260 <col:13, col:17> col:17 color 'LED':'LED'
|-FunctionDecl 0x55b64bf1e4a0 <line:51:1, col:23> col:6 LED_off 'void (LED)'
| `-ParmVarDecl 0x55b64bf1e418 <col:14, col:18> col:18 color 'LED':'LED'
|-FunctionDecl 0x55b64bf1e660 <line:53:1, col:24> col:6 read_LED 'BOOL (LED)'
| `-ParmVarDecl 0x55b64bf1e558 <col:15, col:19> col:19 color 'LED':'LED'
|-FunctionDecl 0x55b64bf1e8a0 <line:55:1, col:33> col:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x55b64bf1e718 <col:16, col:20> col:20 color 'LED':'LED'
| `-ParmVarDecl 0x55b64bf1e788 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55b64bf1e9e8 <line:57:1, col:40> col:6 read_button_active_low 'BOOL (uint8_t)'
| `-ParmVarDecl 0x55b64bf1e960 <col:29, col:37> col:37 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x55b64bf1eaa8 prev 0x55b64bf1a818 </vagrant/apps/plc_4out/./inc/ladder.h:7:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x55b64bd0f770 'short'
|-TypedefDecl 0x55b64bf1eb18 prev 0x55b64bf1a888 <line:8:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x55b64bd0f7f0 'unsigned char'
|-VarDecl 0x55b64bf1ec58 <line:13:1, col:99> col:16 output_pins 'uint8_t [5]' static cinit
| |-InitListExpr 0x55b64bf1ee18 <col:68, col:99> 'uint8_t [5]'
| | |-ImplicitCastExpr 0x55b64bf1ee58 </vagrant/apps/plc_4out/./inc/plc_platform.h:11:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x55b64bf1ed10 <col:14> 'int' 3
| | |-ImplicitCastExpr 0x55b64bf1ee78 <line:16:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x55b64bf1ed30 <col:14> 'int' 8
| | |-ImplicitCastExpr 0x55b64bf1eea0 <line:17:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x55b64bf1ed50 <col:14> 'int' 9
| | |-ImplicitCastExpr 0x55b64bf1eed8 <line:18:15> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x55b64bf1ed70 <col:15> 'int' 10
| | `-ImplicitCastExpr 0x55b64bf1eef0 <line:19:15> 'uint8_t':'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x55b64bf1ed90 <col:15> 'int' 11
| `-SectionAttr 0x55b64bf1ecb8 </vagrant/apps/plc_4out/./inc/ladder.h:13:45, col:62> section ".rodata"
|-FunctionDecl 0x55b64bf1f088 <line:18:1, col:19> col:6 PlcCycle 'void (void)'
| `-FullComment 0x55b64bf90ea0 <line:15:4, col:57>
|   `-ParagraphComment 0x55b64bf90e70 <col:4, col:57>
|     `-TextComment 0x55b64bf90e40 <col:4, col:57> Text="************ DO NOT EDIT THESE FUNCTIONS *************"
|-FunctionDecl 0x55b64bf1f1d8 <line:21:1, col:36> col:6 used plc_callback 'void (struct k_timer *)'
| `-ParmVarDecl 0x55b64bf1f150 <col:19, col:35> col:35 t 'struct k_timer *'
|-FunctionDecl 0x55b64bf1f310 <line:24:1, col:19> col:6 used init_plc 'void (void)'
|-FunctionDecl 0x55b64bf1f520 <line:31:1, col:27> col:6 Read_U_b_XMStart 'BOOL (void)'
| `-FullComment 0x55b64bf90f70 <line:29:4, col:57>
|   `-ParagraphComment 0x55b64bf90f40 <col:4, col:57>
|     `-TextComment 0x55b64bf90f10 <col:4, col:57> Text="*********** FUNCTIONS CREATED BY LDMICRO *************"
|-FunctionDecl 0x55b64bf1f650 <line:33:1, col:25> col:6 Read_U_b_XStop 'BOOL (void)'
|-FunctionDecl 0x55b64bf1f780 <line:35:1, col:24> col:6 Read_U_b_YLED 'BOOL (void)'
|-FunctionDecl 0x55b64bf1f8f0 <line:36:1, col:27> col:6 Write_U_b_YLED 'void (BOOL)'
| `-ParmVarDecl 0x55b64bf1f830 <col:21, col:26> col:26 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55b64bf20b30 <line:38:1, col:25> col:6 Read_U_b_YOut0 'BOOL (void)'
|-FunctionDecl 0x55b64bf20c68 <line:39:1, col:28> col:6 Write_U_b_YOut0 'void (BOOL)'
| `-ParmVarDecl 0x55b64bf20be0 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55b64bf20da0 <line:41:1, col:25> col:6 Read_U_b_YOut1 'BOOL (void)'
|-FunctionDecl 0x55b64bf20ed8 <line:42:1, col:28> col:6 Write_U_b_YOut1 'void (BOOL)'
| `-ParmVarDecl 0x55b64bf20e50 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55b64bf21010 <line:44:1, col:25> col:6 Read_U_b_YOut2 'BOOL (void)'
|-FunctionDecl 0x55b64bf21148 <line:45:1, col:28> col:6 Write_U_b_YOut2 'void (BOOL)'
| `-ParmVarDecl 0x55b64bf210c0 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55b64bf21280 <line:47:1, col:25> col:6 Read_U_b_YOut3 'BOOL (void)'
|-FunctionDecl 0x55b64bf213b8 <line:48:1, col:28> col:6 Write_U_b_YOut3 'void (BOOL)'
| `-ParmVarDecl 0x55b64bf21330 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-VarDecl 0x55b64bf21480 <./src/main.c:9:1, col:16> col:16 used scan_timer 'struct k_timer':'struct k_timer'
`-FunctionDecl 0x55b64bf21570 <line:11:1, line:16:1> line:11:6 main 'void (void)'
  `-CompoundStmt 0x55b64bf219e8 <col:17, line:16:1>
    |-CallExpr 0x55b64bf21678 <line:12:2, col:11> 'void'
    | `-ImplicitCastExpr 0x55b64bf21660 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55b64bf21638 <col:2> 'void (void)' Function 0x55b64bf1f310 'init_plc' 'void (void)'
    |-CallExpr 0x55b64bf21830 <line:13:5, col:49> 'void'
    | |-ImplicitCastExpr 0x55b64bf21818 <col:5> 'void (*)(struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55b64bf216a0 <col:5> 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' Function 0x55b64bebc040 'k_timer_init' 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)'
    | |-UnaryOperator 0x55b64bf216f0 <col:18, col:19> 'struct k_timer *' prefix '&'
    | | `-DeclRefExpr 0x55b64bf216c8 <col:19> 'struct k_timer':'struct k_timer' lvalue Var 0x55b64bf21480 'scan_timer' 'struct k_timer':'struct k_timer'
    | |-ImplicitCastExpr 0x55b64bf21870 <col:31> 'void (*)(struct k_timer *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55b64bf21710 <col:31> 'void (struct k_timer *)' Function 0x55b64bf1f1d8 'plc_callback' 'void (struct k_timer *)'
    | `-ImplicitCastExpr 0x55b64bf21888 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'k_timer_stop_t':'void (*)(struct k_timer *)' <NullToPointer>
    |   `-ParenExpr 0x55b64bf21798 <col:14, col:24> 'void *'
    |     `-CStyleCastExpr 0x55b64bf21770 <col:15, col:23> 'void *' <NullToPointer>
    |       `-IntegerLiteral 0x55b64bf21738 <col:23> 'int' 0
    `-CallExpr 0x55b64bf219a8 <./src/main.c:15:2, col:73> 'void'
      |-ImplicitCastExpr 0x55b64bf21990 <col:2> 'void (*)(struct k_timer *, s32_t, s32_t)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x55b64bf218a0 <col:2> 'void (struct k_timer *, s32_t, s32_t)' Function 0x55b64bf061c8 'k_timer_start' 'void (struct k_timer *, s32_t, s32_t)'
      |-UnaryOperator 0x55b64bf218f0 <col:16, col:17> 'struct k_timer *' prefix '&'
      | `-DeclRefExpr 0x55b64bf218c8 <col:17> 'struct k_timer':'struct k_timer' lvalue Var 0x55b64bf21480 'scan_timer' 'struct k_timer':'struct k_timer'
      |-ParenExpr 0x55b64bf21930 </vagrant/ext/zephyros/zephyr/include/kernel.h:1461:24, col:27> 'int'
      | `-IntegerLiteral 0x55b64bf21910 <./src/main.c:7:23> 'int' 10
      `-ParenExpr 0x55b64bf21970 </vagrant/ext/zephyros/zephyr/include/kernel.h:1461:24, col:27> 'int'
        `-IntegerLiteral 0x55b64bf21950 <./src/main.c:7:23> 'int' 10
TranslationUnitDecl 0x555f55ca0698 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x555f55ca0c10 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x555f55ca0930 '__int128'
|-TypedefDecl 0x555f55ca0c80 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x555f55ca0950 'unsigned __int128'
|-TypedefDecl 0x555f55ca0f58 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x555f55ca0d60 'struct __NSConstantString_tag'
|   `-Record 0x555f55ca0cd8 '__NSConstantString_tag'
|-TypedefDecl 0x555f55ca0ff0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x555f55ca0fb0 'char *'
|   `-BuiltinType 0x555f55ca0730 'char'
|-TypedefDecl 0x555f55ca12b8 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x555f55ca1260 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x555f55ca10d0 'struct __va_list_tag'
|     `-Record 0x555f55ca1048 '__va_list_tag'
|-TypedefDecl 0x555f55ce9db0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:143:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x555f55ca07b0 'long'
|-TypedefDecl 0x555f55ce9e20 <line:209:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x555f55ca0850 'unsigned long'
|-TypedefDecl 0x555f55ce9e90 <line:321:1, col:24> col:24 wchar_t 'int'
| `-BuiltinType 0x555f55ca0790 'int'
|-RecordDecl 0x555f55ce9ee8 <line:415:9, line:426:1> line:415:9 struct definition
| |-FieldDecl 0x555f55ce9fe0 <line:416:3, col:13> col:13 __max_align_ll 'long long'
| | `-AlignedAttr 0x555f55cea028 <col:43, col:77> aligned
| |   `-UnaryExprOrTypeTraitExpr 0x555f55ce9fa8 <col:55, col:76> 'unsigned long' alignof 'long long'
| `-FieldDecl 0x555f55cea0c8 <line:417:3, col:15> col:15 __max_align_ld 'long double'
|   `-AlignedAttr 0x555f55cea110 <col:45, col:81> aligned
|     `-UnaryExprOrTypeTraitExpr 0x555f55cea090 <col:57, col:80> 'unsigned long' alignof 'long double'
|-TypedefDecl 0x555f55cea1b0 <line:415:1, line:426:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x555f55cea160 'struct max_align_t' sugar
|   `-RecordType 0x555f55ce9f70 'max_align_t'
|     `-Record 0x555f55ce9ee8 ''
|-TypedefDecl 0x555f55cea238 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdint.h:40:1, col:24> col:24 int8_t 'signed char'
| `-BuiltinType 0x555f55ca0750 'signed char'
|-TypedefDecl 0x555f55cea2a8 <line:41:1, col:25> col:25 int16_t 'short'
| `-BuiltinType 0x555f55ca0770 'short'
|-TypedefDecl 0x555f55cea318 <line:42:1, col:25> col:25 int32_t 'int'
| `-BuiltinType 0x555f55ca0790 'int'
|-TypedefDecl 0x555f55cea388 <line:43:1, col:25> col:25 int64_t 'long'
| `-BuiltinType 0x555f55ca07b0 'long'
|-TypedefDecl 0x555f55cea3f8 <line:45:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x555f55ca0750 'signed char'
|-TypedefDecl 0x555f55cea468 <line:46:1, col:29> col:29 int_fast16_t 'short'
| `-BuiltinType 0x555f55ca0770 'short'
|-TypedefDecl 0x555f55cea4d8 <line:47:1, col:29> col:29 int_fast32_t 'int'
| `-BuiltinType 0x555f55ca0790 'int'
|-TypedefDecl 0x555f55cea548 <line:48:1, col:29> col:29 int_fast64_t 'long'
| `-BuiltinType 0x555f55ca07b0 'long'
|-TypedefDecl 0x555f55cea5b8 <line:50:1, col:29> col:29 int_least8_t 'signed char'
| `-BuiltinType 0x555f55ca0750 'signed char'
|-TypedefDecl 0x555f55cea628 <line:51:1, col:30> col:30 int_least16_t 'short'
| `-BuiltinType 0x555f55ca0770 'short'
|-TypedefDecl 0x555f55cea698 <line:52:1, col:30> col:30 int_least32_t 'int'
| `-BuiltinType 0x555f55ca0790 'int'
|-TypedefDecl 0x555f55cea708 <line:53:1, col:30> col:30 int_least64_t 'long'
| `-BuiltinType 0x555f55ca07b0 'long'
|-TypedefDecl 0x555f55cea778 <line:55:1, col:25> col:25 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x555f55ca07f0 'unsigned char'
|-TypedefDecl 0x555f55cea7e8 <line:56:1, col:26> col:26 uint16_t 'unsigned short'
| `-BuiltinType 0x555f55ca0810 'unsigned short'
|-TypedefDecl 0x555f55cea858 <line:57:1, col:26> col:26 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x555f55ca0830 'unsigned int'
|-TypedefDecl 0x555f55cea8c8 <line:58:1, col:26> col:26 uint64_t 'unsigned long'
| `-BuiltinType 0x555f55ca0850 'unsigned long'
|-TypedefDecl 0x555f55cea938 <line:60:1, col:29> col:29 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x555f55ca07f0 'unsigned char'
|-TypedefDecl 0x555f55cea9a8 <line:61:1, col:30> col:30 uint_fast16_t 'unsigned short'
| `-BuiltinType 0x555f55ca0810 'unsigned short'
|-TypedefDecl 0x555f55ceaa18 <line:62:1, col:30> col:30 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x555f55ca0830 'unsigned int'
|-TypedefDecl 0x555f55ceaa88 <line:63:1, col:30> col:30 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x555f55ca0850 'unsigned long'
|-TypedefDecl 0x555f55ceaaf8 <line:65:1, col:30> col:30 uint_least8_t 'unsigned char'
| `-BuiltinType 0x555f55ca07f0 'unsigned char'
|-TypedefDecl 0x555f55ceab68 <line:66:1, col:31> col:31 uint_least16_t 'unsigned short'
| `-BuiltinType 0x555f55ca0810 'unsigned short'
|-TypedefDecl 0x555f55ceabd8 <line:67:1, col:31> col:31 uint_least32_t 'unsigned int'
| `-BuiltinType 0x555f55ca0830 'unsigned int'
|-TypedefDecl 0x555f55ceac48 <line:68:1, col:31> col:31 uint_least64_t 'unsigned long'
| `-BuiltinType 0x555f55ca0850 'unsigned long'
|-TypedefDecl 0x555f55ceacb8 <line:70:1, col:26> col:26 intptr_t 'long'
| `-BuiltinType 0x555f55ca07b0 'long'
|-TypedefDecl 0x555f55cead28 <line:71:1, col:26> col:26 referenced uintptr_t 'unsigned long'
| `-BuiltinType 0x555f55ca0850 'unsigned long'
|-TypedefDecl 0x555f55d0e610 </vagrant/ext/zephyros/zephyr/include/zephyr/types.h:16:1, col:29> col:29 referenced s8_t 'signed char'
| `-BuiltinType 0x555f55ca0750 'signed char'
|-TypedefDecl 0x555f55d0e680 <line:17:1, col:29> col:29 s16_t 'short'
| `-BuiltinType 0x555f55ca0770 'short'
|-TypedefDecl 0x555f55d0e6f0 <line:18:1, col:29> col:29 referenced s32_t 'int'
| `-BuiltinType 0x555f55ca0790 'int'
|-TypedefDecl 0x555f55d0e760 <line:19:1, col:29> col:29 referenced s64_t 'long long'
| `-BuiltinType 0x555f55ca07d0 'long long'
|-TypedefDecl 0x555f55d0e7d0 <line:21:1, col:29> col:29 referenced u8_t 'unsigned char'
| `-BuiltinType 0x555f55ca07f0 'unsigned char'
|-TypedefDecl 0x555f55d0e840 <line:22:1, col:29> col:29 referenced u16_t 'unsigned short'
| `-BuiltinType 0x555f55ca0810 'unsigned short'
|-TypedefDecl 0x555f55d0e8b0 <line:23:1, col:29> col:29 referenced u32_t 'unsigned int'
| `-BuiltinType 0x555f55ca0830 'unsigned int'
|-TypedefDecl 0x555f55d0e920 <line:24:1, col:29> col:29 referenced u64_t 'unsigned long long'
| `-BuiltinType 0x555f55ca0870 'unsigned long long'
|-TypedefDecl 0x555f55d0e990 <line:27:1, col:29> col:29 ulong_t 'unsigned long'
| `-BuiltinType 0x555f55ca0850 'unsigned long'
|-TypedefDecl 0x555f55d0eb50 </vagrant/ext/zephyros/zephyr/include/sys/atomic.h:21:1, col:13> col:13 referenced atomic_t 'int'
| `-BuiltinType 0x555f55ca0790 'int'
|-TypedefDecl 0x555f55d0ebe0 <line:22:1, col:18> col:18 referenced atomic_val_t 'atomic_t':'int'
| `-TypedefType 0x555f55d0ebb0 'atomic_t' sugar
|   |-Typedef 0x555f55d0eb50 'atomic_t'
|   `-BuiltinType 0x555f55ca0790 'int'
|-FunctionDecl 0x555f55d0ef48 <line:56:1, line:57:31> line:56:12 atomic_cas 'int (atomic_t *, atomic_val_t, atomic_val_t)' extern
| |-ParmVarDecl 0x555f55d0ed08 <col:23, col:33> col:33 target 'atomic_t *'
| |-ParmVarDecl 0x555f55d0eda0 <col:41, col:54> col:54 old_value 'atomic_val_t':'int'
| `-ParmVarDecl 0x555f55d0ee10 <line:57:9, col:22> col:22 new_value 'atomic_val_t':'int'
|-FunctionDecl 0x555f55d0f200 <line:79:1, col:68> col:21 atomic_add 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x555f55d0f078 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x555f55d0f0e8 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x555f55d0f3e8 <line:101:1, col:68> col:21 atomic_sub 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x555f55d0f2e8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x555f55d0f358 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x555f55d30a30 <line:120:1, col:48> col:21 atomic_inc 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x555f55d0f4d8 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x555f55d30ba0 <line:139:1, col:48> col:21 atomic_dec 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x555f55d30b18 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x555f55d30dc0 <line:158:1, col:54> col:21 used atomic_get 'atomic_val_t (const atomic_t *)' extern
| `-ParmVarDecl 0x555f55d30cb8 <col:32, col:48> col:48 target 'const atomic_t *'
|-FunctionDecl 0x555f55d30fa8 <line:185:1, col:68> col:21 atomic_set 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x555f55d30ea8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x555f55d30f18 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x555f55d31120 <line:205:1, col:50> col:21 atomic_clear 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x555f55d31098 <col:34, col:44> col:44 target 'atomic_t *'
|-FunctionDecl 0x555f55d31308 <line:229:1, col:67> col:21 used atomic_or 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x555f55d31208 <col:31, col:41> col:41 target 'atomic_t *'
| `-ParmVarDecl 0x555f55d31278 <col:49, col:62> col:62 value 'atomic_val_t':'int'
|-FunctionDecl 0x555f55d314f8 <line:252:1, col:68> col:21 atomic_xor 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x555f55d313f8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x555f55d31468 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x555f55d316e8 <line:275:1, col:68> col:21 used atomic_and 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x555f55d315e8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x555f55d31658 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x555f55d318d8 <line:298:1, col:69> col:21 atomic_nand 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x555f55d317d8 <col:33, col:43> col:43 target 'atomic_t *'
| `-ParmVarDecl 0x555f55d31848 <col:51, col:64> col:64 value 'atomic_val_t':'int'
|-FunctionDecl 0x555f55d31c30 <line:351:1, line:356:1> line:351:20 used atomic_test_bit 'bool (const atomic_t *, int)' static inline
| |-ParmVarDecl 0x555f55d31aa8 <col:36, col:52> col:52 used target 'const atomic_t *'
| |-ParmVarDecl 0x555f55d31b20 <col:60, col:64> col:64 used bit 'int'
| |-CompoundStmt 0x555f55d323a8 <line:352:1, line:356:1>
| | |-DeclStmt 0x555f55d32030 <line:353:2, col:57>
| | | `-VarDecl 0x555f55d31cf0 <col:2, col:56> col:15 used val 'atomic_val_t':'int' cinit
| | |   `-CallExpr 0x555f55d32000 <col:21, col:56> 'atomic_val_t':'int'
| | |     |-ImplicitCastExpr 0x555f55d31fe8 <col:21> 'atomic_val_t (*)(const atomic_t *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x555f55d31d50 <col:21> 'atomic_val_t (const atomic_t *)' Function 0x555f55d30dc0 'atomic_get' 'atomic_val_t (const atomic_t *)'
| | |     `-ParenExpr 0x555f55d31f70 <line:318:32, col:63> 'const atomic_t *'
| | |       `-BinaryOperator 0x555f55d31f48 <col:33, col:62> 'const atomic_t *' '+'
| | |         |-ImplicitCastExpr 0x555f55d31f30 <col:33, col:38> 'const atomic_t *' <LValueToRValue>
| | |         | `-ParenExpr 0x555f55d31da0 <col:33, col:38> 'const atomic_t *' lvalue
| | |         |   `-DeclRefExpr 0x555f55d31d78 <line:353:44> 'const atomic_t *' lvalue ParmVar 0x555f55d31aa8 'target' 'const atomic_t *'
| | |         `-ParenExpr 0x555f55d31f10 <line:318:42, col:62> 'unsigned long'
| | |           `-BinaryOperator 0x555f55d31ee8 <col:43, line:316:46> 'unsigned long' '/'
| | |             |-ImplicitCastExpr 0x555f55d31ed0 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |             | `-ImplicitCastExpr 0x555f55d31eb8 <col:43, col:47> 'int' <LValueToRValue>
| | |             |   `-ParenExpr 0x555f55d31de8 <col:43, col:47> 'int' lvalue
| | |             |     `-DeclRefExpr 0x555f55d31dc0 <line:353:52> 'int' lvalue ParmVar 0x555f55d31b20 'bit' 'int'
| | |             `-ParenExpr 0x555f55d31e98 <line:316:21, col:46> 'unsigned long'
| | |               `-BinaryOperator 0x555f55d31e70 <col:22, col:45> 'unsigned long' '*'
| | |                 |-UnaryExprOrTypeTraitExpr 0x555f55d31e18 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |                 `-ImplicitCastExpr 0x555f55d31e58 <col:45> 'unsigned long' <IntegralCast>
| | |                   `-IntegerLiteral 0x555f55d31e38 <col:45> 'int' 8
| | `-ReturnStmt 0x555f55d32368 <line:355:2, col:53>
| |   `-ImplicitCastExpr 0x555f55d32350 <col:9, col:53> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x555f55d32328 <col:9, col:53> 'int' '!='
| |       |-ParenExpr 0x555f55d322e8 <col:9, col:48> 'int'
| |       | `-BinaryOperator 0x555f55d322c0 <col:10, col:47> 'int' '&'
| |       |   |-IntegerLiteral 0x555f55d32048 <col:10> 'int' 1
| |       |   `-ParenExpr 0x555f55d322a0 <col:14, col:47> 'atomic_val_t':'int'
| |       |     `-BinaryOperator 0x555f55d32278 <col:15, col:46> 'atomic_val_t':'int' '>>'
| |       |       |-ImplicitCastExpr 0x555f55d32260 <col:15> 'atomic_val_t':'int' <LValueToRValue>
| |       |       | `-DeclRefExpr 0x555f55d32068 <col:15> 'atomic_val_t':'int' lvalue Var 0x555f55d31cf0 'val' 'atomic_val_t':'int'
| |       |       `-ParenExpr 0x555f55d32240 <col:22, col:46> 'unsigned long'
| |       |         `-BinaryOperator 0x555f55d32218 <col:23, col:45> 'unsigned long' '&'
| |       |           |-ImplicitCastExpr 0x555f55d32200 <col:23> 'unsigned long' <IntegralCast>
| |       |           | `-ImplicitCastExpr 0x555f55d321e8 <col:23> 'int' <LValueToRValue>
| |       |           |   `-DeclRefExpr 0x555f55d32090 <col:23> 'int' lvalue ParmVar 0x555f55d31b20 'bit' 'int'
| |       |           `-ParenExpr 0x555f55d321c8 <col:29, col:45> 'unsigned long'
| |       |             `-BinaryOperator 0x555f55d321a0 <line:316:21, line:355:44> 'unsigned long' '-'
| |       |               |-ParenExpr 0x555f55d32148 <line:316:21, col:46> 'unsigned long'
| |       |               | `-BinaryOperator 0x555f55d32120 <col:22, col:45> 'unsigned long' '*'
| |       |               |   |-UnaryExprOrTypeTraitExpr 0x555f55d320c8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |       |               |   `-ImplicitCastExpr 0x555f55d32108 <col:45> 'unsigned long' <IntegralCast>
| |       |               |     `-IntegerLiteral 0x555f55d320e8 <col:45> 'int' 8
| |       |               `-ImplicitCastExpr 0x555f55d32188 <line:355:44> 'unsigned long' <IntegralCast>
| |       |                 `-IntegerLiteral 0x555f55d32168 <col:44> 'int' 1
| |       `-IntegerLiteral 0x555f55d32308 <col:53> 'int' 0
| `-FullComment 0x555f55ebc2a0 <line:341:3, line:349:55>
|   |-ParagraphComment 0x555f55ebbdb0 <line:341:3>
|   | `-TextComment 0x555f55ebbd80 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ebbdd0 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x555f55ebbe30 <col:10, col:32>
|   |   `-TextComment 0x555f55ebbe00 <col:10, col:32> Text=" Atomically test a bit."
|   |-ParagraphComment 0x555f55ebbfa0 <line:343:3, line:344:66>
|   | |-TextComment 0x555f55ebbe50 <line:343:3, col:41> Text=" This routine tests whether bit number "
|   | |-InlineCommandComment 0x555f55ebbea0 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x555f55ebbec0 <col:48, col:51> Text=" of "
|   | |-InlineCommandComment 0x555f55ebbf10 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x555f55ebbf30 <col:61, col:75> Text=" is set or not."
|   | `-TextComment 0x555f55ebbf50 <line:344:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x555f55ebbff0 <line:346:3>
|   | `-TextComment 0x555f55ebbfc0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ebc010 <col:4, line:347:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x555f55ebc0c0 <line:346:17, line:347:3>
|   |   |-TextComment 0x555f55ebc070 <line:346:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x555f55ebc090 <line:347:3> Text=" "
|   |-ParamCommandComment 0x555f55ebc0e0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x555f55ebc170 <col:14, col:43>
|   |   `-TextComment 0x555f55ebc140 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x555f55ebc1c0 <line:349:3>
|   | `-TextComment 0x555f55ebc190 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ebc1e0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x555f55ebc240 <col:11, col:55>
|       `-TextComment 0x555f55ebc210 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x555f55d32560 <line:369:1, line:377:1> line:369:20 atomic_test_and_clear_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x555f55d323d8 <col:46, col:56> col:56 used target 'atomic_t *'
| |-ParmVarDecl 0x555f55d32450 <col:64, col:68> col:68 used bit 'int'
| |-CompoundStmt 0x555f55d33b18 <line:370:1, line:377:1>
| | |-DeclStmt 0x555f55d32960 <line:371:2, col:38>
| | | `-VarDecl 0x555f55d32620 <col:2, line:317:66> line:371:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x555f55d32940 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x555f55d32918 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x555f55d32680 <col:27> 'int' 1
| | |       `-ParenExpr 0x555f55d328f8 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x555f55d328d0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x555f55d328b8 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x555f55d32760 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x555f55d32748 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x555f55d32728 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x555f55d326c0 <line:371:34> 'int' lvalue ParmVar 0x555f55d32450 'bit' 'int'
| | |           `-ParenExpr 0x555f55d32898 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x555f55d32870 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x555f55d32818 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x555f55d327f0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x555f55d32798 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x555f55d327d8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x555f55d327b8 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x555f55d32858 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x555f55d32838 <col:63> 'int' 1
| | |-DeclStmt 0x555f55d329e8 <line:372:2, col:18>
| | | `-VarDecl 0x555f55d32988 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x555f55d33988 <line:374:2, col:50> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x555f55d32a00 <col:2> 'atomic_val_t':'int' lvalue Var 0x555f55d32988 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x555f55d33950 <col:8, col:50> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x555f55d33938 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x555f55d33640 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x555f55d316e8 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x555f55d33860 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x555f55d33838 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x555f55d33820 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x555f55d33690 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x555f55d33668 <line:374:31> 'atomic_t *' lvalue ParmVar 0x555f55d323d8 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x555f55d33800 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x555f55d337d8 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x555f55d337c0 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x555f55d337a8 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x555f55d336d8 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x555f55d336b0 <line:374:39> 'int' lvalue ParmVar 0x555f55d32450 'bit' 'int'
| | |   |       `-ParenExpr 0x555f55d33788 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x555f55d33760 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x555f55d33708 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x555f55d33748 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x555f55d33728 <col:45> 'int' 8
| | |   `-UnaryOperator 0x555f55d338c0 <line:374:45, col:46> 'atomic_val_t':'int' prefix '~'
| | |     `-ImplicitCastExpr 0x555f55d338a8 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x555f55d33880 <col:46> 'atomic_val_t':'int' lvalue Var 0x555f55d32620 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x555f55d33ad8 <line:376:2, col:25>
| |   `-ImplicitCastExpr 0x555f55d33ac0 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x555f55d33a98 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x555f55d33a58 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x555f55d33a30 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x555f55d33a00 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x555f55d339b0 <col:10> 'atomic_val_t':'int' lvalue Var 0x555f55d32988 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x555f55d33a18 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x555f55d339d8 <col:16> 'atomic_val_t':'int' lvalue Var 0x555f55d32620 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x555f55d33a78 <col:25> 'int' 0
| `-FullComment 0x555f55ebc830 <line:359:3, line:367:55>
|   |-ParagraphComment 0x555f55ebc340 <line:359:3>
|   | `-TextComment 0x555f55ebc310 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ebc360 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x555f55ebc3c0 <col:10, col:42>
|   |   `-TextComment 0x555f55ebc390 <col:10, col:42> Text=" Atomically test and clear a bit."
|   |-ParagraphComment 0x555f55ebc530 <line:361:3, line:362:66>
|   | |-TextComment 0x555f55ebc3e0 <line:361:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x555f55ebc430 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x555f55ebc450 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x555f55ebc4a0 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x555f55ebc4c0 <col:51, col:76> Text=" and return its old value."
|   | `-TextComment 0x555f55ebc4e0 <line:362:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x555f55ebc580 <line:364:3>
|   | `-TextComment 0x555f55ebc550 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ebc5a0 <col:4, line:365:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x555f55ebc650 <line:364:17, line:365:3>
|   |   |-TextComment 0x555f55ebc600 <line:364:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x555f55ebc620 <line:365:3> Text=" "
|   |-ParamCommandComment 0x555f55ebc670 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x555f55ebc700 <col:14, col:43>
|   |   `-TextComment 0x555f55ebc6d0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x555f55ebc750 <line:367:3>
|   | `-TextComment 0x555f55ebc720 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ebc770 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x555f55ebc7d0 <col:11, col:55>
|       `-TextComment 0x555f55ebc7a0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x555f55d33c60 <line:390:1, line:398:1> line:390:20 used atomic_test_and_set_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x555f55d33b58 <col:44, col:54> col:54 used target 'atomic_t *'
| |-ParmVarDecl 0x555f55d33bd0 <col:62, col:66> col:66 used bit 'int'
| |-CompoundStmt 0x555f55d34568 <line:391:1, line:398:1>
| | |-DeclStmt 0x555f55d34040 <line:392:2, col:38>
| | | `-VarDecl 0x555f55d33d20 <col:2, line:317:66> line:392:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x555f55d34020 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x555f55d33ff8 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x555f55d33d80 <col:27> 'int' 1
| | |       `-ParenExpr 0x555f55d33fd8 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x555f55d33fb0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x555f55d33f98 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x555f55d33e40 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x555f55d33e28 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x555f55d33e08 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x555f55d33da0 <line:392:34> 'int' lvalue ParmVar 0x555f55d33bd0 'bit' 'int'
| | |           `-ParenExpr 0x555f55d33f78 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x555f55d33f50 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x555f55d33ef8 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x555f55d33ed0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x555f55d33e78 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x555f55d33eb8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x555f55d33e98 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x555f55d33f38 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x555f55d33f18 <col:63> 'int' 1
| | |-DeclStmt 0x555f55d340c8 <line:393:2, col:18>
| | | `-VarDecl 0x555f55d34068 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x555f55d343d8 <line:395:2, col:48> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x555f55d340e0 <col:2> 'atomic_val_t':'int' lvalue Var 0x555f55d34068 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x555f55d34388 <col:8, col:48> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x555f55d34370 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x555f55d34108 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x555f55d31308 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x555f55d34328 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x555f55d34300 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x555f55d342e8 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x555f55d34158 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x555f55d34130 <line:395:30> 'atomic_t *' lvalue ParmVar 0x555f55d33b58 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x555f55d342c8 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x555f55d342a0 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x555f55d34288 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x555f55d34270 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x555f55d341a0 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x555f55d34178 <line:395:38> 'int' lvalue ParmVar 0x555f55d33bd0 'bit' 'int'
| | |   |       `-ParenExpr 0x555f55d34250 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x555f55d34228 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x555f55d341d0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x555f55d34210 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x555f55d341f0 <col:45> 'int' 8
| | |   `-ImplicitCastExpr 0x555f55d343c0 <line:395:44> 'atomic_val_t':'int' <LValueToRValue>
| | |     `-DeclRefExpr 0x555f55d34348 <col:44> 'atomic_val_t':'int' lvalue Var 0x555f55d33d20 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x555f55d34528 <line:397:2, col:25>
| |   `-ImplicitCastExpr 0x555f55d34510 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x555f55d344e8 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x555f55d344a8 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x555f55d34480 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x555f55d34450 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x555f55d34400 <col:10> 'atomic_val_t':'int' lvalue Var 0x555f55d34068 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x555f55d34468 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x555f55d34428 <col:16> 'atomic_val_t':'int' lvalue Var 0x555f55d33d20 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x555f55d344c8 <col:25> 'int' 0
| `-FullComment 0x555f55ebedf0 <line:380:3, line:388:55>
|   |-ParagraphComment 0x555f55ebc8d0 <line:380:3>
|   | `-TextComment 0x555f55ebc8a0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ebc8f0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x555f55ebc950 <col:10, col:31>
|   |   `-TextComment 0x555f55ebc920 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x555f55ebeaf0 <line:382:3, line:383:66>
|   | |-TextComment 0x555f55ebc970 <line:382:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x555f55ebc9c0 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x555f55ebc9e0 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x555f55ebca30 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x555f55ebca50 <col:49, col:74> Text=" and return its old value."
|   | `-TextComment 0x555f55ebca70 <line:383:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x555f55ebeb40 <line:385:3>
|   | `-TextComment 0x555f55ebeb10 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ebeb60 <col:4, line:386:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x555f55ebec10 <line:385:17, line:386:3>
|   |   |-TextComment 0x555f55ebebc0 <line:385:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x555f55ebebe0 <line:386:3> Text=" "
|   |-ParamCommandComment 0x555f55ebec30 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x555f55ebecc0 <col:14, col:43>
|   |   `-TextComment 0x555f55ebec90 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x555f55ebed10 <line:388:3>
|   | `-TextComment 0x555f55ebece0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ebed30 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x555f55ebed90 <col:11, col:55>
|       `-TextComment 0x555f55ebed60 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x555f55d34760 <line:411:1, line:416:1> line:411:20 used atomic_clear_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x555f55d345a8 <col:37, col:47> col:47 used target 'atomic_t *'
| |-ParmVarDecl 0x555f55d34650 <col:55, col:59> col:59 used bit 'int'
| |-CompoundStmt 0x555f55d34ea8 <line:412:1, line:416:1>
| | |-DeclStmt 0x555f55d34b40 <line:413:2, col:38>
| | | `-VarDecl 0x555f55d34820 <col:2, line:317:66> line:413:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x555f55d34b20 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x555f55d34af8 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x555f55d34880 <col:27> 'int' 1
| | |       `-ParenExpr 0x555f55d34ad8 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x555f55d34ab0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x555f55d34a98 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x555f55d34940 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x555f55d34928 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x555f55d34908 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x555f55d348a0 <line:413:34> 'int' lvalue ParmVar 0x555f55d34650 'bit' 'int'
| | |           `-ParenExpr 0x555f55d34a78 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x555f55d34a50 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x555f55d349f8 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x555f55d349d0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x555f55d34978 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x555f55d349b8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x555f55d34998 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x555f55d34a38 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x555f55d34a18 <col:63> 'int' 1
| | `-CStyleCastExpr 0x555f55d34e58 <line:415:2, col:50> 'void' <ToVoid>
| |   `-CallExpr 0x555f55d34e10 <col:8, col:50> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x555f55d34df8 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55d34b58 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x555f55d316e8 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x555f55d34d78 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x555f55d34d50 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x555f55d34d38 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x555f55d34ba8 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x555f55d34b80 <line:415:31> 'atomic_t *' lvalue ParmVar 0x555f55d345a8 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x555f55d34d18 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x555f55d34cf0 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x555f55d34cd8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x555f55d34cc0 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x555f55d34bf0 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x555f55d34bc8 <line:415:39> 'int' lvalue ParmVar 0x555f55d34650 'bit' 'int'
| |     |       `-ParenExpr 0x555f55d34ca0 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x555f55d34c78 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x555f55d34c20 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x555f55d34c60 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x555f55d34c40 <col:45> 'int' 8
| |     `-UnaryOperator 0x555f55d34dd8 <line:415:45, col:46> 'atomic_val_t':'int' prefix '~'
| |       `-ImplicitCastExpr 0x555f55d34dc0 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| |         `-DeclRefExpr 0x555f55d34d98 <col:46> 'atomic_val_t':'int' lvalue Var 0x555f55d34820 'mask' 'atomic_val_t':'int'
| `-FullComment 0x555f55ebf360 <line:401:3, line:409:14>
|   |-ParagraphComment 0x555f55ebee90 <line:401:3>
|   | `-TextComment 0x555f55ebee60 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ebeeb0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x555f55ebef10 <col:10, col:33>
|   |   `-TextComment 0x555f55ebeee0 <col:10, col:33> Text=" Atomically clear a bit."
|   |-ParagraphComment 0x555f55ebf060 <line:403:3, line:404:66>
|   | |-TextComment 0x555f55ebef30 <line:403:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x555f55ebef80 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x555f55ebefa0 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x555f55ebeff0 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x555f55ebf010 <line:404:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x555f55ebf0b0 <line:406:3>
|   | `-TextComment 0x555f55ebf080 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ebf0d0 <col:4, line:407:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x555f55ebf180 <line:406:17, line:407:3>
|   |   |-TextComment 0x555f55ebf130 <line:406:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x555f55ebf150 <line:407:3> Text=" "
|   |-ParamCommandComment 0x555f55ebf1a0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x555f55ebf230 <col:14, col:43>
|   |   `-TextComment 0x555f55ebf200 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x555f55ebf280 <line:409:3>
|   | `-TextComment 0x555f55ebf250 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ebf2a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55ebf300 <col:11, col:14>
|       `-TextComment 0x555f55ebf2d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55d34fe0 <line:429:1, line:434:1> line:429:20 atomic_set_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x555f55d34ed8 <col:35, col:45> col:45 used target 'atomic_t *'
| |-ParmVarDecl 0x555f55d34f50 <col:53, col:57> col:57 used bit 'int'
| |-CompoundStmt 0x555f55d35728 <line:430:1, line:434:1>
| | |-DeclStmt 0x555f55d353c0 <line:431:2, col:38>
| | | `-VarDecl 0x555f55d350a0 <col:2, line:317:66> line:431:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x555f55d353a0 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x555f55d35378 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x555f55d35100 <col:27> 'int' 1
| | |       `-ParenExpr 0x555f55d35358 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x555f55d35330 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x555f55d35318 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x555f55d351c0 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x555f55d351a8 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x555f55d35188 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x555f55d35120 <line:431:34> 'int' lvalue ParmVar 0x555f55d34f50 'bit' 'int'
| | |           `-ParenExpr 0x555f55d352f8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x555f55d352d0 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x555f55d35278 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x555f55d35250 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x555f55d351f8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x555f55d35238 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x555f55d35218 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x555f55d352b8 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x555f55d35298 <col:63> 'int' 1
| | `-CStyleCastExpr 0x555f55d356d8 <line:433:2, col:48> 'void' <ToVoid>
| |   `-CallExpr 0x555f55d35678 <col:8, col:48> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x555f55d35660 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55d353d8 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x555f55d31308 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x555f55d355f8 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x555f55d355d0 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x555f55d355b8 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x555f55d35428 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x555f55d35400 <line:433:30> 'atomic_t *' lvalue ParmVar 0x555f55d34ed8 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x555f55d35598 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x555f55d35570 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x555f55d35558 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x555f55d35540 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x555f55d35470 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x555f55d35448 <line:433:38> 'int' lvalue ParmVar 0x555f55d34f50 'bit' 'int'
| |     |       `-ParenExpr 0x555f55d35520 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x555f55d354f8 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x555f55d354a0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x555f55d354e0 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x555f55d354c0 <col:45> 'int' 8
| |     `-ImplicitCastExpr 0x555f55d356b0 <line:433:44> 'atomic_val_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x555f55d35618 <col:44> 'atomic_val_t':'int' lvalue Var 0x555f55d350a0 'mask' 'atomic_val_t':'int'
| `-FullComment 0x555f55ebf8d0 <line:419:3, line:427:14>
|   |-ParagraphComment 0x555f55ebf400 <line:419:3>
|   | `-TextComment 0x555f55ebf3d0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ebf420 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x555f55ebf480 <col:10, col:31>
|   |   `-TextComment 0x555f55ebf450 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x555f55ebf5d0 <line:421:3, line:422:66>
|   | |-TextComment 0x555f55ebf4a0 <line:421:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x555f55ebf4f0 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x555f55ebf510 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x555f55ebf560 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x555f55ebf580 <line:422:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x555f55ebf620 <line:424:3>
|   | `-TextComment 0x555f55ebf5f0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ebf640 <col:4, line:425:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x555f55ebf6f0 <line:424:17, line:425:3>
|   |   |-TextComment 0x555f55ebf6a0 <line:424:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x555f55ebf6c0 <line:425:3> Text=" "
|   |-ParamCommandComment 0x555f55ebf710 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x555f55ebf7a0 <col:14, col:43>
|   |   `-TextComment 0x555f55ebf770 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x555f55ebf7f0 <line:427:3>
|   | `-TextComment 0x555f55ebf7c0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ebf810 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55ebf870 <col:11, col:14>
|       `-TextComment 0x555f55ebf840 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55d35970 <line:448:1, line:457:1> line:448:20 atomic_set_bit_to 'void (atomic_t *, int, bool)' static inline
| |-ParmVarDecl 0x555f55d35758 <col:38, col:48> col:48 used target 'atomic_t *'
| |-ParmVarDecl 0x555f55d357d0 <col:56, col:60> col:60 used bit 'int'
| |-ParmVarDecl 0x555f55d35840 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/atomic.h:448:70> col:70 used val 'bool'
| |-CompoundStmt 0x555f55d36508 <line:449:1, line:457:1>
| | |-DeclStmt 0x555f55d35d58 <line:450:2, col:38>
| | | `-VarDecl 0x555f55d35a38 <col:2, line:317:66> line:450:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x555f55d35d38 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x555f55d35d10 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x555f55d35a98 <col:27> 'int' 1
| | |       `-ParenExpr 0x555f55d35cf0 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x555f55d35cc8 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x555f55d35cb0 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x555f55d35b58 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x555f55d35b40 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x555f55d35b20 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x555f55d35ab8 <line:450:34> 'int' lvalue ParmVar 0x555f55d357d0 'bit' 'int'
| | |           `-ParenExpr 0x555f55d35c90 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x555f55d35c68 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x555f55d35c10 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x555f55d35be8 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x555f55d35b90 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x555f55d35bd0 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x555f55d35bb0 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x555f55d35c50 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x555f55d35c30 <col:63> 'int' 1
| | `-IfStmt 0x555f55d36410 <line:452:2, line:456:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x555f55d35d98 <line:452:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x555f55d35d70 <col:6> 'bool' lvalue ParmVar 0x555f55d35840 'val' 'bool'
| |   |-CompoundStmt 0x555f55d360b8 <col:11, line:454:2>
| |   | `-CStyleCastExpr 0x555f55d36090 <line:453:3, col:49> 'void' <ToVoid>
| |   |   `-CallExpr 0x555f55d36030 <col:9, col:49> 'atomic_val_t':'int'
| |   |     |-ImplicitCastExpr 0x555f55d36018 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x555f55d35db0 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x555f55d31308 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |   |     |-ParenExpr 0x555f55d35fd0 <line:318:32, col:63> 'atomic_t *'
| |   |     | `-BinaryOperator 0x555f55d35fa8 <col:33, col:62> 'atomic_t *' '+'
| |   |     |   |-ImplicitCastExpr 0x555f55d35f90 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |   |     |   | `-ParenExpr 0x555f55d35e00 <col:33, col:38> 'atomic_t *' lvalue
| |   |     |   |   `-DeclRefExpr 0x555f55d35dd8 <line:453:31> 'atomic_t *' lvalue ParmVar 0x555f55d35758 'target' 'atomic_t *'
| |   |     |   `-ParenExpr 0x555f55d35f70 <line:318:42, col:62> 'unsigned long'
| |   |     |     `-BinaryOperator 0x555f55d35f48 <col:43, line:316:46> 'unsigned long' '/'
| |   |     |       |-ImplicitCastExpr 0x555f55d35f30 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |   |     |       | `-ImplicitCastExpr 0x555f55d35f18 <col:43, col:47> 'int' <LValueToRValue>
| |   |     |       |   `-ParenExpr 0x555f55d35e48 <col:43, col:47> 'int' lvalue
| |   |     |       |     `-DeclRefExpr 0x555f55d35e20 <line:453:39> 'int' lvalue ParmVar 0x555f55d357d0 'bit' 'int'
| |   |     |       `-ParenExpr 0x555f55d35ef8 <line:316:21, col:46> 'unsigned long'
| |   |     |         `-BinaryOperator 0x555f55d35ed0 <col:22, col:45> 'unsigned long' '*'
| |   |     |           |-UnaryExprOrTypeTraitExpr 0x555f55d35e78 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |   |     |           `-ImplicitCastExpr 0x555f55d35eb8 <col:45> 'unsigned long' <IntegralCast>
| |   |     |             `-IntegerLiteral 0x555f55d35e98 <col:45> 'int' 8
| |   |     `-ImplicitCastExpr 0x555f55d36068 <line:453:45> 'atomic_val_t':'int' <LValueToRValue>
| |   |       `-DeclRefExpr 0x555f55d35ff0 <col:45> 'atomic_val_t':'int' lvalue Var 0x555f55d35a38 'mask' 'atomic_val_t':'int'
| |   `-CompoundStmt 0x555f55d363f8 <line:454:9, line:456:2>
| |     `-CStyleCastExpr 0x555f55d363d0 <line:455:3, col:51> 'void' <ToVoid>
| |       `-CallExpr 0x555f55d36388 <col:9, col:51> 'atomic_val_t':'int'
| |         |-ImplicitCastExpr 0x555f55d36370 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x555f55d360d0 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x555f55d316e8 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |         |-ParenExpr 0x555f55d362f0 <line:318:32, col:63> 'atomic_t *'
| |         | `-BinaryOperator 0x555f55d362c8 <col:33, col:62> 'atomic_t *' '+'
| |         |   |-ImplicitCastExpr 0x555f55d362b0 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |         |   | `-ParenExpr 0x555f55d36120 <col:33, col:38> 'atomic_t *' lvalue
| |         |   |   `-DeclRefExpr 0x555f55d360f8 <line:455:32> 'atomic_t *' lvalue ParmVar 0x555f55d35758 'target' 'atomic_t *'
| |         |   `-ParenExpr 0x555f55d36290 <line:318:42, col:62> 'unsigned long'
| |         |     `-BinaryOperator 0x555f55d36268 <col:43, line:316:46> 'unsigned long' '/'
| |         |       |-ImplicitCastExpr 0x555f55d36250 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |         |       | `-ImplicitCastExpr 0x555f55d36238 <col:43, col:47> 'int' <LValueToRValue>
| |         |       |   `-ParenExpr 0x555f55d36168 <col:43, col:47> 'int' lvalue
| |         |       |     `-DeclRefExpr 0x555f55d36140 <line:455:40> 'int' lvalue ParmVar 0x555f55d357d0 'bit' 'int'
| |         |       `-ParenExpr 0x555f55d36218 <line:316:21, col:46> 'unsigned long'
| |         |         `-BinaryOperator 0x555f55d361f0 <col:22, col:45> 'unsigned long' '*'
| |         |           |-UnaryExprOrTypeTraitExpr 0x555f55d36198 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |         |           `-ImplicitCastExpr 0x555f55d361d8 <col:45> 'unsigned long' <IntegralCast>
| |         |             `-IntegerLiteral 0x555f55d361b8 <col:45> 'int' 8
| |         `-UnaryOperator 0x555f55d36350 <line:455:46, col:47> 'atomic_val_t':'int' prefix '~'
| |           `-ImplicitCastExpr 0x555f55d36338 <col:47> 'atomic_val_t':'int' <LValueToRValue>
| |             `-DeclRefExpr 0x555f55d36310 <col:47> 'atomic_val_t':'int' lvalue Var 0x555f55d35a38 'mask' 'atomic_val_t':'int'
| `-FullComment 0x555f55ebffa0 <line:437:3, line:446:14>
|   |-ParagraphComment 0x555f55ebf970 <line:437:3>
|   | `-TextComment 0x555f55ebf940 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ebf990 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x555f55ebf9f0 <col:10, col:48>
|   |   `-TextComment 0x555f55ebf9c0 <col:10, col:48> Text=" Atomically set a bit to a given value."
|   |-ParagraphComment 0x555f55ebfbc0 <line:439:3, line:440:66>
|   | |-TextComment 0x555f55ebfa10 <line:439:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x555f55ebfa60 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x555f55ebfa80 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x555f55ebfad0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x555f55ebfaf0 <col:49, col:58> Text=" to value "
|   | |-InlineCommandComment 0x555f55ebfb40 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="val."
|   | `-TextComment 0x555f55ebfb60 <line:440:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x555f55ebfc10 <line:442:3>
|   | `-TextComment 0x555f55ebfbe0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ebfc30 <col:4, line:443:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x555f55ebfce0 <line:442:17, line:443:3>
|   |   |-TextComment 0x555f55ebfc90 <line:442:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x555f55ebfcb0 <line:443:3> Text=" "
|   |-ParamCommandComment 0x555f55ebfd00 <col:4, line:444:3> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x555f55ebfdb0 <line:443:14, line:444:3>
|   |   |-TextComment 0x555f55ebfd60 <line:443:14, col:43> Text=" Bit number (starting from 0)."
|   |   `-TextComment 0x555f55ebfd80 <line:444:3> Text=" "
|   |-ParamCommandComment 0x555f55ebfdd0 <col:4, col:38> [in] implicitly Param="val" ParamIndex=2
|   | `-ParagraphComment 0x555f55ebfe60 <col:14, col:38>
|   |   `-TextComment 0x555f55ebfe30 <col:14, col:38> Text=" true for 1, false for 0."
|   |-ParagraphComment 0x555f55ebfeb0 <line:446:3>
|   | `-TextComment 0x555f55ebfe80 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ebfed0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55ebff30 <col:11, col:14>
|       `-TextComment 0x555f55ebff00 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55d3f650 </vagrant/ext/zephyros/zephyr/include/sys/util.h:113:1, line:116:1> line:113:20 is_power_of_two 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x555f55d36540 <col:36, col:49> col:49 used x 'unsigned int'
| `-CompoundStmt 0x555f55d3f9a8 <line:114:1, line:116:1>
|   `-ReturnStmt 0x555f55d3f990 <line:115:2, col:42>
|     `-ImplicitCastExpr 0x555f55d3f978 <col:9, col:42> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x555f55d3f950 <col:9, col:42> 'int' '&&'
|         |-ParenExpr 0x555f55d3f780 <col:9, col:17> 'int'
|         | `-BinaryOperator 0x555f55d3f758 <col:10, col:15> 'int' '!='
|         |   |-ImplicitCastExpr 0x555f55d3f740 <col:10> 'unsigned int' <LValueToRValue>
|         |   | `-DeclRefExpr 0x555f55d3f6f8 <col:10> 'unsigned int' lvalue ParmVar 0x555f55d36540 'x' 'unsigned int'
|         |   `-IntegerLiteral 0x555f55d3f720 <col:15> 'unsigned int' 0
|         `-ParenExpr 0x555f55d3f930 <col:22, col:42> 'int'
|           `-BinaryOperator 0x555f55d3f908 <col:23, col:40> 'int' '=='
|             |-ParenExpr 0x555f55d3f8c8 <col:23, col:35> 'unsigned int'
|             | `-BinaryOperator 0x555f55d3f8a0 <col:24, col:34> 'unsigned int' '&'
|             |   |-ImplicitCastExpr 0x555f55d3f888 <col:24> 'unsigned int' <LValueToRValue>
|             |   | `-DeclRefExpr 0x555f55d3f7a0 <col:24> 'unsigned int' lvalue ParmVar 0x555f55d36540 'x' 'unsigned int'
|             |   `-ParenExpr 0x555f55d3f868 <col:28, col:34> 'unsigned int'
|             |     `-BinaryOperator 0x555f55d3f840 <col:29, col:33> 'unsigned int' '-'
|             |       |-ImplicitCastExpr 0x555f55d3f810 <col:29> 'unsigned int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x555f55d3f7c8 <col:29> 'unsigned int' lvalue ParmVar 0x555f55d36540 'x' 'unsigned int'
|             |       `-ImplicitCastExpr 0x555f55d3f828 <col:33> 'unsigned int' <IntegralCast>
|             |         `-IntegerLiteral 0x555f55d3f7f0 <col:33> 'int' 1
|             `-IntegerLiteral 0x555f55d3f8e8 <col:40> 'unsigned int' 0
|-FunctionDecl 0x555f55d3fb90 <line:118:1, line:134:1> line:118:21 arithmetic_shift_right 's64_t (s64_t, u8_t)' static inline
| |-ParmVarDecl 0x555f55d3f9f0 <col:44, col:50> col:50 used value 's64_t':'long long'
| |-ParmVarDecl 0x555f55d3fa80 <col:57, col:62> col:62 used shift 'u8_t':'unsigned char'
| `-CompoundStmt 0x555f55d402a8 <line:119:1, line:134:1>
|   |-DeclStmt 0x555f55d3fcb0 <line:120:2, col:16>
|   | `-VarDecl 0x555f55d3fc50 <col:2, col:8> col:8 used sign_ext 's64_t':'long long'
|   |-IfStmt 0x555f55d3fdd8 <line:122:2, line:124:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x555f55d3fd40 <line:122:6, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x555f55d3fd28 <col:6> 'unsigned int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x555f55d3fd10 <col:6> 'u8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x555f55d3fcc8 <col:6> 'u8_t':'unsigned char' lvalue ParmVar 0x555f55d3fa80 'shift' 'u8_t':'unsigned char'
|   | | `-IntegerLiteral 0x555f55d3fcf0 <col:15> 'unsigned int' 0
|   | |-CompoundStmt 0x555f55d3fdc0 <col:19, line:124:2>
|   | | `-ReturnStmt 0x555f55d3fda8 <line:123:3, col:10>
|   | |   `-ImplicitCastExpr 0x555f55d3fd90 <col:10> 's64_t':'long long' <LValueToRValue>
|   | |     `-DeclRefExpr 0x555f55d3fd68 <col:10> 's64_t':'long long' lvalue ParmVar 0x555f55d3f9f0 'value' 's64_t':'long long'
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x555f55d3ff40 <line:127:2, col:29> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x555f55d3fe10 <col:2> 's64_t':'long long' lvalue Var 0x555f55d3fc50 'sign_ext' 's64_t':'long long'
|   | `-BinaryOperator 0x555f55d3ff18 <col:13, col:29> 'long long' '&'
|   |   |-ParenExpr 0x555f55d3fec0 <col:13, col:25> 's64_t':'long long'
|   |   | `-BinaryOperator 0x555f55d3fe98 <col:14, col:23> 's64_t':'long long' '>>'
|   |   |   |-ImplicitCastExpr 0x555f55d3fe80 <col:14> 's64_t':'long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x555f55d3fe38 <col:14> 's64_t':'long long' lvalue ParmVar 0x555f55d3f9f0 'value' 's64_t':'long long'
|   |   |   `-IntegerLiteral 0x555f55d3fe60 <col:23> 'int' 63
|   |   `-ImplicitCastExpr 0x555f55d3ff00 <col:29> 'long long' <IntegralCast>
|   |     `-IntegerLiteral 0x555f55d3fee0 <col:29> 'int' 1
|   |-BinaryOperator 0x555f55d3fff0 <line:130:2, col:14> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x555f55d3ff68 <col:2> 's64_t':'long long' lvalue Var 0x555f55d3fc50 'sign_ext' 's64_t':'long long'
|   | `-UnaryOperator 0x555f55d3ffd0 <col:13, col:14> 's64_t':'long long' prefix '-'
|   |   `-ImplicitCastExpr 0x555f55d3ffb8 <col:14> 's64_t':'long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x555f55d3ff90 <col:14> 's64_t':'long long' lvalue Var 0x555f55d3fc50 'sign_ext' 's64_t':'long long'
|   `-ReturnStmt 0x555f55d40268 <line:133:2, col:53>
|     `-BinaryOperator 0x555f55d40240 <col:9, col:53> 'long long' '|'
|       |-ParenExpr 0x555f55d400d8 <col:9, col:24> 's64_t':'long long'
|       | `-BinaryOperator 0x555f55d400b0 <col:10, col:19> 's64_t':'long long' '>>'
|       |   |-ImplicitCastExpr 0x555f55d40068 <col:10> 's64_t':'long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x555f55d40018 <col:10> 's64_t':'long long' lvalue ParmVar 0x555f55d3f9f0 'value' 's64_t':'long long'
|       |   `-ImplicitCastExpr 0x555f55d40098 <col:19> 'int' <IntegralCast>
|       |     `-ImplicitCastExpr 0x555f55d40080 <col:19> 'u8_t':'unsigned char' <LValueToRValue>
|       |       `-DeclRefExpr 0x555f55d40040 <col:19> 'u8_t':'unsigned char' lvalue ParmVar 0x555f55d3fa80 'shift' 'u8_t':'unsigned char'
|       `-ParenExpr 0x555f55d40220 <col:28, col:53> 's64_t':'long long'
|         `-BinaryOperator 0x555f55d401f8 <col:29, col:52> 's64_t':'long long' '<<'
|           |-ImplicitCastExpr 0x555f55d401e0 <col:29> 's64_t':'long long' <LValueToRValue>
|           | `-DeclRefExpr 0x555f55d400f8 <col:29> 's64_t':'long long' lvalue Var 0x555f55d3fc50 'sign_ext' 's64_t':'long long'
|           `-ParenExpr 0x555f55d401c0 <col:41, col:52> 'int'
|             `-BinaryOperator 0x555f55d40198 <col:42, col:47> 'int' '-'
|               |-IntegerLiteral 0x555f55d40120 <col:42> 'int' 64
|               `-ImplicitCastExpr 0x555f55d40180 <col:47> 'int' <IntegralCast>
|                 `-ImplicitCastExpr 0x555f55d40168 <col:47> 'u8_t':'unsigned char' <LValueToRValue>
|                   `-DeclRefExpr 0x555f55d40140 <col:47> 'u8_t':'unsigned char' lvalue ParmVar 0x555f55d3fa80 'shift' 'u8_t':'unsigned char'
|-FunctionDecl 0x555f55d404d8 <line:144:1, col:29> col:5 char2hex 'int (char, u8_t *)'
| |-ParmVarDecl 0x555f55d402f0 <col:14, col:19> col:19 c 'char'
| |-ParmVarDecl 0x555f55d403b8 <col:22, col:28> col:28 x 'u8_t *'
| `-FullComment 0x555f55ec03c0 <line:137:3, line:142:63>
|   |-ParagraphComment 0x555f55ec0040 <line:137:3>
|   | `-TextComment 0x555f55ec0010 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec0060 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x555f55ec00c0 <col:10, col:68>
|   |   `-TextComment 0x555f55ec0090 <col:10, col:68> Text="      Convert a single character into a hexadecimal nibble."
|   |-ParagraphComment 0x555f55ec0110 <line:139:3>
|   | `-TextComment 0x555f55ec00e0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec0130 <col:4, line:140:3> [in] explicitly Param="c" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec01e0 <line:139:17, line:140:3>
|   |   |-TextComment 0x555f55ec0190 <line:139:17, col:45> Text="     The character to convert"
|   |   `-TextComment 0x555f55ec01b0 <line:140:3> Text=" "
|   |-ParamCommandComment 0x555f55ec0200 <col:4, col:69> [in] implicitly Param="x" ParamIndex=1
|   | `-ParagraphComment 0x555f55ec0290 <col:17, col:69>
|   |   `-TextComment 0x555f55ec0260 <col:17, col:69> Text="     The address of storage for the converted number."
|   |-ParagraphComment 0x555f55ec02e0 <line:142:3, col:4>
|   | `-TextComment 0x555f55ec02b0 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x555f55ec0300 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x555f55ec0360 <col:12, col:63>
|       `-TextComment 0x555f55ec0330 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x555f55d40778 <line:154:1, col:29> col:5 hex2char 'int (u8_t, char *)'
| |-ParmVarDecl 0x555f55d405c8 <col:14, col:19> col:19 x 'u8_t':'unsigned char'
| |-ParmVarDecl 0x555f55d40660 <col:22, col:28> col:28 c 'char *'
| `-FullComment 0x555f55ec07e0 <line:147:3, line:152:63>
|   |-ParagraphComment 0x555f55ec0460 <line:147:3>
|   | `-TextComment 0x555f55ec0430 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec0480 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x555f55ec04e0 <col:10, col:68>
|   |   `-TextComment 0x555f55ec04b0 <col:10, col:68> Text="      Convert a single hexadecimal nibble into a character."
|   |-ParagraphComment 0x555f55ec0530 <line:149:3>
|   | `-TextComment 0x555f55ec0500 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec0550 <col:4, line:150:3> [in] explicitly Param="c" ParamIndex=1
|   | `-ParagraphComment 0x555f55ec0600 <line:149:17, line:150:3>
|   |   |-TextComment 0x555f55ec05b0 <line:149:17, col:42> Text="     The number to convert"
|   |   `-TextComment 0x555f55ec05d0 <line:150:3> Text=" "
|   |-ParamCommandComment 0x555f55ec0620 <col:4, col:72> [in] implicitly Param="x" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec06b0 <col:17, col:72>
|   |   `-TextComment 0x555f55ec0680 <col:17, col:72> Text="     The address of storage for the converted character."
|   |-ParagraphComment 0x555f55ec0700 <line:152:3, col:4>
|   | `-TextComment 0x555f55ec06d0 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x555f55ec0720 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x555f55ec0780 <col:12, col:63>
|       `-TextComment 0x555f55ec0750 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x555f55d40b80 <line:166:1, col:72> col:8 bin2hex 'size_t (const u8_t *, size_t, char *, size_t)'
| |-ParmVarDecl 0x555f55d408e8 <col:16, col:28> col:28 buf 'const u8_t *'
| |-ParmVarDecl 0x555f55d40958 <col:33, col:40> col:40 buflen 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55d409d0 <col:48, col:54> col:54 hex 'char *'
| |-ParmVarDecl 0x555f55d40a40 <col:59, col:66> col:66 hexlen 'size_t':'unsigned long'
| `-FullComment 0x555f55ec2df0 <line:157:3, line:164:77>
|   |-ParagraphComment 0x555f55ec0880 <line:157:3>
|   | `-TextComment 0x555f55ec0850 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec08a0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x555f55ec0900 <col:10, col:65>
|   |   `-TextComment 0x555f55ec08d0 <col:10, col:65> Text="      Convert a binary array into string representation."
|   |-ParagraphComment 0x555f55ec0950 <line:159:3>
|   | `-TextComment 0x555f55ec0920 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec0970 <col:4, line:160:3> [in] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec0a20 <line:159:19, line:160:3>
|   |   |-TextComment 0x555f55ec09d0 <line:159:19, col:50> Text="     The binary array to convert"
|   |   `-TextComment 0x555f55ec09f0 <line:160:3> Text=" "
|   |-ParamCommandComment 0x555f55ec0a40 <col:4, line:161:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x555f55ec2b30 <line:160:22, line:161:3>
|   |   |-TextComment 0x555f55ec0aa0 <line:160:22, col:64> Text="  The length of the binary array to convert"
|   |   `-TextComment 0x555f55ec0ac0 <line:161:3> Text=" "
|   |-ParamCommandComment 0x555f55ec2b50 <col:4, line:162:3> [out] explicitly Param="hex" ParamIndex=2
|   | `-ParagraphComment 0x555f55ec2c00 <line:161:19, line:162:3>
|   |   |-TextComment 0x555f55ec2bb0 <line:161:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x555f55ec2bd0 <line:162:3> Text=" "
|   |-ParamCommandComment 0x555f55ec2c20 <col:4, col:74> [in] explicitly Param="hexlen" ParamIndex=3
|   | `-ParagraphComment 0x555f55ec2cb0 <col:22, col:74>
|   |   `-TextComment 0x555f55ec2c80 <col:22, col:74> Text="  Size of the storage area for string representation."
|   |-ParagraphComment 0x555f55ec2d00 <line:164:3>
|   | `-TextComment 0x555f55ec2cd0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec2d20 <col:4, col:77> Name="return"
|     `-ParagraphComment 0x555f55ec2d80 <col:11, col:77>
|       `-TextComment 0x555f55ec2d50 <col:11, col:77> Text="     The length of the converted string, or 0 if an error occurred."
|-FunctionDecl 0x555f55d40f10 <line:184:1, col:72> col:8 hex2bin 'size_t (const char *, size_t, u8_t *, size_t)'
| |-ParmVarDecl 0x555f55d40c80 <col:16, col:28> col:28 hex 'const char *'
| |-ParmVarDecl 0x555f55d40cf0 <col:33, col:40> col:40 hexlen 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55d40d60 <col:48, col:54> col:54 buf 'u8_t *'
| |-ParmVarDecl 0x555f55d40dd0 <col:59, col:66> col:66 buflen 'size_t':'unsigned long'
| `-FullComment 0x555f55ec33c0 <line:175:3, line:182:74>
|   |-ParagraphComment 0x555f55ec2e90 <line:175:3>
|   | `-TextComment 0x555f55ec2e60 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec2eb0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x555f55ec2f10 <col:10, col:64>
|   |   `-TextComment 0x555f55ec2ee0 <col:10, col:64> Text="      Convert a hexadecimal string into a binary array."
|   |-ParagraphComment 0x555f55ec2f60 <line:177:3>
|   | `-TextComment 0x555f55ec2f30 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec2f80 <col:4, line:178:3> [in] explicitly Param="hex" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec3030 <line:177:19, line:178:3>
|   |   |-TextComment 0x555f55ec2fe0 <line:177:19, col:56> Text="     The hexadecimal string to convert"
|   |   `-TextComment 0x555f55ec3000 <line:178:3> Text=" "
|   |-ParamCommandComment 0x555f55ec3050 <col:4, line:179:3> [in] explicitly Param="hexlen" ParamIndex=1
|   | `-ParagraphComment 0x555f55ec3100 <line:178:22, line:179:3>
|   |   |-TextComment 0x555f55ec30b0 <line:178:22, col:71> Text="  The length of the hexadecimal string to convert."
|   |   `-TextComment 0x555f55ec30d0 <line:179:3> Text=" "
|   |-ParamCommandComment 0x555f55ec3120 <col:4, line:180:3> [out] explicitly Param="buf" ParamIndex=2
|   | `-ParagraphComment 0x555f55ec31d0 <line:179:19, line:180:3>
|   |   |-TextComment 0x555f55ec3180 <line:179:19, col:64> Text="     Address of where to store the binary data"
|   |   `-TextComment 0x555f55ec31a0 <line:180:3> Text=" "
|   |-ParamCommandComment 0x555f55ec31f0 <col:4, col:63> [in] explicitly Param="buflen" ParamIndex=3
|   | `-ParagraphComment 0x555f55ec3280 <col:22, col:63>
|   |   `-TextComment 0x555f55ec3250 <col:22, col:63> Text="  Size of the storage area for binary data"
|   |-ParagraphComment 0x555f55ec32d0 <line:182:3>
|   | `-TextComment 0x555f55ec32a0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec32f0 <col:4, col:74> Name="return"
|     `-ParagraphComment 0x555f55ec3350 <col:11, col:74>
|       `-TextComment 0x555f55ec3320 <col:11, col:74> Text="     The length of the binary array , or 0 if an error occurred."
|-FunctionDecl 0x555f55d41220 <line:199:1, col:50> col:6 u8_to_dec 'u8_t (char *, u8_t, u8_t)'
| |-ParmVarDecl 0x555f55d41010 <col:16, col:22> col:22 buf 'char *'
| |-ParmVarDecl 0x555f55d41080 <col:27, col:32> col:32 buflen 'u8_t':'unsigned char'
| |-ParmVarDecl 0x555f55d410f0 <col:40, col:45> col:45 value 'u8_t':'unsigned char'
| `-FullComment 0x555f55ec3950 <line:187:3, line:197:47>
|   |-ParagraphComment 0x555f55ec3460 <line:187:3>
|   | `-TextComment 0x555f55ec3430 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec3480 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x555f55ec34e0 <col:10, col:65>
|   |   `-TextComment 0x555f55ec34b0 <col:10, col:65> Text="      Convert a u8_t into decimal string representation."
|   |-ParagraphComment 0x555f55ec3550 <line:189:3, line:190:60>
|   | |-TextComment 0x555f55ec3500 <line:189:3, col:65> Text=" Convert a u8_t value into ASCII decimal string representation."
|   | `-TextComment 0x555f55ec3520 <line:190:3, col:60> Text=" The string is terminated if there is enough space in buf."
|   |-ParagraphComment 0x555f55ec35a0 <line:192:3>
|   | `-TextComment 0x555f55ec3570 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec35c0 <col:4, line:193:3> [out] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec3670 <line:192:19, line:193:3>
|   |   |-TextComment 0x555f55ec3620 <line:192:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x555f55ec3640 <line:193:3> Text=" "
|   |-ParamCommandComment 0x555f55ec3690 <col:4, line:194:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x555f55ec3740 <line:193:22, line:194:3>
|   |   |-TextComment 0x555f55ec36f0 <line:193:22, col:74> Text="  Size of the storage area for string representation."
|   |   `-TextComment 0x555f55ec3710 <line:194:3> Text=" "
|   |-ParamCommandComment 0x555f55ec3760 <col:4, col:61> [in] explicitly Param="value" ParamIndex=2
|   | `-ParagraphComment 0x555f55ec37f0 <col:21, col:61>
|   |   `-TextComment 0x555f55ec37c0 <col:21, col:61> Text="   The value to convert to decimal string"
|   |-ParagraphComment 0x555f55ec3840 <line:196:3>
|   | `-TextComment 0x555f55ec3810 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec3860 <col:4, line:197:47> Name="return"
|     `-ParagraphComment 0x555f55ec38e0 <line:196:11, line:197:47>
|       |-TextComment 0x555f55ec3890 <line:196:11, col:74> Text="     The length of the converted string (excluding terminator if"
|       `-TextComment 0x555f55ec38b0 <line:197:3, col:47> Text="             any), or 0 if an error occurred."
|-RecordDecl 0x555f55d415d8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:31:1, line:40:1> line:31:8 struct _dnode definition
| |-RecordDecl 0x555f55d75e50 <line:32:2, line:35:2> line:32:2 union definition
| | |-FieldDecl 0x555f55d75fb0 <line:33:3, col:18> col:18 referenced head 'struct _dnode *'
| | `-FieldDecl 0x555f55d76020 <line:34:3, col:18> col:18 referenced next 'struct _dnode *'
| |-FieldDecl 0x555f55d760c0 <line:32:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| |-IndirectFieldDecl 0x555f55d76118 <line:33:18> col:18 implicit head 'struct _dnode *'
| | |-Field 0x555f55d760c0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x555f55d75fb0 'head' 'struct _dnode *'
| |-IndirectFieldDecl 0x555f55d76168 <line:34:18> col:18 implicit next 'struct _dnode *'
| | |-Field 0x555f55d760c0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x555f55d76020 'next' 'struct _dnode *'
| |-RecordDecl 0x555f55d761a8 <line:36:2, line:39:2> line:36:2 union definition
| | |-FieldDecl 0x555f55d76278 <line:37:3, col:18> col:18 referenced tail 'struct _dnode *'
| | `-FieldDecl 0x555f55d762e8 <line:38:3, col:18> col:18 referenced prev 'struct _dnode *'
| |-FieldDecl 0x555f55d76380 <line:36:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| |-IndirectFieldDecl 0x555f55d763d8 <line:37:18> col:18 implicit tail 'struct _dnode *'
| | |-Field 0x555f55d76380 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| | `-Field 0x555f55d76278 'tail' 'struct _dnode *'
| `-IndirectFieldDecl 0x555f55d76428 <line:38:18> col:18 implicit prev 'struct _dnode *'
|   |-Field 0x555f55d76380 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
|   `-Field 0x555f55d762e8 'prev' 'struct _dnode *'
|-TypedefDecl 0x555f55d764d8 <line:42:1, col:23> col:23 referenced sys_dlist_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x555f55d75f00 'struct _dnode' sugar
|   `-RecordType 0x555f55d75e30 'struct _dnode'
|     `-Record 0x555f55d415d8 '_dnode'
|-TypedefDecl 0x555f55d76550 <line:43:1, col:23> col:23 referenced sys_dnode_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x555f55d75f00 'struct _dnode' sugar
|   `-RecordType 0x555f55d75e30 'struct _dnode'
|     `-Record 0x555f55d415d8 '_dnode'
|-FunctionDecl 0x555f55d76830 <line:192:1, line:196:1> line:192:20 sys_dlist_init 'void (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x555f55d76728 <col:35, col:48> col:48 used list 'sys_dlist_t *'
| |-CompoundStmt 0x555f55d76c28 <line:193:1, line:196:1>
| | |-BinaryOperator 0x555f55d76a68 <line:194:2, col:30> 'struct _dnode *' '='
| | | |-MemberExpr 0x555f55d76968 <col:2, col:8> 'struct _dnode *' lvalue .head 0x555f55d75fb0
| | | | `-MemberExpr 0x555f55d76918 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| | | |   `-ImplicitCastExpr 0x555f55d76900 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x555f55d768d8 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x555f55d76728 'list' 'sys_dlist_t *'
| | | `-CStyleCastExpr 0x555f55d76a40 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| | |   `-ImplicitCastExpr 0x555f55d76a28 <col:30> 'sys_dlist_t *' <LValueToRValue>
| | |     `-DeclRefExpr 0x555f55d769c0 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x555f55d76728 'list' 'sys_dlist_t *'
| | `-BinaryOperator 0x555f55d76bd0 <line:195:2, col:30> 'struct _dnode *' '='
| |   |-MemberExpr 0x555f55d76b20 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x555f55d76278
| |   | `-MemberExpr 0x555f55d76ad0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| |   |   `-ImplicitCastExpr 0x555f55d76ab8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x555f55d76a90 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x555f55d76728 'list' 'sys_dlist_t *'
| |   `-CStyleCastExpr 0x555f55d76ba8 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| |     `-ImplicitCastExpr 0x555f55d76b90 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x555f55d76b58 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x555f55d76728 'list' 'sys_dlist_t *'
| `-FullComment 0x555f55ec3c90 <line:185:3, line:189:14>
|   |-ParagraphComment 0x555f55ec39f0 <line:185:3>
|   | `-TextComment 0x555f55ec39c0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec3a10 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x555f55ec3a70 <col:10, col:44>
|   |   `-TextComment 0x555f55ec3a40 <col:10, col:44> Text=" initialize list to its empty state"
|   |-ParagraphComment 0x555f55ec3ac0 <line:187:3>
|   | `-TextComment 0x555f55ec3a90 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec3ae0 <col:4, col:37> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec3b70 <col:15, col:37>
|   |   `-TextComment 0x555f55ec3b40 <col:15, col:37> Text=" the doubly-linked list"
|   |-ParagraphComment 0x555f55ec3bc0 <line:189:3>
|   | `-TextComment 0x555f55ec3b90 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec3be0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55ec3c40 <col:11, col:14>
|       `-TextComment 0x555f55ec3c10 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55d76d20 <line:208:1, line:212:1> line:208:20 used sys_dnode_init 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x555f55d76c58 <col:35, col:48> col:48 used node 'sys_dnode_t *'
| |-CompoundStmt 0x555f55d7a738 <line:209:1, line:212:1>
| | |-BinaryOperator 0x555f55d7a560 <line:210:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| | | |-MemberExpr 0x555f55d7a490 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:210:2, col:8> 'struct _dnode *' lvalue .next 0x555f55d76020
| | | | `-MemberExpr 0x555f55d7a440 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| | | |   `-ImplicitCastExpr 0x555f55d76df0 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x555f55d76dc8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x555f55d76c58 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x555f55d7a548 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| | |   `-ParenExpr 0x555f55d7a528 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x555f55d7a500 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x555f55d7a4c8 <col:23> 'int' 0
| | `-BinaryOperator 0x555f55d7a6e8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| |   |-MemberExpr 0x555f55d7a618 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, col:8> 'struct _dnode *' lvalue .prev 0x555f55d762e8
| |   | `-MemberExpr 0x555f55d7a5c8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| |   |   `-ImplicitCastExpr 0x555f55d7a5b0 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x555f55d7a588 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x555f55d76c58 'node' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x555f55d7a6d0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     `-ParenExpr 0x555f55d7a6b0 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x555f55d7a688 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x555f55d7a650 <col:23> 'int' 0
| `-FullComment 0x555f55ec3fd0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:201:3, line:205:14>
|   |-ParagraphComment 0x555f55ec3d30 <line:201:3>
|   | `-TextComment 0x555f55ec3d00 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec3d50 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x555f55ec3db0 <col:10, col:57>
|   |   `-TextComment 0x555f55ec3d80 <col:10, col:57> Text=" initialize node to its state when not in a list"
|   |-ParagraphComment 0x555f55ec3e00 <line:203:3>
|   | `-TextComment 0x555f55ec3dd0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec3e20 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec3eb0 <col:15, col:23>
|   |   `-TextComment 0x555f55ec3e80 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x555f55ec3f00 <line:205:3>
|   | `-TextComment 0x555f55ec3ed0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec3f20 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55ec3f80 <col:11, col:14>
|       `-TextComment 0x555f55ec3f50 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55d7a8d0 <line:222:1, line:225:1> line:222:20 sys_dnode_is_linked 'bool (const sys_dnode_t *)' static inline
| |-ParmVarDecl 0x555f55d7a7c8 <col:40, col:59> col:59 used node 'const sys_dnode_t *'
| |-CompoundStmt 0x555f55d7ab78 <line:223:1, line:225:1>
| | `-ReturnStmt 0x555f55d7ab30 <line:224:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ImplicitCastExpr 0x555f55d7ab18 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x555f55d7aaf0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       |-ImplicitCastExpr 0x555f55d7aac0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x555f55d7aa08 <col:9, col:15> 'struct _dnode *const' lvalue .next 0x555f55d76020
| |       |   `-MemberExpr 0x555f55d7a9b8 <col:9, col:15> 'const union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| |       |     `-ImplicitCastExpr 0x555f55d7a9a0 <col:9> 'const sys_dnode_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x555f55d7a978 <col:9> 'const sys_dnode_t *' lvalue ParmVar 0x555f55d7a7c8 'node' 'const sys_dnode_t *'
| |       `-ImplicitCastExpr 0x555f55d7aad8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <BitCast>
| |         `-ParenExpr 0x555f55d7aaa0 <col:14, col:24> 'void *'
| |           `-CStyleCastExpr 0x555f55d7aa78 <col:15, col:23> 'void *' <NullToPointer>
| |             `-IntegerLiteral 0x555f55d7aa40 <col:23> 'int' 0
| `-FullComment 0x555f55ec4310 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:215:3, line:219:65>
|   |-ParagraphComment 0x555f55ec4070 <line:215:3>
|   | `-TextComment 0x555f55ec4040 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec4090 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55ec40f0 <col:10, col:49>
|   |   `-TextComment 0x555f55ec40c0 <col:10, col:49> Text=" check if a node is a member of any list"
|   |-ParagraphComment 0x555f55ec4140 <line:217:3>
|   | `-TextComment 0x555f55ec4110 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec4160 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec41f0 <col:15, col:23>
|   |   `-TextComment 0x555f55ec41c0 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x555f55ec4240 <line:219:3>
|   | `-TextComment 0x555f55ec4210 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec4260 <col:4, col:65> Name="return"
|     `-ParagraphComment 0x555f55ec42c0 <col:11, col:65>
|       `-TextComment 0x555f55ec4290 <col:11, col:65> Text=" true if node is linked into a list, false if it is not"
|-FunctionDecl 0x555f55d7ad20 <line:236:1, line:239:1> line:236:20 sys_dlist_is_head 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x555f55d7aba0 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x555f55d7ac10 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x555f55d7af78 <line:237:1, line:239:1>
| | `-ReturnStmt 0x555f55d7af30 <line:238:2, col:23>
| |   `-ImplicitCastExpr 0x555f55d7af18 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x555f55d7aef0 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x555f55d7aec0 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x555f55d7ae60 <col:9, col:15> 'struct _dnode *' lvalue .head 0x555f55d75fb0
| |       |   `-MemberExpr 0x555f55d7ae10 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| |       |     `-ImplicitCastExpr 0x555f55d7adf8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x555f55d7add0 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7aba0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x555f55d7aed8 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x555f55d7ae98 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x555f55d7ac10 'node' 'sys_dnode_t *'
| `-FullComment 0x555f55ec4730 <line:228:3, line:233:52>
|   |-ParagraphComment 0x555f55ec43b0 <line:228:3>
|   | `-TextComment 0x555f55ec4380 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec43d0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x555f55ec4430 <col:10, col:44>
|   |   `-TextComment 0x555f55ec4400 <col:10, col:44> Text=" check if a node is the list's head"
|   |-ParagraphComment 0x555f55ec4480 <line:230:3>
|   | `-TextComment 0x555f55ec4450 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec44a0 <col:4, line:231:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec4550 <line:230:15, line:231:3>
|   |   |-TextComment 0x555f55ec4500 <line:230:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x555f55ec4520 <line:231:3> Text=" "
|   |-ParamCommandComment 0x555f55ec4570 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x555f55ec4600 <col:15, col:32>
|   |   `-TextComment 0x555f55ec45d0 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x555f55ec4650 <line:233:3>
|   | `-TextComment 0x555f55ec4620 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec4670 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x555f55ec46d0 <col:11, col:52>
|       `-TextComment 0x555f55ec46a0 <col:11, col:52> Text=" true if node is the head, false otherwise"
|-FunctionDecl 0x555f55d7b0a0 <line:250:1, line:253:1> line:250:20 sys_dlist_is_tail 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x555f55d7afa0 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x555f55d7b010 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x555f55d7b2f8 <line:251:1, line:253:1>
| | `-ReturnStmt 0x555f55d7b2b0 <line:252:2, col:23>
| |   `-ImplicitCastExpr 0x555f55d7b298 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x555f55d7b270 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x555f55d7b240 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x555f55d7b1e0 <col:9, col:15> 'struct _dnode *' lvalue .tail 0x555f55d76278
| |       |   `-MemberExpr 0x555f55d7b190 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| |       |     `-ImplicitCastExpr 0x555f55d7b178 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x555f55d7b150 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7afa0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x555f55d7b258 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x555f55d7b218 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x555f55d7b010 'node' 'sys_dnode_t *'
| `-FullComment 0x555f55ec5b90 <line:242:3, line:247:52>
|   |-ParagraphComment 0x555f55ec47d0 <line:242:3>
|   | `-TextComment 0x555f55ec47a0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec47f0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x555f55ec4850 <col:10, col:44>
|   |   `-TextComment 0x555f55ec4820 <col:10, col:44> Text=" check if a node is the list's tail"
|   |-ParagraphComment 0x555f55ec48a0 <line:244:3>
|   | `-TextComment 0x555f55ec4870 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec48c0 <col:4, line:245:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec4970 <line:244:15, line:245:3>
|   |   |-TextComment 0x555f55ec4920 <line:244:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x555f55ec4940 <line:245:3> Text=" "
|   |-ParamCommandComment 0x555f55ec4990 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x555f55ec4a20 <col:15, col:32>
|   |   `-TextComment 0x555f55ec49f0 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x555f55ec4a70 <line:247:3>
|   | `-TextComment 0x555f55ec4a40 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec4a90 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x555f55ec4af0 <col:11, col:52>
|       `-TextComment 0x555f55ec4ac0 <col:11, col:52> Text=" true if node is the tail, false otherwise"
|-FunctionDecl 0x555f55d7b860 <line:263:1, line:266:1> line:263:20 used sys_dlist_is_empty 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x555f55d7b320 <col:39, col:52> col:52 used list 'sys_dlist_t *'
| |-CompoundStmt 0x555f55d7baa8 <line:264:1, line:266:1>
| | `-ReturnStmt 0x555f55d7ba68 <line:265:2, col:23>
| |   `-ImplicitCastExpr 0x555f55d7ba50 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x555f55d7ba28 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x555f55d7b9f8 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x555f55d7b998 <col:9, col:15> 'struct _dnode *' lvalue .head 0x555f55d75fb0
| |       |   `-MemberExpr 0x555f55d7b948 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| |       |     `-ImplicitCastExpr 0x555f55d7b930 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x555f55d7b908 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7b320 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x555f55d7ba10 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x555f55d7b9d0 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7b320 'list' 'sys_dlist_t *'
| `-FullComment 0x555f55ec5ed0 <line:256:3, line:260:41>
|   |-ParagraphComment 0x555f55ec5c30 <line:256:3>
|   | `-TextComment 0x555f55ec5c00 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec5c50 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x555f55ec5cb0 <col:10, col:36>
|   |   `-TextComment 0x555f55ec5c80 <col:10, col:36> Text=" check if the list is empty"
|   |-ParagraphComment 0x555f55ec5d00 <line:258:3>
|   | `-TextComment 0x555f55ec5cd0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec5d20 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec5db0 <col:15, col:51>
|   |   `-TextComment 0x555f55ec5d80 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x555f55ec5e00 <line:260:3>
|   | `-TextComment 0x555f55ec5dd0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec5e20 <col:4, col:41> Name="return"
|     `-ParagraphComment 0x555f55ec5e80 <col:11, col:41>
|       `-TextComment 0x555f55ec5e50 <col:11, col:41> Text=" true if empty, false otherwise"
|-FunctionDecl 0x555f55d7bb58 <line:278:1, line:281:1> line:278:20 sys_dlist_has_multiple_nodes 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x555f55d7bad0 <col:49, col:62> col:62 used list 'sys_dlist_t *'
| |-CompoundStmt 0x555f55d7be48 <line:279:1, line:281:1>
| | `-ReturnStmt 0x555f55d7be00 <line:280:2, col:29>
| |   `-ImplicitCastExpr 0x555f55d7bde8 <col:9, col:29> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x555f55d7bdc0 <col:9, col:29> 'int' '!='
| |       |-ImplicitCastExpr 0x555f55d7bd90 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x555f55d7bc90 <col:9, col:15> 'struct _dnode *' lvalue .head 0x555f55d75fb0
| |       |   `-MemberExpr 0x555f55d7bc40 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| |       |     `-ImplicitCastExpr 0x555f55d7bc28 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x555f55d7bc00 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7bad0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x555f55d7bda8 <col:23, col:29> 'struct _dnode *' <LValueToRValue>
| |         `-MemberExpr 0x555f55d7bd58 <col:23, col:29> 'struct _dnode *' lvalue .tail 0x555f55d76278
| |           `-MemberExpr 0x555f55d7bd08 <col:23, col:29> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| |             `-ImplicitCastExpr 0x555f55d7bcf0 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |               `-DeclRefExpr 0x555f55d7bcc8 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7bad0 'list' 'sys_dlist_t *'
| `-FullComment 0x555f55ec6270 <line:269:3, line:275:50>
|   |-ParagraphComment 0x555f55ec5f70 <line:269:3>
|   | `-TextComment 0x555f55ec5f40 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec5f90 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x555f55ec5ff0 <col:10, col:45>
|   |   `-TextComment 0x555f55ec5fc0 <col:10, col:45> Text=" check if more than one node present"
|   |-ParagraphComment 0x555f55ec6040 <line:271:3, col:62>
|   | `-TextComment 0x555f55ec6010 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ec6090 <line:273:3>
|   | `-TextComment 0x555f55ec6060 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec60b0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec6140 <col:15, col:51>
|   |   `-TextComment 0x555f55ec6110 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x555f55ec6190 <line:275:3>
|   | `-TextComment 0x555f55ec6160 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec61b0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x555f55ec6210 <col:11, col:50>
|       `-TextComment 0x555f55ec61e0 <col:11, col:50> Text=" true if multiple nodes, false otherwise"
|-FunctionDecl 0x555f55d7bf70 <line:291:1, line:294:1> line:291:28 used sys_dlist_peek_head 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x555f55d7be70 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x555f55d7c328 <line:292:1, line:294:1>
| | `-ReturnStmt 0x555f55d7c2e8 <line:293:2, col:49>
| |   `-ConditionalOperator 0x555f55d7c2b8 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x555f55d7c270 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x555f55d7c0e0 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x555f55d7c0c8 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x555f55d7c018 <col:9> 'bool (sys_dlist_t *)' Function 0x555f55d7b860 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x555f55d7c110 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x555f55d7c040 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7be70 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x555f55d7c2a0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x555f55d7c188 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x555f55d7c160 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x555f55d7c128 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x555f55d7c288 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:293:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x555f55d7c238 <col:43, col:49> 'struct _dnode *' lvalue .head 0x555f55d75fb0
| |         `-MemberExpr 0x555f55d7c1e8 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| |           `-ImplicitCastExpr 0x555f55d7c1d0 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x555f55d7c1a8 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7be70 'list' 'sys_dlist_t *'
| `-FullComment 0x555f55ec65b0 <line:284:3, line:288:63>
|   |-ParagraphComment 0x555f55ec6310 <line:284:3>
|   | `-TextComment 0x555f55ec62e0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec6330 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x555f55ec6390 <col:10, col:54>
|   |   `-TextComment 0x555f55ec6360 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x555f55ec63e0 <line:286:3>
|   | `-TextComment 0x555f55ec63b0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec6400 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec6490 <col:15, col:51>
|   |   `-TextComment 0x555f55ec6460 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x555f55ec64e0 <line:288:3>
|   | `-TextComment 0x555f55ec64b0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec6500 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x555f55ec6560 <col:11, col:63>
|       `-TextComment 0x555f55ec6530 <col:11, col:63> Text=" a pointer to the head element, NULL if list is empty"
|-FunctionDecl 0x555f55d7c3d8 <line:306:1, line:309:1> line:306:28 sys_dlist_peek_head_not_empty 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x555f55d7c350 <col:58, col:71> col:71 used list 'sys_dlist_t *'
| |-CompoundStmt 0x555f55d7c5a8 <line:307:1, line:309:1>
| | `-ReturnStmt 0x555f55d7c560 <line:308:2, col:15>
| |   `-ImplicitCastExpr 0x555f55d7c548 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |     `-MemberExpr 0x555f55d7c510 <col:9, col:15> 'struct _dnode *' lvalue .head 0x555f55d75fb0
| |       `-MemberExpr 0x555f55d7c4c0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| |         `-ImplicitCastExpr 0x555f55d7c4a8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |           `-DeclRefExpr 0x555f55d7c480 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7c350 'list' 'sys_dlist_t *'
| `-FullComment 0x555f55ec6950 <line:297:3, line:303:40>
|   |-ParagraphComment 0x555f55ec6650 <line:297:3>
|   | `-TextComment 0x555f55ec6620 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec6670 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x555f55ec66d0 <col:10, col:54>
|   |   `-TextComment 0x555f55ec66a0 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x555f55ec6720 <line:299:3, col:42>
|   | `-TextComment 0x555f55ec66f0 <col:3, col:42> Text=" The list must be known to be non-empty."
|   |-ParagraphComment 0x555f55ec6770 <line:301:3>
|   | `-TextComment 0x555f55ec6740 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec6790 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec6820 <col:15, col:51>
|   |   `-TextComment 0x555f55ec67f0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x555f55ec6870 <line:303:3>
|   | `-TextComment 0x555f55ec6840 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec6890 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x555f55ec68f0 <col:11, col:40>
|       `-TextComment 0x555f55ec68c0 <col:11, col:40> Text=" a pointer to the head element"
|-FunctionDecl 0x555f55d7c750 <line:322:1, line:326:1> line:322:28 used sys_dlist_peek_next_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x555f55d7c5d0 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x555f55d7c640 <line:323:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x555f55d7cb78 <line:324:1, line:326:1>
| | `-ReturnStmt 0x555f55d7cb30 <line:325:2, col:45>
| |   `-ConditionalOperator 0x555f55d7cb00 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x555f55d7c968 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x555f55d7c940 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x555f55d7c910 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x555f55d7c800 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x555f55d7c640 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x555f55d7c928 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x555f55d7c8d8 <col:18, col:24> 'struct _dnode *' lvalue .tail 0x555f55d76278
| |     |       `-MemberExpr 0x555f55d7c888 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| |     |         `-ImplicitCastExpr 0x555f55d7c870 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x555f55d7c828 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7c5d0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x555f55d7cae8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x555f55d7c9e8 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x555f55d7c9c0 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x555f55d7c988 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x555f55d7cad0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:325:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x555f55d7ca98 <col:39, col:45> 'struct _dnode *' lvalue .next 0x555f55d76020
| |         `-MemberExpr 0x555f55d7ca48 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| |           `-ImplicitCastExpr 0x555f55d7ca30 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x555f55d7ca08 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x555f55d7c640 'node' 'sys_dnode_t *'
| `-FullComment 0x555f55ec6dc0 <line:312:3, line:319:78>
|   |-ParagraphComment 0x555f55ec69f0 <line:312:3>
|   | `-TextComment 0x555f55ec69c0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec6a10 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x555f55ec6a70 <col:10, col:72>
|   |   `-TextComment 0x555f55ec6a40 <col:10, col:72> Text=" get a reference to the next item in the list, node is not NULL"
|   |-ParagraphComment 0x555f55ec6ac0 <line:314:3, col:69>
|   | `-TextComment 0x555f55ec6a90 <col:3, col:69> Text=" Faster than sys_dlist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x555f55ec6b10 <line:316:3>
|   | `-TextComment 0x555f55ec6ae0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec6b30 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec6be0 <line:316:15, line:317:3>
|   |   |-TextComment 0x555f55ec6b90 <line:316:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x555f55ec6bb0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x555f55ec6c00 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x555f55ec6c90 <col:15, col:70>
|   |   `-TextComment 0x555f55ec6c60 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x555f55ec6ce0 <line:319:3>
|   | `-TextComment 0x555f55ec6cb0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec6d00 <col:4, col:78> Name="return"
|     `-ParagraphComment 0x555f55ec6d60 <col:11, col:78>
|       `-TextComment 0x555f55ec6d30 <col:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|-FunctionDecl 0x555f55d7cca0 <line:338:1, line:342:1> line:338:28 used sys_dlist_peek_next 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x555f55d7cba0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x555f55d7cc10 <line:339:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x555f55d7d0d8 <line:340:1, line:342:1>
| | `-ReturnStmt 0x555f55d7d090 <line:341:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x555f55d7d060 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x555f55d7ce50 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, col:22> 'int'
| |     | `-BinaryOperator 0x555f55d7ce28 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x555f55d7cdf8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x555f55d7cd50 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x555f55d7cc10 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x555f55d7ce10 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x555f55d7cdd8 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x555f55d7cdb0 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x555f55d7cd78 <col:23> 'int' 0
| |     |-CallExpr 0x555f55d7cf60 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x555f55d7cf48 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x555f55d7ce70 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x555f55d7c750 'sys_dlist_peek_next_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x555f55d7cf98 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x555f55d7ce98 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7cba0 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x555f55d7cfb0 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x555f55d7cec0 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x555f55d7cc10 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x555f55d7d048 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x555f55d7d028 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x555f55d7d000 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x555f55d7cfc8 <col:23> 'int' 0
| `-FullComment 0x555f55ec7200 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:329:3, line:335:68>
|   |-ParagraphComment 0x555f55ec6e60 <line:329:3>
|   | `-TextComment 0x555f55ec6e30 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec6e80 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x555f55ec6ee0 <col:10, col:54>
|   |   `-TextComment 0x555f55ec6eb0 <col:10, col:54> Text=" get a reference to the next item in the list"
|   |-ParagraphComment 0x555f55ec6f30 <line:331:3>
|   | `-TextComment 0x555f55ec6f00 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec6f50 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec7000 <line:331:15, line:332:3>
|   |   |-TextComment 0x555f55ec6fb0 <line:331:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x555f55ec6fd0 <line:332:3> Text=" "
|   |-ParamCommandComment 0x555f55ec7020 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x555f55ec70b0 <col:15, col:70>
|   |   `-TextComment 0x555f55ec7080 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x555f55ec7100 <line:334:3>
|   | `-TextComment 0x555f55ec70d0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec7120 <col:4, line:335:68> Name="return"
|     `-ParagraphComment 0x555f55ec71a0 <line:334:11, line:335:68>
|       |-TextComment 0x555f55ec7150 <line:334:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|       `-TextComment 0x555f55ec7170 <line:335:3, col:68> Text=" or NULL (when node comes from reading the head of an empty list)."
|-FunctionDecl 0x555f55d7d200 <line:356:1, line:360:1> line:356:28 used sys_dlist_peek_prev_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x555f55d7d100 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x555f55d7d170 <line:357:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x555f55d7d608 <line:358:1, line:360:1>
| | `-ReturnStmt 0x555f55d7d5c0 <line:359:2, col:45>
| |   `-ConditionalOperator 0x555f55d7d590 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x555f55d7d3f8 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x555f55d7d3d0 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x555f55d7d3a0 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x555f55d7d2b0 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x555f55d7d170 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x555f55d7d3b8 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x555f55d7d368 <col:18, col:24> 'struct _dnode *' lvalue .head 0x555f55d75fb0
| |     |       `-MemberExpr 0x555f55d7d318 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| |     |         `-ImplicitCastExpr 0x555f55d7d300 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x555f55d7d2d8 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7d100 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x555f55d7d578 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x555f55d7d478 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x555f55d7d450 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x555f55d7d418 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x555f55d7d560 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:359:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x555f55d7d528 <col:39, col:45> 'struct _dnode *' lvalue .prev 0x555f55d762e8
| |         `-MemberExpr 0x555f55d7d4d8 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| |           `-ImplicitCastExpr 0x555f55d7d4c0 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x555f55d7d498 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x555f55d7d170 'node' 'sys_dnode_t *'
| `-FullComment 0x555f55ec7690 <line:345:3, line:353:10>
|   |-ParagraphComment 0x555f55ec72a0 <line:345:3>
|   | `-TextComment 0x555f55ec7270 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec72c0 <col:4, col:76> Name="brief"
|   | `-ParagraphComment 0x555f55ec7320 <col:10, col:76>
|   |   `-TextComment 0x555f55ec72f0 <col:10, col:76> Text=" get a reference to the previous item in the list, node is not NULL"
|   |-ParagraphComment 0x555f55ec7370 <line:347:3, col:69>
|   | `-TextComment 0x555f55ec7340 <col:3, col:69> Text=" Faster than sys_dlist_peek_prev() if node is known not to be NULL."
|   |-ParagraphComment 0x555f55ec73c0 <line:349:3>
|   | `-TextComment 0x555f55ec7390 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec73e0 <col:4, line:350:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec7490 <line:349:15, line:350:3>
|   |   |-TextComment 0x555f55ec7440 <line:349:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x555f55ec7460 <line:350:3> Text=" "
|   |-ParamCommandComment 0x555f55ec74b0 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x555f55ec7540 <col:15, col:74>
|   |   `-TextComment 0x555f55ec7510 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x555f55ec7590 <line:352:3>
|   | `-TextComment 0x555f55ec7560 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec75b0 <col:4, line:353:10> Name="return"
|     `-ParagraphComment 0x555f55ec7630 <line:352:11, line:353:10>
|       |-TextComment 0x555f55ec75e0 <line:352:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       `-TextComment 0x555f55ec7600 <line:353:3, col:10> Text="	   tail"
|-FunctionDecl 0x555f55d7d730 <line:373:1, line:377:1> line:373:28 sys_dlist_peek_prev 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x555f55d7d630 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x555f55d7d6a0 <line:374:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x555f55d7f308 <line:375:1, line:377:1>
| | `-ReturnStmt 0x555f55d7f2c8 <line:376:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x555f55d7f298 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x555f55d7f0e8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, col:22> 'int'
| |     | `-BinaryOperator 0x555f55d7f0c0 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x555f55d7f090 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x555f55d7d7e0 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x555f55d7d6a0 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x555f55d7f0a8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x555f55d7f070 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x555f55d7d840 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x555f55d7d808 <col:23> 'int' 0
| |     |-CallExpr 0x555f55d7f198 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x555f55d7f180 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x555f55d7f108 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x555f55d7d200 'sys_dlist_peek_prev_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x555f55d7f1d0 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x555f55d7f130 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7d630 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x555f55d7f1e8 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x555f55d7f158 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x555f55d7d6a0 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x555f55d7f280 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x555f55d7f260 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x555f55d7f238 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x555f55d7f200 <col:23> 'int' 0
| `-FullComment 0x555f55ec7b00 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:363:3, line:370:13>
|   |-ParagraphComment 0x555f55ec7730 <line:363:3>
|   | `-TextComment 0x555f55ec7700 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec7750 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x555f55ec77b0 <col:10, col:58>
|   |   `-TextComment 0x555f55ec7780 <col:10, col:58> Text=" get a reference to the previous item in the list"
|   |-ParagraphComment 0x555f55ec7800 <line:365:3>
|   | `-TextComment 0x555f55ec77d0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec7820 <col:4, line:366:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec78d0 <line:365:15, line:366:3>
|   |   |-TextComment 0x555f55ec7880 <line:365:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x555f55ec78a0 <line:366:3> Text=" "
|   |-ParamCommandComment 0x555f55ec78f0 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x555f55ec7980 <col:15, col:74>
|   |   `-TextComment 0x555f55ec7950 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x555f55ec79d0 <line:368:3>
|   | `-TextComment 0x555f55ec79a0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec79f0 <col:4, line:370:13> Name="return"
|     `-ParagraphComment 0x555f55ec7aa0 <line:368:11, line:370:13>
|       |-TextComment 0x555f55ec7a20 <line:368:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       |-TextComment 0x555f55ec7a40 <line:369:3, col:70> Text=" 	   tail or NULL (when node comes from reading the head of an empty"
|       `-TextComment 0x555f55ec7a60 <line:370:3, col:13> Text=" 	   list)."
|-FunctionDecl 0x555f55d7f3b8 <line:387:1, line:390:1> line:387:28 sys_dlist_peek_tail 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x555f55d7f330 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x555f55d7f718 <line:388:1, line:390:1>
| | `-ReturnStmt 0x555f55d7f6d0 <line:389:2, col:49>
| |   `-ConditionalOperator 0x555f55d7f6a0 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x555f55d7f658 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x555f55d7f4c8 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x555f55d7f4b0 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x555f55d7f460 <col:9> 'bool (sys_dlist_t *)' Function 0x555f55d7b860 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x555f55d7f4f8 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x555f55d7f488 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7f330 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x555f55d7f688 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x555f55d7f570 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x555f55d7f548 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x555f55d7f510 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x555f55d7f670 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:389:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x555f55d7f620 <col:43, col:49> 'struct _dnode *' lvalue .tail 0x555f55d76278
| |         `-MemberExpr 0x555f55d7f5d0 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| |           `-ImplicitCastExpr 0x555f55d7f5b8 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x555f55d7f590 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7f330 'list' 'sys_dlist_t *'
| `-FullComment 0x555f55ec7e70 <line:380:3, line:384:63>
|   |-ParagraphComment 0x555f55ec7bd0 <line:380:3>
|   | `-TextComment 0x555f55ec7ba0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec7bf0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x555f55ec7c50 <col:10, col:54>
|   |   `-TextComment 0x555f55ec7c20 <col:10, col:54> Text=" get a reference to the tail item in the list"
|   |-ParagraphComment 0x555f55ec7ca0 <line:382:3>
|   | `-TextComment 0x555f55ec7c70 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec7cc0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec7d50 <col:15, col:51>
|   |   `-TextComment 0x555f55ec7d20 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x555f55ec7da0 <line:384:3>
|   | `-TextComment 0x555f55ec7d70 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec7dc0 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x555f55ec7e20 <col:11, col:63>
|       `-TextComment 0x555f55ec7df0 <col:11, col:63> Text=" a pointer to the tail element, NULL if list is empty"
|-FunctionDecl 0x555f55d7f8c0 <line:403:1, line:410:1> line:403:20 used sys_dlist_append 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x555f55d7f740 <col:37, col:50> col:50 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x555f55d7f7b0 <col:56, col:69> col:69 used node 'sys_dnode_t *'
| |-CompoundStmt 0x555f55d7ff98 <line:404:1, line:410:1>
| | |-BinaryOperator 0x555f55d7fa78 <line:405:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x555f55d7fa00 <col:2, col:8> 'struct _dnode *' lvalue .next 0x555f55d76020
| | | | `-MemberExpr 0x555f55d7f9b0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| | | |   `-ImplicitCastExpr 0x555f55d7f998 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x555f55d7f970 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x555f55d7f7b0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x555f55d7fa60 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x555f55d7fa38 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7f740 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x555f55d7fc48 <line:406:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x555f55d7fb30 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x555f55d762e8
| | | | `-MemberExpr 0x555f55d7fae0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| | | |   `-ImplicitCastExpr 0x555f55d7fac8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x555f55d7faa0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x555f55d7f7b0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x555f55d7fc30 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x555f55d7fbf8 <col:15, col:21> 'struct _dnode *' lvalue .tail 0x555f55d76278
| | |     `-MemberExpr 0x555f55d7fba8 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| | |       `-ImplicitCastExpr 0x555f55d7fb90 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x555f55d7fb68 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7f740 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x555f55d7fe18 <line:408:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x555f55d7fda0 <col:2, col:14> 'struct _dnode *' lvalue .next 0x555f55d76020
| | | | `-MemberExpr 0x555f55d7fd50 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| | | |   `-ImplicitCastExpr 0x555f55d7fd38 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x555f55d7fd00 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x555f55d76278
| | | |       `-MemberExpr 0x555f55d7fcb0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| | | |         `-ImplicitCastExpr 0x555f55d7fc98 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x555f55d7fc70 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7f740 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x555f55d7fe00 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x555f55d7fdd8 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x555f55d7f7b0 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x555f55d7ff48 <line:409:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x555f55d7fed0 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x555f55d76278
| |   | `-MemberExpr 0x555f55d7fe80 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| |   |   `-ImplicitCastExpr 0x555f55d7fe68 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x555f55d7fe40 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7f740 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x555f55d7ff30 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x555f55d7ff08 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x555f55d7f7b0 'node' 'sys_dnode_t *'
| `-FullComment 0x555f55ec82e0 <line:393:3, line:400:14>
|   |-ParagraphComment 0x555f55ec7f10 <line:393:3>
|   | `-TextComment 0x555f55ec7ee0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec7f30 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x555f55ec7f90 <col:10, col:34>
|   |   `-TextComment 0x555f55ec7f60 <col:10, col:34> Text=" add node to tail of list"
|   |-ParagraphComment 0x555f55ec7fe0 <line:395:3, col:62>
|   | `-TextComment 0x555f55ec7fb0 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ec8030 <line:397:3>
|   | `-TextComment 0x555f55ec8000 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec8050 <col:4, line:398:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec8100 <line:397:15, line:398:3>
|   |   |-TextComment 0x555f55ec80b0 <line:397:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x555f55ec80d0 <line:398:3> Text=" "
|   |-ParamCommandComment 0x555f55ec8120 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x555f55ec81b0 <col:15, col:36>
|   |   `-TextComment 0x555f55ec8180 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x555f55ec8200 <line:400:3>
|   | `-TextComment 0x555f55ec81d0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec8220 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55ec8280 <col:11, col:14>
|       `-TextComment 0x555f55ec8250 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55d80110 <line:423:1, line:430:1> line:423:20 sys_dlist_prepend 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x555f55d7ffd8 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x555f55d80080 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x555f55d807e8 <line:424:1, line:430:1>
| | |-BinaryOperator 0x555f55d80368 <line:425:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x555f55d80250 <col:2, col:8> 'struct _dnode *' lvalue .next 0x555f55d76020
| | | | `-MemberExpr 0x555f55d80200 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| | | |   `-ImplicitCastExpr 0x555f55d801e8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x555f55d801c0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x555f55d80080 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x555f55d80350 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x555f55d80318 <col:15, col:21> 'struct _dnode *' lvalue .head 0x555f55d75fb0
| | |     `-MemberExpr 0x555f55d802c8 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| | |       `-ImplicitCastExpr 0x555f55d802b0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x555f55d80288 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7ffd8 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x555f55d80498 <line:426:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x555f55d80420 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x555f55d762e8
| | | | `-MemberExpr 0x555f55d803d0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| | | |   `-ImplicitCastExpr 0x555f55d803b8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x555f55d80390 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x555f55d80080 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x555f55d80480 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x555f55d80458 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7ffd8 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x555f55d80668 <line:428:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x555f55d805f0 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x555f55d762e8
| | | | `-MemberExpr 0x555f55d805a0 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| | | |   `-ImplicitCastExpr 0x555f55d80588 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x555f55d80550 <col:2, col:8> 'struct _dnode *' lvalue .head 0x555f55d75fb0
| | | |       `-MemberExpr 0x555f55d80500 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| | | |         `-ImplicitCastExpr 0x555f55d804e8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x555f55d804c0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7ffd8 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x555f55d80650 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x555f55d80628 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x555f55d80080 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x555f55d80798 <line:429:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x555f55d80720 <col:2, col:8> 'struct _dnode *' lvalue .head 0x555f55d75fb0
| |   | `-MemberExpr 0x555f55d806d0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| |   |   `-ImplicitCastExpr 0x555f55d806b8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x555f55d80690 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x555f55d7ffd8 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x555f55d80780 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x555f55d80758 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x555f55d80080 'node' 'sys_dnode_t *'
| `-FullComment 0x555f55ec8750 <line:413:3, line:420:14>
|   |-ParagraphComment 0x555f55ec8380 <line:413:3>
|   | `-TextComment 0x555f55ec8350 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec83a0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x555f55ec8400 <col:10, col:34>
|   |   `-TextComment 0x555f55ec83d0 <col:10, col:34> Text=" add node to head of list"
|   |-ParagraphComment 0x555f55ec8450 <line:415:3, col:62>
|   | `-TextComment 0x555f55ec8420 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ec84a0 <line:417:3>
|   | `-TextComment 0x555f55ec8470 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec84c0 <col:4, line:418:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec8570 <line:417:15, line:418:3>
|   |   |-TextComment 0x555f55ec8520 <line:417:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x555f55ec8540 <line:418:3> Text=" "
|   |-ParamCommandComment 0x555f55ec8590 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x555f55ec8620 <col:15, col:36>
|   |   `-TextComment 0x555f55ec85f0 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x555f55ec8670 <line:420:3>
|   | `-TextComment 0x555f55ec8640 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec8690 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55ec86f0 <col:11, col:14>
|       `-TextComment 0x555f55ec86c0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55d80970 <line:440:1, line:446:1> line:440:20 used sys_dlist_insert 'void (sys_dnode_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x555f55d80828 <col:37, col:50> col:50 used successor 'sys_dnode_t *'
| |-ParmVarDecl 0x555f55d80898 <col:61, col:74> col:74 used node 'sys_dnode_t *'
| |-CompoundStmt 0x555f55d81048 <line:441:1, line:446:1>
| | |-BinaryOperator 0x555f55d80bc8 <line:442:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x555f55d80ab0 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x555f55d762e8
| | | | `-MemberExpr 0x555f55d80a60 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| | | |   `-ImplicitCastExpr 0x555f55d80a48 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x555f55d80a20 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x555f55d80898 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x555f55d80bb0 <col:15, col:26> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x555f55d80b78 <col:15, col:26> 'struct _dnode *' lvalue .prev 0x555f55d762e8
| | |     `-MemberExpr 0x555f55d80b28 <col:15, col:26> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| | |       `-ImplicitCastExpr 0x555f55d80b10 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x555f55d80ae8 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x555f55d80828 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x555f55d80cf8 <line:443:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x555f55d80c80 <col:2, col:8> 'struct _dnode *' lvalue .next 0x555f55d76020
| | | | `-MemberExpr 0x555f55d80c30 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| | | |   `-ImplicitCastExpr 0x555f55d80c18 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x555f55d80bf0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x555f55d80898 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x555f55d80ce0 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x555f55d80cb8 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x555f55d80828 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x555f55d80ec8 <line:444:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x555f55d80e50 <col:2, col:19> 'struct _dnode *' lvalue .next 0x555f55d76020
| | | | `-MemberExpr 0x555f55d80e00 <col:2, col:19> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| | | |   `-ImplicitCastExpr 0x555f55d80de8 <col:2, col:13> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x555f55d80db0 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x555f55d762e8
| | | |       `-MemberExpr 0x555f55d80d60 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| | | |         `-ImplicitCastExpr 0x555f55d80d48 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x555f55d80d20 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x555f55d80828 'successor' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x555f55d80eb0 <col:26> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x555f55d80e88 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x555f55d80898 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x555f55d80ff8 <line:445:2, col:20> 'struct _dnode *' '='
| |   |-MemberExpr 0x555f55d80f80 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x555f55d762e8
| |   | `-MemberExpr 0x555f55d80f30 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| |   |   `-ImplicitCastExpr 0x555f55d80f18 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x555f55d80ef0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x555f55d80828 'successor' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x555f55d80fe0 <col:20> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x555f55d80fb8 <col:20> 'sys_dnode_t *' lvalue ParmVar 0x555f55d80898 'node' 'sys_dnode_t *'
| `-FullComment 0x555f55ec8ae0 <line:433:3, line:438:36>
|   |-ParagraphComment 0x555f55ec87f0 <line:433:3>
|   | `-TextComment 0x555f55ec87c0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec8810 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x555f55ec8870 <col:10, col:35>
|   |   `-TextComment 0x555f55ec8840 <col:10, col:35> Text=" Insert a node into a list"
|   |-ParagraphComment 0x555f55ec88c0 <line:435:3, col:52>
|   | `-TextComment 0x555f55ec8890 <col:3, col:52> Text=" Insert a node before a specified node in a dlist."
|   |-ParagraphComment 0x555f55ec8910 <line:437:3>
|   | `-TextComment 0x555f55ec88e0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec8930 <col:4, line:438:3> [in] implicitly Param="successor" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec89e0 <line:437:20, line:438:3>
|   |   |-TextComment 0x555f55ec8990 <line:437:20, col:69> Text=" the position before which "node" will be inserted"
|   |   `-TextComment 0x555f55ec89b0 <line:438:3> Text=" "
|   `-ParamCommandComment 0x555f55ec8a00 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x555f55ec8a90 <col:15, col:36>
|       `-TextComment 0x555f55ec8a60 <col:15, col:36> Text=" the element to insert"
|-FunctionDecl 0x555f55d81570 <line:465:1, line:482:1> line:465:20 sys_dlist_insert_at 'void (sys_dlist_t *, sys_dnode_t *, int (*)(sys_dnode_t *, void *), void *)' static inline
| |-ParmVarDecl 0x555f55d810a0 <col:40, col:53> col:53 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x555f55d81110 <col:59, col:72> col:72 used node 'sys_dnode_t *'
| |-ParmVarDecl 0x555f55d813b0 <line:466:2, col:43> col:8 used cond 'int (*)(sys_dnode_t *, void *)'
| |-ParmVarDecl 0x555f55d81428 <col:46, col:52> col:52 used data 'void *'
| |-CompoundStmt 0x555f55d87238 <line:467:1, line:482:1>
| | `-IfStmt 0x555f55d871d0 <line:468:2, line:481:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-CallExpr 0x555f55d81698 <line:468:6, col:29> 'bool'
| |   | |-ImplicitCastExpr 0x555f55d81680 <col:6> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x555f55d81630 <col:6> 'bool (sys_dlist_t *)' Function 0x555f55d7b860 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |   | `-ImplicitCastExpr 0x555f55d816c8 <col:25> 'sys_dlist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x555f55d81658 <col:25> 'sys_dlist_t *' lvalue ParmVar 0x555f55d810a0 'list' 'sys_dlist_t *'
| |   |-CompoundStmt 0x555f55d81838 <col:32, line:470:2>
| |   | `-CallExpr 0x555f55d817d0 <line:469:3, col:30> 'void'
| |   |   |-ImplicitCastExpr 0x555f55d817b8 <col:3> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x555f55d816e0 <col:3> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x555f55d7f8c0 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |   |   |-ImplicitCastExpr 0x555f55d81808 <col:20> 'sys_dlist_t *' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x555f55d81708 <col:20> 'sys_dlist_t *' lvalue ParmVar 0x555f55d810a0 'list' 'sys_dlist_t *'
| |   |   `-ImplicitCastExpr 0x555f55d81820 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x555f55d81730 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x555f55d81110 'node' 'sys_dnode_t *'
| |   `-CompoundStmt 0x555f55d871a8 <line:470:9, line:481:2>
| |     |-DeclStmt 0x555f55d819c8 <line:471:3, col:47>
| |     | `-VarDecl 0x555f55d81860 <col:3, col:46> col:16 used pos 'sys_dnode_t *' cinit
| |     |   `-CallExpr 0x555f55d81980 <col:22, col:46> 'sys_dnode_t *'
| |     |     |-ImplicitCastExpr 0x555f55d81968 <col:22> 'sys_dnode_t *(*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x555f55d818c0 <col:22> 'sys_dnode_t *(sys_dlist_t *)' Function 0x555f55d7bf70 'sys_dlist_peek_head' 'sys_dnode_t *(sys_dlist_t *)'
| |     |     `-ImplicitCastExpr 0x555f55d819b0 <col:42> 'sys_dlist_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x555f55d818e8 <col:42> 'sys_dlist_t *' lvalue ParmVar 0x555f55d810a0 'list' 'sys_dlist_t *'
| |     |-WhileStmt 0x555f55d81de8 <line:473:3, line:475:3>
| |     | |-<<<NULL>>>
| |     | |-BinaryOperator 0x555f55d81c60 <line:473:10, col:48> 'int' '&&'
| |     | | |-ParenExpr 0x555f55d81ae0 <col:10, col:22> 'int'
| |     | | | `-BinaryOperator 0x555f55d81ab8 <col:11, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     | | |   |-ImplicitCastExpr 0x555f55d81a88 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:11> 'sys_dnode_t *' <LValueToRValue>
| |     | | |   | `-DeclRefExpr 0x555f55d819e0 <col:11> 'sys_dnode_t *' lvalue Var 0x555f55d81860 'pos' 'sys_dnode_t *'
| |     | | |   `-ImplicitCastExpr 0x555f55d81aa0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     | | |     `-ParenExpr 0x555f55d81a68 <col:14, col:24> 'void *'
| |     | | |       `-CStyleCastExpr 0x555f55d81a40 <col:15, col:23> 'void *' <NullToPointer>
| |     | | |         `-IntegerLiteral 0x555f55d81a08 <col:23> 'int' 0
| |     | | `-ParenExpr 0x555f55d81c40 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:27, col:48> 'int'
| |     | |   `-BinaryOperator 0x555f55d81c18 <col:28, col:47> 'int' '=='
| |     | |     |-CallExpr 0x555f55d81b90 <col:28, col:42> 'int'
| |     | |     | |-ImplicitCastExpr 0x555f55d81b78 <col:28> 'int (*)(sys_dnode_t *, void *)' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x555f55d81b00 <col:28> 'int (*)(sys_dnode_t *, void *)' lvalue ParmVar 0x555f55d813b0 'cond' 'int (*)(sys_dnode_t *, void *)'
| |     | |     | |-ImplicitCastExpr 0x555f55d81bc8 <col:33> 'sys_dnode_t *' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x555f55d81b28 <col:33> 'sys_dnode_t *' lvalue Var 0x555f55d81860 'pos' 'sys_dnode_t *'
| |     | |     | `-ImplicitCastExpr 0x555f55d81be0 <col:38> 'void *' <LValueToRValue>
| |     | |     |   `-DeclRefExpr 0x555f55d81b50 <col:38> 'void *' lvalue ParmVar 0x555f55d81428 'data' 'void *'
| |     | |     `-IntegerLiteral 0x555f55d81bf8 <col:47> 'int' 0
| |     | `-CompoundStmt 0x555f55d81dd0 <col:51, line:475:3>
| |     |   `-BinaryOperator 0x555f55d81da8 <line:474:4, col:39> 'sys_dnode_t *' '='
| |     |     |-DeclRefExpr 0x555f55d81c88 <col:4> 'sys_dnode_t *' lvalue Var 0x555f55d81860 'pos' 'sys_dnode_t *'
| |     |     `-CallExpr 0x555f55d81d40 <col:10, col:39> 'sys_dnode_t *'
| |     |       |-ImplicitCastExpr 0x555f55d81d28 <col:10> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     |       | `-DeclRefExpr 0x555f55d81cb0 <col:10> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x555f55d7cca0 'sys_dlist_peek_next' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     |       |-ImplicitCastExpr 0x555f55d81d78 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |     |       | `-DeclRefExpr 0x555f55d81cd8 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x555f55d810a0 'list' 'sys_dlist_t *'
| |     |       `-ImplicitCastExpr 0x555f55d81d90 <col:36> 'sys_dnode_t *' <LValueToRValue>
| |     |         `-DeclRefExpr 0x555f55d81d00 <col:36> 'sys_dnode_t *' lvalue Var 0x555f55d81860 'pos' 'sys_dnode_t *'
| |     `-IfStmt 0x555f55d87170 <line:476:3, line:480:3>
| |       |-<<<NULL>>>
| |       |-<<<NULL>>>
| |       |-BinaryOperator 0x555f55d81ee0 <line:476:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       | |-ImplicitCastExpr 0x555f55d81eb0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:7> 'sys_dnode_t *' <LValueToRValue>
| |       | | `-DeclRefExpr 0x555f55d81e08 <col:7> 'sys_dnode_t *' lvalue Var 0x555f55d81860 'pos' 'sys_dnode_t *'
| |       | `-ImplicitCastExpr 0x555f55d81ec8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |       |   `-ParenExpr 0x555f55d81e90 <col:14, col:24> 'void *'
| |       |     `-CStyleCastExpr 0x555f55d81e68 <col:15, col:23> 'void *' <NullToPointer>
| |       |       `-IntegerLiteral 0x555f55d81e30 <col:23> 'int' 0
| |       |-CompoundStmt 0x555f55d82028 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:20, line:478:3>
| |       | `-CallExpr 0x555f55d81fc0 <line:477:4, col:30> 'void'
| |       |   |-ImplicitCastExpr 0x555f55d81fa8 <col:4> 'void (*)(sys_dnode_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |       |   | `-DeclRefExpr 0x555f55d81f08 <col:4> 'void (sys_dnode_t *, sys_dnode_t *)' Function 0x555f55d80970 'sys_dlist_insert' 'void (sys_dnode_t *, sys_dnode_t *)'
| |       |   |-ImplicitCastExpr 0x555f55d81ff8 <col:21> 'sys_dnode_t *' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x555f55d81f30 <col:21> 'sys_dnode_t *' lvalue Var 0x555f55d81860 'pos' 'sys_dnode_t *'
| |       |   `-ImplicitCastExpr 0x555f55d82010 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x555f55d81f58 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x555f55d81110 'node' 'sys_dnode_t *'
| |       `-CompoundStmt 0x555f55d87158 <line:478:10, line:480:3>
| |         `-CallExpr 0x555f55d870f0 <line:479:4, col:31> 'void'
| |           |-ImplicitCastExpr 0x555f55d870d8 <col:4> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x555f55d82040 <col:4> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x555f55d7f8c0 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |           |-ImplicitCastExpr 0x555f55d87128 <col:21> 'sys_dlist_t *' <LValueToRValue>
| |           | `-DeclRefExpr 0x555f55d82068 <col:21> 'sys_dlist_t *' lvalue ParmVar 0x555f55d810a0 'list' 'sys_dlist_t *'
| |           `-ImplicitCastExpr 0x555f55d87140 <col:27> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x555f55d870b0 <col:27> 'sys_dnode_t *' lvalue ParmVar 0x555f55d81110 'node' 'sys_dnode_t *'
| `-FullComment 0x555f55ec91a0 <line:449:3, line:462:14>
|   |-ParagraphComment 0x555f55ec8b80 <line:449:3>
|   | `-TextComment 0x555f55ec8b50 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec8ba0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x555f55ec8c00 <col:10, col:33>
|   |   `-TextComment 0x555f55ec8bd0 <col:10, col:33> Text=" insert node at position"
|   |-ParagraphComment 0x555f55ec8cc0 <line:451:3, line:454:62>
|   | |-TextComment 0x555f55ec8c20 <line:451:3, col:76> Text=" Insert a node in a location depending on a external condition. The cond()"
|   | |-TextComment 0x555f55ec8c40 <line:452:3, col:74> Text=" function checks if the node is to be inserted _before_ the current node"
|   | |-TextComment 0x555f55ec8c60 <line:453:3, col:31> Text=" against which it is checked."
|   | `-TextComment 0x555f55ec8c80 <line:454:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ec8d10 <line:456:3>
|   | `-TextComment 0x555f55ec8ce0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec8d30 <col:4, line:457:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec8de0 <line:456:15, line:457:3>
|   |   |-TextComment 0x555f55ec8d90 <line:456:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x555f55ec8db0 <line:457:3> Text=" "
|   |-ParamCommandComment 0x555f55ec8e00 <col:4, line:458:3> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x555f55ec8eb0 <line:457:15, line:458:3>
|   |   |-TextComment 0x555f55ec8e60 <line:457:15, col:36> Text=" the element to insert"
|   |   `-TextComment 0x555f55ec8e80 <line:458:3> Text=" "
|   |-ParamCommandComment 0x555f55ec8ed0 <col:4, line:460:3> [in] implicitly Param="cond" ParamIndex=2
|   | `-ParagraphComment 0x555f55ec8fb0 <line:458:15, line:460:3>
|   |   |-TextComment 0x555f55ec8f30 <line:458:15, col:76> Text=" a function that determines if the current node is the correct"
|   |   |-TextComment 0x555f55ec8f50 <line:459:3, col:27> Text="             insert point"
|   |   `-TextComment 0x555f55ec8f70 <line:460:3> Text=" "
|   |-ParamCommandComment 0x555f55ec8fd0 <col:4, col:34> [in] implicitly Param="data" ParamIndex=3
|   | `-ParagraphComment 0x555f55ec9060 <col:15, col:34>
|   |   `-TextComment 0x555f55ec9030 <col:15, col:34> Text=" parameter to cond()"
|   |-ParagraphComment 0x555f55ec90b0 <line:462:3>
|   | `-TextComment 0x555f55ec9080 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec90d0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55ec9130 <col:11, col:14>
|       `-TextComment 0x555f55ec9100 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55d872e8 <line:495:1, line:500:1> line:495:20 used sys_dlist_remove 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x555f55d87260 <col:37, col:50> col:50 used node 'sys_dnode_t *'
| |-CompoundStmt 0x555f55d879a8 <line:496:1, line:500:1>
| | |-BinaryOperator 0x555f55d875d8 <line:497:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x555f55d874c0 <col:2, col:14> 'struct _dnode *' lvalue .next 0x555f55d76020
| | | | `-MemberExpr 0x555f55d87470 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| | | |   `-ImplicitCastExpr 0x555f55d87458 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x555f55d87420 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x555f55d762e8
| | | |       `-MemberExpr 0x555f55d873d0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| | | |         `-ImplicitCastExpr 0x555f55d873b8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x555f55d87390 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x555f55d87260 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x555f55d875c0 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x555f55d87588 <col:21, col:27> 'struct _dnode *' lvalue .next 0x555f55d76020
| | |     `-MemberExpr 0x555f55d87538 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| | |       `-ImplicitCastExpr 0x555f55d87520 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x555f55d874f8 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x555f55d87260 'node' 'sys_dnode_t *'
| | |-BinaryOperator 0x555f55d87848 <line:498:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x555f55d87730 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x555f55d762e8
| | | | `-MemberExpr 0x555f55d876e0 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| | | |   `-ImplicitCastExpr 0x555f55d876c8 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x555f55d87690 <col:2, col:8> 'struct _dnode *' lvalue .next 0x555f55d76020
| | | |       `-MemberExpr 0x555f55d87640 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| | | |         `-ImplicitCastExpr 0x555f55d87628 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x555f55d87600 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x555f55d87260 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x555f55d87830 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x555f55d877f8 <col:21, col:27> 'struct _dnode *' lvalue .prev 0x555f55d762e8
| | |     `-MemberExpr 0x555f55d877a8 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x555f55d76380
| | |       `-ImplicitCastExpr 0x555f55d87790 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x555f55d87768 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x555f55d87260 'node' 'sys_dnode_t *'
| | `-CallExpr 0x555f55d87930 <line:499:2, col:21> 'void'
| |   |-ImplicitCastExpr 0x555f55d87918 <col:2> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x555f55d87870 <col:2> 'void (sys_dnode_t *)' Function 0x555f55d76d20 'sys_dnode_init' 'void (sys_dnode_t *)'
| |   `-ImplicitCastExpr 0x555f55d87960 <col:17> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x555f55d87898 <col:17> 'sys_dnode_t *' lvalue ParmVar 0x555f55d87260 'node' 'sys_dnode_t *'
| `-FullComment 0x555f55ec9560 <line:485:3, line:492:14>
|   |-ParagraphComment 0x555f55ec9240 <line:485:3>
|   | `-TextComment 0x555f55ec9210 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec9260 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x555f55ec92c0 <col:10, col:44>
|   |   `-TextComment 0x555f55ec9290 <col:10, col:44> Text=" remove a specific node from a list"
|   |-ParagraphComment 0x555f55ec9330 <line:487:3, line:488:62>
|   | |-TextComment 0x555f55ec92e0 <line:487:3, col:71> Text=" The list is implicit from the node. The node must be part of a list."
|   | `-TextComment 0x555f55ec9300 <line:488:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ec9380 <line:490:3>
|   | `-TextComment 0x555f55ec9350 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec93a0 <col:4, col:33> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec9430 <col:15, col:33>
|   |   `-TextComment 0x555f55ec9400 <col:15, col:33> Text=" the node to remove"
|   |-ParagraphComment 0x555f55ec9480 <line:492:3>
|   | `-TextComment 0x555f55ec9450 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec94a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55ec9500 <col:11, col:14>
|       `-TextComment 0x555f55ec94d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55d87a68 <line:512:1, line:522:1> line:512:28 sys_dlist_get 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x555f55d879e0 <col:42, col:55> col:55 used list 'sys_dlist_t *'
| |-CompoundStmt 0x555f55d87fb8 <line:513:1, line:522:1>
| | |-DeclStmt 0x555f55d87c18 <line:514:2, col:26>
| | | `-VarDecl 0x555f55d87b20 <col:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:514:15 used node 'sys_dnode_t *' cinit
| | |   `-ImplicitCastExpr 0x555f55d87c00 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| | |     `-ParenExpr 0x555f55d87be0 <col:14, col:24> 'void *'
| | |       `-CStyleCastExpr 0x555f55d87bb8 <col:15, col:23> 'void *' <NullToPointer>
| | |         `-IntegerLiteral 0x555f55d87b80 <col:23> 'int' 0
| | |-IfStmt 0x555f55d87f00 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:516:2, line:519:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x555f55d87ce0 <line:516:6, col:30> 'int' prefix '!'
| | | | `-CallExpr 0x555f55d87c98 <col:7, col:30> 'bool'
| | | |   |-ImplicitCastExpr 0x555f55d87c80 <col:7> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x555f55d87c30 <col:7> 'bool (sys_dlist_t *)' Function 0x555f55d7b860 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| | | |   `-ImplicitCastExpr 0x555f55d87cc8 <col:26> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x555f55d87c58 <col:26> 'sys_dlist_t *' lvalue ParmVar 0x555f55d879e0 'list' 'sys_dlist_t *'
| | | |-CompoundStmt 0x555f55d87ee0 <col:33, line:519:2>
| | | | |-BinaryOperator 0x555f55d87e08 <line:517:3, col:16> 'sys_dnode_t *' '='
| | | | | |-DeclRefExpr 0x555f55d87d00 <col:3> 'sys_dnode_t *' lvalue Var 0x555f55d87b20 'node' 'sys_dnode_t *'
| | | | | `-ImplicitCastExpr 0x555f55d87df0 <col:10, col:16> 'struct _dnode *' <LValueToRValue>
| | | | |   `-MemberExpr 0x555f55d87db8 <col:10, col:16> 'struct _dnode *' lvalue .head 0x555f55d75fb0
| | | | |     `-MemberExpr 0x555f55d87d68 <col:10, col:16> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x555f55d760c0
| | | | |       `-ImplicitCastExpr 0x555f55d87d50 <col:10> 'sys_dlist_t *' <LValueToRValue>
| | | | |         `-DeclRefExpr 0x555f55d87d28 <col:10> 'sys_dlist_t *' lvalue ParmVar 0x555f55d879e0 'list' 'sys_dlist_t *'
| | | | `-CallExpr 0x555f55d87e98 <line:518:3, col:24> 'void'
| | | |   |-ImplicitCastExpr 0x555f55d87e80 <col:3> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x555f55d87e30 <col:3> 'void (sys_dnode_t *)' Function 0x555f55d872e8 'sys_dlist_remove' 'void (sys_dnode_t *)'
| | | |   `-ImplicitCastExpr 0x555f55d87ec8 <col:20> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x555f55d87e58 <col:20> 'sys_dnode_t *' lvalue Var 0x555f55d87b20 'node' 'sys_dnode_t *'
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x555f55d87f78 <line:521:2, col:9>
| |   `-ImplicitCastExpr 0x555f55d87f60 <col:9> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x555f55d87f38 <col:9> 'sys_dnode_t *' lvalue Var 0x555f55d87b20 'node' 'sys_dnode_t *'
| `-FullComment 0x555f55ec9900 <line:503:3, line:509:60>
|   |-ParagraphComment 0x555f55ec9600 <line:503:3>
|   | `-TextComment 0x555f55ec95d0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec9620 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x555f55ec9680 <col:10, col:38>
|   |   `-TextComment 0x555f55ec9650 <col:10, col:38> Text=" get the first node in a list"
|   |-ParagraphComment 0x555f55ec96d0 <line:505:3, col:62>
|   | `-TextComment 0x555f55ec96a0 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ec9720 <line:507:3>
|   | `-TextComment 0x555f55ec96f0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ec9740 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ec97d0 <col:15, col:51>
|   |   `-TextComment 0x555f55ec97a0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x555f55ec9820 <line:509:3>
|   | `-TextComment 0x555f55ec97f0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec9840 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x555f55ec98a0 <col:11, col:60>
|       `-TextComment 0x555f55ec9870 <col:11, col:60> Text=" the first node in the list, NULL if list is empty"
|-RecordDecl 0x555f55d87fe0 </vagrant/ext/zephyros/zephyr/include/sys/rb.h:48:1, line:50:1> line:48:8 struct rbnode definition
| `-FieldDecl 0x555f55d8add0 <line:49:2, col:27> col:17 children 'struct rbnode *[2]'
|-TypedefDecl 0x555f55d8b0a8 <line:74:1, col:65> col:16 referenced rb_lessthan_t 'bool (*)(struct rbnode *, struct rbnode *)'
| |-PointerType 0x555f55d8b040 'bool (*)(struct rbnode *, struct rbnode *)'
| | `-ParenType 0x555f55d8afe0 'bool (struct rbnode *, struct rbnode *)' sugar
| |   `-FunctionProtoType 0x555f55d8afa0 'bool (struct rbnode *, struct rbnode *)' cdecl
| |     |-BuiltinType 0x555f55ca0710 'bool'
| |     |-PointerType 0x555f55d8acf0 'struct rbnode *'
| |     | `-ElaboratedType 0x555f55d8ac90 'struct rbnode' sugar
| |     |   `-RecordType 0x555f55d88070 'struct rbnode'
| |     |     `-Record 0x555f55d87fe0 'rbnode'
| |     `-PointerType 0x555f55d8acf0 'struct rbnode *'
| |       `-ElaboratedType 0x555f55d8ac90 'struct rbnode' sugar
| |         `-RecordType 0x555f55d88070 'struct rbnode'
| |           `-Record 0x555f55d87fe0 'rbnode'
| `-FullComment 0x555f55ec9c70 <line:62:3, line:72:36>
|   |-ParagraphComment 0x555f55ec99a0 <line:62:3>
|   | `-TextComment 0x555f55ec9970 <col:3> Text=" "
|   |-VerbatimLineComment 0x555f55ec99c0 <col:4, col:26> Text=" rb_lessthan_t"
|   |-ParagraphComment 0x555f55ec9a30 <line:63:3>
|   | `-TextComment 0x555f55ec9a00 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ec9a50 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x555f55ec9ab0 <col:10, col:45>
|   |   `-TextComment 0x555f55ec9a80 <col:10, col:45> Text=" Red/black tree comparison predicate"
|   |-ParagraphComment 0x555f55ec9b20 <line:65:3, line:66:68>
|   | |-TextComment 0x555f55ec9ad0 <line:65:3, col:69> Text=" Compares the two nodes and returns true if node A is strictly less"
|   | `-TextComment 0x555f55ec9af0 <line:66:3, col:68> Text=" than B according to the tree's sorting criteria, false otherwise."
|   `-ParagraphComment 0x555f55ec9c20 <line:68:3, line:72:36>
|     |-TextComment 0x555f55ec9b40 <line:68:3, col:70> Text=" Note that during insert, the new node being inserted will always be"
|     |-TextComment 0x555f55ec9b70 <line:69:3, col:68> Text=" "A", where "B" is the existing node within the tree against which"
|     |-TextComment 0x555f55ec9b90 <line:70:3, col:64> Text=" it is being compared.  This trait can be used (with care!) to"
|     |-TextComment 0x555f55ec9bb0 <line:71:3, col:70> Text=" implement "most/least recently added" semantics between nodes which"
|     `-TextComment 0x555f55ec9bd0 <line:72:3, col:36> Text=" would otherwise compare as equal."
|-RecordDecl 0x555f55d8b100 <line:76:1, line:84:1> line:76:8 struct rbtree definition
| |-FieldDecl 0x555f55d8b1d8 <line:77:2, col:17> col:17 referenced root 'struct rbnode *'
| |-FieldDecl 0x555f55d8b250 <line:78:2, col:16> col:16 lessthan_fn 'rb_lessthan_t':'bool (*)(struct rbnode *, struct rbnode *)'
| `-FieldDecl 0x555f55d8b2b0 <line:79:2, col:6> col:6 max_depth 'int'
|-TypedefDecl 0x555f55d8b548 <line:86:1, col:61> col:16 referenced rb_visit_t 'void (*)(struct rbnode *, void *)'
| `-PointerType 0x555f55d8b4e0 'void (*)(struct rbnode *, void *)'
|   `-ParenType 0x555f55d8b480 'void (struct rbnode *, void *)' sugar
|     `-FunctionProtoType 0x555f55d8b440 'void (struct rbnode *, void *)' cdecl
|       |-BuiltinType 0x555f55ca06f0 'void'
|       |-PointerType 0x555f55d8acf0 'struct rbnode *'
|       | `-ElaboratedType 0x555f55d8ac90 'struct rbnode' sugar
|       |   `-RecordType 0x555f55d88070 'struct rbnode'
|       |     `-Record 0x555f55d87fe0 'rbnode'
|       `-PointerType 0x555f55ca0b90 'void *'
|         `-BuiltinType 0x555f55ca06f0 'void'
|-FunctionDecl 0x555f55d8b768 <line:88:1, col:56> col:16 z_rb_child 'struct rbnode *(struct rbnode *, int)'
| |-ParmVarDecl 0x555f55d8b5c8 <col:27, col:42> col:42 node 'struct rbnode *'
| `-ParmVarDecl 0x555f55d8b640 <col:48, col:52> col:52 side 'int'
|-FunctionDecl 0x555f55d8b948 <line:89:1, col:38> col:5 z_rb_is_black 'int (struct rbnode *)'
| `-ParmVarDecl 0x555f55d8b840 <col:19, col:34> col:34 node 'struct rbnode *'
|-FunctionDecl 0x555f55d8c9a0 <line:91:1, col:70> col:6 used z_rb_walk 'void (struct rbnode *, rb_visit_t, void *)'
| |-ParmVarDecl 0x555f55d8ba18 <col:16, col:31> col:31 node 'struct rbnode *'
| |-ParmVarDecl 0x555f55d8bab0 <col:37, col:48> col:48 visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| `-ParmVarDecl 0x555f55d8bb28 <col:58, col:64> col:64 cookie 'void *'
|-FunctionDecl 0x555f55d8ccb8 <line:93:1, col:61> col:16 used z_rb_get_minmax 'struct rbnode *(struct rbtree *, int)'
| |-ParmVarDecl 0x555f55d8cb10 <col:32, col:47> col:47 tree 'struct rbtree *'
| `-ParmVarDecl 0x555f55d8cb88 <col:53, col:57> col:57 side 'int'
|-FunctionDecl 0x555f55d8cf60 <line:98:1, col:56> col:6 rb_insert 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x555f55d8cdc0 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x555f55d8ce48 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x555f55ec9dc0 <line:96:3, col:31>
|   |-ParagraphComment 0x555f55ec9d10 <col:3>
|   | `-TextComment 0x555f55ec9ce0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec9d30 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x555f55ec9d90 <col:10, col:31>
|       `-TextComment 0x555f55ec9d60 <col:10, col:31> Text=" Insert node into tree"
|-FunctionDecl 0x555f55d8d178 <line:103:1, col:56> col:6 rb_remove 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x555f55d8d060 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x555f55d8d0e8 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x555f55ec9f10 <line:101:3, col:31>
|   |-ParagraphComment 0x555f55ec9e60 <col:3>
|   | `-TextComment 0x555f55ec9e30 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec9e80 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x555f55ec9ee0 <col:10, col:31>
|       `-TextComment 0x555f55ec9eb0 <col:10, col:31> Text=" Remove node from tree"
|-FunctionDecl 0x555f55d8d398 <line:108:1, line:111:1> line:108:30 rb_get_min 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x555f55d8d280 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x555f55d8d5b8 <line:109:1, line:111:1>
| | `-ReturnStmt 0x555f55d8d570 <line:110:2, col:32>
| |   `-CallExpr 0x555f55d8d520 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x555f55d8d508 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55d8d440 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x555f55d8ccb8 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x555f55d8d558 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55d8d468 <col:25> 'struct rbtree *' lvalue ParmVar 0x555f55d8d280 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x555f55d8d490 <col:31> 'int' 0
| `-FullComment 0x555f55eca060 <line:106:3, col:54>
|   |-ParagraphComment 0x555f55ec9fb0 <col:3>
|   | `-TextComment 0x555f55ec9f80 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ec9fd0 <col:4, col:54> Name="brief"
|     `-ParagraphComment 0x555f55eca030 <col:10, col:54>
|       `-TextComment 0x555f55eca000 <col:10, col:54> Text=" Returns the lowest-sorted member of the tree"
|-FunctionDecl 0x555f55d8d698 <line:116:1, line:119:1> line:116:30 rb_get_max 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x555f55d8d5f8 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x555f55d8d858 <line:117:1, line:119:1>
| | `-ReturnStmt 0x555f55d8d818 <line:118:2, col:32>
| |   `-CallExpr 0x555f55d8d7c8 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x555f55d8d7b0 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55d8d740 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x555f55d8ccb8 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x555f55d8d800 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55d8d768 <col:25> 'struct rbtree *' lvalue ParmVar 0x555f55d8d5f8 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x555f55d8d790 <col:31> 'int' 1
| `-FullComment 0x555f55eca1b0 <line:114:3, col:55>
|   |-ParagraphComment 0x555f55eca100 <col:3>
|   | `-TextComment 0x555f55eca0d0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eca120 <col:4, col:55> Name="brief"
|     `-ParagraphComment 0x555f55eca180 <col:10, col:55>
|       `-TextComment 0x555f55eca150 <col:10, col:55> Text=" Returns the highest-sorted member of the tree"
|-FunctionDecl 0x555f55d8dba0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/rb.h:130:58> col:6 rb_contains 'bool (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x555f55d8d898 <col:18, col:33> col:33 tree 'struct rbtree *'
| |-ParmVarDecl 0x555f55d8d920 <col:39, col:54> col:54 node 'struct rbnode *'
| `-FullComment 0x555f55eca400 <line:122:3, line:128:10>
|   |-ParagraphComment 0x555f55eca250 <line:122:3>
|   | `-TextComment 0x555f55eca220 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eca270 <col:4, col:60> Name="brief"
|   | `-ParagraphComment 0x555f55eca2d0 <col:10, col:60>
|   |   `-TextComment 0x555f55eca2a0 <col:10, col:60> Text=" Returns true if the given node is part of the tree"
|   `-ParagraphComment 0x555f55eca3c0 <line:124:3, line:128:10>
|     |-TextComment 0x555f55eca2f0 <line:124:3, col:66> Text=" Note that this does not internally dereference the node pointer"
|     |-TextComment 0x555f55eca310 <line:125:3, col:69> Text=" (though the tree's lessthan callback might!), it just tests it for"
|     |-TextComment 0x555f55eca330 <line:126:3, col:68> Text=" equality with items in the tree.  So it's feasible to use this to"
|     |-TextComment 0x555f55eca350 <line:127:3, col:66> Text=" implement a "set" construct by simply testing the pointer value"
|     `-TextComment 0x555f55eca370 <line:128:3, col:10> Text=" itself."
|-FunctionDecl 0x555f55d8dec0 <line:141:1, line:145:1> line:141:20 rb_walk 'void (struct rbtree *, rb_visit_t, void *)' static inline
| |-ParmVarDecl 0x555f55d8dca0 <col:28, col:43> col:43 used tree 'struct rbtree *'
| |-ParmVarDecl 0x555f55d8dd10 <col:49, col:60> col:60 used visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |-ParmVarDecl 0x555f55d8dd88 <line:142:7, col:13> col:13 used cookie 'void *'
| |-CompoundStmt 0x555f55d8e168 <line:143:1, line:145:1>
| | `-CallExpr 0x555f55d8e0e0 <line:144:2, col:40> 'void'
| |   |-ImplicitCastExpr 0x555f55d8e0c8 <col:2> 'void (*)(struct rbnode *, rb_visit_t, void *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x555f55d8df78 <col:2> 'void (struct rbnode *, rb_visit_t, void *)' Function 0x555f55d8c9a0 'z_rb_walk' 'void (struct rbnode *, rb_visit_t, void *)'
| |   |-ImplicitCastExpr 0x555f55d8e120 <col:12, col:18> 'struct rbnode *' <LValueToRValue>
| |   | `-MemberExpr 0x555f55d8dfe0 <col:12, col:18> 'struct rbnode *' lvalue ->root 0x555f55d8b1d8
| |   |   `-ImplicitCastExpr 0x555f55d8dfc8 <col:12> 'struct rbtree *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x555f55d8dfa0 <col:12> 'struct rbtree *' lvalue ParmVar 0x555f55d8dca0 'tree' 'struct rbtree *'
| |   |-ImplicitCastExpr 0x555f55d8e138 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' <LValueToRValue>
| |   | `-DeclRefExpr 0x555f55d8e018 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' lvalue ParmVar 0x555f55d8dd10 'visit_fn' 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |   `-ImplicitCastExpr 0x555f55d8e150 <col:34> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x555f55d8e040 <col:34> 'void *' lvalue ParmVar 0x555f55d8dd88 'cookie' 'void *'
| `-FullComment 0x555f55eca620 <line:134:3, line:139:18>
|   |-ParagraphComment 0x555f55eca4a0 <line:134:3>
|   | `-TextComment 0x555f55eca470 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eca4c0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x555f55eca520 <col:10, col:33>
|   |   `-TextComment 0x555f55eca4f0 <col:10, col:33> Text=" Walk/enumerate a rbtree"
|   `-ParagraphComment 0x555f55eca5e0 <line:136:3, line:139:18>
|     |-TextComment 0x555f55eca540 <line:136:3, col:69> Text=" Very simple recursive enumeration.  Low code size, but requiring a"
|     |-TextComment 0x555f55eca560 <line:137:3, col:70> Text=" separate function can be clumsy for the user and there is no way to"
|     |-TextComment 0x555f55eca580 <line:138:3, col:65> Text=" break out of the loop early.  See RB_FOR_EACH for an iterative"
|     `-TextComment 0x555f55eca5a0 <line:139:3, col:18> Text=" implementation."
|-RecordDecl 0x555f55d8e180 <line:148:1, line:152:1> line:148:8 struct _rb_foreach definition
| |-FieldDecl 0x555f55d8e2b0 <line:149:2, col:18> col:18 stack 'struct rbnode **'
| |-FieldDecl 0x555f55d8e310 <line:150:2, col:8> col:8 is_left 'char *'
| `-FieldDecl 0x555f55d8e370 <line:151:2, col:6> col:6 top 'int'
|-FunctionDecl 0x555f55d8e618 <line:169:1, col:76> col:16 z_rb_foreach_next 'struct rbnode *(struct rbtree *, struct _rb_foreach *)'
| |-ParmVarDecl 0x555f55d8e3e0 <col:34, col:49> col:49 tree 'struct rbtree *'
| `-ParmVarDecl 0x555f55d8e4f0 <col:55, col:75> col:75 f 'struct _rb_foreach *'
|-RecordDecl 0x555f55d8e788 </vagrant/ext/zephyros/zephyr/include/sched_priq.h:32:1, col:8> col:8 struct k_thread
|-FunctionDecl 0x555f55d8e9e8 <line:34:1, col:50> col:18 z_priq_dumb_best 'struct k_thread *(sys_dlist_t *)'
| `-ParmVarDecl 0x555f55d8e840 <col:35, col:48> col:48 pq 'sys_dlist_t *'
|-FunctionDecl 0x555f55d90d60 <line:35:1, col:65> col:6 z_priq_dumb_remove 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x555f55d90bc0 <col:25, col:38> col:38 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x555f55d90c48 <col:42, col:59> col:59 thread 'struct k_thread *'
|-FunctionDecl 0x555f55d90f38 <line:36:1, col:62> col:6 z_priq_dumb_add 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x555f55d90e20 <col:22, col:35> col:35 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x555f55d90ea8 <col:39, col:56> col:56 thread 'struct k_thread *'
|-RecordDecl 0x555f55d90fe8 <line:38:1, line:41:1> line:38:8 struct _priq_rb definition
| |-FieldDecl 0x555f55d910b0 <line:39:2, col:16> col:16 tree 'struct rbtree':'struct rbtree'
| `-FieldDecl 0x555f55d91110 <line:40:2, col:6> col:6 next_order_key 'int'
|-FunctionDecl 0x555f55d91400 <line:43:1, col:64> col:6 z_priq_rb_add 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x555f55d91260 <col:20, col:37> col:37 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x555f55d912e8 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x555f55d915f0 <line:44:1, col:67> col:6 z_priq_rb_remove 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x555f55d914d8 <col:23, col:40> col:40 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x555f55d91560 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x555f55d917e8 <line:45:1, col:52> col:18 z_priq_rb_best 'struct k_thread *(struct _priq_rb *)'
| `-ParmVarDecl 0x555f55d916c8 <col:33, col:50> col:50 pq 'struct _priq_rb *'
|-RecordDecl 0x555f55d91890 <line:54:1, line:57:1> line:54:8 struct _priq_mq definition
| |-FieldDecl 0x555f55d91a98 <line:55:2, col:23> col:14 queues 'sys_dlist_t [32]'
| `-FieldDecl 0x555f55d91af8 <line:56:2, col:15> col:15 bitmask 'unsigned int'
|-FunctionDecl 0x555f55d91dc0 <line:59:1, col:64> col:6 z_priq_mq_add 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x555f55d91c20 <col:20, col:37> col:37 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x555f55d91ca8 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x555f55d91fb0 <line:60:1, col:67> col:6 z_priq_mq_remove 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x555f55d91e98 <col:23, col:40> col:40 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x555f55d91f20 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x555f55d921a8 <line:61:1, col:52> col:18 z_priq_mq_best 'struct k_thread *(struct _priq_mq *)'
| `-ParmVarDecl 0x555f55d92088 <col:33, col:50> col:50 pq 'struct _priq_mq *'
|-RecordDecl 0x555f55d92278 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:29:1, line:31:1> line:29:8 struct _snode definition
| `-FieldDecl 0x555f55d923d0 <line:30:2, col:17> col:17 referenced next 'struct _snode *'
|-TypedefDecl 0x555f55d92438 <line:33:1, col:23> col:23 referenced sys_snode_t 'struct _snode':'struct _snode'
| `-ElaboratedType 0x555f55d92320 'struct _snode' sugar
|   `-RecordType 0x555f55d92300 'struct _snode'
|     `-Record 0x555f55d92278 '_snode'
|-RecordDecl 0x555f55d92490 <line:35:1, line:38:1> line:35:8 struct _slist definition
| |-FieldDecl 0x555f55d92598 <line:36:2, col:15> col:15 referenced head 'sys_snode_t *'
| `-FieldDecl 0x555f55d925f0 <line:37:2, col:15> col:15 referenced tail 'sys_snode_t *'
|-TypedefDecl 0x555f55d92690 <line:40:1, col:23> col:23 referenced sys_slist_t 'struct _slist':'struct _slist'
| `-ElaboratedType 0x555f55d92640 'struct _slist' sugar
|   `-RecordType 0x555f55d92520 'struct _slist'
|     `-Record 0x555f55d92490 '_slist'
|-FunctionDecl 0x555f55d929a0 <line:190:1, line:194:1> line:190:20 used sys_slist_init 'void (sys_slist_t *)' static inline
| |-ParmVarDecl 0x555f55d92898 <col:35, col:48> col:48 used list 'sys_slist_t *'
| |-CompoundStmt 0x555f55da7c08 <line:191:1, line:194:1>
| | |-BinaryOperator 0x555f55d92b58 <line:192:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| | | |-MemberExpr 0x555f55d92a88 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:192:2, col:8> 'sys_snode_t *' lvalue ->head 0x555f55d92598
| | | | `-ImplicitCastExpr 0x555f55d92a70 <col:2> 'sys_slist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x555f55d92a48 <col:2> 'sys_slist_t *' lvalue ParmVar 0x555f55d92898 'list' 'sys_slist_t *'
| | | `-ImplicitCastExpr 0x555f55d92b40 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| | |   `-ParenExpr 0x555f55d92b20 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x555f55d92af8 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x555f55d92ac0 <col:23> 'int' 0
| | `-BinaryOperator 0x555f55da7be0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| |   |-MemberExpr 0x555f55da7b10 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, col:8> 'sys_snode_t *' lvalue ->tail 0x555f55d925f0
| |   | `-ImplicitCastExpr 0x555f55d92ba8 <col:2> 'sys_slist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x555f55d92b80 <col:2> 'sys_slist_t *' lvalue ParmVar 0x555f55d92898 'list' 'sys_slist_t *'
| |   `-ImplicitCastExpr 0x555f55da7bc8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| |     `-ParenExpr 0x555f55da7ba8 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x555f55da7b80 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x555f55da7b48 <col:23> 'int' 0
| `-FullComment 0x555f55eca880 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:186:3, line:188:50>
|   |-ParagraphComment 0x555f55eca6c0 <line:186:3>
|   | `-TextComment 0x555f55eca690 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eca6e0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x555f55eca740 <col:10, col:27>
|   |   `-TextComment 0x555f55eca710 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x555f55eca790 <line:188:3>
|   | `-TextComment 0x555f55eca760 <col:3> Text=" "
|   `-ParamCommandComment 0x555f55eca7b0 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x555f55eca840 <col:15, col:50>
|       `-TextComment 0x555f55eca810 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x555f55da7d40 <line:198:1, line:201:1> line:198:28 used z_snode_next_peek 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55da7c38 <col:46, col:59> col:59 used node 'sys_snode_t *'
| `-CompoundStmt 0x555f55da7e90 <line:199:1, line:201:1>
|   `-ReturnStmt 0x555f55da7e78 <line:200:2, col:15>
|     `-ImplicitCastExpr 0x555f55da7e60 <col:9, col:15> 'struct _snode *' <LValueToRValue>
|       `-MemberExpr 0x555f55da7e28 <col:9, col:15> 'struct _snode *' lvalue ->next 0x555f55d923d0
|         `-ImplicitCastExpr 0x555f55da7e10 <col:9> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x555f55da7de8 <col:9> 'sys_snode_t *' lvalue ParmVar 0x555f55da7c38 'node' 'sys_snode_t *'
|-FunctionDecl 0x555f55da8040 <line:203:1, line:206:1> line:203:20 used z_snode_next_set 'void (sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55da7eb8 <col:37, col:50> col:50 used parent 'sys_snode_t *'
| |-ParmVarDecl 0x555f55da7f28 <col:58, col:71> col:71 used child 'sys_snode_t *'
| `-CompoundStmt 0x555f55da81d0 <line:204:1, line:206:1>
|   `-BinaryOperator 0x555f55da81a8 <line:205:2, col:17> 'struct _snode *' '='
|     |-MemberExpr 0x555f55da8130 <col:2, col:10> 'struct _snode *' lvalue ->next 0x555f55d923d0
|     | `-ImplicitCastExpr 0x555f55da8118 <col:2> 'sys_snode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x555f55da80f0 <col:2> 'sys_snode_t *' lvalue ParmVar 0x555f55da7eb8 'parent' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x555f55da8190 <col:17> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55da8168 <col:17> 'sys_snode_t *' lvalue ParmVar 0x555f55da7f28 'child' 'sys_snode_t *'
|-FunctionDecl 0x555f55da8380 <line:208:1, line:211:1> line:208:20 used z_slist_head_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55da81f8 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x555f55da8268 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x555f55da8510 <line:209:1, line:211:1>
|   `-BinaryOperator 0x555f55da84e8 <line:210:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x555f55da8470 <col:2, col:8> 'sys_snode_t *' lvalue ->head 0x555f55d92598
|     | `-ImplicitCastExpr 0x555f55da8458 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x555f55da8430 <col:2> 'sys_slist_t *' lvalue ParmVar 0x555f55da81f8 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x555f55da84d0 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55da84a8 <col:15> 'sys_snode_t *' lvalue ParmVar 0x555f55da8268 'node' 'sys_snode_t *'
|-FunctionDecl 0x555f55da8638 <line:213:1, line:216:1> line:213:20 used z_slist_tail_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55da8538 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x555f55da85a8 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x555f55da87f8 <line:214:1, line:216:1>
|   `-BinaryOperator 0x555f55da87a0 <line:215:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x555f55da8728 <col:2, col:8> 'sys_snode_t *' lvalue ->tail 0x555f55d925f0
|     | `-ImplicitCastExpr 0x555f55da8710 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x555f55da86e8 <col:2> 'sys_slist_t *' lvalue ParmVar 0x555f55da8538 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x555f55da8788 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55da8760 <col:15> 'sys_snode_t *' lvalue ParmVar 0x555f55da85a8 'node' 'sys_snode_t *'
|-FunctionDecl 0x555f55da8920 <line:225:1, line:228:1> line:225:28 used sys_slist_peek_head 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x555f55da8820 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x555f55da8a98 <line:226:1, line:228:1>
| | `-ReturnStmt 0x555f55da8a58 <line:227:2, col:15>
| |   `-ImplicitCastExpr 0x555f55da8a40 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x555f55da8a08 <col:9, col:15> 'sys_snode_t *' lvalue ->head 0x555f55d92598
| |       `-ImplicitCastExpr 0x555f55da89f0 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x555f55da89c8 <col:9> 'sys_slist_t *' lvalue ParmVar 0x555f55da8820 'list' 'sys_slist_t *'
| `-FullComment 0x555f55ecabc0 <line:219:3, line:223:68>
|   |-ParagraphComment 0x555f55eca920 <line:219:3>
|   | `-TextComment 0x555f55eca8f0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eca940 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55eca9a0 <col:10, col:43>
|   |   `-TextComment 0x555f55eca970 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x555f55eca9f0 <line:221:3>
|   | `-TextComment 0x555f55eca9c0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ecaa10 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecaaa0 <col:15, col:62>
|   |   `-TextComment 0x555f55ecaa70 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x555f55ecaaf0 <line:223:3>
|   | `-TextComment 0x555f55ecaac0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ecab10 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x555f55ecab70 <col:11, col:68>
|       `-TextComment 0x555f55ecab40 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x555f55da8c08 <line:237:1, line:240:1> line:237:28 used sys_slist_peek_tail 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x555f55da8b80 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x555f55da8d88 <line:238:1, line:240:1>
| | `-ReturnStmt 0x555f55da8d40 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x555f55da8d28 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x555f55da8cf0 <col:9, col:15> 'sys_snode_t *' lvalue ->tail 0x555f55d925f0
| |       `-ImplicitCastExpr 0x555f55da8cd8 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x555f55da8cb0 <col:9> 'sys_slist_t *' lvalue ParmVar 0x555f55da8b80 'list' 'sys_slist_t *'
| `-FullComment 0x555f55ecaf00 <line:231:3, line:235:67>
|   |-ParagraphComment 0x555f55ecac60 <line:231:3>
|   | `-TextComment 0x555f55ecac30 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecac80 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x555f55ecace0 <col:10, col:42>
|   |   `-TextComment 0x555f55ecacb0 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x555f55ecad30 <line:233:3>
|   | `-TextComment 0x555f55ecad00 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ecad50 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecade0 <col:15, col:61>
|   |   `-TextComment 0x555f55ecadb0 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x555f55ecae30 <line:235:3>
|   | `-TextComment 0x555f55ecae00 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ecae50 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x555f55ecaeb0 <col:11, col:67>
|       `-TextComment 0x555f55ecae80 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x555f55da8eb0 <line:253:1, col:56> col:20 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x555f55da8db0 <col:39, col:52> col:52 list 'sys_slist_t *'
| `-FullComment 0x555f55ecb240 <line:247:3, line:251:57>
|   |-ParagraphComment 0x555f55ecafa0 <line:247:3>
|   | `-TextComment 0x555f55ecaf70 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecafc0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x555f55ecb020 <col:10, col:41>
|   |   `-TextComment 0x555f55ecaff0 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x555f55ecb070 <line:249:3>
|   | `-TextComment 0x555f55ecb040 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ecb090 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecb120 <col:15, col:44>
|   |   `-TextComment 0x555f55ecb0f0 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x555f55ecb170 <line:251:3>
|   | `-TextComment 0x555f55ecb140 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ecb190 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x555f55ecb1f0 <col:11, col:57>
|       `-TextComment 0x555f55ecb1c0 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x555f55da8ff0 prev 0x555f55da8eb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:3:1 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x555f55da8f68 <line:5:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_slist_t *'
| `-CompoundStmt 0x555f55da92e8 <line:60:2, line:62:2>
|   `-ReturnStmt 0x555f55da92a0 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x555f55da9288 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x555f55da9268 <col:10, col:54> 'int'
|         `-BinaryOperator 0x555f55da9240 <<scratch space>:7:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x555f55da9160 <<scratch space>:7:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_snode_t *'
|           | |-ImplicitCastExpr 0x555f55da9148 <<scratch space>:7:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x555f55da9098 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8920 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|           | `-ImplicitCastExpr 0x555f55da9190 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_slist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x555f55da90c0 <col:41> 'sys_slist_t *' lvalue ParmVar 0x555f55da8f68 'list' 'sys_slist_t *'
|           `-ImplicitCastExpr 0x555f55da9228 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|             `-ParenExpr 0x555f55da9208 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x555f55da91e0 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x555f55da91a8 <col:23> 'int' 0
|-FunctionDecl 0x555f55da9398 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:266:1, col:74> col:28 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55da9310 <col:57, col:70> col:70 node 'sys_snode_t *'
| `-FullComment 0x555f55ecb5e0 <line:258:3, line:264:55>
|   |-ParagraphComment 0x555f55ecb2e0 <line:258:3>
|   | `-TextComment 0x555f55ecb2b0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecb300 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x555f55ecb360 <col:10, col:64>
|   |   `-TextComment 0x555f55ecb330 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x555f55ecb3b0 <line:260:3, col:69>
|   | `-TextComment 0x555f55ecb380 <col:3, col:69> Text=" Faster then sys_slist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x555f55ecb400 <line:262:3>
|   | `-TextComment 0x555f55ecb3d0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ecb420 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecb4b0 <col:15, col:64>
|   |   `-TextComment 0x555f55ecb480 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x555f55ecb500 <line:264:3>
|   | `-TextComment 0x555f55ecb4d0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ecb520 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x555f55ecb580 <col:11, col:55>
|       `-TextComment 0x555f55ecb550 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x555f55da94d8 prev 0x555f55da9398 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:11:1 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55da9450 <line:13:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_snode_t *'
| `-CompoundStmt 0x555f55da96c8 <line:67:2, line:69:2>
|   `-ReturnStmt 0x555f55da9688 <line:68:3, col:42>
|     `-CallExpr 0x555f55da9640 <<scratch space>:15:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x555f55da9628 <<scratch space>:15:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55da9580 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x555f55da7d40 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       `-ImplicitCastExpr 0x555f55da9670 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_snode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55da95a8 <col:38> 'sys_snode_t *' lvalue ParmVar 0x555f55da9450 'node' 'sys_snode_t *'
|-FunctionDecl 0x555f55da9778 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:277:1, col:65> col:28 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55da96f0 <col:48, col:61> col:61 node 'sys_snode_t *'
| `-FullComment 0x555f55ecb920 <line:271:3, line:275:55>
|   |-ParagraphComment 0x555f55ecb680 <line:271:3>
|   | `-TextComment 0x555f55ecb650 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecb6a0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x555f55ecb700 <col:10, col:46>
|   |   `-TextComment 0x555f55ecb6d0 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x555f55ecb750 <line:273:3>
|   | `-TextComment 0x555f55ecb720 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ecb770 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecb800 <col:15, col:64>
|   |   `-TextComment 0x555f55ecb7d0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x555f55ecb850 <line:275:3>
|   | `-TextComment 0x555f55ecb820 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ecb870 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x555f55ecb8d0 <col:11, col:55>
|       `-TextComment 0x555f55ecb8a0 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x555f55da98b8 prev 0x555f55da9778 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:19:1 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55da9830 <line:21:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_snode_t *'
| `-CompoundStmt 0x555f55dab2a8 <line:74:2, line:78:2>
|   `-ReturnStmt 0x555f55dab268 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x555f55dab238 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *'
|       |-BinaryOperator 0x555f55da9a38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x555f55da9a08 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_snode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x555f55da9960 <col:10> 'sys_snode_t *' lvalue ParmVar 0x555f55da9830 'node' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x555f55da9a20 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x555f55da99e8 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x555f55da99c0 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x555f55da9988 <col:23> 'int' 0
|       |-CallExpr 0x555f55da9ac8 <<scratch space>:23:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_snode_t *'
|       | |-ImplicitCastExpr 0x555f55da9ab0 <<scratch space>:23:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x555f55da9a60 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x555f55da94d8 'sys_slist_peek_next_no_check' 'sys_snode_t *(sys_snode_t *)'
|       | `-ImplicitCastExpr 0x555f55da9af8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x555f55da9a88 <col:43> 'sys_snode_t *' lvalue ParmVar 0x555f55da9830 'node' 'sys_snode_t *'
|       `-ImplicitCastExpr 0x555f55dab220 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|         `-ParenExpr 0x555f55dab200 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x555f55da9b48 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x555f55da9b10 <col:23> 'int' 0
|-FunctionDecl 0x555f55dab3d0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:289:1, line:290:27> line:289:20 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55dab2d0 <col:38, col:51> col:51 list 'sys_slist_t *'
| |-ParmVarDecl 0x555f55dab340 <line:290:10, col:23> col:23 node 'sys_snode_t *'
| `-FullComment 0x555f55ecbcd0 <line:282:3, line:287:47>
|   |-ParagraphComment 0x555f55ecb9c0 <line:282:3>
|   | `-TextComment 0x555f55ecb990 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecb9e0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x555f55ecba40 <col:10, col:42>
|   |   `-TextComment 0x555f55ecba10 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x555f55ecba90 <line:284:3, col:62>
|   | `-TextComment 0x555f55ecba60 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ecbae0 <line:286:3>
|   | `-TextComment 0x555f55ecbab0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ecbb00 <col:4, line:287:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecbbd0 <line:286:15, line:287:3>
|   |   |-TextComment 0x555f55ecbb80 <line:286:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x555f55ecbba0 <line:287:3> Text=" "
|   `-ParamCommandComment 0x555f55ecbbf0 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x555f55ecbc80 <col:15, col:47>
|       `-TextComment 0x555f55ecbc50 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x555f55dab590 prev 0x555f55dab3d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:25:1 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55dab490 <line:27:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_slist_t *'
| |-ParmVarDecl 0x555f55dab500 <<scratch space>:29:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_snode_t *'
| `-CompoundStmt 0x555f55dabca8 <line:84:2, line:93:2>
|   |-CallExpr 0x555f55dab7b0 <<scratch space>:31:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x555f55dab798 <<scratch space>:31:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x555f55dab640 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x555f55da8040 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x555f55dab7e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x555f55dab668 <col:30> 'sys_snode_t *' lvalue ParmVar 0x555f55dab500 'node' 'sys_snode_t *'
|   | `-CallExpr 0x555f55dab6f8 <<scratch space>:33:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x555f55dab6e0 <<scratch space>:33:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x555f55dab690 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8920 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x555f55dab728 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x555f55dab6b8 <col:36> 'sys_slist_t *' lvalue ParmVar 0x555f55dab490 'list' 'sys_slist_t *'
|   |-CallExpr 0x555f55dab8f0 <<scratch space>:35:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x555f55dab8d8 <<scratch space>:35:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x555f55dab800 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x555f55da8380 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x555f55dab928 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x555f55dab828 <col:30> 'sys_slist_t *' lvalue ParmVar 0x555f55dab490 'list' 'sys_slist_t *'
|   | `-ImplicitCastExpr 0x555f55dab940 <col:36> 'sys_snode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x555f55dab850 <col:36> 'sys_snode_t *' lvalue ParmVar 0x555f55dab500 'node' 'sys_snode_t *'
|   `-IfStmt 0x555f55dabc48 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x555f55dabaa0 <<scratch space>:37:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x555f55dab9c0 <<scratch space>:37:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x555f55dab9a8 <<scratch space>:37:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x555f55dab958 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x555f55dab9f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x555f55dab980 <col:37> 'sys_slist_t *' lvalue ParmVar 0x555f55dab490 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x555f55daba88 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x555f55daba68 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x555f55daba40 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x555f55daba08 <col:23> 'int' 0
|     |-CompoundStmt 0x555f55dabc30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x555f55dabbe0 <<scratch space>:39:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x555f55dabbc8 <<scratch space>:39:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x555f55dabac8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x555f55da8638 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x555f55dabc18 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x555f55dabaf0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x555f55dab490 'list' 'sys_slist_t *'
|     |   `-CallExpr 0x555f55dabb80 <<scratch space>:41:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_snode_t *'
|     |     |-ImplicitCastExpr 0x555f55dabb68 <<scratch space>:41:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x555f55dabb18 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8920 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|     |     `-ImplicitCastExpr 0x555f55dabbb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_slist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x555f55dabb40 <col:36> 'sys_slist_t *' lvalue ParmVar 0x555f55dab490 'list' 'sys_slist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x555f55dabde0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:302:1, line:303:26> line:302:20 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55dabce0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x555f55dabd50 <line:303:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x555f55ecc060 <line:295:3, line:300:46>
|   |-ParagraphComment 0x555f55ecbd70 <line:295:3>
|   | `-TextComment 0x555f55ecbd40 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecbd90 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x555f55ecbdf0 <col:10, col:41>
|   |   `-TextComment 0x555f55ecbdc0 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x555f55ecbe40 <line:297:3, col:62>
|   | `-TextComment 0x555f55ecbe10 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ecbe90 <line:299:3>
|   | `-TextComment 0x555f55ecbe60 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ecbeb0 <col:4, line:300:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecbf60 <line:299:15, line:300:3>
|   |   |-TextComment 0x555f55ecbf10 <line:299:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x555f55ecbf30 <line:300:3> Text=" "
|   `-ParamCommandComment 0x555f55ecbf80 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x555f55ecc010 <col:15, col:46>
|       `-TextComment 0x555f55ecbfe0 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x555f55dabfa0 prev 0x555f55dabde0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:43:1 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55dabea0 <line:45:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x555f55dabf10 <<scratch space>:47:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x555f55dad4d8 <line:99:2, line:111:2>
|   |-CallExpr 0x555f55dac138 <<scratch space>:49:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x555f55dac120 <<scratch space>:49:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x555f55dac050 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x555f55da8040 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x555f55dac170 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x555f55dac078 <col:30> 'sys_snode_t *' lvalue ParmVar 0x555f55dabf10 'node' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x555f55dac188 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |   `-ParenExpr 0x555f55dac100 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x555f55dac0d8 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x555f55dac0a0 <col:23> 'int' 0
|   `-IfStmt 0x555f55dad470 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x555f55dacfb8 <<scratch space>:51:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x555f55daced8 <<scratch space>:51:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x555f55dacec0 <<scratch space>:51:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x555f55dac1a0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x555f55dacf08 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x555f55dac1c8 <col:37> 'sys_slist_t *' lvalue ParmVar 0x555f55dabea0 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x555f55dacfa0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x555f55dacf80 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x555f55dacf58 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x555f55dacf20 <col:23> 'int' 0
|     |-CompoundStmt 0x555f55dad1d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x555f55dad070 <<scratch space>:53:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x555f55dad058 <<scratch space>:53:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x555f55dacfe0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x555f55da8638 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     | | |-ImplicitCastExpr 0x555f55dad0a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_slist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x555f55dad008 <col:31> 'sys_slist_t *' lvalue ParmVar 0x555f55dabea0 'list' 'sys_slist_t *'
|     | | `-ImplicitCastExpr 0x555f55dad0c0 <col:37> 'sys_snode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x555f55dad030 <col:37> 'sys_snode_t *' lvalue ParmVar 0x555f55dabf10 'node' 'sys_snode_t *'
|     | `-CallExpr 0x555f55dad168 <<scratch space>:55:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x555f55dad150 <<scratch space>:55:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x555f55dad0d8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x555f55da8380 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x555f55dad1a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x555f55dad100 <col:31> 'sys_slist_t *' lvalue ParmVar 0x555f55dabea0 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x555f55dad1b8 <col:37> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x555f55dad128 <col:37> 'sys_snode_t *' lvalue ParmVar 0x555f55dabf10 'node' 'sys_snode_t *'
|     `-CompoundStmt 0x555f55dad450 <line:105:10, line:110:3>
|       |-CallExpr 0x555f55dad308 <<scratch space>:57:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x555f55dad2f0 <<scratch space>:57:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x555f55dad1f0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x555f55da8040 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|       | |-CallExpr 0x555f55dad280 <line:59:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x555f55dad268 <<scratch space>:59:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x555f55dad218 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|       | | `-ImplicitCastExpr 0x555f55dad2b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_slist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x555f55dad240 <col:35> 'sys_slist_t *' lvalue ParmVar 0x555f55dabea0 'list' 'sys_slist_t *'
|       | `-ImplicitCastExpr 0x555f55dad340 <line:108:5> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x555f55dad2c8 <col:5> 'sys_snode_t *' lvalue ParmVar 0x555f55dabf10 'node' 'sys_snode_t *'
|       `-CallExpr 0x555f55dad3e8 <<scratch space>:61:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x555f55dad3d0 <<scratch space>:61:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x555f55dad358 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x555f55da8638 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|         |-ImplicitCastExpr 0x555f55dad420 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_slist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x555f55dad380 <col:31> 'sys_slist_t *' lvalue ParmVar 0x555f55dabea0 'list' 'sys_slist_t *'
|         `-ImplicitCastExpr 0x555f55dad438 <col:37> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x555f55dad3a8 <col:37> 'sys_snode_t *' lvalue ParmVar 0x555f55dabf10 'node' 'sys_snode_t *'
|-FunctionDecl 0x555f55dad730 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:320:1, line:321:29> line:320:20 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x555f55dad508 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x555f55dad580 <line:321:7, col:13> col:13 head 'void *'
| |-ParmVarDecl 0x555f55dad5f8 <col:19, col:25> col:25 tail 'void *'
| `-FullComment 0x555f55ecc5c0 <line:308:3, line:318:66>
|   |-ParagraphComment 0x555f55ecc100 <line:308:3>
|   | `-TextComment 0x555f55ecc0d0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecc120 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x555f55ecc180 <col:10, col:41>
|   |   `-TextComment 0x555f55ecc150 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x555f55ecc270 <line:310:3, line:312:62>
|   | |-TextComment 0x555f55ecc1a0 <line:310:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x555f55ecc1c0 <line:311:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x555f55ecc210 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x555f55ecc230 <line:312:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ecc2c0 <line:314:3, col:48>
|   | `-TextComment 0x555f55ecc290 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x555f55ecc310 <line:316:3>
|   | `-TextComment 0x555f55ecc2e0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ecc330 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecc3e0 <line:316:15, line:317:3>
|   |   |-TextComment 0x555f55ecc390 <line:316:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x555f55ecc3b0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x555f55ecc400 <col:4, line:318:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x555f55ecc4b0 <line:317:15, line:318:3>
|   |   |-TextComment 0x555f55ecc460 <line:317:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x555f55ecc480 <line:318:3> Text=" "
|   `-ParamCommandComment 0x555f55ecc4d0 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x555f55ecc560 <col:15, col:66>
|       `-TextComment 0x555f55ecc530 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x555f55dad980 prev 0x555f55dad730 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:63:1 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x555f55dad7f8 <line:65:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_slist_t *'
| |-ParmVarDecl 0x555f55dad870 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x555f55dad8e8 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x555f55dae068 <col:31, line:127:42>
|   |-IfStmt 0x555f55daded0 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x555f55dadb80 <<scratch space>:67:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x555f55dadaa0 <<scratch space>:67:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x555f55dada88 <<scratch space>:67:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x555f55dada38 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x555f55dadad0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x555f55dada60 <col:36> 'sys_slist_t *' lvalue ParmVar 0x555f55dad7f8 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x555f55dadb68 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x555f55dadb48 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x555f55dadb20 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x555f55dadae8 <col:23> 'int' 0
|   | |-CompoundStmt 0x555f55dadcd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x555f55dadc88 <<scratch space>:69:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x555f55dadc70 <<scratch space>:69:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x555f55dadba8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x555f55da8380 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x555f55dadcc0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x555f55dadbd0 <col:30> 'sys_slist_t *' lvalue ParmVar 0x555f55dad7f8 'list' 'sys_slist_t *'
|   | |   `-CStyleCastExpr 0x555f55dadc48 <line:120:6, col:31> 'sys_snode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x555f55dadc30 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x555f55dadbf8 <col:31> 'void *' lvalue ParmVar 0x555f55dad870 'head' 'void *'
|   | `-CompoundStmt 0x555f55dade90 <line:121:9, line:125:2>
|   |   `-CallExpr 0x555f55dade58 <<scratch space>:73:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x555f55dade40 <<scratch space>:73:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555f55dadcf0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x555f55da8040 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |     |-CallExpr 0x555f55dadd80 <line:75:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_snode_t *'
|   |     | |-ImplicitCastExpr 0x555f55dadd68 <<scratch space>:75:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x555f55dadd18 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | `-ImplicitCastExpr 0x555f55daddb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_slist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555f55dadd40 <col:34> 'sys_slist_t *' lvalue ParmVar 0x555f55dad7f8 'list' 'sys_slist_t *'
|   |     `-CStyleCastExpr 0x555f55dade18 <line:124:4, col:29> 'sys_snode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x555f55dade00 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x555f55daddc8 <col:29> 'void *' lvalue ParmVar 0x555f55dad870 'head' 'void *'
|   `-CallExpr 0x555f55dadfe8 <<scratch space>:79:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x555f55dadfd0 <<scratch space>:79:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55dadf08 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x555f55da8638 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x555f55dae020 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_slist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x555f55dadf30 <col:29> 'sys_slist_t *' lvalue ParmVar 0x555f55dad7f8 'list' 'sys_slist_t *'
|     `-CStyleCastExpr 0x555f55dadfa8 <line:127:10, col:35> 'sys_snode_t *' <BitCast>
|       `-ImplicitCastExpr 0x555f55dadf90 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55dadf58 <col:35> 'void *' lvalue ParmVar 0x555f55dad8e8 'tail' 'void *'
|-FunctionDecl 0x555f55dae220 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:334:1, line:335:34> line:334:20 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x555f55dae098 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x555f55dae108 <line:335:7, col:20> col:20 list_to_append 'sys_slist_t *'
| `-FullComment 0x555f55ecc970 <line:326:3, line:332:57>
|   |-ParagraphComment 0x555f55ecc660 <line:326:3>
|   | `-TextComment 0x555f55ecc630 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecc680 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x555f55ecc6e0 <col:10, col:65>
|   |   `-TextComment 0x555f55ecc6b0 <col:10, col:65> Text=" merge two slists, appending the second one to the first"
|   |-ParagraphComment 0x555f55ecc750 <line:328:3, line:329:62>
|   | |-TextComment 0x555f55ecc700 <line:328:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x555f55ecc720 <line:329:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ecc7a0 <line:331:3>
|   | `-TextComment 0x555f55ecc770 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ecc7c0 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecc870 <line:331:15, line:332:3>
|   |   |-TextComment 0x555f55ecc820 <line:331:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x555f55ecc840 <line:332:3> Text=" "
|   `-ParamCommandComment 0x555f55ecc890 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x555f55ecc920 <col:25, col:57>
|       `-TextComment 0x555f55ecc8f0 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x555f55dae3e0 prev 0x555f55dae220 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:84:1 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x555f55dae2e0 <line:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_slist_t *'
| |-ParmVarDecl 0x555f55dae350 <<scratch space>:88:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_slist_t *'
| `-CompoundStmt 0x555f55daeaa8 <line:135:2, line:141:2>
|   |-DeclStmt 0x555f55dae588 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x555f55dae4a0 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_snode_t *'
|   | `-VarDecl 0x555f55dae510 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_snode_t *'
|   |-BinaryOperator 0x555f55dae678 <line:137:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x555f55dae5a0 <col:3> 'sys_snode_t *' lvalue Var 0x555f55dae4a0 'head' 'sys_snode_t *'
|   | `-CallExpr 0x555f55dae630 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x555f55dae618 <<scratch space>:92:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x555f55dae5c8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8920 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x555f55dae660 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x555f55dae5f0 <col:40> 'sys_slist_t *' lvalue ParmVar 0x555f55dae350 'list_to_append' 'sys_slist_t *'
|   |-BinaryOperator 0x555f55dae778 <line:138:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x555f55dae6a0 <col:3> 'sys_snode_t *' lvalue Var 0x555f55dae510 'tail' 'sys_snode_t *'
|   | `-CallExpr 0x555f55dae730 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x555f55dae718 <<scratch space>:94:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x555f55dae6c8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x555f55dae760 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x555f55dae6f0 <col:40> 'sys_slist_t *' lvalue ParmVar 0x555f55dae350 'list_to_append' 'sys_slist_t *'
|   |-CallExpr 0x555f55dae8b0 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x555f55dae898 <<scratch space>:96:1> 'void (*)(sys_slist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x555f55dae7a0 <col:1> 'void (sys_slist_t *, void *, void *)' Function 0x555f55dad980 'sys_slist_append_list' 'void (sys_slist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x555f55dae8f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x555f55dae7c8 <col:35> 'sys_slist_t *' lvalue ParmVar 0x555f55dae2e0 'list' 'sys_slist_t *'
|   | |-ImplicitCastExpr 0x555f55dae920 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x555f55dae908 <col:41> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x555f55dae7f0 <col:41> 'sys_snode_t *' lvalue Var 0x555f55dae4a0 'head' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x555f55dae950 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x555f55dae938 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x555f55dae818 <col:47> 'sys_snode_t *' lvalue Var 0x555f55dae510 'tail' 'sys_snode_t *'
|   `-CallExpr 0x555f55daea30 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x555f55daea18 <<scratch space>:98:1> 'void (*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55dae968 <col:1> 'void (sys_slist_t *)' Function 0x555f55d929a0 'sys_slist_init' 'void (sys_slist_t *)'
|     `-ImplicitCastExpr 0x555f55daea60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_slist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55dae990 <col:28> 'sys_slist_t *' lvalue ParmVar 0x555f55dae350 'list_to_append' 'sys_slist_t *'
|-FunctionDecl 0x555f55daed00 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:348:1, line:350:26> line:348:20 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55daeaf0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x555f55daeb60 <line:349:9, col:22> col:22 prev 'sys_snode_t *'
| |-ParmVarDecl 0x555f55daebd0 <line:350:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x555f55eccde0 <line:340:3, line:346:46>
|   |-ParagraphComment 0x555f55ecca10 <line:340:3>
|   | `-TextComment 0x555f55ecc9e0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecca30 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x555f55ecca90 <col:10, col:41>
|   |   `-TextComment 0x555f55ecca60 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x555f55eccae0 <line:342:3, col:62>
|   | `-TextComment 0x555f55eccab0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55eccb30 <line:344:3>
|   | `-TextComment 0x555f55eccb00 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55eccb50 <col:4, line:345:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55eccc00 <line:344:15, line:345:3>
|   |   |-TextComment 0x555f55eccbb0 <line:344:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x555f55eccbd0 <line:345:3> Text=" "
|   |-ParamCommandComment 0x555f55eccc20 <col:4, line:346:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x555f55ecccd0 <line:345:15, line:346:3>
|   |   |-TextComment 0x555f55eccc80 <line:345:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x555f55eccca0 <line:346:3> Text=" "
|   `-ParamCommandComment 0x555f55ecccf0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x555f55eccd80 <col:15, col:46>
|       `-TextComment 0x555f55eccd50 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x555f55db1f68 prev 0x555f55daed00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:100:1 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55daedc8 <line:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x555f55daee38 <<scratch space>:104:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_snode_t *'
| |-ParmVarDecl 0x555f55db1ed0 <<scratch space>:106:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x555f55db27c8 <line:148:2, line:158:2>
|   `-IfStmt 0x555f55db2768 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x555f55db20f8 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x555f55db20c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_snode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x555f55db2020 <col:7> 'sys_snode_t *' lvalue ParmVar 0x555f55daee38 'prev' 'sys_snode_t *'
|     | `-ImplicitCastExpr 0x555f55db20e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x555f55db20a8 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x555f55db2080 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x555f55db2048 <col:23> 'int' 0
|     |-CompoundStmt 0x555f55db2218 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x555f55db21b0 <<scratch space>:108:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x555f55db2198 <<scratch space>:108:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x555f55db2120 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x555f55dab590 'sys_slist_prepend' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x555f55db21e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x555f55db2148 <col:32> 'sys_slist_t *' lvalue ParmVar 0x555f55daedc8 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x555f55db2200 <col:38> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x555f55db2170 <col:38> 'sys_snode_t *' lvalue ParmVar 0x555f55db1ed0 'node' 'sys_snode_t *'
|     `-IfStmt 0x555f55db2730 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x555f55db2378 <<scratch space>:110:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x555f55db2298 <<scratch space>:110:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x555f55db2280 <<scratch space>:110:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x555f55db2230 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x555f55da7d40 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       | | `-ImplicitCastExpr 0x555f55db22c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_snode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x555f55db2258 <col:42> 'sys_snode_t *' lvalue ParmVar 0x555f55daee38 'prev' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x555f55db2360 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x555f55db2340 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x555f55db2318 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x555f55db22e0 <col:23> 'int' 0
|       |-CompoundStmt 0x555f55db2498 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x555f55db2430 <<scratch space>:112:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x555f55db2418 <<scratch space>:112:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x555f55db23a0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x555f55dabfa0 'sys_slist_append' 'void (sys_slist_t *, sys_snode_t *)'
|       |   |-ImplicitCastExpr 0x555f55db2468 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_slist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x555f55db23c8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x555f55daedc8 'list' 'sys_slist_t *'
|       |   `-ImplicitCastExpr 0x555f55db2480 <col:37> 'sys_snode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x555f55db23f0 <col:37> 'sys_snode_t *' lvalue ParmVar 0x555f55db1ed0 'node' 'sys_snode_t *'
|       `-CompoundStmt 0x555f55db2710 <line:153:10, line:157:3>
|         |-CallExpr 0x555f55db25c8 <<scratch space>:114:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x555f55db25b0 <<scratch space>:114:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x555f55db24b0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x555f55da8040 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|         | |-ImplicitCastExpr 0x555f55db2600 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_snode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x555f55db24d8 <col:31> 'sys_snode_t *' lvalue ParmVar 0x555f55db1ed0 'node' 'sys_snode_t *'
|         | `-CallExpr 0x555f55db2568 <<scratch space>:116:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_snode_t *'
|         |   |-ImplicitCastExpr 0x555f55db2550 <<scratch space>:116:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x555f55db2500 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x555f55da7d40 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|         |   `-ImplicitCastExpr 0x555f55db2598 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_snode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x555f55db2528 <col:33> 'sys_snode_t *' lvalue ParmVar 0x555f55daee38 'prev' 'sys_snode_t *'
|         `-CallExpr 0x555f55db26a8 <<scratch space>:118:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x555f55db2690 <<scratch space>:118:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x555f55db2618 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x555f55da8040 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|           |-ImplicitCastExpr 0x555f55db26e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_snode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x555f55db2640 <col:31> 'sys_snode_t *' lvalue ParmVar 0x555f55daee38 'prev' 'sys_snode_t *'
|           `-ImplicitCastExpr 0x555f55db26f8 <col:37> 'sys_snode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x555f55db2668 <col:37> 'sys_snode_t *' lvalue ParmVar 0x555f55db1ed0 'node' 'sys_snode_t *'
|-FunctionDecl 0x555f55db2878 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:364:1, col:69> col:28 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x555f55db27f0 <col:52, col:65> col:65 list 'sys_slist_t *'
| `-FullComment 0x555f55ecd1a0 <line:355:3, line:362:50>
|   |-ParagraphComment 0x555f55ecce80 <line:355:3>
|   | `-TextComment 0x555f55ecce50 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eccea0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x555f55eccf00 <col:10, col:59>
|   |   `-TextComment 0x555f55ecced0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x555f55eccf70 <line:357:3, line:358:62>
|   | |-TextComment 0x555f55eccf20 <line:357:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x555f55eccf40 <line:358:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55eccfc0 <line:360:3>
|   | `-TextComment 0x555f55eccf90 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55eccfe0 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecd070 <col:15, col:46>
|   |   `-TextComment 0x555f55ecd040 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x555f55ecd0c0 <line:362:3>
|   | `-TextComment 0x555f55ecd090 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ecd0e0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x555f55ecd140 <col:11, col:50>
|       `-TextComment 0x555f55ecd110 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x555f55db29b8 prev 0x555f55db2878 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:122:1 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x555f55db2930 <line:124:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_slist_t *'
| `-CompoundStmt 0x555f55db3068 <line:163:2, line:175:2>
|   |-DeclStmt 0x555f55db2b80 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x555f55db2a70 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_snode_t *' cinit
|   |   `-CallExpr 0x555f55db2b38 <<scratch space>:128:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_snode_t *'
|   |     |-ImplicitCastExpr 0x555f55db2b20 <<scratch space>:128:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555f55db2ad0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8920 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |     `-ImplicitCastExpr 0x555f55db2b68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_slist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x555f55db2af8 <col:35> 'sys_slist_t *' lvalue ParmVar 0x555f55db2930 'list' 'sys_slist_t *'
|   |-CallExpr 0x555f55db2cb0 <<scratch space>:130:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x555f55db2c98 <<scratch space>:130:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x555f55db2b98 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x555f55da8380 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x555f55db2ce8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x555f55db2bc0 <col:30> 'sys_slist_t *' lvalue ParmVar 0x555f55db2930 'list' 'sys_slist_t *'
|   | `-CallExpr 0x555f55db2c50 <<scratch space>:132:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x555f55db2c38 <<scratch space>:132:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x555f55db2be8 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x555f55da7d40 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   `-ImplicitCastExpr 0x555f55db2c80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x555f55db2c10 <col:33> 'sys_snode_t *' lvalue Var 0x555f55db2a70 'node' 'sys_snode_t *'
|   |-IfStmt 0x555f55db2fa8 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x555f55db2df0 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x555f55db2d68 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x555f55db2d50 <<scratch space>:134:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x555f55db2d00 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x555f55db2d98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x555f55db2d28 <col:37> 'sys_slist_t *' lvalue ParmVar 0x555f55db2930 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x555f55db2dd8 <col:46> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x555f55db2db0 <col:46> 'sys_snode_t *' lvalue Var 0x555f55db2a70 'node' 'sys_snode_t *'
|   | |-CompoundStmt 0x555f55db2f90 <col:52, line:172:3>
|   | | `-CallExpr 0x555f55db2f40 <<scratch space>:136:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x555f55db2f28 <<scratch space>:136:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x555f55db2e18 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x555f55da8638 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x555f55db2f78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x555f55db2e40 <col:31> 'sys_slist_t *' lvalue ParmVar 0x555f55db2930 'list' 'sys_slist_t *'
|   | |   `-CallExpr 0x555f55db2ee0 <<scratch space>:138:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_snode_t *'
|   | |     |-ImplicitCastExpr 0x555f55db2eb8 <<scratch space>:138:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x555f55db2e68 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8920 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |     `-ImplicitCastExpr 0x555f55db2f10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_slist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x555f55db2e90 <col:35> 'sys_slist_t *' lvalue ParmVar 0x555f55db2930 'list' 'sys_slist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x555f55db3020 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x555f55db3008 <col:10> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55db2fe0 <col:10> 'sys_snode_t *' lvalue Var 0x555f55db2a70 'node' 'sys_snode_t *'
|-FunctionDecl 0x555f55db3130 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:377:1, col:59> col:28 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x555f55db30a8 <col:42, col:55> col:55 list 'sys_slist_t *'
| `-FullComment 0x555f55ecd540 <line:369:3, line:375:69>
|   |-ParagraphComment 0x555f55ecd240 <line:369:3>
|   | `-TextComment 0x555f55ecd210 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecd260 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x555f55ecd2c0 <col:10, col:59>
|   |   `-TextComment 0x555f55ecd290 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x555f55ecd310 <line:371:3, col:62>
|   | `-TextComment 0x555f55ecd2e0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ecd360 <line:373:3>
|   | `-TextComment 0x555f55ecd330 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ecd380 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecd410 <col:15, col:46>
|   |   `-TextComment 0x555f55ecd3e0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x555f55ecd460 <line:375:3>
|   | `-TextComment 0x555f55ecd430 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ecd480 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x555f55ecd4e0 <col:11, col:69>
|       `-TextComment 0x555f55ecd4b0 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x555f55db3270 prev 0x555f55db3130 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:142:1 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x555f55db31e8 <line:144:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_slist_t *'
| `-CompoundStmt 0x555f55db35f8 <line:180:2, line:183:2>
|   `-ReturnStmt 0x555f55db35b8 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x555f55db3588 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x555f55db3558 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x555f55db33e0 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x555f55db33c8 <<scratch space>:146:1> 'bool (*)(sys_slist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x555f55db3318 <col:1> 'bool (sys_slist_t *)' Function 0x555f55da8ff0 'sys_slist_is_empty' 'bool (sys_slist_t *)'
|       |   `-ImplicitCastExpr 0x555f55db3410 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_slist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x555f55db3340 <col:39> 'sys_slist_t *' lvalue ParmVar 0x555f55db31e8 'list' 'sys_slist_t *'
|       |-ImplicitCastExpr 0x555f55db3570 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       | `-ParenExpr 0x555f55db3488 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x555f55db3460 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x555f55db3428 <col:23> 'int' 0
|       `-CallExpr 0x555f55db3510 <<scratch space>:148:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|         |-ImplicitCastExpr 0x555f55db34f8 <<scratch space>:148:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x555f55db34a8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55db29b8 'sys_slist_get_not_empty' 'sys_snode_t *(sys_slist_t *)'
|         `-ImplicitCastExpr 0x555f55db3540 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_slist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x555f55db34d0 <col:38> 'sys_slist_t *' lvalue ParmVar 0x555f55db31e8 'list' 'sys_slist_t *'
|-FunctionDecl 0x555f55db3798 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:391:1, line:393:26> line:391:20 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55db3620 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x555f55db3690 <line:392:9, col:22> col:22 prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x555f55db3700 <line:393:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x555f55ecd9e0 <line:382:3, line:389:46>
|   |-ParagraphComment 0x555f55ecd5e0 <line:382:3>
|   | `-TextComment 0x555f55ecd5b0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecd600 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x555f55ecd660 <col:10, col:23>
|   |   `-TextComment 0x555f55ecd630 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x555f55ecd6b0 <line:384:3, col:62>
|   | `-TextComment 0x555f55ecd680 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ecd700 <line:386:3>
|   | `-TextComment 0x555f55ecd6d0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ecd720 <col:4, line:387:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecd7d0 <line:386:15, line:387:3>
|   |   |-TextComment 0x555f55ecd780 <line:386:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x555f55ecd7a0 <line:387:3> Text=" "
|   |-ParamCommandComment 0x555f55ecd7f0 <col:4, line:389:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x555f55ecd8d0 <line:387:20, line:389:3>
|   |   |-TextComment 0x555f55ecd850 <line:387:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x555f55ecd870 <line:388:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x555f55ecd890 <line:389:3> Text=" "
|   `-ParamCommandComment 0x555f55ecd8f0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x555f55ecd980 <col:15, col:46>
|       `-TextComment 0x555f55ecd950 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x555f55db39d8 prev 0x555f55db3798 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:150:1 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55db3860 <line:152:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x555f55db38d0 <<scratch space>:154:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x555f55db3940 <<scratch space>:156:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x555f55db45a8 <line:190:2, line:212:2>
|   |-IfStmt 0x555f55db43f8 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x555f55db3b68 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x555f55db3b38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x555f55db3a90 <col:7> 'sys_snode_t *' lvalue ParmVar 0x555f55db38d0 'prev_node' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x555f55db3b50 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x555f55db3b18 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x555f55db3af0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x555f55db3ab8 <col:23> 'int' 0
|   | |-CompoundStmt 0x555f55db3ff0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x555f55db3ca8 <<scratch space>:158:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x555f55db3c90 <<scratch space>:158:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x555f55db3b90 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x555f55da8380 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | | | |-ImplicitCastExpr 0x555f55db3ce0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_slist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x555f55db3bb8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x555f55db3860 'list' 'sys_slist_t *'
|   | | | `-CallExpr 0x555f55db3c48 <<scratch space>:160:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_snode_t *'
|   | | |   |-ImplicitCastExpr 0x555f55db3c30 <<scratch space>:160:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x555f55db3be0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x555f55da7d40 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   | | |   `-ImplicitCastExpr 0x555f55db3c78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_snode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x555f55db3c08 <col:33> 'sys_snode_t *' lvalue ParmVar 0x555f55db3940 'node' 'sys_snode_t *'
|   | | `-IfStmt 0x555f55db3fb8 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x555f55db3de8 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x555f55db3d60 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_snode_t *'
|   | |   | | |-ImplicitCastExpr 0x555f55db3d48 <<scratch space>:162:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x555f55db3cf8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | |   | | `-ImplicitCastExpr 0x555f55db3d90 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_slist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x555f55db3d20 <col:38> 'sys_slist_t *' lvalue ParmVar 0x555f55db3860 'list' 'sys_slist_t *'
|   | |   | `-ImplicitCastExpr 0x555f55db3dd0 <col:47> 'sys_snode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x555f55db3da8 <col:47> 'sys_snode_t *' lvalue ParmVar 0x555f55db3940 'node' 'sys_snode_t *'
|   | |   |-CompoundStmt 0x555f55db3fa0 <col:53, line:199:4>
|   | |   | `-CallExpr 0x555f55db3f50 <<scratch space>:164:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x555f55db3f38 <<scratch space>:164:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x555f55db3e10 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x555f55da8638 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |   |-ImplicitCastExpr 0x555f55db3f88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_slist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x555f55db3e38 <col:32> 'sys_slist_t *' lvalue ParmVar 0x555f55db3860 'list' 'sys_slist_t *'
|   | |   |   `-CallExpr 0x555f55db3ef0 <<scratch space>:166:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_snode_t *'
|   | |   |     |-ImplicitCastExpr 0x555f55db3eb0 <<scratch space>:166:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x555f55db3e60 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8920 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   |     `-ImplicitCastExpr 0x555f55db3f20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_slist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x555f55db3e88 <col:36> 'sys_slist_t *' lvalue ParmVar 0x555f55db3860 'list' 'sys_slist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x555f55db43d8 <line:200:10, line:209:3>
|   |   |-CallExpr 0x555f55db4128 <<scratch space>:168:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x555f55db4110 <<scratch space>:168:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x555f55db4010 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x555f55da8040 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |   | |-ImplicitCastExpr 0x555f55db4160 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_snode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x555f55db4038 <col:31> 'sys_snode_t *' lvalue ParmVar 0x555f55db38d0 'prev_node' 'sys_snode_t *'
|   |   | `-CallExpr 0x555f55db40c8 <<scratch space>:170:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_snode_t *'
|   |   |   |-ImplicitCastExpr 0x555f55db40b0 <<scratch space>:170:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x555f55db4060 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x555f55da7d40 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   |   `-ImplicitCastExpr 0x555f55db40f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_snode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x555f55db4088 <col:33> 'sys_snode_t *' lvalue ParmVar 0x555f55db3940 'node' 'sys_snode_t *'
|   |   `-IfStmt 0x555f55db43a0 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x555f55db4268 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x555f55db41e0 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_snode_t *'
|   |     | | |-ImplicitCastExpr 0x555f55db41c8 <<scratch space>:172:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x555f55db4178 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | | `-ImplicitCastExpr 0x555f55db4210 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_slist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x555f55db41a0 <col:38> 'sys_slist_t *' lvalue ParmVar 0x555f55db3860 'list' 'sys_slist_t *'
|   |     | `-ImplicitCastExpr 0x555f55db4250 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555f55db4228 <col:47> 'sys_snode_t *' lvalue ParmVar 0x555f55db3940 'node' 'sys_snode_t *'
|   |     |-CompoundStmt 0x555f55db4388 <col:53, line:208:4>
|   |     | `-CallExpr 0x555f55db4320 <<scratch space>:174:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x555f55db4308 <<scratch space>:174:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x555f55db4290 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x555f55da8638 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   |     |   |-ImplicitCastExpr 0x555f55db4358 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_slist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x555f55db42b8 <col:32> 'sys_slist_t *' lvalue ParmVar 0x555f55db3860 'list' 'sys_slist_t *'
|   |     |   `-ImplicitCastExpr 0x555f55db4370 <line:207:13> 'sys_snode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x555f55db42e0 <col:13> 'sys_snode_t *' lvalue ParmVar 0x555f55db38d0 'prev_node' 'sys_snode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x555f55db4518 <<scratch space>:176:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x555f55db4500 <<scratch space>:176:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55db4430 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x555f55da8040 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x555f55db4550 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_snode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x555f55db4458 <col:30> 'sys_snode_t *' lvalue ParmVar 0x555f55db3940 'node' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x555f55db4568 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       `-ParenExpr 0x555f55db44e0 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x555f55db44b8 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x555f55db4480 <col:23> 'int' 0
|-FunctionDecl 0x555f55db4760 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:407:1, line:408:28> line:407:20 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55db45d8 <col:46, col:59> col:59 list 'sys_slist_t *'
| |-ParmVarDecl 0x555f55db4648 <line:408:11, col:24> col:24 node 'sys_snode_t *'
| `-FullComment 0x555f55ecde70 <line:398:3, line:405:35>
|   |-ParagraphComment 0x555f55ecda80 <line:398:3>
|   | `-TextComment 0x555f55ecda50 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecdaa0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x555f55ecdb00 <col:10, col:44>
|   |   `-TextComment 0x555f55ecdad0 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x555f55ecdb50 <line:400:3, col:62>
|   | `-TextComment 0x555f55ecdb20 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ecdbc0 <line:402:3>
|   | `-TextComment 0x555f55ecdb90 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ecdbe0 <col:4, line:403:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecdc90 <line:402:15, line:403:3>
|   |   |-TextComment 0x555f55ecdc40 <line:402:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x555f55ecdc60 <line:403:3> Text=" "
|   |-ParamCommandComment 0x555f55ecdcb0 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x555f55ecdd40 <col:15, col:60>
|   |   `-TextComment 0x555f55ecdd10 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x555f55ecdd90 <line:405:3>
|   | `-TextComment 0x555f55ecdd60 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ecddb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ecde10 <col:11, col:35>
|       `-TextComment 0x555f55ecdde0 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x555f55db4920 prev 0x555f55db4760 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:178:1 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x555f55db4820 <line:180:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_slist_t *'
| |-ParmVarDecl 0x555f55db4890 <<scratch space>:182:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_snode_t *'
| `-CompoundStmt 0x555f55db7468 <line:218:2, line:233:2>
|   |-DeclStmt 0x555f55db4ad8 <<scratch space>:184:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x555f55db49e0 <<scratch space>:184:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_snode_t *' cinit
|   |   `-ImplicitCastExpr 0x555f55db4ac0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |     `-ParenExpr 0x555f55db4aa0 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x555f55db4a78 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x555f55db4a40 <col:23> 'int' 0
|   |-DeclStmt 0x555f55db4b60 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x555f55db4b00 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_snode_t *'
|   |-ForStmt 0x555f55db73b0 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x555f55db4c50 <line:222:42, line:15:47> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x555f55db4b78 <line:222:42> 'sys_snode_t *' lvalue Var 0x555f55db4b00 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x555f55db4c08 <<scratch space>:188:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x555f55db4bf0 <<scratch space>:188:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x555f55db4ba0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x555f55da8920 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   `-ImplicitCastExpr 0x555f55db4c38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_slist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x555f55db4bc8 <col:36> 'sys_slist_t *' lvalue ParmVar 0x555f55db4820 'list' 'sys_slist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x555f55db4d50 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x555f55db4d20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x555f55db4c78 <col:42> 'sys_snode_t *' lvalue Var 0x555f55db4b00 'test' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x555f55db4d38 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x555f55db4d00 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x555f55db4cd8 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x555f55db4ca0 <col:23> 'int' 0
|   | |-BinaryOperator 0x555f55db4e50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x555f55db4d78 <line:222:42> 'sys_snode_t *' lvalue Var 0x555f55db4b00 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x555f55db4e08 <<scratch space>:190:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x555f55db4df0 <<scratch space>:190:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x555f55db4da0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x555f55da98b8 'sys_slist_peek_next' 'sys_snode_t *(sys_snode_t *)'
|   | |   `-ImplicitCastExpr 0x555f55db4e38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x555f55db4dc8 <col:42> 'sys_snode_t *' lvalue Var 0x555f55db4b00 'test' 'sys_snode_t *'
|   | `-CompoundStmt 0x555f55db7390 <col:48, line:230:3>
|   |   |-IfStmt 0x555f55db72c8 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x555f55db7098 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x555f55db4ec8 <col:8> 'sys_snode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x555f55db4e78 <col:8> 'sys_snode_t *' lvalue Var 0x555f55db4b00 'test' 'sys_snode_t *'
|   |   | | `-ImplicitCastExpr 0x555f55db7080 <col:16> 'sys_snode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x555f55db4ea0 <col:16> 'sys_snode_t *' lvalue ParmVar 0x555f55db4890 'node' 'sys_snode_t *'
|   |   | |-CompoundStmt 0x555f55db72a8 <col:22, line:227:4>
|   |   | | |-CallExpr 0x555f55db71d0 <<scratch space>:192:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x555f55db71b8 <<scratch space>:192:1> 'void (*)(sys_slist_t *, sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x555f55db70c0 <col:1> 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' Function 0x555f55db39d8 'sys_slist_remove' 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)'
|   |   | | | |-ImplicitCastExpr 0x555f55db7210 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_slist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x555f55db70e8 <col:32> 'sys_slist_t *' lvalue ParmVar 0x555f55db4820 'list' 'sys_slist_t *'
|   |   | | | |-ImplicitCastExpr 0x555f55db7228 <col:38> 'sys_snode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x555f55db7110 <col:38> 'sys_snode_t *' lvalue Var 0x555f55db49e0 'prev' 'sys_snode_t *'
|   |   | | | `-ImplicitCastExpr 0x555f55db7240 <line:225:11> 'sys_snode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x555f55db7138 <col:11> 'sys_snode_t *' lvalue ParmVar 0x555f55db4890 'node' 'sys_snode_t *'
|   |   | | `-ReturnStmt 0x555f55db7290 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x555f55db7278 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x555f55db7258 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x555f55db7368 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_snode_t *' '='
|   |     |-DeclRefExpr 0x555f55db7300 <col:4> 'sys_snode_t *' lvalue Var 0x555f55db49e0 'prev' 'sys_snode_t *'
|   |     `-ImplicitCastExpr 0x555f55db7350 <col:11> 'sys_snode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x555f55db7328 <col:11> 'sys_snode_t *' lvalue Var 0x555f55db4b00 'test' 'sys_snode_t *'
|   `-ReturnStmt 0x555f55db7420 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x555f55db7408 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x555f55db73e8 <col:16> 'int' 0
|-TypedefDecl 0x555f55db74d0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:29:1, col:15> col:15 referenced unative_t 'u64_t':'unsigned long long'
| `-TypedefType 0x555f55db74a0 'u64_t' sugar
|   |-Typedef 0x555f55d0e920 'u64_t'
|   `-BuiltinType 0x555f55ca0870 'unsigned long long'
|-RecordDecl 0x555f55db7528 <line:34:1, line:36:1> line:34:8 struct _sfnode definition
| `-FieldDecl 0x555f55db7600 <line:35:2, col:12> col:12 referenced next_and_flags 'unative_t':'unsigned long long'
|-TypedefDecl 0x555f55db76a0 <line:38:1, col:24> col:24 referenced sys_sfnode_t 'struct _sfnode':'struct _sfnode'
| `-ElaboratedType 0x555f55db7650 'struct _sfnode' sugar
|   `-RecordType 0x555f55db75b0 'struct _sfnode'
|     `-Record 0x555f55db7528 '_sfnode'
|-RecordDecl 0x555f55db76f8 <line:40:1, line:43:1> line:40:8 struct _sflist definition
| |-FieldDecl 0x555f55db7828 <line:41:2, col:16> col:16 referenced head 'sys_sfnode_t *'
| `-FieldDecl 0x555f55db7880 <line:42:2, col:16> col:16 referenced tail 'sys_sfnode_t *'
|-TypedefDecl 0x555f55db7920 <line:45:1, col:24> col:24 referenced sys_sflist_t 'struct _sflist':'struct _sflist'
| `-ElaboratedType 0x555f55db78d0 'struct _sflist' sugar
|   `-RecordType 0x555f55db7780 'struct _sflist'
|     `-Record 0x555f55db76f8 '_sflist'
|-FunctionDecl 0x555f55db7c30 <line:196:1, line:200:1> line:196:20 used sys_sflist_init 'void (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x555f55db7b28 <col:36, col:50> col:50 used list 'sys_sflist_t *'
| |-CompoundStmt 0x555f55db7f48 <line:197:1, line:200:1>
| | |-BinaryOperator 0x555f55db7de8 <line:198:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| | | |-MemberExpr 0x555f55db7d18 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:198:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x555f55db7828
| | | | `-ImplicitCastExpr 0x555f55db7d00 <col:2> 'sys_sflist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x555f55db7cd8 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x555f55db7b28 'list' 'sys_sflist_t *'
| | | `-ImplicitCastExpr 0x555f55db7dd0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| | |   `-ParenExpr 0x555f55db7db0 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x555f55db7d88 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x555f55db7d50 <col:23> 'int' 0
| | `-BinaryOperator 0x555f55db7f20 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| |   |-MemberExpr 0x555f55db7e50 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x555f55db7880
| |   | `-ImplicitCastExpr 0x555f55db7e38 <col:2> 'sys_sflist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x555f55db7e10 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x555f55db7b28 'list' 'sys_sflist_t *'
| |   `-ImplicitCastExpr 0x555f55db7f08 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| |     `-ParenExpr 0x555f55db7ee8 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x555f55db7ec0 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x555f55db7e88 <col:23> 'int' 0
| `-FullComment 0x555f55ece0d0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:192:3, line:194:50>
|   |-ParagraphComment 0x555f55ecdf10 <line:192:3>
|   | `-TextComment 0x555f55ecdee0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecdf30 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x555f55ecdf90 <col:10, col:27>
|   |   `-TextComment 0x555f55ecdf60 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x555f55ecdfe0 <line:194:3>
|   | `-TextComment 0x555f55ecdfb0 <col:3> Text=" "
|   `-ParamCommandComment 0x555f55ece000 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x555f55ece090 <col:15, col:50>
|       `-TextComment 0x555f55ece060 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x555f55dbc6c0 <line:205:1, line:208:1> line:205:29 used z_sfnode_next_peek 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55db7f78 <col:48, col:62> col:62 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x555f55dbc918 <line:206:1, line:208:1>
|   `-ReturnStmt 0x555f55dbc900 <line:207:2, col:71>
|     `-CStyleCastExpr 0x555f55dbc8d8 <col:9, col:71> 'sys_sfnode_t *' <IntegralToPointer>
|       `-ParenExpr 0x555f55dbc8b8 <col:25, col:71> 'unsigned long long'
|         `-BinaryOperator 0x555f55dbc850 <col:26, line:203:31> 'unsigned long long' '&'
|           |-ImplicitCastExpr 0x555f55dbc820 <line:207:26, col:32> 'unative_t':'unsigned long long' <LValueToRValue>
|           | `-MemberExpr 0x555f55dbc7a8 <col:26, col:32> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x555f55db7600
|           |   `-ImplicitCastExpr 0x555f55dbc790 <col:26> 'sys_sfnode_t *' <LValueToRValue>
|           |     `-DeclRefExpr 0x555f55dbc768 <col:26> 'sys_sfnode_t *' lvalue ParmVar 0x555f55db7f78 'node' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x555f55dbc838 <col:49, line:203:31> 'unsigned long long' <IntegralCast>
|             `-UnaryOperator 0x555f55dbc800 <line:207:49, line:203:31> 'unsigned long' prefix '~'
|               `-IntegerLiteral 0x555f55dbc7e0 <col:31> 'unsigned long' 3
|-FunctionDecl 0x555f55dbca40 <line:210:1, col:59> col:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| `-ParmVarDecl 0x555f55dbc940 <col:41, col:55> col:55 node 'sys_sfnode_t *'
|-FunctionDecl 0x555f55dbcc80 <line:212:1, line:218:1> line:212:20 used z_sfnode_next_set 'void (sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55dbcaf8 <col:38, col:52> col:52 used parent 'sys_sfnode_t *'
| |-ParmVarDecl 0x555f55dbcb68 <line:213:12, col:26> col:26 used child 'sys_sfnode_t *'
| `-CompoundStmt 0x555f55dbd058 <line:214:1, line:218:1>
|   |-DeclStmt 0x555f55dbcea8 <line:215:2, col:47>
|   | `-VarDecl 0x555f55dbcd40 <col:2, col:46> col:7 used cur_flags 'u8_t':'unsigned char' cinit
|   |   `-CallExpr 0x555f55dbce60 <col:19, col:46> 'u8_t':'unsigned char'
|   |     |-ImplicitCastExpr 0x555f55dbce48 <col:19> 'u8_t (*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555f55dbcda0 <col:19> 'u8_t (sys_sfnode_t *)' Function 0x555f55dbca40 'sys_sfnode_flags_get' 'u8_t (sys_sfnode_t *)'
|   |     `-ImplicitCastExpr 0x555f55dbce90 <col:40> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x555f55dbcdc8 <col:40> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dbcaf8 'parent' 'sys_sfnode_t *'
|   `-BinaryOperator 0x555f55dbd030 <line:217:2, col:50> 'unative_t':'unsigned long long' '='
|     |-MemberExpr 0x555f55dbcf00 <col:2, col:10> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x555f55db7600
|     | `-ImplicitCastExpr 0x555f55dbcee8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x555f55dbcec0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dbcaf8 'parent' 'sys_sfnode_t *'
|     `-BinaryOperator 0x555f55dbd008 <col:27, col:50> 'unsigned long long' '|'
|       |-ImplicitCastExpr 0x555f55dbcff0 <col:27> 'unsigned long long' <IntegralCast>
|       | `-ImplicitCastExpr 0x555f55dbcfd8 <col:27> 'u8_t':'unsigned char' <LValueToRValue>
|       |   `-DeclRefExpr 0x555f55dbcf38 <col:27> 'u8_t':'unsigned char' lvalue Var 0x555f55dbcd40 'cur_flags' 'u8_t':'unsigned char'
|       `-CStyleCastExpr 0x555f55dbcfb0 <col:39, col:50> 'unative_t':'unsigned long long' <PointerToIntegral>
|         `-ImplicitCastExpr 0x555f55dbcf98 <col:50> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x555f55dbcf60 <col:50> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dbcb68 'child' 'sys_sfnode_t *'
|-FunctionDecl 0x555f55dbd210 <line:220:1, line:223:1> line:220:20 used z_sflist_head_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55dbd088 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x555f55dbd0f8 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x555f55dbd3a0 <line:221:1, line:223:1>
|   `-BinaryOperator 0x555f55dbd378 <line:222:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x555f55dbd300 <col:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x555f55db7828
|     | `-ImplicitCastExpr 0x555f55dbd2e8 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x555f55dbd2c0 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x555f55dbd088 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x555f55dbd360 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55dbd338 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dbd0f8 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x555f55dbd4c8 <line:225:1, line:228:1> line:225:20 used z_sflist_tail_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55dbd3c8 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x555f55dbd438 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x555f55dbd688 <line:226:1, line:228:1>
|   `-BinaryOperator 0x555f55dbd630 <line:227:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x555f55dbd5b8 <col:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x555f55db7880
|     | `-ImplicitCastExpr 0x555f55dbd5a0 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x555f55dbd578 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x555f55dbd3c8 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x555f55dbd618 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55dbd5f0 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dbd438 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x555f55dbe7e0 <line:237:1, line:240:1> line:237:29 used sys_sflist_peek_head 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x555f55dbe6e0 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x555f55dbe958 <line:238:1, line:240:1>
| | `-ReturnStmt 0x555f55dbe918 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x555f55dbe900 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x555f55dbe8c8 <col:9, col:15> 'sys_sfnode_t *' lvalue ->head 0x555f55db7828
| |       `-ImplicitCastExpr 0x555f55dbe8b0 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x555f55dbe888 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x555f55dbe6e0 'list' 'sys_sflist_t *'
| `-FullComment 0x555f55ece410 <line:231:3, line:235:68>
|   |-ParagraphComment 0x555f55ece170 <line:231:3>
|   | `-TextComment 0x555f55ece140 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ece190 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55ece1f0 <col:10, col:43>
|   |   `-TextComment 0x555f55ece1c0 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x555f55ece240 <line:233:3>
|   | `-TextComment 0x555f55ece210 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ece260 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ece2f0 <col:15, col:62>
|   |   `-TextComment 0x555f55ece2c0 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x555f55ece340 <line:235:3>
|   | `-TextComment 0x555f55ece310 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ece360 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x555f55ece3c0 <col:11, col:68>
|       `-TextComment 0x555f55ece390 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x555f55dbea08 <line:249:1, line:252:1> line:249:29 used sys_sflist_peek_tail 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x555f55dbe980 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x555f55dbeb88 <line:250:1, line:252:1>
| | `-ReturnStmt 0x555f55dbeb40 <line:251:2, col:15>
| |   `-ImplicitCastExpr 0x555f55dbeb28 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x555f55dbeaf0 <col:9, col:15> 'sys_sfnode_t *' lvalue ->tail 0x555f55db7880
| |       `-ImplicitCastExpr 0x555f55dbead8 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x555f55dbeab0 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x555f55dbe980 'list' 'sys_sflist_t *'
| `-FullComment 0x555f55ece750 <line:243:3, line:247:67>
|   |-ParagraphComment 0x555f55ece4b0 <line:243:3>
|   | `-TextComment 0x555f55ece480 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ece4d0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x555f55ece530 <col:10, col:42>
|   |   `-TextComment 0x555f55ece500 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x555f55ece580 <line:245:3>
|   | `-TextComment 0x555f55ece550 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ece5a0 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ece630 <col:15, col:61>
|   |   `-TextComment 0x555f55ece600 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x555f55ece680 <line:247:3>
|   | `-TextComment 0x555f55ece650 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ece6a0 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x555f55ece700 <col:11, col:67>
|       `-TextComment 0x555f55ece6d0 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x555f55dbec38 prev 0x555f55dbca40 <line:264:1, line:267:1> line:264:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55dbebb0 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-CompoundStmt 0x555f55dbee28 <line:265:1, line:267:1>
| | `-ReturnStmt 0x555f55dbede8 <line:266:2, line:203:31>
| |   `-ImplicitCastExpr 0x555f55dbedd0 <line:266:9, line:203:31> 'u8_t':'unsigned char' <IntegralCast>
| |     `-BinaryOperator 0x555f55dbeda8 <line:266:9, line:203:31> 'unsigned long long' '&'
| |       |-ImplicitCastExpr 0x555f55dbed78 <line:266:9, col:15> 'unative_t':'unsigned long long' <LValueToRValue>
| |       | `-MemberExpr 0x555f55dbed20 <col:9, col:15> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x555f55db7600
| |       |   `-ImplicitCastExpr 0x555f55dbed08 <col:9> 'sys_sfnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x555f55dbece0 <col:9> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dbebb0 'node' 'sys_sfnode_t *'
| |       `-ImplicitCastExpr 0x555f55dbed90 <line:203:31> 'unsigned long long' <IntegralCast>
| |         `-IntegerLiteral 0x555f55dbed58 <col:31> 'unsigned long' 3
| `-FullComment 0x555f55ecea60 <line:259:3, line:262:60>
|   |-ParagraphComment 0x555f55ece7f0 <line:259:3>
|   | `-TextComment 0x555f55ece7c0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ece810 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x555f55ece870 <col:10, col:51>
|   |   `-TextComment 0x555f55ece840 <col:10, col:51> Text=" Fetch flags value for a particular sfnode"
|   |-ParagraphComment 0x555f55ece8c0 <line:261:3>
|   | `-TextComment 0x555f55ece890 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ece8e0 <col:4, line:262:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x555f55ece990 <line:261:15, line:262:3>
|   |   |-TextComment 0x555f55ece940 <line:261:15, col:56> Text=" A pointer to the node to fetch flags from"
|   |   `-TextComment 0x555f55ece960 <line:262:3> Text=" "
|   `-BlockCommandComment 0x555f55ece9b0 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x555f55ecea10 <col:11, col:60>
|       `-TextComment 0x555f55ece9e0 <col:11, col:60> Text=" The value of flags, which will be between 0 and 3"
|-FunctionDecl 0x555f55dbefd0 <line:282:1, line:286:1> line:282:20 sys_sfnode_init 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x555f55dbee50 <col:36, col:50> col:50 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x555f55dbeec0 <col:56, col:61> col:61 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x555f55dbf1c8 <line:283:1, line:286:1>
| | |-CompoundStmt 0x555f55dbf080 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x555f55dbf090 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:284:70>
| | `-BinaryOperator 0x555f55dbf170 <line:285:2, col:25> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x555f55dbf0e0 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x555f55db7600
| |   | `-ImplicitCastExpr 0x555f55dbf0c8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x555f55dbf0a0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dbee50 'node' 'sys_sfnode_t *'
| |   `-ImplicitCastExpr 0x555f55dbf158 <col:25> 'unative_t':'unsigned long long' <IntegralCast>
| |     `-ImplicitCastExpr 0x555f55dbf140 <col:25> 'u8_t':'unsigned char' <LValueToRValue>
| |       `-DeclRefExpr 0x555f55dbf118 <col:25> 'u8_t':'unsigned char' lvalue ParmVar 0x555f55dbeec0 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x555f55eceec0 <line:270:3, line:280:62>
|   |-ParagraphComment 0x555f55eceb00 <line:270:3>
|   | `-TextComment 0x555f55ecead0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eceb20 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x555f55eceb80 <col:10, col:35>
|   |   `-TextComment 0x555f55eceb50 <col:10, col:35> Text=" Initialize an sflist node"
|   |-ParagraphComment 0x555f55ecec20 <line:272:3, line:274:64>
|   | |-TextComment 0x555f55eceba0 <line:272:3, col:79> Text=" Set an initial flags value for this slist node, which can be a value between"
|   | |-TextComment 0x555f55ecebc0 <line:273:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x555f55ecebe0 <line:274:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x555f55ecec90 <line:276:3, line:277:61>
|   | |-TextComment 0x555f55ecec40 <line:276:3, col:73> Text=" This is ever so slightly faster than sys_sfnode_flags_set() and should"
|   | `-TextComment 0x555f55ecec60 <line:277:3, col:61> Text=" only be used on a node that hasn't been added to any list."
|   |-ParagraphComment 0x555f55ecece0 <line:279:3>
|   | `-TextComment 0x555f55ececb0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55eced00 <col:4, line:280:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecedb0 <line:279:15, line:280:3>
|   |   |-TextComment 0x555f55eced60 <line:279:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x555f55eced80 <line:280:3> Text=" "
|   `-ParamCommandComment 0x555f55ecedd0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x555f55ecee60 <col:16, col:62>
|       `-TextComment 0x555f55ecee30 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x555f55dbf300 <line:298:1, line:302:1> line:298:20 sys_sfnode_flags_set 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x555f55dbf200 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x555f55dbf270 <col:61, col:66> col:66 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x555f55dbf6b8 <line:299:1, line:302:1>
| | |-CompoundStmt 0x555f55dbf3b0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x555f55dbf3c0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:300:70>
| | `-BinaryOperator 0x555f55dbf660 <line:301:2, col:65> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x555f55dbf410 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x555f55db7600
| |   | `-ImplicitCastExpr 0x555f55dbf3f8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x555f55dbf3d0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dbf200 'node' 'sys_sfnode_t *'
| |   `-BinaryOperator 0x555f55dbf638 <col:25, col:65> 'unsigned long long' '|'
| |     |-CStyleCastExpr 0x555f55dbf5b8 <col:25, col:61> 'unative_t':'unsigned long long' <PointerToIntegral>
| |     | `-ParenExpr 0x555f55dbf598 <col:36, col:61> 'sys_sfnode_t *'
| |     |   `-CallExpr 0x555f55dbf510 <col:37, col:60> 'sys_sfnode_t *'
| |     |     |-ImplicitCastExpr 0x555f55dbf4f8 <col:37> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x555f55dbf448 <col:37> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x555f55dbc6c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
| |     |     `-ImplicitCastExpr 0x555f55dbf540 <col:56> 'sys_sfnode_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x555f55dbf470 <col:56> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dbf200 'node' 'sys_sfnode_t *'
| |     `-ImplicitCastExpr 0x555f55dbf620 <col:65> 'unsigned long long' <IntegralCast>
| |       `-ImplicitCastExpr 0x555f55dbf608 <col:65> 'u8_t':'unsigned char' <LValueToRValue>
| |         `-DeclRefExpr 0x555f55dbf5e0 <col:65> 'u8_t':'unsigned char' lvalue ParmVar 0x555f55dbf270 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x555f55ecf2a0 <line:289:3, line:296:62>
|   |-ParagraphComment 0x555f55ecef60 <line:289:3>
|   | `-TextComment 0x555f55ecef30 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecef80 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x555f55ecefe0 <col:10, col:44>
|   |   `-TextComment 0x555f55ecefb0 <col:10, col:44> Text=" Set flags value for an sflist node"
|   |-ParagraphComment 0x555f55ecf080 <line:291:3, line:293:64>
|   | |-TextComment 0x555f55ecf000 <line:291:3, col:70> Text=" Set a flags value for this slist node, which can be a value between"
|   | |-TextComment 0x555f55ecf020 <line:292:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x555f55ecf040 <line:293:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x555f55ecf0d0 <line:295:3>
|   | `-TextComment 0x555f55ecf0a0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ecf0f0 <col:4, line:296:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecf1a0 <line:295:15, line:296:3>
|   |   |-TextComment 0x555f55ecf150 <line:295:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x555f55ecf170 <line:296:3> Text=" "
|   `-ParamCommandComment 0x555f55ecf1c0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x555f55ecf250 <col:16, col:62>
|       `-TextComment 0x555f55ecf220 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x555f55dbf800 <line:315:1, col:58> col:20 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x555f55dbf700 <col:40, col:54> col:54 list 'sys_sflist_t *'
| `-FullComment 0x555f55ecf5e0 <line:309:3, line:313:57>
|   |-ParagraphComment 0x555f55ecf340 <line:309:3>
|   | `-TextComment 0x555f55ecf310 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecf360 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x555f55ecf3c0 <col:10, col:41>
|   |   `-TextComment 0x555f55ecf390 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x555f55ecf410 <line:311:3>
|   | `-TextComment 0x555f55ecf3e0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ecf430 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecf4c0 <col:15, col:44>
|   |   `-TextComment 0x555f55ecf490 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x555f55ecf510 <line:313:3>
|   | `-TextComment 0x555f55ecf4e0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ecf530 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x555f55ecf590 <col:11, col:57>
|       `-TextComment 0x555f55ecf560 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x555f55dbf940 prev 0x555f55dbf800 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:194:1 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x555f55dbf8b8 <line:196:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_sflist_t *'
| `-CompoundStmt 0x555f55dbfc38 <line:60:2, line:62:2>
|   `-ReturnStmt 0x555f55dbfbf0 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x555f55dbfbd8 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x555f55dbfbb8 <col:10, col:54> 'int'
|         `-BinaryOperator 0x555f55dbfb90 <<scratch space>:198:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x555f55dbfab0 <<scratch space>:198:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_sfnode_t *'
|           | |-ImplicitCastExpr 0x555f55dbfa98 <<scratch space>:198:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x555f55dbf9e8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbe7e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|           | `-ImplicitCastExpr 0x555f55dbfae0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_sflist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x555f55dbfa10 <col:41> 'sys_sflist_t *' lvalue ParmVar 0x555f55dbf8b8 'list' 'sys_sflist_t *'
|           `-ImplicitCastExpr 0x555f55dbfb78 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|             `-ParenExpr 0x555f55dbfb58 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x555f55dbfb30 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x555f55dbfaf8 <col:23> 'int' 0
|-FunctionDecl 0x555f55dbfce8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:328:1, col:77> col:29 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55dbfc60 <col:59, col:73> col:73 node 'sys_sfnode_t *'
| `-FullComment 0x555f55ecf980 <line:320:3, line:326:55>
|   |-ParagraphComment 0x555f55ecf680 <line:320:3>
|   | `-TextComment 0x555f55ecf650 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecf6a0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x555f55ecf700 <col:10, col:64>
|   |   `-TextComment 0x555f55ecf6d0 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x555f55ecf750 <line:322:3, col:70>
|   | `-TextComment 0x555f55ecf720 <col:3, col:70> Text=" Faster then sys_sflist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x555f55ecf7a0 <line:324:3>
|   | `-TextComment 0x555f55ecf770 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ecf7c0 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x555f55ecf850 <col:15, col:64>
|   |   `-TextComment 0x555f55ecf820 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x555f55ecf8a0 <line:326:3>
|   | `-TextComment 0x555f55ecf870 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ecf8c0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x555f55ecf920 <col:11, col:55>
|       `-TextComment 0x555f55ecf8f0 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x555f55dbfe28 prev 0x555f55dbfce8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:202:1 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55dbfda0 <line:204:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x555f55dbffc8 <line:67:2, line:69:2>
|   `-ReturnStmt 0x555f55dbff80 <line:68:3, col:42>
|     `-CallExpr 0x555f55dbff38 <<scratch space>:206:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x555f55dbff20 <<scratch space>:206:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55dbfed0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x555f55dbc6c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       `-ImplicitCastExpr 0x555f55dbff68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_sfnode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55dbfef8 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dbfda0 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x555f55dc0078 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:339:1, col:68> col:29 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55dbfff0 <col:50, col:64> col:64 node 'sys_sfnode_t *'
| `-FullComment 0x555f55ed0ce0 <line:333:3, line:337:55>
|   |-ParagraphComment 0x555f55ecfa20 <line:333:3>
|   | `-TextComment 0x555f55ecf9f0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ecfa40 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x555f55ecfaa0 <col:10, col:46>
|   |   `-TextComment 0x555f55ecfa70 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x555f55ecfaf0 <line:335:3>
|   | `-TextComment 0x555f55ecfac0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ecfb10 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x555f55ed0bc0 <col:15, col:64>
|   |   `-TextComment 0x555f55ecfb70 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x555f55ed0c10 <line:337:3>
|   | `-TextComment 0x555f55ed0be0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ed0c30 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x555f55ed0c90 <col:11, col:55>
|       `-TextComment 0x555f55ed0c60 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x555f55dc01b8 prev 0x555f55dc0078 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:210:1 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55dc0130 <line:212:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x555f55dc0518 <line:74:2, line:78:2>
|   `-ReturnStmt 0x555f55dc04d8 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x555f55dc04a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *'
|       |-BinaryOperator 0x555f55dc0338 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x555f55dc0308 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_sfnode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x555f55dc0260 <col:10> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc0130 'node' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x555f55dc0320 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x555f55dc02e8 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x555f55dc02c0 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x555f55dc0288 <col:23> 'int' 0
|       |-CallExpr 0x555f55dc03c8 <<scratch space>:214:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x555f55dc03b0 <<scratch space>:214:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x555f55dc0360 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x555f55dbfe28 'sys_sflist_peek_next_no_check' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | `-ImplicitCastExpr 0x555f55dc03f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x555f55dc0388 <col:43> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc0130 'node' 'sys_sfnode_t *'
|       `-ImplicitCastExpr 0x555f55dc0490 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|         `-ParenExpr 0x555f55dc0470 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x555f55dc0448 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x555f55dc0410 <col:23> 'int' 0
|-FunctionDecl 0x555f55dc0640 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:351:1, line:352:29> line:351:20 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55dc0540 <col:39, col:53> col:53 list 'sys_sflist_t *'
| |-ParmVarDecl 0x555f55dc05b0 <line:352:11, col:25> col:25 node 'sys_sfnode_t *'
| `-FullComment 0x555f55ed1070 <line:344:3, line:349:47>
|   |-ParagraphComment 0x555f55ed0d80 <line:344:3>
|   | `-TextComment 0x555f55ed0d50 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed0da0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x555f55ed0e00 <col:10, col:42>
|   |   `-TextComment 0x555f55ed0dd0 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x555f55ed0e50 <line:346:3, col:63>
|   | `-TextComment 0x555f55ed0e20 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ed0ea0 <line:348:3>
|   | `-TextComment 0x555f55ed0e70 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ed0ec0 <col:4, line:349:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ed0f70 <line:348:15, line:349:3>
|   |   |-TextComment 0x555f55ed0f20 <line:348:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x555f55ed0f40 <line:349:3> Text=" "
|   `-ParamCommandComment 0x555f55ed0f90 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x555f55ed1020 <col:15, col:47>
|       `-TextComment 0x555f55ed0ff0 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x555f55dc0810 prev 0x555f55dc0640 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:216:1 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55dc0710 <line:218:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x555f55dc0780 <<scratch space>:220:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x555f55dc0f28 <line:84:2, line:93:2>
|   |-CallExpr 0x555f55dc0a30 <<scratch space>:222:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x555f55dc0a18 <<scratch space>:222:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x555f55dc08c0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x555f55dbcc80 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x555f55dc0a68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x555f55dc08e8 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc0780 'node' 'sys_sfnode_t *'
|   | `-CallExpr 0x555f55dc0978 <<scratch space>:224:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x555f55dc0960 <<scratch space>:224:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x555f55dc0910 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbe7e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x555f55dc09a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x555f55dc0938 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc0710 'list' 'sys_sflist_t *'
|   |-CallExpr 0x555f55dc0b70 <<scratch space>:226:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x555f55dc0b58 <<scratch space>:226:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x555f55dc0a80 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x555f55dbd210 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x555f55dc0ba8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x555f55dc0aa8 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc0710 'list' 'sys_sflist_t *'
|   | `-ImplicitCastExpr 0x555f55dc0bc0 <col:36> 'sys_sfnode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x555f55dc0ad0 <col:36> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc0780 'node' 'sys_sfnode_t *'
|   `-IfStmt 0x555f55dc0ec8 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x555f55dc0d20 <<scratch space>:228:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x555f55dc0c40 <<scratch space>:228:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x555f55dc0c28 <<scratch space>:228:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x555f55dc0bd8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbea08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x555f55dc0c70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x555f55dc0c00 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc0710 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x555f55dc0d08 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x555f55dc0ce8 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x555f55dc0cc0 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x555f55dc0c88 <col:23> 'int' 0
|     |-CompoundStmt 0x555f55dc0eb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x555f55dc0e60 <<scratch space>:230:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x555f55dc0e48 <<scratch space>:230:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x555f55dc0d48 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x555f55dbd4c8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x555f55dc0e98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x555f55dc0d70 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc0710 'list' 'sys_sflist_t *'
|     |   `-CallExpr 0x555f55dc0e00 <<scratch space>:232:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_sfnode_t *'
|     |     |-ImplicitCastExpr 0x555f55dc0de8 <<scratch space>:232:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x555f55dc0d98 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbe7e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|     |     `-ImplicitCastExpr 0x555f55dc0e30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_sflist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x555f55dc0dc0 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc0710 'list' 'sys_sflist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x555f55dc1060 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:364:1, line:365:28> line:364:20 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55dc0f60 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x555f55dc0fd0 <line:365:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x555f55ed1400 <line:357:3, line:362:46>
|   |-ParagraphComment 0x555f55ed1110 <line:357:3>
|   | `-TextComment 0x555f55ed10e0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed1130 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x555f55ed1190 <col:10, col:41>
|   |   `-TextComment 0x555f55ed1160 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x555f55ed11e0 <line:359:3, col:63>
|   | `-TextComment 0x555f55ed11b0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ed1230 <line:361:3>
|   | `-TextComment 0x555f55ed1200 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ed1250 <col:4, line:362:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ed1300 <line:361:15, line:362:3>
|   |   |-TextComment 0x555f55ed12b0 <line:361:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x555f55ed12d0 <line:362:3> Text=" "
|   `-ParamCommandComment 0x555f55ed1320 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x555f55ed13b0 <col:15, col:46>
|       `-TextComment 0x555f55ed1380 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x555f55dc1220 prev 0x555f55dc1060 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:234:1 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55dc1120 <line:236:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x555f55dc1190 <<scratch space>:238:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x555f55dc1a98 <line:99:2, line:111:2>
|   |-CallExpr 0x555f55dc13b8 <<scratch space>:240:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x555f55dc13a0 <<scratch space>:240:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x555f55dc12d0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x555f55dbcc80 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x555f55dc13f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x555f55dc12f8 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc1190 'node' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x555f55dc1408 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |   `-ParenExpr 0x555f55dc1380 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x555f55dc1358 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x555f55dc1320 <col:23> 'int' 0
|   `-IfStmt 0x555f55dc1a30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x555f55dc1568 <<scratch space>:242:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x555f55dc1488 <<scratch space>:242:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x555f55dc1470 <<scratch space>:242:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x555f55dc1420 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbea08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x555f55dc14b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x555f55dc1448 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc1120 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x555f55dc1550 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x555f55dc1530 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x555f55dc1508 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x555f55dc14d0 <col:23> 'int' 0
|     |-CompoundStmt 0x555f55dc1790 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x555f55dc1620 <<scratch space>:244:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x555f55dc1608 <<scratch space>:244:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x555f55dc1590 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x555f55dbd4c8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     | | |-ImplicitCastExpr 0x555f55dc1658 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_sflist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x555f55dc15b8 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc1120 'list' 'sys_sflist_t *'
|     | | `-ImplicitCastExpr 0x555f55dc1670 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x555f55dc15e0 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc1190 'node' 'sys_sfnode_t *'
|     | `-CallExpr 0x555f55dc1728 <<scratch space>:246:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x555f55dc1710 <<scratch space>:246:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x555f55dc1688 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x555f55dbd210 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x555f55dc1760 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x555f55dc16b0 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc1120 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x555f55dc1778 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x555f55dc16d8 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc1190 'node' 'sys_sfnode_t *'
|     `-CompoundStmt 0x555f55dc1a10 <line:105:10, line:110:3>
|       |-CallExpr 0x555f55dc18c8 <<scratch space>:248:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x555f55dc18b0 <<scratch space>:248:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x555f55dc17b0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x555f55dbcc80 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|       | |-CallExpr 0x555f55dc1840 <line:250:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x555f55dc1828 <<scratch space>:250:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x555f55dc17d8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbea08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | | `-ImplicitCastExpr 0x555f55dc1870 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_sflist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x555f55dc1800 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc1120 'list' 'sys_sflist_t *'
|       | `-ImplicitCastExpr 0x555f55dc1900 <line:108:5> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x555f55dc1888 <col:5> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc1190 'node' 'sys_sfnode_t *'
|       `-CallExpr 0x555f55dc19a8 <<scratch space>:252:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x555f55dc1990 <<scratch space>:252:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x555f55dc1918 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x555f55dbd4c8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|         |-ImplicitCastExpr 0x555f55dc19e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_sflist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x555f55dc1940 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc1120 'list' 'sys_sflist_t *'
|         `-ImplicitCastExpr 0x555f55dc19f8 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x555f55dc1968 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc1190 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x555f55dc1cf0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:382:1, line:383:30> line:382:20 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x555f55dc1ac8 <col:43, col:57> col:57 list 'sys_sflist_t *'
| |-ParmVarDecl 0x555f55dc1b40 <line:383:8, col:14> col:14 head 'void *'
| |-ParmVarDecl 0x555f55dc1bb8 <col:20, col:26> col:26 tail 'void *'
| `-FullComment 0x555f55ed1960 <line:370:3, line:380:66>
|   |-ParagraphComment 0x555f55ed14a0 <line:370:3>
|   | `-TextComment 0x555f55ed1470 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed14c0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x555f55ed1520 <col:10, col:41>
|   |   `-TextComment 0x555f55ed14f0 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x555f55ed1610 <line:372:3, line:374:63>
|   | |-TextComment 0x555f55ed1540 <line:372:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x555f55ed1560 <line:373:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x555f55ed15b0 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x555f55ed15d0 <line:374:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ed1660 <line:376:3, col:48>
|   | `-TextComment 0x555f55ed1630 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x555f55ed16b0 <line:378:3>
|   | `-TextComment 0x555f55ed1680 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ed16d0 <col:4, line:379:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ed1780 <line:378:15, line:379:3>
|   |   |-TextComment 0x555f55ed1730 <line:378:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x555f55ed1750 <line:379:3> Text=" "
|   |-ParamCommandComment 0x555f55ed17a0 <col:4, line:380:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x555f55ed1850 <line:379:15, line:380:3>
|   |   |-TextComment 0x555f55ed1800 <line:379:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x555f55ed1820 <line:380:3> Text=" "
|   `-ParamCommandComment 0x555f55ed1870 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x555f55ed1900 <col:15, col:66>
|       `-TextComment 0x555f55ed18d0 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x555f55dc1f40 prev 0x555f55dc1cf0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:254:1 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x555f55dc1db8 <line:256:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x555f55dc1e30 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x555f55dc1ea8 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x555f55dc25f8 <col:31, line:127:42>
|   |-IfStmt 0x555f55dc2468 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x555f55dc2140 <<scratch space>:258:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x555f55dc2060 <<scratch space>:258:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x555f55dc2048 <<scratch space>:258:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x555f55dc1ff8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbea08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x555f55dc2090 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x555f55dc2020 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc1db8 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x555f55dc2128 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x555f55dc2108 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x555f55dc20e0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x555f55dc20a8 <col:23> 'int' 0
|   | |-CompoundStmt 0x555f55dc2298 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x555f55dc2248 <<scratch space>:260:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x555f55dc2230 <<scratch space>:260:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x555f55dc2168 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x555f55dbd210 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x555f55dc2280 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x555f55dc2190 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc1db8 'list' 'sys_sflist_t *'
|   | |   `-CStyleCastExpr 0x555f55dc2208 <line:120:6, col:31> 'sys_sfnode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x555f55dc21f0 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x555f55dc21b8 <col:31> 'void *' lvalue ParmVar 0x555f55dc1e30 'head' 'void *'
|   | `-CompoundStmt 0x555f55dc2450 <line:121:9, line:125:2>
|   |   `-CallExpr 0x555f55dc2418 <<scratch space>:264:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x555f55dc2400 <<scratch space>:264:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555f55dc22b0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x555f55dbcc80 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |     |-CallExpr 0x555f55dc2340 <line:266:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_sfnode_t *'
|   |     | |-ImplicitCastExpr 0x555f55dc2328 <<scratch space>:266:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x555f55dc22d8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbea08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | `-ImplicitCastExpr 0x555f55dc2370 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_sflist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555f55dc2300 <col:34> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc1db8 'list' 'sys_sflist_t *'
|   |     `-CStyleCastExpr 0x555f55dc23d8 <line:124:4, col:29> 'sys_sfnode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x555f55dc23c0 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x555f55dc2388 <col:29> 'void *' lvalue ParmVar 0x555f55dc1e30 'head' 'void *'
|   `-CallExpr 0x555f55dc2580 <<scratch space>:270:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x555f55dc2568 <<scratch space>:270:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55dc24a0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x555f55dbd4c8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x555f55dc25b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_sflist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x555f55dc24c8 <col:29> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc1db8 'list' 'sys_sflist_t *'
|     `-CStyleCastExpr 0x555f55dc2540 <line:127:10, col:35> 'sys_sfnode_t *' <BitCast>
|       `-ImplicitCastExpr 0x555f55dc2528 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55dc24f0 <col:35> 'void *' lvalue ParmVar 0x555f55dc1ea8 'tail' 'void *'
|-FunctionDecl 0x555f55dc27d0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:396:1, line:397:37> line:396:20 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x555f55dc2628 <col:44, col:58> col:58 list 'sys_sflist_t *'
| |-ParmVarDecl 0x555f55dc2698 <line:397:9, col:23> col:23 list_to_append 'sys_sflist_t *'
| `-FullComment 0x555f55ed1d10 <line:388:3, line:394:57>
|   |-ParagraphComment 0x555f55ed1a00 <line:388:3>
|   | `-TextComment 0x555f55ed19d0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed1a20 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x555f55ed1a80 <col:10, col:66>
|   |   `-TextComment 0x555f55ed1a50 <col:10, col:66> Text=" merge two sflists, appending the second one to the first"
|   |-ParagraphComment 0x555f55ed1af0 <line:390:3, line:391:63>
|   | |-TextComment 0x555f55ed1aa0 <line:390:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x555f55ed1ac0 <line:391:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ed1b40 <line:393:3>
|   | `-TextComment 0x555f55ed1b10 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ed1b60 <col:4, line:394:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ed1c10 <line:393:15, line:394:3>
|   |   |-TextComment 0x555f55ed1bc0 <line:393:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x555f55ed1be0 <line:394:3> Text=" "
|   `-ParamCommandComment 0x555f55ed1c30 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x555f55ed1cc0 <col:25, col:57>
|       `-TextComment 0x555f55ed1c90 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x555f55dc2990 prev 0x555f55dc27d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:275:1 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x555f55dc2890 <line:277:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x555f55dc2900 <<scratch space>:279:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_sflist_t *'
| `-CompoundStmt 0x555f55dc3058 <line:135:2, line:141:2>
|   |-DeclStmt 0x555f55dc2b38 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x555f55dc2a50 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_sfnode_t *'
|   | `-VarDecl 0x555f55dc2ac0 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_sfnode_t *'
|   |-BinaryOperator 0x555f55dc2c28 <line:137:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x555f55dc2b50 <col:3> 'sys_sfnode_t *' lvalue Var 0x555f55dc2a50 'head' 'sys_sfnode_t *'
|   | `-CallExpr 0x555f55dc2be0 <<scratch space>:2:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x555f55dc2bc8 <<scratch space>:2:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x555f55dc2b78 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbe7e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x555f55dc2c10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x555f55dc2ba0 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc2900 'list_to_append' 'sys_sflist_t *'
|   |-BinaryOperator 0x555f55dc2d28 <line:138:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x555f55dc2c50 <col:3> 'sys_sfnode_t *' lvalue Var 0x555f55dc2ac0 'tail' 'sys_sfnode_t *'
|   | `-CallExpr 0x555f55dc2ce0 <<scratch space>:4:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x555f55dc2cc8 <<scratch space>:4:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x555f55dc2c78 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbea08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x555f55dc2d10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x555f55dc2ca0 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc2900 'list_to_append' 'sys_sflist_t *'
|   |-CallExpr 0x555f55dc2e60 <<scratch space>:6:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x555f55dc2e48 <<scratch space>:6:1> 'void (*)(sys_sflist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x555f55dc2d50 <col:1> 'void (sys_sflist_t *, void *, void *)' Function 0x555f55dc1f40 'sys_sflist_append_list' 'void (sys_sflist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x555f55dc2ea0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x555f55dc2d78 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc2890 'list' 'sys_sflist_t *'
|   | |-ImplicitCastExpr 0x555f55dc2ed0 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x555f55dc2eb8 <col:41> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x555f55dc2da0 <col:41> 'sys_sfnode_t *' lvalue Var 0x555f55dc2a50 'head' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x555f55dc2f00 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x555f55dc2ee8 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x555f55dc2dc8 <col:47> 'sys_sfnode_t *' lvalue Var 0x555f55dc2ac0 'tail' 'sys_sfnode_t *'
|   `-CallExpr 0x555f55dc2fe0 <<scratch space>:8:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x555f55dc2fc8 <<scratch space>:8:1> 'void (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55dc2f18 <col:1> 'void (sys_sflist_t *)' Function 0x555f55db7c30 'sys_sflist_init' 'void (sys_sflist_t *)'
|     `-ImplicitCastExpr 0x555f55dc3010 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_sflist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55dc2f40 <col:28> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc2900 'list_to_append' 'sys_sflist_t *'
|-FunctionDecl 0x555f55dc32b0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:410:1, line:412:28> line:410:20 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55dc30a0 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x555f55dc3110 <line:411:10, col:24> col:24 prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x555f55dc3180 <line:412:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x555f55ed2180 <line:402:3, line:408:46>
|   |-ParagraphComment 0x555f55ed1db0 <line:402:3>
|   | `-TextComment 0x555f55ed1d80 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed1dd0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x555f55ed1e30 <col:10, col:41>
|   |   `-TextComment 0x555f55ed1e00 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x555f55ed1e80 <line:404:3, col:63>
|   | `-TextComment 0x555f55ed1e50 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ed1ed0 <line:406:3>
|   | `-TextComment 0x555f55ed1ea0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ed1ef0 <col:4, line:407:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ed1fa0 <line:406:15, line:407:3>
|   |   |-TextComment 0x555f55ed1f50 <line:406:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x555f55ed1f70 <line:407:3> Text=" "
|   |-ParamCommandComment 0x555f55ed1fc0 <col:4, line:408:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x555f55ed2070 <line:407:15, line:408:3>
|   |   |-TextComment 0x555f55ed2020 <line:407:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x555f55ed2040 <line:408:3> Text=" "
|   `-ParamCommandComment 0x555f55ed2090 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x555f55ed2120 <col:15, col:46>
|       `-TextComment 0x555f55ed20f0 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x555f55dc34f0 prev 0x555f55dc32b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:10:1 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55dc3378 <line:12:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x555f55dc33e8 <<scratch space>:14:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x555f55dc3458 <<scratch space>:16:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x555f55daf518 <line:148:2, line:158:2>
|   `-IfStmt 0x555f55daf4b0 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x555f55dc3680 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x555f55dc3650 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_sfnode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x555f55dc35a8 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc33e8 'prev' 'sys_sfnode_t *'
|     | `-ImplicitCastExpr 0x555f55dc3668 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x555f55dc3630 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x555f55dc3608 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x555f55dc35d0 <col:23> 'int' 0
|     |-CompoundStmt 0x555f55daef60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x555f55daeef8 <<scratch space>:18:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x555f55daeee0 <<scratch space>:18:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x555f55dc36a8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x555f55dc0810 'sys_sflist_prepend' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x555f55daef30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x555f55dc36d0 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc3378 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x555f55daef48 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x555f55dc36f8 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc3458 'node' 'sys_sfnode_t *'
|     `-IfStmt 0x555f55daf478 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x555f55daf0c0 <<scratch space>:20:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x555f55daefe0 <<scratch space>:20:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x555f55daefc8 <<scratch space>:20:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x555f55daef78 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x555f55dbc6c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | | `-ImplicitCastExpr 0x555f55daf010 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_sfnode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x555f55daefa0 <col:42> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc33e8 'prev' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x555f55daf0a8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x555f55daf088 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x555f55daf060 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x555f55daf028 <col:23> 'int' 0
|       |-CompoundStmt 0x555f55daf1e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x555f55daf178 <<scratch space>:22:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x555f55daf160 <<scratch space>:22:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x555f55daf0e8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x555f55dc1220 'sys_sflist_append' 'void (sys_sflist_t *, sys_sfnode_t *)'
|       |   |-ImplicitCastExpr 0x555f55daf1b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_sflist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x555f55daf110 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x555f55dc3378 'list' 'sys_sflist_t *'
|       |   `-ImplicitCastExpr 0x555f55daf1c8 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x555f55daf138 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc3458 'node' 'sys_sfnode_t *'
|       `-CompoundStmt 0x555f55daf458 <line:153:10, line:157:3>
|         |-CallExpr 0x555f55daf310 <<scratch space>:24:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x555f55daf2f8 <<scratch space>:24:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x555f55daf1f8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x555f55dbcc80 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|         | |-ImplicitCastExpr 0x555f55daf348 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_sfnode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x555f55daf220 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc3458 'node' 'sys_sfnode_t *'
|         | `-CallExpr 0x555f55daf2b0 <<scratch space>:26:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_sfnode_t *'
|         |   |-ImplicitCastExpr 0x555f55daf298 <<scratch space>:26:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x555f55daf248 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x555f55dbc6c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|         |   `-ImplicitCastExpr 0x555f55daf2e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_sfnode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x555f55daf270 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc33e8 'prev' 'sys_sfnode_t *'
|         `-CallExpr 0x555f55daf3f0 <<scratch space>:28:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x555f55daf3d8 <<scratch space>:28:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x555f55daf360 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x555f55dbcc80 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|           |-ImplicitCastExpr 0x555f55daf428 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_sfnode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x555f55daf388 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc33e8 'prev' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x555f55daf440 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x555f55daf3b0 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dc3458 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x555f55daf5c8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:426:1, col:72> col:29 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x555f55daf540 <col:54, col:68> col:68 list 'sys_sflist_t *'
| `-FullComment 0x555f55ed2540 <line:417:3, line:424:50>
|   |-ParagraphComment 0x555f55ed2220 <line:417:3>
|   | `-TextComment 0x555f55ed21f0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed2240 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x555f55ed22a0 <col:10, col:59>
|   |   `-TextComment 0x555f55ed2270 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x555f55ed2310 <line:419:3, line:420:63>
|   | |-TextComment 0x555f55ed22c0 <line:419:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x555f55ed22e0 <line:420:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ed2360 <line:422:3>
|   | `-TextComment 0x555f55ed2330 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ed2380 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ed2410 <col:15, col:46>
|   |   `-TextComment 0x555f55ed23e0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x555f55ed2460 <line:424:3>
|   | `-TextComment 0x555f55ed2430 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ed2480 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x555f55ed24e0 <col:11, col:50>
|       `-TextComment 0x555f55ed24b0 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x555f55daf708 prev 0x555f55daf5c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:32:1 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x555f55daf680 <line:34:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_sflist_t *'
| `-CompoundStmt 0x555f55dafda8 <line:163:2, line:175:2>
|   |-DeclStmt 0x555f55daf8d0 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x555f55daf7c0 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_sfnode_t *' cinit
|   |   `-CallExpr 0x555f55daf888 <<scratch space>:38:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_sfnode_t *'
|   |     |-ImplicitCastExpr 0x555f55daf870 <<scratch space>:38:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555f55daf820 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbe7e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     `-ImplicitCastExpr 0x555f55daf8b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_sflist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x555f55daf848 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x555f55daf680 'list' 'sys_sflist_t *'
|   |-CallExpr 0x555f55dafa00 <<scratch space>:40:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x555f55daf9e8 <<scratch space>:40:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x555f55daf8e8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x555f55dbd210 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x555f55dafa38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x555f55daf910 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x555f55daf680 'list' 'sys_sflist_t *'
|   | `-CallExpr 0x555f55daf9a0 <<scratch space>:42:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x555f55daf988 <<scratch space>:42:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x555f55daf938 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x555f55dbc6c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   `-ImplicitCastExpr 0x555f55daf9d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x555f55daf960 <col:33> 'sys_sfnode_t *' lvalue Var 0x555f55daf7c0 'node' 'sys_sfnode_t *'
|   |-IfStmt 0x555f55dafce8 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x555f55dafb40 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x555f55dafab8 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x555f55dafaa0 <<scratch space>:44:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x555f55dafa50 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbea08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x555f55dafae8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x555f55dafa78 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x555f55daf680 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x555f55dafb28 <col:46> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x555f55dafb00 <col:46> 'sys_sfnode_t *' lvalue Var 0x555f55daf7c0 'node' 'sys_sfnode_t *'
|   | |-CompoundStmt 0x555f55dafcd0 <col:52, line:172:3>
|   | | `-CallExpr 0x555f55dafc80 <<scratch space>:46:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x555f55dafc68 <<scratch space>:46:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x555f55dafb68 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x555f55dbd4c8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x555f55dafcb8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x555f55dafb90 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x555f55daf680 'list' 'sys_sflist_t *'
|   | |   `-CallExpr 0x555f55dafc20 <<scratch space>:48:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_sfnode_t *'
|   | |     |-ImplicitCastExpr 0x555f55dafc08 <<scratch space>:48:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x555f55dafbb8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbe7e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |     `-ImplicitCastExpr 0x555f55dafc50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_sflist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x555f55dafbe0 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x555f55daf680 'list' 'sys_sflist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x555f55dafd60 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x555f55dafd48 <col:10> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55dafd20 <col:10> 'sys_sfnode_t *' lvalue Var 0x555f55daf7c0 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x555f55dafef0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:439:1, col:62> col:29 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x555f55dafde8 <col:44, col:58> col:58 list 'sys_sflist_t *'
| `-FullComment 0x555f55ed28e0 <line:431:3, line:437:69>
|   |-ParagraphComment 0x555f55ed25e0 <line:431:3>
|   | `-TextComment 0x555f55ed25b0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed2600 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x555f55ed2660 <col:10, col:59>
|   |   `-TextComment 0x555f55ed2630 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x555f55ed26b0 <line:433:3, col:63>
|   | `-TextComment 0x555f55ed2680 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ed2700 <line:435:3>
|   | `-TextComment 0x555f55ed26d0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ed2720 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ed27b0 <col:15, col:46>
|   |   `-TextComment 0x555f55ed2780 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x555f55ed2800 <line:437:3>
|   | `-TextComment 0x555f55ed27d0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ed2820 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x555f55ed2880 <col:11, col:69>
|       `-TextComment 0x555f55ed2850 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x555f55db0030 prev 0x555f55dafef0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:52:1 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x555f55daffa8 <line:54:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_sflist_t *'
| `-CompoundStmt 0x555f55db03b8 <line:180:2, line:183:2>
|   `-ReturnStmt 0x555f55db0378 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x555f55db0348 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x555f55db0318 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x555f55db01a0 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x555f55db0188 <<scratch space>:56:1> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x555f55db00d8 <col:1> 'bool (sys_sflist_t *)' Function 0x555f55dbf940 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|       |   `-ImplicitCastExpr 0x555f55db01d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_sflist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x555f55db0100 <col:39> 'sys_sflist_t *' lvalue ParmVar 0x555f55daffa8 'list' 'sys_sflist_t *'
|       |-ImplicitCastExpr 0x555f55db0330 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       | `-ParenExpr 0x555f55db0248 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x555f55db0220 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x555f55db01e8 <col:23> 'int' 0
|       `-CallExpr 0x555f55db02d0 <<scratch space>:58:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|         |-ImplicitCastExpr 0x555f55db02b8 <<scratch space>:58:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x555f55db0268 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55daf708 'sys_sflist_get_not_empty' 'sys_sfnode_t *(sys_sflist_t *)'
|         `-ImplicitCastExpr 0x555f55db0300 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_sflist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x555f55db0290 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x555f55daffa8 'list' 'sys_sflist_t *'
|-FunctionDecl 0x555f55db0558 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:453:1, line:455:28> line:453:20 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55db03e0 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x555f55db0450 <line:454:10, col:24> col:24 prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x555f55db04c0 <line:455:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x555f55ed2db0 <line:444:3, line:451:46>
|   |-ParagraphComment 0x555f55ed2980 <line:444:3>
|   | `-TextComment 0x555f55ed2950 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed29a0 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x555f55ed2a00 <col:10, col:23>
|   |   `-TextComment 0x555f55ed29d0 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x555f55ed2a50 <line:446:3, col:63>
|   | `-TextComment 0x555f55ed2a20 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ed2aa0 <line:448:3>
|   | `-TextComment 0x555f55ed2a70 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ed2ac0 <col:4, line:449:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ed2b70 <line:448:15, line:449:3>
|   |   |-TextComment 0x555f55ed2b20 <line:448:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x555f55ed2b40 <line:449:3> Text=" "
|   |-ParamCommandComment 0x555f55ed2bc0 <col:4, line:451:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x555f55ed2ca0 <line:449:20, line:451:3>
|   |   |-TextComment 0x555f55ed2c20 <line:449:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x555f55ed2c40 <line:450:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x555f55ed2c60 <line:451:3> Text=" "
|   `-ParamCommandComment 0x555f55ed2cc0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x555f55ed2d50 <col:15, col:46>
|       `-TextComment 0x555f55ed2d20 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x555f55db0798 prev 0x555f55db0558 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:60:1 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55db0620 <line:62:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x555f55db0690 <<scratch space>:64:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x555f55db0700 <<scratch space>:66:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x555f55dcaba8 <line:190:2, line:212:2>
|   |-IfStmt 0x555f55dca9f0 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x555f55db0928 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x555f55db08f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x555f55db0850 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x555f55db0690 'prev_node' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x555f55db0910 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x555f55db08d8 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x555f55db08b0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x555f55db0878 <col:23> 'int' 0
|   | |-CompoundStmt 0x555f55db0d88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x555f55db0a68 <<scratch space>:68:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x555f55db0a50 <<scratch space>:68:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x555f55db0950 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x555f55dbd210 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | | | |-ImplicitCastExpr 0x555f55db0aa0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_sflist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x555f55db0978 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x555f55db0620 'list' 'sys_sflist_t *'
|   | | | `-CallExpr 0x555f55db0a08 <<scratch space>:70:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_sfnode_t *'
|   | | |   |-ImplicitCastExpr 0x555f55db09f0 <<scratch space>:70:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x555f55db09a0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x555f55dbc6c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | | |   `-ImplicitCastExpr 0x555f55db0a38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_sfnode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x555f55db09c8 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x555f55db0700 'node' 'sys_sfnode_t *'
|   | | `-IfStmt 0x555f55db0d50 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x555f55db0ba8 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x555f55db0b20 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_sfnode_t *'
|   | |   | | |-ImplicitCastExpr 0x555f55db0b08 <<scratch space>:72:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x555f55db0ab8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbea08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   | | `-ImplicitCastExpr 0x555f55db0b50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_sflist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x555f55db0ae0 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x555f55db0620 'list' 'sys_sflist_t *'
|   | |   | `-ImplicitCastExpr 0x555f55db0b90 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x555f55db0b68 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x555f55db0700 'node' 'sys_sfnode_t *'
|   | |   |-CompoundStmt 0x555f55db0d38 <col:53, line:199:4>
|   | |   | `-CallExpr 0x555f55db0ce8 <<scratch space>:74:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x555f55db0cd0 <<scratch space>:74:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x555f55db0bd0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x555f55dbd4c8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |   |-ImplicitCastExpr 0x555f55db0d20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_sflist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x555f55db0bf8 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x555f55db0620 'list' 'sys_sflist_t *'
|   | |   |   `-CallExpr 0x555f55db0c88 <<scratch space>:76:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_sfnode_t *'
|   | |   |     |-ImplicitCastExpr 0x555f55db0c70 <<scratch space>:76:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x555f55db0c20 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbe7e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   |     `-ImplicitCastExpr 0x555f55db0cb8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_sflist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x555f55db0c48 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x555f55db0620 'list' 'sys_sflist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x555f55dca9d0 <line:200:10, line:209:3>
|   |   |-CallExpr 0x555f55db0ec0 <<scratch space>:78:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x555f55db0ea8 <<scratch space>:78:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x555f55db0da8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x555f55dbcc80 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |   | |-ImplicitCastExpr 0x555f55dca758 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x555f55db0dd0 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x555f55db0690 'prev_node' 'sys_sfnode_t *'
|   |   | `-CallExpr 0x555f55db0e60 <<scratch space>:80:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_sfnode_t *'
|   |   |   |-ImplicitCastExpr 0x555f55db0e48 <<scratch space>:80:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x555f55db0df8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x555f55dbc6c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   |   `-ImplicitCastExpr 0x555f55db0e90 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_sfnode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x555f55db0e20 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x555f55db0700 'node' 'sys_sfnode_t *'
|   |   `-IfStmt 0x555f55dca998 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x555f55dca860 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x555f55dca7d8 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_sfnode_t *'
|   |     | | |-ImplicitCastExpr 0x555f55dca7c0 <<scratch space>:82:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x555f55dca770 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbea08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | | `-ImplicitCastExpr 0x555f55dca808 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_sflist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x555f55dca798 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x555f55db0620 'list' 'sys_sflist_t *'
|   |     | `-ImplicitCastExpr 0x555f55dca848 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555f55dca820 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x555f55db0700 'node' 'sys_sfnode_t *'
|   |     |-CompoundStmt 0x555f55dca980 <col:53, line:208:4>
|   |     | `-CallExpr 0x555f55dca918 <<scratch space>:84:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x555f55dca900 <<scratch space>:84:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x555f55dca888 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x555f55dbd4c8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   |     |   |-ImplicitCastExpr 0x555f55dca950 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_sflist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x555f55dca8b0 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x555f55db0620 'list' 'sys_sflist_t *'
|   |     |   `-ImplicitCastExpr 0x555f55dca968 <line:207:13> 'sys_sfnode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x555f55dca8d8 <col:13> 'sys_sfnode_t *' lvalue ParmVar 0x555f55db0690 'prev_node' 'sys_sfnode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x555f55dcab10 <<scratch space>:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x555f55dcaaf8 <<scratch space>:86:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55dcaa28 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x555f55dbcc80 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x555f55dcab48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_sfnode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x555f55dcaa50 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x555f55db0700 'node' 'sys_sfnode_t *'
|     `-ImplicitCastExpr 0x555f55dcab60 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       `-ParenExpr 0x555f55dcaad8 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x555f55dcaab0 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x555f55dcaa78 <col:23> 'int' 0
|-FunctionDecl 0x555f55dcad60 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:469:1, line:470:30> line:469:20 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55dcabd8 <col:47, col:61> col:61 list 'sys_sflist_t *'
| |-ParmVarDecl 0x555f55dcac48 <line:470:12, col:26> col:26 node 'sys_sfnode_t *'
| `-FullComment 0x555f55ed3220 <line:460:3, line:467:35>
|   |-ParagraphComment 0x555f55ed2e50 <line:460:3>
|   | `-TextComment 0x555f55ed2e20 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed2e70 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x555f55ed2ed0 <col:10, col:44>
|   |   `-TextComment 0x555f55ed2ea0 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x555f55ed2f20 <line:462:3, col:63>
|   | `-TextComment 0x555f55ed2ef0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x555f55ed2f70 <line:464:3>
|   | `-TextComment 0x555f55ed2f40 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ed2f90 <col:4, line:465:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x555f55ed3040 <line:464:15, line:465:3>
|   |   |-TextComment 0x555f55ed2ff0 <line:464:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x555f55ed3010 <line:465:3> Text=" "
|   |-ParamCommandComment 0x555f55ed3060 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x555f55ed30f0 <col:15, col:60>
|   |   `-TextComment 0x555f55ed30c0 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x555f55ed3140 <line:467:3>
|   | `-TextComment 0x555f55ed3110 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ed3160 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ed31c0 <col:11, col:35>
|       `-TextComment 0x555f55ed3190 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x555f55dcaf20 prev 0x555f55dcad60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:88:1 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x555f55dcae20 <line:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x555f55dcae90 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x555f55dcb8c0 <line:218:2, line:233:2>
|   |-DeclStmt 0x555f55dcb0d8 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x555f55dcafe0 <<scratch space>:94:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_sfnode_t *' cinit
|   |   `-ImplicitCastExpr 0x555f55dcb0c0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |     `-ParenExpr 0x555f55dcb0a0 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x555f55dcb078 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x555f55dcb040 <col:23> 'int' 0
|   |-DeclStmt 0x555f55dcb160 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x555f55dcb100 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_sfnode_t *'
|   |-ForStmt 0x555f55dcb838 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x555f55dcb250 <line:222:42, line:15:47> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x555f55dcb178 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x555f55dcb100 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x555f55dcb208 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x555f55dcb1f0 <<scratch space>:98:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x555f55dcb1a0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbe7e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   `-ImplicitCastExpr 0x555f55dcb238 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_sflist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x555f55dcb1c8 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x555f55dcae20 'list' 'sys_sflist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x555f55dcb350 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x555f55dcb320 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x555f55dcb278 <col:42> 'sys_sfnode_t *' lvalue Var 0x555f55dcb100 'test' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x555f55dcb338 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x555f55dcb300 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x555f55dcb2d8 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x555f55dcb2a0 <col:23> 'int' 0
|   | |-BinaryOperator 0x555f55dcb450 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x555f55dcb378 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x555f55dcb100 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x555f55dcb408 <<scratch space>:100:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x555f55dcb3f0 <<scratch space>:100:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x555f55dcb3a0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x555f55dc01b8 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | |   `-ImplicitCastExpr 0x555f55dcb438 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x555f55dcb3c8 <col:42> 'sys_sfnode_t *' lvalue Var 0x555f55dcb100 'test' 'sys_sfnode_t *'
|   | `-CompoundStmt 0x555f55dcb818 <col:48, line:230:3>
|   |   |-IfStmt 0x555f55dcb750 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x555f55dcb4f8 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x555f55dcb4c8 <col:8> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x555f55dcb478 <col:8> 'sys_sfnode_t *' lvalue Var 0x555f55dcb100 'test' 'sys_sfnode_t *'
|   |   | | `-ImplicitCastExpr 0x555f55dcb4e0 <col:16> 'sys_sfnode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x555f55dcb4a0 <col:16> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dcae90 'node' 'sys_sfnode_t *'
|   |   | |-CompoundStmt 0x555f55dcb708 <col:22, line:227:4>
|   |   | | |-CallExpr 0x555f55dcb630 <<scratch space>:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x555f55dcb618 <<scratch space>:102:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x555f55dcb520 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' Function 0x555f55db0798 'sys_sflist_remove' 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)'
|   |   | | | |-ImplicitCastExpr 0x555f55dcb670 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_sflist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x555f55dcb548 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x555f55dcae20 'list' 'sys_sflist_t *'
|   |   | | | |-ImplicitCastExpr 0x555f55dcb688 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x555f55dcb570 <col:38> 'sys_sfnode_t *' lvalue Var 0x555f55dcafe0 'prev' 'sys_sfnode_t *'
|   |   | | | `-ImplicitCastExpr 0x555f55dcb6a0 <line:225:11> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x555f55dcb598 <col:11> 'sys_sfnode_t *' lvalue ParmVar 0x555f55dcae90 'node' 'sys_sfnode_t *'
|   |   | | `-ReturnStmt 0x555f55dcb6f0 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x555f55dcb6d8 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x555f55dcb6b8 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x555f55dcb7f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_sfnode_t *' '='
|   |     |-DeclRefExpr 0x555f55dcb788 <col:4> 'sys_sfnode_t *' lvalue Var 0x555f55dcafe0 'prev' 'sys_sfnode_t *'
|   |     `-ImplicitCastExpr 0x555f55dcb7d8 <col:11> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x555f55dcb7b0 <col:11> 'sys_sfnode_t *' lvalue Var 0x555f55dcb100 'test' 'sys_sfnode_t *'
|   `-ReturnStmt 0x555f55dcb8a8 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x555f55dcb890 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x555f55dcb870 <col:16> 'int' 0
|-RecordDecl 0x555f55dcb8f0 </vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:18:1, line:24:1> line:18:8 struct sys_mem_pool_lvl definition
| |-RecordDecl 0x555f55dcb9a0 <line:19:2, line:22:2> line:19:2 union definition
| | |-FieldDecl 0x555f55dcbab8 <line:20:3, col:10> col:10 bits_p 'u32_t *'
| | `-FieldDecl 0x555f55dcbc28 <line:21:3, col:31> col:9 bits 'u32_t [2]'
| |-FieldDecl 0x555f55dcbcc0 <line:19:2> col:2 implicit 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| |-IndirectFieldDecl 0x555f55dcbd18 <line:20:10> col:10 implicit bits_p 'u32_t *'
| | |-Field 0x555f55dcbcc0 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x555f55dcbab8 'bits_p' 'u32_t *'
| |-IndirectFieldDecl 0x555f55dcbd68 <line:21:9> col:9 implicit bits 'u32_t [2]'
| | |-Field 0x555f55dcbcc0 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x555f55dcbc28 'bits' 'u32_t [2]'
| `-FieldDecl 0x555f55dcbdb8 <line:23:2, col:14> col:14 free_list 'sys_dlist_t':'struct _dnode'
|-RecordDecl 0x555f55dcbe50 <line:29:1, line:37:1> line:29:8 struct sys_mem_pool_base definition
| |-FieldDecl 0x555f55dcbf18 <line:30:2, col:8> col:8 buf 'void *'
| |-FieldDecl 0x555f55dcbf70 <line:31:2, col:9> col:9 max_sz 'size_t':'unsigned long'
| |-FieldDecl 0x555f55dcbff0 <line:32:2, col:8> col:8 n_max 'u16_t':'unsigned short'
| |-FieldDecl 0x555f55dcc048 <line:33:2, col:7> col:7 n_levels 'u8_t':'unsigned char'
| |-FieldDecl 0x555f55dcc0c0 <line:34:2, col:7> col:7 max_inline_level 's8_t':'signed char'
| |-FieldDecl 0x555f55dcc1c0 <line:35:2, col:27> col:27 levels 'struct sys_mem_pool_lvl *'
| `-FieldDecl 0x555f55dcc218 <line:36:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x555f55dcc410 <line:98:1, col:58> col:6 z_sys_mem_pool_base_init 'void (struct sys_mem_pool_base *)'
| `-ParmVarDecl 0x555f55dcc310 <col:31, col:57> col:57 p 'struct sys_mem_pool_base *'
|-FunctionDecl 0x555f55dd0258 <line:100:1, line:101:55> line:100:5 z_sys_mem_pool_block_alloc 'int (struct sys_mem_pool_base *, size_t, u32_t *, u32_t *, void **)'
| |-ParmVarDecl 0x555f55dcc4e0 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x555f55dcc550 <col:61, col:68> col:68 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55dcc5c0 <line:101:10, col:17> col:17 level_p 'u32_t *'
| |-ParmVarDecl 0x555f55dcc630 <col:26, col:33> col:33 block_p 'u32_t *'
| `-ParmVarDecl 0x555f55dcc6d0 <col:42, col:49> col:49 data_p 'void **'
|-FunctionDecl 0x555f55dd0560 <line:103:1, line:104:21> line:103:6 z_sys_mem_pool_block_free 'void (struct sys_mem_pool_base *, u32_t, u32_t)'
| |-ParmVarDecl 0x555f55dd0348 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x555f55dd03b8 <col:61, col:67> col:67 level 'u32_t':'unsigned int'
| `-ParmVarDecl 0x555f55dd0428 <line:104:10, col:16> col:16 block 'u32_t':'unsigned int'
|-RecordDecl 0x555f55dd0618 </vagrant/ext/zephyros/zephyr/include/kernel_structs.h:83:1, line:96:1> line:83:8 struct _ready_q definition
| `-FieldDecl 0x555f55dd06e8 <line:86:2, col:19> col:19 cache 'struct k_thread *'
|-TypedefDecl 0x555f55dd0780 <line:98:1, col:25> col:25 _ready_q_t 'struct _ready_q':'struct _ready_q'
| `-ElaboratedType 0x555f55dd0730 'struct _ready_q' sugar
|   `-RecordType 0x555f55dd06a0 'struct _ready_q'
|     `-Record 0x555f55dd0618 '_ready_q'
|-RecordDecl 0x555f55dd07d8 <line:100:1, line:134:1> line:100:8 struct _cpu definition
| |-FieldDecl 0x555f55dd0890 <line:102:2, col:8> col:8 nested 'u32_t':'unsigned int'
| |-FieldDecl 0x555f55dd08f0 <line:105:2, col:8> col:8 irq_stack 'char *'
| |-FieldDecl 0x555f55dd0960 <line:108:2, col:19> col:19 current 'struct k_thread *'
| |-FieldDecl 0x555f55dd09d0 <line:111:2, col:19> col:19 idle_thread 'struct k_thread *'
| `-FieldDecl 0x555f55dd0a28 <line:128:2, col:7> col:7 id 'u8_t':'unsigned char'
|-TypedefDecl 0x555f55dd0ac0 <line:136:1, col:21> col:21 _cpu_t 'struct _cpu':'struct _cpu'
| `-ElaboratedType 0x555f55dd0a70 'struct _cpu' sugar
|   `-RecordType 0x555f55dd0860 'struct _cpu'
|     `-Record 0x555f55dd07d8 '_cpu'
|-RecordDecl 0x555f55dd0b18 <line:138:1, line:191:1> line:138:8 struct z_kernel definition
| |-RecordDecl 0x555f55dd0bc0 <line:143:2, line:157:2> line:143:2 invalid union definition
| | |-FieldDecl 0x555f55dd0cb8 <line:144:3, col:15> col:15 invalid cpus 'struct _cpu':'struct _cpu'
| | |-RecordDecl 0x555f55dd0d00 <line:146:3, line:155:3> line:146:3 struct definition
| | | |-FieldDecl 0x555f55dd0dc0 <line:148:4, col:10> col:10 nested 'u32_t':'unsigned int'
| | | |-FieldDecl 0x555f55dd0e20 <line:151:4, col:10> col:10 irq_stack 'char *'
| | | `-FieldDecl 0x555f55dd0e90 <line:154:4, col:21> col:21 current 'struct k_thread *'
| | |-FieldDecl 0x555f55dd0f30 <line:146:3> col:3 implicit 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | |-IndirectFieldDecl 0x555f55dd0f88 <line:148:10> col:10 implicit nested 'u32_t':'unsigned int'
| | | |-Field 0x555f55dd0f30 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x555f55dd0dc0 'nested' 'u32_t':'unsigned int'
| | |-IndirectFieldDecl 0x555f55dd0fd8 <line:151:10> col:10 implicit irq_stack 'char *'
| | | |-Field 0x555f55dd0f30 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x555f55dd0e20 'irq_stack' 'char *'
| | `-IndirectFieldDecl 0x555f55dd1028 <line:154:21> col:21 implicit current 'struct k_thread *'
| |   |-Field 0x555f55dd0f30 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| |   `-Field 0x555f55dd0e90 'current' 'struct k_thread *'
| `-FieldDecl 0x555f55dd10f0 <line:172:2, col:18> col:18 ready_q 'struct _ready_q':'struct _ready_q'
|-TypedefDecl 0x555f55dd5530 <line:193:1, col:25> col:25 _kernel_t 'struct z_kernel':'struct z_kernel'
| `-ElaboratedType 0x555f55dd54e0 'struct z_kernel' sugar
|   `-RecordType 0x555f55dd0ba0 'struct z_kernel'
|     `-Record 0x555f55dd0b18 'z_kernel'
|-VarDecl 0x555f55dd55a8 <line:195:1, col:24> col:24 _kernel 'struct z_kernel':'struct z_kernel' extern
|-FunctionDecl 0x555f55dd5760 </vagrant/ext/zephyros/zephyr/include/kernel_version.h:47:1, col:41> col:14 sys_kernel_version_get 'u32_t (void)' extern
| `-FullComment 0x555f55ed34d0 <line:40:3, line:45:25>
|   |-ParagraphComment 0x555f55ed32c0 <line:40:3>
|   | `-TextComment 0x555f55ed3290 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed32e0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x555f55ed3340 <col:10, col:56>
|   |   `-TextComment 0x555f55ed3310 <col:10, col:56> Text=" Return the kernel version of the present build"
|   |-ParagraphComment 0x555f55ed33b0 <line:42:3, line:43:27>
|   | |-TextComment 0x555f55ed3360 <line:42:3, col:76> Text=" The kernel version is a four-byte value, whose format is described in the"
|   | `-TextComment 0x555f55ed3380 <line:43:3, col:27> Text=" file "kernel_version.h"."
|   |-ParagraphComment 0x555f55ed3400 <line:45:3>
|   | `-TextComment 0x555f55ed33d0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ed3420 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x555f55ed3480 <col:11, col:25>
|       `-TextComment 0x555f55ed3450 <col:11, col:25> Text=" kernel version"
|-FunctionDecl 0x555f55dd5948 </vagrant/ext/zephyros/zephyr/include/random/rand32.h:45:1, col:33> col:14 sys_rand32_get 'u32_t (void)' extern
| `-FullComment 0x555f55ed3820 <line:37:3, line:43:31>
|   |-ParagraphComment 0x555f55ed3570 <line:37:3>
|   | `-TextComment 0x555f55ed3540 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed3590 <col:4, line:38:20> Name="brief"
|   | `-ParagraphComment 0x555f55ed3610 <line:37:10, line:38:20>
|   |   |-TextComment 0x555f55ed35c0 <line:37:10, col:63> Text=" Return a 32-bit random value that should pass general"
|   |   `-TextComment 0x555f55ed35e0 <line:38:3, col:20> Text=" randomness tests."
|   |-ParagraphComment 0x555f55ed3660 <line:40:3>
|   | `-TextComment 0x555f55ed3630 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed3680 <col:4, line:41:23> Name="note"
|   | `-ParagraphComment 0x555f55ed3700 <line:40:9, line:41:23>
|   |   |-TextComment 0x555f55ed36b0 <line:40:9, col:68> Text=" The random value returned is not a cryptographically secure"
|   |   `-TextComment 0x555f55ed36d0 <line:41:3, col:23> Text=" random number value."
|   |-ParagraphComment 0x555f55ed3750 <line:43:3>
|   | `-TextComment 0x555f55ed3720 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ed3770 <col:4, col:31> Name="return"
|     `-ParagraphComment 0x555f55ed37d0 <col:11, col:31>
|       `-TextComment 0x555f55ed37a0 <col:11, col:31> Text=" 32-bit random value."
|-FunctionDecl 0x555f55dd5bb0 <line:57:1, col:47> col:13 sys_rand_get 'void (void *, size_t)' extern
| |-ParmVarDecl 0x555f55dd5a30 <col:26, col:32> col:32 dst 'void *'
| |-ParmVarDecl 0x555f55dd5aa0 <col:37, col:44> col:44 len 'size_t':'unsigned long'
| `-FullComment 0x555f55ed3cd0 <line:47:3, line:56:1>
|   |-ParagraphComment 0x555f55ed38c0 <line:47:3>
|   | `-TextComment 0x555f55ed3890 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed38e0 <col:4, line:48:33> Name="brief"
|   | `-ParagraphComment 0x555f55ed3960 <line:47:10, line:48:33>
|   |   |-TextComment 0x555f55ed3910 <line:47:10, col:73> Text=" Fill the destination buffer with random data values that should"
|   |   `-TextComment 0x555f55ed3930 <line:48:3, col:33> Text=" pass general randomness tests."
|   |-ParagraphComment 0x555f55ed39b0 <line:50:3>
|   | `-TextComment 0x555f55ed3980 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed39d0 <col:4, line:51:31> Name="note"
|   | `-ParagraphComment 0x555f55ed3a50 <line:50:9, line:51:31>
|   |   |-TextComment 0x555f55ed3a00 <line:50:9, col:72> Text=" The random values returned are not considered cryptographically"
|   |   `-TextComment 0x555f55ed3a20 <line:51:3, col:31> Text=" secure random number values."
|   |-ParagraphComment 0x555f55ed3aa0 <line:53:3>
|   | `-TextComment 0x555f55ed3a70 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ed3ac0 <col:4, line:54:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x555f55ed3b70 <line:53:20, line:54:3>
|   |   |-TextComment 0x555f55ed3b20 <line:53:20, col:64> Text=" destination buffer to fill with random data."
|   |   `-TextComment 0x555f55ed3b40 <line:54:3> Text=" "
|   |-ParamCommandComment 0x555f55ed3b90 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x555f55ed3c20 <col:14, col:45>
|   |   `-TextComment 0x555f55ed3bf0 <col:14, col:45> Text=" size of the destination buffer."
|   `-ParagraphComment 0x555f55ed3c70 <line:56:1>
|     `-TextComment 0x555f55ed3c40 <col:1> Text=" "
|-FunctionDecl 0x555f55dd5e28 <line:72:1, col:48> col:12 sys_csrand_get 'int (void *, size_t)' extern
| |-ParmVarDecl 0x555f55dd5ca0 <col:27, col:33> col:33 dst 'void *'
| |-ParmVarDecl 0x555f55dd5d10 <col:38, col:45> col:45 len 'size_t':'unsigned long'
| `-FullComment 0x555f55ed4260 <line:60:3, line:71:1>
|   |-ParagraphComment 0x555f55ed3d70 <line:60:3>
|   | `-TextComment 0x555f55ed3d40 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed3d90 <col:4, line:61:22> Name="brief"
|   | `-ParagraphComment 0x555f55ed3e10 <line:60:10, line:61:22>
|   |   |-TextComment 0x555f55ed3dc0 <line:60:10, col:67> Text=" Fill the destination buffer with cryptographically secure"
|   |   `-TextComment 0x555f55ed3de0 <line:61:3, col:22> Text=" random data values."
|   |-ParagraphComment 0x555f55ed3e60 <line:63:3>
|   | `-TextComment 0x555f55ed3e30 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed3e80 <col:4, line:64:42> Name="note"
|   | `-ParagraphComment 0x555f55ed3f00 <line:63:9, line:64:42>
|   |   |-TextComment 0x555f55ed3eb0 <line:63:9, col:75> Text=" If the random values requested do not need to be cryptographically"
|   |   `-TextComment 0x555f55ed3ed0 <line:64:3, col:42> Text=" secure then use sys_rand_get() instead."
|   |-ParagraphComment 0x555f55ed3f50 <line:66:3>
|   | `-TextComment 0x555f55ed3f20 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ed3f70 <col:4, line:67:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x555f55ed4020 <line:66:20, line:67:3>
|   |   |-TextComment 0x555f55ed3fd0 <line:66:20, col:47> Text=" destination buffer to fill."
|   |   `-TextComment 0x555f55ed3ff0 <line:67:3> Text=" "
|   |-ParamCommandComment 0x555f55ed4040 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x555f55ed40d0 <col:14, col:45>
|   |   `-TextComment 0x555f55ed40a0 <col:14, col:45> Text=" size of the destination buffer."
|   |-ParagraphComment 0x555f55ed4120 <line:69:3>
|   | `-TextComment 0x555f55ed40f0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed4140 <col:4, col:53> Name="return"
|   | `-ParagraphComment 0x555f55ed41a0 <col:11, col:53>
|   |   `-TextComment 0x555f55ed4170 <col:11, col:53> Text=" 0 if success, -EIO if entropy reseed error"
|   `-ParagraphComment 0x555f55ed41f0 <line:71:1>
|     `-TextComment 0x555f55ed41c0 <col:1> Text=" "
|-TypedefDecl 0x555f55df2350 </vagrant/ext/zephyros/zephyr/include/syscall.h:85:1, line:88:17> line:85:21 _k_syscall_handler_t 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| |-PointerType 0x555f55dd63c0 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| | `-ParenType 0x555f55dd6360 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' sugar
| |   `-FunctionProtoType 0x555f55dd62f0 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' cdecl
| |     |-TypedefType 0x555f55dd5f40 'uintptr_t' sugar
| |     | |-Typedef 0x555f55cead28 'uintptr_t'
| |     | `-BuiltinType 0x555f55ca0850 'unsigned long'
| |     |-TypedefType 0x555f55dd5f40 'uintptr_t' sugar
| |     | |-Typedef 0x555f55cead28 'uintptr_t'
| |     | `-BuiltinType 0x555f55ca0850 'unsigned long'
| |     |-TypedefType 0x555f55dd5f40 'uintptr_t' sugar
| |     | |-Typedef 0x555f55cead28 'uintptr_t'
| |     | `-BuiltinType 0x555f55ca0850 'unsigned long'
| |     |-TypedefType 0x555f55dd5f40 'uintptr_t' sugar
| |     | |-Typedef 0x555f55cead28 'uintptr_t'
| |     | `-BuiltinType 0x555f55ca0850 'unsigned long'
| |     |-TypedefType 0x555f55dd5f40 'uintptr_t' sugar
| |     | |-Typedef 0x555f55cead28 'uintptr_t'
| |     | `-BuiltinType 0x555f55ca0850 'unsigned long'
| |     |-TypedefType 0x555f55dd5f40 'uintptr_t' sugar
| |     | |-Typedef 0x555f55cead28 'uintptr_t'
| |     | `-BuiltinType 0x555f55ca0850 'unsigned long'
| |     |-TypedefType 0x555f55dd5f40 'uintptr_t' sugar
| |     | |-Typedef 0x555f55cead28 'uintptr_t'
| |     | `-BuiltinType 0x555f55ca0850 'unsigned long'
| |     `-PointerType 0x555f55ca0b90 'void *'
| |       `-BuiltinType 0x555f55ca06f0 'void'
| `-FullComment 0x555f55ed5f30 <line:50:3, line:84:1>
|   |-ParagraphComment 0x555f55ed4300 <line:50:3>
|   | `-TextComment 0x555f55ed42d0 <col:3> Text=" "
|   |-VerbatimLineComment 0x555f55ed4320 <col:4, col:33> Text=" _k_syscall_handler_t"
|   |-ParagraphComment 0x555f55ed4390 <line:51:3>
|   | `-TextComment 0x555f55ed4360 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed43b0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55ed4410 <col:10, col:43>
|   |   `-TextComment 0x555f55ed43e0 <col:10, col:43> Text=" System call handler function type"
|   |-ParagraphComment 0x555f55ed4480 <line:53:3, line:54:67>
|   | |-TextComment 0x555f55ed4430 <line:53:3, col:70> Text=" These are kernel-side skeleton functions for system calls. They are"
|   | `-TextComment 0x555f55ed4450 <line:54:3, col:67> Text=" necessary to sanitize the arguments passed into the system call:"
|   |-ParagraphComment 0x555f55ed4660 <line:56:3, line:66:41>
|   | |-TextComment 0x555f55ed44a0 <line:56:3, col:78> Text=" - Any kernel object or device pointers are validated with _SYSCALL_IS_OBJ()"
|   | |-TextComment 0x555f55ed44c0 <line:57:3, col:79> Text=" - Any memory buffers passed in are checked to ensure that the calling thread"
|   | |-TextComment 0x555f55ed44e0 <line:58:3, col:32> Text="   actually has access to them"
|   | |-TextComment 0x555f55ed4500 <line:59:3, col:69> Text=" - Many kernel calls do no sanity checking of parameters other than"
|   | |-TextComment 0x555f55ed4520 <line:60:3, col:69> Text="   assertions. The handler must check all of these conditions using"
|   | |-TextComment 0x555f55ed4540 <line:61:3, col:22> Text="   _SYSCALL_ASSERT()"
|   | |-TextComment 0x555f55ed4560 <line:62:3, col:78> Text=" - If the system call has more than 6 arguments, then arg6 will be a pointer"
|   | |-TextComment 0x555f55ed4580 <line:63:3, col:74> Text="   to some struct containing arguments 6+. The struct itself needs to be"
|   | |-TextComment 0x555f55ed45a0 <line:64:3, col:78> Text="   validated like any other buffer passed in from userspace, and its members"
|   | |-TextComment 0x555f55ed45c0 <line:65:3, col:70> Text="   individually validated (if necessary) and then passed to the real"
|   | `-TextComment 0x555f55ed45e0 <line:66:3, col:41> Text="   implementation like normal arguments"
|   |-ParagraphComment 0x555f55ed46d0 <line:68:3, line:69:70>
|   | |-TextComment 0x555f55ed4680 <line:68:3, col:75> Text=" Even if the system call implementation has no return value, these always"
|   | `-TextComment 0x555f55ed46a0 <line:69:3, col:70> Text=" return something, even 0, to prevent register leakage to userspace."
|   |-ParagraphComment 0x555f55ed4720 <line:71:3, col:80>
|   | `-TextComment 0x555f55ed46f0 <col:3, col:80> Text=" Once everything has been validated, the real implementation will be executed."
|   |-ParagraphComment 0x555f55ed4770 <line:73:3>
|   | `-TextComment 0x555f55ed4740 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ed4790 <col:4, line:74:3> [in] implicitly Param="arg1" ParamIndex=0
|   | `-ParagraphComment 0x555f55ed4840 <line:73:15, line:74:3>
|   |   |-TextComment 0x555f55ed47f0 <line:73:15, col:37> Text=" system call argument 1"
|   |   `-TextComment 0x555f55ed4810 <line:74:3> Text=" "
|   |-ParamCommandComment 0x555f55ed4860 <col:4, line:75:3> [in] implicitly Param="arg2" ParamIndex=1
|   | `-ParagraphComment 0x555f55ed4910 <line:74:15, line:75:3>
|   |   |-TextComment 0x555f55ed48c0 <line:74:15, col:37> Text=" system call argument 2"
|   |   `-TextComment 0x555f55ed48e0 <line:75:3> Text=" "
|   |-ParamCommandComment 0x555f55ed4930 <col:4, line:76:3> [in] implicitly Param="arg3" ParamIndex=2
|   | `-ParagraphComment 0x555f55ed49e0 <line:75:15, line:76:3>
|   |   |-TextComment 0x555f55ed4990 <line:75:15, col:37> Text=" system call argument 3"
|   |   `-TextComment 0x555f55ed49b0 <line:76:3> Text=" "
|   |-ParamCommandComment 0x555f55ed4a00 <col:4, line:77:3> [in] implicitly Param="arg4" ParamIndex=3
|   | `-ParagraphComment 0x555f55ed4ab0 <line:76:15, line:77:3>
|   |   |-TextComment 0x555f55ed4a60 <line:76:15, col:37> Text=" system call argument 4"
|   |   `-TextComment 0x555f55ed4a80 <line:77:3> Text=" "
|   |-ParamCommandComment 0x555f55ed4ad0 <col:4, line:78:3> [in] implicitly Param="arg5" ParamIndex=4
|   | `-ParagraphComment 0x555f55ed4b80 <line:77:15, line:78:3>
|   |   |-TextComment 0x555f55ed4b30 <line:77:15, col:37> Text=" system call argument 5"
|   |   `-TextComment 0x555f55ed4b50 <line:78:3> Text=" "
|   |-ParamCommandComment 0x555f55ed5be0 <col:4, line:79:3> [in] implicitly Param="arg6" ParamIndex=5
|   | `-ParagraphComment 0x555f55ed5c90 <line:78:15, line:79:3>
|   |   |-TextComment 0x555f55ed5c40 <line:78:15, col:37> Text=" system call argument 6"
|   |   `-TextComment 0x555f55ed5c60 <line:79:3> Text=" "
|   |-ParamCommandComment 0x555f55ed5cb0 <col:4, line:81:3> [in] implicitly Param="ssf" ParamIndex=6
|   | `-ParagraphComment 0x555f55ed5d90 <line:79:14, line:81:3>
|   |   |-TextComment 0x555f55ed5d10 <line:79:14, col:75> Text=" System call stack frame pointer. Used to generate kernel oops"
|   |   |-TextComment 0x555f55ed5d30 <line:80:3, col:70> Text="            via _arch_syscall_oops_at(). Contents are arch-specific."
|   |   `-TextComment 0x555f55ed5d50 <line:81:3> Text=" "
|   |-BlockCommandComment 0x555f55ed5db0 <col:4, line:82:22> Name="return"
|   | `-ParagraphComment 0x555f55ed5e30 <line:81:11, line:82:22>
|   |   |-TextComment 0x555f55ed5de0 <line:81:11, col:75> Text=" system call return value, or 0 if the system call implementation"
|   |   `-TextComment 0x555f55ed5e00 <line:82:3, col:22> Text="         return void"
|   `-ParagraphComment 0x555f55ed5e80 <line:84:1>
|     `-TextComment 0x555f55ed5e50 <col:1> Text=" "
|-FunctionDecl 0x555f55df2470 <line:93:1, line:106:1> line:93:27 z_syscall_trap 'bool (void)' static inline
| |-CompoundStmt 0x555f55df2698 <line:94:1, line:106:1>
| | |-DeclStmt 0x555f55df2600 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/syscall.h:95:18>
| | | `-VarDecl 0x555f55df2568 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, line:15:16> /vagrant/ext/zephyros/zephyr/include/syscall.h:95:7 used ret 'bool' cinit
| | |   `-ImplicitCastExpr 0x555f55df25e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
| | |     `-IntegerLiteral 0x555f55df25c8 <col:16> 'int' 0
| | `-ReturnStmt 0x555f55df2658 </vagrant/ext/zephyros/zephyr/include/syscall.h:105:2, col:9>
| |   `-ImplicitCastExpr 0x555f55df2640 <col:9> 'bool' <LValueToRValue>
| |     `-DeclRefExpr 0x555f55df2618 <col:9> 'bool' lvalue Var 0x555f55df2568 'ret' 'bool'
| `-AlwaysInlineAttr 0x555f55df2510 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x555f55df2748 </vagrant/ext/zephyros/zephyr/include/syscall.h:113:1, line:120:1> line:113:20 _is_user_context 'bool (void)' static inline
| |-CompoundStmt 0x555f55df2838 <line:114:1, line:120:1>
| | `-ReturnStmt 0x555f55df2820 <line:118:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-ImplicitCastExpr 0x555f55df2808 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x555f55df27e8 <col:16> 'int' 0
| `-FullComment 0x555f55ed60e0 </vagrant/ext/zephyros/zephyr/include/syscall.h:109:3, line:111:69>
|   |-ParagraphComment 0x555f55ed5fd0 <line:109:3, col:53>
|   | `-TextComment 0x555f55ed5fa0 <col:3, col:53> Text=" Indicate whether the CPU is currently in user mode"
|   |-ParagraphComment 0x555f55ed6020 <line:111:3>
|   | `-TextComment 0x555f55ed5ff0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ed6040 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x555f55ed60a0 <col:11, col:69>
|       `-TextComment 0x555f55ed6070 <col:11, col:69> Text=" true if the CPU is currently running with user permissions"
|-TypedefDecl 0x555f55df2880 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h:40:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x555f55df2850 '__builtin_va_list' sugar
|   |-Typedef 0x555f55ca12b8 '__builtin_va_list'
|   `-ConstantArrayType 0x555f55ca1260 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x555f55ca10d0 'struct __va_list_tag'
|       `-Record 0x555f55ca1048 '__va_list_tag'
|-TypedefDecl 0x555f55df2910 <line:99:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x555f55df28e0 '__gnuc_va_list' sugar
|   |-Typedef 0x555f55df2880 '__gnuc_va_list'
|   `-TypedefType 0x555f55df2850 '__builtin_va_list' sugar
|     |-Typedef 0x555f55ca12b8 '__builtin_va_list'
|     `-ConstantArrayType 0x555f55ca1260 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x555f55ca10d0 'struct __va_list_tag'
|         `-Record 0x555f55ca1048 '__va_list_tag'
|-FunctionDecl 0x555f55df2ac0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:51:1, line:54:1> line:51:40 used printk 'void (const char *, ...)' static inline
| |-ParmVarDecl 0x555f55df2a00 <col:47, col:59> col:59 used fmt 'const char *'
| |-CompoundStmt 0x555f55df2c88 <line:52:1, line:54:1>
| | `-CStyleCastExpr 0x555f55df2c60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x555f55df2c48 <col:29, col:31> 'const char *' <LValueToRValue>
| |     `-ParenExpr 0x555f55df2c28 <col:29, col:31> 'const char *' lvalue
| |       `-DeclRefExpr 0x555f55df2bc0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:53:13> 'const char *' lvalue ParmVar 0x555f55df2a00 'fmt' 'const char *'
| `-FormatAttr 0x555f55df2b68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 2
|-FunctionDecl 0x555f55df2f10 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:56:1, line:60:1> line:56:40 vprintk 'void (const char *, struct __va_list_tag *)' static inline
| |-ParmVarDecl 0x555f55df2d08 <col:48, col:60> col:60 used fmt 'const char *'
| |-ParmVarDecl 0x555f55df2e00 <col:65, col:73> col:73 used ap 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x555f55df31a8 <line:57:1, line:60:1>
| | |-CStyleCastExpr 0x555f55df30b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x555f55df30a0 <col:29, col:31> 'const char *' <LValueToRValue>
| | |   `-ParenExpr 0x555f55df3080 <col:29, col:31> 'const char *' lvalue
| | |     `-DeclRefExpr 0x555f55df3018 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:58:13> 'const char *' lvalue ParmVar 0x555f55df2d08 'fmt' 'const char *'
| | `-CStyleCastExpr 0x555f55df3180 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x555f55df3168 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue>
| |     `-ParenExpr 0x555f55df3148 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue
| |       `-DeclRefExpr 0x555f55df30e0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:59:13> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x555f55df2e00 'ap' 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x555f55df2fc0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 0
|-FunctionDecl 0x555f55dfaeb8 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:63:1, line:64:26> line:63:32 snprintk 'int (char *, size_t, const char *, ...)' extern
| |-ParmVarDecl 0x555f55df3230 <col:41, col:47> col:47 str 'char *'
| |-ParmVarDecl 0x555f55df32a0 <col:52, col:59> col:59 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55dfad80 <line:64:6, col:18> col:18 fmt 'const char *'
| `-FormatAttr 0x555f55dfaf70 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 4
|-FunctionDecl 0x555f55dfb2d8 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:65:1, line:66:35> line:65:32 vsnprintk 'int (char *, size_t, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x555f55dfb030 <col:42, col:48> col:48 str 'char *'
| |-ParmVarDecl 0x555f55dfb0a0 <col:53, col:60> col:60 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55dfb118 <line:66:8, col:20> col:20 fmt 'const char *'
| |-ParmVarDecl 0x555f55dfb188 <col:25, col:33> col:33 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x555f55dfb398 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x555f55dfb8e0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:68:1, line:69:34> line:68:33 z_vprintk 'void (int (*)(int, void *), void *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x555f55dfb640 <col:43, col:68> col:49 out 'int (*)(int, void *)'
| |-ParmVarDecl 0x555f55dfb6b8 <col:71, col:77> col:77 ctx 'void *'
| |-ParmVarDecl 0x555f55dfb730 <line:69:7, col:19> col:19 fmt 'const char *'
| |-ParmVarDecl 0x555f55dfb7a0 <col:24, col:32> col:32 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x555f55dfb9a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-RecordDecl 0x555f55dfba58 prev 0x555f55d8e788 </vagrant/ext/zephyros/zephyr/include/sys/arch_interface.h:41:1, col:8> col:8 struct k_thread
|-RecordDecl 0x555f55dfbae0 <line:42:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x555f55dfbb90 <line:44:9, col:16> col:16 struct _k_thread_stack_element
|-TypedefDecl 0x555f55dfbc90 <col:1, col:40> col:40 referenced k_thread_stack_t 'struct _k_thread_stack_element':'struct _k_thread_stack_element'
| `-ElaboratedType 0x555f55dfbc40 'struct _k_thread_stack_element' sugar
|   `-RecordType 0x555f55dfbc20 'struct _k_thread_stack_element'
|     `-Record 0x555f55e3e920 '_k_thread_stack_element'
|-TypedefDecl 0x555f55dfe190 <line:46:1, col:62> col:16 referenced k_thread_entry_t 'void (*)(void *, void *, void *)'
| `-PointerType 0x555f55dfe120 'void (*)(void *, void *, void *)'
|   `-ParenType 0x555f55dfe0c0 'void (void *, void *, void *)' sugar
|     `-FunctionProtoType 0x555f55dfe070 'void (void *, void *, void *)' cdecl
|       |-BuiltinType 0x555f55ca06f0 'void'
|       |-PointerType 0x555f55ca0b90 'void *'
|       | `-BuiltinType 0x555f55ca06f0 'void'
|       |-PointerType 0x555f55ca0b90 'void *'
|       | `-BuiltinType 0x555f55ca06f0 'void'
|       `-PointerType 0x555f55ca0b90 'void *'
|         `-BuiltinType 0x555f55ca06f0 'void'
|-FunctionDecl 0x555f55dfe2d8 <line:59:1, col:45> col:21 used arch_k_cycle_get_32 'u32_t (void)' static inline
| `-FullComment 0x555f55ed6290 <line:55:3, line:57:24>
|   |-ParagraphComment 0x555f55ed6180 <line:55:3, col:70>
|   | `-TextComment 0x555f55ed6150 <col:3, col:70> Text=" Obtain the current cycle count, in units that are hardware-specific"
|   |-ParagraphComment 0x555f55ed61d0 <line:57:3>
|   | `-TextComment 0x555f55ed61a0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ed61f0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x555f55ed6250 <col:8, col:24>
|       `-TextComment 0x555f55ed6220 <col:8, col:24> Text=" k_cycle_get_32()"
|-FunctionDecl 0x555f55dfe650 <line:132:1, col:24> col:6 used arch_cpu_idle 'void (void)'
| `-FullComment 0x555f55ed6610 <line:120:3, line:130:20>
|   |-ParagraphComment 0x555f55ed6330 <line:120:3>
|   | `-TextComment 0x555f55ed6300 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed6350 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x555f55ed63b0 <col:10, col:33>
|   |   `-TextComment 0x555f55ed6380 <col:10, col:33> Text=" Power save idle routine"
|   |-ParagraphComment 0x555f55ed6450 <line:122:3, line:124:47>
|   | |-TextComment 0x555f55ed63d0 <line:122:3, col:74> Text=" This function will be called by the kernel idle loop or possibly within"
|   | |-TextComment 0x555f55ed63f0 <line:123:3, col:68> Text=" an implementation of z_sys_power_save_idle in the kernel when the"
|   | `-TextComment 0x555f55ed6410 <line:124:3, col:47> Text=" '_sys_power_save_flag' variable is non-zero."
|   |-ParagraphComment 0x555f55ed64f0 <line:126:3, line:128:35>
|   | |-TextComment 0x555f55ed6470 <line:126:3, col:72> Text=" Architectures that do not implement power management instructions may"
|   | |-TextComment 0x555f55ed6490 <line:127:3, col:69> Text=" immediately return, otherwise a power-saving instruction should be"
|   | `-TextComment 0x555f55ed64b0 <line:128:3, col:35> Text=" issued to wait for an interrupt."
|   |-ParagraphComment 0x555f55ed6540 <line:130:3>
|   | `-TextComment 0x555f55ed6510 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ed6560 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x555f55ed65c0 <col:8, col:20>
|       `-TextComment 0x555f55ed6590 <col:8, col:20> Text=" k_cpu_idle()"
|-FunctionDecl 0x555f55dfe7f0 <line:152:1, col:43> col:6 used arch_cpu_atomic_idle 'void (unsigned int)'
| |-ParmVarDecl 0x555f55dfe730 <col:27, col:40> col:40 key 'unsigned int'
| `-FullComment 0x555f55ed6b20 <line:135:3, line:150:76>
|   |-ParagraphComment 0x555f55ed66b0 <line:135:3>
|   | `-TextComment 0x555f55ed6680 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed66d0 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x555f55ed6730 <col:10, col:66>
|   |   `-TextComment 0x555f55ed6700 <col:10, col:66> Text=" Atomically re-enable interrupts and enter low power mode"
|   |-ParagraphComment 0x555f55ed6780 <line:137:3, col:62>
|   | `-TextComment 0x555f55ed6750 <col:3, col:62> Text=" The requirements for arch_cpu_atomic_idle() are as follows:"
|   |-ParagraphComment 0x555f55ed6870 <line:139:3, line:143:44>
|   | |-TextComment 0x555f55ed67a0 <line:139:3, col:67> Text=" -# Enabling interrupts and entering a low-power mode needs to be"
|   | |-TextComment 0x555f55ed67c0 <line:140:3, col:73> Text="    atomic, i.e. there should be no period of time where interrupts are"
|   | |-TextComment 0x555f55ed67e0 <line:141:3, col:77> Text="    enabled before the processor enters a low-power mode.  See the comments"
|   | |-TextComment 0x555f55ed6800 <line:142:3, col:62> Text="    in k_lifo_get(), for example, of the race condition that"
|   | `-TextComment 0x555f55ed6820 <line:143:3, col:44> Text="    occurs if this requirement is not met."
|   |-ParagraphComment 0x555f55ed68e0 <line:145:3, line:146:65>
|   | |-TextComment 0x555f55ed6890 <line:145:3, col:74> Text=" -# After waking up from the low-power mode, the interrupt lockout state"
|   | `-TextComment 0x555f55ed68b0 <line:146:3, col:65> Text="    must be restored as indicated in the 'key' input parameter."
|   |-ParagraphComment 0x555f55ed6930 <line:148:3>
|   | `-TextComment 0x555f55ed6900 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed6950 <col:4, col:27> Name="see"
|   | `-ParagraphComment 0x555f55ed69b0 <col:8, col:27>
|   |   `-TextComment 0x555f55ed6980 <col:8, col:27> Text=" k_cpu_atomic_idle()"
|   |-ParagraphComment 0x555f55ed6a00 <line:150:3>
|   | `-TextComment 0x555f55ed69d0 <col:3> Text=" "
|   `-ParamCommandComment 0x555f55ed6a20 <col:4, col:76> [in] implicitly Param="key" ParamIndex=0
|     `-ParagraphComment 0x555f55ed6ab0 <col:14, col:76>
|       `-TextComment 0x555f55ed6a80 <col:14, col:76> Text=" Lockout key returned by previous invocation of arch_irq_lock()"
|-TypedefDecl 0x555f55dfeae0 <line:167:1, col:57> col:30 referenced arch_cpustart_t 'void (*)(void *) __attribute__((noreturn))'
| |-PointerType 0x555f55dfea80 'void (*)(void *) __attribute__((noreturn))'
| | `-ParenType 0x555f55dfea20 'void (void *) __attribute__((noreturn))' sugar
| |   `-FunctionProtoType 0x555f55dfe9e0 'void (void *) __attribute__((noreturn))' noreturn cdecl
| |     |-BuiltinType 0x555f55ca06f0 'void'
| |     `-PointerType 0x555f55ca0b90 'void *'
| |       `-BuiltinType 0x555f55ca06f0 'void'
| `-FullComment 0x555f55ed6d00 <line:163:3, line:165:52>
|   |-ParagraphComment 0x555f55ed6bc0 <line:163:3, col:25>
|   | `-TextComment 0x555f55ed6b90 <col:3, col:25> Text=" Per-cpu entry function"
|   |-ParagraphComment 0x555f55ed6c10 <line:165:3>
|   | `-TextComment 0x555f55ed6be0 <col:3> Text=" "
|   `-ParamCommandComment 0x555f55ed6c30 <col:4, col:52> [in] implicitly Param="context"
|     `-ParagraphComment 0x555f55ed6cc0 <col:18, col:52>
|       `-TextComment 0x555f55ed6c90 <col:18, col:52> Text=" parameter, implementation specific"
|-FunctionDecl 0x555f55dfffa0 <line:189:1, line:190:36> line:189:6 arch_start_cpu 'void (int, k_thread_stack_t *, int, arch_cpustart_t, void *)'
| |-ParmVarDecl 0x555f55dfeb80 <col:21, col:25> col:25 cpu_num 'int'
| |-ParmVarDecl 0x555f55dfec68 <col:34, col:52> col:52 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x555f55dfece0 <col:59, col:63> col:63 sz 'int'
| |-ParmVarDecl 0x555f55dfed70 <line:190:7, col:23> col:23 fn 'arch_cpustart_t':'void (*)(void *) __attribute__((noreturn))'
| |-ParmVarDecl 0x555f55dfede8 <col:27, col:33> col:33 arg 'void *'
| `-FullComment 0x555f55ed7480 <line:170:3, line:187:51>
|   |-ParagraphComment 0x555f55ed6da0 <line:170:3>
|   | `-TextComment 0x555f55ed6d70 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ed6dc0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x555f55ed6e20 <col:10, col:53>
|   |   `-TextComment 0x555f55ed6df0 <col:10, col:53> Text=" Start a numbered CPU on a MP-capable system"
|   |-ParagraphComment 0x555f55ed6f10 <line:172:3, line:176:68>
|   | |-TextComment 0x555f55ed6e40 <line:172:3, col:77> Text=" This starts and initializes a specific CPU.  The main thread on startup is"
|   | |-TextComment 0x555f55ed6e60 <line:173:3, col:78> Text=" running on CPU zero, other processors are numbered sequentially.  On return"
|   | |-TextComment 0x555f55ed6e80 <line:174:3, col:78> Text=" from this function, the CPU is known to have begun operating and will enter"
|   | |-TextComment 0x555f55ed6ea0 <line:175:3, col:79> Text=" the provided function.  Its interrupts will be initialized but disabled such"
|   | `-TextComment 0x555f55ed6ec0 <line:176:3, col:68> Text=" that irq_unlock() with the provided key will work to enable them."
|   |-ParagraphComment 0x555f55ed6fd0 <line:178:3, line:181:41>
|   | |-TextComment 0x555f55ed6f30 <line:178:3, col:67> Text=" Normally, in SMP mode this function will be called by the kernel"
|   | |-TextComment 0x555f55ed6f50 <line:179:3, col:79> Text=" initialization and should not be used as a user API.  But it is defined here"
|   | |-TextComment 0x555f55ed6f70 <line:180:3, col:76> Text=" for special-purpose apps which want Zephyr running on one core and to use"
|   | `-TextComment 0x555f55ed6f90 <line:181:3, col:41> Text=" others for design-specific processing."
|   |-ParagraphComment 0x555f55ed7020 <line:183:3>
|   | `-TextComment 0x555f55ed6ff0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ed7040 <col:4, line:184:3> [in] implicitly Param="cpu_num" ParamIndex=0
|   | `-ParagraphComment 0x555f55ed70f0 <line:183:18, line:184:3>
|   |   |-TextComment 0x555f55ed70a0 <line:183:18, col:43> Text=" Integer number of the CPU"
|   |   `-TextComment 0x555f55ed70c0 <line:184:3> Text=" "
|   |-ParamCommandComment 0x555f55ed7110 <col:4, line:185:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x555f55ed71c0 <line:184:16, line:185:3>
|   |   |-TextComment 0x555f55ed7170 <line:184:16, col:40> Text=" Stack memory for the CPU"
|   |   `-TextComment 0x555f55ed7190 <line:185:3> Text=" "
|   |-ParamCommandComment 0x555f55ed71e0 <col:4, line:186:3> [in] implicitly Param="sz" ParamIndex=2
|   | `-ParagraphComment 0x555f55ed7290 <line:185:13, line:186:3>
|   |   |-TextComment 0x555f55ed7240 <line:185:13, col:40> Text=" Stack buffer size, in bytes"
|   |   `-TextComment 0x555f55ed7260 <line:186:3> Text=" "
|   |-ParamCommandComment 0x555f55ed72b0 <col:4, line:187:3> [in] implicitly Param="fn" ParamIndex=3
|   | `-ParagraphComment 0x555f55ed7360 <line:186:13, line:187:3>
|   |   |-TextComment 0x555f55ed7310 <line:186:13, col:50> Text=" Function to begin running on the CPU."
|   |   `-TextComment 0x555f55ed7330 <line:187:3> Text=" "
|   `-ParamCommandComment 0x555f55ed7380 <col:4, col:51> [in] implicitly Param="arg" ParamIndex=4
|     `-ParagraphComment 0x555f55ed7410 <col:14, col:51>
|       `-TextComment 0x555f55ed73e0 <col:14, col:51> Text=" Untyped argument to be passed to "fn""
|-FunctionDecl 0x555f55e00190 <line:204:1, col:46> col:28 used arch_irq_lock 'unsigned int (void)' static inline
| `-FullComment 0x555f55ed7630 <line:200:3, line:202:18>
|   |-ParagraphComment 0x555f55ed7520 <line:200:3, col:37>
|   | `-TextComment 0x555f55ed74f0 <col:3, col:37> Text=" Lock interrupts on the current CPU"
|   |-ParagraphComment 0x555f55ed7570 <line:202:3>
|   | `-TextComment 0x555f55ed7540 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ed7590 <col:4, col:18> Name="see"
|     `-ParagraphComment 0x555f55ed75f0 <col:8, col:18>
|       `-TextComment 0x555f55ed75c0 <col:8, col:18> Text=" irq_lock()"
|-FunctionDecl 0x555f55e002f8 <line:211:1, col:52> col:20 used arch_irq_unlock 'void (unsigned int)' static inline
| |-ParmVarDecl 0x555f55e00270 <col:36, col:49> col:49 key 'unsigned int'
| `-FullComment 0x555f55ed77e0 <line:207:3, line:209:20>
|   |-ParagraphComment 0x555f55ed76d0 <line:207:3, col:39>
|   | `-TextComment 0x555f55ed76a0 <col:3, col:39> Text=" Unlock interrupts on the current CPU"
|   |-ParagraphComment 0x555f55ed7720 <line:209:3>
|   | `-TextComment 0x555f55ed76f0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ed7740 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x555f55ed77a0 <col:8, col:20>
|       `-TextComment 0x555f55ed7770 <col:8, col:20> Text=" irq_unlock()"
|-FunctionDecl 0x555f55e00468 <line:220:1, col:54> col:20 arch_irq_unlocked 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x555f55e003e0 <col:38, col:51> col:51 key 'unsigned int'
| `-FullComment 0x555f55ed7a80 <line:214:3, line:218:39>
|   |-ParagraphComment 0x555f55ed7880 <line:214:3, col:68>
|   | `-TextComment 0x555f55ed7850 <col:3, col:68> Text=" Test if calling arch_irq_unlock() with this key would unlock irqs"
|   |-ParagraphComment 0x555f55ed78d0 <line:216:3>
|   | `-TextComment 0x555f55ed78a0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ed78f0 <col:4, line:217:3> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x555f55ed79a0 <line:216:14, line:217:3>
|   |   |-TextComment 0x555f55ed7950 <line:216:14, col:47> Text=" value returned by arch_irq_lock()"
|   |   `-TextComment 0x555f55ed7970 <line:217:3> Text=" "
|   `-BlockCommandComment 0x555f55ed79c0 <col:4, line:218:39> Name="return"
|     `-ParagraphComment 0x555f55ed7a40 <line:217:11, line:218:39>
|       |-TextComment 0x555f55ed79f0 <line:217:11, col:72> Text=" true if interrupts were unlocked prior to the arch_irq_lock()"
|       `-TextComment 0x555f55ed7a10 <line:218:3, col:39> Text=" call that produced the key argument."
|-FunctionDecl 0x555f55e005d8 <line:227:1, col:39> col:6 arch_irq_disable 'void (unsigned int)'
| |-ParmVarDecl 0x555f55e00550 <col:23, col:36> col:36 irq 'unsigned int'
| `-FullComment 0x555f55ebcb30 <line:223:3, line:225:21>
|   |-ParagraphComment 0x555f55ed7b20 <line:223:3, col:39>
|   | `-TextComment 0x555f55ed7af0 <col:3, col:39> Text=" Disable the specified interrupt line"
|   |-ParagraphComment 0x555f55ed7b70 <line:225:3>
|   | `-TextComment 0x555f55ed7b40 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ed7b90 <col:4, col:21> Name="see"
|     `-ParagraphComment 0x555f55ebcaf0 <col:8, col:21>
|       `-TextComment 0x555f55ed7bc0 <col:8, col:21> Text=" irq_disable()"
|-FunctionDecl 0x555f55e00748 <line:234:1, col:38> col:6 arch_irq_enable 'void (unsigned int)'
| |-ParmVarDecl 0x555f55e006c0 <col:22, col:35> col:35 irq 'unsigned int'
| `-FullComment 0x555f55ebcce0 <line:230:3, line:232:20>
|   |-ParagraphComment 0x555f55ebcbd0 <line:230:3, col:38>
|   | `-TextComment 0x555f55ebcba0 <col:3, col:38> Text=" Enable the specified interrupt line"
|   |-ParagraphComment 0x555f55ebcc20 <line:232:3>
|   | `-TextComment 0x555f55ebcbf0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ebcc40 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x555f55ebcca0 <col:8, col:20>
|       `-TextComment 0x555f55ebcc70 <col:8, col:20> Text=" irq_enable()"
|-FunctionDecl 0x555f55e008f8 <line:241:1, col:41> col:5 arch_irq_is_enabled 'int (unsigned int)'
| |-ParmVarDecl 0x555f55e00830 <col:25, col:38> col:38 irq 'unsigned int'
| `-FullComment 0x555f55ebce90 <line:237:3, line:239:24>
|   |-ParagraphComment 0x555f55ebcd80 <line:237:3, col:39>
|   | `-TextComment 0x555f55ebcd50 <col:3, col:39> Text=" Test if an interrupt line is enabled"
|   |-ParagraphComment 0x555f55ebcdd0 <line:239:3>
|   | `-TextComment 0x555f55ebcda0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ebcdf0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x555f55ebce50 <col:8, col:24>
|       `-TextComment 0x555f55ebce20 <col:8, col:24> Text=" irq_is_enabled()"
|-FunctionDecl 0x555f55e00e48 <line:254:1, line:256:37> line:254:5 used arch_irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |-ParmVarDecl 0x555f55e009e0 <col:30, col:43> col:43 irq 'unsigned int'
| |-ParmVarDecl 0x555f55e00a58 <col:48, col:61> col:61 priority 'unsigned int'
| |-ParmVarDecl 0x555f55e00bf0 <line:255:9, col:40> col:16 routine 'void (*)(void *)'
| |-ParmVarDecl 0x555f55e00c68 <line:256:9, col:15> col:15 parameter 'void *'
| |-ParmVarDecl 0x555f55e00cd8 <col:26, col:32> col:32 flags 'u32_t':'unsigned int'
| `-FullComment 0x555f55ebd4b0 <line:244:3, line:252:48>
|   |-ParagraphComment 0x555f55ebcf30 <line:244:3, col:53>
|   | `-TextComment 0x555f55ebcf00 <col:3, col:53> Text=" Arch-specific hook to install a dynamic interrupt."
|   |-ParagraphComment 0x555f55ebcf80 <line:246:3>
|   | `-TextComment 0x555f55ebcf50 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ebcfa0 <col:4, line:247:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x555f55ebd050 <line:246:14, line:247:3>
|   |   |-TextComment 0x555f55ebd000 <line:246:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x555f55ebd020 <line:247:3> Text=" "
|   |-ParamCommandComment 0x555f55ebd070 <col:4, line:248:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x555f55ebd120 <line:247:19, line:248:3>
|   |   |-TextComment 0x555f55ebd0d0 <line:247:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x555f55ebd0f0 <line:248:3> Text=" "
|   |-ParamCommandComment 0x555f55ebd140 <col:4, line:249:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x555f55ebd1f0 <line:248:18, line:249:3>
|   |   |-TextComment 0x555f55ebd1a0 <line:248:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x555f55ebd1c0 <line:249:3> Text=" "
|   |-ParamCommandComment 0x555f55ebd210 <col:4, line:250:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x555f55ebd2c0 <line:249:20, line:250:3>
|   |   |-TextComment 0x555f55ebd270 <line:249:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x555f55ebd290 <line:250:3> Text=" "
|   |-ParamCommandComment 0x555f55ebd2e0 <col:4, col:52> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x555f55ebd370 <col:16, col:52>
|   |   `-TextComment 0x555f55ebd340 <col:16, col:52> Text=" Arch-specific IRQ configuration flag"
|   |-ParagraphComment 0x555f55ebd3c0 <line:252:3>
|   | `-TextComment 0x555f55ebd390 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ebd3e0 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x555f55ebd440 <col:11, col:48>
|       `-TextComment 0x555f55ebd410 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x555f55e01288 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:27:1, line:34:1> line:27:19 used sys_clock_hw_cycles_per_sec 'int (void)' static inline
| `-CompoundStmt 0x555f55e01338 <line:28:1, line:34:1>
|-FunctionDecl 0x555f55e01790 <line:55:1, line:105:1> line:55:28 used z_tmcvt 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' static inline
| |-ParmVarDecl 0x555f55e01358 <col:36, col:42> col:42 used t 'u64_t':'unsigned long long'
| |-ParmVarDecl 0x555f55e013c8 <col:45, col:51> col:51 used from_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x555f55e01438 <col:60, col:66> col:66 used to_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x555f55e014a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:13> col:13 used const_hz 'bool'
| |-ParmVarDecl 0x555f55e01518 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:28> col:28 used result32 'bool'
| |-ParmVarDecl 0x555f55e01588 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:13> col:13 used round_up 'bool'
| |-ParmVarDecl 0x555f55e015f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:28> col:28 used round_off 'bool'
| |-CompoundStmt 0x555f55e05968 <line:58:1, line:105:1>
| | |-DeclStmt 0x555f55e01bf0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:48>
| | | `-VarDecl 0x555f55e018c0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:47> line:59:7 used mul_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x555f55e01bd8 <col:19, line:60:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x555f55e01bb0 <line:59:19, line:60:47> 'int' '&&'
| | |       |-BinaryOperator 0x555f55e01a40 <line:59:19, line:60:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x555f55e01a28 <line:59:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x555f55e01a10 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x555f55e01920 <col:19> 'bool' lvalue ParmVar 0x555f55e014a8 'const_hz' 'bool'
| | |       | `-ParenExpr 0x555f55e019f0 <line:60:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x555f55e019c8 <col:4, col:12> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x555f55e01998 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x555f55e01948 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e01438 'to_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x555f55e019b0 <col:12> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x555f55e01970 <col:12> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e013c8 'from_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x555f55e01b90 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x555f55e01b68 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x555f55e01b10 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x555f55e01ae8 <col:26, col:34> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x555f55e01ab8 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x555f55e01a68 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e01438 'to_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x555f55e01ad0 <col:34> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x555f55e01a90 <col:34> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e013c8 'from_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x555f55e01b50 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x555f55e01b30 <col:46> 'int' 0
| | |-DeclStmt 0x555f55e01f48 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:48>
| | | `-VarDecl 0x555f55e01c18 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:47> line:61:7 used div_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x555f55e01f30 <col:19, line:62:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x555f55e01f08 <line:61:19, line:62:47> 'int' '&&'
| | |       |-BinaryOperator 0x555f55e01d98 <line:61:19, line:62:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x555f55e01d80 <line:61:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x555f55e01d68 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x555f55e01c78 <col:19> 'bool' lvalue ParmVar 0x555f55e014a8 'const_hz' 'bool'
| | |       | `-ParenExpr 0x555f55e01d48 <line:62:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x555f55e01d20 <col:4, col:14> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x555f55e01cf0 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x555f55e01ca0 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e013c8 'from_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x555f55e01d08 <col:14> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x555f55e01cc8 <col:14> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e01438 'to_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x555f55e01ee8 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x555f55e01ec0 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x555f55e01e68 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x555f55e01e40 <col:26, col:36> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x555f55e01e10 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x555f55e01dc0 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e013c8 'from_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x555f55e01e28 <col:36> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x555f55e01de8 <col:36> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e01438 'to_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x555f55e01ea8 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x555f55e01e88 <col:46> 'int' 0
| | |-IfStmt 0x555f55e04040 <line:64:2, line:66:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x555f55e03e70 <line:64:6, col:17> 'int' '=='
| | | | |-ImplicitCastExpr 0x555f55e03e40 <col:6> 'u32_t':'unsigned int' <LValueToRValue>
| | | | | `-DeclRefExpr 0x555f55e01f60 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e013c8 'from_hz' 'u32_t':'unsigned int'
| | | | `-ImplicitCastExpr 0x555f55e03e58 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x555f55e01f88 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e01438 'to_hz' 'u32_t':'unsigned int'
| | | |-CompoundStmt 0x555f55e04028 <col:24, line:66:2>
| | | | `-ReturnStmt 0x555f55e04010 <line:65:3, col:34>
| | | |   `-ConditionalOperator 0x555f55e03fe0 <col:10, col:34> 'unsigned long long'
| | | |     |-ImplicitCastExpr 0x555f55e03f98 <col:10> 'int' <IntegralCast>
| | | |     | `-ImplicitCastExpr 0x555f55e03f80 <col:10> 'bool' <LValueToRValue>
| | | |     |   `-DeclRefExpr 0x555f55e03e98 <col:10> 'bool' lvalue ParmVar 0x555f55e01518 'result32' 'bool'
| | | |     |-ImplicitCastExpr 0x555f55e03fc8 <col:21, col:30> 'unsigned long long' <IntegralCast>
| | | |     | `-ParenExpr 0x555f55e03f38 <col:21, col:30> 'u32_t':'unsigned int'
| | | |     |   `-CStyleCastExpr 0x555f55e03f10 <col:22, col:29> 'u32_t':'unsigned int' <IntegralCast>
| | | |     |     `-ImplicitCastExpr 0x555f55e03ef8 <col:29> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |     |       `-DeclRefExpr 0x555f55e03ec0 <col:29> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e01358 't' 'u64_t':'unsigned long long'
| | | |     `-ImplicitCastExpr 0x555f55e03fb0 <col:34> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |       `-DeclRefExpr 0x555f55e03f58 <col:34> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e01358 't' 'u64_t':'unsigned long long'
| | | `-<<<NULL>>>
| | |-DeclStmt 0x555f55e04120 <line:68:2, col:15>
| | | `-VarDecl 0x555f55e04088 <col:2, col:14> col:8 used off 'u64_t':'unsigned long long' cinit
| | |   `-ImplicitCastExpr 0x555f55e04108 <col:14> 'u64_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x555f55e040e8 <col:14> 'int' 0
| | |-IfStmt 0x555f55e04700 <line:70:2, line:78:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x555f55e04178 <line:70:6, col:7> 'int' prefix '!'
| | | | `-ImplicitCastExpr 0x555f55e04160 <col:7> 'bool' <LValueToRValue>
| | | |   `-DeclRefExpr 0x555f55e04138 <col:7> 'bool' lvalue Var 0x555f55e018c0 'mul_ratio' 'bool'
| | | |-CompoundStmt 0x555f55e046e0 <col:18, line:78:2>
| | | | |-DeclStmt 0x555f55e04398 <line:71:3, col:59>
| | | | | `-VarDecl 0x555f55e041a8 <col:3, col:52> col:9 used rdivisor 'u32_t':'unsigned int' cinit
| | | | |   `-ConditionalOperator 0x555f55e04368 <col:20, col:52> 'unsigned int'
| | | | |     |-ImplicitCastExpr 0x555f55e04338 <col:20> 'int' <IntegralCast>
| | | | |     | `-ImplicitCastExpr 0x555f55e04320 <col:20> 'bool' <LValueToRValue>
| | | | |     |   `-DeclRefExpr 0x555f55e04208 <col:20> 'bool' lvalue Var 0x555f55e01c18 'div_ratio' 'bool'
| | | | |     |-ParenExpr 0x555f55e042d8 <col:32, col:48> 'unsigned int'
| | | | |     | `-BinaryOperator 0x555f55e042b0 <col:33, col:43> 'unsigned int' '/'
| | | | |     |   |-ImplicitCastExpr 0x555f55e04280 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |   | `-DeclRefExpr 0x555f55e04230 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e013c8 'from_hz' 'u32_t':'unsigned int'
| | | | |     |   `-ImplicitCastExpr 0x555f55e04298 <col:43> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |     `-DeclRefExpr 0x555f55e04258 <col:43> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e01438 'to_hz' 'u32_t':'unsigned int'
| | | | |     `-ImplicitCastExpr 0x555f55e04350 <col:52> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x555f55e042f8 <col:52> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e013c8 'from_hz' 'u32_t':'unsigned int'
| | | | `-IfStmt 0x555f55e046a8 <line:73:3, line:77:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-ImplicitCastExpr 0x555f55e043d8 <line:73:7> 'bool' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x555f55e043b0 <col:7> 'bool' lvalue ParmVar 0x555f55e01588 'round_up' 'bool'
| | | |   |-CompoundStmt 0x555f55e044f8 <col:17, line:75:3>
| | | |   | `-BinaryOperator 0x555f55e044d0 <line:74:4, col:21> 'u64_t':'unsigned long long' '='
| | | |   |   |-DeclRefExpr 0x555f55e043f0 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x555f55e04088 'off' 'u64_t':'unsigned long long'
| | | |   |   `-ImplicitCastExpr 0x555f55e044b8 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |   |     `-BinaryOperator 0x555f55e04490 <col:10, col:21> 'unsigned int' '-'
| | | |   |       |-ImplicitCastExpr 0x555f55e04460 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   |       | `-DeclRefExpr 0x555f55e04418 <col:10> 'u32_t':'unsigned int' lvalue Var 0x555f55e041a8 'rdivisor' 'u32_t':'unsigned int'
| | | |   |       `-ImplicitCastExpr 0x555f55e04478 <col:21> 'unsigned int' <IntegralCast>
| | | |   |         `-IntegerLiteral 0x555f55e04440 <col:21> 'int' 1
| | | |   `-IfStmt 0x555f55e04670 <line:75:10, line:77:3>
| | | |     |-<<<NULL>>>
| | | |     |-<<<NULL>>>
| | | |     |-ImplicitCastExpr 0x555f55e04538 <line:75:14> 'bool' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x555f55e04510 <col:14> 'bool' lvalue ParmVar 0x555f55e015f8 'round_off' 'bool'
| | | |     |-CompoundStmt 0x555f55e04658 <col:25, line:77:3>
| | | |     | `-BinaryOperator 0x555f55e04630 <line:76:4, col:21> 'u64_t':'unsigned long long' '='
| | | |     |   |-DeclRefExpr 0x555f55e04550 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x555f55e04088 'off' 'u64_t':'unsigned long long'
| | | |     |   `-ImplicitCastExpr 0x555f55e04618 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |     |     `-BinaryOperator 0x555f55e045f0 <col:10, col:21> 'unsigned int' '/'
| | | |     |       |-ImplicitCastExpr 0x555f55e045c0 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |     |       | `-DeclRefExpr 0x555f55e04578 <col:10> 'u32_t':'unsigned int' lvalue Var 0x555f55e041a8 'rdivisor' 'u32_t':'unsigned int'
| | | |     |       `-ImplicitCastExpr 0x555f55e045d8 <col:21> 'unsigned int' <IntegralCast>
| | | |     |         `-IntegerLiteral 0x555f55e045a0 <col:21> 'int' 2
| | | |     `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-IfStmt 0x555f55e05908 <line:85:2, line:104:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x555f55e04760 <line:85:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x555f55e04738 <col:6> 'bool' lvalue Var 0x555f55e01c18 'div_ratio' 'bool'
| |   |-CompoundStmt 0x555f55e04bd8 <col:17, line:92:2>
| |   | |-CompoundAssignOperator 0x555f55e047e0 <line:86:3, col:8> 'u64_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| |   | | |-DeclRefExpr 0x555f55e04778 <col:3> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e01358 't' 'u64_t':'unsigned long long'
| |   | | `-ImplicitCastExpr 0x555f55e047c8 <col:8> 'u64_t':'unsigned long long' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x555f55e047a0 <col:8> 'u64_t':'unsigned long long' lvalue Var 0x555f55e04088 'off' 'u64_t':'unsigned long long'
| |   | `-IfStmt 0x555f55e04ba0 <line:87:3, line:91:3>
| |   |   |-<<<NULL>>>
| |   |   |-<<<NULL>>>
| |   |   |-ImplicitCastExpr 0x555f55e04840 <line:87:7> 'bool' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x555f55e04818 <col:7> 'bool' lvalue ParmVar 0x555f55e01518 'result32' 'bool'
| |   |   |-CompoundStmt 0x555f55e04a10 <col:17, line:89:3>
| |   |   | `-ReturnStmt 0x555f55e049f8 <line:88:4, col:40>
| |   |   |   `-ImplicitCastExpr 0x555f55e049e0 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |   |   |     `-BinaryOperator 0x555f55e049b8 <col:11, col:40> 'unsigned int' '/'
| |   |   |       |-ParenExpr 0x555f55e048d0 <col:11, col:20> 'u32_t':'unsigned int'
| |   |   |       | `-CStyleCastExpr 0x555f55e048a8 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |   |   |       |   `-ImplicitCastExpr 0x555f55e04890 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |   |       |     `-DeclRefExpr 0x555f55e04858 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e01358 't' 'u64_t':'unsigned long long'
| |   |   |       `-ParenExpr 0x555f55e04998 <col:24, col:40> 'unsigned int'
| |   |   |         `-BinaryOperator 0x555f55e04970 <col:25, col:35> 'unsigned int' '/'
| |   |   |           |-ImplicitCastExpr 0x555f55e04940 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |           | `-DeclRefExpr 0x555f55e048f0 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e013c8 'from_hz' 'u32_t':'unsigned int'
| |   |   |           `-ImplicitCastExpr 0x555f55e04958 <col:35> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |             `-DeclRefExpr 0x555f55e04918 <col:35> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e01438 'to_hz' 'u32_t':'unsigned int'
| |   |   `-CompoundStmt 0x555f55e04b88 <line:89:10, line:91:3>
| |   |     `-ReturnStmt 0x555f55e04b70 <line:90:4, col:31>
| |   |       `-BinaryOperator 0x555f55e04b48 <col:11, col:31> 'unsigned long long' '/'
| |   |         |-ImplicitCastExpr 0x555f55e04b18 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |         | `-DeclRefExpr 0x555f55e04a28 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e01358 't' 'u64_t':'unsigned long long'
| |   |         `-ImplicitCastExpr 0x555f55e04b30 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |   |           `-ParenExpr 0x555f55e04af8 <col:15, col:31> 'unsigned int'
| |   |             `-BinaryOperator 0x555f55e04ad0 <col:16, col:26> 'unsigned int' '/'
| |   |               |-ImplicitCastExpr 0x555f55e04aa0 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |   |               | `-DeclRefExpr 0x555f55e04a50 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e013c8 'from_hz' 'u32_t':'unsigned int'
| |   |               `-ImplicitCastExpr 0x555f55e04ab8 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| |   |                 `-DeclRefExpr 0x555f55e04a78 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e01438 'to_hz' 'u32_t':'unsigned int'
| |   `-IfStmt 0x555f55e058d0 <line:92:9, line:104:2>
| |     |-<<<NULL>>>
| |     |-<<<NULL>>>
| |     |-ImplicitCastExpr 0x555f55e04c20 <line:92:13> 'bool' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e04bf8 <col:13> 'bool' lvalue Var 0x555f55e018c0 'mul_ratio' 'bool'
| |     |-CompoundStmt 0x555f55e05398 <col:24, line:98:2>
| |     | `-IfStmt 0x555f55e05360 <line:93:3, line:97:3>
| |     |   |-<<<NULL>>>
| |     |   |-<<<NULL>>>
| |     |   |-ImplicitCastExpr 0x555f55e04c60 <line:93:7> 'bool' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x555f55e04c38 <col:7> 'bool' lvalue ParmVar 0x555f55e01518 'result32' 'bool'
| |     |   |-CompoundStmt 0x555f55e051d0 <col:17, line:95:3>
| |     |   | `-ReturnStmt 0x555f55e04e18 <line:94:4, col:40>
| |     |   |   `-ImplicitCastExpr 0x555f55e04e00 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |     |   |     `-BinaryOperator 0x555f55e04dd8 <col:11, col:40> 'unsigned int' '*'
| |     |   |       |-ParenExpr 0x555f55e04cf0 <col:11, col:20> 'u32_t':'unsigned int'
| |     |   |       | `-CStyleCastExpr 0x555f55e04cc8 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |     |   |       |   `-ImplicitCastExpr 0x555f55e04cb0 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |   |       |     `-DeclRefExpr 0x555f55e04c78 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e01358 't' 'u64_t':'unsigned long long'
| |     |   |       `-ParenExpr 0x555f55e04db8 <col:24, col:40> 'unsigned int'
| |     |   |         `-BinaryOperator 0x555f55e04d90 <col:25, col:33> 'unsigned int' '/'
| |     |   |           |-ImplicitCastExpr 0x555f55e04d60 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |           | `-DeclRefExpr 0x555f55e04d10 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e01438 'to_hz' 'u32_t':'unsigned int'
| |     |   |           `-ImplicitCastExpr 0x555f55e04d78 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |             `-DeclRefExpr 0x555f55e04d38 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e013c8 'from_hz' 'u32_t':'unsigned int'
| |     |   `-CompoundStmt 0x555f55e05348 <line:95:10, line:97:3>
| |     |     `-ReturnStmt 0x555f55e05330 <line:96:4, col:31>
| |     |       `-BinaryOperator 0x555f55e05308 <col:11, col:31> 'unsigned long long' '*'
| |     |         |-ImplicitCastExpr 0x555f55e052d8 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |         | `-DeclRefExpr 0x555f55e051e8 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e01358 't' 'u64_t':'unsigned long long'
| |     |         `-ImplicitCastExpr 0x555f55e052f0 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |     |           `-ParenExpr 0x555f55e052b8 <col:15, col:31> 'unsigned int'
| |     |             `-BinaryOperator 0x555f55e05290 <col:16, col:24> 'unsigned int' '/'
| |     |               |-ImplicitCastExpr 0x555f55e05260 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |     |               | `-DeclRefExpr 0x555f55e05210 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e01438 'to_hz' 'u32_t':'unsigned int'
| |     |               `-ImplicitCastExpr 0x555f55e05278 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |     |                 `-DeclRefExpr 0x555f55e05238 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e013c8 'from_hz' 'u32_t':'unsigned int'
| |     `-CompoundStmt 0x555f55e058b8 <line:98:9, line:104:2>
| |       `-IfStmt 0x555f55e05880 <line:99:3, line:103:3>
| |         |-<<<NULL>>>
| |         |-<<<NULL>>>
| |         |-ImplicitCastExpr 0x555f55e053d8 <line:99:7> 'bool' <LValueToRValue>
| |         | `-DeclRefExpr 0x555f55e053b0 <col:7> 'bool' lvalue ParmVar 0x555f55e01518 'result32' 'bool'
| |         |-CompoundStmt 0x555f55e05670 <col:17, line:101:3>
| |         | `-ReturnStmt 0x555f55e05658 <line:100:4, col:46>
| |         |   `-ImplicitCastExpr 0x555f55e05640 <col:11, col:46> 'u64_t':'unsigned long long' <IntegralCast>
| |         |     `-CStyleCastExpr 0x555f55e05618 <col:11, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |         |       `-ParenExpr 0x555f55e055f8 <col:18, col:46> 'unsigned long long'
| |         |         `-BinaryOperator 0x555f55e05590 <col:19, col:39> 'unsigned long long' '/'
| |         |           |-ParenExpr 0x555f55e05518 <col:19, col:35> 'unsigned long long'
| |         |           | `-BinaryOperator 0x555f55e054f0 <col:20, col:32> 'unsigned long long' '+'
| |         |           |   |-BinaryOperator 0x555f55e05488 <col:20, col:24> 'unsigned long long' '*'
| |         |           |   | |-ImplicitCastExpr 0x555f55e05440 <col:20> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |   | | `-DeclRefExpr 0x555f55e053f0 <col:20> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e01358 't' 'u64_t':'unsigned long long'
| |         |           |   | `-ImplicitCastExpr 0x555f55e05470 <col:24> 'unsigned long long' <IntegralCast>
| |         |           |   |   `-ImplicitCastExpr 0x555f55e05458 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |         |           |   |     `-DeclRefExpr 0x555f55e05418 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e01438 'to_hz' 'u32_t':'unsigned int'
| |         |           |   `-ImplicitCastExpr 0x555f55e054d8 <col:32> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |     `-DeclRefExpr 0x555f55e054b0 <col:32> 'u64_t':'unsigned long long' lvalue Var 0x555f55e04088 'off' 'u64_t':'unsigned long long'
| |         |           `-ImplicitCastExpr 0x555f55e05578 <col:39> 'unsigned long long' <IntegralCast>
| |         |             `-ImplicitCastExpr 0x555f55e05560 <col:39> 'u32_t':'unsigned int' <LValueToRValue>
| |         |               `-DeclRefExpr 0x555f55e05538 <col:39> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e013c8 'from_hz' 'u32_t':'unsigned int'
| |         `-CompoundStmt 0x555f55e05868 <line:101:10, line:103:3>
| |           `-ReturnStmt 0x555f55e05850 <line:102:4, col:31>
| |             `-BinaryOperator 0x555f55e05828 <col:11, col:31> 'unsigned long long' '/'
| |               |-ParenExpr 0x555f55e057b0 <col:11, col:27> 'unsigned long long'
| |               | `-BinaryOperator 0x555f55e05788 <col:12, col:24> 'unsigned long long' '+'
| |               |   |-BinaryOperator 0x555f55e05720 <col:12, col:16> 'unsigned long long' '*'
| |               |   | |-ImplicitCastExpr 0x555f55e056d8 <col:12> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |   | | `-DeclRefExpr 0x555f55e05688 <col:12> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e01358 't' 'u64_t':'unsigned long long'
| |               |   | `-ImplicitCastExpr 0x555f55e05708 <col:16> 'unsigned long long' <IntegralCast>
| |               |   |   `-ImplicitCastExpr 0x555f55e056f0 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |               |   |     `-DeclRefExpr 0x555f55e056b0 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e01438 'to_hz' 'u32_t':'unsigned int'
| |               |   `-ImplicitCastExpr 0x555f55e05770 <col:24> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |     `-DeclRefExpr 0x555f55e05748 <col:24> 'u64_t':'unsigned long long' lvalue Var 0x555f55e04088 'off' 'u64_t':'unsigned long long'
| |               `-ImplicitCastExpr 0x555f55e05810 <col:31> 'unsigned long long' <IntegralCast>
| |                 `-ImplicitCastExpr 0x555f55e057f8 <col:31> 'u32_t':'unsigned int' <LValueToRValue>
| |                   `-DeclRefExpr 0x555f55e057d0 <col:31> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e013c8 'from_hz' 'u32_t':'unsigned int'
| `-AlwaysInlineAttr 0x555f55e01868 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x555f55e05ac0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:190:1, line:194:1> line:190:21 k_ms_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e059b8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e05f18 <line:191:1, line:194:1>
| | `-ReturnStmt 0x555f55e05ed8 <line:193:2, col:65>
| |   `-ImplicitCastExpr 0x555f55e05ec0 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55e05da0 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55e05d88 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55e05b68 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55e05e18 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55e05e00 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55e05b90 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e059b8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55e05e30 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55e05bb8 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x555f55e05e48 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55e05c40 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55e05c28 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55e05bd8 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55e05e60 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55e05ca8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55e05c88 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55e05c68 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55e05e78 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e05cc8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55e05e90 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e05ce8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x555f55e05ea8 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55e05d08 <col:16> 'int' 0
| `-FullComment 0x555f55ebd790 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:182:4, line:188:35>
|   |-ParagraphComment 0x555f55ebd550 <line:182:4>
|   | `-TextComment 0x555f55ebd520 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ebd570 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ebd5d0 <col:11, col:50>
|   |   `-TextComment 0x555f55ebd5a0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x555f55ebd670 <line:184:3, line:186:44>
|   | |-TextComment 0x555f55ebd5f0 <line:184:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x555f55ebd610 <line:185:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ebd630 <line:186:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ebd6c0 <line:188:3>
|   | `-TextComment 0x555f55ebd690 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ebd6e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ebd740 <col:11, col:35>
|       `-TextComment 0x555f55ebd710 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e06040 <line:204:1, line:208:1> line:204:21 k_ms_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e05f40 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e07b28 <line:205:1, line:208:1>
| | `-ReturnStmt 0x555f55e07ae0 <line:207:2, col:66>
| |   `-CallExpr 0x555f55e079d8 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e079c0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55e060e8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55e07a38 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e06110 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e05f40 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e07a50 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55e06138 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x555f55e07a68 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55e06198 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55e06180 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55e06158 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55e07a80 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55e07940 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55e07920 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55e07900 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e07a98 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e07960 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e07ab0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e07980 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x555f55e07ac8 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55e079a0 <col:16> 'int' 0
| `-FullComment 0x555f55ebda70 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:196:4, line:202:35>
|   |-ParagraphComment 0x555f55ebd830 <line:196:4>
|   | `-TextComment 0x555f55ebd800 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ebd850 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ebd8b0 <col:11, col:50>
|   |   `-TextComment 0x555f55ebd880 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x555f55ebd950 <line:198:3, line:200:44>
|   | |-TextComment 0x555f55ebd8d0 <line:198:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x555f55ebd8f0 <line:199:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ebd910 <line:200:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ebd9a0 <line:202:3>
|   | `-TextComment 0x555f55ebd970 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ebd9c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ebda20 <col:11, col:35>
|       `-TextComment 0x555f55ebd9f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e07bd8 <line:218:1, line:222:1> line:218:21 k_ms_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e07b50 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e07fa8 <line:219:1, line:222:1>
| | `-ReturnStmt 0x555f55e07f68 <line:221:2, col:64>
| |   `-ImplicitCastExpr 0x555f55e07f50 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55e07e30 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55e07e18 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55e07c80 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55e07ea8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55e07e90 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55e07ca8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e07b50 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55e07ec0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55e07cd0 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x555f55e07ed8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55e07d30 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55e07d18 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55e07cf0 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55e07ef0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55e07d98 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55e07d78 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55e07d58 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55e07f08 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e07db8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55e07f20 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e07dd8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x555f55e07f38 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55e07df8 <col:16> 'int' 1
| `-FullComment 0x555f55ebdd50 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:210:4, line:216:35>
|   |-ParagraphComment 0x555f55ebdb10 <line:210:4>
|   | `-TextComment 0x555f55ebdae0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ebdb30 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ebdb90 <col:11, col:50>
|   |   `-TextComment 0x555f55ebdb60 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x555f55ebdc30 <line:212:3, line:214:37>
|   | |-TextComment 0x555f55ebdbb0 <line:212:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x555f55ebdbd0 <line:213:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ebdbf0 <line:214:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ebdc80 <line:216:3>
|   | `-TextComment 0x555f55ebdc50 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ebdca0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ebdd00 <col:11, col:35>
|       `-TextComment 0x555f55ebdcd0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e08058 <line:232:1, line:236:1> line:232:21 k_ms_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e07fd0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e083f8 <line:233:1, line:236:1>
| | `-ReturnStmt 0x555f55e083b8 <line:235:2, col:65>
| |   `-CallExpr 0x555f55e082b0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e08298 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55e08100 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55e08310 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e08128 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e07fd0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e08328 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55e08150 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x555f55e08340 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55e081b0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55e08198 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55e08170 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55e08358 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55e08218 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55e081f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55e081d8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e08370 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e08238 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e08388 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e08258 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x555f55e083a0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55e08278 <col:16> 'int' 1
| `-FullComment 0x555f55ebe030 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:224:4, line:230:35>
|   |-ParagraphComment 0x555f55ebddf0 <line:224:4>
|   | `-TextComment 0x555f55ebddc0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ebde10 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ebde70 <col:11, col:50>
|   |   `-TextComment 0x555f55ebde40 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x555f55ebdf10 <line:226:3, line:228:37>
|   | |-TextComment 0x555f55ebde90 <line:226:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x555f55ebdeb0 <line:227:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ebded0 <line:228:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ebdf60 <line:230:3>
|   | `-TextComment 0x555f55ebdf30 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ebdf80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ebdfe0 <col:11, col:35>
|       `-TextComment 0x555f55ebdfb0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e084a8 <line:246:1, line:250:1> line:246:21 k_ms_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e08420 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e08878 <line:247:1, line:250:1>
| | `-ReturnStmt 0x555f55e08838 <line:249:2, col:64>
| |   `-ImplicitCastExpr 0x555f55e08820 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55e08700 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55e086e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55e08550 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55e08778 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55e08760 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55e08578 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e08420 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55e08790 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55e085a0 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x555f55e087a8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55e08600 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55e085e8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55e085c0 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55e087c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55e08668 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55e08648 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55e08628 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55e087d8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e08688 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55e087f0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e086a8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x555f55e08808 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55e086c8 <col:16> 'int' 0
| `-FullComment 0x555f55ebe310 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:238:4, line:244:35>
|   |-ParagraphComment 0x555f55ebe0d0 <line:238:4>
|   | `-TextComment 0x555f55ebe0a0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ebe0f0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ebe150 <col:11, col:50>
|   |   `-TextComment 0x555f55ebe120 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x555f55ebe1f0 <line:240:3, line:242:45>
|   | |-TextComment 0x555f55ebe170 <line:240:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x555f55ebe190 <line:241:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ebe1b0 <line:242:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ebe240 <line:244:3>
|   | `-TextComment 0x555f55ebe210 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ebe260 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ebe2c0 <col:11, col:35>
|       `-TextComment 0x555f55ebe290 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e08938 <line:260:1, line:264:1> line:260:21 k_ms_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e088a0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e08cd8 <line:261:1, line:264:1>
| | `-ReturnStmt 0x555f55e08c98 <line:263:2, col:65>
| |   `-CallExpr 0x555f55e08b90 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e08b78 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55e089e0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55e08bf0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e08a08 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e088a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e08c08 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55e08a30 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x555f55e08c20 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55e08a90 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55e08a78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55e08a50 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55e08c38 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55e08af8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55e08ad8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55e08ab8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e08c50 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e08b18 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e08c68 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e08b38 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x555f55e08c80 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55e08b58 <col:16> 'int' 0
| `-FullComment 0x555f55ebe5f0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:252:4, line:258:35>
|   |-ParagraphComment 0x555f55ebe3b0 <line:252:4>
|   | `-TextComment 0x555f55ebe380 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ebe3d0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ebe430 <col:11, col:50>
|   |   `-TextComment 0x555f55ebe400 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x555f55ebe4d0 <line:254:3, line:256:45>
|   | |-TextComment 0x555f55ebe450 <line:254:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x555f55ebe470 <line:255:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ebe490 <line:256:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ebe520 <line:258:3>
|   | `-TextComment 0x555f55ebe4f0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ebe540 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ebe5a0 <col:11, col:35>
|       `-TextComment 0x555f55ebe570 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e08d88 <line:274:1, line:278:1> line:274:21 k_ms_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e08d00 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e08fd8 <line:275:1, line:278:1>
| `-FullComment 0x555f55ebe8d0 <line:266:4, line:272:35>
|   |-ParagraphComment 0x555f55ebe690 <line:266:4>
|   | `-TextComment 0x555f55ebe660 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ebe6b0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ebe710 <col:11, col:40>
|   |   `-TextComment 0x555f55ebe6e0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x555f55ebe7b0 <line:268:3, line:270:44>
|   | |-TextComment 0x555f55ebe730 <line:268:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x555f55ebe750 <line:269:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ebe770 <line:270:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ebe800 <line:272:3>
|   | `-TextComment 0x555f55ebe7d0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ebe820 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ebe880 <col:11, col:35>
|       `-TextComment 0x555f55ebe850 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e09080 <line:288:1, line:292:1> line:288:21 k_ms_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e08ff8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e092c8 <line:289:1, line:292:1>
| `-FullComment 0x555f55eddd00 <line:280:4, line:286:35>
|   |-ParagraphComment 0x555f55ebe970 <line:280:4>
|   | `-TextComment 0x555f55ebe940 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ebe990 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ebe9f0 <col:11, col:40>
|   |   `-TextComment 0x555f55ebe9c0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x555f55ebea90 <line:282:3, line:284:44>
|   | |-TextComment 0x555f55ebea10 <line:282:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x555f55ebea30 <line:283:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ebea50 <line:284:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55eddc30 <line:286:3>
|   | `-TextComment 0x555f55ebeab0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eddc50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55eddcb0 <col:11, col:35>
|       `-TextComment 0x555f55eddc80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e09370 <line:302:1, line:306:1> line:302:21 k_ms_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e092e8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e095b8 <line:303:1, line:306:1>
| `-FullComment 0x555f55eddfe0 <line:294:4, line:300:35>
|   |-ParagraphComment 0x555f55eddda0 <line:294:4>
|   | `-TextComment 0x555f55eddd70 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55edddc0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55edde20 <col:11, col:40>
|   |   `-TextComment 0x555f55edddf0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x555f55eddec0 <line:296:3, line:298:37>
|   | |-TextComment 0x555f55edde40 <line:296:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x555f55edde60 <line:297:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55edde80 <line:298:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55eddf10 <line:300:3>
|   | `-TextComment 0x555f55eddee0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eddf30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55eddf90 <col:11, col:35>
|       `-TextComment 0x555f55eddf60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e09660 <line:316:1, line:320:1> line:316:21 k_ms_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e095d8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e098a8 <line:317:1, line:320:1>
| `-FullComment 0x555f55ede2c0 <line:308:4, line:314:35>
|   |-ParagraphComment 0x555f55ede080 <line:308:4>
|   | `-TextComment 0x555f55ede050 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ede0a0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ede100 <col:11, col:40>
|   |   `-TextComment 0x555f55ede0d0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x555f55ede1a0 <line:310:3, line:312:37>
|   | |-TextComment 0x555f55ede120 <line:310:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x555f55ede140 <line:311:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ede160 <line:312:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ede1f0 <line:314:3>
|   | `-TextComment 0x555f55ede1c0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ede210 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ede270 <col:11, col:35>
|       `-TextComment 0x555f55ede240 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e09fb8 <line:330:1, line:334:1> line:330:21 k_ms_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e09f30 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e0a208 <line:331:1, line:334:1>
| `-FullComment 0x555f55ede5a0 <line:322:4, line:328:35>
|   |-ParagraphComment 0x555f55ede360 <line:322:4>
|   | `-TextComment 0x555f55ede330 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ede380 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ede3e0 <col:11, col:40>
|   |   `-TextComment 0x555f55ede3b0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x555f55ede480 <line:324:3, line:326:45>
|   | |-TextComment 0x555f55ede400 <line:324:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x555f55ede420 <line:325:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ede440 <line:326:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ede4d0 <line:328:3>
|   | `-TextComment 0x555f55ede4a0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ede4f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ede550 <col:11, col:35>
|       `-TextComment 0x555f55ede520 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0a2b0 <line:344:1, line:348:1> line:344:21 k_ms_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e0a228 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e0a4f8 <line:345:1, line:348:1>
| `-FullComment 0x555f55ede880 <line:336:4, line:342:35>
|   |-ParagraphComment 0x555f55ede640 <line:336:4>
|   | `-TextComment 0x555f55ede610 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ede660 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ede6c0 <col:11, col:40>
|   |   `-TextComment 0x555f55ede690 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x555f55ede760 <line:338:3, line:340:45>
|   | |-TextComment 0x555f55ede6e0 <line:338:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x555f55ede700 <line:339:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ede720 <line:340:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ede7b0 <line:342:3>
|   | `-TextComment 0x555f55ede780 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ede7d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ede830 <col:11, col:35>
|       `-TextComment 0x555f55ede800 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0a5a0 <line:358:1, line:362:1> line:358:21 k_us_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e0a518 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e0a978 <line:359:1, line:362:1>
| | `-ReturnStmt 0x555f55e0a930 <line:361:2, col:65>
| |   `-ImplicitCastExpr 0x555f55e0a918 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55e0a7f8 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55e0a7e0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55e0a648 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55e0a870 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55e0a858 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55e0a670 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e0a518 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55e0a888 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55e0a698 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x555f55e0a8a0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55e0a6f8 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55e0a6e0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55e0a6b8 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55e0a8b8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55e0a760 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55e0a740 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55e0a720 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55e0a8d0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e0a780 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55e0a8e8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e0a7a0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x555f55e0a900 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55e0a7c0 <col:16> 'int' 0
| `-FullComment 0x555f55edeb60 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:350:4, line:356:35>
|   |-ParagraphComment 0x555f55ede920 <line:350:4>
|   | `-TextComment 0x555f55ede8f0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ede940 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ede9a0 <col:11, col:50>
|   |   `-TextComment 0x555f55ede970 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x555f55edea40 <line:352:3, line:354:44>
|   | |-TextComment 0x555f55ede9c0 <line:352:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x555f55ede9e0 <line:353:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55edea00 <line:354:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55edea90 <line:356:3>
|   | `-TextComment 0x555f55edea60 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55edeab0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55edeb10 <col:11, col:35>
|       `-TextComment 0x555f55edeae0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0aa28 <line:372:1, line:376:1> line:372:21 k_us_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e0a9a0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e0adc8 <line:373:1, line:376:1>
| | `-ReturnStmt 0x555f55e0ad88 <line:375:2, col:66>
| |   `-CallExpr 0x555f55e0ac80 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e0ac68 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55e0aad0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55e0ace0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e0aaf8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e0a9a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e0acf8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55e0ab20 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x555f55e0ad10 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55e0ab80 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55e0ab68 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55e0ab40 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55e0ad28 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55e0abe8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55e0abc8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55e0aba8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e0ad40 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e0ac08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e0ad58 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e0ac28 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x555f55e0ad70 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55e0ac48 <col:16> 'int' 0
| `-FullComment 0x555f55edee40 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:364:4, line:370:35>
|   |-ParagraphComment 0x555f55edec00 <line:364:4>
|   | `-TextComment 0x555f55edebd0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55edec20 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55edec80 <col:11, col:50>
|   |   `-TextComment 0x555f55edec50 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x555f55eded20 <line:366:3, line:368:44>
|   | |-TextComment 0x555f55edeca0 <line:366:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x555f55edecc0 <line:367:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55edece0 <line:368:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55eded70 <line:370:3>
|   | `-TextComment 0x555f55eded40 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eded90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ededf0 <col:11, col:35>
|       `-TextComment 0x555f55ededc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0ae78 <line:386:1, line:390:1> line:386:21 k_us_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e0adf0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e0b268 <line:387:1, line:390:1>
| | `-ReturnStmt 0x555f55e0b228 <line:389:2, col:64>
| |   `-ImplicitCastExpr 0x555f55e0b210 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55e0b0f0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55e0b0d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55e0af40 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55e0b168 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55e0b150 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55e0af68 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e0adf0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55e0b180 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55e0af90 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x555f55e0b198 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55e0aff0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55e0afd8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55e0afb0 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55e0b1b0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55e0b058 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55e0b038 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55e0b018 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55e0b1c8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e0b078 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55e0b1e0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e0b098 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x555f55e0b1f8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55e0b0b8 <col:16> 'int' 1
| `-FullComment 0x555f55edf120 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:378:4, line:384:35>
|   |-ParagraphComment 0x555f55edeee0 <line:378:4>
|   | `-TextComment 0x555f55edeeb0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55edef00 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55edef60 <col:11, col:50>
|   |   `-TextComment 0x555f55edef30 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x555f55edf000 <line:380:3, line:382:37>
|   | |-TextComment 0x555f55edef80 <line:380:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x555f55edefa0 <line:381:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55edefc0 <line:382:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55edf050 <line:384:3>
|   | `-TextComment 0x555f55edf020 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55edf070 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55edf0d0 <col:11, col:35>
|       `-TextComment 0x555f55edf0a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0b318 <line:400:1, line:404:1> line:400:21 k_us_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e0b290 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e0b6b8 <line:401:1, line:404:1>
| | `-ReturnStmt 0x555f55e0b678 <line:403:2, col:65>
| |   `-CallExpr 0x555f55e0b570 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e0b558 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55e0b3c0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55e0b5d0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e0b3e8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e0b290 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e0b5e8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55e0b410 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x555f55e0b600 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55e0b470 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55e0b458 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55e0b430 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55e0b618 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55e0b4d8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55e0b4b8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55e0b498 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e0b630 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e0b4f8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e0b648 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e0b518 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x555f55e0b660 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55e0b538 <col:16> 'int' 1
| `-FullComment 0x555f55edf400 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:392:4, line:398:35>
|   |-ParagraphComment 0x555f55edf1c0 <line:392:4>
|   | `-TextComment 0x555f55edf190 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55edf1e0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55edf240 <col:11, col:50>
|   |   `-TextComment 0x555f55edf210 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x555f55edf2e0 <line:394:3, line:396:37>
|   | |-TextComment 0x555f55edf260 <line:394:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x555f55edf280 <line:395:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55edf2a0 <line:396:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55edf330 <line:398:3>
|   | `-TextComment 0x555f55edf300 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55edf350 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55edf3b0 <col:11, col:35>
|       `-TextComment 0x555f55edf380 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0b768 <line:414:1, line:418:1> line:414:21 k_us_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e0b6e0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e0bb38 <line:415:1, line:418:1>
| | `-ReturnStmt 0x555f55e0baf8 <line:417:2, col:64>
| |   `-ImplicitCastExpr 0x555f55e0bae0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55e0b9c0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55e0b9a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55e0b810 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55e0ba38 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55e0ba20 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55e0b838 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e0b6e0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55e0ba50 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55e0b860 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x555f55e0ba68 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55e0b8c0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55e0b8a8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55e0b880 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55e0ba80 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55e0b928 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55e0b908 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55e0b8e8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55e0ba98 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e0b948 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55e0bab0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e0b968 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x555f55e0bac8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55e0b988 <col:16> 'int' 0
| `-FullComment 0x555f55edf6e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:406:4, line:412:35>
|   |-ParagraphComment 0x555f55edf4a0 <line:406:4>
|   | `-TextComment 0x555f55edf470 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55edf4c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55edf520 <col:11, col:50>
|   |   `-TextComment 0x555f55edf4f0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x555f55edf5c0 <line:408:3, line:410:45>
|   | |-TextComment 0x555f55edf540 <line:408:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x555f55edf560 <line:409:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55edf580 <line:410:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55edf610 <line:412:3>
|   | `-TextComment 0x555f55edf5e0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55edf630 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55edf690 <col:11, col:35>
|       `-TextComment 0x555f55edf660 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0bbe8 <line:428:1, line:432:1> line:428:21 k_us_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e0bb60 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e0bfa8 <line:429:1, line:432:1>
| | `-ReturnStmt 0x555f55e0bf68 <line:431:2, col:65>
| |   `-CallExpr 0x555f55e0be40 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e0be28 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55e0bc90 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55e0bea0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e0bcb8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e0bb60 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e0beb8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55e0bce0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x555f55e0bed0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55e0bd40 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55e0bd28 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55e0bd00 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55e0bee8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55e0bda8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55e0bd88 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55e0bd68 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e0bf00 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e0bdc8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e0bf18 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e0bde8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x555f55e0bf50 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55e0be08 <col:16> 'int' 0
| `-FullComment 0x555f55edf9c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:420:4, line:426:35>
|   |-ParagraphComment 0x555f55edf780 <line:420:4>
|   | `-TextComment 0x555f55edf750 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55edf7a0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55edf800 <col:11, col:50>
|   |   `-TextComment 0x555f55edf7d0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x555f55edf8a0 <line:422:3, line:424:45>
|   | |-TextComment 0x555f55edf820 <line:422:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x555f55edf840 <line:423:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55edf860 <line:424:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55edf8f0 <line:426:3>
|   | `-TextComment 0x555f55edf8c0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55edf910 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55edf970 <col:11, col:35>
|       `-TextComment 0x555f55edf940 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0c058 <line:442:1, line:446:1> line:442:21 k_us_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e0bfd0 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e0c2a8 <line:443:1, line:446:1>
| `-FullComment 0x555f55edfcc0 <line:434:4, line:440:35>
|   |-ParagraphComment 0x555f55edfa60 <line:434:4>
|   | `-TextComment 0x555f55edfa30 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55edfa80 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55edfae0 <col:11, col:40>
|   |   `-TextComment 0x555f55edfab0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x555f55edfb80 <line:436:3, line:438:44>
|   | |-TextComment 0x555f55edfb00 <line:436:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x555f55edfb20 <line:437:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55edfb40 <line:438:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55edfbd0 <line:440:3>
|   | `-TextComment 0x555f55edfba0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55edfbf0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55edfc70 <col:11, col:35>
|       `-TextComment 0x555f55edfc40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0c350 <line:456:1, line:460:1> line:456:21 k_us_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e0c2c8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e0c598 <line:457:1, line:460:1>
| `-FullComment 0x555f55edffa0 <line:448:4, line:454:35>
|   |-ParagraphComment 0x555f55edfd60 <line:448:4>
|   | `-TextComment 0x555f55edfd30 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55edfd80 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55edfde0 <col:11, col:40>
|   |   `-TextComment 0x555f55edfdb0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x555f55edfe80 <line:450:3, line:452:44>
|   | |-TextComment 0x555f55edfe00 <line:450:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x555f55edfe20 <line:451:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55edfe40 <line:452:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55edfed0 <line:454:3>
|   | `-TextComment 0x555f55edfea0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55edfef0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55edff50 <col:11, col:35>
|       `-TextComment 0x555f55edff20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0c640 <line:470:1, line:474:1> line:470:21 k_us_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e0c5b8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e0c888 <line:471:1, line:474:1>
| `-FullComment 0x555f55ee0280 <line:462:4, line:468:35>
|   |-ParagraphComment 0x555f55ee0040 <line:462:4>
|   | `-TextComment 0x555f55ee0010 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee0060 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ee00c0 <col:11, col:40>
|   |   `-TextComment 0x555f55ee0090 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x555f55ee0160 <line:464:3, line:466:37>
|   | |-TextComment 0x555f55ee00e0 <line:464:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x555f55ee0100 <line:465:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee0120 <line:466:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee01b0 <line:468:3>
|   | `-TextComment 0x555f55ee0180 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee01d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee0230 <col:11, col:35>
|       `-TextComment 0x555f55ee0200 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0c930 <line:484:1, line:488:1> line:484:21 k_us_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e0c8a8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e0cb78 <line:485:1, line:488:1>
| `-FullComment 0x555f55ee0560 <line:476:4, line:482:35>
|   |-ParagraphComment 0x555f55ee0320 <line:476:4>
|   | `-TextComment 0x555f55ee02f0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee0340 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ee03a0 <col:11, col:40>
|   |   `-TextComment 0x555f55ee0370 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x555f55ee0440 <line:478:3, line:480:37>
|   | |-TextComment 0x555f55ee03c0 <line:478:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x555f55ee03e0 <line:479:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee0400 <line:480:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee0490 <line:482:3>
|   | `-TextComment 0x555f55ee0460 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee04b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee0510 <col:11, col:35>
|       `-TextComment 0x555f55ee04e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0cc20 <line:498:1, line:502:1> line:498:21 k_us_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e0cb98 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e0ce68 <line:499:1, line:502:1>
| `-FullComment 0x555f55ee0840 <line:490:4, line:496:35>
|   |-ParagraphComment 0x555f55ee0600 <line:490:4>
|   | `-TextComment 0x555f55ee05d0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee0620 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ee0680 <col:11, col:40>
|   |   `-TextComment 0x555f55ee0650 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x555f55ee0720 <line:492:3, line:494:45>
|   | |-TextComment 0x555f55ee06a0 <line:492:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x555f55ee06c0 <line:493:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee06e0 <line:494:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee0770 <line:496:3>
|   | `-TextComment 0x555f55ee0740 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee0790 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee07f0 <col:11, col:35>
|       `-TextComment 0x555f55ee07c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0df70 <line:512:1, line:516:1> line:512:21 k_us_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e0ce88 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e0e1b8 <line:513:1, line:516:1>
| `-FullComment 0x555f55ee0b20 <line:504:4, line:510:35>
|   |-ParagraphComment 0x555f55ee08e0 <line:504:4>
|   | `-TextComment 0x555f55ee08b0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee0900 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ee0960 <col:11, col:40>
|   |   `-TextComment 0x555f55ee0930 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x555f55ee0a00 <line:506:3, line:508:45>
|   | |-TextComment 0x555f55ee0980 <line:506:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x555f55ee09a0 <line:507:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee09c0 <line:508:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee0a50 <line:510:3>
|   | `-TextComment 0x555f55ee0a20 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee0a70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee0ad0 <col:11, col:35>
|       `-TextComment 0x555f55ee0aa0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0e260 <line:526:1, line:530:1> line:526:21 k_ns_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e0e1d8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e0e638 <line:527:1, line:530:1>
| | `-ReturnStmt 0x555f55e0e5f0 <line:529:2, col:65>
| |   `-ImplicitCastExpr 0x555f55e0e5d8 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55e0e4b8 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55e0e4a0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55e0e308 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55e0e530 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55e0e518 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55e0e330 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e0e1d8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55e0e548 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55e0e358 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x555f55e0e560 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55e0e3b8 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55e0e3a0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55e0e378 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55e0e578 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55e0e420 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55e0e400 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55e0e3e0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55e0e590 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e0e440 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55e0e5a8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e0e460 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x555f55e0e5c0 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55e0e480 <col:16> 'int' 0
| `-FullComment 0x555f55ee0e00 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:518:4, line:524:35>
|   |-ParagraphComment 0x555f55ee0bc0 <line:518:4>
|   | `-TextComment 0x555f55ee0b90 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee0be0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55ee0c40 <col:11, col:49>
|   |   `-TextComment 0x555f55ee0c10 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x555f55ee0ce0 <line:520:3, line:522:44>
|   | |-TextComment 0x555f55ee0c60 <line:520:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x555f55ee0c80 <line:521:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee0ca0 <line:522:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee0d30 <line:524:3>
|   | `-TextComment 0x555f55ee0d00 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee0d50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee0db0 <col:11, col:35>
|       `-TextComment 0x555f55ee0d80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0e6e8 <line:540:1, line:544:1> line:540:21 k_ns_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e0e660 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e0ea88 <line:541:1, line:544:1>
| | `-ReturnStmt 0x555f55e0ea48 <line:543:2, col:66>
| |   `-CallExpr 0x555f55e0e940 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e0e928 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55e0e790 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55e0e9a0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e0e7b8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e0e660 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e0e9b8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55e0e7e0 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x555f55e0e9d0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55e0e840 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55e0e828 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55e0e800 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55e0e9e8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55e0e8a8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55e0e888 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55e0e868 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e0ea00 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e0e8c8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e0ea18 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e0e8e8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x555f55e0ea30 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55e0e908 <col:16> 'int' 0
| `-FullComment 0x555f55ee10e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:532:4, line:538:35>
|   |-ParagraphComment 0x555f55ee0ea0 <line:532:4>
|   | `-TextComment 0x555f55ee0e70 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee0ec0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55ee0f20 <col:11, col:49>
|   |   `-TextComment 0x555f55ee0ef0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x555f55ee0fc0 <line:534:3, line:536:44>
|   | |-TextComment 0x555f55ee0f40 <line:534:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x555f55ee0f60 <line:535:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee0f80 <line:536:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee1010 <line:538:3>
|   | `-TextComment 0x555f55ee0fe0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee1030 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee1090 <col:11, col:35>
|       `-TextComment 0x555f55ee1060 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0eb38 <line:554:1, line:558:1> line:554:21 k_ns_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e0eab0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e0ef08 <line:555:1, line:558:1>
| | `-ReturnStmt 0x555f55e0eec8 <line:557:2, col:64>
| |   `-ImplicitCastExpr 0x555f55e0eeb0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55e0ed90 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55e0ed78 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55e0ebe0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55e0ee08 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55e0edf0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55e0ec08 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e0eab0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55e0ee20 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55e0ec30 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x555f55e0ee38 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55e0ec90 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55e0ec78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55e0ec50 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55e0ee50 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55e0ecf8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55e0ecd8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55e0ecb8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55e0ee68 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e0ed18 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55e0ee80 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e0ed38 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x555f55e0ee98 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55e0ed58 <col:16> 'int' 1
| `-FullComment 0x555f55ee13c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:546:4, line:552:35>
|   |-ParagraphComment 0x555f55ee1180 <line:546:4>
|   | `-TextComment 0x555f55ee1150 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee11a0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55ee1200 <col:11, col:49>
|   |   `-TextComment 0x555f55ee11d0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x555f55ee12a0 <line:548:3, line:550:37>
|   | |-TextComment 0x555f55ee1220 <line:548:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x555f55ee1240 <line:549:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee1260 <line:550:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee12f0 <line:552:3>
|   | `-TextComment 0x555f55ee12c0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee1310 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee1370 <col:11, col:35>
|       `-TextComment 0x555f55ee1340 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0f008 <line:568:1, line:572:1> line:568:21 k_ns_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e0ef80 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e0f3a8 <line:569:1, line:572:1>
| | `-ReturnStmt 0x555f55e0f368 <line:571:2, col:65>
| |   `-CallExpr 0x555f55e0f260 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e0f248 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55e0f0b0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55e0f2c0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e0f0d8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e0ef80 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e0f2d8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55e0f100 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x555f55e0f2f0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55e0f160 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55e0f148 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55e0f120 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55e0f308 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55e0f1c8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55e0f1a8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55e0f188 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e0f320 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e0f1e8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e0f338 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e0f208 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x555f55e0f350 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55e0f228 <col:16> 'int' 1
| `-FullComment 0x555f55ee16a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:560:4, line:566:35>
|   |-ParagraphComment 0x555f55ee1460 <line:560:4>
|   | `-TextComment 0x555f55ee1430 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee1480 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55ee14e0 <col:11, col:49>
|   |   `-TextComment 0x555f55ee14b0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x555f55ee1580 <line:562:3, line:564:37>
|   | |-TextComment 0x555f55ee1500 <line:562:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x555f55ee1520 <line:563:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee1540 <line:564:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee15d0 <line:566:3>
|   | `-TextComment 0x555f55ee15a0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee15f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee1650 <col:11, col:35>
|       `-TextComment 0x555f55ee1620 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0f458 <line:582:1, line:586:1> line:582:21 k_ns_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e0f3d0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e0f828 <line:583:1, line:586:1>
| | `-ReturnStmt 0x555f55e0f7e8 <line:585:2, col:64>
| |   `-ImplicitCastExpr 0x555f55e0f7d0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55e0f6b0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55e0f698 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55e0f500 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55e0f728 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55e0f710 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55e0f528 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e0f3d0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55e0f740 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55e0f550 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x555f55e0f758 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55e0f5b0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55e0f598 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55e0f570 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55e0f770 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55e0f618 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55e0f5f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55e0f5d8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55e0f788 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e0f638 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55e0f7a0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e0f658 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x555f55e0f7b8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55e0f678 <col:16> 'int' 0
| `-FullComment 0x555f55ee1980 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:574:4, line:580:35>
|   |-ParagraphComment 0x555f55ee1740 <line:574:4>
|   | `-TextComment 0x555f55ee1710 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee1760 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55ee17c0 <col:11, col:49>
|   |   `-TextComment 0x555f55ee1790 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x555f55ee1860 <line:576:3, line:578:45>
|   | |-TextComment 0x555f55ee17e0 <line:576:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x555f55ee1800 <line:577:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee1820 <line:578:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee18b0 <line:580:3>
|   | `-TextComment 0x555f55ee1880 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee18d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee1930 <col:11, col:35>
|       `-TextComment 0x555f55ee1900 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0f8d8 <line:596:1, line:600:1> line:596:21 k_ns_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e0f850 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e0fc78 <line:597:1, line:600:1>
| | `-ReturnStmt 0x555f55e0fc38 <line:599:2, col:65>
| |   `-CallExpr 0x555f55e0fb30 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e0fb18 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55e0f980 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55e0fb90 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e0f9a8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e0f850 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e0fba8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55e0f9d0 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x555f55e0fbc0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55e0fa30 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55e0fa18 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55e0f9f0 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55e0fbd8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55e0fa98 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55e0fa78 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55e0fa58 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e0fbf0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e0fab8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e0fc08 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e0fad8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x555f55e0fc20 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55e0faf8 <col:16> 'int' 0
| `-FullComment 0x555f55ee1c80 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:588:4, line:594:35>
|   |-ParagraphComment 0x555f55ee1a20 <line:588:4>
|   | `-TextComment 0x555f55ee19f0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee1a40 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55ee1aa0 <col:11, col:49>
|   |   `-TextComment 0x555f55ee1a70 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x555f55ee1b40 <line:590:3, line:592:45>
|   | |-TextComment 0x555f55ee1ac0 <line:590:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x555f55ee1ae0 <line:591:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee1b00 <line:592:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee1b90 <line:594:3>
|   | `-TextComment 0x555f55ee1b60 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee1bb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee1c10 <col:11, col:35>
|       `-TextComment 0x555f55ee1be0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e0fd28 <line:610:1, line:614:1> line:610:21 k_ns_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e0fca0 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55dc4750 <line:611:1, line:614:1>
| `-FullComment 0x555f55ee1f60 <line:602:4, line:608:35>
|   |-ParagraphComment 0x555f55ee1d20 <line:602:4>
|   | `-TextComment 0x555f55ee1cf0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee1d40 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55ee1da0 <col:11, col:39>
|   |   `-TextComment 0x555f55ee1d70 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x555f55ee1e40 <line:604:3, line:606:44>
|   | |-TextComment 0x555f55ee1dc0 <line:604:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x555f55ee1de0 <line:605:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee1e00 <line:606:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee1e90 <line:608:3>
|   | `-TextComment 0x555f55ee1e60 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee1eb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee1f10 <col:11, col:35>
|       `-TextComment 0x555f55ee1ee0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc47f8 <line:624:1, line:628:1> line:624:21 k_ns_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55dc4770 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55dc4a48 <line:625:1, line:628:1>
| `-FullComment 0x555f55ee2240 <line:616:4, line:622:35>
|   |-ParagraphComment 0x555f55ee2000 <line:616:4>
|   | `-TextComment 0x555f55ee1fd0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee2020 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55ee2080 <col:11, col:39>
|   |   `-TextComment 0x555f55ee2050 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x555f55ee2120 <line:618:3, line:620:44>
|   | |-TextComment 0x555f55ee20a0 <line:618:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x555f55ee20c0 <line:619:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee20e0 <line:620:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee2170 <line:622:3>
|   | `-TextComment 0x555f55ee2140 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee2190 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee21f0 <col:11, col:35>
|       `-TextComment 0x555f55ee21c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc4af0 <line:638:1, line:642:1> line:638:21 k_ns_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55dc4a68 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55dc4d38 <line:639:1, line:642:1>
| `-FullComment 0x555f55ee2520 <line:630:4, line:636:35>
|   |-ParagraphComment 0x555f55ee22e0 <line:630:4>
|   | `-TextComment 0x555f55ee22b0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee2300 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55ee2360 <col:11, col:39>
|   |   `-TextComment 0x555f55ee2330 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x555f55ee2400 <line:632:3, line:634:37>
|   | |-TextComment 0x555f55ee2380 <line:632:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x555f55ee23a0 <line:633:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee23c0 <line:634:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee2450 <line:636:3>
|   | `-TextComment 0x555f55ee2420 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee2470 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee24d0 <col:11, col:35>
|       `-TextComment 0x555f55ee24a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc4de0 <line:652:1, line:656:1> line:652:21 k_ns_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55dc4d58 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55dc5028 <line:653:1, line:656:1>
| `-FullComment 0x555f55ee2800 <line:644:4, line:650:35>
|   |-ParagraphComment 0x555f55ee25c0 <line:644:4>
|   | `-TextComment 0x555f55ee2590 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee25e0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55ee2640 <col:11, col:39>
|   |   `-TextComment 0x555f55ee2610 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x555f55ee26e0 <line:646:3, line:648:37>
|   | |-TextComment 0x555f55ee2660 <line:646:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x555f55ee2680 <line:647:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee26a0 <line:648:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee2730 <line:650:3>
|   | `-TextComment 0x555f55ee2700 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee2750 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee27b0 <col:11, col:35>
|       `-TextComment 0x555f55ee2780 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc50d0 <line:666:1, line:670:1> line:666:21 k_ns_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55dc5048 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55dc5298 <line:667:1, line:670:1>
| `-FullComment 0x555f55ee2ae0 <line:658:4, line:664:35>
|   |-ParagraphComment 0x555f55ee28a0 <line:658:4>
|   | `-TextComment 0x555f55ee2870 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee28c0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55ee2920 <col:11, col:39>
|   |   `-TextComment 0x555f55ee28f0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x555f55ee29c0 <line:660:3, line:662:45>
|   | |-TextComment 0x555f55ee2940 <line:660:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x555f55ee2960 <line:661:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee2980 <line:662:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee2a10 <line:664:3>
|   | `-TextComment 0x555f55ee29e0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee2a30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee2a90 <col:11, col:35>
|       `-TextComment 0x555f55ee2a60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc5340 <line:680:1, line:684:1> line:680:21 k_ns_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55dc52b8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55dc5508 <line:681:1, line:684:1>
| `-FullComment 0x555f55ee2dc0 <line:672:4, line:678:35>
|   |-ParagraphComment 0x555f55ee2b80 <line:672:4>
|   | `-TextComment 0x555f55ee2b50 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee2ba0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55ee2c00 <col:11, col:39>
|   |   `-TextComment 0x555f55ee2bd0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x555f55ee2ca0 <line:674:3, line:676:45>
|   | |-TextComment 0x555f55ee2c20 <line:674:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x555f55ee2c40 <line:675:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee2c60 <line:676:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee2cf0 <line:678:3>
|   | `-TextComment 0x555f55ee2cc0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee2d10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee2d70 <col:11, col:35>
|       `-TextComment 0x555f55ee2d40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc55b0 <line:694:1, line:698:1> line:694:21 k_cyc_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55dc5528 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55dc5998 <line:695:1, line:698:1>
| | `-ReturnStmt 0x555f55dc5950 <line:697:2, col:65>
| |   `-ImplicitCastExpr 0x555f55dc5938 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55dc5818 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55dc5800 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55dc5658 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55dc5890 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55dc5878 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55dc5680 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55dc5528 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55dc58a8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55dc56e8 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55dc56d0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55dc56a8 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55dc58c0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55dc5710 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x555f55dc58d8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55dc5780 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55dc5760 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55dc5730 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55dc58f0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55dc57a0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55dc5908 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55dc57c0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x555f55dc5920 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55dc57e0 <col:16> 'int' 0
| `-FullComment 0x555f55ee30a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:686:4, line:692:35>
|   |-ParagraphComment 0x555f55ee2e60 <line:686:4>
|   | `-TextComment 0x555f55ee2e30 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee2e80 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ee2ee0 <col:11, col:50>
|   |   `-TextComment 0x555f55ee2eb0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x555f55ee2f80 <line:688:3, line:690:44>
|   | |-TextComment 0x555f55ee2f00 <line:688:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x555f55ee2f20 <line:689:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee2f40 <line:690:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee2fd0 <line:692:3>
|   | `-TextComment 0x555f55ee2fa0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee2ff0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee3050 <col:11, col:35>
|       `-TextComment 0x555f55ee3020 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc5a48 <line:708:1, line:712:1> line:708:21 k_cyc_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55dc59c0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55dc5de8 <line:709:1, line:712:1>
| | `-ReturnStmt 0x555f55dc5da8 <line:711:2, col:66>
| |   `-CallExpr 0x555f55dc5ca0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55dc5c88 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55dc5af0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55dc5d00 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55dc5b18 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55dc59c0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55dc5d18 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55dc5b80 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55dc5b68 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55dc5b40 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55dc5d30 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55dc5ba8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x555f55dc5d48 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55dc5c08 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55dc5be8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55dc5bc8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55dc5d60 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55dc5c28 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55dc5d78 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55dc5c48 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x555f55dc5d90 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55dc5c68 <col:16> 'int' 0
| `-FullComment 0x555f55ee3380 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:700:4, line:706:35>
|   |-ParagraphComment 0x555f55ee3140 <line:700:4>
|   | `-TextComment 0x555f55ee3110 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee3160 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ee31c0 <col:11, col:50>
|   |   `-TextComment 0x555f55ee3190 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x555f55ee3260 <line:702:3, line:704:44>
|   | |-TextComment 0x555f55ee31e0 <line:702:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x555f55ee3200 <line:703:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee3220 <line:704:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee32b0 <line:706:3>
|   | `-TextComment 0x555f55ee3280 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee32d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee3330 <col:11, col:35>
|       `-TextComment 0x555f55ee3300 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc5e98 <line:722:1, line:726:1> line:722:21 k_cyc_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55dc5e10 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55dc6268 <line:723:1, line:726:1>
| | `-ReturnStmt 0x555f55dc6228 <line:725:2, col:64>
| |   `-ImplicitCastExpr 0x555f55dc6210 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55dc60f0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55dc60d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55dc5f40 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55dc6168 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55dc6150 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55dc5f68 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55dc5e10 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55dc6180 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55dc5fd0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55dc5fb8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55dc5f90 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55dc6198 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55dc5ff8 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x555f55dc61b0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55dc6058 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55dc6038 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55dc6018 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55dc61c8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55dc6078 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55dc61e0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55dc6098 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x555f55dc61f8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55dc60b8 <col:16> 'int' 1
| `-FullComment 0x555f55ee3660 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:714:4, line:720:35>
|   |-ParagraphComment 0x555f55ee3420 <line:714:4>
|   | `-TextComment 0x555f55ee33f0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee3440 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ee34a0 <col:11, col:50>
|   |   `-TextComment 0x555f55ee3470 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x555f55ee3540 <line:716:3, line:718:37>
|   | |-TextComment 0x555f55ee34c0 <line:716:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x555f55ee34e0 <line:717:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee3500 <line:718:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee3590 <line:720:3>
|   | `-TextComment 0x555f55ee3560 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee35b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee3610 <col:11, col:35>
|       `-TextComment 0x555f55ee35e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc6318 <line:736:1, line:740:1> line:736:21 k_cyc_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55dc6290 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55dc66b8 <line:737:1, line:740:1>
| | `-ReturnStmt 0x555f55dc6678 <line:739:2, col:65>
| |   `-CallExpr 0x555f55dc6570 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55dc6558 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55dc63c0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55dc65d0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55dc63e8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55dc6290 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55dc65e8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55dc6450 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55dc6438 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55dc6410 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55dc6600 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55dc6478 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x555f55dc6618 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55dc64d8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55dc64b8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55dc6498 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55dc6630 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55dc64f8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55dc6648 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55dc6518 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x555f55dc6660 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55dc6538 <col:16> 'int' 1
| `-FullComment 0x555f55ee3940 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:728:4, line:734:35>
|   |-ParagraphComment 0x555f55ee3700 <line:728:4>
|   | `-TextComment 0x555f55ee36d0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee3720 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ee3780 <col:11, col:50>
|   |   `-TextComment 0x555f55ee3750 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x555f55ee3820 <line:730:3, line:732:37>
|   | |-TextComment 0x555f55ee37a0 <line:730:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x555f55ee37c0 <line:731:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee37e0 <line:732:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee3870 <line:734:3>
|   | `-TextComment 0x555f55ee3840 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee3890 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee38f0 <col:11, col:35>
|       `-TextComment 0x555f55ee38c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc6798 <line:750:1, line:754:1> line:750:21 k_cyc_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55dc66e0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55dc6b68 <line:751:1, line:754:1>
| | `-ReturnStmt 0x555f55dc6b28 <line:753:2, col:64>
| |   `-ImplicitCastExpr 0x555f55dc6b10 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55dc69f0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55dc69d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55dc6840 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55dc6a68 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55dc6a50 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55dc6868 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55dc66e0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55dc6a80 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55dc68d0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55dc68b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55dc6890 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55dc6a98 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55dc68f8 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x555f55dc6ab0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55dc6958 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55dc6938 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55dc6918 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55dc6ac8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55dc6978 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55dc6ae0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55dc6998 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x555f55dc6af8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55dc69b8 <col:16> 'int' 0
| `-FullComment 0x555f55ee3c20 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:742:4, line:748:35>
|   |-ParagraphComment 0x555f55ee39e0 <line:742:4>
|   | `-TextComment 0x555f55ee39b0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee3a00 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ee3a60 <col:11, col:50>
|   |   `-TextComment 0x555f55ee3a30 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x555f55ee3b00 <line:744:3, line:746:45>
|   | |-TextComment 0x555f55ee3a80 <line:744:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x555f55ee3aa0 <line:745:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee3ac0 <line:746:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee3b50 <line:748:3>
|   | `-TextComment 0x555f55ee3b20 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee3b70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee3bd0 <col:11, col:35>
|       `-TextComment 0x555f55ee3ba0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc6c18 <line:764:1, line:768:1> line:764:21 k_cyc_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55dc6b90 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55dc6fb8 <line:765:1, line:768:1>
| | `-ReturnStmt 0x555f55dc6f78 <line:767:2, col:65>
| |   `-CallExpr 0x555f55dc6e70 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55dc6e58 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55dc6cc0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55dc6ed0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55dc6ce8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55dc6b90 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55dc6ee8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55dc6d50 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55dc6d38 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55dc6d10 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55dc6f00 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55dc6d78 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x555f55dc6f18 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55dc6dd8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55dc6db8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55dc6d98 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55dc6f30 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55dc6df8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55dc6f48 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55dc6e18 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x555f55dc6f60 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55dc6e38 <col:16> 'int' 0
| `-FullComment 0x555f55ee3f10 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:756:4, line:762:35>
|   |-ParagraphComment 0x555f55ee3cd0 <line:756:4>
|   | `-TextComment 0x555f55ee3ca0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee3cf0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ee3d50 <col:11, col:50>
|   |   `-TextComment 0x555f55ee3d20 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x555f55ee3df0 <line:758:3, line:760:45>
|   | |-TextComment 0x555f55ee3d70 <line:758:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x555f55ee3d90 <line:759:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee3db0 <line:760:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee3e40 <line:762:3>
|   | `-TextComment 0x555f55ee3e10 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee3e60 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee3ec0 <col:11, col:35>
|       `-TextComment 0x555f55ee3e90 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc7068 <line:778:1, line:782:1> line:778:21 k_cyc_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55dc6fe0 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55dc7438 <line:779:1, line:782:1>
| | `-ReturnStmt 0x555f55dc73f8 <line:781:2, col:65>
| |   `-ImplicitCastExpr 0x555f55dc73e0 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55dc72c0 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55dc72a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55dc7110 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55dc7338 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55dc7320 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55dc7138 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55dc6fe0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55dc7350 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55dc71a0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55dc7188 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55dc7160 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55dc7368 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55dc71c8 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x555f55dc7380 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55dc7228 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55dc7208 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55dc71e8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55dc7398 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55dc7248 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55dc73b0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55dc7268 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x555f55dc73c8 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55dc7288 <col:16> 'int' 0
| `-FullComment 0x555f55ee41f0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:770:4, line:776:35>
|   |-ParagraphComment 0x555f55ee3fb0 <line:770:4>
|   | `-TextComment 0x555f55ee3f80 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee3fd0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ee4030 <col:11, col:50>
|   |   `-TextComment 0x555f55ee4000 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x555f55ee40d0 <line:772:3, line:774:44>
|   | |-TextComment 0x555f55ee4050 <line:772:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x555f55ee4070 <line:773:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee4090 <line:774:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee4120 <line:776:3>
|   | `-TextComment 0x555f55ee40f0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee4140 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee41a0 <col:11, col:35>
|       `-TextComment 0x555f55ee4170 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc74e8 <line:792:1, line:796:1> line:792:21 k_cyc_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55dc7460 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55dc78a8 <line:793:1, line:796:1>
| | `-ReturnStmt 0x555f55dc7868 <line:795:2, col:66>
| |   `-CallExpr 0x555f55dc7740 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55dc7728 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55dc7590 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55dc77c0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55dc75b8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55dc7460 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55dc77d8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55dc7620 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55dc7608 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55dc75e0 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55dc77f0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55dc7648 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x555f55dc7808 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55dc76a8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55dc7688 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55dc7668 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55dc7820 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55dc76c8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55dc7838 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55dc76e8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x555f55dc7850 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55dc7708 <col:16> 'int' 0
| `-FullComment 0x555f55ee44d0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:784:4, line:790:35>
|   |-ParagraphComment 0x555f55ee4290 <line:784:4>
|   | `-TextComment 0x555f55ee4260 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee42b0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ee4310 <col:11, col:50>
|   |   `-TextComment 0x555f55ee42e0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x555f55ee43b0 <line:786:3, line:788:44>
|   | |-TextComment 0x555f55ee4330 <line:786:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x555f55ee4350 <line:787:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee4370 <line:788:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee4400 <line:790:3>
|   | `-TextComment 0x555f55ee43d0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee4420 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee4480 <col:11, col:35>
|       `-TextComment 0x555f55ee4450 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc7958 <line:806:1, line:810:1> line:806:21 k_cyc_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55dc78d0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55dc7d28 <line:807:1, line:810:1>
| | `-ReturnStmt 0x555f55dc7ce8 <line:809:2, col:64>
| |   `-ImplicitCastExpr 0x555f55dc7cd0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55dc7bb0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55dc7b98 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55dc7a00 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55dc7c28 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55dc7c10 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55dc7a28 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55dc78d0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55dc7c40 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55dc7a90 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55dc7a78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55dc7a50 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55dc7c58 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55dc7ab8 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x555f55dc7c70 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55dc7b18 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55dc7af8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55dc7ad8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55dc7c88 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55dc7b38 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55dc7ca0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55dc7b58 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x555f55dc7cb8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55dc7b78 <col:16> 'int' 1
| `-FullComment 0x555f55ee47b0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:798:4, line:804:35>
|   |-ParagraphComment 0x555f55ee4570 <line:798:4>
|   | `-TextComment 0x555f55ee4540 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee4590 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ee45f0 <col:11, col:50>
|   |   `-TextComment 0x555f55ee45c0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x555f55ee4690 <line:800:3, line:802:37>
|   | |-TextComment 0x555f55ee4610 <line:800:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x555f55ee4630 <line:801:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee4650 <line:802:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee46e0 <line:804:3>
|   | `-TextComment 0x555f55ee46b0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee4700 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee4760 <col:11, col:35>
|       `-TextComment 0x555f55ee4730 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc7dd8 <line:820:1, line:824:1> line:820:21 k_cyc_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55dc7d50 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55dc8178 <line:821:1, line:824:1>
| | `-ReturnStmt 0x555f55dc8138 <line:823:2, col:65>
| |   `-CallExpr 0x555f55dc8030 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55dc8018 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55dc7e80 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55dc8090 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55dc7ea8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55dc7d50 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55dc80a8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55dc7f10 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55dc7ef8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55dc7ed0 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55dc80c0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55dc7f38 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x555f55dc80d8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55dc7f98 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55dc7f78 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55dc7f58 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55dc80f0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55dc7fb8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55dc8108 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55dc7fd8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x555f55dc8120 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55dc7ff8 <col:16> 'int' 1
| `-FullComment 0x555f55ee4a90 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:812:4, line:818:35>
|   |-ParagraphComment 0x555f55ee4850 <line:812:4>
|   | `-TextComment 0x555f55ee4820 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee4870 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ee48d0 <col:11, col:50>
|   |   `-TextComment 0x555f55ee48a0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x555f55ee4970 <line:814:3, line:816:37>
|   | |-TextComment 0x555f55ee48f0 <line:814:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x555f55ee4910 <line:815:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee4930 <line:816:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee49c0 <line:818:3>
|   | `-TextComment 0x555f55ee4990 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee49e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee4a40 <col:11, col:35>
|       `-TextComment 0x555f55ee4a10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc8228 <line:834:1, line:838:1> line:834:21 k_cyc_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55dc81a0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55dc85f8 <line:835:1, line:838:1>
| | `-ReturnStmt 0x555f55dc85b8 <line:837:2, col:64>
| |   `-ImplicitCastExpr 0x555f55dc85a0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55dc8480 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55dc8468 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55dc82d0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55dc84f8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55dc84e0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55dc82f8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55dc81a0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55dc8510 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55dc8360 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55dc8348 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55dc8320 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55dc8528 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55dc8388 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x555f55dc8540 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55dc83e8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55dc83c8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55dc83a8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55dc8558 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55dc8408 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55dc8570 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55dc8428 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x555f55dc8588 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55dc8448 <col:16> 'int' 0
| `-FullComment 0x555f55ee4d70 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:826:4, line:832:35>
|   |-ParagraphComment 0x555f55ee4b30 <line:826:4>
|   | `-TextComment 0x555f55ee4b00 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee4b50 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ee4bb0 <col:11, col:50>
|   |   `-TextComment 0x555f55ee4b80 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x555f55ee4c50 <line:828:3, line:830:45>
|   | |-TextComment 0x555f55ee4bd0 <line:828:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x555f55ee4bf0 <line:829:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee4c10 <line:830:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee4ca0 <line:832:3>
|   | `-TextComment 0x555f55ee4c70 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee4cc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee4d20 <col:11, col:35>
|       `-TextComment 0x555f55ee4cf0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc86a8 <line:848:1, line:852:1> line:848:21 k_cyc_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55dc8620 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55dc8a68 <line:849:1, line:852:1>
| | `-ReturnStmt 0x555f55dc8a20 <line:851:2, col:65>
| |   `-CallExpr 0x555f55dc8918 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55dc8900 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55dc8750 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55dc8978 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55dc8790 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55dc8620 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55dc8990 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55dc87f8 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55dc87e0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55dc87b8 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55dc89a8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55dc8820 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x555f55dc89c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55dc8880 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55dc8860 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55dc8840 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55dc89d8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55dc88a0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55dc89f0 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55dc88c0 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x555f55dc8a08 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55dc88e0 <col:16> 'int' 0
| `-FullComment 0x555f55ee5050 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:840:4, line:846:35>
|   |-ParagraphComment 0x555f55ee4e10 <line:840:4>
|   | `-TextComment 0x555f55ee4de0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee4e30 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55ee4e90 <col:11, col:50>
|   |   `-TextComment 0x555f55ee4e60 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x555f55ee4f30 <line:842:3, line:844:45>
|   | |-TextComment 0x555f55ee4eb0 <line:842:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x555f55ee4ed0 <line:843:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee4ef0 <line:844:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee4f80 <line:846:3>
|   | `-TextComment 0x555f55ee4f50 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee4fa0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee5000 <col:11, col:35>
|       `-TextComment 0x555f55ee4fd0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc8b18 <line:862:1, line:866:1> line:862:21 k_cyc_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55dc8a90 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55dc8ee8 <line:863:1, line:866:1>
| | `-ReturnStmt 0x555f55dc8ea8 <line:865:2, col:65>
| |   `-ImplicitCastExpr 0x555f55dc8e90 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55dc8d70 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55dc8d58 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55dc8bc0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55dc8de8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55dc8dd0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55dc8be8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55dc8a90 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55dc8e00 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55dc8c50 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55dc8c38 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55dc8c10 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55dc8e18 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55dc8c78 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x555f55dc8e30 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55dc8cd8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55dc8cb8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55dc8c98 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55dc8e48 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55dc8cf8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55dc8e60 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55dc8d18 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x555f55dc8e78 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55dc8d38 <col:16> 'int' 0
| `-FullComment 0x555f55ee5330 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:854:4, line:860:35>
|   |-ParagraphComment 0x555f55ee50f0 <line:854:4>
|   | `-TextComment 0x555f55ee50c0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee5110 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55ee5170 <col:11, col:49>
|   |   `-TextComment 0x555f55ee5140 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x555f55ee5210 <line:856:3, line:858:44>
|   | |-TextComment 0x555f55ee5190 <line:856:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x555f55ee51b0 <line:857:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee51d0 <line:858:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee5260 <line:860:3>
|   | `-TextComment 0x555f55ee5230 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee5280 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee52e0 <col:11, col:35>
|       `-TextComment 0x555f55ee52b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc8f98 <line:876:1, line:880:1> line:876:21 k_cyc_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55dc8f10 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55dc9338 <line:877:1, line:880:1>
| | `-ReturnStmt 0x555f55dc92f8 <line:879:2, col:66>
| |   `-CallExpr 0x555f55dc91f0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55dc91d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55dc9040 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55dc9250 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55dc9068 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55dc8f10 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55dc9268 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55dc90d0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55dc90b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55dc9090 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55dc9280 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55dc90f8 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x555f55dc9298 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55dc9158 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55dc9138 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55dc9118 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55dc92b0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55dc9178 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55dc92c8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55dc9198 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x555f55dc92e0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55dc91b8 <col:16> 'int' 0
| `-FullComment 0x555f55ee5610 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:868:4, line:874:35>
|   |-ParagraphComment 0x555f55ee53d0 <line:868:4>
|   | `-TextComment 0x555f55ee53a0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee53f0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55ee5450 <col:11, col:49>
|   |   `-TextComment 0x555f55ee5420 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x555f55ee54f0 <line:870:3, line:872:44>
|   | |-TextComment 0x555f55ee5470 <line:870:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x555f55ee5490 <line:871:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee54b0 <line:872:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee5540 <line:874:3>
|   | `-TextComment 0x555f55ee5510 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee5560 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee55c0 <col:11, col:35>
|       `-TextComment 0x555f55ee5590 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55dc93e8 <line:890:1, line:894:1> line:890:21 k_cyc_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55dc9360 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e1bfa8 <line:891:1, line:894:1>
| | `-ReturnStmt 0x555f55dc9778 <line:893:2, col:64>
| |   `-ImplicitCastExpr 0x555f55dc9760 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55dc9640 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55dc9628 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55dc9490 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55dc96b8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55dc96a0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55dc94b8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55dc9360 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55dc96d0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55dc9520 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55dc9508 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55dc94e0 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55dc96e8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55dc9548 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x555f55dc9700 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55dc95a8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55dc9588 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55dc9568 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55dc9718 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55dc95c8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55dc9730 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55dc95e8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x555f55dc9748 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55dc9608 <col:16> 'int' 1
| `-FullComment 0x555f55ee58f0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:882:4, line:888:35>
|   |-ParagraphComment 0x555f55ee56b0 <line:882:4>
|   | `-TextComment 0x555f55ee5680 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee56d0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55ee5730 <col:11, col:49>
|   |   `-TextComment 0x555f55ee5700 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x555f55ee57d0 <line:884:3, line:886:37>
|   | |-TextComment 0x555f55ee5750 <line:884:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x555f55ee5770 <line:885:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee5790 <line:886:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee5820 <line:888:3>
|   | `-TextComment 0x555f55ee57f0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee5840 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee58a0 <col:11, col:35>
|       `-TextComment 0x555f55ee5870 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e1c058 <line:904:1, line:908:1> line:904:21 k_cyc_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e1bfd0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e1c3f8 <line:905:1, line:908:1>
| | `-ReturnStmt 0x555f55e1c3b8 <line:907:2, col:65>
| |   `-CallExpr 0x555f55e1c2b0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e1c298 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55e1c100 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55e1c310 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e1c128 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e1bfd0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e1c328 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55e1c190 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55e1c178 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55e1c150 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55e1c340 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55e1c1b8 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x555f55e1c358 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55e1c218 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55e1c1f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55e1c1d8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e1c370 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e1c238 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e1c388 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e1c258 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x555f55e1c3a0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55e1c278 <col:16> 'int' 1
| `-FullComment 0x555f55ee5bd0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:896:4, line:902:35>
|   |-ParagraphComment 0x555f55ee5990 <line:896:4>
|   | `-TextComment 0x555f55ee5960 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee59b0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55ee5a10 <col:11, col:49>
|   |   `-TextComment 0x555f55ee59e0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x555f55ee5ab0 <line:898:3, line:900:37>
|   | |-TextComment 0x555f55ee5a30 <line:898:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x555f55ee5a50 <line:899:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee5a70 <line:900:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee5b00 <line:902:3>
|   | `-TextComment 0x555f55ee5ad0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee5b20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee5b80 <col:11, col:35>
|       `-TextComment 0x555f55ee5b50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e1c4a8 <line:918:1, line:922:1> line:918:21 k_cyc_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e1c420 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e1c878 <line:919:1, line:922:1>
| | `-ReturnStmt 0x555f55e1c838 <line:921:2, col:64>
| |   `-ImplicitCastExpr 0x555f55e1c820 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55e1c700 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55e1c6e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55e1c550 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x555f55e1c778 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x555f55e1c760 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555f55e1c578 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e1c420 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x555f55e1c790 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x555f55e1c5e0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x555f55e1c5c8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x555f55e1c5a0 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x555f55e1c7a8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x555f55e1c608 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x555f55e1c7c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x555f55e1c668 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x555f55e1c648 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x555f55e1c628 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x555f55e1c7d8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e1c688 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x555f55e1c7f0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x555f55e1c6a8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x555f55e1c808 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x555f55e1c6c8 <col:16> 'int' 0
| `-FullComment 0x555f55ee5ec0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:910:4, line:916:35>
|   |-ParagraphComment 0x555f55ee5c80 <line:910:4>
|   | `-TextComment 0x555f55ee5c40 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee5ca0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55ee5d00 <col:11, col:49>
|   |   `-TextComment 0x555f55ee5cd0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x555f55ee5da0 <line:912:3, line:914:45>
|   | |-TextComment 0x555f55ee5d20 <line:912:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x555f55ee5d40 <line:913:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee5d60 <line:914:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee5df0 <line:916:3>
|   | `-TextComment 0x555f55ee5dc0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee5e10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee5e70 <col:11, col:35>
|       `-TextComment 0x555f55ee5e40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e1c928 <line:932:1, line:936:1> line:932:21 k_cyc_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e1c8a0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e1ccc8 <line:933:1, line:936:1>
| | `-ReturnStmt 0x555f55e1cc88 <line:935:2, col:65>
| |   `-CallExpr 0x555f55e1cb80 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e1cb68 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55e1c9d0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x555f55e01790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x555f55e1cbe0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e1c9f8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x555f55e1c8a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x555f55e1cbf8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x555f55e1ca60 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x555f55e1ca48 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x555f55e1ca20 <col:18> 'int (void)' Function 0x555f55e01288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x555f55e1cc10 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x555f55e1ca88 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x555f55e1cc28 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x555f55e1cae8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x555f55e1cac8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x555f55e1caa8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e1cc40 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e1cb08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x555f55e1cc58 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x555f55e1cb28 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x555f55e1cc70 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x555f55e1cb48 <col:16> 'int' 0
| `-FullComment 0x555f55ee61a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:924:4, line:930:35>
|   |-ParagraphComment 0x555f55ee5f60 <line:924:4>
|   | `-TextComment 0x555f55ee5f30 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee5f80 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55ee5fe0 <col:11, col:49>
|   |   `-TextComment 0x555f55ee5fb0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x555f55ee6080 <line:926:3, line:928:45>
|   | |-TextComment 0x555f55ee6000 <line:926:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x555f55ee6020 <line:927:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee6040 <line:928:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee60d0 <line:930:3>
|   | `-TextComment 0x555f55ee60a0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee60f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee6150 <col:11, col:35>
|       `-TextComment 0x555f55ee6120 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e1cd78 <line:946:1, line:950:1> line:946:21 k_cyc_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e1ccf0 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e1cfd8 <line:947:1, line:950:1>
| `-FullComment 0x555f55ee6480 <line:938:4, line:944:35>
|   |-ParagraphComment 0x555f55ee6240 <line:938:4>
|   | `-TextComment 0x555f55ee6210 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee6260 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55ee62c0 <col:11, col:43>
|   |   `-TextComment 0x555f55ee6290 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x555f55ee6360 <line:940:3, line:942:44>
|   | |-TextComment 0x555f55ee62e0 <line:940:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x555f55ee6300 <line:941:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee6320 <line:942:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee63b0 <line:944:3>
|   | `-TextComment 0x555f55ee6380 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee63d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee6430 <col:11, col:35>
|       `-TextComment 0x555f55ee6400 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e1d080 <line:960:1, line:964:1> line:960:21 k_cyc_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e1cff8 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e1d2c8 <line:961:1, line:964:1>
| `-FullComment 0x555f55ee6760 <line:952:4, line:958:35>
|   |-ParagraphComment 0x555f55ee6520 <line:952:4>
|   | `-TextComment 0x555f55ee64f0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee6540 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55ee65a0 <col:11, col:43>
|   |   `-TextComment 0x555f55ee6570 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x555f55ee6640 <line:954:3, line:956:44>
|   | |-TextComment 0x555f55ee65c0 <line:954:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x555f55ee65e0 <line:955:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee6600 <line:956:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee6690 <line:958:3>
|   | `-TextComment 0x555f55ee6660 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee66b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee6710 <col:11, col:35>
|       `-TextComment 0x555f55ee66e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e1d370 <line:974:1, line:978:1> line:974:21 k_cyc_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e1d2e8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e1d5b8 <line:975:1, line:978:1>
| `-FullComment 0x555f55ee6a40 <line:966:4, line:972:35>
|   |-ParagraphComment 0x555f55ee6800 <line:966:4>
|   | `-TextComment 0x555f55ee67d0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee6820 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55ee6880 <col:11, col:43>
|   |   `-TextComment 0x555f55ee6850 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x555f55ee6920 <line:968:3, line:970:37>
|   | |-TextComment 0x555f55ee68a0 <line:968:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x555f55ee68c0 <line:969:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee68e0 <line:970:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee6970 <line:972:3>
|   | `-TextComment 0x555f55ee6940 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee6990 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee69f0 <col:11, col:35>
|       `-TextComment 0x555f55ee69c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e1d660 <line:988:1, line:992:1> line:988:21 k_cyc_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e1d5d8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e1d8a8 <line:989:1, line:992:1>
| `-FullComment 0x555f55ee6d20 <line:980:4, line:986:35>
|   |-ParagraphComment 0x555f55ee6ae0 <line:980:4>
|   | `-TextComment 0x555f55ee6ab0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee6b00 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55ee6b60 <col:11, col:43>
|   |   `-TextComment 0x555f55ee6b30 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x555f55ee6c00 <line:982:3, line:984:37>
|   | |-TextComment 0x555f55ee6b80 <line:982:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x555f55ee6ba0 <line:983:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee6bc0 <line:984:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee6c50 <line:986:3>
|   | `-TextComment 0x555f55ee6c20 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee6c70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee6cd0 <col:11, col:35>
|       `-TextComment 0x555f55ee6ca0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e1d950 <line:1002:1, line:1006:1> line:1002:21 k_cyc_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e1d8c8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e1db98 <line:1003:1, line:1006:1>
| `-FullComment 0x555f55ee7000 <line:994:4, line:1000:35>
|   |-ParagraphComment 0x555f55ee6dc0 <line:994:4>
|   | `-TextComment 0x555f55ee6d90 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee6de0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55ee6e40 <col:11, col:43>
|   |   `-TextComment 0x555f55ee6e10 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x555f55ee6ee0 <line:996:3, line:998:45>
|   | |-TextComment 0x555f55ee6e60 <line:996:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x555f55ee6e80 <line:997:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee6ea0 <line:998:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee6f30 <line:1000:3>
|   | `-TextComment 0x555f55ee6f00 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee6f50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee6fb0 <col:11, col:35>
|       `-TextComment 0x555f55ee6f80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e1dc40 <line:1016:1, line:1020:1> line:1016:21 k_cyc_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e1dbb8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e1de88 <line:1017:1, line:1020:1>
| `-FullComment 0x555f55ee72e0 <line:1008:4, line:1014:35>
|   |-ParagraphComment 0x555f55ee70a0 <line:1008:4>
|   | `-TextComment 0x555f55ee7070 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee70c0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55ee7120 <col:11, col:43>
|   |   `-TextComment 0x555f55ee70f0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x555f55ee71c0 <line:1010:3, line:1012:45>
|   | |-TextComment 0x555f55ee7140 <line:1010:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x555f55ee7160 <line:1011:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee7180 <line:1012:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee7210 <line:1014:3>
|   | `-TextComment 0x555f55ee71e0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee7230 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee7290 <col:11, col:35>
|       `-TextComment 0x555f55ee7260 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e1dfa0 <line:1030:1, line:1034:1> line:1030:21 k_ticks_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e1dea8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e1e168 <line:1031:1, line:1034:1>
| `-FullComment 0x555f55ee75c0 <line:1022:4, line:1028:35>
|   |-ParagraphComment 0x555f55ee7380 <line:1022:4>
|   | `-TextComment 0x555f55ee7350 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee73a0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ee7400 <col:11, col:40>
|   |   `-TextComment 0x555f55ee73d0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x555f55ee74a0 <line:1024:3, line:1026:44>
|   | |-TextComment 0x555f55ee7420 <line:1024:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x555f55ee7440 <line:1025:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee7460 <line:1026:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee74f0 <line:1028:3>
|   | `-TextComment 0x555f55ee74c0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee7510 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee7570 <col:11, col:35>
|       `-TextComment 0x555f55ee7540 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e1e210 <line:1044:1, line:1048:1> line:1044:21 used k_ticks_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e1e188 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e1e3d8 <line:1045:1, line:1048:1>
| `-FullComment 0x555f55ee78a0 <line:1036:4, line:1042:35>
|   |-ParagraphComment 0x555f55ee7660 <line:1036:4>
|   | `-TextComment 0x555f55ee7630 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee7680 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ee76e0 <col:11, col:40>
|   |   `-TextComment 0x555f55ee76b0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x555f55ee7780 <line:1038:3, line:1040:44>
|   | |-TextComment 0x555f55ee7700 <line:1038:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x555f55ee7720 <line:1039:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee7740 <line:1040:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee77d0 <line:1042:3>
|   | `-TextComment 0x555f55ee77a0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee77f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee7850 <col:11, col:35>
|       `-TextComment 0x555f55ee7820 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e1e480 <line:1058:1, line:1062:1> line:1058:21 k_ticks_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e1e3f8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e1e648 <line:1059:1, line:1062:1>
| `-FullComment 0x555f55ee7b80 <line:1050:4, line:1056:35>
|   |-ParagraphComment 0x555f55ee7940 <line:1050:4>
|   | `-TextComment 0x555f55ee7910 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee7960 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ee79c0 <col:11, col:40>
|   |   `-TextComment 0x555f55ee7990 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x555f55ee7a60 <line:1052:3, line:1054:37>
|   | |-TextComment 0x555f55ee79e0 <line:1052:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x555f55ee7a00 <line:1053:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee7a20 <line:1054:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee7ab0 <line:1056:3>
|   | `-TextComment 0x555f55ee7a80 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee7ad0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee7b30 <col:11, col:35>
|       `-TextComment 0x555f55ee7b00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e1e6f0 <line:1072:1, line:1076:1> line:1072:21 k_ticks_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e1e668 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e1e8b8 <line:1073:1, line:1076:1>
| `-FullComment 0x555f55ee7e70 <line:1064:4, line:1070:35>
|   |-ParagraphComment 0x555f55ee7c20 <line:1064:4>
|   | `-TextComment 0x555f55ee7bf0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee7c40 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ee7cb0 <col:11, col:40>
|   |   `-TextComment 0x555f55ee7c80 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x555f55ee7d50 <line:1066:3, line:1068:37>
|   | |-TextComment 0x555f55ee7cd0 <line:1066:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x555f55ee7cf0 <line:1067:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee7d10 <line:1068:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee7da0 <line:1070:3>
|   | `-TextComment 0x555f55ee7d70 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee7dc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee7e20 <col:11, col:35>
|       `-TextComment 0x555f55ee7df0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e1e960 <line:1086:1, line:1090:1> line:1086:21 k_ticks_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e1e8d8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e1eb28 <line:1087:1, line:1090:1>
| `-FullComment 0x555f55ee8150 <line:1078:4, line:1084:35>
|   |-ParagraphComment 0x555f55ee7f10 <line:1078:4>
|   | `-TextComment 0x555f55ee7ee0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee7f30 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ee7f90 <col:11, col:40>
|   |   `-TextComment 0x555f55ee7f60 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x555f55ee8030 <line:1080:3, line:1082:45>
|   | |-TextComment 0x555f55ee7fb0 <line:1080:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x555f55ee7fd0 <line:1081:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee7ff0 <line:1082:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee8080 <line:1084:3>
|   | `-TextComment 0x555f55ee8050 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee80a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee8100 <col:11, col:35>
|       `-TextComment 0x555f55ee80d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e1ebd0 <line:1100:1, line:1104:1> line:1100:21 k_ticks_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e1eb48 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e1ed98 <line:1101:1, line:1104:1>
| `-FullComment 0x555f55ee8430 <line:1092:4, line:1098:35>
|   |-ParagraphComment 0x555f55ee81f0 <line:1092:4>
|   | `-TextComment 0x555f55ee81c0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee8210 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ee8270 <col:11, col:40>
|   |   `-TextComment 0x555f55ee8240 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x555f55ee8310 <line:1094:3, line:1096:45>
|   | |-TextComment 0x555f55ee8290 <line:1094:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x555f55ee82b0 <line:1095:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee82d0 <line:1096:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee8360 <line:1098:3>
|   | `-TextComment 0x555f55ee8330 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee8380 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee83e0 <col:11, col:35>
|       `-TextComment 0x555f55ee83b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e1ee40 <line:1114:1, line:1118:1> line:1114:21 k_ticks_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e1edb8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e20028 <line:1115:1, line:1118:1>
| `-FullComment 0x555f55ee8710 <line:1106:4, line:1112:35>
|   |-ParagraphComment 0x555f55ee84d0 <line:1106:4>
|   | `-TextComment 0x555f55ee84a0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee84f0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ee8550 <col:11, col:40>
|   |   `-TextComment 0x555f55ee8520 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x555f55ee85f0 <line:1108:3, line:1110:44>
|   | |-TextComment 0x555f55ee8570 <line:1108:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x555f55ee8590 <line:1109:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee85b0 <line:1110:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee8640 <line:1112:3>
|   | `-TextComment 0x555f55ee8610 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee8660 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee86c0 <col:11, col:35>
|       `-TextComment 0x555f55ee8690 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e200d0 <line:1128:1, line:1132:1> line:1128:21 k_ticks_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e20048 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e20298 <line:1129:1, line:1132:1>
| `-FullComment 0x555f55ee89f0 <line:1120:4, line:1126:35>
|   |-ParagraphComment 0x555f55ee87b0 <line:1120:4>
|   | `-TextComment 0x555f55ee8780 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee87d0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ee8830 <col:11, col:40>
|   |   `-TextComment 0x555f55ee8800 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x555f55ee88d0 <line:1122:3, line:1124:44>
|   | |-TextComment 0x555f55ee8850 <line:1122:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x555f55ee8870 <line:1123:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee8890 <line:1124:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee8920 <line:1126:3>
|   | `-TextComment 0x555f55ee88f0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee8940 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee89a0 <col:11, col:35>
|       `-TextComment 0x555f55ee8970 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e20340 <line:1142:1, line:1146:1> line:1142:21 k_ticks_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e202b8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e20508 <line:1143:1, line:1146:1>
| `-FullComment 0x555f55ee8cd0 <line:1134:4, line:1140:35>
|   |-ParagraphComment 0x555f55ee8a90 <line:1134:4>
|   | `-TextComment 0x555f55ee8a60 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee8ab0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ee8b10 <col:11, col:40>
|   |   `-TextComment 0x555f55ee8ae0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x555f55ee8bb0 <line:1136:3, line:1138:37>
|   | |-TextComment 0x555f55ee8b30 <line:1136:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x555f55ee8b50 <line:1137:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee8b70 <line:1138:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee8c00 <line:1140:3>
|   | `-TextComment 0x555f55ee8bd0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee8c20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee8c80 <col:11, col:35>
|       `-TextComment 0x555f55ee8c50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e205b0 <line:1156:1, line:1160:1> line:1156:21 k_ticks_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e20528 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e20778 <line:1157:1, line:1160:1>
| `-FullComment 0x555f55ee8fb0 <line:1148:4, line:1154:35>
|   |-ParagraphComment 0x555f55ee8d70 <line:1148:4>
|   | `-TextComment 0x555f55ee8d40 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee8d90 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ee8df0 <col:11, col:40>
|   |   `-TextComment 0x555f55ee8dc0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x555f55ee8e90 <line:1150:3, line:1152:37>
|   | |-TextComment 0x555f55ee8e10 <line:1150:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x555f55ee8e30 <line:1151:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee8e50 <line:1152:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee8ee0 <line:1154:3>
|   | `-TextComment 0x555f55ee8eb0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee8f00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee8f60 <col:11, col:35>
|       `-TextComment 0x555f55ee8f30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e20820 <line:1170:1, line:1174:1> line:1170:21 k_ticks_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e20798 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e209e8 <line:1171:1, line:1174:1>
| `-FullComment 0x555f55ee9290 <line:1162:4, line:1168:35>
|   |-ParagraphComment 0x555f55ee9050 <line:1162:4>
|   | `-TextComment 0x555f55ee9020 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee9070 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ee90d0 <col:11, col:40>
|   |   `-TextComment 0x555f55ee90a0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x555f55ee9170 <line:1164:3, line:1166:45>
|   | |-TextComment 0x555f55ee90f0 <line:1164:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x555f55ee9110 <line:1165:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee9130 <line:1166:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee91c0 <line:1168:3>
|   | `-TextComment 0x555f55ee9190 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee91e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee9240 <col:11, col:35>
|       `-TextComment 0x555f55ee9210 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e20a90 <line:1184:1, line:1188:1> line:1184:21 k_ticks_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e20a08 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e20c58 <line:1185:1, line:1188:1>
| `-FullComment 0x555f55ee9570 <line:1176:4, line:1182:35>
|   |-ParagraphComment 0x555f55ee9330 <line:1176:4>
|   | `-TextComment 0x555f55ee9300 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee9350 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55ee93b0 <col:11, col:40>
|   |   `-TextComment 0x555f55ee9380 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x555f55ee9450 <line:1178:3, line:1180:45>
|   | |-TextComment 0x555f55ee93d0 <line:1178:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x555f55ee93f0 <line:1179:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee9410 <line:1180:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55ee94a0 <line:1182:3>
|   | `-TextComment 0x555f55ee9470 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee94c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee9520 <col:11, col:35>
|       `-TextComment 0x555f55ee94f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e20d00 <line:1198:1, line:1202:1> line:1198:21 k_ticks_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e20c78 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e20ec8 <line:1199:1, line:1202:1>
| `-FullComment 0x555f55ee9850 <line:1190:4, line:1196:35>
|   |-ParagraphComment 0x555f55ee9610 <line:1190:4>
|   | `-TextComment 0x555f55ee95e0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee9630 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55ee9690 <col:11, col:39>
|   |   `-TextComment 0x555f55ee9660 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x555f55ee9730 <line:1192:3, line:1194:44>
|   | |-TextComment 0x555f55ee96b0 <line:1192:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x555f55ee96d0 <line:1193:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee96f0 <line:1194:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee9780 <line:1196:3>
|   | `-TextComment 0x555f55ee9750 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee97a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee9800 <col:11, col:35>
|       `-TextComment 0x555f55ee97d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e20fd0 <line:1212:1, line:1216:1> line:1212:21 k_ticks_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e20ee8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e21198 <line:1213:1, line:1216:1>
| `-FullComment 0x555f55ee9b30 <line:1204:4, line:1210:35>
|   |-ParagraphComment 0x555f55ee98f0 <line:1204:4>
|   | `-TextComment 0x555f55ee98c0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee9910 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55ee9970 <col:11, col:39>
|   |   `-TextComment 0x555f55ee9940 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x555f55ee9a10 <line:1206:3, line:1208:44>
|   | |-TextComment 0x555f55ee9990 <line:1206:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x555f55ee99b0 <line:1207:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee99d0 <line:1208:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55ee9a60 <line:1210:3>
|   | `-TextComment 0x555f55ee9a30 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee9a80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee9ae0 <col:11, col:35>
|       `-TextComment 0x555f55ee9ab0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e21240 <line:1226:1, line:1230:1> line:1226:21 k_ticks_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e211b8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e21408 <line:1227:1, line:1230:1>
| `-FullComment 0x555f55ee9e30 <line:1218:4, line:1224:35>
|   |-ParagraphComment 0x555f55ee9bd0 <line:1218:4>
|   | `-TextComment 0x555f55ee9ba0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee9bf0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55ee9c50 <col:11, col:39>
|   |   `-TextComment 0x555f55ee9c20 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x555f55ee9d10 <line:1220:3, line:1222:37>
|   | |-TextComment 0x555f55ee9c90 <line:1220:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x555f55ee9cb0 <line:1221:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55ee9cd0 <line:1222:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55ee9d60 <line:1224:3>
|   | `-TextComment 0x555f55ee9d30 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ee9d80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55ee9de0 <col:11, col:35>
|       `-TextComment 0x555f55ee9db0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e214b0 <line:1240:1, line:1244:1> line:1240:21 k_ticks_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e21428 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e21678 <line:1241:1, line:1244:1>
| `-FullComment 0x555f55eea110 <line:1232:4, line:1238:35>
|   |-ParagraphComment 0x555f55ee9ed0 <line:1232:4>
|   | `-TextComment 0x555f55ee9ea0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55ee9ef0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55ee9f50 <col:11, col:39>
|   |   `-TextComment 0x555f55ee9f20 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x555f55ee9ff0 <line:1234:3, line:1236:37>
|   | |-TextComment 0x555f55ee9f70 <line:1234:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x555f55ee9f90 <line:1235:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55ee9fb0 <line:1236:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55eea040 <line:1238:3>
|   | `-TextComment 0x555f55eea010 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eea060 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55eea0c0 <col:11, col:35>
|       `-TextComment 0x555f55eea090 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e21720 <line:1254:1, line:1258:1> line:1254:21 k_ticks_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e21698 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e218e8 <line:1255:1, line:1258:1>
| `-FullComment 0x555f55eea3f0 <line:1246:4, line:1252:35>
|   |-ParagraphComment 0x555f55eea1b0 <line:1246:4>
|   | `-TextComment 0x555f55eea180 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55eea1d0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55eea230 <col:11, col:39>
|   |   `-TextComment 0x555f55eea200 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x555f55eea2d0 <line:1248:3, line:1250:45>
|   | |-TextComment 0x555f55eea250 <line:1248:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x555f55eea270 <line:1249:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55eea290 <line:1250:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55eea320 <line:1252:3>
|   | `-TextComment 0x555f55eea2f0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eea340 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55eea3a0 <col:11, col:35>
|       `-TextComment 0x555f55eea370 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e21990 <line:1268:1, line:1272:1> line:1268:21 k_ticks_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e21908 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e21b58 <line:1269:1, line:1272:1>
| `-FullComment 0x555f55eea6d0 <line:1260:4, line:1266:35>
|   |-ParagraphComment 0x555f55eea490 <line:1260:4>
|   | `-TextComment 0x555f55eea460 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55eea4b0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55eea510 <col:11, col:39>
|   |   `-TextComment 0x555f55eea4e0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x555f55eea5b0 <line:1262:3, line:1264:45>
|   | |-TextComment 0x555f55eea530 <line:1262:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x555f55eea550 <line:1263:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55eea570 <line:1264:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55eea600 <line:1266:3>
|   | `-TextComment 0x555f55eea5d0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eea620 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55eea680 <col:11, col:35>
|       `-TextComment 0x555f55eea650 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e21c00 <line:1282:1, line:1286:1> line:1282:21 k_ticks_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e21b78 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e21e48 <line:1283:1, line:1286:1>
| `-FullComment 0x555f55eea9b0 <line:1274:4, line:1280:35>
|   |-ParagraphComment 0x555f55eea770 <line:1274:4>
|   | `-TextComment 0x555f55eea740 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55eea790 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55eea7f0 <col:11, col:43>
|   |   `-TextComment 0x555f55eea7c0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x555f55eea890 <line:1276:3, line:1278:44>
|   | |-TextComment 0x555f55eea810 <line:1276:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x555f55eea830 <line:1277:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55eea850 <line:1278:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55eea8e0 <line:1280:3>
|   | `-TextComment 0x555f55eea8b0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eea900 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55eea960 <col:11, col:35>
|       `-TextComment 0x555f55eea930 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e21ef0 <line:1296:1, line:1300:1> line:1296:21 k_ticks_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e21e68 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e22158 <line:1297:1, line:1300:1>
| `-FullComment 0x555f55eeac90 <line:1288:4, line:1294:35>
|   |-ParagraphComment 0x555f55eeaa50 <line:1288:4>
|   | `-TextComment 0x555f55eeaa20 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55eeaa70 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55eeaad0 <col:11, col:43>
|   |   `-TextComment 0x555f55eeaaa0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x555f55eeab70 <line:1290:3, line:1292:44>
|   | |-TextComment 0x555f55eeaaf0 <line:1290:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x555f55eeab10 <line:1291:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55eeab30 <line:1292:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x555f55eeabc0 <line:1294:3>
|   | `-TextComment 0x555f55eeab90 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eeabe0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55eeac40 <col:11, col:35>
|       `-TextComment 0x555f55eeac10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e22200 <line:1310:1, line:1314:1> line:1310:21 k_ticks_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e22178 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e22448 <line:1311:1, line:1314:1>
| `-FullComment 0x555f55eeaf70 <line:1302:4, line:1308:35>
|   |-ParagraphComment 0x555f55eead30 <line:1302:4>
|   | `-TextComment 0x555f55eead00 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55eead50 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55eeadb0 <col:11, col:43>
|   |   `-TextComment 0x555f55eead80 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x555f55eeae50 <line:1304:3, line:1306:37>
|   | |-TextComment 0x555f55eeadd0 <line:1304:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x555f55eeadf0 <line:1305:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55eeae10 <line:1306:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55eeaea0 <line:1308:3>
|   | `-TextComment 0x555f55eeae70 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eeaec0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55eeaf20 <col:11, col:35>
|       `-TextComment 0x555f55eeaef0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e224f0 <line:1324:1, line:1328:1> line:1324:21 k_ticks_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e22468 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e22738 <line:1325:1, line:1328:1>
| `-FullComment 0x555f55eeb250 <line:1316:4, line:1322:35>
|   |-ParagraphComment 0x555f55eeb010 <line:1316:4>
|   | `-TextComment 0x555f55eeafe0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55eeb030 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55eeb090 <col:11, col:43>
|   |   `-TextComment 0x555f55eeb060 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x555f55eeb130 <line:1318:3, line:1320:37>
|   | |-TextComment 0x555f55eeb0b0 <line:1318:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x555f55eeb0d0 <line:1319:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55eeb0f0 <line:1320:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x555f55eeb180 <line:1322:3>
|   | `-TextComment 0x555f55eeb150 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eeb1a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55eeb200 <col:11, col:35>
|       `-TextComment 0x555f55eeb1d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e227e0 <line:1338:1, line:1342:1> line:1338:21 k_ticks_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x555f55e22758 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e22a28 <line:1339:1, line:1342:1>
| `-FullComment 0x555f55eeb530 <line:1330:4, line:1336:35>
|   |-ParagraphComment 0x555f55eeb2f0 <line:1330:4>
|   | `-TextComment 0x555f55eeb2c0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55eeb310 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55eeb370 <col:11, col:43>
|   |   `-TextComment 0x555f55eeb340 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x555f55eeb410 <line:1332:3, line:1334:45>
|   | |-TextComment 0x555f55eeb390 <line:1332:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x555f55eeb3b0 <line:1333:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x555f55eeb3d0 <line:1334:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55eeb460 <line:1336:3>
|   | `-TextComment 0x555f55eeb430 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eeb480 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55eeb4e0 <col:11, col:35>
|       `-TextComment 0x555f55eeb4b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e22ad0 <line:1352:1, line:1356:1> line:1352:21 k_ticks_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x555f55e22a48 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x555f55e22d78 <line:1353:1, line:1356:1>
| `-FullComment 0x555f55eeb810 <line:1344:4, line:1350:35>
|   |-ParagraphComment 0x555f55eeb5d0 <line:1344:4>
|   | `-TextComment 0x555f55eeb5a0 <col:4> Text=" "
|   |-BlockCommandComment 0x555f55eeb5f0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55eeb650 <col:11, col:43>
|   |   `-TextComment 0x555f55eeb620 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x555f55eeb6f0 <line:1346:3, line:1348:45>
|   | |-TextComment 0x555f55eeb670 <line:1346:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x555f55eeb690 <line:1347:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x555f55eeb6b0 <line:1348:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x555f55eeb740 <line:1350:3>
|   | `-TextComment 0x555f55eeb710 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eeb760 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x555f55eeb7c0 <col:11, col:35>
|       `-TextComment 0x555f55eeb790 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x555f55e22e18 </vagrant/ext/zephyros/zephyr/include/sys_clock.h:117:1, col:25> col:7 z_tick_get_32 'u32_t (void)'
| `-FullComment 0x555f55eebaa0 <line:112:3, line:116:1>
|   |-ParagraphComment 0x555f55eeb8b0 <line:112:3>
|   | `-TextComment 0x555f55eeb880 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eeb8d0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x555f55eeb930 <col:10, col:64>
|   |   `-TextComment 0x555f55eeb900 <col:10, col:64> Text=" Return the lower part of the current system tick count"
|   |-ParagraphComment 0x555f55eeb980 <line:114:3>
|   | `-TextComment 0x555f55eeb950 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eeb9a0 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x555f55eeba00 <col:11, col:40>
|   |   `-TextComment 0x555f55eeb9d0 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x555f55eeba50 <line:116:1>
|     `-TextComment 0x555f55eeba20 <col:1> Text=" "
|-FunctionDecl 0x555f55e25010 <line:126:1, col:22> col:7 z_tick_get 's64_t (void)'
| `-FullComment 0x555f55eebd40 <line:121:3, line:125:1>
|   |-ParagraphComment 0x555f55eebb40 <line:121:3>
|   | `-TextComment 0x555f55eebb10 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eebb60 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x555f55eebbc0 <col:10, col:46>
|   |   `-TextComment 0x555f55eebb90 <col:10, col:46> Text=" Return the current system tick count"
|   |-ParagraphComment 0x555f55eebc10 <line:123:3>
|   | `-TextComment 0x555f55eebbe0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eebc30 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x555f55eebca0 <col:11, col:40>
|   |   `-TextComment 0x555f55eebc60 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x555f55eebcf0 <line:125:1>
|     `-TextComment 0x555f55eebcc0 <col:1> Text=" "
|-RecordDecl 0x555f55e250b0 <line:135:1, col:8> col:8 struct _timeout
|-TypedefDecl 0x555f55e253b0 <line:136:1, col:51> col:16 referenced _timeout_func_t 'void (*)(struct _timeout *)'
| `-PointerType 0x555f55e25350 'void (*)(struct _timeout *)'
|   `-ParenType 0x555f55e252f0 'void (struct _timeout *)' sugar
|     `-FunctionProtoType 0x555f55e252b0 'void (struct _timeout *)' cdecl
|       |-BuiltinType 0x555f55ca06f0 'void'
|       `-PointerType 0x555f55e251c0 'struct _timeout *'
|         `-ElaboratedType 0x555f55e25160 'struct _timeout' sugar
|           `-RecordType 0x555f55e25140 'struct _timeout'
|             `-Record 0x555f55e25408 '_timeout'
|-RecordDecl 0x555f55e25408 prev 0x555f55e250b0 <line:138:1, line:142:1> line:138:8 struct _timeout definition
| |-FieldDecl 0x555f55e254a0 <line:139:2, col:14> col:14 node 'sys_dnode_t':'struct _dnode'
| |-FieldDecl 0x555f55e25520 <line:140:2, col:8> col:8 dticks 's32_t':'int'
| `-FieldDecl 0x555f55e255a0 <line:141:2, col:18> col:18 fn '_timeout_func_t':'void (*)(struct _timeout *)'
|-RecordDecl 0x555f55e255e8 </vagrant/ext/zephyros/zephyr/include/spinlock.h:25:1, line:27:1> line:25:8 struct k_spinlock_key definition
| `-FieldDecl 0x555f55e256a8 <line:26:2, col:6> col:6 referenced key 'int'
|-TypedefDecl 0x555f55e25740 <line:29:1, col:31> col:31 referenced k_spinlock_key_t 'struct k_spinlock_key':'struct k_spinlock_key'
| `-ElaboratedType 0x555f55e256f0 'struct k_spinlock_key' sugar
|   `-RecordType 0x555f55e25670 'struct k_spinlock_key'
|     `-Record 0x555f55e255e8 'k_spinlock_key'
|-RecordDecl 0x555f55e25798 <line:31:1, line:60:1> line:31:8 struct k_spinlock definition
|-FunctionDecl 0x555f55e25a10 <line:62:1, line:86:1> line:62:39 k_spin_lock 'k_spinlock_key_t (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x555f55e25910 <col:51, col:70> col:70 used l 'struct k_spinlock *'
| |-CompoundStmt 0x555f55e25e28 <line:63:1, line:86:1>
| | |-CStyleCastExpr 0x555f55e25ba0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x555f55e25b88 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x555f55e25b68 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x555f55e25b00 </vagrant/ext/zephyros/zephyr/include/spinlock.h:64:13> 'struct k_spinlock *' lvalue ParmVar 0x555f55e25910 'l' 'struct k_spinlock *'
| | |-DeclStmt 0x555f55e25c38 <line:65:2, col:20>
| | | `-VarDecl 0x555f55e25bd8 <col:2, col:19> col:19 used k 'k_spinlock_key_t':'struct k_spinlock_key'
| | |-BinaryOperator 0x555f55e25d60 <line:71:2, col:24> 'int' '='
| | | |-MemberExpr 0x555f55e25c78 <col:2, col:4> 'int' lvalue .key 0x555f55e256a8
| | | | `-DeclRefExpr 0x555f55e25c50 <col:2> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x555f55e25bd8 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| | | `-ImplicitCastExpr 0x555f55e25d48 <col:10, col:24> 'int' <IntegralCast>
| | |   `-CallExpr 0x555f55e25d20 <col:10, col:24> 'unsigned int'
| | |     `-ImplicitCastExpr 0x555f55e25d08 <col:10> 'unsigned int (*)(void)' <FunctionToPointerDecay>
| | |       `-DeclRefExpr 0x555f55e25cb0 <col:10> 'unsigned int (void)' Function 0x555f55e00190 'arch_irq_lock' 'unsigned int (void)'
| | `-ReturnStmt 0x555f55e25e10 <line:85:2, col:9>
| |   `-ImplicitCastExpr 0x555f55e25df8 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' <LValueToRValue>
| |     `-DeclRefExpr 0x555f55e25dd0 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x555f55e25bd8 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x555f55e25ab8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x555f55e27d70 </vagrant/ext/zephyros/zephyr/include/spinlock.h:88:1, line:107:1> line:88:27 k_spin_unlock 'void (struct k_spinlock *, k_spinlock_key_t)' static inline
| |-ParmVarDecl 0x555f55e25e80 <col:41, col:60> col:60 used l 'struct k_spinlock *'
| |-ParmVarDecl 0x555f55e25ef0 <line:89:6, col:23> col:23 used key 'k_spinlock_key_t':'struct k_spinlock_key'
| |-CompoundStmt 0x555f55e28060 <line:90:1, line:107:1>
| | |-CStyleCastExpr 0x555f55e27f08 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x555f55e27ef0 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x555f55e27ed0 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x555f55e27e68 </vagrant/ext/zephyros/zephyr/include/spinlock.h:91:13> 'struct k_spinlock *' lvalue ParmVar 0x555f55e25e80 'l' 'struct k_spinlock *'
| | `-CallExpr 0x555f55e28000 <line:106:2, col:25> 'void'
| |   |-ImplicitCastExpr 0x555f55e27fe8 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x555f55e27f30 <col:2> 'void (unsigned int)' Function 0x555f55e002f8 'arch_irq_unlock' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x555f55e28048 <col:18, col:22> 'unsigned int' <IntegralCast>
| |     `-ImplicitCastExpr 0x555f55e28030 <col:18, col:22> 'int' <LValueToRValue>
| |       `-MemberExpr 0x555f55e27f80 <col:18, col:22> 'int' lvalue .key 0x555f55e256a8
| |         `-DeclRefExpr 0x555f55e27f58 <col:18> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue ParmVar 0x555f55e25ef0 'key' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x555f55e27e20 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x555f55e281b0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:112:1, line:121:1> line:112:27 k_spin_release 'void (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x555f55e280a8 <col:42, col:61> col:61 used l 'struct k_spinlock *'
| |-CompoundStmt 0x555f55e283c8 <line:113:1, line:121:1>
| | `-CStyleCastExpr 0x555f55e28340 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x555f55e28328 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| |     `-ParenExpr 0x555f55e28308 <col:29, col:31> 'struct k_spinlock *' lvalue
| |       `-DeclRefExpr 0x555f55e282a0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:114:13> 'struct k_spinlock *' lvalue ParmVar 0x555f55e280a8 'l' 'struct k_spinlock *'
| `-AlwaysInlineAttr 0x555f55e28258 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-EnumDecl 0x555f55e283e0 </vagrant/ext/zephyros/zephyr/include/fatal.h:23:1, line:42:1> line:23:6 k_fatal_error_reason
| |-FullComment 0x555f55eebfa0 <line:18:3, line:20:5>
| | |-ParagraphComment 0x555f55eebde0 <line:18:3>
| | | `-TextComment 0x555f55eebdb0 <col:3> Text=" "
| | |-VerbatimLineComment 0x555f55eebe00 <col:4, col:41> Text=" fatal_apis Fatal error APIs"
| | |-ParagraphComment 0x555f55eebe70 <line:19:3>
| | | `-TextComment 0x555f55eebe40 <col:3> Text=" "
| | |-VerbatimLineComment 0x555f55eebe90 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x555f55eebf50 <line:20:3, col:5>
| |   |-TextComment 0x555f55eebed0 <col:3> Text=" "
| |   |-TextComment 0x555f55eebef0 <col:4> Text="@"
| |   `-TextComment 0x555f55eebf10 <col:5> Text="{"
| |-EnumConstantDecl 0x555f55e284c8 <line:25:2> col:2 K_ERR_CPU_EXCEPTION 'int'
| | `-FullComment 0x555f55eec070 <line:24:5, col:55>
| |   `-ParagraphComment 0x555f55eec040 <col:5, col:55>
| |     `-TextComment 0x555f55eec010 <col:5, col:55> Text=" Generic CPU exception, not covered by other codes "
| |-EnumConstantDecl 0x555f55e28538 <line:28:2> col:2 K_ERR_SPURIOUS_IRQ 'int'
| | `-FullComment 0x555f55eec140 <line:27:5, col:34>
| |   `-ParagraphComment 0x555f55eec110 <col:5, col:34>
| |     `-TextComment 0x555f55eec0e0 <col:5, col:34> Text=" Unhandled hardware interrupt "
| |-EnumConstantDecl 0x555f55e285a8 <line:31:2> col:2 K_ERR_STACK_CHK_FAIL 'int'
| | `-FullComment 0x555f55eec210 <line:30:5, col:50>
| |   `-ParagraphComment 0x555f55eec1e0 <col:5, col:50>
| |     `-TextComment 0x555f55eec1b0 <col:5, col:50> Text=" Faulting context overflowed its stack buffer "
| |-EnumConstantDecl 0x555f55e28618 <line:34:2> col:2 K_ERR_KERNEL_OOPS 'int'
| | `-FullComment 0x555f55eec2e0 <line:33:5, col:38>
| |   `-ParagraphComment 0x555f55eec2b0 <col:5, col:38>
| |     `-TextComment 0x555f55eec280 <col:5, col:38> Text=" Moderate severity software error "
| `-EnumConstantDecl 0x555f55e28688 <line:37:2> col:2 K_ERR_KERNEL_PANIC 'int'
|   `-FullComment 0x555f55eec3b0 <line:36:5, col:34>
|     `-ParagraphComment 0x555f55eec380 <col:5, col:34>
|       `-TextComment 0x555f55eec350 <col:5, col:34> Text=" High severity software error "
|-FunctionDecl 0x555f55e287d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:86:26, /vagrant/ext/zephyros/zephyr/include/fatal.h:52:52> col:20 k_fatal_halt 'void (unsigned int) __attribute__((noreturn))'
| |-ParmVarDecl 0x555f55e28710 <col:33, col:46> col:46 reason 'unsigned int'
| `-FullComment 0x555f55eec690 <line:45:3, line:50:44>
|   |-ParagraphComment 0x555f55eec450 <line:45:3>
|   | `-TextComment 0x555f55eec420 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eec470 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x555f55eec4d0 <col:10, col:42>
|   |   `-TextComment 0x555f55eec4a0 <col:10, col:42> Text=" Halt the system on a fatal error"
|   |-ParagraphComment 0x555f55eec540 <line:47:3, line:48:76>
|   | |-TextComment 0x555f55eec4f0 <line:47:3, col:72> Text=" Invokes architecture-specific code to power off or halt the system in"
|   | `-TextComment 0x555f55eec510 <line:48:3, col:76> Text=" a low power state. Lacking that, lock interrupts and sit in an idle loop."
|   |-ParagraphComment 0x555f55eec590 <line:50:3>
|   | `-TextComment 0x555f55eec560 <col:3> Text=" "
|   `-ParamCommandComment 0x555f55eec5b0 <col:4, col:44> [in] implicitly Param="reason" ParamIndex=0
|     `-ParagraphComment 0x555f55eec640 <col:17, col:44>
|       `-TextComment 0x555f55eec610 <col:17, col:44> Text=" Fatal exception reason code"
|-FunctionDecl 0x555f55e28a10 <line:83:1, col:76> col:6 invalid k_sys_fatal_error_handler 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x555f55e288c0 <col:32, col:45> col:45 reason 'unsigned int'
| |-ParmVarDecl 0x555f55e28938 <col:53, col:73> col:73 invalid esf 'const int *'
| `-FullComment 0x555f55eecd70 <line:55:3, line:81:71>
|   |-ParagraphComment 0x555f55eec730 <line:55:3>
|   | `-TextComment 0x555f55eec700 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eec750 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x555f55eec7b0 <col:10, col:36>
|   |   `-TextComment 0x555f55eec780 <col:10, col:36> Text=" Fatal error policy handler"
|   |-ParagraphComment 0x555f55eec820 <line:57:3, line:58:67>
|   | |-TextComment 0x555f55eec7d0 <line:57:3, col:73> Text=" This function is not invoked by application code, but is declared as a"
|   | `-TextComment 0x555f55eec7f0 <line:58:3, col:67> Text=" weak symbol so that applications may introduce their own policy."
|   |-ParagraphComment 0x555f55eec8c0 <line:60:3, line:62:71>
|   | |-TextComment 0x555f55eec840 <line:60:3, col:63> Text=" The default implementation of this function halts the system"
|   | |-TextComment 0x555f55eec860 <line:61:3, col:66> Text=" unconditionally. Depending on architecture support, this may be"
|   | `-TextComment 0x555f55eec880 <line:62:3, col:71> Text=" a simple infinite loop, power off the hardware, or exit an emulator."
|   |-ParagraphComment 0x555f55eec930 <line:64:3, line:65:11>
|   | |-TextComment 0x555f55eec8e0 <line:64:3, col:72> Text=" If this function returns, then the currently executing thread will be"
|   | `-TextComment 0x555f55eec900 <line:65:3, col:11> Text=" aborted."
|   |-ParagraphComment 0x555f55eec980 <line:67:3, col:42>
|   | `-TextComment 0x555f55eec950 <col:3, col:42> Text=" A few notes for custom implementations:"
|   |-ParagraphComment 0x555f55eecb10 <line:69:3, line:77:23>
|   | |-TextComment 0x555f55eec9a0 <line:69:3, col:74> Text=" - If the error is determined to be unrecoverable, LOG_PANIC() should be"
|   | |-TextComment 0x555f55eec9c0 <line:70:3, col:50> Text="   invoked to flush any pending logging buffers."
|   | |-TextComment 0x555f55eec9e0 <line:71:3, col:76> Text=" - K_ERR_KERNEL_PANIC indicates a severe unrecoverable error in the kernel"
|   | |-TextComment 0x555f55eeca00 <line:72:3, col:76> Text="   itself, and should not be considered recoverable. There is an assertion"
|   | |-TextComment 0x555f55eeca20 <line:73:3, col:40> Text="   in z_fatal_error() to enforce this."
|   | |-TextComment 0x555f55eeca40 <line:74:3, col:76> Text=" - Even outside of a kernel panic, unless the fault occurred in user mode,"
|   | |-TextComment 0x555f55eeca60 <line:75:3, col:73> Text="   the kernel itself may be in an inconsistent state, with API calls to"
|   | |-TextComment 0x555f55eeca80 <line:76:3, col:72> Text="   kernel objects possibly exhibiting undefined behavior or triggering"
|   | `-TextComment 0x555f55eecaa0 <line:77:3, col:23> Text="   another exception."
|   |-ParagraphComment 0x555f55eecb60 <line:79:3>
|   | `-TextComment 0x555f55eecb30 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55eecb80 <col:4, line:80:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x555f55eecc30 <line:79:17, line:80:3>
|   |   |-TextComment 0x555f55eecbe0 <line:79:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x555f55eecc00 <line:80:3> Text=" "
|   `-ParamCommandComment 0x555f55eecc50 <col:4, line:81:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x555f55eecd00 <line:80:14, line:81:71>
|       |-TextComment 0x555f55eeccb0 <line:80:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x555f55eeccd0 <line:81:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x555f55e28c08 <line:99:1, col:64> col:6 invalid z_fatal_error 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x555f55e28b00 <col:20, col:33> col:33 reason 'unsigned int'
| |-ParmVarDecl 0x555f55e28b78 <col:41, col:61> col:61 invalid esf 'const int *'
| `-FullComment 0x555f55eed160 <line:86:3, line:97:71>
|   |-ParagraphComment 0x555f55eece10 <line:86:3, col:50>
|   | `-TextComment 0x555f55eecde0 <col:3, col:50> Text=" Called by architecture code upon a fatal error."
|   |-ParagraphComment 0x555f55eeceb0 <line:88:3, line:90:31>
|   | |-TextComment 0x555f55eece30 <line:88:3, col:76> Text=" This function dumps out architecture-agnostic information about the error"
|   | |-TextComment 0x555f55eece50 <line:89:3, col:61> Text=" and then makes a policy decision on what to do by invoking"
|   | `-TextComment 0x555f55eece70 <line:90:3, col:31> Text=" k_sys_fatal_error_handler()."
|   |-ParagraphComment 0x555f55eecf20 <line:92:3, line:93:24>
|   | |-TextComment 0x555f55eeced0 <line:92:3, col:71> Text=" On architectures where k_thread_abort() never returns, this function"
|   | `-TextComment 0x555f55eecef0 <line:93:3, col:24> Text=" never returns either."
|   |-ParagraphComment 0x555f55eecf70 <line:95:3>
|   | `-TextComment 0x555f55eecf40 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55eecf90 <col:4, line:96:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x555f55eed040 <line:95:17, line:96:3>
|   |   |-TextComment 0x555f55eecff0 <line:95:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x555f55eed010 <line:96:3> Text=" "
|   `-ParamCommandComment 0x555f55eed060 <col:4, line:97:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x555f55eed110 <line:96:14, line:97:71>
|       |-TextComment 0x555f55eed0c0 <line:96:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x555f55eed0e0 <line:97:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x555f55e2c540 </vagrant/ext/zephyros/zephyr/include/irq.h:66:1, line:73:1> line:67:1 irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' static inline
| |-ParmVarDecl 0x555f55e2c220 <col:21, col:34> col:34 used irq 'unsigned int'
| |-ParmVarDecl 0x555f55e2c298 <col:39, col:52> col:52 used priority 'unsigned int'
| |-ParmVarDecl 0x555f55e2c3a8 <line:68:7, col:38> col:14 used routine 'void (*)(void *)'
| |-ParmVarDecl 0x555f55e2c420 <col:41, col:47> col:47 used parameter 'void *'
| |-ParmVarDecl 0x555f55e2c490 <line:69:7, col:13> col:13 used flags 'u32_t':'unsigned int'
| |-CompoundStmt 0x555f55e2ca88 <line:70:1, line:73:1>
| | `-ReturnStmt 0x555f55e2c838 <line:71:2, line:72:11>
| |   `-CallExpr 0x555f55e2c770 <line:71:9, line:72:11> 'int'
| |     |-ImplicitCastExpr 0x555f55e2c758 <line:71:9> 'int (*)(unsigned int, unsigned int, void (*)(void *), void *, u32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55e2c608 <col:9> 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' Function 0x555f55e00e48 'arch_irq_connect_dynamic' 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |     |-ImplicitCastExpr 0x555f55e2c7c0 <col:34> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e2c630 <col:34> 'unsigned int' lvalue ParmVar 0x555f55e2c220 'irq' 'unsigned int'
| |     |-ImplicitCastExpr 0x555f55e2c7d8 <col:39> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e2c658 <col:39> 'unsigned int' lvalue ParmVar 0x555f55e2c298 'priority' 'unsigned int'
| |     |-ImplicitCastExpr 0x555f55e2c7f0 <col:49> 'void (*)(void *)' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e2c680 <col:49> 'void (*)(void *)' lvalue ParmVar 0x555f55e2c3a8 'routine' 'void (*)(void *)'
| |     |-ImplicitCastExpr 0x555f55e2c808 <col:58> 'void *' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e2c6a8 <col:58> 'void *' lvalue ParmVar 0x555f55e2c420 'parameter' 'void *'
| |     `-ImplicitCastExpr 0x555f55e2c820 <line:72:6> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-DeclRefExpr 0x555f55e2c6d0 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e2c490 'flags' 'u32_t':'unsigned int'
| `-FullComment 0x555f55eed7d0 <line:54:3, line:64:48>
|   |-ParagraphComment 0x555f55eed200 <line:54:3, col:33>
|   | `-TextComment 0x555f55eed1d0 <col:3, col:33> Text=" Configure a dynamic interrupt."
|   |-ParagraphComment 0x555f55eed250 <line:56:3, col:80>
|   | `-TextComment 0x555f55eed220 <col:3, col:80> Text=" Use this instead of IRQ_CONNECT() if arguments cannot be known at build time."
|   |-ParagraphComment 0x555f55eed2a0 <line:58:3>
|   | `-TextComment 0x555f55eed270 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55eed2c0 <col:4, line:59:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x555f55eed370 <line:58:14, line:59:3>
|   |   |-TextComment 0x555f55eed320 <line:58:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x555f55eed340 <line:59:3> Text=" "
|   |-ParamCommandComment 0x555f55eed390 <col:4, line:60:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x555f55eed440 <line:59:19, line:60:3>
|   |   |-TextComment 0x555f55eed3f0 <line:59:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x555f55eed410 <line:60:3> Text=" "
|   |-ParamCommandComment 0x555f55eed460 <col:4, line:61:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x555f55eed510 <line:60:18, line:61:3>
|   |   |-TextComment 0x555f55eed4c0 <line:60:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x555f55eed4e0 <line:61:3> Text=" "
|   |-ParamCommandComment 0x555f55eed530 <col:4, line:62:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x555f55eed5e0 <line:61:20, line:62:3>
|   |   |-TextComment 0x555f55eed590 <line:61:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x555f55eed5b0 <line:62:3> Text=" "
|   |-ParamCommandComment 0x555f55eed600 <col:4, col:53> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x555f55eed690 <col:16, col:53>
|   |   `-TextComment 0x555f55eed660 <col:16, col:53> Text=" Arch-specific IRQ configuration flags"
|   |-ParagraphComment 0x555f55eed6e0 <line:64:3>
|   | `-TextComment 0x555f55eed6b0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eed700 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x555f55eed760 <col:11, col:48>
|       `-TextComment 0x555f55eed730 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x555f55e2cb68 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/sys/errno_private.h:28:28> col:16 z_errno 'int *(void)' static inline
| `-FullComment 0x555f55eed9f0 <line:21:3, line:26:59>
|   |-ParagraphComment 0x555f55eed870 <line:21:3, col:57>
|   | `-TextComment 0x555f55eed840 <col:3, col:57> Text=" return a pointer to a memory location containing errno"
|   |-ParagraphComment 0x555f55eed8e0 <line:23:3, line:24:52>
|   | |-TextComment 0x555f55eed890 <line:23:3, col:69> Text=" errno is thread-specific, and can't just be a global. This pointer"
|   | `-TextComment 0x555f55eed8b0 <line:24:3, col:52> Text=" is guaranteed to be read/writable from user mode."
|   |-ParagraphComment 0x555f55eed930 <line:26:3>
|   | `-TextComment 0x555f55eed900 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eed950 <col:4, col:59> Name="return"
|     `-ParagraphComment 0x555f55eed9b0 <col:11, col:59>
|       `-TextComment 0x555f55eed980 <col:11, col:59> Text=" Memory location of errno data for current thread"
|-FunctionDecl 0x555f55e2cc60 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:24:1, col:29> col:14 used z_impl_z_errno 'int *()' extern
|-FunctionDecl 0x555f55e2cd28 prev 0x555f55e2cb68 <line:25:1, line:34:1> line:25:21 z_errno 'int *(void)' static inline
| `-CompoundStmt 0x555f55e2d018 <line:26:1, line:34:1>
|   |-DoStmt 0x555f55e2cf20 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e2cee8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e2ce98 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e2cf00 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e2cfd8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:33:2, col:24>
|     `-CallExpr 0x555f55e2cfb0 <col:9, col:24> 'int *'
|       `-ImplicitCastExpr 0x555f55e2cf98 <col:9> 'int *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x555f55e2cf40 <col:9> 'int *()' Function 0x555f55e2cc60 'z_impl_z_errno' 'int *()'
|-RecordDecl 0x555f55e2d038 </vagrant/ext/zephyros/zephyr/include/kernel.h:91:9, line:93:1> line:91:9 struct definition
| `-FieldDecl 0x555f55e2d0f0 <line:92:2, col:14> col:14 waitq 'sys_dlist_t':'struct _dnode'
|-TypedefDecl 0x555f55e37b10 <line:91:1, line:93:3> col:3 referenced _wait_q_t 'struct _wait_q_t':'_wait_q_t'
| `-ElaboratedType 0x555f55e2d140 'struct _wait_q_t' sugar
|   `-RecordType 0x555f55e2d0c0 '_wait_q_t'
|     `-Record 0x555f55e2d038 ''
|-RecordDecl 0x555f55e37b80 prev 0x555f55dfba58 <line:120:1, col:8> col:8 struct k_thread
|-RecordDecl 0x555f55e37c08 <line:121:1, col:8> col:8 struct k_mutex
|-RecordDecl 0x555f55e37cb0 <line:122:1, col:8> col:8 struct k_sem
|-RecordDecl 0x555f55e37d60 <line:123:1, col:8> col:8 struct k_msgq
|-RecordDecl 0x555f55e37e10 <line:124:1, col:8> col:8 struct k_mbox
|-RecordDecl 0x555f55e37ec0 <line:125:1, col:8> col:8 struct k_pipe
|-RecordDecl 0x555f55e37f70 <line:126:1, col:8> col:8 struct k_queue
|-RecordDecl 0x555f55e38020 <line:127:1, col:8> col:8 struct k_fifo
|-RecordDecl 0x555f55e380d0 <line:128:1, col:8> col:8 struct k_lifo
|-RecordDecl 0x555f55e38180 <line:129:1, col:8> col:8 struct k_stack
|-RecordDecl 0x555f55e38230 <line:130:1, col:8> col:8 struct k_mem_slab
|-RecordDecl 0x555f55e382e0 <line:131:1, col:8> col:8 struct k_mem_pool
|-RecordDecl 0x555f55e38390 <line:132:1, col:8> col:8 struct k_timer
|-RecordDecl 0x555f55e38440 <line:133:1, col:8> col:8 struct k_poll_event
|-RecordDecl 0x555f55e384f0 <line:134:1, col:8> col:8 struct k_poll_signal
|-RecordDecl 0x555f55e385a0 prev 0x555f55dfbae0 <line:135:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x555f55e38628 <line:136:1, col:8> col:8 struct k_mem_partition
|-RecordDecl 0x555f55e386d0 <line:137:1, col:8> col:8 struct k_futex
|-EnumDecl 0x555f55e387a8 <line:146:1, line:160:1> line:146:6 k_objects
| |-FullComment 0x555f55eedbf0 <line:140:3, line:144:33>
| | |-ParagraphComment 0x555f55eeda90 <line:140:3>
| | | `-TextComment 0x555f55eeda60 <col:3> Text=" "
| | |-BlockCommandComment 0x555f55eedab0 <col:4, col:29> Name="brief"
| | | `-ParagraphComment 0x555f55eedb10 <col:10, col:29>
| | |   `-TextComment 0x555f55eedae0 <col:10, col:29> Text=" Kernel Object Types"
| | `-ParagraphComment 0x555f55eedbb0 <line:142:3, line:144:33>
| |   |-TextComment 0x555f55eedb30 <line:142:3, col:77> Text=" This enumeration needs to be kept in sync with the lists of kernel objects"
| |   |-TextComment 0x555f55eedb50 <line:143:3, col:79> Text=" and subsystems in scripts/gen_kobject_list.py, as well as the otype_to_str()"
| |   `-TextComment 0x555f55eedb70 <line:144:3, col:33> Text=" function in kernel/userspace.c"
| |-EnumConstantDecl 0x555f55e38860 <line:147:2> col:2 K_OBJ_ANY 'int'
| |-EnumConstantDecl 0x555f55e388d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/kobj-types-enum.h:2:1> col:1 K_OBJ_MEM_SLAB 'int'
| |-EnumConstantDecl 0x555f55e38920 <line:3:1> col:1 K_OBJ_MSGQ 'int'
| |-EnumConstantDecl 0x555f55e38968 <line:4:1> col:1 K_OBJ_MUTEX 'int'
| |-EnumConstantDecl 0x555f55e389b0 <line:5:1> col:1 K_OBJ_PIPE 'int'
| |-EnumConstantDecl 0x555f55e389f8 <line:6:1> col:1 K_OBJ_QUEUE 'int'
| |-EnumConstantDecl 0x555f55e38a40 <line:7:1> col:1 K_OBJ_POLL_SIGNAL 'int'
| |-EnumConstantDecl 0x555f55e38a88 <line:8:1> col:1 K_OBJ_SEM 'int'
| |-EnumConstantDecl 0x555f55e3adf0 <line:9:1> col:1 K_OBJ_STACK 'int'
| |-EnumConstantDecl 0x555f55e3ae38 <line:10:1> col:1 K_OBJ_THREAD 'int'
| |-EnumConstantDecl 0x555f55e3ae80 <line:11:1> col:1 K_OBJ_TIMER 'int'
| |-EnumConstantDecl 0x555f55e3aec8 <line:12:1> col:1 K_OBJ__THREAD_STACK_ELEMENT 'int'
| |-EnumConstantDecl 0x555f55e3af10 <line:13:1> col:1 K_OBJ_SYS_MUTEX 'int'
| |-EnumConstantDecl 0x555f55e3af58 <line:14:1> col:1 K_OBJ_FUTEX 'int'
| |-EnumConstantDecl 0x555f55e3afa0 <line:16:1> col:1 K_OBJ_DRIVER_ADC 'int'
| |-EnumConstantDecl 0x555f55e3afe8 <line:17:1> col:1 K_OBJ_DRIVER_AIO_CMP 'int'
| |-EnumConstantDecl 0x555f55e3b030 <line:18:1> col:1 K_OBJ_DRIVER_COUNTER 'int'
| |-EnumConstantDecl 0x555f55e3b078 <line:19:1> col:1 K_OBJ_DRIVER_CRYPTO 'int'
| |-EnumConstantDecl 0x555f55e3b0c0 <line:20:1> col:1 K_OBJ_DRIVER_DMA 'int'
| |-EnumConstantDecl 0x555f55e3b108 <line:21:1> col:1 K_OBJ_DRIVER_FLASH 'int'
| |-EnumConstantDecl 0x555f55e3b150 <line:22:1> col:1 K_OBJ_DRIVER_GPIO 'int'
| |-EnumConstantDecl 0x555f55e3b198 <line:23:1> col:1 K_OBJ_DRIVER_I2C 'int'
| |-EnumConstantDecl 0x555f55e3b1e0 <line:24:1> col:1 K_OBJ_DRIVER_I2S 'int'
| |-EnumConstantDecl 0x555f55e3b228 <line:25:1> col:1 K_OBJ_DRIVER_IPM 'int'
| |-EnumConstantDecl 0x555f55e3b270 <line:26:1> col:1 K_OBJ_DRIVER_LED 'int'
| |-EnumConstantDecl 0x555f55e3b2b8 <line:27:1> col:1 K_OBJ_DRIVER_PINMUX 'int'
| |-EnumConstantDecl 0x555f55e3b300 <line:28:1> col:1 K_OBJ_DRIVER_PWM 'int'
| |-EnumConstantDecl 0x555f55e3b348 <line:29:1> col:1 K_OBJ_DRIVER_ENTROPY 'int'
| |-EnumConstantDecl 0x555f55e3b390 <line:30:1> col:1 K_OBJ_DRIVER_SENSOR 'int'
| |-EnumConstantDecl 0x555f55e3b3d8 <line:31:1> col:1 K_OBJ_DRIVER_SPI 'int'
| |-EnumConstantDecl 0x555f55e3b420 <line:32:1> col:1 K_OBJ_DRIVER_UART 'int'
| |-EnumConstantDecl 0x555f55e3b468 <line:33:1> col:1 K_OBJ_DRIVER_CAN 'int'
| |-EnumConstantDecl 0x555f55e3b4b0 <line:34:1> col:1 K_OBJ_DRIVER_PTP_CLOCK 'int'
| |-EnumConstantDecl 0x555f55e3b4f8 <line:35:1> col:1 K_OBJ_DRIVER_EEPROM 'int'
| |-EnumConstantDecl 0x555f55e3b540 <line:36:1> col:1 K_OBJ_DRIVER_WDT 'int'
| |-EnumConstantDecl 0x555f55e3b588 <line:37:1> col:1 K_OBJ_DRIVER_SAMPLE 'int'
| `-EnumConstantDecl 0x555f55e3b5f8 </vagrant/ext/zephyros/zephyr/include/kernel.h:159:2> col:2 K_OBJ_LAST 'int'
|   `-FullComment 0x555f55eedd30 <line:156:5, col:13>
|     `-ParagraphComment 0x555f55eedd00 <col:5, col:13>
|       |-TextComment 0x555f55eedc60 <col:5> Text=" "
|       `-InlineCommandComment 0x555f55eedcd0 <col:6, col:13> Name="endcond" RenderNormal
|-FunctionDecl 0x555f55e3b738 <line:229:1, line:232:1> line:229:20 z_object_init 'void (void *)' static inline
| |-ParmVarDecl 0x555f55e3b6b0 <col:34, col:40> col:40 used obj 'void *'
| |-CompoundStmt 0x555f55e3b8d8 <line:230:1, line:232:1>
| | `-CStyleCastExpr 0x555f55e3b880 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x555f55e3b868 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x555f55e3b848 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x555f55e3b7e0 </vagrant/ext/zephyros/zephyr/include/kernel.h:231:13> 'void *' lvalue ParmVar 0x555f55e3b6b0 'obj' 'void *'
| `-FullComment 0x555f55eede50 <line:227:3, col:12>
|   `-ParagraphComment 0x555f55eede20 <col:3, col:12>
|     |-TextComment 0x555f55eedda0 <col:3> Text=" "
|     `-InlineCommandComment 0x555f55eeddf0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x555f55e3baa0 <line:237:1, line:242:1> line:237:20 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x555f55e3b908 <col:49, col:55> col:55 used object 'void *'
| |-ParmVarDecl 0x555f55e3b990 <line:238:13, col:30> col:30 used thread 'struct k_thread *'
| |-CompoundStmt 0x555f55e3bd08 <line:239:1, line:242:1>
| | |-CStyleCastExpr 0x555f55e3bbf0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x555f55e3bbd8 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x555f55e3bbb8 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x555f55e3bb50 </vagrant/ext/zephyros/zephyr/include/kernel.h:240:13> 'void *' lvalue ParmVar 0x555f55e3b908 'object' 'void *'
| | `-CStyleCastExpr 0x555f55e3bcb8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x555f55e3bca0 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x555f55e3bc80 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x555f55e3bc18 </vagrant/ext/zephyros/zephyr/include/kernel.h:241:13> 'struct k_thread *' lvalue ParmVar 0x555f55e3b990 'thread' 'struct k_thread *'
| `-FullComment 0x555f55eedf40 <line:235:3, col:12>
|   `-ParagraphComment 0x555f55eedf10 <col:3, col:12>
|     |-TextComment 0x555f55eedec0 <col:3> Text=" "
|     `-InlineCommandComment 0x555f55eedee0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x555f55e3d3a0 <line:247:1, line:252:1> line:247:20 k_object_access_revoke 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x555f55e3bd40 <col:43, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x555f55e3d310 <line:248:8, col:25> col:25 used thread 'struct k_thread *'
| |-CompoundStmt 0x555f55e3d608 <line:249:1, line:252:1>
| | |-CStyleCastExpr 0x555f55e3d4f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x555f55e3d4d8 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x555f55e3d4b8 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x555f55e3d450 </vagrant/ext/zephyros/zephyr/include/kernel.h:250:13> 'void *' lvalue ParmVar 0x555f55e3bd40 'object' 'void *'
| | `-CStyleCastExpr 0x555f55e3d5b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x555f55e3d5a0 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x555f55e3d580 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x555f55e3d518 </vagrant/ext/zephyros/zephyr/include/kernel.h:251:13> 'struct k_thread *' lvalue ParmVar 0x555f55e3d310 'thread' 'struct k_thread *'
| `-FullComment 0x555f55eee030 <line:245:3, col:12>
|   `-ParagraphComment 0x555f55eee000 <col:3, col:12>
|     |-TextComment 0x555f55eedfb0 <col:3> Text=" "
|     `-InlineCommandComment 0x555f55eedfd0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x555f55e3d6c8 <line:257:1, line:260:1> line:257:20 used z_impl_k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x555f55e3d640 <col:44, col:50> col:50 used object 'void *'
| |-CompoundStmt 0x555f55e3d838 <line:258:1, line:260:1>
| | `-CStyleCastExpr 0x555f55e3d810 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x555f55e3d7f8 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x555f55e3d7d8 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x555f55e3d770 </vagrant/ext/zephyros/zephyr/include/kernel.h:259:13> 'void *' lvalue ParmVar 0x555f55e3d640 'object' 'void *'
| `-FullComment 0x555f55eee120 <line:255:3, col:12>
|   `-ParagraphComment 0x555f55eee0f0 <col:3, col:12>
|     |-TextComment 0x555f55eee0a0 <col:3> Text=" "
|     `-InlineCommandComment 0x555f55eee0c0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x555f55e3d8f0 <line:262:1, line:265:1> line:262:20 k_object_access_all_grant 'void (void *)' static inline
| |-ParmVarDecl 0x555f55e3d868 <col:46, col:52> col:52 used object 'void *'
| `-CompoundStmt 0x555f55e3da88 <line:263:1, line:265:1>
|   `-CStyleCastExpr 0x555f55e3da38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|     `-ImplicitCastExpr 0x555f55e3da20 <col:29, col:31> 'void *' <LValueToRValue>
|       `-ParenExpr 0x555f55e3da00 <col:29, col:31> 'void *' lvalue
|         `-DeclRefExpr 0x555f55e3d998 </vagrant/ext/zephyros/zephyr/include/kernel.h:264:13> 'void *' lvalue ParmVar 0x555f55e3d868 'object' 'void *'
|-FunctionDecl 0x555f55e3dbd0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:279:75> col:16 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x555f55e3dab8 <col:38, col:44> col:44 object 'void *'
| |-ParmVarDecl 0x555f55e3db40 <col:52, col:69> col:69 thread 'struct k_thread *'
| `-FullComment 0x555f55eee480 <line:270:3, line:277:53>
|   |-ParagraphComment 0x555f55eee1c0 <line:270:3, col:43>
|   | `-TextComment 0x555f55eee190 <col:3, col:43> Text=" Grant a thread access to a kernel object"
|   |-ParagraphComment 0x555f55eee260 <line:272:3, line:274:67>
|   | |-TextComment 0x555f55eee1e0 <line:272:3, col:72> Text=" The thread will be granted access to the object if the caller is from"
|   | |-TextComment 0x555f55eee200 <line:273:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x555f55eee220 <line:274:3, col:67> Text=" on both the object and the thread whose access is being granted."
|   |-ParagraphComment 0x555f55eee2b0 <line:276:3>
|   | `-TextComment 0x555f55eee280 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55eee2d0 <col:4, line:277:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x555f55eee380 <line:276:17, line:277:3>
|   |   |-TextComment 0x555f55eee330 <line:276:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x555f55eee350 <line:277:3> Text=" "
|   `-ParamCommandComment 0x555f55eee3a0 <col:4, col:53> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x555f55eee430 <col:17, col:53>
|       `-TextComment 0x555f55eee400 <col:17, col:53> Text=" Thread to grant access to the object"
|-FunctionDecl 0x555f55e3ddd8 prev 0x555f55e3d3a0 <line:291:1, col:66> col:6 k_object_access_revoke 'void (void *, struct k_thread *)'
| |-ParmVarDecl 0x555f55e3dcc0 <col:29, col:35> col:35 object 'void *'
| |-ParmVarDecl 0x555f55e3dd48 <col:43, col:60> col:60 thread 'struct k_thread *'
| `-FullComment 0x555f55eee7e0 <line:282:3, line:289:54>
|   |-ParagraphComment 0x555f55eee520 <line:282:3, col:46>
|   | `-TextComment 0x555f55eee4f0 <col:3, col:46> Text=" Revoke a thread's access to a kernel object"
|   |-ParagraphComment 0x555f55eee5c0 <line:284:3, line:286:67>
|   | |-TextComment 0x555f55eee540 <line:284:3, col:66> Text=" The thread will lose access to the object if the caller is from"
|   | |-TextComment 0x555f55eee560 <line:285:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x555f55eee580 <line:286:3, col:67> Text=" on both the object and the thread whose access is being revoked."
|   |-ParagraphComment 0x555f55eee610 <line:288:3>
|   | `-TextComment 0x555f55eee5e0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55eee630 <col:4, line:289:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x555f55eee6e0 <line:288:17, line:289:3>
|   |   |-TextComment 0x555f55eee690 <line:288:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x555f55eee6b0 <line:289:3> Text=" "
|   `-ParamCommandComment 0x555f55eee700 <col:4, col:54> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x555f55eee790 <col:17, col:54>
|       `-TextComment 0x555f55eee760 <col:17, col:54> Text=" Thread to remove access to the object"
|-FunctionDecl 0x555f55e3df58 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:302:45> col:16 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x555f55e3ded0 <col:33, col:39> col:39 object 'void *'
| `-FullComment 0x555f55eeeb10 <line:294:3, line:301:1>
|   |-ParagraphComment 0x555f55eee880 <line:294:3>
|   | `-TextComment 0x555f55eee850 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eee8a0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x555f55eee900 <col:10, col:27>
|   |   `-TextComment 0x555f55eee8d0 <col:10, col:27> Text=" Release an object"
|   |-ParagraphComment 0x555f55eee970 <line:296:3, line:297:72>
|   | |-TextComment 0x555f55eee920 <line:296:3, col:64> Text=" Allows user threads to drop their own permission on an object"
|   | `-TextComment 0x555f55eee940 <line:297:3, col:72> Text=" Their permissions are automatically cleared when a thread terminates."
|   |-ParagraphComment 0x555f55eee9c0 <line:299:3>
|   | `-TextComment 0x555f55eee990 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55eee9e0 <col:4, col:42> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x555f55eeea70 <col:17, col:42>
|   |   `-TextComment 0x555f55eeea40 <col:17, col:42> Text=" The object to be released"
|   `-ParagraphComment 0x555f55eeeac0 <line:301:1>
|     `-TextComment 0x555f55eeea90 <col:1> Text=" "
|-FunctionDecl 0x555f55e3e0c8 prev 0x555f55e3d8f0 <line:321:1, col:44> col:6 k_object_access_all_grant 'void (void *)'
| |-ParmVarDecl 0x555f55e3e040 <col:32, col:38> col:38 object 'void *'
| `-FullComment 0x555f55eeeed0 <line:305:3, line:319:41>
|   |-ParagraphComment 0x555f55eeebb0 <line:305:3, col:59>
|   | `-TextComment 0x555f55eeeb80 <col:3, col:59> Text=" Grant all present and future threads access to an object"
|   |-ParagraphComment 0x555f55eeec70 <line:307:3, line:310:59>
|   | |-TextComment 0x555f55eeebd0 <line:307:3, col:77> Text=" If the caller is from supervisor mode, or the caller is from user mode and"
|   | |-TextComment 0x555f55eeebf0 <line:308:3, col:72> Text=" have sufficient permissions on the object, then that object will have"
|   | |-TextComment 0x555f55eeec10 <line:309:3, col:76> Text=" permissions granted to it for *all* current and future threads running in"
|   | `-TextComment 0x555f55eeec30 <line:310:3, col:59> Text=" the system, effectively becoming a public kernel object."
|   |-ParagraphComment 0x555f55eeed10 <line:312:3, line:314:43>
|   | |-TextComment 0x555f55eeec90 <line:312:3, col:79> Text=" Use of this API should be avoided on systems that are running untrusted code"
|   | |-TextComment 0x555f55eeecb0 <line:313:3, col:76> Text=" as it is possible for such code to derive the addresses of kernel objects"
|   | `-TextComment 0x555f55eeecd0 <line:314:3, col:43> Text=" and perform unwanted operations on them."
|   |-ParagraphComment 0x555f55eeed80 <line:316:3, line:317:25>
|   | |-TextComment 0x555f55eeed30 <line:316:3, col:75> Text=" It is not possible to revoke permissions on public objects; once public,"
|   | `-TextComment 0x555f55eeed50 <line:317:3, col:25> Text=" any thread may use it."
|   |-ParagraphComment 0x555f55eeedd0 <line:319:3>
|   | `-TextComment 0x555f55eeeda0 <col:3> Text=" "
|   `-ParamCommandComment 0x555f55eeedf0 <col:4, col:41> [in] implicitly Param="object" ParamIndex=0
|     `-ParagraphComment 0x555f55eeee80 <col:17, col:41>
|       `-TextComment 0x555f55eeee50 <col:17, col:41> Text=" Address of kernel object"
|-FunctionDecl 0x555f55e3e320 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:337:52> col:17 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x555f55e3e1f0 <col:32, col:47> col:47 otype 'enum k_objects':'enum k_objects'
| `-FullComment 0x555f55eef290 <line:324:3, line:335:12>
|   |-ParagraphComment 0x555f55eeef70 <line:324:3, col:48>
|   | `-TextComment 0x555f55eeef40 <col:3, col:48> Text=" Allocate a kernel object of a designated type"
|   |-ParagraphComment 0x555f55eef030 <line:326:3, line:329:78>
|   | |-TextComment 0x555f55eeef90 <line:326:3, col:74> Text=" This will instantiate at runtime a kernel object of the specified type,"
|   | |-TextComment 0x555f55eeefb0 <line:327:3, col:77> Text=" returning a pointer to it. The object will be returned in an uninitialized"
|   | |-TextComment 0x555f55eeefd0 <line:328:3, col:76> Text=" state, with the calling thread being granted permission on it. The memory"
|   | `-TextComment 0x555f55eeeff0 <line:329:3, col:78> Text=" for the object will be allocated out of the calling thread's resource pool."
|   |-ParagraphComment 0x555f55eef080 <line:331:3, col:59>
|   | `-TextComment 0x555f55eef050 <col:3, col:59> Text=" Currently, allocation of thread stacks is not supported."
|   |-ParagraphComment 0x555f55eef0d0 <line:333:3>
|   | `-TextComment 0x555f55eef0a0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55eef0f0 <col:4, line:334:3> [in] implicitly Param="otype" ParamIndex=0
|   | `-ParagraphComment 0x555f55eef1a0 <line:333:16, line:334:3>
|   |   |-TextComment 0x555f55eef150 <line:333:16, col:44> Text=" Requested kernel object type"
|   |   `-TextComment 0x555f55eef170 <line:334:3> Text=" "
|   `-BlockCommandComment 0x555f55eef1c0 <col:4, line:335:12> Name="return"
|     `-ParagraphComment 0x555f55eef240 <line:334:11, line:335:12>
|       |-TextComment 0x555f55eef1f0 <line:334:11, col:77> Text=" A pointer to the allocated kernel object, or NULL if memory wasn't"
|       `-TextComment 0x555f55eef210 <line:335:3, col:12> Text=" available"
|-FunctionDecl 0x555f55e3e478 <line:352:1, line:357:1> line:352:21 used z_impl_k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x555f55e3e3e8 <col:43, col:58> col:58 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x555f55e3e6a8 <line:353:1, line:357:1>
|   |-CStyleCastExpr 0x555f55e3e5c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|   | `-ImplicitCastExpr 0x555f55e3e5a8 <col:29, col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|   |   `-ParenExpr 0x555f55e3e588 <col:29, col:31> 'enum k_objects':'enum k_objects' lvalue
|   |     `-DeclRefExpr 0x555f55e3e520 </vagrant/ext/zephyros/zephyr/include/kernel.h:354:13> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x555f55e3e3e8 'otype' 'enum k_objects':'enum k_objects'
|   `-ReturnStmt 0x555f55e3e668 <line:356:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ParenExpr 0x555f55e3e648 <col:14, col:24> 'void *'
|       `-CStyleCastExpr 0x555f55e3e620 <col:15, col:23> 'void *' <NullToPointer>
|         `-IntegerLiteral 0x555f55e3e5e8 <col:23> 'int' 0
|-FunctionDecl 0x555f55e3e768 </vagrant/ext/zephyros/zephyr/include/kernel.h:363:1, line:366:1> line:363:20 k_obj_free 'void (void *)' static inline
| |-ParmVarDecl 0x555f55e3e6e0 <col:31, col:37> col:37 used obj 'void *'
| |-CompoundStmt 0x555f55e3e908 <line:364:1, line:366:1>
| | `-CStyleCastExpr 0x555f55e3e8b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x555f55e3e898 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x555f55e3e878 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x555f55e3e810 </vagrant/ext/zephyros/zephyr/include/kernel.h:365:13> 'void *' lvalue ParmVar 0x555f55e3e6e0 'obj' 'void *'
| `-FullComment 0x555f55eef4f0 <line:359:3, line:362:1>
|   |-ParagraphComment 0x555f55eef330 <line:359:3>
|   | `-TextComment 0x555f55eef300 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eef350 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x555f55eef3b0 <col:10, col:24>
|   |   `-TextComment 0x555f55eef380 <col:10, col:24> Text=" Free an object"
|   |-ParagraphComment 0x555f55eef400 <line:361:3>
|   | `-TextComment 0x555f55eef3d0 <col:3> Text=" "
|   `-ParamCommandComment 0x555f55eef420 <col:4, line:362:1> [in] implicitly Param="obj" ParamIndex=0
|     `-ParagraphComment 0x555f55eef4b0 <col:1>
|       `-TextComment 0x555f55eef480 <col:1> Text=" "
|-RecordDecl 0x555f55e3e920 prev 0x555f55dfbb90 <line:387:1, line:389:1> line:387:17 struct _k_thread_stack_element definition
| |-PackedAttr 0x555f55e3e9a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:168:40>
| `-FieldDecl 0x555f55e3ea00 </vagrant/ext/zephyros/zephyr/include/kernel.h:388:2, col:7> col:7 data 'char'
|-RecordDecl 0x555f55e3eaa8 <line:427:1, line:503:1> line:427:8 struct _thread_base definition
| |-RecordDecl 0x555f55e3eb50 <line:430:2, line:433:2> line:430:2 union definition
| | |-FieldDecl 0x555f55e3ec10 <line:431:3, col:15> col:15 qnode_dlist 'sys_dnode_t':'struct _dnode'
| | `-FieldDecl 0x555f55e3ec78 <line:432:3, col:17> col:17 qnode_rb 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x555f55e3ed10 <line:430:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| |-IndirectFieldDecl 0x555f55e3ed68 <line:431:15> col:15 implicit qnode_dlist 'sys_dnode_t':'struct _dnode'
| | |-Field 0x555f55e3ed10 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x555f55e3ec10 'qnode_dlist' 'sys_dnode_t':'struct _dnode'
| |-IndirectFieldDecl 0x555f55e3edb8 <line:432:17> col:17 implicit qnode_rb 'struct rbnode':'struct rbnode'
| | |-Field 0x555f55e3ed10 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x555f55e3ec78 'qnode_rb' 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x555f55e3ee88 <line:438:2, col:13> col:13 pended_on '_wait_q_t *'
| |-FieldDecl 0x555f55e3eee0 <line:441:2, col:7> col:7 user_options 'u8_t':'unsigned char'
| |-FieldDecl 0x555f55e3ef38 <line:444:2, col:7> col:7 thread_state 'u8_t':'unsigned char'
| |-RecordDecl 0x555f55e3ef80 <line:460:2, line:471:2> line:460:2 union definition
| | |-RecordDecl 0x555f55e3f030 <line:461:3, line:469:3> line:461:3 struct definition
| | | |-FieldDecl 0x555f55e3f0f0 <line:466:4, col:9> col:9 prio 's8_t':'signed char'
| | | `-FieldDecl 0x555f55e3f148 <line:467:4, col:9> col:9 sched_locked 'u8_t':'unsigned char'
| | |-FieldDecl 0x555f55e3f1e0 <line:461:3> col:3 implicit 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | |-IndirectFieldDecl 0x555f55e3f238 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | | |-Field 0x555f55e3f1e0 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x555f55e3f0f0 'prio' 's8_t':'signed char'
| | |-IndirectFieldDecl 0x555f55e3f288 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | | |-Field 0x555f55e3f1e0 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x555f55e3f148 'sched_locked' 'u8_t':'unsigned char'
| | `-FieldDecl 0x555f55e3f2d8 <line:470:3, col:9> col:9 preempt 'u16_t':'unsigned short'
| |-FieldDecl 0x555f55df7df0 <line:460:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| |-IndirectFieldDecl 0x555f55df7e50 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | |-Field 0x555f55df7df0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x555f55e3f1e0 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x555f55e3f0f0 'prio' 's8_t':'signed char'
| |-IndirectFieldDecl 0x555f55df7ea8 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | |-Field 0x555f55df7df0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x555f55e3f1e0 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x555f55e3f148 'sched_locked' 'u8_t':'unsigned char'
| |-IndirectFieldDecl 0x555f55df7ef8 <line:470:9> col:9 implicit preempt 'u16_t':'unsigned short'
| | |-Field 0x555f55df7df0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | `-Field 0x555f55e3f2d8 'preempt' 'u16_t':'unsigned short'
| |-FieldDecl 0x555f55df7f48 <line:477:2, col:8> col:8 order_key 'u32_t':'unsigned int'
| `-FieldDecl 0x555f55df7fa8 <line:497:2, col:8> col:8 swap_data 'void *'
|-TypedefDecl 0x555f55df80e0 <line:505:1, col:29> col:29 _thread_base_t 'struct _thread_base':'struct _thread_base'
| `-ElaboratedType 0x555f55df8090 'struct _thread_base' sugar
|   `-RecordType 0x555f55e3eb30 'struct _thread_base'
|     `-Record 0x555f55e3eaa8 '_thread_base'
|-RecordDecl 0x555f55df8168 prev 0x555f55e37b80 <line:545:1, line:618:1> line:545:8 invalid struct k_thread definition
| |-FullComment 0x555f55eef660 <line:542:3, line:543:19>
| | |-ParagraphComment 0x555f55eef590 <line:542:3>
| | | `-TextComment 0x555f55eef560 <col:3> Text=" "
| | |-VerbatimLineComment 0x555f55eef5b0 <col:4, col:24> Text=" thread_apis"
| | `-ParagraphComment 0x555f55eef620 <line:543:3, col:19>
| |   `-TextComment 0x555f55eef5f0 <col:3, col:19> Text=" Thread Structure"
| |-FieldDecl 0x555f55df8210 <line:547:2, col:22> col:22 base 'struct _thread_base':'struct _thread_base'
| |-RecordDecl 0x555f55df8288 parent 0x555f55ca0698 <line:550:2, col:9> col:9 struct _callee_saved
| |-FieldDecl 0x555f55df8390 <col:2, col:23> col:23 invalid callee_saved 'struct _callee_saved':'struct _callee_saved'
| | `-FullComment 0x555f55eef730 <line:549:5, col:59>
| |   `-ParagraphComment 0x555f55eef700 <col:5, col:59>
| |     `-TextComment 0x555f55eef6d0 <col:5, col:59> Text=" defined by the architecture, but all archs need these "
| |-FieldDecl 0x555f55df8420 <line:553:2, col:8> col:8 init_data 'void *'
| | `-FullComment 0x555f55eef800 <line:552:5, col:29>
| |   `-ParagraphComment 0x555f55eef7d0 <col:5, col:29>
| |     `-TextComment 0x555f55eef7a0 <col:5, col:29> Text=" static thread init data "
| |-FieldDecl 0x555f55df85c8 <line:559:2, col:23> col:9 fn_abort 'void (*)(void)'
| | `-FullComment 0x555f55eef990 <line:556:4, line:558:4>
| |   |-ParagraphComment 0x555f55eef8c0 <line:556:4, line:557:4>
| |   | |-TextComment 0x555f55eef870 <line:556:4, col:18> Text=" abort function"
| |   | `-TextComment 0x555f55eef890 <line:557:4> Text=" "
| |   |-VerbatimLineComment 0x555f55eef8e0 <col:5, col:22> Text=" K-THREAD-002"
| |   `-ParagraphComment 0x555f55eef950 <line:558:4>
| |     `-TextComment 0x555f55eef920 <col:4> Text=" "
| |-FieldDecl 0x555f55df86f0 <line:614:2, col:21> col:21 referenced resource_pool 'struct k_mem_pool *'
| | `-FullComment 0x555f55eefa60 <line:613:5, col:19>
| |   `-ParagraphComment 0x555f55eefa30 <col:5, col:19>
| |     `-TextComment 0x555f55eefa00 <col:5, col:19> Text=" resource pool "
| |-RecordDecl 0x555f55df8768 parent 0x555f55ca0698 <line:617:2, col:9> col:9 struct _thread_arch
| `-FieldDecl 0x555f55df8870 <col:2, col:22> col:22 invalid arch 'struct _thread_arch':'struct _thread_arch'
|   `-FullComment 0x555f55eefb30 <line:616:5, col:47>
|     `-ParagraphComment 0x555f55eefb00 <col:5, col:47>
|       `-TextComment 0x555f55eefad0 <col:5, col:47> Text=" arch-specifics: must always be at the end "
|-TypedefDecl 0x555f55df89a0 <line:620:1, col:25> col:25 _thread_t 'struct k_thread':'struct k_thread'
| `-ElaboratedType 0x555f55d8e8a0 'struct k_thread' sugar
|   `-RecordType 0x555f55d8e810 'struct k_thread'
|     `-Record 0x555f55df8168 'k_thread'
|-TypedefDecl 0x555f55df8a20 <line:621:1, col:26> col:26 referenced k_tid_t 'struct k_thread *'
| `-PointerType 0x555f55d8e900 'struct k_thread *'
|   `-ElaboratedType 0x555f55d8e8a0 'struct k_thread' sugar
|     `-RecordType 0x555f55d8e810 'struct k_thread'
|       `-Record 0x555f55df8168 'k_thread'
|-EnumDecl 0x555f55df8a78 <line:623:1, line:627:1> line:623:6 execution_context_types
| |-EnumConstantDecl 0x555f55df8b50 <line:624:2, col:10> col:2 K_ISR 'int'
| | `-IntegerLiteral 0x555f55df8b30 <col:10> 'int' 0
| |-EnumConstantDecl 0x555f55df8b98 <line:625:2> col:2 K_COOP_THREAD 'int'
| `-EnumConstantDecl 0x555f55df8be0 <line:626:2> col:2 K_PREEMPT_THREAD 'int'
|-TypedefDecl 0x555f55e42118 <line:634:1, line:635:23> line:634:16 referenced k_thread_user_cb_t 'void (*)(const struct k_thread *, void *)'
| |-PointerType 0x555f55e420b0 'void (*)(const struct k_thread *, void *)'
| | `-ParenType 0x555f55e42050 'void (const struct k_thread *, void *)' sugar
| |   `-FunctionProtoType 0x555f55e42010 'void (const struct k_thread *, void *)' cdecl
| |     |-BuiltinType 0x555f55ca06f0 'void'
| |     |-PointerType 0x555f55df8c90 'const struct k_thread *'
| |     | `-QualType 0x555f55d8e8a1 'const struct k_thread' const
| |     |   `-ElaboratedType 0x555f55d8e8a0 'struct k_thread' sugar
| |     |     `-RecordType 0x555f55d8e810 'struct k_thread'
| |     |       `-Record 0x555f55df8168 'k_thread'
| |     `-PointerType 0x555f55ca0b90 'void *'
| |       `-BuiltinType 0x555f55ca06f0 'void'
| `-FullComment 0x555f55eefd00 <line:630:3, line:631:5>
|   |-ParagraphComment 0x555f55eefbd0 <line:630:3>
|   | `-TextComment 0x555f55eefba0 <col:3> Text=" "
|   |-VerbatimLineComment 0x555f55eefbf0 <col:4, col:27> Text=" thread_apis"
|   `-ParagraphComment 0x555f55eefcc0 <line:631:3, col:5>
|     |-TextComment 0x555f55eefc30 <col:3> Text=" "
|     |-TextComment 0x555f55eefc50 <col:4> Text="@"
|     `-TextComment 0x555f55eefc70 <col:5> Text="{"
|-FunctionDecl 0x555f55e42360 <line:654:1, col:73> col:13 k_thread_foreach 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x555f55e421d0 <col:30, col:49> col:49 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x555f55e42248 <col:58, col:64> col:64 user_data 'void *'
| `-FullComment 0x555f55ef0410 <line:638:3, line:652:14>
|   |-ParagraphComment 0x555f55eefda0 <line:638:3>
|   | `-TextComment 0x555f55eefd70 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eefdc0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x555f55eefe20 <col:10, col:53>
|   |   `-TextComment 0x555f55eefdf0 <col:10, col:53> Text=" Iterate over all the threads in the system."
|   |-ParagraphComment 0x555f55eefe90 <line:640:3, line:641:46>
|   | |-TextComment 0x555f55eefe40 <line:640:3, col:63> Text=" This routine iterates over all the threads in the system and"
|   | `-TextComment 0x555f55eefe60 <line:641:3, col:46> Text=" calls the user_cb function for each thread."
|   |-ParagraphComment 0x555f55eefee0 <line:643:3>
|   | `-TextComment 0x555f55eefeb0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55eeff00 <col:4, line:644:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x555f55eeffb0 <line:643:18, line:644:3>
|   |   |-TextComment 0x555f55eeff60 <line:643:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x555f55eeff80 <line:644:3> Text=" "
|   |-ParamCommandComment 0x555f55eeffd0 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x555f55ef0060 <col:20, col:41>
|   |   `-TextComment 0x555f55ef0030 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x555f55ef00b0 <line:646:3>
|   | `-TextComment 0x555f55ef0080 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef00d0 <col:4, line:648:3> Name="note"
|   | `-ParagraphComment 0x555f55ef0180 <line:646:9, line:648:3>
|   |   |-TextComment 0x555f55ef0100 <line:646:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x555f55ef0120 <line:647:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x555f55ef0140 <line:648:3> Text=" "
|   |-BlockCommandComment 0x555f55ef01a0 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x555f55ef0200 <col:9, col:23>
|   |   `-TextComment 0x555f55ef01d0 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x555f55ef0220 <col:24, col:71> Text=" k_spin_lock to protect the _kernel.threads"
|   |-ParagraphComment 0x555f55ef02b0 <line:649:3, line:650:46>
|   | |-TextComment 0x555f55ef0260 <line:649:3, col:72> Text=" list which means creation of new threads and terminations of existing"
|   | `-TextComment 0x555f55ef0280 <line:650:3, col:46> Text=" threads are blocked until this API returns."
|   |-ParagraphComment 0x555f55ef0300 <line:652:3>
|   | `-TextComment 0x555f55ef02d0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ef0320 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55ef0380 <col:11, col:14>
|       `-TextComment 0x555f55ef0350 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55e42550 <line:683:1, line:684:45> line:683:13 k_thread_foreach_unlocked 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x555f55e42448 <line:684:2, col:21> col:21 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x555f55e424c0 <col:30, col:36> col:36 user_data 'void *'
| `-FullComment 0x555f55ef0f10 <line:657:3, line:681:72>
|   |-ParagraphComment 0x555f55ef04b0 <line:657:3>
|   | `-TextComment 0x555f55ef0480 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef04d0 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x555f55ef0530 <col:10, col:69>
|   |   `-TextComment 0x555f55ef0500 <col:10, col:69> Text=" Iterate over all the threads in the system without locking."
|   |-ParagraphComment 0x555f55ef0580 <line:659:3, col:44>
|   | `-TextComment 0x555f55ef0550 <col:3, col:44> Text=" This routine works exactly the same like "
|   |-VerbatimLineComment 0x555f55ef05a0 <col:45, col:66> Text=" k_thread_foreach"
|   |-ParagraphComment 0x555f55ef0610 <line:660:3, col:51>
|   | `-TextComment 0x555f55ef05e0 <col:3, col:51> Text=" but unlocks interrupts when user_cb is executed."
|   |-ParagraphComment 0x555f55ef0660 <line:662:3>
|   | `-TextComment 0x555f55ef0630 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ef0680 <col:4, line:663:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x555f55ef0730 <line:662:18, line:663:3>
|   |   |-TextComment 0x555f55ef06e0 <line:662:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x555f55ef0700 <line:663:3> Text=" "
|   |-ParamCommandComment 0x555f55ef0750 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x555f55ef07e0 <col:20, col:41>
|   |   `-TextComment 0x555f55ef07b0 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x555f55ef0830 <line:665:3>
|   | `-TextComment 0x555f55ef0800 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef0850 <col:4, line:667:3> Name="note"
|   | `-ParagraphComment 0x555f55ef0900 <line:665:9, line:667:3>
|   |   |-TextComment 0x555f55ef0880 <line:665:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x555f55ef08a0 <line:666:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x555f55ef08c0 <line:667:3> Text=" "
|   |-BlockCommandComment 0x555f55ef0920 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x555f55ef0980 <col:9, col:23>
|   |   `-TextComment 0x555f55ef0950 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x555f55ef09a0 <col:24, col:80> Text=" k_spin_lock only when accessing the _kernel.threads"
|   |-ParagraphComment 0x555f55ef0b80 <line:668:3, line:674:3>
|   | |-TextComment 0x555f55ef09e0 <line:668:3, col:74> Text=" queue elements. It unlocks it during user callback function processing."
|   | |-TextComment 0x555f55ef0a00 <line:669:3, col:38> Text=" If a new task is created when this "
|   | |-InlineCommandComment 0x555f55ef0a50 <col:39, col:40> Name="c" RenderMonospaced Arg[0]="foreach"
|   | |-TextComment 0x555f55ef0a70 <col:49, col:73> Text=" function is in progress,"
|   | |-TextComment 0x555f55ef0a90 <line:670:3, col:63> Text=" the added new task would not be included in the enumeration."
|   | |-TextComment 0x555f55ef0ab0 <line:671:3, col:75> Text=" If a task is aborted during this enumeration, there would be a race here"
|   | |-TextComment 0x555f55ef0ad0 <line:672:3, col:77> Text=" and there is a possibility that this aborted task would be included in the"
|   | |-TextComment 0x555f55ef0af0 <line:673:3, col:15> Text=" enumeration."
|   | `-TextComment 0x555f55ef0b10 <line:674:3> Text=" "
|   `-BlockCommandComment 0x555f55ef0ba0 <col:4, line:681:72> Name="note"
|     `-ParagraphComment 0x555f55ef0e80 <line:674:9, line:681:72>
|       |-TextComment 0x555f55ef0bd0 <line:674:9, col:63> Text=" If the task is aborted and the memory occupied by its "
|       |-InlineCommandComment 0x555f55ef0c20 <col:64, col:65> Name="c" RenderMonospaced Arg[0]="k_thread"
|       |-TextComment 0x555f55ef0c40 <line:675:3, col:33> Text=" structure is reused when this "
|       |-InlineCommandComment 0x555f55ef0ca0 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="k_thread_foreach_unlocked"
|       |-TextComment 0x555f55ef0cc0 <col:62, col:76> Text=" is in progress"
|       |-TextComment 0x555f55ef0ce0 <line:676:3, col:52> Text=" it might even lead to the system behave unstable."
|       |-TextComment 0x555f55ef0d00 <line:677:3, col:59> Text=" This function may never return, as it would follow some "
|       |-InlineCommandComment 0x555f55ef0d50 <col:60, col:61> Name="c" RenderMonospaced Arg[0]="next"
|       |-TextComment 0x555f55ef0d70 <col:67, col:71> Text=" task"
|       |-TextComment 0x555f55ef0d90 <line:678:3, col:73> Text=" pointers treating given pointer as a pointer to the k_thread structure"
|       |-TextComment 0x555f55ef0db0 <line:679:3, col:45> Text=" while it is something different right now."
|       |-TextComment 0x555f55ef0dd0 <line:680:3, col:77> Text=" Do not reuse the memory that was occupied by k_thread structure of aborted"
|       `-TextComment 0x555f55ef0df0 <line:681:3, col:72> Text=" task if it was aborted after this function was called in any context."
|-FunctionDecl 0x555f55e42d70 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:784:43> line:779:19 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x555f55e42768 <col:35, col:52> col:52 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x555f55e427d8 <line:780:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x555f55e42848 <line:781:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55e428e0 <line:782:7, col:24> col:24 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x555f55e42958 <line:783:7, col:13> col:13 p1 'void *'
| |-ParmVarDecl 0x555f55e429d0 <col:17, col:23> col:23 p2 'void *'
| |-ParmVarDecl 0x555f55e42a48 <col:27, col:33> col:33 p3 'void *'
| |-ParmVarDecl 0x555f55e42ac0 <line:784:7, col:11> col:11 prio 'int'
| |-ParmVarDecl 0x555f55e42b30 <col:17, col:23> col:23 options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x555f55e42ba0 <col:32, col:38> col:38 delay 's32_t':'int'
| `-FullComment 0x555f55ef1d80 <line:746:3, line:778:1>
|   |-ParagraphComment 0x555f55ef0fb0 <line:746:3>
|   | `-TextComment 0x555f55ef0f80 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef0fd0 <col:4, col:26> Name="brief"
|   | `-ParagraphComment 0x555f55ef1030 <col:10, col:26>
|   |   `-TextComment 0x555f55ef1000 <col:10, col:26> Text=" Create a thread."
|   |-ParagraphComment 0x555f55ef1080 <line:748:3, col:70>
|   | `-TextComment 0x555f55ef1050 <col:3, col:70> Text=" This routine initializes a thread, then schedules it for execution."
|   |-ParagraphComment 0x555f55ef1140 <line:750:3, line:753:11>
|   | |-TextComment 0x555f55ef10a0 <line:750:3, col:78> Text=" The new thread may be scheduled for immediate execution or a delayed start."
|   | |-TextComment 0x555f55ef10c0 <line:751:3, col:71> Text=" If the newly spawned thread does not have a delayed start the kernel"
|   | |-TextComment 0x555f55ef10e0 <line:752:3, col:70> Text=" scheduler may preempt the current thread to allow the new thread to"
|   | `-TextComment 0x555f55ef1100 <line:753:3, col:11> Text=" execute."
|   |-ParagraphComment 0x555f55ef11e0 <line:755:3, line:757:44>
|   | |-TextComment 0x555f55ef1160 <line:755:3, col:73> Text=" Thread options are architecture-specific, and can include K_ESSENTIAL,"
|   | |-TextComment 0x555f55ef1180 <line:756:3, col:77> Text=" K_FP_REGS, and K_SSE_REGS. Multiple options may be specified by separating"
|   | `-TextComment 0x555f55ef11a0 <line:757:3, col:44> Text=" them using "|" (the logical OR operator)."
|   |-ParagraphComment 0x555f55ef12a0 <line:759:3, line:762:13>
|   | |-TextComment 0x555f55ef1200 <line:759:3, col:79> Text=" Historically, users often would use the beginning of the stack memory region"
|   | |-TextComment 0x555f55ef1220 <line:760:3, col:75> Text=" to store the struct k_thread data, although corruption will occur if the"
|   | |-TextComment 0x555f55ef1240 <line:761:3, col:80> Text=" stack overflows this region and stack protection features may not detect this"
|   | `-TextComment 0x555f55ef1260 <line:762:3, col:13> Text=" situation."
|   |-ParagraphComment 0x555f55ef12f0 <line:764:3>
|   | `-TextComment 0x555f55ef12c0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ef1310 <col:4, line:765:3> [in] implicitly Param="new_thread" ParamIndex=0
|   | `-ParagraphComment 0x555f55ef13c0 <line:764:21, line:765:3>
|   |   |-TextComment 0x555f55ef1370 <line:764:21, col:61> Text=" Pointer to uninitialized struct k_thread"
|   |   `-TextComment 0x555f55ef1390 <line:765:3> Text=" "
|   |-ParamCommandComment 0x555f55ef13e0 <col:4, line:766:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x555f55ef1490 <line:765:16, line:766:3>
|   |   |-TextComment 0x555f55ef1440 <line:765:16, col:43> Text=" Pointer to the stack space."
|   |   `-TextComment 0x555f55ef1460 <line:766:3> Text=" "
|   |-ParamCommandComment 0x555f55ef14b0 <col:4, line:767:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x555f55ef1560 <line:766:21, line:767:3>
|   |   |-TextComment 0x555f55ef1510 <line:766:21, col:41> Text=" Stack size in bytes."
|   |   `-TextComment 0x555f55ef1530 <line:767:3> Text=" "
|   |-ParamCommandComment 0x555f55ef1580 <col:4, line:768:3> [in] implicitly Param="entry" ParamIndex=3
|   | `-ParagraphComment 0x555f55ef1630 <line:767:16, line:768:3>
|   |   |-TextComment 0x555f55ef15e0 <line:767:16, col:38> Text=" Thread entry function."
|   |   `-TextComment 0x555f55ef1600 <line:768:3> Text=" "
|   |-ParamCommandComment 0x555f55ef1650 <col:4, line:769:3> [in] implicitly Param="p1" ParamIndex=4
|   | `-ParagraphComment 0x555f55ef1700 <line:768:13, line:769:3>
|   |   |-TextComment 0x555f55ef16b0 <line:768:13, col:39> Text=" 1st entry point parameter."
|   |   `-TextComment 0x555f55ef16d0 <line:769:3> Text=" "
|   |-ParamCommandComment 0x555f55ef1720 <col:4, line:770:3> [in] implicitly Param="p2" ParamIndex=5
|   | `-ParagraphComment 0x555f55ef17d0 <line:769:13, line:770:3>
|   |   |-TextComment 0x555f55ef1780 <line:769:13, col:39> Text=" 2nd entry point parameter."
|   |   `-TextComment 0x555f55ef17a0 <line:770:3> Text=" "
|   |-ParamCommandComment 0x555f55ef17f0 <col:4, line:771:3> [in] implicitly Param="p3" ParamIndex=6
|   | `-ParagraphComment 0x555f55ef18a0 <line:770:13, line:771:3>
|   |   |-TextComment 0x555f55ef1850 <line:770:13, col:39> Text=" 3rd entry point parameter."
|   |   `-TextComment 0x555f55ef1870 <line:771:3> Text=" "
|   |-ParamCommandComment 0x555f55ef18c0 <col:4, line:772:3> [in] implicitly Param="prio" ParamIndex=7
|   | `-ParagraphComment 0x555f55ef1970 <line:771:15, line:772:3>
|   |   |-TextComment 0x555f55ef1920 <line:771:15, col:31> Text=" Thread priority."
|   |   `-TextComment 0x555f55ef1940 <line:772:3> Text=" "
|   |-ParamCommandComment 0x555f55ef1990 <col:4, line:773:3> [in] implicitly Param="options" ParamIndex=8
|   | `-ParagraphComment 0x555f55ef1a40 <line:772:18, line:773:3>
|   |   |-TextComment 0x555f55ef19f0 <line:772:18, col:33> Text=" Thread options."
|   |   `-TextComment 0x555f55ef1a10 <line:773:3> Text=" "
|   |-ParamCommandComment 0x555f55ef1a60 <col:4, col:80> [in] implicitly Param="delay" ParamIndex=9
|   | `-ParagraphComment 0x555f55ef1af0 <col:16, col:80>
|   |   `-TextComment 0x555f55ef1ac0 <col:16, col:80> Text=" Scheduling delay (in milliseconds), or K_NO_WAIT (for no delay)."
|   |-ParagraphComment 0x555f55ef1b40 <line:775:3>
|   | `-TextComment 0x555f55ef1b10 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef1b60 <col:4, col:28> Name="return"
|   | `-ParagraphComment 0x555f55ef1bc0 <col:11, col:28>
|   |   `-TextComment 0x555f55ef1b90 <col:11, col:28> Text=" ID of new thread."
|   |-ParagraphComment 0x555f55ef1c10 <line:777:3>
|   | `-TextComment 0x555f55ef1be0 <col:3> Text=" "
|   |-VerbatimLineComment 0x555f55ef1c30 <col:4, col:21> Text=" K-THREAD-001"
|   `-ParagraphComment 0x555f55ef1ca0 <line:778:1>
|     `-TextComment 0x555f55ef1c70 <col:1> Text=" "
|-FunctionDecl 0x555f55e46240 <line:795:1, line:797:18> line:795:27 k_thread_user_mode_enter 'void (k_thread_entry_t, void *, void *, void *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x555f55e42e98 <col:52, col:69> col:69 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x555f55e45f70 <line:796:10, col:16> col:16 p1 'void *'
| |-ParmVarDecl 0x555f55e45fe8 <col:20, col:26> col:26 p2 'void *'
| |-ParmVarDecl 0x555f55e46060 <line:797:10, col:16> col:16 p3 'void *'
| `-FullComment 0x555f55ef2330 <line:787:3, line:794:1>
|   |-ParagraphComment 0x555f55ef1e20 <line:787:3>
|   | `-TextComment 0x555f55ef1df0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef1e40 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x555f55ef1ea0 <col:10, col:61>
|   |   `-TextComment 0x555f55ef1e70 <col:10, col:61> Text=" Drop a thread's privileges permanently to user mode"
|   |-ParagraphComment 0x555f55ef1ef0 <line:789:3>
|   | `-TextComment 0x555f55ef1ec0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ef1f10 <col:4, line:790:3> [in] implicitly Param="entry" ParamIndex=0
|   | `-ParagraphComment 0x555f55ef1fc0 <line:789:16, line:790:3>
|   |   |-TextComment 0x555f55ef1f70 <line:789:16, col:48> Text=" Function to start executing from"
|   |   `-TextComment 0x555f55ef1f90 <line:790:3> Text=" "
|   |-ParamCommandComment 0x555f55ef1fe0 <col:4, line:791:3> [in] implicitly Param="p1" ParamIndex=1
|   | `-ParagraphComment 0x555f55ef2090 <line:790:13, line:791:3>
|   |   |-TextComment 0x555f55ef2040 <line:790:13, col:38> Text=" 1st entry point parameter"
|   |   `-TextComment 0x555f55ef2060 <line:791:3> Text=" "
|   |-ParamCommandComment 0x555f55ef20b0 <col:4, line:792:3> [in] implicitly Param="p2" ParamIndex=2
|   | `-ParagraphComment 0x555f55ef2160 <line:791:13, line:792:3>
|   |   |-TextComment 0x555f55ef2110 <line:791:13, col:38> Text=" 2nd entry point parameter"
|   |   `-TextComment 0x555f55ef2130 <line:792:3> Text=" "
|   |-ParamCommandComment 0x555f55ef2180 <col:4, line:793:3> [in] implicitly Param="p3" ParamIndex=3
|   | `-ParagraphComment 0x555f55ef2230 <line:792:13, line:793:3>
|   |   |-TextComment 0x555f55ef21e0 <line:792:13, col:38> Text=" 3rd entry point parameter"
|   |   `-TextComment 0x555f55ef2200 <line:793:3> Text=" "
|   |-VerbatimLineComment 0x555f55ef2250 <col:4, col:21> Text=" K-THREAD-003"
|   `-ParagraphComment 0x555f55ef22c0 <line:794:1>
|     `-TextComment 0x555f55ef2290 <col:1> Text=" "
|-FunctionDecl 0x555f55e46520 <line:831:1, line:835:1> line:831:20 k_thread_resource_pool_assign 'void (struct k_thread *, struct k_mem_pool *)' static inline
| |-ParmVarDecl 0x555f55e46380 <col:50, col:67> col:67 used thread 'struct k_thread *'
| |-ParmVarDecl 0x555f55e46408 <line:832:8, col:27> col:27 used pool 'struct k_mem_pool *'
| |-CompoundStmt 0x555f55e466d8 <line:833:1, line:835:1>
| | `-BinaryOperator 0x555f55e46688 <line:834:2, col:26> 'struct k_mem_pool *' '='
| |   |-MemberExpr 0x555f55e46610 <col:2, col:10> 'struct k_mem_pool *' lvalue ->resource_pool 0x555f55df86f0
| |   | `-ImplicitCastExpr 0x555f55e465f8 <col:2> 'struct k_thread *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x555f55e465d0 <col:2> 'struct k_thread *' lvalue ParmVar 0x555f55e46380 'thread' 'struct k_thread *'
| |   `-ImplicitCastExpr 0x555f55e46670 <col:26> 'struct k_mem_pool *' <LValueToRValue>
| |     `-DeclRefExpr 0x555f55e46648 <col:26> 'struct k_mem_pool *' lvalue ParmVar 0x555f55e46408 'pool' 'struct k_mem_pool *'
| `-FullComment 0x555f55ef2880 <line:817:3, line:830:1>
|   |-ParagraphComment 0x555f55ef23d0 <line:817:3>
|   | `-TextComment 0x555f55ef23a0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef23f0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x555f55ef2450 <col:10, col:51>
|   |   `-TextComment 0x555f55ef2420 <col:10, col:51> Text=" Assign a resource memory pool to a thread"
|   |-ParagraphComment 0x555f55ef24f0 <line:819:3, line:821:51>
|   | |-TextComment 0x555f55ef2470 <line:819:3, col:73> Text=" By default, threads have no resource pool assigned unless their parent"
|   | |-TextComment 0x555f55ef2490 <line:820:3, col:70> Text=" thread has a resource pool, in which case it is inherited. Multiple"
|   | `-TextComment 0x555f55ef24b0 <line:821:3, col:51> Text=" threads may be assigned to the same memory pool."
|   |-ParagraphComment 0x555f55ef2560 <line:823:3, line:824:17>
|   | |-TextComment 0x555f55ef2510 <line:823:3, col:74> Text=" Changing a thread's resource pool will not migrate allocations from the"
|   | `-TextComment 0x555f55ef2530 <line:824:3, col:17> Text=" previous pool."
|   |-ParagraphComment 0x555f55ef25b0 <line:826:3>
|   | `-TextComment 0x555f55ef2580 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ef25d0 <col:4, line:828:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x555f55ef26b0 <line:826:17, line:828:3>
|   |   |-TextComment 0x555f55ef2630 <line:826:17, col:77> Text=" Target thread to assign a memory pool for resource requests,"
|   |   |-TextComment 0x555f55ef2650 <line:827:3, col:75> Text="               or NULL if the thread should no longer have a memory pool."
|   |   `-TextComment 0x555f55ef2670 <line:828:3> Text=" "
|   |-ParamCommandComment 0x555f55ef26d0 <col:4, line:829:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x555f55ef2780 <line:828:15, line:829:3>
|   |   |-TextComment 0x555f55ef2730 <line:828:15, col:48> Text=" Memory pool to use for resources."
|   |   `-TextComment 0x555f55ef2750 <line:829:3> Text=" "
|   |-VerbatimLineComment 0x555f55ef27a0 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x555f55ef2810 <line:830:1>
|     `-TextComment 0x555f55ef27e0 <col:1> Text=" "
|-FunctionDecl 0x555f55e46800 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:864:33> col:17 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x555f55e46700 <col:25, col:31> col:31 ms 's32_t':'int'
| `-FullComment 0x555f55ef2d60 <line:855:3, line:863:1>
|   |-ParagraphComment 0x555f55ef2920 <line:855:3>
|   | `-TextComment 0x555f55ef28f0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef2940 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x555f55ef29a0 <col:10, col:42>
|   |   `-TextComment 0x555f55ef2970 <col:10, col:42> Text=" Put the current thread to sleep."
|   |-ParagraphComment 0x555f55ef2a70 <line:857:3, col:78>
|   | |-TextComment 0x555f55ef29c0 <col:3, col:53> Text=" This routine puts the current thread to sleep for "
|   | |-InlineCommandComment 0x555f55ef2a10 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="duration"
|   | `-TextComment 0x555f55ef2a30 <col:65, col:78> Text=" milliseconds."
|   |-ParagraphComment 0x555f55ef2ac0 <line:859:3>
|   | `-TextComment 0x555f55ef2a90 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ef2ae0 <col:4, col:45> [in] implicitly Param="ms" ParamIndex=0
|   | `-ParagraphComment 0x555f55ef2b70 <col:13, col:45>
|   |   `-TextComment 0x555f55ef2b40 <col:13, col:45> Text=" Number of milliseconds to sleep."
|   |-ParagraphComment 0x555f55ef2bc0 <line:861:3>
|   | `-TextComment 0x555f55ef2b90 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef2be0 <col:4, line:862:44> Name="return"
|   | `-ParagraphComment 0x555f55ef2c60 <line:861:11, line:862:44>
|   |   |-TextComment 0x555f55ef2c10 <line:861:11, col:79> Text=" Zero if the requested time has elapsed or the number of milliseconds"
|   |   `-TextComment 0x555f55ef2c30 <line:862:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x555f55ef2c80 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x555f55ef2cf0 <line:863:1>
|     `-TextComment 0x555f55ef2cc0 <col:1> Text=" "
|-FunctionDecl 0x555f55e46970 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:880:34> col:17 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x555f55e468e8 <col:26, col:32> col:32 us 's32_t':'int'
| `-FullComment 0x555f55ef3260 <line:867:3, line:879:1>
|   |-ParagraphComment 0x555f55ef2e00 <line:867:3>
|   | `-TextComment 0x555f55ef2dd0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef2e20 <col:4, col:70> Name="brief"
|   | `-ParagraphComment 0x555f55ef2e80 <col:10, col:70>
|   |   `-TextComment 0x555f55ef2e50 <col:10, col:70> Text=" Put the current thread to sleep with microsecond resolution."
|   |-ParagraphComment 0x555f55ef2f70 <line:869:3, line:873:71>
|   | |-TextComment 0x555f55ef2ea0 <line:869:3, col:71> Text=" This function is unlikely to work as expected without kernel tuning."
|   | |-TextComment 0x555f55ef2ec0 <line:870:3, col:71> Text=" In particular, because the lower bound on the duration of a sleep is"
|   | |-TextComment 0x555f55ef2ee0 <line:871:3, col:74> Text=" the duration of a tick, CONFIG_SYS_CLOCK_TICKS_PER_SEC must be adjusted"
|   | |-TextComment 0x555f55ef2f00 <line:872:3, col:73> Text=" to achieve the resolution desired. The implications of doing this must"
|   | `-TextComment 0x555f55ef2f20 <line:873:3, col:71> Text=" be understood before attempting to use k_usleep(). Use with caution."
|   |-ParagraphComment 0x555f55ef2fc0 <line:875:3>
|   | `-TextComment 0x555f55ef2f90 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ef2fe0 <col:4, col:45> [in] implicitly Param="us" ParamIndex=0
|   | `-ParagraphComment 0x555f55ef3070 <col:13, col:45>
|   |   `-TextComment 0x555f55ef3040 <col:13, col:45> Text=" Number of microseconds to sleep."
|   |-ParagraphComment 0x555f55ef30c0 <line:877:3>
|   | `-TextComment 0x555f55ef3090 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef30e0 <col:4, line:878:44> Name="return"
|   | `-ParagraphComment 0x555f55ef3160 <line:877:11, line:878:44>
|   |   |-TextComment 0x555f55ef3110 <line:877:11, col:79> Text=" Zero if the requested time has elapsed or the number of microseconds"
|   |   `-TextComment 0x555f55ef3130 <line:878:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x555f55ef3180 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x555f55ef31f0 <line:879:1>
|     `-TextComment 0x555f55ef31c0 <col:1> Text=" "
|-FunctionDecl 0x555f55e46b20 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:890:46> col:16 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x555f55e46a58 <col:28, col:34> col:34 usec_to_wait 'u32_t':'unsigned int'
| `-FullComment 0x555f55ef3590 <line:883:3, line:888:14>
|   |-ParagraphComment 0x555f55ef3300 <line:883:3>
|   | `-TextComment 0x555f55ef32d0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef3320 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x555f55ef3380 <col:10, col:48>
|   |   `-TextComment 0x555f55ef3350 <col:10, col:48> Text=" Cause the current thread to busy wait."
|   |-ParagraphComment 0x555f55ef3470 <line:885:3, line:886:32>
|   | |-TextComment 0x555f55ef33a0 <line:885:3, col:76> Text=" This routine causes the current thread to execute a "do nothing" loop for"
|   | |-TextComment 0x555f55ef33c0 <line:886:3> Text=" "
|   | |-InlineCommandComment 0x555f55ef3410 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="usec_to_wait"
|   | `-TextComment 0x555f55ef3430 <col:19, col:32> Text=" microseconds."
|   |-ParagraphComment 0x555f55ef34c0 <line:888:3>
|   | `-TextComment 0x555f55ef3490 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ef34e0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55ef3540 <col:11, col:14>
|       `-TextComment 0x555f55ef3510 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55e46c88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:902:28> col:16 k_yield 'void (void)' static inline
| `-FullComment 0x555f55ef3930 <line:893:3, line:901:1>
|   |-ParagraphComment 0x555f55ef3630 <line:893:3>
|   | `-TextComment 0x555f55ef3600 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef3650 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x555f55ef36b0 <col:10, col:35>
|   |   `-TextComment 0x555f55ef3680 <col:10, col:35> Text=" Yield the current thread."
|   |-ParagraphComment 0x555f55ef3750 <line:895:3, line:897:67>
|   | |-TextComment 0x555f55ef36d0 <line:895:3, col:71> Text=" This routine causes the current thread to yield execution to another"
|   | |-TextComment 0x555f55ef36f0 <line:896:3, col:77> Text=" thread of the same or higher priority. If there are no other ready threads"
|   | `-TextComment 0x555f55ef3710 <line:897:3, col:67> Text=" of the same or higher priority, the routine returns immediately."
|   |-ParagraphComment 0x555f55ef37a0 <line:899:3>
|   | `-TextComment 0x555f55ef3770 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef37c0 <col:4, line:900:3> Name="return"
|   | `-ParagraphComment 0x555f55ef3840 <line:899:11, line:900:3>
|   |   |-TextComment 0x555f55ef37f0 <line:899:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55ef3810 <line:900:3> Text=" "
|   |-VerbatimLineComment 0x555f55ef3860 <col:4, col:21> Text=" K-THREAD-015"
|   `-ParagraphComment 0x555f55ef38d0 <line:901:1>
|     `-TextComment 0x555f55ef38a0 <col:1> Text=" "
|-FunctionDecl 0x555f55e46e70 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:916:39> col:16 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x555f55e46d68 <col:25, col:33> col:33 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x555f55ef4900 <line:905:3, line:915:1>
|   |-ParagraphComment 0x555f55ef39d0 <line:905:3>
|   | `-TextComment 0x555f55ef39a0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef39f0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x555f55ef3a50 <col:10, col:36>
|   |   `-TextComment 0x555f55ef3a20 <col:10, col:36> Text=" Wake up a sleeping thread."
|   |-ParagraphComment 0x555f55ef3b20 <line:907:3, col:61>
|   | |-TextComment 0x555f55ef3a70 <col:3, col:37> Text=" This routine prematurely wakes up "
|   | |-InlineCommandComment 0x555f55ef3ac0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x555f55ef3ae0 <col:47, col:61> Text=" from sleeping."
|   |-ParagraphComment 0x555f55ef3bf0 <line:909:3, col:69>
|   | |-TextComment 0x555f55ef3b40 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x555f55ef3b90 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x555f55ef3bb0 <col:16, col:69> Text=" is not currently sleeping, the routine has no effect."
|   |-ParagraphComment 0x555f55ef3c40 <line:911:3>
|   | `-TextComment 0x555f55ef3c10 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ef3c60 <col:4, col:38> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x555f55ef4710 <col:17, col:38>
|   |   `-TextComment 0x555f55ef46e0 <col:17, col:38> Text=" ID of thread to wake."
|   |-ParagraphComment 0x555f55ef4760 <line:913:3>
|   | `-TextComment 0x555f55ef4730 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef4780 <col:4, line:914:3> Name="return"
|   | `-ParagraphComment 0x555f55ef4800 <line:913:11, line:914:3>
|   |   |-TextComment 0x555f55ef47b0 <line:913:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55ef47d0 <line:914:3> Text=" "
|   |-VerbatimLineComment 0x555f55ef4820 <col:4, col:21> Text=" K-THREAD-014"
|   `-ParagraphComment 0x555f55ef4890 <line:915:1>
|     `-TextComment 0x555f55ef4860 <col:1> Text=" "
|-FunctionDecl 0x555f55e47060 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:925:37> col:19 k_current_get 'k_tid_t (void)' static inline
| `-FullComment 0x555f55ef4c30 <line:919:3, line:924:1>
|   |-ParagraphComment 0x555f55ef49a0 <line:919:3>
|   | `-TextComment 0x555f55ef4970 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef49c0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x555f55ef4a20 <col:10, col:46>
|   |   `-TextComment 0x555f55ef49f0 <col:10, col:46> Text=" Get thread ID of the current thread."
|   |-ParagraphComment 0x555f55ef4a70 <line:921:3>
|   | `-TextComment 0x555f55ef4a40 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef4a90 <col:4, col:32> Name="return"
|   | `-ParagraphComment 0x555f55ef4af0 <col:11, col:32>
|   |   `-TextComment 0x555f55ef4ac0 <col:11, col:32> Text=" ID of current thread."
|   |-ParagraphComment 0x555f55ef4b40 <line:923:3>
|   | `-TextComment 0x555f55ef4b10 <col:3> Text=" "
|   |-VerbatimLineComment 0x555f55ef4b60 <col:4, col:21> Text=" K-THREAD-013"
|   `-ParagraphComment 0x555f55ef4bd0 <line:924:1>
|     `-TextComment 0x555f55ef4ba0 <col:1> Text=" "
|-FunctionDecl 0x555f55e471c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:942:45> col:16 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x555f55e47138 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x555f55ef51d0 <line:928:3, line:941:1>
|   |-ParagraphComment 0x555f55ef4cd0 <line:928:3>
|   | `-TextComment 0x555f55ef4ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef4cf0 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x555f55ef4d50 <col:10, col:25>
|   |   `-TextComment 0x555f55ef4d20 <col:10, col:25> Text=" Abort a thread."
|   |-ParagraphComment 0x555f55ef4ee0 <line:930:3, line:935:38>
|   | |-TextComment 0x555f55ef4d70 <line:930:3, col:47> Text=" This routine permanently stops execution of "
|   | |-InlineCommandComment 0x555f55ef4dc0 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="thread."
|   | |-TextComment 0x555f55ef4de0 <col:58, col:77> Text=" The thread is taken"
|   | |-TextComment 0x555f55ef4e00 <line:931:3, col:73> Text=" off all kernel queues it is part of (i.e. the ready queue, the timeout"
|   | |-TextComment 0x555f55ef4e20 <line:932:3, col:75> Text=" queue, or a kernel object wait queue). However, any kernel resources the"
|   | |-TextComment 0x555f55ef4e40 <line:933:3, col:72> Text=" thread might currently own (such as mutexes or memory blocks) are not"
|   | |-TextComment 0x555f55ef4e60 <line:934:3, col:77> Text=" released. It is the responsibility of the caller of this routine to ensure"
|   | `-TextComment 0x555f55ef4e80 <line:935:3, col:38> Text=" all necessary cleanup is performed."
|   |-ParagraphComment 0x555f55ef4f30 <line:937:3>
|   | `-TextComment 0x555f55ef4f00 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ef4f50 <col:4, col:39> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x555f55ef4fe0 <col:17, col:39>
|   |   `-TextComment 0x555f55ef4fb0 <col:17, col:39> Text=" ID of thread to abort."
|   |-ParagraphComment 0x555f55ef5030 <line:939:3>
|   | `-TextComment 0x555f55ef5000 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef5050 <col:4, line:940:3> Name="return"
|   | `-ParagraphComment 0x555f55ef50d0 <line:939:11, line:940:3>
|   |   |-TextComment 0x555f55ef5080 <line:939:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55ef50a0 <line:940:3> Text=" "
|   |-VerbatimLineComment 0x555f55ef50f0 <col:4, col:21> Text=" K-THREAD-012"
|   `-ParagraphComment 0x555f55ef5160 <line:941:1>
|     `-TextComment 0x555f55ef5130 <col:1> Text=" "
|-FunctionDecl 0x555f55e47330 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:955:45> col:16 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x555f55e472a8 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x555f55ef55a0 <line:946:3, line:954:1>
|   |-ParagraphComment 0x555f55ef5270 <line:946:3>
|   | `-TextComment 0x555f55ef5240 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef5290 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x555f55ef52f0 <col:10, col:34>
|   |   `-TextComment 0x555f55ef52c0 <col:10, col:34> Text=" Start an inactive thread"
|   |-ParagraphComment 0x555f55ef5390 <line:948:3, line:950:9>
|   | |-TextComment 0x555f55ef5310 <line:948:3, col:73> Text=" If a thread was created with K_FOREVER in the delay parameter, it will"
|   | |-TextComment 0x555f55ef5330 <line:949:3, col:69> Text=" not be added to the scheduling queue until this function is called"
|   | `-TextComment 0x555f55ef5350 <line:950:3, col:9> Text=" on it."
|   |-ParagraphComment 0x555f55ef53e0 <line:952:3>
|   | `-TextComment 0x555f55ef53b0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ef5400 <col:4, line:953:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x555f55ef54b0 <line:952:17, line:953:3>
|   |   |-TextComment 0x555f55ef5460 <line:952:17, col:32> Text=" thread to start"
|   |   `-TextComment 0x555f55ef5480 <line:953:3> Text=" "
|   |-VerbatimLineComment 0x555f55ef54d0 <col:4, col:21> Text=" K-THREAD-011"
|   `-ParagraphComment 0x555f55ef5540 <line:954:1>
|     `-TextComment 0x555f55ef5510 <col:1> Text=" "
|-RecordDecl 0x555f55e47408 <line:964:1, line:977:1> line:964:8 struct _static_thread_data definition
| |-FieldDecl 0x555f55e474d8 <line:965:2, col:19> col:19 init_thread 'struct k_thread *'
| |-FieldDecl 0x555f55e47530 <line:966:2, col:20> col:20 init_stack 'k_thread_stack_t *'
| |-FieldDecl 0x555f55e47590 <line:967:2, col:15> col:15 init_stack_size 'unsigned int'
| |-FieldDecl 0x555f55e475e8 <line:968:2, col:19> col:19 init_entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-FieldDecl 0x555f55e47648 <line:969:2, col:8> col:8 init_p1 'void *'
| |-FieldDecl 0x555f55e476a8 <line:970:2, col:8> col:8 init_p2 'void *'
| |-FieldDecl 0x555f55e47708 <line:971:2, col:8> col:8 init_p3 'void *'
| |-FieldDecl 0x555f55e47768 <line:972:2, col:6> col:6 init_prio 'int'
| |-FieldDecl 0x555f55e477c0 <line:973:2, col:8> col:8 init_options 'u32_t':'unsigned int'
| |-FieldDecl 0x555f55e47818 <line:974:2, col:8> col:8 init_delay 's32_t':'int'
| |-FieldDecl 0x555f55e47900 <line:975:2, col:25> col:9 init_abort 'void (*)(void)'
| `-FieldDecl 0x555f55e47960 <line:976:2, col:14> col:14 init_name 'const char *'
|-FunctionDecl 0x555f55e47b58 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1053:51> col:15 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x555f55e47a48 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x555f55ef5ab0 <line:1044:3, line:1052:1>
|   |-ParagraphComment 0x555f55ef5640 <line:1044:3>
|   | `-TextComment 0x555f55ef5610 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef5660 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x555f55ef56c0 <col:10, col:34>
|   |   `-TextComment 0x555f55ef5690 <col:10, col:34> Text=" Get a thread's priority."
|   |-ParagraphComment 0x555f55ef5760 <line:1046:3, col:39>
|   | |-TextComment 0x555f55ef56e0 <col:3, col:37> Text=" This routine gets the priority of "
|   | `-InlineCommandComment 0x555f55ef5730 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x555f55ef57b0 <line:1048:3>
|   | `-TextComment 0x555f55ef5780 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ef57d0 <col:4, col:55> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x555f55ef5860 <col:17, col:55>
|   |   `-TextComment 0x555f55ef5830 <col:17, col:55> Text=" ID of thread whose priority is needed."
|   |-ParagraphComment 0x555f55ef58b0 <line:1050:3>
|   | `-TextComment 0x555f55ef5880 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef58d0 <col:4, line:1051:3> Name="return"
|   | `-ParagraphComment 0x555f55ef59b0 <line:1050:11, line:1051:3>
|   |   |-TextComment 0x555f55ef5900 <line:1050:11, col:23> Text=" Priority of "
|   |   |-InlineCommandComment 0x555f55ef5950 <col:24, col:25> Name="a" RenderEmphasized Arg[0]="thread."
|   |   `-TextComment 0x555f55ef5970 <line:1051:3> Text=" "
|   |-VerbatimLineComment 0x555f55ef59d0 <col:4, col:21> Text=" K-THREAD-009"
|   `-ParagraphComment 0x555f55ef5a40 <line:1052:1>
|     `-TextComment 0x555f55ef5a10 <col:1> Text=" "
|-FunctionDecl 0x555f55e47dc0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1083:62> col:16 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x555f55e47c38 <col:38, col:46> col:46 thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x555f55e47cb0 <col:54, col:58> col:58 prio 'int'
| `-FullComment 0x555f55ef6470 <line:1056:3, line:1082:1>
|   |-ParagraphComment 0x555f55ef5b50 <line:1056:3>
|   | `-TextComment 0x555f55ef5b20 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef5b70 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x555f55ef5bd0 <col:10, col:34>
|   |   `-TextComment 0x555f55ef5ba0 <col:10, col:34> Text=" Set a thread's priority."
|   |-ParagraphComment 0x555f55ef5c70 <line:1058:3, col:54>
|   | |-TextComment 0x555f55ef5bf0 <col:3, col:52> Text=" This routine immediately changes the priority of "
|   | `-InlineCommandComment 0x555f55ef5c40 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x555f55ef5d60 <line:1060:3, line:1061:10>
|   | |-TextComment 0x555f55ef5c90 <line:1060:3, col:64> Text=" Rescheduling can occur immediately depending on the priority "
|   | |-InlineCommandComment 0x555f55ef5ce0 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x555f55ef5d00 <col:74, col:76> Text=" is"
|   | `-TextComment 0x555f55ef5d20 <line:1061:3, col:10> Text=" set to:"
|   |-ParagraphComment 0x555f55ef5e50 <line:1063:3, line:1064:75>
|   | |-TextComment 0x555f55ef5d80 <line:1063:3, col:71> Text=" - If its priority is raised above the priority of the caller of this"
|   | |-TextComment 0x555f55ef5da0 <line:1064:3, col:44> Text=" function, and the caller is preemptible, "
|   | |-InlineCommandComment 0x555f55ef5df0 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x555f55ef5e10 <col:54, col:75> Text=" will be scheduled in."
|   |-ParagraphComment 0x555f55ef5ef0 <line:1066:3, line:1068:41>
|   | |-TextComment 0x555f55ef5e70 <line:1066:3, col:75> Text=" - If the caller operates on itself, it lowers its priority below that of"
|   | |-TextComment 0x555f55ef5e90 <line:1067:3, col:76> Text=" other threads in the system, and the caller is preemptible, the thread of"
|   | `-TextComment 0x555f55ef5eb0 <line:1068:3, col:41> Text=" highest priority will be scheduled in."
|   |-ParagraphComment 0x555f55ef5f90 <line:1070:3, line:1072:20>
|   | |-TextComment 0x555f55ef5f10 <line:1070:3, col:74> Text=" Priority can be assigned in the range of -CONFIG_NUM_COOP_PRIORITIES to"
|   | |-TextComment 0x555f55ef5f30 <line:1071:3, col:76> Text=" CONFIG_NUM_PREEMPT_PRIORITIES-1, where -CONFIG_NUM_COOP_PRIORITIES is the"
|   | `-TextComment 0x555f55ef5f50 <line:1072:3, col:20> Text=" highest priority."
|   |-ParagraphComment 0x555f55ef5fe0 <line:1074:3>
|   | `-TextComment 0x555f55ef5fb0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ef6000 <col:4, line:1075:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x555f55ef60b0 <line:1074:17, line:1075:3>
|   |   |-TextComment 0x555f55ef6060 <line:1074:17, col:58> Text=" ID of thread whose priority is to be set."
|   |   `-TextComment 0x555f55ef6080 <line:1075:3> Text=" "
|   |-ParamCommandComment 0x555f55ef60d0 <col:4, col:28> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x555f55ef6160 <col:15, col:28>
|   |   `-TextComment 0x555f55ef6130 <col:15, col:28> Text=" New priority."
|   |-ParagraphComment 0x555f55ef61b0 <line:1077:3>
|   | `-TextComment 0x555f55ef6180 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef61d0 <col:4, line:1078:57> Name="warning"
|   | `-ParagraphComment 0x555f55ef6250 <line:1077:12, line:1078:57>
|   |   |-TextComment 0x555f55ef6200 <line:1077:12, col:73> Text=" Changing the priority of a thread currently involved in mutex"
|   |   `-TextComment 0x555f55ef6220 <line:1078:3, col:57> Text=" priority inheritance may result in undefined behavior."
|   |-ParagraphComment 0x555f55ef62a0 <line:1080:3>
|   | `-TextComment 0x555f55ef6270 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef62c0 <col:4, line:1081:3> Name="return"
|   | `-ParagraphComment 0x555f55ef6340 <line:1080:11, line:1081:3>
|   |   |-TextComment 0x555f55ef62f0 <line:1080:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55ef6310 <line:1081:3> Text=" "
|   |-VerbatimLineComment 0x555f55ef6360 <col:4, col:21> Text=" K-THREAD-008"
|   `-ParagraphComment 0x555f55ef63d0 <line:1082:1>
|     `-TextComment 0x555f55ef63a0 <col:1> Text=" "
|-FunctionDecl 0x555f55e48640 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1213:47> col:16 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x555f55e47ea8 <col:33, col:41> col:41 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x555f55ef6b80 <line:1196:3, line:1212:1>
|   |-ParagraphComment 0x555f55ef6510 <line:1196:3>
|   | `-TextComment 0x555f55ef64e0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef6530 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x555f55ef6590 <col:10, col:27>
|   |   `-TextComment 0x555f55ef6560 <col:10, col:27> Text=" Suspend a thread."
|   |-ParagraphComment 0x555f55ef67c0 <line:1198:3, line:1204:48>
|   | |-TextComment 0x555f55ef65b0 <line:1198:3, col:58> Text=" This routine prevents the kernel scheduler from making "
|   | |-InlineCommandComment 0x555f55ef6600 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x555f55ef6620 <line:1199:3, col:56> Text=" the current thread. All other internal operations on "
|   | |-InlineCommandComment 0x555f55ef6670 <col:57, col:58> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x555f55ef6690 <col:66, col:69> Text=" are"
|   | |-TextComment 0x555f55ef66b0 <line:1200:3, col:68> Text=" still performed; for example, kernel objects it is waiting on are"
|   | |-TextComment 0x555f55ef66f0 <line:1201:3, col:55> Text=" still handed to it.  Note that any existing timeouts"
|   | |-TextComment 0x555f55ef6710 <line:1202:3, col:66> Text=" (e.g. k_sleep(), or a timeout argument to k_sem_take() et. al.)"
|   | |-TextComment 0x555f55ef6730 <line:1203:3, col:62> Text=" will be canceled.  On resume, the thread will begin running"
|   | `-TextComment 0x555f55ef6750 <line:1204:3, col:48> Text=" immediately and return from the blocked call."
|   |-ParagraphComment 0x555f55ef6890 <line:1206:3, col:64>
|   | |-TextComment 0x555f55ef67e0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x555f55ef6830 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x555f55ef6850 <col:16, col:64> Text=" is already suspended, the routine has no effect."
|   |-ParagraphComment 0x555f55ef68e0 <line:1208:3>
|   | `-TextComment 0x555f55ef68b0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ef6900 <col:4, col:41> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x555f55ef6990 <col:17, col:41>
|   |   `-TextComment 0x555f55ef6960 <col:17, col:41> Text=" ID of thread to suspend."
|   |-ParagraphComment 0x555f55ef69e0 <line:1210:3>
|   | `-TextComment 0x555f55ef69b0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef6a00 <col:4, line:1211:3> Name="return"
|   | `-ParagraphComment 0x555f55ef6a80 <line:1210:11, line:1211:3>
|   |   |-TextComment 0x555f55ef6a30 <line:1210:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55ef6a50 <line:1211:3> Text=" "
|   |-VerbatimLineComment 0x555f55ef6aa0 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x555f55ef6b10 <line:1212:1>
|     `-TextComment 0x555f55ef6ae0 <col:1> Text=" "
|-FunctionDecl 0x555f55e487b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1228:46> col:16 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x555f55e48728 <col:32, col:40> col:40 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x555f55ef7150 <line:1216:3, line:1227:1>
|   |-ParagraphComment 0x555f55ef6c20 <line:1216:3>
|   | `-TextComment 0x555f55ef6bf0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef6c40 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x555f55ef6ca0 <col:10, col:36>
|   |   `-TextComment 0x555f55ef6c70 <col:10, col:36> Text=" Resume a suspended thread."
|   |-ParagraphComment 0x555f55ef6d90 <line:1218:3, line:1219:50>
|   | |-TextComment 0x555f55ef6cc0 <line:1218:3, col:52> Text=" This routine allows the kernel scheduler to make "
|   | |-InlineCommandComment 0x555f55ef6d10 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x555f55ef6d30 <col:62, col:73> Text=" the current"
|   | `-TextComment 0x555f55ef6d50 <line:1219:3, col:50> Text=" thread, when it is next eligible for that role."
|   |-ParagraphComment 0x555f55ef6e60 <line:1221:3, col:70>
|   | |-TextComment 0x555f55ef6db0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x555f55ef6e00 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x555f55ef6e20 <col:16, col:70> Text=" is not currently suspended, the routine has no effect."
|   |-ParagraphComment 0x555f55ef6eb0 <line:1223:3>
|   | `-TextComment 0x555f55ef6e80 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ef6ed0 <col:4, col:40> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x555f55ef6f60 <col:17, col:40>
|   |   `-TextComment 0x555f55ef6f30 <col:17, col:40> Text=" ID of thread to resume."
|   |-ParagraphComment 0x555f55ef6fb0 <line:1225:3>
|   | `-TextComment 0x555f55ef6f80 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef6fd0 <col:4, line:1226:3> Name="return"
|   | `-ParagraphComment 0x555f55ef7050 <line:1225:11, line:1226:3>
|   |   |-TextComment 0x555f55ef7000 <line:1225:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55ef7020 <line:1226:3> Text=" "
|   |-VerbatimLineComment 0x555f55ef7070 <col:4, col:21> Text=" K-THREAD-006"
|   `-ParagraphComment 0x555f55ef70e0 <line:1227:1>
|     `-TextComment 0x555f55ef70b0 <col:1> Text=" "
|-FunctionDecl 0x555f55e48a20 <line:1258:1, col:57> col:13 k_sched_time_slice_set 'void (s32_t, int)' extern
| |-ParmVarDecl 0x555f55e48898 <col:36, col:42> col:42 slice 's32_t':'int'
| |-ParmVarDecl 0x555f55e48910 <col:49, col:53> col:53 prio 'int'
| `-FullComment 0x555f55ef7aa0 <line:1231:3, line:1256:14>
|   |-ParagraphComment 0x555f55ef71f0 <line:1231:3>
|   | `-TextComment 0x555f55ef71c0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef7210 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x555f55ef7270 <col:10, col:44>
|   |   `-TextComment 0x555f55ef7240 <col:10, col:44> Text=" Set time-slicing period and scope."
|   |-ParagraphComment 0x555f55ef72e0 <line:1233:3, line:1234:23>
|   | |-TextComment 0x555f55ef7290 <line:1233:3, col:72> Text=" This routine specifies how the scheduler will perform time slicing of"
|   | `-TextComment 0x555f55ef72b0 <line:1234:3, col:23> Text=" preemptible threads."
|   |-ParagraphComment 0x555f55ef74d0 <line:1236:3, line:1240:74>
|   | |-TextComment 0x555f55ef7300 <line:1236:3, col:27> Text=" To enable time slicing, "
|   | |-InlineCommandComment 0x555f55ef7350 <col:28, col:29> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x555f55ef7370 <col:36, col:67> Text=" must be non-zero. The scheduler"
|   | |-TextComment 0x555f55ef7390 <line:1237:3, col:69> Text=" ensures that no thread runs for more than the specified time limit"
|   | |-TextComment 0x555f55ef73b0 <line:1238:3, col:71> Text=" before other threads of that priority are given a chance to execute."
|   | |-TextComment 0x555f55ef73d0 <line:1239:3, col:44> Text=" Any thread whose priority is higher than "
|   | |-InlineCommandComment 0x555f55ef7420 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="prio"
|   | |-TextComment 0x555f55ef7440 <col:52, col:72> Text=" is exempted, and may"
|   | `-TextComment 0x555f55ef7460 <line:1240:3, col:74> Text=" execute as long as desired without being preempted due to time slicing."
|   |-ParagraphComment 0x555f55ef7590 <line:1242:3, line:1245:32>
|   | |-TextComment 0x555f55ef74f0 <line:1242:3, col:80> Text=" Time slicing only limits the maximum amount of time a thread may continuously"
|   | |-TextComment 0x555f55ef7510 <line:1243:3, col:74> Text=" execute. Once the scheduler selects a thread for execution, there is no"
|   | |-TextComment 0x555f55ef7530 <line:1244:3, col:79> Text=" minimum guaranteed time the thread will execute before threads of greater or"
|   | `-TextComment 0x555f55ef7550 <line:1245:3, col:32> Text=" equal priority are scheduled."
|   |-ParagraphComment 0x555f55ef7630 <line:1247:3, line:1249:46>
|   | |-TextComment 0x555f55ef75b0 <line:1247:3, col:68> Text=" When the current thread is the only one of that priority eligible"
|   | |-TextComment 0x555f55ef75d0 <line:1248:3, col:71> Text=" for execution, this routine has no effect; the thread is immediately"
|   | `-TextComment 0x555f55ef75f0 <line:1249:3, col:46> Text=" rescheduled after the slice period expires."
|   |-ParagraphComment 0x555f55ef7780 <line:1251:3, col:65>
|   | |-TextComment 0x555f55ef7650 <col:3, col:36> Text=" To disable timeslicing, set both "
|   | |-InlineCommandComment 0x555f55ef76a0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x555f55ef76c0 <col:45, col:49> Text=" and "
|   | |-InlineCommandComment 0x555f55ef7710 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="prio"
|   | `-TextComment 0x555f55ef7730 <col:57, col:65> Text=" to zero."
|   |-ParagraphComment 0x555f55ef77d0 <line:1253:3>
|   | `-TextComment 0x555f55ef77a0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ef77f0 <col:4, line:1254:3> [in] implicitly Param="slice" ParamIndex=0
|   | `-ParagraphComment 0x555f55ef78a0 <line:1253:16, line:1254:3>
|   |   |-TextComment 0x555f55ef7850 <line:1253:16, col:60> Text=" Maximum time slice length (in milliseconds)."
|   |   `-TextComment 0x555f55ef7870 <line:1254:3> Text=" "
|   |-ParamCommandComment 0x555f55ef78c0 <col:4, col:71> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x555f55ef7950 <col:15, col:71>
|   |   `-TextComment 0x555f55ef7920 <col:15, col:71> Text=" Highest thread priority level eligible for time slicing."
|   |-ParagraphComment 0x555f55ef79a0 <line:1256:3>
|   | `-TextComment 0x555f55ef7970 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ef79c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55ef7a20 <col:11, col:14>
|       `-TextComment 0x555f55ef79f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55e48be8 <line:1278:1, col:29> col:13 k_is_in_isr 'bool (void)' extern
| `-FullComment 0x555f55ef7ed0 <line:1268:3, line:1276:37>
|   |-ParagraphComment 0x555f55ef7b40 <line:1268:3>
|   | `-TextComment 0x555f55ef7b10 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef7b60 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x555f55ef7bc0 <col:10, col:58>
|   |   `-TextComment 0x555f55ef7b90 <col:10, col:58> Text=" Determine if code is running at interrupt level."
|   |-ParagraphComment 0x555f55ef7c30 <line:1270:3, line:1271:36>
|   | |-TextComment 0x555f55ef7be0 <line:1270:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x555f55ef7c00 <line:1271:3, col:36> Text=" whether it is a thread or an ISR."
|   |-ParagraphComment 0x555f55ef7c80 <line:1273:3>
|   | `-TextComment 0x555f55ef7c50 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef7ca0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55ef7d00 <col:9, col:31>
|   |   `-TextComment 0x555f55ef7cd0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55ef7d50 <line:1275:3>
|   | `-TextComment 0x555f55ef7d20 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef7d70 <col:4, line:1276:3> Name="return"
|   | `-ParagraphComment 0x555f55ef7df0 <line:1275:11, line:1276:3>
|   |   |-TextComment 0x555f55ef7da0 <line:1275:11, col:40> Text=" false if invoked by a thread."
|   |   `-TextComment 0x555f55ef7dc0 <line:1276:3> Text=" "
|   `-BlockCommandComment 0x555f55ef7e10 <col:4, col:37> Name="return"
|     `-ParagraphComment 0x555f55ef7e70 <col:11, col:37>
|       `-TextComment 0x555f55ef7e40 <col:11, col:37> Text=" true if invoked by an ISR."
|-FunctionDecl 0x555f55e48d50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1296:39> col:15 k_is_preempt_thread 'int (void)' static inline
| `-FullComment 0x555f55ef83e0 <line:1281:3, line:1294:55>
|   |-ParagraphComment 0x555f55ef7f70 <line:1281:3>
|   | `-TextComment 0x555f55ef7f40 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef7f90 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x555f55ef7ff0 <col:10, col:63>
|   |   `-TextComment 0x555f55ef7fc0 <col:10, col:63> Text=" Determine if code is running in a preemptible thread."
|   |-ParagraphComment 0x555f55ef8090 <line:1283:3, line:1285:52>
|   | |-TextComment 0x555f55ef8010 <line:1283:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | |-TextComment 0x555f55ef8030 <line:1284:3, col:78> Text=" whether it can be preempted by another thread. The routine returns a 'true'"
|   | `-TextComment 0x555f55ef8050 <line:1285:3, col:52> Text=" value if all of the following conditions are met:"
|   |-ParagraphComment 0x555f55ef8130 <line:1287:3, line:1289:45>
|   | |-TextComment 0x555f55ef80b0 <line:1287:3, col:49> Text=" - The code is running in a thread, not at ISR."
|   | |-TextComment 0x555f55ef80d0 <line:1288:3, col:55> Text=" - The thread's priority is in the preemptible range."
|   | `-TextComment 0x555f55ef80f0 <line:1289:3, col:45> Text=" - The thread has not locked the scheduler."
|   |-ParagraphComment 0x555f55ef8180 <line:1291:3>
|   | `-TextComment 0x555f55ef8150 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef81a0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55ef8200 <col:9, col:31>
|   |   `-TextComment 0x555f55ef81d0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55ef8250 <line:1293:3>
|   | `-TextComment 0x555f55ef8220 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef8270 <col:4, line:1294:3> Name="return"
|   | `-ParagraphComment 0x555f55ef82f0 <line:1293:11, line:1294:3>
|   |   |-TextComment 0x555f55ef82a0 <line:1293:11, col:61> Text=" 0 if invoked by an ISR or by a cooperative thread."
|   |   `-TextComment 0x555f55ef82c0 <line:1294:3> Text=" "
|   `-BlockCommandComment 0x555f55ef8310 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x555f55ef8370 <col:11, col:55>
|       `-TextComment 0x555f55ef8340 <col:11, col:55> Text=" Non-zero if invoked by a preemptible thread."
|-FunctionDecl 0x555f55e48ea8 <line:1309:1, line:1314:1> line:1309:20 k_is_pre_kernel 'bool (void)' static inline
| |-CompoundStmt 0x555f55e490f8 <line:1310:1, line:1314:1>
| | |-DeclStmt 0x555f55e48fc8 <line:1311:2, col:31>
| | | `-VarDecl 0x555f55e48f58 parent 0x555f55ca0698 <col:2, col:14> col:14 used z_sys_post_kernel 'bool' extern
| | `-ReturnStmt 0x555f55e49058 <line:1313:2, col:10>
| |   `-ImplicitCastExpr 0x555f55e49040 <col:9, col:10> 'bool' <IntegralToBoolean>
| |     `-UnaryOperator 0x555f55e49020 <col:9, col:10> 'int' prefix '!'
| |       `-ImplicitCastExpr 0x555f55e49008 <col:10> 'bool' <LValueToRValue>
| |         `-DeclRefExpr 0x555f55e48fe0 <col:10> 'bool' lvalue Var 0x555f55e48f58 'z_sys_post_kernel' 'bool'
| `-FullComment 0x555f55ef8830 <line:1299:3, line:1307:67>
|   |-ParagraphComment 0x555f55ef8480 <line:1299:3>
|   | `-TextComment 0x555f55ef8450 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef84a0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x555f55ef8500 <col:10, col:64>
|   |   `-TextComment 0x555f55ef84d0 <col:10, col:64> Text=" Test whether startup is in the before-main-task phase."
|   |-ParagraphComment 0x555f55ef8570 <line:1301:3, line:1302:62>
|   | |-TextComment 0x555f55ef8520 <line:1301:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x555f55ef8540 <line:1302:3, col:62> Text=" whether it being invoked before the kernel is fully active."
|   |-ParagraphComment 0x555f55ef85c0 <line:1304:3>
|   | `-TextComment 0x555f55ef8590 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef85e0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55ef8640 <col:9, col:31>
|   |   `-TextComment 0x555f55ef8610 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55ef8690 <line:1306:3>
|   | `-TextComment 0x555f55ef8660 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef86b0 <col:4, line:1307:3> Name="return"
|   | `-ParagraphComment 0x555f55ef8750 <line:1306:11, line:1307:3>
|   |   |-TextComment 0x555f55ef8700 <line:1306:11, col:60> Text=" true if invoked before post-kernel initialization"
|   |   `-TextComment 0x555f55ef8720 <line:1307:3> Text=" "
|   `-BlockCommandComment 0x555f55ef8770 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x555f55ef87d0 <col:11, col:67>
|       `-TextComment 0x555f55ef87a0 <col:11, col:67> Text=" false if invoked during/after post-kernel initialization"
|-FunctionDecl 0x555f55e491a8 <line:1343:1, col:30> col:13 k_sched_lock 'void (void)' extern
| `-FullComment 0x555f55ef8d00 <line:1326:3, line:1341:14>
|   |-ParagraphComment 0x555f55ef88d0 <line:1326:3>
|   | `-TextComment 0x555f55ef88a0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef88f0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x555f55ef8950 <col:10, col:29>
|   |   `-TextComment 0x555f55ef8920 <col:10, col:29> Text=" Lock the scheduler."
|   |-ParagraphComment 0x555f55ef8a40 <line:1328:3, line:1332:78>
|   | |-TextComment 0x555f55ef8970 <line:1328:3, col:75> Text=" This routine prevents the current thread from being preempted by another"
|   | |-TextComment 0x555f55ef8990 <line:1329:3, col:75> Text=" thread by instructing the scheduler to treat it as a cooperative thread."
|   | |-TextComment 0x555f55ef89b0 <line:1330:3, col:74> Text=" If the thread subsequently performs an operation that makes it unready,"
|   | |-TextComment 0x555f55ef89d0 <line:1331:3, col:72> Text=" it will be context switched out in the normal manner. When the thread"
|   | `-TextComment 0x555f55ef89f0 <line:1332:3, col:78> Text=" again becomes the current thread, its non-preemptible status is maintained."
|   |-ParagraphComment 0x555f55ef8a90 <line:1334:3, col:42>
|   | `-TextComment 0x555f55ef8a60 <col:3, col:42> Text=" This routine can be called recursively."
|   |-ParagraphComment 0x555f55ef8ae0 <line:1336:3>
|   | `-TextComment 0x555f55ef8ab0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef8b00 <col:4, line:1339:68> Name="note"
|   | `-ParagraphComment 0x555f55ef8bd0 <line:1336:9, line:1339:68>
|   |   |-TextComment 0x555f55ef8b30 <line:1336:9, col:68> Text=" k_sched_lock() and k_sched_unlock() should normally be used"
|   |   |-TextComment 0x555f55ef8b50 <line:1337:3, col:72> Text=" when the operation being performed can be safely interrupted by ISRs."
|   |   |-TextComment 0x555f55ef8b70 <line:1338:3, col:70> Text=" However, if the amount of processing involved is very small, better"
|   |   `-TextComment 0x555f55ef8b90 <line:1339:3, col:68> Text=" performance may be obtained by using irq_lock() and irq_unlock()."
|   |-ParagraphComment 0x555f55ef8c20 <line:1341:3>
|   | `-TextComment 0x555f55ef8bf0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ef8c40 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55ef8ca0 <col:11, col:14>
|       `-TextComment 0x555f55ef8c70 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55e49308 <line:1354:1, col:32> col:13 k_sched_unlock 'void (void)' extern
| `-FullComment 0x555f55ef8fe0 <line:1346:3, line:1352:14>
|   |-ParagraphComment 0x555f55ef8da0 <line:1346:3>
|   | `-TextComment 0x555f55ef8d70 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef8dc0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x555f55ef8e20 <col:10, col:31>
|   |   `-TextComment 0x555f55ef8df0 <col:10, col:31> Text=" Unlock the scheduler."
|   |-ParagraphComment 0x555f55ef8ec0 <line:1348:3, line:1350:41>
|   | |-TextComment 0x555f55ef8e40 <line:1348:3, col:73> Text=" This routine reverses the effect of a previous call to k_sched_lock()."
|   | |-TextComment 0x555f55ef8e60 <line:1349:3, col:77> Text=" A thread must call the routine once for each time it called k_sched_lock()"
|   | `-TextComment 0x555f55ef8e80 <line:1350:3, col:41> Text=" before the thread becomes preemptible."
|   |-ParagraphComment 0x555f55ef8f10 <line:1352:3>
|   | `-TextComment 0x555f55ef8ee0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55ef8f30 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55ef8f90 <col:11, col:14>
|       `-TextComment 0x555f55ef8f60 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55e49478 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1371:52> col:16 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x555f55e493f0 <col:41, col:47> col:47 value 'void *'
| `-FullComment 0x555f55ef9570 <line:1357:3, line:1370:1>
|   |-ParagraphComment 0x555f55ef9080 <line:1357:3>
|   | `-TextComment 0x555f55ef9050 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef90a0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55ef9100 <col:10, col:43>
|   |   `-TextComment 0x555f55ef90d0 <col:10, col:43> Text=" Set current thread's custom data."
|   |-ParagraphComment 0x555f55ef91a0 <line:1359:3, col:71>
|   | |-TextComment 0x555f55ef9120 <col:3, col:63> Text=" This routine sets the custom data for the current thread to "
|   | |-TextComment 0x555f55ef9140 <col:64> Text="@"
|   | `-TextComment 0x555f55ef9160 <col:65, col:71> Text=" value."
|   |-ParagraphComment 0x555f55ef9240 <line:1361:3, line:1363:44>
|   | |-TextComment 0x555f55ef91c0 <line:1361:3, col:72> Text=" Custom data is not used by the kernel itself, and is freely available"
|   | |-TextComment 0x555f55ef91e0 <line:1362:3, col:68> Text=" for a thread to use as it sees fit. It can be used as a framework"
|   | `-TextComment 0x555f55ef9200 <line:1363:3, col:44> Text=" upon which to build thread-local storage."
|   |-ParagraphComment 0x555f55ef9290 <line:1365:3>
|   | `-TextComment 0x555f55ef9260 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ef92b0 <col:4, col:38> [in] implicitly Param="value" ParamIndex=0
|   | `-ParagraphComment 0x555f55ef9340 <col:16, col:38>
|   |   `-TextComment 0x555f55ef9310 <col:16, col:38> Text=" New custom data value."
|   |-ParagraphComment 0x555f55ef9390 <line:1367:3>
|   | `-TextComment 0x555f55ef9360 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef93b0 <col:4, col:14> Name="return"
|   | `-ParagraphComment 0x555f55ef9410 <col:11, col:14>
|   |   `-TextComment 0x555f55ef93e0 <col:11, col:14> Text=" N/A"
|   |-ParagraphComment 0x555f55ef9460 <line:1369:3>
|   | `-TextComment 0x555f55ef9430 <col:3> Text=" "
|   |-VerbatimLineComment 0x555f55ef9480 <col:4, col:21> Text=" K-THREAD-016"
|   `-ParagraphComment 0x555f55ef94f0 <line:1370:1>
|     `-TextComment 0x555f55ef94c0 <col:1> Text=" "
|-FunctionDecl 0x555f55e49650 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1381:46> col:17 k_thread_custom_data_get 'void *(void)' static inline
| `-FullComment 0x555f55ef98c0 <line:1374:3, line:1380:1>
|   |-ParagraphComment 0x555f55ef9610 <line:1374:3>
|   | `-TextComment 0x555f55ef95e0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef9630 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55ef9690 <col:10, col:43>
|   |   `-TextComment 0x555f55ef9660 <col:10, col:43> Text=" Get current thread's custom data."
|   |-ParagraphComment 0x555f55ef96e0 <line:1376:3, col:63>
|   | `-TextComment 0x555f55ef96b0 <col:3, col:63> Text=" This routine returns the custom data for the current thread."
|   |-ParagraphComment 0x555f55ef9730 <line:1378:3>
|   | `-TextComment 0x555f55ef9700 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef9750 <col:4, line:1379:3> Name="return"
|   | `-ParagraphComment 0x555f55ef97d0 <line:1378:11, line:1379:3>
|   |   |-TextComment 0x555f55ef9780 <line:1378:11, col:37> Text=" Current custom data value."
|   |   `-TextComment 0x555f55ef97a0 <line:1379:3> Text=" "
|   |-VerbatimLineComment 0x555f55ef97f0 <col:4, col:21> Text=" K-THREAD-007"
|   `-ParagraphComment 0x555f55ef9860 <line:1380:1>
|     `-TextComment 0x555f55ef9830 <col:1> Text=" "
|-FunctionDecl 0x555f55e498b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1396:69> col:15 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x555f55e49728 <col:33, col:41> col:41 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x555f55e497a0 <col:52, col:64> col:64 value 'const char *'
| `-FullComment 0x555f55ef9e80 <line:1384:3, line:1394:39>
|   |-ParagraphComment 0x555f55ef9960 <line:1384:3>
|   | `-TextComment 0x555f55ef9930 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef9980 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x555f55ef99e0 <col:10, col:33>
|   |   `-TextComment 0x555f55ef99b0 <col:10, col:33> Text=" Set current thread name"
|   |-ParagraphComment 0x555f55ef9a50 <line:1386:3, line:1387:25>
|   | |-TextComment 0x555f55ef9a00 <line:1386:3, col:75> Text=" Set the name of the thread to be used when THREAD_MONITOR is enabled for"
|   | `-TextComment 0x555f55ef9a20 <line:1387:3, col:25> Text=" tracing and debugging."
|   |-ParagraphComment 0x555f55ef9aa0 <line:1389:3>
|   | `-TextComment 0x555f55ef9a70 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55ef9ac0 <col:4, line:1390:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x555f55ef9b70 <line:1389:20, line:1390:3>
|   |   |-TextComment 0x555f55ef9b20 <line:1389:20, col:73> Text=" Thread to set name, or NULL to set the current thread"
|   |   `-TextComment 0x555f55ef9b40 <line:1390:3> Text=" "
|   `-ParamCommandComment 0x555f55ef9b90 <col:4, line:1394:39> [in] implicitly Param="value" ParamIndex=1
|     `-ParagraphComment 0x555f55ef9e30 <line:1390:16, line:1394:39>
|       |-TextComment 0x555f55ef9bf0 <line:1390:16, col:27> Text=" Name string"
|       |-TextComment 0x555f55ef9c10 <line:1391:3> Text=" "
|       |-InlineCommandComment 0x555f55ef9c60 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x555f55ef9c80 <col:11, col:23> Text=" 0 on success"
|       |-TextComment 0x555f55ef9ca0 <line:1392:3> Text=" "
|       |-InlineCommandComment 0x555f55ef9cc0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x555f55ef9ce0 <col:11, col:59> Text=" -EFAULT Memory access error with supplied string"
|       |-TextComment 0x555f55ef9d00 <line:1393:3> Text=" "
|       |-InlineCommandComment 0x555f55ef9d20 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x555f55ef9d40 <col:11, col:63> Text=" -ENOSYS Thread name configuration option not enabled"
|       |-TextComment 0x555f55ef9d60 <line:1394:3> Text=" "
|       |-InlineCommandComment 0x555f55ef9d80 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x555f55ef9da0 <col:11, col:39> Text=" -EINVAL Thread name too long"
|-FunctionDecl 0x555f55e49ab8 <line:1406:1, col:48> col:13 k_thread_name_get 'const char *(k_tid_t)'
| |-ParmVarDecl 0x555f55e499a8 <col:31, col:39> col:39 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x555f55efa1b0 <line:1399:3, line:1404:60>
|   |-ParagraphComment 0x555f55ef9f20 <line:1399:3>
|   | `-TextComment 0x555f55ef9ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55ef9f40 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x555f55ef9fa0 <col:10, col:25>
|   |   `-TextComment 0x555f55ef9f70 <col:10, col:25> Text=" Get thread name"
|   |-ParagraphComment 0x555f55ef9ff0 <line:1401:3, col:27>
|   | `-TextComment 0x555f55ef9fc0 <col:3, col:27> Text=" Get the name of a thread"
|   |-ParagraphComment 0x555f55efa040 <line:1403:3>
|   | `-TextComment 0x555f55efa010 <col:3> Text=" "
|   `-ParamCommandComment 0x555f55efa060 <col:4, line:1404:60> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x555f55efa160 <line:1403:20, line:1404:60>
|       |-TextComment 0x555f55efa0c0 <line:1403:20, col:29> Text=" Thread ID"
|       |-TextComment 0x555f55efa0e0 <line:1404:3> Text=" "
|       |-InlineCommandComment 0x555f55efa100 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x555f55efa120 <col:11, col:60> Text=" Thread name, or NULL if configuration not enabled"
|-FunctionDecl 0x555f55e49db8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1420:17> line:1419:15 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x555f55e49b98 <col:34, col:42> col:42 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x555f55e49c10 <col:53, col:59> col:59 buf 'char *'
| |-ParmVarDecl 0x555f55e49c80 <line:1420:6, col:13> col:13 size 'size_t':'unsigned long'
| `-FullComment 0x555f55efa7d0 <line:1409:3, line:1417:20>
|   |-ParagraphComment 0x555f55efa250 <line:1409:3>
|   | `-TextComment 0x555f55efa220 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efa270 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x555f55efa2d0 <col:10, col:53>
|   |   `-TextComment 0x555f55efa2a0 <col:10, col:53> Text=" Copy the thread name into a supplied buffer"
|   |-ParagraphComment 0x555f55efa320 <line:1411:3>
|   | `-TextComment 0x555f55efa2f0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55efa340 <col:4, line:1412:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x555f55efa3f0 <line:1411:20, line:1412:3>
|   |   |-TextComment 0x555f55efa3a0 <line:1411:20, col:53> Text=" Thread to obtain name information"
|   |   `-TextComment 0x555f55efa3c0 <line:1412:3> Text=" "
|   |-ParamCommandComment 0x555f55efa410 <col:4, line:1413:3> [in] implicitly Param="buf" ParamIndex=1
|   | `-ParagraphComment 0x555f55efa4c0 <line:1412:14, line:1413:3>
|   |   |-TextComment 0x555f55efa470 <line:1412:14, col:32> Text=" Destination buffer"
|   |   `-TextComment 0x555f55efa490 <line:1413:3> Text=" "
|   `-ParamCommandComment 0x555f55efa4e0 <col:4, line:1417:20> [in] implicitly Param="size" ParamIndex=2
|     `-ParagraphComment 0x555f55efa780 <line:1413:15, line:1417:20>
|       |-TextComment 0x555f55efa540 <line:1413:15, col:38> Text=" Destination buffer size"
|       |-TextComment 0x555f55efa560 <line:1414:3> Text=" "
|       |-InlineCommandComment 0x555f55efa580 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x555f55efa5a0 <col:11, col:47> Text=" -ENOSPC Destination buffer too small"
|       |-TextComment 0x555f55efa5c0 <line:1415:3> Text=" "
|       |-InlineCommandComment 0x555f55efa5e0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x555f55efa600 <col:11, col:38> Text=" -EFAULT Memory access error"
|       |-TextComment 0x555f55efa620 <line:1416:3> Text=" "
|       |-InlineCommandComment 0x555f55efa640 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x555f55efa660 <col:11, col:50> Text=" -ENOSYS Thread name feature not enabled"
|       |-TextComment 0x555f55efa680 <line:1417:3> Text=" "
|       |-InlineCommandComment 0x555f55efa6a0 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x555f55efa6c0 <col:11, col:20> Text=" 0 Success"
|-FunctionDecl 0x555f55e49f38 <line:1430:1, col:49> col:13 k_thread_state_str 'const char *(k_tid_t)'
| |-ParmVarDecl 0x555f55e49ea8 <col:32, col:40> col:40 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x555f55efab00 <line:1423:3, line:1428:61>
|   |-ParagraphComment 0x555f55efa870 <line:1423:3>
|   | `-TextComment 0x555f55efa840 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efa890 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x555f55efa8f0 <col:10, col:33>
|   |   `-TextComment 0x555f55efa8c0 <col:10, col:33> Text=" Get thread state string"
|   |-ParagraphComment 0x555f55efa940 <line:1425:3, col:45>
|   | `-TextComment 0x555f55efa910 <col:3, col:45> Text=" Get the human friendly thread state string"
|   |-ParagraphComment 0x555f55efa990 <line:1427:3>
|   | `-TextComment 0x555f55efa960 <col:3> Text=" "
|   `-ParamCommandComment 0x555f55efa9b0 <col:4, line:1428:61> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x555f55efaab0 <line:1427:20, line:1428:61>
|       |-TextComment 0x555f55efaa10 <line:1427:20, col:29> Text=" Thread ID"
|       |-TextComment 0x555f55efaa30 <line:1428:3> Text=" "
|       |-InlineCommandComment 0x555f55efaa50 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x555f55efaa70 <col:11, col:61> Text=" Thread state string, empty if no state flag is set"
|-RecordDecl 0x555f55e4a1b8 prev 0x555f55e38390 <line:1517:1, line:1545:1> line:1517:8 struct k_timer definition
| |-FullComment 0x555f55efac50 <line:1514:3, col:24>
| | `-ParagraphComment 0x555f55efac20 <col:3, col:24>
| |   |-TextComment 0x555f55efab70 <col:3> Text=" "
| |   |-InlineCommandComment 0x555f55efabc0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x555f55efabe0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x555f55e4a260 <line:1523:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| |-FieldDecl 0x555f55e4a2b8 <line:1526:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x555f55e4a550 <line:1529:2, col:41> col:9 expiry_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x555f55e4c6b8 <line:1532:2, col:39> col:9 stop_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x555f55e4c710 <line:1535:2, col:8> col:8 period 's32_t':'int'
| |-FieldDecl 0x555f55e4c768 <line:1538:2, col:8> col:8 status 'u32_t':'unsigned int'
| `-FieldDecl 0x555f55e4c7c8 <line:1541:2, col:8> col:8 referenced user_data 'void *'
|-TypedefDecl 0x555f55e4c9b8 <line:1587:1, col:55> col:16 referenced k_timer_expiry_t 'void (*)(struct k_timer *)'
| |-PointerType 0x555f55e4a4f0 'void (*)(struct k_timer *)'
| | `-ParenType 0x555f55e4a490 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x555f55e4a450 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x555f55ca06f0 'void'
| |     `-PointerType 0x555f55e4a360 'struct k_timer *'
| |       `-ElaboratedType 0x555f55e4a300 'struct k_timer' sugar
| |         `-RecordType 0x555f55e38420 'struct k_timer'
| |           `-Record 0x555f55e4a1b8 'k_timer'
| `-FullComment 0x555f55efb0e0 <line:1576:3, line:1585:14>
|   |-ParagraphComment 0x555f55efacf0 <line:1576:3>
|   | `-TextComment 0x555f55efacc0 <col:3> Text=" "
|   |-VerbatimLineComment 0x555f55efad10 <col:4, col:29> Text=" k_timer_expiry_t"
|   |-ParagraphComment 0x555f55efad80 <line:1577:3>
|   | `-TextComment 0x555f55efad50 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efada0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x555f55efae00 <col:10, col:37>
|   |   `-TextComment 0x555f55efadd0 <col:10, col:37> Text=" Timer expiry function type."
|   |-ParagraphComment 0x555f55efaea0 <line:1579:3, line:1581:54>
|   | |-TextComment 0x555f55efae20 <line:1579:3, col:78> Text=" A timer's expiry function is executed by the system clock interrupt handler"
|   | |-TextComment 0x555f55efae40 <line:1580:3, col:76> Text=" each time the timer expires. The expiry function is optional, and is only"
|   | `-TextComment 0x555f55efae60 <line:1581:3, col:54> Text=" invoked if the timer has been initialized with one."
|   |-ParagraphComment 0x555f55efaef0 <line:1583:3>
|   | `-TextComment 0x555f55efaec0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55efaf10 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x555f55efafa0 <col:16, col:37>
|   |   `-TextComment 0x555f55efaf70 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x555f55efaff0 <line:1585:3>
|   | `-TextComment 0x555f55efafc0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55efb010 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55efb070 <col:11, col:14>
|       `-TextComment 0x555f55efb040 <col:11, col:14> Text=" N/A"
|-TypedefDecl 0x555f55e4caf8 <line:1602:1, col:53> col:16 referenced k_timer_stop_t 'void (*)(struct k_timer *)'
| |-PointerType 0x555f55e4a4f0 'void (*)(struct k_timer *)'
| | `-ParenType 0x555f55e4a490 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x555f55e4a450 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x555f55ca06f0 'void'
| |     `-PointerType 0x555f55e4a360 'struct k_timer *'
| |       `-ElaboratedType 0x555f55e4a300 'struct k_timer' sugar
| |         `-RecordType 0x555f55e38420 'struct k_timer'
| |           `-Record 0x555f55e4a1b8 'k_timer'
| `-FullComment 0x555f55efb590 <line:1590:3, line:1600:14>
|   |-ParagraphComment 0x555f55efb180 <line:1590:3>
|   | `-TextComment 0x555f55efb150 <col:3> Text=" "
|   |-VerbatimLineComment 0x555f55efb1a0 <col:4, col:27> Text=" k_timer_stop_t"
|   |-ParagraphComment 0x555f55efb210 <line:1591:3>
|   | `-TextComment 0x555f55efb1e0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efb230 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x555f55efb290 <col:10, col:35>
|   |   `-TextComment 0x555f55efb260 <col:10, col:35> Text=" Timer stop function type."
|   |-ParagraphComment 0x555f55efb350 <line:1593:3, line:1596:24>
|   | |-TextComment 0x555f55efb2b0 <line:1593:3, col:75> Text=" A timer's stop function is executed if the timer is stopped prematurely."
|   | |-TextComment 0x555f55efb2d0 <line:1594:3, col:71> Text=" The function runs in the context of the thread that stops the timer."
|   | |-TextComment 0x555f55efb2f0 <line:1595:3, col:75> Text=" The stop function is optional, and is only invoked if the timer has been"
|   | `-TextComment 0x555f55efb310 <line:1596:3, col:24> Text=" initialized with one."
|   |-ParagraphComment 0x555f55efb3a0 <line:1598:3>
|   | `-TextComment 0x555f55efb370 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55efb3c0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x555f55efb450 <col:16, col:37>
|   |   `-TextComment 0x555f55efb420 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x555f55efb4a0 <line:1600:3>
|   | `-TextComment 0x555f55efb470 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55efb4c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55efb520 <col:11, col:14>
|       `-TextComment 0x555f55efb4f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55e4ce20 <line:1630:1, line:1632:27> line:1630:13 k_timer_init 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' extern
| |-ParmVarDecl 0x555f55e4cbd0 <col:26, col:42> col:42 timer 'struct k_timer *'
| |-ParmVarDecl 0x555f55e4cc60 <line:1631:5, col:22> col:22 expiry_fn 'k_timer_expiry_t':'void (*)(struct k_timer *)'
| |-ParmVarDecl 0x555f55e4ccf0 <line:1632:5, col:20> col:20 stop_fn 'k_timer_stop_t':'void (*)(struct k_timer *)'
| `-FullComment 0x555f55efbae0 <line:1620:3, line:1628:14>
|   |-ParagraphComment 0x555f55efb630 <line:1620:3>
|   | `-TextComment 0x555f55efb600 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efb650 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x555f55efb6b0 <col:10, col:29>
|   |   `-TextComment 0x555f55efb680 <col:10, col:29> Text=" Initialize a timer."
|   |-ParagraphComment 0x555f55efb700 <line:1622:3, col:60>
|   | `-TextComment 0x555f55efb6d0 <col:3, col:60> Text=" This routine initializes a timer, prior to its first use."
|   |-ParagraphComment 0x555f55efb750 <line:1624:3>
|   | `-TextComment 0x555f55efb720 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55efb770 <col:4, line:1625:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x555f55efb820 <line:1624:16, line:1625:3>
|   |   |-TextComment 0x555f55efb7d0 <line:1624:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x555f55efb7f0 <line:1625:3> Text=" "
|   |-ParamCommandComment 0x555f55efb840 <col:4, line:1626:3> [in] implicitly Param="expiry_fn" ParamIndex=1
|   | `-ParagraphComment 0x555f55efb8f0 <line:1625:20, line:1626:3>
|   |   |-TextComment 0x555f55efb8a0 <line:1625:20, col:67> Text=" Function to invoke each time the timer expires."
|   |   `-TextComment 0x555f55efb8c0 <line:1626:3> Text=" "
|   |-ParamCommandComment 0x555f55efb910 <col:4, col:77> [in] implicitly Param="stop_fn" ParamIndex=2
|   | `-ParagraphComment 0x555f55efb9a0 <col:18, col:77>
|   |   `-TextComment 0x555f55efb970 <col:18, col:77> Text="   Function to invoke if the timer is stopped while running."
|   |-ParagraphComment 0x555f55efb9f0 <line:1628:3>
|   | `-TextComment 0x555f55efb9c0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55efba10 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55efba70 <col:11, col:14>
|       `-TextComment 0x555f55efba40 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55e4cf28 <line:1634:1, col:30> col:13 k_trigger_update 'void ()' extern
|-FunctionDecl 0x555f55e4d230 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1653:37> line:1652:16 k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x555f55e4d020 <col:30, col:46> col:46 timer 'struct k_timer *'
| |-ParmVarDecl 0x555f55e4d090 <line:1653:9, col:15> col:15 duration 's32_t':'int'
| |-ParmVarDecl 0x555f55e4d100 <col:25, col:31> col:31 period 's32_t':'int'
| `-FullComment 0x555f55efc0f0 <line:1637:3, line:1650:14>
|   |-ParagraphComment 0x555f55efbb80 <line:1637:3>
|   | `-TextComment 0x555f55efbb50 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efbba0 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x555f55efbc00 <col:10, col:24>
|   |   `-TextComment 0x555f55efbbd0 <col:10, col:24> Text=" Start a timer."
|   |-ParagraphComment 0x555f55efbc70 <line:1639:3, line:1640:71>
|   | |-TextComment 0x555f55efbc20 <line:1639:3, col:72> Text=" This routine starts a timer, and resets its status to zero. The timer"
|   | `-TextComment 0x555f55efbc40 <line:1640:3, col:71> Text=" begins counting down using the specified duration and period values."
|   |-ParagraphComment 0x555f55efbd10 <line:1642:3, line:1644:44>
|   | |-TextComment 0x555f55efbc90 <line:1642:3, col:68> Text=" Attempting to start a timer that is already running is permitted."
|   | |-TextComment 0x555f55efbcb0 <line:1643:3, col:73> Text=" The timer's status is reset to zero and the timer begins counting down"
|   | `-TextComment 0x555f55efbcd0 <line:1644:3, col:44> Text=" using the new duration and period values."
|   |-ParagraphComment 0x555f55efbd60 <line:1646:3>
|   | `-TextComment 0x555f55efbd30 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55efbd80 <col:4, line:1647:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x555f55efbe30 <line:1646:16, line:1647:3>
|   |   |-TextComment 0x555f55efbde0 <line:1646:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x555f55efbe00 <line:1647:3> Text=" "
|   |-ParamCommandComment 0x555f55efbe50 <col:4, line:1648:3> [in] implicitly Param="duration" ParamIndex=1
|   | `-ParagraphComment 0x555f55efbf00 <line:1647:19, line:1648:3>
|   |   |-TextComment 0x555f55efbeb0 <line:1647:19, col:61> Text="  Initial timer duration (in milliseconds)."
|   |   `-TextComment 0x555f55efbed0 <line:1648:3> Text=" "
|   |-ParamCommandComment 0x555f55efbf20 <col:4, col:51> [in] implicitly Param="period" ParamIndex=2
|   | `-ParagraphComment 0x555f55efbfb0 <col:17, col:51>
|   |   `-TextComment 0x555f55efbf80 <col:17, col:51> Text="    Timer period (in milliseconds)."
|   |-ParagraphComment 0x555f55efc000 <line:1650:3>
|   | `-TextComment 0x555f55efbfd0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55efc020 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55efc080 <col:11, col:14>
|       `-TextComment 0x555f55efc050 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55e4d3c8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1671:50> col:16 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x555f55e4d340 <col:29, col:45> col:45 timer 'struct k_timer *'
| `-FullComment 0x555f55efc6a0 <line:1656:3, line:1669:14>
|   |-ParagraphComment 0x555f55efc190 <line:1656:3>
|   | `-TextComment 0x555f55efc160 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efc1b0 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x555f55efc210 <col:10, col:23>
|   |   `-TextComment 0x555f55efc1e0 <col:10, col:23> Text=" Stop a timer."
|   |-ParagraphComment 0x555f55efc280 <line:1658:3, line:1659:43>
|   | |-TextComment 0x555f55efc230 <line:1658:3, col:77> Text=" This routine stops a running timer prematurely. The timer's stop function,"
|   | `-TextComment 0x555f55efc250 <line:1659:3, col:43> Text=" if one exists, is invoked by the caller."
|   |-ParagraphComment 0x555f55efc2f0 <line:1661:3, line:1662:23>
|   | |-TextComment 0x555f55efc2a0 <line:1661:3, col:74> Text=" Attempting to stop a timer that is not running is permitted, but has no"
|   | `-TextComment 0x555f55efc2c0 <line:1662:3, col:23> Text=" effect on the timer."
|   |-ParagraphComment 0x555f55efc340 <line:1664:3>
|   | `-TextComment 0x555f55efc310 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efc360 <col:4, line:1665:48> Name="note"
|   | `-ParagraphComment 0x555f55efc460 <line:1664:9, line:1665:48>
|   |   |-TextComment 0x555f55efc390 <line:1664:9, col:78> Text=" Can be called by ISRs.  The stop handler has to be callable from ISRs"
|   |   |-TextComment 0x555f55efc3b0 <line:1665:3, col:6> Text=" if "
|   |   |-InlineCommandComment 0x555f55efc400 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="k_timer_stop"
|   |   `-TextComment 0x555f55efc420 <col:22, col:48> Text=" is to be called from ISRs."
|   |-ParagraphComment 0x555f55efc4b0 <line:1667:3>
|   | `-TextComment 0x555f55efc480 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55efc4d0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x555f55efc560 <col:16, col:37>
|   |   `-TextComment 0x555f55efc530 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x555f55efc5b0 <line:1669:3>
|   | `-TextComment 0x555f55efc580 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55efc5d0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55efc630 <col:11, col:14>
|       `-TextComment 0x555f55efc600 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55e4d5c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1685:57> col:17 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x555f55e4d4c0 <col:36, col:52> col:52 timer 'struct k_timer *'
| `-FullComment 0x555f55efcac0 <line:1674:3, line:1683:24>
|   |-ParagraphComment 0x555f55efc750 <line:1674:3>
|   | `-TextComment 0x555f55efc720 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efc770 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x555f55efc7d0 <col:10, col:28>
|   |   `-TextComment 0x555f55efc7a0 <col:10, col:28> Text=" Read timer status."
|   |-ParagraphComment 0x555f55efc840 <line:1676:3, line:1677:49>
|   | |-TextComment 0x555f55efc7f0 <line:1676:3, col:77> Text=" This routine reads the timer's status, which indicates the number of times"
|   | `-TextComment 0x555f55efc810 <line:1677:3, col:49> Text=" it has expired since its status was last read."
|   |-ParagraphComment 0x555f55efc890 <line:1679:3, col:58>
|   | `-TextComment 0x555f55efc860 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x555f55efc8e0 <line:1681:3>
|   | `-TextComment 0x555f55efc8b0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55efc900 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x555f55efc990 <col:16, col:37>
|   |   `-TextComment 0x555f55efc960 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x555f55efc9e0 <line:1683:3>
|   | `-TextComment 0x555f55efc9b0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55efca00 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x555f55efca60 <col:11, col:24>
|       `-TextComment 0x555f55efca30 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x555f55e4dfb8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1704:58> col:17 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x555f55e4df30 <col:37, col:53> col:53 timer 'struct k_timer *'
| `-FullComment 0x555f55efcfa0 <line:1688:3, line:1702:24>
|   |-ParagraphComment 0x555f55efcb60 <line:1688:3>
|   | `-TextComment 0x555f55efcb30 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efcb80 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55efcbe0 <col:10, col:49>
|   |   `-TextComment 0x555f55efcbb0 <col:10, col:49> Text=" Synchronize thread to timer expiration."
|   |-ParagraphComment 0x555f55efcca0 <line:1690:3, line:1693:73>
|   | |-TextComment 0x555f55efcc00 <line:1690:3, col:78> Text=" This routine blocks the calling thread until the timer's status is non-zero"
|   | |-TextComment 0x555f55efcc20 <line:1691:3, col:76> Text=" (indicating that it has expired at least once since it was last examined)"
|   | |-TextComment 0x555f55efcc40 <line:1692:3, col:68> Text=" or the timer is stopped. If the timer status is already non-zero,"
|   | `-TextComment 0x555f55efcc60 <line:1693:3, col:73> Text=" or the timer is already stopped, the caller continues without waiting."
|   |-ParagraphComment 0x555f55efccf0 <line:1695:3, col:58>
|   | `-TextComment 0x555f55efccc0 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x555f55efcd60 <line:1697:3, line:1698:20>
|   | |-TextComment 0x555f55efcd10 <line:1697:3, col:74> Text=" This routine must not be used by interrupt handlers, since they are not"
|   | `-TextComment 0x555f55efcd30 <line:1698:3, col:20> Text=" allowed to block."
|   |-ParagraphComment 0x555f55efcdb0 <line:1700:3>
|   | `-TextComment 0x555f55efcd80 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55efcdd0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x555f55efce60 <col:16, col:37>
|   |   `-TextComment 0x555f55efce30 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x555f55efceb0 <line:1702:3>
|   | `-TextComment 0x555f55efce80 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55efced0 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x555f55efcf30 <col:11, col:24>
|       `-TextComment 0x555f55efcf00 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x555f55e4e190 <line:1706:1, col:58> col:14 used z_timeout_remaining 's32_t (struct _timeout *)' extern
| `-ParmVarDecl 0x555f55e4e088 <col:34, col:51> col:51 timeout 'struct _timeout *'
|-FunctionDecl 0x555f55e4e318 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1718:60> col:17 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x555f55e4e290 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x555f55efd360 <line:1709:3, line:1716:44>
|   |-ParagraphComment 0x555f55efd040 <line:1709:3>
|   | `-TextComment 0x555f55efd010 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efd060 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x555f55efd0c0 <col:10, col:57>
|   |   `-TextComment 0x555f55efd090 <col:10, col:57> Text=" Get time remaining before a timer next expires."
|   |-ParagraphComment 0x555f55efd130 <line:1711:3, line:1712:68>
|   | |-TextComment 0x555f55efd0e0 <line:1711:3, col:74> Text=" This routine computes the (approximate) time remaining before a running"
|   | `-TextComment 0x555f55efd100 <line:1712:3, col:68> Text=" timer next expires. If the timer is not running, it returns zero."
|   |-ParagraphComment 0x555f55efd180 <line:1714:3>
|   | `-TextComment 0x555f55efd150 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55efd1a0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x555f55efd230 <col:16, col:37>
|   |   `-TextComment 0x555f55efd200 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x555f55efd280 <line:1716:3>
|   | `-TextComment 0x555f55efd250 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55efd2a0 <col:4, col:44> Name="return"
|     `-ParagraphComment 0x555f55efd300 <col:11, col:44>
|       `-TextComment 0x555f55efd2d0 <col:11, col:44> Text=" Remaining time (in milliseconds)."
|-FunctionDecl 0x555f55e4e470 <line:1720:1, line:1724:1> line:1720:21 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x555f55e4e3e8 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x555f55e4e9f8 <line:1721:1, line:1724:1>
|   |-DeclStmt 0x555f55e4e6f0 <line:1722:2, col:58>
|   | `-VarDecl 0x555f55e4e528 <col:2, col:57> col:14 used ticks 'const s32_t':'const int' cinit
|   |   `-CallExpr 0x555f55e4e6c0 <col:22, col:57> 's32_t':'int'
|   |     |-ImplicitCastExpr 0x555f55e4e6a8 <col:22> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555f55e4e588 <col:22> 's32_t (struct _timeout *)' Function 0x555f55e4e190 'z_timeout_remaining' 's32_t (struct _timeout *)'
|   |     `-UnaryOperator 0x555f55e4e628 <col:42, col:50> 'struct _timeout *' prefix '&'
|   |       `-MemberExpr 0x555f55e4e5f0 <col:43, col:50> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x555f55e4a260
|   |         `-ImplicitCastExpr 0x555f55e4e5d8 <col:43> 'struct k_timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x555f55e4e5b0 <col:43> 'struct k_timer *' lvalue ParmVar 0x555f55e4e3e8 'timer' 'struct k_timer *'
|   `-ReturnStmt 0x555f55e4e9b0 <line:1723:2, col:61>
|     `-ConditionalOperator 0x555f55e4e928 <col:9, col:61> 'unsigned int'
|       |-ParenExpr 0x555f55e4e790 <col:9, col:19> 'int'
|       | `-BinaryOperator 0x555f55e4e768 <col:10, col:18> 'int' '>'
|       |   |-ImplicitCastExpr 0x555f55e4e750 <col:10> 's32_t':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x555f55e4e708 <col:10> 'const s32_t':'const int' lvalue Var 0x555f55e4e528 'ticks' 'const s32_t':'const int'
|       |   `-IntegerLiteral 0x555f55e4e730 <col:18> 'int' 0
|       |-CStyleCastExpr 0x555f55e4e8e0 <col:23, col:57> 'u32_t':'unsigned int' <IntegralCast>
|       | `-CallExpr 0x555f55e4e870 <col:30, col:57> 'u64_t':'unsigned long long'
|       |   |-ImplicitCastExpr 0x555f55e4e858 <col:30> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x555f55e4e7b0 <col:30> 'u64_t (u64_t)' Function 0x555f55e1e210 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
|       |   `-ImplicitCastExpr 0x555f55e4e8b8 <col:52> 'u64_t':'unsigned long long' <IntegralCast>
|       |     `-ImplicitCastExpr 0x555f55e4e8a0 <col:52> 's32_t':'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x555f55e4e7d8 <col:52> 'const s32_t':'const int' lvalue Var 0x555f55e4e528 'ticks' 'const s32_t':'const int'
|       `-IntegerLiteral 0x555f55e4e908 <col:61> 'unsigned int' 0
|-FunctionDecl 0x555f55e4ebd0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1740:76> col:16 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x555f55e4ea40 <col:38, col:54> col:54 timer 'struct k_timer *'
| |-ParmVarDecl 0x555f55e4eab8 <col:61, col:67> col:67 user_data 'void *'
| `-FullComment 0x555f55efd970 <line:1727:3, line:1738:14>
|   |-ParagraphComment 0x555f55efd400 <line:1727:3>
|   | `-TextComment 0x555f55efd3d0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efd420 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x555f55efd480 <col:10, col:52>
|   |   `-TextComment 0x555f55efd450 <col:10, col:52> Text=" Associate user-specific data with a timer."
|   |-ParagraphComment 0x555f55efd5f0 <line:1729:3, line:1730:9>
|   | |-TextComment 0x555f55efd4a0 <line:1729:3, col:28> Text=" This routine records the "
|   | |-InlineCommandComment 0x555f55efd4f0 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="user_data"
|   | |-TextComment 0x555f55efd510 <col:41, col:50> Text=" with the "
|   | |-InlineCommandComment 0x555f55efd560 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="timer,"
|   | |-TextComment 0x555f55efd580 <col:60, col:75> Text=" to be retrieved"
|   | `-TextComment 0x555f55efd5a0 <line:1730:3, col:9> Text=" later."
|   |-ParagraphComment 0x555f55efd660 <line:1732:3, line:1733:73>
|   | |-TextComment 0x555f55efd610 <line:1732:3, col:78> Text=" It can be used e.g. in a timer handler shared across multiple subsystems to"
|   | `-TextComment 0x555f55efd630 <line:1733:3, col:73> Text=" retrieve data specific to the subsystem this timer is associated with."
|   |-ParagraphComment 0x555f55efd6b0 <line:1735:3>
|   | `-TextComment 0x555f55efd680 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55efd6d0 <col:4, line:1736:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x555f55efd780 <line:1735:16, line:1736:3>
|   |   |-TextComment 0x555f55efd730 <line:1735:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x555f55efd750 <line:1736:3> Text=" "
|   |-ParamCommandComment 0x555f55efd7a0 <col:4, col:58> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x555f55efd830 <col:20, col:58>
|   |   `-TextComment 0x555f55efd800 <col:20, col:58> Text=" User data to associate with the timer."
|   |-ParagraphComment 0x555f55efd880 <line:1738:3>
|   | `-TextComment 0x555f55efd850 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55efd8a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55efd900 <col:11, col:14>
|       `-TextComment 0x555f55efd8d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55e4edd8 <line:1745:1, line:1749:1> line:1745:20 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x555f55e4ecd0 <col:49, col:65> col:65 used timer 'struct k_timer *'
| |-ParmVarDecl 0x555f55e4ed48 <line:1746:13, col:19> col:19 used user_data 'void *'
| |-CompoundStmt 0x555f55e4f3c8 <line:1747:1, line:1749:1>
| | `-BinaryOperator 0x555f55e4f378 <line:1748:2, col:21> 'void *' '='
| |   |-MemberExpr 0x555f55e4f300 <col:2, col:9> 'void *' lvalue ->user_data 0x555f55e4c7c8
| |   | `-ImplicitCastExpr 0x555f55e4eeb0 <col:2> 'struct k_timer *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x555f55e4ee88 <col:2> 'struct k_timer *' lvalue ParmVar 0x555f55e4ecd0 'timer' 'struct k_timer *'
| |   `-ImplicitCastExpr 0x555f55e4f360 <col:21> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x555f55e4f338 <col:21> 'void *' lvalue ParmVar 0x555f55e4ed48 'user_data' 'void *'
| `-FullComment 0x555f55efda60 <line:1743:3, col:12>
|   `-ParagraphComment 0x555f55efda30 <col:3, col:12>
|     |-TextComment 0x555f55efd9e0 <col:3> Text=" "
|     `-InlineCommandComment 0x555f55efda00 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x555f55e4f518 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1758:60> col:17 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x555f55e4f408 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x555f55efdda0 <line:1752:3, line:1756:25>
|   |-ParagraphComment 0x555f55efdb00 <line:1752:3>
|   | `-TextComment 0x555f55efdad0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efdb20 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x555f55efdb80 <col:10, col:55>
|   |   `-TextComment 0x555f55efdb50 <col:10, col:55> Text=" Retrieve the user-specific data from a timer."
|   |-ParagraphComment 0x555f55efdbd0 <line:1754:3>
|   | `-TextComment 0x555f55efdba0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55efdbf0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x555f55efdc80 <col:16, col:37>
|   |   `-TextComment 0x555f55efdc50 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x555f55efdcd0 <line:1756:3>
|   | `-TextComment 0x555f55efdca0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55efdcf0 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x555f55efdd50 <col:11, col:25>
|       `-TextComment 0x555f55efdd20 <col:11, col:25> Text=" The user data."
|-FunctionDecl 0x555f55e4f678 <line:1760:1, line:1763:1> line:1760:21 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x555f55e4f5e8 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x555f55e4f858 <line:1761:1, line:1763:1>
|   `-ReturnStmt 0x555f55e4f7b0 <line:1762:2, col:16>
|     `-ImplicitCastExpr 0x555f55e4f798 <col:9, col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x555f55e4f760 <col:9, col:16> 'void *' lvalue ->user_data 0x555f55e4c7c8
|         `-ImplicitCastExpr 0x555f55e4f748 <col:9> 'struct k_timer *' <LValueToRValue>
|           `-DeclRefExpr 0x555f55e4f720 <col:9> 'struct k_timer *' lvalue ParmVar 0x555f55e4f5e8 'timer' 'struct k_timer *'
|-FunctionDecl 0x555f55e4f900 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1787:34> col:17 used k_uptime_get 's64_t (void)' static inline
| `-FullComment 0x555f55efe280 <line:1773:3, line:1785:42>
|   |-ParagraphComment 0x555f55efde40 <line:1773:3>
|   | `-TextComment 0x555f55efde10 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efde60 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x555f55efdec0 <col:10, col:28>
|   |   `-TextComment 0x555f55efde90 <col:10, col:28> Text=" Get system uptime."
|   |-ParagraphComment 0x555f55efdf30 <line:1775:3, line:1776:19>
|   | |-TextComment 0x555f55efdee0 <line:1775:3, col:65> Text=" This routine returns the elapsed time since the system booted,"
|   | `-TextComment 0x555f55efdf00 <line:1776:3, col:19> Text=" in milliseconds."
|   |-ParagraphComment 0x555f55efdf80 <line:1778:3>
|   | `-TextComment 0x555f55efdf50 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efdfa0 <col:4, line:1783:13> Name="note"
|   | `-ParagraphComment 0x555f55efe150 <line:1779:3, line:1783:13>
|   |   |-TextComment 0x555f55efdfd0 <line:1779:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x555f55efe020 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x555f55efe040 <line:1780:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x555f55efe060 <line:1781:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x555f55efe080 <line:1782:3, col:61> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option."
|   |   |-TextComment 0x555f55efe0a0 <line:1783:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x555f55efe0f0 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x555f55efe1a0 <line:1785:3>
|   | `-TextComment 0x555f55efe170 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55efe1c0 <col:4, col:42> Name="return"
|     `-ParagraphComment 0x555f55efe220 <col:11, col:42>
|       `-TextComment 0x555f55efe1f0 <col:11, col:42> Text=" Current uptime in milliseconds."
|-FunctionDecl 0x555f55e4fa60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1805:1> line:1799:32 k_enable_sys_clock_always_on 'int (void)' static inline
| |-CompoundStmt 0x555f55e4fc08 <line:1800:1, line:1805:1>
| | |-CompoundStmt 0x555f55e4fb60 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x555f55e4fb70 </vagrant/ext/zephyros/zephyr/include/kernel.h:1802:57>
| | `-ReturnStmt 0x555f55e4fbc0 <line:1804:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-UnaryOperator 0x555f55e4fba0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1804:9, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     `-IntegerLiteral 0x555f55e4fb80 <col:16> 'int' 0
| |-DeprecatedAttr 0x555f55e4fb00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x555f55efe520 </vagrant/ext/zephyros/zephyr/include/kernel.h:1790:3, line:1796:56>
|   |-ParagraphComment 0x555f55efe320 <line:1790:3>
|   | `-TextComment 0x555f55efe2f0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efe340 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x555f55efe3a0 <col:10, col:51>
|   |   `-TextComment 0x555f55efe370 <col:10, col:51> Text=" Enable clock always on in tickless kernel"
|   |-ParagraphComment 0x555f55efe440 <line:1792:3, line:1794:11>
|   | |-TextComment 0x555f55efe3c0 <line:1792:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|   | |-TextComment 0x555f55efe3e0 <line:1793:3, col:66> Text=" functionality has been migrated to the SYSTEM_CLOCK_SLOPPY_IDLE"
|   | `-TextComment 0x555f55efe400 <line:1794:3, col:11> Text=" kconfig."
|   `-ParagraphComment 0x555f55efe4e0 <line:1796:3, col:56>
|     |-TextComment 0x555f55efe460 <col:3> Text=" "
|     |-InlineCommandComment 0x555f55efe480 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x555f55efe4a0 <col:11, col:56> Text=" prev_status Previous status of always on flag"
|-FunctionDecl 0x555f55e4fcc0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1820:1> line:1816:33 k_disable_sys_clock_always_on 'void (void)' static inline
| |-CompoundStmt 0x555f55e4fe08 <line:1817:1, line:1820:1>
| | |-CompoundStmt 0x555f55e4fdc0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | `-NullStmt 0x555f55e4fdd0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1819:57>
| |-DeprecatedAttr 0x555f55e4fd60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x555f55efe730 </vagrant/ext/zephyros/zephyr/include/kernel.h:1809:3, line:1813:11>
|   |-ParagraphComment 0x555f55efe5c0 <line:1809:3>
|   | `-TextComment 0x555f55efe590 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efe5e0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x555f55efe640 <col:10, col:52>
|   |   `-TextComment 0x555f55efe610 <col:10, col:52> Text=" Disable clock always on in tickless kernel"
|   `-ParagraphComment 0x555f55efe6e0 <line:1811:3, line:1813:11>
|     |-TextComment 0x555f55efe660 <line:1811:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|     |-TextComment 0x555f55efe680 <line:1812:3, col:63> Text=" functionality has been migrated to the SYS_CLOCK_SLOPPY_IDLE"
|     `-TextComment 0x555f55efe6a0 <line:1813:3, col:11> Text=" kconfig."
|-FunctionDecl 0x555f55e4feb8 <line:1844:1, line:1847:1> line:1844:21 used k_uptime_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x555f55e50098 <line:1845:1, line:1847:1>
| | `-ReturnStmt 0x555f55e50050 <line:1846:2, col:29>
| |   `-CStyleCastExpr 0x555f55e50028 <col:9, col:29> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55e4fff0 <col:16, col:29> 's64_t':'long long'
| |       `-ImplicitCastExpr 0x555f55e4ffd8 <col:16> 's64_t (*)(void)' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x555f55e4ff58 <col:16> 's64_t (void)' Function 0x555f55e4f900 'k_uptime_get' 's64_t (void)'
| `-FullComment 0x555f55efeca0 <line:1824:3, line:1842:66>
|   |-ParagraphComment 0x555f55efe7d0 <line:1824:3>
|   | `-TextComment 0x555f55efe7a0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efe7f0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x555f55efe850 <col:10, col:45>
|   |   `-TextComment 0x555f55efe820 <col:10, col:45> Text=" Get system uptime (32-bit version)."
|   |-ParagraphComment 0x555f55efe8c0 <line:1826:3, line:1827:16>
|   | |-TextComment 0x555f55efe870 <line:1826:3, col:65> Text=" This routine returns the lower 32 bits of the system uptime in"
|   | `-TextComment 0x555f55efe890 <line:1827:3, col:16> Text=" milliseconds."
|   |-ParagraphComment 0x555f55efe9b0 <line:1829:3, line:1833:38>
|   | |-TextComment 0x555f55efe8e0 <line:1829:3, col:67> Text=" Because correct conversion requires full precision of the system"
|   | |-TextComment 0x555f55efe900 <line:1830:3, col:69> Text=" clock there is no benefit to using this over k_uptime_get() unless"
|   | |-TextComment 0x555f55efe920 <line:1831:3, col:69> Text=" you know the application will never run long enough for the system"
|   | |-TextComment 0x555f55efe940 <line:1832:3, col:68> Text=" clock to approach 2^32 ticks.  Calls to this function may involve"
|   | `-TextComment 0x555f55efe960 <line:1833:3, col:38> Text=" interrupt blocking and 64-bit math."
|   |-ParagraphComment 0x555f55efea00 <line:1835:3>
|   | `-TextComment 0x555f55efe9d0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efea20 <col:4, line:1840:13> Name="note"
|   | `-ParagraphComment 0x555f55efeb70 <line:1836:3, line:1840:13>
|   |   |-TextComment 0x555f55efea50 <line:1836:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x555f55efea70 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x555f55efea90 <line:1837:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x555f55efeab0 <line:1838:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x555f55efead0 <line:1839:3, col:60> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option"
|   |   |-TextComment 0x555f55efeaf0 <line:1840:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x555f55efeb10 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x555f55efebc0 <line:1842:3>
|   | `-TextComment 0x555f55efeb90 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55efebe0 <col:4, col:66> Name="return"
|     `-ParagraphComment 0x555f55efec40 <col:11, col:66>
|       `-TextComment 0x555f55efec10 <col:11, col:66> Text=" The low 32 bits of the current uptime, in milliseconds."
|-FunctionDecl 0x555f55e50220 <line:1860:1, line:1869:1> line:1860:21 used k_uptime_delta 's64_t (s64_t *)' static inline
| |-ParmVarDecl 0x555f55e50118 <col:36, col:43> col:43 used reftime 's64_t *'
| |-CompoundStmt 0x555f55e50878 <line:1861:1, line:1869:1>
| | |-DeclStmt 0x555f55e50528 <line:1862:2, col:21>
| | | |-VarDecl 0x555f55e50440 <col:2, col:8> col:8 used uptime 's64_t':'long long'
| | | `-VarDecl 0x555f55e504b0 <col:2, col:16> col:16 used delta 's64_t':'long long'
| | |-BinaryOperator 0x555f55e505d0 <line:1864:2, col:24> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x555f55e50540 <col:2> 's64_t':'long long' lvalue Var 0x555f55e50440 'uptime' 's64_t':'long long'
| | | `-CallExpr 0x555f55e505a8 <col:11, col:24> 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x555f55e50590 <col:11> 's64_t (*)(void)' <FunctionToPointerDecay>
| | |     `-DeclRefExpr 0x555f55e50568 <col:11> 's64_t (void)' Function 0x555f55e4f900 'k_uptime_get' 's64_t (void)'
| | |-BinaryOperator 0x555f55e50700 <line:1865:2, col:20> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x555f55e505f8 <col:2> 's64_t':'long long' lvalue Var 0x555f55e504b0 'delta' 's64_t':'long long'
| | | `-BinaryOperator 0x555f55e506d8 <col:10, col:20> 'long long' '-'
| | |   |-ImplicitCastExpr 0x555f55e506a8 <col:10> 's64_t':'long long' <LValueToRValue>
| | |   | `-DeclRefExpr 0x555f55e50620 <col:10> 's64_t':'long long' lvalue Var 0x555f55e50440 'uptime' 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x555f55e506c0 <col:19, col:20> 's64_t':'long long' <LValueToRValue>
| | |     `-UnaryOperator 0x555f55e50688 <col:19, col:20> 's64_t':'long long' lvalue prefix '*'
| | |       `-ImplicitCastExpr 0x555f55e50670 <col:20> 's64_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x555f55e50648 <col:20> 's64_t *' lvalue ParmVar 0x555f55e50118 'reftime' 's64_t *'
| | |-BinaryOperator 0x555f55e507c8 <line:1866:2, col:13> 's64_t':'long long' '='
| | | |-UnaryOperator 0x555f55e50768 <col:2, col:3> 's64_t':'long long' lvalue prefix '*'
| | | | `-ImplicitCastExpr 0x555f55e50750 <col:3> 's64_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x555f55e50728 <col:3> 's64_t *' lvalue ParmVar 0x555f55e50118 'reftime' 's64_t *'
| | | `-ImplicitCastExpr 0x555f55e507b0 <col:13> 's64_t':'long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x555f55e50788 <col:13> 's64_t':'long long' lvalue Var 0x555f55e50440 'uptime' 's64_t':'long long'
| | `-ReturnStmt 0x555f55e50830 <line:1868:2, col:9>
| |   `-ImplicitCastExpr 0x555f55e50818 <col:9> 's64_t':'long long' <LValueToRValue>
| |     `-DeclRefExpr 0x555f55e507f0 <col:9> 's64_t':'long long' lvalue Var 0x555f55e504b0 'delta' 's64_t':'long long'
| `-FullComment 0x555f55eff080 <line:1850:3, line:1858:24>
|   |-ParagraphComment 0x555f55efed40 <line:1850:3>
|   | `-TextComment 0x555f55efed10 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efed60 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x555f55efedc0 <col:10, col:27>
|   |   `-TextComment 0x555f55efed90 <col:10, col:27> Text=" Get elapsed time."
|   |-ParagraphComment 0x555f55efee30 <line:1852:3, line:1853:50>
|   | |-TextComment 0x555f55efede0 <line:1852:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x555f55efee00 <line:1853:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x555f55efee80 <line:1855:3>
|   | `-TextComment 0x555f55efee50 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55efeea0 <col:4, line:1856:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x555f55efef50 <line:1855:18, line:1856:37>
|   |   |-TextComment 0x555f55efef00 <line:1855:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x555f55efef20 <line:1856:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x555f55efefa0 <line:1858:3>
|   | `-TextComment 0x555f55efef70 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55efefc0 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x555f55eff020 <col:11, col:24>
|       `-TextComment 0x555f55efeff0 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x555f55e509c0 <line:1887:1, line:1890:1> line:1887:21 k_uptime_delta_32 'u32_t (s64_t *)' static inline
| |-ParmVarDecl 0x555f55e508c0 <col:39, col:46> col:46 used reftime 's64_t *'
| |-CompoundStmt 0x555f55e50bf8 <line:1888:1, line:1890:1>
| | `-ReturnStmt 0x555f55e50bb0 <line:1889:2, col:38>
| |   `-CStyleCastExpr 0x555f55e50b88 <col:9, col:38> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x555f55e50b30 <col:16, col:38> 's64_t':'long long'
| |       |-ImplicitCastExpr 0x555f55e50b18 <col:16> 's64_t (*)(s64_t *)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55e50a68 <col:16> 's64_t (s64_t *)' Function 0x555f55e50220 'k_uptime_delta' 's64_t (s64_t *)'
| |       `-ImplicitCastExpr 0x555f55e50b60 <col:31> 's64_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x555f55e50a90 <col:31> 's64_t *' lvalue ParmVar 0x555f55e508c0 'reftime' 's64_t *'
| `-FullComment 0x555f55eff520 <line:1872:3, line:1885:24>
|   |-ParagraphComment 0x555f55eff120 <line:1872:3>
|   | `-TextComment 0x555f55eff0f0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eff140 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x555f55eff1a0 <col:10, col:44>
|   |   `-TextComment 0x555f55eff170 <col:10, col:44> Text=" Get elapsed time (32-bit version)."
|   |-ParagraphComment 0x555f55eff210 <line:1874:3, line:1875:50>
|   | |-TextComment 0x555f55eff1c0 <line:1874:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x555f55eff1e0 <line:1875:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x555f55eff2d0 <line:1877:3, line:1880:41>
|   | |-TextComment 0x555f55eff230 <line:1877:3, col:78> Text=" This routine can be more efficient than k_uptime_delta(), as it reduces the"
|   | |-TextComment 0x555f55eff250 <line:1878:3, col:73> Text=" need for interrupt locking and 64-bit math. However, the 32-bit result"
|   | |-TextComment 0x555f55eff270 <line:1879:3, col:72> Text=" cannot hold an elapsed time larger than approximately 50 days, so the"
|   | `-TextComment 0x555f55eff290 <line:1880:3, col:41> Text=" caller must handle possible rollovers."
|   |-ParagraphComment 0x555f55eff320 <line:1882:3>
|   | `-TextComment 0x555f55eff2f0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55eff340 <col:4, line:1883:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x555f55eff3f0 <line:1882:18, line:1883:37>
|   |   |-TextComment 0x555f55eff3a0 <line:1882:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x555f55eff3c0 <line:1883:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x555f55eff440 <line:1885:3>
|   | `-TextComment 0x555f55eff410 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eff460 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x555f55eff4c0 <col:11, col:24>
|       `-TextComment 0x555f55eff490 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x555f55e50ca0 <line:1900:1, line:1903:1> line:1900:21 k_cycle_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x555f55e50e48 <line:1901:1, line:1903:1>
| | `-ReturnStmt 0x555f55e50dd8 <line:1902:2, col:29>
| |   `-CallExpr 0x555f55e50db0 <col:9, col:29> 'u32_t':'unsigned int'
| |     `-ImplicitCastExpr 0x555f55e50d98 <col:9> 'u32_t (*)(void)' <FunctionToPointerDecay>
| |       `-DeclRefExpr 0x555f55e50d40 <col:9> 'u32_t (void)' Function 0x555f55dfe2d8 'arch_k_cycle_get_32' 'u32_t (void)'
| `-FullComment 0x555f55eff7d0 <line:1893:3, line:1898:57>
|   |-ParagraphComment 0x555f55eff5c0 <line:1893:3>
|   | `-TextComment 0x555f55eff590 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eff5e0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x555f55eff640 <col:10, col:34>
|   |   `-TextComment 0x555f55eff610 <col:10, col:34> Text=" Read the hardware clock."
|   |-ParagraphComment 0x555f55eff6b0 <line:1895:3, line:1896:9>
|   | |-TextComment 0x555f55eff660 <line:1895:3, col:78> Text=" This routine returns the current time, as measured by the system's hardware"
|   | `-TextComment 0x555f55eff680 <line:1896:3, col:9> Text=" clock."
|   |-ParagraphComment 0x555f55eff700 <line:1898:3>
|   | `-TextComment 0x555f55eff6d0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55eff720 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x555f55eff780 <col:11, col:57>
|       `-TextComment 0x555f55eff750 <col:11, col:57> Text=" Current hardware clock up-counter (in cycles)."
|-RecordDecl 0x555f55e50e60 prev 0x555f55e37f70 <line:1913:1, line:1924:1> line:1913:8 struct k_queue definition
| |-FullComment 0x555f55eff8f0 <line:1910:3, col:24>
| | `-ParagraphComment 0x555f55eff8c0 <col:3, col:24>
| |   |-TextComment 0x555f55eff840 <col:3> Text=" "
| |   |-InlineCommandComment 0x555f55eff860 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x555f55eff880 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x555f55e50ef8 <line:1914:2, col:15> col:15 referenced data_q 'sys_sflist_t':'struct _sflist'
| |-FieldDecl 0x555f55e50f60 <line:1915:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-RecordDecl 0x555f55e50fa8 <line:1916:2, line:1920:2> line:1916:2 union definition
| | `-FieldDecl 0x555f55e51060 <line:1917:3, col:13> col:13 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x555f55e51140 <line:1916:2> col:2 implicit 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
| `-IndirectFieldDecl 0x555f55e51198 <line:1917:13> col:13 implicit wait_q '_wait_q_t':'_wait_q_t'
|   |-Field 0x555f55e51140 '' 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
|   `-Field 0x555f55e51060 'wait_q' '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x555f55e51b00 <line:1939:1, col:67> col:14 used z_queue_node_peek 'void *(sys_sfnode_t *, bool)' extern
| |-ParmVarDecl 0x555f55e51238 <col:32, col:46> col:46 node 'sys_sfnode_t *'
| `-ParmVarDecl 0x555f55e512a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/kernel.h:1939:57> col:57 needs_free 'bool'
|-FunctionDecl 0x555f55e51df0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1960:50> col:16 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x555f55e51cf0 <col:29, col:45> col:45 queue 'struct k_queue *'
| `-FullComment 0x555f55effc90 <line:1952:3, line:1958:14>
|   |-ParagraphComment 0x555f55eff990 <line:1952:3>
|   | `-TextComment 0x555f55eff960 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55eff9b0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x555f55effa10 <col:10, col:29>
|   |   `-TextComment 0x555f55eff9e0 <col:10, col:29> Text=" Initialize a queue."
|   |-ParagraphComment 0x555f55effa60 <line:1954:3, col:67>
|   | `-TextComment 0x555f55effa30 <col:3, col:67> Text=" This routine initializes a queue object, prior to its first use."
|   |-ParagraphComment 0x555f55effab0 <line:1956:3>
|   | `-TextComment 0x555f55effa80 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55effad0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x555f55effb60 <col:16, col:37>
|   |   `-TextComment 0x555f55effb30 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x555f55effbb0 <line:1958:3>
|   | `-TextComment 0x555f55effb80 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55effbd0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55effc30 <col:11, col:14>
|       `-TextComment 0x555f55effc00 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55e51f78 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1977:57> col:16 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x555f55e51ef0 <col:36, col:52> col:52 queue 'struct k_queue *'
| `-FullComment 0x555f55f00230 <line:1963:3, line:1975:14>
|   |-ParagraphComment 0x555f55effd30 <line:1963:3>
|   | `-TextComment 0x555f55effd00 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55effd50 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x555f55effdb0 <col:10, col:36>
|   |   `-TextComment 0x555f55effd80 <col:10, col:36> Text=" Cancel waiting on a queue."
|   |-ParagraphComment 0x555f55efff20 <line:1965:3, line:1969:35>
|   | |-TextComment 0x555f55effdd0 <line:1965:3, col:47> Text=" This routine causes first thread pending on "
|   | |-InlineCommandComment 0x555f55effe20 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="queue,"
|   | |-TextComment 0x555f55effe40 <col:57, col:67> Text=" if any, to"
|   | |-TextComment 0x555f55effe60 <line:1966:3, col:74> Text=" return from k_queue_get() call with NULL value (as if timeout expired)."
|   | |-TextComment 0x555f55effe80 <line:1967:3, col:67> Text=" If the queue is being waited on by k_poll(), it will return with"
|   | |-TextComment 0x555f55effea0 <line:1968:3, col:69> Text=" -EINTR and K_POLL_STATE_CANCELLED state (and per above, subsequent"
|   | `-TextComment 0x555f55effec0 <line:1969:3, col:35> Text=" k_queue_get() will return NULL)."
|   |-ParagraphComment 0x555f55efff70 <line:1971:3>
|   | `-TextComment 0x555f55efff40 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55efff90 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55effff0 <col:9, col:31>
|   |   `-TextComment 0x555f55efffc0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f00040 <line:1973:3>
|   | `-TextComment 0x555f55f00010 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f00060 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x555f55f000f0 <col:16, col:37>
|   |   `-TextComment 0x555f55f000c0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x555f55f00140 <line:1975:3>
|   | `-TextComment 0x555f55f00110 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55f00160 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55f001c0 <col:11, col:14>
|       `-TextComment 0x555f55f00190 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55e52200 <line:1993:1, col:61> col:13 used k_queue_append 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x555f55e52070 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x555f55e520e8 <col:51, col:57> col:57 data 'void *'
| `-FullComment 0x555f55f00860 <line:1980:3, line:1991:14>
|   |-ParagraphComment 0x555f55f002d0 <line:1980:3>
|   | `-TextComment 0x555f55f002a0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f002f0 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55f00350 <col:10, col:50>
|   |   `-TextComment 0x555f55f00320 <col:10, col:50> Text=" Append an element to the end of a queue."
|   |-ParagraphComment 0x555f55f00470 <line:1982:3, line:1984:24>
|   | |-TextComment 0x555f55f00370 <line:1982:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x555f55f003c0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x555f55f003e0 <col:49, col:74> Text=" A queue data item must be"
|   | |-TextComment 0x555f55f00400 <line:1983:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x555f55f00420 <line:1984:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x555f55f004c0 <line:1986:3>
|   | `-TextComment 0x555f55f00490 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f004e0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f00540 <col:9, col:31>
|   |   `-TextComment 0x555f55f00510 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f00590 <line:1988:3>
|   | `-TextComment 0x555f55f00560 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f005b0 <col:4, line:1989:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x555f55f00660 <line:1988:16, line:1989:3>
|   |   |-TextComment 0x555f55f00610 <line:1988:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x555f55f00630 <line:1989:3> Text=" "
|   |-ParamCommandComment 0x555f55f00680 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x555f55f00710 <col:15, col:40>
|   |   `-TextComment 0x555f55f006e0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x555f55f00770 <line:1991:3>
|   | `-TextComment 0x555f55f00740 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55f00790 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55f007f0 <col:11, col:14>
|       `-TextComment 0x555f55f007c0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55e52490 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2011:71> col:17 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x555f55e52300 <col:38, col:54> col:54 queue 'struct k_queue *'
| |-ParmVarDecl 0x555f55e52378 <col:61, col:67> col:67 data 'void *'
| `-FullComment 0x555f55f00ee0 <line:1996:3, line:2009:78>
|   |-ParagraphComment 0x555f55f00900 <line:1996:3>
|   | `-TextComment 0x555f55f008d0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f00920 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55f00980 <col:10, col:39>
|   |   `-TextComment 0x555f55f00950 <col:10, col:39> Text=" Append an element to a queue."
|   |-ParagraphComment 0x555f55f00ac0 <line:1998:3, line:2001:50>
|   | |-TextComment 0x555f55f009a0 <line:1998:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x555f55f009f0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x555f55f00a10 <col:49, col:76> Text=" There is an implicit memory"
|   | |-TextComment 0x555f55f00a30 <line:1999:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x555f55f00a50 <line:2000:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x555f55f00a70 <line:2001:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x555f55f00b10 <line:2003:3>
|   | `-TextComment 0x555f55f00ae0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f00b30 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f00b90 <col:9, col:31>
|   |   `-TextComment 0x555f55f00b60 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f00be0 <line:2005:3>
|   | `-TextComment 0x555f55f00bb0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f00c00 <col:4, line:2006:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x555f55f00cb0 <line:2005:16, line:2006:3>
|   |   |-TextComment 0x555f55f00c60 <line:2005:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x555f55f00c80 <line:2006:3> Text=" "
|   |-ParamCommandComment 0x555f55f00cd0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x555f55f00d60 <col:15, col:40>
|   |   `-TextComment 0x555f55f00d30 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x555f55f00e70 <line:2008:3, line:2009:78>
|     |-TextComment 0x555f55f00d80 <line:2008:3> Text=" "
|     |-InlineCommandComment 0x555f55f00da0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x555f55f00dc0 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x555f55f00de0 <line:2009:3> Text=" "
|     |-InlineCommandComment 0x555f55f00e00 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x555f55f00e20 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x555f55e52698 <line:2027:1, col:62> col:13 k_queue_prepend 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x555f55e52590 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x555f55e52608 <col:52, col:58> col:58 data 'void *'
| `-FullComment 0x555f55f01500 <line:2014:3, line:2025:14>
|   |-ParagraphComment 0x555f55f00f80 <line:2014:3>
|   | `-TextComment 0x555f55f00f50 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f00fa0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55f01000 <col:10, col:40>
|   |   `-TextComment 0x555f55f00fd0 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x555f55f01120 <line:2016:3, line:2018:24>
|   | |-TextComment 0x555f55f01020 <line:2016:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x555f55f01070 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x555f55f01090 <col:50, col:75> Text=" A queue data item must be"
|   | |-TextComment 0x555f55f010b0 <line:2017:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x555f55f010d0 <line:2018:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x555f55f01170 <line:2020:3>
|   | `-TextComment 0x555f55f01140 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f01190 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f011f0 <col:9, col:31>
|   |   `-TextComment 0x555f55f011c0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f01240 <line:2022:3>
|   | `-TextComment 0x555f55f01210 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f01260 <col:4, line:2023:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x555f55f01310 <line:2022:16, line:2023:3>
|   |   |-TextComment 0x555f55f012c0 <line:2022:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x555f55f012e0 <line:2023:3> Text=" "
|   |-ParamCommandComment 0x555f55f01330 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x555f55f013c0 <col:15, col:40>
|   |   `-TextComment 0x555f55f01390 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x555f55f01410 <line:2025:3>
|   | `-TextComment 0x555f55f013e0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55f01430 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55f01490 <col:11, col:14>
|       `-TextComment 0x555f55f01460 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55e528a8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2045:72> col:17 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x555f55e527a0 <col:39, col:55> col:55 queue 'struct k_queue *'
| |-ParmVarDecl 0x555f55e52818 <col:62, col:68> col:68 data 'void *'
| `-FullComment 0x555f55f01b80 <line:2030:3, line:2043:78>
|   |-ParagraphComment 0x555f55f015a0 <line:2030:3>
|   | `-TextComment 0x555f55f01570 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f015c0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55f01620 <col:10, col:40>
|   |   `-TextComment 0x555f55f015f0 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x555f55f01760 <line:2032:3, line:2035:50>
|   | |-TextComment 0x555f55f01640 <line:2032:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x555f55f01690 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x555f55f016b0 <col:50, col:77> Text=" There is an implicit memory"
|   | |-TextComment 0x555f55f016d0 <line:2033:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x555f55f016f0 <line:2034:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x555f55f01710 <line:2035:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x555f55f017b0 <line:2037:3>
|   | `-TextComment 0x555f55f01780 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f017d0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f01830 <col:9, col:31>
|   |   `-TextComment 0x555f55f01800 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f01880 <line:2039:3>
|   | `-TextComment 0x555f55f01850 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f018a0 <col:4, line:2040:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x555f55f01950 <line:2039:16, line:2040:3>
|   |   |-TextComment 0x555f55f01900 <line:2039:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x555f55f01920 <line:2040:3> Text=" "
|   |-ParamCommandComment 0x555f55f01970 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x555f55f01a00 <col:15, col:40>
|   |   `-TextComment 0x555f55f019d0 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x555f55f01b10 <line:2042:3, line:2043:78>
|     |-TextComment 0x555f55f01a20 <line:2042:3> Text=" "
|     |-InlineCommandComment 0x555f55f01a40 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x555f55f01a60 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x555f55f01a80 <line:2043:3> Text=" "
|     |-InlineCommandComment 0x555f55f01aa0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x555f55f01ac0 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x555f55e52be0 <line:2062:1, col:73> col:13 k_queue_insert 'void (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x555f55e529b0 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x555f55e52a28 <col:51, col:57> col:57 prev 'void *'
| |-ParmVarDecl 0x555f55e52aa0 <col:63, col:69> col:69 data 'void *'
| `-FullComment 0x555f55f02280 <line:2048:3, line:2060:14>
|   |-ParagraphComment 0x555f55f01c20 <line:2048:3>
|   | `-TextComment 0x555f55f01bf0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f01c40 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55f01ca0 <col:10, col:40>
|   |   `-TextComment 0x555f55f01c70 <col:10, col:40> Text=" Inserts an element to a queue."
|   |-ParagraphComment 0x555f55f01dc0 <line:2050:3, line:2052:45>
|   | |-TextComment 0x555f55f01cc0 <line:2050:3, col:39> Text=" This routine inserts a data item to "
|   | |-InlineCommandComment 0x555f55f01d10 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x555f55f01d30 <col:48, col:76> Text=" after previous item. A queue"
|   | |-TextComment 0x555f55f01d50 <line:2051:3, col:70> Text=" data item must be aligned on a word boundary, and the first word of"
|   | `-TextComment 0x555f55f01d70 <line:2052:3, col:45> Text=" the item is reserved for the kernel's use."
|   |-ParagraphComment 0x555f55f01e10 <line:2054:3>
|   | `-TextComment 0x555f55f01de0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f01e30 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f01e90 <col:9, col:31>
|   |   `-TextComment 0x555f55f01e60 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f01ee0 <line:2056:3>
|   | `-TextComment 0x555f55f01eb0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f01f00 <col:4, line:2057:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x555f55f01fb0 <line:2056:16, line:2057:3>
|   |   |-TextComment 0x555f55f01f60 <line:2056:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x555f55f01f80 <line:2057:3> Text=" "
|   |-ParamCommandComment 0x555f55f01fd0 <col:4, line:2058:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x555f55f02080 <line:2057:15, line:2058:3>
|   |   |-TextComment 0x555f55f02030 <line:2057:15, col:49> Text=" Address of the previous data item."
|   |   `-TextComment 0x555f55f02050 <line:2058:3> Text=" "
|   |-ParamCommandComment 0x555f55f020a0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=2
|   | `-ParagraphComment 0x555f55f02130 <col:15, col:40>
|   |   `-TextComment 0x555f55f02100 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x555f55f02180 <line:2060:3>
|   | `-TextComment 0x555f55f02150 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55f021a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55f02200 <col:11, col:14>
|       `-TextComment 0x555f55f021d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55e52f18 <line:2082:1, col:77> col:12 k_queue_append_list 'int (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x555f55e52cf0 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x555f55e52d68 <col:55, col:61> col:61 head 'void *'
| |-ParmVarDecl 0x555f55e52de0 <col:67, col:73> col:73 tail 'void *'
| `-FullComment 0x555f55f02a50 <line:2065:3, line:2081:1>
|   |-ParagraphComment 0x555f55f02320 <line:2065:3>
|   | `-TextComment 0x555f55f022f0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f02340 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x555f55f023a0 <col:10, col:58>
|   |   `-TextComment 0x555f55f02370 <col:10, col:58> Text=" Atomically append a list of elements to a queue."
|   |-ParagraphComment 0x555f55f024e0 <line:2067:3, line:2070:19>
|   | |-TextComment 0x555f55f023c0 <line:2067:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x555f55f02410 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x555f55f02430 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x555f55f02450 <line:2068:3, col:70> Text=" The data items must be in a singly-linked list, with the first word"
|   | |-TextComment 0x555f55f02470 <line:2069:3, col:69> Text=" in each data item pointing to the next data item; the list must be"
|   | `-TextComment 0x555f55f02490 <line:2070:3, col:19> Text=" NULL-terminated."
|   |-ParagraphComment 0x555f55f02530 <line:2072:3>
|   | `-TextComment 0x555f55f02500 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f02550 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f025b0 <col:9, col:31>
|   |   `-TextComment 0x555f55f02580 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f02600 <line:2074:3>
|   | `-TextComment 0x555f55f025d0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f02620 <col:4, line:2075:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x555f55f026d0 <line:2074:16, line:2075:3>
|   |   |-TextComment 0x555f55f02680 <line:2074:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x555f55f026a0 <line:2075:3> Text=" "
|   |-ParamCommandComment 0x555f55f026f0 <col:4, line:2076:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x555f55f027c0 <line:2075:15, line:2076:3>
|   |   |-TextComment 0x555f55f02770 <line:2075:15, col:59> Text=" Pointer to first node in singly-linked list."
|   |   `-TextComment 0x555f55f02790 <line:2076:3> Text=" "
|   |-ParamCommandComment 0x555f55f027e0 <col:4, col:58> [in] implicitly Param="tail" ParamIndex=2
|   | `-ParagraphComment 0x555f55f02870 <col:15, col:58>
|   |   `-TextComment 0x555f55f02840 <col:15, col:58> Text=" Pointer to last node in singly-linked list."
|   |-ParagraphComment 0x555f55f02980 <line:2078:3, line:2079:43>
|   | |-TextComment 0x555f55f02890 <line:2078:3> Text=" "
|   | |-InlineCommandComment 0x555f55f028b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f028d0 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x555f55f028f0 <line:2079:3> Text=" "
|   | |-InlineCommandComment 0x555f55f02910 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x555f55f02930 <col:11, col:43> Text=" -EINVAL on invalid supplied data"
|   `-ParagraphComment 0x555f55f029d0 <line:2081:1>
|     `-TextComment 0x555f55f029a0 <col:1> Text=" "
|-FunctionDecl 0x555f55e531a8 <line:2099:1, col:72> col:12 k_queue_merge_slist 'int (struct k_queue *, sys_slist_t *)' extern
| |-ParmVarDecl 0x555f55e53020 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x555f55e53090 <col:55, col:68> col:68 list 'sys_slist_t *'
| `-FullComment 0x555f55f030b0 <line:2085:3, line:2097:34>
|   |-ParagraphComment 0x555f55f02af0 <line:2085:3>
|   | `-TextComment 0x555f55f02ac0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f02b10 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x555f55f02b70 <col:10, col:55>
|   |   `-TextComment 0x555f55f02b40 <col:10, col:55> Text=" Atomically add a list of elements to a queue."
|   |-ParagraphComment 0x555f55f02c90 <line:2087:3, line:2089:67>
|   | |-TextComment 0x555f55f02b90 <line:2087:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x555f55f02be0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x555f55f02c00 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x555f55f02c20 <line:2088:3, col:69> Text=" The data items must be in a singly-linked list implemented using a"
|   | `-TextComment 0x555f55f02c40 <line:2089:3, col:67> Text=" sys_slist_t object. Upon completion, the original list is empty."
|   |-ParagraphComment 0x555f55f02ce0 <line:2091:3>
|   | `-TextComment 0x555f55f02cb0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f02d00 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f02d60 <col:9, col:31>
|   |   `-TextComment 0x555f55f02d30 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f02db0 <line:2093:3>
|   | `-TextComment 0x555f55f02d80 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f02dd0 <col:4, line:2094:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x555f55f02e80 <line:2093:16, line:2094:3>
|   |   |-TextComment 0x555f55f02e30 <line:2093:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x555f55f02e50 <line:2094:3> Text=" "
|   |-ParamCommandComment 0x555f55f02ea0 <col:4, col:45> [in] implicitly Param="list" ParamIndex=1
|   | `-ParagraphComment 0x555f55f02f30 <col:15, col:45>
|   |   `-TextComment 0x555f55f02f00 <col:15, col:45> Text=" Pointer to sys_slist_t object."
|   `-ParagraphComment 0x555f55f03040 <line:2096:3, line:2097:34>
|     |-TextComment 0x555f55f02f50 <line:2096:3> Text=" "
|     |-InlineCommandComment 0x555f55f02f70 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x555f55f02f90 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x555f55f02fb0 <line:2097:3> Text=" "
|     |-InlineCommandComment 0x555f55f02fd0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x555f55f02ff0 <col:11, col:34> Text=" -EINVAL on invalid data"
|-FunctionDecl 0x555f55e53438 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2117:65> col:17 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x555f55e532b0 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x555f55e53320 <col:52, col:58> col:58 timeout 's32_t':'int'
| `-FullComment 0x555f55f03790 <line:2102:3, line:2115:48>
|   |-ParagraphComment 0x555f55f03150 <line:2102:3>
|   | `-TextComment 0x555f55f03120 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f03170 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x555f55f031d0 <col:10, col:38>
|   |   `-TextComment 0x555f55f031a0 <col:10, col:38> Text=" Get an element from a queue."
|   |-ParagraphComment 0x555f55f032c0 <line:2104:3, line:2105:46>
|   | |-TextComment 0x555f55f031f0 <line:2104:3, col:45> Text=" This routine removes first data item from "
|   | |-InlineCommandComment 0x555f55f03240 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x555f55f03260 <col:55, col:76> Text=" The first word of the"
|   | `-TextComment 0x555f55f03280 <line:2105:3, col:46> Text=" data item is reserved for the kernel's use."
|   |-ParagraphComment 0x555f55f03310 <line:2107:3>
|   | `-TextComment 0x555f55f032e0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f03330 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x555f55f03410 <col:9, col:72>
|   |   |-TextComment 0x555f55f03360 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x555f55f033b0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x555f55f033d0 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x555f55f03460 <line:2109:3>
|   | `-TextComment 0x555f55f03430 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f03480 <col:4, line:2110:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x555f55f03530 <line:2109:16, line:2110:3>
|   |   |-TextComment 0x555f55f034e0 <line:2109:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x555f55f03500 <line:2110:3> Text=" "
|   |-ParamCommandComment 0x555f55f03550 <col:4, line:2112:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x555f55f03630 <line:2110:18, line:2112:28>
|   |   |-TextComment 0x555f55f035b0 <line:2110:18, col:71> Text=" Non-negative waiting period to obtain a data item (in"
|   |   |-TextComment 0x555f55f035d0 <line:2111:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x555f55f035f0 <line:2112:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x555f55f03680 <line:2114:3>
|   | `-TextComment 0x555f55f03650 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55f036a0 <col:4, line:2115:48> Name="return"
|     `-ParagraphComment 0x555f55f03720 <line:2114:11, line:2115:48>
|       |-TextComment 0x555f55f036d0 <line:2114:11, col:67> Text=" Address of the data item if successful; NULL if returned"
|       `-TextComment 0x555f55f036f0 <line:2115:3, col:48> Text=" without waiting, or waiting period timed out."
|-FunctionDecl 0x555f55e536d0 <line:2133:1, line:2136:1> line:2133:20 k_queue_remove 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x555f55e53540 <col:35, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x555f55e535b8 <col:58, col:64> col:64 used data 'void *'
| |-CompoundStmt 0x555f55e539a8 <line:2134:1, line:2136:1>
| | `-ReturnStmt 0x555f55e53968 <line:2135:2, col:72>
| |   `-CallExpr 0x555f55e53930 <col:9, col:72> 'bool'
| |     |-ImplicitCastExpr 0x555f55e53918 <col:9> 'bool (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55e53780 <col:9> 'bool (sys_sflist_t *, sys_sfnode_t *)' Function 0x555f55dcaf20 'sys_sflist_find_and_remove' 'bool (sys_sflist_t *, sys_sfnode_t *)'
| |     |-UnaryOperator 0x555f55e53820 <col:36, col:44> 'sys_sflist_t *' prefix '&'
| |     | `-MemberExpr 0x555f55e537e8 <col:37, col:44> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x555f55e50ef8
| |     |   `-ImplicitCastExpr 0x555f55e537d0 <col:37> 'struct k_queue *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x555f55e537a8 <col:37> 'struct k_queue *' lvalue ParmVar 0x555f55e53540 'queue' 'struct k_queue *'
| |     `-CStyleCastExpr 0x555f55e53890 <col:52, col:68> 'sys_sfnode_t *' <BitCast>
| |       `-ImplicitCastExpr 0x555f55e53878 <col:68> 'void *' <LValueToRValue>
| |         `-DeclRefExpr 0x555f55e53840 <col:68> 'void *' lvalue ParmVar 0x555f55e535b8 'data' 'void *'
| `-FullComment 0x555f55f03db0 <line:2120:3, line:2131:40>
|   |-ParagraphComment 0x555f55f03830 <line:2120:3>
|   | `-TextComment 0x555f55f03800 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f03850 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x555f55f038b0 <col:10, col:41>
|   |   `-TextComment 0x555f55f03880 <col:10, col:41> Text=" Remove an element from a queue."
|   |-ParagraphComment 0x555f55f039d0 <line:2122:3, line:2124:76>
|   | |-TextComment 0x555f55f038d0 <line:2122:3, col:39> Text=" This routine removes data item from "
|   | |-InlineCommandComment 0x555f55f03920 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x555f55f03940 <col:49, col:70> Text=" The first word of the"
|   | |-TextComment 0x555f55f03960 <line:2123:3, col:77> Text=" data item is reserved for the kernel's use. Removing elements from k_queue"
|   | `-TextComment 0x555f55f03980 <line:2124:3, col:76> Text=" rely on sys_slist_find_and_remove which is not a constant time operation."
|   |-ParagraphComment 0x555f55f03a20 <line:2126:3>
|   | `-TextComment 0x555f55f039f0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f03a40 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x555f55f03aa0 <col:9, col:30>
|   |   `-TextComment 0x555f55f03a70 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x555f55f03af0 <line:2128:3>
|   | `-TextComment 0x555f55f03ac0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f03b10 <col:4, line:2129:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x555f55f03bc0 <line:2128:16, line:2129:3>
|   |   |-TextComment 0x555f55f03b70 <line:2128:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x555f55f03b90 <line:2129:3> Text=" "
|   |-ParamCommandComment 0x555f55f03be0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x555f55f03c70 <col:15, col:40>
|   |   `-TextComment 0x555f55f03c40 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x555f55f03cc0 <line:2131:3>
|   | `-TextComment 0x555f55f03c90 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55f03ce0 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x555f55f03d40 <col:11, col:40>
|       `-TextComment 0x555f55f03d10 <col:11, col:40> Text=" true if data item was removed"
|-FunctionDecl 0x555f55e53b20 <line:2152:1, line:2164:1> line:2152:20 k_queue_unique_append 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x555f55e539e8 <col:42, col:58> col:58 used queue 'struct k_queue *'
| |-ParmVarDecl 0x555f55e53a60 <col:65, col:71> col:71 used data 'void *'
| |-CompoundStmt 0x555f55e54358 <line:2153:1, line:2164:1>
| | |-DeclStmt 0x555f55e53c40 <line:2154:2, col:20>
| | | `-VarDecl 0x555f55e53be0 <col:2, col:16> col:16 used test 'sys_sfnode_t *'
| | |-ForStmt 0x555f55e54148 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:2, /vagrant/ext/zephyros/zephyr/include/kernel.h:2160:2>
| | | |-BinaryOperator 0x555f55e53d88 <line:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x555f55e53c58 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x555f55e53be0 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x555f55e53d58 <<scratch space>:153:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x555f55e53d40 <<scratch space>:153:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x555f55e53c80 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbe7e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
| | | |   `-UnaryOperator 0x555f55e53d20 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:27, col:35> 'sys_sflist_t *' prefix '&'
| | | |     `-MemberExpr 0x555f55e53ce8 <col:28, col:35> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x555f55e50ef8
| | | |       `-ImplicitCastExpr 0x555f55e53cd0 <col:28> 'struct k_queue *' <LValueToRValue>
| | | |         `-DeclRefExpr 0x555f55e53ca8 <col:28> 'struct k_queue *' lvalue ParmVar 0x555f55e539e8 'queue' 'struct k_queue *'
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x555f55e53e88 <col:43, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| | | | |-ImplicitCastExpr 0x555f55e53e58 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x555f55e53db0 <col:43> 'sys_sfnode_t *' lvalue Var 0x555f55e53be0 'test' 'sys_sfnode_t *'
| | | | `-ImplicitCastExpr 0x555f55e53e70 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
| | | |   `-ParenExpr 0x555f55e53e38 <col:14, col:24> 'void *'
| | | |     `-CStyleCastExpr 0x555f55e53e10 <col:15, col:23> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x555f55e53dd8 <col:23> 'int' 0
| | | |-BinaryOperator 0x555f55e53f88 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x555f55e53eb0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x555f55e53be0 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x555f55e53f40 <<scratch space>:155:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x555f55e53f28 <<scratch space>:155:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x555f55e53ed8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x555f55dc01b8 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
| | | |   `-ImplicitCastExpr 0x555f55e53f70 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x555f55e53f00 <col:43> 'sys_sfnode_t *' lvalue Var 0x555f55e53be0 'test' 'sys_sfnode_t *'
| | | `-CompoundStmt 0x555f55e54130 <col:49, line:2160:2>
| | |   `-IfStmt 0x555f55e540f8 <line:2157:3, line:2159:3>
| | |     |-<<<NULL>>>
| | |     |-<<<NULL>>>
| | |     |-BinaryOperator 0x555f55e54068 <line:2157:7, col:32> 'int' '=='
| | |     | |-ImplicitCastExpr 0x555f55e54050 <col:7> 'sys_sfnode_t *' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x555f55e53fb0 <col:7> 'sys_sfnode_t *' lvalue Var 0x555f55e53be0 'test' 'sys_sfnode_t *'
| | |     | `-CStyleCastExpr 0x555f55e54028 <col:15, col:32> 'sys_sfnode_t *' <BitCast>
| | |     |   `-ImplicitCastExpr 0x555f55e54010 <col:32> 'void *' <LValueToRValue>
| | |     |     `-DeclRefExpr 0x555f55e53fd8 <col:32> 'void *' lvalue ParmVar 0x555f55e53a60 'data' 'void *'
| | |     |-CompoundStmt 0x555f55e540e0 <col:38, line:2159:3>
| | |     | `-ReturnStmt 0x555f55e540c8 <line:2158:4, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| | |     |   `-ImplicitCastExpr 0x555f55e540b0 <col:16> 'bool' <IntegralToBoolean>
| | |     |     `-IntegerLiteral 0x555f55e54090 <col:16> 'int' 0
| | |     `-<<<NULL>>>
| | |-CallExpr 0x555f55e54270 </vagrant/ext/zephyros/zephyr/include/kernel.h:2162:2, col:28> 'void'
| | | |-ImplicitCastExpr 0x555f55e54258 <col:2> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x555f55e54180 <col:2> 'void (struct k_queue *, void *)' Function 0x555f55e52200 'k_queue_append' 'void (struct k_queue *, void *)'
| | | |-ImplicitCastExpr 0x555f55e542a8 <col:17> 'struct k_queue *' <LValueToRValue>
| | | | `-DeclRefExpr 0x555f55e541a8 <col:17> 'struct k_queue *' lvalue ParmVar 0x555f55e539e8 'queue' 'struct k_queue *'
| | | `-ImplicitCastExpr 0x555f55e542c0 <col:24> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x555f55e541d0 <col:24> 'void *' lvalue ParmVar 0x555f55e53a60 'data' 'void *'
| | `-ReturnStmt 0x555f55e54310 <line:2163:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
| |   `-ImplicitCastExpr 0x555f55e542f8 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x555f55e542d8 <col:16> 'int' 1
| `-FullComment 0x555f55f043d0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2139:3, line:2150:52>
|   |-ParagraphComment 0x555f55f03e50 <line:2139:3>
|   | `-TextComment 0x555f55f03e20 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f03e70 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x555f55f03ed0 <col:10, col:72>
|   |   `-TextComment 0x555f55f03ea0 <col:10, col:72> Text=" Append an element to a queue only if it's not present already."
|   |-ParagraphComment 0x555f55f03ff0 <line:2141:3, line:2143:78>
|   | |-TextComment 0x555f55f03ef0 <line:2141:3, col:37> Text=" This routine appends data item to "
|   | |-InlineCommandComment 0x555f55f03f40 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x555f55f03f60 <col:47, col:73> Text=" The first word of the data"
|   | |-TextComment 0x555f55f03f80 <line:2142:3, col:71> Text=" item is reserved for the kernel's use. Appending elements to k_queue"
|   | `-TextComment 0x555f55f03fa0 <line:2143:3, col:78> Text=" relies on sys_slist_is_node_in_list which is not a constant time operation."
|   |-ParagraphComment 0x555f55f04040 <line:2145:3>
|   | `-TextComment 0x555f55f04010 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f04060 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x555f55f040c0 <col:9, col:30>
|   |   `-TextComment 0x555f55f04090 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x555f55f04110 <line:2147:3>
|   | `-TextComment 0x555f55f040e0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f04130 <col:4, line:2148:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x555f55f041e0 <line:2147:16, line:2148:3>
|   |   |-TextComment 0x555f55f04190 <line:2147:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x555f55f041b0 <line:2148:3> Text=" "
|   |-ParamCommandComment 0x555f55f04200 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x555f55f04290 <col:15, col:40>
|   |   `-TextComment 0x555f55f04260 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x555f55f042e0 <line:2150:3>
|   | `-TextComment 0x555f55f042b0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55f04300 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x555f55f04360 <col:11, col:52>
|       `-TextComment 0x555f55f04330 <col:11, col:52> Text=" true if data item was added, false if not"
|-FunctionDecl 0x555f55e544b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2179:53> col:15 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x555f55e543b0 <col:32, col:48> col:48 queue 'struct k_queue *'
| `-FullComment 0x555f55f04920 <line:2167:3, line:2177:34>
|   |-ParagraphComment 0x555f55f04470 <line:2167:3>
|   | `-TextComment 0x555f55f04440 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f04490 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x555f55f044f0 <col:10, col:56>
|   |   `-TextComment 0x555f55f044c0 <col:10, col:56> Text=" Query a queue to see if it has data available."
|   |-ParagraphComment 0x555f55f04560 <line:2169:3, line:2170:59>
|   | |-TextComment 0x555f55f04510 <line:2169:3, col:77> Text=" Note that the data might be already gone by the time this function returns"
|   | `-TextComment 0x555f55f04530 <line:2170:3, col:59> Text=" if other threads are also trying to read from the queue."
|   |-ParagraphComment 0x555f55f045b0 <line:2172:3>
|   | `-TextComment 0x555f55f04580 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f045d0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f04630 <col:9, col:31>
|   |   `-TextComment 0x555f55f04600 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f04680 <line:2174:3>
|   | `-TextComment 0x555f55f04650 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f046a0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x555f55f04730 <col:16, col:37>
|   |   `-TextComment 0x555f55f04700 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x555f55f04790 <line:2176:3>
|   | `-TextComment 0x555f55f04760 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f047b0 <col:4, line:2177:3> Name="return"
|   | `-ParagraphComment 0x555f55f04830 <line:2176:11, line:2177:3>
|   |   |-TextComment 0x555f55f047e0 <line:2176:11, col:42> Text=" Non-zero if the queue is empty."
|   |   `-TextComment 0x555f55f04800 <line:2177:3> Text=" "
|   `-BlockCommandComment 0x555f55f04850 <col:4, col:34> Name="return"
|     `-ParagraphComment 0x555f55f048b0 <col:11, col:34>
|       `-TextComment 0x555f55f04880 <col:11, col:34> Text=" 0 if data is available."
|-FunctionDecl 0x555f55e54618 <line:2181:1, line:2184:1> line:2181:19 used z_impl_k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x555f55e54588 <col:43, col:59> col:59 used queue 'struct k_queue *'
| `-CompoundStmt 0x555f55e54848 <line:2182:1, line:2184:1>
|   `-ReturnStmt 0x555f55e54808 <line:2183:2, col:48>
|     `-CStyleCastExpr 0x555f55e547e0 <col:9, col:48> 'int' <IntegralCast>
|       `-CallExpr 0x555f55e54798 <col:14, col:48> 'bool'
|         |-ImplicitCastExpr 0x555f55e54780 <col:14> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x555f55e546c0 <col:14> 'bool (sys_sflist_t *)' Function 0x555f55dbf940 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|         `-UnaryOperator 0x555f55e54760 <col:34, col:42> 'sys_sflist_t *' prefix '&'
|           `-MemberExpr 0x555f55e54728 <col:35, col:42> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x555f55e50ef8
|             `-ImplicitCastExpr 0x555f55e54710 <col:35> 'struct k_queue *' <LValueToRValue>
|               `-DeclRefExpr 0x555f55e546e8 <col:35> 'struct k_queue *' lvalue ParmVar 0x555f55e54588 'queue' 'struct k_queue *'
|-FunctionDecl 0x555f55e54998 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2195:56> col:17 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x555f55e54888 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x555f55f04cc0 <line:2187:3, line:2193:51>
|   |-ParagraphComment 0x555f55f049c0 <line:2187:3>
|   | `-TextComment 0x555f55f04990 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f049e0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x555f55f04a40 <col:10, col:44>
|   |   `-TextComment 0x555f55f04a10 <col:10, col:44> Text=" Peek element at the head of queue."
|   |-ParagraphComment 0x555f55f04a90 <line:2189:3, col:61>
|   | `-TextComment 0x555f55f04a60 <col:3, col:61> Text=" Return element from the head of queue without removing it."
|   |-ParagraphComment 0x555f55f04ae0 <line:2191:3>
|   | `-TextComment 0x555f55f04ab0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f04b00 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x555f55f04b90 <col:16, col:37>
|   |   `-TextComment 0x555f55f04b60 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x555f55f04be0 <line:2193:3>
|   | `-TextComment 0x555f55f04bb0 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55f04c00 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x555f55f04c60 <col:11, col:51>
|       `-TextComment 0x555f55f04c30 <col:11, col:51> Text=" Head element, or NULL if queue is empty."
|-FunctionDecl 0x555f55e55470 <line:2197:1, line:2200:1> line:2197:21 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x555f55e54a68 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x555f55e55778 <line:2198:1, line:2200:1>
|   `-ReturnStmt 0x555f55e55730 <line:2199:2, col:70>
|     `-CallExpr 0x555f55e556e0 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x555f55e556c8 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e55518 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x555f55e51b00 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x555f55e55618 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x555f55e55600 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x555f55e55540 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbe7e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x555f55e555e0 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x555f55e555a8 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x555f55e50ef8
|       |     `-ImplicitCastExpr 0x555f55e55590 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x555f55e55568 <col:49> 'struct k_queue *' lvalue ParmVar 0x555f55e54a68 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x555f55e55718 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x555f55e55648 <col:16> 'int' 0
|-FunctionDecl 0x555f55e55848 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2211:56> col:17 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x555f55e557b8 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x555f55f05060 <line:2203:3, line:2209:51>
|   |-ParagraphComment 0x555f55f04d60 <line:2203:3>
|   | `-TextComment 0x555f55f04d30 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f04d80 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x555f55f04de0 <col:10, col:44>
|   |   `-TextComment 0x555f55f04db0 <col:10, col:44> Text=" Peek element at the tail of queue."
|   |-ParagraphComment 0x555f55f04e30 <line:2205:3, col:61>
|   | `-TextComment 0x555f55f04e00 <col:3, col:61> Text=" Return element from the tail of queue without removing it."
|   |-ParagraphComment 0x555f55f04e80 <line:2207:3>
|   | `-TextComment 0x555f55f04e50 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f04ea0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x555f55f04f30 <col:16, col:37>
|   |   `-TextComment 0x555f55f04f00 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x555f55f04f80 <line:2209:3>
|   | `-TextComment 0x555f55f04f50 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55f04fa0 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x555f55f05000 <col:11, col:51>
|       `-TextComment 0x555f55f04fd0 <col:11, col:51> Text=" Tail element, or NULL if queue is empty."
|-FunctionDecl 0x555f55e559a8 <line:2213:1, line:2216:1> line:2213:21 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x555f55e55918 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x555f55e55c78 <line:2214:1, line:2216:1>
|   `-ReturnStmt 0x555f55e55c08 <line:2215:2, col:70>
|     `-CallExpr 0x555f55e55bb8 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x555f55e55ba0 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e55a50 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x555f55e51b00 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x555f55e55b50 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x555f55e55b38 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x555f55e55a78 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x555f55dbea08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x555f55e55b18 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x555f55e55ae0 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x555f55e50ef8
|       |     `-ImplicitCastExpr 0x555f55e55ac8 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x555f55e55aa0 <col:49> 'struct k_queue *' lvalue ParmVar 0x555f55e55918 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x555f55e55bf0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x555f55e55b80 <col:16> 'int' 0
|-RecordDecl 0x555f55e55c90 prev 0x555f55e38020 </vagrant/ext/zephyros/zephyr/include/kernel.h:2310:1, line:2312:1> line:2310:8 struct k_fifo definition
| `-FieldDecl 0x555f55e55d38 <line:2311:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-RecordDecl 0x555f55e56128 prev 0x555f55e380d0 <line:2525:1, line:2527:1> line:2525:8 struct k_lifo definition
| |-FullComment 0x555f55f05180 <line:2523:4, col:7>
| | `-ParagraphComment 0x555f55f05150 <col:4, col:7>
| |   |-TextComment 0x555f55f050d0 <col:4> Text=" "
| |   |-TextComment 0x555f55f050f0 <col:5> Text="@"
| |   `-TextComment 0x555f55f05110 <col:6, col:7> Text="} "
| `-FieldDecl 0x555f55e561d0 <line:2526:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-TypedefDecl 0x555f55e56408 <line:2641:1, col:19> col:19 referenced stack_data_t 'uintptr_t':'unsigned long'
| `-TypedefType 0x555f55dd5f40 'uintptr_t' sugar
|   |-Typedef 0x555f55cead28 'uintptr_t'
|   `-BuiltinType 0x555f55ca0850 'unsigned long'
|-RecordDecl 0x555f55d54090 prev 0x555f55e38180 <line:2643:1, line:2651:1> line:2643:8 struct k_stack definition
| |-FieldDecl 0x555f55d54128 <line:2644:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x555f55d54190 <line:2645:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-FieldDecl 0x555f55d54268 <line:2646:2, col:16> col:16 base 'stack_data_t *'
| |-FieldDecl 0x555f55d542c0 <col:2, col:23> col:23 next 'stack_data_t *'
| |-FieldDecl 0x555f55d54318 <col:2, col:30> col:30 top 'stack_data_t *'
| `-FieldDecl 0x555f55d54370 <line:2650:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x555f55d54710 <line:2686:1, line:2687:44> line:2686:6 k_stack_init 'void (struct k_stack *, stack_data_t *, u32_t)'
| |-ParmVarDecl 0x555f55d54500 <col:19, col:35> col:35 stack 'struct k_stack *'
| |-ParmVarDecl 0x555f55d54570 <line:2687:5, col:19> col:19 buffer 'stack_data_t *'
| |-ParmVarDecl 0x555f55d545e0 <col:27, col:33> col:33 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x555f55f05790 <line:2675:3, line:2685:1>
|   |-ParagraphComment 0x555f55f05220 <line:2675:3>
|   | `-TextComment 0x555f55f051f0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f05240 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x555f55f052a0 <col:10, col:29>
|   |   `-TextComment 0x555f55f05270 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x555f55f052f0 <line:2677:3, col:67>
|   | `-TextComment 0x555f55f052c0 <col:3, col:67> Text=" This routine initializes a stack object, prior to its first use."
|   |-ParagraphComment 0x555f55f05340 <line:2679:3>
|   | `-TextComment 0x555f55f05310 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f05360 <col:4, line:2680:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x555f55f05410 <line:2679:16, line:2680:3>
|   |   |-TextComment 0x555f55f053c0 <line:2679:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x555f55f053e0 <line:2680:3> Text=" "
|   |-ParamCommandComment 0x555f55f05430 <col:4, line:2681:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x555f55f054e0 <line:2680:17, line:2681:3>
|   |   |-TextComment 0x555f55f05490 <line:2680:17, col:62> Text=" Address of array used to hold stacked values."
|   |   `-TextComment 0x555f55f054b0 <line:2681:3> Text=" "
|   |-ParamCommandComment 0x555f55f05500 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=2
|   | `-ParagraphComment 0x555f55f05590 <col:22, col:67>
|   |   `-TextComment 0x555f55f05560 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x555f55f055e0 <line:2683:3>
|   | `-TextComment 0x555f55f055b0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f05600 <col:4, line:2684:3> Name="return"
|   | `-ParagraphComment 0x555f55f05680 <line:2683:11, line:2684:3>
|   |   |-TextComment 0x555f55f05630 <line:2683:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f05650 <line:2684:3> Text=" "
|   |-VerbatimLineComment 0x555f55f056a0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x555f55f05710 <line:2685:1>
|     `-TextComment 0x555f55f056e0 <col:1> Text=" "
|-FunctionDecl 0x555f55d549a0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2706:25> line:2705:17 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x555f55d54820 <col:36, col:52> col:52 stack 'struct k_stack *'
| |-ParmVarDecl 0x555f55d54890 <line:2706:8, col:14> col:14 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x555f55f05d30 <line:2691:3, line:2703:1>
|   |-ParagraphComment 0x555f55f05830 <line:2691:3>
|   | `-TextComment 0x555f55f05800 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f05850 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x555f55f058b0 <col:10, col:29>
|   |   `-TextComment 0x555f55f05880 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x555f55f05970 <line:2693:3, line:2696:72>
|   | |-TextComment 0x555f55f058d0 <line:2693:3, col:76> Text=" This routine initializes a stack object, prior to its first use. Internal"
|   | |-TextComment 0x555f55f058f0 <line:2694:3, col:69> Text=" buffers will be allocated from the calling thread's resource pool."
|   | |-TextComment 0x555f55f05910 <line:2695:3, col:66> Text=" This memory will be released if k_stack_cleanup() is called, or"
|   | `-TextComment 0x555f55f05930 <line:2696:3, col:72> Text=" userspace is enabled and the stack object loses all references to it."
|   |-ParagraphComment 0x555f55f059c0 <line:2698:3>
|   | `-TextComment 0x555f55f05990 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f059e0 <col:4, line:2699:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x555f55f05a90 <line:2698:16, line:2699:3>
|   |   |-TextComment 0x555f55f05a40 <line:2698:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x555f55f05a60 <line:2699:3> Text=" "
|   |-ParamCommandComment 0x555f55f05ab0 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=1
|   | `-ParagraphComment 0x555f55f05b40 <col:22, col:67>
|   |   `-TextComment 0x555f55f05b10 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x555f55f05b90 <line:2701:3>
|   | `-TextComment 0x555f55f05b60 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f05bb0 <col:4, line:2702:3> Name="return"
|   | `-ParagraphComment 0x555f55f05c30 <line:2701:11, line:2702:3>
|   |   |-TextComment 0x555f55f05be0 <line:2701:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x555f55f05c00 <line:2702:3> Text=" "
|   |-VerbatimLineComment 0x555f55f05c50 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x555f55f05cc0 <line:2703:1>
|     `-TextComment 0x555f55f05c90 <col:1> Text=" "
|-FunctionDecl 0x555f55d54ba8 <line:2720:1, col:42> col:5 k_stack_cleanup 'int (struct k_stack *)'
| |-ParmVarDecl 0x555f55d54aa0 <col:21, col:37> col:37 stack 'struct k_stack *'
| `-FullComment 0x555f55f061f0 <line:2709:3, line:2719:1>
|   |-ParagraphComment 0x555f55f05dd0 <line:2709:3>
|   | `-TextComment 0x555f55f05da0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f05df0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x555f55f05e50 <col:10, col:44>
|   |   `-TextComment 0x555f55f05e20 <col:10, col:44> Text=" Release a stack's allocated buffer"
|   |-ParagraphComment 0x555f55f05ef0 <line:2711:3, line:2713:46>
|   | |-TextComment 0x555f55f05e70 <line:2711:3, col:65> Text=" If a stack object was given a dynamically allocated buffer via"
|   | |-TextComment 0x555f55f05e90 <line:2712:3, col:70> Text=" k_stack_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x555f55f05eb0 <line:2713:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x555f55f05f40 <line:2715:3>
|   | `-TextComment 0x555f55f05f10 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f05f60 <col:4, line:2718:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x555f55f06100 <line:2715:16, line:2718:3>
|   |   |-TextComment 0x555f55f05fc0 <line:2715:16, col:37> Text=" Address of the stack."
|   |   |-TextComment 0x555f55f05fe0 <line:2716:3> Text=" "
|   |   |-InlineCommandComment 0x555f55f06000 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x555f55f06020 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x555f55f06040 <line:2717:3> Text=" "
|   |   |-InlineCommandComment 0x555f55f06060 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x555f55f06080 <col:11, col:46> Text=" -EAGAIN when object is still in use"
|   |   `-TextComment 0x555f55f060a0 <line:2718:3> Text=" "
|   |-VerbatimLineComment 0x555f55f06120 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x555f55f06190 <line:2719:1>
|     `-TextComment 0x555f55f06160 <col:1> Text=" "
|-FunctionDecl 0x555f55d54e28 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2736:68> col:15 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x555f55d54ca0 <col:28, col:44> col:44 stack 'struct k_stack *'
| |-ParmVarDecl 0x555f55d54d10 <col:51, col:64> col:64 data 'stack_data_t':'unsigned long'
| `-FullComment 0x555f55f06940 <line:2723:3, line:2735:1>
|   |-ParagraphComment 0x555f55f06290 <line:2723:3>
|   | `-TextComment 0x555f55f06260 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f062b0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55f06310 <col:10, col:39>
|   |   `-TextComment 0x555f55f062e0 <col:10, col:39> Text=" Push an element onto a stack."
|   |-ParagraphComment 0x555f55f06430 <line:2725:3, col:55>
|   | |-TextComment 0x555f55f06330 <col:3, col:42> Text=" This routine adds a stack_data_t value "
|   | |-InlineCommandComment 0x555f55f06380 <col:43, col:44> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x555f55f063a0 <col:50, col:53> Text=" to "
|   | `-InlineCommandComment 0x555f55f063f0 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="stack."
|   |-ParagraphComment 0x555f55f06480 <line:2727:3>
|   | `-TextComment 0x555f55f06450 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f064a0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f06500 <col:9, col:31>
|   |   `-TextComment 0x555f55f064d0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f06550 <line:2729:3>
|   | `-TextComment 0x555f55f06520 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f06570 <col:4, line:2730:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x555f55f06620 <line:2729:16, line:2730:3>
|   |   |-TextComment 0x555f55f065d0 <line:2729:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x555f55f065f0 <line:2730:3> Text=" "
|   |-ParamCommandComment 0x555f55f06640 <col:4, col:44> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x555f55f066d0 <col:15, col:44>
|   |   `-TextComment 0x555f55f066a0 <col:15, col:44> Text=" Value to push onto the stack."
|   |-ParagraphComment 0x555f55f06830 <line:2732:3, line:2734:3>
|   | |-TextComment 0x555f55f066f0 <line:2732:3> Text=" "
|   | |-InlineCommandComment 0x555f55f06710 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f06730 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x555f55f06770 <line:2733:3> Text=" "
|   | |-InlineCommandComment 0x555f55f06790 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f067b0 <col:11, col:35> Text=" -ENOMEM if stack is full"
|   | `-TextComment 0x555f55f067d0 <line:2734:3> Text=" "
|   |-VerbatimLineComment 0x555f55f06850 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x555f55f068c0 <line:2735:1>
|     `-TextComment 0x555f55f06890 <col:1> Text=" "
|-FunctionDecl 0x555f55d554c8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2758:19> line:2757:15 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x555f55d54f30 <col:27, col:43> col:43 stack 'struct k_stack *'
| |-ParmVarDecl 0x555f55d54fa0 <col:50, col:64> col:64 data 'stack_data_t *'
| |-ParmVarDecl 0x555f55d55010 <line:2758:6, col:12> col:12 timeout 's32_t':'int'
| `-FullComment 0x555f55f072b0 <line:2739:3, line:2756:1>
|   |-ParagraphComment 0x555f55f069e0 <line:2739:3>
|   | `-TextComment 0x555f55f069b0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f06a00 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x555f55f06a60 <col:10, col:38>
|   |   `-TextComment 0x555f55f06a30 <col:10, col:38> Text=" Pop an element from a stack."
|   |-ParagraphComment 0x555f55f06bb0 <line:2741:3, line:2742:47>
|   | |-TextComment 0x555f55f06a80 <line:2741:3, col:50> Text=" This routine removes a stack_data_t value from "
|   | |-InlineCommandComment 0x555f55f06ad0 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="stack"
|   | |-TextComment 0x555f55f06af0 <col:59, col:73> Text=" in a "last in,"
|   | |-TextComment 0x555f55f06b10 <line:2742:3, col:45> Text=" first out" manner and stores the value in "
|   | `-InlineCommandComment 0x555f55f06b60 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="data."
|   |-ParagraphComment 0x555f55f06c00 <line:2744:3>
|   | `-TextComment 0x555f55f06bd0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f06c20 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x555f55f06d00 <col:9, col:72>
|   |   |-TextComment 0x555f55f06c50 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x555f55f06ca0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x555f55f06cc0 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x555f55f06d50 <line:2746:3>
|   | `-TextComment 0x555f55f06d20 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f06d70 <col:4, line:2747:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x555f55f06e20 <line:2746:16, line:2747:3>
|   |   |-TextComment 0x555f55f06dd0 <line:2746:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x555f55f06df0 <line:2747:3> Text=" "
|   |-ParamCommandComment 0x555f55f06e40 <col:4, line:2748:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x555f55f06ef0 <line:2747:15, line:2748:3>
|   |   |-TextComment 0x555f55f06ea0 <line:2747:15, col:71> Text=" Address of area to hold the value popped from the stack."
|   |   `-TextComment 0x555f55f06ec0 <line:2748:3> Text=" "
|   |-ParamCommandComment 0x555f55f06f10 <col:4, line:2750:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x555f55f06ff0 <line:2748:18, line:2750:28>
|   |   |-TextComment 0x555f55f06f70 <line:2748:18, col:67> Text=" Non-negative waiting period to obtain a value (in"
|   |   |-TextComment 0x555f55f06f90 <line:2749:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x555f55f06fb0 <line:2750:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x555f55f071a0 <line:2752:3, line:2755:3>
|   | |-TextComment 0x555f55f07010 <line:2752:3> Text=" "
|   | |-InlineCommandComment 0x555f55f07030 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f07050 <col:11, col:39> Text=" 0 Element popped from stack."
|   | |-TextComment 0x555f55f07070 <line:2753:3> Text=" "
|   | |-InlineCommandComment 0x555f55f07090 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f070b0 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x555f55f070d0 <line:2754:3> Text=" "
|   | |-InlineCommandComment 0x555f55f070f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f07110 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x555f55f07130 <line:2755:3> Text=" "
|   |-VerbatimLineComment 0x555f55f071c0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x555f55f07230 <line:2756:1>
|     `-TextComment 0x555f55f07200 <col:1> Text=" "
|-RecordDecl 0x555f55d555d8 <line:2780:1, col:8> col:8 struct k_work
| `-FullComment 0x555f55f073d0 <line:2778:4, col:7>
|   `-ParagraphComment 0x555f55f073a0 <col:4, col:7>
|     |-TextComment 0x555f55f07320 <col:4> Text=" "
|     |-TextComment 0x555f55f07340 <col:5> Text="@"
|     `-TextComment 0x555f55f07360 <col:6, col:7> Text="} "
|-RecordDecl 0x555f55d55680 <line:2781:1, col:8> col:8 struct k_work_poll
|-TypedefDecl 0x555f55d55a00 <line:2784:1, col:68> col:15 referenced _poller_cb_t 'int (*)(struct k_poll_event *, u32_t)'
| `-PointerType 0x555f55d55990 'int (*)(struct k_poll_event *, u32_t)'
|   `-ParenType 0x555f55d55930 'int (struct k_poll_event *, u32_t)' sugar
|     `-FunctionProtoType 0x555f55d558f0 'int (struct k_poll_event *, u32_t)' cdecl
|       |-BuiltinType 0x555f55ca0790 'int'
|       |-PointerType 0x555f55d55790 'struct k_poll_event *'
|       | `-ElaboratedType 0x555f55d55730 'struct k_poll_event' sugar
|       |   `-RecordType 0x555f55e384d0 'struct k_poll_event'
|       |     `-Record 0x555f55e82da8 'k_poll_event'
|       `-TypedefType 0x555f55d326a0 'u32_t' sugar
|         |-Typedef 0x555f55d0e8b0 'u32_t'
|         `-BuiltinType 0x555f55ca0830 'unsigned int'
|-RecordDecl 0x555f55d55a58 <line:2785:1, line:2789:1> line:2785:8 struct _poller definition
| |-FieldDecl 0x555f55d55b10 <line:2786:2, col:16> col:16 is_polling 'volatile bool'
| |-FieldDecl 0x555f55d55b80 <line:2787:2, col:19> col:19 thread 'struct k_thread *'
| `-FieldDecl 0x555f55d55c00 <line:2788:2, col:15> col:15 cb '_poller_cb_t':'int (*)(struct k_poll_event *, u32_t)'
|-TypedefDecl 0x555f55d55f00 <line:2808:1, col:53> col:16 referenced k_work_handler_t 'void (*)(struct k_work *)'
| |-PointerType 0x555f55d55ea0 'void (*)(struct k_work *)'
| | `-ParenType 0x555f55d55e40 'void (struct k_work *)' sugar
| |   `-FunctionProtoType 0x555f55d55e00 'void (struct k_work *)' cdecl
| |     |-BuiltinType 0x555f55ca06f0 'void'
| |     `-PointerType 0x555f55d55d10 'struct k_work *'
| |       `-ElaboratedType 0x555f55d55cb0 'struct k_work' sugar
| |         `-RecordType 0x555f55d55660 'struct k_work'
| |           `-Record 0x555f55d56208 'k_work'
| `-FullComment 0x555f55f078f0 <line:2797:3, line:2807:1>
|   |-ParagraphComment 0x555f55f07470 <line:2797:3>
|   | `-TextComment 0x555f55f07440 <col:3> Text=" "
|   |-VerbatimLineComment 0x555f55f07490 <col:4, col:29> Text=" k_work_handler_t"
|   |-ParagraphComment 0x555f55f07500 <line:2798:3>
|   | `-TextComment 0x555f55f074d0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f07520 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x555f55f07580 <col:10, col:42>
|   |   `-TextComment 0x555f55f07550 <col:10, col:42> Text=" Work item handler function type."
|   |-ParagraphComment 0x555f55f075f0 <line:2800:3, line:2801:52>
|   | |-TextComment 0x555f55f075a0 <line:2800:3, col:69> Text=" A work item's handler function is executed by a workqueue's thread"
|   | `-TextComment 0x555f55f075c0 <line:2801:3, col:52> Text=" when the work item is processed by the workqueue."
|   |-ParagraphComment 0x555f55f07640 <line:2803:3>
|   | `-TextComment 0x555f55f07610 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f07660 <col:4, col:40> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x555f55f076f0 <col:15, col:40>
|   |   `-TextComment 0x555f55f076c0 <col:15, col:40> Text=" Address of the work item."
|   |-ParagraphComment 0x555f55f07740 <line:2805:3>
|   | `-TextComment 0x555f55f07710 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f07760 <col:4, line:2806:3> Name="return"
|   | `-ParagraphComment 0x555f55f077e0 <line:2805:11, line:2806:3>
|   |   |-TextComment 0x555f55f07790 <line:2805:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f077b0 <line:2806:3> Text=" "
|   |-VerbatimLineComment 0x555f55f07800 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x555f55f07870 <line:2807:1>
|     `-TextComment 0x555f55f07840 <col:1> Text=" "
|-RecordDecl 0x555f55d55f88 <line:2814:1, line:2817:1> line:2814:8 invalid struct k_work_q definition
| |-FullComment 0x555f55f07a10 <line:2811:3, col:24>
| | `-ParagraphComment 0x555f55f079e0 <col:3, col:24>
| |   |-TextComment 0x555f55f07960 <col:3> Text=" "
| |   |-InlineCommandComment 0x555f55f07980 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x555f55f079a0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x555f55d56050 <line:2815:2, col:17> col:17 referenced queue 'struct k_queue':'struct k_queue'
| `-FieldDecl 0x555f55d560b8 <line:2816:2, col:18> col:18 invalid thread 'struct k_thread':'struct k_thread'
|-EnumDecl 0x555f55d56100 <line:2819:1, line:2821:1> line:2819:1
| `-EnumConstantDecl 0x555f55d561c0 <line:2820:2> col:2 referenced K_WORK_STATE_PENDING 'int'
|-RecordDecl 0x555f55d56208 prev 0x555f55d555d8 <line:2823:1, line:2827:1> line:2823:8 struct k_work definition
| |-FieldDecl 0x555f55d562a8 <line:2824:2, col:8> col:8 _reserved 'void *'
| |-FieldDecl 0x555f55d56320 <line:2825:2, col:19> col:19 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FieldDecl 0x555f55d567a8 <line:2826:2, col:18> col:11 referenced flags 'atomic_t [1]'
|-RecordDecl 0x555f55d567f0 <line:2829:1, line:2833:1> line:2829:8 struct k_delayed_work definition
| |-FieldDecl 0x555f55d568c0 <line:2830:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x555f55d56928 <line:2831:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x555f55d56a20 <line:2832:2, col:19> col:19 work_q 'struct k_work_q *'
|-RecordDecl 0x555f55d56ac0 prev 0x555f55d55680 <line:2835:1, line:2843:1> line:2835:8 struct k_work_poll definition
| |-FieldDecl 0x555f55d56b68 <line:2836:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x555f55d56c00 <line:2837:2, col:17> col:17 poller 'struct _poller':'struct _poller'
| |-FieldDecl 0x555f55d56c70 <line:2838:2, col:23> col:23 events 'struct k_poll_event *'
| |-FieldDecl 0x555f55d56cd0 <line:2839:2, col:6> col:6 num_events 'int'
| |-FieldDecl 0x555f55d56d28 <line:2840:2, col:19> col:19 real_handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-FieldDecl 0x555f55d56d90 <line:2841:2, col:18> col:18 timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x555f55d56df0 <line:2842:2, col:6> col:6 poll_result 'int'
|-VarDecl 0x555f55d56e58 <line:2845:1, col:24> col:24 used k_sys_work_q 'struct k_work_q':'struct k_work_q' extern
|-FunctionDecl 0x555f55d570f0 <line:2886:1, line:2889:1> line:2886:20 k_work_init 'void (struct k_work *, k_work_handler_t)' static inline
| |-ParmVarDecl 0x555f55d56f70 <col:32, col:47> col:47 used work 'struct k_work *'
| |-ParmVarDecl 0x555f55d56fe0 <col:53, col:70> col:70 used handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-CompoundStmt 0x555f55d57598 <line:2887:1, line:2889:1>
| | `-BinaryOperator 0x555f55d57540 <line:2888:2, line:2856:2> 'struct k_work':'struct k_work' '='
| |   |-UnaryOperator 0x555f55d571e0 <line:2888:2, col:3> 'struct k_work':'struct k_work' lvalue prefix '*'
| |   | `-ImplicitCastExpr 0x555f55d571c8 <col:3> 'struct k_work *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x555f55d571a0 <col:3> 'struct k_work *' lvalue ParmVar 0x555f55d56f70 'work' 'struct k_work *'
| |   `-ImplicitCastExpr 0x555f55d57528 <col:10, line:2856:2> 'struct k_work':'struct k_work' <LValueToRValue>
| |     `-CompoundLiteralExpr 0x555f55d57500 <line:2888:10, line:2856:2> 'struct k_work':'struct k_work' lvalue
| |       `-InitListExpr 0x555f55d57448 <line:2852:2, line:2856:2> 'struct k_work':'struct k_work'
| |         |-ParenExpr 0x555f55d57280 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'void *'
| |         | `-CStyleCastExpr 0x555f55d57258 <col:15, col:23> 'void *' <NullToPointer>
| |         |   `-IntegerLiteral 0x555f55d57220 <col:23> 'int' 0
| |         |-ImplicitCastExpr 0x555f55d574a0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2888:44> 'k_work_handler_t':'void (*)(struct k_work *)' <LValueToRValue>
| |         | `-DeclRefExpr 0x555f55d572e0 <col:44> 'k_work_handler_t':'void (*)(struct k_work *)' lvalue ParmVar 0x555f55d56fe0 'handler' 'k_work_handler_t':'void (*)(struct k_work *)'
| |         `-InitListExpr 0x555f55d574b8 <line:2855:11, col:15> 'atomic_t [1]'
| |           `-IntegerLiteral 0x555f55d57348 <col:13> 'int' 0
| `-FullComment 0x555f55f07f40 <line:2876:3, line:2885:1>
|   |-ParagraphComment 0x555f55f07ab0 <line:2876:3>
|   | `-TextComment 0x555f55f07a80 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f07ad0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x555f55f07b30 <col:10, col:33>
|   |   `-TextComment 0x555f55f07b00 <col:10, col:33> Text=" Initialize a work item."
|   |-ParagraphComment 0x555f55f07b80 <line:2878:3, col:74>
|   | `-TextComment 0x555f55f07b50 <col:3, col:74> Text=" This routine initializes a workqueue work item, prior to its first use."
|   |-ParagraphComment 0x555f55f07bd0 <line:2880:3>
|   | `-TextComment 0x555f55f07ba0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f07bf0 <col:4, line:2881:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x555f55f07ca0 <line:2880:15, line:2881:3>
|   |   |-TextComment 0x555f55f07c50 <line:2880:15, col:36> Text=" Address of work item."
|   |   `-TextComment 0x555f55f07c70 <line:2881:3> Text=" "
|   |-ParamCommandComment 0x555f55f07cc0 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x555f55f07d50 <col:18, col:70>
|   |   `-TextComment 0x555f55f07d20 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x555f55f07da0 <line:2883:3>
|   | `-TextComment 0x555f55f07d70 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f07dc0 <col:4, line:2884:3> Name="return"
|   | `-ParagraphComment 0x555f55f07e40 <line:2883:11, line:2884:3>
|   |   |-TextComment 0x555f55f07df0 <line:2883:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f07e10 <line:2884:3> Text=" "
|   |-VerbatimLineComment 0x555f55f07e60 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x555f55f07ed0 <line:2885:1>
|     `-TextComment 0x555f55f07ea0 <col:1> Text=" "
|-FunctionDecl 0x555f55d57ef0 <line:2913:1, line:2919:1> line:2913:20 used k_work_submit_to_queue 'void (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x555f55d575d8 <col:43, col:60> col:60 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x555f55d57660 <line:2914:8, col:23> col:23 used work 'struct k_work *'
| |-CompoundStmt 0x555f55d58338 <line:2915:1, line:2919:1>
| | `-IfStmt 0x555f55d582d0 <line:2916:2, line:2918:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-UnaryOperator 0x555f55d58130 <line:2916:6, col:64> 'int' prefix '!'
| |   | `-CallExpr 0x555f55d580e0 <col:7, col:64> 'bool'
| |   |   |-ImplicitCastExpr 0x555f55d580c8 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x555f55d57fa0 <col:7> 'bool (atomic_t *, int)' Function 0x555f55d33c60 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| |   |   |-ImplicitCastExpr 0x555f55d58118 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| |   |   | `-MemberExpr 0x555f55d58008 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x555f55d567a8
| |   |   |   `-ImplicitCastExpr 0x555f55d57ff0 <col:31> 'struct k_work *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x555f55d57fc8 <col:31> 'struct k_work *' lvalue ParmVar 0x555f55d57660 'work' 'struct k_work *'
| |   |   `-DeclRefExpr 0x555f55d58040 <col:44> 'int' EnumConstant 0x555f55d561c0 'K_WORK_STATE_PENDING' 'int'
| |   |-CompoundStmt 0x555f55d582b8 <col:67, line:2918:2>
| |   | `-CallExpr 0x555f55d58250 <line:2917:3, col:38> 'void'
| |   |   |-ImplicitCastExpr 0x555f55d58238 <col:3> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x555f55d58150 <col:3> 'void (struct k_queue *, void *)' Function 0x555f55e52200 'k_queue_append' 'void (struct k_queue *, void *)'
| |   |   |-UnaryOperator 0x555f55d581f0 <col:18, col:27> 'struct k_queue *' prefix '&'
| |   |   | `-MemberExpr 0x555f55d581b8 <col:19, col:27> 'struct k_queue':'struct k_queue' lvalue ->queue 0x555f55d56050
| |   |   |   `-ImplicitCastExpr 0x555f55d581a0 <col:19> 'struct k_work_q *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x555f55d58178 <col:19> 'struct k_work_q *' lvalue ParmVar 0x555f55d575d8 'work_q' 'struct k_work_q *'
| |   |   `-ImplicitCastExpr 0x555f55d582a0 <col:34> 'void *' <BitCast>
| |   |     `-ImplicitCastExpr 0x555f55d58288 <col:34> 'struct k_work *' <LValueToRValue>
| |   |       `-DeclRefExpr 0x555f55d58210 <col:34> 'struct k_work *' lvalue ParmVar 0x555f55d57660 'work' 'struct k_work *'
| |   `-<<<NULL>>>
| `-FullComment 0x555f55f08820 <line:2892:3, line:2912:1>
|   |-ParagraphComment 0x555f55f07fe0 <line:2892:3>
|   | `-TextComment 0x555f55f07fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f08000 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x555f55f08060 <col:10, col:29>
|   |   `-TextComment 0x555f55f08030 <col:10, col:29> Text=" Submit a work item."
|   |-ParagraphComment 0x555f55f08270 <line:2894:3, line:2899:15>
|   | |-TextComment 0x555f55f08080 <line:2894:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x555f55f080d0 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x555f55f080f0 <col:42, col:70> Text=" to be processed by workqueue"
|   | |-TextComment 0x555f55f08110 <line:2895:3> Text=" "
|   | |-InlineCommandComment 0x555f55f08160 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x555f55f08180 <col:14, col:74> Text=" If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x555f55f081a0 <line:2896:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x555f55f081c0 <line:2897:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x555f55f081e0 <line:2898:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x555f55f08200 <line:2899:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x555f55f082c0 <line:2901:3>
|   | `-TextComment 0x555f55f08290 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f082e0 <col:4, line:2903:20> Name="warning"
|   | `-ParagraphComment 0x555f55f08360 <line:2902:3, line:2903:20>
|   |   |-TextComment 0x555f55f08310 <line:2902:3, col:73> Text=" A submitted work item must not be modified until it has been processed"
|   |   `-TextComment 0x555f55f08330 <line:2903:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x555f55f083b0 <line:2905:3>
|   | `-TextComment 0x555f55f08380 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f083d0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f08430 <col:9, col:31>
|   |   `-TextComment 0x555f55f08400 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f08480 <line:2907:3>
|   | `-TextComment 0x555f55f08450 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f084a0 <col:4, line:2908:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x555f55f08550 <line:2907:17, line:2908:3>
|   |   |-TextComment 0x555f55f08500 <line:2907:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x555f55f08520 <line:2908:3> Text=" "
|   |-ParamCommandComment 0x555f55f08570 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x555f55f08600 <col:15, col:36>
|   |   `-TextComment 0x555f55f085d0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x555f55f08650 <line:2910:3>
|   | `-TextComment 0x555f55f08620 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f08670 <col:4, line:2911:3> Name="return"
|   | `-ParagraphComment 0x555f55f086f0 <line:2910:11, line:2911:3>
|   |   |-TextComment 0x555f55f086a0 <line:2910:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f086c0 <line:2911:3> Text=" "
|   |-VerbatimLineComment 0x555f55f08710 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x555f55f08790 <line:2912:1>
|     `-TextComment 0x555f55f08750 <col:1> Text=" "
|-FunctionDecl 0x555f55d58518 <line:2942:1, line:2959:1> line:2942:19 k_work_submit_to_user_queue 'int (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x555f55d58378 <col:47, col:64> col:64 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x555f55d58400 <line:2943:12, col:27> col:27 used work 'struct k_work *'
| |-CompoundStmt 0x555f55d58d38 <line:2944:1, line:2959:1>
| | |-DeclStmt 0x555f55d58680 <line:2945:2, col:18>
| | | `-VarDecl 0x555f55d585e0 <col:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> /vagrant/ext/zephyros/zephyr/include/kernel.h:2945:6 used ret 'int' cinit
| | |   `-UnaryOperator 0x555f55d58660 <col:12, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> 'int' prefix '-'
| | |     `-IntegerLiteral 0x555f55d58640 <col:15> 'int' 16
| | |-IfStmt 0x555f55d58c80 </vagrant/ext/zephyros/zephyr/include/kernel.h:2947:2, line:2956:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x555f55d587c8 <line:2947:6, col:64> 'int' prefix '!'
| | | | `-CallExpr 0x555f55d58778 <col:7, col:64> 'bool'
| | | |   |-ImplicitCastExpr 0x555f55d58760 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x555f55d58698 <col:7> 'bool (atomic_t *, int)' Function 0x555f55d33c60 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| | | |   |-ImplicitCastExpr 0x555f55d587b0 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| | | |   | `-MemberExpr 0x555f55d58700 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x555f55d567a8
| | | |   |   `-ImplicitCastExpr 0x555f55d586e8 <col:31> 'struct k_work *' <LValueToRValue>
| | | |   |     `-DeclRefExpr 0x555f55d586c0 <col:31> 'struct k_work *' lvalue ParmVar 0x555f55d58400 'work' 'struct k_work *'
| | | |   `-DeclRefExpr 0x555f55d58738 <col:44> 'int' EnumConstant 0x555f55d561c0 'K_WORK_STATE_PENDING' 'int'
| | | |-CompoundStmt 0x555f55d58c60 <col:67, line:2956:2>
| | | | |-BinaryOperator 0x555f55d589d8 <line:2948:3, col:50> 'int' '='
| | | | | |-DeclRefExpr 0x555f55d587e8 <col:3> 'int' lvalue Var 0x555f55d585e0 'ret' 'int'
| | | | | `-CallExpr 0x555f55d58970 <col:9, col:50> 's32_t':'int'
| | | | |   |-ImplicitCastExpr 0x555f55d58958 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | |   | `-DeclRefExpr 0x555f55d58810 <col:9> 's32_t (struct k_queue *, void *)' Function 0x555f55e52490 'k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
| | | | |   |-UnaryOperator 0x555f55d588b0 <col:30, col:39> 'struct k_queue *' prefix '&'
| | | | |   | `-MemberExpr 0x555f55d58878 <col:31, col:39> 'struct k_queue':'struct k_queue' lvalue ->queue 0x555f55d56050
| | | | |   |   `-ImplicitCastExpr 0x555f55d58860 <col:31> 'struct k_work_q *' <LValueToRValue>
| | | | |   |     `-DeclRefExpr 0x555f55d58838 <col:31> 'struct k_work_q *' lvalue ParmVar 0x555f55d58378 'work_q' 'struct k_work_q *'
| | | | |   `-ImplicitCastExpr 0x555f55d589c0 <col:46> 'void *' <BitCast>
| | | | |     `-ImplicitCastExpr 0x555f55d589a8 <col:46> 'struct k_work *' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x555f55d588d0 <col:46> 'struct k_work *' lvalue ParmVar 0x555f55d58400 'work' 'struct k_work *'
| | | | `-IfStmt 0x555f55d58c28 <line:2953:3, line:2955:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-BinaryOperator 0x555f55d58a60 <line:2953:7, col:14> 'int' '!='
| | | |   | |-ImplicitCastExpr 0x555f55d58a48 <col:7> 'int' <LValueToRValue>
| | | |   | | `-DeclRefExpr 0x555f55d58a00 <col:7> 'int' lvalue Var 0x555f55d585e0 'ret' 'int'
| | | |   | `-IntegerLiteral 0x555f55d58a28 <col:14> 'int' 0
| | | |   |-CompoundStmt 0x555f55d58c10 <col:17, line:2955:3>
| | | |   | `-CallExpr 0x555f55d58bc0 <line:2954:4, col:54> 'void'
| | | |   |   |-ImplicitCastExpr 0x555f55d58ba8 <col:4> 'void (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   |   | `-DeclRefExpr 0x555f55d58a88 <col:4> 'void (atomic_t *, int)' Function 0x555f55d34760 'atomic_clear_bit' 'void (atomic_t *, int)'
| | | |   |   |-ImplicitCastExpr 0x555f55d58bf8 <col:21, col:27> 'atomic_t *' <ArrayToPointerDecay>
| | | |   |   | `-MemberExpr 0x555f55d58af0 <col:21, col:27> 'atomic_t [1]' lvalue ->flags 0x555f55d567a8
| | | |   |   |   `-ImplicitCastExpr 0x555f55d58ad8 <col:21> 'struct k_work *' <LValueToRValue>
| | | |   |   |     `-DeclRefExpr 0x555f55d58ab0 <col:21> 'struct k_work *' lvalue ParmVar 0x555f55d58400 'work' 'struct k_work *'
| | | |   |   `-DeclRefExpr 0x555f55d58b28 <col:34> 'int' EnumConstant 0x555f55d561c0 'K_WORK_STATE_PENDING' 'int'
| | | |   `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x555f55d58cf8 <line:2958:2, col:9>
| |   `-ImplicitCastExpr 0x555f55d58ce0 <col:9> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x555f55d58cb8 <col:9> 'int' lvalue Var 0x555f55d585e0 'ret' 'int'
| `-FullComment 0x555f55f08fe0 <line:2922:3, line:2941:1>
|   |-ParagraphComment 0x555f55f088c0 <line:2922:3>
|   | `-TextComment 0x555f55f08890 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f088e0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x555f55f08940 <col:10, col:53>
|   |   `-TextComment 0x555f55f08910 <col:10, col:53> Text=" Submit a work item to a user mode workqueue"
|   |-ParagraphComment 0x555f55f08a30 <line:2924:3, line:2928:71>
|   | |-TextComment 0x555f55f08960 <line:2924:3, col:73> Text=" Submits a work item to a workqueue that runs in user mode. A temporary"
|   | |-TextComment 0x555f55f08980 <line:2925:3, col:75> Text=" memory allocation is made from the caller's resource pool which is freed"
|   | |-TextComment 0x555f55f089a0 <line:2926:3, col:65> Text=" once the worker thread consumes the k_work item. The workqueue"
|   | |-TextComment 0x555f55f089c0 <line:2927:3, col:80> Text=" thread must have memory access to the k_work item being submitted. The caller"
|   | `-TextComment 0x555f55f089e0 <line:2928:3, col:71> Text=" must have permission granted on the work_q parameter's queue object."
|   |-ParagraphComment 0x555f55f08a80 <line:2930:3, col:61>
|   | `-TextComment 0x555f55f08a50 <col:3, col:61> Text=" Otherwise this works the same as k_work_submit_to_queue()."
|   |-ParagraphComment 0x555f55f08ad0 <line:2932:3>
|   | `-TextComment 0x555f55f08aa0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f08af0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f08b50 <col:9, col:31>
|   |   `-TextComment 0x555f55f08b20 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f08ba0 <line:2934:3>
|   | `-TextComment 0x555f55f08b70 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f08bc0 <col:4, line:2935:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x555f55f08c70 <line:2934:17, line:2935:3>
|   |   |-TextComment 0x555f55f08c20 <line:2934:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x555f55f08c40 <line:2935:3> Text=" "
|   |-ParamCommandComment 0x555f55f08c90 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x555f55f08d20 <col:15, col:36>
|   |   `-TextComment 0x555f55f08cf0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x555f55f08ed0 <line:2937:3, line:2940:3>
|   | |-TextComment 0x555f55f08d40 <line:2937:3> Text=" "
|   | |-InlineCommandComment 0x555f55f08d60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f08d80 <col:11, col:64> Text=" -EBUSY if the work item was already in some workqueue"
|   | |-TextComment 0x555f55f08da0 <line:2938:3> Text=" "
|   | |-InlineCommandComment 0x555f55f08dc0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f08de0 <col:11, col:67> Text=" -ENOMEM if no memory for thread resource pool allocation"
|   | |-TextComment 0x555f55f08e00 <line:2939:3> Text=" "
|   | |-InlineCommandComment 0x555f55f08e20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f08e40 <col:11, col:20> Text=" 0 Success"
|   | `-TextComment 0x555f55f08e60 <line:2940:3> Text=" "
|   |-VerbatimLineComment 0x555f55f08ef0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x555f55f08f60 <line:2941:1>
|     `-TextComment 0x555f55f08f30 <col:1> Text=" "
|-FunctionDecl 0x555f55d58ed0 <line:2974:1, line:2977:1> line:2974:20 k_work_pending 'bool (struct k_work *)' static inline
| |-ParmVarDecl 0x555f55d58d88 <col:35, col:50> col:50 used work 'struct k_work *'
| |-CompoundStmt 0x555f55d59158 <line:2975:1, line:2977:1>
| | `-ReturnStmt 0x555f55d59118 <line:2976:2, col:58>
| |   `-CallExpr 0x555f55d590b0 <col:9, col:58> 'bool'
| |     |-ImplicitCastExpr 0x555f55d59098 <col:9> 'bool (*)(const atomic_t *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55d58f78 <col:9> 'bool (const atomic_t *, int)' Function 0x555f55d31c30 'atomic_test_bit' 'bool (const atomic_t *, int)'
| |     |-ImplicitCastExpr 0x555f55d59100 <col:25, col:31> 'const atomic_t *' <BitCast>
| |     | `-ImplicitCastExpr 0x555f55d590e8 <col:25, col:31> 'atomic_t *' <ArrayToPointerDecay>
| |     |   `-MemberExpr 0x555f55d58fe0 <col:25, col:31> 'atomic_t [1]' lvalue ->flags 0x555f55d567a8
| |     |     `-ImplicitCastExpr 0x555f55d58fc8 <col:25> 'struct k_work *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x555f55d58fa0 <col:25> 'struct k_work *' lvalue ParmVar 0x555f55d58d88 'work' 'struct k_work *'
| |     `-DeclRefExpr 0x555f55d59018 <col:38> 'int' EnumConstant 0x555f55d561c0 'K_WORK_STATE_PENDING' 'int'
| `-FullComment 0x555f55f095c0 <line:2962:3, line:2973:1>
|   |-ParagraphComment 0x555f55f09080 <line:2962:3>
|   | `-TextComment 0x555f55f09050 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f090a0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x555f55f09100 <col:10, col:42>
|   |   `-TextComment 0x555f55f090d0 <col:10, col:42> Text=" Check if a work item is pending."
|   |-ParagraphComment 0x555f55f091f0 <line:2964:3, line:2965:9>
|   | |-TextComment 0x555f55f09120 <line:2964:3, col:39> Text=" This routine indicates if work item "
|   | |-InlineCommandComment 0x555f55f09170 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x555f55f09190 <col:47, col:74> Text=" is pending in a workqueue's"
|   | `-TextComment 0x555f55f091b0 <line:2965:3, col:9> Text=" queue."
|   |-ParagraphComment 0x555f55f09240 <line:2967:3>
|   | `-TextComment 0x555f55f09210 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f09260 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f092c0 <col:9, col:31>
|   |   `-TextComment 0x555f55f09290 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f09310 <line:2969:3>
|   | `-TextComment 0x555f55f092e0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f09330 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x555f55f093c0 <col:15, col:36>
|   |   `-TextComment 0x555f55f09390 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x555f55f09410 <line:2971:3>
|   | `-TextComment 0x555f55f093e0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f09430 <col:4, line:2972:3> Name="return"
|   | `-ParagraphComment 0x555f55f094b0 <line:2971:11, line:2972:3>
|   |   |-TextComment 0x555f55f09460 <line:2971:11, col:71> Text=" true if work item is pending, or false if it is not pending."
|   |   `-TextComment 0x555f55f09480 <line:2972:3> Text=" "
|   |-VerbatimLineComment 0x555f55f094d0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x555f55f09540 <line:2973:1>
|     `-TextComment 0x555f55f09510 <col:1> Text=" "
|-FunctionDecl 0x555f55d59430 <line:2996:1, line:2998:34> line:2996:13 k_work_q_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x555f55d59198 <col:28, col:45> col:45 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x555f55d59208 <line:2997:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x555f55d59278 <line:2998:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55d592f0 <col:26, col:30> col:30 prio 'int'
| `-FullComment 0x555f55f09dc0 <line:2980:3, line:2995:1>
|   |-ParagraphComment 0x555f55f09660 <line:2980:3>
|   | `-TextComment 0x555f55f09630 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f09680 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x555f55f096e0 <col:10, col:28>
|   |   `-TextComment 0x555f55f096b0 <col:10, col:28> Text=" Start a workqueue."
|   |-ParagraphComment 0x555f55f097d0 <line:2982:3, line:2983:41>
|   | |-TextComment 0x555f55f09700 <line:2982:3, col:33> Text=" This routine starts workqueue "
|   | |-InlineCommandComment 0x555f55f09750 <col:34, col:35> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x555f55f09770 <col:44, col:73> Text=" The workqueue spawns its work"
|   | `-TextComment 0x555f55f09790 <line:2983:3, col:41> Text=" processing thread, which runs forever."
|   |-ParagraphComment 0x555f55f09820 <line:2985:3>
|   | `-TextComment 0x555f55f097f0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f09840 <col:4, line:2986:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x555f55f098f0 <line:2985:17, line:2986:3>
|   |   |-TextComment 0x555f55f098a0 <line:2985:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x555f55f098c0 <line:2986:3> Text=" "
|   |-ParamCommandComment 0x555f55f09910 <col:4, line:2988:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x555f55f099f0 <line:2986:16, line:2988:3>
|   |   |-TextComment 0x555f55f09970 <line:2986:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x555f55f09990 <line:2987:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x555f55f099b0 <line:2988:3> Text=" "
|   |-ParamCommandComment 0x555f55f09a10 <col:4, line:2991:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x555f55f09b10 <line:2988:21, line:2991:3>
|   |   |-TextComment 0x555f55f09a70 <line:2988:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x555f55f09a90 <line:2989:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x555f55f09ab0 <line:2990:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x555f55f09ad0 <line:2991:3> Text=" "
|   |-ParamCommandComment 0x555f55f09b30 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x555f55f09bc0 <col:15, col:51>
|   |   `-TextComment 0x555f55f09b90 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x555f55f09c10 <line:2993:3>
|   | `-TextComment 0x555f55f09be0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f09c30 <col:4, line:2994:3> Name="return"
|   | `-ParagraphComment 0x555f55f09cb0 <line:2993:11, line:2994:3>
|   |   |-TextComment 0x555f55f09c60 <line:2993:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f09c80 <line:2994:3> Text=" "
|   |-VerbatimLineComment 0x555f55f09cd0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x555f55f09d40 <line:2995:1>
|     `-TextComment 0x555f55f09d10 <col:1> Text=" "
|-FunctionDecl 0x555f55d59738 <line:3020:1, line:3022:32> line:3020:13 k_work_q_user_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x555f55d59540 <col:33, col:50> col:50 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x555f55d595b0 <line:3021:5, col:23> col:23 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x555f55d59620 <line:3022:5, col:12> col:12 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55d59698 <col:24, col:28> col:28 prio 'int'
| `-FullComment 0x555f55f0a5c0 <line:3001:3, line:3019:1>
|   |-ParagraphComment 0x555f55f09e60 <line:3001:3>
|   | `-TextComment 0x555f55f09e30 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f09e80 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x555f55f09ee0 <col:10, col:40>
|   |   `-TextComment 0x555f55f09eb0 <col:10, col:40> Text=" Start a workqueue in user mode"
|   |-ParagraphComment 0x555f55f09fd0 <line:3003:3, line:3007:21>
|   | |-TextComment 0x555f55f09f00 <line:3003:3, col:77> Text=" This works identically to k_work_q_start() except it is callable from user"
|   | |-TextComment 0x555f55f09f20 <line:3004:3, col:61> Text=" mode, and the worker thread created will run in user mode."
|   | |-TextComment 0x555f55f09f40 <line:3005:3, col:74> Text=" The caller must have permissions granted on both the work_q parameter's"
|   | |-TextComment 0x555f55f09f60 <line:3006:3, col:75> Text=" thread and queue objects, and the same restrictions on priority apply as"
|   | `-TextComment 0x555f55f09f80 <line:3007:3, col:21> Text=" k_thread_create()."
|   |-ParagraphComment 0x555f55f0a020 <line:3009:3>
|   | `-TextComment 0x555f55f09ff0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f0a040 <col:4, line:3010:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x555f55f0a0f0 <line:3009:17, line:3010:3>
|   |   |-TextComment 0x555f55f0a0a0 <line:3009:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x555f55f0a0c0 <line:3010:3> Text=" "
|   |-ParamCommandComment 0x555f55f0a110 <col:4, line:3012:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x555f55f0a1f0 <line:3010:16, line:3012:3>
|   |   |-TextComment 0x555f55f0a170 <line:3010:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x555f55f0a190 <line:3011:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x555f55f0a1b0 <line:3012:3> Text=" "
|   |-ParamCommandComment 0x555f55f0a210 <col:4, line:3015:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x555f55f0a310 <line:3012:21, line:3015:3>
|   |   |-TextComment 0x555f55f0a270 <line:3012:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x555f55f0a290 <line:3013:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x555f55f0a2b0 <line:3014:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x555f55f0a2d0 <line:3015:3> Text=" "
|   |-ParamCommandComment 0x555f55f0a330 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x555f55f0a3c0 <col:15, col:51>
|   |   `-TextComment 0x555f55f0a390 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x555f55f0a410 <line:3017:3>
|   | `-TextComment 0x555f55f0a3e0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0a430 <col:4, line:3018:3> Name="return"
|   | `-ParagraphComment 0x555f55f0a4b0 <line:3017:11, line:3018:3>
|   |   |-TextComment 0x555f55f0a460 <line:3017:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f0a480 <line:3018:3> Text=" "
|   |-VerbatimLineComment 0x555f55f0a4d0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x555f55f0a540 <line:3019:1>
|     `-TextComment 0x555f55f0a510 <col:1> Text=" "
|-FunctionDecl 0x555f55d59a60 <line:3036:1, line:3037:29> line:3036:13 k_delayed_work_init 'void (struct k_delayed_work *, k_work_handler_t)' extern
| |-ParmVarDecl 0x555f55d598e0 <col:33, col:56> col:56 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x555f55d59950 <line:3037:5, col:22> col:22 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x555f55f0ab30 <line:3025:3, line:3035:1>
|   |-ParagraphComment 0x555f55f0a660 <line:3025:3>
|   | `-TextComment 0x555f55f0a630 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0a680 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x555f55f0a6e0 <col:10, col:41>
|   |   `-TextComment 0x555f55f0a6b0 <col:10, col:41> Text=" Initialize a delayed work item."
|   |-ParagraphComment 0x555f55f0a750 <line:3027:3, line:3028:17>
|   | |-TextComment 0x555f55f0a700 <line:3027:3, col:67> Text=" This routine initializes a workqueue delayed work item, prior to"
|   | `-TextComment 0x555f55f0a720 <line:3028:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x555f55f0a7c0 <line:3030:3>
|   | `-TextComment 0x555f55f0a790 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f0a7e0 <col:4, line:3031:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x555f55f0a890 <line:3030:15, line:3031:3>
|   |   |-TextComment 0x555f55f0a840 <line:3030:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x555f55f0a860 <line:3031:3> Text=" "
|   |-ParamCommandComment 0x555f55f0a8b0 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x555f55f0a940 <col:18, col:70>
|   |   `-TextComment 0x555f55f0a910 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x555f55f0a990 <line:3033:3>
|   | `-TextComment 0x555f55f0a960 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0a9b0 <col:4, line:3034:3> Name="return"
|   | `-ParagraphComment 0x555f55f0aa30 <line:3033:11, line:3034:3>
|   |   |-TextComment 0x555f55f0a9e0 <line:3033:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f0aa00 <line:3034:3> Text=" "
|   |-VerbatimLineComment 0x555f55f0aa50 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x555f55f0aac0 <line:3035:1>
|     `-TextComment 0x555f55f0aa90 <col:1> Text=" "
|-FunctionDecl 0x555f55d59d98 <line:3071:1, line:3073:19> line:3071:12 used k_delayed_work_submit_to_queue 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' extern
| |-ParmVarDecl 0x555f55d59b60 <col:43, col:60> col:60 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x555f55d59be8 <line:3072:8, col:31> col:31 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x555f55d59c58 <line:3073:8, col:14> col:14 delay 's32_t':'int'
| `-FullComment 0x555f55f0b730 <line:3040:3, line:3070:1>
|   |-ParagraphComment 0x555f55f0abd0 <line:3040:3>
|   | `-TextComment 0x555f55f0aba0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0abf0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x555f55f0ac50 <col:10, col:37>
|   |   `-TextComment 0x555f55f0ac20 <col:10, col:37> Text=" Submit a delayed work item."
|   |-ParagraphComment 0x555f55f0aec0 <line:3042:3, line:3046:37>
|   | |-TextComment 0x555f55f0ac70 <line:3042:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x555f55f0acc0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x555f55f0ace0 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x555f55f0ad00 <line:3043:3> Text=" "
|   | |-InlineCommandComment 0x555f55f0ad50 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x555f55f0ad70 <col:13, col:30> Text=" after a delay of "
|   | |-InlineCommandComment 0x555f55f0adc0 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x555f55f0ade0 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x555f55f0ae00 <line:3044:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x555f55f0ae20 <line:3045:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x555f55f0ae40 <line:3046:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x555f55f0afd0 <line:3048:3, line:3053:28>
|   | |-TextComment 0x555f55f0aee0 <line:3048:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x555f55f0af00 <line:3049:3, col:65> Text=" counting down cancels the existing submission and restarts the"
|   | |-TextComment 0x555f55f0af20 <line:3050:3, col:61> Text=" countdown using the new delay.  Note that this behavior is"
|   | |-TextComment 0x555f55f0af40 <line:3051:3, col:62> Text=" inherently subject to race conditions with the pre-existing"
|   | |-TextComment 0x555f55f0af60 <line:3052:3, col:69> Text=" timeouts and work queue, so care must be taken to synchronize such"
|   | `-TextComment 0x555f55f0af80 <line:3053:3, col:28> Text=" resubmissions externally."
|   |-ParagraphComment 0x555f55f0b020 <line:3055:3>
|   | `-TextComment 0x555f55f0aff0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0b040 <col:4, line:3057:20> Name="warning"
|   | `-ParagraphComment 0x555f55f0b0c0 <line:3056:3, line:3057:20>
|   |   |-TextComment 0x555f55f0b070 <line:3056:3, col:71> Text=" A delayed work item must not be modified until it has been processed"
|   |   `-TextComment 0x555f55f0b090 <line:3057:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x555f55f0b110 <line:3059:3>
|   | `-TextComment 0x555f55f0b0e0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0b130 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f0b190 <col:9, col:31>
|   |   `-TextComment 0x555f55f0b160 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f0b1e0 <line:3061:3>
|   | `-TextComment 0x555f55f0b1b0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f0b200 <col:4, line:3062:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x555f55f0b2b0 <line:3061:17, line:3062:3>
|   |   |-TextComment 0x555f55f0b260 <line:3061:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x555f55f0b280 <line:3062:3> Text=" "
|   |-ParamCommandComment 0x555f55f0b2d0 <col:4, line:3063:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x555f55f0b380 <line:3062:15, line:3063:3>
|   |   |-TextComment 0x555f55f0b330 <line:3062:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x555f55f0b350 <line:3063:3> Text=" "
|   |-ParamCommandComment 0x555f55f0b3a0 <col:4, line:3064:18> [in] implicitly Param="delay" ParamIndex=2
|   | `-ParagraphComment 0x555f55f0b450 <line:3063:16, line:3064:18>
|   |   |-TextComment 0x555f55f0b400 <line:3063:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x555f55f0b420 <line:3064:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x555f55f0b600 <line:3066:3, line:3069:3>
|   | |-TextComment 0x555f55f0b470 <line:3066:3> Text=" "
|   | |-InlineCommandComment 0x555f55f0b490 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f0b4b0 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x555f55f0b4d0 <line:3067:3> Text=" "
|   | |-InlineCommandComment 0x555f55f0b4f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f0b510 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x555f55f0b530 <line:3068:3> Text=" "
|   | |-InlineCommandComment 0x555f55f0b550 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f0b570 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x555f55f0b590 <line:3069:3> Text=" "
|   |-VerbatimLineComment 0x555f55f0b620 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x555f55f0b690 <line:3070:1>
|     `-TextComment 0x555f55f0b660 <col:1> Text=" "
|-FunctionDecl 0x555f55e6ac88 <line:3094:1, col:61> col:12 k_delayed_work_cancel 'int (struct k_delayed_work *)' extern
| |-ParmVarDecl 0x555f55e6ab80 <col:34, col:57> col:57 work 'struct k_delayed_work *'
| `-FullComment 0x555f55f0be80 <line:3076:3, line:3093:1>
|   |-ParagraphComment 0x555f55f0b7d0 <line:3076:3>
|   | `-TextComment 0x555f55f0b7a0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0b7f0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x555f55f0b850 <col:10, col:37>
|   |   `-TextComment 0x555f55f0b820 <col:10, col:37> Text=" Cancel a delayed work item."
|   |-ParagraphComment 0x555f55f0b940 <line:3078:3, line:3080:12>
|   | |-TextComment 0x555f55f0b870 <line:3078:3, col:60> Text=" This routine cancels the submission of delayed work item "
|   | |-InlineCommandComment 0x555f55f0b8c0 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x555f55f0b8e0 <line:3079:3, col:72> Text=" A delayed work item can only be canceled while its countdown is still"
|   | `-TextComment 0x555f55f0b900 <line:3080:3, col:12> Text=" underway."
|   |-ParagraphComment 0x555f55f0b990 <line:3082:3>
|   | `-TextComment 0x555f55f0b960 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0b9b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f0ba10 <col:9, col:31>
|   |   `-TextComment 0x555f55f0b9e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f0ba60 <line:3084:3>
|   | `-TextComment 0x555f55f0ba30 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0ba80 <col:4, line:3086:55> Name="note"
|   | `-ParagraphComment 0x555f55f0bb30 <line:3084:9, line:3086:55>
|   |   |-TextComment 0x555f55f0bab0 <line:3084:9, col:69> Text=" The result of calling this on a k_delayed_work item that has"
|   |   |-TextComment 0x555f55f0bad0 <line:3085:3, col:52> Text=" not been submitted (i.e. before the return of the"
|   |   `-TextComment 0x555f55f0baf0 <line:3086:3, col:55> Text=" k_delayed_work_submit_to_queue() call) is undefined."
|   |-ParagraphComment 0x555f55f0bb80 <line:3088:3>
|   | `-TextComment 0x555f55f0bb50 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f0bba0 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x555f55f0bc30 <col:15, col:44>
|   |   `-TextComment 0x555f55f0bc00 <col:15, col:44> Text=" Address of delayed work item."
|   |-ParagraphComment 0x555f55f0bd70 <line:3090:3, line:3092:3>
|   | |-TextComment 0x555f55f0bc50 <line:3090:3> Text=" "
|   | |-InlineCommandComment 0x555f55f0bc70 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f0bc90 <col:11, col:42> Text=" 0 Work item countdown canceled."
|   | |-TextComment 0x555f55f0bcb0 <line:3091:3> Text=" "
|   | |-InlineCommandComment 0x555f55f0bcd0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f0bcf0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | `-TextComment 0x555f55f0bd10 <line:3092:3> Text=" "
|   |-VerbatimLineComment 0x555f55f0bd90 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x555f55f0be00 <line:3093:1>
|     `-TextComment 0x555f55f0bdd0 <col:1> Text=" "
|-FunctionDecl 0x555f55e6ae08 <line:3118:1, line:3121:1> line:3118:20 k_work_submit 'void (struct k_work *)' static inline
| |-ParmVarDecl 0x555f55e6ad80 <col:34, col:49> col:49 used work 'struct k_work *'
| |-CompoundStmt 0x555f55e6b038 <line:3119:1, line:3121:1>
| | `-CallExpr 0x555f55e6afc0 <line:3120:2, col:44> 'void'
| |   |-ImplicitCastExpr 0x555f55e6afa8 <col:2> 'void (*)(struct k_work_q *, struct k_work *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x555f55e6aeb0 <col:2> 'void (struct k_work_q *, struct k_work *)' Function 0x555f55d57ef0 'k_work_submit_to_queue' 'void (struct k_work_q *, struct k_work *)'
| |   |-UnaryOperator 0x555f55e6af00 <col:25, col:26> 'struct k_work_q *' prefix '&'
| |   | `-DeclRefExpr 0x555f55e6aed8 <col:26> 'struct k_work_q':'struct k_work_q' lvalue Var 0x555f55d56e58 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |   `-ImplicitCastExpr 0x555f55e6aff8 <col:40> 'struct k_work *' <LValueToRValue>
| |     `-DeclRefExpr 0x555f55e6af20 <col:40> 'struct k_work *' lvalue ParmVar 0x555f55e6ad80 'work' 'struct k_work *'
| `-FullComment 0x555f55f0c630 <line:3097:3, line:3117:1>
|   |-ParagraphComment 0x555f55f0bf20 <line:3097:3>
|   | `-TextComment 0x555f55f0bef0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0bf40 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x555f55f0bfa0 <col:10, col:53>
|   |   `-TextComment 0x555f55f0bf70 <col:10, col:53> Text=" Submit a work item to the system workqueue."
|   |-ParagraphComment 0x555f55f0c130 <line:3099:3, line:3104:15>
|   | |-TextComment 0x555f55f0bfc0 <line:3099:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x555f55f0c010 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x555f55f0c030 <col:42, col:71> Text=" to be processed by the system"
|   | |-TextComment 0x555f55f0c050 <line:3100:3, col:74> Text=" workqueue. If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x555f55f0c070 <line:3101:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x555f55f0c090 <line:3102:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x555f55f0c0b0 <line:3103:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x555f55f0c0d0 <line:3104:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x555f55f0c180 <line:3106:3>
|   | `-TextComment 0x555f55f0c150 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0c1a0 <col:4, line:3109:50> Name="warning"
|   | `-ParagraphComment 0x555f55f0c250 <line:3107:3, line:3109:50>
|   |   |-TextComment 0x555f55f0c1d0 <line:3107:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x555f55f0c1f0 <line:3108:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x555f55f0c210 <line:3109:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x555f55f0c2a0 <line:3111:3>
|   | `-TextComment 0x555f55f0c270 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0c2c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f0c320 <col:9, col:31>
|   |   `-TextComment 0x555f55f0c2f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f0c370 <line:3113:3>
|   | `-TextComment 0x555f55f0c340 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f0c390 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x555f55f0c420 <col:15, col:36>
|   |   `-TextComment 0x555f55f0c3f0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x555f55f0c470 <line:3115:3>
|   | `-TextComment 0x555f55f0c440 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0c490 <col:4, line:3116:3> Name="return"
|   | `-ParagraphComment 0x555f55f0c510 <line:3115:11, line:3116:3>
|   |   |-TextComment 0x555f55f0c4c0 <line:3115:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f0c4e0 <line:3116:3> Text=" "
|   |-VerbatimLineComment 0x555f55f0c530 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x555f55f0c5a0 <line:3117:1>
|     `-TextComment 0x555f55f0c570 <col:1> Text=" "
|-FunctionDecl 0x555f55e6b208 <line:3156:1, line:3160:1> line:3156:19 k_delayed_work_submit 'int (struct k_delayed_work *, s32_t)' static inline
| |-ParmVarDecl 0x555f55e6b078 <col:41, col:64> col:64 used work 'struct k_delayed_work *'
| |-ParmVarDecl 0x555f55e6b0e8 <line:3157:6, col:12> col:12 used delay 's32_t':'int'
| |-CompoundStmt 0x555f55e6b4a8 <line:3158:1, line:3160:1>
| | `-ReturnStmt 0x555f55e6b460 <line:3159:2, col:66>
| |   `-CallExpr 0x555f55e6b3f0 <col:9, col:66> 'int'
| |     |-ImplicitCastExpr 0x555f55e6b3d8 <col:9> 'int (*)(struct k_work_q *, struct k_delayed_work *, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55e6b2b8 <col:9> 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' Function 0x555f55d59d98 'k_delayed_work_submit_to_queue' 'int (struct k_work_q *, struct k_delayed_work *, s32_t)'
| |     |-UnaryOperator 0x555f55e6b308 <col:40, col:41> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x555f55e6b2e0 <col:41> 'struct k_work_q':'struct k_work_q' lvalue Var 0x555f55d56e58 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x555f55e6b430 <col:55> 'struct k_delayed_work *' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e6b328 <col:55> 'struct k_delayed_work *' lvalue ParmVar 0x555f55e6b078 'work' 'struct k_delayed_work *'
| |     `-ImplicitCastExpr 0x555f55e6b448 <col:61> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x555f55e6b350 <col:61> 's32_t':'int' lvalue ParmVar 0x555f55e6b0e8 'delay' 's32_t':'int'
| `-FullComment 0x555f55f0d140 <line:3124:3, line:3155:1>
|   |-ParagraphComment 0x555f55f0c6d0 <line:3124:3>
|   | `-TextComment 0x555f55f0c6a0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0c6f0 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x555f55f0c750 <col:10, col:61>
|   |   `-TextComment 0x555f55f0c720 <col:10, col:61> Text=" Submit a delayed work item to the system workqueue."
|   |-ParagraphComment 0x555f55f0c950 <line:3126:3, line:3130:37>
|   | |-TextComment 0x555f55f0c770 <line:3126:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x555f55f0c7d0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x555f55f0c7f0 <col:44, col:73> Text=" to be processed by the system"
|   | |-TextComment 0x555f55f0c810 <line:3127:3, col:30> Text=" workqueue after a delay of "
|   | |-InlineCommandComment 0x555f55f0c860 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x555f55f0c880 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x555f55f0c8a0 <line:3128:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x555f55f0c8c0 <line:3129:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x555f55f0c8e0 <line:3130:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x555f55f0ca90 <line:3132:3, line:3138:72>
|   | |-TextComment 0x555f55f0c970 <line:3132:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x555f55f0c990 <line:3133:3, col:75> Text=" counting down cancels the existing submission and restarts the countdown"
|   | |-TextComment 0x555f55f0c9b0 <line:3134:3, col:68> Text=" using the new delay. If the work item is currently pending on the"
|   | |-TextComment 0x555f55f0c9d0 <line:3135:3, col:74> Text=" workqueue's queue because the countdown has completed it is too late to"
|   | |-TextComment 0x555f55f0c9f0 <line:3136:3, col:77> Text=" resubmit the item, and resubmission fails without impacting the work item."
|   | |-TextComment 0x555f55f0ca10 <line:3137:3, col:80> Text=" If the work item has already been processed, or is currently being processed,"
|   | `-TextComment 0x555f55f0ca30 <line:3138:3, col:72> Text=" its work is considered complete and the work item can be resubmitted."
|   |-ParagraphComment 0x555f55f0cae0 <line:3140:3>
|   | `-TextComment 0x555f55f0cab0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0cb00 <col:4, line:3143:50> Name="warning"
|   | `-ParagraphComment 0x555f55f0cbb0 <line:3141:3, line:3143:50>
|   |   |-TextComment 0x555f55f0cb30 <line:3141:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x555f55f0cb50 <line:3142:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x555f55f0cb70 <line:3143:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x555f55f0cc00 <line:3145:3>
|   | `-TextComment 0x555f55f0cbd0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0cc20 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f0cc80 <col:9, col:31>
|   |   `-TextComment 0x555f55f0cc50 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f0ccd0 <line:3147:3>
|   | `-TextComment 0x555f55f0cca0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f0ccf0 <col:4, line:3148:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x555f55f0cda0 <line:3147:15, line:3148:3>
|   |   |-TextComment 0x555f55f0cd50 <line:3147:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x555f55f0cd70 <line:3148:3> Text=" "
|   |-ParamCommandComment 0x555f55f0cdc0 <col:4, line:3149:18> [in] implicitly Param="delay" ParamIndex=1
|   | `-ParagraphComment 0x555f55f0ce70 <line:3148:16, line:3149:18>
|   |   |-TextComment 0x555f55f0ce20 <line:3148:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x555f55f0ce40 <line:3149:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x555f55f0d020 <line:3151:3, line:3154:3>
|   | |-TextComment 0x555f55f0ce90 <line:3151:3> Text=" "
|   | |-InlineCommandComment 0x555f55f0ceb0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f0ced0 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x555f55f0cef0 <line:3152:3> Text=" "
|   | |-InlineCommandComment 0x555f55f0cf10 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f0cf30 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x555f55f0cf50 <line:3153:3> Text=" "
|   | |-InlineCommandComment 0x555f55f0cf70 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f0cf90 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x555f55f0cfb0 <line:3154:3> Text=" "
|   |-VerbatimLineComment 0x555f55f0d040 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x555f55f0d0b0 <line:3155:1>
|     `-TextComment 0x555f55f0d080 <col:1> Text=" "
|-FunctionDecl 0x555f55e6b5b0 <line:3174:1, line:3177:1> line:3174:21 k_delayed_work_remaining_get 's32_t (struct k_delayed_work *)' static inline
| |-ParmVarDecl 0x555f55e6b4e8 <col:50, col:73> col:73 used work 'struct k_delayed_work *'
| |-CompoundStmt 0x555f55e6b848 <line:3175:1, line:3177:1>
| | `-ReturnStmt 0x555f55e6b800 <line:3176:2, col:66>
| |   `-ImplicitCastExpr 0x555f55e6b7e8 <col:9, col:66> 's32_t':'int' <IntegralCast>
| |     `-CallExpr 0x555f55e6b7a0 <col:9, col:66> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x555f55e6b788 <col:9> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x555f55e6b658 <col:9> 'u64_t (u64_t)' Function 0x555f55e1e210 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
| |       `-ImplicitCastExpr 0x555f55e6b7d0 <col:31, col:65> 'u64_t':'unsigned long long' <IntegralCast>
| |         `-CallExpr 0x555f55e6b758 <col:31, col:65> 's32_t':'int'
| |           |-ImplicitCastExpr 0x555f55e6b740 <col:31> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x555f55e6b680 <col:31> 's32_t (struct _timeout *)' Function 0x555f55e4e190 'z_timeout_remaining' 's32_t (struct _timeout *)'
| |           `-UnaryOperator 0x555f55e6b720 <col:51, col:58> 'struct _timeout *' prefix '&'
| |             `-MemberExpr 0x555f55e6b6e8 <col:52, col:58> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x555f55d56928
| |               `-ImplicitCastExpr 0x555f55e6b6d0 <col:52> 'struct k_delayed_work *' <LValueToRValue>
| |                 `-DeclRefExpr 0x555f55e6b6a8 <col:52> 'struct k_delayed_work *' lvalue ParmVar 0x555f55e6b4e8 'work' 'struct k_delayed_work *'
| `-FullComment 0x555f55f0d5f0 <line:3163:3, line:3173:1>
|   |-ParagraphComment 0x555f55f0d1e0 <line:3163:3>
|   | `-TextComment 0x555f55f0d1b0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0d200 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x555f55f0d260 <col:10, col:66>
|   |   `-TextComment 0x555f55f0d230 <col:10, col:66> Text=" Get time remaining before a delayed work gets scheduled."
|   |-ParagraphComment 0x555f55f0d300 <line:3165:3, line:3167:30>
|   | |-TextComment 0x555f55f0d280 <line:3165:3, col:66> Text=" This routine computes the (approximate) time remaining before a"
|   | |-TextComment 0x555f55f0d2a0 <line:3166:3, col:71> Text=" delayed work gets executed. If the delayed work is not waiting to be"
|   | `-TextComment 0x555f55f0d2c0 <line:3167:3, col:30> Text=" scheduled, it returns zero."
|   |-ParagraphComment 0x555f55f0d350 <line:3169:3>
|   | `-TextComment 0x555f55f0d320 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f0d370 <col:4, col:37> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x555f55f0d400 <col:15, col:37>
|   |   `-TextComment 0x555f55f0d3d0 <col:15, col:37> Text="     Delayed work item."
|   |-ParagraphComment 0x555f55f0d450 <line:3171:3>
|   | `-TextComment 0x555f55f0d420 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0d470 <col:4, line:3172:3> Name="return"
|   | `-ParagraphComment 0x555f55f0d4f0 <line:3171:11, line:3172:3>
|   |   |-TextComment 0x555f55f0d4a0 <line:3171:11, col:44> Text=" Remaining time (in milliseconds)."
|   |   `-TextComment 0x555f55f0d4c0 <line:3172:3> Text=" "
|   |-VerbatimLineComment 0x555f55f0d510 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x555f55f0d580 <line:3173:1>
|     `-TextComment 0x555f55f0d550 <col:1> Text=" "
|-FunctionDecl 0x555f55e6ba90 <line:3190:1, line:3191:33> line:3190:13 k_work_poll_init 'void (struct k_work_poll *, k_work_handler_t)' extern
| |-ParmVarDecl 0x555f55e6b910 <col:30, col:50> col:50 work 'struct k_work_poll *'
| |-ParmVarDecl 0x555f55e6b980 <line:3191:9, col:26> col:26 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x555f55f0da80 <line:3180:3, line:3188:14>
|   |-ParagraphComment 0x555f55f0d690 <line:3180:3>
|   | `-TextComment 0x555f55f0d660 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0d6b0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55f0d710 <col:10, col:43>
|   |   `-TextComment 0x555f55f0d6e0 <col:10, col:43> Text=" Initialize a triggered work item."
|   |-ParagraphComment 0x555f55f0d780 <line:3182:3, line:3183:17>
|   | |-TextComment 0x555f55f0d730 <line:3182:3, col:69> Text=" This routine initializes a workqueue triggered work item, prior to"
|   | `-TextComment 0x555f55f0d750 <line:3183:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x555f55f0d7d0 <line:3185:3>
|   | `-TextComment 0x555f55f0d7a0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f0d7f0 <col:4, line:3186:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x555f55f0d8a0 <line:3185:15, line:3186:3>
|   |   |-TextComment 0x555f55f0d850 <line:3185:15, col:46> Text=" Address of triggered work item."
|   |   `-TextComment 0x555f55f0d870 <line:3186:3> Text=" "
|   |-ParamCommandComment 0x555f55f0d8c0 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x555f55f0d950 <col:18, col:70>
|   |   `-TextComment 0x555f55f0d920 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x555f55f0d9a0 <line:3188:3>
|   | `-TextComment 0x555f55f0d970 <col:3> Text=" "
|   `-BlockCommandComment 0x555f55f0d9c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x555f55f0da20 <col:11, col:14>
|       `-TextComment 0x555f55f0d9f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x555f55e6bf18 <line:3227:1, line:3231:25> line:3227:12 used k_work_poll_submit_to_queue 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x555f55e6bbb8 <col:40, col:57> col:57 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x555f55e6bc40 <line:3228:12, col:32> col:32 work 'struct k_work_poll *'
| |-ParmVarDecl 0x555f55e6bcc8 <line:3229:12, col:33> col:33 events 'struct k_poll_event *'
| |-ParmVarDecl 0x555f55e6bd40 <line:3230:12, col:16> col:16 num_events 'int'
| |-ParmVarDecl 0x555f55e6bdb0 <line:3231:12, col:18> col:18 timeout 's32_t':'int'
| `-FullComment 0x555f55f0e7b0 <line:3194:3, line:3225:69>
|   |-ParagraphComment 0x555f55f0db20 <line:3194:3>
|   | `-TextComment 0x555f55f0daf0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0db40 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55f0dba0 <col:10, col:39>
|   |   `-TextComment 0x555f55f0db70 <col:10, col:39> Text=" Submit a triggered work item."
|   |-ParagraphComment 0x555f55f0de10 <line:3196:3, line:3200:50>
|   | |-TextComment 0x555f55f0dbc0 <line:3196:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x555f55f0dc10 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x555f55f0dc30 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x555f55f0dc50 <line:3197:3> Text=" "
|   | |-InlineCommandComment 0x555f55f0dca0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x555f55f0dcc0 <col:13, col:35> Text=" when one of the given "
|   | |-InlineCommandComment 0x555f55f0dd10 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x555f55f0dd30 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x555f55f0dd50 <line:3198:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x555f55f0dd70 <line:3199:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x555f55f0dd90 <line:3200:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x555f55f0df00 <line:3202:3, line:3206:70>
|   | |-TextComment 0x555f55f0de30 <line:3202:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x555f55f0de50 <line:3203:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x555f55f0de70 <line:3204:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x555f55f0de90 <line:3205:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x555f55f0deb0 <line:3206:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x555f55f0df50 <line:3208:3>
|   | `-TextComment 0x555f55f0df20 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0df70 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f0dfd0 <col:9, col:31>
|   |   `-TextComment 0x555f55f0dfa0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f0e020 <line:3210:3>
|   | `-TextComment 0x555f55f0dff0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0e040 <col:4, line:3213:57> Name="warning"
|   | `-ParagraphComment 0x555f55f0e0f0 <line:3211:3, line:3213:57>
|   |   |-TextComment 0x555f55f0e070 <line:3211:3, col:75> Text=" Provided array of events as well as a triggered work item must be placed"
|   |   |-TextComment 0x555f55f0e090 <line:3212:3, col:67> Text=" in persistent memory (valid until work handler execution or work"
|   |   `-TextComment 0x555f55f0e0b0 <line:3213:3, col:57> Text=" cancellation) and cannot be modified after submission."
|   |-ParagraphComment 0x555f55f0e140 <line:3215:3>
|   | `-TextComment 0x555f55f0e110 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f0e160 <col:4, line:3216:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x555f55f0e210 <line:3215:17, line:3216:3>
|   |   |-TextComment 0x555f55f0e1c0 <line:3215:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x555f55f0e1e0 <line:3216:3> Text=" "
|   |-ParamCommandComment 0x555f55f0e230 <col:4, line:3217:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x555f55f0e2e0 <line:3216:15, line:3217:3>
|   |   |-TextComment 0x555f55f0e290 <line:3216:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x555f55f0e2b0 <line:3217:3> Text=" "
|   |-ParamCommandComment 0x555f55f0e300 <col:4, line:3218:3> [in] implicitly Param="events" ParamIndex=2
|   | `-ParagraphComment 0x555f55f0e3b0 <line:3217:17, line:3218:3>
|   |   |-TextComment 0x555f55f0e360 <line:3217:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x555f55f0e380 <line:3218:3> Text=" "
|   |-ParamCommandComment 0x555f55f0e3d0 <col:4, line:3219:3> [in] implicitly Param="num_events" ParamIndex=3
|   | `-ParagraphComment 0x555f55f0e480 <line:3218:21, line:3219:3>
|   |   |-TextComment 0x555f55f0e430 <line:3218:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x555f55f0e450 <line:3219:3> Text=" "
|   |-ParamCommandComment 0x555f55f0e4a0 <col:4, line:3220:42> [in] implicitly Param="timeout" ParamIndex=4
|   | `-ParagraphComment 0x555f55f0e550 <line:3219:18, line:3220:42>
|   |   |-TextComment 0x555f55f0e500 <line:3219:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x555f55f0e520 <line:3220:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x555f55f0e6e0 <line:3223:3, line:3225:69>
|     |-TextComment 0x555f55f0e570 <line:3223:3> Text=" "
|     |-InlineCommandComment 0x555f55f0e590 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x555f55f0e5b0 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x555f55f0e5d0 <line:3224:3> Text=" "
|     |-InlineCommandComment 0x555f55f0e5f0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x555f55f0e610 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x555f55f0e630 <line:3225:3> Text=" "
|     |-InlineCommandComment 0x555f55f0e650 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x555f55f0e670 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x555f55e6c2e8 <line:3264:1, line:3271:1> line:3264:19 k_work_poll_submit 'int (struct k_work_poll *, struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x555f55e6c030 <col:38, col:58> col:58 used work 'struct k_work_poll *'
| |-ParmVarDecl 0x555f55e6c0b8 <line:3265:10, col:31> col:31 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x555f55e6c130 <line:3266:10, col:14> col:14 used num_events 'int'
| |-ParmVarDecl 0x555f55e6c1a0 <line:3267:10, col:16> col:16 used timeout 's32_t':'int'
| |-CompoundStmt 0x555f55e6c628 <line:3268:1, line:3271:1>
| | `-ReturnStmt 0x555f55e6c5e0 <line:3269:2, line:3270:34>
| |   `-CallExpr 0x555f55e6c530 <line:3269:9, line:3270:34> 'int'
| |     |-ImplicitCastExpr 0x555f55e6c518 <line:3269:9> 'int (*)(struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555f55e6c3a8 <col:9> 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' Function 0x555f55e6bf18 'k_work_poll_submit_to_queue' 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)'
| |     |-UnaryOperator 0x555f55e6c3f8 <col:37, col:38> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x555f55e6c3d0 <col:38> 'struct k_work_q':'struct k_work_q' lvalue Var 0x555f55d56e58 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x555f55e6c580 <col:52> 'struct k_work_poll *' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e6c418 <col:52> 'struct k_work_poll *' lvalue ParmVar 0x555f55e6c030 'work' 'struct k_work_poll *'
| |     |-ImplicitCastExpr 0x555f55e6c598 <line:3270:7> 'struct k_poll_event *' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e6c440 <col:7> 'struct k_poll_event *' lvalue ParmVar 0x555f55e6c0b8 'events' 'struct k_poll_event *'
| |     |-ImplicitCastExpr 0x555f55e6c5b0 <col:15> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x555f55e6c468 <col:15> 'int' lvalue ParmVar 0x555f55e6c130 'num_events' 'int'
| |     `-ImplicitCastExpr 0x555f55e6c5c8 <col:27> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x555f55e6c490 <col:27> 's32_t':'int' lvalue ParmVar 0x555f55e6c1a0 'timeout' 's32_t':'int'
| `-FullComment 0x555f55f0f320 <line:3234:3, line:3262:69>
|   |-ParagraphComment 0x555f55f0e850 <line:3234:3>
|   | `-TextComment 0x555f55f0e820 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0e870 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x555f55f0e8d0 <col:10, col:63>
|   |   `-TextComment 0x555f55f0e8a0 <col:10, col:63> Text=" Submit a triggered work item to the system workqueue."
|   |-ParagraphComment 0x555f55f0eac0 <line:3236:3, line:3240:50>
|   | |-TextComment 0x555f55f0e8f0 <line:3236:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x555f55f0e940 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x555f55f0e960 <col:44, col:69> Text=" to be processed by system"
|   | |-TextComment 0x555f55f0e980 <line:3237:3, col:35> Text=" workqueue when one of the given "
|   | |-InlineCommandComment 0x555f55f0e9d0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x555f55f0e9f0 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x555f55f0ea10 <line:3238:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x555f55f0ea30 <line:3239:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x555f55f0ea50 <line:3240:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x555f55f0ebb0 <line:3242:3, line:3246:70>
|   | |-TextComment 0x555f55f0eae0 <line:3242:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x555f55f0eb00 <line:3243:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x555f55f0eb20 <line:3244:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x555f55f0eb40 <line:3245:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x555f55f0eb60 <line:3246:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x555f55f0ec00 <line:3248:3>
|   | `-TextComment 0x555f55f0ebd0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0ec20 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f0ec80 <col:9, col:31>
|   |   `-TextComment 0x555f55f0ec50 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f0ecd0 <line:3250:3>
|   | `-TextComment 0x555f55f0eca0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0ecf0 <col:4, line:3252:63> Name="warning"
|   | `-ParagraphComment 0x555f55f0ed70 <line:3251:3, line:3252:63>
|   |   |-TextComment 0x555f55f0ed20 <line:3251:3, col:72> Text=" Provided array of events as well as a triggered work item must not be"
|   |   `-TextComment 0x555f55f0ed40 <line:3252:3, col:63> Text=" modified until the item has been processed by the workqueue."
|   |-ParagraphComment 0x555f55f0edc0 <line:3254:3>
|   | `-TextComment 0x555f55f0ed90 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f0ede0 <col:4, line:3255:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x555f55f0ee90 <line:3254:15, line:3255:3>
|   |   |-TextComment 0x555f55f0ee40 <line:3254:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x555f55f0ee60 <line:3255:3> Text=" "
|   |-ParamCommandComment 0x555f55f0eeb0 <col:4, line:3256:3> [in] implicitly Param="events" ParamIndex=1
|   | `-ParagraphComment 0x555f55f0ef60 <line:3255:17, line:3256:3>
|   |   |-TextComment 0x555f55f0ef10 <line:3255:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x555f55f0ef30 <line:3256:3> Text=" "
|   |-ParamCommandComment 0x555f55f0ef80 <col:4, line:3257:3> [in] implicitly Param="num_events" ParamIndex=2
|   | `-ParagraphComment 0x555f55f0f030 <line:3256:21, line:3257:3>
|   |   |-TextComment 0x555f55f0efe0 <line:3256:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x555f55f0f000 <line:3257:3> Text=" "
|   |-ParamCommandComment 0x555f55f0f050 <col:4, line:3258:42> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x555f55f0f100 <line:3257:18, line:3258:42>
|   |   |-TextComment 0x555f55f0f0b0 <line:3257:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x555f55f0f0d0 <line:3258:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x555f55f0f290 <line:3260:3, line:3262:69>
|     |-TextComment 0x555f55f0f120 <line:3260:3> Text=" "
|     |-InlineCommandComment 0x555f55f0f140 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x555f55f0f160 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x555f55f0f180 <line:3261:3> Text=" "
|     |-InlineCommandComment 0x555f55f0f1a0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x555f55f0f1c0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x555f55f0f1e0 <line:3262:3> Text=" "
|     |-InlineCommandComment 0x555f55f0f200 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x555f55f0f220 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x555f55e6c778 <line:3287:1, col:55> col:12 k_work_poll_cancel 'int (struct k_work_poll *)' extern
| |-ParmVarDecl 0x555f55e6c668 <col:31, col:51> col:51 work 'struct k_work_poll *'
| `-FullComment 0x555f55f0f870 <line:3274:3, line:3285:74>
|   |-ParagraphComment 0x555f55f0f3c0 <line:3274:3>
|   | `-TextComment 0x555f55f0f390 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0f3e0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55f0f440 <col:10, col:39>
|   |   `-TextComment 0x555f55f0f410 <col:10, col:39> Text=" Cancel a triggered work item."
|   |-ParagraphComment 0x555f55f0f530 <line:3276:3, line:3278:14>
|   | |-TextComment 0x555f55f0f460 <line:3276:3, col:62> Text=" This routine cancels the submission of triggered work item "
|   | |-InlineCommandComment 0x555f55f0f4b0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x555f55f0f4d0 <line:3277:3, col:72> Text=" A triggered work item can only be canceled if no event triggered work"
|   | `-TextComment 0x555f55f0f4f0 <line:3278:3, col:14> Text=" submission."
|   |-ParagraphComment 0x555f55f0f580 <line:3280:3>
|   | `-TextComment 0x555f55f0f550 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0f5a0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f0f600 <col:9, col:31>
|   |   `-TextComment 0x555f55f0f5d0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f0f650 <line:3282:3>
|   | `-TextComment 0x555f55f0f620 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f0f670 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x555f55f0f700 <col:15, col:44>
|   |   `-TextComment 0x555f55f0f6d0 <col:15, col:44> Text=" Address of delayed work item."
|   `-ParagraphComment 0x555f55f0f810 <line:3284:3, line:3285:74>
|     |-TextComment 0x555f55f0f720 <line:3284:3> Text=" "
|     |-InlineCommandComment 0x555f55f0f740 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x555f55f0f760 <col:11, col:32> Text=" 0 Work item canceled."
|     |-TextComment 0x555f55f0f780 <line:3285:3> Text=" "
|     |-InlineCommandComment 0x555f55f0f7a0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x555f55f0f7c0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|-RecordDecl 0x555f55e6c878 prev 0x555f55e37c08 <line:3300:1, line:3314:1> line:3300:8 struct k_mutex definition
| |-FullComment 0x555f55f0fa00 <line:3297:3, line:3299:1>
| | |-ParagraphComment 0x555f55f0f930 <line:3297:3, line:3298:3>
| | | |-TextComment 0x555f55f0f8e0 <line:3297:3, col:18> Text=" Mutex Structure"
| | | `-TextComment 0x555f55f0f900 <line:3298:3> Text=" "
| | |-VerbatimLineComment 0x555f55f0f950 <col:4, col:23> Text=" mutex_apis"
| | `-ParagraphComment 0x555f55f0f9c0 <line:3299:1>
| |   `-TextComment 0x555f55f0f990 <col:1> Text=" "
| |-FieldDecl 0x555f55e6c938 <line:3302:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x555f55f0fad0 <line:3301:5, col:22>
| |   `-ParagraphComment 0x555f55f0faa0 <col:5, col:22>
| |     `-TextComment 0x555f55f0fa70 <col:5, col:22> Text=" Mutex wait queue "
| |-FieldDecl 0x555f55e6c9d0 <line:3304:2, col:19> col:19 owner 'struct k_thread *'
| | `-FullComment 0x555f55f0fba0 <line:3303:5, col:17>
| |   `-ParagraphComment 0x555f55f0fb70 <col:5, col:17>
| |     `-TextComment 0x555f55f0fb40 <col:5, col:17> Text=" Mutex owner "
| |-FieldDecl 0x555f55e6ca58 <line:3307:2, col:8> col:8 lock_count 'u32_t':'unsigned int'
| | `-FullComment 0x555f55f0fc70 <line:3306:5, col:24>
| |   `-ParagraphComment 0x555f55f0fc40 <col:5, col:24>
| |     `-TextComment 0x555f55f0fc10 <col:5, col:24> Text=" Current lock count "
| `-FieldDecl 0x555f55e6cae0 <line:3310:2, col:6> col:6 owner_orig_prio 'int'
|   `-FullComment 0x555f55f0fd40 <line:3309:5, col:30>
|     `-ParagraphComment 0x555f55f0fd10 <col:5, col:30>
|       `-TextComment 0x555f55f0fce0 <col:5, col:30> Text=" Original thread priority "
|-FunctionDecl 0x555f55e6cdb8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3361:49> col:15 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x555f55e6ccb0 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| `-FullComment 0x555f55f101f0 <line:3349:3, line:3360:1>
|   |-ParagraphComment 0x555f55f0fde0 <line:3349:3>
|   | `-TextComment 0x555f55f0fdb0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f0fe00 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x555f55f0fe60 <col:10, col:29>
|   |   `-TextComment 0x555f55f0fe30 <col:10, col:29> Text=" Initialize a mutex."
|   |-ParagraphComment 0x555f55f0feb0 <line:3351:3, col:67>
|   | `-TextComment 0x555f55f0fe80 <col:3, col:67> Text=" This routine initializes a mutex object, prior to its first use."
|   |-ParagraphComment 0x555f55f0ff00 <line:3353:3, col:70>
|   | `-TextComment 0x555f55f0fed0 <col:3, col:70> Text=" Upon completion, the mutex is available and does not have an owner."
|   |-ParagraphComment 0x555f55f0ff50 <line:3355:3>
|   | `-TextComment 0x555f55f0ff20 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f0ff70 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x555f55f10000 <col:16, col:37>
|   |   `-TextComment 0x555f55f0ffd0 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x555f55f100a0 <line:3357:3, col:33>
|   | |-TextComment 0x555f55f10020 <col:3> Text=" "
|   | |-InlineCommandComment 0x555f55f10040 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x555f55f10060 <col:11, col:33> Text=" 0 Mutex object created"
|   |-ParagraphComment 0x555f55f100f0 <line:3359:3>
|   | `-TextComment 0x555f55f100c0 <col:3> Text=" "
|   |-VerbatimLineComment 0x555f55f10110 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x555f55f10180 <line:3360:1>
|     `-TextComment 0x555f55f10150 <col:1> Text=" "
|-FunctionDecl 0x555f55e6d038 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3384:64> col:15 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x555f55e6ceb0 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| |-ParmVarDecl 0x555f55e6cf20 <col:51, col:57> col:57 timeout 's32_t':'int'
| `-FullComment 0x555f55f10990 <line:3365:3, line:3383:1>
|   |-ParagraphComment 0x555f55f10290 <line:3365:3>
|   | `-TextComment 0x555f55f10260 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f102b0 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x555f55f10310 <col:10, col:23>
|   |   `-TextComment 0x555f55f102e0 <col:10, col:23> Text=" Lock a mutex."
|   |-ParagraphComment 0x555f55f10430 <line:3367:3, line:3369:20>
|   | |-TextComment 0x555f55f10330 <line:3367:3, col:22> Text=" This routine locks "
|   | |-InlineCommandComment 0x555f55f10380 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x555f55f103a0 <col:32, col:73> Text=" If the mutex is locked by another thread,"
|   | |-TextComment 0x555f55f103c0 <line:3368:3, col:70> Text=" the calling thread waits until the mutex becomes available or until"
|   | `-TextComment 0x555f55f103e0 <line:3369:3, col:20> Text=" a timeout occurs."
|   |-ParagraphComment 0x555f55f104a0 <line:3371:3, line:3372:62>
|   | |-TextComment 0x555f55f10450 <line:3371:3, col:77> Text=" A thread is permitted to lock a mutex it has already locked. The operation"
|   | `-TextComment 0x555f55f10470 <line:3372:3, col:62> Text=" completes immediately and the lock count is increased by 1."
|   |-ParagraphComment 0x555f55f104f0 <line:3374:3>
|   | `-TextComment 0x555f55f104c0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f10510 <col:4, line:3375:3> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x555f55f105c0 <line:3374:16, line:3375:3>
|   |   |-TextComment 0x555f55f10570 <line:3374:16, col:37> Text=" Address of the mutex."
|   |   `-TextComment 0x555f55f10590 <line:3375:3> Text=" "
|   |-ParamCommandComment 0x555f55f105e0 <col:4, line:3377:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x555f55f106c0 <line:3375:18, line:3377:28>
|   |   |-TextComment 0x555f55f10640 <line:3375:18, col:67> Text=" Non-negative waiting period to lock the mutex (in"
|   |   |-TextComment 0x555f55f10660 <line:3376:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x555f55f10680 <line:3377:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x555f55f10890 <line:3379:3, line:3382:3>
|   | |-TextComment 0x555f55f106e0 <line:3379:3> Text=" "
|   | |-InlineCommandComment 0x555f55f10700 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f10720 <col:11, col:26> Text=" 0 Mutex locked."
|   | |-TextComment 0x555f55f10740 <line:3380:3> Text=" "
|   | |-InlineCommandComment 0x555f55f10760 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f10780 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x555f55f107c0 <line:3381:3> Text=" "
|   | |-InlineCommandComment 0x555f55f107e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f10800 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x555f55f10820 <line:3382:3> Text=" "
|   |-VerbatimLineComment 0x555f55f108b0 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x555f55f10920 <line:3383:1>
|     `-TextComment 0x555f55f108f0 <col:1> Text=" "
|-FunctionDecl 0x555f55e6d1d0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3404:51> col:15 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x555f55e6d140 <col:30, col:46> col:46 mutex 'struct k_mutex *'
| `-FullComment 0x555f55f11020 <line:3387:3, line:3403:1>
|   |-ParagraphComment 0x555f55f10a30 <line:3387:3>
|   | `-TextComment 0x555f55f10a00 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f10a50 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x555f55f10ab0 <col:10, col:25>
|   |   `-TextComment 0x555f55f10a80 <col:10, col:25> Text=" Unlock a mutex."
|   |-ParagraphComment 0x555f55f10ba0 <line:3389:3, line:3390:18>
|   | |-TextComment 0x555f55f10ad0 <line:3389:3, col:24> Text=" This routine unlocks "
|   | |-InlineCommandComment 0x555f55f10b20 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x555f55f10b40 <col:34, col:73> Text=" The mutex must already be locked by the"
|   | `-TextComment 0x555f55f10b60 <line:3390:3, col:18> Text=" calling thread."
|   |-ParagraphComment 0x555f55f10c40 <line:3392:3, line:3394:10>
|   | |-TextComment 0x555f55f10bc0 <line:3392:3, col:78> Text=" The mutex cannot be claimed by another thread until it has been unlocked by"
|   | |-TextComment 0x555f55f10be0 <line:3393:3, col:71> Text=" the calling thread as many times as it was previously locked by that"
|   | `-TextComment 0x555f55f10c00 <line:3394:3, col:10> Text=" thread."
|   |-ParagraphComment 0x555f55f10c90 <line:3396:3>
|   | `-TextComment 0x555f55f10c60 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f10cb0 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x555f55f10d40 <col:16, col:37>
|   |   `-TextComment 0x555f55f10d10 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x555f55f10ed0 <line:3398:3, line:3400:42>
|   | |-TextComment 0x555f55f10d60 <line:3398:3> Text=" "
|   | |-InlineCommandComment 0x555f55f10d80 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f10da0 <col:11, col:28> Text=" 0 Mutex unlocked."
|   | |-TextComment 0x555f55f10dc0 <line:3399:3> Text=" "
|   | |-InlineCommandComment 0x555f55f10de0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f10e00 <col:11, col:59> Text=" -EPERM The current thread does not own the mutex"
|   | |-TextComment 0x555f55f10e20 <line:3400:3> Text=" "
|   | |-InlineCommandComment 0x555f55f10e40 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x555f55f10e60 <col:11, col:42> Text=" -EINVAL The mutex is not locked"
|   |-ParagraphComment 0x555f55f10f20 <line:3402:3>
|   | `-TextComment 0x555f55f10ef0 <col:3> Text=" "
|   |-VerbatimLineComment 0x555f55f10f40 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x555f55f10fb0 <line:3403:1>
|     `-TextComment 0x555f55f10f80 <col:1> Text=" "
|-RecordDecl 0x555f55e6d2d8 prev 0x555f55e37cb0 <line:3414:1, line:3422:1> line:3414:8 struct k_sem definition
| |-FullComment 0x555f55f11140 <line:3411:3, col:24>
| | `-ParagraphComment 0x555f55f11110 <col:3, col:24>
| |   |-TextComment 0x555f55f11090 <col:3> Text=" "
| |   |-InlineCommandComment 0x555f55f110b0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x555f55f110d0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x555f55e6d370 <line:3415:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x555f55e6d3c8 <line:3416:2, col:8> col:8 referenced count 'u32_t':'unsigned int'
| `-FieldDecl 0x555f55e6d420 <line:3417:2, col:8> col:8 limit 'u32_t':'unsigned int'
|-FunctionDecl 0x555f55e6d7d8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3460:24> line:3459:15 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x555f55e6d5b0 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x555f55e6d628 <col:45, col:58> col:58 initial_count 'unsigned int'
| |-ParmVarDecl 0x555f55e6d6a0 <line:3460:6, col:19> col:19 limit 'unsigned int'
| `-FullComment 0x555f55f117c0 <line:3446:3, line:3458:1>
|   |-ParagraphComment 0x555f55f111e0 <line:3446:3>
|   | `-TextComment 0x555f55f111b0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f11200 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x555f55f11260 <col:10, col:33>
|   |   `-TextComment 0x555f55f11230 <col:10, col:33> Text=" Initialize a semaphore."
|   |-ParagraphComment 0x555f55f112b0 <line:3448:3, col:71>
|   | `-TextComment 0x555f55f11280 <col:3, col:71> Text=" This routine initializes a semaphore object, prior to its first use."
|   |-ParagraphComment 0x555f55f11300 <line:3450:3>
|   | `-TextComment 0x555f55f112d0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f11320 <col:4, line:3451:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x555f55f113d0 <line:3450:14, line:3451:3>
|   |   |-TextComment 0x555f55f11380 <line:3450:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x555f55f113a0 <line:3451:3> Text=" "
|   |-ParamCommandComment 0x555f55f113f0 <col:4, line:3452:3> [in] implicitly Param="initial_count" ParamIndex=1
|   | `-ParagraphComment 0x555f55f114a0 <line:3451:24, line:3452:3>
|   |   |-TextComment 0x555f55f11450 <line:3451:24, col:48> Text=" Initial semaphore count."
|   |   `-TextComment 0x555f55f11470 <line:3452:3> Text=" "
|   |-ParamCommandComment 0x555f55f114c0 <col:4, col:50> [in] implicitly Param="limit" ParamIndex=2
|   | `-ParagraphComment 0x555f55f11550 <col:16, col:50>
|   |   `-TextComment 0x555f55f11520 <col:16, col:50> Text=" Maximum permitted semaphore count."
|   |-ParagraphComment 0x555f55f11660 <line:3454:3, line:3455:33>
|   | |-TextComment 0x555f55f11570 <line:3454:3> Text=" "
|   | |-InlineCommandComment 0x555f55f11590 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f115b0 <col:11, col:43> Text=" 0 Semaphore created successfully"
|   | |-TextComment 0x555f55f115d0 <line:3455:3> Text=" "
|   | |-InlineCommandComment 0x555f55f115f0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x555f55f11610 <col:11, col:33> Text=" -EINVAL Invalid values"
|   |-ParagraphComment 0x555f55f116b0 <line:3457:3>
|   | `-TextComment 0x555f55f11680 <col:3> Text=" "
|   |-VerbatimLineComment 0x555f55f116d0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x555f55f11740 <line:3458:1>
|     `-TextComment 0x555f55f11710 <col:1> Text=" "
|-FunctionDecl 0x555f55e6da68 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3479:58> col:15 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x555f55e6d8e0 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x555f55e6d950 <col:45, col:51> col:51 timeout 's32_t':'int'
| `-FullComment 0x555f55f11fb0 <line:3463:3, line:3478:1>
|   |-ParagraphComment 0x555f55f11860 <line:3463:3>
|   | `-TextComment 0x555f55f11830 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f11880 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x555f55f118e0 <col:10, col:27>
|   |   `-TextComment 0x555f55f118b0 <col:10, col:27> Text=" Take a semaphore."
|   |-ParagraphComment 0x555f55f11980 <line:3465:3, col:24>
|   | |-TextComment 0x555f55f11900 <col:3, col:22> Text=" This routine takes "
|   | `-InlineCommandComment 0x555f55f11950 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x555f55f119d0 <line:3467:3>
|   | `-TextComment 0x555f55f119a0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f119f0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x555f55f11ad0 <col:9, col:72>
|   |   |-TextComment 0x555f55f11a20 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x555f55f11a70 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x555f55f11a90 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x555f55f11b20 <line:3469:3>
|   | `-TextComment 0x555f55f11af0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f11b40 <col:4, line:3470:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x555f55f11bf0 <line:3469:14, line:3470:3>
|   |   |-TextComment 0x555f55f11ba0 <line:3469:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x555f55f11bc0 <line:3470:3> Text=" "
|   |-ParamCommandComment 0x555f55f11c10 <col:4, line:3472:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x555f55f11cf0 <line:3470:18, line:3472:28>
|   |   |-TextComment 0x555f55f11c70 <line:3470:18, col:71> Text=" Non-negative waiting period to take the semaphore (in"
|   |   |-TextComment 0x555f55f11c90 <line:3471:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x555f55f11cb0 <line:3472:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x555f55f11ea0 <line:3474:3, line:3477:3>
|   | |-TextComment 0x555f55f11d10 <line:3474:3> Text=" "
|   | |-InlineCommandComment 0x555f55f11d30 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f11d50 <col:11, col:29> Text=" 0 Semaphore taken."
|   | |-TextComment 0x555f55f11d70 <line:3475:3> Text=" "
|   | |-InlineCommandComment 0x555f55f11d90 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f11db0 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x555f55f11dd0 <line:3476:3> Text=" "
|   | |-InlineCommandComment 0x555f55f11df0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f11e10 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x555f55f11e30 <line:3477:3> Text=" "
|   |-VerbatimLineComment 0x555f55f11ec0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x555f55f11f30 <line:3478:1>
|     `-TextComment 0x555f55f11f00 <col:1> Text=" "
|-FunctionDecl 0x555f55e6ecc0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3494:44> col:16 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x555f55e6ebc0 <col:27, col:41> col:41 sem 'struct k_sem *'
| `-FullComment 0x555f55f12590 <line:3482:3, line:3493:1>
|   |-ParagraphComment 0x555f55f12050 <line:3482:3>
|   | `-TextComment 0x555f55f12020 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f12070 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x555f55f120d0 <col:10, col:27>
|   |   `-TextComment 0x555f55f120a0 <col:10, col:27> Text=" Give a semaphore."
|   |-ParagraphComment 0x555f55f121c0 <line:3484:3, line:3485:19>
|   | |-TextComment 0x555f55f120f0 <line:3484:3, col:22> Text=" This routine gives "
|   | |-InlineCommandComment 0x555f55f12140 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem,"
|   | |-TextComment 0x555f55f12160 <col:30, col:76> Text=" unless the semaphore is already at its maximum"
|   | `-TextComment 0x555f55f12180 <line:3485:3, col:19> Text=" permitted count."
|   |-ParagraphComment 0x555f55f12210 <line:3487:3>
|   | `-TextComment 0x555f55f121e0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f12230 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f12290 <col:9, col:31>
|   |   `-TextComment 0x555f55f12260 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f122e0 <line:3489:3>
|   | `-TextComment 0x555f55f122b0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f12300 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x555f55f12390 <col:14, col:39>
|   |   `-TextComment 0x555f55f12360 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x555f55f123e0 <line:3491:3>
|   | `-TextComment 0x555f55f123b0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f12400 <col:4, line:3492:3> Name="return"
|   | `-ParagraphComment 0x555f55f12480 <line:3491:11, line:3492:3>
|   |   |-TextComment 0x555f55f12430 <line:3491:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f12450 <line:3492:3> Text=" "
|   |-VerbatimLineComment 0x555f55f124a0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x555f55f12510 <line:3493:1>
|     `-TextComment 0x555f55f124e0 <col:1> Text=" "
|-FunctionDecl 0x555f55e6ee48 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3506:45> col:16 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x555f55e6edc0 <col:28, col:42> col:42 sem 'struct k_sem *'
| `-FullComment 0x555f55f12a80 <line:3497:3, line:3505:1>
|   |-ParagraphComment 0x555f55f12630 <line:3497:3>
|   | `-TextComment 0x555f55f12600 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f12650 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x555f55f126b0 <col:10, col:44>
|   |   `-TextComment 0x555f55f12680 <col:10, col:44> Text=" Reset a semaphore's count to zero."
|   |-ParagraphComment 0x555f55f12780 <line:3499:3, col:49>
|   | |-TextComment 0x555f55f126d0 <col:3, col:34> Text=" This routine sets the count of "
|   | |-InlineCommandComment 0x555f55f12720 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x555f55f12740 <col:41, col:49> Text=" to zero."
|   |-ParagraphComment 0x555f55f127e0 <line:3501:3>
|   | `-TextComment 0x555f55f127a0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f12800 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x555f55f12890 <col:14, col:39>
|   |   `-TextComment 0x555f55f12860 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x555f55f128e0 <line:3503:3>
|   | `-TextComment 0x555f55f128b0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f12900 <col:4, line:3504:3> Name="return"
|   | `-ParagraphComment 0x555f55f12980 <line:3503:11, line:3504:3>
|   |   |-TextComment 0x555f55f12930 <line:3503:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f12950 <line:3504:3> Text=" "
|   |-VerbatimLineComment 0x555f55f129a0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x555f55f12a10 <line:3505:1>
|     `-TextComment 0x555f55f129e0 <col:1> Text=" "
|-FunctionDecl 0x555f55e6efc8 <line:3511:1, line:3514:1> line:3511:20 used z_impl_k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x555f55e6ef40 <col:39, col:53> col:53 used sem 'struct k_sem *'
| |-CompoundStmt 0x555f55e6f158 <line:3512:1, line:3514:1>
| | `-BinaryOperator 0x555f55e6f108 <line:3513:2, col:15> 'u32_t':'unsigned int' '='
| |   |-MemberExpr 0x555f55e6f0b0 <col:2, col:7> 'u32_t':'unsigned int' lvalue ->count 0x555f55e6d3c8
| |   | `-ImplicitCastExpr 0x555f55e6f098 <col:2> 'struct k_sem *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x555f55e6f070 <col:2> 'struct k_sem *' lvalue ParmVar 0x555f55e6ef40 'sem' 'struct k_sem *'
| |   `-IntegerLiteral 0x555f55e6f0e8 <col:15> 'unsigned int' 0
| `-FullComment 0x555f55f12b70 <line:3509:3, col:12>
|   `-ParagraphComment 0x555f55f12b40 <col:3, col:12>
|     |-TextComment 0x555f55f12af0 <col:3> Text=" "
|     `-InlineCommandComment 0x555f55f12b10 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x555f55e6f2a8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3526:57> col:24 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x555f55e6f198 <col:40, col:54> col:54 sem 'struct k_sem *'
| `-FullComment 0x555f55f13020 <line:3517:3, line:3525:1>
|   |-ParagraphComment 0x555f55f12c10 <line:3517:3>
|   | `-TextComment 0x555f55f12be0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f12c30 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x555f55f12c90 <col:10, col:34>
|   |   `-TextComment 0x555f55f12c60 <col:10, col:34> Text=" Get a semaphore's count."
|   |-ParagraphComment 0x555f55f12d30 <line:3519:3, col:47>
|   | |-TextComment 0x555f55f12cb0 <col:3, col:45> Text=" This routine returns the current count of "
|   | `-InlineCommandComment 0x555f55f12d00 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x555f55f12d80 <line:3521:3>
|   | `-TextComment 0x555f55f12d50 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f12da0 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x555f55f12e30 <col:14, col:39>
|   |   `-TextComment 0x555f55f12e00 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x555f55f12e80 <line:3523:3>
|   | `-TextComment 0x555f55f12e50 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f12ea0 <col:4, line:3524:3> Name="return"
|   | `-ParagraphComment 0x555f55f12f20 <line:3523:11, line:3524:3>
|   |   |-TextComment 0x555f55f12ed0 <line:3523:11, col:35> Text=" Current semaphore count."
|   |   `-TextComment 0x555f55f12ef0 <line:3524:3> Text=" "
|   |-VerbatimLineComment 0x555f55f12f40 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x555f55f12fb0 <line:3525:1>
|     `-TextComment 0x555f55f12f80 <col:1> Text=" "
|-FunctionDecl 0x555f55e6f430 <line:3531:1, line:3534:1> line:3531:28 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x555f55e6f3a0 <col:51, col:65> col:65 used sem 'struct k_sem *'
| |-CompoundStmt 0x555f55e6f638 <line:3532:1, line:3534:1>
| | `-ReturnStmt 0x555f55e6f568 <line:3533:2, col:14>
| |   `-ImplicitCastExpr 0x555f55e6f550 <col:9, col:14> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x555f55e6f518 <col:9, col:14> 'u32_t':'unsigned int' lvalue ->count 0x555f55e6d3c8
| |       `-ImplicitCastExpr 0x555f55e6f500 <col:9> 'struct k_sem *' <LValueToRValue>
| |         `-DeclRefExpr 0x555f55e6f4d8 <col:9> 'struct k_sem *' lvalue ParmVar 0x555f55e6f3a0 'sem' 'struct k_sem *'
| `-FullComment 0x555f55f13110 <line:3529:3, col:12>
|   `-ParagraphComment 0x555f55f130e0 <col:3, col:12>
|     |-TextComment 0x555f55f13090 <col:3> Text=" "
|     `-InlineCommandComment 0x555f55f130b0 <col:4, col:12> Name="internal" RenderNormal
|-RecordDecl 0x555f55e6f650 prev 0x555f55e37d60 <line:3565:1, line:3590:1> line:3565:8 struct k_msgq definition
| |-FullComment 0x555f55f13260 <line:3563:3, col:33>
| | |-ParagraphComment 0x555f55f131b0 <col:3>
| | | `-TextComment 0x555f55f13180 <col:3> Text=" "
| | `-BlockCommandComment 0x555f55f131d0 <col:4, col:33> Name="brief"
| |   `-ParagraphComment 0x555f55f13230 <col:10, col:33>
| |     `-TextComment 0x555f55f13200 <col:10, col:33> Text=" Message Queue Structure"
| |-FieldDecl 0x555f55e6f718 <line:3567:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x555f55f13330 <line:3566:5, col:30>
| |   `-ParagraphComment 0x555f55f13300 <col:5, col:30>
| |     `-TextComment 0x555f55f132d0 <col:5, col:30> Text=" Message queue wait queue "
| |-FieldDecl 0x555f55e6f7a8 <line:3569:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x555f55f13400 <line:3568:5, col:10>
| |   `-ParagraphComment 0x555f55f133d0 <col:5, col:10>
| |     `-TextComment 0x555f55f133a0 <col:5, col:10> Text=" Lock "
| |-FieldDecl 0x555f55e6f828 <line:3571:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x555f55f134d0 <line:3570:5, col:18>
| |   `-ParagraphComment 0x555f55f134a0 <col:5, col:18>
| |     `-TextComment 0x555f55f13470 <col:5, col:18> Text=" Message size "
| |-FieldDecl 0x555f55e6f8a8 <line:3573:2, col:8> col:8 referenced max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x555f55f135a0 <line:3572:5, col:32>
| |   `-ParagraphComment 0x555f55f13570 <col:5, col:32>
| |     `-TextComment 0x555f55f13540 <col:5, col:32> Text=" Maximal number of messages "
| |-FieldDecl 0x555f55e6f930 <line:3575:2, col:8> col:8 buffer_start 'char *'
| | `-FullComment 0x555f55f13670 <line:3574:5, col:29>
| |   `-ParagraphComment 0x555f55f13640 <col:5, col:29>
| |     `-TextComment 0x555f55f13610 <col:5, col:29> Text=" Start of message buffer "
| |-FieldDecl 0x555f55e6f9c0 <line:3577:2, col:8> col:8 buffer_end 'char *'
| | `-FullComment 0x555f55f13740 <line:3576:5, col:27>
| |   `-ParagraphComment 0x555f55f13710 <col:5, col:27>
| |     `-TextComment 0x555f55f136e0 <col:5, col:27> Text=" End of message buffer "
| |-FieldDecl 0x555f55e6fa50 <line:3579:2, col:8> col:8 read_ptr 'char *'
| | `-FullComment 0x555f55f13810 <line:3578:5, col:18>
| |   `-ParagraphComment 0x555f55f137e0 <col:5, col:18>
| |     `-TextComment 0x555f55f137b0 <col:5, col:18> Text=" Read pointer "
| |-FieldDecl 0x555f55e6fae0 <line:3581:2, col:8> col:8 write_ptr 'char *'
| | `-FullComment 0x555f55f138e0 <line:3580:5, col:19>
| |   `-ParagraphComment 0x555f55f138b0 <col:5, col:19>
| |     `-TextComment 0x555f55f13880 <col:5, col:19> Text=" Write pointer "
| |-FieldDecl 0x555f55e6fb68 <line:3583:2, col:8> col:8 referenced used_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x555f55f139b0 <line:3582:5, col:29>
| |   `-ParagraphComment 0x555f55f13980 <col:5, col:29>
| |     `-TextComment 0x555f55f13950 <col:5, col:29> Text=" Number of used messages "
| `-FieldDecl 0x555f55e1efe8 <line:3589:2, col:7> col:7 flags 'u8_t':'unsigned char'
|   `-FullComment 0x555f55f13a80 <line:3588:5, col:19>
|     `-ParagraphComment 0x555f55f13a50 <col:5, col:19>
|       `-TextComment 0x555f55f13a20 <col:5, col:19> Text=" Message queue "
|-RecordDecl 0x555f55e1f0b8 <line:3619:1, line:3626:1> line:3619:8 struct k_msgq_attrs definition
| |-FullComment 0x555f55f13bd0 <line:3617:3, col:34>
| | |-ParagraphComment 0x555f55f13b20 <col:3>
| | | `-TextComment 0x555f55f13af0 <col:3> Text=" "
| | `-BlockCommandComment 0x555f55f13b40 <col:4, col:34> Name="brief"
| |   `-ParagraphComment 0x555f55f13ba0 <col:10, col:34>
| |     `-TextComment 0x555f55f13b70 <col:10, col:34> Text=" Message Queue Attributes"
| |-FieldDecl 0x555f55e1f198 <line:3621:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x555f55f13ca0 <line:3620:5, col:18>
| |   `-ParagraphComment 0x555f55f13c70 <col:5, col:18>
| |     `-TextComment 0x555f55f13c40 <col:5, col:18> Text=" Message Size "
| |-FieldDecl 0x555f55e1f218 <line:3623:2, col:8> col:8 max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x555f55f13d70 <line:3622:5, col:32>
| |   `-ParagraphComment 0x555f55f13d40 <col:5, col:32>
| |     `-TextComment 0x555f55f13d10 <col:5, col:32> Text=" Maximal number of messages "
| `-FieldDecl 0x555f55e1f298 <line:3625:2, col:8> col:8 used_msgs 'u32_t':'unsigned int'
|   `-FullComment 0x555f55f13e40 <line:3624:5, col:19>
|     `-ParagraphComment 0x555f55f13e10 <col:5, col:19>
|       `-TextComment 0x555f55f13de0 <col:5, col:19> Text=" Used messages "
|-FunctionDecl 0x555f55e1f690 <line:3676:1, line:3677:18> line:3676:6 k_msgq_init 'void (struct k_msgq *, char *, size_t, u32_t)'
| |-ParmVarDecl 0x555f55e1f3f0 <col:18, col:33> col:33 q 'struct k_msgq *'
| |-ParmVarDecl 0x555f55e1f468 <col:36, col:42> col:42 buffer 'char *'
| |-ParmVarDecl 0x555f55e1f4d8 <col:50, col:57> col:57 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55e1f548 <line:3677:4, col:10> col:10 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x555f55f14770 <line:3658:3, line:3675:1>
|   |-ParagraphComment 0x555f55f13ee0 <line:3658:3>
|   | `-TextComment 0x555f55f13eb0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f13f00 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x555f55f13f60 <col:10, col:37>
|   |   `-TextComment 0x555f55f13f30 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x555f55f13fb0 <line:3660:3, col:75>
|   | `-TextComment 0x555f55f13f80 <col:3, col:75> Text=" This routine initializes a message queue object, prior to its first use."
|   |-ParagraphComment 0x555f55f141f0 <line:3662:3, line:3666:32>
|   | |-TextComment 0x555f55f13fd0 <line:3662:3, col:58> Text=" The message queue's ring buffer must contain space for "
|   | |-InlineCommandComment 0x555f55f14020 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="max_msgs"
|   | |-TextComment 0x555f55f14040 <col:70, col:79> Text=" messages,"
|   | |-TextComment 0x555f55f14060 <line:3663:3, col:20> Text=" each of which is "
|   | |-InlineCommandComment 0x555f55f140b0 <col:21, col:22> Name="a" RenderEmphasized Arg[0]="msg_size"
|   | |-TextComment 0x555f55f140d0 <col:32, col:76> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x555f55f140f0 <line:3664:3, col:74> Text=" N-byte boundary, where N is a power of 2 (i.e. 1, 2, 4, ...). To ensure"
|   | |-TextComment 0x555f55f14110 <line:3665:3, col:60> Text=" that each message is similarly aligned to this boundary, "
|   | |-InlineCommandComment 0x555f55f14160 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="q_msg_size"
|   | `-TextComment 0x555f55f14180 <line:3666:3, col:32> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x555f55f14240 <line:3668:3>
|   | `-TextComment 0x555f55f14210 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f14260 <col:4, line:3669:3> [in] implicitly Param="q" ParamIndex=0
|   | `-ParagraphComment 0x555f55f14310 <line:3668:12, line:3669:3>
|   |   |-TextComment 0x555f55f142c0 <line:3668:12, col:41> Text=" Address of the message queue."
|   |   `-TextComment 0x555f55f142e0 <line:3669:3> Text=" "
|   |-ParamCommandComment 0x555f55f14330 <col:4, line:3670:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x555f55f143e0 <line:3669:17, line:3670:3>
|   |   |-TextComment 0x555f55f14390 <line:3669:17, col:67> Text=" Pointer to ring buffer that holds queued messages."
|   |   `-TextComment 0x555f55f143b0 <line:3670:3> Text=" "
|   |-ParamCommandComment 0x555f55f14400 <col:4, line:3671:3> [in] implicitly Param="msg_size" ParamIndex=2
|   | `-ParagraphComment 0x555f55f144b0 <line:3670:19, line:3671:3>
|   |   |-TextComment 0x555f55f14460 <line:3670:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x555f55f14480 <line:3671:3> Text=" "
|   |-ParamCommandComment 0x555f55f144d0 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=3
|   | `-ParagraphComment 0x555f55f14560 <col:19, col:65>
|   |   `-TextComment 0x555f55f14530 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x555f55f145b0 <line:3673:3>
|   | `-TextComment 0x555f55f14580 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f145d0 <col:4, line:3674:3> Name="return"
|   | `-ParagraphComment 0x555f55f14650 <line:3673:11, line:3674:3>
|   |   |-TextComment 0x555f55f14600 <line:3673:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f14620 <line:3674:3> Text=" "
|   |-VerbatimLineComment 0x555f55f14670 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x555f55f146e0 <line:3675:1>
|     `-TextComment 0x555f55f146b0 <col:1> Text=" "
|-FunctionDecl 0x555f55e1f9b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3700:19> line:3699:15 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x555f55e1f7a0 <col:33, col:48> col:48 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x555f55e1f810 <col:54, col:61> col:61 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55e1f880 <line:3700:5, col:11> col:11 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x555f55f14f00 <line:3680:3, line:3698:1>
|   |-ParagraphComment 0x555f55f14850 <line:3680:3>
|   | `-TextComment 0x555f55f14820 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f14870 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x555f55f148d0 <col:10, col:37>
|   |   `-TextComment 0x555f55f148a0 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x555f55f14970 <line:3682:3, line:3684:8>
|   | |-TextComment 0x555f55f148f0 <line:3682:3, col:75> Text=" This routine initializes a message queue object, prior to its first use,"
|   | |-TextComment 0x555f55f14910 <line:3683:3, col:73> Text=" allocating its internal ring buffer from the calling thread's resource"
|   | `-TextComment 0x555f55f14930 <line:3684:3, col:8> Text=" pool."
|   |-ParagraphComment 0x555f55f14a10 <line:3686:3, line:3688:25>
|   | |-TextComment 0x555f55f14990 <line:3686:3, col:66> Text=" Memory allocated for the ring buffer can be released by calling"
|   | |-TextComment 0x555f55f149b0 <line:3687:3, col:73> Text=" k_msgq_cleanup(), or if userspace is enabled and the msgq object loses"
|   | `-TextComment 0x555f55f149d0 <line:3688:3, col:25> Text=" all of its references."
|   |-ParagraphComment 0x555f55f14a60 <line:3690:3>
|   | `-TextComment 0x555f55f14a30 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f14a80 <col:4, line:3691:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x555f55f14b30 <line:3690:15, line:3691:3>
|   |   |-TextComment 0x555f55f14ae0 <line:3690:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x555f55f14b00 <line:3691:3> Text=" "
|   |-ParamCommandComment 0x555f55f14b50 <col:4, line:3692:3> [in] implicitly Param="msg_size" ParamIndex=1
|   | `-ParagraphComment 0x555f55f14c00 <line:3691:19, line:3692:3>
|   |   |-TextComment 0x555f55f14bb0 <line:3691:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x555f55f14bd0 <line:3692:3> Text=" "
|   |-ParamCommandComment 0x555f55f14c20 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=2
|   | `-ParagraphComment 0x555f55f14cb0 <col:19, col:65>
|   |   `-TextComment 0x555f55f14c80 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x555f55f14d00 <line:3694:3>
|   | `-TextComment 0x555f55f14cd0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f14d20 <col:4, line:3697:3> Name="return"
|   | `-ParagraphComment 0x555f55f14df0 <line:3694:11, line:3697:3>
|   |   |-TextComment 0x555f55f14d50 <line:3694:11, col:72> Text=" 0 on success, -ENOMEM if there was insufficient memory in the"
|   |   |-TextComment 0x555f55f14d70 <line:3695:3, col:66> Text="	thread's resource pool, or -EINVAL if the size parameters cause"
|   |   |-TextComment 0x555f55f14d90 <line:3696:3, col:23> Text="	an integer overflow."
|   |   `-TextComment 0x555f55f14db0 <line:3697:3> Text=" "
|   |-VerbatimLineComment 0x555f55f14e10 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x555f55f14e80 <line:3698:1>
|     `-TextComment 0x555f55f14e50 <col:1> Text=" "
|-FunctionDecl 0x555f55e1fbc8 <line:3712:1, col:39> col:5 k_msgq_cleanup 'int (struct k_msgq *)'
| |-ParmVarDecl 0x555f55e1fac0 <col:20, col:35> col:35 msgq 'struct k_msgq *'
| `-FullComment 0x555f55f152d0 <line:3703:3, line:3710:33>
|   |-ParagraphComment 0x555f55f14fa0 <line:3703:3>
|   | `-TextComment 0x555f55f14f70 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f14fc0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x555f55f15020 <col:10, col:46>
|   |   `-TextComment 0x555f55f14ff0 <col:10, col:46> Text=" Release allocated buffer for a queue"
|   |-ParagraphComment 0x555f55f15070 <line:3705:3, col:49>
|   | `-TextComment 0x555f55f15040 <col:3, col:49> Text=" Releases memory allocated for the ring buffer."
|   |-ParagraphComment 0x555f55f150c0 <line:3707:3>
|   | `-TextComment 0x555f55f15090 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f150e0 <col:4, col:39> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x555f55f15170 <col:15, col:39>
|   |   `-TextComment 0x555f55f15140 <col:15, col:39> Text=" message queue to cleanup"
|   `-ParagraphComment 0x555f55f15280 <line:3709:3, line:3710:33>
|     |-TextComment 0x555f55f15190 <line:3709:3> Text=" "
|     |-InlineCommandComment 0x555f55f151b0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x555f55f151d0 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x555f55f151f0 <line:3710:3> Text=" "
|     |-InlineCommandComment 0x555f55f15210 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x555f55f15230 <col:11, col:33> Text=" -EBUSY Queue not empty"
|-FunctionDecl 0x555f55e1fee8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3732:72> col:15 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x555f55e1fcc0 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x555f55e1fd38 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x555f55e1fda8 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x555f55f15b10 <line:3715:3, line:3731:1>
|   |-ParagraphComment 0x555f55f15370 <line:3715:3>
|   | `-TextComment 0x555f55f15340 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f15390 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x555f55f153f0 <col:10, col:44>
|   |   `-TextComment 0x555f55f153c0 <col:10, col:44> Text=" Send a message to a message queue."
|   |-ParagraphComment 0x555f55f15490 <line:3717:3, col:51>
|   | |-TextComment 0x555f55f15410 <col:3, col:49> Text=" This routine sends a message to message queue "
|   | `-InlineCommandComment 0x555f55f15460 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="q."
|   |-ParagraphComment 0x555f55f154e0 <line:3719:3>
|   | `-TextComment 0x555f55f154b0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f15500 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f15560 <col:9, col:31>
|   |   `-TextComment 0x555f55f15530 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f155b0 <line:3721:3>
|   | `-TextComment 0x555f55f15580 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f155d0 <col:4, line:3722:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x555f55f15680 <line:3721:15, line:3722:3>
|   |   |-TextComment 0x555f55f15630 <line:3721:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x555f55f15650 <line:3722:3> Text=" "
|   |-ParamCommandComment 0x555f55f156a0 <col:4, line:3723:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x555f55f15750 <line:3722:15, line:3723:3>
|   |   |-TextComment 0x555f55f15700 <line:3722:15, col:38> Text=" Pointer to the message."
|   |   `-TextComment 0x555f55f15720 <line:3723:3> Text=" "
|   |-ParamCommandComment 0x555f55f15770 <col:4, line:3725:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x555f55f15850 <line:3723:18, line:3725:28>
|   |   |-TextComment 0x555f55f157d0 <line:3723:18, col:68> Text=" Non-negative waiting period to add the message (in"
|   |   |-TextComment 0x555f55f157f0 <line:3724:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x555f55f15810 <line:3725:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x555f55f15a00 <line:3727:3, line:3730:3>
|   | |-TextComment 0x555f55f15870 <line:3727:3> Text=" "
|   | |-InlineCommandComment 0x555f55f15890 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f158b0 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x555f55f158d0 <line:3728:3> Text=" "
|   | |-InlineCommandComment 0x555f55f158f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f15910 <col:11, col:60> Text=" -ENOMSG Returned without waiting or queue purged."
|   | |-TextComment 0x555f55f15930 <line:3729:3> Text=" "
|   | |-InlineCommandComment 0x555f55f15950 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f15970 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x555f55f15990 <line:3730:3> Text=" "
|   |-VerbatimLineComment 0x555f55f15a20 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x555f55f15a90 <line:3731:1>
|     `-TextComment 0x555f55f15a60 <col:1> Text=" "
|-FunctionDecl 0x555f55e73638 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3753:72> col:15 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x555f55e734b0 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x555f55e73528 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x555f55e73598 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x555f55f16420 <line:3735:3, line:3752:1>
|   |-ParagraphComment 0x555f55f15bb0 <line:3735:3>
|   | `-TextComment 0x555f55f15b80 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f15bd0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55f15c30 <col:10, col:49>
|   |   `-TextComment 0x555f55f15c00 <col:10, col:49> Text=" Receive a message from a message queue."
|   |-ParagraphComment 0x555f55f15d20 <line:3737:3, line:3738:21>
|   | |-TextComment 0x555f55f15c50 <line:3737:3, col:54> Text=" This routine receives a message from message queue "
|   | |-InlineCommandComment 0x555f55f15ca0 <col:55, col:56> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x555f55f15cc0 <col:59, col:74> Text=" in a "first in,"
|   | `-TextComment 0x555f55f15ce0 <line:3738:3, col:21> Text=" first out" manner."
|   |-ParagraphComment 0x555f55f15d70 <line:3740:3>
|   | `-TextComment 0x555f55f15d40 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f15d90 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x555f55f15e70 <col:9, col:72>
|   |   |-TextComment 0x555f55f15dc0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x555f55f15e10 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x555f55f15e30 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x555f55f15ec0 <line:3742:3>
|   | `-TextComment 0x555f55f15e90 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f15ee0 <col:4, line:3743:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x555f55f15f90 <line:3742:15, line:3743:3>
|   |   |-TextComment 0x555f55f15f40 <line:3742:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x555f55f15f60 <line:3743:3> Text=" "
|   |-ParamCommandComment 0x555f55f15fb0 <col:4, line:3744:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x555f55f16060 <line:3743:15, line:3744:3>
|   |   |-TextComment 0x555f55f16010 <line:3743:15, col:60> Text=" Address of area to hold the received message."
|   |   `-TextComment 0x555f55f16030 <line:3744:3> Text=" "
|   |-ParamCommandComment 0x555f55f16080 <col:4, line:3746:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x555f55f16160 <line:3744:18, line:3746:28>
|   |   |-TextComment 0x555f55f160e0 <line:3744:18, col:72> Text=" Non-negative waiting period to receive the message (in"
|   |   |-TextComment 0x555f55f16100 <line:3745:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x555f55f16120 <line:3746:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x555f55f16310 <line:3748:3, line:3751:3>
|   | |-TextComment 0x555f55f16180 <line:3748:3> Text=" "
|   | |-InlineCommandComment 0x555f55f161a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f161c0 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x555f55f161e0 <line:3749:3> Text=" "
|   | |-InlineCommandComment 0x555f55f16200 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f16220 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x555f55f16240 <line:3750:3> Text=" "
|   | |-InlineCommandComment 0x555f55f16260 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f16280 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x555f55f162a0 <line:3751:3> Text=" "
|   |-VerbatimLineComment 0x555f55f16330 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x555f55f163a0 <line:3752:1>
|     `-TextComment 0x555f55f16370 <col:1> Text=" "
|-FunctionDecl 0x555f55e738d8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3770:58> col:15 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x555f55e73740 <col:27, col:42> col:42 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x555f55e737b8 <col:48, col:54> col:54 data 'void *'
| `-FullComment 0x555f55f16b40 <line:3756:3, line:3769:1>
|   |-ParagraphComment 0x555f55f164c0 <line:3756:3>
|   | `-TextComment 0x555f55f16490 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f164e0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x555f55f16540 <col:10, col:51>
|   |   `-TextComment 0x555f55f16510 <col:10, col:51> Text=" Peek/read a message from a message queue."
|   |-ParagraphComment 0x555f55f16630 <line:3758:3, line:3759:57>
|   | |-TextComment 0x555f55f16560 <line:3758:3, col:51> Text=" This routine reads a message from message queue "
|   | |-InlineCommandComment 0x555f55f165b0 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x555f55f165d0 <col:56, col:71> Text=" in a "first in,"
|   | `-TextComment 0x555f55f165f0 <line:3759:3, col:57> Text=" first out" manner and leaves the message in the queue."
|   |-ParagraphComment 0x555f55f16680 <line:3761:3>
|   | `-TextComment 0x555f55f16650 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f166a0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x555f55f16700 <col:9, col:31>
|   |   `-TextComment 0x555f55f166d0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x555f55f16750 <line:3763:3>
|   | `-TextComment 0x555f55f16720 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f16770 <col:4, line:3764:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x555f55f16840 <line:3763:15, line:3764:3>
|   |   |-TextComment 0x555f55f167f0 <line:3763:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x555f55f16810 <line:3764:3> Text=" "
|   |-ParamCommandComment 0x555f55f16860 <col:4, col:71> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x555f55f168f0 <col:15, col:71>
|   |   `-TextComment 0x555f55f168c0 <col:15, col:71> Text=" Address of area to hold the message read from the queue."
|   |-ParagraphComment 0x555f55f16a30 <line:3766:3, line:3768:3>
|   | |-TextComment 0x555f55f16910 <line:3766:3> Text=" "
|   | |-InlineCommandComment 0x555f55f16930 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f16950 <col:11, col:26> Text=" 0 Message read."
|   | |-TextComment 0x555f55f16970 <line:3767:3> Text=" "
|   | |-InlineCommandComment 0x555f55f16990 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f169b0 <col:11, col:58> Text=" -ENOMSG Returned when the queue has no message."
|   | `-TextComment 0x555f55f169d0 <line:3768:3> Text=" "
|   |-VerbatimLineComment 0x555f55f16a50 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x555f55f16ac0 <line:3769:1>
|     `-TextComment 0x555f55f16a90 <col:1> Text=" "
|-FunctionDecl 0x555f55e73ae0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3784:48> col:16 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x555f55e739e0 <col:29, col:44> col:44 msgq 'struct k_msgq *'
| `-FullComment 0x555f55f16ff0 <line:3773:3, line:3783:1>
|   |-ParagraphComment 0x555f55f16be0 <line:3773:3>
|   | `-TextComment 0x555f55f16bb0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f16c00 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x555f55f16c60 <col:10, col:32>
|   |   `-TextComment 0x555f55f16c30 <col:10, col:32> Text=" Purge a message queue."
|   |-ParagraphComment 0x555f55f16d00 <line:3775:3, line:3777:61>
|   | |-TextComment 0x555f55f16c80 <line:3775:3, col:74> Text=" This routine discards all unreceived messages in a message queue's ring"
|   | |-TextComment 0x555f55f16ca0 <line:3776:3, col:72> Text=" buffer. Any threads that are blocked waiting to send a message to the"
|   | `-TextComment 0x555f55f16cc0 <line:3777:3, col:61> Text=" message queue are unblocked and see an -ENOMSG error code."
|   |-ParagraphComment 0x555f55f16d50 <line:3779:3>
|   | `-TextComment 0x555f55f16d20 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f16d70 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x555f55f16e00 <col:15, col:44>
|   |   `-TextComment 0x555f55f16dd0 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x555f55f16e50 <line:3781:3>
|   | `-TextComment 0x555f55f16e20 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f16e70 <col:4, line:3782:3> Name="return"
|   | `-ParagraphComment 0x555f55f16ef0 <line:3781:11, line:3782:3>
|   |   |-TextComment 0x555f55f16ea0 <line:3781:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f16ec0 <line:3782:3> Text=" "
|   |-VerbatimLineComment 0x555f55f16f10 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x555f55f16f80 <line:3783:1>
|     `-TextComment 0x555f55f16f50 <col:1> Text=" "
|-FunctionDecl 0x555f55e73ce0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3797:56> col:17 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x555f55e73be0 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x555f55f17470 <line:3787:3, line:3796:1>
|   |-ParagraphComment 0x555f55f17090 <line:3787:3>
|   | `-TextComment 0x555f55f17060 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f170b0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x555f55f17110 <col:10, col:58>
|   |   `-TextComment 0x555f55f170e0 <col:10, col:58> Text=" Get the amount of free space in a message queue."
|   |-ParagraphComment 0x555f55f17180 <line:3789:3, line:3790:15>
|   | |-TextComment 0x555f55f17130 <line:3789:3, col:73> Text=" This routine returns the number of unused entries in a message queue's"
|   | `-TextComment 0x555f55f17150 <line:3790:3, col:15> Text=" ring buffer."
|   |-ParagraphComment 0x555f55f171d0 <line:3792:3>
|   | `-TextComment 0x555f55f171a0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f171f0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x555f55f17280 <col:15, col:44>
|   |   `-TextComment 0x555f55f17250 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x555f55f172d0 <line:3794:3>
|   | `-TextComment 0x555f55f172a0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f172f0 <col:4, line:3795:3> Name="return"
|   | `-ParagraphComment 0x555f55f17370 <line:3794:11, line:3795:3>
|   |   |-TextComment 0x555f55f17320 <line:3794:11, col:48> Text=" Number of unused ring buffer entries."
|   |   `-TextComment 0x555f55f17340 <line:3795:3> Text=" "
|   |-VerbatimLineComment 0x555f55f17390 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x555f55f17400 <line:3796:1>
|     `-TextComment 0x555f55f173d0 <col:1> Text=" "
|-FunctionDecl 0x555f55e74000 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3811:32> line:3810:17 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x555f55e73de0 <col:34, col:49> col:49 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x555f55e73ef0 <line:3811:6, col:27> col:27 attrs 'struct k_msgq_attrs *'
| `-FullComment 0x555f55f179a0 <line:3800:3, line:3809:1>
|   |-ParagraphComment 0x555f55f17510 <line:3800:3>
|   | `-TextComment 0x555f55f174e0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f17530 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x555f55f17590 <col:10, col:50>
|   |   `-TextComment 0x555f55f17560 <col:10, col:50> Text=" Get basic attributes of a message queue."
|   |-ParagraphComment 0x555f55f175e0 <line:3802:3, col:77>
|   | `-TextComment 0x555f55f175b0 <col:3, col:77> Text=" This routine fetches basic attributes of message queue into attr argument."
|   |-ParagraphComment 0x555f55f17630 <line:3804:3>
|   | `-TextComment 0x555f55f17600 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f17650 <col:4, line:3805:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x555f55f17700 <line:3804:15, line:3805:3>
|   |   |-TextComment 0x555f55f176b0 <line:3804:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x555f55f176d0 <line:3805:3> Text=" "
|   |-ParamCommandComment 0x555f55f17720 <col:4, col:61> [in] implicitly Param="attrs" ParamIndex=1
|   | `-ParagraphComment 0x555f55f177b0 <col:16, col:61>
|   |   `-TextComment 0x555f55f17780 <col:16, col:61> Text=" pointer to message queue attribute structure."
|   |-ParagraphComment 0x555f55f17800 <line:3807:3>
|   | `-TextComment 0x555f55f177d0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f17820 <col:4, line:3808:3> Name="return"
|   | `-ParagraphComment 0x555f55f178a0 <line:3807:11, line:3808:3>
|   |   |-TextComment 0x555f55f17850 <line:3807:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f17870 <line:3808:3> Text=" "
|   |-VerbatimLineComment 0x555f55f178c0 <col:4, col:19> Text=" K-MSGQ-003"
|   `-ParagraphComment 0x555f55f17930 <line:3809:1>
|     `-TextComment 0x555f55f17900 <col:1> Text=" "
|-FunctionDecl 0x555f55e74160 <line:3814:1, line:3817:1> line:3814:21 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x555f55e740d8 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x555f55e74398 <line:3815:1, line:3817:1>
|   `-ReturnStmt 0x555f55e74350 <line:3816:2, col:32>
|     `-BinaryOperator 0x555f55e74328 <col:9, col:32> 'unsigned int' '-'
|       |-ImplicitCastExpr 0x555f55e742f8 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-MemberExpr 0x555f55e74248 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->max_msgs 0x555f55e6f8a8
|       |   `-ImplicitCastExpr 0x555f55e74230 <col:9> 'struct k_msgq *' <LValueToRValue>
|       |     `-DeclRefExpr 0x555f55e74208 <col:9> 'struct k_msgq *' lvalue ParmVar 0x555f55e740d8 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x555f55e74310 <col:26, col:32> 'u32_t':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x555f55e742c0 <col:26, col:32> 'u32_t':'unsigned int' lvalue ->used_msgs 0x555f55e6fb68
|           `-ImplicitCastExpr 0x555f55e742a8 <col:26> 'struct k_msgq *' <LValueToRValue>
|             `-DeclRefExpr 0x555f55e74280 <col:26> 'struct k_msgq *' lvalue ParmVar 0x555f55e740d8 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x555f55e748e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3829:56> col:17 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x555f55e743d8 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x555f55f17e00 <line:3820:3, line:3828:1>
|   |-ParagraphComment 0x555f55f17a40 <line:3820:3>
|   | `-TextComment 0x555f55f17a10 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f17a60 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x555f55f17ac0 <col:10, col:56>
|   |   `-TextComment 0x555f55f17a90 <col:10, col:56> Text=" Get the number of messages in a message queue."
|   |-ParagraphComment 0x555f55f17b10 <line:3822:3, col:80>
|   | `-TextComment 0x555f55f17ae0 <col:3, col:80> Text=" This routine returns the number of messages in a message queue's ring buffer."
|   |-ParagraphComment 0x555f55f17b60 <line:3824:3>
|   | `-TextComment 0x555f55f17b30 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f17b80 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x555f55f17c10 <col:15, col:44>
|   |   `-TextComment 0x555f55f17be0 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x555f55f17c60 <line:3826:3>
|   | `-TextComment 0x555f55f17c30 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f17c80 <col:4, line:3827:3> Name="return"
|   | `-ParagraphComment 0x555f55f17d00 <line:3826:11, line:3827:3>
|   |   |-TextComment 0x555f55f17cb0 <line:3826:11, col:30> Text=" Number of messages."
|   |   `-TextComment 0x555f55f17cd0 <line:3827:3> Text=" "
|   |-VerbatimLineComment 0x555f55f17d20 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x555f55f17d90 <line:3828:1>
|     `-TextComment 0x555f55f17d60 <col:1> Text=" "
|-FunctionDecl 0x555f55e74a38 <line:3831:1, line:3834:1> line:3831:21 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x555f55e749b0 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x555f55e74be8 <line:3832:1, line:3834:1>
|   `-ReturnStmt 0x555f55e74b70 <line:3833:2, col:15>
|     `-ImplicitCastExpr 0x555f55e74b58 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x555f55e74b20 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->used_msgs 0x555f55e6fb68
|         `-ImplicitCastExpr 0x555f55e74b08 <col:9> 'struct k_msgq *' <LValueToRValue>
|           `-DeclRefExpr 0x555f55e74ae0 <col:9> 'struct k_msgq *' lvalue ParmVar 0x555f55e749b0 'msgq' 'struct k_msgq *'
|-RecordDecl 0x555f55e74c00 <line:3849:1, line:3853:1> line:3849:8 struct k_mem_block_id definition
| |-FullComment 0x555f55f18060 <line:3839:3, line:3841:5>
| | |-ParagraphComment 0x555f55f17ea0 <line:3839:3>
| | | `-TextComment 0x555f55f17e70 <col:3> Text=" "
| | |-VerbatimLineComment 0x555f55f17ec0 <col:4, col:44> Text=" mem_pool_apis Memory Pool APIs"
| | |-ParagraphComment 0x555f55f17f30 <line:3840:3>
| | | `-TextComment 0x555f55f17f00 <col:3> Text=" "
| | |-VerbatimLineComment 0x555f55f17f50 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x555f55f18010 <line:3841:3, col:5>
| |   |-TextComment 0x555f55f17f90 <col:3> Text=" "
| |   |-TextComment 0x555f55f17fb0 <col:4> Text="@"
| |   `-TextComment 0x555f55f17fd0 <col:5> Text="{"
| |-FieldDecl 0x555f55e74ce0 <line:3850:2, col:15> col:8 pool 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x555f55e74cb0 <col:15> 'int' 8
| |-FieldDecl 0x555f55e74d58 <line:3851:2, col:16> col:8 level 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x555f55e74d28 <col:16> 'int' 4
| `-FieldDecl 0x555f55e74dd0 <line:3852:2, col:16> col:8 block 'u32_t':'unsigned int'
|   `-IntegerLiteral 0x555f55e74da0 <col:16> 'int' 20
|-RecordDecl 0x555f55e74e18 <line:3855:1, line:3858:1> line:3855:8 struct k_mem_block definition
| |-FieldDecl 0x555f55e74ed8 <line:3856:2, col:8> col:8 data 'void *'
| `-FieldDecl 0x555f55e74f70 <line:3857:2, col:24> col:24 id 'struct k_mem_block_id':'struct k_mem_block_id'
|-RecordDecl 0x555f55e75048 <line:3872:1, line:3895:1> line:3872:8 struct k_mbox_msg definition
| |-FullComment 0x555f55f18210 <line:3869:3, line:3871:1>
| | |-ParagraphComment 0x555f55f18100 <line:3869:3>
| | | `-TextComment 0x555f55f180d0 <col:3> Text=" "
| | |-BlockCommandComment 0x555f55f18120 <col:4, col:35> Name="brief"
| | | `-ParagraphComment 0x555f55f18180 <col:10, col:35>
| | |   `-TextComment 0x555f55f18150 <col:10, col:35> Text=" Mailbox Message Structure"
| | `-ParagraphComment 0x555f55f181d0 <line:3871:1>
| |   `-TextComment 0x555f55f181a0 <col:1> Text=" "
| |-FieldDecl 0x555f55e75128 <line:3874:2, col:8> col:8 _mailbox 'u32_t':'unsigned int'
| | `-FullComment 0x555f55f182e0 <line:3873:5, col:55>
| |   `-ParagraphComment 0x555f55f182b0 <col:5, col:55>
| |     `-TextComment 0x555f55f18280 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x555f55e751a8 <line:3876:2, col:9> col:9 size 'size_t':'unsigned long'
| | `-FullComment 0x555f55f183b0 <line:3875:5, col:32>
| |   `-ParagraphComment 0x555f55f18380 <col:5, col:32>
| |     `-TextComment 0x555f55f18350 <col:5, col:32> Text=" size of message (in bytes) "
| |-FieldDecl 0x555f55e75228 <line:3878:2, col:8> col:8 info 'u32_t':'unsigned int'
| | `-FullComment 0x555f55f18480 <line:3877:5, col:43>
| |   `-ParagraphComment 0x555f55f18450 <col:5, col:43>
| |     `-TextComment 0x555f55f18420 <col:5, col:43> Text=" application-defined information value "
| |-FieldDecl 0x555f55e752b0 <line:3880:2, col:8> col:8 tx_data 'void *'
| | `-FullComment 0x555f55f18550 <line:3879:5, col:34>
| |   `-ParagraphComment 0x555f55f18520 <col:5, col:34>
| |     `-TextComment 0x555f55f184f0 <col:5, col:34> Text=" sender's message data buffer "
| |-FieldDecl 0x555f55e75340 <line:3882:2, col:8> col:8 _rx_data 'void *'
| | `-FullComment 0x555f55f18620 <line:3881:5, col:55>
| |   `-ParagraphComment 0x555f55f185f0 <col:5, col:55>
| |     `-TextComment 0x555f55f185c0 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x555f55e75410 <line:3884:2, col:21> col:21 tx_block 'struct k_mem_block':'struct k_mem_block'
| | `-FullComment 0x555f55f186f0 <line:3883:5, col:35>
| |   `-ParagraphComment 0x555f55f186c0 <col:5, col:35>
| |     `-TextComment 0x555f55f18690 <col:5, col:35> Text=" message data block descriptor "
| |-FieldDecl 0x555f55e75498 <line:3886:2, col:10> col:10 rx_source_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x555f55f187c0 <line:3885:5, col:22>
| |   `-ParagraphComment 0x555f55f18790 <col:5, col:22>
| |     `-TextComment 0x555f55f18760 <col:5, col:22> Text=" source thread id "
| |-FieldDecl 0x555f55e75518 <line:3888:2, col:10> col:10 tx_target_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x555f55f188a0 <line:3887:5, col:22>
| |   `-ParagraphComment 0x555f55f18870 <col:5, col:22>
| |     `-TextComment 0x555f55f18840 <col:5, col:22> Text=" target thread id "
| `-FieldDecl 0x555f55e75598 <line:3890:2, col:10> col:10 _syncing_thread 'k_tid_t':'struct k_thread *'
|   `-FullComment 0x555f55f18970 <line:3889:5, col:65>
|     `-ParagraphComment 0x555f55f18940 <col:5, col:65>
|       `-TextComment 0x555f55f18910 <col:5, col:65> Text=" internal use only - thread waiting on send (may be a dummy) "
|-RecordDecl 0x555f55e75608 prev 0x555f55e37e10 <line:3900:1, line:3909:1> line:3900:8 struct k_mbox definition
| |-FullComment 0x555f55f18b20 <line:3897:3, line:3899:1>
| | |-ParagraphComment 0x555f55f18a10 <line:3897:3>
| | | `-TextComment 0x555f55f189e0 <col:3> Text=" "
| | |-BlockCommandComment 0x555f55f18a30 <col:4, col:27> Name="brief"
| | | `-ParagraphComment 0x555f55f18a90 <col:10, col:27>
| | |   `-TextComment 0x555f55f18a60 <col:10, col:27> Text=" Mailbox Structure"
| | `-ParagraphComment 0x555f55f18ae0 <line:3899:1>
| |   `-TextComment 0x555f55f18ab0 <col:1> Text=" "
| |-FieldDecl 0x555f55e756c8 <line:3902:2, col:12> col:12 tx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x555f55f18bf0 <line:3901:5, col:29>
| |   `-ParagraphComment 0x555f55f18bc0 <col:5, col:29>
| |     `-TextComment 0x555f55f18b90 <col:5, col:29> Text=" Transmit messages queue "
| |-FieldDecl 0x555f55e75748 <line:3904:2, col:12> col:12 rx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x555f55f18cc0 <line:3903:5, col:27>
| |   `-ParagraphComment 0x555f55f18c90 <col:5, col:27>
| |     `-TextComment 0x555f55f18c60 <col:5, col:27> Text=" Receive message queue "
| `-FieldDecl 0x555f55e757b0 <line:3905:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
|-FunctionDecl 0x555f55e76fa0 <line:3951:1, col:44> col:13 k_mbox_init 'void (struct k_mbox *)' extern
| |-ParmVarDecl 0x555f55e76ea0 <col:25, col:40> col:40 mbox 'struct k_mbox *'
| `-FullComment 0x555f55f19120 <line:3942:3, line:3950:1>
|   |-ParagraphComment 0x555f55f18d60 <line:3942:3>
|   | `-TextComment 0x555f55f18d30 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f18d80 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x555f55f18de0 <col:10, col:31>
|   |   `-TextComment 0x555f55f18db0 <col:10, col:31> Text=" Initialize a mailbox."
|   |-ParagraphComment 0x555f55f18e30 <line:3944:3, col:69>
|   | `-TextComment 0x555f55f18e00 <col:3, col:69> Text=" This routine initializes a mailbox object, prior to its first use."
|   |-ParagraphComment 0x555f55f18e80 <line:3946:3>
|   | `-TextComment 0x555f55f18e50 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f18ea0 <col:4, col:38> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x555f55f18f30 <col:15, col:38>
|   |   `-TextComment 0x555f55f18f00 <col:15, col:38> Text=" Address of the mailbox."
|   |-ParagraphComment 0x555f55f18f80 <line:3948:3>
|   | `-TextComment 0x555f55f18f50 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f18fa0 <col:4, line:3949:3> Name="return"
|   | `-ParagraphComment 0x555f55f19020 <line:3948:11, line:3949:3>
|   |   |-TextComment 0x555f55f18fd0 <line:3948:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f18ff0 <line:3949:3> Text=" "
|   |-VerbatimLineComment 0x555f55f19040 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x555f55f190b0 <line:3950:1>
|     `-TextComment 0x555f55f19080 <col:1> Text=" "
|-FunctionDecl 0x555f55e77358 <line:3973:1, line:3974:22> line:3973:12 k_mbox_put 'int (struct k_mbox *, struct k_mbox_msg *, s32_t)' extern
| |-ParmVarDecl 0x555f55e770a0 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x555f55e771b0 <col:44, col:63> col:63 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x555f55e77220 <line:3974:9, col:15> col:15 timeout 's32_t':'int'
| `-FullComment 0x555f55f19950 <line:3954:3, line:3972:1>
|   |-ParagraphComment 0x555f55f191c0 <line:3954:3>
|   | `-TextComment 0x555f55f19190 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f191e0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x555f55f19240 <col:10, col:57>
|   |   `-TextComment 0x555f55f19210 <col:10, col:57> Text=" Send a mailbox message in a synchronous manner."
|   |-ParagraphComment 0x555f55f19360 <line:3956:3, line:3958:55>
|   | |-TextComment 0x555f55f19260 <line:3956:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x555f55f192b0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x555f55f192d0 <col:43, col:75> Text=" and waits for a receiver to both"
|   | |-TextComment 0x555f55f192f0 <line:3957:3, col:75> Text=" receive and process it. The message data may be in a buffer, in a memory"
|   | `-TextComment 0x555f55f19310 <line:3958:3, col:55> Text=" pool block, or non-existent (i.e. an empty message)."
|   |-ParagraphComment 0x555f55f193b0 <line:3960:3>
|   | `-TextComment 0x555f55f19380 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f193d0 <col:4, line:3961:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x555f55f19480 <line:3960:15, line:3961:3>
|   |   |-TextComment 0x555f55f19430 <line:3960:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x555f55f19450 <line:3961:3> Text=" "
|   |-ParamCommandComment 0x555f55f194a0 <col:4, line:3962:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x555f55f19550 <line:3961:17, line:3962:3>
|   |   |-TextComment 0x555f55f19500 <line:3961:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x555f55f19520 <line:3962:3> Text=" "
|   |-ParamCommandComment 0x555f55f19570 <col:4, line:3966:45> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x555f55f196a0 <line:3962:18, line:3966:45>
|   |   |-TextComment 0x555f55f195d0 <line:3962:18, col:80> Text=" Non-negative waiting period for the message to be received (in"
|   |   |-TextComment 0x555f55f195f0 <line:3963:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   |-TextComment 0x555f55f19610 <line:3964:3, col:68> Text="                and K_FOREVER. Once the message has been received,"
|   |   |-TextComment 0x555f55f19630 <line:3965:3, col:73> Text="                this routine waits as long as necessary for the message"
|   |   `-TextComment 0x555f55f19650 <line:3966:3, col:45> Text="                to be completely processed."
|   |-ParagraphComment 0x555f55f19850 <line:3968:3, line:3971:3>
|   | |-TextComment 0x555f55f196c0 <line:3968:3> Text=" "
|   | |-InlineCommandComment 0x555f55f196e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f19700 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x555f55f19720 <line:3969:3> Text=" "
|   | |-InlineCommandComment 0x555f55f19740 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f19760 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x555f55f19780 <line:3970:3> Text=" "
|   | |-InlineCommandComment 0x555f55f197a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f197c0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x555f55f197e0 <line:3971:3> Text=" "
|   |-VerbatimLineComment 0x555f55f19870 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x555f55f198e0 <line:3972:1>
|     `-TextComment 0x555f55f198b0 <col:1> Text=" "
|-FunctionDecl 0x555f55e776a0 <line:3992:1, line:3993:26> line:3992:13 k_mbox_async_put 'void (struct k_mbox *, struct k_mbox_msg *, struct k_sem *)' extern
| |-ParmVarDecl 0x555f55e77460 <col:30, col:45> col:45 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x555f55e774e8 <col:51, col:70> col:70 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x555f55e77570 <line:3993:9, col:23> col:23 sem 'struct k_sem *'
| `-FullComment 0x555f55f1a0d0 <line:3977:3, line:3991:1>
|   |-ParagraphComment 0x555f55f199f0 <line:3977:3>
|   | `-TextComment 0x555f55f199c0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f19a10 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x555f55f19a70 <col:10, col:59>
|   |   `-TextComment 0x555f55f19a40 <col:10, col:59> Text=" Send a mailbox message in an asynchronous manner."
|   |-ParagraphComment 0x555f55f19c30 <line:3979:3, line:3983:29>
|   | |-TextComment 0x555f55f19a90 <line:3979:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x555f55f19ae0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x555f55f19b00 <col:43, col:73> Text=" without waiting for a receiver"
|   | |-TextComment 0x555f55f19b20 <line:3980:3, col:78> Text=" to process it. The message data may be in a buffer, in a memory pool block,"
|   | |-TextComment 0x555f55f19b40 <line:3981:3, col:70> Text=" or non-existent (i.e. an empty message). Optionally, the semaphore "
|   | |-InlineCommandComment 0x555f55f19b90 <col:71, col:72> Name="a" RenderEmphasized Arg[0]="sem"
|   | |-TextComment 0x555f55f19bb0 <line:3982:3, col:71> Text=" will be given when the message has been both received and completely"
|   | `-TextComment 0x555f55f19bd0 <line:3983:3, col:29> Text=" processed by the receiver."
|   |-ParagraphComment 0x555f55f19c80 <line:3985:3>
|   | `-TextComment 0x555f55f19c50 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f19ca0 <col:4, line:3986:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x555f55f19d50 <line:3985:15, line:3986:3>
|   |   |-TextComment 0x555f55f19d00 <line:3985:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x555f55f19d20 <line:3986:3> Text=" "
|   |-ParamCommandComment 0x555f55f19d70 <col:4, line:3987:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x555f55f19e20 <line:3986:17, line:3987:3>
|   |   |-TextComment 0x555f55f19dd0 <line:3986:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x555f55f19df0 <line:3987:3> Text=" "
|   |-ParamCommandComment 0x555f55f19e40 <col:4, col:64> [in] implicitly Param="sem" ParamIndex=2
|   | `-ParagraphComment 0x555f55f19ed0 <col:14, col:64>
|   |   `-TextComment 0x555f55f19ea0 <col:14, col:64> Text=" Address of a semaphore, or NULL if none is needed."
|   |-ParagraphComment 0x555f55f19f20 <line:3989:3>
|   | `-TextComment 0x555f55f19ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f19f40 <col:4, line:3990:3> Name="return"
|   | `-ParagraphComment 0x555f55f19fc0 <line:3989:11, line:3990:3>
|   |   |-TextComment 0x555f55f19f70 <line:3989:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f19f90 <line:3990:3> Text=" "
|   |-VerbatimLineComment 0x555f55f19fe0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x555f55f1a050 <line:3991:1>
|     `-TextComment 0x555f55f1a020 <col:1> Text=" "
|-FunctionDecl 0x555f55e77a68 <line:4014:1, line:4015:36> line:4014:12 k_mbox_get 'int (struct k_mbox *, struct k_mbox_msg *, void *, s32_t)' extern
| |-ParmVarDecl 0x555f55e777b0 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x555f55e77838 <col:44, col:63> col:63 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x555f55e778b0 <line:4015:9, col:15> col:15 buffer 'void *'
| |-ParmVarDecl 0x555f55e77920 <col:23, col:29> col:29 timeout 's32_t':'int'
| `-FullComment 0x555f55f1a9b0 <line:3996:3, line:4013:1>
|   |-ParagraphComment 0x555f55f1a170 <line:3996:3>
|   | `-TextComment 0x555f55f1a140 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f1a190 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x555f55f1a1f0 <col:10, col:36>
|   |   `-TextComment 0x555f55f1a1c0 <col:10, col:36> Text=" Receive a mailbox message."
|   |-ParagraphComment 0x555f55f1a2e0 <line:3998:3, line:3999:40>
|   | |-TextComment 0x555f55f1a210 <line:3998:3, col:40> Text=" This routine receives a message from "
|   | |-InlineCommandComment 0x555f55f1a260 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="mbox,"
|   | |-TextComment 0x555f55f1a280 <col:49, col:74> Text=" then optionally retrieves"
|   | `-TextComment 0x555f55f1a2a0 <line:3999:3, col:40> Text=" its data and disposes of the message."
|   |-ParagraphComment 0x555f55f1a330 <line:4001:3>
|   | `-TextComment 0x555f55f1a300 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f1a350 <col:4, line:4002:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x555f55f1a400 <line:4001:15, line:4002:3>
|   |   |-TextComment 0x555f55f1a3b0 <line:4001:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x555f55f1a3d0 <line:4002:3> Text=" "
|   |-ParamCommandComment 0x555f55f1a420 <col:4, line:4003:3> [in] implicitly Param="rx_msg" ParamIndex=1
|   | `-ParagraphComment 0x555f55f1a4d0 <line:4002:17, line:4003:3>
|   |   |-TextComment 0x555f55f1a480 <line:4002:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x555f55f1a4a0 <line:4003:3> Text=" "
|   |-ParamCommandComment 0x555f55f1a4f0 <col:4, line:4005:3> [in] implicitly Param="buffer" ParamIndex=2
|   | `-ParagraphComment 0x555f55f1a5d0 <line:4003:17, line:4005:3>
|   |   |-TextComment 0x555f55f1a550 <line:4003:17, col:77> Text=" Address of the buffer to receive data, or NULL to defer data"
|   |   |-TextComment 0x555f55f1a570 <line:4004:3, col:60> Text="               retrieval and message disposal until later."
|   |   `-TextComment 0x555f55f1a590 <line:4005:3> Text=" "
|   |-ParamCommandComment 0x555f55f1a5f0 <col:4, line:4007:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x555f55f1a6d0 <line:4005:18, line:4007:32>
|   |   |-TextComment 0x555f55f1a650 <line:4005:18, col:78> Text=" Non-negative waiting period for a message to be received (in"
|   |   |-TextComment 0x555f55f1a670 <line:4006:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x555f55f1a690 <line:4007:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x555f55f1a8a0 <line:4009:3, line:4012:3>
|   | |-TextComment 0x555f55f1a6f0 <line:4009:3> Text=" "
|   | |-InlineCommandComment 0x555f55f1a710 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f1a730 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x555f55f1a750 <line:4010:3> Text=" "
|   | |-InlineCommandComment 0x555f55f1a770 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f1a790 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x555f55f1a7b0 <line:4011:3> Text=" "
|   | |-InlineCommandComment 0x555f55f1a7d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f1a810 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x555f55f1a830 <line:4012:3> Text=" "
|   |-VerbatimLineComment 0x555f55f1a8c0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x555f55f1a930 <line:4013:1>
|     `-TextComment 0x555f55f1a900 <col:1> Text=" "
|-FunctionDecl 0x555f55e77d10 <line:4033:1, col:68> col:13 k_mbox_data_get 'void (struct k_mbox_msg *, void *)' extern
| |-ParmVarDecl 0x555f55e77b80 <col:29, col:48> col:48 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x555f55e77bf8 <col:56, col:62> col:62 buffer 'void *'
| `-FullComment 0x555f55f1afa0 <line:4018:3, line:4032:1>
|   |-ParagraphComment 0x555f55f1aa50 <line:4018:3>
|   | `-TextComment 0x555f55f1aa20 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f1aa70 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x555f55f1aad0 <col:10, col:54>
|   |   `-TextComment 0x555f55f1aaa0 <col:10, col:54> Text=" Retrieve mailbox message data into a buffer."
|   |-ParagraphComment 0x555f55f1ab40 <line:4020:3, line:4021:57>
|   | |-TextComment 0x555f55f1aaf0 <line:4020:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | `-TextComment 0x555f55f1ab10 <line:4021:3, col:57> Text=" its data into a buffer, then disposing of the message."
|   |-ParagraphComment 0x555f55f1abb0 <line:4023:3, line:4024:31>
|   | |-TextComment 0x555f55f1ab60 <line:4023:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | `-TextComment 0x555f55f1ab80 <line:4024:3, col:31> Text=" without retrieving its data."
|   |-ParagraphComment 0x555f55f1ac00 <line:4026:3>
|   | `-TextComment 0x555f55f1abd0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f1ac20 <col:4, line:4027:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x555f55f1acd0 <line:4026:17, line:4027:3>
|   |   |-TextComment 0x555f55f1ac80 <line:4026:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x555f55f1aca0 <line:4027:3> Text=" "
|   |-ParamCommandComment 0x555f55f1acf0 <col:4, line:4028:26> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x555f55f1ada0 <line:4027:17, line:4028:26>
|   |   |-TextComment 0x555f55f1ad50 <line:4027:17, col:74> Text=" Address of the buffer to receive data, or NULL to discard"
|   |   `-TextComment 0x555f55f1ad70 <line:4028:3, col:26> Text="               the data."
|   |-ParagraphComment 0x555f55f1adf0 <line:4030:3>
|   | `-TextComment 0x555f55f1adc0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f1ae10 <col:4, line:4031:3> Name="return"
|   | `-ParagraphComment 0x555f55f1ae90 <line:4030:11, line:4031:3>
|   |   |-TextComment 0x555f55f1ae40 <line:4030:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f1ae60 <line:4031:3> Text=" "
|   |-VerbatimLineComment 0x555f55f1aeb0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x555f55f1af20 <line:4032:1>
|     `-TextComment 0x555f55f1aef0 <col:1> Text=" "
|-FunctionDecl 0x555f55e78148 <line:4066:1, line:4068:46> line:4066:12 k_mbox_data_block_get 'int (struct k_mbox_msg *, struct k_mem_pool *, struct k_mem_block *, s32_t)' extern
| |-ParmVarDecl 0x555f55e77e28 <col:34, col:53> col:53 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x555f55e77eb0 <line:4067:6, col:25> col:25 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x555f55e77f90 <line:4068:6, col:26> col:26 block 'struct k_mem_block *'
| |-ParmVarDecl 0x555f55e78000 <col:33, col:39> col:39 timeout 's32_t':'int'
| `-FullComment 0x555f55f1b9d0 <line:4036:3, line:4065:1>
|   |-ParagraphComment 0x555f55f1b040 <line:4036:3>
|   | `-TextComment 0x555f55f1b010 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f1b060 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x555f55f1b0c0 <col:10, col:65>
|   |   `-TextComment 0x555f55f1b090 <col:10, col:65> Text=" Retrieve mailbox message data into a memory pool block."
|   |-ParagraphComment 0x555f55f1b1b0 <line:4038:3, line:4042:42>
|   | |-TextComment 0x555f55f1b0e0 <line:4038:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | |-TextComment 0x555f55f1b100 <line:4039:3, col:68> Text=" its data into a memory pool block, then disposing of the message."
|   | |-TextComment 0x555f55f1b120 <line:4040:3, col:71> Text=" The memory pool block that results from successful retrieval must be"
|   | |-TextComment 0x555f55f1b140 <line:4041:3, col:71> Text=" returned to the pool once the data has been processed, even in cases"
|   | `-TextComment 0x555f55f1b160 <line:4042:3, col:42> Text=" where zero bytes of data are retrieved."
|   |-ParagraphComment 0x555f55f1b250 <line:4044:3, line:4046:33>
|   | |-TextComment 0x555f55f1b1d0 <line:4044:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | |-TextComment 0x555f55f1b1f0 <line:4045:3, col:73> Text=" without retrieving its data. In this case there is no need to return a"
|   | `-TextComment 0x555f55f1b210 <line:4046:3, col:33> Text=" memory pool block to the pool."
|   |-ParagraphComment 0x555f55f1b340 <line:4048:3, line:4052:55>
|   | |-TextComment 0x555f55f1b270 <line:4048:3, col:74> Text=" This routine allocates a new memory pool block for the data only if the"
|   | |-TextComment 0x555f55f1b290 <line:4049:3, col:78> Text=" data is not already in one. If a new block cannot be allocated, the routine"
|   | |-TextComment 0x555f55f1b2b0 <line:4050:3, col:74> Text=" returns a failure code and the received message is left unchanged. This"
|   | |-TextComment 0x555f55f1b2d0 <line:4051:3, col:79> Text=" permits the caller to reattempt data retrieval at a later time or to dispose"
|   | `-TextComment 0x555f55f1b2f0 <line:4052:3, col:55> Text=" of the received message without retrieving its data."
|   |-ParagraphComment 0x555f55f1b390 <line:4054:3>
|   | `-TextComment 0x555f55f1b360 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f1b3b0 <col:4, line:4055:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x555f55f1b460 <line:4054:17, line:4055:3>
|   |   |-TextComment 0x555f55f1b410 <line:4054:17, col:57> Text=" Address of a receive message descriptor."
|   |   `-TextComment 0x555f55f1b430 <line:4055:3> Text=" "
|   |-ParamCommandComment 0x555f55f1b480 <col:4, line:4056:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x555f55f1b530 <line:4055:15, line:4056:3>
|   |   |-TextComment 0x555f55f1b4e0 <line:4055:15, col:63> Text=" Address of memory pool, or NULL to discard data."
|   |   `-TextComment 0x555f55f1b500 <line:4056:3> Text=" "
|   |-ParamCommandComment 0x555f55f1b550 <col:4, line:4057:3> [in] implicitly Param="block" ParamIndex=2
|   | `-ParagraphComment 0x555f55f1b600 <line:4056:16, line:4057:3>
|   |   |-TextComment 0x555f55f1b5b0 <line:4056:16, col:67> Text=" Address of the area to hold memory pool block info."
|   |   `-TextComment 0x555f55f1b5d0 <line:4057:3> Text=" "
|   |-ParamCommandComment 0x555f55f1b620 <col:4, line:4059:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x555f55f1b700 <line:4057:18, line:4059:32>
|   |   |-TextComment 0x555f55f1b680 <line:4057:18, col:77> Text=" Non-negative waiting period to wait for a memory pool block"
|   |   |-TextComment 0x555f55f1b6a0 <line:4058:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x555f55f1b6c0 <line:4059:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x555f55f1b8b0 <line:4061:3, line:4064:3>
|   | |-TextComment 0x555f55f1b720 <line:4061:3> Text=" "
|   | |-InlineCommandComment 0x555f55f1b740 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f1b760 <col:11, col:28> Text=" 0 Data retrieved."
|   | |-TextComment 0x555f55f1b780 <line:4062:3> Text=" "
|   | |-InlineCommandComment 0x555f55f1b7a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f1b7c0 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x555f55f1b7e0 <line:4063:3> Text=" "
|   | |-InlineCommandComment 0x555f55f1b800 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f1b820 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x555f55f1b840 <line:4064:3> Text=" "
|   |-VerbatimLineComment 0x555f55f1b8d0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x555f55f1b940 <line:4065:1>
|     `-TextComment 0x555f55f1b910 <col:1> Text=" "
|-RecordDecl 0x555f55e78298 prev 0x555f55e37ec0 <line:4079:1, line:4095:1> line:4079:8 struct k_pipe definition
| |-FullComment 0x555f55f1baa0 <line:4078:4, col:19>
| | `-ParagraphComment 0x555f55f1ba70 <col:4, col:19>
| |   `-TextComment 0x555f55f1ba40 <col:4, col:19> Text=" Pipe Structure "
| |-FieldDecl 0x555f55e78338 <line:4080:2, col:17> col:17 buffer 'unsigned char *'
| | `-FullComment 0x555f55f1bb70 <col:38, col:63>
| |   `-ParagraphComment 0x555f55f1bb40 <col:38, col:63>
| |     `-TextComment 0x555f55f1bb10 <col:38, col:63> Text=" Pipe buffer: may be NULL "
| |-FieldDecl 0x555f55e783b8 <line:4081:2, col:17> col:17 size 'size_t':'unsigned long'
| | `-FullComment 0x555f55f1bc40 <col:38, col:50>
| |   `-ParagraphComment 0x555f55f1bc10 <col:38, col:50>
| |     `-TextComment 0x555f55f1bbe0 <col:38, col:50> Text=" Buffer size "
| |-FieldDecl 0x555f55e78438 <line:4082:2, col:17> col:17 bytes_used 'size_t':'unsigned long'
| | `-FullComment 0x555f55f1bd10 <col:38, col:61>
| |   `-ParagraphComment 0x555f55f1bce0 <col:38, col:61>
| |     `-TextComment 0x555f55f1bcb0 <col:38, col:61> Text=" # bytes used in buffer "
| |-FieldDecl 0x555f55e784b8 <line:4083:2, col:17> col:17 read_index 'size_t':'unsigned long'
| | `-FullComment 0x555f55f1bde0 <col:38, col:67>
| |   `-ParagraphComment 0x555f55f1bdb0 <col:38, col:67>
| |     `-TextComment 0x555f55f1bd80 <col:38, col:67> Text=" Where in buffer to read from "
| |-FieldDecl 0x555f55e78538 <line:4084:2, col:17> col:17 write_index 'size_t':'unsigned long'
| | `-FullComment 0x555f55f1beb0 <col:38, col:63>
| |   `-ParagraphComment 0x555f55f1be80 <col:38, col:63>
| |     `-TextComment 0x555f55f1be50 <col:38, col:63> Text=" Where in buffer to write "
| |-FieldDecl 0x555f55e785c8 <line:4085:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x555f55f1bf80 <col:31, col:52>
| |   `-ParagraphComment 0x555f55f1bf50 <col:31, col:52>
| |     `-TextComment 0x555f55f1bf20 <col:31, col:52> Text=" Synchronization lock "
| |-RecordDecl 0x555f55e78638 <line:4087:2, line:4090:2> line:4087:2 struct definition
| | |-FieldDecl 0x555f55e786f0 <line:4088:3, col:18> col:18 readers '_wait_q_t':'_wait_q_t'
| | | `-FullComment 0x555f55f1c050 <col:31, col:49>
| | |   `-ParagraphComment 0x555f55f1c020 <col:31, col:49>
| | |     `-TextComment 0x555f55f1bff0 <col:31, col:49> Text=" Reader wait queue "
| | `-FieldDecl 0x555f55e78778 <line:4089:3, col:18> col:18 writers '_wait_q_t':'_wait_q_t'
| |   `-FullComment 0x555f55f1c120 <col:31, col:49>
| |     `-ParagraphComment 0x555f55f1c0f0 <col:31, col:49>
| |       `-TextComment 0x555f55f1c0c0 <col:31, col:49> Text=" Writer wait queue "
| |-FieldDecl 0x555f55e78840 <line:4087:2, line:4090:4> col:4 wait_q 'struct (anonymous struct at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)':'struct k_pipe::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)'
| `-FieldDecl 0x555f55e78898 <line:4094:2, col:14> col:14 flags 'u8_t':'unsigned char'
|   `-FullComment 0x555f55f1c1f0 <col:26, col:32>
|     `-ParagraphComment 0x555f55f1c1c0 <col:26, col:32>
|       `-TextComment 0x555f55f1c190 <col:26, col:32> Text=" Flags "
|-FunctionDecl 0x555f55e78cd0 <line:4158:1, col:73> col:6 k_pipe_init 'void (struct k_pipe *, unsigned char *, size_t)'
| |-ParmVarDecl 0x555f55e78ab0 <col:18, col:33> col:33 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x555f55e78b28 <col:39, col:54> col:54 buffer 'unsigned char *'
| |-ParmVarDecl 0x555f55e78b98 <col:62, col:69> col:69 size 'size_t':'unsigned long'
| `-FullComment 0x555f55f1c880 <line:4145:3, line:4157:1>
|   |-ParagraphComment 0x555f55f1c290 <line:4145:3>
|   | `-TextComment 0x555f55f1c260 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f1c2b0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x555f55f1c310 <col:10, col:28>
|   |   `-TextComment 0x555f55f1c2e0 <col:10, col:28> Text=" Initialize a pipe."
|   |-ParagraphComment 0x555f55f1c360 <line:4147:3, col:66>
|   | `-TextComment 0x555f55f1c330 <col:3, col:66> Text=" This routine initializes a pipe object, prior to its first use."
|   |-ParagraphComment 0x555f55f1c3b0 <line:4149:3>
|   | `-TextComment 0x555f55f1c380 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f1c3d0 <col:4, line:4150:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x555f55f1c480 <line:4149:15, line:4150:3>
|   |   |-TextComment 0x555f55f1c430 <line:4149:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x555f55f1c450 <line:4150:3> Text=" "
|   |-ParamCommandComment 0x555f55f1c4a0 <col:4, line:4152:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x555f55f1c580 <line:4150:17, line:4152:3>
|   |   |-TextComment 0x555f55f1c500 <line:4150:17, col:77> Text=" Address of the pipe's ring buffer, or NULL if no ring buffer"
|   |   |-TextComment 0x555f55f1c520 <line:4151:3, col:25> Text="               is used."
|   |   `-TextComment 0x555f55f1c540 <line:4152:3> Text=" "
|   |-ParamCommandComment 0x555f55f1c5a0 <col:4, line:4153:30> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x555f55f1c650 <line:4152:15, line:4153:30>
|   |   |-TextComment 0x555f55f1c600 <line:4152:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   `-TextComment 0x555f55f1c620 <line:4153:3, col:30> Text="             buffer is used."
|   |-ParagraphComment 0x555f55f1c6a0 <line:4155:3>
|   | `-TextComment 0x555f55f1c670 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f1c6c0 <col:4, line:4156:3> Name="return"
|   | `-ParagraphComment 0x555f55f1c740 <line:4155:11, line:4156:3>
|   |   |-TextComment 0x555f55f1c6f0 <line:4155:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f1c710 <line:4156:3> Text=" "
|   |-VerbatimLineComment 0x555f55f1c760 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x555f55f1c7d0 <line:4157:1>
|     `-TextComment 0x555f55f1c7a0 <col:1> Text=" "
|-FunctionDecl 0x555f55e7a928 <line:4172:1, col:39> col:5 k_pipe_cleanup 'int (struct k_pipe *)'
| |-ParmVarDecl 0x555f55e7a820 <col:20, col:35> col:35 pipe 'struct k_pipe *'
| `-FullComment 0x555f55f1cd40 <line:4161:3, line:4171:1>
|   |-ParagraphComment 0x555f55f1c920 <line:4161:3>
|   | `-TextComment 0x555f55f1c8f0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f1c940 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x555f55f1c9a0 <col:10, col:43>
|   |   `-TextComment 0x555f55f1c970 <col:10, col:43> Text=" Release a pipe's allocated buffer"
|   |-ParagraphComment 0x555f55f1ca40 <line:4163:3, line:4165:46>
|   | |-TextComment 0x555f55f1c9c0 <line:4163:3, col:64> Text=" If a pipe object was given a dynamically allocated buffer via"
|   | |-TextComment 0x555f55f1c9e0 <line:4164:3, col:69> Text=" k_pipe_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x555f55f1ca00 <line:4165:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x555f55f1ca90 <line:4167:3>
|   | `-TextComment 0x555f55f1ca60 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f1cab0 <col:4, line:4170:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x555f55f1cc50 <line:4167:15, line:4170:3>
|   |   |-TextComment 0x555f55f1cb10 <line:4167:15, col:35> Text=" Address of the pipe."
|   |   |-TextComment 0x555f55f1cb30 <line:4168:3> Text=" "
|   |   |-InlineCommandComment 0x555f55f1cb50 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x555f55f1cb70 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x555f55f1cb90 <line:4169:3> Text=" "
|   |   |-InlineCommandComment 0x555f55f1cbb0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x555f55f1cbd0 <col:11, col:37> Text=" -EAGAIN nothing to cleanup"
|   |   `-TextComment 0x555f55f1cbf0 <line:4170:3> Text=" "
|   |-VerbatimLineComment 0x555f55f1cc70 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x555f55f1cce0 <line:4171:1>
|     `-TextComment 0x555f55f1ccb0 <col:1> Text=" "
|-FunctionDecl 0x555f55e7aba8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4190:65> col:15 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x555f55e7aa20 <col:33, col:48> col:48 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x555f55e7aa90 <col:54, col:61> col:61 size 'size_t':'unsigned long'
| `-FullComment 0x555f55f1d360 <line:4175:3, line:4189:1>
|   |-ParagraphComment 0x555f55f1cde0 <line:4175:3>
|   | `-TextComment 0x555f55f1cdb0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f1ce00 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x555f55f1ce60 <col:10, col:56>
|   |   `-TextComment 0x555f55f1ce30 <col:10, col:56> Text=" Initialize a pipe and allocate a buffer for it"
|   |-ParagraphComment 0x555f55f1cf00 <line:4177:3, line:4179:74>
|   | |-TextComment 0x555f55f1ce80 <line:4177:3, col:76> Text=" Storage for the buffer region will be allocated from the calling thread's"
|   | |-TextComment 0x555f55f1cea0 <line:4178:3, col:77> Text=" resource pool. This memory will be released if k_pipe_cleanup() is called,"
|   | `-TextComment 0x555f55f1cec0 <line:4179:3, col:74> Text=" or userspace is enabled and the pipe object loses all references to it."
|   |-ParagraphComment 0x555f55f1cf50 <line:4181:3, col:69>
|   | `-TextComment 0x555f55f1cf20 <col:3, col:69> Text=" This function should only be called on uninitialized pipe objects."
|   |-ParagraphComment 0x555f55f1cfa0 <line:4183:3>
|   | `-TextComment 0x555f55f1cf70 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f1cfc0 <col:4, line:4184:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x555f55f1d070 <line:4183:15, line:4184:3>
|   |   |-TextComment 0x555f55f1d020 <line:4183:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x555f55f1d040 <line:4184:3> Text=" "
|   |-ParamCommandComment 0x555f55f1d090 <col:4, line:4188:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x555f55f1d260 <line:4184:15, line:4188:3>
|   |   |-TextComment 0x555f55f1d0f0 <line:4184:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   |-TextComment 0x555f55f1d110 <line:4185:3, col:30> Text="             buffer is used."
|   |   |-TextComment 0x555f55f1d130 <line:4186:3> Text=" "
|   |   |-InlineCommandComment 0x555f55f1d150 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x555f55f1d170 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x555f55f1d190 <line:4187:3> Text=" "
|   |   |-InlineCommandComment 0x555f55f1d1b0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x555f55f1d1d0 <col:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x555f55f1d1f0 <line:4188:3> Text=" "
|   |-VerbatimLineComment 0x555f55f1d280 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x555f55f1d2f0 <line:4189:1>
|     `-TextComment 0x555f55f1d2c0 <col:1> Text=" "
|-FunctionDecl 0x555f55e7b098 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4214:35> line:4212:15 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x555f55e7acb0 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x555f55e7ad28 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x555f55e7ad98 <line:4213:5, col:12> col:12 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55e7ae38 <col:28, col:36> col:36 bytes_written 'size_t *'
| |-ParmVarDecl 0x555f55e7aea8 <line:4214:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55e7af18 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x555f55f1ded0 <line:4193:3, line:4211:1>
|   |-ParagraphComment 0x555f55f1d400 <line:4193:3>
|   | `-TextComment 0x555f55f1d3d0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f1d420 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x555f55f1d480 <col:10, col:31>
|   |   `-TextComment 0x555f55f1d450 <col:10, col:31> Text=" Write data to a pipe."
|   |-ParagraphComment 0x555f55f1d5a0 <line:4195:3, col:66>
|   | |-TextComment 0x555f55f1d4a0 <col:3, col:29> Text=" This routine writes up to "
|   | |-InlineCommandComment 0x555f55f1d4f0 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bytes_to_write"
|   | |-TextComment 0x555f55f1d510 <col:47, col:64> Text=" bytes of data to "
|   | `-InlineCommandComment 0x555f55f1d560 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x555f55f1d5f0 <line:4197:3>
|   | `-TextComment 0x555f55f1d5c0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f1d610 <col:4, line:4198:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x555f55f1d6c0 <line:4197:15, line:4198:3>
|   |   |-TextComment 0x555f55f1d670 <line:4197:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x555f55f1d690 <line:4198:3> Text=" "
|   |-ParamCommandComment 0x555f55f1d6e0 <col:4, line:4199:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x555f55f1d790 <line:4198:15, line:4199:3>
|   |   |-TextComment 0x555f55f1d740 <line:4198:15, col:40> Text=" Address of data to write."
|   |   `-TextComment 0x555f55f1d760 <line:4199:3> Text=" "
|   |-ParamCommandComment 0x555f55f1d7b0 <col:4, line:4200:3> [in] implicitly Param="bytes_to_write" ParamIndex=2
|   | `-ParagraphComment 0x555f55f1d860 <line:4199:25, line:4200:3>
|   |   |-TextComment 0x555f55f1d810 <line:4199:25, col:49> Text=" Size of data (in bytes)."
|   |   `-TextComment 0x555f55f1d830 <line:4200:3> Text=" "
|   |-ParamCommandComment 0x555f55f1d880 <col:4, line:4201:3> [in] implicitly Param="bytes_written" ParamIndex=3
|   | `-ParagraphComment 0x555f55f1d930 <line:4200:24, line:4201:3>
|   |   |-TextComment 0x555f55f1d8e0 <line:4200:24, col:76> Text=" Address of area to hold the number of bytes written."
|   |   `-TextComment 0x555f55f1d900 <line:4201:3> Text=" "
|   |-ParamCommandComment 0x555f55f1d950 <col:4, line:4202:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x555f55f1da00 <line:4201:19, line:4202:3>
|   |   |-TextComment 0x555f55f1d9b0 <line:4201:19, col:52> Text=" Minimum number of bytes to write."
|   |   `-TextComment 0x555f55f1d9d0 <line:4202:3> Text=" "
|   |-ParamCommandComment 0x555f55f1da20 <col:4, line:4204:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x555f55f1db00 <line:4202:18, line:4204:32>
|   |   |-TextComment 0x555f55f1da80 <line:4202:18, col:80> Text=" Non-negative waiting period to wait for the data to be written"
|   |   |-TextComment 0x555f55f1daa0 <line:4203:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x555f55f1dac0 <line:4204:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x555f55f1ddb0 <line:4206:3, line:4210:3>
|   | |-TextComment 0x555f55f1db20 <line:4206:3> Text=" "
|   | |-InlineCommandComment 0x555f55f1db40 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f1db60 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x555f55f1dbb0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x555f55f1dbd0 <col:34, col:61> Text=" bytes of data were written."
|   | |-TextComment 0x555f55f1dbf0 <line:4207:3> Text=" "
|   | |-InlineCommandComment 0x555f55f1dc10 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f1dc30 <col:11, col:71> Text=" -EIO Returned without waiting; zero data bytes were written."
|   | |-TextComment 0x555f55f1dc50 <line:4208:3> Text=" "
|   | |-InlineCommandComment 0x555f55f1dc70 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f1dc90 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x555f55f1dce0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x555f55f1dd00 <line:4209:3, col:53> Text="                 minus one data bytes were written."
|   | `-TextComment 0x555f55f1dd20 <line:4210:3> Text=" "
|   |-VerbatimLineComment 0x555f55f1ddd0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x555f55f1de40 <line:4211:1>
|     `-TextComment 0x555f55f1de10 <col:1> Text=" "
|-FunctionDecl 0x555f55e7b4b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4239:35> line:4237:15 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x555f55e7b1c0 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x555f55e7b238 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x555f55e7b2a8 <line:4238:5, col:12> col:12 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55e7b318 <col:27, col:35> col:35 bytes_read 'size_t *'
| |-ParmVarDecl 0x555f55e7b388 <line:4239:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55e7b3f8 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x555f55f1ead0 <line:4217:3, line:4236:1>
|   |-ParagraphComment 0x555f55f1df70 <line:4217:3>
|   | `-TextComment 0x555f55f1df40 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f1df90 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x555f55f1dff0 <col:10, col:32>
|   |   `-TextComment 0x555f55f1dfc0 <col:10, col:32> Text=" Read data from a pipe."
|   |-ParagraphComment 0x555f55f1e110 <line:4219:3, col:66>
|   | |-TextComment 0x555f55f1e010 <col:3, col:28> Text=" This routine reads up to "
|   | |-InlineCommandComment 0x555f55f1e060 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="bytes_to_read"
|   | |-TextComment 0x555f55f1e080 <col:45, col:64> Text=" bytes of data from "
|   | `-InlineCommandComment 0x555f55f1e0d0 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x555f55f1e160 <line:4221:3>
|   | `-TextComment 0x555f55f1e130 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f1e180 <col:4, line:4222:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x555f55f1e230 <line:4221:15, line:4222:3>
|   |   |-TextComment 0x555f55f1e1e0 <line:4221:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x555f55f1e200 <line:4222:3> Text=" "
|   |-ParamCommandComment 0x555f55f1e250 <col:4, line:4223:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x555f55f1e300 <line:4222:15, line:4223:3>
|   |   |-TextComment 0x555f55f1e2b0 <line:4222:15, col:56> Text=" Address to place the data read from pipe."
|   |   `-TextComment 0x555f55f1e2d0 <line:4223:3> Text=" "
|   |-ParamCommandComment 0x555f55f1e320 <col:4, line:4224:3> [in] implicitly Param="bytes_to_read" ParamIndex=2
|   | `-ParagraphComment 0x555f55f1e3d0 <line:4223:24, line:4224:3>
|   |   |-TextComment 0x555f55f1e380 <line:4223:24, col:61> Text=" Maximum number of data bytes to read."
|   |   `-TextComment 0x555f55f1e3a0 <line:4224:3> Text=" "
|   |-ParamCommandComment 0x555f55f1e3f0 <col:4, line:4225:3> [in] implicitly Param="bytes_read" ParamIndex=3
|   | `-ParagraphComment 0x555f55f1e4a0 <line:4224:21, line:4225:3>
|   |   |-TextComment 0x555f55f1e450 <line:4224:21, col:70> Text=" Address of area to hold the number of bytes read."
|   |   `-TextComment 0x555f55f1e470 <line:4225:3> Text=" "
|   |-ParamCommandComment 0x555f55f1e4c0 <col:4, line:4226:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x555f55f1e570 <line:4225:19, line:4226:3>
|   |   |-TextComment 0x555f55f1e520 <line:4225:19, col:56> Text=" Minimum number of data bytes to read."
|   |   `-TextComment 0x555f55f1e540 <line:4226:3> Text=" "
|   |-ParamCommandComment 0x555f55f1e590 <col:4, line:4228:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x555f55f1e670 <line:4226:18, line:4228:32>
|   |   |-TextComment 0x555f55f1e5f0 <line:4226:18, col:77> Text=" Non-negative waiting period to wait for the data to be read"
|   |   |-TextComment 0x555f55f1e610 <line:4227:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x555f55f1e630 <line:4228:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x555f55f1e9b0 <line:4230:3, line:4235:3>
|   | |-TextComment 0x555f55f1e690 <line:4230:3> Text=" "
|   | |-InlineCommandComment 0x555f55f1e6b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f1e6d0 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x555f55f1e720 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x555f55f1e740 <col:34, col:58> Text=" bytes of data were read."
|   | |-TextComment 0x555f55f1e760 <line:4231:3> Text=" "
|   | |-InlineCommandComment 0x555f55f1e780 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f1e7a0 <col:11, col:46> Text=" -EINVAL invalid parameters supplied"
|   | |-TextComment 0x555f55f1e7c0 <line:4232:3> Text=" "
|   | |-InlineCommandComment 0x555f55f1e7e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f1e800 <col:11, col:68> Text=" -EIO Returned without waiting; zero data bytes were read."
|   | |-TextComment 0x555f55f1e830 <line:4233:3> Text=" "
|   | |-InlineCommandComment 0x555f55f1e850 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f1e870 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x555f55f1e8c0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x555f55f1e8e0 <line:4234:3, col:50> Text="                 minus one data bytes were read."
|   | `-TextComment 0x555f55f1e900 <line:4235:3> Text=" "
|   |-VerbatimLineComment 0x555f55f1e9d0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x555f55f1ea40 <line:4236:1>
|     `-TextComment 0x555f55f1ea10 <col:1> Text=" "
|-FunctionDecl 0x555f55e7b8c0 <line:4256:1, line:4257:39> line:4256:13 k_pipe_block_put 'void (struct k_pipe *, struct k_mem_block *, size_t, struct k_sem *)' extern
| |-ParmVarDecl 0x555f55e7b5d0 <col:30, col:45> col:45 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x555f55e7b658 <col:51, col:71> col:71 block 'struct k_mem_block *'
| |-ParmVarDecl 0x555f55e7b6c8 <line:4257:9, col:16> col:16 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55e7b750 <col:22, col:36> col:36 sem 'struct k_sem *'
| `-FullComment 0x555f55f1f350 <line:4242:3, line:4255:1>
|   |-ParagraphComment 0x555f55f1eb70 <line:4242:3>
|   | `-TextComment 0x555f55f1eb40 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f1eb90 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x555f55f1ebf0 <col:10, col:39>
|   |   `-TextComment 0x555f55f1ebc0 <col:10, col:39> Text=" Write memory block to a pipe."
|   |-ParagraphComment 0x555f55f1ede0 <line:4244:3, line:4246:79>
|   | |-TextComment 0x555f55f1ec10 <line:4244:3, col:63> Text=" This routine writes the data contained in a memory block to "
|   | |-InlineCommandComment 0x555f55f1ec60 <col:64, col:65> Name="a" RenderEmphasized Arg[0]="pipe."
|   | |-TextComment 0x555f55f1ec80 <line:4245:3, col:74> Text=" Once all of the data in the block has been written to the pipe, it will"
|   | |-TextComment 0x555f55f1eca0 <line:4246:3, col:25> Text=" free the memory block "
|   | |-InlineCommandComment 0x555f55f1ecf0 <col:26, col:27> Name="a" RenderEmphasized Arg[0]="block"
|   | |-TextComment 0x555f55f1ed10 <col:34, col:57> Text=" and give the semaphore "
|   | |-InlineCommandComment 0x555f55f1ed60 <col:58, col:59> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x555f55f1ed80 <col:64, col:79> Text=" (if specified)."
|   |-ParagraphComment 0x555f55f1ee30 <line:4248:3>
|   | `-TextComment 0x555f55f1ee00 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f1ee50 <col:4, line:4249:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x555f55f1ef00 <line:4248:15, line:4249:3>
|   |   |-TextComment 0x555f55f1eeb0 <line:4248:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x555f55f1eed0 <line:4249:3> Text=" "
|   |-ParamCommandComment 0x555f55f1ef20 <col:4, line:4250:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x555f55f1efd0 <line:4249:16, line:4250:3>
|   |   |-TextComment 0x555f55f1ef80 <line:4249:16, col:52> Text=" Memory block containing data to send"
|   |   `-TextComment 0x555f55f1efa0 <line:4250:3> Text=" "
|   |-ParamCommandComment 0x555f55f1eff0 <col:4, line:4251:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x555f55f1f0a0 <line:4250:15, line:4251:3>
|   |   |-TextComment 0x555f55f1f050 <line:4250:15, col:59> Text=" Number of data bytes in memory block to send"
|   |   `-TextComment 0x555f55f1f070 <line:4251:3> Text=" "
|   |-ParamCommandComment 0x555f55f1f0c0 <col:4, col:61> [in] implicitly Param="sem" ParamIndex=3
|   | `-ParagraphComment 0x555f55f1f150 <col:14, col:61>
|   |   `-TextComment 0x555f55f1f120 <col:14, col:61> Text=" Semaphore to signal upon completion (else NULL)"
|   |-ParagraphComment 0x555f55f1f1a0 <line:4253:3>
|   | `-TextComment 0x555f55f1f170 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f1f1c0 <col:4, line:4254:3> Name="return"
|   | `-ParagraphComment 0x555f55f1f240 <line:4253:11, line:4254:3>
|   |   |-TextComment 0x555f55f1f1f0 <line:4253:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f1f210 <line:4254:3> Text=" "
|   |-VerbatimLineComment 0x555f55f1f260 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x555f55f1f2d0 <line:4255:1>
|     `-TextComment 0x555f55f1f2a0 <col:1> Text=" "
|-RecordDecl 0x555f55e7b9d8 prev 0x555f55e38230 <line:4265:1, line:4275:1> line:4265:8 struct k_mem_slab definition
| |-FullComment 0x555f55f1f470 <line:4262:3, col:24>
| | `-ParagraphComment 0x555f55f1f440 <col:3, col:24>
| |   |-TextComment 0x555f55f1f3c0 <col:3> Text=" "
| |   |-InlineCommandComment 0x555f55f1f3e0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x555f55f1f400 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x555f55e7ba70 <line:4266:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x555f55e7bac8 <line:4267:2, col:8> col:8 referenced num_blocks 'u32_t':'unsigned int'
| |-FieldDecl 0x555f55e7bb20 <line:4268:2, col:9> col:9 block_size 'size_t':'unsigned long'
| |-FieldDecl 0x555f55e7bb80 <line:4269:2, col:8> col:8 buffer 'char *'
| |-FieldDecl 0x555f55e7bbe0 <line:4270:2, col:8> col:8 free_list 'char *'
| `-FieldDecl 0x555f55e7bc38 <line:4271:2, col:8> col:8 referenced num_used 'u32_t':'unsigned int'
|-FunctionDecl 0x555f55e7c098 <line:4351:1, line:4352:42> line:4351:12 k_mem_slab_init 'int (struct k_mem_slab *, void *, size_t, u32_t)' extern
| |-ParmVarDecl 0x555f55e7bdf0 <col:28, col:47> col:47 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x555f55e7be68 <col:53, col:59> col:59 buffer 'void *'
| |-ParmVarDecl 0x555f55e7bed8 <line:4352:7, col:14> col:14 block_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55e7bf48 <col:26, col:32> col:32 num_blocks 'u32_t':'unsigned int'
| `-FullComment 0x555f55f1fe60 <line:4330:3, line:4350:1>
|   |-ParagraphComment 0x555f55f1f510 <line:4330:3>
|   | `-TextComment 0x555f55f1f4e0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f1f530 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x555f55f1f590 <col:10, col:35>
|   |   `-TextComment 0x555f55f1f560 <col:10, col:35> Text=" Initialize a memory slab."
|   |-ParagraphComment 0x555f55f1f5e0 <line:4332:3, col:53>
|   | `-TextComment 0x555f55f1f5b0 <col:3, col:53> Text=" Initializes a memory slab, prior to its first use."
|   |-ParagraphComment 0x555f55f1f870 <line:4334:3, line:4339:51>
|   | |-TextComment 0x555f55f1f600 <line:4334:3, col:37> Text=" The memory slab's buffer contains "
|   | |-InlineCommandComment 0x555f55f1f650 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="slab_num_blocks"
|   | |-TextComment 0x555f55f1f670 <col:56, col:69> Text=" memory blocks"
|   | |-TextComment 0x555f55f1f690 <line:4335:3, col:12> Text=" that are "
|   | |-InlineCommandComment 0x555f55f1f6e0 <col:13, col:14> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | |-TextComment 0x555f55f1f700 <col:31, col:75> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x555f55f1f720 <line:4336:3, col:68> Text=" N-byte boundary matching a word boundary, where N is a power of 2"
|   | |-TextComment 0x555f55f1f740 <line:4337:3, col:42> Text=" (i.e. 4 on 32-bit systems, 8, 16, ...)."
|   | |-TextComment 0x555f55f1f760 <line:4338:3, col:74> Text=" To ensure that each memory block is similarly aligned to this boundary,"
|   | |-TextComment 0x555f55f1f780 <line:4339:3> Text=" "
|   | |-InlineCommandComment 0x555f55f1f7d0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | `-TextComment 0x555f55f1f7f0 <col:22, col:51> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x555f55f1f8c0 <line:4341:3>
|   | `-TextComment 0x555f55f1f890 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f1f8e0 <col:4, line:4342:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x555f55f1f990 <line:4341:15, line:4342:3>
|   |   |-TextComment 0x555f55f1f940 <line:4341:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x555f55f1f960 <line:4342:3> Text=" "
|   |-ParamCommandComment 0x555f55f1f9b0 <col:4, line:4343:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x555f55f1fa60 <line:4342:17, line:4343:3>
|   |   |-TextComment 0x555f55f1fa10 <line:4342:17, col:62> Text=" Pointer to buffer used for the memory blocks."
|   |   `-TextComment 0x555f55f1fa30 <line:4343:3> Text=" "
|   |-ParamCommandComment 0x555f55f1fa80 <col:4, line:4344:3> [in] implicitly Param="block_size" ParamIndex=2
|   | `-ParagraphComment 0x555f55f1fb30 <line:4343:21, line:4344:3>
|   |   |-TextComment 0x555f55f1fae0 <line:4343:21, col:58> Text=" Size of each memory block (in bytes)."
|   |   `-TextComment 0x555f55f1fb00 <line:4344:3> Text=" "
|   |-ParamCommandComment 0x555f55f1fb50 <col:4, col:45> [in] implicitly Param="num_blocks" ParamIndex=3
|   | `-ParagraphComment 0x555f55f1fbe0 <col:21, col:45>
|   |   `-TextComment 0x555f55f1fbb0 <col:21, col:45> Text=" Number of memory blocks."
|   |-ParagraphComment 0x555f55f1fcf0 <line:4346:3, line:4347:40>
|   | |-TextComment 0x555f55f1fc00 <line:4346:3> Text=" "
|   | |-InlineCommandComment 0x555f55f1fc20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f1fc40 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x555f55f1fc60 <line:4347:3> Text=" "
|   | |-InlineCommandComment 0x555f55f1fc80 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x555f55f1fca0 <col:11, col:40> Text=" -EINVAL invalid data supplied"
|   |-ParagraphComment 0x555f55f1fd40 <line:4349:3>
|   | `-TextComment 0x555f55f1fd10 <col:3> Text=" "
|   |-VerbatimLineComment 0x555f55f1fd60 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x555f55f1fdd0 <line:4350:1>
|     `-TextComment 0x555f55f1fda0 <col:1> Text=" "
|-FunctionDecl 0x555f55e7c3d8 <line:4372:1, line:4373:21> line:4372:12 k_mem_slab_alloc 'int (struct k_mem_slab *, void **, s32_t)' extern
| |-ParmVarDecl 0x555f55e7c1b0 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x555f55e7c228 <col:54, col:61> col:61 mem 'void **'
| |-ParmVarDecl 0x555f55e7c298 <line:4373:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x555f55f20670 <line:4355:3, line:4371:1>
|   |-ParagraphComment 0x555f55f1ff00 <line:4355:3>
|   | `-TextComment 0x555f55f1fed0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f1ff20 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x555f55f1ff80 <col:10, col:45>
|   |   `-TextComment 0x555f55f1ff50 <col:10, col:45> Text=" Allocate memory from a memory slab."
|   |-ParagraphComment 0x555f55f1ffd0 <line:4357:3, col:60>
|   | `-TextComment 0x555f55f1ffa0 <col:3, col:60> Text=" This routine allocates a memory block from a memory slab."
|   |-ParagraphComment 0x555f55f20020 <line:4359:3>
|   | `-TextComment 0x555f55f1fff0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f20040 <col:4, line:4360:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x555f55f200f0 <line:4359:15, line:4360:3>
|   |   |-TextComment 0x555f55f200a0 <line:4359:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x555f55f200c0 <line:4360:3> Text=" "
|   |-ParamCommandComment 0x555f55f20110 <col:4, line:4361:3> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x555f55f201c0 <line:4360:14, line:4361:3>
|   |   |-TextComment 0x555f55f20170 <line:4360:14, col:44> Text=" Pointer to block address area."
|   |   `-TextComment 0x555f55f20190 <line:4361:3> Text=" "
|   |-ParamCommandComment 0x555f55f201e0 <col:4, line:4363:52> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x555f55f202c0 <line:4361:18, line:4363:52>
|   |   |-TextComment 0x555f55f20240 <line:4361:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x555f55f20260 <line:4362:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x555f55f20280 <line:4363:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x555f55f20570 <line:4365:3, line:4370:3>
|   | |-TextComment 0x555f55f202e0 <line:4365:3> Text=" "
|   | |-InlineCommandComment 0x555f55f20300 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f20320 <col:11, col:68> Text=" 0 Memory allocated. The block address area pointed at by "
|   | |-InlineCommandComment 0x555f55f20370 <col:69, col:70> Name="a" RenderEmphasized Arg[0]="mem"
|   | |-TextComment 0x555f55f20390 <line:4366:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x555f55f203b0 <line:4367:3> Text=" "
|   | |-InlineCommandComment 0x555f55f203d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f203f0 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x555f55f20410 <line:4368:3> Text=" "
|   | |-InlineCommandComment 0x555f55f20430 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f20450 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x555f55f20470 <line:4369:3> Text=" "
|   | |-InlineCommandComment 0x555f55f20490 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f204b0 <col:11, col:40> Text=" -EINVAL Invalid data supplied"
|   | `-TextComment 0x555f55f204d0 <line:4370:3> Text=" "
|   |-VerbatimLineComment 0x555f55f20590 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x555f55f20600 <line:4371:1>
|     `-TextComment 0x555f55f205d0 <col:1> Text=" "
|-FunctionDecl 0x555f55e7c670 <line:4387:1, col:64> col:13 k_mem_slab_free 'void (struct k_mem_slab *, void **)' extern
| |-ParmVarDecl 0x555f55e7c4e0 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x555f55e7c558 <col:54, col:61> col:61 mem 'void **'
| `-FullComment 0x555f55f20be0 <line:4376:3, line:4386:1>
|   |-ParagraphComment 0x555f55f20710 <line:4376:3>
|   | `-TextComment 0x555f55f206e0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f20730 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x555f55f20790 <col:10, col:51>
|   |   `-TextComment 0x555f55f20760 <col:10, col:51> Text=" Free memory allocated from a memory slab."
|   |-ParagraphComment 0x555f55f20800 <line:4378:3, line:4379:26>
|   | |-TextComment 0x555f55f207b0 <line:4378:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x555f55f207d0 <line:4379:3, col:26> Text=" associated memory slab."
|   |-ParagraphComment 0x555f55f20870 <line:4381:3>
|   | `-TextComment 0x555f55f20840 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f20890 <col:4, line:4382:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x555f55f20940 <line:4381:15, line:4382:3>
|   |   |-TextComment 0x555f55f208f0 <line:4381:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x555f55f20910 <line:4382:3> Text=" "
|   |-ParamCommandComment 0x555f55f20960 <col:4, col:75> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x555f55f209f0 <col:14, col:75>
|   |   `-TextComment 0x555f55f209c0 <col:14, col:75> Text=" Pointer to block address area (as set by k_mem_slab_alloc())."
|   |-ParagraphComment 0x555f55f20a40 <line:4384:3>
|   | `-TextComment 0x555f55f20a10 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f20a60 <col:4, line:4385:3> Name="return"
|   | `-ParagraphComment 0x555f55f20ae0 <line:4384:11, line:4385:3>
|   |   |-TextComment 0x555f55f20a90 <line:4384:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f20ab0 <line:4385:3> Text=" "
|   |-VerbatimLineComment 0x555f55f20b00 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x555f55f20b70 <line:4386:1>
|     `-TextComment 0x555f55f20b40 <col:1> Text=" "
|-FunctionDecl 0x555f55e7d600 <line:4400:1, line:4403:1> line:4400:21 k_mem_slab_num_used_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x555f55e7c770 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x555f55e7d778 <line:4401:1, line:4403:1>
| | `-ReturnStmt 0x555f55e7d738 <line:4402:2, col:15>
| |   `-ImplicitCastExpr 0x555f55e7d720 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x555f55e7d6e8 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_used 0x555f55e7bc38
| |       `-ImplicitCastExpr 0x555f55e7d6d0 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |         `-DeclRefExpr 0x555f55e7d6a8 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x555f55e7c770 'slab' 'struct k_mem_slab *'
| `-FullComment 0x555f55f210c0 <line:4390:3, line:4399:1>
|   |-ParagraphComment 0x555f55f20c80 <line:4390:3>
|   | `-TextComment 0x555f55f20c50 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f20ca0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x555f55f20d00 <col:10, col:57>
|   |   `-TextComment 0x555f55f20cd0 <col:10, col:57> Text=" Get the number of used blocks in a memory slab."
|   |-ParagraphComment 0x555f55f20dd0 <line:4392:3, line:4393:18>
|   | |-TextComment 0x555f55f20d20 <line:4392:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x555f55f20d40 <line:4393:3, col:16> Text=" allocated in "
|   | `-InlineCommandComment 0x555f55f20d90 <col:17, col:18> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x555f55f20e20 <line:4395:3>
|   | `-TextComment 0x555f55f20df0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f20e40 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x555f55f20ed0 <col:15, col:42>
|   |   `-TextComment 0x555f55f20ea0 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x555f55f20f20 <line:4397:3>
|   | `-TextComment 0x555f55f20ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f20f40 <col:4, line:4398:3> Name="return"
|   | `-ParagraphComment 0x555f55f20fc0 <line:4397:11, line:4398:3>
|   |   |-TextComment 0x555f55f20f70 <line:4397:11, col:45> Text=" Number of allocated memory blocks."
|   |   `-TextComment 0x555f55f20f90 <line:4398:3> Text=" "
|   |-VerbatimLineComment 0x555f55f20fe0 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x555f55f21050 <line:4399:1>
|     `-TextComment 0x555f55f21020 <col:1> Text=" "
|-FunctionDecl 0x555f55e7d840 <line:4416:1, line:4419:1> line:4416:21 k_mem_slab_num_free_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x555f55e7d7b8 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x555f55e7daa8 <line:4417:1, line:4419:1>
| | `-ReturnStmt 0x555f55e7da30 <line:4418:2, col:34>
| |   `-BinaryOperator 0x555f55e7da08 <col:9, col:34> 'unsigned int' '-'
| |     |-ImplicitCastExpr 0x555f55e7d9d8 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     | `-MemberExpr 0x555f55e7d928 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_blocks 0x555f55e7bac8
| |     |   `-ImplicitCastExpr 0x555f55e7d910 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x555f55e7d8e8 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x555f55e7d7b8 'slab' 'struct k_mem_slab *'
| |     `-ImplicitCastExpr 0x555f55e7d9f0 <col:28, col:34> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-MemberExpr 0x555f55e7d9a0 <col:28, col:34> 'u32_t':'unsigned int' lvalue ->num_used 0x555f55e7bc38
| |         `-ImplicitCastExpr 0x555f55e7d988 <col:28> 'struct k_mem_slab *' <LValueToRValue>
| |           `-DeclRefExpr 0x555f55e7d960 <col:28> 'struct k_mem_slab *' lvalue ParmVar 0x555f55e7d7b8 'slab' 'struct k_mem_slab *'
| `-FullComment 0x555f55f215a0 <line:4406:3, line:4415:1>
|   |-ParagraphComment 0x555f55f21160 <line:4406:3>
|   | `-TextComment 0x555f55f21130 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f21180 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x555f55f211e0 <col:10, col:59>
|   |   `-TextComment 0x555f55f211b0 <col:10, col:59> Text=" Get the number of unused blocks in a memory slab."
|   |-ParagraphComment 0x555f55f212b0 <line:4408:3, line:4409:20>
|   | |-TextComment 0x555f55f21200 <line:4408:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x555f55f21220 <line:4409:3, col:18> Text=" unallocated in "
|   | `-InlineCommandComment 0x555f55f21270 <col:19, col:20> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x555f55f21300 <line:4411:3>
|   | `-TextComment 0x555f55f212d0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f21320 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x555f55f213b0 <col:15, col:42>
|   |   `-TextComment 0x555f55f21380 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x555f55f21400 <line:4413:3>
|   | `-TextComment 0x555f55f213d0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f21420 <col:4, line:4414:3> Name="return"
|   | `-ParagraphComment 0x555f55f214a0 <line:4413:11, line:4414:3>
|   |   |-TextComment 0x555f55f21450 <line:4413:11, col:47> Text=" Number of unallocated memory blocks."
|   |   `-TextComment 0x555f55f21470 <line:4414:3> Text=" "
|   |-VerbatimLineComment 0x555f55f214c0 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x555f55f21530 <line:4415:1>
|     `-TextComment 0x555f55f21500 <col:1> Text=" "
|-RecordDecl 0x555f55e7dac0 prev 0x555f55e382e0 <line:4427:1, line:4430:1> line:4427:8 struct k_mem_pool definition
| |-FullComment 0x555f55f216c0 <line:4424:3, col:24>
| | `-ParagraphComment 0x555f55f21690 <col:3, col:24>
| |   |-TextComment 0x555f55f21610 <col:3> Text=" "
| |   |-InlineCommandComment 0x555f55f21630 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x555f55f21650 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x555f55e7db68 <line:4428:2, col:27> col:27 base 'struct sys_mem_pool_base':'struct sys_mem_pool_base'
| `-FieldDecl 0x555f55e7dbc0 <line:4429:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x555f55e7e018 <line:4495:1, line:4496:34> line:4495:12 k_mem_pool_alloc 'int (struct k_mem_pool *, struct k_mem_block *, size_t, s32_t)' extern
| |-ParmVarDecl 0x555f55e7dd60 <col:29, col:48> col:48 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x555f55e7dde8 <col:54, col:74> col:74 block 'struct k_mem_block *'
| |-ParmVarDecl 0x555f55e7de58 <line:4496:8, col:15> col:15 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55e7dec8 <col:21, col:27> col:27 timeout 's32_t':'int'
| `-FullComment 0x555f55f21f60 <line:4478:3, line:4494:1>
|   |-ParagraphComment 0x555f55f21760 <line:4478:3>
|   | `-TextComment 0x555f55f21730 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f21780 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x555f55f217e0 <col:10, col:45>
|   |   `-TextComment 0x555f55f217b0 <col:10, col:45> Text=" Allocate memory from a memory pool."
|   |-ParagraphComment 0x555f55f21830 <line:4480:3, col:60>
|   | `-TextComment 0x555f55f21800 <col:3, col:60> Text=" This routine allocates a memory block from a memory pool."
|   |-ParagraphComment 0x555f55f21880 <line:4482:3>
|   | `-TextComment 0x555f55f21850 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f218a0 <col:4, line:4483:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x555f55f21950 <line:4482:15, line:4483:3>
|   |   |-TextComment 0x555f55f21900 <line:4482:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x555f55f21920 <line:4483:3> Text=" "
|   |-ParamCommandComment 0x555f55f21970 <col:4, line:4484:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x555f55f21a20 <line:4483:16, line:4484:3>
|   |   |-TextComment 0x555f55f219d0 <line:4483:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |   `-TextComment 0x555f55f219f0 <line:4484:3> Text=" "
|   |-ParamCommandComment 0x555f55f21a40 <col:4, line:4485:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x555f55f21af0 <line:4484:15, line:4485:3>
|   |   |-TextComment 0x555f55f21aa0 <line:4484:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x555f55f21ac0 <line:4485:3> Text=" "
|   |-ParamCommandComment 0x555f55f21b10 <col:4, line:4487:52> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x555f55f21bf0 <line:4485:18, line:4487:52>
|   |   |-TextComment 0x555f55f21b70 <line:4485:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x555f55f21b90 <line:4486:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x555f55f21bb0 <line:4487:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x555f55f21e50 <line:4489:3, line:4493:3>
|   | |-TextComment 0x555f55f21c10 <line:4489:3> Text=" "
|   | |-InlineCommandComment 0x555f55f21c30 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f21c50 <col:11, col:35> Text=" 0 Memory allocated. The "
|   | |-InlineCommandComment 0x555f55f21ca0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x555f55f21cc0 <col:43, col:72> Text=" field of the block descriptor"
|   | |-TextComment 0x555f55f21ce0 <line:4490:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x555f55f21d00 <line:4491:3> Text=" "
|   | |-InlineCommandComment 0x555f55f21d20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f21d40 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x555f55f21d60 <line:4492:3> Text=" "
|   | |-InlineCommandComment 0x555f55f21d80 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f21da0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x555f55f21dc0 <line:4493:3> Text=" "
|   |-VerbatimLineComment 0x555f55f21e70 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x555f55f21ee0 <line:4494:1>
|     `-TextComment 0x555f55f21eb0 <col:1> Text=" "
|-FunctionDecl 0x555f55e7e2b8 <line:4508:1, col:68> col:14 k_mem_pool_malloc 'void *(struct k_mem_pool *, size_t)' extern
| |-ParmVarDecl 0x555f55e7e130 <col:32, col:51> col:51 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x555f55e7e1a0 <col:57, col:64> col:64 size 'size_t':'unsigned long'
| `-FullComment 0x555f55f22460 <line:4499:3, line:4507:1>
|   |-ParagraphComment 0x555f55f22000 <line:4499:3>
|   | `-TextComment 0x555f55f21fd0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f22020 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x555f55f22080 <col:10, col:68>
|   |   `-TextComment 0x555f55f22050 <col:10, col:68> Text=" Allocate memory from a memory pool with malloc() semantics"
|   |-ParagraphComment 0x555f55f220d0 <line:4501:3, col:47>
|   | `-TextComment 0x555f55f220a0 <col:3, col:47> Text=" Such memory must be released using k_free()."
|   |-ParagraphComment 0x555f55f22120 <line:4503:3>
|   | `-TextComment 0x555f55f220f0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f22140 <col:4, line:4504:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x555f55f221f0 <line:4503:15, line:4504:3>
|   |   |-TextComment 0x555f55f221a0 <line:4503:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x555f55f221c0 <line:4504:3> Text=" "
|   |-ParamCommandComment 0x555f55f22210 <col:4, line:4505:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x555f55f222c0 <line:4504:15, line:4505:3>
|   |   |-TextComment 0x555f55f22270 <line:4504:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x555f55f22290 <line:4505:3> Text=" "
|   |-BlockCommandComment 0x555f55f222e0 <col:4, line:4506:3> Name="return"
|   | `-ParagraphComment 0x555f55f22360 <line:4505:11, line:4506:3>
|   |   |-TextComment 0x555f55f22310 <line:4505:11, col:72> Text=" Address of the allocated memory if successful, otherwise NULL"
|   |   `-TextComment 0x555f55f22330 <line:4506:3> Text=" "
|   |-VerbatimLineComment 0x555f55f22380 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x555f55f223f0 <line:4507:1>
|     `-TextComment 0x555f55f223c0 <col:1> Text=" "
|-FunctionDecl 0x555f55e7e4c0 <line:4521:1, col:54> col:13 k_mem_pool_free 'void (struct k_mem_block *)' extern
| |-ParmVarDecl 0x555f55e7e3c0 <col:29, col:49> col:49 block 'struct k_mem_block *'
| `-FullComment 0x555f55f228f0 <line:4511:3, line:4520:1>
|   |-ParagraphComment 0x555f55f22500 <line:4511:3>
|   | `-TextComment 0x555f55f224d0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f22520 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x555f55f22580 <col:10, col:51>
|   |   `-TextComment 0x555f55f22550 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x555f55f225f0 <line:4513:3, line:4514:15>
|   | |-TextComment 0x555f55f225a0 <line:4513:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x555f55f225c0 <line:4514:3, col:15> Text=" memory pool."
|   |-ParagraphComment 0x555f55f22640 <line:4516:3>
|   | `-TextComment 0x555f55f22610 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f22660 <col:4, col:69> [in] implicitly Param="block" ParamIndex=0
|   | `-ParagraphComment 0x555f55f226f0 <col:16, col:69>
|   |   `-TextComment 0x555f55f226c0 <col:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |-ParagraphComment 0x555f55f22740 <line:4518:3>
|   | `-TextComment 0x555f55f22710 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f22760 <col:4, line:4519:3> Name="return"
|   | `-ParagraphComment 0x555f55f227e0 <line:4518:11, line:4519:3>
|   |   |-TextComment 0x555f55f22790 <line:4518:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f227b0 <line:4519:3> Text=" "
|   |-VerbatimLineComment 0x555f55f22800 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x555f55f22880 <line:4520:1>
|     `-TextComment 0x555f55f22850 <col:1> Text=" "
|-FunctionDecl 0x555f55e80920 <line:4534:1, col:57> col:13 k_mem_pool_free_id 'void (struct k_mem_block_id *)' extern
| |-ParmVarDecl 0x555f55e80820 <col:32, col:55> col:55 id 'struct k_mem_block_id *'
| `-FullComment 0x555f55f22d70 <line:4524:3, line:4533:1>
|   |-ParagraphComment 0x555f55f22990 <line:4524:3>
|   | `-TextComment 0x555f55f22960 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f229b0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x555f55f22a10 <col:10, col:51>
|   |   `-TextComment 0x555f55f229e0 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x555f55f22a80 <line:4526:3, line:4527:14>
|   | |-TextComment 0x555f55f22a30 <line:4526:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x555f55f22a50 <line:4527:3, col:14> Text=" memory pool"
|   |-ParagraphComment 0x555f55f22ad0 <line:4529:3>
|   | `-TextComment 0x555f55f22aa0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f22af0 <col:4, col:37> [in] implicitly Param="id" ParamIndex=0
|   | `-ParagraphComment 0x555f55f22b80 <col:13, col:37>
|   |   `-TextComment 0x555f55f22b50 <col:13, col:37> Text=" Memory block identifier."
|   |-ParagraphComment 0x555f55f22bd0 <line:4531:3>
|   | `-TextComment 0x555f55f22ba0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f22bf0 <col:4, line:4532:3> Name="return"
|   | `-ParagraphComment 0x555f55f22c70 <line:4531:11, line:4532:3>
|   |   |-TextComment 0x555f55f22c20 <line:4531:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f22c40 <line:4532:3> Text=" "
|   |-VerbatimLineComment 0x555f55f22c90 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x555f55f22d00 <line:4533:1>
|     `-TextComment 0x555f55f22cd0 <col:1> Text=" "
|-FunctionDecl 0x555f55e80b78 <line:4557:1, col:34> col:14 k_malloc 'void *(size_t)' extern
| |-ParmVarDecl 0x555f55e80a68 <col:23, col:30> col:30 size 'size_t':'unsigned long'
| `-FullComment 0x555f55f231f0 <line:4547:3, line:4556:1>
|   |-ParagraphComment 0x555f55f22e10 <line:4547:3>
|   | `-TextComment 0x555f55f22de0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f22e30 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x555f55f22e90 <col:10, col:36>
|   |   `-TextComment 0x555f55f22e60 <col:10, col:36> Text=" Allocate memory from heap."
|   |-ParagraphComment 0x555f55f22f00 <line:4549:3, line:4550:39>
|   | |-TextComment 0x555f55f22eb0 <line:4549:3, col:66> Text=" This routine provides traditional malloc() semantics. Memory is"
|   | `-TextComment 0x555f55f22ed0 <line:4550:3, col:39> Text=" allocated from the heap memory pool."
|   |-ParagraphComment 0x555f55f22f50 <line:4552:3>
|   | `-TextComment 0x555f55f22f20 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f22f70 <col:4, col:53> [in] implicitly Param="size" ParamIndex=0
|   | `-ParagraphComment 0x555f55f23000 <col:15, col:53>
|   |   `-TextComment 0x555f55f22fd0 <col:15, col:53> Text=" Amount of memory requested (in bytes)."
|   |-ParagraphComment 0x555f55f23050 <line:4554:3>
|   | `-TextComment 0x555f55f23020 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f23070 <col:4, line:4555:3> Name="return"
|   | `-ParagraphComment 0x555f55f230f0 <line:4554:11, line:4555:3>
|   |   |-TextComment 0x555f55f230a0 <line:4554:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x555f55f230c0 <line:4555:3> Text=" "
|   |-VerbatimLineComment 0x555f55f23110 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x555f55f23180 <line:4556:1>
|     `-TextComment 0x555f55f23150 <col:1> Text=" "
|-FunctionDecl 0x555f55e80ce8 <line:4573:1, col:29> col:13 k_free 'void (void *)' extern
| |-ParmVarDecl 0x555f55e80c60 <col:20, col:26> col:26 ptr 'void *'
| `-FullComment 0x555f55f23770 <line:4560:3, line:4572:1>
|   |-ParagraphComment 0x555f55f23290 <line:4560:3>
|   | `-TextComment 0x555f55f23260 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f232b0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x555f55f23310 <col:10, col:42>
|   |   `-TextComment 0x555f55f232e0 <col:10, col:42> Text=" Free memory allocated from heap."
|   |-ParagraphComment 0x555f55f233b0 <line:4562:3, line:4564:23>
|   | |-TextComment 0x555f55f23330 <line:4562:3, col:71> Text=" This routine provides traditional free() semantics. The memory being"
|   | |-TextComment 0x555f55f23350 <line:4563:3, col:65> Text=" returned must have been allocated from the heap memory pool or"
|   | `-TextComment 0x555f55f23370 <line:4564:3, col:23> Text=" k_mem_pool_malloc()."
|   |-ParagraphComment 0x555f55f23480 <line:4566:3, col:48>
|   | |-TextComment 0x555f55f233d0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x555f55f23420 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="ptr"
|   | `-TextComment 0x555f55f23440 <col:13, col:48> Text=" is NULL, no operation is performed."
|   |-ParagraphComment 0x555f55f234d0 <line:4568:3>
|   | `-TextComment 0x555f55f234a0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f234f0 <col:4, col:53> [in] implicitly Param="ptr" ParamIndex=0
|   | `-ParagraphComment 0x555f55f23580 <col:14, col:53>
|   |   `-TextComment 0x555f55f23550 <col:14, col:53> Text=" Pointer to previously allocated memory."
|   |-ParagraphComment 0x555f55f235d0 <line:4570:3>
|   | `-TextComment 0x555f55f235a0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f235f0 <col:4, line:4571:3> Name="return"
|   | `-ParagraphComment 0x555f55f23670 <line:4570:11, line:4571:3>
|   |   |-TextComment 0x555f55f23620 <line:4570:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f23640 <line:4571:3> Text=" "
|   |-VerbatimLineComment 0x555f55f23690 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x555f55f23700 <line:4572:1>
|     `-TextComment 0x555f55f236d0 <col:1> Text=" "
|-FunctionDecl 0x555f55e80f58 <line:4587:1, col:48> col:14 k_calloc 'void *(size_t, size_t)' extern
| |-ParmVarDecl 0x555f55e80dc8 <col:23, col:30> col:30 nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55e80e38 <col:37, col:44> col:44 size 'size_t':'unsigned long'
| `-FullComment 0x555f55f23cc0 <line:4576:3, line:4586:1>
|   |-ParagraphComment 0x555f55f23810 <line:4576:3>
|   | `-TextComment 0x555f55f237e0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f23830 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x555f55f23890 <col:10, col:48>
|   |   `-TextComment 0x555f55f23860 <col:10, col:48> Text=" Allocate memory from heap, array style"
|   |-ParagraphComment 0x555f55f23900 <line:4578:3, line:4579:50>
|   | |-TextComment 0x555f55f238b0 <line:4578:3, col:66> Text=" This routine provides traditional calloc() semantics. Memory is"
|   | `-TextComment 0x555f55f238d0 <line:4579:3, col:50> Text=" allocated from the heap memory pool and zeroed."
|   |-ParagraphComment 0x555f55f23950 <line:4581:3>
|   | `-TextComment 0x555f55f23920 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f23970 <col:4, line:4582:3> [in] implicitly Param="nmemb" ParamIndex=0
|   | `-ParagraphComment 0x555f55f23a20 <line:4581:16, line:4582:3>
|   |   |-TextComment 0x555f55f239d0 <line:4581:16, col:57> Text=" Number of elements in the requested array"
|   |   `-TextComment 0x555f55f239f0 <line:4582:3> Text=" "
|   |-ParamCommandComment 0x555f55f23a40 <col:4, col:53> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x555f55f23ad0 <col:15, col:53>
|   |   `-TextComment 0x555f55f23aa0 <col:15, col:53> Text=" Size of each array element (in bytes)."
|   |-ParagraphComment 0x555f55f23b20 <line:4584:3>
|   | `-TextComment 0x555f55f23af0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f23b40 <col:4, line:4585:3> Name="return"
|   | `-ParagraphComment 0x555f55f23bc0 <line:4584:11, line:4585:3>
|   |   |-TextComment 0x555f55f23b70 <line:4584:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x555f55f23b90 <line:4585:3> Text=" "
|   |-VerbatimLineComment 0x555f55f23be0 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x555f55f23c50 <line:4586:1>
|     `-TextComment 0x555f55f23c20 <col:1> Text=" "
|-EnumDecl 0x555f55e81038 <line:4600:1, line:4614:1> line:4600:6 _poll_types_bits
| |-EnumConstantDecl 0x555f55e810f0 <line:4602:2> col:2 _POLL_TYPE_IGNORE 'int'
| |-EnumConstantDecl 0x555f55e81138 <line:4605:2> col:2 _POLL_TYPE_SIGNAL 'int'
| |-EnumConstantDecl 0x555f55e81180 <line:4608:2> col:2 _POLL_TYPE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x555f55e811c8 <line:4611:2> col:2 _POLL_TYPE_DATA_AVAILABLE 'int'
| `-EnumConstantDecl 0x555f55e81210 <line:4613:2> col:2 referenced _POLL_NUM_TYPES 'int'
|-EnumDecl 0x555f55e81258 <line:4619:1, line:4636:1> line:4619:6 _poll_states_bits
| |-EnumConstantDecl 0x555f55e81310 <line:4621:2> col:2 _POLL_STATE_NOT_READY 'int'
| |-EnumConstantDecl 0x555f55e81358 <line:4624:2> col:2 _POLL_STATE_SIGNALED 'int'
| |-EnumConstantDecl 0x555f55e813a0 <line:4627:2> col:2 _POLL_STATE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x555f55e813e8 <line:4630:2> col:2 _POLL_STATE_DATA_AVAILABLE 'int'
| |-EnumConstantDecl 0x555f55e81430 <line:4633:2> col:2 _POLL_STATE_CANCELLED 'int'
| `-EnumConstantDecl 0x555f55e81478 <line:4635:2> col:2 referenced _POLL_NUM_STATES 'int'
|-EnumDecl 0x555f55e814e8 <line:4667:1, line:4672:1> line:4667:6 k_poll_modes
| |-EnumConstantDecl 0x555f55e815c0 <line:4669:2, col:28> col:2 K_POLL_MODE_NOTIFY_ONLY 'int'
| | `-IntegerLiteral 0x555f55e815a0 <col:28> 'int' 0
| `-EnumConstantDecl 0x555f55e81608 <line:4671:2> col:2 K_POLL_NUM_MODES 'int'
|-RecordDecl 0x555f55e81650 prev 0x555f55e384f0 <line:4683:1, line:4695:1> line:4683:8 struct k_poll_signal definition
| |-FieldDecl 0x555f55e81718 <line:4685:2, col:14> col:14 poll_events 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x555f55f23d90 <line:4684:5, col:28>
| |   `-ParagraphComment 0x555f55f23d60 <col:5, col:28>
| |     `-TextComment 0x555f55f23d30 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x555f55e82ca0 <line:4691:2, col:15> col:15 referenced signaled 'unsigned int'
| | `-FullComment 0x555f55f23e80 <line:4688:4, line:4689:24>
| |   `-ParagraphComment 0x555f55f23e50 <line:4688:4, line:4689:24>
| |     |-TextComment 0x555f55f23e00 <line:4688:4, col:71> Text=" 1 if the event has been signaled, 0 otherwise. Stays set to 1 until"
| |     `-TextComment 0x555f55f23e20 <line:4689:4, col:24> Text=" user resets it to 0."
| `-FieldDecl 0x555f55e82d30 <line:4694:2, col:6> col:6 result 'int'
|   `-FullComment 0x555f55f23f50 <line:4693:5, col:67>
|     `-ParagraphComment 0x555f55f23f20 <col:5, col:67>
|       `-TextComment 0x555f55f23ef0 <col:5, col:67> Text=" custom result value passed to k_poll_signal_raise() if needed "
|-RecordDecl 0x555f55e82da8 prev 0x555f55e38440 <line:4707:1, line:4737:1> line:4707:8 struct k_poll_event definition
| |-FullComment 0x555f55f24100 <line:4704:3, line:4706:1>
| | |-ParagraphComment 0x555f55f23ff0 <line:4704:3>
| | | `-TextComment 0x555f55f23fc0 <col:3> Text=" "
| | |-BlockCommandComment 0x555f55f24010 <col:4, col:20> Name="brief"
| | | `-ParagraphComment 0x555f55f24070 <col:10, col:20>
| | |   `-TextComment 0x555f55f24040 <col:10, col:20> Text=" Poll Event"
| | `-ParagraphComment 0x555f55f240c0 <line:4706:1>
| |   `-TextComment 0x555f55f24090 <col:1> Text=" "
| |-FieldDecl 0x555f55e82e68 <line:4709:2, col:14> col:14 _node 'sys_dnode_t':'struct _dnode'
| | `-FullComment 0x555f55f241d0 <line:4708:5, col:28>
| |   `-ParagraphComment 0x555f55f241a0 <col:5, col:28>
| |     `-TextComment 0x555f55f24170 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x555f55e82f60 <line:4712:2, col:18> col:18 poller 'struct _poller *'
| | `-FullComment 0x555f55f242a0 <line:4711:5, col:28>
| |   `-ParagraphComment 0x555f55f24270 <col:5, col:28>
| |     `-TextComment 0x555f55f24240 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x555f55e83008 <line:4715:2, col:12> col:8 tag 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x555f55e82fd8 <col:12> 'int' 8
| | `-FullComment 0x555f55f24370 <line:4714:5, col:63>
| |   `-ParagraphComment 0x555f55f24340 <col:5, col:63>
| |     `-TextComment 0x555f55f24310 <col:5, col:63> Text=" optional user-specified tag, opaque, untouched by the API "
| |-FieldDecl 0x555f55e830b0 <line:4718:2, col:13> col:8 type 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x555f55e83078 <col:13> 'int' EnumConstant 0x555f55e81210 '_POLL_NUM_TYPES' 'int'
| | `-FullComment 0x555f55f24440 <line:4717:5, col:67>
| |   `-ParagraphComment 0x555f55f24410 <col:5, col:67>
| |     `-TextComment 0x555f55f243e0 <col:5, col:67> Text=" bitfield of event types (bitwise-ORed K_POLL_TYPE_xxx values) "
| |-FieldDecl 0x555f55e83160 <line:4721:2, col:14> col:8 state 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x555f55e83128 <col:14> 'int' EnumConstant 0x555f55e81478 '_POLL_NUM_STATES' 'int'
| | `-FullComment 0x555f55f24510 <line:4720:5, col:69>
| |   `-ParagraphComment 0x555f55f244e0 <col:5, col:69>
| |     `-TextComment 0x555f55f244b0 <col:5, col:69> Text=" bitfield of event states (bitwise-ORed K_POLL_STATE_xxx values) "
| |-FieldDecl 0x555f55e83208 <line:4724:2, col:13> col:8 mode 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x555f55e831d8 <col:13> 'int' 1
| | `-FullComment 0x555f55f245e0 <line:4723:5, col:47>
| |   `-ParagraphComment 0x555f55f245b0 <col:5, col:47>
| |     `-TextComment 0x555f55f24580 <col:5, col:47> Text=" mode of operation, from enum k_poll_modes "
| |-FieldDecl 0x555f55e83460 <line:4727:2, line:4646:9> line:4727:8 unused 'u32_t':'unsigned int'
| | |-ParenExpr 0x555f55e83430 <line:4641:2, line:4646:9> 'int'
| | | `-BinaryOperator 0x555f55e83408 <line:4641:3, line:4646:8> 'int' '-'
| | |   |-IntegerLiteral 0x555f55e83278 <line:4641:3> 'int' 32
| | |   `-ParenExpr 0x555f55e833e8 <col:8, line:4646:8> 'int'
| | |     `-BinaryOperator 0x555f55e833c0 <line:4641:9, line:4645:11> 'int' '+'
| | |       |-BinaryOperator 0x555f55e83378 <line:4641:9, line:4644:11> 'int' '+'
| | |       | |-BinaryOperator 0x555f55e83328 <line:4641:9, line:4643:11> 'int' '+'
| | |       | | |-BinaryOperator 0x555f55e832d8 <line:4641:9, line:4642:11> 'int' '+'
| | |       | | | |-IntegerLiteral 0x555f55e83298 <line:4641:9> 'int' 0
| | |       | | | `-IntegerLiteral 0x555f55e832b8 <line:4642:11> 'int' 8
| | |       | | `-DeclRefExpr 0x555f55e83300 <line:4643:11> 'int' EnumConstant 0x555f55e81210 '_POLL_NUM_TYPES' 'int'
| | |       | `-DeclRefExpr 0x555f55e83350 <line:4644:11> 'int' EnumConstant 0x555f55e81478 '_POLL_NUM_STATES' 'int'
| | |       `-IntegerLiteral 0x555f55e833a0 <line:4645:11> 'int' 1
| | `-FullComment 0x555f55f246b0 <line:4726:5, col:32>
| |   `-ParagraphComment 0x555f55f24680 <col:5, col:32>
| |     `-TextComment 0x555f55f24650 <col:5, col:32> Text=" unused bits in 32-bit word "
| |-RecordDecl 0x555f55e834d8 <line:4730:2, line:4736:2> line:4730:2 union definition
| | |-FullComment 0x555f55f24780 <line:4729:5, col:19>
| | | `-ParagraphComment 0x555f55f24750 <col:5, col:19>
| | |   `-TextComment 0x555f55f24720 <col:5, col:19> Text=" per-type data "
| | |-FieldDecl 0x555f55e83598 <line:4731:3, col:9> col:9 obj 'void *'
| | |-FieldDecl 0x555f55e83690 <line:4732:3, col:25> col:25 signal 'struct k_poll_signal *'
| | |-FieldDecl 0x555f55e83700 <line:4733:3, col:17> col:17 sem 'struct k_sem *'
| | |-FieldDecl 0x555f55e83800 <line:4734:3, col:18> col:18 fifo 'struct k_fifo *'
| | `-FieldDecl 0x555f55e83870 <line:4735:3, col:19> col:19 queue 'struct k_queue *'
| |-FieldDecl 0x555f55e83910 <line:4730:2> col:2 implicit 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| |-IndirectFieldDecl 0x555f55e83968 <line:4731:9> col:9 implicit obj 'void *'
| | |-Field 0x555f55e83910 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x555f55e83598 'obj' 'void *'
| |-IndirectFieldDecl 0x555f55e839b8 <line:4732:25> col:25 implicit signal 'struct k_poll_signal *'
| | |-Field 0x555f55e83910 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x555f55e83690 'signal' 'struct k_poll_signal *'
| |-IndirectFieldDecl 0x555f55e83a08 <line:4733:17> col:17 implicit sem 'struct k_sem *'
| | |-Field 0x555f55e83910 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x555f55e83700 'sem' 'struct k_sem *'
| |-IndirectFieldDecl 0x555f55e83a58 <line:4734:18> col:18 implicit fifo 'struct k_fifo *'
| | |-Field 0x555f55e83910 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x555f55e83800 'fifo' 'struct k_fifo *'
| `-IndirectFieldDecl 0x555f55e83aa8 <line:4735:19> col:19 implicit queue 'struct k_queue *'
|   |-Field 0x555f55e83910 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
|   `-Field 0x555f55e83870 'queue' 'struct k_queue *'
|-FunctionDecl 0x555f55e847e0 <line:4778:1, line:4779:29> line:4778:13 k_poll_event_init 'void (struct k_poll_event *, u32_t, int, void *)' extern
| |-ParmVarDecl 0x555f55e83b40 <col:31, col:52> col:52 event 'struct k_poll_event *'
| |-ParmVarDecl 0x555f55e83bb0 <col:59, col:65> col:65 type 'u32_t':'unsigned int'
| |-ParmVarDecl 0x555f55e83c28 <line:4779:10, col:14> col:14 mode 'int'
| |-ParmVarDecl 0x555f55e846a0 <col:20, col:26> col:26 obj 'void *'
| `-FullComment 0x555f55f24f20 <line:4761:3, line:4776:1>
|   |-ParagraphComment 0x555f55f24820 <line:4761:3>
|   | `-TextComment 0x555f55f247f0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f24860 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x555f55f248c0 <col:10, col:53>
|   |   `-TextComment 0x555f55f24890 <col:10, col:53> Text=" Initialize one struct k_poll_event instance"
|   |-ParagraphComment 0x555f55f24930 <line:4763:3, line:4764:53>
|   | |-TextComment 0x555f55f248e0 <line:4763:3, col:73> Text=" After this routine is called on a poll event, the event it ready to be"
|   | `-TextComment 0x555f55f24900 <line:4764:3, col:53> Text=" placed in an event array to be passed to k_poll()."
|   |-ParagraphComment 0x555f55f24980 <line:4766:3>
|   | `-TextComment 0x555f55f24950 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f249a0 <col:4, line:4767:3> [in] implicitly Param="event" ParamIndex=0
|   | `-ParagraphComment 0x555f55f24a50 <line:4766:16, line:4767:3>
|   |   |-TextComment 0x555f55f24a00 <line:4766:16, col:40> Text=" The event to initialize."
|   |   `-TextComment 0x555f55f24a20 <line:4767:3> Text=" "
|   |-ParamCommandComment 0x555f55f24a70 <col:4, line:4771:3> [in] implicitly Param="type" ParamIndex=1
|   | `-ParagraphComment 0x555f55f24ba0 <line:4767:15, line:4771:3>
|   |   |-TextComment 0x555f55f24ad0 <line:4767:15, col:73> Text=" A bitfield of the types of event, from the K_POLL_TYPE_xxx"
|   |   |-TextComment 0x555f55f24af0 <line:4768:3, col:77> Text="             values. Only values that apply to the same object being polled"
|   |   |-TextComment 0x555f55f24b10 <line:4769:3, col:77> Text="             can be used together. Choosing K_POLL_TYPE_IGNORE disables the"
|   |   |-TextComment 0x555f55f24b30 <line:4770:3, col:21> Text="             event."
|   |   `-TextComment 0x555f55f24b50 <line:4771:3> Text=" "
|   |-ParamCommandComment 0x555f55f24bc0 <col:4, line:4772:3> [in] implicitly Param="mode" ParamIndex=2
|   | `-ParagraphComment 0x555f55f24c70 <line:4771:15, line:4772:3>
|   |   |-TextComment 0x555f55f24c20 <line:4771:15, col:51> Text=" Future. Use K_POLL_MODE_NOTIFY_ONLY."
|   |   `-TextComment 0x555f55f24c40 <line:4772:3> Text=" "
|   |-ParamCommandComment 0x555f55f24c90 <col:4, col:43> [in] implicitly Param="obj" ParamIndex=3
|   | `-ParagraphComment 0x555f55f24d20 <col:14, col:43>
|   |   `-TextComment 0x555f55f24cf0 <col:14, col:43> Text=" Kernel object or poll signal."
|   |-ParagraphComment 0x555f55f24d70 <line:4774:3>
|   | `-TextComment 0x555f55f24d40 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f24d90 <col:4, line:4775:3> Name="return"
|   | `-ParagraphComment 0x555f55f24e10 <line:4774:11, line:4775:3>
|   |   |-TextComment 0x555f55f24dc0 <line:4774:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f24de0 <line:4775:3> Text=" "
|   |-VerbatimLineComment 0x555f55f24e30 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x555f55f24ea0 <line:4776:1>
|     `-TextComment 0x555f55f24e70 <col:1> Text=" "
|-FunctionDecl 0x555f55e84b18 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4827:21> line:4826:15 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x555f55e848f0 <col:22, col:43> col:43 events 'struct k_poll_event *'
| |-ParmVarDecl 0x555f55e84968 <col:51, col:55> col:55 num_events 'int'
| |-ParmVarDecl 0x555f55e849d8 <line:4827:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x555f55f25b40 <line:4782:3, line:4824:1>
|   |-ParagraphComment 0x555f55f24fc0 <line:4782:3>
|   | `-TextComment 0x555f55f24f90 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f24fe0 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x555f55f25040 <col:10, col:63>
|   |   `-TextComment 0x555f55f25010 <col:10, col:63> Text=" Wait for one or many of multiple poll events to occur"
|   |-ParagraphComment 0x555f55f250e0 <line:4784:3, line:4786:61>
|   | |-TextComment 0x555f55f25060 <line:4784:3, col:71> Text=" This routine allows a thread to wait concurrently for one or many of"
|   | |-TextComment 0x555f55f25080 <line:4785:3, col:76> Text=" multiple poll events to have occurred. Such events can be a kernel object"
|   | `-TextComment 0x555f55f250a0 <line:4786:3, col:61> Text=" being available, like a semaphore, or a poll signal event."
|   |-ParagraphComment 0x555f55f25270 <line:4788:3, line:4796:68>
|   | |-TextComment 0x555f55f25100 <line:4788:3, col:78> Text=" When an event notifies that a kernel object is available, the kernel object"
|   | |-TextComment 0x555f55f25120 <line:4789:3, col:76> Text=" is not "given" to the thread calling k_poll(): it merely signals the fact"
|   | |-TextComment 0x555f55f25140 <line:4790:3, col:76> Text=" that the object was available when the k_poll() call was in effect. Also,"
|   | |-TextComment 0x555f55f25160 <line:4791:3, col:78> Text=" all threads trying to acquire an object the regular way, i.e. by pending on"
|   | |-TextComment 0x555f55f25180 <line:4792:3, col:74> Text=" the object, have precedence over the thread polling on the object. This"
|   | |-TextComment 0x555f55f251a0 <line:4793:3, col:75> Text=" means that the polling thread will never get the poll event on an object"
|   | |-TextComment 0x555f55f251c0 <line:4794:3, col:75> Text=" until the object becomes available and its pend queue is empty. For this"
|   | |-TextComment 0x555f55f251e0 <line:4795:3, col:76> Text=" reason, the k_poll() call is more effective when the objects being polled"
|   | `-TextComment 0x555f55f25200 <line:4796:3, col:68> Text=" only have one thread, the polling thread, trying to acquire them."
|   |-ParagraphComment 0x555f55f25310 <line:4798:3, line:4800:44>
|   | |-TextComment 0x555f55f25290 <line:4798:3, col:78> Text=" When k_poll() returns 0, the caller should loop on all the events that were"
|   | |-TextComment 0x555f55f252b0 <line:4799:3, col:72> Text=" passed to k_poll() and check the state field for the values that were"
|   | `-TextComment 0x555f55f252d0 <line:4800:3, col:44> Text=" expected and take the associated actions."
|   |-ParagraphComment 0x555f55f25380 <line:4802:3, line:4803:41>
|   | |-TextComment 0x555f55f25330 <line:4802:3, col:78> Text=" Before being reused for another call to k_poll(), the user has to reset the"
|   | `-TextComment 0x555f55f25350 <line:4803:3, col:41> Text=" state field to K_POLL_STATE_NOT_READY."
|   |-ParagraphComment 0x555f55f253f0 <line:4805:3, line:4806:30>
|   | |-TextComment 0x555f55f253a0 <line:4805:3, col:77> Text=" When called from user mode, a temporary memory allocation is required from"
|   | `-TextComment 0x555f55f253c0 <line:4806:3, col:30> Text=" the caller's resource pool."
|   |-ParagraphComment 0x555f55f25440 <line:4808:3>
|   | `-TextComment 0x555f55f25410 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f25460 <col:4, line:4809:3> [in] implicitly Param="events" ParamIndex=0
|   | `-ParagraphComment 0x555f55f25510 <line:4808:17, line:4809:3>
|   |   |-TextComment 0x555f55f254c0 <line:4808:17, col:65> Text=" An array of pointers to events to be polled for."
|   |   `-TextComment 0x555f55f254e0 <line:4809:3> Text=" "
|   |-ParamCommandComment 0x555f55f25530 <col:4, line:4810:3> [in] implicitly Param="num_events" ParamIndex=1
|   | `-ParagraphComment 0x555f55f255e0 <line:4809:21, line:4810:3>
|   |   |-TextComment 0x555f55f25590 <line:4809:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x555f55f255b0 <line:4810:3> Text=" "
|   |-ParamCommandComment 0x555f55f25600 <col:4, line:4812:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x555f55f256e0 <line:4810:18, line:4812:28>
|   |   |-TextComment 0x555f55f25660 <line:4810:18, col:74> Text=" Non-negative waiting period for an event to be ready (in"
|   |   |-TextComment 0x555f55f25680 <line:4811:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x555f55f256a0 <line:4812:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x555f55f25a20 <line:4814:3, line:4823:3>
|   | |-TextComment 0x555f55f25700 <line:4814:3> Text=" "
|   | |-InlineCommandComment 0x555f55f25720 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f25740 <col:11, col:42> Text=" 0 One or more events are ready."
|   | |-TextComment 0x555f55f25760 <line:4815:3> Text=" "
|   | |-InlineCommandComment 0x555f55f25780 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f257a0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x555f55f257c0 <line:4816:3> Text=" "
|   | |-InlineCommandComment 0x555f55f257e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f25800 <col:11, col:57> Text=" -EINTR Polling has been interrupted, e.g. with"
|   | |-TextComment 0x555f55f25820 <line:4817:3, col:76> Text="         k_queue_cancel_wait(). All output events are still set and valid,"
|   | |-TextComment 0x555f55f25840 <line:4818:3, col:77> Text="         cancelled event(s) will be set to K_POLL_STATE_CANCELLED. In other"
|   | |-TextComment 0x555f55f25860 <line:4819:3, col:75> Text="         words, -EINTR status means that at least one of output events is"
|   | |-TextComment 0x555f55f25880 <line:4820:3, col:34> Text="         K_POLL_STATE_CANCELLED."
|   | |-TextComment 0x555f55f258a0 <line:4821:3> Text=" "
|   | |-InlineCommandComment 0x555f55f258c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f258e0 <col:11, col:76> Text=" -ENOMEM Thread resource pool insufficient memory (user mode only)"
|   | |-TextComment 0x555f55f25900 <line:4822:3> Text=" "
|   | |-InlineCommandComment 0x555f55f25920 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f25940 <col:11, col:50> Text=" -EINVAL Bad parameters (user mode only)"
|   | `-TextComment 0x555f55f25960 <line:4823:3> Text=" "
|   |-VerbatimLineComment 0x555f55f25a40 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x555f55f25ab0 <line:4824:1>
|     `-TextComment 0x555f55f25a80 <col:1> Text=" "
|-FunctionDecl 0x555f55e84d20 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4840:63> col:16 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x555f55e84c20 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| `-FullComment 0x555f55f25fa0 <line:4830:3, line:4838:1>
|   |-ParagraphComment 0x555f55f25be0 <line:4830:3>
|   | `-TextComment 0x555f55f25bb0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f25c00 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x555f55f25c60 <col:10, col:42>
|   |   `-TextComment 0x555f55f25c30 <col:10, col:42> Text=" Initialize a poll signal object."
|   |-ParagraphComment 0x555f55f25cb0 <line:4832:3, col:71>
|   | `-TextComment 0x555f55f25c80 <col:3, col:71> Text=" Ready a poll signal object to be signaled via k_poll_signal_raise()."
|   |-ParagraphComment 0x555f55f25d00 <line:4834:3>
|   | `-TextComment 0x555f55f25cd0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f25d20 <col:4, col:31> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x555f55f25db0 <col:17, col:31>
|   |   `-TextComment 0x555f55f25d80 <col:17, col:31> Text=" A poll signal."
|   |-ParagraphComment 0x555f55f25e00 <line:4836:3>
|   | `-TextComment 0x555f55f25dd0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f25e20 <col:4, line:4837:3> Name="return"
|   | `-ParagraphComment 0x555f55f25ea0 <line:4836:11, line:4837:3>
|   |   |-TextComment 0x555f55f25e50 <line:4836:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f25e70 <line:4837:3> Text=" "
|   |-VerbatimLineComment 0x555f55f25ec0 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x555f55f25f30 <line:4838:1>
|     `-TextComment 0x555f55f25f00 <col:1> Text=" "
|-FunctionDecl 0x555f55e84e78 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4848:64> col:16 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| `-ParmVarDecl 0x555f55e84df0 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
|-FunctionDecl 0x555f55e84fd0 <line:4850:1, line:4853:1> line:4850:20 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x555f55e84f48 <col:47, col:69> col:69 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x555f55e85168 <line:4851:1, line:4853:1>
|   `-BinaryOperator 0x555f55e85110 <line:4852:2, col:21> 'unsigned int' '='
|     |-MemberExpr 0x555f55e850b8 <col:2, col:10> 'unsigned int' lvalue ->signaled 0x555f55e82ca0
|     | `-ImplicitCastExpr 0x555f55e850a0 <col:2> 'struct k_poll_signal *' <LValueToRValue>
|     |   `-DeclRefExpr 0x555f55e85078 <col:2> 'struct k_poll_signal *' lvalue ParmVar 0x555f55e84f48 'signal' 'struct k_poll_signal *'
|     `-IntegerLiteral 0x555f55e850f0 <col:21> 'unsigned int' 0
|-FunctionDecl 0x555f55e853d0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4867:43> line:4866:16 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x555f55e851a8 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x555f55e85220 <line:4867:8, col:22> col:22 signaled 'unsigned int *'
| |-ParmVarDecl 0x555f55e85298 <col:32, col:37> col:37 result 'int *'
| `-FullComment 0x555f55f264f0 <line:4856:3, line:4865:1>
|   |-ParagraphComment 0x555f55f26040 <line:4856:3>
|   | `-TextComment 0x555f55f26010 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f26060 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x555f55f260c0 <col:10, col:68>
|   |   `-TextComment 0x555f55f26090 <col:10, col:68> Text=" Fetch the signaled state and result value of a poll signal"
|   |-ParagraphComment 0x555f55f26110 <line:4858:3>
|   | `-TextComment 0x555f55f260e0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f26130 <col:4, line:4859:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x555f55f261e0 <line:4858:17, line:4859:3>
|   |   |-TextComment 0x555f55f26190 <line:4858:17, col:37> Text=" A poll signal object"
|   |   `-TextComment 0x555f55f261b0 <line:4859:3> Text=" "
|   |-ParamCommandComment 0x555f55f26200 <col:4, line:4861:3> [in] implicitly Param="signaled" ParamIndex=1
|   | `-ParagraphComment 0x555f55f262e0 <line:4859:19, line:4861:3>
|   |   |-TextComment 0x555f55f26260 <line:4859:19, col:73> Text=" An integer buffer which will be written nonzero if the"
|   |   |-TextComment 0x555f55f26280 <line:4860:3, col:26> Text="		   object was signaled"
|   |   `-TextComment 0x555f55f262a0 <line:4861:3> Text=" "
|   |-ParamCommandComment 0x555f55f26300 <col:4, line:4864:3> [in] implicitly Param="result" ParamIndex=2
|   | `-ParagraphComment 0x555f55f26400 <line:4861:17, line:4864:3>
|   |   |-TextComment 0x555f55f26360 <line:4861:17, col:77> Text=" An integer destination buffer which will be written with the"
|   |   |-TextComment 0x555f55f26380 <line:4862:3, col:63> Text="		   result value if the object was signaled, or an undefined"
|   |   |-TextComment 0x555f55f263a0 <line:4863:3, col:27> Text="		   value if it was not."
|   |   `-TextComment 0x555f55f263c0 <line:4864:3> Text=" "
|   |-VerbatimLineComment 0x555f55f26420 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x555f55f26490 <line:4865:1>
|     `-TextComment 0x555f55f26460 <col:1> Text=" "
|-FunctionDecl 0x555f55e85b20 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4894:75> col:15 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x555f55e854e0 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x555f55e85558 <col:65, col:69> col:69 result 'int'
| `-FullComment 0x555f55f26d70 <line:4870:3, line:4892:1>
|   |-ParagraphComment 0x555f55f26590 <line:4870:3>
|   | `-TextComment 0x555f55f26560 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f265b0 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x555f55f26610 <col:10, col:38>
|   |   `-TextComment 0x555f55f265e0 <col:10, col:38> Text=" Signal a poll signal object."
|   |-ParagraphComment 0x555f55f26730 <line:4872:3, line:4874:57>
|   | |-TextComment 0x555f55f26630 <line:4872:3, col:77> Text=" This routine makes ready a poll signal, which is basically a poll event of"
|   | |-TextComment 0x555f55f26650 <line:4873:3, col:77> Text=" type K_POLL_TYPE_SIGNAL. If a thread was polling on that event, it will be"
|   | |-TextComment 0x555f55f26670 <line:4874:3, col:24> Text=" made ready to run. A "
|   | |-InlineCommandComment 0x555f55f266c0 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="result"
|   | `-TextComment 0x555f55f266e0 <col:34, col:57> Text=" value can be specified."
|   |-ParagraphComment 0x555f55f26820 <line:4876:3, line:4880:27>
|   | |-TextComment 0x555f55f26750 <line:4876:3, col:64> Text=" The poll signal contains a 'signaled' field that, when set by"
|   | |-TextComment 0x555f55f26770 <line:4877:3, col:73> Text=" k_poll_signal_raise(), stays set until the user sets it back to 0 with"
|   | |-TextComment 0x555f55f26790 <line:4878:3, col:74> Text=" k_poll_signal_reset(). It thus has to be reset by the user before being"
|   | |-TextComment 0x555f55f267b0 <line:4879:3, col:76> Text=" passed again to k_poll() or k_poll() will consider it being signaled, and"
|   | `-TextComment 0x555f55f267d0 <line:4880:3, col:27> Text=" will return immediately."
|   |-ParagraphComment 0x555f55f26880 <line:4882:3>
|   | `-TextComment 0x555f55f26840 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f268a0 <col:4, line:4884:65> Name="note"
|   | `-ParagraphComment 0x555f55f26950 <line:4882:9, line:4884:65>
|   |   |-TextComment 0x555f55f268d0 <line:4882:9, col:69> Text=" The result is stored and the 'signaled' field is set even if"
|   |   |-TextComment 0x555f55f268f0 <line:4883:3, col:70> Text=" this function returns an error indicating that an expiring poll was"
|   |   `-TextComment 0x555f55f26910 <line:4884:3, col:65> Text=" not notified.  The next k_poll() will detect the missed raise."
|   |-ParagraphComment 0x555f55f269a0 <line:4886:3>
|   | `-TextComment 0x555f55f26970 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f269c0 <col:4, line:4887:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x555f55f26a70 <line:4886:17, line:4887:3>
|   |   |-TextComment 0x555f55f26a20 <line:4886:17, col:31> Text=" A poll signal."
|   |   `-TextComment 0x555f55f26a40 <line:4887:3> Text=" "
|   |-ParamCommandComment 0x555f55f26a90 <col:4, col:70> [in] implicitly Param="result" ParamIndex=1
|   | `-ParagraphComment 0x555f55f26b20 <col:17, col:70>
|   |   `-TextComment 0x555f55f26af0 <col:17, col:70> Text=" The value to store in the result field of the signal."
|   |-ParagraphComment 0x555f55f26c60 <line:4889:3, line:4891:3>
|   | |-TextComment 0x555f55f26b40 <line:4889:3> Text=" "
|   | |-InlineCommandComment 0x555f55f26b60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f26b80 <col:11, col:51> Text=" 0 The signal was delivered successfully."
|   | |-TextComment 0x555f55f26ba0 <line:4890:3> Text=" "
|   | |-InlineCommandComment 0x555f55f26bc0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x555f55f26be0 <col:11, col:78> Text=" -EAGAIN The polling thread's timeout is in the process of expiring."
|   | `-TextComment 0x555f55f26c00 <line:4891:3> Text=" "
|   |-VerbatimLineComment 0x555f55f26c80 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x555f55f26cf0 <line:4892:1>
|     `-TextComment 0x555f55f26cc0 <col:1> Text=" "
|-FunctionDecl 0x555f55e85d90 <line:4899:1, col:70> col:13 z_handle_obj_poll_events 'void (sys_dlist_t *, u32_t)' extern
| |-ParmVarDecl 0x555f55e85c08 <col:38, col:51> col:51 events 'sys_dlist_t *'
| |-ParmVarDecl 0x555f55e85c78 <col:59, col:65> col:65 state 'u32_t':'unsigned int'
| `-FullComment 0x555f55f26e60 <line:4897:3, col:12>
|   `-ParagraphComment 0x555f55f26e30 <col:3, col:12>
|     |-TextComment 0x555f55f26de0 <col:3> Text=" "
|     `-InlineCommandComment 0x555f55f26e00 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x555f55e85f28 <line:4921:1, line:4924:1> line:4921:20 k_cpu_idle 'void (void)' static inline
| |-CompoundStmt 0x555f55e86058 <line:4922:1, line:4924:1>
| | `-CallExpr 0x555f55e86008 <line:4923:2, col:16> 'void'
| |   `-ImplicitCastExpr 0x555f55e85ff0 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
| |     `-DeclRefExpr 0x555f55e85fc8 <col:2> 'void (void)' Function 0x555f55dfe650 'arch_cpu_idle' 'void (void)'
| `-FullComment 0x555f55f27460 <line:4904:3, line:4920:1>
|   |-ParagraphComment 0x555f55f26f00 <line:4904:3>
|   | `-TextComment 0x555f55f26ed0 <col:3> Text=" "
|   |-VerbatimLineComment 0x555f55f26f20 <col:4, col:43> Text=" cpu_idle_apis CPU Idling APIs"
|   |-ParagraphComment 0x555f55f26f90 <line:4905:3>
|   | `-TextComment 0x555f55f26f60 <col:3> Text=" "
|   |-VerbatimLineComment 0x555f55f26fb0 <col:4, col:24> Text=" kernel_apis"
|   |-ParagraphComment 0x555f55f27070 <line:4906:3, col:5>
|   | |-TextComment 0x555f55f26ff0 <col:3> Text=" "
|   | |-TextComment 0x555f55f27010 <col:4> Text="@"
|   | `-TextComment 0x555f55f27030 <col:5> Text="{"
|   |-ParagraphComment 0x555f55f270c0 <line:4909:3>
|   | `-TextComment 0x555f55f27090 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f270e0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x555f55f27140 <col:10, col:28>
|   |   `-TextComment 0x555f55f27110 <col:10, col:28> Text=" Make the CPU idle."
|   |-ParagraphComment 0x555f55f27190 <line:4911:3, col:63>
|   | `-TextComment 0x555f55f27160 <col:3, col:63> Text=" This function makes the CPU idle until an event wakes it up."
|   |-ParagraphComment 0x555f55f27250 <line:4913:3, line:4916:59>
|   | |-TextComment 0x555f55f271b0 <line:4913:3, col:77> Text=" In a regular system, the idle thread should be the only thread responsible"
|   | |-TextComment 0x555f55f271d0 <line:4914:3, col:71> Text=" for making the CPU idle and triggering any type of power management."
|   | |-TextComment 0x555f55f271f0 <line:4915:3, col:79> Text=" However, in some more constrained systems, such as a single-threaded system,"
|   | `-TextComment 0x555f55f27210 <line:4916:3, col:59> Text=" the only thread would be responsible for this if needed."
|   |-ParagraphComment 0x555f55f272a0 <line:4918:3>
|   | `-TextComment 0x555f55f27270 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f272c0 <col:4, line:4919:3> Name="return"
|   | `-ParagraphComment 0x555f55f27340 <line:4918:11, line:4919:3>
|   |   |-TextComment 0x555f55f272f0 <line:4918:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f27310 <line:4919:3> Text=" "
|   |-VerbatimLineComment 0x555f55f27360 <col:4, col:23> Text=" K-CPU-IDLE-001"
|   `-ParagraphComment 0x555f55f273d0 <line:4920:1>
|     `-TextComment 0x555f55f273a0 <col:1> Text=" "
|-FunctionDecl 0x555f55e86110 <line:4937:1, line:4940:1> line:4937:20 k_cpu_atomic_idle 'void (unsigned int)' static inline
| |-ParmVarDecl 0x555f55e86088 <col:38, col:51> col:51 used key 'unsigned int'
| |-CompoundStmt 0x555f55e862c8 <line:4938:1, line:4940:1>
| | `-CallExpr 0x555f55e86220 <line:4939:2, col:26> 'void'
| |   |-ImplicitCastExpr 0x555f55e86208 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x555f55e861b8 <col:2> 'void (unsigned int)' Function 0x555f55dfe7f0 'arch_cpu_atomic_idle' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x555f55e86250 <col:23> 'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x555f55e861e0 <col:23> 'unsigned int' lvalue ParmVar 0x555f55e86088 'key' 'unsigned int'
| `-FullComment 0x555f55f278e0 <line:4927:3, line:4936:1>
|   |-ParagraphComment 0x555f55f27500 <line:4927:3>
|   | `-TextComment 0x555f55f274d0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f27520 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55f27580 <col:10, col:49>
|   |   `-TextComment 0x555f55f27550 <col:10, col:49> Text=" Make the CPU idle in an atomic fashion."
|   |-ParagraphComment 0x555f55f275f0 <line:4929:3, line:4930:54>
|   | |-TextComment 0x555f55f275a0 <line:4929:3, col:75> Text=" Similar to k_cpu_idle(), but called with interrupts locked if operations"
|   | `-TextComment 0x555f55f275c0 <line:4930:3, col:54> Text=" must be done atomically before making the CPU idle."
|   |-ParagraphComment 0x555f55f27640 <line:4932:3>
|   | `-TextComment 0x555f55f27610 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f27660 <col:4, col:61> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x555f55f276f0 <col:14, col:61>
|   |   `-TextComment 0x555f55f276c0 <col:14, col:61> Text=" Interrupt locking key obtained from irq_lock()."
|   |-ParagraphComment 0x555f55f27740 <line:4934:3>
|   | `-TextComment 0x555f55f27710 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f27760 <col:4, line:4935:3> Name="return"
|   | `-ParagraphComment 0x555f55f277e0 <line:4934:11, line:4935:3>
|   |   |-TextComment 0x555f55f27790 <line:4934:11, col:14> Text=" N/A"
|   |   `-TextComment 0x555f55f277b0 <line:4935:3> Text=" "
|   |-VerbatimLineComment 0x555f55f27800 <col:4, col:23> Text=" K-CPU-IDLE-002"
|   `-ParagraphComment 0x555f55f27870 <line:4936:1>
|     `-TextComment 0x555f55f27840 <col:1> Text=" "
|-FunctionDecl 0x555f55e863f0 <line:4949:1, col:51> col:13 z_sys_power_save_idle_exit 'void (s32_t)' extern
| |-ParmVarDecl 0x555f55e862f0 <col:40, col:46> col:46 ticks 's32_t':'int'
| `-FullComment 0x555f55f279d0 <line:4947:3, col:12>
|   `-ParagraphComment 0x555f55f279a0 <col:3, col:12>
|     |-TextComment 0x555f55f27950 <col:3> Text=" "
|     `-InlineCommandComment 0x555f55f27970 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x555f55e86850 <line:5008:1, line:5010:30> line:5008:13 z_init_thread_base 'void (struct _thread_base *, int, u32_t, unsigned int)' extern
| |-ParmVarDecl 0x555f55e865b0 <col:32, col:53> col:53 thread_base 'struct _thread_base *'
| |-ParmVarDecl 0x555f55e86628 <line:5009:10, col:14> col:14 priority 'int'
| |-ParmVarDecl 0x555f55e86698 <col:24, col:30> col:30 initial_state 'u32_t':'unsigned int'
| |-ParmVarDecl 0x555f55e86710 <line:5010:10, col:23> col:23 options 'unsigned int'
| `-FullComment 0x555f55f27ac0 <line:5006:3, col:12>
|   `-ParagraphComment 0x555f55f27a90 <col:3, col:12>
|     |-TextComment 0x555f55f27a40 <col:3> Text=" "
|     `-InlineCommandComment 0x555f55f27a60 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x555f55e869f8 <line:5027:1, col:39> col:13 z_is_thread_essential 'bool (void)' extern
| `-FullComment 0x555f55f27bb0 <line:5025:3, col:12>
|   `-ParagraphComment 0x555f55f27b80 <col:3, col:12>
|     |-TextComment 0x555f55f27b30 <col:3> Text=" "
|     `-InlineCommandComment 0x555f55f27b50 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x555f55e88f28 <line:5031:1, col:58> col:13 z_timer_expiration_handler 'void (struct _timeout *)' extern
| |-ParmVarDecl 0x555f55e88ea0 <col:40, col:57> col:57 t 'struct _timeout *'
| `-FullComment 0x555f55f27ca0 <line:5029:3, col:12>
|   `-ParagraphComment 0x555f55f27c70 <col:3, col:12>
|     |-TextComment 0x555f55f27c20 <col:3> Text=" "
|     `-InlineCommandComment 0x555f55f27c40 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x555f55e89268 <line:5177:1, line:5180:1> line:5177:21 Z_THREAD_STACK_BUFFER 'char *(k_thread_stack_t *)' static inline
| |-ParmVarDecl 0x555f55e89158 <col:43, col:61> col:61 used sym 'k_thread_stack_t *'
| |-CompoundStmt 0x555f55e89408 <line:5178:1, line:5180:1>
| | `-ReturnStmt 0x555f55e89390 <line:5179:2, col:17>
| |   `-CStyleCastExpr 0x555f55e89368 <col:9, col:17> 'char *' <BitCast>
| |     `-ImplicitCastExpr 0x555f55e89350 <col:17> 'k_thread_stack_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x555f55e89310 <col:17> 'k_thread_stack_t *' lvalue ParmVar 0x555f55e89158 'sym' 'k_thread_stack_t *'
| `-FullComment 0x555f55f280e0 <line:5168:3, line:5176:1>
|   |-ParagraphComment 0x555f55f27d40 <line:5168:3>
|   | `-TextComment 0x555f55f27d10 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f27d60 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x555f55f27dc0 <col:10, col:52>
|   |   `-TextComment 0x555f55f27d90 <col:10, col:52> Text=" Get a pointer to the physical stack buffer"
|   |-ParagraphComment 0x555f55f27e30 <line:5170:3, line:5171:76>
|   | |-TextComment 0x555f55f27de0 <line:5170:3, col:72> Text=" This macro is deprecated. If a stack buffer needs to be examined, the"
|   | `-TextComment 0x555f55f27e00 <line:5171:3, col:76> Text=" bounds should be obtained from the associated thread's stack_info struct."
|   |-ParagraphComment 0x555f55f27e80 <line:5173:3>
|   | `-TextComment 0x555f55f27e50 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f27ea0 <col:4, line:5174:3> [in] implicitly Param="sym" ParamIndex=0
|   | `-ParagraphComment 0x555f55f27f50 <line:5173:14, line:5174:3>
|   |   |-TextComment 0x555f55f27f00 <line:5173:14, col:40> Text=" Declared stack symbol name"
|   |   `-TextComment 0x555f55f27f20 <line:5174:3> Text=" "
|   |-BlockCommandComment 0x555f55f27f70 <col:4, line:5175:3> Name="return"
|   | `-ParagraphComment 0x555f55f27ff0 <line:5174:11, line:5175:3>
|   |   |-TextComment 0x555f55f27fa0 <line:5174:11, col:38> Text=" The buffer itself, a char *"
|   |   `-TextComment 0x555f55f27fc0 <line:5175:3> Text=" "
|   |-VerbatimLineComment 0x555f55f28010 <col:4, col:21> Text=" K-TSTACK-001"
|   `-ParagraphComment 0x555f55f28080 <line:5176:1>
|     `-TextComment 0x555f55f28050 <col:1> Text=" "
|-RecordDecl 0x555f55e89420 prev 0x555f55e38628 <line:5207:1, line:5216:1> line:5207:8 struct k_mem_partition definition
| |-FieldDecl 0x555f55e894e8 <line:5209:2, col:12> col:12 start 'uintptr_t':'unsigned long'
| | `-FullComment 0x555f55f281b0 <line:5208:5, col:39>
| |   `-ParagraphComment 0x555f55f28180 <col:5, col:39>
| |     `-TextComment 0x555f55f28150 <col:5, col:39> Text=" start address of memory partition "
| `-FieldDecl 0x555f55e89568 <line:5211:2, col:9> col:9 size 'size_t':'unsigned long'
|   `-FullComment 0x555f55f28280 <line:5210:5, col:30>
|     `-ParagraphComment 0x555f55f28250 <col:5, col:30>
|       `-TextComment 0x555f55f28220 <col:5, col:30> Text=" size of memory partition "
|-RecordDecl 0x555f55e895d8 prev 0x555f55e385a0 <line:5222:1, line:5231:1> line:5222:8 struct k_mem_domain definition
| |-FullComment 0x555f55f28430 <line:5219:3, line:5221:1>
| | |-ParagraphComment 0x555f55f28320 <line:5219:3>
| | | `-TextComment 0x555f55f282f0 <col:3> Text=" "
| | |-BlockCommandComment 0x555f55f28340 <col:4, col:23> Name="brief"
| | | `-ParagraphComment 0x555f55f283a0 <col:10, col:23>
| | |   `-TextComment 0x555f55f28370 <col:10, col:23> Text=" Memory Domain"
| | `-ParagraphComment 0x555f55f283f0 <line:5221:1>
| |   `-TextComment 0x555f55f283c0 <col:1> Text=" "
| |-FieldDecl 0x555f55e89698 <line:5228:2, col:14> col:14 mem_domain_q 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x555f55f28500 <line:5227:5, col:14>
| |   `-ParagraphComment 0x555f55f284d0 <col:5, col:14>
| |     `-TextComment 0x555f55f284a0 <col:5, col:14> Text=" domain q "
| `-FieldDecl 0x555f55e89718 <line:5230:2, col:7> col:7 num_partitions 'u8_t':'unsigned char'
|   `-FullComment 0x555f55f285d0 <line:5229:5, col:40>
|     `-ParagraphComment 0x555f55f285a0 <col:5, col:40>
|       `-TextComment 0x555f55f28570 <col:5, col:40> Text=" number of partitions in the domain "
|-FunctionDecl 0x555f55e89bf0 <line:5248:1, line:5249:41> line:5248:13 k_mem_domain_init 'void (struct k_mem_domain *, u8_t, struct k_mem_partition **)' extern
| |-ParmVarDecl 0x555f55e89840 <col:31, col:52> col:52 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x555f55e898b0 <col:60, col:65> col:65 num_parts 'u8_t':'unsigned char'
| |-ParmVarDecl 0x555f55e89ac0 <line:5249:10, col:40> col:34 parts 'struct k_mem_partition **':'struct k_mem_partition **'
| `-FullComment 0x555f55f28bc0 <line:5235:3, line:5247:1>
|   |-ParagraphComment 0x555f55f28670 <line:5235:3>
|   | `-TextComment 0x555f55f28640 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f28690 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x555f55f286f0 <col:10, col:37>
|   |   `-TextComment 0x555f55f286c0 <col:10, col:37> Text=" Initialize a memory domain."
|   |-ParagraphComment 0x555f55f28740 <line:5237:3, col:68>
|   | `-TextComment 0x555f55f28710 <col:3, col:68> Text=" Initialize a memory domain with given name and memory partitions."
|   |-ParagraphComment 0x555f55f287b0 <line:5239:3, line:5240:25>
|   | |-TextComment 0x555f55f28760 <line:5239:3, col:71> Text=" See documentation for k_mem_domain_add_partition() for details about"
|   | `-TextComment 0x555f55f28780 <line:5240:3, col:25> Text=" partition constraints."
|   |-ParagraphComment 0x555f55f28800 <line:5242:3>
|   | `-TextComment 0x555f55f287d0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f28820 <col:4, line:5243:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x555f55f288f0 <line:5242:17, line:5243:3>
|   |   |-TextComment 0x555f55f288a0 <line:5242:17, col:53> Text=" The memory domain to be initialized."
|   |   `-TextComment 0x555f55f288c0 <line:5243:3> Text=" "
|   |-ParamCommandComment 0x555f55f28910 <col:4, line:5244:3> [in] implicitly Param="num_parts" ParamIndex=1
|   | `-ParagraphComment 0x555f55f289c0 <line:5243:20, line:5244:3>
|   |   |-TextComment 0x555f55f28970 <line:5243:20, col:67> Text=" The number of array items of "parts" parameter."
|   |   `-TextComment 0x555f55f28990 <line:5244:3> Text=" "
|   |-ParamCommandComment 0x555f55f289e0 <col:4, line:5246:3> [in] implicitly Param="parts" ParamIndex=2
|   | `-ParagraphComment 0x555f55f28ac0 <line:5244:16, line:5246:3>
|   |   |-TextComment 0x555f55f28a40 <line:5244:16, col:74> Text=" An array of pointers to the memory partitions. Can be NULL"
|   |   |-TextComment 0x555f55f28a60 <line:5245:3, col:37> Text="              if num_parts is zero."
|   |   `-TextComment 0x555f55f28a80 <line:5246:3> Text=" "
|   |-VerbatimLineComment 0x555f55f28ae0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x555f55f28b50 <line:5247:1>
|     `-TextComment 0x555f55f28b20 <col:1> Text=" "
|-FunctionDecl 0x555f55e89e00 <line:5258:1, col:61> col:13 k_mem_domain_destroy 'void (struct k_mem_domain *)' extern
| |-ParmVarDecl 0x555f55e89d00 <col:34, col:55> col:55 domain 'struct k_mem_domain *'
| `-FullComment 0x555f55f28f40 <line:5251:3, line:5257:1>
|   |-ParagraphComment 0x555f55f28c60 <line:5251:3>
|   | `-TextComment 0x555f55f28c30 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f28c80 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x555f55f28ce0 <col:10, col:34>
|   |   `-TextComment 0x555f55f28cb0 <col:10, col:34> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x555f55f28d30 <line:5253:3, col:27>
|   | `-TextComment 0x555f55f28d00 <col:3, col:27> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x555f55f28d80 <line:5255:3>
|   | `-TextComment 0x555f55f28d50 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f28da0 <col:4, line:5256:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x555f55f28e50 <line:5255:17, line:5256:3>
|   |   |-TextComment 0x555f55f28e00 <line:5255:17, col:51> Text=" The memory domain to be destroyed."
|   |   `-TextComment 0x555f55f28e20 <line:5256:3> Text=" "
|   |-VerbatimLineComment 0x555f55f28e70 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x555f55f28ee0 <line:5257:1>
|     `-TextComment 0x555f55f28eb0 <col:1> Text=" "
|-FunctionDecl 0x555f55e8a730 <line:5284:1, line:5285:39> line:5284:13 k_mem_domain_add_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x555f55e8a590 <col:40, col:61> col:61 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x555f55e8a618 <line:5285:11, col:35> col:35 part 'struct k_mem_partition *'
| `-FullComment 0x555f55f295e0 <line:5261:3, line:5283:1>
|   |-ParagraphComment 0x555f55f28fe0 <line:5261:3>
|   | `-TextComment 0x555f55f28fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f29000 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x555f55f29060 <col:10, col:54>
|   |   `-TextComment 0x555f55f29030 <col:10, col:54> Text=" Add a memory partition into a memory domain."
|   |-ParagraphComment 0x555f55f290d0 <line:5263:3, line:5264:29>
|   | |-TextComment 0x555f55f29080 <line:5263:3, col:74> Text=" Add a memory partition into a memory domain. Partitions must conform to"
|   | `-TextComment 0x555f55f290a0 <line:5264:3, col:29> Text=" the following constraints:"
|   |-ParagraphComment 0x555f55f29280 <line:5266:3, line:5275:28>
|   | |-TextComment 0x555f55f290f0 <line:5266:3, col:71> Text=" - Partition bounds must be within system RAM boundaries on MMU-based"
|   | |-TextComment 0x555f55f29110 <line:5267:3, col:13> Text="   systems."
|   | |-TextComment 0x555f55f29130 <line:5268:3, col:69> Text=" - Partitions in the same memory domain may not overlap each other."
|   | |-TextComment 0x555f55f29150 <line:5269:3, col:63> Text=" - Partitions must not be defined which expose private kernel"
|   | |-TextComment 0x555f55f29170 <line:5270:3, col:39> Text="   data structures or kernel objects."
|   | |-TextComment 0x555f55f29190 <line:5271:3, col:75> Text=" - The starting address alignment, and the partition size must conform to"
|   | |-TextComment 0x555f55f291b0 <line:5272:3, col:72> Text="   the constraints of the underlying memory management hardware, which"
|   | |-TextComment 0x555f55f291d0 <line:5273:3, col:29> Text="   varies per architecture."
|   | |-TextComment 0x555f55f291f0 <line:5274:3, col:75> Text=" - Memory domain partitions are only intended to control access to memory"
|   | `-TextComment 0x555f55f29210 <line:5275:3, col:28> Text="   from user mode threads."
|   |-ParagraphComment 0x555f55f292f0 <line:5277:3, line:5278:12>
|   | |-TextComment 0x555f55f292a0 <line:5277:3, col:70> Text=" Violating these constraints may lead to CPU exceptions or undefined"
|   | `-TextComment 0x555f55f292c0 <line:5278:3, col:12> Text=" behavior."
|   |-ParagraphComment 0x555f55f29340 <line:5280:3>
|   | `-TextComment 0x555f55f29310 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f29360 <col:4, line:5281:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x555f55f29410 <line:5280:17, line:5281:3>
|   |   |-TextComment 0x555f55f293c0 <line:5280:17, col:66> Text=" The memory domain to be added a memory partition."
|   |   `-TextComment 0x555f55f293e0 <line:5281:3> Text=" "
|   |-ParamCommandComment 0x555f55f29430 <col:4, line:5282:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x555f55f294e0 <line:5281:15, line:5282:3>
|   |   |-TextComment 0x555f55f29490 <line:5281:15, col:47> Text=" The memory partition to be added"
|   |   `-TextComment 0x555f55f294b0 <line:5282:3> Text=" "
|   |-VerbatimLineComment 0x555f55f29500 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x555f55f29570 <line:5283:1>
|     `-TextComment 0x555f55f29540 <col:1> Text=" "
|-FunctionDecl 0x555f55e8a948 <line:5296:1, line:5297:35> line:5296:13 k_mem_domain_remove_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x555f55e8a830 <col:43, col:64> col:64 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x555f55e8a8b8 <line:5297:7, col:31> col:31 part 'struct k_mem_partition *'
| `-FullComment 0x555f55f29a30 <line:5288:3, line:5295:1>
|   |-ParagraphComment 0x555f55f29680 <line:5288:3>
|   | `-TextComment 0x555f55f29650 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f296a0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x555f55f29700 <col:10, col:57>
|   |   `-TextComment 0x555f55f296d0 <col:10, col:57> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x555f55f29750 <line:5290:3, col:50>
|   | `-TextComment 0x555f55f29720 <col:3, col:50> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x555f55f297a0 <line:5292:3>
|   | `-TextComment 0x555f55f29770 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f297c0 <col:4, line:5293:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x555f55f29870 <line:5292:17, line:5293:3>
|   |   |-TextComment 0x555f55f29820 <line:5292:17, col:68> Text=" The memory domain to be removed a memory partition."
|   |   `-TextComment 0x555f55f29840 <line:5293:3> Text=" "
|   |-ParamCommandComment 0x555f55f29890 <col:4, line:5294:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x555f55f29940 <line:5293:15, line:5294:3>
|   |   |-TextComment 0x555f55f298f0 <line:5293:15, col:49> Text=" The memory partition to be removed"
|   |   `-TextComment 0x555f55f29910 <line:5294:3> Text=" "
|   |-VerbatimLineComment 0x555f55f29960 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x555f55f299d0 <line:5295:1>
|     `-TextComment 0x555f55f299a0 <col:1> Text=" "
|-FunctionDecl 0x555f55e8abd0 <line:5309:1, line:5310:23> line:5309:13 k_mem_domain_add_thread 'void (struct k_mem_domain *, k_tid_t)' extern
| |-ParmVarDecl 0x555f55e8aa50 <col:37, col:58> col:58 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x555f55e8aac0 <line:5310:9, col:17> col:17 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x555f55f29ec0 <line:5300:3, line:5308:1>
|   |-ParagraphComment 0x555f55f29ad0 <line:5300:3>
|   | `-TextComment 0x555f55f29aa0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f29af0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x555f55f29b50 <col:10, col:44>
|   |   `-TextComment 0x555f55f29b20 <col:10, col:44> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x555f55f29ba0 <line:5302:3, col:37>
|   | `-TextComment 0x555f55f29b70 <col:3, col:37> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x555f55f29bf0 <line:5304:3>
|   | `-TextComment 0x555f55f29bc0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f29c10 <col:4, line:5305:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x555f55f29cc0 <line:5304:17, line:5305:3>
|   |   |-TextComment 0x555f55f29c70 <line:5304:17, col:77> Text=" The memory domain that the thread is going to be added into."
|   |   `-TextComment 0x555f55f29c90 <line:5305:3> Text=" "
|   |-ParamCommandComment 0x555f55f29ce0 <col:4, col:71> [in] implicitly Param="thread" ParamIndex=1
|   | `-ParagraphComment 0x555f55f29d70 <col:17, col:71>
|   |   `-TextComment 0x555f55f29d40 <col:17, col:71> Text=" ID of thread going to be added into the memory domain."
|   |-ParagraphComment 0x555f55f29dc0 <line:5307:3>
|   | `-TextComment 0x555f55f29d90 <col:3> Text=" "
|   |-VerbatimLineComment 0x555f55f29de0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x555f55f29e50 <line:5308:1>
|     `-TextComment 0x555f55f29e20 <col:1> Text=" "
|-FunctionDecl 0x555f55e8ad40 <line:5320:1, col:54> col:13 k_mem_domain_remove_thread 'void (k_tid_t)' extern
| |-ParmVarDecl 0x555f55e8acb8 <col:40, col:48> col:48 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x555f55f2a240 <line:5313:3, line:5319:1>
|   |-ParagraphComment 0x555f55f29f60 <line:5313:3>
|   | `-TextComment 0x555f55f29f30 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f29f80 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x555f55f29fe0 <col:10, col:49>
|   |   `-TextComment 0x555f55f29fb0 <col:10, col:49> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x555f55f2a030 <line:5315:3, col:42>
|   | `-TextComment 0x555f55f2a000 <col:3, col:42> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x555f55f2a080 <line:5317:3>
|   | `-TextComment 0x555f55f2a050 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f2a0a0 <col:4, line:5318:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x555f55f2a150 <line:5317:17, line:5318:3>
|   |   |-TextComment 0x555f55f2a100 <line:5317:17, col:73> Text=" ID of thread going to be removed from its memory domain."
|   |   `-TextComment 0x555f55f2a120 <line:5318:3> Text=" "
|   |-VerbatimLineComment 0x555f55f2a170 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x555f55f2a1e0 <line:5319:1>
|     `-TextComment 0x555f55f2a1b0 <col:1> Text=" "
|-FunctionDecl 0x555f55e8af38 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:5356:54> col:15 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x555f55e8ae70 <col:31, col:48> col:48 thread 'struct k_thread *'
| `-FullComment 0x555f55f2a890 <line:5337:3, line:5354:74>
|   |-ParagraphComment 0x555f55f2a2e0 <line:5337:3>
|   | `-TextComment 0x555f55f2a2b0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f2a300 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x555f55f2a360 <col:10, col:69>
|   |   `-TextComment 0x555f55f2a330 <col:10, col:69> Text=" Disable preservation of floating point context information."
|   |-ParagraphComment 0x555f55f2a3d0 <line:5339:3, line:5340:56>
|   | |-TextComment 0x555f55f2a380 <line:5339:3, col:60> Text=" This routine informs the kernel that the specified thread"
|   | `-TextComment 0x555f55f2a3a0 <line:5340:3, col:56> Text=" will no longer be using the floating point registers."
|   |-ParagraphComment 0x555f55f2a420 <line:5342:3>
|   | `-TextComment 0x555f55f2a3f0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f2a440 <col:4, line:5344:63> Name="warning"
|   | `-ParagraphComment 0x555f55f2a4c0 <line:5343:3, line:5344:63>
|   |   |-TextComment 0x555f55f2a470 <line:5343:3, col:73> Text=" Some architectures apply restrictions on how the disabling of floating"
|   |   `-TextComment 0x555f55f2a490 <line:5344:3, col:63> Text=" point preservation may be requested, see arch_float_disable."
|   |-ParagraphComment 0x555f55f2a510 <line:5346:3>
|   | `-TextComment 0x555f55f2a4e0 <col:3> Text=" "
|   |-BlockCommandComment 0x555f55f2a530 <col:4, line:5348:52> Name="warning"
|   | `-ParagraphComment 0x555f55f2a5b0 <line:5347:3, line:5348:52>
|   |   |-TextComment 0x555f55f2a560 <line:5347:3, col:73> Text=" This routine should only be used to disable floating point support for"
|   |   `-TextComment 0x555f55f2a580 <line:5348:3, col:52> Text=" a thread that currently has such support enabled."
|   |-ParagraphComment 0x555f55f2a600 <line:5350:3>
|   | `-TextComment 0x555f55f2a5d0 <col:3> Text=" "
|   |-ParamCommandComment 0x555f55f2a620 <col:4, col:30> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x555f55f2a6b0 <col:17, col:30>
|   |   `-TextComment 0x555f55f2a680 <col:17, col:30> Text=" ID of thread."
|   `-ParagraphComment 0x555f55f2a7f0 <line:5352:3, line:5354:74>
|     |-TextComment 0x555f55f2a6d0 <line:5352:3> Text=" "
|     |-InlineCommandComment 0x555f55f2a6f0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x555f55f2a710 <col:11, col:30> Text=" 0       On success."
|     |-TextComment 0x555f55f2a730 <line:5353:3> Text=" "
|     |-InlineCommandComment 0x555f55f2a750 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x555f55f2a770 <col:11, col:70> Text=" -ENOSYS If the floating point disabling is not implemented."
|     `-TextComment 0x555f55f2a790 <line:5354:3, col:74> Text="         -EINVAL If the floating point disabling could not be performed."
|-FunctionDecl 0x555f55e8f690 prev 0x555f55e3baa0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:24:1, col:81> col:13 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' extern
| |-ParmVarDecl 0x555f55e8b380 <col:42, col:49> col:49 object 'void *'
| `-ParmVarDecl 0x555f55e8b408 <col:57, col:75> col:75 thread 'struct k_thread *'
|-FunctionDecl 0x555f55e8f870 prev 0x555f55e3dbd0 <line:25:1, line:35:1> line:25:20 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x555f55e8f758 <col:42, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x555f55e8f7e0 <col:57, col:75> col:75 used thread 'struct k_thread *'
| `-CompoundStmt 0x555f55e8fb78 <line:26:1, line:35:1>
|   |-DoStmt 0x555f55e8fa00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e8f9c8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e8f978 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e8f9e0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e8fb10 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:34:2, col:45> 'void'
|     |-ImplicitCastExpr 0x555f55e8faf8 <col:2> 'void (*)(void *, struct k_thread *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55e8fa20 <col:2> 'void (void *, struct k_thread *)' Function 0x555f55e8f690 'z_impl_k_object_access_grant' 'void (void *, struct k_thread *)'
|     |-ImplicitCastExpr 0x555f55e8fb48 <col:31> 'void *' <LValueToRValue>
|     | `-DeclRefExpr 0x555f55e8fa48 <col:31> 'void *' lvalue ParmVar 0x555f55e8f758 'object' 'void *'
|     `-ImplicitCastExpr 0x555f55e8fb60 <col:39> 'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55e8fa70 <col:39> 'struct k_thread *' lvalue ParmVar 0x555f55e8f7e0 'thread' 'struct k_thread *'
|-FunctionDecl 0x555f55e8fc38 prev 0x555f55e3d6c8 <line:38:1, col:50> col:13 used z_impl_k_object_release 'void (void *)' extern
| `-ParmVarDecl 0x555f55e8fbb0 <col:37, col:44> col:44 object 'void *'
|-FunctionDecl 0x555f55e8fd80 prev 0x555f55e3df58 <line:39:1, line:49:1> line:39:20 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x555f55e8fcf8 <col:37, col:44> col:44 used object 'void *'
| `-CompoundStmt 0x555f55e8ffd8 <line:40:1, line:49:1>
|   |-DoStmt 0x555f55e8ff08 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e8fed0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e8fe80 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e8fee8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e8ff90 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:48:2, col:32> 'void'
|     |-ImplicitCastExpr 0x555f55e8ff78 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55e8ff28 <col:2> 'void (void *)' Function 0x555f55e8fc38 'z_impl_k_object_release' 'void (void *)'
|     `-ImplicitCastExpr 0x555f55e8ffc0 <col:26> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55e8ff50 <col:26> 'void *' lvalue ParmVar 0x555f55e8fcf8 'object' 'void *'
|-FunctionDecl 0x555f55e900a8 prev 0x555f55e3e478 <line:52:1, col:57> col:15 used z_impl_k_object_alloc 'void *(enum k_objects)' extern
| `-ParmVarDecl 0x555f55e90018 <col:37, col:52> col:52 otype 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x555f55e90200 prev 0x555f55e3e320 <line:53:1, line:62:1> line:53:22 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x555f55e90170 <col:37, col:52> col:52 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x555f55e904d0 <line:54:1, line:62:1>
|   |-DoStmt 0x555f55e90388 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e90350 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e90300 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e90368 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e904b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:61:2, col:36>
|     `-CallExpr 0x555f55e90470 <col:9, col:36> 'void *'
|       |-ImplicitCastExpr 0x555f55e90458 <col:9> 'void *(*)(enum k_objects)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e903a8 <col:9> 'void *(enum k_objects)' Function 0x555f55e900a8 'z_impl_k_object_alloc' 'void *(enum k_objects)'
|       `-ImplicitCastExpr 0x555f55e904a0 <col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e903d0 <col:31> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x555f55e90170 'otype' 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x555f55e90a30 <line:65:1, col:207> col:16 used z_impl_k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' extern
| |-ParmVarDecl 0x555f55e90518 <col:39, col:57> col:57 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x555f55e90588 <col:69, col:88> col:88 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x555f55e905f8 <col:95, col:102> col:102 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55e906a0 <col:114, col:131> col:131 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x555f55e90718 <col:138, col:145> col:145 p1 'void *'
| |-ParmVarDecl 0x555f55e90790 <col:149, col:156> col:156 p2 'void *'
| |-ParmVarDecl 0x555f55e90808 <col:160, col:167> col:167 p3 'void *'
| |-ParmVarDecl 0x555f55e90880 <col:171, col:175> col:175 prio 'int'
| |-ParmVarDecl 0x555f55e908f0 <col:181, col:187> col:187 options 'u32_t':'unsigned int'
| `-ParmVarDecl 0x555f55e90960 <col:196, col:202> col:202 delay 's32_t':'int'
|-FunctionDecl 0x555f55e91028 prev 0x555f55e42d70 <line:66:1, line:82:1> line:66:23 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x555f55e90b48 <col:39, col:57> col:57 used new_thread 'struct k_thread *'
| |-ParmVarDecl 0x555f55e90bb8 <col:69, col:88> col:88 used stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x555f55e90c28 <col:95, col:102> col:102 used stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55e90c98 <col:114, col:131> col:131 used entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x555f55e90d10 <col:138, col:145> col:145 used p1 'void *'
| |-ParmVarDecl 0x555f55e90d88 <col:149, col:156> col:156 used p2 'void *'
| |-ParmVarDecl 0x555f55e90e00 <col:160, col:167> col:167 used p3 'void *'
| |-ParmVarDecl 0x555f55e90e78 <col:171, col:175> col:175 used prio 'int'
| |-ParmVarDecl 0x555f55e90ee8 <col:181, col:187> col:187 used options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x555f55e90f58 <col:196, col:202> col:202 used delay 's32_t':'int'
| `-CompoundStmt 0x555f55e915c0 <line:67:1, line:82:1>
|   |-DoStmt 0x555f55e911f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e911c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e91170 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e911d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e915a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:81:2, col:102>
|     `-CallExpr 0x555f55e91440 <col:9, col:102> 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x555f55e91428 <col:9> 'k_tid_t (*)(struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e91218 <col:9> 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' Function 0x555f55e90a30 'z_impl_k_thread_create' 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)'
|       |-ImplicitCastExpr 0x555f55e914b8 <col:32> 'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e91240 <col:32> 'struct k_thread *' lvalue ParmVar 0x555f55e90b48 'new_thread' 'struct k_thread *'
|       |-ImplicitCastExpr 0x555f55e914d0 <col:44> 'k_thread_stack_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e91268 <col:44> 'k_thread_stack_t *' lvalue ParmVar 0x555f55e90bb8 'stack' 'k_thread_stack_t *'
|       |-ImplicitCastExpr 0x555f55e914e8 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e91290 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x555f55e90c28 'stack_size' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x555f55e91500 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e912b8 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' lvalue ParmVar 0x555f55e90c98 'entry' 'k_thread_entry_t':'void (*)(void *, void *, void *)'
|       |-ImplicitCastExpr 0x555f55e91518 <col:70> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e912e0 <col:70> 'void *' lvalue ParmVar 0x555f55e90d10 'p1' 'void *'
|       |-ImplicitCastExpr 0x555f55e91530 <col:74> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e91308 <col:74> 'void *' lvalue ParmVar 0x555f55e90d88 'p2' 'void *'
|       |-ImplicitCastExpr 0x555f55e91548 <col:78> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e91330 <col:78> 'void *' lvalue ParmVar 0x555f55e90e00 'p3' 'void *'
|       |-ImplicitCastExpr 0x555f55e91560 <col:82> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e91358 <col:82> 'int' lvalue ParmVar 0x555f55e90e78 'prio' 'int'
|       |-ImplicitCastExpr 0x555f55e91578 <col:88> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e91380 <col:88> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e90ee8 'options' 'u32_t':'unsigned int'
|       `-ImplicitCastExpr 0x555f55e91590 <col:97> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e913a8 <col:97> 's32_t':'int' lvalue ParmVar 0x555f55e90f58 'delay' 's32_t':'int'
|-FunctionDecl 0x555f55e916b0 <line:85:1, col:37> col:14 used z_impl_k_sleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x555f55e915f0 <col:29, col:35> col:35 ms 's32_t':'int'
|-FunctionDecl 0x555f55e917f0 prev 0x555f55e46800 <line:86:1, line:95:1> line:86:21 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x555f55e91768 <col:29, col:35> col:35 used ms 's32_t':'int'
| `-CompoundStmt 0x555f55e91ac0 <line:87:1, line:95:1>
|   |-DoStmt 0x555f55e91978 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e91940 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e918f0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e91958 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e91aa8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:94:2, col:26>
|     `-CallExpr 0x555f55e91a60 <col:9, col:26> 's32_t':'int'
|       |-ImplicitCastExpr 0x555f55e91a48 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e91998 <col:9> 's32_t (s32_t)' Function 0x555f55e916b0 'z_impl_k_sleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x555f55e91a90 <col:24> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e919c0 <col:24> 's32_t':'int' lvalue ParmVar 0x555f55e91768 'ms' 's32_t':'int'
|-FunctionDecl 0x555f55e91b78 <line:98:1, col:38> col:14 used z_impl_k_usleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x555f55e91af0 <col:30, col:36> col:36 us 's32_t':'int'
|-FunctionDecl 0x555f55e91cb8 prev 0x555f55e46970 <line:99:1, line:108:1> line:99:21 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x555f55e91c30 <col:30, col:36> col:36 used us 's32_t':'int'
| `-CompoundStmt 0x555f55e91f28 <line:100:1, line:108:1>
|   |-DoStmt 0x555f55e91e40 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e91e08 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e91db8 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e91e20 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e91f10 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:107:2, col:27>
|     `-CallExpr 0x555f55e91ec8 <col:9, col:27> 's32_t':'int'
|       |-ImplicitCastExpr 0x555f55e91eb0 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e91e60 <col:9> 's32_t (s32_t)' Function 0x555f55e91b78 'z_impl_k_usleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x555f55e91ef8 <col:25> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e91e88 <col:25> 's32_t':'int' lvalue ParmVar 0x555f55e91c30 'us' 's32_t':'int'
|-FunctionDecl 0x555f55e91fe0 <line:111:1, col:50> col:13 used z_impl_k_busy_wait 'void (u32_t)' extern
| `-ParmVarDecl 0x555f55e91f58 <col:32, col:38> col:38 usec_to_wait 'u32_t':'unsigned int'
|-FunctionDecl 0x555f55e92120 prev 0x555f55e46b20 <line:112:1, line:122:1> line:112:20 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x555f55e92098 <col:32, col:38> col:38 used usec_to_wait 'u32_t':'unsigned int'
| `-CompoundStmt 0x555f55e923a8 <line:113:1, line:122:1>
|   |-DoStmt 0x555f55e922a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e92270 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e92220 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e92288 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e92360 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:121:2, col:33> 'void'
|     |-ImplicitCastExpr 0x555f55e92348 <col:2> 'void (*)(u32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55e922c8 <col:2> 'void (u32_t)' Function 0x555f55e91fe0 'z_impl_k_busy_wait' 'void (u32_t)'
|     `-ImplicitCastExpr 0x555f55e92390 <col:21> 'u32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x555f55e922f0 <col:21> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e92098 'usec_to_wait' 'u32_t':'unsigned int'
|-FunctionDecl 0x555f55e923e8 <line:125:1, col:28> col:13 used z_impl_k_yield 'void ()' extern
|-FunctionDecl 0x555f55e924a8 prev 0x555f55e46c88 <line:126:1, line:136:1> line:126:20 k_yield 'void (void)' static inline
| `-CompoundStmt 0x555f55e926e8 <line:127:1, line:136:1>
|   |-DoStmt 0x555f55e92628 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e925f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e925a0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e92608 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e926c0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:135:2, col:17> 'void'
|     `-ImplicitCastExpr 0x555f55e92698 <col:2> 'void (*)()' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x555f55e92648 <col:2> 'void ()' Function 0x555f55e923e8 'z_impl_k_yield' 'void ()'
|-FunctionDecl 0x555f55e927a0 <line:139:1, col:43> col:13 used z_impl_k_wakeup 'void (k_tid_t)' extern
| `-ParmVarDecl 0x555f55e92718 <col:29, col:37> col:37 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x555f55e928e0 prev 0x555f55e46e70 <line:140:1, line:150:1> line:140:20 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x555f55e92858 <col:29, col:37> col:37 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x555f55e92b98 <line:141:1, line:150:1>
|   |-DoStmt 0x555f55e92a68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e92a30 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e929e0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e92a48 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e92b50 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:149:2, col:24> 'void'
|     |-ImplicitCastExpr 0x555f55e92b38 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55e92a88 <col:2> 'void (k_tid_t)' Function 0x555f55e927a0 'z_impl_k_wakeup' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x555f55e92b80 <col:18> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55e92ab0 <col:18> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x555f55e92858 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x555f55e92c38 <line:153:1, col:37> col:16 used z_impl_k_current_get 'k_tid_t ()' extern
|-FunctionDecl 0x555f55e92cf8 prev 0x555f55e47060 <line:154:1, line:163:1> line:154:23 k_current_get 'k_tid_t (void)' static inline
| `-CompoundStmt 0x555f55e92f70 <line:155:1, line:163:1>
|   |-DoStmt 0x555f55e92e78 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e92e40 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e92df0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e92e58 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e92f58 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:162:2, col:30>
|     `-CallExpr 0x555f55e92f30 <col:9, col:30> 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x555f55e92f18 <col:9> 'k_tid_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x555f55e92e98 <col:9> 'k_tid_t ()' Function 0x555f55e92c38 'z_impl_k_current_get' 'k_tid_t ()'
|-FunctionDecl 0x555f55e93028 <line:166:1, col:49> col:13 used z_impl_k_thread_abort 'void (k_tid_t)' extern
| `-ParmVarDecl 0x555f55e92fa0 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x555f55e93168 prev 0x555f55e471c0 <line:167:1, line:177:1> line:167:20 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x555f55e930e0 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x555f55e933c0 <line:168:1, line:177:1>
|   |-DoStmt 0x555f55e932f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e932b8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e93268 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e932d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e93378 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:176:2, col:30> 'void'
|     |-ImplicitCastExpr 0x555f55e93360 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55e93310 <col:2> 'void (k_tid_t)' Function 0x555f55e93028 'z_impl_k_thread_abort' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x555f55e933a8 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55e93338 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x555f55e930e0 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x555f55e93478 <line:180:1, col:49> col:13 used z_impl_k_thread_start 'void (k_tid_t)' extern
| `-ParmVarDecl 0x555f55e933f0 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x555f55e935b8 prev 0x555f55e47330 <line:181:1, line:191:1> line:181:20 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x555f55e93530 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x555f55e93828 <line:182:1, line:191:1>
|   |-DoStmt 0x555f55e93758 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e93720 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e936d0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e93738 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e937e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:190:2, col:30> 'void'
|     |-ImplicitCastExpr 0x555f55e937c8 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55e93778 <col:2> 'void (k_tid_t)' Function 0x555f55e93478 'z_impl_k_thread_start' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x555f55e93810 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55e937a0 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x555f55e93530 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x555f55e938e8 <line:194:1, col:55> col:12 used z_impl_k_thread_priority_get 'int (k_tid_t)' extern
| `-ParmVarDecl 0x555f55e93858 <col:41, col:49> col:49 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x555f55e93a30 prev 0x555f55e47b58 <line:195:1, line:204:1> line:195:19 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x555f55e939a0 <col:41, col:49> col:49 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x555f55e93d00 <line:196:1, line:204:1>
|   |-DoStmt 0x555f55e93bb8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e93b80 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e93b30 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e93b98 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e93ce8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:203:2, col:44>
|     `-CallExpr 0x555f55e93ca0 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x555f55e93c88 <col:9> 'int (*)(k_tid_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e93bd8 <col:9> 'int (k_tid_t)' Function 0x555f55e938e8 'z_impl_k_thread_priority_get' 'int (k_tid_t)'
|       `-ImplicitCastExpr 0x555f55e93cd0 <col:38> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e93c00 <col:38> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x555f55e939a0 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x555f55e93e38 <line:207:1, col:66> col:13 used z_impl_k_thread_priority_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x555f55e93d30 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x555f55e93da8 <col:58, col:62> col:62 prio 'int'
|-FunctionDecl 0x555f55e94000 prev 0x555f55e47dc0 <line:208:1, line:218:1> line:208:20 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x555f55e93ef8 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x555f55e93f70 <col:58, col:62> col:62 used prio 'int'
| `-CompoundStmt 0x555f55e94308 <line:209:1, line:218:1>
|   |-DoStmt 0x555f55e94190 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e94158 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e94108 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e94170 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e942a0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:217:2, col:43> 'void'
|     |-ImplicitCastExpr 0x555f55e94288 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55e941b0 <col:2> 'void (k_tid_t, int)' Function 0x555f55e93e38 'z_impl_k_thread_priority_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x555f55e942d8 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x555f55e941d8 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x555f55e93ef8 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x555f55e942f0 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x555f55e94200 <col:39> 'int' lvalue ParmVar 0x555f55e93f70 'prio' 'int'
|-FunctionDecl 0x555f55e94440 <line:221:1, col:70> col:13 used z_impl_k_thread_deadline_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x555f55e94338 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x555f55e943b0 <col:58, col:62> col:62 deadline 'int'
|-FunctionDecl 0x555f55e94608 <line:222:1, line:232:1> line:222:20 k_thread_deadline_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x555f55e94500 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x555f55e94578 <col:58, col:62> col:62 used deadline 'int'
| `-CompoundStmt 0x555f55e948d8 <line:223:1, line:232:1>
|   |-DoStmt 0x555f55e947c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e94788 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e94738 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e947a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e94870 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:231:2, col:47> 'void'
|     |-ImplicitCastExpr 0x555f55e94858 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55e947e0 <col:2> 'void (k_tid_t, int)' Function 0x555f55e94440 'z_impl_k_thread_deadline_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x555f55e948a8 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x555f55e94808 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x555f55e94500 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x555f55e948c0 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x555f55e94830 <col:39> 'int' lvalue ParmVar 0x555f55e94578 'deadline' 'int'
|-FunctionDecl 0x555f55e94990 <line:235:1, col:51> col:13 used z_impl_k_thread_suspend 'void (k_tid_t)' extern
| `-ParmVarDecl 0x555f55e94908 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x555f55e94ad0 prev 0x555f55e48640 <line:236:1, line:246:1> line:236:20 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x555f55e94a48 <col:37, col:45> col:45 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x555f55e94d28 <line:237:1, line:246:1>
|   |-DoStmt 0x555f55e94c58 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e94c20 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e94bd0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e94c38 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e94ce0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:245:2, col:32> 'void'
|     |-ImplicitCastExpr 0x555f55e94cc8 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55e94c78 <col:2> 'void (k_tid_t)' Function 0x555f55e94990 'z_impl_k_thread_suspend' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x555f55e94d10 <col:26> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55e94ca0 <col:26> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x555f55e94a48 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x555f55e94de0 <line:249:1, col:50> col:13 used z_impl_k_thread_resume 'void (k_tid_t)' extern
| `-ParmVarDecl 0x555f55e94d58 <col:36, col:44> col:44 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x555f55e94f20 prev 0x555f55e487b0 <line:250:1, line:260:1> line:250:20 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x555f55e94e98 <col:36, col:44> col:44 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x555f55e95178 <line:251:1, line:260:1>
|   |-DoStmt 0x555f55e950a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e95070 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e95020 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e95088 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e95130 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:259:2, col:31> 'void'
|     |-ImplicitCastExpr 0x555f55e95118 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55e950c8 <col:2> 'void (k_tid_t)' Function 0x555f55e94de0 'z_impl_k_thread_resume' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x555f55e95160 <col:25> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55e950f0 <col:25> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x555f55e94e98 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x555f55e951f0 <line:263:1, col:39> col:12 used z_impl_k_is_preempt_thread 'int ()' extern
|-FunctionDecl 0x555f55e952b8 prev 0x555f55e48d50 <line:264:1, line:273:1> line:264:19 k_is_preempt_thread 'int (void)' static inline
| `-CompoundStmt 0x555f55e95500 <line:265:1, line:273:1>
|   |-DoStmt 0x555f55e95438 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e95400 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e953b0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e95418 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e954e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:272:2, col:36>
|     `-CallExpr 0x555f55e954c0 <col:9, col:36> 'int'
|       `-ImplicitCastExpr 0x555f55e954a8 <col:9> 'int (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x555f55e95458 <col:9> 'int ()' Function 0x555f55e951f0 'z_impl_k_is_preempt_thread' 'int ()'
|-FunctionDecl 0x555f55e955c0 <line:276:1, col:57> col:13 used z_impl_k_thread_custom_data_set 'void (void *)' extern
| `-ParmVarDecl 0x555f55e95538 <col:45, col:52> col:52 value 'void *'
|-FunctionDecl 0x555f55e95718 prev 0x555f55e49478 <line:277:1, line:287:1> line:277:20 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x555f55e95680 <col:45, col:52> col:52 used value 'void *'
| `-CompoundStmt 0x555f55e95970 <line:278:1, line:287:1>
|   |-DoStmt 0x555f55e958a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e95868 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e95818 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e95880 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e95928 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:286:2, col:39> 'void'
|     |-ImplicitCastExpr 0x555f55e95910 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55e958c0 <col:2> 'void (void *)' Function 0x555f55e955c0 'z_impl_k_thread_custom_data_set' 'void (void *)'
|     `-ImplicitCastExpr 0x555f55e95958 <col:34> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55e958e8 <col:34> 'void *' lvalue ParmVar 0x555f55e95680 'value' 'void *'
|-FunctionDecl 0x555f55e959e0 <line:290:1, col:47> col:15 used z_impl_k_thread_custom_data_get 'void *()' extern
|-FunctionDecl 0x555f55e95aa8 prev 0x555f55e49650 <line:291:1, line:300:1> line:291:22 k_thread_custom_data_get 'void *(void)' static inline
| `-CompoundStmt 0x555f55e95cf0 <line:292:1, line:300:1>
|   |-DoStmt 0x555f55e95c28 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e95bf0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e95ba0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e95c08 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e95cd8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:299:2, col:41>
|     `-CallExpr 0x555f55e95cb0 <col:9, col:41> 'void *'
|       `-ImplicitCastExpr 0x555f55e95c98 <col:9> 'void *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x555f55e95c48 <col:9> 'void *()' Function 0x555f55e959e0 'z_impl_k_thread_custom_data_get' 'void *()'
|-FunctionDecl 0x555f55e95e30 <line:303:1, col:74> col:12 used z_impl_k_thread_name_set 'int (k_tid_t, const char *)' extern
| |-ParmVarDecl 0x555f55e95d20 <col:37, col:45> col:45 thread_id 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x555f55e95d98 <col:56, col:69> col:69 value 'const char *'
|-FunctionDecl 0x555f55e96000 prev 0x555f55e498b8 <line:304:1, line:313:1> line:304:19 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x555f55e95ef0 <col:37, col:45> col:45 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x555f55e95f68 <col:56, col:69> col:69 used value 'const char *'
| `-CompoundStmt 0x555f55e96320 <line:305:1, line:313:1>
|   |-DoStmt 0x555f55e96190 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e96158 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e96108 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e96170 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e96308 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:312:2, col:50>
|     `-CallExpr 0x555f55e962a0 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x555f55e96288 <col:9> 'int (*)(k_tid_t, const char *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e961b0 <col:9> 'int (k_tid_t, const char *)' Function 0x555f55e95e30 'z_impl_k_thread_name_set' 'int (k_tid_t, const char *)'
|       |-ImplicitCastExpr 0x555f55e962d8 <col:34> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e961d8 <col:34> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x555f55e95ef0 'thread_id' 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x555f55e962f0 <col:45> 'const char *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e96200 <col:45> 'const char *' lvalue ParmVar 0x555f55e95f68 'value' 'const char *'
|-FunctionDecl 0x555f55e964d8 <line:316:1, col:80> col:12 used z_impl_k_thread_name_copy 'int (k_tid_t, char *, size_t)' extern
| |-ParmVarDecl 0x555f55e96350 <col:38, col:46> col:46 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x555f55e963c8 <col:57, col:64> col:64 buf 'char *'
| `-ParmVarDecl 0x555f55e96438 <col:69, col:76> col:76 size 'size_t':'unsigned long'
|-FunctionDecl 0x555f55e96740 prev 0x555f55e49db8 <line:317:1, line:326:1> line:317:19 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x555f55e965a0 <col:38, col:46> col:46 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x555f55e96618 <col:57, col:64> col:64 used buf 'char *'
| |-ParmVarDecl 0x555f55e96688 <col:69, col:76> col:76 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x555f55e96ab0 <line:318:1, line:326:1>
|   |-DoStmt 0x555f55e968d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e968a0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e96850 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e968b8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e96a98 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:325:2, col:55>
|     `-CallExpr 0x555f55e96a10 <col:9, col:55> 'int'
|       |-ImplicitCastExpr 0x555f55e969f8 <col:9> 'int (*)(k_tid_t, char *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e968f8 <col:9> 'int (k_tid_t, char *, size_t)' Function 0x555f55e964d8 'z_impl_k_thread_name_copy' 'int (k_tid_t, char *, size_t)'
|       |-ImplicitCastExpr 0x555f55e96a50 <col:35> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e96920 <col:35> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x555f55e965a0 'thread_id' 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x555f55e96a68 <col:46> 'char *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e96948 <col:46> 'char *' lvalue ParmVar 0x555f55e96618 'buf' 'char *'
|       `-ImplicitCastExpr 0x555f55e96a80 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e96970 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x555f55e96688 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x555f55e96c70 <line:329:1, col:86> col:13 used z_impl_k_timer_start 'void (struct k_timer *, s32_t, s32_t)' extern
| |-ParmVarDecl 0x555f55e96af8 <col:34, col:51> col:51 timer 'struct k_timer *'
| |-ParmVarDecl 0x555f55e96b68 <col:58, col:64> col:64 duration 's32_t':'int'
| `-ParmVarDecl 0x555f55e96bd8 <col:74, col:80> col:80 period 's32_t':'int'
|-FunctionDecl 0x555f55e96ec8 prev 0x555f55e4d230 <line:330:1, line:340:1> line:330:20 k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x555f55e96d50 <col:34, col:51> col:51 used timer 'struct k_timer *'
| |-ParmVarDecl 0x555f55e96dc0 <col:58, col:64> col:64 used duration 's32_t':'int'
| |-ParmVarDecl 0x555f55e96e30 <col:74, col:80> col:80 used period 's32_t':'int'
| `-CompoundStmt 0x555f55e97218 <line:331:1, line:340:1>
|   |-DoStmt 0x555f55e97060 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e97028 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e96fd8 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e97040 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e97190 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:339:2, col:46> 'void'
|     |-ImplicitCastExpr 0x555f55e97178 <col:2> 'void (*)(struct k_timer *, s32_t, s32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55e97080 <col:2> 'void (struct k_timer *, s32_t, s32_t)' Function 0x555f55e96c70 'z_impl_k_timer_start' 'void (struct k_timer *, s32_t, s32_t)'
|     |-ImplicitCastExpr 0x555f55e971d0 <col:23> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x555f55e970a8 <col:23> 'struct k_timer *' lvalue ParmVar 0x555f55e96d50 'timer' 'struct k_timer *'
|     |-ImplicitCastExpr 0x555f55e971e8 <col:30> 's32_t':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x555f55e970d0 <col:30> 's32_t':'int' lvalue ParmVar 0x555f55e96dc0 'duration' 's32_t':'int'
|     `-ImplicitCastExpr 0x555f55e97200 <col:40> 's32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x555f55e970f8 <col:40> 's32_t':'int' lvalue ParmVar 0x555f55e96e30 'period' 's32_t':'int'
|-FunctionDecl 0x555f55e972e8 <line:343:1, col:55> col:13 used z_impl_k_timer_stop 'void (struct k_timer *)' extern
| `-ParmVarDecl 0x555f55e97260 <col:33, col:50> col:50 timer 'struct k_timer *'
|-FunctionDecl 0x555f55e97440 prev 0x555f55e4d3c8 <line:344:1, line:354:1> line:344:20 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x555f55e973b8 <col:33, col:50> col:50 used timer 'struct k_timer *'
| `-CompoundStmt 0x555f55e976c8 <line:345:1, line:354:1>
|   |-DoStmt 0x555f55e975c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e97590 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e97540 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e975a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e97680 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:353:2, col:27> 'void'
|     |-ImplicitCastExpr 0x555f55e97668 <col:2> 'void (*)(struct k_timer *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55e975e8 <col:2> 'void (struct k_timer *)' Function 0x555f55e972e8 'z_impl_k_timer_stop' 'void (struct k_timer *)'
|     `-ImplicitCastExpr 0x555f55e976b0 <col:22> 'struct k_timer *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55e97610 <col:22> 'struct k_timer *' lvalue ParmVar 0x555f55e973b8 'timer' 'struct k_timer *'
|-FunctionDecl 0x555f55e97fd0 <line:357:1, col:62> col:14 used z_impl_k_timer_status_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x555f55e97f48 <col:40, col:57> col:57 timer 'struct k_timer *'
|-FunctionDecl 0x555f55e98128 prev 0x555f55e4d5c0 <line:358:1, line:367:1> line:358:21 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x555f55e980a0 <col:40, col:57> col:57 used timer 'struct k_timer *'
| `-CompoundStmt 0x555f55e983f0 <line:359:1, line:367:1>
|   |-DoStmt 0x555f55e982b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e98278 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e98228 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e98290 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e983d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:366:2, col:40>
|     `-CallExpr 0x555f55e98390 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x555f55e98378 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e982d0 <col:9> 'u32_t (struct k_timer *)' Function 0x555f55e97fd0 'z_impl_k_timer_status_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x555f55e983c0 <col:35> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e982f8 <col:35> 'struct k_timer *' lvalue ParmVar 0x555f55e980a0 'timer' 'struct k_timer *'
|-FunctionDecl 0x555f55e984c0 <line:370:1, col:63> col:14 used z_impl_k_timer_status_sync 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x555f55e98438 <col:41, col:58> col:58 timer 'struct k_timer *'
|-FunctionDecl 0x555f55e98618 prev 0x555f55e4dfb8 <line:371:1, line:380:1> line:371:21 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x555f55e98590 <col:41, col:58> col:58 used timer 'struct k_timer *'
| `-CompoundStmt 0x555f55e98888 <line:372:1, line:380:1>
|   |-DoStmt 0x555f55e987a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e98768 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e98718 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e98780 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e98870 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:379:2, col:41>
|     `-CallExpr 0x555f55e98828 <col:9, col:41> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x555f55e98810 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e987c0 <col:9> 'u32_t (struct k_timer *)' Function 0x555f55e984c0 'z_impl_k_timer_status_sync' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x555f55e98858 <col:36> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e987e8 <col:36> 'struct k_timer *' lvalue ParmVar 0x555f55e98590 'timer' 'struct k_timer *'
|-FunctionDecl 0x555f55e98958 prev 0x555f55e4e470 <line:383:1, col:65> col:14 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x555f55e988d0 <col:43, col:60> col:60 timer 'struct k_timer *'
|-FunctionDecl 0x555f55e98ab0 prev 0x555f55e4e318 <line:384:1, line:393:1> line:384:21 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x555f55e98a28 <col:43, col:60> col:60 used timer 'struct k_timer *'
| `-CompoundStmt 0x555f55e98d20 <line:385:1, line:393:1>
|   |-DoStmt 0x555f55e98c38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e98c00 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e98bb0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e98c18 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e98d08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:392:2, col:43>
|     `-CallExpr 0x555f55e98cc0 <col:9, col:43> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x555f55e98ca8 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e98c58 <col:9> 'u32_t (struct k_timer *)' Function 0x555f55e98958 'z_impl_k_timer_remaining_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x555f55e98cf0 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e98c80 <col:38> 'struct k_timer *' lvalue ParmVar 0x555f55e98a28 'timer' 'struct k_timer *'
|-FunctionDecl 0x555f55e98e70 prev 0x555f55e4edd8 <line:396:1, col:82> col:13 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' extern
| |-ParmVarDecl 0x555f55e98d68 <col:42, col:59> col:59 timer 'struct k_timer *'
| `-ParmVarDecl 0x555f55e98de0 <col:66, col:73> col:73 user_data 'void *'
|-FunctionDecl 0x555f55e99060 prev 0x555f55e4ebd0 <line:397:1, line:407:1> line:397:20 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x555f55e98f58 <col:42, col:59> col:59 used timer 'struct k_timer *'
| |-ParmVarDecl 0x555f55e98fd0 <col:66, col:73> col:73 used user_data 'void *'
| `-CompoundStmt 0x555f55e99368 <line:398:1, line:407:1>
|   |-DoStmt 0x555f55e991f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e991b8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e99168 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e991d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e99300 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:406:2, col:47> 'void'
|     |-ImplicitCastExpr 0x555f55e992e8 <col:2> 'void (*)(struct k_timer *, void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55e99210 <col:2> 'void (struct k_timer *, void *)' Function 0x555f55e98e70 'z_impl_k_timer_user_data_set' 'void (struct k_timer *, void *)'
|     |-ImplicitCastExpr 0x555f55e99338 <col:31> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x555f55e99238 <col:31> 'struct k_timer *' lvalue ParmVar 0x555f55e98f58 'timer' 'struct k_timer *'
|     `-ImplicitCastExpr 0x555f55e99350 <col:38> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55e99260 <col:38> 'void *' lvalue ParmVar 0x555f55e98fd0 'user_data' 'void *'
|-FunctionDecl 0x555f55e99440 prev 0x555f55e4f678 <line:410:1, col:66> col:15 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' extern
| `-ParmVarDecl 0x555f55e993b0 <col:44, col:61> col:61 timer 'struct k_timer *'
|-FunctionDecl 0x555f55e995a0 prev 0x555f55e4f518 <line:411:1, line:420:1> line:411:22 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x555f55e99510 <col:44, col:61> col:61 used timer 'struct k_timer *'
| `-CompoundStmt 0x555f55e99870 <line:412:1, line:420:1>
|   |-DoStmt 0x555f55e99728 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e996f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e996a0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e99708 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e99858 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:419:2, col:43>
|     `-CallExpr 0x555f55e99810 <col:9, col:43> 'void *'
|       |-ImplicitCastExpr 0x555f55e997f8 <col:9> 'void *(*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e99748 <col:9> 'void *(struct k_timer *)' Function 0x555f55e99440 'z_impl_k_timer_user_data_get' 'void *(struct k_timer *)'
|       `-ImplicitCastExpr 0x555f55e99840 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e99770 <col:38> 'struct k_timer *' lvalue ParmVar 0x555f55e99510 'timer' 'struct k_timer *'
|-FunctionDecl 0x555f55e99908 <line:423:1, col:34> col:14 used z_impl_k_uptime_get 's64_t ()' extern
|-FunctionDecl 0x555f55e999c8 prev 0x555f55e4f900 <line:424:1, line:435:1> line:424:21 used k_uptime_get 's64_t (void)' static inline
| `-CompoundStmt 0x555f55e99c40 <line:425:1, line:435:1>
|   |-DoStmt 0x555f55e99b48 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e99b10 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e99ac0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e99b28 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e99c28 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:434:2, col:29>
|     `-CallExpr 0x555f55e99c00 <col:9, col:29> 's64_t':'long long'
|       `-ImplicitCastExpr 0x555f55e99be8 <col:9> 's64_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x555f55e99b68 <col:9> 's64_t ()' Function 0x555f55e99908 'z_impl_k_uptime_get' 's64_t ()'
|-FunctionDecl 0x555f55e99d10 <line:438:1, col:55> col:13 used z_impl_k_queue_init 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x555f55e99c88 <col:33, col:50> col:50 queue 'struct k_queue *'
|-FunctionDecl 0x555f55e99e68 prev 0x555f55e51df0 <line:439:1, line:449:1> line:439:20 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x555f55e99de0 <col:33, col:50> col:50 used queue 'struct k_queue *'
| `-CompoundStmt 0x555f55e9a148 <line:440:1, line:449:1>
|   |-DoStmt 0x555f55e9a020 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e99fe8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e99f98 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e9a000 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e9a100 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:448:2, col:27> 'void'
|     |-ImplicitCastExpr 0x555f55e9a0e8 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55e9a040 <col:2> 'void (struct k_queue *)' Function 0x555f55e99d10 'z_impl_k_queue_init' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x555f55e9a130 <col:22> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55e9a068 <col:22> 'struct k_queue *' lvalue ParmVar 0x555f55e99de0 'queue' 'struct k_queue *'
|-FunctionDecl 0x555f55e9a218 <line:452:1, col:62> col:13 used z_impl_k_queue_cancel_wait 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x555f55e9a190 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x555f55e9a370 prev 0x555f55e51f78 <line:453:1, line:463:1> line:453:20 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x555f55e9a2e8 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x555f55e9a5c8 <line:454:1, line:463:1>
|   |-DoStmt 0x555f55e9a4f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e9a4c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e9a470 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e9a4d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55e9a580 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:462:2, col:34> 'void'
|     |-ImplicitCastExpr 0x555f55e9a568 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55e9a518 <col:2> 'void (struct k_queue *)' Function 0x555f55e9a218 'z_impl_k_queue_cancel_wait' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x555f55e9a5b0 <col:29> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55e9a540 <col:29> 'struct k_queue *' lvalue ParmVar 0x555f55e9a2e8 'queue' 'struct k_queue *'
|-FunctionDecl 0x555f55e9a718 <line:466:1, col:77> col:14 used z_impl_k_queue_alloc_append 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x555f55e9a610 <col:42, col:59> col:59 queue 'struct k_queue *'
| `-ParmVarDecl 0x555f55e9a688 <col:66, col:73> col:73 data 'void *'
|-FunctionDecl 0x555f55e9a8f8 prev 0x555f55e52490 <line:467:1, line:476:1> line:467:21 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x555f55e9a7f0 <col:42, col:59> col:59 used queue 'struct k_queue *'
| |-ParmVarDecl 0x555f55e9a868 <col:66, col:73> col:73 used data 'void *'
| `-CompoundStmt 0x555f55e9abb8 <line:468:1, line:476:1>
|   |-DoStmt 0x555f55e9aa88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e9aa50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e9aa00 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e9aa68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e9aba0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:475:2, col:48>
|     `-CallExpr 0x555f55e9ab38 <col:9, col:48> 's32_t':'int'
|       |-ImplicitCastExpr 0x555f55e9ab20 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e9aaa8 <col:9> 's32_t (struct k_queue *, void *)' Function 0x555f55e9a718 'z_impl_k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x555f55e9ab70 <col:37> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e9aad0 <col:37> 'struct k_queue *' lvalue ParmVar 0x555f55e9a7f0 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x555f55e9ab88 <col:44> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e9aaf8 <col:44> 'void *' lvalue ParmVar 0x555f55e9a868 'data' 'void *'
|-FunctionDecl 0x555f55e9ad08 <line:479:1, col:78> col:14 used z_impl_k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x555f55e9ac00 <col:43, col:60> col:60 queue 'struct k_queue *'
| `-ParmVarDecl 0x555f55e9ac78 <col:67, col:74> col:74 data 'void *'
|-FunctionDecl 0x555f55e9af50 prev 0x555f55e528a8 <line:480:1, line:489:1> line:480:21 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x555f55e9ade0 <col:43, col:60> col:60 used queue 'struct k_queue *'
| |-ParmVarDecl 0x555f55e9ae58 <col:67, col:74> col:74 used data 'void *'
| `-CompoundStmt 0x555f55e9b210 <line:481:1, line:489:1>
|   |-DoStmt 0x555f55e9b0e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e9b0a8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e9b058 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e9b0c0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e9b1f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:488:2, col:49>
|     `-CallExpr 0x555f55e9b190 <col:9, col:49> 's32_t':'int'
|       |-ImplicitCastExpr 0x555f55e9b178 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e9b100 <col:9> 's32_t (struct k_queue *, void *)' Function 0x555f55e9ad08 'z_impl_k_queue_alloc_prepend' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x555f55e9b1c8 <col:38> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e9b128 <col:38> 'struct k_queue *' lvalue ParmVar 0x555f55e9ade0 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x555f55e9b1e0 <col:45> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e9b150 <col:45> 'void *' lvalue ParmVar 0x555f55e9ae58 'data' 'void *'
|-FunctionDecl 0x555f55e9b360 <line:492:1, col:71> col:15 used z_impl_k_queue_get 'void *(struct k_queue *, s32_t)' extern
| |-ParmVarDecl 0x555f55e9b258 <col:34, col:51> col:51 queue 'struct k_queue *'
| `-ParmVarDecl 0x555f55e9b2c8 <col:58, col:64> col:64 timeout 's32_t':'int'
|-FunctionDecl 0x555f55e9b540 prev 0x555f55e53438 <line:493:1, line:502:1> line:493:22 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x555f55e9b438 <col:34, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x555f55e9b4a8 <col:58, col:64> col:64 used timeout 's32_t':'int'
| `-CompoundStmt 0x555f55e9b860 <line:494:1, line:502:1>
|   |-DoStmt 0x555f55e9b6d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e9b698 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e9b648 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e9b6b0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e9b848 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:501:2, col:42>
|     `-CallExpr 0x555f55e9b7e0 <col:9, col:42> 'void *'
|       |-ImplicitCastExpr 0x555f55e9b7c8 <col:9> 'void *(*)(struct k_queue *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e9b6f0 <col:9> 'void *(struct k_queue *, s32_t)' Function 0x555f55e9b360 'z_impl_k_queue_get' 'void *(struct k_queue *, s32_t)'
|       |-ImplicitCastExpr 0x555f55e9b818 <col:28> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e9b718 <col:28> 'struct k_queue *' lvalue ParmVar 0x555f55e9b438 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x555f55e9b830 <col:35> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e9b740 <col:35> 's32_t':'int' lvalue ParmVar 0x555f55e9b4a8 'timeout' 's32_t':'int'
|-FunctionDecl 0x555f55e9b938 prev 0x555f55e54618 <line:505:1, col:58> col:12 used z_impl_k_queue_is_empty 'int (struct k_queue *)' extern
| `-ParmVarDecl 0x555f55e9b8a8 <col:36, col:53> col:53 queue 'struct k_queue *'
|-FunctionDecl 0x555f55e9ba98 prev 0x555f55e544b8 <line:506:1, line:515:1> line:506:19 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x555f55e9ba08 <col:36, col:53> col:53 used queue 'struct k_queue *'
| `-CompoundStmt 0x555f55e9bd60 <line:507:1, line:515:1>
|   |-DoStmt 0x555f55e9bc20 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e9bbe8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e9bb98 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e9bc00 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e9bd48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:514:2, col:38>
|     `-CallExpr 0x555f55e9bd00 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x555f55e9bce8 <col:9> 'int (*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e9bc40 <col:9> 'int (struct k_queue *)' Function 0x555f55e9b938 'z_impl_k_queue_is_empty' 'int (struct k_queue *)'
|       `-ImplicitCastExpr 0x555f55e9bd30 <col:33> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e9bc68 <col:33> 'struct k_queue *' lvalue ParmVar 0x555f55e9ba08 'queue' 'struct k_queue *'
|-FunctionDecl 0x555f55e9be38 prev 0x555f55e55470 <line:518:1, col:62> col:15 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x555f55e9bda8 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x555f55e9bff0 prev 0x555f55e54998 <line:519:1, line:528:1> line:519:22 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x555f55e9bf60 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x555f55e9c2c0 <line:520:1, line:528:1>
|   |-DoStmt 0x555f55e9c178 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e9c140 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e9c0f0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e9c158 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e9c2a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:527:2, col:39>
|     `-CallExpr 0x555f55e9c260 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x555f55e9c248 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e9c198 <col:9> 'void *(struct k_queue *)' Function 0x555f55e9be38 'z_impl_k_queue_peek_head' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x555f55e9c290 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e9c1c0 <col:34> 'struct k_queue *' lvalue ParmVar 0x555f55e9bf60 'queue' 'struct k_queue *'
|-FunctionDecl 0x555f55e9c398 prev 0x555f55e559a8 <line:531:1, col:62> col:15 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x555f55e9c308 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x555f55e9c4f8 prev 0x555f55e55848 <line:532:1, line:541:1> line:532:22 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x555f55e9c468 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x555f55e9c768 <line:533:1, line:541:1>
|   |-DoStmt 0x555f55e9c680 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e9c648 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e9c5f8 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e9c660 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e9c750 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:540:2, col:39>
|     `-CallExpr 0x555f55e9c708 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x555f55e9c6f0 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e9c6a0 <col:9> 'void *(struct k_queue *)' Function 0x555f55e9c398 'z_impl_k_queue_peek_tail' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x555f55e9c738 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e9c6c8 <col:34> 'struct k_queue *' lvalue ParmVar 0x555f55e9c468 'queue' 'struct k_queue *'
|-FunctionDecl 0x555f55e9ca68 <line:544:1, col:83> col:12 used z_impl_k_futex_wait 'int (struct k_futex *, int, s32_t)' extern
| |-ParmVarDecl 0x555f55e9c840 <col:32, col:49> col:49 futex 'struct k_futex *'
| |-ParmVarDecl 0x555f55e9c8b8 <col:56, col:60> col:60 expected 'int'
| `-ParmVarDecl 0x555f55e9c928 <col:70, col:76> col:76 timeout 's32_t':'int'
|-FunctionDecl 0x555f55e9ccd0 <line:545:1, line:554:1> line:545:19 k_futex_wait 'int (struct k_futex *, int, s32_t)' static inline
| |-ParmVarDecl 0x555f55e9cb48 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x555f55e9cbc0 <col:56, col:60> col:60 used expected 'int'
| |-ParmVarDecl 0x555f55e9cc30 <col:70, col:76> col:76 used timeout 's32_t':'int'
| `-CompoundStmt 0x555f55e9d050 <line:546:1, line:554:1>
|   |-DoStmt 0x555f55e9ce68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e9ce30 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e9cde0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e9ce48 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e9d038 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:553:2, col:53>
|     `-CallExpr 0x555f55e9cfb0 <col:9, col:53> 'int'
|       |-ImplicitCastExpr 0x555f55e9cf98 <col:9> 'int (*)(struct k_futex *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e9ce88 <col:9> 'int (struct k_futex *, int, s32_t)' Function 0x555f55e9ca68 'z_impl_k_futex_wait' 'int (struct k_futex *, int, s32_t)'
|       |-ImplicitCastExpr 0x555f55e9cff0 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e9ceb0 <col:29> 'struct k_futex *' lvalue ParmVar 0x555f55e9cb48 'futex' 'struct k_futex *'
|       |-ImplicitCastExpr 0x555f55e9d008 <col:36> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e9ced8 <col:36> 'int' lvalue ParmVar 0x555f55e9cbc0 'expected' 'int'
|       `-ImplicitCastExpr 0x555f55e9d020 <col:46> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e9cf00 <col:46> 's32_t':'int' lvalue ParmVar 0x555f55e9cc30 'timeout' 's32_t':'int'
|-FunctionDecl 0x555f55e9d228 <line:557:1, col:69> col:12 used z_impl_k_futex_wake 'int (struct k_futex *, bool)' extern
| |-ParmVarDecl 0x555f55e9d098 <col:32, col:49> col:49 futex 'struct k_futex *'
| `-ParmVarDecl 0x555f55e9d108 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:557:61> col:61 wake_all 'bool'
|-FunctionDecl 0x555f55e9d408 <line:558:1, line:567:1> line:558:19 k_futex_wake 'int (struct k_futex *, bool)' static inline
| |-ParmVarDecl 0x555f55e9d300 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x555f55e9d370 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:558:61> col:61 used wake_all 'bool'
| `-CompoundStmt 0x555f55e9d720 <line:559:1, line:567:1>
|   |-DoStmt 0x555f55e9d598 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e9d560 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e9d510 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e9d578 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e9d708 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:566:2, col:44>
|     `-CallExpr 0x555f55e9d6a0 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x555f55e9d688 <col:9> 'int (*)(struct k_futex *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e9d5b8 <col:9> 'int (struct k_futex *, bool)' Function 0x555f55e9d228 'z_impl_k_futex_wake' 'int (struct k_futex *, bool)'
|       |-ImplicitCastExpr 0x555f55e9d6d8 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e9d5e0 <col:29> 'struct k_futex *' lvalue ParmVar 0x555f55e9d300 'futex' 'struct k_futex *'
|       `-ImplicitCastExpr 0x555f55e9d6f0 <col:36> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e9d608 <col:36> 'bool' lvalue ParmVar 0x555f55e9d370 'wake_all' 'bool'
|-FunctionDecl 0x555f55e9d868 <line:570:1, col:81> col:14 used z_impl_k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' extern
| |-ParmVarDecl 0x555f55e9d768 <col:40, col:57> col:57 stack 'struct k_stack *'
| `-ParmVarDecl 0x555f55e9d7d8 <col:64, col:70> col:70 num_entries 'u32_t':'unsigned int'
|-FunctionDecl 0x555f55e9da40 prev 0x555f55d549a0 <line:571:1, line:580:1> line:571:21 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x555f55e9d940 <col:40, col:57> col:57 used stack 'struct k_stack *'
| |-ParmVarDecl 0x555f55e9d9b0 <col:64, col:70> col:70 used num_entries 'u32_t':'unsigned int'
| `-CompoundStmt 0x555f55e9dd60 <line:572:1, line:580:1>
|   |-DoStmt 0x555f55e9dbd0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e9db98 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e9db48 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e9dbb0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e9dd48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:579:2, col:53>
|     `-CallExpr 0x555f55e9dce0 <col:9, col:53> 's32_t':'int'
|       |-ImplicitCastExpr 0x555f55e9dcc8 <col:9> 's32_t (*)(struct k_stack *, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e9dbf0 <col:9> 's32_t (struct k_stack *, u32_t)' Function 0x555f55e9d868 'z_impl_k_stack_alloc_init' 's32_t (struct k_stack *, u32_t)'
|       |-ImplicitCastExpr 0x555f55e9dd18 <col:35> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e9dc18 <col:35> 'struct k_stack *' lvalue ParmVar 0x555f55e9d940 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x555f55e9dd30 <col:42> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e9dc40 <col:42> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55e9d9b0 'num_entries' 'u32_t':'unsigned int'
|-FunctionDecl 0x555f55e9deb0 <line:583:1, col:73> col:12 used z_impl_k_stack_push 'int (struct k_stack *, stack_data_t)' extern
| |-ParmVarDecl 0x555f55e9dda8 <col:32, col:49> col:49 stack 'struct k_stack *'
| `-ParmVarDecl 0x555f55e9de18 <col:56, col:69> col:69 data 'stack_data_t':'unsigned long'
|-FunctionDecl 0x555f55e9e0b0 prev 0x555f55d54e28 <line:584:1, line:593:1> line:584:19 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x555f55e9dfa8 <col:32, col:49> col:49 used stack 'struct k_stack *'
| |-ParmVarDecl 0x555f55e9e018 <col:56, col:69> col:69 used data 'stack_data_t':'unsigned long'
| `-CompoundStmt 0x555f55e9e3d0 <line:585:1, line:593:1>
|   |-DoStmt 0x555f55e9e240 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e9e208 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e9e1b8 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e9e220 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e9e3b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:592:2, col:40>
|     `-CallExpr 0x555f55e9e350 <col:9, col:40> 'int'
|       |-ImplicitCastExpr 0x555f55e9e338 <col:9> 'int (*)(struct k_stack *, stack_data_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e9e260 <col:9> 'int (struct k_stack *, stack_data_t)' Function 0x555f55e9deb0 'z_impl_k_stack_push' 'int (struct k_stack *, stack_data_t)'
|       |-ImplicitCastExpr 0x555f55e9e388 <col:29> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e9e288 <col:29> 'struct k_stack *' lvalue ParmVar 0x555f55e9dfa8 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x555f55e9e3a0 <col:36> 'stack_data_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e9e2b0 <col:36> 'stack_data_t':'unsigned long' lvalue ParmVar 0x555f55e9e018 'data' 'stack_data_t':'unsigned long'
|-FunctionDecl 0x555f55e9e598 <line:596:1, col:89> col:12 used z_impl_k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' extern
| |-ParmVarDecl 0x555f55e9e418 <col:31, col:48> col:48 stack 'struct k_stack *'
| |-ParmVarDecl 0x555f55e9e488 <col:55, col:70> col:70 data 'stack_data_t *'
| `-ParmVarDecl 0x555f55e9e4f8 <col:76, col:82> col:82 timeout 's32_t':'int'
|-FunctionDecl 0x555f55e9e7f8 prev 0x555f55d554c8 <line:597:1, line:606:1> line:597:19 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x555f55e9e678 <col:31, col:48> col:48 used stack 'struct k_stack *'
| |-ParmVarDecl 0x555f55e9e6e8 <col:55, col:70> col:70 used data 'stack_data_t *'
| |-ParmVarDecl 0x555f55e9e758 <col:76, col:82> col:82 used timeout 's32_t':'int'
| `-CompoundStmt 0x555f55e9eb60 <line:598:1, line:606:1>
|   |-DoStmt 0x555f55e9e990 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e9e958 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e9e908 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e9e970 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e9eb48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:605:2, col:48>
|     `-CallExpr 0x555f55e9eac0 <col:9, col:48> 'int'
|       |-ImplicitCastExpr 0x555f55e9eaa8 <col:9> 'int (*)(struct k_stack *, stack_data_t *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e9e9b0 <col:9> 'int (struct k_stack *, stack_data_t *, s32_t)' Function 0x555f55e9e598 'z_impl_k_stack_pop' 'int (struct k_stack *, stack_data_t *, s32_t)'
|       |-ImplicitCastExpr 0x555f55e9eb00 <col:28> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e9e9d8 <col:28> 'struct k_stack *' lvalue ParmVar 0x555f55e9e678 'stack' 'struct k_stack *'
|       |-ImplicitCastExpr 0x555f55e9eb18 <col:35> 'stack_data_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e9ea00 <col:35> 'stack_data_t *' lvalue ParmVar 0x555f55e9e6e8 'data' 'stack_data_t *'
|       `-ImplicitCastExpr 0x555f55e9eb30 <col:41> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e9ea28 <col:41> 's32_t':'int' lvalue ParmVar 0x555f55e9e758 'timeout' 's32_t':'int'
|-FunctionDecl 0x555f55e9ec38 <line:609:1, col:54> col:12 used z_impl_k_mutex_init 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x555f55e9eba8 <col:32, col:49> col:49 mutex 'struct k_mutex *'
|-FunctionDecl 0x555f55e9ed98 prev 0x555f55e6cdb8 <line:610:1, line:619:1> line:610:19 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x555f55e9ed08 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x555f55e9f090 <line:611:1, line:619:1>
|   |-DoStmt 0x555f55e9ef20 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e9eee8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e9ee98 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e9ef00 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e9f078 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:618:2, col:34>
|     `-CallExpr 0x555f55e9f030 <col:9, col:34> 'int'
|       |-ImplicitCastExpr 0x555f55e9f018 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e9ef40 <col:9> 'int (struct k_mutex *)' Function 0x555f55e9ec38 'z_impl_k_mutex_init' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x555f55e9f060 <col:29> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e9ef90 <col:29> 'struct k_mutex *' lvalue ParmVar 0x555f55e9ed08 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x555f55e9f1e0 <line:622:1, col:69> col:12 used z_impl_k_mutex_lock 'int (struct k_mutex *, s32_t)' extern
| |-ParmVarDecl 0x555f55e9f0d8 <col:32, col:49> col:49 mutex 'struct k_mutex *'
| `-ParmVarDecl 0x555f55e9f148 <col:56, col:62> col:62 timeout 's32_t':'int'
|-FunctionDecl 0x555f55e9f3c0 prev 0x555f55e6d038 <line:623:1, line:632:1> line:623:19 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x555f55e9f2b8 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| |-ParmVarDecl 0x555f55e9f328 <col:56, col:62> col:62 used timeout 's32_t':'int'
| `-CompoundStmt 0x555f55e9f6e0 <line:624:1, line:632:1>
|   |-DoStmt 0x555f55e9f550 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e9f518 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e9f4c8 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e9f530 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e9f6c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:631:2, col:43>
|     `-CallExpr 0x555f55e9f660 <col:9, col:43> 'int'
|       |-ImplicitCastExpr 0x555f55e9f648 <col:9> 'int (*)(struct k_mutex *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e9f570 <col:9> 'int (struct k_mutex *, s32_t)' Function 0x555f55e9f1e0 'z_impl_k_mutex_lock' 'int (struct k_mutex *, s32_t)'
|       |-ImplicitCastExpr 0x555f55e9f698 <col:29> 'struct k_mutex *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55e9f598 <col:29> 'struct k_mutex *' lvalue ParmVar 0x555f55e9f2b8 'mutex' 'struct k_mutex *'
|       `-ImplicitCastExpr 0x555f55e9f6b0 <col:36> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e9f5c0 <col:36> 's32_t':'int' lvalue ParmVar 0x555f55e9f328 'timeout' 's32_t':'int'
|-FunctionDecl 0x555f55e9f7b8 <line:635:1, col:56> col:12 used z_impl_k_mutex_unlock 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x555f55e9f728 <col:34, col:51> col:51 mutex 'struct k_mutex *'
|-FunctionDecl 0x555f55e9f918 prev 0x555f55e6d1d0 <line:636:1, line:645:1> line:636:19 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x555f55e9f888 <col:34, col:51> col:51 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x555f55e9fb88 <line:637:1, line:645:1>
|   |-DoStmt 0x555f55e9faa0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55e9fa68 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55e9fa18 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55e9fa80 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55e9fb70 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:644:2, col:36>
|     `-CallExpr 0x555f55e9fb28 <col:9, col:36> 'int'
|       |-ImplicitCastExpr 0x555f55e9fb10 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55e9fac0 <col:9> 'int (struct k_mutex *)' Function 0x555f55e9f7b8 'z_impl_k_mutex_unlock' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x555f55e9fb58 <col:31> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55e9fae8 <col:31> 'struct k_mutex *' lvalue ParmVar 0x555f55e9f888 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x555f55e9fd60 <line:648:1, col:96> col:12 used z_impl_k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' extern
| |-ParmVarDecl 0x555f55e9fbd0 <col:30, col:45> col:45 sem 'struct k_sem *'
| |-ParmVarDecl 0x555f55e9fc48 <col:50, col:63> col:63 initial_count 'unsigned int'
| `-ParmVarDecl 0x555f55e9fcc0 <col:78, col:91> col:91 limit 'unsigned int'
|-FunctionDecl 0x555f55e9ffd0 prev 0x555f55e6d7d8 <line:649:1, line:658:1> line:649:19 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x555f55e9fe40 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x555f55e9feb8 <col:50, col:63> col:63 used initial_count 'unsigned int'
| |-ParmVarDecl 0x555f55e9ff30 <col:78, col:91> col:91 used limit 'unsigned int'
| `-CompoundStmt 0x555f55ea0340 <line:650:1, line:658:1>
|   |-DoStmt 0x555f55ea0168 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea0130 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea00e0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea0148 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55ea0328 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:657:2, col:52>
|     `-CallExpr 0x555f55ea02a0 <col:9, col:52> 'int'
|       |-ImplicitCastExpr 0x555f55ea0288 <col:9> 'int (*)(struct k_sem *, unsigned int, unsigned int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55ea0188 <col:9> 'int (struct k_sem *, unsigned int, unsigned int)' Function 0x555f55e9fd60 'z_impl_k_sem_init' 'int (struct k_sem *, unsigned int, unsigned int)'
|       |-ImplicitCastExpr 0x555f55ea02e0 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea01b0 <col:27> 'struct k_sem *' lvalue ParmVar 0x555f55e9fe40 'sem' 'struct k_sem *'
|       |-ImplicitCastExpr 0x555f55ea02f8 <col:32> 'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea01d8 <col:32> 'unsigned int' lvalue ParmVar 0x555f55e9feb8 'initial_count' 'unsigned int'
|       `-ImplicitCastExpr 0x555f55ea0310 <col:47> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55ea0200 <col:47> 'unsigned int' lvalue ParmVar 0x555f55e9ff30 'limit' 'unsigned int'
|-FunctionDecl 0x555f55ea0490 <line:661:1, col:63> col:12 used z_impl_k_sem_take 'int (struct k_sem *, s32_t)' extern
| |-ParmVarDecl 0x555f55ea0388 <col:30, col:45> col:45 sem 'struct k_sem *'
| `-ParmVarDecl 0x555f55ea03f8 <col:50, col:56> col:56 timeout 's32_t':'int'
|-FunctionDecl 0x555f55ea0670 prev 0x555f55e6da68 <line:662:1, line:671:1> line:662:19 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x555f55ea0568 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x555f55ea05d8 <col:50, col:56> col:56 used timeout 's32_t':'int'
| `-CompoundStmt 0x555f55ea0990 <line:663:1, line:671:1>
|   |-DoStmt 0x555f55ea0800 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea07c8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea0778 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea07e0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55ea0978 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:670:2, col:39>
|     `-CallExpr 0x555f55ea0910 <col:9, col:39> 'int'
|       |-ImplicitCastExpr 0x555f55ea08f8 <col:9> 'int (*)(struct k_sem *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55ea0820 <col:9> 'int (struct k_sem *, s32_t)' Function 0x555f55ea0490 'z_impl_k_sem_take' 'int (struct k_sem *, s32_t)'
|       |-ImplicitCastExpr 0x555f55ea0948 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea0848 <col:27> 'struct k_sem *' lvalue ParmVar 0x555f55ea0568 'sem' 'struct k_sem *'
|       `-ImplicitCastExpr 0x555f55ea0960 <col:32> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55ea0870 <col:32> 's32_t':'int' lvalue ParmVar 0x555f55ea05d8 'timeout' 's32_t':'int'
|-FunctionDecl 0x555f55ea0a60 <line:674:1, col:49> col:13 used z_impl_k_sem_give 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x555f55ea09d8 <col:31, col:46> col:46 sem 'struct k_sem *'
|-FunctionDecl 0x555f55ea0bb8 prev 0x555f55e6ecc0 <line:675:1, line:685:1> line:675:20 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x555f55ea0b30 <col:31, col:46> col:46 used sem 'struct k_sem *'
| `-CompoundStmt 0x555f55ea0e68 <line:676:1, line:685:1>
|   |-DoStmt 0x555f55ea0d40 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea0d08 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea0cb8 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea0d20 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55ea0e20 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:684:2, col:23> 'void'
|     |-ImplicitCastExpr 0x555f55ea0e08 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55ea0d60 <col:2> 'void (struct k_sem *)' Function 0x555f55ea0a60 'z_impl_k_sem_give' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x555f55ea0e50 <col:20> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55ea0d88 <col:20> 'struct k_sem *' lvalue ParmVar 0x555f55ea0b30 'sem' 'struct k_sem *'
|-FunctionDecl 0x555f55ea0fa0 prev 0x555f55e6efc8 <line:688:1, col:50> col:13 used z_impl_k_sem_reset 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x555f55ea0eb0 <col:32, col:47> col:47 sem 'struct k_sem *'
|-FunctionDecl 0x555f55ea10f8 prev 0x555f55e6ee48 <line:689:1, line:699:1> line:689:20 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x555f55ea1070 <col:32, col:47> col:47 used sem 'struct k_sem *'
| `-CompoundStmt 0x555f55ea1350 <line:690:1, line:699:1>
|   |-DoStmt 0x555f55ea1280 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea1248 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea11f8 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea1260 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55ea1308 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:698:2, col:24> 'void'
|     |-ImplicitCastExpr 0x555f55ea12f0 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55ea12a0 <col:2> 'void (struct k_sem *)' Function 0x555f55ea0fa0 'z_impl_k_sem_reset' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x555f55ea1338 <col:21> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55ea12c8 <col:21> 'struct k_sem *' lvalue ParmVar 0x555f55ea1070 'sem' 'struct k_sem *'
|-FunctionDecl 0x555f55ea1428 prev 0x555f55e6f430 <line:702:1, col:62> col:21 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' extern
| `-ParmVarDecl 0x555f55ea1398 <col:44, col:59> col:59 sem 'struct k_sem *'
|-FunctionDecl 0x555f55ea1588 prev 0x555f55e6f2a8 <line:703:1, line:712:1> line:703:28 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x555f55ea14f8 <col:44, col:59> col:59 used sem 'struct k_sem *'
| `-CompoundStmt 0x555f55ea1850 <line:704:1, line:712:1>
|   |-DoStmt 0x555f55ea1710 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea16d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea1688 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea16f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55ea1838 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:711:2, col:35>
|     `-CallExpr 0x555f55ea17f0 <col:9, col:35> 'unsigned int'
|       |-ImplicitCastExpr 0x555f55ea17d8 <col:9> 'unsigned int (*)(struct k_sem *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55ea1730 <col:9> 'unsigned int (struct k_sem *)' Function 0x555f55ea1428 'z_impl_k_sem_count_get' 'unsigned int (struct k_sem *)'
|       `-ImplicitCastExpr 0x555f55ea1820 <col:32> 'struct k_sem *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55ea1758 <col:32> 'struct k_sem *' lvalue ParmVar 0x555f55ea14f8 'sem' 'struct k_sem *'
|-FunctionDecl 0x555f55ea1a18 <line:715:1, col:90> col:12 used z_impl_k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' extern
| |-ParmVarDecl 0x555f55ea1898 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x555f55ea1908 <col:59, col:66> col:66 msg_size 'size_t':'unsigned long'
| `-ParmVarDecl 0x555f55ea1978 <col:76, col:82> col:82 max_msgs 'u32_t':'unsigned int'
|-FunctionDecl 0x555f55ea1c78 prev 0x555f55e1f9b8 <line:716:1, line:725:1> line:716:19 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x555f55ea1af8 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x555f55ea1b68 <col:59, col:66> col:66 used msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55ea1bd8 <col:76, col:82> col:82 used max_msgs 'u32_t':'unsigned int'
| `-CompoundStmt 0x555f55ea1fe0 <line:717:1, line:725:1>
|   |-DoStmt 0x555f55ea1e10 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea1dd8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea1d88 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea1df0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55ea1fc8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:724:2, col:58>
|     `-CallExpr 0x555f55ea1f40 <col:9, col:58> 'int'
|       |-ImplicitCastExpr 0x555f55ea1f28 <col:9> 'int (*)(struct k_msgq *, size_t, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55ea1e30 <col:9> 'int (struct k_msgq *, size_t, u32_t)' Function 0x555f55ea1a18 'z_impl_k_msgq_alloc_init' 'int (struct k_msgq *, size_t, u32_t)'
|       |-ImplicitCastExpr 0x555f55ea1f80 <col:34> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea1e58 <col:34> 'struct k_msgq *' lvalue ParmVar 0x555f55ea1af8 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x555f55ea1f98 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea1e80 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x555f55ea1b68 'msg_size' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x555f55ea1fb0 <col:50> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55ea1ea8 <col:50> 'u32_t':'unsigned int' lvalue ParmVar 0x555f55ea1bd8 'max_msgs' 'u32_t':'unsigned int'
|-FunctionDecl 0x555f55ea21b0 <line:728:1, col:78> col:12 used z_impl_k_msgq_put 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x555f55ea2028 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x555f55ea20a0 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x555f55ea2110 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x555f55ea2418 prev 0x555f55e1fee8 <line:729:1, line:738:1> line:729:19 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x555f55ea2290 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x555f55ea2308 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x555f55ea2378 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x555f55ea2780 <line:730:1, line:738:1>
|   |-DoStmt 0x555f55ea25b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea2578 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea2528 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea2590 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55ea2768 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:737:2, col:46>
|     `-CallExpr 0x555f55ea26e0 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x555f55ea26c8 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55ea25d0 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x555f55ea21b0 'z_impl_k_msgq_put' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x555f55ea2720 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea25f8 <col:27> 'struct k_msgq *' lvalue ParmVar 0x555f55ea2290 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x555f55ea2738 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea2620 <col:33> 'void *' lvalue ParmVar 0x555f55ea2308 'data' 'void *'
|       `-ImplicitCastExpr 0x555f55ea2750 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55ea2648 <col:39> 's32_t':'int' lvalue ParmVar 0x555f55ea2378 'timeout' 's32_t':'int'
|-FunctionDecl 0x555f55ea2950 <line:741:1, col:78> col:12 used z_impl_k_msgq_get 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x555f55ea27c8 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x555f55ea2840 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x555f55ea28b0 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x555f55ea2bb8 prev 0x555f55e73638 <line:742:1, line:751:1> line:742:19 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x555f55ea2a30 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x555f55ea2aa8 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x555f55ea2b18 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x555f55ea2ec8 <line:743:1, line:751:1>
|   |-DoStmt 0x555f55ea2d50 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea2d18 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea2cc8 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea2d30 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55ea2eb0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:750:2, col:46>
|     `-CallExpr 0x555f55ea2e28 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x555f55ea2e10 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55ea2d70 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x555f55ea2950 'z_impl_k_msgq_get' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x555f55ea2e68 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea2d98 <col:27> 'struct k_msgq *' lvalue ParmVar 0x555f55ea2a30 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x555f55ea2e80 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea2dc0 <col:33> 'void *' lvalue ParmVar 0x555f55ea2aa8 'data' 'void *'
|       `-ImplicitCastExpr 0x555f55ea2e98 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55ea2de8 <col:39> 's32_t':'int' lvalue ParmVar 0x555f55ea2b18 'timeout' 's32_t':'int'
|-FunctionDecl 0x555f55ea3048 <line:754:1, col:64> col:12 used z_impl_k_msgq_peek 'int (struct k_msgq *, void *)' extern
| |-ParmVarDecl 0x555f55ea2f10 <col:31, col:47> col:47 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x555f55ea2fb0 <col:53, col:60> col:60 data 'void *'
|-FunctionDecl 0x555f55ea3230 prev 0x555f55e738d8 <line:755:1, line:764:1> line:755:19 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x555f55ea3120 <col:31, col:47> col:47 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x555f55ea3198 <col:53, col:60> col:60 used data 'void *'
| `-CompoundStmt 0x555f55ea3550 <line:756:1, line:764:1>
|   |-DoStmt 0x555f55ea33c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea3388 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea3338 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea33a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55ea3538 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:763:2, col:38>
|     `-CallExpr 0x555f55ea34d0 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x555f55ea34b8 <col:9> 'int (*)(struct k_msgq *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55ea33e0 <col:9> 'int (struct k_msgq *, void *)' Function 0x555f55ea3048 'z_impl_k_msgq_peek' 'int (struct k_msgq *, void *)'
|       |-ImplicitCastExpr 0x555f55ea3508 <col:28> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea3408 <col:28> 'struct k_msgq *' lvalue ParmVar 0x555f55ea3120 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x555f55ea3520 <col:34> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55ea3430 <col:34> 'void *' lvalue ParmVar 0x555f55ea3198 'data' 'void *'
|-FunctionDecl 0x555f55ea3620 <line:767:1, col:53> col:13 used z_impl_k_msgq_purge 'void (struct k_msgq *)' extern
| `-ParmVarDecl 0x555f55ea3598 <col:33, col:49> col:49 msgq 'struct k_msgq *'
|-FunctionDecl 0x555f55ea3778 prev 0x555f55e73ae0 <line:768:1, line:778:1> line:768:20 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x555f55ea36f0 <col:33, col:49> col:49 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x555f55ea3a28 <line:769:1, line:778:1>
|   |-DoStmt 0x555f55ea3900 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea38c8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea3878 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea38e0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55ea39e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:777:2, col:26> 'void'
|     |-ImplicitCastExpr 0x555f55ea39c8 <col:2> 'void (*)(struct k_msgq *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55ea3920 <col:2> 'void (struct k_msgq *)' Function 0x555f55ea3620 'z_impl_k_msgq_purge' 'void (struct k_msgq *)'
|     `-ImplicitCastExpr 0x555f55ea3a10 <col:22> 'struct k_msgq *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55ea3948 <col:22> 'struct k_msgq *' lvalue ParmVar 0x555f55ea36f0 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x555f55ea3af8 prev 0x555f55e74160 <line:781:1, col:61> col:14 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x555f55ea3a70 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x555f55ea3c50 prev 0x555f55e73ce0 <line:782:1, line:791:1> line:782:21 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x555f55ea3bc8 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x555f55ea3f20 <line:783:1, line:791:1>
|   |-DoStmt 0x555f55ea3dd8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea3da0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea3d50 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea3db8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55ea3f08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:790:2, col:40>
|     `-CallExpr 0x555f55ea3ec0 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x555f55ea3ea8 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55ea3df8 <col:9> 'u32_t (struct k_msgq *)' Function 0x555f55ea3af8 'z_impl_k_msgq_num_free_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x555f55ea3ef0 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55ea3e20 <col:36> 'struct k_msgq *' lvalue ParmVar 0x555f55ea3bc8 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x555f55ea4080 <line:794:1, col:86> col:13 used z_impl_k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' extern
| |-ParmVarDecl 0x555f55ea3f68 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x555f55ea3ff0 <col:59, col:81> col:81 attrs 'struct k_msgq_attrs *'
|-FunctionDecl 0x555f55ea4270 prev 0x555f55e74000 <line:795:1, line:805:1> line:795:20 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x555f55ea4158 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x555f55ea41e0 <col:59, col:81> col:81 used attrs 'struct k_msgq_attrs *'
| `-CompoundStmt 0x555f55ea4578 <line:796:1, line:805:1>
|   |-DoStmt 0x555f55ea4400 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea43c8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea4378 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea43e0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55ea4510 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:804:2, col:37> 'void'
|     |-ImplicitCastExpr 0x555f55ea44f8 <col:2> 'void (*)(struct k_msgq *, struct k_msgq_attrs *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55ea4420 <col:2> 'void (struct k_msgq *, struct k_msgq_attrs *)' Function 0x555f55ea4080 'z_impl_k_msgq_get_attrs' 'void (struct k_msgq *, struct k_msgq_attrs *)'
|     |-ImplicitCastExpr 0x555f55ea4548 <col:26> 'struct k_msgq *' <LValueToRValue>
|     | `-DeclRefExpr 0x555f55ea4448 <col:26> 'struct k_msgq *' lvalue ParmVar 0x555f55ea4158 'msgq' 'struct k_msgq *'
|     `-ImplicitCastExpr 0x555f55ea4560 <col:32> 'struct k_msgq_attrs *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55ea4470 <col:32> 'struct k_msgq_attrs *' lvalue ParmVar 0x555f55ea41e0 'attrs' 'struct k_msgq_attrs *'
|-FunctionDecl 0x555f55ea4648 prev 0x555f55e74a38 <line:808:1, col:61> col:14 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x555f55ea45c0 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x555f55ea47a0 prev 0x555f55e748e0 <line:809:1, line:818:1> line:809:21 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x555f55ea4718 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x555f55ea4a10 <line:810:1, line:818:1>
|   |-DoStmt 0x555f55ea4928 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea48f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea48a0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea4908 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55ea49f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:817:2, col:40>
|     `-CallExpr 0x555f55ea49b0 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x555f55ea4998 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55ea4948 <col:9> 'u32_t (struct k_msgq *)' Function 0x555f55ea4648 'z_impl_k_msgq_num_used_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x555f55ea49e0 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55ea4970 <col:36> 'struct k_msgq *' lvalue ParmVar 0x555f55ea4718 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x555f55ea4b60 <line:821:1, col:70> col:12 used z_impl_k_pipe_alloc_init 'int (struct k_pipe *, size_t)' extern
| |-ParmVarDecl 0x555f55ea4a58 <col:37, col:53> col:53 pipe 'struct k_pipe *'
| `-ParmVarDecl 0x555f55ea4ac8 <col:59, col:66> col:66 size 'size_t':'unsigned long'
|-FunctionDecl 0x555f55ea4d40 prev 0x555f55e7aba8 <line:822:1, line:831:1> line:822:19 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x555f55ea4c38 <col:37, col:53> col:53 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x555f55ea4ca8 <col:59, col:66> col:66 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x555f55ea5080 <line:823:1, line:831:1>
|   |-DoStmt 0x555f55ea4ed0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea4e98 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea4e48 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea4eb0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55ea5068 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:830:2, col:44>
|     `-CallExpr 0x555f55ea5000 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x555f55ea4fe8 <col:9> 'int (*)(struct k_pipe *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55ea4ef0 <col:9> 'int (struct k_pipe *, size_t)' Function 0x555f55ea4b60 'z_impl_k_pipe_alloc_init' 'int (struct k_pipe *, size_t)'
|       |-ImplicitCastExpr 0x555f55ea5038 <col:34> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea4f18 <col:34> 'struct k_pipe *' lvalue ParmVar 0x555f55ea4c38 'pipe' 'struct k_pipe *'
|       `-ImplicitCastExpr 0x555f55ea5050 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x555f55ea4f40 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x555f55ea4ca8 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x555f55ea53b8 <line:834:1, col:142> col:12 used z_impl_k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x555f55ea50c8 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x555f55ea5140 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x555f55ea51b0 <col:65, col:72> col:72 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55ea5220 <col:88, col:97> col:97 bytes_written 'size_t *'
| |-ParmVarDecl 0x555f55ea5290 <col:112, col:119> col:119 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x555f55ea5300 <col:129, col:135> col:135 timeout 's32_t':'int'
|-FunctionDecl 0x555f55ea57a0 prev 0x555f55e7b098 <line:835:1, line:844:1> line:835:19 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x555f55ea54b0 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x555f55ea5528 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x555f55ea5598 <col:65, col:72> col:72 used bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55ea5608 <col:88, col:97> col:97 used bytes_written 'size_t *'
| |-ParmVarDecl 0x555f55ea5678 <col:112, col:119> col:119 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55ea56e8 <col:129, col:135> col:135 used timeout 's32_t':'int'
| `-CompoundStmt 0x555f55ea5c00 <line:836:1, line:844:1>
|   |-DoStmt 0x555f55ea5950 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea5918 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea58c8 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea5930 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55ea5be8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:843:2, col:87>
|     `-CallExpr 0x555f55ea5b00 <col:9, col:87> 'int'
|       |-ImplicitCastExpr 0x555f55ea5ae8 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55ea5970 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x555f55ea53b8 'z_impl_k_pipe_put' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x555f55ea5b58 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea5998 <col:27> 'struct k_pipe *' lvalue ParmVar 0x555f55ea54b0 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x555f55ea5b70 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea59c0 <col:33> 'void *' lvalue ParmVar 0x555f55ea5528 'data' 'void *'
|       |-ImplicitCastExpr 0x555f55ea5b88 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea59e8 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x555f55ea5598 'bytes_to_write' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x555f55ea5ba0 <col:55> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea5a10 <col:55> 'size_t *' lvalue ParmVar 0x555f55ea5608 'bytes_written' 'size_t *'
|       |-ImplicitCastExpr 0x555f55ea5bb8 <col:70> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea5a38 <col:70> 'size_t':'unsigned long' lvalue ParmVar 0x555f55ea5678 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x555f55ea5bd0 <col:80> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55ea5a60 <col:80> 's32_t':'int' lvalue ParmVar 0x555f55ea56e8 'timeout' 's32_t':'int'
|-FunctionDecl 0x555f55ea5f38 <line:847:1, col:138> col:12 used z_impl_k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x555f55ea5c48 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x555f55ea5cc0 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x555f55ea5d30 <col:65, col:72> col:72 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55ea5da0 <col:87, col:96> col:96 bytes_read 'size_t *'
| |-ParmVarDecl 0x555f55ea5e10 <col:108, col:115> col:115 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x555f55ea5e80 <col:125, col:131> col:131 timeout 's32_t':'int'
|-FunctionDecl 0x555f55ea6320 prev 0x555f55e7b4b0 <line:848:1, line:857:1> line:848:19 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x555f55ea6030 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x555f55ea60a8 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x555f55ea6118 <col:65, col:72> col:72 used bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55ea6188 <col:87, col:96> col:96 used bytes_read 'size_t *'
| |-ParmVarDecl 0x555f55ea61f8 <col:108, col:115> col:115 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x555f55ea6268 <col:125, col:131> col:131 used timeout 's32_t':'int'
| `-CompoundStmt 0x555f55ea6720 <line:849:1, line:857:1>
|   |-DoStmt 0x555f55ea64d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea6498 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea6448 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea64b0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55ea6708 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:856:2, col:83>
|     `-CallExpr 0x555f55ea6620 <col:9, col:83> 'int'
|       |-ImplicitCastExpr 0x555f55ea6608 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55ea64f0 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x555f55ea5f38 'z_impl_k_pipe_get' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x555f55ea6678 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea6518 <col:27> 'struct k_pipe *' lvalue ParmVar 0x555f55ea6030 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x555f55ea6690 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea6540 <col:33> 'void *' lvalue ParmVar 0x555f55ea60a8 'data' 'void *'
|       |-ImplicitCastExpr 0x555f55ea66a8 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea6568 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x555f55ea6118 'bytes_to_read' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x555f55ea66c0 <col:54> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea6590 <col:54> 'size_t *' lvalue ParmVar 0x555f55ea6188 'bytes_read' 'size_t *'
|       |-ImplicitCastExpr 0x555f55ea66d8 <col:66> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea65b8 <col:66> 'size_t':'unsigned long' lvalue ParmVar 0x555f55ea61f8 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x555f55ea66f0 <col:76> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55ea65e0 <col:76> 's32_t':'int' lvalue ParmVar 0x555f55ea6268 'timeout' 's32_t':'int'
|-FunctionDecl 0x555f55ea68f0 <line:860:1, col:85> col:12 used z_impl_k_poll 'int (struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x555f55ea6768 <col:26, col:48> col:48 events 'struct k_poll_event *'
| |-ParmVarDecl 0x555f55ea67e0 <col:56, col:60> col:60 num_events 'int'
| `-ParmVarDecl 0x555f55ea6850 <col:72, col:78> col:78 timeout 's32_t':'int'
|-FunctionDecl 0x555f55ea6b58 prev 0x555f55e84b18 <line:861:1, line:870:1> line:861:19 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x555f55ea69d0 <col:26, col:48> col:48 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x555f55ea6a48 <col:56, col:60> col:60 used num_events 'int'
| |-ParmVarDecl 0x555f55ea6ab8 <col:72, col:78> col:78 used timeout 's32_t':'int'
| `-CompoundStmt 0x555f55ea6ec0 <line:862:1, line:870:1>
|   |-DoStmt 0x555f55ea6cf0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea6cb8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea6c68 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea6cd0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55ea6ea8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:869:2, col:50>
|     `-CallExpr 0x555f55ea6e20 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x555f55ea6e08 <col:9> 'int (*)(struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55ea6d10 <col:9> 'int (struct k_poll_event *, int, s32_t)' Function 0x555f55ea68f0 'z_impl_k_poll' 'int (struct k_poll_event *, int, s32_t)'
|       |-ImplicitCastExpr 0x555f55ea6e60 <col:23> 'struct k_poll_event *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea6d38 <col:23> 'struct k_poll_event *' lvalue ParmVar 0x555f55ea69d0 'events' 'struct k_poll_event *'
|       |-ImplicitCastExpr 0x555f55ea6e78 <col:31> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea6d60 <col:31> 'int' lvalue ParmVar 0x555f55ea6a48 'num_events' 'int'
|       `-ImplicitCastExpr 0x555f55ea6e90 <col:43> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55ea6d88 <col:43> 's32_t':'int' lvalue ParmVar 0x555f55ea6ab8 'timeout' 's32_t':'int'
|-FunctionDecl 0x555f55ea6fd0 <line:873:1, col:68> col:13 used z_impl_k_poll_signal_init 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x555f55ea6f08 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
|-FunctionDecl 0x555f55ea7128 prev 0x555f55e84d20 <line:874:1, line:884:1> line:874:20 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x555f55ea70a0 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x555f55ea73d8 <line:875:1, line:884:1>
|   |-DoStmt 0x555f55ea72b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea7278 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea7228 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea7290 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55ea7390 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:883:2, col:34> 'void'
|     |-ImplicitCastExpr 0x555f55ea7378 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55ea72d0 <col:2> 'void (struct k_poll_signal *)' Function 0x555f55ea6fd0 'z_impl_k_poll_signal_init' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x555f55ea73c0 <col:28> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55ea72f8 <col:28> 'struct k_poll_signal *' lvalue ParmVar 0x555f55ea70a0 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x555f55ea74a8 prev 0x555f55e84fd0 <line:887:1, col:69> col:13 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x555f55ea7420 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
|-FunctionDecl 0x555f55ea7600 prev 0x555f55e84e78 <line:888:1, line:898:1> line:888:20 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x555f55ea7578 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x555f55ea7858 <line:889:1, line:898:1>
|   |-DoStmt 0x555f55ea7788 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea7750 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea7700 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea7768 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55ea7810 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:897:2, col:35> 'void'
|     |-ImplicitCastExpr 0x555f55ea77f8 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55ea77a8 <col:2> 'void (struct k_poll_signal *)' Function 0x555f55ea74a8 'z_impl_k_poll_signal_reset' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x555f55ea7840 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55ea77d0 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x555f55ea7578 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x555f55ea7a28 <line:901:1, col:108> col:13 used z_impl_k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' extern
| |-ParmVarDecl 0x555f55ea78a0 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x555f55ea7918 <col:71, col:86> col:86 signaled 'unsigned int *'
| `-ParmVarDecl 0x555f55ea7990 <col:96, col:102> col:102 result 'int *'
|-FunctionDecl 0x555f55ea7c90 prev 0x555f55e853d0 <line:902:1, line:912:1> line:902:20 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x555f55ea7b08 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x555f55ea7b80 <col:71, col:86> col:86 used signaled 'unsigned int *'
| |-ParmVarDecl 0x555f55ea7bf8 <col:96, col:102> col:102 used result 'int *'
| `-CompoundStmt 0x555f55ea7fe8 <line:903:1, line:912:1>
|   |-DoStmt 0x555f55ea7e28 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea7df0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea7da0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea7e08 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55ea7f60 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:911:2, col:53> 'void'
|     |-ImplicitCastExpr 0x555f55ea7f48 <col:2> 'void (*)(struct k_poll_signal *, unsigned int *, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55ea7e48 <col:2> 'void (struct k_poll_signal *, unsigned int *, int *)' Function 0x555f55ea7a28 'z_impl_k_poll_signal_check' 'void (struct k_poll_signal *, unsigned int *, int *)'
|     |-ImplicitCastExpr 0x555f55ea7fa0 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|     | `-DeclRefExpr 0x555f55ea7e70 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x555f55ea7b08 'signal' 'struct k_poll_signal *'
|     |-ImplicitCastExpr 0x555f55ea7fb8 <col:37> 'unsigned int *' <LValueToRValue>
|     | `-DeclRefExpr 0x555f55ea7e98 <col:37> 'unsigned int *' lvalue ParmVar 0x555f55ea7b80 'signaled' 'unsigned int *'
|     `-ImplicitCastExpr 0x555f55ea7fd0 <col:47> 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x555f55ea7ec0 <col:47> 'int *' lvalue ParmVar 0x555f55ea7bf8 'result' 'int *'
|-FunctionDecl 0x555f55ea8140 <line:915:1, col:80> col:12 used z_impl_k_poll_signal_raise 'int (struct k_poll_signal *, int)' extern
| |-ParmVarDecl 0x555f55ea8030 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
| `-ParmVarDecl 0x555f55ea80a8 <col:70, col:74> col:74 result 'int'
|-FunctionDecl 0x555f55ea8328 prev 0x555f55e85b20 <line:916:1, line:925:1> line:916:19 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x555f55ea8218 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x555f55ea8290 <col:70, col:74> col:74 used result 'int'
| `-CompoundStmt 0x555f55ea8640 <line:917:1, line:925:1>
|   |-DoStmt 0x555f55ea84b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea8480 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea8430 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea8498 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55ea8628 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:924:2, col:50>
|     `-CallExpr 0x555f55ea85c0 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x555f55ea85a8 <col:9> 'int (*)(struct k_poll_signal *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55ea84d8 <col:9> 'int (struct k_poll_signal *, int)' Function 0x555f55ea8140 'z_impl_k_poll_signal_raise' 'int (struct k_poll_signal *, int)'
|       |-ImplicitCastExpr 0x555f55ea85f8 <col:36> 'struct k_poll_signal *' <LValueToRValue>
|       | `-DeclRefExpr 0x555f55ea8500 <col:36> 'struct k_poll_signal *' lvalue ParmVar 0x555f55ea8218 'signal' 'struct k_poll_signal *'
|       `-ImplicitCastExpr 0x555f55ea8610 <col:44> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x555f55ea8528 <col:44> 'int' lvalue ParmVar 0x555f55ea8290 'result' 'int'
|-FunctionDecl 0x555f55ea8800 <line:928:1, col:48> col:13 used z_impl_k_str_out 'void (char *, size_t)' extern
| |-ParmVarDecl 0x555f55ea8678 <col:30, col:37> col:37 c 'char *'
| `-ParmVarDecl 0x555f55ea86e8 <col:40, col:47> col:47 n 'size_t':'unsigned long'
|-FunctionDecl 0x555f55ea89c8 <line:929:1, line:939:1> line:929:20 k_str_out 'void (char *, size_t)' static inline
| |-ParmVarDecl 0x555f55ea88c8 <col:30, col:37> col:37 used c 'char *'
| |-ParmVarDecl 0x555f55ea8938 <col:40, col:47> col:47 used n 'size_t':'unsigned long'
| `-CompoundStmt 0x555f55ea8cc8 <line:930:1, line:939:1>
|   |-DoStmt 0x555f55ea8b58 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55ea8b20 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55ea8ad0 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55ea8b38 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x555f55ea8c60 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:938:2, col:23> 'void'
|     |-ImplicitCastExpr 0x555f55ea8c48 <col:2> 'void (*)(char *, size_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55ea8b78 <col:2> 'void (char *, size_t)' Function 0x555f55ea8800 'z_impl_k_str_out' 'void (char *, size_t)'
|     |-ImplicitCastExpr 0x555f55ea8c98 <col:19> 'char *' <LValueToRValue>
|     | `-DeclRefExpr 0x555f55ea8ba0 <col:19> 'char *' lvalue ParmVar 0x555f55ea88c8 'c' 'char *'
|     `-ImplicitCastExpr 0x555f55ea8cb0 <col:22> 'size_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x555f55ea8bc8 <col:22> 'size_t':'unsigned long' lvalue ParmVar 0x555f55ea8938 'n' 'size_t':'unsigned long'
|-FunctionDecl 0x555f55ea8da0 <line:942:1, col:59> col:12 used z_impl_k_float_disable 'int (struct k_thread *)' extern
| `-ParmVarDecl 0x555f55ea8d10 <col:35, col:53> col:53 thread 'struct k_thread *'
|-FunctionDecl 0x555f55ea8f00 prev 0x555f55e8af38 <line:943:1, line:952:1> line:943:19 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x555f55ea8e70 <col:35, col:53> col:53 used thread 'struct k_thread *'
| `-CompoundStmt 0x555f55eaa1c0 <line:944:1, line:952:1>
|   |-DoStmt 0x555f55eaa0a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x555f55eaa070 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x555f55eaa020 <col:2, col:39>
|   | `-IntegerLiteral 0x555f55eaa088 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x555f55eaa1a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:951:2, col:38>
|     `-CallExpr 0x555f55eaa160 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x555f55eaa148 <col:9> 'int (*)(struct k_thread *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55eaa0c8 <col:9> 'int (struct k_thread *)' Function 0x555f55ea8da0 'z_impl_k_float_disable' 'int (struct k_thread *)'
|       `-ImplicitCastExpr 0x555f55eaa190 <col:32> 'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x555f55eaa0f0 <col:32> 'struct k_thread *' lvalue ParmVar 0x555f55ea8e70 'thread' 'struct k_thread *'
|-FunctionDecl 0x555f55eaa2c0 </vagrant/apps/plc_4out/./_build/arm-tfm/install/export/tfm/inc/tfm_gpio_veneers.h:11:1, col:32> col:10 tfm_gpio_read_all 'uint32_t (void)'
|-FunctionDecl 0x555f55eaa490 <line:12:1, col:40> col:9 tfm_gpio_write_all 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x555f55eaa390 <col:28, col:37> col:37 out 'uint32_t':'unsigned int'
|-FunctionDecl 0x555f55eaa5d0 <line:13:1, col:46> col:9 tfm_gpio_enable_outputs 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x555f55eaa548 <col:33, col:42> col:42 pins 'uint32_t':'unsigned int'
|-FunctionDecl 0x555f55eaa790 <line:14:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x555f55eaa688 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x555f55eaa8d0 <line:16:1, col:43> col:9 tfm_gpio_enable_output 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x555f55eaa848 <col:32, col:40> col:40 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x555f55eaaa10 <line:17:1, col:33> col:9 tfm_gpio_set 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x555f55eaa988 <col:22, col:30> col:30 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x555f55eaab50 <line:18:1, col:35> col:9 tfm_gpio_clear 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x555f55eaaac8 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x555f55eaac90 <line:19:1, col:37> col:9 tfm_gpio_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x555f55eaac08 <col:26, col:34> col:34 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x555f55eaadd0 prev 0x555f55eaa790 <line:20:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x555f55eaad48 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-RecordDecl 0x555f55eaae78 <line:34:9, line:38:1> line:34:9 struct definition
| |-FieldDecl 0x555f55eaaf30 <line:35:5, col:13> col:13 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x555f55eaaf88 <line:36:5, col:13> col:13 polarity 'uint8_t':'unsigned char'
| `-FieldDecl 0x555f55eab070 <line:37:5, col:21> col:12 cb 'void (*)(void)'
|-TypedefDecl 0x555f55eab110 <line:34:1, line:38:3> col:3 referenced gpio_int_config 'struct gpio_int_config':'gpio_int_config'
| `-ElaboratedType 0x555f55eab0c0 'struct gpio_int_config' sugar
|   `-RecordType 0x555f55eaaf00 'gpio_int_config'
|     `-Record 0x555f55eaae78 ''
|-FunctionDecl 0x555f55eab390 <line:40:1, col:68> col:9 tfm_gpio_interrupt_enable 'uint8_t (uint8_t, gpio_int_config *)'
| |-ParmVarDecl 0x555f55eab190 <col:35, col:43> col:43 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x555f55eab278 <col:48, col:65> col:65 cfg 'gpio_int_config *'
|-FunctionDecl 0x555f55eab4d8 <line:41:1, col:47> col:9 tfm_gpio_interrupt_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x555f55eab450 <col:36, col:44> col:44 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x555f55eab598 </vagrant/apps/plc_4out/./inc/plc_platform.h:5:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x555f55ca0770 'short'
|-TypedefDecl 0x555f55eab608 <line:6:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x555f55ca07f0 'unsigned char'
|-EnumDecl 0x555f55eab660 <line:25:9, line:29:1> line:25:9
| |-EnumConstantDecl 0x555f55eab740 <line:26:2, col:6> col:2 referenced R 'int'
| | `-IntegerLiteral 0x555f55eab720 <col:6> 'int' 2
| |-EnumConstantDecl 0x555f55eab7a8 <line:27:2, col:6> col:2 referenced G 'int'
| | `-IntegerLiteral 0x555f55eab788 <col:6> 'int' 3
| `-EnumConstantDecl 0x555f55eab810 <line:28:2, col:6> col:2 referenced B 'int'
|   `-IntegerLiteral 0x555f55eab7f0 <col:6> 'int' 4
|-TypedefDecl 0x555f55eab8b0 <line:25:1, line:29:3> col:3 referenced LED 'enum LED':'LED'
| `-ElaboratedType 0x555f55eab860 'enum LED' sugar
|   `-EnumType 0x555f55eab700 'LED'
|     `-Enum 0x555f55eab660 ''
|-FunctionDecl 0x555f55eabae0 <line:31:1, col:56> col:6 used enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x555f55eab958 <col:25, col:34> col:34 pins 'uint8_t *'
| `-ParmVarDecl 0x555f55eab9c8 <col:40, col:48> col:48 num_pins 'uint8_t':'unsigned char'
|-FunctionDecl 0x555f55eabca0 <line:33:1, col:35> col:6 enable_pin_output 'void (uint8_t)'
| `-ParmVarDecl 0x555f55eabba0 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x555f55eabdd8 <line:35:1, col:24> col:6 used read_in_table 'void (void)'
|-FunctionDecl 0x555f55eabf08 <line:37:1, col:26> col:6 used write_out_table 'void (void)'
|-FunctionDecl 0x555f55eaea28 <line:41:1, col:25> col:6 set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x555f55eae9a0 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
| `-FullComment 0x555f55f2a960 <line:39:4, col:42>
|   `-ParagraphComment 0x555f55f2a930 <col:4, col:42>
|     `-TextComment 0x555f55f2a900 <col:4, col:42> Text="************** For User ***************"
|-FunctionDecl 0x555f55eaeb68 <line:43:1, col:25> col:6 clr_pin 'void (uint8_t)'
| `-ParmVarDecl 0x555f55eaeae0 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x555f55eaedc0 <line:45:1, col:37> col:6 used write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x555f55eaec20 <col:16, col:24> col:24 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x555f55eaecb0 <col:29, col:34> col:34 val 'BOOL':'unsigned char'
|-FunctionDecl 0x555f55eaef40 <line:47:1, col:26> col:6 used read_pin 'BOOL (uint8_t)'
| `-ParmVarDecl 0x555f55eaee80 <col:15, col:23> col:23 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x555f55eaf120 <line:49:1, col:22> col:6 LED_on 'void (LED)'
| `-ParmVarDecl 0x555f55eaf020 <col:13, col:17> col:17 color 'LED':'LED'
|-FunctionDecl 0x555f55eaf260 <line:51:1, col:23> col:6 used LED_off 'void (LED)'
| `-ParmVarDecl 0x555f55eaf1d8 <col:14, col:18> col:18 color 'LED':'LED'
|-FunctionDecl 0x555f55eaf420 <line:53:1, col:24> col:6 used read_LED 'BOOL (LED)'
| `-ParmVarDecl 0x555f55eaf318 <col:15, col:19> col:19 color 'LED':'LED'
|-FunctionDecl 0x555f55eaf660 <line:55:1, col:33> col:6 used write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x555f55eaf4d8 <col:16, col:20> col:20 color 'LED':'LED'
| `-ParmVarDecl 0x555f55eaf548 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-FunctionDecl 0x555f55eaf7a8 <line:57:1, col:40> col:6 used read_button_active_low 'BOOL (uint8_t)'
| `-ParmVarDecl 0x555f55eaf720 <col:29, col:37> col:37 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x555f55eaf868 prev 0x555f55eab598 </vagrant/apps/plc_4out/./inc/ladder.h:7:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x555f55ca0770 'short'
|-TypedefDecl 0x555f55eaf8d8 prev 0x555f55eab608 <line:8:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x555f55ca07f0 'unsigned char'
|-VarDecl 0x555f55eafa18 <line:13:1, col:99> col:16 used output_pins 'uint8_t [5]' static cinit
| |-InitListExpr 0x555f55eafbd8 <col:68, col:99> 'uint8_t [5]'
| | |-ImplicitCastExpr 0x555f55eafc18 </vagrant/apps/plc_4out/./inc/plc_platform.h:11:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x555f55eafad0 <col:14> 'int' 3
| | |-ImplicitCastExpr 0x555f55eafc38 <line:16:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x555f55eafaf0 <col:14> 'int' 8
| | |-ImplicitCastExpr 0x555f55eafc60 <line:17:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x555f55eafb10 <col:14> 'int' 9
| | |-ImplicitCastExpr 0x555f55eafc98 <line:18:15> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x555f55eafb30 <col:15> 'int' 10
| | `-ImplicitCastExpr 0x555f55eafcb0 <line:19:15> 'uint8_t':'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x555f55eafb50 <col:15> 'int' 11
| `-SectionAttr 0x555f55eafa78 </vagrant/apps/plc_4out/./inc/ladder.h:13:45, col:62> section ".rodata"
|-FunctionDecl 0x555f55eafe48 <line:18:1, col:19> col:6 used PlcCycle 'void (void)'
| `-FullComment 0x555f55f2aa30 <line:15:4, col:57>
|   `-ParagraphComment 0x555f55f2aa00 <col:4, col:57>
|     `-TextComment 0x555f55f2a9d0 <col:4, col:57> Text="************ DO NOT EDIT THESE FUNCTIONS *************"
|-FunctionDecl 0x555f55eaff98 <line:21:1, col:36> col:6 plc_callback 'void (struct k_timer *)'
| `-ParmVarDecl 0x555f55eaff10 <col:19, col:35> col:35 t 'struct k_timer *'
|-FunctionDecl 0x555f55eb00d0 <line:24:1, col:19> col:6 init_plc 'void (void)'
|-FunctionDecl 0x555f55eb02e0 <line:31:1, col:27> col:6 Read_U_b_XMStart 'BOOL (void)'
| `-FullComment 0x555f55f2ab00 <line:29:4, col:57>
|   `-ParagraphComment 0x555f55f2aad0 <col:4, col:57>
|     `-TextComment 0x555f55f2aaa0 <col:4, col:57> Text="*********** FUNCTIONS CREATED BY LDMICRO *************"
|-FunctionDecl 0x555f55eb0410 <line:33:1, col:25> col:6 Read_U_b_XStop 'BOOL (void)'
|-FunctionDecl 0x555f55eb0540 <line:35:1, col:24> col:6 Read_U_b_YLED 'BOOL (void)'
|-FunctionDecl 0x555f55eb06b0 <line:36:1, col:27> col:6 Write_U_b_YLED 'void (BOOL)'
| `-ParmVarDecl 0x555f55eb05f0 <col:21, col:26> col:26 v 'BOOL':'unsigned char'
|-FunctionDecl 0x555f55eb07e8 <line:38:1, col:25> col:6 Read_U_b_YOut0 'BOOL (void)'
|-FunctionDecl 0x555f55eb1aa0 <line:39:1, col:28> col:6 Write_U_b_YOut0 'void (BOOL)'
| `-ParmVarDecl 0x555f55eb0898 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x555f55eb1bd8 <line:41:1, col:25> col:6 Read_U_b_YOut1 'BOOL (void)'
|-FunctionDecl 0x555f55eb1d10 <line:42:1, col:28> col:6 Write_U_b_YOut1 'void (BOOL)'
| `-ParmVarDecl 0x555f55eb1c88 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x555f55eb1e48 <line:44:1, col:25> col:6 Read_U_b_YOut2 'BOOL (void)'
|-FunctionDecl 0x555f55eb1f80 <line:45:1, col:28> col:6 Write_U_b_YOut2 'void (BOOL)'
| `-ParmVarDecl 0x555f55eb1ef8 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x555f55eb20b8 <line:47:1, col:25> col:6 Read_U_b_YOut3 'BOOL (void)'
|-FunctionDecl 0x555f55eb21f0 <line:48:1, col:28> col:6 Write_U_b_YOut3 'void (BOOL)'
| `-ParmVarDecl 0x555f55eb2168 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-VarDecl 0x555f55eb22e8 <./src/ladder.c:7:1, col:73> col:16 used LED_pins 'uint8_t [3]' static cinit
| |-InitListExpr 0x555f55eb2458 <col:65, col:73> 'uint8_t [3]'
| | |-ImplicitCastExpr 0x555f55eb2498 <col:66> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x555f55eb23a0 <col:66> 'int' 2
| | |-ImplicitCastExpr 0x555f55eb24b8 <col:69> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x555f55eb23c0 <col:69> 'int' 3
| | `-ImplicitCastExpr 0x555f55eb24e0 <col:72> 'uint8_t':'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x555f55eb23e0 <col:72> 'int' 4
| `-SectionAttr 0x555f55eb2348 <col:42, col:59> section ".rodata"
|-VarDecl 0x555f55eb25a8 <line:11:1, col:28> col:17 used time_old 'uint32_t':'unsigned int' static cinit
| `-ImplicitCastExpr 0x555f55eb2628 <col:28> 'uint32_t':'unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x555f55eb2608 <col:28> 'int' 0
|-VarDecl 0x555f55eb2650 <line:12:1, col:28> col:17 used time_cnt 'uint32_t':'unsigned int' static cinit
| `-ImplicitCastExpr 0x555f55eb26d0 <col:28> 'uint32_t':'unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x555f55eb26b0 <col:28> 'int' 0
|-FunctionDecl 0x555f55eb2798 prev 0x555f55eaff98 <line:14:1, line:22:1> line:14:6 plc_callback 'void (struct k_timer *)'
| |-ParmVarDecl 0x555f55eb2710 <col:19, col:35> col:35 t 'struct k_timer *'
| `-CompoundStmt 0x555f55eb2978 <col:38, line:22:1>
|   |-CallExpr 0x555f55eb2880 <line:19:2, col:16> 'void'
|   | `-ImplicitCastExpr 0x555f55eb2868 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555f55eb2840 <col:2> 'void (void)' Function 0x555f55eabdd8 'read_in_table' 'void (void)'
|   |-CallExpr 0x555f55eb28e8 <line:20:2, col:11> 'void'
|   | `-ImplicitCastExpr 0x555f55eb28d0 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555f55eb28a8 <col:2> 'void (void)' Function 0x555f55eafe48 'PlcCycle' 'void (void)'
|   `-CallExpr 0x555f55eb2950 <line:21:2, col:18> 'void'
|     `-ImplicitCastExpr 0x555f55eb2938 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x555f55eb2910 <col:2> 'void (void)' Function 0x555f55eabf08 'write_out_table' 'void (void)'
|-FunctionDecl 0x555f55eb2a30 prev 0x555f55eb00d0 <line:24:1, line:40:1> line:24:6 init_plc 'void (void)'
| `-CompoundStmt 0x555f55eb35a8 <col:21, line:40:1>
|   |-ForStmt 0x555f55eb2e90 <line:25:2, line:27:2>
|   | |-DeclStmt 0x555f55eb2b68 <line:25:6, col:15>
|   | | `-VarDecl 0x555f55eb2ae8 <col:6, col:14> col:10 used i 'int' cinit
|   | |   `-IntegerLiteral 0x555f55eb2b48 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x555f55eb2be0 <col:17, /vagrant/apps/plc_4out/./inc/ladder.h:12:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x555f55eb2bc8 <./src/ladder.c:25:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x555f55eb2b80 <col:17> 'int' lvalue Var 0x555f55eb2ae8 'i' 'int'
|   | | `-IntegerLiteral 0x555f55eb2ba8 </vagrant/apps/plc_4out/./inc/ladder.h:12:18> 'int' 5
|   | |-UnaryOperator 0x555f55eb2c30 <./src/ladder.c:25:31, col:32> 'int' postfix '++'
|   | | `-DeclRefExpr 0x555f55eb2c08 <col:31> 'int' lvalue Var 0x555f55eb2ae8 'i' 'int'
|   | `-CompoundStmt 0x555f55eb2e78 <col:36, line:27:2>
|   |   `-CallExpr 0x555f55eb2de0 <line:26:3, col:41> 'void'
|   |     |-ImplicitCastExpr 0x555f55eb2dc8 <col:3> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555f55eb2c50 <col:3> 'void (const char *, ...)' Function 0x555f55df2ac0 'printk' 'void (const char *, ...)'
|   |     |-ImplicitCastExpr 0x555f55eb2e30 <col:10> 'const char *' <BitCast>
|   |     | `-ImplicitCastExpr 0x555f55eb2e18 <col:10> 'char *' <ArrayToPointerDecay>
|   |     |   `-StringLiteral 0x555f55eb2cb8 <col:10> 'char [13]' lvalue "Using PIN%d\n"
|   |     `-ImplicitCastExpr 0x555f55eb2e60 <col:27, col:40> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x555f55eb2e48 <col:27, col:40> 'uint8_t':'unsigned char' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x555f55eb2d70 <col:27, col:40> 'uint8_t':'unsigned char' lvalue
|   |           |-ImplicitCastExpr 0x555f55eb2d40 <col:27> 'uint8_t *' <ArrayToPointerDecay>
|   |           | `-DeclRefExpr 0x555f55eb2cf0 <col:27> 'uint8_t [5]' lvalue Var 0x555f55eafa18 'output_pins' 'uint8_t [5]'
|   |           `-ImplicitCastExpr 0x555f55eb2d58 <col:39> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x555f55eb2d18 <col:39> 'int' lvalue Var 0x555f55eb2ae8 'i' 'int'
|   |-CallExpr 0x555f55eb2fb0 <line:28:2, col:42> 'void'
|   | |-ImplicitCastExpr 0x555f55eb2f98 <col:2> 'void (*)(uint8_t *, uint8_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x555f55eb2ec8 <col:2> 'void (uint8_t *, uint8_t)' Function 0x555f55eabae0 'enable_pin_outputs' 'void (uint8_t *, uint8_t)'
|   | |-ImplicitCastExpr 0x555f55eb2fe8 <col:21> 'uint8_t *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x555f55eb2ef0 <col:21> 'uint8_t [5]' lvalue Var 0x555f55eafa18 'output_pins' 'uint8_t [5]'
|   | `-ImplicitCastExpr 0x555f55eb3000 </vagrant/apps/plc_4out/./inc/ladder.h:12:18> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x555f55eb2f18 <col:18> 'int' 5
|   |-IfStmt 0x555f55eb33c8 <./src/ladder.c:31:2, line:36:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-IntegerLiteral 0x555f55eb3018 </vagrant/apps/plc_4out/./inc/ladder.h:10:17> 'int' 0
|   | |-CompoundStmt 0x555f55eb3398 <./src/ladder.c:31:15, line:36:2>
|   | | |-CallExpr 0x555f55eb30c0 <line:32:3, col:44> 'void'
|   | | | |-ImplicitCastExpr 0x555f55eb30a8 <col:3> 'void (*)(uint8_t *, uint8_t)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x555f55eb3038 <col:3> 'void (uint8_t *, uint8_t)' Function 0x555f55eabae0 'enable_pin_outputs' 'void (uint8_t *, uint8_t)'
|   | | | |-ImplicitCastExpr 0x555f55eb30f8 <col:22> 'uint8_t *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x555f55eb3060 <col:22> 'uint8_t [3]' lvalue Var 0x555f55eb22e8 'LED_pins' 'uint8_t [3]'
|   | | | `-ImplicitCastExpr 0x555f55eb3110 <line:6:22> 'uint8_t':'unsigned char' <IntegralCast>
|   | | |   `-IntegerLiteral 0x555f55eb3088 <col:22> 'int' 3
|   | | |-CallExpr 0x555f55eb31f0 <line:33:3, col:12> 'void'
|   | | | |-ImplicitCastExpr 0x555f55eb31d8 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x555f55eb3128 <col:3> 'void (LED)' Function 0x555f55eaf260 'LED_off' 'void (LED)'
|   | | | `-ImplicitCastExpr 0x555f55eb3220 <col:11> 'LED':'LED' <IntegralCast>
|   | | |   `-DeclRefExpr 0x555f55eb3150 <col:11> 'int' EnumConstant 0x555f55eab740 'R' 'int'
|   | | |-CallExpr 0x555f55eb32a0 <line:34:3, col:12> 'void'
|   | | | |-ImplicitCastExpr 0x555f55eb3288 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x555f55eb3238 <col:3> 'void (LED)' Function 0x555f55eaf260 'LED_off' 'void (LED)'
|   | | | `-ImplicitCastExpr 0x555f55eb32d0 <col:11> 'LED':'LED' <IntegralCast>
|   | | |   `-DeclRefExpr 0x555f55eb3260 <col:11> 'int' EnumConstant 0x555f55eab7a8 'G' 'int'
|   | | `-CallExpr 0x555f55eb3350 <line:35:3, col:12> 'void'
|   | |   |-ImplicitCastExpr 0x555f55eb3338 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x555f55eb32e8 <col:3> 'void (LED)' Function 0x555f55eaf260 'LED_off' 'void (LED)'
|   | |   `-ImplicitCastExpr 0x555f55eb3380 <col:11> 'LED':'LED' <IntegralCast>
|   | |     `-DeclRefExpr 0x555f55eb3310 <col:11> 'int' EnumConstant 0x555f55eab810 'B' 'int'
|   | `-<<<NULL>>>
|   |-CallExpr 0x555f55eb3440 <line:38:2, col:18> 'void'
|   | `-ImplicitCastExpr 0x555f55eb3428 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555f55eb3400 <col:2> 'void (void)' Function 0x555f55eabf08 'write_out_table' 'void (void)'
|   `-CallExpr 0x555f55eb3518 <line:39:2, col:28> 'void'
|     |-ImplicitCastExpr 0x555f55eb3500 <col:2> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55eb3468 <col:2> 'void (const char *, ...)' Function 0x555f55df2ac0 'printk' 'void (const char *, ...)'
|     `-ImplicitCastExpr 0x555f55eb3560 <col:9> 'const char *' <BitCast>
|       `-ImplicitCastExpr 0x555f55eb3548 <col:9> 'char *' <ArrayToPointerDecay>
|         `-StringLiteral 0x555f55eb34c8 <col:9> 'char [17]' lvalue "plc initialized\n"
|-VarDecl 0x555f55eb35f0 <line:45:1, col:21> col:6 used master_state 'BOOL':'unsigned char' cinit
| |-ImplicitCastExpr 0x555f55eb3670 <col:21> 'BOOL':'unsigned char' <IntegralCast>
| | `-IntegerLiteral 0x555f55eb3650 <col:21> 'int' 0
| `-FullComment 0x555f55f2abd0 <line:42:4, col:71>
|   `-ParagraphComment 0x555f55f2aba0 <col:4, col:71>
|     `-TextComment 0x555f55f2ab70 <col:4, col:71> Text="************** Define Auto-Generated Functions Below ***************"
|-VarDecl 0x555f55eb3698 <line:46:1, col:19> col:6 used out0_state 'BOOL':'unsigned char' cinit
| `-ImplicitCastExpr 0x555f55eb3718 <col:19> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x555f55eb36f8 <col:19> 'int' 0
|-VarDecl 0x555f55eb3740 <line:47:1, col:19> col:6 used out1_state 'BOOL':'unsigned char' cinit
| `-ImplicitCastExpr 0x555f55eb37c0 <col:19> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x555f55eb37a0 <col:19> 'int' 0
|-VarDecl 0x555f55eb37e8 <line:48:1, col:19> col:6 used out2_state 'BOOL':'unsigned char' cinit
| `-ImplicitCastExpr 0x555f55eb3868 <col:19> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x555f55eb3848 <col:19> 'int' 0
|-VarDecl 0x555f55eb3890 <line:49:1, col:19> col:6 used out3_state 'BOOL':'unsigned char' cinit
| `-ImplicitCastExpr 0x555f55eb3910 <col:19> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x555f55eb38f0 <col:19> 'int' 0
|-VarDecl 0x555f55eb3938 <line:52:1, col:6> col:6 used readStart 'BOOL':'unsigned char'
|-FunctionDecl 0x555f55eb4ac0 prev 0x555f55eb02e0 <line:54:1, line:66:1> line:54:6 Read_U_b_XMStart 'BOOL (void)'
| `-CompoundStmt 0x555f55eb5138 <col:29, line:66:1>
|   |-BinaryOperator 0x555f55eb4c88 <line:55:2, col:41> 'BOOL':'unsigned char' '='
|   | |-DeclRefExpr 0x555f55eb4b60 <col:2> 'BOOL':'unsigned char' lvalue Var 0x555f55eb3938 'readStart' 'BOOL':'unsigned char'
|   | `-CallExpr 0x555f55eb4c40 <col:14, col:41> 'BOOL':'unsigned char'
|   |   |-ImplicitCastExpr 0x555f55eb4c28 <col:14> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x555f55eb4b88 <col:14> 'BOOL (uint8_t)' Function 0x555f55eaf7a8 'read_button_active_low' 'BOOL (uint8_t)'
|   |   `-ImplicitCastExpr 0x555f55eb4c70 </vagrant/apps/plc_4out/./inc/plc_platform.h:12:14> 'uint8_t':'unsigned char' <IntegralCast>
|   |     `-IntegerLiteral 0x555f55eb4bb0 <col:14> 'int' 4
|   |-IfStmt 0x555f55eb50a8 <./src/ladder.c:58:2, line:64:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x555f55eb4d60 <line:58:6, col:22> 'int' '!='
|   | | |-ImplicitCastExpr 0x555f55eb4d18 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x555f55eb4d00 <col:6> 'BOOL':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x555f55eb4cb0 <col:6> 'BOOL':'unsigned char' lvalue Var 0x555f55eb35f0 'master_state' 'BOOL':'unsigned char'
|   | | `-ImplicitCastExpr 0x555f55eb4d48 <col:22> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x555f55eb4d30 <col:22> 'BOOL':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x555f55eb4cd8 <col:22> 'BOOL':'unsigned char' lvalue Var 0x555f55eb3938 'readStart' 'BOOL':'unsigned char'
|   | |-CompoundStmt 0x555f55eb5088 <col:33, line:64:2>
|   | | |-BinaryOperator 0x555f55eb4df0 <line:59:3, col:18> 'BOOL':'unsigned char' '='
|   | | | |-DeclRefExpr 0x555f55eb4d88 <col:3> 'BOOL':'unsigned char' lvalue Var 0x555f55eb35f0 'master_state' 'BOOL':'unsigned char'
|   | | | `-ImplicitCastExpr 0x555f55eb4dd8 <col:18> 'BOOL':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x555f55eb4db0 <col:18> 'BOOL':'unsigned char' lvalue Var 0x555f55eb3938 'readStart' 'BOOL':'unsigned char'
|   | | `-IfStmt 0x555f55eb5050 <line:60:3, line:63:3>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-ImplicitCastExpr 0x555f55eb4e40 <line:60:7> 'BOOL':'unsigned char' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x555f55eb4e18 <col:7> 'BOOL':'unsigned char' lvalue Var 0x555f55eb3938 'readStart' 'BOOL':'unsigned char'
|   | |   |-CompoundStmt 0x555f55eb5030 <col:18, line:63:3>
|   | |   | |-BinaryOperator 0x555f55eb4ee8 <line:61:4, col:31> 'uint32_t':'unsigned int' '='
|   | |   | | |-DeclRefExpr 0x555f55eb4e58 <col:4> 'uint32_t':'unsigned int' lvalue Var 0x555f55eb25a8 'time_old' 'uint32_t':'unsigned int'
|   | |   | | `-CallExpr 0x555f55eb4ec0 <col:15, col:31> 'u32_t':'unsigned int'
|   | |   | |   `-ImplicitCastExpr 0x555f55eb4ea8 <col:15> 'u32_t (*)(void)' <FunctionToPointerDecay>
|   | |   | |     `-DeclRefExpr 0x555f55eb4e80 <col:15> 'u32_t (void)' Function 0x555f55e4feb8 'k_uptime_get_32' 'u32_t (void)'
|   | |   | `-CallExpr 0x555f55eb4fd0 <line:62:4, col:34> 'void'
|   | |   |   |-ImplicitCastExpr 0x555f55eb4fb8 <col:4> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x555f55eb4f10 <col:4> 'void (const char *, ...)' Function 0x555f55df2ac0 'printk' 'void (const char *, ...)'
|   | |   |   `-ImplicitCastExpr 0x555f55eb5018 <col:11> 'const char *' <BitCast>
|   | |   |     `-ImplicitCastExpr 0x555f55eb5000 <col:11> 'char *' <ArrayToPointerDecay>
|   | |   |       `-StringLiteral 0x555f55eb4f78 <col:11> 'char [21]' lvalue "4 Output Started...\n"
|   | |   `-<<<NULL>>>
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x555f55eb5120 <line:65:2, col:9>
|     `-ImplicitCastExpr 0x555f55eb5108 <col:9> 'BOOL':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x555f55eb50e0 <col:9> 'BOOL':'unsigned char' lvalue Var 0x555f55eb3938 'readStart' 'BOOL':'unsigned char'
|-FunctionDecl 0x555f55eb51f0 prev 0x555f55eb0410 <line:68:1, line:70:1> line:68:6 Read_U_b_XStop 'BOOL (void)'
| `-CompoundStmt 0x555f55eb5350 <col:27, line:70:1>
|   `-ReturnStmt 0x555f55eb5338 <line:69:2, col:36>
|     `-CallExpr 0x555f55eb52f0 <col:9, col:36> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x555f55eb52d8 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55eb5290 <col:9> 'BOOL (uint8_t)' Function 0x555f55eaf7a8 'read_button_active_low' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x555f55eb5320 </vagrant/apps/plc_4out/./inc/plc_platform.h:15:14> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x555f55eb52b8 <col:14> 'int' 7
|-FunctionDecl 0x555f55eb53f8 prev 0x555f55eb0540 <./src/ladder.c:72:1, line:74:1> line:72:6 Read_U_b_YLED 'BOOL (void)'
| `-CompoundStmt 0x555f55eb55c0 <col:26, line:74:1>
|   `-ReturnStmt 0x555f55eb55a8 <line:73:2, col:19>
|     `-CallExpr 0x555f55eb5560 <col:9, col:19> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x555f55eb5548 <col:9> 'BOOL (*)(LED)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55eb5498 <col:9> 'BOOL (LED)' Function 0x555f55eaf420 'read_LED' 'BOOL (LED)'
|       `-ImplicitCastExpr 0x555f55eb5590 <col:18> 'LED':'LED' <IntegralCast>
|         `-DeclRefExpr 0x555f55eb54c0 <col:18> 'int' EnumConstant 0x555f55eab7a8 'G' 'int'
|-FunctionDecl 0x555f55eb5670 prev 0x555f55eb06b0 <line:76:1, line:78:1> line:76:6 Write_U_b_YLED 'void (BOOL)'
| |-ParmVarDecl 0x555f55eb55e8 <col:21, col:26> col:26 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x555f55eb5868 <col:29, line:78:1>
|   `-CallExpr 0x555f55eb5800 <line:77:2, col:16> 'void'
|     |-ImplicitCastExpr 0x555f55eb57e8 <col:2> 'void (*)(LED, BOOL)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55eb5718 <col:2> 'void (LED, BOOL)' Function 0x555f55eaf660 'write_LED' 'void (LED, BOOL)'
|     |-ImplicitCastExpr 0x555f55eb5838 <col:12> 'LED':'LED' <IntegralCast>
|     | `-DeclRefExpr 0x555f55eb5740 <col:12> 'int' EnumConstant 0x555f55eab7a8 'G' 'int'
|     `-ImplicitCastExpr 0x555f55eb5850 <col:15> 'BOOL':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x555f55eb5768 <col:15> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55eb55e8 'v' 'BOOL':'unsigned char'
|-FunctionDecl 0x555f55eb5910 prev 0x555f55eb07e8 <line:80:1, line:82:1> line:80:6 Read_U_b_YOut0 'BOOL (void)'
| `-CompoundStmt 0x555f55eb5a70 <col:27, line:82:1>
|   `-ReturnStmt 0x555f55eb5a58 <line:81:2, col:22>
|     `-CallExpr 0x555f55eb5a10 <col:9, col:22> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x555f55eb59f8 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55eb59b0 <col:9> 'BOOL (uint8_t)' Function 0x555f55eaef40 'read_pin' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x555f55eb5a40 </vagrant/apps/plc_4out/./inc/plc_platform.h:16:14> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x555f55eb59d8 <col:14> 'int' 8
|-FunctionDecl 0x555f55eb5b20 prev 0x555f55eb1aa0 <./src/ladder.c:84:1, line:93:1> line:84:6 Write_U_b_YOut0 'void (BOOL)'
| |-ParmVarDecl 0x555f55eb5a98 <col:22, col:27> col:27 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x555f55eb61f8 <col:30, line:93:1>
|   |-IfStmt 0x555f55eb6070 <line:85:2, line:91:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x555f55eb5c78 <line:85:6, col:20> 'int' '!='
|   | | |-ImplicitCastExpr 0x555f55eb5c30 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x555f55eb5c18 <col:6> 'BOOL':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x555f55eb5bc8 <col:6> 'BOOL':'unsigned char' lvalue Var 0x555f55eb3698 'out0_state' 'BOOL':'unsigned char'
|   | | `-ImplicitCastExpr 0x555f55eb5c60 <col:20> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x555f55eb5c48 <col:20> 'BOOL':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x555f55eb5bf0 <col:20> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55eb5a98 'v' 'BOOL':'unsigned char'
|   | |-CompoundStmt 0x555f55eb6050 <col:23, line:91:2>
|   | | |-BinaryOperator 0x555f55eb5d08 <line:86:3, col:16> 'BOOL':'unsigned char' '='
|   | | | |-DeclRefExpr 0x555f55eb5ca0 <col:3> 'BOOL':'unsigned char' lvalue Var 0x555f55eb3698 'out0_state' 'BOOL':'unsigned char'
|   | | | `-ImplicitCastExpr 0x555f55eb5cf0 <col:16> 'BOOL':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x555f55eb5cc8 <col:16> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55eb5a98 'v' 'BOOL':'unsigned char'
|   | | `-IfStmt 0x555f55eb6018 <line:87:3, line:90:3>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-ImplicitCastExpr 0x555f55eb5d58 <line:87:7> 'BOOL':'unsigned char' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x555f55eb5d30 <col:7> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55eb5a98 'v' 'BOOL':'unsigned char'
|   | |   |-CompoundStmt 0x555f55eb5ff8 <col:10, line:90:3>
|   | |   | |-BinaryOperator 0x555f55eb5e00 <line:88:4, col:31> 'uint32_t':'unsigned int' '='
|   | |   | | |-DeclRefExpr 0x555f55eb5d70 <col:4> 'uint32_t':'unsigned int' lvalue Var 0x555f55eb2650 'time_cnt' 'uint32_t':'unsigned int'
|   | |   | | `-CallExpr 0x555f55eb5dd8 <col:15, col:31> 'u32_t':'unsigned int'
|   | |   | |   `-ImplicitCastExpr 0x555f55eb5dc0 <col:15> 'u32_t (*)(void)' <FunctionToPointerDecay>
|   | |   | |     `-DeclRefExpr 0x555f55eb5d98 <col:15> 'u32_t (void)' Function 0x555f55e4feb8 'k_uptime_get_32' 'u32_t (void)'
|   | |   | `-CallExpr 0x555f55eb5f90 <line:89:4, col:61> 'void'
|   | |   |   |-ImplicitCastExpr 0x555f55eb5f78 <col:4> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x555f55eb5e28 <col:4> 'void (const char *, ...)' Function 0x555f55df2ac0 'printk' 'void (const char *, ...)'
|   | |   |   |-ImplicitCastExpr 0x555f55eb5fe0 <col:11> 'const char *' <BitCast>
|   | |   |   | `-ImplicitCastExpr 0x555f55eb5fc8 <col:11> 'char *' <ArrayToPointerDecay>
|   | |   |   |   `-StringLiteral 0x555f55eb5e88 <col:11> 'char [27]' lvalue "Output 0 Enabled at %d ms\n"
|   | |   |   `-BinaryOperator 0x555f55eb5f50 <col:42, col:53> 'unsigned int' '-'
|   | |   |     |-ImplicitCastExpr 0x555f55eb5f20 <col:42> 'uint32_t':'unsigned int' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x555f55eb5ed0 <col:42> 'uint32_t':'unsigned int' lvalue Var 0x555f55eb2650 'time_cnt' 'uint32_t':'unsigned int'
|   | |   |     `-ImplicitCastExpr 0x555f55eb5f38 <col:53> 'uint32_t':'unsigned int' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x555f55eb5ef8 <col:53> 'uint32_t':'unsigned int' lvalue Var 0x555f55eb25a8 'time_old' 'uint32_t':'unsigned int'
|   | |   `-<<<NULL>>>
|   | `-<<<NULL>>>
|   `-CallExpr 0x555f55eb6190 <line:92:2, col:19> 'void'
|     |-ImplicitCastExpr 0x555f55eb6178 <col:2> 'void (*)(uint8_t, BOOL)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55eb60a8 <col:2> 'void (uint8_t, BOOL)' Function 0x555f55eaedc0 'write_pin' 'void (uint8_t, BOOL)'
|     |-ImplicitCastExpr 0x555f55eb61c8 </vagrant/apps/plc_4out/./inc/plc_platform.h:16:14> 'uint8_t':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x555f55eb60d0 <col:14> 'int' 8
|     `-ImplicitCastExpr 0x555f55eb61e0 <./src/ladder.c:92:18> 'BOOL':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x555f55eb60f0 <col:18> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55eb5a98 'v' 'BOOL':'unsigned char'
|-FunctionDecl 0x555f55eb62a8 prev 0x555f55eb1bd8 <line:95:1, line:97:1> line:95:6 Read_U_b_YOut1 'BOOL (void)'
| `-CompoundStmt 0x555f55eb6408 <col:27, line:97:1>
|   `-ReturnStmt 0x555f55eb63f0 <line:96:2, col:22>
|     `-CallExpr 0x555f55eb63a8 <col:9, col:22> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x555f55eb6390 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55eb6348 <col:9> 'BOOL (uint8_t)' Function 0x555f55eaef40 'read_pin' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x555f55eb63d8 </vagrant/apps/plc_4out/./inc/plc_platform.h:17:14> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x555f55eb6370 <col:14> 'int' 9
|-FunctionDecl 0x555f55eb64b8 prev 0x555f55eb1d10 <./src/ladder.c:99:1, line:108:1> line:99:6 Write_U_b_YOut1 'void (BOOL)'
| |-ParmVarDecl 0x555f55eb6430 <col:22, col:27> col:27 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x555f55ebab18 <col:30, line:108:1>
|   |-IfStmt 0x555f55eb69d0 <line:100:2, line:106:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x555f55eb6610 <line:100:6, col:20> 'int' '!='
|   | | |-ImplicitCastExpr 0x555f55eb65c8 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x555f55eb65b0 <col:6> 'BOOL':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x555f55eb6560 <col:6> 'BOOL':'unsigned char' lvalue Var 0x555f55eb3740 'out1_state' 'BOOL':'unsigned char'
|   | | `-ImplicitCastExpr 0x555f55eb65f8 <col:20> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x555f55eb65e0 <col:20> 'BOOL':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x555f55eb6588 <col:20> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55eb6430 'v' 'BOOL':'unsigned char'
|   | |-CompoundStmt 0x555f55eb69b0 <col:23, line:106:2>
|   | | |-BinaryOperator 0x555f55eb66a0 <line:101:3, col:16> 'BOOL':'unsigned char' '='
|   | | | |-DeclRefExpr 0x555f55eb6638 <col:3> 'BOOL':'unsigned char' lvalue Var 0x555f55eb3740 'out1_state' 'BOOL':'unsigned char'
|   | | | `-ImplicitCastExpr 0x555f55eb6688 <col:16> 'BOOL':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x555f55eb6660 <col:16> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55eb6430 'v' 'BOOL':'unsigned char'
|   | | `-IfStmt 0x555f55eb6978 <line:102:3, line:105:3>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-ImplicitCastExpr 0x555f55eb66f0 <line:102:7> 'BOOL':'unsigned char' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x555f55eb66c8 <col:7> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55eb6430 'v' 'BOOL':'unsigned char'
|   | |   |-CompoundStmt 0x555f55eb6958 <col:10, line:105:3>
|   | |   | |-BinaryOperator 0x555f55eb6798 <line:103:4, col:31> 'uint32_t':'unsigned int' '='
|   | |   | | |-DeclRefExpr 0x555f55eb6708 <col:4> 'uint32_t':'unsigned int' lvalue Var 0x555f55eb2650 'time_cnt' 'uint32_t':'unsigned int'
|   | |   | | `-CallExpr 0x555f55eb6770 <col:15, col:31> 'u32_t':'unsigned int'
|   | |   | |   `-ImplicitCastExpr 0x555f55eb6758 <col:15> 'u32_t (*)(void)' <FunctionToPointerDecay>
|   | |   | |     `-DeclRefExpr 0x555f55eb6730 <col:15> 'u32_t (void)' Function 0x555f55e4feb8 'k_uptime_get_32' 'u32_t (void)'
|   | |   | `-CallExpr 0x555f55eb68f0 <line:104:4, col:61> 'void'
|   | |   |   |-ImplicitCastExpr 0x555f55eb68d8 <col:4> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x555f55eb67c0 <col:4> 'void (const char *, ...)' Function 0x555f55df2ac0 'printk' 'void (const char *, ...)'
|   | |   |   |-ImplicitCastExpr 0x555f55eb6940 <col:11> 'const char *' <BitCast>
|   | |   |   | `-ImplicitCastExpr 0x555f55eb6928 <col:11> 'char *' <ArrayToPointerDecay>
|   | |   |   |   `-StringLiteral 0x555f55eb67e8 <col:11> 'char [27]' lvalue "Output 1 Enabled at %d ms\n"
|   | |   |   `-BinaryOperator 0x555f55eb68b0 <col:42, col:53> 'unsigned int' '-'
|   | |   |     |-ImplicitCastExpr 0x555f55eb6880 <col:42> 'uint32_t':'unsigned int' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x555f55eb6830 <col:42> 'uint32_t':'unsigned int' lvalue Var 0x555f55eb2650 'time_cnt' 'uint32_t':'unsigned int'
|   | |   |     `-ImplicitCastExpr 0x555f55eb6898 <col:53> 'uint32_t':'unsigned int' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x555f55eb6858 <col:53> 'uint32_t':'unsigned int' lvalue Var 0x555f55eb25a8 'time_old' 'uint32_t':'unsigned int'
|   | |   `-<<<NULL>>>
|   | `-<<<NULL>>>
|   `-CallExpr 0x555f55eb6a90 <line:107:2, col:19> 'void'
|     |-ImplicitCastExpr 0x555f55eb6a78 <col:2> 'void (*)(uint8_t, BOOL)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55eb6a08 <col:2> 'void (uint8_t, BOOL)' Function 0x555f55eaedc0 'write_pin' 'void (uint8_t, BOOL)'
|     |-ImplicitCastExpr 0x555f55ebaae8 </vagrant/apps/plc_4out/./inc/plc_platform.h:17:14> 'uint8_t':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x555f55eb6a30 <col:14> 'int' 9
|     `-ImplicitCastExpr 0x555f55ebab00 <./src/ladder.c:107:18> 'BOOL':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x555f55eb6a50 <col:18> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55eb6430 'v' 'BOOL':'unsigned char'
|-FunctionDecl 0x555f55ebabc8 prev 0x555f55eb1e48 <line:110:1, line:112:1> line:110:6 Read_U_b_YOut2 'BOOL (void)'
| `-CompoundStmt 0x555f55ebad28 <col:27, line:112:1>
|   `-ReturnStmt 0x555f55ebad10 <line:111:2, col:23>
|     `-CallExpr 0x555f55ebacc8 <col:9, col:23> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x555f55ebacb0 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55ebac68 <col:9> 'BOOL (uint8_t)' Function 0x555f55eaef40 'read_pin' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x555f55ebacf8 </vagrant/apps/plc_4out/./inc/plc_platform.h:18:15> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x555f55ebac90 <col:15> 'int' 10
|-FunctionDecl 0x555f55ebadd8 prev 0x555f55eb1f80 <./src/ladder.c:114:1, line:123:1> line:114:6 Write_U_b_YOut2 'void (BOOL)'
| |-ParmVarDecl 0x555f55ebad50 <col:22, col:27> col:27 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x555f55ebb418 <col:30, line:123:1>
|   |-IfStmt 0x555f55ebb2f0 <line:115:2, line:121:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x555f55ebaf30 <line:115:6, col:20> 'int' '!='
|   | | |-ImplicitCastExpr 0x555f55ebaee8 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x555f55ebaed0 <col:6> 'BOOL':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x555f55ebae80 <col:6> 'BOOL':'unsigned char' lvalue Var 0x555f55eb37e8 'out2_state' 'BOOL':'unsigned char'
|   | | `-ImplicitCastExpr 0x555f55ebaf18 <col:20> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x555f55ebaf00 <col:20> 'BOOL':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x555f55ebaea8 <col:20> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55ebad50 'v' 'BOOL':'unsigned char'
|   | |-CompoundStmt 0x555f55ebb2d0 <col:23, line:121:2>
|   | | |-BinaryOperator 0x555f55ebafc0 <line:116:3, col:16> 'BOOL':'unsigned char' '='
|   | | | |-DeclRefExpr 0x555f55ebaf58 <col:3> 'BOOL':'unsigned char' lvalue Var 0x555f55eb37e8 'out2_state' 'BOOL':'unsigned char'
|   | | | `-ImplicitCastExpr 0x555f55ebafa8 <col:16> 'BOOL':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x555f55ebaf80 <col:16> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55ebad50 'v' 'BOOL':'unsigned char'
|   | | `-IfStmt 0x555f55ebb298 <line:117:3, line:120:3>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-ImplicitCastExpr 0x555f55ebb010 <line:117:7> 'BOOL':'unsigned char' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x555f55ebafe8 <col:7> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55ebad50 'v' 'BOOL':'unsigned char'
|   | |   |-CompoundStmt 0x555f55ebb278 <col:10, line:120:3>
|   | |   | |-BinaryOperator 0x555f55ebb0b8 <line:118:4, col:31> 'uint32_t':'unsigned int' '='
|   | |   | | |-DeclRefExpr 0x555f55ebb028 <col:4> 'uint32_t':'unsigned int' lvalue Var 0x555f55eb2650 'time_cnt' 'uint32_t':'unsigned int'
|   | |   | | `-CallExpr 0x555f55ebb090 <col:15, col:31> 'u32_t':'unsigned int'
|   | |   | |   `-ImplicitCastExpr 0x555f55ebb078 <col:15> 'u32_t (*)(void)' <FunctionToPointerDecay>
|   | |   | |     `-DeclRefExpr 0x555f55ebb050 <col:15> 'u32_t (void)' Function 0x555f55e4feb8 'k_uptime_get_32' 'u32_t (void)'
|   | |   | `-CallExpr 0x555f55ebb210 <line:119:4, col:61> 'void'
|   | |   |   |-ImplicitCastExpr 0x555f55ebb1f8 <col:4> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x555f55ebb0e0 <col:4> 'void (const char *, ...)' Function 0x555f55df2ac0 'printk' 'void (const char *, ...)'
|   | |   |   |-ImplicitCastExpr 0x555f55ebb260 <col:11> 'const char *' <BitCast>
|   | |   |   | `-ImplicitCastExpr 0x555f55ebb248 <col:11> 'char *' <ArrayToPointerDecay>
|   | |   |   |   `-StringLiteral 0x555f55ebb108 <col:11> 'char [27]' lvalue "Output 2 Enabled at %d ms\n"
|   | |   |   `-BinaryOperator 0x555f55ebb1d0 <col:42, col:53> 'unsigned int' '-'
|   | |   |     |-ImplicitCastExpr 0x555f55ebb1a0 <col:42> 'uint32_t':'unsigned int' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x555f55ebb150 <col:42> 'uint32_t':'unsigned int' lvalue Var 0x555f55eb2650 'time_cnt' 'uint32_t':'unsigned int'
|   | |   |     `-ImplicitCastExpr 0x555f55ebb1b8 <col:53> 'uint32_t':'unsigned int' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x555f55ebb178 <col:53> 'uint32_t':'unsigned int' lvalue Var 0x555f55eb25a8 'time_old' 'uint32_t':'unsigned int'
|   | |   `-<<<NULL>>>
|   | `-<<<NULL>>>
|   `-CallExpr 0x555f55ebb3b0 <line:122:2, col:20> 'void'
|     |-ImplicitCastExpr 0x555f55ebb398 <col:2> 'void (*)(uint8_t, BOOL)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555f55ebb328 <col:2> 'void (uint8_t, BOOL)' Function 0x555f55eaedc0 'write_pin' 'void (uint8_t, BOOL)'
|     |-ImplicitCastExpr 0x555f55ebb3e8 </vagrant/apps/plc_4out/./inc/plc_platform.h:18:15> 'uint8_t':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x555f55ebb350 <col:15> 'int' 10
|     `-ImplicitCastExpr 0x555f55ebb400 <./src/ladder.c:122:19> 'BOOL':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x555f55ebb370 <col:19> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55ebad50 'v' 'BOOL':'unsigned char'
|-FunctionDecl 0x555f55ebb4c8 prev 0x555f55eb20b8 <line:125:1, line:127:1> line:125:6 Read_U_b_YOut3 'BOOL (void)'
| `-CompoundStmt 0x555f55ebb628 <col:27, line:127:1>
|   `-ReturnStmt 0x555f55ebb610 <line:126:2, col:23>
|     `-CallExpr 0x555f55ebb5c8 <col:9, col:23> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x555f55ebb5b0 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555f55ebb568 <col:9> 'BOOL (uint8_t)' Function 0x555f55eaef40 'read_pin' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x555f55ebb5f8 </vagrant/apps/plc_4out/./inc/plc_platform.h:19:15> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x555f55ebb590 <col:15> 'int' 11
`-FunctionDecl 0x555f55ebb6d8 prev 0x555f55eb21f0 <./src/ladder.c:129:1, line:138:1> line:129:6 Write_U_b_YOut3 'void (BOOL)'
  |-ParmVarDecl 0x555f55ebb650 <col:22, col:27> col:27 used v 'BOOL':'unsigned char'
  `-CompoundStmt 0x555f55ebbd18 <col:30, line:138:1>
    |-IfStmt 0x555f55ebbbf0 <line:130:2, line:136:2>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x555f55ebb830 <line:130:6, col:20> 'int' '!='
    | | |-ImplicitCastExpr 0x555f55ebb7e8 <col:6> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x555f55ebb7d0 <col:6> 'BOOL':'unsigned char' <LValueToRValue>
    | | |   `-DeclRefExpr 0x555f55ebb780 <col:6> 'BOOL':'unsigned char' lvalue Var 0x555f55eb3890 'out3_state' 'BOOL':'unsigned char'
    | | `-ImplicitCastExpr 0x555f55ebb818 <col:20> 'int' <IntegralCast>
    | |   `-ImplicitCastExpr 0x555f55ebb800 <col:20> 'BOOL':'unsigned char' <LValueToRValue>
    | |     `-DeclRefExpr 0x555f55ebb7a8 <col:20> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55ebb650 'v' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x555f55ebbbd0 <col:23, line:136:2>
    | | |-BinaryOperator 0x555f55ebb8c0 <line:131:3, col:16> 'BOOL':'unsigned char' '='
    | | | |-DeclRefExpr 0x555f55ebb858 <col:3> 'BOOL':'unsigned char' lvalue Var 0x555f55eb3890 'out3_state' 'BOOL':'unsigned char'
    | | | `-ImplicitCastExpr 0x555f55ebb8a8 <col:16> 'BOOL':'unsigned char' <LValueToRValue>
    | | |   `-DeclRefExpr 0x555f55ebb880 <col:16> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55ebb650 'v' 'BOOL':'unsigned char'
    | | `-IfStmt 0x555f55ebbb98 <line:132:3, line:135:3>
    | |   |-<<<NULL>>>
    | |   |-<<<NULL>>>
    | |   |-ImplicitCastExpr 0x555f55ebb910 <line:132:7> 'BOOL':'unsigned char' <LValueToRValue>
    | |   | `-DeclRefExpr 0x555f55ebb8e8 <col:7> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55ebb650 'v' 'BOOL':'unsigned char'
    | |   |-CompoundStmt 0x555f55ebbb78 <col:10, line:135:3>
    | |   | |-BinaryOperator 0x555f55ebb9b8 <line:133:4, col:31> 'uint32_t':'unsigned int' '='
    | |   | | |-DeclRefExpr 0x555f55ebb928 <col:4> 'uint32_t':'unsigned int' lvalue Var 0x555f55eb2650 'time_cnt' 'uint32_t':'unsigned int'
    | |   | | `-CallExpr 0x555f55ebb990 <col:15, col:31> 'u32_t':'unsigned int'
    | |   | |   `-ImplicitCastExpr 0x555f55ebb978 <col:15> 'u32_t (*)(void)' <FunctionToPointerDecay>
    | |   | |     `-DeclRefExpr 0x555f55ebb950 <col:15> 'u32_t (void)' Function 0x555f55e4feb8 'k_uptime_get_32' 'u32_t (void)'
    | |   | `-CallExpr 0x555f55ebbb10 <line:134:4, col:61> 'void'
    | |   |   |-ImplicitCastExpr 0x555f55ebbaf8 <col:4> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
    | |   |   | `-DeclRefExpr 0x555f55ebb9e0 <col:4> 'void (const char *, ...)' Function 0x555f55df2ac0 'printk' 'void (const char *, ...)'
    | |   |   |-ImplicitCastExpr 0x555f55ebbb60 <col:11> 'const char *' <BitCast>
    | |   |   | `-ImplicitCastExpr 0x555f55ebbb48 <col:11> 'char *' <ArrayToPointerDecay>
    | |   |   |   `-StringLiteral 0x555f55ebba08 <col:11> 'char [27]' lvalue "Output 3 Enabled at %d ms\n"
    | |   |   `-BinaryOperator 0x555f55ebbad0 <col:42, col:53> 'unsigned int' '-'
    | |   |     |-ImplicitCastExpr 0x555f55ebbaa0 <col:42> 'uint32_t':'unsigned int' <LValueToRValue>
    | |   |     | `-DeclRefExpr 0x555f55ebba50 <col:42> 'uint32_t':'unsigned int' lvalue Var 0x555f55eb2650 'time_cnt' 'uint32_t':'unsigned int'
    | |   |     `-ImplicitCastExpr 0x555f55ebbab8 <col:53> 'uint32_t':'unsigned int' <LValueToRValue>
    | |   |       `-DeclRefExpr 0x555f55ebba78 <col:53> 'uint32_t':'unsigned int' lvalue Var 0x555f55eb25a8 'time_old' 'uint32_t':'unsigned int'
    | |   `-<<<NULL>>>
    | `-<<<NULL>>>
    `-CallExpr 0x555f55ebbcb0 <line:137:2, col:20> 'void'
      |-ImplicitCastExpr 0x555f55ebbc98 <col:2> 'void (*)(uint8_t, BOOL)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x555f55ebbc28 <col:2> 'void (uint8_t, BOOL)' Function 0x555f55eaedc0 'write_pin' 'void (uint8_t, BOOL)'
      |-ImplicitCastExpr 0x555f55ebbce8 </vagrant/apps/plc_4out/./inc/plc_platform.h:19:15> 'uint8_t':'unsigned char' <IntegralCast>
      | `-IntegerLiteral 0x555f55ebbc50 <col:15> 'int' 11
      `-ImplicitCastExpr 0x555f55ebbd00 <./src/ladder.c:137:19> 'BOOL':'unsigned char' <LValueToRValue>
        `-DeclRefExpr 0x555f55ebbc70 <col:19> 'BOOL':'unsigned char' lvalue ParmVar 0x555f55ebb650 'v' 'BOOL':'unsigned char'
