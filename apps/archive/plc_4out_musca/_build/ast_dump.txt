TranslationUnitDecl 0x55dc7da66918 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55dc7da66e90 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55dc7da66bb0 '__int128'
|-TypedefDecl 0x55dc7da66f00 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55dc7da66bd0 'unsigned __int128'
|-TypedefDecl 0x55dc7da671d8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55dc7da66fe0 'struct __NSConstantString_tag'
|   `-Record 0x55dc7da66f58 '__NSConstantString_tag'
|-TypedefDecl 0x55dc7da67270 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55dc7da67230 'char *'
|   `-BuiltinType 0x55dc7da669b0 'char'
|-TypedefDecl 0x55dc7da67538 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55dc7da674e0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55dc7da67350 'struct __va_list_tag'
|     `-Record 0x55dc7da672c8 '__va_list_tag'
|-TypedefDecl 0x55dc7dab1970 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:143:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x55dc7da66a30 'long'
|-TypedefDecl 0x55dc7dab19e0 <line:209:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x55dc7da66ad0 'unsigned long'
|-TypedefDecl 0x55dc7dab1a50 <line:321:1, col:24> col:24 wchar_t 'int'
| `-BuiltinType 0x55dc7da66a10 'int'
|-RecordDecl 0x55dc7dab1aa8 <line:415:9, line:426:1> line:415:9 struct definition
| |-FieldDecl 0x55dc7dab1ba0 <line:416:3, col:13> col:13 __max_align_ll 'long long'
| | `-AlignedAttr 0x55dc7dab1be8 <col:43, col:77> aligned
| |   `-UnaryExprOrTypeTraitExpr 0x55dc7dab1b68 <col:55, col:76> 'unsigned long' alignof 'long long'
| `-FieldDecl 0x55dc7dab1c88 <line:417:3, col:15> col:15 __max_align_ld 'long double'
|   `-AlignedAttr 0x55dc7dab1cd0 <col:45, col:81> aligned
|     `-UnaryExprOrTypeTraitExpr 0x55dc7dab1c50 <col:57, col:80> 'unsigned long' alignof 'long double'
|-TypedefDecl 0x55dc7dab1d70 <line:415:1, line:426:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x55dc7dab1d20 'struct max_align_t' sugar
|   `-RecordType 0x55dc7dab1b30 'max_align_t'
|     `-Record 0x55dc7dab1aa8 ''
|-TypedefDecl 0x55dc7dab1df8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdint.h:40:1, col:24> col:24 int8_t 'signed char'
| `-BuiltinType 0x55dc7da669d0 'signed char'
|-TypedefDecl 0x55dc7dab1e68 <line:41:1, col:25> col:25 int16_t 'short'
| `-BuiltinType 0x55dc7da669f0 'short'
|-TypedefDecl 0x55dc7dab1ed8 <line:42:1, col:25> col:25 int32_t 'int'
| `-BuiltinType 0x55dc7da66a10 'int'
|-TypedefDecl 0x55dc7dab1f48 <line:43:1, col:25> col:25 int64_t 'long'
| `-BuiltinType 0x55dc7da66a30 'long'
|-TypedefDecl 0x55dc7dab1fb8 <line:45:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x55dc7da669d0 'signed char'
|-TypedefDecl 0x55dc7dab2028 <line:46:1, col:29> col:29 int_fast16_t 'short'
| `-BuiltinType 0x55dc7da669f0 'short'
|-TypedefDecl 0x55dc7dab2098 <line:47:1, col:29> col:29 int_fast32_t 'int'
| `-BuiltinType 0x55dc7da66a10 'int'
|-TypedefDecl 0x55dc7dab2108 <line:48:1, col:29> col:29 int_fast64_t 'long'
| `-BuiltinType 0x55dc7da66a30 'long'
|-TypedefDecl 0x55dc7dab2178 <line:50:1, col:29> col:29 int_least8_t 'signed char'
| `-BuiltinType 0x55dc7da669d0 'signed char'
|-TypedefDecl 0x55dc7dab21e8 <line:51:1, col:30> col:30 int_least16_t 'short'
| `-BuiltinType 0x55dc7da669f0 'short'
|-TypedefDecl 0x55dc7dab2258 <line:52:1, col:30> col:30 int_least32_t 'int'
| `-BuiltinType 0x55dc7da66a10 'int'
|-TypedefDecl 0x55dc7dab22c8 <line:53:1, col:30> col:30 int_least64_t 'long'
| `-BuiltinType 0x55dc7da66a30 'long'
|-TypedefDecl 0x55dc7dab2338 <line:55:1, col:25> col:25 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x55dc7da66a70 'unsigned char'
|-TypedefDecl 0x55dc7dab23a8 <line:56:1, col:26> col:26 uint16_t 'unsigned short'
| `-BuiltinType 0x55dc7da66a90 'unsigned short'
|-TypedefDecl 0x55dc7dab2418 <line:57:1, col:26> col:26 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x55dc7da66ab0 'unsigned int'
|-TypedefDecl 0x55dc7dab2488 <line:58:1, col:26> col:26 uint64_t 'unsigned long'
| `-BuiltinType 0x55dc7da66ad0 'unsigned long'
|-TypedefDecl 0x55dc7dab24f8 <line:60:1, col:29> col:29 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x55dc7da66a70 'unsigned char'
|-TypedefDecl 0x55dc7dab2568 <line:61:1, col:30> col:30 uint_fast16_t 'unsigned short'
| `-BuiltinType 0x55dc7da66a90 'unsigned short'
|-TypedefDecl 0x55dc7dab25d8 <line:62:1, col:30> col:30 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x55dc7da66ab0 'unsigned int'
|-TypedefDecl 0x55dc7dab2648 <line:63:1, col:30> col:30 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x55dc7da66ad0 'unsigned long'
|-TypedefDecl 0x55dc7dab26b8 <line:65:1, col:30> col:30 uint_least8_t 'unsigned char'
| `-BuiltinType 0x55dc7da66a70 'unsigned char'
|-TypedefDecl 0x55dc7dab2728 <line:66:1, col:31> col:31 uint_least16_t 'unsigned short'
| `-BuiltinType 0x55dc7da66a90 'unsigned short'
|-TypedefDecl 0x55dc7dab2798 <line:67:1, col:31> col:31 uint_least32_t 'unsigned int'
| `-BuiltinType 0x55dc7da66ab0 'unsigned int'
|-TypedefDecl 0x55dc7dab2808 <line:68:1, col:31> col:31 uint_least64_t 'unsigned long'
| `-BuiltinType 0x55dc7da66ad0 'unsigned long'
|-TypedefDecl 0x55dc7dab2878 <line:70:1, col:26> col:26 intptr_t 'long'
| `-BuiltinType 0x55dc7da66a30 'long'
|-TypedefDecl 0x55dc7dab28e8 <line:71:1, col:26> col:26 referenced uintptr_t 'unsigned long'
| `-BuiltinType 0x55dc7da66ad0 'unsigned long'
|-TypedefDecl 0x55dc7dad6810 </vagrant/ext/zephyros/zephyr/include/zephyr/types.h:16:1, col:29> col:29 referenced s8_t 'signed char'
| `-BuiltinType 0x55dc7da669d0 'signed char'
|-TypedefDecl 0x55dc7dad6880 <line:17:1, col:29> col:29 s16_t 'short'
| `-BuiltinType 0x55dc7da669f0 'short'
|-TypedefDecl 0x55dc7dad68f0 <line:18:1, col:29> col:29 referenced s32_t 'int'
| `-BuiltinType 0x55dc7da66a10 'int'
|-TypedefDecl 0x55dc7dad6960 <line:19:1, col:29> col:29 referenced s64_t 'long long'
| `-BuiltinType 0x55dc7da66a50 'long long'
|-TypedefDecl 0x55dc7dad69d0 <line:21:1, col:29> col:29 referenced u8_t 'unsigned char'
| `-BuiltinType 0x55dc7da66a70 'unsigned char'
|-TypedefDecl 0x55dc7dad6a40 <line:22:1, col:29> col:29 referenced u16_t 'unsigned short'
| `-BuiltinType 0x55dc7da66a90 'unsigned short'
|-TypedefDecl 0x55dc7dad6ab0 <line:23:1, col:29> col:29 referenced u32_t 'unsigned int'
| `-BuiltinType 0x55dc7da66ab0 'unsigned int'
|-TypedefDecl 0x55dc7dad6b20 <line:24:1, col:29> col:29 referenced u64_t 'unsigned long long'
| `-BuiltinType 0x55dc7da66af0 'unsigned long long'
|-TypedefDecl 0x55dc7dad6b90 <line:27:1, col:29> col:29 ulong_t 'unsigned long'
| `-BuiltinType 0x55dc7da66ad0 'unsigned long'
|-TypedefDecl 0x55dc7dad6d50 </vagrant/ext/zephyros/zephyr/include/sys/atomic.h:21:1, col:13> col:13 referenced atomic_t 'int'
| `-BuiltinType 0x55dc7da66a10 'int'
|-TypedefDecl 0x55dc7dad6de0 <line:22:1, col:18> col:18 referenced atomic_val_t 'atomic_t':'int'
| `-TypedefType 0x55dc7dad6db0 'atomic_t' sugar
|   |-Typedef 0x55dc7dad6d50 'atomic_t'
|   `-BuiltinType 0x55dc7da66a10 'int'
|-FunctionDecl 0x55dc7dad7148 <line:56:1, line:57:31> line:56:12 atomic_cas 'int (atomic_t *, atomic_val_t, atomic_val_t)' extern
| |-ParmVarDecl 0x55dc7dad6f08 <col:23, col:33> col:33 target 'atomic_t *'
| |-ParmVarDecl 0x55dc7dad6fa0 <col:41, col:54> col:54 old_value 'atomic_val_t':'int'
| `-ParmVarDecl 0x55dc7dad7010 <line:57:9, col:22> col:22 new_value 'atomic_val_t':'int'
|-FunctionDecl 0x55dc7dad7400 <line:79:1, col:68> col:21 atomic_add 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55dc7dad7278 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x55dc7dad72e8 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x55dc7dad75e8 <line:101:1, col:68> col:21 atomic_sub 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55dc7dad74e8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x55dc7dad7558 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x55dc7daf0010 <line:120:1, col:48> col:21 atomic_inc 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x55dc7dad76d8 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x55dc7daf0180 <line:139:1, col:48> col:21 atomic_dec 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x55dc7daf00f8 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x55dc7daf03a0 <line:158:1, col:54> col:21 used atomic_get 'atomic_val_t (const atomic_t *)' extern
| `-ParmVarDecl 0x55dc7daf0298 <col:32, col:48> col:48 target 'const atomic_t *'
|-FunctionDecl 0x55dc7daf0588 <line:185:1, col:68> col:21 atomic_set 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55dc7daf0488 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x55dc7daf04f8 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x55dc7daf0700 <line:205:1, col:50> col:21 atomic_clear 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x55dc7daf0678 <col:34, col:44> col:44 target 'atomic_t *'
|-FunctionDecl 0x55dc7daf08e8 <line:229:1, col:67> col:21 used atomic_or 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55dc7daf07e8 <col:31, col:41> col:41 target 'atomic_t *'
| `-ParmVarDecl 0x55dc7daf0858 <col:49, col:62> col:62 value 'atomic_val_t':'int'
|-FunctionDecl 0x55dc7daf0ad8 <line:252:1, col:68> col:21 atomic_xor 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55dc7daf09d8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x55dc7daf0a48 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x55dc7daf0cc8 <line:275:1, col:68> col:21 used atomic_and 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55dc7daf0bc8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x55dc7daf0c38 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x55dc7daf0eb8 <line:298:1, col:69> col:21 atomic_nand 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55dc7daf0db8 <col:33, col:43> col:43 target 'atomic_t *'
| `-ParmVarDecl 0x55dc7daf0e28 <col:51, col:64> col:64 value 'atomic_val_t':'int'
|-FunctionDecl 0x55dc7daf9d80 <line:351:1, line:356:1> line:351:20 used atomic_test_bit 'bool (const atomic_t *, int)' static inline
| |-ParmVarDecl 0x55dc7daf9bf8 <col:36, col:52> col:52 used target 'const atomic_t *'
| |-ParmVarDecl 0x55dc7daf9c70 <col:60, col:64> col:64 used bit 'int'
| |-CompoundStmt 0x55dc7dafa4f8 <line:352:1, line:356:1>
| | |-DeclStmt 0x55dc7dafa180 <line:353:2, col:57>
| | | `-VarDecl 0x55dc7daf9e40 <col:2, col:56> col:15 used val 'atomic_val_t':'int' cinit
| | |   `-CallExpr 0x55dc7dafa150 <col:21, col:56> 'atomic_val_t':'int'
| | |     |-ImplicitCastExpr 0x55dc7dafa138 <col:21> 'atomic_val_t (*)(const atomic_t *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x55dc7daf9ea0 <col:21> 'atomic_val_t (const atomic_t *)' Function 0x55dc7daf03a0 'atomic_get' 'atomic_val_t (const atomic_t *)'
| | |     `-ParenExpr 0x55dc7dafa0c0 <line:318:32, col:63> 'const atomic_t *'
| | |       `-BinaryOperator 0x55dc7dafa098 <col:33, col:62> 'const atomic_t *' '+'
| | |         |-ImplicitCastExpr 0x55dc7dafa080 <col:33, col:38> 'const atomic_t *' <LValueToRValue>
| | |         | `-ParenExpr 0x55dc7daf9ef0 <col:33, col:38> 'const atomic_t *' lvalue
| | |         |   `-DeclRefExpr 0x55dc7daf9ec8 <line:353:44> 'const atomic_t *' lvalue ParmVar 0x55dc7daf9bf8 'target' 'const atomic_t *'
| | |         `-ParenExpr 0x55dc7dafa060 <line:318:42, col:62> 'unsigned long'
| | |           `-BinaryOperator 0x55dc7dafa038 <col:43, line:316:46> 'unsigned long' '/'
| | |             |-ImplicitCastExpr 0x55dc7dafa020 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |             | `-ImplicitCastExpr 0x55dc7dafa008 <col:43, col:47> 'int' <LValueToRValue>
| | |             |   `-ParenExpr 0x55dc7daf9f38 <col:43, col:47> 'int' lvalue
| | |             |     `-DeclRefExpr 0x55dc7daf9f10 <line:353:52> 'int' lvalue ParmVar 0x55dc7daf9c70 'bit' 'int'
| | |             `-ParenExpr 0x55dc7daf9fe8 <line:316:21, col:46> 'unsigned long'
| | |               `-BinaryOperator 0x55dc7daf9fc0 <col:22, col:45> 'unsigned long' '*'
| | |                 |-UnaryExprOrTypeTraitExpr 0x55dc7daf9f68 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |                 `-ImplicitCastExpr 0x55dc7daf9fa8 <col:45> 'unsigned long' <IntegralCast>
| | |                   `-IntegerLiteral 0x55dc7daf9f88 <col:45> 'int' 8
| | `-ReturnStmt 0x55dc7dafa4b8 <line:355:2, col:53>
| |   `-ImplicitCastExpr 0x55dc7dafa4a0 <col:9, col:53> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55dc7dafa478 <col:9, col:53> 'int' '!='
| |       |-ParenExpr 0x55dc7dafa438 <col:9, col:48> 'int'
| |       | `-BinaryOperator 0x55dc7dafa410 <col:10, col:47> 'int' '&'
| |       |   |-IntegerLiteral 0x55dc7dafa198 <col:10> 'int' 1
| |       |   `-ParenExpr 0x55dc7dafa3f0 <col:14, col:47> 'atomic_val_t':'int'
| |       |     `-BinaryOperator 0x55dc7dafa3c8 <col:15, col:46> 'atomic_val_t':'int' '>>'
| |       |       |-ImplicitCastExpr 0x55dc7dafa3b0 <col:15> 'atomic_val_t':'int' <LValueToRValue>
| |       |       | `-DeclRefExpr 0x55dc7dafa1b8 <col:15> 'atomic_val_t':'int' lvalue Var 0x55dc7daf9e40 'val' 'atomic_val_t':'int'
| |       |       `-ParenExpr 0x55dc7dafa390 <col:22, col:46> 'unsigned long'
| |       |         `-BinaryOperator 0x55dc7dafa368 <col:23, col:45> 'unsigned long' '&'
| |       |           |-ImplicitCastExpr 0x55dc7dafa350 <col:23> 'unsigned long' <IntegralCast>
| |       |           | `-ImplicitCastExpr 0x55dc7dafa338 <col:23> 'int' <LValueToRValue>
| |       |           |   `-DeclRefExpr 0x55dc7dafa1e0 <col:23> 'int' lvalue ParmVar 0x55dc7daf9c70 'bit' 'int'
| |       |           `-ParenExpr 0x55dc7dafa318 <col:29, col:45> 'unsigned long'
| |       |             `-BinaryOperator 0x55dc7dafa2f0 <line:316:21, line:355:44> 'unsigned long' '-'
| |       |               |-ParenExpr 0x55dc7dafa298 <line:316:21, col:46> 'unsigned long'
| |       |               | `-BinaryOperator 0x55dc7dafa270 <col:22, col:45> 'unsigned long' '*'
| |       |               |   |-UnaryExprOrTypeTraitExpr 0x55dc7dafa218 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |       |               |   `-ImplicitCastExpr 0x55dc7dafa258 <col:45> 'unsigned long' <IntegralCast>
| |       |               |     `-IntegerLiteral 0x55dc7dafa238 <col:45> 'int' 8
| |       |               `-ImplicitCastExpr 0x55dc7dafa2d8 <line:355:44> 'unsigned long' <IntegralCast>
| |       |                 `-IntegerLiteral 0x55dc7dafa2b8 <col:44> 'int' 1
| |       `-IntegerLiteral 0x55dc7dafa458 <col:53> 'int' 0
| `-FullComment 0x55dc7dbde0e0 <line:341:3, line:349:55>
|   |-ParagraphComment 0x55dc7dbdabb0 <line:341:3>
|   | `-TextComment 0x55dc7dbdab80 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dbdabd0 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x55dc7dbdac30 <col:10, col:32>
|   |   `-TextComment 0x55dc7dbdac00 <col:10, col:32> Text=" Atomically test a bit."
|   |-ParagraphComment 0x55dc7dbdada0 <line:343:3, line:344:66>
|   | |-TextComment 0x55dc7dbdac50 <line:343:3, col:41> Text=" This routine tests whether bit number "
|   | |-InlineCommandComment 0x55dc7dbdaca0 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55dc7dbdacc0 <col:48, col:51> Text=" of "
|   | |-InlineCommandComment 0x55dc7dbdad10 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x55dc7dbdad30 <col:61, col:75> Text=" is set or not."
|   | `-TextComment 0x55dc7dbdad50 <line:344:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55dc7dbdadf0 <line:346:3>
|   | `-TextComment 0x55dc7dbdadc0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdae10 <col:4, line:347:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbdaec0 <line:346:17, line:347:3>
|   |   |-TextComment 0x55dc7dbdae70 <line:346:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55dc7dbdae90 <line:347:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdaee0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dbdaf70 <col:14, col:43>
|   |   `-TextComment 0x55dc7dbdaf40 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x55dc7dbde000 <line:349:3>
|   | `-TextComment 0x55dc7dbdaf90 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dbde020 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55dc7dbde080 <col:11, col:55>
|       `-TextComment 0x55dc7dbde050 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x55dc7dafa6b0 <line:369:1, line:377:1> line:369:20 atomic_test_and_clear_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x55dc7dafa528 <col:46, col:56> col:56 used target 'atomic_t *'
| |-ParmVarDecl 0x55dc7dafa5a0 <col:64, col:68> col:68 used bit 'int'
| |-CompoundStmt 0x55dc7dafb478 <line:370:1, line:377:1>
| | |-DeclStmt 0x55dc7dafaab0 <line:371:2, col:38>
| | | `-VarDecl 0x55dc7dafa770 <col:2, line:317:66> line:371:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x55dc7dafaa90 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x55dc7dafaa68 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x55dc7dafa7d0 <col:27> 'int' 1
| | |       `-ParenExpr 0x55dc7dafaa48 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x55dc7dafaa20 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x55dc7dafaa08 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x55dc7dafa8b0 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x55dc7dafa898 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x55dc7dafa878 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x55dc7dafa810 <line:371:34> 'int' lvalue ParmVar 0x55dc7dafa5a0 'bit' 'int'
| | |           `-ParenExpr 0x55dc7dafa9e8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x55dc7dafa9c0 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x55dc7dafa968 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x55dc7dafa940 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x55dc7dafa8e8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x55dc7dafa928 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x55dc7dafa908 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x55dc7dafa9a8 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x55dc7dafa988 <col:63> 'int' 1
| | |-DeclStmt 0x55dc7dafab38 <line:372:2, col:18>
| | | `-VarDecl 0x55dc7dafaad8 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x55dc7dafb2e8 <line:374:2, col:50> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x55dc7dafab50 <col:2> 'atomic_val_t':'int' lvalue Var 0x55dc7dafaad8 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x55dc7dafb2b0 <col:8, col:50> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x55dc7dafb298 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x55dc7dafafa0 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55dc7daf0cc8 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x55dc7dafb1c0 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x55dc7dafb198 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x55dc7dafb180 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x55dc7dafaff0 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x55dc7dafafc8 <line:374:31> 'atomic_t *' lvalue ParmVar 0x55dc7dafa528 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x55dc7dafb160 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x55dc7dafb138 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x55dc7dafb120 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x55dc7dafb108 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x55dc7dafb038 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x55dc7dafb010 <line:374:39> 'int' lvalue ParmVar 0x55dc7dafa5a0 'bit' 'int'
| | |   |       `-ParenExpr 0x55dc7dafb0e8 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x55dc7dafb0c0 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x55dc7dafb068 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x55dc7dafb0a8 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x55dc7dafb088 <col:45> 'int' 8
| | |   `-UnaryOperator 0x55dc7dafb220 <line:374:45, col:46> 'atomic_val_t':'int' prefix '~'
| | |     `-ImplicitCastExpr 0x55dc7dafb208 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x55dc7dafb1e0 <col:46> 'atomic_val_t':'int' lvalue Var 0x55dc7dafa770 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x55dc7dafb438 <line:376:2, col:25>
| |   `-ImplicitCastExpr 0x55dc7dafb420 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55dc7dafb3f8 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x55dc7dafb3b8 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x55dc7dafb390 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x55dc7dafb360 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x55dc7dafb310 <col:10> 'atomic_val_t':'int' lvalue Var 0x55dc7dafaad8 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x55dc7dafb378 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x55dc7dafb338 <col:16> 'atomic_val_t':'int' lvalue Var 0x55dc7dafa770 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x55dc7dafb3d8 <col:25> 'int' 0
| `-FullComment 0x55dc7dbde670 <line:359:3, line:367:55>
|   |-ParagraphComment 0x55dc7dbde180 <line:359:3>
|   | `-TextComment 0x55dc7dbde150 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dbde1a0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55dc7dbde200 <col:10, col:42>
|   |   `-TextComment 0x55dc7dbde1d0 <col:10, col:42> Text=" Atomically test and clear a bit."
|   |-ParagraphComment 0x55dc7dbde370 <line:361:3, line:362:66>
|   | |-TextComment 0x55dc7dbde220 <line:361:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x55dc7dbde270 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55dc7dbde290 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x55dc7dbde2e0 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x55dc7dbde300 <col:51, col:76> Text=" and return its old value."
|   | `-TextComment 0x55dc7dbde320 <line:362:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55dc7dbde3c0 <line:364:3>
|   | `-TextComment 0x55dc7dbde390 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbde3e0 <col:4, line:365:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbde490 <line:364:17, line:365:3>
|   |   |-TextComment 0x55dc7dbde440 <line:364:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55dc7dbde460 <line:365:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbde4b0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dbde540 <col:14, col:43>
|   |   `-TextComment 0x55dc7dbde510 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x55dc7dbde590 <line:367:3>
|   | `-TextComment 0x55dc7dbde560 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dbde5b0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55dc7dbde610 <col:11, col:55>
|       `-TextComment 0x55dc7dbde5e0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x55dc7dafb5c0 <line:390:1, line:398:1> line:390:20 used atomic_test_and_set_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x55dc7dafb4b8 <col:44, col:54> col:54 used target 'atomic_t *'
| |-ParmVarDecl 0x55dc7dafb530 <col:62, col:66> col:66 used bit 'int'
| |-CompoundStmt 0x55dc7dafbec8 <line:391:1, line:398:1>
| | |-DeclStmt 0x55dc7dafb9a0 <line:392:2, col:38>
| | | `-VarDecl 0x55dc7dafb680 <col:2, line:317:66> line:392:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x55dc7dafb980 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x55dc7dafb958 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x55dc7dafb6e0 <col:27> 'int' 1
| | |       `-ParenExpr 0x55dc7dafb938 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x55dc7dafb910 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x55dc7dafb8f8 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x55dc7dafb7a0 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x55dc7dafb788 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x55dc7dafb768 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x55dc7dafb700 <line:392:34> 'int' lvalue ParmVar 0x55dc7dafb530 'bit' 'int'
| | |           `-ParenExpr 0x55dc7dafb8d8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x55dc7dafb8b0 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x55dc7dafb858 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x55dc7dafb830 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x55dc7dafb7d8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x55dc7dafb818 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x55dc7dafb7f8 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x55dc7dafb898 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x55dc7dafb878 <col:63> 'int' 1
| | |-DeclStmt 0x55dc7dafba28 <line:393:2, col:18>
| | | `-VarDecl 0x55dc7dafb9c8 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x55dc7dafbd38 <line:395:2, col:48> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x55dc7dafba40 <col:2> 'atomic_val_t':'int' lvalue Var 0x55dc7dafb9c8 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x55dc7dafbce8 <col:8, col:48> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x55dc7dafbcd0 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x55dc7dafba68 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55dc7daf08e8 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x55dc7dafbc88 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x55dc7dafbc60 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x55dc7dafbc48 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x55dc7dafbab8 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x55dc7dafba90 <line:395:30> 'atomic_t *' lvalue ParmVar 0x55dc7dafb4b8 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x55dc7dafbc28 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x55dc7dafbc00 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x55dc7dafbbe8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x55dc7dafbbd0 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x55dc7dafbb00 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x55dc7dafbad8 <line:395:38> 'int' lvalue ParmVar 0x55dc7dafb530 'bit' 'int'
| | |   |       `-ParenExpr 0x55dc7dafbbb0 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x55dc7dafbb88 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x55dc7dafbb30 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x55dc7dafbb70 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x55dc7dafbb50 <col:45> 'int' 8
| | |   `-ImplicitCastExpr 0x55dc7dafbd20 <line:395:44> 'atomic_val_t':'int' <LValueToRValue>
| | |     `-DeclRefExpr 0x55dc7dafbca8 <col:44> 'atomic_val_t':'int' lvalue Var 0x55dc7dafb680 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x55dc7dafbe88 <line:397:2, col:25>
| |   `-ImplicitCastExpr 0x55dc7dafbe70 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55dc7dafbe48 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x55dc7dafbe08 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x55dc7dafbde0 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x55dc7dafbdb0 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x55dc7dafbd60 <col:10> 'atomic_val_t':'int' lvalue Var 0x55dc7dafb9c8 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x55dc7dafbdc8 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x55dc7dafbd88 <col:16> 'atomic_val_t':'int' lvalue Var 0x55dc7dafb680 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x55dc7dafbe28 <col:25> 'int' 0
| `-FullComment 0x55dc7dbdec00 <line:380:3, line:388:55>
|   |-ParagraphComment 0x55dc7dbde710 <line:380:3>
|   | `-TextComment 0x55dc7dbde6e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dbde730 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x55dc7dbde790 <col:10, col:31>
|   |   `-TextComment 0x55dc7dbde760 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x55dc7dbde900 <line:382:3, line:383:66>
|   | |-TextComment 0x55dc7dbde7b0 <line:382:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x55dc7dbde800 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55dc7dbde820 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x55dc7dbde870 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x55dc7dbde890 <col:49, col:74> Text=" and return its old value."
|   | `-TextComment 0x55dc7dbde8b0 <line:383:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55dc7dbde950 <line:385:3>
|   | `-TextComment 0x55dc7dbde920 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbde970 <col:4, line:386:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbdea20 <line:385:17, line:386:3>
|   |   |-TextComment 0x55dc7dbde9d0 <line:385:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55dc7dbde9f0 <line:386:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdea40 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dbdead0 <col:14, col:43>
|   |   `-TextComment 0x55dc7dbdeaa0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x55dc7dbdeb20 <line:388:3>
|   | `-TextComment 0x55dc7dbdeaf0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dbdeb40 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55dc7dbdeba0 <col:11, col:55>
|       `-TextComment 0x55dc7dbdeb70 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x55dc7dafc0c0 <line:411:1, line:416:1> line:411:20 used atomic_clear_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x55dc7dafbf08 <col:37, col:47> col:47 used target 'atomic_t *'
| |-ParmVarDecl 0x55dc7dafbfb0 <col:55, col:59> col:59 used bit 'int'
| |-CompoundStmt 0x55dc7dafc808 <line:412:1, line:416:1>
| | |-DeclStmt 0x55dc7dafc4a0 <line:413:2, col:38>
| | | `-VarDecl 0x55dc7dafc180 <col:2, line:317:66> line:413:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x55dc7dafc480 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x55dc7dafc458 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x55dc7dafc1e0 <col:27> 'int' 1
| | |       `-ParenExpr 0x55dc7dafc438 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x55dc7dafc410 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x55dc7dafc3f8 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x55dc7dafc2a0 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x55dc7dafc288 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x55dc7dafc268 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x55dc7dafc200 <line:413:34> 'int' lvalue ParmVar 0x55dc7dafbfb0 'bit' 'int'
| | |           `-ParenExpr 0x55dc7dafc3d8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x55dc7dafc3b0 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x55dc7dafc358 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x55dc7dafc330 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x55dc7dafc2d8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x55dc7dafc318 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x55dc7dafc2f8 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x55dc7dafc398 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x55dc7dafc378 <col:63> 'int' 1
| | `-CStyleCastExpr 0x55dc7dafc7b8 <line:415:2, col:50> 'void' <ToVoid>
| |   `-CallExpr 0x55dc7dafc770 <col:8, col:50> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x55dc7dafc758 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dafc4b8 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55dc7daf0cc8 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x55dc7dafc6d8 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x55dc7dafc6b0 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x55dc7dafc698 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x55dc7dafc508 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x55dc7dafc4e0 <line:415:31> 'atomic_t *' lvalue ParmVar 0x55dc7dafbf08 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x55dc7dafc678 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x55dc7dafc650 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x55dc7dafc638 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x55dc7dafc620 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x55dc7dafc550 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x55dc7dafc528 <line:415:39> 'int' lvalue ParmVar 0x55dc7dafbfb0 'bit' 'int'
| |     |       `-ParenExpr 0x55dc7dafc600 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x55dc7dafc5d8 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x55dc7dafc580 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x55dc7dafc5c0 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x55dc7dafc5a0 <col:45> 'int' 8
| |     `-UnaryOperator 0x55dc7dafc738 <line:415:45, col:46> 'atomic_val_t':'int' prefix '~'
| |       `-ImplicitCastExpr 0x55dc7dafc720 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| |         `-DeclRefExpr 0x55dc7dafc6f8 <col:46> 'atomic_val_t':'int' lvalue Var 0x55dc7dafc180 'mask' 'atomic_val_t':'int'
| `-FullComment 0x55dc7dbdf170 <line:401:3, line:409:14>
|   |-ParagraphComment 0x55dc7dbdeca0 <line:401:3>
|   | `-TextComment 0x55dc7dbdec70 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dbdecc0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55dc7dbded20 <col:10, col:33>
|   |   `-TextComment 0x55dc7dbdecf0 <col:10, col:33> Text=" Atomically clear a bit."
|   |-ParagraphComment 0x55dc7dbdee70 <line:403:3, line:404:66>
|   | |-TextComment 0x55dc7dbded40 <line:403:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x55dc7dbded90 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55dc7dbdedb0 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x55dc7dbdee00 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x55dc7dbdee20 <line:404:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55dc7dbdeec0 <line:406:3>
|   | `-TextComment 0x55dc7dbdee90 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdeee0 <col:4, line:407:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbdef90 <line:406:17, line:407:3>
|   |   |-TextComment 0x55dc7dbdef40 <line:406:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55dc7dbdef60 <line:407:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdefb0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dbdf040 <col:14, col:43>
|   |   `-TextComment 0x55dc7dbdf010 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x55dc7dbdf090 <line:409:3>
|   | `-TextComment 0x55dc7dbdf060 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dbdf0b0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dbdf110 <col:11, col:14>
|       `-TextComment 0x55dc7dbdf0e0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dafc940 <line:429:1, line:434:1> line:429:20 atomic_set_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x55dc7dafc838 <col:35, col:45> col:45 used target 'atomic_t *'
| |-ParmVarDecl 0x55dc7dafc8b0 <col:53, col:57> col:57 used bit 'int'
| |-CompoundStmt 0x55dc7dafd088 <line:430:1, line:434:1>
| | |-DeclStmt 0x55dc7dafcd20 <line:431:2, col:38>
| | | `-VarDecl 0x55dc7dafca00 <col:2, line:317:66> line:431:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x55dc7dafcd00 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x55dc7dafccd8 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x55dc7dafca60 <col:27> 'int' 1
| | |       `-ParenExpr 0x55dc7dafccb8 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x55dc7dafcc90 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x55dc7dafcc78 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x55dc7dafcb20 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x55dc7dafcb08 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x55dc7dafcae8 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x55dc7dafca80 <line:431:34> 'int' lvalue ParmVar 0x55dc7dafc8b0 'bit' 'int'
| | |           `-ParenExpr 0x55dc7dafcc58 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x55dc7dafcc30 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x55dc7dafcbd8 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x55dc7dafcbb0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x55dc7dafcb58 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x55dc7dafcb98 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x55dc7dafcb78 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x55dc7dafcc18 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x55dc7dafcbf8 <col:63> 'int' 1
| | `-CStyleCastExpr 0x55dc7dafd038 <line:433:2, col:48> 'void' <ToVoid>
| |   `-CallExpr 0x55dc7dafcfd8 <col:8, col:48> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x55dc7dafcfc0 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dafcd38 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55dc7daf08e8 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x55dc7dafcf58 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x55dc7dafcf30 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x55dc7dafcf18 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x55dc7dafcd88 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x55dc7dafcd60 <line:433:30> 'atomic_t *' lvalue ParmVar 0x55dc7dafc838 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x55dc7dafcef8 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x55dc7dafced0 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x55dc7dafceb8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x55dc7dafcea0 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x55dc7dafcdd0 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x55dc7dafcda8 <line:433:38> 'int' lvalue ParmVar 0x55dc7dafc8b0 'bit' 'int'
| |     |       `-ParenExpr 0x55dc7dafce80 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x55dc7dafce58 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x55dc7dafce00 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x55dc7dafce40 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x55dc7dafce20 <col:45> 'int' 8
| |     `-ImplicitCastExpr 0x55dc7dafd010 <line:433:44> 'atomic_val_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x55dc7dafcf78 <col:44> 'atomic_val_t':'int' lvalue Var 0x55dc7dafca00 'mask' 'atomic_val_t':'int'
| `-FullComment 0x55dc7dbdf6e0 <line:419:3, line:427:14>
|   |-ParagraphComment 0x55dc7dbdf210 <line:419:3>
|   | `-TextComment 0x55dc7dbdf1e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dbdf230 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x55dc7dbdf290 <col:10, col:31>
|   |   `-TextComment 0x55dc7dbdf260 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x55dc7dbdf3e0 <line:421:3, line:422:66>
|   | |-TextComment 0x55dc7dbdf2b0 <line:421:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x55dc7dbdf300 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55dc7dbdf320 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x55dc7dbdf370 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x55dc7dbdf390 <line:422:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55dc7dbdf430 <line:424:3>
|   | `-TextComment 0x55dc7dbdf400 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdf450 <col:4, line:425:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbdf500 <line:424:17, line:425:3>
|   |   |-TextComment 0x55dc7dbdf4b0 <line:424:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55dc7dbdf4d0 <line:425:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdf520 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dbdf5b0 <col:14, col:43>
|   |   `-TextComment 0x55dc7dbdf580 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x55dc7dbdf600 <line:427:3>
|   | `-TextComment 0x55dc7dbdf5d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dbdf620 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dbdf680 <col:11, col:14>
|       `-TextComment 0x55dc7dbdf650 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dafd2d0 <line:448:1, line:457:1> line:448:20 atomic_set_bit_to 'void (atomic_t *, int, bool)' static inline
| |-ParmVarDecl 0x55dc7dafd0b8 <col:38, col:48> col:48 used target 'atomic_t *'
| |-ParmVarDecl 0x55dc7dafd130 <col:56, col:60> col:60 used bit 'int'
| |-ParmVarDecl 0x55dc7dafd1a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/atomic.h:448:70> col:70 used val 'bool'
| |-CompoundStmt 0x55dc7dafde68 <line:449:1, line:457:1>
| | |-DeclStmt 0x55dc7dafd6b8 <line:450:2, col:38>
| | | `-VarDecl 0x55dc7dafd398 <col:2, line:317:66> line:450:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x55dc7dafd698 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x55dc7dafd670 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x55dc7dafd3f8 <col:27> 'int' 1
| | |       `-ParenExpr 0x55dc7dafd650 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x55dc7dafd628 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x55dc7dafd610 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x55dc7dafd4b8 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x55dc7dafd4a0 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x55dc7dafd480 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x55dc7dafd418 <line:450:34> 'int' lvalue ParmVar 0x55dc7dafd130 'bit' 'int'
| | |           `-ParenExpr 0x55dc7dafd5f0 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x55dc7dafd5c8 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x55dc7dafd570 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x55dc7dafd548 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x55dc7dafd4f0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x55dc7dafd530 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x55dc7dafd510 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x55dc7dafd5b0 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x55dc7dafd590 <col:63> 'int' 1
| | `-IfStmt 0x55dc7dafdd70 <line:452:2, line:456:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x55dc7dafd6f8 <line:452:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x55dc7dafd6d0 <col:6> 'bool' lvalue ParmVar 0x55dc7dafd1a0 'val' 'bool'
| |   |-CompoundStmt 0x55dc7dafda18 <col:11, line:454:2>
| |   | `-CStyleCastExpr 0x55dc7dafd9f0 <line:453:3, col:49> 'void' <ToVoid>
| |   |   `-CallExpr 0x55dc7dafd990 <col:9, col:49> 'atomic_val_t':'int'
| |   |     |-ImplicitCastExpr 0x55dc7dafd978 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x55dc7dafd710 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55dc7daf08e8 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |   |     |-ParenExpr 0x55dc7dafd930 <line:318:32, col:63> 'atomic_t *'
| |   |     | `-BinaryOperator 0x55dc7dafd908 <col:33, col:62> 'atomic_t *' '+'
| |   |     |   |-ImplicitCastExpr 0x55dc7dafd8f0 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |   |     |   | `-ParenExpr 0x55dc7dafd760 <col:33, col:38> 'atomic_t *' lvalue
| |   |     |   |   `-DeclRefExpr 0x55dc7dafd738 <line:453:31> 'atomic_t *' lvalue ParmVar 0x55dc7dafd0b8 'target' 'atomic_t *'
| |   |     |   `-ParenExpr 0x55dc7dafd8d0 <line:318:42, col:62> 'unsigned long'
| |   |     |     `-BinaryOperator 0x55dc7dafd8a8 <col:43, line:316:46> 'unsigned long' '/'
| |   |     |       |-ImplicitCastExpr 0x55dc7dafd890 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |   |     |       | `-ImplicitCastExpr 0x55dc7dafd878 <col:43, col:47> 'int' <LValueToRValue>
| |   |     |       |   `-ParenExpr 0x55dc7dafd7a8 <col:43, col:47> 'int' lvalue
| |   |     |       |     `-DeclRefExpr 0x55dc7dafd780 <line:453:39> 'int' lvalue ParmVar 0x55dc7dafd130 'bit' 'int'
| |   |     |       `-ParenExpr 0x55dc7dafd858 <line:316:21, col:46> 'unsigned long'
| |   |     |         `-BinaryOperator 0x55dc7dafd830 <col:22, col:45> 'unsigned long' '*'
| |   |     |           |-UnaryExprOrTypeTraitExpr 0x55dc7dafd7d8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |   |     |           `-ImplicitCastExpr 0x55dc7dafd818 <col:45> 'unsigned long' <IntegralCast>
| |   |     |             `-IntegerLiteral 0x55dc7dafd7f8 <col:45> 'int' 8
| |   |     `-ImplicitCastExpr 0x55dc7dafd9c8 <line:453:45> 'atomic_val_t':'int' <LValueToRValue>
| |   |       `-DeclRefExpr 0x55dc7dafd950 <col:45> 'atomic_val_t':'int' lvalue Var 0x55dc7dafd398 'mask' 'atomic_val_t':'int'
| |   `-CompoundStmt 0x55dc7dafdd58 <line:454:9, line:456:2>
| |     `-CStyleCastExpr 0x55dc7dafdd30 <line:455:3, col:51> 'void' <ToVoid>
| |       `-CallExpr 0x55dc7dafdce8 <col:9, col:51> 'atomic_val_t':'int'
| |         |-ImplicitCastExpr 0x55dc7dafdcd0 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x55dc7dafda30 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55dc7daf0cc8 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |         |-ParenExpr 0x55dc7dafdc50 <line:318:32, col:63> 'atomic_t *'
| |         | `-BinaryOperator 0x55dc7dafdc28 <col:33, col:62> 'atomic_t *' '+'
| |         |   |-ImplicitCastExpr 0x55dc7dafdc10 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |         |   | `-ParenExpr 0x55dc7dafda80 <col:33, col:38> 'atomic_t *' lvalue
| |         |   |   `-DeclRefExpr 0x55dc7dafda58 <line:455:32> 'atomic_t *' lvalue ParmVar 0x55dc7dafd0b8 'target' 'atomic_t *'
| |         |   `-ParenExpr 0x55dc7dafdbf0 <line:318:42, col:62> 'unsigned long'
| |         |     `-BinaryOperator 0x55dc7dafdbc8 <col:43, line:316:46> 'unsigned long' '/'
| |         |       |-ImplicitCastExpr 0x55dc7dafdbb0 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |         |       | `-ImplicitCastExpr 0x55dc7dafdb98 <col:43, col:47> 'int' <LValueToRValue>
| |         |       |   `-ParenExpr 0x55dc7dafdac8 <col:43, col:47> 'int' lvalue
| |         |       |     `-DeclRefExpr 0x55dc7dafdaa0 <line:455:40> 'int' lvalue ParmVar 0x55dc7dafd130 'bit' 'int'
| |         |       `-ParenExpr 0x55dc7dafdb78 <line:316:21, col:46> 'unsigned long'
| |         |         `-BinaryOperator 0x55dc7dafdb50 <col:22, col:45> 'unsigned long' '*'
| |         |           |-UnaryExprOrTypeTraitExpr 0x55dc7dafdaf8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |         |           `-ImplicitCastExpr 0x55dc7dafdb38 <col:45> 'unsigned long' <IntegralCast>
| |         |             `-IntegerLiteral 0x55dc7dafdb18 <col:45> 'int' 8
| |         `-UnaryOperator 0x55dc7dafdcb0 <line:455:46, col:47> 'atomic_val_t':'int' prefix '~'
| |           `-ImplicitCastExpr 0x55dc7dafdc98 <col:47> 'atomic_val_t':'int' <LValueToRValue>
| |             `-DeclRefExpr 0x55dc7dafdc70 <col:47> 'atomic_val_t':'int' lvalue Var 0x55dc7dafd398 'mask' 'atomic_val_t':'int'
| `-FullComment 0x55dc7dbdfdb0 <line:437:3, line:446:14>
|   |-ParagraphComment 0x55dc7dbdf780 <line:437:3>
|   | `-TextComment 0x55dc7dbdf750 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dbdf7a0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x55dc7dbdf800 <col:10, col:48>
|   |   `-TextComment 0x55dc7dbdf7d0 <col:10, col:48> Text=" Atomically set a bit to a given value."
|   |-ParagraphComment 0x55dc7dbdf9d0 <line:439:3, line:440:66>
|   | |-TextComment 0x55dc7dbdf820 <line:439:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x55dc7dbdf870 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55dc7dbdf890 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x55dc7dbdf8e0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x55dc7dbdf900 <col:49, col:58> Text=" to value "
|   | |-InlineCommandComment 0x55dc7dbdf950 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="val."
|   | `-TextComment 0x55dc7dbdf970 <line:440:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55dc7dbdfa20 <line:442:3>
|   | `-TextComment 0x55dc7dbdf9f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdfa40 <col:4, line:443:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbdfaf0 <line:442:17, line:443:3>
|   |   |-TextComment 0x55dc7dbdfaa0 <line:442:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55dc7dbdfac0 <line:443:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdfb10 <col:4, line:444:3> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dbdfbc0 <line:443:14, line:444:3>
|   |   |-TextComment 0x55dc7dbdfb70 <line:443:14, col:43> Text=" Bit number (starting from 0)."
|   |   `-TextComment 0x55dc7dbdfb90 <line:444:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdfbe0 <col:4, col:38> [in] implicitly Param="val" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dbdfc70 <col:14, col:38>
|   |   `-TextComment 0x55dc7dbdfc40 <col:14, col:38> Text=" true for 1, false for 0."
|   |-ParagraphComment 0x55dc7dbdfcc0 <line:446:3>
|   | `-TextComment 0x55dc7dbdfc90 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dbdfce0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dbdfd40 <col:11, col:14>
|       `-TextComment 0x55dc7dbdfd10 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7db07720 </vagrant/ext/zephyros/zephyr/include/sys/util.h:113:1, line:116:1> line:113:20 is_power_of_two 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x55dc7dafdea0 <col:36, col:49> col:49 used x 'unsigned int'
| `-CompoundStmt 0x55dc7db07a78 <line:114:1, line:116:1>
|   `-ReturnStmt 0x55dc7db07a60 <line:115:2, col:42>
|     `-ImplicitCastExpr 0x55dc7db07a48 <col:9, col:42> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55dc7db07a20 <col:9, col:42> 'int' '&&'
|         |-ParenExpr 0x55dc7db07850 <col:9, col:17> 'int'
|         | `-BinaryOperator 0x55dc7db07828 <col:10, col:15> 'int' '!='
|         |   |-ImplicitCastExpr 0x55dc7db07810 <col:10> 'unsigned int' <LValueToRValue>
|         |   | `-DeclRefExpr 0x55dc7db077c8 <col:10> 'unsigned int' lvalue ParmVar 0x55dc7dafdea0 'x' 'unsigned int'
|         |   `-IntegerLiteral 0x55dc7db077f0 <col:15> 'unsigned int' 0
|         `-ParenExpr 0x55dc7db07a00 <col:22, col:42> 'int'
|           `-BinaryOperator 0x55dc7db079d8 <col:23, col:40> 'int' '=='
|             |-ParenExpr 0x55dc7db07998 <col:23, col:35> 'unsigned int'
|             | `-BinaryOperator 0x55dc7db07970 <col:24, col:34> 'unsigned int' '&'
|             |   |-ImplicitCastExpr 0x55dc7db07958 <col:24> 'unsigned int' <LValueToRValue>
|             |   | `-DeclRefExpr 0x55dc7db07870 <col:24> 'unsigned int' lvalue ParmVar 0x55dc7dafdea0 'x' 'unsigned int'
|             |   `-ParenExpr 0x55dc7db07938 <col:28, col:34> 'unsigned int'
|             |     `-BinaryOperator 0x55dc7db07910 <col:29, col:33> 'unsigned int' '-'
|             |       |-ImplicitCastExpr 0x55dc7db078e0 <col:29> 'unsigned int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x55dc7db07898 <col:29> 'unsigned int' lvalue ParmVar 0x55dc7dafdea0 'x' 'unsigned int'
|             |       `-ImplicitCastExpr 0x55dc7db078f8 <col:33> 'unsigned int' <IntegralCast>
|             |         `-IntegerLiteral 0x55dc7db078c0 <col:33> 'int' 1
|             `-IntegerLiteral 0x55dc7db079b8 <col:40> 'unsigned int' 0
|-FunctionDecl 0x55dc7db07c60 <line:118:1, line:134:1> line:118:21 arithmetic_shift_right 's64_t (s64_t, u8_t)' static inline
| |-ParmVarDecl 0x55dc7db07ac0 <col:44, col:50> col:50 used value 's64_t':'long long'
| |-ParmVarDecl 0x55dc7db07b50 <col:57, col:62> col:62 used shift 'u8_t':'unsigned char'
| `-CompoundStmt 0x55dc7db08378 <line:119:1, line:134:1>
|   |-DeclStmt 0x55dc7db07d80 <line:120:2, col:16>
|   | `-VarDecl 0x55dc7db07d20 <col:2, col:8> col:8 used sign_ext 's64_t':'long long'
|   |-IfStmt 0x55dc7db07ea8 <line:122:2, line:124:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55dc7db07e10 <line:122:6, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x55dc7db07df8 <col:6> 'unsigned int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x55dc7db07de0 <col:6> 'u8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dc7db07d98 <col:6> 'u8_t':'unsigned char' lvalue ParmVar 0x55dc7db07b50 'shift' 'u8_t':'unsigned char'
|   | | `-IntegerLiteral 0x55dc7db07dc0 <col:15> 'unsigned int' 0
|   | |-CompoundStmt 0x55dc7db07e90 <col:19, line:124:2>
|   | | `-ReturnStmt 0x55dc7db07e78 <line:123:3, col:10>
|   | |   `-ImplicitCastExpr 0x55dc7db07e60 <col:10> 's64_t':'long long' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55dc7db07e38 <col:10> 's64_t':'long long' lvalue ParmVar 0x55dc7db07ac0 'value' 's64_t':'long long'
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x55dc7db08010 <line:127:2, col:29> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x55dc7db07ee0 <col:2> 's64_t':'long long' lvalue Var 0x55dc7db07d20 'sign_ext' 's64_t':'long long'
|   | `-BinaryOperator 0x55dc7db07fe8 <col:13, col:29> 'long long' '&'
|   |   |-ParenExpr 0x55dc7db07f90 <col:13, col:25> 's64_t':'long long'
|   |   | `-BinaryOperator 0x55dc7db07f68 <col:14, col:23> 's64_t':'long long' '>>'
|   |   |   |-ImplicitCastExpr 0x55dc7db07f50 <col:14> 's64_t':'long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x55dc7db07f08 <col:14> 's64_t':'long long' lvalue ParmVar 0x55dc7db07ac0 'value' 's64_t':'long long'
|   |   |   `-IntegerLiteral 0x55dc7db07f30 <col:23> 'int' 63
|   |   `-ImplicitCastExpr 0x55dc7db07fd0 <col:29> 'long long' <IntegralCast>
|   |     `-IntegerLiteral 0x55dc7db07fb0 <col:29> 'int' 1
|   |-BinaryOperator 0x55dc7db080c0 <line:130:2, col:14> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x55dc7db08038 <col:2> 's64_t':'long long' lvalue Var 0x55dc7db07d20 'sign_ext' 's64_t':'long long'
|   | `-UnaryOperator 0x55dc7db080a0 <col:13, col:14> 's64_t':'long long' prefix '-'
|   |   `-ImplicitCastExpr 0x55dc7db08088 <col:14> 's64_t':'long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dc7db08060 <col:14> 's64_t':'long long' lvalue Var 0x55dc7db07d20 'sign_ext' 's64_t':'long long'
|   `-ReturnStmt 0x55dc7db08338 <line:133:2, col:53>
|     `-BinaryOperator 0x55dc7db08310 <col:9, col:53> 'long long' '|'
|       |-ParenExpr 0x55dc7db081a8 <col:9, col:24> 's64_t':'long long'
|       | `-BinaryOperator 0x55dc7db08180 <col:10, col:19> 's64_t':'long long' '>>'
|       |   |-ImplicitCastExpr 0x55dc7db08138 <col:10> 's64_t':'long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x55dc7db080e8 <col:10> 's64_t':'long long' lvalue ParmVar 0x55dc7db07ac0 'value' 's64_t':'long long'
|       |   `-ImplicitCastExpr 0x55dc7db08168 <col:19> 'int' <IntegralCast>
|       |     `-ImplicitCastExpr 0x55dc7db08150 <col:19> 'u8_t':'unsigned char' <LValueToRValue>
|       |       `-DeclRefExpr 0x55dc7db08110 <col:19> 'u8_t':'unsigned char' lvalue ParmVar 0x55dc7db07b50 'shift' 'u8_t':'unsigned char'
|       `-ParenExpr 0x55dc7db082f0 <col:28, col:53> 's64_t':'long long'
|         `-BinaryOperator 0x55dc7db082c8 <col:29, col:52> 's64_t':'long long' '<<'
|           |-ImplicitCastExpr 0x55dc7db082b0 <col:29> 's64_t':'long long' <LValueToRValue>
|           | `-DeclRefExpr 0x55dc7db081c8 <col:29> 's64_t':'long long' lvalue Var 0x55dc7db07d20 'sign_ext' 's64_t':'long long'
|           `-ParenExpr 0x55dc7db08290 <col:41, col:52> 'int'
|             `-BinaryOperator 0x55dc7db08268 <col:42, col:47> 'int' '-'
|               |-IntegerLiteral 0x55dc7db081f0 <col:42> 'int' 64
|               `-ImplicitCastExpr 0x55dc7db08250 <col:47> 'int' <IntegralCast>
|                 `-ImplicitCastExpr 0x55dc7db08238 <col:47> 'u8_t':'unsigned char' <LValueToRValue>
|                   `-DeclRefExpr 0x55dc7db08210 <col:47> 'u8_t':'unsigned char' lvalue ParmVar 0x55dc7db07b50 'shift' 'u8_t':'unsigned char'
|-FunctionDecl 0x55dc7db085a8 <line:144:1, col:29> col:5 char2hex 'int (char, u8_t *)'
| |-ParmVarDecl 0x55dc7db083c0 <col:14, col:19> col:19 c 'char'
| |-ParmVarDecl 0x55dc7db08488 <col:22, col:28> col:28 x 'u8_t *'
| `-FullComment 0x55dc7dbe2220 <line:137:3, line:142:63>
|   |-ParagraphComment 0x55dc7dbdfe50 <line:137:3>
|   | `-TextComment 0x55dc7dbdfe20 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dbdfe70 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x55dc7dbdfed0 <col:10, col:68>
|   |   `-TextComment 0x55dc7dbdfea0 <col:10, col:68> Text="      Convert a single character into a hexadecimal nibble."
|   |-ParagraphComment 0x55dc7dbdff20 <line:139:3>
|   | `-TextComment 0x55dc7dbdfef0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdff40 <col:4, line:140:3> [in] explicitly Param="c" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbe2040 <line:139:17, line:140:3>
|   |   |-TextComment 0x55dc7dbdffa0 <line:139:17, col:45> Text="     The character to convert"
|   |   `-TextComment 0x55dc7dbdffc0 <line:140:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe2060 <col:4, col:69> [in] implicitly Param="x" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dbe20f0 <col:17, col:69>
|   |   `-TextComment 0x55dc7dbe20c0 <col:17, col:69> Text="     The address of storage for the converted number."
|   |-ParagraphComment 0x55dc7dbe2140 <line:142:3, col:4>
|   | `-TextComment 0x55dc7dbe2110 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x55dc7dbe2160 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x55dc7dbe21c0 <col:12, col:63>
|       `-TextComment 0x55dc7dbe2190 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x55dc7db08848 <line:154:1, col:29> col:5 hex2char 'int (u8_t, char *)'
| |-ParmVarDecl 0x55dc7db08698 <col:14, col:19> col:19 x 'u8_t':'unsigned char'
| |-ParmVarDecl 0x55dc7db08730 <col:22, col:28> col:28 c 'char *'
| `-FullComment 0x55dc7dbe2640 <line:147:3, line:152:63>
|   |-ParagraphComment 0x55dc7dbe22c0 <line:147:3>
|   | `-TextComment 0x55dc7dbe2290 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dbe22e0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x55dc7dbe2340 <col:10, col:68>
|   |   `-TextComment 0x55dc7dbe2310 <col:10, col:68> Text="      Convert a single hexadecimal nibble into a character."
|   |-ParagraphComment 0x55dc7dbe2390 <line:149:3>
|   | `-TextComment 0x55dc7dbe2360 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe23b0 <col:4, line:150:3> [in] explicitly Param="c" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dbe2460 <line:149:17, line:150:3>
|   |   |-TextComment 0x55dc7dbe2410 <line:149:17, col:42> Text="     The number to convert"
|   |   `-TextComment 0x55dc7dbe2430 <line:150:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe2480 <col:4, col:72> [in] implicitly Param="x" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbe2510 <col:17, col:72>
|   |   `-TextComment 0x55dc7dbe24e0 <col:17, col:72> Text="     The address of storage for the converted character."
|   |-ParagraphComment 0x55dc7dbe2560 <line:152:3, col:4>
|   | `-TextComment 0x55dc7dbe2530 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x55dc7dbe2580 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x55dc7dbe25e0 <col:12, col:63>
|       `-TextComment 0x55dc7dbe25b0 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x55dc7db08c50 <line:166:1, col:72> col:8 bin2hex 'size_t (const u8_t *, size_t, char *, size_t)'
| |-ParmVarDecl 0x55dc7db089b8 <col:16, col:28> col:28 buf 'const u8_t *'
| |-ParmVarDecl 0x55dc7db08a28 <col:33, col:40> col:40 buflen 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7db08aa0 <col:48, col:54> col:54 hex 'char *'
| |-ParmVarDecl 0x55dc7db08b10 <col:59, col:66> col:66 hexlen 'size_t':'unsigned long'
| `-FullComment 0x55dc7dbe2c10 <line:157:3, line:164:77>
|   |-ParagraphComment 0x55dc7dbe26e0 <line:157:3>
|   | `-TextComment 0x55dc7dbe26b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dbe2700 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x55dc7dbe2760 <col:10, col:65>
|   |   `-TextComment 0x55dc7dbe2730 <col:10, col:65> Text="      Convert a binary array into string representation."
|   |-ParagraphComment 0x55dc7dbe27b0 <line:159:3>
|   | `-TextComment 0x55dc7dbe2780 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe27d0 <col:4, line:160:3> [in] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbe2880 <line:159:19, line:160:3>
|   |   |-TextComment 0x55dc7dbe2830 <line:159:19, col:50> Text="     The binary array to convert"
|   |   `-TextComment 0x55dc7dbe2850 <line:160:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe28a0 <col:4, line:161:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dbe2950 <line:160:22, line:161:3>
|   |   |-TextComment 0x55dc7dbe2900 <line:160:22, col:64> Text="  The length of the binary array to convert"
|   |   `-TextComment 0x55dc7dbe2920 <line:161:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe2970 <col:4, line:162:3> [out] explicitly Param="hex" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dbe2a20 <line:161:19, line:162:3>
|   |   |-TextComment 0x55dc7dbe29d0 <line:161:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x55dc7dbe29f0 <line:162:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe2a40 <col:4, col:74> [in] explicitly Param="hexlen" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dbe2ad0 <col:22, col:74>
|   |   `-TextComment 0x55dc7dbe2aa0 <col:22, col:74> Text="  Size of the storage area for string representation."
|   |-ParagraphComment 0x55dc7dbe2b20 <line:164:3>
|   | `-TextComment 0x55dc7dbe2af0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dbe2b40 <col:4, col:77> Name="return"
|     `-ParagraphComment 0x55dc7dbe2ba0 <col:11, col:77>
|       `-TextComment 0x55dc7dbe2b70 <col:11, col:77> Text="     The length of the converted string, or 0 if an error occurred."
|-FunctionDecl 0x55dc7db08fe0 <line:184:1, col:72> col:8 hex2bin 'size_t (const char *, size_t, u8_t *, size_t)'
| |-ParmVarDecl 0x55dc7db08d50 <col:16, col:28> col:28 hex 'const char *'
| |-ParmVarDecl 0x55dc7db08dc0 <col:33, col:40> col:40 hexlen 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7db08e30 <col:48, col:54> col:54 buf 'u8_t *'
| |-ParmVarDecl 0x55dc7db08ea0 <col:59, col:66> col:66 buflen 'size_t':'unsigned long'
| `-FullComment 0x55dc7dbe31e0 <line:175:3, line:182:74>
|   |-ParagraphComment 0x55dc7dbe2cb0 <line:175:3>
|   | `-TextComment 0x55dc7dbe2c80 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dbe2cd0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x55dc7dbe2d30 <col:10, col:64>
|   |   `-TextComment 0x55dc7dbe2d00 <col:10, col:64> Text="      Convert a hexadecimal string into a binary array."
|   |-ParagraphComment 0x55dc7dbe2d80 <line:177:3>
|   | `-TextComment 0x55dc7dbe2d50 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe2da0 <col:4, line:178:3> [in] explicitly Param="hex" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbe2e50 <line:177:19, line:178:3>
|   |   |-TextComment 0x55dc7dbe2e00 <line:177:19, col:56> Text="     The hexadecimal string to convert"
|   |   `-TextComment 0x55dc7dbe2e20 <line:178:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe2e70 <col:4, line:179:3> [in] explicitly Param="hexlen" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dbe2f20 <line:178:22, line:179:3>
|   |   |-TextComment 0x55dc7dbe2ed0 <line:178:22, col:71> Text="  The length of the hexadecimal string to convert."
|   |   `-TextComment 0x55dc7dbe2ef0 <line:179:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe2f40 <col:4, line:180:3> [out] explicitly Param="buf" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dbe2ff0 <line:179:19, line:180:3>
|   |   |-TextComment 0x55dc7dbe2fa0 <line:179:19, col:64> Text="     Address of where to store the binary data"
|   |   `-TextComment 0x55dc7dbe2fc0 <line:180:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe3010 <col:4, col:63> [in] explicitly Param="buflen" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dbe30a0 <col:22, col:63>
|   |   `-TextComment 0x55dc7dbe3070 <col:22, col:63> Text="  Size of the storage area for binary data"
|   |-ParagraphComment 0x55dc7dbe30f0 <line:182:3>
|   | `-TextComment 0x55dc7dbe30c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dbe3110 <col:4, col:74> Name="return"
|     `-ParagraphComment 0x55dc7dbe3170 <col:11, col:74>
|       `-TextComment 0x55dc7dbe3140 <col:11, col:74> Text="     The length of the binary array , or 0 if an error occurred."
|-FunctionDecl 0x55dc7db092f0 <line:199:1, col:50> col:6 u8_to_dec 'u8_t (char *, u8_t, u8_t)'
| |-ParmVarDecl 0x55dc7db090e0 <col:16, col:22> col:22 buf 'char *'
| |-ParmVarDecl 0x55dc7db09150 <col:27, col:32> col:32 buflen 'u8_t':'unsigned char'
| |-ParmVarDecl 0x55dc7db091c0 <col:40, col:45> col:45 value 'u8_t':'unsigned char'
| `-FullComment 0x55dc7dbe3770 <line:187:3, line:197:47>
|   |-ParagraphComment 0x55dc7dbe3280 <line:187:3>
|   | `-TextComment 0x55dc7dbe3250 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dbe32a0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x55dc7dbe3300 <col:10, col:65>
|   |   `-TextComment 0x55dc7dbe32d0 <col:10, col:65> Text="      Convert a u8_t into decimal string representation."
|   |-ParagraphComment 0x55dc7dbe3370 <line:189:3, line:190:60>
|   | |-TextComment 0x55dc7dbe3320 <line:189:3, col:65> Text=" Convert a u8_t value into ASCII decimal string representation."
|   | `-TextComment 0x55dc7dbe3340 <line:190:3, col:60> Text=" The string is terminated if there is enough space in buf."
|   |-ParagraphComment 0x55dc7dbe33c0 <line:192:3>
|   | `-TextComment 0x55dc7dbe3390 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe33e0 <col:4, line:193:3> [out] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbe3490 <line:192:19, line:193:3>
|   |   |-TextComment 0x55dc7dbe3440 <line:192:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x55dc7dbe3460 <line:193:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe34b0 <col:4, line:194:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dbe3560 <line:193:22, line:194:3>
|   |   |-TextComment 0x55dc7dbe3510 <line:193:22, col:74> Text="  Size of the storage area for string representation."
|   |   `-TextComment 0x55dc7dbe3530 <line:194:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe3580 <col:4, col:61> [in] explicitly Param="value" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dbe3610 <col:21, col:61>
|   |   `-TextComment 0x55dc7dbe35e0 <col:21, col:61> Text="   The value to convert to decimal string"
|   |-ParagraphComment 0x55dc7dbe3660 <line:196:3>
|   | `-TextComment 0x55dc7dbe3630 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dbe3680 <col:4, line:197:47> Name="return"
|     `-ParagraphComment 0x55dc7dbe3700 <line:196:11, line:197:47>
|       |-TextComment 0x55dc7dbe36b0 <line:196:11, col:74> Text="     The length of the converted string (excluding terminator if"
|       `-TextComment 0x55dc7dbe36d0 <line:197:3, col:47> Text="             any), or 0 if an error occurred."
|-RecordDecl 0x55dc7db096a8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:31:1, line:40:1> line:31:8 struct _dnode definition
| |-RecordDecl 0x55dc7db3df60 <line:32:2, line:35:2> line:32:2 union definition
| | |-FieldDecl 0x55dc7db3e0c0 <line:33:3, col:18> col:18 referenced head 'struct _dnode *'
| | `-FieldDecl 0x55dc7db3e130 <line:34:3, col:18> col:18 referenced next 'struct _dnode *'
| |-FieldDecl 0x55dc7db3e1d0 <line:32:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| |-IndirectFieldDecl 0x55dc7db3e228 <line:33:18> col:18 implicit head 'struct _dnode *'
| | |-Field 0x55dc7db3e1d0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x55dc7db3e0c0 'head' 'struct _dnode *'
| |-IndirectFieldDecl 0x55dc7db3e278 <line:34:18> col:18 implicit next 'struct _dnode *'
| | |-Field 0x55dc7db3e1d0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x55dc7db3e130 'next' 'struct _dnode *'
| |-RecordDecl 0x55dc7db3e2b8 <line:36:2, line:39:2> line:36:2 union definition
| | |-FieldDecl 0x55dc7db3e388 <line:37:3, col:18> col:18 referenced tail 'struct _dnode *'
| | `-FieldDecl 0x55dc7db3e3f8 <line:38:3, col:18> col:18 referenced prev 'struct _dnode *'
| |-FieldDecl 0x55dc7db3e490 <line:36:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| |-IndirectFieldDecl 0x55dc7db3e4e8 <line:37:18> col:18 implicit tail 'struct _dnode *'
| | |-Field 0x55dc7db3e490 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| | `-Field 0x55dc7db3e388 'tail' 'struct _dnode *'
| `-IndirectFieldDecl 0x55dc7db3e538 <line:38:18> col:18 implicit prev 'struct _dnode *'
|   |-Field 0x55dc7db3e490 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
|   `-Field 0x55dc7db3e3f8 'prev' 'struct _dnode *'
|-TypedefDecl 0x55dc7db3e5e8 <line:42:1, col:23> col:23 referenced sys_dlist_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x55dc7db3e010 'struct _dnode' sugar
|   `-RecordType 0x55dc7db3df40 'struct _dnode'
|     `-Record 0x55dc7db096a8 '_dnode'
|-TypedefDecl 0x55dc7db3e660 <line:43:1, col:23> col:23 referenced sys_dnode_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x55dc7db3e010 'struct _dnode' sugar
|   `-RecordType 0x55dc7db3df40 'struct _dnode'
|     `-Record 0x55dc7db096a8 '_dnode'
|-FunctionDecl 0x55dc7db3e940 <line:192:1, line:196:1> line:192:20 sys_dlist_init 'void (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55dc7db3e838 <col:35, col:48> col:48 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55dc7db3ed38 <line:193:1, line:196:1>
| | |-BinaryOperator 0x55dc7db3eb78 <line:194:2, col:30> 'struct _dnode *' '='
| | | |-MemberExpr 0x55dc7db3ea78 <col:2, col:8> 'struct _dnode *' lvalue .head 0x55dc7db3e0c0
| | | | `-MemberExpr 0x55dc7db3ea28 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| | | |   `-ImplicitCastExpr 0x55dc7db3ea10 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55dc7db3e9e8 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db3e838 'list' 'sys_dlist_t *'
| | | `-CStyleCastExpr 0x55dc7db3eb50 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| | |   `-ImplicitCastExpr 0x55dc7db3eb38 <col:30> 'sys_dlist_t *' <LValueToRValue>
| | |     `-DeclRefExpr 0x55dc7db3ead0 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db3e838 'list' 'sys_dlist_t *'
| | `-BinaryOperator 0x55dc7db3ece0 <line:195:2, col:30> 'struct _dnode *' '='
| |   |-MemberExpr 0x55dc7db3ec30 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x55dc7db3e388
| |   | `-MemberExpr 0x55dc7db3ebe0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| |   |   `-ImplicitCastExpr 0x55dc7db3ebc8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55dc7db3eba0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db3e838 'list' 'sys_dlist_t *'
| |   `-CStyleCastExpr 0x55dc7db3ecb8 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| |     `-ImplicitCastExpr 0x55dc7db3eca0 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x55dc7db3ec68 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db3e838 'list' 'sys_dlist_t *'
| `-FullComment 0x55dc7dbe3ab0 <line:185:3, line:189:14>
|   |-ParagraphComment 0x55dc7dbe3810 <line:185:3>
|   | `-TextComment 0x55dc7dbe37e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dbe3830 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55dc7dbe3890 <col:10, col:44>
|   |   `-TextComment 0x55dc7dbe3860 <col:10, col:44> Text=" initialize list to its empty state"
|   |-ParagraphComment 0x55dc7dbe38e0 <line:187:3>
|   | `-TextComment 0x55dc7dbe38b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe3900 <col:4, col:37> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbe3990 <col:15, col:37>
|   |   `-TextComment 0x55dc7dbe3960 <col:15, col:37> Text=" the doubly-linked list"
|   |-ParagraphComment 0x55dc7dbe39e0 <line:189:3>
|   | `-TextComment 0x55dc7dbe39b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dbe3a00 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dbe3a60 <col:11, col:14>
|       `-TextComment 0x55dc7dbe3a30 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7db3ee30 <line:208:1, line:212:1> line:208:20 used sys_dnode_init 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db3ed68 <col:35, col:48> col:48 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55dc7db42848 <line:209:1, line:212:1>
| | |-BinaryOperator 0x55dc7db42670 <line:210:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| | | |-MemberExpr 0x55dc7db425a0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:210:2, col:8> 'struct _dnode *' lvalue .next 0x55dc7db3e130
| | | | `-MemberExpr 0x55dc7db42550 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| | | |   `-ImplicitCastExpr 0x55dc7db3ef00 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55dc7db3eed8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db3ed68 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55dc7db42658 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| | |   `-ParenExpr 0x55dc7db42638 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x55dc7db42610 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x55dc7db425d8 <col:23> 'int' 0
| | `-BinaryOperator 0x55dc7db427f8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| |   |-MemberExpr 0x55dc7db42728 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, col:8> 'struct _dnode *' lvalue .prev 0x55dc7db3e3f8
| |   | `-MemberExpr 0x55dc7db426d8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| |   |   `-ImplicitCastExpr 0x55dc7db426c0 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55dc7db42698 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db3ed68 'node' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x55dc7db427e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     `-ParenExpr 0x55dc7db427c0 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x55dc7db42798 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x55dc7db42760 <col:23> 'int' 0
| `-FullComment 0x55dc7dbe3df0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:201:3, line:205:14>
|   |-ParagraphComment 0x55dc7dbe3b50 <line:201:3>
|   | `-TextComment 0x55dc7dbe3b20 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dbe3b70 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x55dc7dbe3bd0 <col:10, col:57>
|   |   `-TextComment 0x55dc7dbe3ba0 <col:10, col:57> Text=" initialize node to its state when not in a list"
|   |-ParagraphComment 0x55dc7dbe3c20 <line:203:3>
|   | `-TextComment 0x55dc7dbe3bf0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe3c40 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbe3cd0 <col:15, col:23>
|   |   `-TextComment 0x55dc7dbe3ca0 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x55dc7dbe3d20 <line:205:3>
|   | `-TextComment 0x55dc7dbe3cf0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dbe3d40 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dbe3da0 <col:11, col:14>
|       `-TextComment 0x55dc7dbe3d70 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7db429e0 <line:222:1, line:225:1> line:222:20 sys_dnode_is_linked 'bool (const sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db428d8 <col:40, col:59> col:59 used node 'const sys_dnode_t *'
| |-CompoundStmt 0x55dc7db42c88 <line:223:1, line:225:1>
| | `-ReturnStmt 0x55dc7db42c40 <line:224:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ImplicitCastExpr 0x55dc7db42c28 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55dc7db42c00 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       |-ImplicitCastExpr 0x55dc7db42bd0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x55dc7db42b18 <col:9, col:15> 'struct _dnode *const' lvalue .next 0x55dc7db3e130
| |       |   `-MemberExpr 0x55dc7db42ac8 <col:9, col:15> 'const union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| |       |     `-ImplicitCastExpr 0x55dc7db42ab0 <col:9> 'const sys_dnode_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x55dc7db42a88 <col:9> 'const sys_dnode_t *' lvalue ParmVar 0x55dc7db428d8 'node' 'const sys_dnode_t *'
| |       `-ImplicitCastExpr 0x55dc7db42be8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <BitCast>
| |         `-ParenExpr 0x55dc7db42bb0 <col:14, col:24> 'void *'
| |           `-CStyleCastExpr 0x55dc7db42b88 <col:15, col:23> 'void *' <NullToPointer>
| |             `-IntegerLiteral 0x55dc7db42b50 <col:23> 'int' 0
| `-FullComment 0x55dc7dc99850 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:215:3, line:219:65>
|   |-ParagraphComment 0x55dc7dbe3e90 <line:215:3>
|   | `-TextComment 0x55dc7dbe3e60 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dbe3eb0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dbe3f10 <col:10, col:49>
|   |   `-TextComment 0x55dc7dbe3ee0 <col:10, col:49> Text=" check if a node is a member of any list"
|   |-ParagraphComment 0x55dc7dbe3f60 <line:217:3>
|   | `-TextComment 0x55dc7dbe3f30 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbe3f80 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbe4010 <col:15, col:23>
|   |   `-TextComment 0x55dc7dbe3fe0 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x55dc7dc99780 <line:219:3>
|   | `-TextComment 0x55dc7dc99750 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc997a0 <col:4, col:65> Name="return"
|     `-ParagraphComment 0x55dc7dc99800 <col:11, col:65>
|       `-TextComment 0x55dc7dc997d0 <col:11, col:65> Text=" true if node is linked into a list, false if it is not"
|-FunctionDecl 0x55dc7db42e30 <line:236:1, line:239:1> line:236:20 sys_dlist_is_head 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db42cb0 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55dc7db42d20 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55dc7db43088 <line:237:1, line:239:1>
| | `-ReturnStmt 0x55dc7db43040 <line:238:2, col:23>
| |   `-ImplicitCastExpr 0x55dc7db43028 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55dc7db43000 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x55dc7db42fd0 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x55dc7db42f70 <col:9, col:15> 'struct _dnode *' lvalue .head 0x55dc7db3e0c0
| |       |   `-MemberExpr 0x55dc7db42f20 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| |       |     `-ImplicitCastExpr 0x55dc7db42f08 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x55dc7db42ee0 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db42cb0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x55dc7db42fe8 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55dc7db42fa8 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db42d20 'node' 'sys_dnode_t *'
| `-FullComment 0x55dc7dc99c70 <line:228:3, line:233:52>
|   |-ParagraphComment 0x55dc7dc998f0 <line:228:3>
|   | `-TextComment 0x55dc7dc998c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc99910 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55dc7dc99970 <col:10, col:44>
|   |   `-TextComment 0x55dc7dc99940 <col:10, col:44> Text=" check if a node is the list's head"
|   |-ParagraphComment 0x55dc7dc999c0 <line:230:3>
|   | `-TextComment 0x55dc7dc99990 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc999e0 <col:4, line:231:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc99a90 <line:230:15, line:231:3>
|   |   |-TextComment 0x55dc7dc99a40 <line:230:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55dc7dc99a60 <line:231:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc99ab0 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dc99b40 <col:15, col:32>
|   |   `-TextComment 0x55dc7dc99b10 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x55dc7dc99b90 <line:233:3>
|   | `-TextComment 0x55dc7dc99b60 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc99bb0 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x55dc7dc99c10 <col:11, col:52>
|       `-TextComment 0x55dc7dc99be0 <col:11, col:52> Text=" true if node is the head, false otherwise"
|-FunctionDecl 0x55dc7db431b0 <line:250:1, line:253:1> line:250:20 sys_dlist_is_tail 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db430b0 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55dc7db43120 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55dc7db43408 <line:251:1, line:253:1>
| | `-ReturnStmt 0x55dc7db433c0 <line:252:2, col:23>
| |   `-ImplicitCastExpr 0x55dc7db433a8 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55dc7db43380 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x55dc7db43350 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x55dc7db432f0 <col:9, col:15> 'struct _dnode *' lvalue .tail 0x55dc7db3e388
| |       |   `-MemberExpr 0x55dc7db432a0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| |       |     `-ImplicitCastExpr 0x55dc7db43288 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x55dc7db43260 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db430b0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x55dc7db43368 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55dc7db43328 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db43120 'node' 'sys_dnode_t *'
| `-FullComment 0x55dc7dc9a090 <line:242:3, line:247:52>
|   |-ParagraphComment 0x55dc7dc99d10 <line:242:3>
|   | `-TextComment 0x55dc7dc99ce0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc99d30 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55dc7dc99d90 <col:10, col:44>
|   |   `-TextComment 0x55dc7dc99d60 <col:10, col:44> Text=" check if a node is the list's tail"
|   |-ParagraphComment 0x55dc7dc99de0 <line:244:3>
|   | `-TextComment 0x55dc7dc99db0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc99e00 <col:4, line:245:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc99eb0 <line:244:15, line:245:3>
|   |   |-TextComment 0x55dc7dc99e60 <line:244:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55dc7dc99e80 <line:245:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc99ed0 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dc99f60 <col:15, col:32>
|   |   `-TextComment 0x55dc7dc99f30 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x55dc7dc99fb0 <line:247:3>
|   | `-TextComment 0x55dc7dc99f80 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc99fd0 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x55dc7dc9a030 <col:11, col:52>
|       `-TextComment 0x55dc7dc9a000 <col:11, col:52> Text=" true if node is the tail, false otherwise"
|-FunctionDecl 0x55dc7db43970 <line:263:1, line:266:1> line:263:20 used sys_dlist_is_empty 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55dc7db43430 <col:39, col:52> col:52 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55dc7db43bb8 <line:264:1, line:266:1>
| | `-ReturnStmt 0x55dc7db43b78 <line:265:2, col:23>
| |   `-ImplicitCastExpr 0x55dc7db43b60 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55dc7db43b38 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x55dc7db43b08 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x55dc7db43aa8 <col:9, col:15> 'struct _dnode *' lvalue .head 0x55dc7db3e0c0
| |       |   `-MemberExpr 0x55dc7db43a58 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| |       |     `-ImplicitCastExpr 0x55dc7db43a40 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x55dc7db43a18 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db43430 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x55dc7db43b20 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55dc7db43ae0 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db43430 'list' 'sys_dlist_t *'
| `-FullComment 0x55dc7dc9a3d0 <line:256:3, line:260:41>
|   |-ParagraphComment 0x55dc7dc9a130 <line:256:3>
|   | `-TextComment 0x55dc7dc9a100 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9a150 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9a1b0 <col:10, col:36>
|   |   `-TextComment 0x55dc7dc9a180 <col:10, col:36> Text=" check if the list is empty"
|   |-ParagraphComment 0x55dc7dc9a200 <line:258:3>
|   | `-TextComment 0x55dc7dc9a1d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9a220 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9a2b0 <col:15, col:51>
|   |   `-TextComment 0x55dc7dc9a280 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55dc7dc9a300 <line:260:3>
|   | `-TextComment 0x55dc7dc9a2d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9a320 <col:4, col:41> Name="return"
|     `-ParagraphComment 0x55dc7dc9a380 <col:11, col:41>
|       `-TextComment 0x55dc7dc9a350 <col:11, col:41> Text=" true if empty, false otherwise"
|-FunctionDecl 0x55dc7db43c68 <line:278:1, line:281:1> line:278:20 sys_dlist_has_multiple_nodes 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55dc7db43be0 <col:49, col:62> col:62 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55dc7db43f58 <line:279:1, line:281:1>
| | `-ReturnStmt 0x55dc7db43f10 <line:280:2, col:29>
| |   `-ImplicitCastExpr 0x55dc7db43ef8 <col:9, col:29> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55dc7db43ed0 <col:9, col:29> 'int' '!='
| |       |-ImplicitCastExpr 0x55dc7db43ea0 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x55dc7db43da0 <col:9, col:15> 'struct _dnode *' lvalue .head 0x55dc7db3e0c0
| |       |   `-MemberExpr 0x55dc7db43d50 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| |       |     `-ImplicitCastExpr 0x55dc7db43d38 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x55dc7db43d10 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db43be0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x55dc7db43eb8 <col:23, col:29> 'struct _dnode *' <LValueToRValue>
| |         `-MemberExpr 0x55dc7db43e68 <col:23, col:29> 'struct _dnode *' lvalue .tail 0x55dc7db3e388
| |           `-MemberExpr 0x55dc7db43e18 <col:23, col:29> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| |             `-ImplicitCastExpr 0x55dc7db43e00 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |               `-DeclRefExpr 0x55dc7db43dd8 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db43be0 'list' 'sys_dlist_t *'
| `-FullComment 0x55dc7dc9a770 <line:269:3, line:275:50>
|   |-ParagraphComment 0x55dc7dc9a470 <line:269:3>
|   | `-TextComment 0x55dc7dc9a440 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9a490 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9a4f0 <col:10, col:45>
|   |   `-TextComment 0x55dc7dc9a4c0 <col:10, col:45> Text=" check if more than one node present"
|   |-ParagraphComment 0x55dc7dc9a540 <line:271:3, col:62>
|   | `-TextComment 0x55dc7dc9a510 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dc9a590 <line:273:3>
|   | `-TextComment 0x55dc7dc9a560 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9a5b0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9a640 <col:15, col:51>
|   |   `-TextComment 0x55dc7dc9a610 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55dc7dc9a690 <line:275:3>
|   | `-TextComment 0x55dc7dc9a660 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9a6b0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x55dc7dc9a710 <col:11, col:50>
|       `-TextComment 0x55dc7dc9a6e0 <col:11, col:50> Text=" true if multiple nodes, false otherwise"
|-FunctionDecl 0x55dc7db44080 <line:291:1, line:294:1> line:291:28 used sys_dlist_peek_head 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55dc7db43f80 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55dc7db44438 <line:292:1, line:294:1>
| | `-ReturnStmt 0x55dc7db443f8 <line:293:2, col:49>
| |   `-ConditionalOperator 0x55dc7db443c8 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x55dc7db44380 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x55dc7db441f0 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x55dc7db441d8 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x55dc7db44128 <col:9> 'bool (sys_dlist_t *)' Function 0x55dc7db43970 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x55dc7db44220 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x55dc7db44150 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db43f80 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x55dc7db443b0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x55dc7db44298 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x55dc7db44270 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x55dc7db44238 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x55dc7db44398 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:293:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x55dc7db44348 <col:43, col:49> 'struct _dnode *' lvalue .head 0x55dc7db3e0c0
| |         `-MemberExpr 0x55dc7db442f8 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| |           `-ImplicitCastExpr 0x55dc7db442e0 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x55dc7db442b8 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db43f80 'list' 'sys_dlist_t *'
| `-FullComment 0x55dc7dc9aab0 <line:284:3, line:288:63>
|   |-ParagraphComment 0x55dc7dc9a810 <line:284:3>
|   | `-TextComment 0x55dc7dc9a7e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9a830 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9a890 <col:10, col:54>
|   |   `-TextComment 0x55dc7dc9a860 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x55dc7dc9a8e0 <line:286:3>
|   | `-TextComment 0x55dc7dc9a8b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9a900 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9a990 <col:15, col:51>
|   |   `-TextComment 0x55dc7dc9a960 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55dc7dc9a9e0 <line:288:3>
|   | `-TextComment 0x55dc7dc9a9b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9aa00 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x55dc7dc9aa60 <col:11, col:63>
|       `-TextComment 0x55dc7dc9aa30 <col:11, col:63> Text=" a pointer to the head element, NULL if list is empty"
|-FunctionDecl 0x55dc7db444e8 <line:306:1, line:309:1> line:306:28 sys_dlist_peek_head_not_empty 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55dc7db44460 <col:58, col:71> col:71 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55dc7db446b8 <line:307:1, line:309:1>
| | `-ReturnStmt 0x55dc7db44670 <line:308:2, col:15>
| |   `-ImplicitCastExpr 0x55dc7db44658 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |     `-MemberExpr 0x55dc7db44620 <col:9, col:15> 'struct _dnode *' lvalue .head 0x55dc7db3e0c0
| |       `-MemberExpr 0x55dc7db445d0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| |         `-ImplicitCastExpr 0x55dc7db445b8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |           `-DeclRefExpr 0x55dc7db44590 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db44460 'list' 'sys_dlist_t *'
| `-FullComment 0x55dc7dc9ae50 <line:297:3, line:303:40>
|   |-ParagraphComment 0x55dc7dc9ab50 <line:297:3>
|   | `-TextComment 0x55dc7dc9ab20 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9ab70 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9abd0 <col:10, col:54>
|   |   `-TextComment 0x55dc7dc9aba0 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x55dc7dc9ac20 <line:299:3, col:42>
|   | `-TextComment 0x55dc7dc9abf0 <col:3, col:42> Text=" The list must be known to be non-empty."
|   |-ParagraphComment 0x55dc7dc9ac70 <line:301:3>
|   | `-TextComment 0x55dc7dc9ac40 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9ac90 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9ad20 <col:15, col:51>
|   |   `-TextComment 0x55dc7dc9acf0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55dc7dc9ad70 <line:303:3>
|   | `-TextComment 0x55dc7dc9ad40 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9ad90 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x55dc7dc9adf0 <col:11, col:40>
|       `-TextComment 0x55dc7dc9adc0 <col:11, col:40> Text=" a pointer to the head element"
|-FunctionDecl 0x55dc7db44860 <line:322:1, line:326:1> line:322:28 used sys_dlist_peek_next_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db446e0 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55dc7db44750 <line:323:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55dc7db46478 <line:324:1, line:326:1>
| | `-ReturnStmt 0x55dc7db46430 <line:325:2, col:45>
| |   `-ConditionalOperator 0x55dc7db46400 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x55dc7db46268 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x55dc7db46240 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x55dc7db46210 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x55dc7db44910 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db44750 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x55dc7db46228 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x55dc7db461d8 <col:18, col:24> 'struct _dnode *' lvalue .tail 0x55dc7db3e388
| |     |       `-MemberExpr 0x55dc7db46188 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| |     |         `-ImplicitCastExpr 0x55dc7db46170 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x55dc7db44938 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db446e0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x55dc7db463e8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x55dc7db462e8 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x55dc7db462c0 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x55dc7db46288 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x55dc7db463d0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:325:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x55dc7db46398 <col:39, col:45> 'struct _dnode *' lvalue .next 0x55dc7db3e130
| |         `-MemberExpr 0x55dc7db46348 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| |           `-ImplicitCastExpr 0x55dc7db46330 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x55dc7db46308 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db44750 'node' 'sys_dnode_t *'
| `-FullComment 0x55dc7dc9b2c0 <line:312:3, line:319:78>
|   |-ParagraphComment 0x55dc7dc9aef0 <line:312:3>
|   | `-TextComment 0x55dc7dc9aec0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9af10 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9af70 <col:10, col:72>
|   |   `-TextComment 0x55dc7dc9af40 <col:10, col:72> Text=" get a reference to the next item in the list, node is not NULL"
|   |-ParagraphComment 0x55dc7dc9afc0 <line:314:3, col:69>
|   | `-TextComment 0x55dc7dc9af90 <col:3, col:69> Text=" Faster than sys_dlist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x55dc7dc9b010 <line:316:3>
|   | `-TextComment 0x55dc7dc9afe0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9b030 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9b0e0 <line:316:15, line:317:3>
|   |   |-TextComment 0x55dc7dc9b090 <line:316:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55dc7dc9b0b0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9b100 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dc9b190 <col:15, col:70>
|   |   `-TextComment 0x55dc7dc9b160 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x55dc7dc9b1e0 <line:319:3>
|   | `-TextComment 0x55dc7dc9b1b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9b200 <col:4, col:78> Name="return"
|     `-ParagraphComment 0x55dc7dc9b260 <col:11, col:78>
|       `-TextComment 0x55dc7dc9b230 <col:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|-FunctionDecl 0x55dc7db465a0 <line:338:1, line:342:1> line:338:28 used sys_dlist_peek_next 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db464a0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55dc7db46510 <line:339:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55dc7db469d8 <line:340:1, line:342:1>
| | `-ReturnStmt 0x55dc7db46990 <line:341:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x55dc7db46960 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x55dc7db46750 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, col:22> 'int'
| |     | `-BinaryOperator 0x55dc7db46728 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x55dc7db466f8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x55dc7db46650 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db46510 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x55dc7db46710 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x55dc7db466d8 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x55dc7db466b0 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x55dc7db46678 <col:23> 'int' 0
| |     |-CallExpr 0x55dc7db46860 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x55dc7db46848 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x55dc7db46770 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x55dc7db44860 'sys_dlist_peek_next_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x55dc7db46898 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x55dc7db46798 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db464a0 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x55dc7db468b0 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x55dc7db467c0 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db46510 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x55dc7db46948 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x55dc7db46928 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x55dc7db46900 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x55dc7db468c8 <col:23> 'int' 0
| `-FullComment 0x55dc7dc9b700 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:329:3, line:335:68>
|   |-ParagraphComment 0x55dc7dc9b360 <line:329:3>
|   | `-TextComment 0x55dc7dc9b330 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9b380 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9b3e0 <col:10, col:54>
|   |   `-TextComment 0x55dc7dc9b3b0 <col:10, col:54> Text=" get a reference to the next item in the list"
|   |-ParagraphComment 0x55dc7dc9b430 <line:331:3>
|   | `-TextComment 0x55dc7dc9b400 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9b450 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9b500 <line:331:15, line:332:3>
|   |   |-TextComment 0x55dc7dc9b4b0 <line:331:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55dc7dc9b4d0 <line:332:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9b520 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dc9b5b0 <col:15, col:70>
|   |   `-TextComment 0x55dc7dc9b580 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x55dc7dc9b600 <line:334:3>
|   | `-TextComment 0x55dc7dc9b5d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9b620 <col:4, line:335:68> Name="return"
|     `-ParagraphComment 0x55dc7dc9b6a0 <line:334:11, line:335:68>
|       |-TextComment 0x55dc7dc9b650 <line:334:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|       `-TextComment 0x55dc7dc9b670 <line:335:3, col:68> Text=" or NULL (when node comes from reading the head of an empty list)."
|-FunctionDecl 0x55dc7db46b00 <line:356:1, line:360:1> line:356:28 used sys_dlist_peek_prev_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db46a00 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55dc7db46a70 <line:357:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55dc7db46f08 <line:358:1, line:360:1>
| | `-ReturnStmt 0x55dc7db46ec0 <line:359:2, col:45>
| |   `-ConditionalOperator 0x55dc7db46e90 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x55dc7db46cf8 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x55dc7db46cd0 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x55dc7db46ca0 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x55dc7db46bb0 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db46a70 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x55dc7db46cb8 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x55dc7db46c68 <col:18, col:24> 'struct _dnode *' lvalue .head 0x55dc7db3e0c0
| |     |       `-MemberExpr 0x55dc7db46c18 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| |     |         `-ImplicitCastExpr 0x55dc7db46c00 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x55dc7db46bd8 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db46a00 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x55dc7db46e78 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x55dc7db46d78 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x55dc7db46d50 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x55dc7db46d18 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x55dc7db46e60 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:359:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x55dc7db46e28 <col:39, col:45> 'struct _dnode *' lvalue .prev 0x55dc7db3e3f8
| |         `-MemberExpr 0x55dc7db46dd8 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| |           `-ImplicitCastExpr 0x55dc7db46dc0 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x55dc7db46d98 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db46a70 'node' 'sys_dnode_t *'
| `-FullComment 0x55dc7dc9bbc0 <line:345:3, line:353:10>
|   |-ParagraphComment 0x55dc7dc9b7d0 <line:345:3>
|   | `-TextComment 0x55dc7dc9b7a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9b7f0 <col:4, col:76> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9b850 <col:10, col:76>
|   |   `-TextComment 0x55dc7dc9b820 <col:10, col:76> Text=" get a reference to the previous item in the list, node is not NULL"
|   |-ParagraphComment 0x55dc7dc9b8a0 <line:347:3, col:69>
|   | `-TextComment 0x55dc7dc9b870 <col:3, col:69> Text=" Faster than sys_dlist_peek_prev() if node is known not to be NULL."
|   |-ParagraphComment 0x55dc7dc9b8f0 <line:349:3>
|   | `-TextComment 0x55dc7dc9b8c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9b910 <col:4, line:350:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9b9c0 <line:349:15, line:350:3>
|   |   |-TextComment 0x55dc7dc9b970 <line:349:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55dc7dc9b990 <line:350:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9b9e0 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dc9ba70 <col:15, col:74>
|   |   `-TextComment 0x55dc7dc9ba40 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x55dc7dc9bac0 <line:352:3>
|   | `-TextComment 0x55dc7dc9ba90 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9bae0 <col:4, line:353:10> Name="return"
|     `-ParagraphComment 0x55dc7dc9bb60 <line:352:11, line:353:10>
|       |-TextComment 0x55dc7dc9bb10 <line:352:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       `-TextComment 0x55dc7dc9bb30 <line:353:3, col:10> Text="	   tail"
|-FunctionDecl 0x55dc7db47030 <line:373:1, line:377:1> line:373:28 sys_dlist_peek_prev 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db46f30 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55dc7db46fa0 <line:374:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55dc7db47418 <line:375:1, line:377:1>
| | `-ReturnStmt 0x55dc7db473d8 <line:376:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x55dc7db473a8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x55dc7db471f8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, col:22> 'int'
| |     | `-BinaryOperator 0x55dc7db471d0 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x55dc7db471a0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x55dc7db470e0 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db46fa0 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x55dc7db471b8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x55dc7db47180 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x55dc7db47140 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x55dc7db47108 <col:23> 'int' 0
| |     |-CallExpr 0x55dc7db472a8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x55dc7db47290 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x55dc7db47218 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x55dc7db46b00 'sys_dlist_peek_prev_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x55dc7db472e0 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x55dc7db47240 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db46f30 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x55dc7db472f8 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x55dc7db47268 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db46fa0 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x55dc7db47390 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x55dc7db47370 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x55dc7db47348 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x55dc7db47310 <col:23> 'int' 0
| `-FullComment 0x55dc7dc9c030 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:363:3, line:370:13>
|   |-ParagraphComment 0x55dc7dc9bc60 <line:363:3>
|   | `-TextComment 0x55dc7dc9bc30 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9bc80 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9bce0 <col:10, col:58>
|   |   `-TextComment 0x55dc7dc9bcb0 <col:10, col:58> Text=" get a reference to the previous item in the list"
|   |-ParagraphComment 0x55dc7dc9bd30 <line:365:3>
|   | `-TextComment 0x55dc7dc9bd00 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9bd50 <col:4, line:366:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9be00 <line:365:15, line:366:3>
|   |   |-TextComment 0x55dc7dc9bdb0 <line:365:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55dc7dc9bdd0 <line:366:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9be20 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dc9beb0 <col:15, col:74>
|   |   `-TextComment 0x55dc7dc9be80 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x55dc7dc9bf00 <line:368:3>
|   | `-TextComment 0x55dc7dc9bed0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9bf20 <col:4, line:370:13> Name="return"
|     `-ParagraphComment 0x55dc7dc9bfd0 <line:368:11, line:370:13>
|       |-TextComment 0x55dc7dc9bf50 <line:368:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       |-TextComment 0x55dc7dc9bf70 <line:369:3, col:70> Text=" 	   tail or NULL (when node comes from reading the head of an empty"
|       `-TextComment 0x55dc7dc9bf90 <line:370:3, col:13> Text=" 	   list)."
|-FunctionDecl 0x55dc7db474c8 <line:387:1, line:390:1> line:387:28 sys_dlist_peek_tail 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55dc7db47440 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55dc7db47828 <line:388:1, line:390:1>
| | `-ReturnStmt 0x55dc7db477e0 <line:389:2, col:49>
| |   `-ConditionalOperator 0x55dc7db477b0 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x55dc7db47768 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x55dc7db475d8 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x55dc7db475c0 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x55dc7db47570 <col:9> 'bool (sys_dlist_t *)' Function 0x55dc7db43970 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x55dc7db47608 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x55dc7db47598 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db47440 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x55dc7db47798 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x55dc7db47680 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x55dc7db47658 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x55dc7db47620 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x55dc7db47780 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:389:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x55dc7db47730 <col:43, col:49> 'struct _dnode *' lvalue .tail 0x55dc7db3e388
| |         `-MemberExpr 0x55dc7db476e0 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| |           `-ImplicitCastExpr 0x55dc7db476c8 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x55dc7db476a0 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db47440 'list' 'sys_dlist_t *'
| `-FullComment 0x55dc7dc9c370 <line:380:3, line:384:63>
|   |-ParagraphComment 0x55dc7dc9c0d0 <line:380:3>
|   | `-TextComment 0x55dc7dc9c0a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9c0f0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9c150 <col:10, col:54>
|   |   `-TextComment 0x55dc7dc9c120 <col:10, col:54> Text=" get a reference to the tail item in the list"
|   |-ParagraphComment 0x55dc7dc9c1a0 <line:382:3>
|   | `-TextComment 0x55dc7dc9c170 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9c1c0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9c250 <col:15, col:51>
|   |   `-TextComment 0x55dc7dc9c220 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55dc7dc9c2a0 <line:384:3>
|   | `-TextComment 0x55dc7dc9c270 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9c2c0 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x55dc7dc9c320 <col:11, col:63>
|       `-TextComment 0x55dc7dc9c2f0 <col:11, col:63> Text=" a pointer to the tail element, NULL if list is empty"
|-FunctionDecl 0x55dc7db479d0 <line:403:1, line:410:1> line:403:20 used sys_dlist_append 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db47850 <col:37, col:50> col:50 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55dc7db478c0 <col:56, col:69> col:69 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55dc7db480a8 <line:404:1, line:410:1>
| | |-BinaryOperator 0x55dc7db47b88 <line:405:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x55dc7db47b10 <col:2, col:8> 'struct _dnode *' lvalue .next 0x55dc7db3e130
| | | | `-MemberExpr 0x55dc7db47ac0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| | | |   `-ImplicitCastExpr 0x55dc7db47aa8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55dc7db47a80 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db478c0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55dc7db47b70 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55dc7db47b48 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db47850 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x55dc7db47d58 <line:406:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x55dc7db47c40 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x55dc7db3e3f8
| | | | `-MemberExpr 0x55dc7db47bf0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| | | |   `-ImplicitCastExpr 0x55dc7db47bd8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55dc7db47bb0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db478c0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55dc7db47d40 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55dc7db47d08 <col:15, col:21> 'struct _dnode *' lvalue .tail 0x55dc7db3e388
| | |     `-MemberExpr 0x55dc7db47cb8 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| | |       `-ImplicitCastExpr 0x55dc7db47ca0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55dc7db47c78 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db47850 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x55dc7db47f28 <line:408:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x55dc7db47eb0 <col:2, col:14> 'struct _dnode *' lvalue .next 0x55dc7db3e130
| | | | `-MemberExpr 0x55dc7db47e60 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| | | |   `-ImplicitCastExpr 0x55dc7db47e48 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55dc7db47e10 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x55dc7db3e388
| | | |       `-MemberExpr 0x55dc7db47dc0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| | | |         `-ImplicitCastExpr 0x55dc7db47da8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55dc7db47d80 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db47850 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x55dc7db47f10 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55dc7db47ee8 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db478c0 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x55dc7db48058 <line:409:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x55dc7db47fe0 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x55dc7db3e388
| |   | `-MemberExpr 0x55dc7db47f90 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| |   |   `-ImplicitCastExpr 0x55dc7db47f78 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55dc7db47f50 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db47850 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x55dc7db48040 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55dc7db48018 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db478c0 'node' 'sys_dnode_t *'
| `-FullComment 0x55dc7dc9c7e0 <line:393:3, line:400:14>
|   |-ParagraphComment 0x55dc7dc9c410 <line:393:3>
|   | `-TextComment 0x55dc7dc9c3e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9c430 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9c490 <col:10, col:34>
|   |   `-TextComment 0x55dc7dc9c460 <col:10, col:34> Text=" add node to tail of list"
|   |-ParagraphComment 0x55dc7dc9c4e0 <line:395:3, col:62>
|   | `-TextComment 0x55dc7dc9c4b0 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dc9c530 <line:397:3>
|   | `-TextComment 0x55dc7dc9c500 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9c550 <col:4, line:398:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9c600 <line:397:15, line:398:3>
|   |   |-TextComment 0x55dc7dc9c5b0 <line:397:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55dc7dc9c5d0 <line:398:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9c620 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dc9c6b0 <col:15, col:36>
|   |   `-TextComment 0x55dc7dc9c680 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x55dc7dc9c700 <line:400:3>
|   | `-TextComment 0x55dc7dc9c6d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9c720 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dc9c780 <col:11, col:14>
|       `-TextComment 0x55dc7dc9c750 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7db48220 <line:423:1, line:430:1> line:423:20 sys_dlist_prepend 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db480e8 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55dc7db48190 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55dc7db488f8 <line:424:1, line:430:1>
| | |-BinaryOperator 0x55dc7db48478 <line:425:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x55dc7db48360 <col:2, col:8> 'struct _dnode *' lvalue .next 0x55dc7db3e130
| | | | `-MemberExpr 0x55dc7db48310 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| | | |   `-ImplicitCastExpr 0x55dc7db482f8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55dc7db482d0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db48190 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55dc7db48460 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55dc7db48428 <col:15, col:21> 'struct _dnode *' lvalue .head 0x55dc7db3e0c0
| | |     `-MemberExpr 0x55dc7db483d8 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| | |       `-ImplicitCastExpr 0x55dc7db483c0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55dc7db48398 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db480e8 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x55dc7db485a8 <line:426:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x55dc7db48530 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x55dc7db3e3f8
| | | | `-MemberExpr 0x55dc7db484e0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| | | |   `-ImplicitCastExpr 0x55dc7db484c8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55dc7db484a0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db48190 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55dc7db48590 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55dc7db48568 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db480e8 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x55dc7db48778 <line:428:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x55dc7db48700 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x55dc7db3e3f8
| | | | `-MemberExpr 0x55dc7db486b0 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| | | |   `-ImplicitCastExpr 0x55dc7db48698 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55dc7db48660 <col:2, col:8> 'struct _dnode *' lvalue .head 0x55dc7db3e0c0
| | | |       `-MemberExpr 0x55dc7db48610 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| | | |         `-ImplicitCastExpr 0x55dc7db485f8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55dc7db485d0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db480e8 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x55dc7db48760 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55dc7db48738 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db48190 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x55dc7db488a8 <line:429:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x55dc7db48830 <col:2, col:8> 'struct _dnode *' lvalue .head 0x55dc7db3e0c0
| |   | `-MemberExpr 0x55dc7db487e0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| |   |   `-ImplicitCastExpr 0x55dc7db487c8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55dc7db487a0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db480e8 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x55dc7db48890 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55dc7db48868 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db48190 'node' 'sys_dnode_t *'
| `-FullComment 0x55dc7dc9cc50 <line:413:3, line:420:14>
|   |-ParagraphComment 0x55dc7dc9c880 <line:413:3>
|   | `-TextComment 0x55dc7dc9c850 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9c8a0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9c900 <col:10, col:34>
|   |   `-TextComment 0x55dc7dc9c8d0 <col:10, col:34> Text=" add node to head of list"
|   |-ParagraphComment 0x55dc7dc9c950 <line:415:3, col:62>
|   | `-TextComment 0x55dc7dc9c920 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dc9c9a0 <line:417:3>
|   | `-TextComment 0x55dc7dc9c970 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9c9c0 <col:4, line:418:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9ca70 <line:417:15, line:418:3>
|   |   |-TextComment 0x55dc7dc9ca20 <line:417:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55dc7dc9ca40 <line:418:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9ca90 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dc9cb20 <col:15, col:36>
|   |   `-TextComment 0x55dc7dc9caf0 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x55dc7dc9cb70 <line:420:3>
|   | `-TextComment 0x55dc7dc9cb40 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9cb90 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dc9cbf0 <col:11, col:14>
|       `-TextComment 0x55dc7dc9cbc0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7db48a80 <line:440:1, line:446:1> line:440:20 used sys_dlist_insert 'void (sys_dnode_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db48938 <col:37, col:50> col:50 used successor 'sys_dnode_t *'
| |-ParmVarDecl 0x55dc7db489a8 <col:61, col:74> col:74 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55dc7db49158 <line:441:1, line:446:1>
| | |-BinaryOperator 0x55dc7db48cd8 <line:442:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x55dc7db48bc0 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x55dc7db3e3f8
| | | | `-MemberExpr 0x55dc7db48b70 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| | | |   `-ImplicitCastExpr 0x55dc7db48b58 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55dc7db48b30 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db489a8 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55dc7db48cc0 <col:15, col:26> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55dc7db48c88 <col:15, col:26> 'struct _dnode *' lvalue .prev 0x55dc7db3e3f8
| | |     `-MemberExpr 0x55dc7db48c38 <col:15, col:26> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| | |       `-ImplicitCastExpr 0x55dc7db48c20 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55dc7db48bf8 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db48938 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x55dc7db48e08 <line:443:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x55dc7db48d90 <col:2, col:8> 'struct _dnode *' lvalue .next 0x55dc7db3e130
| | | | `-MemberExpr 0x55dc7db48d40 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| | | |   `-ImplicitCastExpr 0x55dc7db48d28 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55dc7db48d00 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db489a8 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55dc7db48df0 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55dc7db48dc8 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db48938 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x55dc7db48fd8 <line:444:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x55dc7db48f60 <col:2, col:19> 'struct _dnode *' lvalue .next 0x55dc7db3e130
| | | | `-MemberExpr 0x55dc7db48f10 <col:2, col:19> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| | | |   `-ImplicitCastExpr 0x55dc7db48ef8 <col:2, col:13> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55dc7db48ec0 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x55dc7db3e3f8
| | | |       `-MemberExpr 0x55dc7db48e70 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| | | |         `-ImplicitCastExpr 0x55dc7db48e58 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55dc7db48e30 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db48938 'successor' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55dc7db48fc0 <col:26> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55dc7db48f98 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db489a8 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x55dc7db49108 <line:445:2, col:20> 'struct _dnode *' '='
| |   |-MemberExpr 0x55dc7db49090 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x55dc7db3e3f8
| |   | `-MemberExpr 0x55dc7db49040 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| |   |   `-ImplicitCastExpr 0x55dc7db49028 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55dc7db49000 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db48938 'successor' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x55dc7db490f0 <col:20> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55dc7db490c8 <col:20> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db489a8 'node' 'sys_dnode_t *'
| `-FullComment 0x55dc7dc9cfe0 <line:433:3, line:438:36>
|   |-ParagraphComment 0x55dc7dc9ccf0 <line:433:3>
|   | `-TextComment 0x55dc7dc9ccc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9cd10 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9cd70 <col:10, col:35>
|   |   `-TextComment 0x55dc7dc9cd40 <col:10, col:35> Text=" Insert a node into a list"
|   |-ParagraphComment 0x55dc7dc9cdc0 <line:435:3, col:52>
|   | `-TextComment 0x55dc7dc9cd90 <col:3, col:52> Text=" Insert a node before a specified node in a dlist."
|   |-ParagraphComment 0x55dc7dc9ce10 <line:437:3>
|   | `-TextComment 0x55dc7dc9cde0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9ce30 <col:4, line:438:3> [in] implicitly Param="successor" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9cee0 <line:437:20, line:438:3>
|   |   |-TextComment 0x55dc7dc9ce90 <line:437:20, col:69> Text=" the position before which "node" will be inserted"
|   |   `-TextComment 0x55dc7dc9ceb0 <line:438:3> Text=" "
|   `-ParamCommandComment 0x55dc7dc9cf00 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55dc7dc9cf90 <col:15, col:36>
|       `-TextComment 0x55dc7dc9cf60 <col:15, col:36> Text=" the element to insert"
|-FunctionDecl 0x55dc7db49680 <line:465:1, line:482:1> line:465:20 sys_dlist_insert_at 'void (sys_dlist_t *, sys_dnode_t *, int (*)(sys_dnode_t *, void *), void *)' static inline
| |-ParmVarDecl 0x55dc7db491b0 <col:40, col:53> col:53 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55dc7db49220 <col:59, col:72> col:72 used node 'sys_dnode_t *'
| |-ParmVarDecl 0x55dc7db494c0 <line:466:2, col:43> col:8 used cond 'int (*)(sys_dnode_t *, void *)'
| |-ParmVarDecl 0x55dc7db49538 <col:46, col:52> col:52 used data 'void *'
| |-CompoundStmt 0x55dc7db4f348 <line:467:1, line:482:1>
| | `-IfStmt 0x55dc7db4f2e0 <line:468:2, line:481:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-CallExpr 0x55dc7db497a8 <line:468:6, col:29> 'bool'
| |   | |-ImplicitCastExpr 0x55dc7db49790 <col:6> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x55dc7db49740 <col:6> 'bool (sys_dlist_t *)' Function 0x55dc7db43970 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |   | `-ImplicitCastExpr 0x55dc7db497d8 <col:25> 'sys_dlist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55dc7db49768 <col:25> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db491b0 'list' 'sys_dlist_t *'
| |   |-CompoundStmt 0x55dc7db49948 <col:32, line:470:2>
| |   | `-CallExpr 0x55dc7db498e0 <line:469:3, col:30> 'void'
| |   |   |-ImplicitCastExpr 0x55dc7db498c8 <col:3> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x55dc7db497f0 <col:3> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x55dc7db479d0 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |   |   |-ImplicitCastExpr 0x55dc7db49918 <col:20> 'sys_dlist_t *' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x55dc7db49818 <col:20> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db491b0 'list' 'sys_dlist_t *'
| |   |   `-ImplicitCastExpr 0x55dc7db49930 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55dc7db49840 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db49220 'node' 'sys_dnode_t *'
| |   `-CompoundStmt 0x55dc7db4f2b8 <line:470:9, line:481:2>
| |     |-DeclStmt 0x55dc7db49ad8 <line:471:3, col:47>
| |     | `-VarDecl 0x55dc7db49970 <col:3, col:46> col:16 used pos 'sys_dnode_t *' cinit
| |     |   `-CallExpr 0x55dc7db49a90 <col:22, col:46> 'sys_dnode_t *'
| |     |     |-ImplicitCastExpr 0x55dc7db49a78 <col:22> 'sys_dnode_t *(*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x55dc7db499d0 <col:22> 'sys_dnode_t *(sys_dlist_t *)' Function 0x55dc7db44080 'sys_dlist_peek_head' 'sys_dnode_t *(sys_dlist_t *)'
| |     |     `-ImplicitCastExpr 0x55dc7db49ac0 <col:42> 'sys_dlist_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x55dc7db499f8 <col:42> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db491b0 'list' 'sys_dlist_t *'
| |     |-WhileStmt 0x55dc7db49ef8 <line:473:3, line:475:3>
| |     | |-<<<NULL>>>
| |     | |-BinaryOperator 0x55dc7db49d70 <line:473:10, col:48> 'int' '&&'
| |     | | |-ParenExpr 0x55dc7db49bf0 <col:10, col:22> 'int'
| |     | | | `-BinaryOperator 0x55dc7db49bc8 <col:11, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     | | |   |-ImplicitCastExpr 0x55dc7db49b98 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:11> 'sys_dnode_t *' <LValueToRValue>
| |     | | |   | `-DeclRefExpr 0x55dc7db49af0 <col:11> 'sys_dnode_t *' lvalue Var 0x55dc7db49970 'pos' 'sys_dnode_t *'
| |     | | |   `-ImplicitCastExpr 0x55dc7db49bb0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     | | |     `-ParenExpr 0x55dc7db49b78 <col:14, col:24> 'void *'
| |     | | |       `-CStyleCastExpr 0x55dc7db49b50 <col:15, col:23> 'void *' <NullToPointer>
| |     | | |         `-IntegerLiteral 0x55dc7db49b18 <col:23> 'int' 0
| |     | | `-ParenExpr 0x55dc7db49d50 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:27, col:48> 'int'
| |     | |   `-BinaryOperator 0x55dc7db49d28 <col:28, col:47> 'int' '=='
| |     | |     |-CallExpr 0x55dc7db49ca0 <col:28, col:42> 'int'
| |     | |     | |-ImplicitCastExpr 0x55dc7db49c88 <col:28> 'int (*)(sys_dnode_t *, void *)' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x55dc7db49c10 <col:28> 'int (*)(sys_dnode_t *, void *)' lvalue ParmVar 0x55dc7db494c0 'cond' 'int (*)(sys_dnode_t *, void *)'
| |     | |     | |-ImplicitCastExpr 0x55dc7db49cd8 <col:33> 'sys_dnode_t *' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x55dc7db49c38 <col:33> 'sys_dnode_t *' lvalue Var 0x55dc7db49970 'pos' 'sys_dnode_t *'
| |     | |     | `-ImplicitCastExpr 0x55dc7db49cf0 <col:38> 'void *' <LValueToRValue>
| |     | |     |   `-DeclRefExpr 0x55dc7db49c60 <col:38> 'void *' lvalue ParmVar 0x55dc7db49538 'data' 'void *'
| |     | |     `-IntegerLiteral 0x55dc7db49d08 <col:47> 'int' 0
| |     | `-CompoundStmt 0x55dc7db49ee0 <col:51, line:475:3>
| |     |   `-BinaryOperator 0x55dc7db49eb8 <line:474:4, col:39> 'sys_dnode_t *' '='
| |     |     |-DeclRefExpr 0x55dc7db49d98 <col:4> 'sys_dnode_t *' lvalue Var 0x55dc7db49970 'pos' 'sys_dnode_t *'
| |     |     `-CallExpr 0x55dc7db49e50 <col:10, col:39> 'sys_dnode_t *'
| |     |       |-ImplicitCastExpr 0x55dc7db49e38 <col:10> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     |       | `-DeclRefExpr 0x55dc7db49dc0 <col:10> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x55dc7db465a0 'sys_dlist_peek_next' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     |       |-ImplicitCastExpr 0x55dc7db49e88 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |     |       | `-DeclRefExpr 0x55dc7db49de8 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db491b0 'list' 'sys_dlist_t *'
| |     |       `-ImplicitCastExpr 0x55dc7db49ea0 <col:36> 'sys_dnode_t *' <LValueToRValue>
| |     |         `-DeclRefExpr 0x55dc7db49e10 <col:36> 'sys_dnode_t *' lvalue Var 0x55dc7db49970 'pos' 'sys_dnode_t *'
| |     `-IfStmt 0x55dc7db4f280 <line:476:3, line:480:3>
| |       |-<<<NULL>>>
| |       |-<<<NULL>>>
| |       |-BinaryOperator 0x55dc7db49ff0 <line:476:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       | |-ImplicitCastExpr 0x55dc7db49fc0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:7> 'sys_dnode_t *' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55dc7db49f18 <col:7> 'sys_dnode_t *' lvalue Var 0x55dc7db49970 'pos' 'sys_dnode_t *'
| |       | `-ImplicitCastExpr 0x55dc7db49fd8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |       |   `-ParenExpr 0x55dc7db49fa0 <col:14, col:24> 'void *'
| |       |     `-CStyleCastExpr 0x55dc7db49f78 <col:15, col:23> 'void *' <NullToPointer>
| |       |       `-IntegerLiteral 0x55dc7db49f40 <col:23> 'int' 0
| |       |-CompoundStmt 0x55dc7db4a138 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:20, line:478:3>
| |       | `-CallExpr 0x55dc7db4a0d0 <line:477:4, col:30> 'void'
| |       |   |-ImplicitCastExpr 0x55dc7db4a0b8 <col:4> 'void (*)(sys_dnode_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |       |   | `-DeclRefExpr 0x55dc7db4a018 <col:4> 'void (sys_dnode_t *, sys_dnode_t *)' Function 0x55dc7db48a80 'sys_dlist_insert' 'void (sys_dnode_t *, sys_dnode_t *)'
| |       |   |-ImplicitCastExpr 0x55dc7db4a108 <col:21> 'sys_dnode_t *' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x55dc7db4a040 <col:21> 'sys_dnode_t *' lvalue Var 0x55dc7db49970 'pos' 'sys_dnode_t *'
| |       |   `-ImplicitCastExpr 0x55dc7db4a120 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x55dc7db4a068 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db49220 'node' 'sys_dnode_t *'
| |       `-CompoundStmt 0x55dc7db4f268 <line:478:10, line:480:3>
| |         `-CallExpr 0x55dc7db4f200 <line:479:4, col:31> 'void'
| |           |-ImplicitCastExpr 0x55dc7db4f1e8 <col:4> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x55dc7db4a150 <col:4> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x55dc7db479d0 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |           |-ImplicitCastExpr 0x55dc7db4f238 <col:21> 'sys_dlist_t *' <LValueToRValue>
| |           | `-DeclRefExpr 0x55dc7db4a178 <col:21> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db491b0 'list' 'sys_dlist_t *'
| |           `-ImplicitCastExpr 0x55dc7db4f250 <col:27> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x55dc7db4f1c0 <col:27> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db49220 'node' 'sys_dnode_t *'
| `-FullComment 0x55dc7dc9d6a0 <line:449:3, line:462:14>
|   |-ParagraphComment 0x55dc7dc9d080 <line:449:3>
|   | `-TextComment 0x55dc7dc9d050 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9d0a0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9d100 <col:10, col:33>
|   |   `-TextComment 0x55dc7dc9d0d0 <col:10, col:33> Text=" insert node at position"
|   |-ParagraphComment 0x55dc7dc9d1c0 <line:451:3, line:454:62>
|   | |-TextComment 0x55dc7dc9d120 <line:451:3, col:76> Text=" Insert a node in a location depending on a external condition. The cond()"
|   | |-TextComment 0x55dc7dc9d140 <line:452:3, col:74> Text=" function checks if the node is to be inserted _before_ the current node"
|   | |-TextComment 0x55dc7dc9d160 <line:453:3, col:31> Text=" against which it is checked."
|   | `-TextComment 0x55dc7dc9d180 <line:454:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dc9d210 <line:456:3>
|   | `-TextComment 0x55dc7dc9d1e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9d230 <col:4, line:457:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9d2e0 <line:456:15, line:457:3>
|   |   |-TextComment 0x55dc7dc9d290 <line:456:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55dc7dc9d2b0 <line:457:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9d300 <col:4, line:458:3> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dc9d3b0 <line:457:15, line:458:3>
|   |   |-TextComment 0x55dc7dc9d360 <line:457:15, col:36> Text=" the element to insert"
|   |   `-TextComment 0x55dc7dc9d380 <line:458:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9d3d0 <col:4, line:460:3> [in] implicitly Param="cond" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dc9d4b0 <line:458:15, line:460:3>
|   |   |-TextComment 0x55dc7dc9d430 <line:458:15, col:76> Text=" a function that determines if the current node is the correct"
|   |   |-TextComment 0x55dc7dc9d450 <line:459:3, col:27> Text="             insert point"
|   |   `-TextComment 0x55dc7dc9d470 <line:460:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9d4d0 <col:4, col:34> [in] implicitly Param="data" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dc9d560 <col:15, col:34>
|   |   `-TextComment 0x55dc7dc9d530 <col:15, col:34> Text=" parameter to cond()"
|   |-ParagraphComment 0x55dc7dc9d5b0 <line:462:3>
|   | `-TextComment 0x55dc7dc9d580 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9d5d0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dc9d630 <col:11, col:14>
|       `-TextComment 0x55dc7dc9d600 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7db4f3f8 <line:495:1, line:500:1> line:495:20 used sys_dlist_remove 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db4f370 <col:37, col:50> col:50 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55dc7db4fab8 <line:496:1, line:500:1>
| | |-BinaryOperator 0x55dc7db4f6e8 <line:497:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x55dc7db4f5d0 <col:2, col:14> 'struct _dnode *' lvalue .next 0x55dc7db3e130
| | | | `-MemberExpr 0x55dc7db4f580 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| | | |   `-ImplicitCastExpr 0x55dc7db4f568 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55dc7db4f530 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x55dc7db3e3f8
| | | |       `-MemberExpr 0x55dc7db4f4e0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| | | |         `-ImplicitCastExpr 0x55dc7db4f4c8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55dc7db4f4a0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db4f370 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55dc7db4f6d0 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55dc7db4f698 <col:21, col:27> 'struct _dnode *' lvalue .next 0x55dc7db3e130
| | |     `-MemberExpr 0x55dc7db4f648 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| | |       `-ImplicitCastExpr 0x55dc7db4f630 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55dc7db4f608 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db4f370 'node' 'sys_dnode_t *'
| | |-BinaryOperator 0x55dc7db4f958 <line:498:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x55dc7db4f840 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x55dc7db3e3f8
| | | | `-MemberExpr 0x55dc7db4f7f0 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| | | |   `-ImplicitCastExpr 0x55dc7db4f7d8 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55dc7db4f7a0 <col:2, col:8> 'struct _dnode *' lvalue .next 0x55dc7db3e130
| | | |       `-MemberExpr 0x55dc7db4f750 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| | | |         `-ImplicitCastExpr 0x55dc7db4f738 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55dc7db4f710 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db4f370 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55dc7db4f940 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55dc7db4f908 <col:21, col:27> 'struct _dnode *' lvalue .prev 0x55dc7db3e3f8
| | |     `-MemberExpr 0x55dc7db4f8b8 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55dc7db3e490
| | |       `-ImplicitCastExpr 0x55dc7db4f8a0 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55dc7db4f878 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db4f370 'node' 'sys_dnode_t *'
| | `-CallExpr 0x55dc7db4fa40 <line:499:2, col:21> 'void'
| |   |-ImplicitCastExpr 0x55dc7db4fa28 <col:2> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x55dc7db4f980 <col:2> 'void (sys_dnode_t *)' Function 0x55dc7db3ee30 'sys_dnode_init' 'void (sys_dnode_t *)'
| |   `-ImplicitCastExpr 0x55dc7db4fa70 <col:17> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55dc7db4f9a8 <col:17> 'sys_dnode_t *' lvalue ParmVar 0x55dc7db4f370 'node' 'sys_dnode_t *'
| `-FullComment 0x55dc7dc9da70 <line:485:3, line:492:14>
|   |-ParagraphComment 0x55dc7dc9d740 <line:485:3>
|   | `-TextComment 0x55dc7dc9d710 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9d770 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9d7d0 <col:10, col:44>
|   |   `-TextComment 0x55dc7dc9d7a0 <col:10, col:44> Text=" remove a specific node from a list"
|   |-ParagraphComment 0x55dc7dc9d840 <line:487:3, line:488:62>
|   | |-TextComment 0x55dc7dc9d7f0 <line:487:3, col:71> Text=" The list is implicit from the node. The node must be part of a list."
|   | `-TextComment 0x55dc7dc9d810 <line:488:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dc9d890 <line:490:3>
|   | `-TextComment 0x55dc7dc9d860 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9d8b0 <col:4, col:33> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9d940 <col:15, col:33>
|   |   `-TextComment 0x55dc7dc9d910 <col:15, col:33> Text=" the node to remove"
|   |-ParagraphComment 0x55dc7dc9d990 <line:492:3>
|   | `-TextComment 0x55dc7dc9d960 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9d9b0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dc9da10 <col:11, col:14>
|       `-TextComment 0x55dc7dc9d9e0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7db4fb78 <line:512:1, line:522:1> line:512:28 sys_dlist_get 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55dc7db4faf0 <col:42, col:55> col:55 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55dc7db500c8 <line:513:1, line:522:1>
| | |-DeclStmt 0x55dc7db4fd28 <line:514:2, col:26>
| | | `-VarDecl 0x55dc7db4fc30 <col:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:514:15 used node 'sys_dnode_t *' cinit
| | |   `-ImplicitCastExpr 0x55dc7db4fd10 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| | |     `-ParenExpr 0x55dc7db4fcf0 <col:14, col:24> 'void *'
| | |       `-CStyleCastExpr 0x55dc7db4fcc8 <col:15, col:23> 'void *' <NullToPointer>
| | |         `-IntegerLiteral 0x55dc7db4fc90 <col:23> 'int' 0
| | |-IfStmt 0x55dc7db50010 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:516:2, line:519:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x55dc7db4fdf0 <line:516:6, col:30> 'int' prefix '!'
| | | | `-CallExpr 0x55dc7db4fda8 <col:7, col:30> 'bool'
| | | |   |-ImplicitCastExpr 0x55dc7db4fd90 <col:7> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x55dc7db4fd40 <col:7> 'bool (sys_dlist_t *)' Function 0x55dc7db43970 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| | | |   `-ImplicitCastExpr 0x55dc7db4fdd8 <col:26> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55dc7db4fd68 <col:26> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db4faf0 'list' 'sys_dlist_t *'
| | | |-CompoundStmt 0x55dc7db4fff0 <col:33, line:519:2>
| | | | |-BinaryOperator 0x55dc7db4ff18 <line:517:3, col:16> 'sys_dnode_t *' '='
| | | | | |-DeclRefExpr 0x55dc7db4fe10 <col:3> 'sys_dnode_t *' lvalue Var 0x55dc7db4fc30 'node' 'sys_dnode_t *'
| | | | | `-ImplicitCastExpr 0x55dc7db4ff00 <col:10, col:16> 'struct _dnode *' <LValueToRValue>
| | | | |   `-MemberExpr 0x55dc7db4fec8 <col:10, col:16> 'struct _dnode *' lvalue .head 0x55dc7db3e0c0
| | | | |     `-MemberExpr 0x55dc7db4fe78 <col:10, col:16> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55dc7db3e1d0
| | | | |       `-ImplicitCastExpr 0x55dc7db4fe60 <col:10> 'sys_dlist_t *' <LValueToRValue>
| | | | |         `-DeclRefExpr 0x55dc7db4fe38 <col:10> 'sys_dlist_t *' lvalue ParmVar 0x55dc7db4faf0 'list' 'sys_dlist_t *'
| | | | `-CallExpr 0x55dc7db4ffa8 <line:518:3, col:24> 'void'
| | | |   |-ImplicitCastExpr 0x55dc7db4ff90 <col:3> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x55dc7db4ff40 <col:3> 'void (sys_dnode_t *)' Function 0x55dc7db4f3f8 'sys_dlist_remove' 'void (sys_dnode_t *)'
| | | |   `-ImplicitCastExpr 0x55dc7db4ffd8 <col:20> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55dc7db4ff68 <col:20> 'sys_dnode_t *' lvalue Var 0x55dc7db4fc30 'node' 'sys_dnode_t *'
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x55dc7db50088 <line:521:2, col:9>
| |   `-ImplicitCastExpr 0x55dc7db50070 <col:9> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55dc7db50048 <col:9> 'sys_dnode_t *' lvalue Var 0x55dc7db4fc30 'node' 'sys_dnode_t *'
| `-FullComment 0x55dc7dc9de10 <line:503:3, line:509:60>
|   |-ParagraphComment 0x55dc7dc9db10 <line:503:3>
|   | `-TextComment 0x55dc7dc9dae0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9db30 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9db90 <col:10, col:38>
|   |   `-TextComment 0x55dc7dc9db60 <col:10, col:38> Text=" get the first node in a list"
|   |-ParagraphComment 0x55dc7dc9dbe0 <line:505:3, col:62>
|   | `-TextComment 0x55dc7dc9dbb0 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dc9dc30 <line:507:3>
|   | `-TextComment 0x55dc7dc9dc00 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9dc50 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9dce0 <col:15, col:51>
|   |   `-TextComment 0x55dc7dc9dcb0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55dc7dc9dd30 <line:509:3>
|   | `-TextComment 0x55dc7dc9dd00 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9dd50 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x55dc7dc9ddb0 <col:11, col:60>
|       `-TextComment 0x55dc7dc9dd80 <col:11, col:60> Text=" the first node in the list, NULL if list is empty"
|-RecordDecl 0x55dc7db500f0 </vagrant/ext/zephyros/zephyr/include/sys/rb.h:48:1, line:50:1> line:48:8 struct rbnode definition
| `-FieldDecl 0x55dc7db52ee0 <line:49:2, col:27> col:17 children 'struct rbnode *[2]'
|-TypedefDecl 0x55dc7db531b8 <line:74:1, col:65> col:16 referenced rb_lessthan_t 'bool (*)(struct rbnode *, struct rbnode *)'
| |-PointerType 0x55dc7db53150 'bool (*)(struct rbnode *, struct rbnode *)'
| | `-ParenType 0x55dc7db530f0 'bool (struct rbnode *, struct rbnode *)' sugar
| |   `-FunctionProtoType 0x55dc7db530b0 'bool (struct rbnode *, struct rbnode *)' cdecl
| |     |-BuiltinType 0x55dc7da66990 'bool'
| |     |-PointerType 0x55dc7db52e00 'struct rbnode *'
| |     | `-ElaboratedType 0x55dc7db52da0 'struct rbnode' sugar
| |     |   `-RecordType 0x55dc7db50180 'struct rbnode'
| |     |     `-Record 0x55dc7db500f0 'rbnode'
| |     `-PointerType 0x55dc7db52e00 'struct rbnode *'
| |       `-ElaboratedType 0x55dc7db52da0 'struct rbnode' sugar
| |         `-RecordType 0x55dc7db50180 'struct rbnode'
| |           `-Record 0x55dc7db500f0 'rbnode'
| `-FullComment 0x55dc7dc9e170 <line:62:3, line:72:36>
|   |-ParagraphComment 0x55dc7dc9deb0 <line:62:3>
|   | `-TextComment 0x55dc7dc9de80 <col:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dc9ded0 <col:4, col:26> Text=" rb_lessthan_t"
|   |-ParagraphComment 0x55dc7dc9df40 <line:63:3>
|   | `-TextComment 0x55dc7dc9df10 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9df60 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9dfc0 <col:10, col:45>
|   |   `-TextComment 0x55dc7dc9df90 <col:10, col:45> Text=" Red/black tree comparison predicate"
|   |-ParagraphComment 0x55dc7dc9e030 <line:65:3, line:66:68>
|   | |-TextComment 0x55dc7dc9dfe0 <line:65:3, col:69> Text=" Compares the two nodes and returns true if node A is strictly less"
|   | `-TextComment 0x55dc7dc9e000 <line:66:3, col:68> Text=" than B according to the tree's sorting criteria, false otherwise."
|   `-ParagraphComment 0x55dc7dc9e120 <line:68:3, line:72:36>
|     |-TextComment 0x55dc7dc9e050 <line:68:3, col:70> Text=" Note that during insert, the new node being inserted will always be"
|     |-TextComment 0x55dc7dc9e070 <line:69:3, col:68> Text=" "A", where "B" is the existing node within the tree against which"
|     |-TextComment 0x55dc7dc9e090 <line:70:3, col:64> Text=" it is being compared.  This trait can be used (with care!) to"
|     |-TextComment 0x55dc7dc9e0b0 <line:71:3, col:70> Text=" implement "most/least recently added" semantics between nodes which"
|     `-TextComment 0x55dc7dc9e0d0 <line:72:3, col:36> Text=" would otherwise compare as equal."
|-RecordDecl 0x55dc7db53210 <line:76:1, line:84:1> line:76:8 struct rbtree definition
| |-FieldDecl 0x55dc7db532e8 <line:77:2, col:17> col:17 referenced root 'struct rbnode *'
| |-FieldDecl 0x55dc7db53360 <line:78:2, col:16> col:16 lessthan_fn 'rb_lessthan_t':'bool (*)(struct rbnode *, struct rbnode *)'
| `-FieldDecl 0x55dc7db533c0 <line:79:2, col:6> col:6 max_depth 'int'
|-TypedefDecl 0x55dc7db53658 <line:86:1, col:61> col:16 referenced rb_visit_t 'void (*)(struct rbnode *, void *)'
| `-PointerType 0x55dc7db535f0 'void (*)(struct rbnode *, void *)'
|   `-ParenType 0x55dc7db53590 'void (struct rbnode *, void *)' sugar
|     `-FunctionProtoType 0x55dc7db53550 'void (struct rbnode *, void *)' cdecl
|       |-BuiltinType 0x55dc7da66970 'void'
|       |-PointerType 0x55dc7db52e00 'struct rbnode *'
|       | `-ElaboratedType 0x55dc7db52da0 'struct rbnode' sugar
|       |   `-RecordType 0x55dc7db50180 'struct rbnode'
|       |     `-Record 0x55dc7db500f0 'rbnode'
|       `-PointerType 0x55dc7da66e10 'void *'
|         `-BuiltinType 0x55dc7da66970 'void'
|-FunctionDecl 0x55dc7db53878 <line:88:1, col:56> col:16 z_rb_child 'struct rbnode *(struct rbnode *, int)'
| |-ParmVarDecl 0x55dc7db536d8 <col:27, col:42> col:42 node 'struct rbnode *'
| `-ParmVarDecl 0x55dc7db53750 <col:48, col:52> col:52 side 'int'
|-FunctionDecl 0x55dc7db53a58 <line:89:1, col:38> col:5 z_rb_is_black 'int (struct rbnode *)'
| `-ParmVarDecl 0x55dc7db53950 <col:19, col:34> col:34 node 'struct rbnode *'
|-FunctionDecl 0x55dc7db54ab0 <line:91:1, col:70> col:6 used z_rb_walk 'void (struct rbnode *, rb_visit_t, void *)'
| |-ParmVarDecl 0x55dc7db53b28 <col:16, col:31> col:31 node 'struct rbnode *'
| |-ParmVarDecl 0x55dc7db53bc0 <col:37, col:48> col:48 visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| `-ParmVarDecl 0x55dc7db53c38 <col:58, col:64> col:64 cookie 'void *'
|-FunctionDecl 0x55dc7db54dc8 <line:93:1, col:61> col:16 used z_rb_get_minmax 'struct rbnode *(struct rbtree *, int)'
| |-ParmVarDecl 0x55dc7db54c20 <col:32, col:47> col:47 tree 'struct rbtree *'
| `-ParmVarDecl 0x55dc7db54c98 <col:53, col:57> col:57 side 'int'
|-FunctionDecl 0x55dc7db55070 <line:98:1, col:56> col:6 rb_insert 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x55dc7db54ed0 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x55dc7db54f58 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x55dc7dc9e2c0 <line:96:3, col:31>
|   |-ParagraphComment 0x55dc7dc9e210 <col:3>
|   | `-TextComment 0x55dc7dc9e1e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9e230 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x55dc7dc9e290 <col:10, col:31>
|       `-TextComment 0x55dc7dc9e260 <col:10, col:31> Text=" Insert node into tree"
|-FunctionDecl 0x55dc7db55288 <line:103:1, col:56> col:6 rb_remove 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x55dc7db55170 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x55dc7db551f8 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x55dc7dc9e410 <line:101:3, col:31>
|   |-ParagraphComment 0x55dc7dc9e360 <col:3>
|   | `-TextComment 0x55dc7dc9e330 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9e380 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x55dc7dc9e3e0 <col:10, col:31>
|       `-TextComment 0x55dc7dc9e3b0 <col:10, col:31> Text=" Remove node from tree"
|-FunctionDecl 0x55dc7db554a8 <line:108:1, line:111:1> line:108:30 rb_get_min 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x55dc7db55390 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x55dc7db556c8 <line:109:1, line:111:1>
| | `-ReturnStmt 0x55dc7db55680 <line:110:2, col:32>
| |   `-CallExpr 0x55dc7db55630 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x55dc7db55618 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7db55550 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x55dc7db54dc8 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x55dc7db55668 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7db55578 <col:25> 'struct rbtree *' lvalue ParmVar 0x55dc7db55390 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x55dc7db555a0 <col:31> 'int' 0
| `-FullComment 0x55dc7dc9e560 <line:106:3, col:54>
|   |-ParagraphComment 0x55dc7dc9e4b0 <col:3>
|   | `-TextComment 0x55dc7dc9e480 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9e4d0 <col:4, col:54> Name="brief"
|     `-ParagraphComment 0x55dc7dc9e530 <col:10, col:54>
|       `-TextComment 0x55dc7dc9e500 <col:10, col:54> Text=" Returns the lowest-sorted member of the tree"
|-FunctionDecl 0x55dc7db557a8 <line:116:1, line:119:1> line:116:30 rb_get_max 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x55dc7db55708 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x55dc7db55968 <line:117:1, line:119:1>
| | `-ReturnStmt 0x55dc7db55928 <line:118:2, col:32>
| |   `-CallExpr 0x55dc7db558d8 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x55dc7db558c0 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7db55850 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x55dc7db54dc8 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x55dc7db55910 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7db55878 <col:25> 'struct rbtree *' lvalue ParmVar 0x55dc7db55708 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x55dc7db558a0 <col:31> 'int' 1
| `-FullComment 0x55dc7dc9e6b0 <line:114:3, col:55>
|   |-ParagraphComment 0x55dc7dc9e600 <col:3>
|   | `-TextComment 0x55dc7dc9e5d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9e620 <col:4, col:55> Name="brief"
|     `-ParagraphComment 0x55dc7dc9e680 <col:10, col:55>
|       `-TextComment 0x55dc7dc9e650 <col:10, col:55> Text=" Returns the highest-sorted member of the tree"
|-FunctionDecl 0x55dc7db55cb0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/rb.h:130:58> col:6 rb_contains 'bool (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x55dc7db559a8 <col:18, col:33> col:33 tree 'struct rbtree *'
| |-ParmVarDecl 0x55dc7db55a30 <col:39, col:54> col:54 node 'struct rbnode *'
| `-FullComment 0x55dc7dc9e900 <line:122:3, line:128:10>
|   |-ParagraphComment 0x55dc7dc9e750 <line:122:3>
|   | `-TextComment 0x55dc7dc9e720 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9e770 <col:4, col:60> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9e7d0 <col:10, col:60>
|   |   `-TextComment 0x55dc7dc9e7a0 <col:10, col:60> Text=" Returns true if the given node is part of the tree"
|   `-ParagraphComment 0x55dc7dc9e8c0 <line:124:3, line:128:10>
|     |-TextComment 0x55dc7dc9e7f0 <line:124:3, col:66> Text=" Note that this does not internally dereference the node pointer"
|     |-TextComment 0x55dc7dc9e810 <line:125:3, col:69> Text=" (though the tree's lessthan callback might!), it just tests it for"
|     |-TextComment 0x55dc7dc9e830 <line:126:3, col:68> Text=" equality with items in the tree.  So it's feasible to use this to"
|     |-TextComment 0x55dc7dc9e850 <line:127:3, col:66> Text=" implement a "set" construct by simply testing the pointer value"
|     `-TextComment 0x55dc7dc9e870 <line:128:3, col:10> Text=" itself."
|-FunctionDecl 0x55dc7db55fd0 <line:141:1, line:145:1> line:141:20 rb_walk 'void (struct rbtree *, rb_visit_t, void *)' static inline
| |-ParmVarDecl 0x55dc7db55db0 <col:28, col:43> col:43 used tree 'struct rbtree *'
| |-ParmVarDecl 0x55dc7db55e20 <col:49, col:60> col:60 used visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |-ParmVarDecl 0x55dc7db55e98 <line:142:7, col:13> col:13 used cookie 'void *'
| |-CompoundStmt 0x55dc7db56278 <line:143:1, line:145:1>
| | `-CallExpr 0x55dc7db561f0 <line:144:2, col:40> 'void'
| |   |-ImplicitCastExpr 0x55dc7db561d8 <col:2> 'void (*)(struct rbnode *, rb_visit_t, void *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x55dc7db56088 <col:2> 'void (struct rbnode *, rb_visit_t, void *)' Function 0x55dc7db54ab0 'z_rb_walk' 'void (struct rbnode *, rb_visit_t, void *)'
| |   |-ImplicitCastExpr 0x55dc7db56230 <col:12, col:18> 'struct rbnode *' <LValueToRValue>
| |   | `-MemberExpr 0x55dc7db560f0 <col:12, col:18> 'struct rbnode *' lvalue ->root 0x55dc7db532e8
| |   |   `-ImplicitCastExpr 0x55dc7db560d8 <col:12> 'struct rbtree *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55dc7db560b0 <col:12> 'struct rbtree *' lvalue ParmVar 0x55dc7db55db0 'tree' 'struct rbtree *'
| |   |-ImplicitCastExpr 0x55dc7db56248 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' <LValueToRValue>
| |   | `-DeclRefExpr 0x55dc7db56128 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' lvalue ParmVar 0x55dc7db55e20 'visit_fn' 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |   `-ImplicitCastExpr 0x55dc7db56260 <col:34> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x55dc7db56150 <col:34> 'void *' lvalue ParmVar 0x55dc7db55e98 'cookie' 'void *'
| `-FullComment 0x55dc7dc9eb20 <line:134:3, line:139:18>
|   |-ParagraphComment 0x55dc7dc9e9a0 <line:134:3>
|   | `-TextComment 0x55dc7dc9e970 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9e9c0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9ea20 <col:10, col:33>
|   |   `-TextComment 0x55dc7dc9e9f0 <col:10, col:33> Text=" Walk/enumerate a rbtree"
|   `-ParagraphComment 0x55dc7dc9eae0 <line:136:3, line:139:18>
|     |-TextComment 0x55dc7dc9ea40 <line:136:3, col:69> Text=" Very simple recursive enumeration.  Low code size, but requiring a"
|     |-TextComment 0x55dc7dc9ea60 <line:137:3, col:70> Text=" separate function can be clumsy for the user and there is no way to"
|     |-TextComment 0x55dc7dc9ea80 <line:138:3, col:65> Text=" break out of the loop early.  See RB_FOR_EACH for an iterative"
|     `-TextComment 0x55dc7dc9eaa0 <line:139:3, col:18> Text=" implementation."
|-RecordDecl 0x55dc7db56290 <line:148:1, line:152:1> line:148:8 struct _rb_foreach definition
| |-FieldDecl 0x55dc7db563c0 <line:149:2, col:18> col:18 stack 'struct rbnode **'
| |-FieldDecl 0x55dc7db56420 <line:150:2, col:8> col:8 is_left 'char *'
| `-FieldDecl 0x55dc7db56480 <line:151:2, col:6> col:6 top 'int'
|-FunctionDecl 0x55dc7db56728 <line:169:1, col:76> col:16 z_rb_foreach_next 'struct rbnode *(struct rbtree *, struct _rb_foreach *)'
| |-ParmVarDecl 0x55dc7db564f0 <col:34, col:49> col:49 tree 'struct rbtree *'
| `-ParmVarDecl 0x55dc7db56600 <col:55, col:75> col:75 f 'struct _rb_foreach *'
|-RecordDecl 0x55dc7db56898 </vagrant/ext/zephyros/zephyr/include/sched_priq.h:32:1, col:8> col:8 struct k_thread
|-FunctionDecl 0x55dc7db56af8 <line:34:1, col:50> col:18 z_priq_dumb_best 'struct k_thread *(sys_dlist_t *)'
| `-ParmVarDecl 0x55dc7db56950 <col:35, col:48> col:48 pq 'sys_dlist_t *'
|-FunctionDecl 0x55dc7db58e70 <line:35:1, col:65> col:6 z_priq_dumb_remove 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x55dc7db58cd0 <col:25, col:38> col:38 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x55dc7db58d58 <col:42, col:59> col:59 thread 'struct k_thread *'
|-FunctionDecl 0x55dc7db59048 <line:36:1, col:62> col:6 z_priq_dumb_add 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x55dc7db58f30 <col:22, col:35> col:35 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x55dc7db58fb8 <col:39, col:56> col:56 thread 'struct k_thread *'
|-RecordDecl 0x55dc7db590f8 <line:38:1, line:41:1> line:38:8 struct _priq_rb definition
| |-FieldDecl 0x55dc7db591c0 <line:39:2, col:16> col:16 tree 'struct rbtree':'struct rbtree'
| `-FieldDecl 0x55dc7db59220 <line:40:2, col:6> col:6 next_order_key 'int'
|-FunctionDecl 0x55dc7db59510 <line:43:1, col:64> col:6 z_priq_rb_add 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x55dc7db59370 <col:20, col:37> col:37 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x55dc7db593f8 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x55dc7db59700 <line:44:1, col:67> col:6 z_priq_rb_remove 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x55dc7db595e8 <col:23, col:40> col:40 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x55dc7db59670 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x55dc7db598f8 <line:45:1, col:52> col:18 z_priq_rb_best 'struct k_thread *(struct _priq_rb *)'
| `-ParmVarDecl 0x55dc7db597d8 <col:33, col:50> col:50 pq 'struct _priq_rb *'
|-RecordDecl 0x55dc7db599a0 <line:54:1, line:57:1> line:54:8 struct _priq_mq definition
| |-FieldDecl 0x55dc7db59ba8 <line:55:2, col:23> col:14 queues 'sys_dlist_t [32]'
| `-FieldDecl 0x55dc7db59c08 <line:56:2, col:15> col:15 bitmask 'unsigned int'
|-FunctionDecl 0x55dc7db59ed0 <line:59:1, col:64> col:6 z_priq_mq_add 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x55dc7db59d30 <col:20, col:37> col:37 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x55dc7db59db8 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x55dc7db5a0c0 <line:60:1, col:67> col:6 z_priq_mq_remove 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x55dc7db59fa8 <col:23, col:40> col:40 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x55dc7db5a030 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x55dc7db5a2b8 <line:61:1, col:52> col:18 z_priq_mq_best 'struct k_thread *(struct _priq_mq *)'
| `-ParmVarDecl 0x55dc7db5a198 <col:33, col:50> col:50 pq 'struct _priq_mq *'
|-RecordDecl 0x55dc7db5a388 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:29:1, line:31:1> line:29:8 struct _snode definition
| `-FieldDecl 0x55dc7db5a4e0 <line:30:2, col:17> col:17 referenced next 'struct _snode *'
|-TypedefDecl 0x55dc7db5a548 <line:33:1, col:23> col:23 referenced sys_snode_t 'struct _snode':'struct _snode'
| `-ElaboratedType 0x55dc7db5a430 'struct _snode' sugar
|   `-RecordType 0x55dc7db5a410 'struct _snode'
|     `-Record 0x55dc7db5a388 '_snode'
|-RecordDecl 0x55dc7db5a5a0 <line:35:1, line:38:1> line:35:8 struct _slist definition
| |-FieldDecl 0x55dc7db5a6a8 <line:36:2, col:15> col:15 referenced head 'sys_snode_t *'
| `-FieldDecl 0x55dc7db5a700 <line:37:2, col:15> col:15 referenced tail 'sys_snode_t *'
|-TypedefDecl 0x55dc7db5a7a0 <line:40:1, col:23> col:23 referenced sys_slist_t 'struct _slist':'struct _slist'
| `-ElaboratedType 0x55dc7db5a750 'struct _slist' sugar
|   `-RecordType 0x55dc7db5a630 'struct _slist'
|     `-Record 0x55dc7db5a5a0 '_slist'
|-FunctionDecl 0x55dc7db5aab0 <line:190:1, line:194:1> line:190:20 used sys_slist_init 'void (sys_slist_t *)' static inline
| |-ParmVarDecl 0x55dc7db5a9a8 <col:35, col:48> col:48 used list 'sys_slist_t *'
| |-CompoundStmt 0x55dc7db6fd58 <line:191:1, line:194:1>
| | |-BinaryOperator 0x55dc7db5ac68 <line:192:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| | | |-MemberExpr 0x55dc7db5ab98 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:192:2, col:8> 'sys_snode_t *' lvalue ->head 0x55dc7db5a6a8
| | | | `-ImplicitCastExpr 0x55dc7db5ab80 <col:2> 'sys_slist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55dc7db5ab58 <col:2> 'sys_slist_t *' lvalue ParmVar 0x55dc7db5a9a8 'list' 'sys_slist_t *'
| | | `-ImplicitCastExpr 0x55dc7db5ac50 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| | |   `-ParenExpr 0x55dc7db5ac30 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x55dc7db5ac08 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x55dc7db5abd0 <col:23> 'int' 0
| | `-BinaryOperator 0x55dc7db6fd30 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| |   |-MemberExpr 0x55dc7db6fc60 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, col:8> 'sys_snode_t *' lvalue ->tail 0x55dc7db5a700
| |   | `-ImplicitCastExpr 0x55dc7db5acb8 <col:2> 'sys_slist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55dc7db5ac90 <col:2> 'sys_slist_t *' lvalue ParmVar 0x55dc7db5a9a8 'list' 'sys_slist_t *'
| |   `-ImplicitCastExpr 0x55dc7db6fd18 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| |     `-ParenExpr 0x55dc7db6fcf8 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x55dc7db6fcd0 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x55dc7db6fc98 <col:23> 'int' 0
| `-FullComment 0x55dc7dc9ed80 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:186:3, line:188:50>
|   |-ParagraphComment 0x55dc7dc9ebc0 <line:186:3>
|   | `-TextComment 0x55dc7dc9eb90 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9ebe0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9ec40 <col:10, col:27>
|   |   `-TextComment 0x55dc7dc9ec10 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x55dc7dc9ec90 <line:188:3>
|   | `-TextComment 0x55dc7dc9ec60 <col:3> Text=" "
|   `-ParamCommandComment 0x55dc7dc9ecb0 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x55dc7dc9ed40 <col:15, col:50>
|       `-TextComment 0x55dc7dc9ed10 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x55dc7db6fe90 <line:198:1, line:201:1> line:198:28 used z_snode_next_peek 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db6fd88 <col:46, col:59> col:59 used node 'sys_snode_t *'
| `-CompoundStmt 0x55dc7db6ffe0 <line:199:1, line:201:1>
|   `-ReturnStmt 0x55dc7db6ffc8 <line:200:2, col:15>
|     `-ImplicitCastExpr 0x55dc7db6ffb0 <col:9, col:15> 'struct _snode *' <LValueToRValue>
|       `-MemberExpr 0x55dc7db6ff78 <col:9, col:15> 'struct _snode *' lvalue ->next 0x55dc7db5a4e0
|         `-ImplicitCastExpr 0x55dc7db6ff60 <col:9> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55dc7db6ff38 <col:9> 'sys_snode_t *' lvalue ParmVar 0x55dc7db6fd88 'node' 'sys_snode_t *'
|-FunctionDecl 0x55dc7db70190 <line:203:1, line:206:1> line:203:20 used z_snode_next_set 'void (sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db70008 <col:37, col:50> col:50 used parent 'sys_snode_t *'
| |-ParmVarDecl 0x55dc7db70078 <col:58, col:71> col:71 used child 'sys_snode_t *'
| `-CompoundStmt 0x55dc7db70320 <line:204:1, line:206:1>
|   `-BinaryOperator 0x55dc7db702f8 <line:205:2, col:17> 'struct _snode *' '='
|     |-MemberExpr 0x55dc7db70280 <col:2, col:10> 'struct _snode *' lvalue ->next 0x55dc7db5a4e0
|     | `-ImplicitCastExpr 0x55dc7db70268 <col:2> 'sys_snode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55dc7db70240 <col:2> 'sys_snode_t *' lvalue ParmVar 0x55dc7db70008 'parent' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x55dc7db702e0 <col:17> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7db702b8 <col:17> 'sys_snode_t *' lvalue ParmVar 0x55dc7db70078 'child' 'sys_snode_t *'
|-FunctionDecl 0x55dc7db704d0 <line:208:1, line:211:1> line:208:20 used z_slist_head_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db70348 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55dc7db703b8 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x55dc7db70660 <line:209:1, line:211:1>
|   `-BinaryOperator 0x55dc7db70638 <line:210:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x55dc7db705c0 <col:2, col:8> 'sys_snode_t *' lvalue ->head 0x55dc7db5a6a8
|     | `-ImplicitCastExpr 0x55dc7db705a8 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55dc7db70580 <col:2> 'sys_slist_t *' lvalue ParmVar 0x55dc7db70348 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x55dc7db70620 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7db705f8 <col:15> 'sys_snode_t *' lvalue ParmVar 0x55dc7db703b8 'node' 'sys_snode_t *'
|-FunctionDecl 0x55dc7db70788 <line:213:1, line:216:1> line:213:20 used z_slist_tail_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db70688 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55dc7db706f8 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x55dc7db70948 <line:214:1, line:216:1>
|   `-BinaryOperator 0x55dc7db708f0 <line:215:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x55dc7db70878 <col:2, col:8> 'sys_snode_t *' lvalue ->tail 0x55dc7db5a700
|     | `-ImplicitCastExpr 0x55dc7db70860 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55dc7db70838 <col:2> 'sys_slist_t *' lvalue ParmVar 0x55dc7db70688 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x55dc7db708d8 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7db708b0 <col:15> 'sys_snode_t *' lvalue ParmVar 0x55dc7db706f8 'node' 'sys_snode_t *'
|-FunctionDecl 0x55dc7db70a70 <line:225:1, line:228:1> line:225:28 used sys_slist_peek_head 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55dc7db70970 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x55dc7db70be8 <line:226:1, line:228:1>
| | `-ReturnStmt 0x55dc7db70ba8 <line:227:2, col:15>
| |   `-ImplicitCastExpr 0x55dc7db70b90 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x55dc7db70b58 <col:9, col:15> 'sys_snode_t *' lvalue ->head 0x55dc7db5a6a8
| |       `-ImplicitCastExpr 0x55dc7db70b40 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55dc7db70b18 <col:9> 'sys_slist_t *' lvalue ParmVar 0x55dc7db70970 'list' 'sys_slist_t *'
| `-FullComment 0x55dc7dc9f0c0 <line:219:3, line:223:68>
|   |-ParagraphComment 0x55dc7dc9ee20 <line:219:3>
|   | `-TextComment 0x55dc7dc9edf0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9ee40 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9eea0 <col:10, col:43>
|   |   `-TextComment 0x55dc7dc9ee70 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x55dc7dc9eef0 <line:221:3>
|   | `-TextComment 0x55dc7dc9eec0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9ef10 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9efa0 <col:15, col:62>
|   |   `-TextComment 0x55dc7dc9ef70 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x55dc7dc9eff0 <line:223:3>
|   | `-TextComment 0x55dc7dc9efc0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9f010 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x55dc7dc9f070 <col:11, col:68>
|       `-TextComment 0x55dc7dc9f040 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x55dc7db70d58 <line:237:1, line:240:1> line:237:28 used sys_slist_peek_tail 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55dc7db70cd0 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x55dc7db70ed8 <line:238:1, line:240:1>
| | `-ReturnStmt 0x55dc7db70e90 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x55dc7db70e78 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x55dc7db70e40 <col:9, col:15> 'sys_snode_t *' lvalue ->tail 0x55dc7db5a700
| |       `-ImplicitCastExpr 0x55dc7db70e28 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55dc7db70e00 <col:9> 'sys_slist_t *' lvalue ParmVar 0x55dc7db70cd0 'list' 'sys_slist_t *'
| `-FullComment 0x55dc7dc9f400 <line:231:3, line:235:67>
|   |-ParagraphComment 0x55dc7dc9f160 <line:231:3>
|   | `-TextComment 0x55dc7dc9f130 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9f180 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9f1e0 <col:10, col:42>
|   |   `-TextComment 0x55dc7dc9f1b0 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x55dc7dc9f230 <line:233:3>
|   | `-TextComment 0x55dc7dc9f200 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9f250 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9f2e0 <col:15, col:61>
|   |   `-TextComment 0x55dc7dc9f2b0 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x55dc7dc9f330 <line:235:3>
|   | `-TextComment 0x55dc7dc9f300 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9f350 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x55dc7dc9f3b0 <col:11, col:67>
|       `-TextComment 0x55dc7dc9f380 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x55dc7db71000 <line:253:1, col:56> col:20 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x55dc7db70f00 <col:39, col:52> col:52 list 'sys_slist_t *'
| `-FullComment 0x55dc7dc9f740 <line:247:3, line:251:57>
|   |-ParagraphComment 0x55dc7dc9f4a0 <line:247:3>
|   | `-TextComment 0x55dc7dc9f470 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9f4c0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9f520 <col:10, col:41>
|   |   `-TextComment 0x55dc7dc9f4f0 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x55dc7dc9f570 <line:249:3>
|   | `-TextComment 0x55dc7dc9f540 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9f590 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9f620 <col:15, col:44>
|   |   `-TextComment 0x55dc7dc9f5f0 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x55dc7dc9f670 <line:251:3>
|   | `-TextComment 0x55dc7dc9f640 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9f690 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x55dc7dc9f6f0 <col:11, col:57>
|       `-TextComment 0x55dc7dc9f6c0 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x55dc7db71140 prev 0x55dc7db71000 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:3:1 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x55dc7db710b8 <line:5:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_slist_t *'
| `-CompoundStmt 0x55dc7db71438 <line:60:2, line:62:2>
|   `-ReturnStmt 0x55dc7db713f0 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x55dc7db713d8 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x55dc7db713b8 <col:10, col:54> 'int'
|         `-BinaryOperator 0x55dc7db71390 <<scratch space>:7:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x55dc7db712b0 <<scratch space>:7:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_snode_t *'
|           | |-ImplicitCastExpr 0x55dc7db71298 <<scratch space>:7:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x55dc7db711e8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70a70 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|           | `-ImplicitCastExpr 0x55dc7db712e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_slist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x55dc7db71210 <col:41> 'sys_slist_t *' lvalue ParmVar 0x55dc7db710b8 'list' 'sys_slist_t *'
|           `-ImplicitCastExpr 0x55dc7db71378 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|             `-ParenExpr 0x55dc7db71358 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x55dc7db71330 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x55dc7db712f8 <col:23> 'int' 0
|-FunctionDecl 0x55dc7db714e8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:266:1, col:74> col:28 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db71460 <col:57, col:70> col:70 node 'sys_snode_t *'
| `-FullComment 0x55dc7dc9faf0 <line:258:3, line:264:55>
|   |-ParagraphComment 0x55dc7dc9f7f0 <line:258:3>
|   | `-TextComment 0x55dc7dc9f7c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9f810 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9f870 <col:10, col:64>
|   |   `-TextComment 0x55dc7dc9f840 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x55dc7dc9f8c0 <line:260:3, col:69>
|   | `-TextComment 0x55dc7dc9f890 <col:3, col:69> Text=" Faster then sys_slist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x55dc7dc9f910 <line:262:3>
|   | `-TextComment 0x55dc7dc9f8e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9f930 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9f9c0 <col:15, col:64>
|   |   `-TextComment 0x55dc7dc9f990 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x55dc7dc9fa10 <line:264:3>
|   | `-TextComment 0x55dc7dc9f9e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9fa30 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55dc7dc9fa90 <col:11, col:55>
|       `-TextComment 0x55dc7dc9fa60 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x55dc7db71628 prev 0x55dc7db714e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:11:1 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db715a0 <line:13:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_snode_t *'
| `-CompoundStmt 0x55dc7db71818 <line:67:2, line:69:2>
|   `-ReturnStmt 0x55dc7db717d8 <line:68:3, col:42>
|     `-CallExpr 0x55dc7db71790 <<scratch space>:15:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x55dc7db71778 <<scratch space>:15:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7db716d0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55dc7db6fe90 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       `-ImplicitCastExpr 0x55dc7db717c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_snode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7db716f8 <col:38> 'sys_snode_t *' lvalue ParmVar 0x55dc7db715a0 'node' 'sys_snode_t *'
|-FunctionDecl 0x55dc7db718c8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:277:1, col:65> col:28 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db71840 <col:48, col:61> col:61 node 'sys_snode_t *'
| `-FullComment 0x55dc7dc9fe30 <line:271:3, line:275:55>
|   |-ParagraphComment 0x55dc7dc9fb90 <line:271:3>
|   | `-TextComment 0x55dc7dc9fb60 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9fbb0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9fc10 <col:10, col:46>
|   |   `-TextComment 0x55dc7dc9fbe0 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x55dc7dc9fc60 <line:273:3>
|   | `-TextComment 0x55dc7dc9fc30 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dc9fc80 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dc9fd10 <col:15, col:64>
|   |   `-TextComment 0x55dc7dc9fce0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x55dc7dc9fd60 <line:275:3>
|   | `-TextComment 0x55dc7dc9fd30 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dc9fd80 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55dc7dc9fde0 <col:11, col:55>
|       `-TextComment 0x55dc7dc9fdb0 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x55dc7db71a08 prev 0x55dc7db718c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:19:1 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db71980 <line:21:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_snode_t *'
| `-CompoundStmt 0x55dc7db733f8 <line:74:2, line:78:2>
|   `-ReturnStmt 0x55dc7db733b8 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x55dc7db73388 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *'
|       |-BinaryOperator 0x55dc7db71b88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x55dc7db71b58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_snode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x55dc7db71ab0 <col:10> 'sys_snode_t *' lvalue ParmVar 0x55dc7db71980 'node' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x55dc7db71b70 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x55dc7db71b38 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x55dc7db71b10 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x55dc7db71ad8 <col:23> 'int' 0
|       |-CallExpr 0x55dc7db71c18 <<scratch space>:23:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_snode_t *'
|       | |-ImplicitCastExpr 0x55dc7db71c00 <<scratch space>:23:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55dc7db71bb0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55dc7db71628 'sys_slist_peek_next_no_check' 'sys_snode_t *(sys_snode_t *)'
|       | `-ImplicitCastExpr 0x55dc7db71c48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x55dc7db71bd8 <col:43> 'sys_snode_t *' lvalue ParmVar 0x55dc7db71980 'node' 'sys_snode_t *'
|       `-ImplicitCastExpr 0x55dc7db73370 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|         `-ParenExpr 0x55dc7db73350 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x55dc7db71c98 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x55dc7db71c60 <col:23> 'int' 0
|-FunctionDecl 0x55dc7db73520 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:289:1, line:290:27> line:289:20 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db73420 <col:38, col:51> col:51 list 'sys_slist_t *'
| |-ParmVarDecl 0x55dc7db73490 <line:290:10, col:23> col:23 node 'sys_snode_t *'
| `-FullComment 0x55dc7dca01c0 <line:282:3, line:287:47>
|   |-ParagraphComment 0x55dc7dc9fed0 <line:282:3>
|   | `-TextComment 0x55dc7dc9fea0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dc9fef0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55dc7dc9ff50 <col:10, col:42>
|   |   `-TextComment 0x55dc7dc9ff20 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x55dc7dc9ffa0 <line:284:3, col:62>
|   | `-TextComment 0x55dc7dc9ff70 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dc9fff0 <line:286:3>
|   | `-TextComment 0x55dc7dc9ffc0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca0010 <col:4, line:287:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca00c0 <line:286:15, line:287:3>
|   |   |-TextComment 0x55dc7dca0070 <line:286:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55dc7dca0090 <line:287:3> Text=" "
|   `-ParamCommandComment 0x55dc7dca00e0 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55dc7dca0170 <col:15, col:47>
|       `-TextComment 0x55dc7dca0140 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x55dc7db736e0 prev 0x55dc7db73520 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:25:1 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db735e0 <line:27:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55dc7db73650 <<scratch space>:29:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_snode_t *'
| `-CompoundStmt 0x55dc7db73df8 <line:84:2, line:93:2>
|   |-CallExpr 0x55dc7db73900 <<scratch space>:31:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x55dc7db738e8 <<scratch space>:31:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55dc7db73790 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55dc7db70190 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x55dc7db73938 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55dc7db737b8 <col:30> 'sys_snode_t *' lvalue ParmVar 0x55dc7db73650 'node' 'sys_snode_t *'
|   | `-CallExpr 0x55dc7db73848 <<scratch space>:33:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x55dc7db73830 <<scratch space>:33:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dc7db737e0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70a70 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x55dc7db73878 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dc7db73808 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55dc7db735e0 'list' 'sys_slist_t *'
|   |-CallExpr 0x55dc7db73a40 <<scratch space>:35:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x55dc7db73a28 <<scratch space>:35:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55dc7db73950 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55dc7db704d0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x55dc7db73a78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55dc7db73978 <col:30> 'sys_slist_t *' lvalue ParmVar 0x55dc7db735e0 'list' 'sys_slist_t *'
|   | `-ImplicitCastExpr 0x55dc7db73a90 <col:36> 'sys_snode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55dc7db739a0 <col:36> 'sys_snode_t *' lvalue ParmVar 0x55dc7db73650 'node' 'sys_snode_t *'
|   `-IfStmt 0x55dc7db73d98 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55dc7db73bf0 <<scratch space>:37:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x55dc7db73b10 <<scratch space>:37:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x55dc7db73af8 <<scratch space>:37:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55dc7db73aa8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70d58 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x55dc7db73b40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55dc7db73ad0 <col:37> 'sys_slist_t *' lvalue ParmVar 0x55dc7db735e0 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x55dc7db73bd8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x55dc7db73bb8 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55dc7db73b90 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55dc7db73b58 <col:23> 'int' 0
|     |-CompoundStmt 0x55dc7db73d80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x55dc7db73d30 <<scratch space>:39:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x55dc7db73d18 <<scratch space>:39:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55dc7db73c18 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55dc7db70788 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x55dc7db73d68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55dc7db73c40 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55dc7db735e0 'list' 'sys_slist_t *'
|     |   `-CallExpr 0x55dc7db73cd0 <<scratch space>:41:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_snode_t *'
|     |     |-ImplicitCastExpr 0x55dc7db73cb8 <<scratch space>:41:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x55dc7db73c68 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70a70 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|     |     `-ImplicitCastExpr 0x55dc7db73d00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_slist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x55dc7db73c90 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55dc7db735e0 'list' 'sys_slist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x55dc7db73f30 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:302:1, line:303:26> line:302:20 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db73e30 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x55dc7db73ea0 <line:303:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x55dc7dca0550 <line:295:3, line:300:46>
|   |-ParagraphComment 0x55dc7dca0260 <line:295:3>
|   | `-TextComment 0x55dc7dca0230 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca0280 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55dc7dca02e0 <col:10, col:41>
|   |   `-TextComment 0x55dc7dca02b0 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x55dc7dca0330 <line:297:3, col:62>
|   | `-TextComment 0x55dc7dca0300 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca0380 <line:299:3>
|   | `-TextComment 0x55dc7dca0350 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca03a0 <col:4, line:300:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca0450 <line:299:15, line:300:3>
|   |   |-TextComment 0x55dc7dca0400 <line:299:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55dc7dca0420 <line:300:3> Text=" "
|   `-ParamCommandComment 0x55dc7dca0470 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55dc7dca0500 <col:15, col:46>
|       `-TextComment 0x55dc7dca04d0 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x55dc7db740f0 prev 0x55dc7db73f30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:43:1 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db73ff0 <line:45:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55dc7db74060 <<scratch space>:47:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x55dc7db75628 <line:99:2, line:111:2>
|   |-CallExpr 0x55dc7db74288 <<scratch space>:49:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x55dc7db74270 <<scratch space>:49:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55dc7db741a0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55dc7db70190 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x55dc7db742c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55dc7db741c8 <col:30> 'sys_snode_t *' lvalue ParmVar 0x55dc7db74060 'node' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x55dc7db742d8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |   `-ParenExpr 0x55dc7db74250 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x55dc7db74228 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x55dc7db741f0 <col:23> 'int' 0
|   `-IfStmt 0x55dc7db755c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55dc7db75108 <<scratch space>:51:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x55dc7db75028 <<scratch space>:51:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x55dc7db75010 <<scratch space>:51:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55dc7db742f0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70d58 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x55dc7db75058 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55dc7db74318 <col:37> 'sys_slist_t *' lvalue ParmVar 0x55dc7db73ff0 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x55dc7db750f0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x55dc7db750d0 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55dc7db750a8 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55dc7db75070 <col:23> 'int' 0
|     |-CompoundStmt 0x55dc7db75320 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x55dc7db751c0 <<scratch space>:53:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x55dc7db751a8 <<scratch space>:53:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55dc7db75130 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55dc7db70788 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     | | |-ImplicitCastExpr 0x55dc7db751f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_slist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55dc7db75158 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55dc7db73ff0 'list' 'sys_slist_t *'
|     | | `-ImplicitCastExpr 0x55dc7db75210 <col:37> 'sys_snode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55dc7db75180 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55dc7db74060 'node' 'sys_snode_t *'
|     | `-CallExpr 0x55dc7db752b8 <<scratch space>:55:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x55dc7db752a0 <<scratch space>:55:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55dc7db75228 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55dc7db704d0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x55dc7db752f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55dc7db75250 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55dc7db73ff0 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x55dc7db75308 <col:37> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55dc7db75278 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55dc7db74060 'node' 'sys_snode_t *'
|     `-CompoundStmt 0x55dc7db755a0 <line:105:10, line:110:3>
|       |-CallExpr 0x55dc7db75458 <<scratch space>:57:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x55dc7db75440 <<scratch space>:57:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55dc7db75340 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55dc7db70190 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|       | |-CallExpr 0x55dc7db753d0 <line:59:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x55dc7db753b8 <<scratch space>:59:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55dc7db75368 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70d58 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|       | | `-ImplicitCastExpr 0x55dc7db75400 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_slist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x55dc7db75390 <col:35> 'sys_slist_t *' lvalue ParmVar 0x55dc7db73ff0 'list' 'sys_slist_t *'
|       | `-ImplicitCastExpr 0x55dc7db75490 <line:108:5> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x55dc7db75418 <col:5> 'sys_snode_t *' lvalue ParmVar 0x55dc7db74060 'node' 'sys_snode_t *'
|       `-CallExpr 0x55dc7db75538 <<scratch space>:61:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x55dc7db75520 <<scratch space>:61:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55dc7db754a8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55dc7db70788 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|         |-ImplicitCastExpr 0x55dc7db75570 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_slist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x55dc7db754d0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55dc7db73ff0 'list' 'sys_slist_t *'
|         `-ImplicitCastExpr 0x55dc7db75588 <col:37> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55dc7db754f8 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55dc7db74060 'node' 'sys_snode_t *'
|-FunctionDecl 0x55dc7db75880 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:320:1, line:321:29> line:320:20 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x55dc7db75658 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x55dc7db756d0 <line:321:7, col:13> col:13 head 'void *'
| |-ParmVarDecl 0x55dc7db75748 <col:19, col:25> col:25 tail 'void *'
| `-FullComment 0x55dc7dca0ab0 <line:308:3, line:318:66>
|   |-ParagraphComment 0x55dc7dca05f0 <line:308:3>
|   | `-TextComment 0x55dc7dca05c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca0610 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55dc7dca0670 <col:10, col:41>
|   |   `-TextComment 0x55dc7dca0640 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x55dc7dca0760 <line:310:3, line:312:62>
|   | |-TextComment 0x55dc7dca0690 <line:310:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x55dc7dca06b0 <line:311:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x55dc7dca0700 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x55dc7dca0720 <line:312:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca07b0 <line:314:3, col:48>
|   | `-TextComment 0x55dc7dca0780 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x55dc7dca0800 <line:316:3>
|   | `-TextComment 0x55dc7dca07d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca0820 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca08d0 <line:316:15, line:317:3>
|   |   |-TextComment 0x55dc7dca0880 <line:316:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55dc7dca08a0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca08f0 <col:4, line:318:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dca09a0 <line:317:15, line:318:3>
|   |   |-TextComment 0x55dc7dca0950 <line:317:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x55dc7dca0970 <line:318:3> Text=" "
|   `-ParamCommandComment 0x55dc7dca09c0 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x55dc7dca0a50 <col:15, col:66>
|       `-TextComment 0x55dc7dca0a20 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x55dc7db75ad0 prev 0x55dc7db75880 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:63:1 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x55dc7db75948 <line:65:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55dc7db759c0 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x55dc7db75a38 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x55dc7db761b8 <col:31, line:127:42>
|   |-IfStmt 0x55dc7db76020 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55dc7db75cd0 <<scratch space>:67:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x55dc7db75bf0 <<scratch space>:67:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x55dc7db75bd8 <<scratch space>:67:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55dc7db75b88 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70d58 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x55dc7db75c20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dc7db75bb0 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55dc7db75948 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x55dc7db75cb8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x55dc7db75c98 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55dc7db75c70 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55dc7db75c38 <col:23> 'int' 0
|   | |-CompoundStmt 0x55dc7db75e28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x55dc7db75dd8 <<scratch space>:69:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x55dc7db75dc0 <<scratch space>:69:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55dc7db75cf8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55dc7db704d0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x55dc7db75e10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55dc7db75d20 <col:30> 'sys_slist_t *' lvalue ParmVar 0x55dc7db75948 'list' 'sys_slist_t *'
|   | |   `-CStyleCastExpr 0x55dc7db75d98 <line:120:6, col:31> 'sys_snode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x55dc7db75d80 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55dc7db75d48 <col:31> 'void *' lvalue ParmVar 0x55dc7db759c0 'head' 'void *'
|   | `-CompoundStmt 0x55dc7db75fe0 <line:121:9, line:125:2>
|   |   `-CallExpr 0x55dc7db75fa8 <<scratch space>:73:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x55dc7db75f90 <<scratch space>:73:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55dc7db75e40 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55dc7db70190 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |     |-CallExpr 0x55dc7db75ed0 <line:75:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_snode_t *'
|   |     | |-ImplicitCastExpr 0x55dc7db75eb8 <<scratch space>:75:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x55dc7db75e68 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70d58 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | `-ImplicitCastExpr 0x55dc7db75f00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_slist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55dc7db75e90 <col:34> 'sys_slist_t *' lvalue ParmVar 0x55dc7db75948 'list' 'sys_slist_t *'
|   |     `-CStyleCastExpr 0x55dc7db75f68 <line:124:4, col:29> 'sys_snode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x55dc7db75f50 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x55dc7db75f18 <col:29> 'void *' lvalue ParmVar 0x55dc7db759c0 'head' 'void *'
|   `-CallExpr 0x55dc7db76138 <<scratch space>:79:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x55dc7db76120 <<scratch space>:79:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7db76058 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55dc7db70788 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x55dc7db76170 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_slist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x55dc7db76080 <col:29> 'sys_slist_t *' lvalue ParmVar 0x55dc7db75948 'list' 'sys_slist_t *'
|     `-CStyleCastExpr 0x55dc7db760f8 <line:127:10, col:35> 'sys_snode_t *' <BitCast>
|       `-ImplicitCastExpr 0x55dc7db760e0 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7db760a8 <col:35> 'void *' lvalue ParmVar 0x55dc7db75a38 'tail' 'void *'
|-FunctionDecl 0x55dc7db76370 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:334:1, line:335:34> line:334:20 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x55dc7db761e8 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x55dc7db76258 <line:335:7, col:20> col:20 list_to_append 'sys_slist_t *'
| `-FullComment 0x55dc7dca0e60 <line:326:3, line:332:57>
|   |-ParagraphComment 0x55dc7dca0b50 <line:326:3>
|   | `-TextComment 0x55dc7dca0b20 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca0b70 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x55dc7dca0bd0 <col:10, col:65>
|   |   `-TextComment 0x55dc7dca0ba0 <col:10, col:65> Text=" merge two slists, appending the second one to the first"
|   |-ParagraphComment 0x55dc7dca0c40 <line:328:3, line:329:62>
|   | |-TextComment 0x55dc7dca0bf0 <line:328:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x55dc7dca0c10 <line:329:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca0c90 <line:331:3>
|   | `-TextComment 0x55dc7dca0c60 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca0cb0 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca0d60 <line:331:15, line:332:3>
|   |   |-TextComment 0x55dc7dca0d10 <line:331:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55dc7dca0d30 <line:332:3> Text=" "
|   `-ParamCommandComment 0x55dc7dca0d80 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x55dc7dca0e10 <col:25, col:57>
|       `-TextComment 0x55dc7dca0de0 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x55dc7db76530 prev 0x55dc7db76370 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:84:1 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x55dc7db76430 <line:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55dc7db764a0 <<scratch space>:88:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_slist_t *'
| `-CompoundStmt 0x55dc7db76bf8 <line:135:2, line:141:2>
|   |-DeclStmt 0x55dc7db766d8 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x55dc7db765f0 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_snode_t *'
|   | `-VarDecl 0x55dc7db76660 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_snode_t *'
|   |-BinaryOperator 0x55dc7db767c8 <line:137:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x55dc7db766f0 <col:3> 'sys_snode_t *' lvalue Var 0x55dc7db765f0 'head' 'sys_snode_t *'
|   | `-CallExpr 0x55dc7db76780 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x55dc7db76768 <<scratch space>:92:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dc7db76718 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70a70 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x55dc7db767b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dc7db76740 <col:40> 'sys_slist_t *' lvalue ParmVar 0x55dc7db764a0 'list_to_append' 'sys_slist_t *'
|   |-BinaryOperator 0x55dc7db768c8 <line:138:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x55dc7db767f0 <col:3> 'sys_snode_t *' lvalue Var 0x55dc7db76660 'tail' 'sys_snode_t *'
|   | `-CallExpr 0x55dc7db76880 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x55dc7db76868 <<scratch space>:94:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dc7db76818 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70d58 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x55dc7db768b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dc7db76840 <col:40> 'sys_slist_t *' lvalue ParmVar 0x55dc7db764a0 'list_to_append' 'sys_slist_t *'
|   |-CallExpr 0x55dc7db76a00 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x55dc7db769e8 <<scratch space>:96:1> 'void (*)(sys_slist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55dc7db768f0 <col:1> 'void (sys_slist_t *, void *, void *)' Function 0x55dc7db75ad0 'sys_slist_append_list' 'void (sys_slist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x55dc7db76a40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55dc7db76918 <col:35> 'sys_slist_t *' lvalue ParmVar 0x55dc7db76430 'list' 'sys_slist_t *'
|   | |-ImplicitCastExpr 0x55dc7db76a70 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x55dc7db76a58 <col:41> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55dc7db76940 <col:41> 'sys_snode_t *' lvalue Var 0x55dc7db765f0 'head' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x55dc7db76aa0 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x55dc7db76a88 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dc7db76968 <col:47> 'sys_snode_t *' lvalue Var 0x55dc7db76660 'tail' 'sys_snode_t *'
|   `-CallExpr 0x55dc7db76b80 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x55dc7db76b68 <<scratch space>:98:1> 'void (*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7db76ab8 <col:1> 'void (sys_slist_t *)' Function 0x55dc7db5aab0 'sys_slist_init' 'void (sys_slist_t *)'
|     `-ImplicitCastExpr 0x55dc7db76bb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_slist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7db76ae0 <col:28> 'sys_slist_t *' lvalue ParmVar 0x55dc7db764a0 'list_to_append' 'sys_slist_t *'
|-FunctionDecl 0x55dc7db76e50 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:348:1, line:350:26> line:348:20 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db76c40 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x55dc7db76cb0 <line:349:9, col:22> col:22 prev 'sys_snode_t *'
| |-ParmVarDecl 0x55dc7db76d20 <line:350:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x55dc7dca12d0 <line:340:3, line:346:46>
|   |-ParagraphComment 0x55dc7dca0f00 <line:340:3>
|   | `-TextComment 0x55dc7dca0ed0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca0f20 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55dc7dca0f80 <col:10, col:41>
|   |   `-TextComment 0x55dc7dca0f50 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x55dc7dca0fd0 <line:342:3, col:62>
|   | `-TextComment 0x55dc7dca0fa0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca1020 <line:344:3>
|   | `-TextComment 0x55dc7dca0ff0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca1040 <col:4, line:345:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca10f0 <line:344:15, line:345:3>
|   |   |-TextComment 0x55dc7dca10a0 <line:344:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55dc7dca10c0 <line:345:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca1110 <col:4, line:346:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dca11c0 <line:345:15, line:346:3>
|   |   |-TextComment 0x55dc7dca1170 <line:345:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x55dc7dca1190 <line:346:3> Text=" "
|   `-ParamCommandComment 0x55dc7dca11e0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x55dc7dca1270 <col:15, col:46>
|       `-TextComment 0x55dc7dca1240 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x55dc7db7a0b8 prev 0x55dc7db76e50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:100:1 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db76f18 <line:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55dc7db76f88 <<scratch space>:104:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_snode_t *'
| |-ParmVarDecl 0x55dc7db7a020 <<scratch space>:106:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x55dc7db7a918 <line:148:2, line:158:2>
|   `-IfStmt 0x55dc7db7a8b8 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55dc7db7a248 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x55dc7db7a218 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_snode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x55dc7db7a170 <col:7> 'sys_snode_t *' lvalue ParmVar 0x55dc7db76f88 'prev' 'sys_snode_t *'
|     | `-ImplicitCastExpr 0x55dc7db7a230 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x55dc7db7a1f8 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55dc7db7a1d0 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55dc7db7a198 <col:23> 'int' 0
|     |-CompoundStmt 0x55dc7db7a368 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x55dc7db7a300 <<scratch space>:108:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x55dc7db7a2e8 <<scratch space>:108:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55dc7db7a270 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55dc7db736e0 'sys_slist_prepend' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x55dc7db7a338 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55dc7db7a298 <col:32> 'sys_slist_t *' lvalue ParmVar 0x55dc7db76f18 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x55dc7db7a350 <col:38> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55dc7db7a2c0 <col:38> 'sys_snode_t *' lvalue ParmVar 0x55dc7db7a020 'node' 'sys_snode_t *'
|     `-IfStmt 0x55dc7db7a880 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x55dc7db7a4c8 <<scratch space>:110:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x55dc7db7a3e8 <<scratch space>:110:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x55dc7db7a3d0 <<scratch space>:110:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55dc7db7a380 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55dc7db6fe90 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       | | `-ImplicitCastExpr 0x55dc7db7a418 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_snode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x55dc7db7a3a8 <col:42> 'sys_snode_t *' lvalue ParmVar 0x55dc7db76f88 'prev' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x55dc7db7a4b0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x55dc7db7a490 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x55dc7db7a468 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x55dc7db7a430 <col:23> 'int' 0
|       |-CompoundStmt 0x55dc7db7a5e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x55dc7db7a580 <<scratch space>:112:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x55dc7db7a568 <<scratch space>:112:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55dc7db7a4f0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55dc7db740f0 'sys_slist_append' 'void (sys_slist_t *, sys_snode_t *)'
|       |   |-ImplicitCastExpr 0x55dc7db7a5b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_slist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x55dc7db7a518 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55dc7db76f18 'list' 'sys_slist_t *'
|       |   `-ImplicitCastExpr 0x55dc7db7a5d0 <col:37> 'sys_snode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55dc7db7a540 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55dc7db7a020 'node' 'sys_snode_t *'
|       `-CompoundStmt 0x55dc7db7a860 <line:153:10, line:157:3>
|         |-CallExpr 0x55dc7db7a718 <<scratch space>:114:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x55dc7db7a700 <<scratch space>:114:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x55dc7db7a600 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55dc7db70190 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|         | |-ImplicitCastExpr 0x55dc7db7a750 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_snode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x55dc7db7a628 <col:31> 'sys_snode_t *' lvalue ParmVar 0x55dc7db7a020 'node' 'sys_snode_t *'
|         | `-CallExpr 0x55dc7db7a6b8 <<scratch space>:116:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_snode_t *'
|         |   |-ImplicitCastExpr 0x55dc7db7a6a0 <<scratch space>:116:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x55dc7db7a650 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55dc7db6fe90 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|         |   `-ImplicitCastExpr 0x55dc7db7a6e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_snode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x55dc7db7a678 <col:33> 'sys_snode_t *' lvalue ParmVar 0x55dc7db76f88 'prev' 'sys_snode_t *'
|         `-CallExpr 0x55dc7db7a7f8 <<scratch space>:118:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x55dc7db7a7e0 <<scratch space>:118:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x55dc7db7a768 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55dc7db70190 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|           |-ImplicitCastExpr 0x55dc7db7a830 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_snode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x55dc7db7a790 <col:31> 'sys_snode_t *' lvalue ParmVar 0x55dc7db76f88 'prev' 'sys_snode_t *'
|           `-ImplicitCastExpr 0x55dc7db7a848 <col:37> 'sys_snode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x55dc7db7a7b8 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55dc7db7a020 'node' 'sys_snode_t *'
|-FunctionDecl 0x55dc7db7a9c8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:364:1, col:69> col:28 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55dc7db7a940 <col:52, col:65> col:65 list 'sys_slist_t *'
| `-FullComment 0x55dc7dca1690 <line:355:3, line:362:50>
|   |-ParagraphComment 0x55dc7dca1370 <line:355:3>
|   | `-TextComment 0x55dc7dca1340 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca1390 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55dc7dca13f0 <col:10, col:59>
|   |   `-TextComment 0x55dc7dca13c0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x55dc7dca1460 <line:357:3, line:358:62>
|   | |-TextComment 0x55dc7dca1410 <line:357:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x55dc7dca1430 <line:358:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca14b0 <line:360:3>
|   | `-TextComment 0x55dc7dca1480 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca14d0 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca1560 <col:15, col:46>
|   |   `-TextComment 0x55dc7dca1530 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x55dc7dca15b0 <line:362:3>
|   | `-TextComment 0x55dc7dca1580 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca15d0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x55dc7dca1630 <col:11, col:50>
|       `-TextComment 0x55dc7dca1600 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x55dc7db7ab08 prev 0x55dc7db7a9c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:122:1 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55dc7db7aa80 <line:124:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_slist_t *'
| `-CompoundStmt 0x55dc7db7b1b8 <line:163:2, line:175:2>
|   |-DeclStmt 0x55dc7db7acd0 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x55dc7db7abc0 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_snode_t *' cinit
|   |   `-CallExpr 0x55dc7db7ac88 <<scratch space>:128:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_snode_t *'
|   |     |-ImplicitCastExpr 0x55dc7db7ac70 <<scratch space>:128:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55dc7db7ac20 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70a70 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |     `-ImplicitCastExpr 0x55dc7db7acb8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_slist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55dc7db7ac48 <col:35> 'sys_slist_t *' lvalue ParmVar 0x55dc7db7aa80 'list' 'sys_slist_t *'
|   |-CallExpr 0x55dc7db7ae00 <<scratch space>:130:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x55dc7db7ade8 <<scratch space>:130:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55dc7db7ace8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55dc7db704d0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x55dc7db7ae38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55dc7db7ad10 <col:30> 'sys_slist_t *' lvalue ParmVar 0x55dc7db7aa80 'list' 'sys_slist_t *'
|   | `-CallExpr 0x55dc7db7ada0 <<scratch space>:132:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x55dc7db7ad88 <<scratch space>:132:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dc7db7ad38 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55dc7db6fe90 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   `-ImplicitCastExpr 0x55dc7db7add0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dc7db7ad60 <col:33> 'sys_snode_t *' lvalue Var 0x55dc7db7abc0 'node' 'sys_snode_t *'
|   |-IfStmt 0x55dc7db7b0f8 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55dc7db7af40 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x55dc7db7aeb8 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x55dc7db7aea0 <<scratch space>:134:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55dc7db7ae50 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70d58 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x55dc7db7aee8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dc7db7ae78 <col:37> 'sys_slist_t *' lvalue ParmVar 0x55dc7db7aa80 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x55dc7db7af28 <col:46> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55dc7db7af00 <col:46> 'sys_snode_t *' lvalue Var 0x55dc7db7abc0 'node' 'sys_snode_t *'
|   | |-CompoundStmt 0x55dc7db7b0e0 <col:52, line:172:3>
|   | | `-CallExpr 0x55dc7db7b090 <<scratch space>:136:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x55dc7db7b078 <<scratch space>:136:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55dc7db7af68 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55dc7db70788 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x55dc7db7b0c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55dc7db7af90 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55dc7db7aa80 'list' 'sys_slist_t *'
|   | |   `-CallExpr 0x55dc7db7b030 <<scratch space>:138:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_snode_t *'
|   | |     |-ImplicitCastExpr 0x55dc7db7b008 <<scratch space>:138:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x55dc7db7afb8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70a70 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |     `-ImplicitCastExpr 0x55dc7db7b060 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_slist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55dc7db7afe0 <col:35> 'sys_slist_t *' lvalue ParmVar 0x55dc7db7aa80 'list' 'sys_slist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55dc7db7b170 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x55dc7db7b158 <col:10> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7db7b130 <col:10> 'sys_snode_t *' lvalue Var 0x55dc7db7abc0 'node' 'sys_snode_t *'
|-FunctionDecl 0x55dc7db7b280 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:377:1, col:59> col:28 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55dc7db7b1f8 <col:42, col:55> col:55 list 'sys_slist_t *'
| `-FullComment 0x55dc7dca1a40 <line:369:3, line:375:69>
|   |-ParagraphComment 0x55dc7dca1730 <line:369:3>
|   | `-TextComment 0x55dc7dca1700 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca1750 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55dc7dca17c0 <col:10, col:59>
|   |   `-TextComment 0x55dc7dca1790 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x55dc7dca1810 <line:371:3, col:62>
|   | `-TextComment 0x55dc7dca17e0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca1860 <line:373:3>
|   | `-TextComment 0x55dc7dca1830 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca1880 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca1910 <col:15, col:46>
|   |   `-TextComment 0x55dc7dca18e0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x55dc7dca1960 <line:375:3>
|   | `-TextComment 0x55dc7dca1930 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca1980 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x55dc7dca19e0 <col:11, col:69>
|       `-TextComment 0x55dc7dca19b0 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x55dc7db7b3c0 prev 0x55dc7db7b280 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:142:1 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55dc7db7b338 <line:144:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_slist_t *'
| `-CompoundStmt 0x55dc7db7b748 <line:180:2, line:183:2>
|   `-ReturnStmt 0x55dc7db7b708 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x55dc7db7b6d8 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x55dc7db7b6a8 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x55dc7db7b530 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x55dc7db7b518 <<scratch space>:146:1> 'bool (*)(sys_slist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55dc7db7b468 <col:1> 'bool (sys_slist_t *)' Function 0x55dc7db71140 'sys_slist_is_empty' 'bool (sys_slist_t *)'
|       |   `-ImplicitCastExpr 0x55dc7db7b560 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_slist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55dc7db7b490 <col:39> 'sys_slist_t *' lvalue ParmVar 0x55dc7db7b338 'list' 'sys_slist_t *'
|       |-ImplicitCastExpr 0x55dc7db7b6c0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       | `-ParenExpr 0x55dc7db7b5d8 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x55dc7db7b5b0 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x55dc7db7b578 <col:23> 'int' 0
|       `-CallExpr 0x55dc7db7b660 <<scratch space>:148:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|         |-ImplicitCastExpr 0x55dc7db7b648 <<scratch space>:148:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55dc7db7b5f8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db7ab08 'sys_slist_get_not_empty' 'sys_snode_t *(sys_slist_t *)'
|         `-ImplicitCastExpr 0x55dc7db7b690 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_slist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55dc7db7b620 <col:38> 'sys_slist_t *' lvalue ParmVar 0x55dc7db7b338 'list' 'sys_slist_t *'
|-FunctionDecl 0x55dc7db7b8e8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:391:1, line:393:26> line:391:20 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db7b770 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x55dc7db7b7e0 <line:392:9, col:22> col:22 prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x55dc7db7b850 <line:393:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x55dc7dca1ee0 <line:382:3, line:389:46>
|   |-ParagraphComment 0x55dc7dca1ae0 <line:382:3>
|   | `-TextComment 0x55dc7dca1ab0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca1b00 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x55dc7dca1b60 <col:10, col:23>
|   |   `-TextComment 0x55dc7dca1b30 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x55dc7dca1bb0 <line:384:3, col:62>
|   | `-TextComment 0x55dc7dca1b80 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca1c00 <line:386:3>
|   | `-TextComment 0x55dc7dca1bd0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca1c20 <col:4, line:387:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca1cd0 <line:386:15, line:387:3>
|   |   |-TextComment 0x55dc7dca1c80 <line:386:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55dc7dca1ca0 <line:387:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca1cf0 <col:4, line:389:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dca1dd0 <line:387:20, line:389:3>
|   |   |-TextComment 0x55dc7dca1d50 <line:387:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x55dc7dca1d70 <line:388:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x55dc7dca1d90 <line:389:3> Text=" "
|   `-ParamCommandComment 0x55dc7dca1df0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x55dc7dca1e80 <col:15, col:46>
|       `-TextComment 0x55dc7dca1e50 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x55dc7db7bb28 prev 0x55dc7db7b8e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:150:1 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db7b9b0 <line:152:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55dc7db7ba20 <<scratch space>:154:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x55dc7db7ba90 <<scratch space>:156:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x55dc7db7c6f8 <line:190:2, line:212:2>
|   |-IfStmt 0x55dc7db7c548 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55dc7db7bcb8 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x55dc7db7bc88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55dc7db7bbe0 <col:7> 'sys_snode_t *' lvalue ParmVar 0x55dc7db7ba20 'prev_node' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x55dc7db7bca0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x55dc7db7bc68 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55dc7db7bc40 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55dc7db7bc08 <col:23> 'int' 0
|   | |-CompoundStmt 0x55dc7db7c140 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x55dc7db7bdf8 <<scratch space>:158:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x55dc7db7bde0 <<scratch space>:158:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55dc7db7bce0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55dc7db704d0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | | | |-ImplicitCastExpr 0x55dc7db7be30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_slist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55dc7db7bd08 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55dc7db7b9b0 'list' 'sys_slist_t *'
|   | | | `-CallExpr 0x55dc7db7bd98 <<scratch space>:160:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_snode_t *'
|   | | |   |-ImplicitCastExpr 0x55dc7db7bd80 <<scratch space>:160:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x55dc7db7bd30 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55dc7db6fe90 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   | | |   `-ImplicitCastExpr 0x55dc7db7bdc8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_snode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dc7db7bd58 <col:33> 'sys_snode_t *' lvalue ParmVar 0x55dc7db7ba90 'node' 'sys_snode_t *'
|   | | `-IfStmt 0x55dc7db7c108 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x55dc7db7bf38 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x55dc7db7beb0 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_snode_t *'
|   | |   | | |-ImplicitCastExpr 0x55dc7db7be98 <<scratch space>:162:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x55dc7db7be48 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70d58 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | |   | | `-ImplicitCastExpr 0x55dc7db7bee0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_slist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x55dc7db7be70 <col:38> 'sys_slist_t *' lvalue ParmVar 0x55dc7db7b9b0 'list' 'sys_slist_t *'
|   | |   | `-ImplicitCastExpr 0x55dc7db7bf20 <col:47> 'sys_snode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x55dc7db7bef8 <col:47> 'sys_snode_t *' lvalue ParmVar 0x55dc7db7ba90 'node' 'sys_snode_t *'
|   | |   |-CompoundStmt 0x55dc7db7c0f0 <col:53, line:199:4>
|   | |   | `-CallExpr 0x55dc7db7c0a0 <<scratch space>:164:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x55dc7db7c088 <<scratch space>:164:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x55dc7db7bf60 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55dc7db70788 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |   |-ImplicitCastExpr 0x55dc7db7c0d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_slist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x55dc7db7bf88 <col:32> 'sys_slist_t *' lvalue ParmVar 0x55dc7db7b9b0 'list' 'sys_slist_t *'
|   | |   |   `-CallExpr 0x55dc7db7c040 <<scratch space>:166:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_snode_t *'
|   | |   |     |-ImplicitCastExpr 0x55dc7db7c000 <<scratch space>:166:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x55dc7db7bfb0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70a70 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   |     `-ImplicitCastExpr 0x55dc7db7c070 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_slist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x55dc7db7bfd8 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55dc7db7b9b0 'list' 'sys_slist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x55dc7db7c528 <line:200:10, line:209:3>
|   |   |-CallExpr 0x55dc7db7c278 <<scratch space>:168:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x55dc7db7c260 <<scratch space>:168:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x55dc7db7c160 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55dc7db70190 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |   | |-ImplicitCastExpr 0x55dc7db7c2b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_snode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x55dc7db7c188 <col:31> 'sys_snode_t *' lvalue ParmVar 0x55dc7db7ba20 'prev_node' 'sys_snode_t *'
|   |   | `-CallExpr 0x55dc7db7c218 <<scratch space>:170:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_snode_t *'
|   |   |   |-ImplicitCastExpr 0x55dc7db7c200 <<scratch space>:170:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x55dc7db7c1b0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55dc7db6fe90 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   |   `-ImplicitCastExpr 0x55dc7db7c248 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_snode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55dc7db7c1d8 <col:33> 'sys_snode_t *' lvalue ParmVar 0x55dc7db7ba90 'node' 'sys_snode_t *'
|   |   `-IfStmt 0x55dc7db7c4f0 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x55dc7db7c3b8 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x55dc7db7c330 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_snode_t *'
|   |     | | |-ImplicitCastExpr 0x55dc7db7c318 <<scratch space>:172:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x55dc7db7c2c8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70d58 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | | `-ImplicitCastExpr 0x55dc7db7c360 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_slist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55dc7db7c2f0 <col:38> 'sys_slist_t *' lvalue ParmVar 0x55dc7db7b9b0 'list' 'sys_slist_t *'
|   |     | `-ImplicitCastExpr 0x55dc7db7c3a0 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55dc7db7c378 <col:47> 'sys_snode_t *' lvalue ParmVar 0x55dc7db7ba90 'node' 'sys_snode_t *'
|   |     |-CompoundStmt 0x55dc7db7c4d8 <col:53, line:208:4>
|   |     | `-CallExpr 0x55dc7db7c470 <<scratch space>:174:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x55dc7db7c458 <<scratch space>:174:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x55dc7db7c3e0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55dc7db70788 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   |     |   |-ImplicitCastExpr 0x55dc7db7c4a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_slist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x55dc7db7c408 <col:32> 'sys_slist_t *' lvalue ParmVar 0x55dc7db7b9b0 'list' 'sys_slist_t *'
|   |     |   `-ImplicitCastExpr 0x55dc7db7c4c0 <line:207:13> 'sys_snode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55dc7db7c430 <col:13> 'sys_snode_t *' lvalue ParmVar 0x55dc7db7ba20 'prev_node' 'sys_snode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x55dc7db7c668 <<scratch space>:176:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x55dc7db7c650 <<scratch space>:176:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7db7c580 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55dc7db70190 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x55dc7db7c6a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_snode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x55dc7db7c5a8 <col:30> 'sys_snode_t *' lvalue ParmVar 0x55dc7db7ba90 'node' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x55dc7db7c6b8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       `-ParenExpr 0x55dc7db7c630 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x55dc7db7c608 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x55dc7db7c5d0 <col:23> 'int' 0
|-FunctionDecl 0x55dc7db7c8b0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:407:1, line:408:28> line:407:20 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db7c728 <col:46, col:59> col:59 list 'sys_slist_t *'
| |-ParmVarDecl 0x55dc7db7c798 <line:408:11, col:24> col:24 node 'sys_snode_t *'
| `-FullComment 0x55dc7dca2350 <line:398:3, line:405:35>
|   |-ParagraphComment 0x55dc7dca1f80 <line:398:3>
|   | `-TextComment 0x55dc7dca1f50 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca1fa0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55dc7dca2000 <col:10, col:44>
|   |   `-TextComment 0x55dc7dca1fd0 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x55dc7dca2050 <line:400:3, col:62>
|   | `-TextComment 0x55dc7dca2020 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca20a0 <line:402:3>
|   | `-TextComment 0x55dc7dca2070 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca20c0 <col:4, line:403:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca2170 <line:402:15, line:403:3>
|   |   |-TextComment 0x55dc7dca2120 <line:402:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55dc7dca2140 <line:403:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca2190 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dca2220 <col:15, col:60>
|   |   `-TextComment 0x55dc7dca21f0 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x55dc7dca2270 <line:405:3>
|   | `-TextComment 0x55dc7dca2240 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca2290 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dca22f0 <col:11, col:35>
|       `-TextComment 0x55dc7dca22c0 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x55dc7db7ca70 prev 0x55dc7db7c8b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:178:1 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55dc7db7c970 <line:180:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55dc7db7c9e0 <<scratch space>:182:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_snode_t *'
| `-CompoundStmt 0x55dc7db7f5b8 <line:218:2, line:233:2>
|   |-DeclStmt 0x55dc7db7cc28 <<scratch space>:184:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x55dc7db7cb30 <<scratch space>:184:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_snode_t *' cinit
|   |   `-ImplicitCastExpr 0x55dc7db7cc10 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |     `-ParenExpr 0x55dc7db7cbf0 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x55dc7db7cbc8 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x55dc7db7cb90 <col:23> 'int' 0
|   |-DeclStmt 0x55dc7db7ccb0 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x55dc7db7cc50 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_snode_t *'
|   |-ForStmt 0x55dc7db7f500 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x55dc7db7cda0 <line:222:42, line:15:47> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x55dc7db7ccc8 <line:222:42> 'sys_snode_t *' lvalue Var 0x55dc7db7cc50 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x55dc7db7cd58 <<scratch space>:188:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x55dc7db7cd40 <<scratch space>:188:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55dc7db7ccf0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55dc7db70a70 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   `-ImplicitCastExpr 0x55dc7db7cd88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_slist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55dc7db7cd18 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55dc7db7c970 'list' 'sys_slist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55dc7db7cea0 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x55dc7db7ce70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55dc7db7cdc8 <col:42> 'sys_snode_t *' lvalue Var 0x55dc7db7cc50 'test' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x55dc7db7ce88 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x55dc7db7ce50 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55dc7db7ce28 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55dc7db7cdf0 <col:23> 'int' 0
|   | |-BinaryOperator 0x55dc7db7cfa0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x55dc7db7cec8 <line:222:42> 'sys_snode_t *' lvalue Var 0x55dc7db7cc50 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x55dc7db7cf58 <<scratch space>:190:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x55dc7db7cf40 <<scratch space>:190:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55dc7db7cef0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55dc7db71a08 'sys_slist_peek_next' 'sys_snode_t *(sys_snode_t *)'
|   | |   `-ImplicitCastExpr 0x55dc7db7cf88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55dc7db7cf18 <col:42> 'sys_snode_t *' lvalue Var 0x55dc7db7cc50 'test' 'sys_snode_t *'
|   | `-CompoundStmt 0x55dc7db7f4e0 <col:48, line:230:3>
|   |   |-IfStmt 0x55dc7db7f418 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x55dc7db7f1e8 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x55dc7db7d018 <col:8> 'sys_snode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x55dc7db7cfc8 <col:8> 'sys_snode_t *' lvalue Var 0x55dc7db7cc50 'test' 'sys_snode_t *'
|   |   | | `-ImplicitCastExpr 0x55dc7db7f1d0 <col:16> 'sys_snode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55dc7db7cff0 <col:16> 'sys_snode_t *' lvalue ParmVar 0x55dc7db7c9e0 'node' 'sys_snode_t *'
|   |   | |-CompoundStmt 0x55dc7db7f3f8 <col:22, line:227:4>
|   |   | | |-CallExpr 0x55dc7db7f320 <<scratch space>:192:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x55dc7db7f308 <<scratch space>:192:1> 'void (*)(sys_slist_t *, sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x55dc7db7f210 <col:1> 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' Function 0x55dc7db7bb28 'sys_slist_remove' 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)'
|   |   | | | |-ImplicitCastExpr 0x55dc7db7f360 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_slist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x55dc7db7f238 <col:32> 'sys_slist_t *' lvalue ParmVar 0x55dc7db7c970 'list' 'sys_slist_t *'
|   |   | | | |-ImplicitCastExpr 0x55dc7db7f378 <col:38> 'sys_snode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x55dc7db7f260 <col:38> 'sys_snode_t *' lvalue Var 0x55dc7db7cb30 'prev' 'sys_snode_t *'
|   |   | | | `-ImplicitCastExpr 0x55dc7db7f390 <line:225:11> 'sys_snode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x55dc7db7f288 <col:11> 'sys_snode_t *' lvalue ParmVar 0x55dc7db7c9e0 'node' 'sys_snode_t *'
|   |   | | `-ReturnStmt 0x55dc7db7f3e0 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x55dc7db7f3c8 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x55dc7db7f3a8 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x55dc7db7f4b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_snode_t *' '='
|   |     |-DeclRefExpr 0x55dc7db7f450 <col:4> 'sys_snode_t *' lvalue Var 0x55dc7db7cb30 'prev' 'sys_snode_t *'
|   |     `-ImplicitCastExpr 0x55dc7db7f4a0 <col:11> 'sys_snode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55dc7db7f478 <col:11> 'sys_snode_t *' lvalue Var 0x55dc7db7cc50 'test' 'sys_snode_t *'
|   `-ReturnStmt 0x55dc7db7f570 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x55dc7db7f558 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x55dc7db7f538 <col:16> 'int' 0
|-TypedefDecl 0x55dc7db7f620 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:29:1, col:15> col:15 referenced unative_t 'u64_t':'unsigned long long'
| `-TypedefType 0x55dc7db7f5f0 'u64_t' sugar
|   |-Typedef 0x55dc7dad6b20 'u64_t'
|   `-BuiltinType 0x55dc7da66af0 'unsigned long long'
|-RecordDecl 0x55dc7db7f678 <line:34:1, line:36:1> line:34:8 struct _sfnode definition
| `-FieldDecl 0x55dc7db7f750 <line:35:2, col:12> col:12 referenced next_and_flags 'unative_t':'unsigned long long'
|-TypedefDecl 0x55dc7db7f7f0 <line:38:1, col:24> col:24 referenced sys_sfnode_t 'struct _sfnode':'struct _sfnode'
| `-ElaboratedType 0x55dc7db7f7a0 'struct _sfnode' sugar
|   `-RecordType 0x55dc7db7f700 'struct _sfnode'
|     `-Record 0x55dc7db7f678 '_sfnode'
|-RecordDecl 0x55dc7db7f848 <line:40:1, line:43:1> line:40:8 struct _sflist definition
| |-FieldDecl 0x55dc7db7f978 <line:41:2, col:16> col:16 referenced head 'sys_sfnode_t *'
| `-FieldDecl 0x55dc7db7f9d0 <line:42:2, col:16> col:16 referenced tail 'sys_sfnode_t *'
|-TypedefDecl 0x55dc7db7fa70 <line:45:1, col:24> col:24 referenced sys_sflist_t 'struct _sflist':'struct _sflist'
| `-ElaboratedType 0x55dc7db7fa20 'struct _sflist' sugar
|   `-RecordType 0x55dc7db7f8d0 'struct _sflist'
|     `-Record 0x55dc7db7f848 '_sflist'
|-FunctionDecl 0x55dc7db7fd80 <line:196:1, line:200:1> line:196:20 used sys_sflist_init 'void (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55dc7db7fc78 <col:36, col:50> col:50 used list 'sys_sflist_t *'
| |-CompoundStmt 0x55dc7db80098 <line:197:1, line:200:1>
| | |-BinaryOperator 0x55dc7db7ff38 <line:198:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| | | |-MemberExpr 0x55dc7db7fe68 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:198:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x55dc7db7f978
| | | | `-ImplicitCastExpr 0x55dc7db7fe50 <col:2> 'sys_sflist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55dc7db7fe28 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db7fc78 'list' 'sys_sflist_t *'
| | | `-ImplicitCastExpr 0x55dc7db7ff20 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| | |   `-ParenExpr 0x55dc7db7ff00 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x55dc7db7fed8 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x55dc7db7fea0 <col:23> 'int' 0
| | `-BinaryOperator 0x55dc7db80070 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| |   |-MemberExpr 0x55dc7db7ffa0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x55dc7db7f9d0
| |   | `-ImplicitCastExpr 0x55dc7db7ff88 <col:2> 'sys_sflist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55dc7db7ff60 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db7fc78 'list' 'sys_sflist_t *'
| |   `-ImplicitCastExpr 0x55dc7db80058 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| |     `-ParenExpr 0x55dc7db80038 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x55dc7db80010 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x55dc7db7ffd8 <col:23> 'int' 0
| `-FullComment 0x55dc7dca25b0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:192:3, line:194:50>
|   |-ParagraphComment 0x55dc7dca23f0 <line:192:3>
|   | `-TextComment 0x55dc7dca23c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca2410 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55dc7dca2470 <col:10, col:27>
|   |   `-TextComment 0x55dc7dca2440 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x55dc7dca24c0 <line:194:3>
|   | `-TextComment 0x55dc7dca2490 <col:3> Text=" "
|   `-ParamCommandComment 0x55dc7dca24e0 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x55dc7dca2570 <col:15, col:50>
|       `-TextComment 0x55dc7dca2540 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x55dc7db85820 <line:205:1, line:208:1> line:205:29 used z_sfnode_next_peek 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db800c8 <col:48, col:62> col:62 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55dc7db85a78 <line:206:1, line:208:1>
|   `-ReturnStmt 0x55dc7db85a60 <line:207:2, col:71>
|     `-CStyleCastExpr 0x55dc7db85a38 <col:9, col:71> 'sys_sfnode_t *' <IntegralToPointer>
|       `-ParenExpr 0x55dc7db85a18 <col:25, col:71> 'unsigned long long'
|         `-BinaryOperator 0x55dc7db859b0 <col:26, line:203:31> 'unsigned long long' '&'
|           |-ImplicitCastExpr 0x55dc7db85980 <line:207:26, col:32> 'unative_t':'unsigned long long' <LValueToRValue>
|           | `-MemberExpr 0x55dc7db85908 <col:26, col:32> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x55dc7db7f750
|           |   `-ImplicitCastExpr 0x55dc7db858f0 <col:26> 'sys_sfnode_t *' <LValueToRValue>
|           |     `-DeclRefExpr 0x55dc7db858c8 <col:26> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db800c8 'node' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x55dc7db85998 <col:49, line:203:31> 'unsigned long long' <IntegralCast>
|             `-UnaryOperator 0x55dc7db85960 <line:207:49, line:203:31> 'unsigned long' prefix '~'
|               `-IntegerLiteral 0x55dc7db85940 <col:31> 'unsigned long' 3
|-FunctionDecl 0x55dc7db85ba0 <line:210:1, col:59> col:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| `-ParmVarDecl 0x55dc7db85aa0 <col:41, col:55> col:55 node 'sys_sfnode_t *'
|-FunctionDecl 0x55dc7db85de0 <line:212:1, line:218:1> line:212:20 used z_sfnode_next_set 'void (sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db85c58 <col:38, col:52> col:52 used parent 'sys_sfnode_t *'
| |-ParmVarDecl 0x55dc7db85cc8 <line:213:12, col:26> col:26 used child 'sys_sfnode_t *'
| `-CompoundStmt 0x55dc7db861b8 <line:214:1, line:218:1>
|   |-DeclStmt 0x55dc7db86008 <line:215:2, col:47>
|   | `-VarDecl 0x55dc7db85ea0 <col:2, col:46> col:7 used cur_flags 'u8_t':'unsigned char' cinit
|   |   `-CallExpr 0x55dc7db85fc0 <col:19, col:46> 'u8_t':'unsigned char'
|   |     |-ImplicitCastExpr 0x55dc7db85fa8 <col:19> 'u8_t (*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55dc7db85f00 <col:19> 'u8_t (sys_sfnode_t *)' Function 0x55dc7db85ba0 'sys_sfnode_flags_get' 'u8_t (sys_sfnode_t *)'
|   |     `-ImplicitCastExpr 0x55dc7db85ff0 <col:40> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55dc7db85f28 <col:40> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db85c58 'parent' 'sys_sfnode_t *'
|   `-BinaryOperator 0x55dc7db86190 <line:217:2, col:50> 'unative_t':'unsigned long long' '='
|     |-MemberExpr 0x55dc7db86060 <col:2, col:10> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x55dc7db7f750
|     | `-ImplicitCastExpr 0x55dc7db86048 <col:2> 'sys_sfnode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55dc7db86020 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db85c58 'parent' 'sys_sfnode_t *'
|     `-BinaryOperator 0x55dc7db86168 <col:27, col:50> 'unsigned long long' '|'
|       |-ImplicitCastExpr 0x55dc7db86150 <col:27> 'unsigned long long' <IntegralCast>
|       | `-ImplicitCastExpr 0x55dc7db86138 <col:27> 'u8_t':'unsigned char' <LValueToRValue>
|       |   `-DeclRefExpr 0x55dc7db86098 <col:27> 'u8_t':'unsigned char' lvalue Var 0x55dc7db85ea0 'cur_flags' 'u8_t':'unsigned char'
|       `-CStyleCastExpr 0x55dc7db86110 <col:39, col:50> 'unative_t':'unsigned long long' <PointerToIntegral>
|         `-ImplicitCastExpr 0x55dc7db860f8 <col:50> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55dc7db860c0 <col:50> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db85cc8 'child' 'sys_sfnode_t *'
|-FunctionDecl 0x55dc7db86370 <line:220:1, line:223:1> line:220:20 used z_sflist_head_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db861e8 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55dc7db86258 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55dc7db86500 <line:221:1, line:223:1>
|   `-BinaryOperator 0x55dc7db864d8 <line:222:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x55dc7db86460 <col:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x55dc7db7f978
|     | `-ImplicitCastExpr 0x55dc7db86448 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55dc7db86420 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db861e8 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x55dc7db864c0 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7db86498 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db86258 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55dc7db86628 <line:225:1, line:228:1> line:225:20 used z_sflist_tail_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db86528 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55dc7db86598 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55dc7db867e8 <line:226:1, line:228:1>
|   `-BinaryOperator 0x55dc7db86790 <line:227:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x55dc7db86718 <col:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x55dc7db7f9d0
|     | `-ImplicitCastExpr 0x55dc7db86700 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55dc7db866d8 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db86528 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x55dc7db86778 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7db86750 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db86598 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55dc7db86930 <line:237:1, line:240:1> line:237:29 used sys_sflist_peek_head 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55dc7db86830 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x55dc7db86aa8 <line:238:1, line:240:1>
| | `-ReturnStmt 0x55dc7db86a68 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x55dc7db86a50 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x55dc7db86a18 <col:9, col:15> 'sys_sfnode_t *' lvalue ->head 0x55dc7db7f978
| |       `-ImplicitCastExpr 0x55dc7db86a00 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55dc7db869d8 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db86830 'list' 'sys_sflist_t *'
| `-FullComment 0x55dc7dca28f0 <line:231:3, line:235:68>
|   |-ParagraphComment 0x55dc7dca2650 <line:231:3>
|   | `-TextComment 0x55dc7dca2620 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca2670 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dca26d0 <col:10, col:43>
|   |   `-TextComment 0x55dc7dca26a0 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x55dc7dca2720 <line:233:3>
|   | `-TextComment 0x55dc7dca26f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca2740 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca27d0 <col:15, col:62>
|   |   `-TextComment 0x55dc7dca27a0 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x55dc7dca2820 <line:235:3>
|   | `-TextComment 0x55dc7dca27f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca2840 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x55dc7dca28a0 <col:11, col:68>
|       `-TextComment 0x55dc7dca2870 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x55dc7db86b58 <line:249:1, line:252:1> line:249:29 used sys_sflist_peek_tail 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55dc7db86ad0 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x55dc7db86cd8 <line:250:1, line:252:1>
| | `-ReturnStmt 0x55dc7db86c90 <line:251:2, col:15>
| |   `-ImplicitCastExpr 0x55dc7db86c78 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x55dc7db86c40 <col:9, col:15> 'sys_sfnode_t *' lvalue ->tail 0x55dc7db7f9d0
| |       `-ImplicitCastExpr 0x55dc7db86c28 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55dc7db86c00 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db86ad0 'list' 'sys_sflist_t *'
| `-FullComment 0x55dc7dca2c30 <line:243:3, line:247:67>
|   |-ParagraphComment 0x55dc7dca2990 <line:243:3>
|   | `-TextComment 0x55dc7dca2960 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca29b0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55dc7dca2a10 <col:10, col:42>
|   |   `-TextComment 0x55dc7dca29e0 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x55dc7dca2a60 <line:245:3>
|   | `-TextComment 0x55dc7dca2a30 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca2a80 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca2b10 <col:15, col:61>
|   |   `-TextComment 0x55dc7dca2ae0 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x55dc7dca2b60 <line:247:3>
|   | `-TextComment 0x55dc7dca2b30 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca2b80 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x55dc7dca2be0 <col:11, col:67>
|       `-TextComment 0x55dc7dca2bb0 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x55dc7db86d88 prev 0x55dc7db85ba0 <line:264:1, line:267:1> line:264:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db86d00 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-CompoundStmt 0x55dc7db86f78 <line:265:1, line:267:1>
| | `-ReturnStmt 0x55dc7db86f38 <line:266:2, line:203:31>
| |   `-ImplicitCastExpr 0x55dc7db86f20 <line:266:9, line:203:31> 'u8_t':'unsigned char' <IntegralCast>
| |     `-BinaryOperator 0x55dc7db86ef8 <line:266:9, line:203:31> 'unsigned long long' '&'
| |       |-ImplicitCastExpr 0x55dc7db86ec8 <line:266:9, col:15> 'unative_t':'unsigned long long' <LValueToRValue>
| |       | `-MemberExpr 0x55dc7db86e70 <col:9, col:15> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x55dc7db7f750
| |       |   `-ImplicitCastExpr 0x55dc7db86e58 <col:9> 'sys_sfnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x55dc7db86e30 <col:9> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db86d00 'node' 'sys_sfnode_t *'
| |       `-ImplicitCastExpr 0x55dc7db86ee0 <line:203:31> 'unsigned long long' <IntegralCast>
| |         `-IntegerLiteral 0x55dc7db86ea8 <col:31> 'unsigned long' 3
| `-FullComment 0x55dc7dca2f40 <line:259:3, line:262:60>
|   |-ParagraphComment 0x55dc7dca2cd0 <line:259:3>
|   | `-TextComment 0x55dc7dca2ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca2cf0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55dc7dca2d50 <col:10, col:51>
|   |   `-TextComment 0x55dc7dca2d20 <col:10, col:51> Text=" Fetch flags value for a particular sfnode"
|   |-ParagraphComment 0x55dc7dca2da0 <line:261:3>
|   | `-TextComment 0x55dc7dca2d70 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca2dc0 <col:4, line:262:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca2e70 <line:261:15, line:262:3>
|   |   |-TextComment 0x55dc7dca2e20 <line:261:15, col:56> Text=" A pointer to the node to fetch flags from"
|   |   `-TextComment 0x55dc7dca2e40 <line:262:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca2e90 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x55dc7dca2ef0 <col:11, col:60>
|       `-TextComment 0x55dc7dca2ec0 <col:11, col:60> Text=" The value of flags, which will be between 0 and 3"
|-FunctionDecl 0x55dc7db87120 <line:282:1, line:286:1> line:282:20 sys_sfnode_init 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x55dc7db86fa0 <col:36, col:50> col:50 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x55dc7db87010 <col:56, col:61> col:61 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x55dc7db87318 <line:283:1, line:286:1>
| | |-CompoundStmt 0x55dc7db871d0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x55dc7db871e0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:284:70>
| | `-BinaryOperator 0x55dc7db872c0 <line:285:2, col:25> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x55dc7db87230 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x55dc7db7f750
| |   | `-ImplicitCastExpr 0x55dc7db87218 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55dc7db871f0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db86fa0 'node' 'sys_sfnode_t *'
| |   `-ImplicitCastExpr 0x55dc7db872a8 <col:25> 'unative_t':'unsigned long long' <IntegralCast>
| |     `-ImplicitCastExpr 0x55dc7db87290 <col:25> 'u8_t':'unsigned char' <LValueToRValue>
| |       `-DeclRefExpr 0x55dc7db87268 <col:25> 'u8_t':'unsigned char' lvalue ParmVar 0x55dc7db87010 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x55dc7dca33a0 <line:270:3, line:280:62>
|   |-ParagraphComment 0x55dc7dca2fe0 <line:270:3>
|   | `-TextComment 0x55dc7dca2fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca3000 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x55dc7dca3060 <col:10, col:35>
|   |   `-TextComment 0x55dc7dca3030 <col:10, col:35> Text=" Initialize an sflist node"
|   |-ParagraphComment 0x55dc7dca3100 <line:272:3, line:274:64>
|   | |-TextComment 0x55dc7dca3080 <line:272:3, col:79> Text=" Set an initial flags value for this slist node, which can be a value between"
|   | |-TextComment 0x55dc7dca30a0 <line:273:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x55dc7dca30c0 <line:274:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x55dc7dca3170 <line:276:3, line:277:61>
|   | |-TextComment 0x55dc7dca3120 <line:276:3, col:73> Text=" This is ever so slightly faster than sys_sfnode_flags_set() and should"
|   | `-TextComment 0x55dc7dca3140 <line:277:3, col:61> Text=" only be used on a node that hasn't been added to any list."
|   |-ParagraphComment 0x55dc7dca31c0 <line:279:3>
|   | `-TextComment 0x55dc7dca3190 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca31e0 <col:4, line:280:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca3290 <line:279:15, line:280:3>
|   |   |-TextComment 0x55dc7dca3240 <line:279:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x55dc7dca3260 <line:280:3> Text=" "
|   `-ParamCommandComment 0x55dc7dca32b0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x55dc7dca3340 <col:16, col:62>
|       `-TextComment 0x55dc7dca3310 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x55dc7db87450 <line:298:1, line:302:1> line:298:20 sys_sfnode_flags_set 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x55dc7db87350 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x55dc7db873c0 <col:61, col:66> col:66 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x55dc7db87808 <line:299:1, line:302:1>
| | |-CompoundStmt 0x55dc7db87500 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x55dc7db87510 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:300:70>
| | `-BinaryOperator 0x55dc7db877b0 <line:301:2, col:65> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x55dc7db87560 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x55dc7db7f750
| |   | `-ImplicitCastExpr 0x55dc7db87548 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55dc7db87520 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db87350 'node' 'sys_sfnode_t *'
| |   `-BinaryOperator 0x55dc7db87788 <col:25, col:65> 'unsigned long long' '|'
| |     |-CStyleCastExpr 0x55dc7db87708 <col:25, col:61> 'unative_t':'unsigned long long' <PointerToIntegral>
| |     | `-ParenExpr 0x55dc7db876e8 <col:36, col:61> 'sys_sfnode_t *'
| |     |   `-CallExpr 0x55dc7db87660 <col:37, col:60> 'sys_sfnode_t *'
| |     |     |-ImplicitCastExpr 0x55dc7db87648 <col:37> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x55dc7db87598 <col:37> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55dc7db85820 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
| |     |     `-ImplicitCastExpr 0x55dc7db87690 <col:56> 'sys_sfnode_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x55dc7db875c0 <col:56> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db87350 'node' 'sys_sfnode_t *'
| |     `-ImplicitCastExpr 0x55dc7db87770 <col:65> 'unsigned long long' <IntegralCast>
| |       `-ImplicitCastExpr 0x55dc7db87758 <col:65> 'u8_t':'unsigned char' <LValueToRValue>
| |         `-DeclRefExpr 0x55dc7db87730 <col:65> 'u8_t':'unsigned char' lvalue ParmVar 0x55dc7db873c0 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x55dc7dca37a0 <line:289:3, line:296:62>
|   |-ParagraphComment 0x55dc7dca3440 <line:289:3>
|   | `-TextComment 0x55dc7dca3410 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca3460 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55dc7dca34c0 <col:10, col:44>
|   |   `-TextComment 0x55dc7dca3490 <col:10, col:44> Text=" Set flags value for an sflist node"
|   |-ParagraphComment 0x55dc7dca3560 <line:291:3, line:293:64>
|   | |-TextComment 0x55dc7dca34e0 <line:291:3, col:70> Text=" Set a flags value for this slist node, which can be a value between"
|   | |-TextComment 0x55dc7dca3500 <line:292:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x55dc7dca3520 <line:293:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x55dc7dca35b0 <line:295:3>
|   | `-TextComment 0x55dc7dca3580 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca35d0 <col:4, line:296:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca3680 <line:295:15, line:296:3>
|   |   |-TextComment 0x55dc7dca3630 <line:295:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x55dc7dca3650 <line:296:3> Text=" "
|   `-ParamCommandComment 0x55dc7dca36a0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x55dc7dca3730 <col:16, col:62>
|       `-TextComment 0x55dc7dca3700 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x55dc7db87950 <line:315:1, col:58> col:20 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55dc7db87850 <col:40, col:54> col:54 list 'sys_sflist_t *'
| `-FullComment 0x55dc7dca3ae0 <line:309:3, line:313:57>
|   |-ParagraphComment 0x55dc7dca3840 <line:309:3>
|   | `-TextComment 0x55dc7dca3810 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca3860 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55dc7dca38c0 <col:10, col:41>
|   |   `-TextComment 0x55dc7dca3890 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x55dc7dca3910 <line:311:3>
|   | `-TextComment 0x55dc7dca38e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca3930 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca39c0 <col:15, col:44>
|   |   `-TextComment 0x55dc7dca3990 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x55dc7dca3a10 <line:313:3>
|   | `-TextComment 0x55dc7dca39e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca3a30 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x55dc7dca3a90 <col:11, col:57>
|       `-TextComment 0x55dc7dca3a60 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x55dc7db87a90 prev 0x55dc7db87950 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:194:1 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55dc7db87a08 <line:196:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_sflist_t *'
| `-CompoundStmt 0x55dc7db87d88 <line:60:2, line:62:2>
|   `-ReturnStmt 0x55dc7db87d40 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x55dc7db87d28 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x55dc7db87d08 <col:10, col:54> 'int'
|         `-BinaryOperator 0x55dc7db87ce0 <<scratch space>:198:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x55dc7db87c00 <<scratch space>:198:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_sfnode_t *'
|           | |-ImplicitCastExpr 0x55dc7db87be8 <<scratch space>:198:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x55dc7db87b38 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86930 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|           | `-ImplicitCastExpr 0x55dc7db87c30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_sflist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x55dc7db87b60 <col:41> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db87a08 'list' 'sys_sflist_t *'
|           `-ImplicitCastExpr 0x55dc7db87cc8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|             `-ParenExpr 0x55dc7db87ca8 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x55dc7db87c80 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x55dc7db87c48 <col:23> 'int' 0
|-FunctionDecl 0x55dc7db87e38 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:328:1, col:77> col:29 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db87db0 <col:59, col:73> col:73 node 'sys_sfnode_t *'
| `-FullComment 0x55dc7dca3e80 <line:320:3, line:326:55>
|   |-ParagraphComment 0x55dc7dca3b80 <line:320:3>
|   | `-TextComment 0x55dc7dca3b50 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca3ba0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x55dc7dca3c00 <col:10, col:64>
|   |   `-TextComment 0x55dc7dca3bd0 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x55dc7dca3c50 <line:322:3, col:70>
|   | `-TextComment 0x55dc7dca3c20 <col:3, col:70> Text=" Faster then sys_sflist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x55dc7dca3ca0 <line:324:3>
|   | `-TextComment 0x55dc7dca3c70 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca3cc0 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca3d50 <col:15, col:64>
|   |   `-TextComment 0x55dc7dca3d20 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x55dc7dca3da0 <line:326:3>
|   | `-TextComment 0x55dc7dca3d70 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca3dc0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55dc7dca3e20 <col:11, col:55>
|       `-TextComment 0x55dc7dca3df0 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x55dc7db87f78 prev 0x55dc7db87e38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:202:1 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db87ef0 <line:204:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55dc7db88118 <line:67:2, line:69:2>
|   `-ReturnStmt 0x55dc7db880d0 <line:68:3, col:42>
|     `-CallExpr 0x55dc7db88088 <<scratch space>:206:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x55dc7db88070 <<scratch space>:206:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7db88020 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55dc7db85820 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       `-ImplicitCastExpr 0x55dc7db880b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_sfnode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7db88048 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db87ef0 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55dc7db881c8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:339:1, col:68> col:29 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db88140 <col:50, col:64> col:64 node 'sys_sfnode_t *'
| `-FullComment 0x55dc7dca41c0 <line:333:3, line:337:55>
|   |-ParagraphComment 0x55dc7dca3f20 <line:333:3>
|   | `-TextComment 0x55dc7dca3ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca3f40 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55dc7dca3fa0 <col:10, col:46>
|   |   `-TextComment 0x55dc7dca3f70 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x55dc7dca3ff0 <line:335:3>
|   | `-TextComment 0x55dc7dca3fc0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca4010 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca40a0 <col:15, col:64>
|   |   `-TextComment 0x55dc7dca4070 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x55dc7dca40f0 <line:337:3>
|   | `-TextComment 0x55dc7dca40c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca4110 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55dc7dca4170 <col:11, col:55>
|       `-TextComment 0x55dc7dca4140 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x55dc7db88308 prev 0x55dc7db881c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:210:1 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db88280 <line:212:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55dc7db88668 <line:74:2, line:78:2>
|   `-ReturnStmt 0x55dc7db88628 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x55dc7db885f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *'
|       |-BinaryOperator 0x55dc7db88488 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x55dc7db88458 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_sfnode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x55dc7db883b0 <col:10> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db88280 'node' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x55dc7db88470 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x55dc7db88438 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x55dc7db88410 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x55dc7db883d8 <col:23> 'int' 0
|       |-CallExpr 0x55dc7db88518 <<scratch space>:214:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x55dc7db88500 <<scratch space>:214:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55dc7db884b0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55dc7db87f78 'sys_sflist_peek_next_no_check' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | `-ImplicitCastExpr 0x55dc7db88548 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x55dc7db884d8 <col:43> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db88280 'node' 'sys_sfnode_t *'
|       `-ImplicitCastExpr 0x55dc7db885e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|         `-ParenExpr 0x55dc7db885c0 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x55dc7db88598 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x55dc7db88560 <col:23> 'int' 0
|-FunctionDecl 0x55dc7db88790 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:351:1, line:352:29> line:351:20 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db88690 <col:39, col:53> col:53 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55dc7db88700 <line:352:11, col:25> col:25 node 'sys_sfnode_t *'
| `-FullComment 0x55dc7dca4550 <line:344:3, line:349:47>
|   |-ParagraphComment 0x55dc7dca4260 <line:344:3>
|   | `-TextComment 0x55dc7dca4230 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca4280 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55dc7dca42e0 <col:10, col:42>
|   |   `-TextComment 0x55dc7dca42b0 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x55dc7dca4330 <line:346:3, col:63>
|   | `-TextComment 0x55dc7dca4300 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca4380 <line:348:3>
|   | `-TextComment 0x55dc7dca4350 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca43a0 <col:4, line:349:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca4450 <line:348:15, line:349:3>
|   |   |-TextComment 0x55dc7dca4400 <line:348:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55dc7dca4420 <line:349:3> Text=" "
|   `-ParamCommandComment 0x55dc7dca4470 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55dc7dca4500 <col:15, col:47>
|       `-TextComment 0x55dc7dca44d0 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x55dc7db88960 prev 0x55dc7db88790 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:216:1 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db88860 <line:218:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55dc7db888d0 <<scratch space>:220:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55dc7db89078 <line:84:2, line:93:2>
|   |-CallExpr 0x55dc7db88b80 <<scratch space>:222:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x55dc7db88b68 <<scratch space>:222:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55dc7db88a10 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55dc7db85de0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x55dc7db88bb8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55dc7db88a38 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db888d0 'node' 'sys_sfnode_t *'
|   | `-CallExpr 0x55dc7db88ac8 <<scratch space>:224:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x55dc7db88ab0 <<scratch space>:224:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dc7db88a60 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86930 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x55dc7db88af8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dc7db88a88 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db88860 'list' 'sys_sflist_t *'
|   |-CallExpr 0x55dc7db88cc0 <<scratch space>:226:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x55dc7db88ca8 <<scratch space>:226:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55dc7db88bd0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55dc7db86370 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x55dc7db88cf8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55dc7db88bf8 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db88860 'list' 'sys_sflist_t *'
|   | `-ImplicitCastExpr 0x55dc7db88d10 <col:36> 'sys_sfnode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55dc7db88c20 <col:36> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db888d0 'node' 'sys_sfnode_t *'
|   `-IfStmt 0x55dc7db89018 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55dc7db88e70 <<scratch space>:228:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x55dc7db88d90 <<scratch space>:228:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x55dc7db88d78 <<scratch space>:228:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55dc7db88d28 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86b58 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x55dc7db88dc0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55dc7db88d50 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db88860 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x55dc7db88e58 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x55dc7db88e38 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55dc7db88e10 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55dc7db88dd8 <col:23> 'int' 0
|     |-CompoundStmt 0x55dc7db89000 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x55dc7db88fb0 <<scratch space>:230:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x55dc7db88f98 <<scratch space>:230:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55dc7db88e98 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55dc7db86628 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x55dc7db88fe8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55dc7db88ec0 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db88860 'list' 'sys_sflist_t *'
|     |   `-CallExpr 0x55dc7db88f50 <<scratch space>:232:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_sfnode_t *'
|     |     |-ImplicitCastExpr 0x55dc7db88f38 <<scratch space>:232:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x55dc7db88ee8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86930 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|     |     `-ImplicitCastExpr 0x55dc7db88f80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_sflist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x55dc7db88f10 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db88860 'list' 'sys_sflist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x55dc7db891b0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:364:1, line:365:28> line:364:20 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db890b0 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55dc7db89120 <line:365:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x55dc7dca48e0 <line:357:3, line:362:46>
|   |-ParagraphComment 0x55dc7dca45f0 <line:357:3>
|   | `-TextComment 0x55dc7dca45c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca4610 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55dc7dca4670 <col:10, col:41>
|   |   `-TextComment 0x55dc7dca4640 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x55dc7dca46c0 <line:359:3, col:63>
|   | `-TextComment 0x55dc7dca4690 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca4710 <line:361:3>
|   | `-TextComment 0x55dc7dca46e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca4730 <col:4, line:362:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca47e0 <line:361:15, line:362:3>
|   |   |-TextComment 0x55dc7dca4790 <line:361:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55dc7dca47b0 <line:362:3> Text=" "
|   `-ParamCommandComment 0x55dc7dca4800 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55dc7dca4890 <col:15, col:46>
|       `-TextComment 0x55dc7dca4860 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x55dc7db89370 prev 0x55dc7db891b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:234:1 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db89270 <line:236:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55dc7db892e0 <<scratch space>:238:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55dc7db89be8 <line:99:2, line:111:2>
|   |-CallExpr 0x55dc7db89508 <<scratch space>:240:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x55dc7db894f0 <<scratch space>:240:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55dc7db89420 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55dc7db85de0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x55dc7db89540 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55dc7db89448 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db892e0 'node' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x55dc7db89558 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |   `-ParenExpr 0x55dc7db894d0 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x55dc7db894a8 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x55dc7db89470 <col:23> 'int' 0
|   `-IfStmt 0x55dc7db89b80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55dc7db896b8 <<scratch space>:242:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x55dc7db895d8 <<scratch space>:242:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x55dc7db895c0 <<scratch space>:242:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55dc7db89570 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86b58 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x55dc7db89608 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55dc7db89598 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db89270 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x55dc7db896a0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x55dc7db89680 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55dc7db89658 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55dc7db89620 <col:23> 'int' 0
|     |-CompoundStmt 0x55dc7db898e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x55dc7db89770 <<scratch space>:244:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x55dc7db89758 <<scratch space>:244:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55dc7db896e0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55dc7db86628 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     | | |-ImplicitCastExpr 0x55dc7db897a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_sflist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55dc7db89708 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db89270 'list' 'sys_sflist_t *'
|     | | `-ImplicitCastExpr 0x55dc7db897c0 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55dc7db89730 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db892e0 'node' 'sys_sfnode_t *'
|     | `-CallExpr 0x55dc7db89878 <<scratch space>:246:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x55dc7db89860 <<scratch space>:246:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55dc7db897d8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55dc7db86370 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x55dc7db898b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55dc7db89800 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db89270 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x55dc7db898c8 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55dc7db89828 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db892e0 'node' 'sys_sfnode_t *'
|     `-CompoundStmt 0x55dc7db89b60 <line:105:10, line:110:3>
|       |-CallExpr 0x55dc7db89a18 <<scratch space>:248:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x55dc7db89a00 <<scratch space>:248:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55dc7db89900 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55dc7db85de0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|       | |-CallExpr 0x55dc7db89990 <line:250:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x55dc7db89978 <<scratch space>:250:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55dc7db89928 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86b58 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | | `-ImplicitCastExpr 0x55dc7db899c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_sflist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x55dc7db89950 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db89270 'list' 'sys_sflist_t *'
|       | `-ImplicitCastExpr 0x55dc7db89a50 <line:108:5> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x55dc7db899d8 <col:5> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db892e0 'node' 'sys_sfnode_t *'
|       `-CallExpr 0x55dc7db89af8 <<scratch space>:252:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x55dc7db89ae0 <<scratch space>:252:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55dc7db89a68 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55dc7db86628 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|         |-ImplicitCastExpr 0x55dc7db89b30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_sflist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x55dc7db89a90 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db89270 'list' 'sys_sflist_t *'
|         `-ImplicitCastExpr 0x55dc7db89b48 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55dc7db89ab8 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db892e0 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55dc7db89e40 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:382:1, line:383:30> line:382:20 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x55dc7db89c18 <col:43, col:57> col:57 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55dc7db89c90 <line:383:8, col:14> col:14 head 'void *'
| |-ParmVarDecl 0x55dc7db89d08 <col:20, col:26> col:26 tail 'void *'
| `-FullComment 0x55dc7dca4e40 <line:370:3, line:380:66>
|   |-ParagraphComment 0x55dc7dca4980 <line:370:3>
|   | `-TextComment 0x55dc7dca4950 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca49a0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55dc7dca4a00 <col:10, col:41>
|   |   `-TextComment 0x55dc7dca49d0 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x55dc7dca4af0 <line:372:3, line:374:63>
|   | |-TextComment 0x55dc7dca4a20 <line:372:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x55dc7dca4a40 <line:373:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x55dc7dca4a90 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x55dc7dca4ab0 <line:374:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca4b40 <line:376:3, col:48>
|   | `-TextComment 0x55dc7dca4b10 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x55dc7dca4b90 <line:378:3>
|   | `-TextComment 0x55dc7dca4b60 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca4bb0 <col:4, line:379:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca4c60 <line:378:15, line:379:3>
|   |   |-TextComment 0x55dc7dca4c10 <line:378:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55dc7dca4c30 <line:379:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca4c80 <col:4, line:380:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dca4d30 <line:379:15, line:380:3>
|   |   |-TextComment 0x55dc7dca4ce0 <line:379:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x55dc7dca4d00 <line:380:3> Text=" "
|   `-ParamCommandComment 0x55dc7dca4d50 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x55dc7dca4de0 <col:15, col:66>
|       `-TextComment 0x55dc7dca4db0 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x55dc7db8a090 prev 0x55dc7db89e40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:254:1 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x55dc7db89f08 <line:256:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55dc7db89f80 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x55dc7db89ff8 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x55dc7db8a748 <col:31, line:127:42>
|   |-IfStmt 0x55dc7db8a5b8 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55dc7db8a290 <<scratch space>:258:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x55dc7db8a1b0 <<scratch space>:258:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x55dc7db8a198 <<scratch space>:258:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55dc7db8a148 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86b58 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x55dc7db8a1e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dc7db8a170 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db89f08 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x55dc7db8a278 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x55dc7db8a258 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55dc7db8a230 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55dc7db8a1f8 <col:23> 'int' 0
|   | |-CompoundStmt 0x55dc7db8a3e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x55dc7db8a398 <<scratch space>:260:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x55dc7db8a380 <<scratch space>:260:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55dc7db8a2b8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55dc7db86370 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x55dc7db8a3d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55dc7db8a2e0 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db89f08 'list' 'sys_sflist_t *'
|   | |   `-CStyleCastExpr 0x55dc7db8a358 <line:120:6, col:31> 'sys_sfnode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x55dc7db8a340 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55dc7db8a308 <col:31> 'void *' lvalue ParmVar 0x55dc7db89f80 'head' 'void *'
|   | `-CompoundStmt 0x55dc7db8a5a0 <line:121:9, line:125:2>
|   |   `-CallExpr 0x55dc7db8a568 <<scratch space>:264:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x55dc7db8a550 <<scratch space>:264:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55dc7db8a400 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55dc7db85de0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |     |-CallExpr 0x55dc7db8a490 <line:266:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_sfnode_t *'
|   |     | |-ImplicitCastExpr 0x55dc7db8a478 <<scratch space>:266:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x55dc7db8a428 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86b58 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | `-ImplicitCastExpr 0x55dc7db8a4c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_sflist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55dc7db8a450 <col:34> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db89f08 'list' 'sys_sflist_t *'
|   |     `-CStyleCastExpr 0x55dc7db8a528 <line:124:4, col:29> 'sys_sfnode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x55dc7db8a510 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x55dc7db8a4d8 <col:29> 'void *' lvalue ParmVar 0x55dc7db89f80 'head' 'void *'
|   `-CallExpr 0x55dc7db8a6d0 <<scratch space>:270:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x55dc7db8a6b8 <<scratch space>:270:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7db8a5f0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55dc7db86628 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x55dc7db8a708 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_sflist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x55dc7db8a618 <col:29> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db89f08 'list' 'sys_sflist_t *'
|     `-CStyleCastExpr 0x55dc7db8a690 <line:127:10, col:35> 'sys_sfnode_t *' <BitCast>
|       `-ImplicitCastExpr 0x55dc7db8a678 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7db8a640 <col:35> 'void *' lvalue ParmVar 0x55dc7db89ff8 'tail' 'void *'
|-FunctionDecl 0x55dc7db8a920 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:396:1, line:397:37> line:396:20 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55dc7db8a778 <col:44, col:58> col:58 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55dc7db8a7e8 <line:397:9, col:23> col:23 list_to_append 'sys_sflist_t *'
| `-FullComment 0x55dc7dca51f0 <line:388:3, line:394:57>
|   |-ParagraphComment 0x55dc7dca4ee0 <line:388:3>
|   | `-TextComment 0x55dc7dca4eb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca4f00 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x55dc7dca4f60 <col:10, col:66>
|   |   `-TextComment 0x55dc7dca4f30 <col:10, col:66> Text=" merge two sflists, appending the second one to the first"
|   |-ParagraphComment 0x55dc7dca4fd0 <line:390:3, line:391:63>
|   | |-TextComment 0x55dc7dca4f80 <line:390:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x55dc7dca4fa0 <line:391:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca5020 <line:393:3>
|   | `-TextComment 0x55dc7dca4ff0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca5040 <col:4, line:394:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca50f0 <line:393:15, line:394:3>
|   |   |-TextComment 0x55dc7dca50a0 <line:393:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55dc7dca50c0 <line:394:3> Text=" "
|   `-ParamCommandComment 0x55dc7dca5110 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x55dc7dca51a0 <col:25, col:57>
|       `-TextComment 0x55dc7dca5170 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x55dc7db8aae0 prev 0x55dc7db8a920 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:275:1 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55dc7db8a9e0 <line:277:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55dc7db8aa50 <<scratch space>:279:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_sflist_t *'
| `-CompoundStmt 0x55dc7db8b1a8 <line:135:2, line:141:2>
|   |-DeclStmt 0x55dc7db8ac88 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x55dc7db8aba0 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_sfnode_t *'
|   | `-VarDecl 0x55dc7db8ac10 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_sfnode_t *'
|   |-BinaryOperator 0x55dc7db8ad78 <line:137:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x55dc7db8aca0 <col:3> 'sys_sfnode_t *' lvalue Var 0x55dc7db8aba0 'head' 'sys_sfnode_t *'
|   | `-CallExpr 0x55dc7db8ad30 <<scratch space>:2:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x55dc7db8ad18 <<scratch space>:2:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dc7db8acc8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86930 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x55dc7db8ad60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dc7db8acf0 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db8aa50 'list_to_append' 'sys_sflist_t *'
|   |-BinaryOperator 0x55dc7db8ae78 <line:138:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x55dc7db8ada0 <col:3> 'sys_sfnode_t *' lvalue Var 0x55dc7db8ac10 'tail' 'sys_sfnode_t *'
|   | `-CallExpr 0x55dc7db8ae30 <<scratch space>:4:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x55dc7db8ae18 <<scratch space>:4:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dc7db8adc8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86b58 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x55dc7db8ae60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dc7db8adf0 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db8aa50 'list_to_append' 'sys_sflist_t *'
|   |-CallExpr 0x55dc7db8afb0 <<scratch space>:6:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x55dc7db8af98 <<scratch space>:6:1> 'void (*)(sys_sflist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55dc7db8aea0 <col:1> 'void (sys_sflist_t *, void *, void *)' Function 0x55dc7db8a090 'sys_sflist_append_list' 'void (sys_sflist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x55dc7db8aff0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55dc7db8aec8 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db8a9e0 'list' 'sys_sflist_t *'
|   | |-ImplicitCastExpr 0x55dc7db8b020 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x55dc7db8b008 <col:41> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55dc7db8aef0 <col:41> 'sys_sfnode_t *' lvalue Var 0x55dc7db8aba0 'head' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x55dc7db8b050 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x55dc7db8b038 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dc7db8af18 <col:47> 'sys_sfnode_t *' lvalue Var 0x55dc7db8ac10 'tail' 'sys_sfnode_t *'
|   `-CallExpr 0x55dc7db8b130 <<scratch space>:8:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x55dc7db8b118 <<scratch space>:8:1> 'void (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7db8b068 <col:1> 'void (sys_sflist_t *)' Function 0x55dc7db7fd80 'sys_sflist_init' 'void (sys_sflist_t *)'
|     `-ImplicitCastExpr 0x55dc7db8b160 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_sflist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7db8b090 <col:28> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db8aa50 'list_to_append' 'sys_sflist_t *'
|-FunctionDecl 0x55dc7db8b400 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:410:1, line:412:28> line:410:20 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db8b1f0 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55dc7db8b260 <line:411:10, col:24> col:24 prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x55dc7db8b2d0 <line:412:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x55dc7dca5660 <line:402:3, line:408:46>
|   |-ParagraphComment 0x55dc7dca5290 <line:402:3>
|   | `-TextComment 0x55dc7dca5260 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca52b0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55dc7dca5310 <col:10, col:41>
|   |   `-TextComment 0x55dc7dca52e0 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x55dc7dca5360 <line:404:3, col:63>
|   | `-TextComment 0x55dc7dca5330 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca53b0 <line:406:3>
|   | `-TextComment 0x55dc7dca5380 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca53d0 <col:4, line:407:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca5480 <line:406:15, line:407:3>
|   |   |-TextComment 0x55dc7dca5430 <line:406:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55dc7dca5450 <line:407:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca54a0 <col:4, line:408:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dca5550 <line:407:15, line:408:3>
|   |   |-TextComment 0x55dc7dca5500 <line:407:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x55dc7dca5520 <line:408:3> Text=" "
|   `-ParamCommandComment 0x55dc7dca5570 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x55dc7dca5600 <col:15, col:46>
|       `-TextComment 0x55dc7dca55d0 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x55dc7db8b640 prev 0x55dc7db8b400 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:10:1 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db8b4c8 <line:12:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55dc7db8b538 <<scratch space>:14:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x55dc7db8b5a8 <<scratch space>:16:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55dc7db77668 <line:148:2, line:158:2>
|   `-IfStmt 0x55dc7db77600 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55dc7db8b7d0 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x55dc7db8b7a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_sfnode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x55dc7db8b6f8 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db8b538 'prev' 'sys_sfnode_t *'
|     | `-ImplicitCastExpr 0x55dc7db8b7b8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x55dc7db8b780 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55dc7db8b758 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55dc7db8b720 <col:23> 'int' 0
|     |-CompoundStmt 0x55dc7db770b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x55dc7db77048 <<scratch space>:18:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x55dc7db77030 <<scratch space>:18:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55dc7db8b7f8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55dc7db88960 'sys_sflist_prepend' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x55dc7db77080 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55dc7db8b820 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db8b4c8 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x55dc7db77098 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55dc7db8b848 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db8b5a8 'node' 'sys_sfnode_t *'
|     `-IfStmt 0x55dc7db775c8 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x55dc7db77210 <<scratch space>:20:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x55dc7db77130 <<scratch space>:20:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x55dc7db77118 <<scratch space>:20:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55dc7db770c8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55dc7db85820 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | | `-ImplicitCastExpr 0x55dc7db77160 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_sfnode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x55dc7db770f0 <col:42> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db8b538 'prev' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x55dc7db771f8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x55dc7db771d8 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x55dc7db771b0 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x55dc7db77178 <col:23> 'int' 0
|       |-CompoundStmt 0x55dc7db77330 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x55dc7db772c8 <<scratch space>:22:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x55dc7db772b0 <<scratch space>:22:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55dc7db77238 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55dc7db89370 'sys_sflist_append' 'void (sys_sflist_t *, sys_sfnode_t *)'
|       |   |-ImplicitCastExpr 0x55dc7db77300 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_sflist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x55dc7db77260 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db8b4c8 'list' 'sys_sflist_t *'
|       |   `-ImplicitCastExpr 0x55dc7db77318 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55dc7db77288 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db8b5a8 'node' 'sys_sfnode_t *'
|       `-CompoundStmt 0x55dc7db775a8 <line:153:10, line:157:3>
|         |-CallExpr 0x55dc7db77460 <<scratch space>:24:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x55dc7db77448 <<scratch space>:24:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x55dc7db77348 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55dc7db85de0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|         | |-ImplicitCastExpr 0x55dc7db77498 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_sfnode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x55dc7db77370 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db8b5a8 'node' 'sys_sfnode_t *'
|         | `-CallExpr 0x55dc7db77400 <<scratch space>:26:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_sfnode_t *'
|         |   |-ImplicitCastExpr 0x55dc7db773e8 <<scratch space>:26:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x55dc7db77398 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55dc7db85820 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|         |   `-ImplicitCastExpr 0x55dc7db77430 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_sfnode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x55dc7db773c0 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db8b538 'prev' 'sys_sfnode_t *'
|         `-CallExpr 0x55dc7db77540 <<scratch space>:28:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x55dc7db77528 <<scratch space>:28:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x55dc7db774b0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55dc7db85de0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|           |-ImplicitCastExpr 0x55dc7db77578 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_sfnode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x55dc7db774d8 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db8b538 'prev' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x55dc7db77590 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x55dc7db77500 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db8b5a8 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55dc7db77718 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:426:1, col:72> col:29 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55dc7db77690 <col:54, col:68> col:68 list 'sys_sflist_t *'
| `-FullComment 0x55dc7dca5a30 <line:417:3, line:424:50>
|   |-ParagraphComment 0x55dc7dca5700 <line:417:3>
|   | `-TextComment 0x55dc7dca56d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca5720 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55dc7dca5780 <col:10, col:59>
|   |   `-TextComment 0x55dc7dca5750 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x55dc7dca5800 <line:419:3, line:420:63>
|   | |-TextComment 0x55dc7dca57b0 <line:419:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x55dc7dca57d0 <line:420:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca5850 <line:422:3>
|   | `-TextComment 0x55dc7dca5820 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca5870 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca5900 <col:15, col:46>
|   |   `-TextComment 0x55dc7dca58d0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x55dc7dca5950 <line:424:3>
|   | `-TextComment 0x55dc7dca5920 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca5970 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x55dc7dca59d0 <col:11, col:50>
|       `-TextComment 0x55dc7dca59a0 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x55dc7db77858 prev 0x55dc7db77718 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:32:1 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55dc7db777d0 <line:34:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_sflist_t *'
| `-CompoundStmt 0x55dc7db77ef8 <line:163:2, line:175:2>
|   |-DeclStmt 0x55dc7db77a20 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x55dc7db77910 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_sfnode_t *' cinit
|   |   `-CallExpr 0x55dc7db779d8 <<scratch space>:38:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_sfnode_t *'
|   |     |-ImplicitCastExpr 0x55dc7db779c0 <<scratch space>:38:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55dc7db77970 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86930 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     `-ImplicitCastExpr 0x55dc7db77a08 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_sflist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55dc7db77998 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db777d0 'list' 'sys_sflist_t *'
|   |-CallExpr 0x55dc7db77b50 <<scratch space>:40:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x55dc7db77b38 <<scratch space>:40:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55dc7db77a38 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55dc7db86370 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x55dc7db77b88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55dc7db77a60 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db777d0 'list' 'sys_sflist_t *'
|   | `-CallExpr 0x55dc7db77af0 <<scratch space>:42:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x55dc7db77ad8 <<scratch space>:42:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dc7db77a88 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55dc7db85820 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   `-ImplicitCastExpr 0x55dc7db77b20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dc7db77ab0 <col:33> 'sys_sfnode_t *' lvalue Var 0x55dc7db77910 'node' 'sys_sfnode_t *'
|   |-IfStmt 0x55dc7db77e38 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55dc7db77c90 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x55dc7db77c08 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x55dc7db77bf0 <<scratch space>:44:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55dc7db77ba0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86b58 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x55dc7db77c38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dc7db77bc8 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db777d0 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x55dc7db77c78 <col:46> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55dc7db77c50 <col:46> 'sys_sfnode_t *' lvalue Var 0x55dc7db77910 'node' 'sys_sfnode_t *'
|   | |-CompoundStmt 0x55dc7db77e20 <col:52, line:172:3>
|   | | `-CallExpr 0x55dc7db77dd0 <<scratch space>:46:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x55dc7db77db8 <<scratch space>:46:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55dc7db77cb8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55dc7db86628 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x55dc7db77e08 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55dc7db77ce0 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db777d0 'list' 'sys_sflist_t *'
|   | |   `-CallExpr 0x55dc7db77d70 <<scratch space>:48:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_sfnode_t *'
|   | |     |-ImplicitCastExpr 0x55dc7db77d58 <<scratch space>:48:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x55dc7db77d08 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86930 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |     `-ImplicitCastExpr 0x55dc7db77da0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_sflist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55dc7db77d30 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db777d0 'list' 'sys_sflist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55dc7db77eb0 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x55dc7db77e98 <col:10> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7db77e70 <col:10> 'sys_sfnode_t *' lvalue Var 0x55dc7db77910 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55dc7db78040 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:439:1, col:62> col:29 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55dc7db77f38 <col:44, col:58> col:58 list 'sys_sflist_t *'
| `-FullComment 0x55dc7dca5dd0 <line:431:3, line:437:69>
|   |-ParagraphComment 0x55dc7dca5ad0 <line:431:3>
|   | `-TextComment 0x55dc7dca5aa0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca5af0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55dc7dca5b50 <col:10, col:59>
|   |   `-TextComment 0x55dc7dca5b20 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x55dc7dca5ba0 <line:433:3, col:63>
|   | `-TextComment 0x55dc7dca5b70 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca5bf0 <line:435:3>
|   | `-TextComment 0x55dc7dca5bc0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca5c10 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca5ca0 <col:15, col:46>
|   |   `-TextComment 0x55dc7dca5c70 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x55dc7dca5cf0 <line:437:3>
|   | `-TextComment 0x55dc7dca5cc0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca5d10 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x55dc7dca5d70 <col:11, col:69>
|       `-TextComment 0x55dc7dca5d40 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x55dc7db78180 prev 0x55dc7db78040 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:52:1 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55dc7db780f8 <line:54:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_sflist_t *'
| `-CompoundStmt 0x55dc7db78508 <line:180:2, line:183:2>
|   `-ReturnStmt 0x55dc7db784c8 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x55dc7db78498 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x55dc7db78468 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x55dc7db782f0 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x55dc7db782d8 <<scratch space>:56:1> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55dc7db78228 <col:1> 'bool (sys_sflist_t *)' Function 0x55dc7db87a90 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|       |   `-ImplicitCastExpr 0x55dc7db78320 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_sflist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55dc7db78250 <col:39> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db780f8 'list' 'sys_sflist_t *'
|       |-ImplicitCastExpr 0x55dc7db78480 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       | `-ParenExpr 0x55dc7db78398 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x55dc7db78370 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x55dc7db78338 <col:23> 'int' 0
|       `-CallExpr 0x55dc7db78420 <<scratch space>:58:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|         |-ImplicitCastExpr 0x55dc7db78408 <<scratch space>:58:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55dc7db783b8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db77858 'sys_sflist_get_not_empty' 'sys_sfnode_t *(sys_sflist_t *)'
|         `-ImplicitCastExpr 0x55dc7db78450 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_sflist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55dc7db783e0 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db780f8 'list' 'sys_sflist_t *'
|-FunctionDecl 0x55dc7db786a8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:453:1, line:455:28> line:453:20 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db78530 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55dc7db785a0 <line:454:10, col:24> col:24 prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x55dc7db78610 <line:455:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x55dc7dca6270 <line:444:3, line:451:46>
|   |-ParagraphComment 0x55dc7dca5e70 <line:444:3>
|   | `-TextComment 0x55dc7dca5e40 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca5e90 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x55dc7dca5ef0 <col:10, col:23>
|   |   `-TextComment 0x55dc7dca5ec0 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x55dc7dca5f40 <line:446:3, col:63>
|   | `-TextComment 0x55dc7dca5f10 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca5f90 <line:448:3>
|   | `-TextComment 0x55dc7dca5f60 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca5fb0 <col:4, line:449:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca6060 <line:448:15, line:449:3>
|   |   |-TextComment 0x55dc7dca6010 <line:448:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55dc7dca6030 <line:449:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca6080 <col:4, line:451:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dca6160 <line:449:20, line:451:3>
|   |   |-TextComment 0x55dc7dca60e0 <line:449:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x55dc7dca6100 <line:450:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x55dc7dca6120 <line:451:3> Text=" "
|   `-ParamCommandComment 0x55dc7dca6180 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x55dc7dca6210 <col:15, col:46>
|       `-TextComment 0x55dc7dca61e0 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x55dc7db788e8 prev 0x55dc7db786a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:60:1 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db78770 <line:62:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55dc7db787e0 <<scratch space>:64:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x55dc7db78850 <<scratch space>:66:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55dc7db92cf8 <line:190:2, line:212:2>
|   |-IfStmt 0x55dc7db92b40 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55dc7db78a78 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x55dc7db78a48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55dc7db789a0 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db787e0 'prev_node' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x55dc7db78a60 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x55dc7db78a28 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55dc7db78a00 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55dc7db789c8 <col:23> 'int' 0
|   | |-CompoundStmt 0x55dc7db78ed8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x55dc7db78bb8 <<scratch space>:68:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x55dc7db78ba0 <<scratch space>:68:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55dc7db78aa0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55dc7db86370 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | | | |-ImplicitCastExpr 0x55dc7db78bf0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_sflist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55dc7db78ac8 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db78770 'list' 'sys_sflist_t *'
|   | | | `-CallExpr 0x55dc7db78b58 <<scratch space>:70:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_sfnode_t *'
|   | | |   |-ImplicitCastExpr 0x55dc7db78b40 <<scratch space>:70:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x55dc7db78af0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55dc7db85820 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | | |   `-ImplicitCastExpr 0x55dc7db78b88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_sfnode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dc7db78b18 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db78850 'node' 'sys_sfnode_t *'
|   | | `-IfStmt 0x55dc7db78ea0 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x55dc7db78cf8 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x55dc7db78c70 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_sfnode_t *'
|   | |   | | |-ImplicitCastExpr 0x55dc7db78c58 <<scratch space>:72:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x55dc7db78c08 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86b58 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   | | `-ImplicitCastExpr 0x55dc7db78ca0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_sflist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x55dc7db78c30 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db78770 'list' 'sys_sflist_t *'
|   | |   | `-ImplicitCastExpr 0x55dc7db78ce0 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x55dc7db78cb8 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db78850 'node' 'sys_sfnode_t *'
|   | |   |-CompoundStmt 0x55dc7db78e88 <col:53, line:199:4>
|   | |   | `-CallExpr 0x55dc7db78e38 <<scratch space>:74:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x55dc7db78e20 <<scratch space>:74:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x55dc7db78d20 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55dc7db86628 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |   |-ImplicitCastExpr 0x55dc7db78e70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_sflist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x55dc7db78d48 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db78770 'list' 'sys_sflist_t *'
|   | |   |   `-CallExpr 0x55dc7db78dd8 <<scratch space>:76:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_sfnode_t *'
|   | |   |     |-ImplicitCastExpr 0x55dc7db78dc0 <<scratch space>:76:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x55dc7db78d70 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86930 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   |     `-ImplicitCastExpr 0x55dc7db78e08 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_sflist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x55dc7db78d98 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db78770 'list' 'sys_sflist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x55dc7db92b20 <line:200:10, line:209:3>
|   |   |-CallExpr 0x55dc7db79010 <<scratch space>:78:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x55dc7db78ff8 <<scratch space>:78:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x55dc7db78ef8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55dc7db85de0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |   | |-ImplicitCastExpr 0x55dc7db928a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x55dc7db78f20 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db787e0 'prev_node' 'sys_sfnode_t *'
|   |   | `-CallExpr 0x55dc7db78fb0 <<scratch space>:80:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_sfnode_t *'
|   |   |   |-ImplicitCastExpr 0x55dc7db78f98 <<scratch space>:80:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x55dc7db78f48 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55dc7db85820 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   |   `-ImplicitCastExpr 0x55dc7db78fe0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_sfnode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55dc7db78f70 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db78850 'node' 'sys_sfnode_t *'
|   |   `-IfStmt 0x55dc7db92ae8 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x55dc7db929b0 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x55dc7db92928 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_sfnode_t *'
|   |     | | |-ImplicitCastExpr 0x55dc7db92910 <<scratch space>:82:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x55dc7db928c0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86b58 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | | `-ImplicitCastExpr 0x55dc7db92958 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_sflist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55dc7db928e8 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db78770 'list' 'sys_sflist_t *'
|   |     | `-ImplicitCastExpr 0x55dc7db92998 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55dc7db92970 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db78850 'node' 'sys_sfnode_t *'
|   |     |-CompoundStmt 0x55dc7db92ad0 <col:53, line:208:4>
|   |     | `-CallExpr 0x55dc7db92a68 <<scratch space>:84:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x55dc7db92a50 <<scratch space>:84:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x55dc7db929d8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55dc7db86628 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   |     |   |-ImplicitCastExpr 0x55dc7db92aa0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_sflist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x55dc7db92a00 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db78770 'list' 'sys_sflist_t *'
|   |     |   `-ImplicitCastExpr 0x55dc7db92ab8 <line:207:13> 'sys_sfnode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55dc7db92a28 <col:13> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db787e0 'prev_node' 'sys_sfnode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x55dc7db92c60 <<scratch space>:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x55dc7db92c48 <<scratch space>:86:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7db92b78 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55dc7db85de0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x55dc7db92c98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_sfnode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x55dc7db92ba0 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db78850 'node' 'sys_sfnode_t *'
|     `-ImplicitCastExpr 0x55dc7db92cb0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       `-ParenExpr 0x55dc7db92c28 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x55dc7db92c00 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x55dc7db92bc8 <col:23> 'int' 0
|-FunctionDecl 0x55dc7db92eb0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:469:1, line:470:30> line:469:20 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db92d28 <col:47, col:61> col:61 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55dc7db92d98 <line:470:12, col:26> col:26 node 'sys_sfnode_t *'
| `-FullComment 0x55dc7dca66e0 <line:460:3, line:467:35>
|   |-ParagraphComment 0x55dc7dca6310 <line:460:3>
|   | `-TextComment 0x55dc7dca62e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca6330 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55dc7dca6390 <col:10, col:44>
|   |   `-TextComment 0x55dc7dca6360 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x55dc7dca63e0 <line:462:3, col:63>
|   | `-TextComment 0x55dc7dca63b0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55dc7dca6430 <line:464:3>
|   | `-TextComment 0x55dc7dca6400 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca6450 <col:4, line:465:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca6500 <line:464:15, line:465:3>
|   |   |-TextComment 0x55dc7dca64b0 <line:464:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55dc7dca64d0 <line:465:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca6520 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dca65b0 <col:15, col:60>
|   |   `-TextComment 0x55dc7dca6580 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x55dc7dca6600 <line:467:3>
|   | `-TextComment 0x55dc7dca65d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca6620 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dca6680 <col:11, col:35>
|       `-TextComment 0x55dc7dca6650 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x55dc7db93070 prev 0x55dc7db92eb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:88:1 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55dc7db92f70 <line:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55dc7db92fe0 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55dc7db93a10 <line:218:2, line:233:2>
|   |-DeclStmt 0x55dc7db93228 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x55dc7db93130 <<scratch space>:94:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_sfnode_t *' cinit
|   |   `-ImplicitCastExpr 0x55dc7db93210 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |     `-ParenExpr 0x55dc7db931f0 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x55dc7db931c8 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x55dc7db93190 <col:23> 'int' 0
|   |-DeclStmt 0x55dc7db932b0 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x55dc7db93250 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_sfnode_t *'
|   |-ForStmt 0x55dc7db93988 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x55dc7db933a0 <line:222:42, line:15:47> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x55dc7db932c8 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x55dc7db93250 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x55dc7db93358 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x55dc7db93340 <<scratch space>:98:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55dc7db932f0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86930 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   `-ImplicitCastExpr 0x55dc7db93388 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_sflist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55dc7db93318 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db92f70 'list' 'sys_sflist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55dc7db934a0 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x55dc7db93470 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55dc7db933c8 <col:42> 'sys_sfnode_t *' lvalue Var 0x55dc7db93250 'test' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x55dc7db93488 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x55dc7db93450 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55dc7db93428 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55dc7db933f0 <col:23> 'int' 0
|   | |-BinaryOperator 0x55dc7db935a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x55dc7db934c8 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x55dc7db93250 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x55dc7db93558 <<scratch space>:100:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x55dc7db93540 <<scratch space>:100:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55dc7db934f0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55dc7db88308 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | |   `-ImplicitCastExpr 0x55dc7db93588 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55dc7db93518 <col:42> 'sys_sfnode_t *' lvalue Var 0x55dc7db93250 'test' 'sys_sfnode_t *'
|   | `-CompoundStmt 0x55dc7db93968 <col:48, line:230:3>
|   |   |-IfStmt 0x55dc7db938a0 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x55dc7db93648 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x55dc7db93618 <col:8> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x55dc7db935c8 <col:8> 'sys_sfnode_t *' lvalue Var 0x55dc7db93250 'test' 'sys_sfnode_t *'
|   |   | | `-ImplicitCastExpr 0x55dc7db93630 <col:16> 'sys_sfnode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55dc7db935f0 <col:16> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db92fe0 'node' 'sys_sfnode_t *'
|   |   | |-CompoundStmt 0x55dc7db93858 <col:22, line:227:4>
|   |   | | |-CallExpr 0x55dc7db93780 <<scratch space>:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x55dc7db93768 <<scratch space>:102:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x55dc7db93670 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' Function 0x55dc7db788e8 'sys_sflist_remove' 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)'
|   |   | | | |-ImplicitCastExpr 0x55dc7db937c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_sflist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x55dc7db93698 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x55dc7db92f70 'list' 'sys_sflist_t *'
|   |   | | | |-ImplicitCastExpr 0x55dc7db937d8 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x55dc7db936c0 <col:38> 'sys_sfnode_t *' lvalue Var 0x55dc7db93130 'prev' 'sys_sfnode_t *'
|   |   | | | `-ImplicitCastExpr 0x55dc7db937f0 <line:225:11> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x55dc7db936e8 <col:11> 'sys_sfnode_t *' lvalue ParmVar 0x55dc7db92fe0 'node' 'sys_sfnode_t *'
|   |   | | `-ReturnStmt 0x55dc7db93840 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x55dc7db93828 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x55dc7db93808 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x55dc7db93940 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_sfnode_t *' '='
|   |     |-DeclRefExpr 0x55dc7db938d8 <col:4> 'sys_sfnode_t *' lvalue Var 0x55dc7db93130 'prev' 'sys_sfnode_t *'
|   |     `-ImplicitCastExpr 0x55dc7db93928 <col:11> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55dc7db93900 <col:11> 'sys_sfnode_t *' lvalue Var 0x55dc7db93250 'test' 'sys_sfnode_t *'
|   `-ReturnStmt 0x55dc7db939f8 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x55dc7db939e0 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x55dc7db939c0 <col:16> 'int' 0
|-RecordDecl 0x55dc7db93a40 </vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:18:1, line:24:1> line:18:8 struct sys_mem_pool_lvl definition
| |-RecordDecl 0x55dc7db93af0 <line:19:2, line:22:2> line:19:2 union definition
| | |-FieldDecl 0x55dc7db93c08 <line:20:3, col:10> col:10 bits_p 'u32_t *'
| | `-FieldDecl 0x55dc7db93d78 <line:21:3, col:31> col:9 bits 'u32_t [2]'
| |-FieldDecl 0x55dc7db93e10 <line:19:2> col:2 implicit 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| |-IndirectFieldDecl 0x55dc7db93e68 <line:20:10> col:10 implicit bits_p 'u32_t *'
| | |-Field 0x55dc7db93e10 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x55dc7db93c08 'bits_p' 'u32_t *'
| |-IndirectFieldDecl 0x55dc7db93eb8 <line:21:9> col:9 implicit bits 'u32_t [2]'
| | |-Field 0x55dc7db93e10 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x55dc7db93d78 'bits' 'u32_t [2]'
| `-FieldDecl 0x55dc7db93f08 <line:23:2, col:14> col:14 free_list 'sys_dlist_t':'struct _dnode'
|-RecordDecl 0x55dc7db93fa0 <line:29:1, line:37:1> line:29:8 struct sys_mem_pool_base definition
| |-FieldDecl 0x55dc7db94068 <line:30:2, col:8> col:8 buf 'void *'
| |-FieldDecl 0x55dc7db940c0 <line:31:2, col:9> col:9 max_sz 'size_t':'unsigned long'
| |-FieldDecl 0x55dc7db94140 <line:32:2, col:8> col:8 n_max 'u16_t':'unsigned short'
| |-FieldDecl 0x55dc7db94198 <line:33:2, col:7> col:7 n_levels 'u8_t':'unsigned char'
| |-FieldDecl 0x55dc7db94210 <line:34:2, col:7> col:7 max_inline_level 's8_t':'signed char'
| |-FieldDecl 0x55dc7db94310 <line:35:2, col:27> col:27 levels 'struct sys_mem_pool_lvl *'
| `-FieldDecl 0x55dc7db94368 <line:36:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x55dc7db94560 <line:98:1, col:58> col:6 z_sys_mem_pool_base_init 'void (struct sys_mem_pool_base *)'
| `-ParmVarDecl 0x55dc7db94460 <col:31, col:57> col:57 p 'struct sys_mem_pool_base *'
|-FunctionDecl 0x55dc7db983a8 <line:100:1, line:101:55> line:100:5 z_sys_mem_pool_block_alloc 'int (struct sys_mem_pool_base *, size_t, u32_t *, u32_t *, void **)'
| |-ParmVarDecl 0x55dc7db94630 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x55dc7db946a0 <col:61, col:68> col:68 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7db94710 <line:101:10, col:17> col:17 level_p 'u32_t *'
| |-ParmVarDecl 0x55dc7db94780 <col:26, col:33> col:33 block_p 'u32_t *'
| `-ParmVarDecl 0x55dc7db94820 <col:42, col:49> col:49 data_p 'void **'
|-FunctionDecl 0x55dc7db986b0 <line:103:1, line:104:21> line:103:6 z_sys_mem_pool_block_free 'void (struct sys_mem_pool_base *, u32_t, u32_t)'
| |-ParmVarDecl 0x55dc7db98498 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x55dc7db98508 <col:61, col:67> col:67 level 'u32_t':'unsigned int'
| `-ParmVarDecl 0x55dc7db98578 <line:104:10, col:16> col:16 block 'u32_t':'unsigned int'
|-RecordDecl 0x55dc7db98768 </vagrant/ext/zephyros/zephyr/include/kernel_structs.h:83:1, line:96:1> line:83:8 struct _ready_q definition
| `-FieldDecl 0x55dc7db98838 <line:86:2, col:19> col:19 cache 'struct k_thread *'
|-TypedefDecl 0x55dc7db988d0 <line:98:1, col:25> col:25 _ready_q_t 'struct _ready_q':'struct _ready_q'
| `-ElaboratedType 0x55dc7db98880 'struct _ready_q' sugar
|   `-RecordType 0x55dc7db987f0 'struct _ready_q'
|     `-Record 0x55dc7db98768 '_ready_q'
|-RecordDecl 0x55dc7db98928 <line:100:1, line:134:1> line:100:8 struct _cpu definition
| |-FieldDecl 0x55dc7db989e0 <line:102:2, col:8> col:8 nested 'u32_t':'unsigned int'
| |-FieldDecl 0x55dc7db98a40 <line:105:2, col:8> col:8 irq_stack 'char *'
| |-FieldDecl 0x55dc7db98ab0 <line:108:2, col:19> col:19 current 'struct k_thread *'
| |-FieldDecl 0x55dc7db98b20 <line:111:2, col:19> col:19 idle_thread 'struct k_thread *'
| `-FieldDecl 0x55dc7db98b78 <line:128:2, col:7> col:7 id 'u8_t':'unsigned char'
|-TypedefDecl 0x55dc7db98c10 <line:136:1, col:21> col:21 _cpu_t 'struct _cpu':'struct _cpu'
| `-ElaboratedType 0x55dc7db98bc0 'struct _cpu' sugar
|   `-RecordType 0x55dc7db989b0 'struct _cpu'
|     `-Record 0x55dc7db98928 '_cpu'
|-RecordDecl 0x55dc7db98c68 <line:138:1, line:191:1> line:138:8 struct z_kernel definition
| |-RecordDecl 0x55dc7db98d10 <line:143:2, line:157:2> line:143:2 invalid union definition
| | |-FieldDecl 0x55dc7db98e08 <line:144:3, col:15> col:15 invalid cpus 'struct _cpu':'struct _cpu'
| | |-RecordDecl 0x55dc7db98e50 <line:146:3, line:155:3> line:146:3 struct definition
| | | |-FieldDecl 0x55dc7db98f10 <line:148:4, col:10> col:10 nested 'u32_t':'unsigned int'
| | | |-FieldDecl 0x55dc7db98f70 <line:151:4, col:10> col:10 irq_stack 'char *'
| | | `-FieldDecl 0x55dc7db98fe0 <line:154:4, col:21> col:21 current 'struct k_thread *'
| | |-FieldDecl 0x55dc7db99080 <line:146:3> col:3 implicit 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | |-IndirectFieldDecl 0x55dc7db990d8 <line:148:10> col:10 implicit nested 'u32_t':'unsigned int'
| | | |-Field 0x55dc7db99080 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x55dc7db98f10 'nested' 'u32_t':'unsigned int'
| | |-IndirectFieldDecl 0x55dc7db99128 <line:151:10> col:10 implicit irq_stack 'char *'
| | | |-Field 0x55dc7db99080 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x55dc7db98f70 'irq_stack' 'char *'
| | `-IndirectFieldDecl 0x55dc7db99178 <line:154:21> col:21 implicit current 'struct k_thread *'
| |   |-Field 0x55dc7db99080 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| |   `-Field 0x55dc7db98fe0 'current' 'struct k_thread *'
| `-FieldDecl 0x55dc7db99240 <line:172:2, col:18> col:18 ready_q 'struct _ready_q':'struct _ready_q'
|-TypedefDecl 0x55dc7db9d650 <line:193:1, col:25> col:25 _kernel_t 'struct z_kernel':'struct z_kernel'
| `-ElaboratedType 0x55dc7db9d600 'struct z_kernel' sugar
|   `-RecordType 0x55dc7db98cf0 'struct z_kernel'
|     `-Record 0x55dc7db98c68 'z_kernel'
|-VarDecl 0x55dc7db9d6c8 <line:195:1, col:24> col:24 _kernel 'struct z_kernel':'struct z_kernel' extern
|-FunctionDecl 0x55dc7db9d880 </vagrant/ext/zephyros/zephyr/include/kernel_version.h:47:1, col:41> col:14 sys_kernel_version_get 'u32_t (void)' extern
| `-FullComment 0x55dc7dca6990 <line:40:3, line:45:25>
|   |-ParagraphComment 0x55dc7dca6780 <line:40:3>
|   | `-TextComment 0x55dc7dca6750 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca67a0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x55dc7dca6800 <col:10, col:56>
|   |   `-TextComment 0x55dc7dca67d0 <col:10, col:56> Text=" Return the kernel version of the present build"
|   |-ParagraphComment 0x55dc7dca6870 <line:42:3, line:43:27>
|   | |-TextComment 0x55dc7dca6820 <line:42:3, col:76> Text=" The kernel version is a four-byte value, whose format is described in the"
|   | `-TextComment 0x55dc7dca6840 <line:43:3, col:27> Text=" file "kernel_version.h"."
|   |-ParagraphComment 0x55dc7dca68c0 <line:45:3>
|   | `-TextComment 0x55dc7dca6890 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca68e0 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x55dc7dca6940 <col:11, col:25>
|       `-TextComment 0x55dc7dca6910 <col:11, col:25> Text=" kernel version"
|-FunctionDecl 0x55dc7db9da68 </vagrant/ext/zephyros/zephyr/include/random/rand32.h:45:1, col:33> col:14 sys_rand32_get 'u32_t (void)' extern
| `-FullComment 0x55dc7dca6ce0 <line:37:3, line:43:31>
|   |-ParagraphComment 0x55dc7dca6a30 <line:37:3>
|   | `-TextComment 0x55dc7dca6a00 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca6a50 <col:4, line:38:20> Name="brief"
|   | `-ParagraphComment 0x55dc7dca6ad0 <line:37:10, line:38:20>
|   |   |-TextComment 0x55dc7dca6a80 <line:37:10, col:63> Text=" Return a 32-bit random value that should pass general"
|   |   `-TextComment 0x55dc7dca6aa0 <line:38:3, col:20> Text=" randomness tests."
|   |-ParagraphComment 0x55dc7dca6b20 <line:40:3>
|   | `-TextComment 0x55dc7dca6af0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca6b40 <col:4, line:41:23> Name="note"
|   | `-ParagraphComment 0x55dc7dca6bc0 <line:40:9, line:41:23>
|   |   |-TextComment 0x55dc7dca6b70 <line:40:9, col:68> Text=" The random value returned is not a cryptographically secure"
|   |   `-TextComment 0x55dc7dca6b90 <line:41:3, col:23> Text=" random number value."
|   |-ParagraphComment 0x55dc7dca6c10 <line:43:3>
|   | `-TextComment 0x55dc7dca6be0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca6c30 <col:4, col:31> Name="return"
|     `-ParagraphComment 0x55dc7dca6c90 <col:11, col:31>
|       `-TextComment 0x55dc7dca6c60 <col:11, col:31> Text=" 32-bit random value."
|-FunctionDecl 0x55dc7db9dcd0 <line:57:1, col:47> col:13 sys_rand_get 'void (void *, size_t)' extern
| |-ParmVarDecl 0x55dc7db9db50 <col:26, col:32> col:32 dst 'void *'
| |-ParmVarDecl 0x55dc7db9dbc0 <col:37, col:44> col:44 len 'size_t':'unsigned long'
| `-FullComment 0x55dc7dca7190 <line:47:3, line:56:1>
|   |-ParagraphComment 0x55dc7dca6d80 <line:47:3>
|   | `-TextComment 0x55dc7dca6d50 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca6da0 <col:4, line:48:33> Name="brief"
|   | `-ParagraphComment 0x55dc7dca6e20 <line:47:10, line:48:33>
|   |   |-TextComment 0x55dc7dca6dd0 <line:47:10, col:73> Text=" Fill the destination buffer with random data values that should"
|   |   `-TextComment 0x55dc7dca6df0 <line:48:3, col:33> Text=" pass general randomness tests."
|   |-ParagraphComment 0x55dc7dca6e70 <line:50:3>
|   | `-TextComment 0x55dc7dca6e40 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca6e90 <col:4, line:51:31> Name="note"
|   | `-ParagraphComment 0x55dc7dca6f10 <line:50:9, line:51:31>
|   |   |-TextComment 0x55dc7dca6ec0 <line:50:9, col:72> Text=" The random values returned are not considered cryptographically"
|   |   `-TextComment 0x55dc7dca6ee0 <line:51:3, col:31> Text=" secure random number values."
|   |-ParagraphComment 0x55dc7dca6f60 <line:53:3>
|   | `-TextComment 0x55dc7dca6f30 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca6f80 <col:4, line:54:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca7030 <line:53:20, line:54:3>
|   |   |-TextComment 0x55dc7dca6fe0 <line:53:20, col:64> Text=" destination buffer to fill with random data."
|   |   `-TextComment 0x55dc7dca7000 <line:54:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca7050 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dca70e0 <col:14, col:45>
|   |   `-TextComment 0x55dc7dca70b0 <col:14, col:45> Text=" size of the destination buffer."
|   `-ParagraphComment 0x55dc7dca7130 <line:56:1>
|     `-TextComment 0x55dc7dca7100 <col:1> Text=" "
|-FunctionDecl 0x55dc7db9df48 <line:72:1, col:48> col:12 sys_csrand_get 'int (void *, size_t)' extern
| |-ParmVarDecl 0x55dc7db9ddc0 <col:27, col:33> col:33 dst 'void *'
| |-ParmVarDecl 0x55dc7db9de30 <col:38, col:45> col:45 len 'size_t':'unsigned long'
| `-FullComment 0x55dc7dca7720 <line:60:3, line:71:1>
|   |-ParagraphComment 0x55dc7dca7230 <line:60:3>
|   | `-TextComment 0x55dc7dca7200 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca7250 <col:4, line:61:22> Name="brief"
|   | `-ParagraphComment 0x55dc7dca72d0 <line:60:10, line:61:22>
|   |   |-TextComment 0x55dc7dca7280 <line:60:10, col:67> Text=" Fill the destination buffer with cryptographically secure"
|   |   `-TextComment 0x55dc7dca72a0 <line:61:3, col:22> Text=" random data values."
|   |-ParagraphComment 0x55dc7dca7320 <line:63:3>
|   | `-TextComment 0x55dc7dca72f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca7340 <col:4, line:64:42> Name="note"
|   | `-ParagraphComment 0x55dc7dca73c0 <line:63:9, line:64:42>
|   |   |-TextComment 0x55dc7dca7370 <line:63:9, col:75> Text=" If the random values requested do not need to be cryptographically"
|   |   `-TextComment 0x55dc7dca7390 <line:64:3, col:42> Text=" secure then use sys_rand_get() instead."
|   |-ParagraphComment 0x55dc7dca7410 <line:66:3>
|   | `-TextComment 0x55dc7dca73e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca7430 <col:4, line:67:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca74e0 <line:66:20, line:67:3>
|   |   |-TextComment 0x55dc7dca7490 <line:66:20, col:47> Text=" destination buffer to fill."
|   |   `-TextComment 0x55dc7dca74b0 <line:67:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca7500 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dca7590 <col:14, col:45>
|   |   `-TextComment 0x55dc7dca7560 <col:14, col:45> Text=" size of the destination buffer."
|   |-ParagraphComment 0x55dc7dca75e0 <line:69:3>
|   | `-TextComment 0x55dc7dca75b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca7600 <col:4, col:53> Name="return"
|   | `-ParagraphComment 0x55dc7dca7660 <col:11, col:53>
|   |   `-TextComment 0x55dc7dca7630 <col:11, col:53> Text=" 0 if success, -EIO if entropy reseed error"
|   `-ParagraphComment 0x55dc7dca76b0 <line:71:1>
|     `-TextComment 0x55dc7dca7680 <col:1> Text=" "
|-TypedefDecl 0x55dc7dbba240 </vagrant/ext/zephyros/zephyr/include/syscall.h:85:1, line:88:17> line:85:21 _k_syscall_handler_t 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| |-PointerType 0x55dc7db9e4e0 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| | `-ParenType 0x55dc7db9e480 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' sugar
| |   `-FunctionProtoType 0x55dc7db9e410 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' cdecl
| |     |-TypedefType 0x55dc7db9e060 'uintptr_t' sugar
| |     | |-Typedef 0x55dc7dab28e8 'uintptr_t'
| |     | `-BuiltinType 0x55dc7da66ad0 'unsigned long'
| |     |-TypedefType 0x55dc7db9e060 'uintptr_t' sugar
| |     | |-Typedef 0x55dc7dab28e8 'uintptr_t'
| |     | `-BuiltinType 0x55dc7da66ad0 'unsigned long'
| |     |-TypedefType 0x55dc7db9e060 'uintptr_t' sugar
| |     | |-Typedef 0x55dc7dab28e8 'uintptr_t'
| |     | `-BuiltinType 0x55dc7da66ad0 'unsigned long'
| |     |-TypedefType 0x55dc7db9e060 'uintptr_t' sugar
| |     | |-Typedef 0x55dc7dab28e8 'uintptr_t'
| |     | `-BuiltinType 0x55dc7da66ad0 'unsigned long'
| |     |-TypedefType 0x55dc7db9e060 'uintptr_t' sugar
| |     | |-Typedef 0x55dc7dab28e8 'uintptr_t'
| |     | `-BuiltinType 0x55dc7da66ad0 'unsigned long'
| |     |-TypedefType 0x55dc7db9e060 'uintptr_t' sugar
| |     | |-Typedef 0x55dc7dab28e8 'uintptr_t'
| |     | `-BuiltinType 0x55dc7da66ad0 'unsigned long'
| |     |-TypedefType 0x55dc7db9e060 'uintptr_t' sugar
| |     | |-Typedef 0x55dc7dab28e8 'uintptr_t'
| |     | `-BuiltinType 0x55dc7da66ad0 'unsigned long'
| |     `-PointerType 0x55dc7da66e10 'void *'
| |       `-BuiltinType 0x55dc7da66970 'void'
| `-FullComment 0x55dc7dca93d0 <line:50:3, line:84:1>
|   |-ParagraphComment 0x55dc7dca87e0 <line:50:3>
|   | `-TextComment 0x55dc7dca7790 <col:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dca8800 <col:4, col:33> Text=" _k_syscall_handler_t"
|   |-ParagraphComment 0x55dc7dca8870 <line:51:3>
|   | `-TextComment 0x55dc7dca8840 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca8890 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dca88f0 <col:10, col:43>
|   |   `-TextComment 0x55dc7dca88c0 <col:10, col:43> Text=" System call handler function type"
|   |-ParagraphComment 0x55dc7dca8960 <line:53:3, line:54:67>
|   | |-TextComment 0x55dc7dca8910 <line:53:3, col:70> Text=" These are kernel-side skeleton functions for system calls. They are"
|   | `-TextComment 0x55dc7dca8930 <line:54:3, col:67> Text=" necessary to sanitize the arguments passed into the system call:"
|   |-ParagraphComment 0x55dc7dca8b40 <line:56:3, line:66:41>
|   | |-TextComment 0x55dc7dca8980 <line:56:3, col:78> Text=" - Any kernel object or device pointers are validated with _SYSCALL_IS_OBJ()"
|   | |-TextComment 0x55dc7dca89a0 <line:57:3, col:79> Text=" - Any memory buffers passed in are checked to ensure that the calling thread"
|   | |-TextComment 0x55dc7dca89c0 <line:58:3, col:32> Text="   actually has access to them"
|   | |-TextComment 0x55dc7dca89e0 <line:59:3, col:69> Text=" - Many kernel calls do no sanity checking of parameters other than"
|   | |-TextComment 0x55dc7dca8a00 <line:60:3, col:69> Text="   assertions. The handler must check all of these conditions using"
|   | |-TextComment 0x55dc7dca8a20 <line:61:3, col:22> Text="   _SYSCALL_ASSERT()"
|   | |-TextComment 0x55dc7dca8a40 <line:62:3, col:78> Text=" - If the system call has more than 6 arguments, then arg6 will be a pointer"
|   | |-TextComment 0x55dc7dca8a60 <line:63:3, col:74> Text="   to some struct containing arguments 6+. The struct itself needs to be"
|   | |-TextComment 0x55dc7dca8a80 <line:64:3, col:78> Text="   validated like any other buffer passed in from userspace, and its members"
|   | |-TextComment 0x55dc7dca8aa0 <line:65:3, col:70> Text="   individually validated (if necessary) and then passed to the real"
|   | `-TextComment 0x55dc7dca8ac0 <line:66:3, col:41> Text="   implementation like normal arguments"
|   |-ParagraphComment 0x55dc7dca8bb0 <line:68:3, line:69:70>
|   | |-TextComment 0x55dc7dca8b60 <line:68:3, col:75> Text=" Even if the system call implementation has no return value, these always"
|   | `-TextComment 0x55dc7dca8b80 <line:69:3, col:70> Text=" return something, even 0, to prevent register leakage to userspace."
|   |-ParagraphComment 0x55dc7dca8c00 <line:71:3, col:80>
|   | `-TextComment 0x55dc7dca8bd0 <col:3, col:80> Text=" Once everything has been validated, the real implementation will be executed."
|   |-ParagraphComment 0x55dc7dca8c50 <line:73:3>
|   | `-TextComment 0x55dc7dca8c20 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca8c70 <col:4, line:74:3> [in] implicitly Param="arg1" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dca8d20 <line:73:15, line:74:3>
|   |   |-TextComment 0x55dc7dca8cd0 <line:73:15, col:37> Text=" system call argument 1"
|   |   `-TextComment 0x55dc7dca8cf0 <line:74:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca8d40 <col:4, line:75:3> [in] implicitly Param="arg2" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dca8df0 <line:74:15, line:75:3>
|   |   |-TextComment 0x55dc7dca8da0 <line:74:15, col:37> Text=" system call argument 2"
|   |   `-TextComment 0x55dc7dca8dc0 <line:75:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca8e10 <col:4, line:76:3> [in] implicitly Param="arg3" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dca8ec0 <line:75:15, line:76:3>
|   |   |-TextComment 0x55dc7dca8e70 <line:75:15, col:37> Text=" system call argument 3"
|   |   `-TextComment 0x55dc7dca8e90 <line:76:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca8ee0 <col:4, line:77:3> [in] implicitly Param="arg4" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dca8f90 <line:76:15, line:77:3>
|   |   |-TextComment 0x55dc7dca8f40 <line:76:15, col:37> Text=" system call argument 4"
|   |   `-TextComment 0x55dc7dca8f60 <line:77:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca8fb0 <col:4, line:78:3> [in] implicitly Param="arg5" ParamIndex=4
|   | `-ParagraphComment 0x55dc7dca9060 <line:77:15, line:78:3>
|   |   |-TextComment 0x55dc7dca9010 <line:77:15, col:37> Text=" system call argument 5"
|   |   `-TextComment 0x55dc7dca9030 <line:78:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca9080 <col:4, line:79:3> [in] implicitly Param="arg6" ParamIndex=5
|   | `-ParagraphComment 0x55dc7dca9130 <line:78:15, line:79:3>
|   |   |-TextComment 0x55dc7dca90e0 <line:78:15, col:37> Text=" system call argument 6"
|   |   `-TextComment 0x55dc7dca9100 <line:79:3> Text=" "
|   |-ParamCommandComment 0x55dc7dca9150 <col:4, line:81:3> [in] implicitly Param="ssf" ParamIndex=6
|   | `-ParagraphComment 0x55dc7dca9230 <line:79:14, line:81:3>
|   |   |-TextComment 0x55dc7dca91b0 <line:79:14, col:75> Text=" System call stack frame pointer. Used to generate kernel oops"
|   |   |-TextComment 0x55dc7dca91d0 <line:80:3, col:70> Text="            via _arch_syscall_oops_at(). Contents are arch-specific."
|   |   `-TextComment 0x55dc7dca91f0 <line:81:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca9250 <col:4, line:82:22> Name="return"
|   | `-ParagraphComment 0x55dc7dca92d0 <line:81:11, line:82:22>
|   |   |-TextComment 0x55dc7dca9280 <line:81:11, col:75> Text=" system call return value, or 0 if the system call implementation"
|   |   `-TextComment 0x55dc7dca92a0 <line:82:3, col:22> Text="         return void"
|   `-ParagraphComment 0x55dc7dca9320 <line:84:1>
|     `-TextComment 0x55dc7dca92f0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dbba360 <line:93:1, line:106:1> line:93:27 z_syscall_trap 'bool (void)' static inline
| |-CompoundStmt 0x55dc7dbba588 <line:94:1, line:106:1>
| | |-DeclStmt 0x55dc7dbba4f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/syscall.h:95:18>
| | | `-VarDecl 0x55dc7dbba458 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, line:15:16> /vagrant/ext/zephyros/zephyr/include/syscall.h:95:7 used ret 'bool' cinit
| | |   `-ImplicitCastExpr 0x55dc7dbba4d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
| | |     `-IntegerLiteral 0x55dc7dbba4b8 <col:16> 'int' 0
| | `-ReturnStmt 0x55dc7dbba548 </vagrant/ext/zephyros/zephyr/include/syscall.h:105:2, col:9>
| |   `-ImplicitCastExpr 0x55dc7dbba530 <col:9> 'bool' <LValueToRValue>
| |     `-DeclRefExpr 0x55dc7dbba508 <col:9> 'bool' lvalue Var 0x55dc7dbba458 'ret' 'bool'
| `-AlwaysInlineAttr 0x55dc7dbba400 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x55dc7dbba638 </vagrant/ext/zephyros/zephyr/include/syscall.h:113:1, line:120:1> line:113:20 _is_user_context 'bool (void)' static inline
| |-CompoundStmt 0x55dc7dbba728 <line:114:1, line:120:1>
| | `-ReturnStmt 0x55dc7dbba710 <line:118:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-ImplicitCastExpr 0x55dc7dbba6f8 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x55dc7dbba6d8 <col:16> 'int' 0
| `-FullComment 0x55dc7dca9580 </vagrant/ext/zephyros/zephyr/include/syscall.h:109:3, line:111:69>
|   |-ParagraphComment 0x55dc7dca9470 <line:109:3, col:53>
|   | `-TextComment 0x55dc7dca9440 <col:3, col:53> Text=" Indicate whether the CPU is currently in user mode"
|   |-ParagraphComment 0x55dc7dca94c0 <line:111:3>
|   | `-TextComment 0x55dc7dca9490 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca94e0 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x55dc7dca9540 <col:11, col:69>
|       `-TextComment 0x55dc7dca9510 <col:11, col:69> Text=" true if the CPU is currently running with user permissions"
|-TypedefDecl 0x55dc7dbba770 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h:40:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x55dc7dbba740 '__builtin_va_list' sugar
|   |-Typedef 0x55dc7da67538 '__builtin_va_list'
|   `-ConstantArrayType 0x55dc7da674e0 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x55dc7da67350 'struct __va_list_tag'
|       `-Record 0x55dc7da672c8 '__va_list_tag'
|-TypedefDecl 0x55dc7dbba800 <line:99:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x55dc7dbba7d0 '__gnuc_va_list' sugar
|   |-Typedef 0x55dc7dbba770 '__gnuc_va_list'
|   `-TypedefType 0x55dc7dbba740 '__builtin_va_list' sugar
|     |-Typedef 0x55dc7da67538 '__builtin_va_list'
|     `-ConstantArrayType 0x55dc7da674e0 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x55dc7da67350 'struct __va_list_tag'
|         `-Record 0x55dc7da672c8 '__va_list_tag'
|-FunctionDecl 0x55dc7dbba9b0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:51:1, line:54:1> line:51:40 printk 'void (const char *, ...)' static inline
| |-ParmVarDecl 0x55dc7dbba8f0 <col:47, col:59> col:59 used fmt 'const char *'
| |-CompoundStmt 0x55dc7dbbab78 <line:52:1, line:54:1>
| | `-CStyleCastExpr 0x55dc7dbbab50 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55dc7dbbab38 <col:29, col:31> 'const char *' <LValueToRValue>
| |     `-ParenExpr 0x55dc7dbbab18 <col:29, col:31> 'const char *' lvalue
| |       `-DeclRefExpr 0x55dc7dbbaab0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:53:13> 'const char *' lvalue ParmVar 0x55dc7dbba8f0 'fmt' 'const char *'
| `-FormatAttr 0x55dc7dbbaa58 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 2
|-FunctionDecl 0x55dc7dbbae00 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:56:1, line:60:1> line:56:40 vprintk 'void (const char *, struct __va_list_tag *)' static inline
| |-ParmVarDecl 0x55dc7dbbabf8 <col:48, col:60> col:60 used fmt 'const char *'
| |-ParmVarDecl 0x55dc7dbbacf0 <col:65, col:73> col:73 used ap 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x55dc7dbbb098 <line:57:1, line:60:1>
| | |-CStyleCastExpr 0x55dc7dbbafa8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55dc7dbbaf90 <col:29, col:31> 'const char *' <LValueToRValue>
| | |   `-ParenExpr 0x55dc7dbbaf70 <col:29, col:31> 'const char *' lvalue
| | |     `-DeclRefExpr 0x55dc7dbbaf08 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:58:13> 'const char *' lvalue ParmVar 0x55dc7dbbabf8 'fmt' 'const char *'
| | `-CStyleCastExpr 0x55dc7dbbb070 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55dc7dbbb058 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue>
| |     `-ParenExpr 0x55dc7dbbb038 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue
| |       `-DeclRefExpr 0x55dc7dbbafd0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:59:13> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x55dc7dbbacf0 'ap' 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x55dc7dbbaeb0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 0
|-FunctionDecl 0x55dc7dbc36f8 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:63:1, line:64:26> line:63:32 snprintk 'int (char *, size_t, const char *, ...)' extern
| |-ParmVarDecl 0x55dc7dbbb120 <col:41, col:47> col:47 str 'char *'
| |-ParmVarDecl 0x55dc7dbbb190 <col:52, col:59> col:59 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dbc35c0 <line:64:6, col:18> col:18 fmt 'const char *'
| `-FormatAttr 0x55dc7dbc37b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 4
|-FunctionDecl 0x55dc7dbc3b18 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:65:1, line:66:35> line:65:32 vsnprintk 'int (char *, size_t, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x55dc7dbc3870 <col:42, col:48> col:48 str 'char *'
| |-ParmVarDecl 0x55dc7dbc38e0 <col:53, col:60> col:60 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dbc3958 <line:66:8, col:20> col:20 fmt 'const char *'
| |-ParmVarDecl 0x55dc7dbc39c8 <col:25, col:33> col:33 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x55dc7dbc3bd8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x55dc7dbc4120 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:68:1, line:69:34> line:68:33 z_vprintk 'void (int (*)(int, void *), void *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x55dc7dbc3e80 <col:43, col:68> col:49 out 'int (*)(int, void *)'
| |-ParmVarDecl 0x55dc7dbc3ef8 <col:71, col:77> col:77 ctx 'void *'
| |-ParmVarDecl 0x55dc7dbc3f70 <line:69:7, col:19> col:19 fmt 'const char *'
| |-ParmVarDecl 0x55dc7dbc3fe0 <col:24, col:32> col:32 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x55dc7dbc41e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-RecordDecl 0x55dc7dbc4298 prev 0x55dc7db56898 </vagrant/ext/zephyros/zephyr/include/sys/arch_interface.h:41:1, col:8> col:8 struct k_thread
|-RecordDecl 0x55dc7dbc4320 <line:42:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x55dc7dbc43d0 <line:44:9, col:16> col:16 struct _k_thread_stack_element
|-TypedefDecl 0x55dc7dbc44d0 <col:1, col:40> col:40 referenced k_thread_stack_t 'struct _k_thread_stack_element':'struct _k_thread_stack_element'
| `-ElaboratedType 0x55dc7dbc4480 'struct _k_thread_stack_element' sugar
|   `-RecordType 0x55dc7dbc4460 'struct _k_thread_stack_element'
|     `-Record 0x55dc7dc07900 '_k_thread_stack_element'
|-TypedefDecl 0x55dc7dbc61c0 <line:46:1, col:62> col:16 referenced k_thread_entry_t 'void (*)(void *, void *, void *)'
| `-PointerType 0x55dc7dbc6150 'void (*)(void *, void *, void *)'
|   `-ParenType 0x55dc7dbc60f0 'void (void *, void *, void *)' sugar
|     `-FunctionProtoType 0x55dc7dbc60a0 'void (void *, void *, void *)' cdecl
|       |-BuiltinType 0x55dc7da66970 'void'
|       |-PointerType 0x55dc7da66e10 'void *'
|       | `-BuiltinType 0x55dc7da66970 'void'
|       |-PointerType 0x55dc7da66e10 'void *'
|       | `-BuiltinType 0x55dc7da66970 'void'
|       `-PointerType 0x55dc7da66e10 'void *'
|         `-BuiltinType 0x55dc7da66970 'void'
|-FunctionDecl 0x55dc7dbc6308 <line:59:1, col:45> col:21 used arch_k_cycle_get_32 'u32_t (void)' static inline
| `-FullComment 0x55dc7dca9730 <line:55:3, line:57:24>
|   |-ParagraphComment 0x55dc7dca9620 <line:55:3, col:70>
|   | `-TextComment 0x55dc7dca95f0 <col:3, col:70> Text=" Obtain the current cycle count, in units that are hardware-specific"
|   |-ParagraphComment 0x55dc7dca9670 <line:57:3>
|   | `-TextComment 0x55dc7dca9640 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca9690 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x55dc7dca96f0 <col:8, col:24>
|       `-TextComment 0x55dc7dca96c0 <col:8, col:24> Text=" k_cycle_get_32()"
|-FunctionDecl 0x55dc7dbc6680 <line:132:1, col:24> col:6 used arch_cpu_idle 'void (void)'
| `-FullComment 0x55dc7dca9ab0 <line:120:3, line:130:20>
|   |-ParagraphComment 0x55dc7dca97d0 <line:120:3>
|   | `-TextComment 0x55dc7dca97a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca97f0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55dc7dca9850 <col:10, col:33>
|   |   `-TextComment 0x55dc7dca9820 <col:10, col:33> Text=" Power save idle routine"
|   |-ParagraphComment 0x55dc7dca98f0 <line:122:3, line:124:47>
|   | |-TextComment 0x55dc7dca9870 <line:122:3, col:74> Text=" This function will be called by the kernel idle loop or possibly within"
|   | |-TextComment 0x55dc7dca9890 <line:123:3, col:68> Text=" an implementation of z_sys_power_save_idle in the kernel when the"
|   | `-TextComment 0x55dc7dca98b0 <line:124:3, col:47> Text=" '_sys_power_save_flag' variable is non-zero."
|   |-ParagraphComment 0x55dc7dca9990 <line:126:3, line:128:35>
|   | |-TextComment 0x55dc7dca9910 <line:126:3, col:72> Text=" Architectures that do not implement power management instructions may"
|   | |-TextComment 0x55dc7dca9930 <line:127:3, col:69> Text=" immediately return, otherwise a power-saving instruction should be"
|   | `-TextComment 0x55dc7dca9950 <line:128:3, col:35> Text=" issued to wait for an interrupt."
|   |-ParagraphComment 0x55dc7dca99e0 <line:130:3>
|   | `-TextComment 0x55dc7dca99b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dca9a00 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x55dc7dca9a60 <col:8, col:20>
|       `-TextComment 0x55dc7dca9a30 <col:8, col:20> Text=" k_cpu_idle()"
|-FunctionDecl 0x55dc7dbc6820 <line:152:1, col:43> col:6 used arch_cpu_atomic_idle 'void (unsigned int)'
| |-ParmVarDecl 0x55dc7dbc6760 <col:27, col:40> col:40 key 'unsigned int'
| `-FullComment 0x55dc7dca9fc0 <line:135:3, line:150:76>
|   |-ParagraphComment 0x55dc7dca9b50 <line:135:3>
|   | `-TextComment 0x55dc7dca9b20 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca9b70 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x55dc7dca9bd0 <col:10, col:66>
|   |   `-TextComment 0x55dc7dca9ba0 <col:10, col:66> Text=" Atomically re-enable interrupts and enter low power mode"
|   |-ParagraphComment 0x55dc7dca9c20 <line:137:3, col:62>
|   | `-TextComment 0x55dc7dca9bf0 <col:3, col:62> Text=" The requirements for arch_cpu_atomic_idle() are as follows:"
|   |-ParagraphComment 0x55dc7dca9d10 <line:139:3, line:143:44>
|   | |-TextComment 0x55dc7dca9c40 <line:139:3, col:67> Text=" -# Enabling interrupts and entering a low-power mode needs to be"
|   | |-TextComment 0x55dc7dca9c60 <line:140:3, col:73> Text="    atomic, i.e. there should be no period of time where interrupts are"
|   | |-TextComment 0x55dc7dca9c80 <line:141:3, col:77> Text="    enabled before the processor enters a low-power mode.  See the comments"
|   | |-TextComment 0x55dc7dca9ca0 <line:142:3, col:62> Text="    in k_lifo_get(), for example, of the race condition that"
|   | `-TextComment 0x55dc7dca9cc0 <line:143:3, col:44> Text="    occurs if this requirement is not met."
|   |-ParagraphComment 0x55dc7dca9d80 <line:145:3, line:146:65>
|   | |-TextComment 0x55dc7dca9d30 <line:145:3, col:74> Text=" -# After waking up from the low-power mode, the interrupt lockout state"
|   | `-TextComment 0x55dc7dca9d50 <line:146:3, col:65> Text="    must be restored as indicated in the 'key' input parameter."
|   |-ParagraphComment 0x55dc7dca9dd0 <line:148:3>
|   | `-TextComment 0x55dc7dca9da0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dca9df0 <col:4, col:27> Name="see"
|   | `-ParagraphComment 0x55dc7dca9e50 <col:8, col:27>
|   |   `-TextComment 0x55dc7dca9e20 <col:8, col:27> Text=" k_cpu_atomic_idle()"
|   |-ParagraphComment 0x55dc7dca9ea0 <line:150:3>
|   | `-TextComment 0x55dc7dca9e70 <col:3> Text=" "
|   `-ParamCommandComment 0x55dc7dca9ec0 <col:4, col:76> [in] implicitly Param="key" ParamIndex=0
|     `-ParagraphComment 0x55dc7dca9f50 <col:14, col:76>
|       `-TextComment 0x55dc7dca9f20 <col:14, col:76> Text=" Lockout key returned by previous invocation of arch_irq_lock()"
|-TypedefDecl 0x55dc7dbc6b10 <line:167:1, col:57> col:30 referenced arch_cpustart_t 'void (*)(void *) __attribute__((noreturn))'
| |-PointerType 0x55dc7dbc6ab0 'void (*)(void *) __attribute__((noreturn))'
| | `-ParenType 0x55dc7dbc6a50 'void (void *) __attribute__((noreturn))' sugar
| |   `-FunctionProtoType 0x55dc7dbc6a10 'void (void *) __attribute__((noreturn))' noreturn cdecl
| |     |-BuiltinType 0x55dc7da66970 'void'
| |     `-PointerType 0x55dc7da66e10 'void *'
| |       `-BuiltinType 0x55dc7da66970 'void'
| `-FullComment 0x55dc7dcaa1a0 <line:163:3, line:165:52>
|   |-ParagraphComment 0x55dc7dcaa060 <line:163:3, col:25>
|   | `-TextComment 0x55dc7dcaa030 <col:3, col:25> Text=" Per-cpu entry function"
|   |-ParagraphComment 0x55dc7dcaa0b0 <line:165:3>
|   | `-TextComment 0x55dc7dcaa080 <col:3> Text=" "
|   `-ParamCommandComment 0x55dc7dcaa0d0 <col:4, col:52> [in] implicitly Param="context"
|     `-ParagraphComment 0x55dc7dcaa160 <col:18, col:52>
|       `-TextComment 0x55dc7dcaa130 <col:18, col:52> Text=" parameter, implementation specific"
|-FunctionDecl 0x55dc7dbc7fd0 <line:189:1, line:190:36> line:189:6 arch_start_cpu 'void (int, k_thread_stack_t *, int, arch_cpustart_t, void *)'
| |-ParmVarDecl 0x55dc7dbc6bb0 <col:21, col:25> col:25 cpu_num 'int'
| |-ParmVarDecl 0x55dc7dbc6c98 <col:34, col:52> col:52 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55dc7dbc6d10 <col:59, col:63> col:63 sz 'int'
| |-ParmVarDecl 0x55dc7dbc6da0 <line:190:7, col:23> col:23 fn 'arch_cpustart_t':'void (*)(void *) __attribute__((noreturn))'
| |-ParmVarDecl 0x55dc7dbc6e18 <col:27, col:33> col:33 arg 'void *'
| `-FullComment 0x55dc7dcac960 <line:170:3, line:187:51>
|   |-ParagraphComment 0x55dc7dcaa240 <line:170:3>
|   | `-TextComment 0x55dc7dcaa210 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcaa260 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55dc7dcaa2c0 <col:10, col:53>
|   |   `-TextComment 0x55dc7dcaa290 <col:10, col:53> Text=" Start a numbered CPU on a MP-capable system"
|   |-ParagraphComment 0x55dc7dcaa3b0 <line:172:3, line:176:68>
|   | |-TextComment 0x55dc7dcaa2e0 <line:172:3, col:77> Text=" This starts and initializes a specific CPU.  The main thread on startup is"
|   | |-TextComment 0x55dc7dcaa300 <line:173:3, col:78> Text=" running on CPU zero, other processors are numbered sequentially.  On return"
|   | |-TextComment 0x55dc7dcaa320 <line:174:3, col:78> Text=" from this function, the CPU is known to have begun operating and will enter"
|   | |-TextComment 0x55dc7dcaa340 <line:175:3, col:79> Text=" the provided function.  Its interrupts will be initialized but disabled such"
|   | `-TextComment 0x55dc7dcaa360 <line:176:3, col:68> Text=" that irq_unlock() with the provided key will work to enable them."
|   |-ParagraphComment 0x55dc7dcaa470 <line:178:3, line:181:41>
|   | |-TextComment 0x55dc7dcaa3d0 <line:178:3, col:67> Text=" Normally, in SMP mode this function will be called by the kernel"
|   | |-TextComment 0x55dc7dcaa3f0 <line:179:3, col:79> Text=" initialization and should not be used as a user API.  But it is defined here"
|   | |-TextComment 0x55dc7dcaa410 <line:180:3, col:76> Text=" for special-purpose apps which want Zephyr running on one core and to use"
|   | `-TextComment 0x55dc7dcaa430 <line:181:3, col:41> Text=" others for design-specific processing."
|   |-ParagraphComment 0x55dc7dcaa4c0 <line:183:3>
|   | `-TextComment 0x55dc7dcaa490 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcaa4e0 <col:4, line:184:3> [in] implicitly Param="cpu_num" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcaa590 <line:183:18, line:184:3>
|   |   |-TextComment 0x55dc7dcaa540 <line:183:18, col:43> Text=" Integer number of the CPU"
|   |   `-TextComment 0x55dc7dcaa560 <line:184:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcaa5b0 <col:4, line:185:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcaa660 <line:184:16, line:185:3>
|   |   |-TextComment 0x55dc7dcaa610 <line:184:16, col:40> Text=" Stack memory for the CPU"
|   |   `-TextComment 0x55dc7dcaa630 <line:185:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcaa680 <col:4, line:186:3> [in] implicitly Param="sz" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcaa730 <line:185:13, line:186:3>
|   |   |-TextComment 0x55dc7dcaa6e0 <line:185:13, col:40> Text=" Stack buffer size, in bytes"
|   |   `-TextComment 0x55dc7dcaa700 <line:186:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcaa750 <col:4, line:187:3> [in] implicitly Param="fn" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dcac840 <line:186:13, line:187:3>
|   |   |-TextComment 0x55dc7dcaa7b0 <line:186:13, col:50> Text=" Function to begin running on the CPU."
|   |   `-TextComment 0x55dc7dcac810 <line:187:3> Text=" "
|   `-ParamCommandComment 0x55dc7dcac860 <col:4, col:51> [in] implicitly Param="arg" ParamIndex=4
|     `-ParagraphComment 0x55dc7dcac8f0 <col:14, col:51>
|       `-TextComment 0x55dc7dcac8c0 <col:14, col:51> Text=" Untyped argument to be passed to "fn""
|-FunctionDecl 0x55dc7dbc81c0 <line:204:1, col:46> col:28 used arch_irq_lock 'unsigned int (void)' static inline
| `-FullComment 0x55dc7dcacb10 <line:200:3, line:202:18>
|   |-ParagraphComment 0x55dc7dcaca00 <line:200:3, col:37>
|   | `-TextComment 0x55dc7dcac9d0 <col:3, col:37> Text=" Lock interrupts on the current CPU"
|   |-ParagraphComment 0x55dc7dcaca50 <line:202:3>
|   | `-TextComment 0x55dc7dcaca20 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcaca70 <col:4, col:18> Name="see"
|     `-ParagraphComment 0x55dc7dcacad0 <col:8, col:18>
|       `-TextComment 0x55dc7dcacaa0 <col:8, col:18> Text=" irq_lock()"
|-FunctionDecl 0x55dc7dbc8328 <line:211:1, col:52> col:20 used arch_irq_unlock 'void (unsigned int)' static inline
| |-ParmVarDecl 0x55dc7dbc82a0 <col:36, col:49> col:49 key 'unsigned int'
| `-FullComment 0x55dc7dcaccc0 <line:207:3, line:209:20>
|   |-ParagraphComment 0x55dc7dcacbb0 <line:207:3, col:39>
|   | `-TextComment 0x55dc7dcacb80 <col:3, col:39> Text=" Unlock interrupts on the current CPU"
|   |-ParagraphComment 0x55dc7dcacc00 <line:209:3>
|   | `-TextComment 0x55dc7dcacbd0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcacc20 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x55dc7dcacc80 <col:8, col:20>
|       `-TextComment 0x55dc7dcacc50 <col:8, col:20> Text=" irq_unlock()"
|-FunctionDecl 0x55dc7dbc8498 <line:220:1, col:54> col:20 arch_irq_unlocked 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x55dc7dbc8410 <col:38, col:51> col:51 key 'unsigned int'
| `-FullComment 0x55dc7dcacf60 <line:214:3, line:218:39>
|   |-ParagraphComment 0x55dc7dcacd60 <line:214:3, col:68>
|   | `-TextComment 0x55dc7dcacd30 <col:3, col:68> Text=" Test if calling arch_irq_unlock() with this key would unlock irqs"
|   |-ParagraphComment 0x55dc7dcacdb0 <line:216:3>
|   | `-TextComment 0x55dc7dcacd80 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcacdd0 <col:4, line:217:3> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcace80 <line:216:14, line:217:3>
|   |   |-TextComment 0x55dc7dcace30 <line:216:14, col:47> Text=" value returned by arch_irq_lock()"
|   |   `-TextComment 0x55dc7dcace50 <line:217:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcacea0 <col:4, line:218:39> Name="return"
|     `-ParagraphComment 0x55dc7dcacf20 <line:217:11, line:218:39>
|       |-TextComment 0x55dc7dcaced0 <line:217:11, col:72> Text=" true if interrupts were unlocked prior to the arch_irq_lock()"
|       `-TextComment 0x55dc7dcacef0 <line:218:3, col:39> Text=" call that produced the key argument."
|-FunctionDecl 0x55dc7dbc8608 <line:227:1, col:39> col:6 arch_irq_disable 'void (unsigned int)'
| |-ParmVarDecl 0x55dc7dbc8580 <col:23, col:36> col:36 irq 'unsigned int'
| `-FullComment 0x55dc7dcad110 <line:223:3, line:225:21>
|   |-ParagraphComment 0x55dc7dcad000 <line:223:3, col:39>
|   | `-TextComment 0x55dc7dcacfd0 <col:3, col:39> Text=" Disable the specified interrupt line"
|   |-ParagraphComment 0x55dc7dcad050 <line:225:3>
|   | `-TextComment 0x55dc7dcad020 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcad070 <col:4, col:21> Name="see"
|     `-ParagraphComment 0x55dc7dcad0d0 <col:8, col:21>
|       `-TextComment 0x55dc7dcad0a0 <col:8, col:21> Text=" irq_disable()"
|-FunctionDecl 0x55dc7dbc8778 <line:234:1, col:38> col:6 arch_irq_enable 'void (unsigned int)'
| |-ParmVarDecl 0x55dc7dbc86f0 <col:22, col:35> col:35 irq 'unsigned int'
| `-FullComment 0x55dc7dcad2c0 <line:230:3, line:232:20>
|   |-ParagraphComment 0x55dc7dcad1b0 <line:230:3, col:38>
|   | `-TextComment 0x55dc7dcad180 <col:3, col:38> Text=" Enable the specified interrupt line"
|   |-ParagraphComment 0x55dc7dcad200 <line:232:3>
|   | `-TextComment 0x55dc7dcad1d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcad220 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x55dc7dcad280 <col:8, col:20>
|       `-TextComment 0x55dc7dcad250 <col:8, col:20> Text=" irq_enable()"
|-FunctionDecl 0x55dc7dbc8928 <line:241:1, col:41> col:5 arch_irq_is_enabled 'int (unsigned int)'
| |-ParmVarDecl 0x55dc7dbc8860 <col:25, col:38> col:38 irq 'unsigned int'
| `-FullComment 0x55dc7dcad470 <line:237:3, line:239:24>
|   |-ParagraphComment 0x55dc7dcad360 <line:237:3, col:39>
|   | `-TextComment 0x55dc7dcad330 <col:3, col:39> Text=" Test if an interrupt line is enabled"
|   |-ParagraphComment 0x55dc7dcad3b0 <line:239:3>
|   | `-TextComment 0x55dc7dcad380 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcad3d0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x55dc7dcad430 <col:8, col:24>
|       `-TextComment 0x55dc7dcad400 <col:8, col:24> Text=" irq_is_enabled()"
|-FunctionDecl 0x55dc7dbc8e78 <line:254:1, line:256:37> line:254:5 used arch_irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |-ParmVarDecl 0x55dc7dbc8a10 <col:30, col:43> col:43 irq 'unsigned int'
| |-ParmVarDecl 0x55dc7dbc8a88 <col:48, col:61> col:61 priority 'unsigned int'
| |-ParmVarDecl 0x55dc7dbc8c20 <line:255:9, col:40> col:16 routine 'void (*)(void *)'
| |-ParmVarDecl 0x55dc7dbc8c98 <line:256:9, col:15> col:15 parameter 'void *'
| |-ParmVarDecl 0x55dc7dbc8d08 <col:26, col:32> col:32 flags 'u32_t':'unsigned int'
| `-FullComment 0x55dc7dcada90 <line:244:3, line:252:48>
|   |-ParagraphComment 0x55dc7dcad510 <line:244:3, col:53>
|   | `-TextComment 0x55dc7dcad4e0 <col:3, col:53> Text=" Arch-specific hook to install a dynamic interrupt."
|   |-ParagraphComment 0x55dc7dcad560 <line:246:3>
|   | `-TextComment 0x55dc7dcad530 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcad580 <col:4, line:247:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcad630 <line:246:14, line:247:3>
|   |   |-TextComment 0x55dc7dcad5e0 <line:246:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x55dc7dcad600 <line:247:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcad650 <col:4, line:248:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcad700 <line:247:19, line:248:3>
|   |   |-TextComment 0x55dc7dcad6b0 <line:247:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x55dc7dcad6d0 <line:248:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcad720 <col:4, line:249:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcad7d0 <line:248:18, line:249:3>
|   |   |-TextComment 0x55dc7dcad780 <line:248:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x55dc7dcad7a0 <line:249:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcad7f0 <col:4, line:250:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dcad8a0 <line:249:20, line:250:3>
|   |   |-TextComment 0x55dc7dcad850 <line:249:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x55dc7dcad870 <line:250:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcad8c0 <col:4, col:52> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x55dc7dcad950 <col:16, col:52>
|   |   `-TextComment 0x55dc7dcad920 <col:16, col:52> Text=" Arch-specific IRQ configuration flag"
|   |-ParagraphComment 0x55dc7dcad9a0 <line:252:3>
|   | `-TextComment 0x55dc7dcad970 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcad9c0 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x55dc7dcada20 <col:11, col:48>
|       `-TextComment 0x55dc7dcad9f0 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x55dc7dbc92b8 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:27:1, line:34:1> line:27:19 used sys_clock_hw_cycles_per_sec 'int (void)' static inline
| `-CompoundStmt 0x55dc7dbc9368 <line:28:1, line:34:1>
|-FunctionDecl 0x55dc7dbc97c0 <line:55:1, line:105:1> line:55:28 used z_tmcvt 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' static inline
| |-ParmVarDecl 0x55dc7dbc9388 <col:36, col:42> col:42 used t 'u64_t':'unsigned long long'
| |-ParmVarDecl 0x55dc7dbc93f8 <col:45, col:51> col:51 used from_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55dc7dbc9468 <col:60, col:66> col:66 used to_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55dc7dbc94d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:13> col:13 used const_hz 'bool'
| |-ParmVarDecl 0x55dc7dbc9548 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:28> col:28 used result32 'bool'
| |-ParmVarDecl 0x55dc7dbc95b8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:13> col:13 used round_up 'bool'
| |-ParmVarDecl 0x55dc7dbc9628 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:28> col:28 used round_off 'bool'
| |-CompoundStmt 0x55dc7dbd00c8 <line:58:1, line:105:1>
| | |-DeclStmt 0x55dc7dbc9c20 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:48>
| | | `-VarDecl 0x55dc7dbc98f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:47> line:59:7 used mul_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x55dc7dbc9c08 <col:19, line:60:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x55dc7dbc9be0 <line:59:19, line:60:47> 'int' '&&'
| | |       |-BinaryOperator 0x55dc7dbc9a70 <line:59:19, line:60:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x55dc7dbc9a58 <line:59:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x55dc7dbc9a40 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x55dc7dbc9950 <col:19> 'bool' lvalue ParmVar 0x55dc7dbc94d8 'const_hz' 'bool'
| | |       | `-ParenExpr 0x55dc7dbc9a20 <line:60:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x55dc7dbc99f8 <col:4, col:12> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x55dc7dbc99c8 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x55dc7dbc9978 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc9468 'to_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x55dc7dbc99e0 <col:12> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x55dc7dbc99a0 <col:12> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc93f8 'from_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x55dc7dbc9bc0 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x55dc7dbc9b98 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x55dc7dbc9b40 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x55dc7dbc9b18 <col:26, col:34> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x55dc7dbc9ae8 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x55dc7dbc9a98 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc9468 'to_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x55dc7dbc9b00 <col:34> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x55dc7dbc9ac0 <col:34> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc93f8 'from_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x55dc7dbc9b80 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x55dc7dbc9b60 <col:46> 'int' 0
| | |-DeclStmt 0x55dc7dbc9f78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:48>
| | | `-VarDecl 0x55dc7dbc9c48 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:47> line:61:7 used div_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x55dc7dbc9f60 <col:19, line:62:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x55dc7dbc9f38 <line:61:19, line:62:47> 'int' '&&'
| | |       |-BinaryOperator 0x55dc7dbc9dc8 <line:61:19, line:62:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x55dc7dbc9db0 <line:61:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x55dc7dbc9d98 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x55dc7dbc9ca8 <col:19> 'bool' lvalue ParmVar 0x55dc7dbc94d8 'const_hz' 'bool'
| | |       | `-ParenExpr 0x55dc7dbc9d78 <line:62:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x55dc7dbc9d50 <col:4, col:14> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x55dc7dbc9d20 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x55dc7dbc9cd0 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc93f8 'from_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x55dc7dbc9d38 <col:14> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x55dc7dbc9cf8 <col:14> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc9468 'to_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x55dc7dbc9f18 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x55dc7dbc9ef0 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x55dc7dbc9e98 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x55dc7dbc9e70 <col:26, col:36> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x55dc7dbc9e40 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x55dc7dbc9df0 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc93f8 'from_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x55dc7dbc9e58 <col:36> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x55dc7dbc9e18 <col:36> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc9468 'to_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x55dc7dbc9ed8 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x55dc7dbc9eb8 <col:46> 'int' 0
| | |-IfStmt 0x55dc7dbcd560 <line:64:2, line:66:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x55dc7dbcd390 <line:64:6, col:17> 'int' '=='
| | | | |-ImplicitCastExpr 0x55dc7dbcd360 <col:6> 'u32_t':'unsigned int' <LValueToRValue>
| | | | | `-DeclRefExpr 0x55dc7dbc9f90 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc93f8 'from_hz' 'u32_t':'unsigned int'
| | | | `-ImplicitCastExpr 0x55dc7dbcd378 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55dc7dbc9fb8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc9468 'to_hz' 'u32_t':'unsigned int'
| | | |-CompoundStmt 0x55dc7dbcd548 <col:24, line:66:2>
| | | | `-ReturnStmt 0x55dc7dbcd530 <line:65:3, col:34>
| | | |   `-ConditionalOperator 0x55dc7dbcd500 <col:10, col:34> 'unsigned long long'
| | | |     |-ImplicitCastExpr 0x55dc7dbcd4b8 <col:10> 'int' <IntegralCast>
| | | |     | `-ImplicitCastExpr 0x55dc7dbcd4a0 <col:10> 'bool' <LValueToRValue>
| | | |     |   `-DeclRefExpr 0x55dc7dbcd3b8 <col:10> 'bool' lvalue ParmVar 0x55dc7dbc9548 'result32' 'bool'
| | | |     |-ImplicitCastExpr 0x55dc7dbcd4e8 <col:21, col:30> 'unsigned long long' <IntegralCast>
| | | |     | `-ParenExpr 0x55dc7dbcd458 <col:21, col:30> 'u32_t':'unsigned int'
| | | |     |   `-CStyleCastExpr 0x55dc7dbcd430 <col:22, col:29> 'u32_t':'unsigned int' <IntegralCast>
| | | |     |     `-ImplicitCastExpr 0x55dc7dbcd418 <col:29> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |     |       `-DeclRefExpr 0x55dc7dbcd3e0 <col:29> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbc9388 't' 'u64_t':'unsigned long long'
| | | |     `-ImplicitCastExpr 0x55dc7dbcd4d0 <col:34> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |       `-DeclRefExpr 0x55dc7dbcd478 <col:34> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbc9388 't' 'u64_t':'unsigned long long'
| | | `-<<<NULL>>>
| | |-DeclStmt 0x55dc7dbcd640 <line:68:2, col:15>
| | | `-VarDecl 0x55dc7dbcd5a8 <col:2, col:14> col:8 used off 'u64_t':'unsigned long long' cinit
| | |   `-ImplicitCastExpr 0x55dc7dbcd628 <col:14> 'u64_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x55dc7dbcd608 <col:14> 'int' 0
| | |-IfStmt 0x55dc7dbcdc20 <line:70:2, line:78:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x55dc7dbcd698 <line:70:6, col:7> 'int' prefix '!'
| | | | `-ImplicitCastExpr 0x55dc7dbcd680 <col:7> 'bool' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55dc7dbcd658 <col:7> 'bool' lvalue Var 0x55dc7dbc98f0 'mul_ratio' 'bool'
| | | |-CompoundStmt 0x55dc7dbcdc00 <col:18, line:78:2>
| | | | |-DeclStmt 0x55dc7dbcd8b8 <line:71:3, col:59>
| | | | | `-VarDecl 0x55dc7dbcd6c8 <col:3, col:52> col:9 used rdivisor 'u32_t':'unsigned int' cinit
| | | | |   `-ConditionalOperator 0x55dc7dbcd888 <col:20, col:52> 'unsigned int'
| | | | |     |-ImplicitCastExpr 0x55dc7dbcd858 <col:20> 'int' <IntegralCast>
| | | | |     | `-ImplicitCastExpr 0x55dc7dbcd840 <col:20> 'bool' <LValueToRValue>
| | | | |     |   `-DeclRefExpr 0x55dc7dbcd728 <col:20> 'bool' lvalue Var 0x55dc7dbc9c48 'div_ratio' 'bool'
| | | | |     |-ParenExpr 0x55dc7dbcd7f8 <col:32, col:48> 'unsigned int'
| | | | |     | `-BinaryOperator 0x55dc7dbcd7d0 <col:33, col:43> 'unsigned int' '/'
| | | | |     |   |-ImplicitCastExpr 0x55dc7dbcd7a0 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |   | `-DeclRefExpr 0x55dc7dbcd750 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc93f8 'from_hz' 'u32_t':'unsigned int'
| | | | |     |   `-ImplicitCastExpr 0x55dc7dbcd7b8 <col:43> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |     `-DeclRefExpr 0x55dc7dbcd778 <col:43> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc9468 'to_hz' 'u32_t':'unsigned int'
| | | | |     `-ImplicitCastExpr 0x55dc7dbcd870 <col:52> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x55dc7dbcd818 <col:52> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc93f8 'from_hz' 'u32_t':'unsigned int'
| | | | `-IfStmt 0x55dc7dbcdbc8 <line:73:3, line:77:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-ImplicitCastExpr 0x55dc7dbcd8f8 <line:73:7> 'bool' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x55dc7dbcd8d0 <col:7> 'bool' lvalue ParmVar 0x55dc7dbc95b8 'round_up' 'bool'
| | | |   |-CompoundStmt 0x55dc7dbcda18 <col:17, line:75:3>
| | | |   | `-BinaryOperator 0x55dc7dbcd9f0 <line:74:4, col:21> 'u64_t':'unsigned long long' '='
| | | |   |   |-DeclRefExpr 0x55dc7dbcd910 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x55dc7dbcd5a8 'off' 'u64_t':'unsigned long long'
| | | |   |   `-ImplicitCastExpr 0x55dc7dbcd9d8 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |   |     `-BinaryOperator 0x55dc7dbcd9b0 <col:10, col:21> 'unsigned int' '-'
| | | |   |       |-ImplicitCastExpr 0x55dc7dbcd980 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   |       | `-DeclRefExpr 0x55dc7dbcd938 <col:10> 'u32_t':'unsigned int' lvalue Var 0x55dc7dbcd6c8 'rdivisor' 'u32_t':'unsigned int'
| | | |   |       `-ImplicitCastExpr 0x55dc7dbcd998 <col:21> 'unsigned int' <IntegralCast>
| | | |   |         `-IntegerLiteral 0x55dc7dbcd960 <col:21> 'int' 1
| | | |   `-IfStmt 0x55dc7dbcdb90 <line:75:10, line:77:3>
| | | |     |-<<<NULL>>>
| | | |     |-<<<NULL>>>
| | | |     |-ImplicitCastExpr 0x55dc7dbcda58 <line:75:14> 'bool' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x55dc7dbcda30 <col:14> 'bool' lvalue ParmVar 0x55dc7dbc9628 'round_off' 'bool'
| | | |     |-CompoundStmt 0x55dc7dbcdb78 <col:25, line:77:3>
| | | |     | `-BinaryOperator 0x55dc7dbcdb50 <line:76:4, col:21> 'u64_t':'unsigned long long' '='
| | | |     |   |-DeclRefExpr 0x55dc7dbcda70 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x55dc7dbcd5a8 'off' 'u64_t':'unsigned long long'
| | | |     |   `-ImplicitCastExpr 0x55dc7dbcdb38 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |     |     `-BinaryOperator 0x55dc7dbcdb10 <col:10, col:21> 'unsigned int' '/'
| | | |     |       |-ImplicitCastExpr 0x55dc7dbcdae0 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |     |       | `-DeclRefExpr 0x55dc7dbcda98 <col:10> 'u32_t':'unsigned int' lvalue Var 0x55dc7dbcd6c8 'rdivisor' 'u32_t':'unsigned int'
| | | |     |       `-ImplicitCastExpr 0x55dc7dbcdaf8 <col:21> 'unsigned int' <IntegralCast>
| | | |     |         `-IntegerLiteral 0x55dc7dbcdac0 <col:21> 'int' 2
| | | |     `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-IfStmt 0x55dc7dbd0068 <line:85:2, line:104:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x55dc7dbcdc80 <line:85:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x55dc7dbcdc58 <col:6> 'bool' lvalue Var 0x55dc7dbc9c48 'div_ratio' 'bool'
| |   |-CompoundStmt 0x55dc7dbce0f8 <col:17, line:92:2>
| |   | |-CompoundAssignOperator 0x55dc7dbcdd00 <line:86:3, col:8> 'u64_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| |   | | |-DeclRefExpr 0x55dc7dbcdc98 <col:3> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbc9388 't' 'u64_t':'unsigned long long'
| |   | | `-ImplicitCastExpr 0x55dc7dbcdce8 <col:8> 'u64_t':'unsigned long long' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x55dc7dbcdcc0 <col:8> 'u64_t':'unsigned long long' lvalue Var 0x55dc7dbcd5a8 'off' 'u64_t':'unsigned long long'
| |   | `-IfStmt 0x55dc7dbce0c0 <line:87:3, line:91:3>
| |   |   |-<<<NULL>>>
| |   |   |-<<<NULL>>>
| |   |   |-ImplicitCastExpr 0x55dc7dbcdd60 <line:87:7> 'bool' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x55dc7dbcdd38 <col:7> 'bool' lvalue ParmVar 0x55dc7dbc9548 'result32' 'bool'
| |   |   |-CompoundStmt 0x55dc7dbcdf30 <col:17, line:89:3>
| |   |   | `-ReturnStmt 0x55dc7dbcdf18 <line:88:4, col:40>
| |   |   |   `-ImplicitCastExpr 0x55dc7dbcdf00 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |   |   |     `-BinaryOperator 0x55dc7dbcded8 <col:11, col:40> 'unsigned int' '/'
| |   |   |       |-ParenExpr 0x55dc7dbcddf0 <col:11, col:20> 'u32_t':'unsigned int'
| |   |   |       | `-CStyleCastExpr 0x55dc7dbcddc8 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |   |   |       |   `-ImplicitCastExpr 0x55dc7dbcddb0 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |   |       |     `-DeclRefExpr 0x55dc7dbcdd78 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbc9388 't' 'u64_t':'unsigned long long'
| |   |   |       `-ParenExpr 0x55dc7dbcdeb8 <col:24, col:40> 'unsigned int'
| |   |   |         `-BinaryOperator 0x55dc7dbcde90 <col:25, col:35> 'unsigned int' '/'
| |   |   |           |-ImplicitCastExpr 0x55dc7dbcde60 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |           | `-DeclRefExpr 0x55dc7dbcde10 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc93f8 'from_hz' 'u32_t':'unsigned int'
| |   |   |           `-ImplicitCastExpr 0x55dc7dbcde78 <col:35> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |             `-DeclRefExpr 0x55dc7dbcde38 <col:35> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc9468 'to_hz' 'u32_t':'unsigned int'
| |   |   `-CompoundStmt 0x55dc7dbce0a8 <line:89:10, line:91:3>
| |   |     `-ReturnStmt 0x55dc7dbce090 <line:90:4, col:31>
| |   |       `-BinaryOperator 0x55dc7dbce068 <col:11, col:31> 'unsigned long long' '/'
| |   |         |-ImplicitCastExpr 0x55dc7dbce038 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |         | `-DeclRefExpr 0x55dc7dbcdf48 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbc9388 't' 'u64_t':'unsigned long long'
| |   |         `-ImplicitCastExpr 0x55dc7dbce050 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |   |           `-ParenExpr 0x55dc7dbce018 <col:15, col:31> 'unsigned int'
| |   |             `-BinaryOperator 0x55dc7dbcdff0 <col:16, col:26> 'unsigned int' '/'
| |   |               |-ImplicitCastExpr 0x55dc7dbcdfc0 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |   |               | `-DeclRefExpr 0x55dc7dbcdf70 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc93f8 'from_hz' 'u32_t':'unsigned int'
| |   |               `-ImplicitCastExpr 0x55dc7dbcdfd8 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| |   |                 `-DeclRefExpr 0x55dc7dbcdf98 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc9468 'to_hz' 'u32_t':'unsigned int'
| |   `-IfStmt 0x55dc7dbd0030 <line:92:9, line:104:2>
| |     |-<<<NULL>>>
| |     |-<<<NULL>>>
| |     |-ImplicitCastExpr 0x55dc7dbce140 <line:92:13> 'bool' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dbce118 <col:13> 'bool' lvalue Var 0x55dc7dbc98f0 'mul_ratio' 'bool'
| |     |-CompoundStmt 0x55dc7dbcfaf8 <col:24, line:98:2>
| |     | `-IfStmt 0x55dc7dbcfac0 <line:93:3, line:97:3>
| |     |   |-<<<NULL>>>
| |     |   |-<<<NULL>>>
| |     |   |-ImplicitCastExpr 0x55dc7dbce180 <line:93:7> 'bool' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x55dc7dbce158 <col:7> 'bool' lvalue ParmVar 0x55dc7dbc9548 'result32' 'bool'
| |     |   |-CompoundStmt 0x55dc7dbcf930 <col:17, line:95:3>
| |     |   | `-ReturnStmt 0x55dc7dbce338 <line:94:4, col:40>
| |     |   |   `-ImplicitCastExpr 0x55dc7dbce320 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |     |   |     `-BinaryOperator 0x55dc7dbce2f8 <col:11, col:40> 'unsigned int' '*'
| |     |   |       |-ParenExpr 0x55dc7dbce210 <col:11, col:20> 'u32_t':'unsigned int'
| |     |   |       | `-CStyleCastExpr 0x55dc7dbce1e8 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |     |   |       |   `-ImplicitCastExpr 0x55dc7dbce1d0 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |   |       |     `-DeclRefExpr 0x55dc7dbce198 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbc9388 't' 'u64_t':'unsigned long long'
| |     |   |       `-ParenExpr 0x55dc7dbce2d8 <col:24, col:40> 'unsigned int'
| |     |   |         `-BinaryOperator 0x55dc7dbce2b0 <col:25, col:33> 'unsigned int' '/'
| |     |   |           |-ImplicitCastExpr 0x55dc7dbce280 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |           | `-DeclRefExpr 0x55dc7dbce230 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc9468 'to_hz' 'u32_t':'unsigned int'
| |     |   |           `-ImplicitCastExpr 0x55dc7dbce298 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |             `-DeclRefExpr 0x55dc7dbce258 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc93f8 'from_hz' 'u32_t':'unsigned int'
| |     |   `-CompoundStmt 0x55dc7dbcfaa8 <line:95:10, line:97:3>
| |     |     `-ReturnStmt 0x55dc7dbcfa90 <line:96:4, col:31>
| |     |       `-BinaryOperator 0x55dc7dbcfa68 <col:11, col:31> 'unsigned long long' '*'
| |     |         |-ImplicitCastExpr 0x55dc7dbcfa38 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |         | `-DeclRefExpr 0x55dc7dbcf948 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbc9388 't' 'u64_t':'unsigned long long'
| |     |         `-ImplicitCastExpr 0x55dc7dbcfa50 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |     |           `-ParenExpr 0x55dc7dbcfa18 <col:15, col:31> 'unsigned int'
| |     |             `-BinaryOperator 0x55dc7dbcf9f0 <col:16, col:24> 'unsigned int' '/'
| |     |               |-ImplicitCastExpr 0x55dc7dbcf9c0 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |     |               | `-DeclRefExpr 0x55dc7dbcf970 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc9468 'to_hz' 'u32_t':'unsigned int'
| |     |               `-ImplicitCastExpr 0x55dc7dbcf9d8 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |     |                 `-DeclRefExpr 0x55dc7dbcf998 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc93f8 'from_hz' 'u32_t':'unsigned int'
| |     `-CompoundStmt 0x55dc7dbd0018 <line:98:9, line:104:2>
| |       `-IfStmt 0x55dc7dbcffe0 <line:99:3, line:103:3>
| |         |-<<<NULL>>>
| |         |-<<<NULL>>>
| |         |-ImplicitCastExpr 0x55dc7dbcfb38 <line:99:7> 'bool' <LValueToRValue>
| |         | `-DeclRefExpr 0x55dc7dbcfb10 <col:7> 'bool' lvalue ParmVar 0x55dc7dbc9548 'result32' 'bool'
| |         |-CompoundStmt 0x55dc7dbcfdd0 <col:17, line:101:3>
| |         | `-ReturnStmt 0x55dc7dbcfdb8 <line:100:4, col:46>
| |         |   `-ImplicitCastExpr 0x55dc7dbcfda0 <col:11, col:46> 'u64_t':'unsigned long long' <IntegralCast>
| |         |     `-CStyleCastExpr 0x55dc7dbcfd78 <col:11, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |         |       `-ParenExpr 0x55dc7dbcfd58 <col:18, col:46> 'unsigned long long'
| |         |         `-BinaryOperator 0x55dc7dbcfcf0 <col:19, col:39> 'unsigned long long' '/'
| |         |           |-ParenExpr 0x55dc7dbcfc78 <col:19, col:35> 'unsigned long long'
| |         |           | `-BinaryOperator 0x55dc7dbcfc50 <col:20, col:32> 'unsigned long long' '+'
| |         |           |   |-BinaryOperator 0x55dc7dbcfbe8 <col:20, col:24> 'unsigned long long' '*'
| |         |           |   | |-ImplicitCastExpr 0x55dc7dbcfba0 <col:20> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |   | | `-DeclRefExpr 0x55dc7dbcfb50 <col:20> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbc9388 't' 'u64_t':'unsigned long long'
| |         |           |   | `-ImplicitCastExpr 0x55dc7dbcfbd0 <col:24> 'unsigned long long' <IntegralCast>
| |         |           |   |   `-ImplicitCastExpr 0x55dc7dbcfbb8 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |         |           |   |     `-DeclRefExpr 0x55dc7dbcfb78 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc9468 'to_hz' 'u32_t':'unsigned int'
| |         |           |   `-ImplicitCastExpr 0x55dc7dbcfc38 <col:32> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |     `-DeclRefExpr 0x55dc7dbcfc10 <col:32> 'u64_t':'unsigned long long' lvalue Var 0x55dc7dbcd5a8 'off' 'u64_t':'unsigned long long'
| |         |           `-ImplicitCastExpr 0x55dc7dbcfcd8 <col:39> 'unsigned long long' <IntegralCast>
| |         |             `-ImplicitCastExpr 0x55dc7dbcfcc0 <col:39> 'u32_t':'unsigned int' <LValueToRValue>
| |         |               `-DeclRefExpr 0x55dc7dbcfc98 <col:39> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc93f8 'from_hz' 'u32_t':'unsigned int'
| |         `-CompoundStmt 0x55dc7dbcffc8 <line:101:10, line:103:3>
| |           `-ReturnStmt 0x55dc7dbcffb0 <line:102:4, col:31>
| |             `-BinaryOperator 0x55dc7dbcff88 <col:11, col:31> 'unsigned long long' '/'
| |               |-ParenExpr 0x55dc7dbcff10 <col:11, col:27> 'unsigned long long'
| |               | `-BinaryOperator 0x55dc7dbcfee8 <col:12, col:24> 'unsigned long long' '+'
| |               |   |-BinaryOperator 0x55dc7dbcfe80 <col:12, col:16> 'unsigned long long' '*'
| |               |   | |-ImplicitCastExpr 0x55dc7dbcfe38 <col:12> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |   | | `-DeclRefExpr 0x55dc7dbcfde8 <col:12> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbc9388 't' 'u64_t':'unsigned long long'
| |               |   | `-ImplicitCastExpr 0x55dc7dbcfe68 <col:16> 'unsigned long long' <IntegralCast>
| |               |   |   `-ImplicitCastExpr 0x55dc7dbcfe50 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |               |   |     `-DeclRefExpr 0x55dc7dbcfe10 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc9468 'to_hz' 'u32_t':'unsigned int'
| |               |   `-ImplicitCastExpr 0x55dc7dbcfed0 <col:24> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |     `-DeclRefExpr 0x55dc7dbcfea8 <col:24> 'u64_t':'unsigned long long' lvalue Var 0x55dc7dbcd5a8 'off' 'u64_t':'unsigned long long'
| |               `-ImplicitCastExpr 0x55dc7dbcff70 <col:31> 'unsigned long long' <IntegralCast>
| |                 `-ImplicitCastExpr 0x55dc7dbcff58 <col:31> 'u32_t':'unsigned int' <LValueToRValue>
| |                   `-DeclRefExpr 0x55dc7dbcff30 <col:31> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbc93f8 'from_hz' 'u32_t':'unsigned int'
| `-AlwaysInlineAttr 0x55dc7dbc9898 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x55dc7dbd0220 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:190:1, line:194:1> line:190:21 k_ms_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbd0118 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbd0678 <line:191:1, line:194:1>
| | `-ReturnStmt 0x55dc7dbd0638 <line:193:2, col:65>
| |   `-ImplicitCastExpr 0x55dc7dbd0620 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7dbd0500 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7dbd04e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7dbd02c8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7dbd0578 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7dbd0560 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7dbd02f0 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbd0118 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7dbd0590 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7dbd0318 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55dc7dbd05a8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7dbd03a0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7dbd0388 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7dbd0338 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7dbd05c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7dbd0408 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7dbd03e8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7dbd03c8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7dbd05d8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd0428 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7dbd05f0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd0448 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55dc7dbd0608 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7dbd0468 <col:16> 'int' 0
| `-FullComment 0x55dc7dcadd70 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:182:4, line:188:35>
|   |-ParagraphComment 0x55dc7dcadb30 <line:182:4>
|   | `-TextComment 0x55dc7dcadb00 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcadb50 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcadbb0 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcadb80 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcadc50 <line:184:3, line:186:44>
|   | |-TextComment 0x55dc7dcadbd0 <line:184:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcadbf0 <line:185:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcadc10 <line:186:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcadca0 <line:188:3>
|   | `-TextComment 0x55dc7dcadc70 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcadcc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcadd20 <col:11, col:35>
|       `-TextComment 0x55dc7dcadcf0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd07a0 <line:204:1, line:208:1> line:204:21 k_ms_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbd06a0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbd0b68 <line:205:1, line:208:1>
| | `-ReturnStmt 0x55dc7dbd0b20 <line:207:2, col:66>
| |   `-CallExpr 0x55dc7dbd0a18 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd0a00 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dbd0848 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7dbd0a78 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dbd0870 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbd06a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd0a90 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7dbd0898 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55dc7dbd0aa8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7dbd08f8 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7dbd08e0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7dbd08b8 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7dbd0ac0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7dbd0980 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7dbd0960 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7dbd0940 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd0ad8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd09a0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd0af0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd09c0 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55dc7dbd0b08 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7dbd09e0 <col:16> 'int' 0
| `-FullComment 0x55dc7dcae050 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:196:4, line:202:35>
|   |-ParagraphComment 0x55dc7dcade10 <line:196:4>
|   | `-TextComment 0x55dc7dcadde0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcade30 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcade90 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcade60 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcadf30 <line:198:3, line:200:44>
|   | |-TextComment 0x55dc7dcadeb0 <line:198:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcaded0 <line:199:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcadef0 <line:200:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcadf80 <line:202:3>
|   | `-TextComment 0x55dc7dcadf50 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcadfa0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcae000 <col:11, col:35>
|       `-TextComment 0x55dc7dcadfd0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd0c18 <line:218:1, line:222:1> line:218:21 k_ms_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbd0b90 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbd0fe8 <line:219:1, line:222:1>
| | `-ReturnStmt 0x55dc7dbd0fa8 <line:221:2, col:64>
| |   `-ImplicitCastExpr 0x55dc7dbd0f90 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7dbd0e70 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7dbd0e58 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7dbd0cc0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7dbd0ee8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7dbd0ed0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7dbd0ce8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbd0b90 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7dbd0f00 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7dbd0d10 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55dc7dbd0f18 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7dbd0d70 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7dbd0d58 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7dbd0d30 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7dbd0f30 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7dbd0dd8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7dbd0db8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7dbd0d98 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7dbd0f48 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd0df8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7dbd0f60 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd0e18 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55dc7dbd0f78 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7dbd0e38 <col:16> 'int' 1
| `-FullComment 0x55dc7dcae330 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:210:4, line:216:35>
|   |-ParagraphComment 0x55dc7dcae0f0 <line:210:4>
|   | `-TextComment 0x55dc7dcae0c0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcae110 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcae170 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcae140 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcae210 <line:212:3, line:214:37>
|   | |-TextComment 0x55dc7dcae190 <line:212:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcae1b0 <line:213:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcae1d0 <line:214:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcae260 <line:216:3>
|   | `-TextComment 0x55dc7dcae230 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcae280 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcae2e0 <col:11, col:35>
|       `-TextComment 0x55dc7dcae2b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd1098 <line:232:1, line:236:1> line:232:21 k_ms_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbd1010 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbd1438 <line:233:1, line:236:1>
| | `-ReturnStmt 0x55dc7dbd13f8 <line:235:2, col:65>
| |   `-CallExpr 0x55dc7dbd12f0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd12d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dbd1140 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7dbd1350 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dbd1168 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbd1010 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd1368 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7dbd1190 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55dc7dbd1380 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7dbd11f0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7dbd11d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7dbd11b0 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7dbd1398 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7dbd1258 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7dbd1238 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7dbd1218 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd13b0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd1278 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd13c8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd1298 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55dc7dbd13e0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7dbd12b8 <col:16> 'int' 1
| `-FullComment 0x55dc7dcae610 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:224:4, line:230:35>
|   |-ParagraphComment 0x55dc7dcae3d0 <line:224:4>
|   | `-TextComment 0x55dc7dcae3a0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcae3f0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcae450 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcae420 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcae4f0 <line:226:3, line:228:37>
|   | |-TextComment 0x55dc7dcae470 <line:226:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcae490 <line:227:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcae4b0 <line:228:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcae540 <line:230:3>
|   | `-TextComment 0x55dc7dcae510 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcae560 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcae5c0 <col:11, col:35>
|       `-TextComment 0x55dc7dcae590 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd14e8 <line:246:1, line:250:1> line:246:21 k_ms_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbd1460 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbd18b8 <line:247:1, line:250:1>
| | `-ReturnStmt 0x55dc7dbd1878 <line:249:2, col:64>
| |   `-ImplicitCastExpr 0x55dc7dbd1860 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7dbd1740 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7dbd1728 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7dbd1590 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7dbd17b8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7dbd17a0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7dbd15b8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbd1460 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7dbd17d0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7dbd15e0 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55dc7dbd17e8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7dbd1640 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7dbd1628 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7dbd1600 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7dbd1800 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7dbd16a8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7dbd1688 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7dbd1668 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7dbd1818 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd16c8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7dbd1830 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd16e8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55dc7dbd1848 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7dbd1708 <col:16> 'int' 0
| `-FullComment 0x55dc7dcae900 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:238:4, line:244:35>
|   |-ParagraphComment 0x55dc7dcae6b0 <line:238:4>
|   | `-TextComment 0x55dc7dcae680 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcae6d0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcae730 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcae700 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcae7d0 <line:240:3, line:242:45>
|   | |-TextComment 0x55dc7dcae750 <line:240:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcae770 <line:241:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcae790 <line:242:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcae830 <line:244:3>
|   | `-TextComment 0x55dc7dcae7f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcae850 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcae8b0 <col:11, col:35>
|       `-TextComment 0x55dc7dcae880 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd1978 <line:260:1, line:264:1> line:260:21 k_ms_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbd18e0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbd1d18 <line:261:1, line:264:1>
| | `-ReturnStmt 0x55dc7dbd1cd8 <line:263:2, col:65>
| |   `-CallExpr 0x55dc7dbd1bd0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd1bb8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dbd1a20 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7dbd1c30 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dbd1a48 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbd18e0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd1c48 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7dbd1a70 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55dc7dbd1c60 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7dbd1ad0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7dbd1ab8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7dbd1a90 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7dbd1c78 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7dbd1b38 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7dbd1b18 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7dbd1af8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd1c90 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd1b58 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd1ca8 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd1b78 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55dc7dbd1cc0 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7dbd1b98 <col:16> 'int' 0
| `-FullComment 0x55dc7dcaebe0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:252:4, line:258:35>
|   |-ParagraphComment 0x55dc7dcae9a0 <line:252:4>
|   | `-TextComment 0x55dc7dcae970 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcae9c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcaea20 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcae9f0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcaeac0 <line:254:3, line:256:45>
|   | |-TextComment 0x55dc7dcaea40 <line:254:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcaea60 <line:255:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcaea80 <line:256:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcaeb10 <line:258:3>
|   | `-TextComment 0x55dc7dcaeae0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcaeb30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcaeb90 <col:11, col:35>
|       `-TextComment 0x55dc7dcaeb60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd1dc8 <line:274:1, line:278:1> line:274:21 k_ms_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbd1d40 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbd2018 <line:275:1, line:278:1>
| `-FullComment 0x55dc7dcaeec0 <line:266:4, line:272:35>
|   |-ParagraphComment 0x55dc7dcaec80 <line:266:4>
|   | `-TextComment 0x55dc7dcaec50 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcaeca0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcaed00 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcaecd0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55dc7dcaeda0 <line:268:3, line:270:44>
|   | |-TextComment 0x55dc7dcaed20 <line:268:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55dc7dcaed40 <line:269:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcaed60 <line:270:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcaedf0 <line:272:3>
|   | `-TextComment 0x55dc7dcaedc0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcaee10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcaee70 <col:11, col:35>
|       `-TextComment 0x55dc7dcaee40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd20c0 <line:288:1, line:292:1> line:288:21 k_ms_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbd2038 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbd2308 <line:289:1, line:292:1>
| `-FullComment 0x55dc7dcaf1a0 <line:280:4, line:286:35>
|   |-ParagraphComment 0x55dc7dcaef60 <line:280:4>
|   | `-TextComment 0x55dc7dcaef30 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcaef80 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcaefe0 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcaefb0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55dc7dcaf080 <line:282:3, line:284:44>
|   | |-TextComment 0x55dc7dcaf000 <line:282:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55dc7dcaf020 <line:283:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcaf040 <line:284:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcaf0d0 <line:286:3>
|   | `-TextComment 0x55dc7dcaf0a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcaf0f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcaf150 <col:11, col:35>
|       `-TextComment 0x55dc7dcaf120 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd23b0 <line:302:1, line:306:1> line:302:21 k_ms_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbd2328 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbd25f8 <line:303:1, line:306:1>
| `-FullComment 0x55dc7dcaf480 <line:294:4, line:300:35>
|   |-ParagraphComment 0x55dc7dcaf240 <line:294:4>
|   | `-TextComment 0x55dc7dcaf210 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcaf260 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcaf2c0 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcaf290 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55dc7dcaf360 <line:296:3, line:298:37>
|   | |-TextComment 0x55dc7dcaf2e0 <line:296:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55dc7dcaf300 <line:297:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcaf320 <line:298:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcaf3b0 <line:300:3>
|   | `-TextComment 0x55dc7dcaf380 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcaf3d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcaf430 <col:11, col:35>
|       `-TextComment 0x55dc7dcaf400 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd26a0 <line:316:1, line:320:1> line:316:21 k_ms_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbd2618 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbd28e8 <line:317:1, line:320:1>
| `-FullComment 0x55dc7dcaf760 <line:308:4, line:314:35>
|   |-ParagraphComment 0x55dc7dcaf520 <line:308:4>
|   | `-TextComment 0x55dc7dcaf4f0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcaf540 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcaf5a0 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcaf570 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55dc7dcaf640 <line:310:3, line:312:37>
|   | |-TextComment 0x55dc7dcaf5c0 <line:310:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55dc7dcaf5e0 <line:311:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcaf600 <line:312:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcaf690 <line:314:3>
|   | `-TextComment 0x55dc7dcaf660 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcaf6b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcaf710 <col:11, col:35>
|       `-TextComment 0x55dc7dcaf6e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd2ff8 <line:330:1, line:334:1> line:330:21 k_ms_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbd2f70 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbd3248 <line:331:1, line:334:1>
| `-FullComment 0x55dc7dcafa40 <line:322:4, line:328:35>
|   |-ParagraphComment 0x55dc7dcaf800 <line:322:4>
|   | `-TextComment 0x55dc7dcaf7d0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcaf820 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcaf880 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcaf850 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55dc7dcaf920 <line:324:3, line:326:45>
|   | |-TextComment 0x55dc7dcaf8a0 <line:324:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55dc7dcaf8c0 <line:325:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcaf8e0 <line:326:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcaf970 <line:328:3>
|   | `-TextComment 0x55dc7dcaf940 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcaf990 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcaf9f0 <col:11, col:35>
|       `-TextComment 0x55dc7dcaf9c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd32f0 <line:344:1, line:348:1> line:344:21 k_ms_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbd3268 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbd3538 <line:345:1, line:348:1>
| `-FullComment 0x55dc7dcafd20 <line:336:4, line:342:35>
|   |-ParagraphComment 0x55dc7dcafae0 <line:336:4>
|   | `-TextComment 0x55dc7dcafab0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcafb00 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcafb60 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcafb30 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55dc7dcafc00 <line:338:3, line:340:45>
|   | |-TextComment 0x55dc7dcafb80 <line:338:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55dc7dcafba0 <line:339:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcafbc0 <line:340:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcafc50 <line:342:3>
|   | `-TextComment 0x55dc7dcafc20 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcafc70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcafcd0 <col:11, col:35>
|       `-TextComment 0x55dc7dcafca0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd35e0 <line:358:1, line:362:1> line:358:21 k_us_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbd3558 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbd39b8 <line:359:1, line:362:1>
| | `-ReturnStmt 0x55dc7dbd3970 <line:361:2, col:65>
| |   `-ImplicitCastExpr 0x55dc7dbd3958 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7dbd3838 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7dbd3820 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7dbd3688 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7dbd38b0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7dbd3898 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7dbd36b0 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbd3558 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7dbd38c8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7dbd36d8 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55dc7dbd38e0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7dbd3738 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7dbd3720 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7dbd36f8 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7dbd38f8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7dbd37a0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7dbd3780 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7dbd3760 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7dbd3910 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd37c0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7dbd3928 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd37e0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55dc7dbd3940 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7dbd3800 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb0000 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:350:4, line:356:35>
|   |-ParagraphComment 0x55dc7dcafdc0 <line:350:4>
|   | `-TextComment 0x55dc7dcafd90 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcafde0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcafe40 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcafe10 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcafee0 <line:352:3, line:354:44>
|   | |-TextComment 0x55dc7dcafe60 <line:352:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcafe80 <line:353:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcafea0 <line:354:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcaff30 <line:356:3>
|   | `-TextComment 0x55dc7dcaff00 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcaff50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcaffb0 <col:11, col:35>
|       `-TextComment 0x55dc7dcaff80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd3a68 <line:372:1, line:376:1> line:372:21 k_us_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbd39e0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbd3e08 <line:373:1, line:376:1>
| | `-ReturnStmt 0x55dc7dbd3dc8 <line:375:2, col:66>
| |   `-CallExpr 0x55dc7dbd3cc0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd3ca8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dbd3b10 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7dbd3d20 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dbd3b38 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbd39e0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd3d38 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7dbd3b60 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55dc7dbd3d50 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7dbd3bc0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7dbd3ba8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7dbd3b80 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7dbd3d68 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7dbd3c28 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7dbd3c08 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7dbd3be8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd3d80 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd3c48 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd3d98 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd3c68 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55dc7dbd3db0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7dbd3c88 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb02e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:364:4, line:370:35>
|   |-ParagraphComment 0x55dc7dcb00a0 <line:364:4>
|   | `-TextComment 0x55dc7dcb0070 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb00c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb0120 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb00f0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcb01c0 <line:366:3, line:368:44>
|   | |-TextComment 0x55dc7dcb0140 <line:366:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcb0160 <line:367:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb0180 <line:368:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb0210 <line:370:3>
|   | `-TextComment 0x55dc7dcb01e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb0230 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb0290 <col:11, col:35>
|       `-TextComment 0x55dc7dcb0260 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd3eb8 <line:386:1, line:390:1> line:386:21 k_us_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbd3e30 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbd42a8 <line:387:1, line:390:1>
| | `-ReturnStmt 0x55dc7dbd4268 <line:389:2, col:64>
| |   `-ImplicitCastExpr 0x55dc7dbd4250 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7dbd4130 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7dbd4118 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7dbd3f80 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7dbd41a8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7dbd4190 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7dbd3fa8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbd3e30 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7dbd41c0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7dbd3fd0 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55dc7dbd41d8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7dbd4030 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7dbd4018 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7dbd3ff0 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7dbd41f0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7dbd4098 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7dbd4078 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7dbd4058 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7dbd4208 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd40b8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7dbd4220 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd40d8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55dc7dbd4238 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7dbd40f8 <col:16> 'int' 1
| `-FullComment 0x55dc7dcb05c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:378:4, line:384:35>
|   |-ParagraphComment 0x55dc7dcb0380 <line:378:4>
|   | `-TextComment 0x55dc7dcb0350 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb03a0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb0400 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb03d0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcb04a0 <line:380:3, line:382:37>
|   | |-TextComment 0x55dc7dcb0420 <line:380:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcb0440 <line:381:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb0460 <line:382:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb04f0 <line:384:3>
|   | `-TextComment 0x55dc7dcb04c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb0510 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb0570 <col:11, col:35>
|       `-TextComment 0x55dc7dcb0540 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd4358 <line:400:1, line:404:1> line:400:21 k_us_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbd42d0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbd46f8 <line:401:1, line:404:1>
| | `-ReturnStmt 0x55dc7dbd46b8 <line:403:2, col:65>
| |   `-CallExpr 0x55dc7dbd45b0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd4598 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dbd4400 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7dbd4610 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dbd4428 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbd42d0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd4628 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7dbd4450 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55dc7dbd4640 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7dbd44b0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7dbd4498 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7dbd4470 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7dbd4658 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7dbd4518 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7dbd44f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7dbd44d8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd4670 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd4538 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd4688 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd4558 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55dc7dbd46a0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7dbd4578 <col:16> 'int' 1
| `-FullComment 0x55dc7dcb08b0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:392:4, line:398:35>
|   |-ParagraphComment 0x55dc7dcb0660 <line:392:4>
|   | `-TextComment 0x55dc7dcb0630 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb0680 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb06e0 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb06b0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcb0780 <line:394:3, line:396:37>
|   | |-TextComment 0x55dc7dcb0700 <line:394:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcb0720 <line:395:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb0740 <line:396:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb07d0 <line:398:3>
|   | `-TextComment 0x55dc7dcb07a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb07f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb0860 <col:11, col:35>
|       `-TextComment 0x55dc7dcb0830 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd47a8 <line:414:1, line:418:1> line:414:21 k_us_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbd4720 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbd4b78 <line:415:1, line:418:1>
| | `-ReturnStmt 0x55dc7dbd4b38 <line:417:2, col:64>
| |   `-ImplicitCastExpr 0x55dc7dbd4b20 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7dbd4a00 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7dbd49e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7dbd4850 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7dbd4a78 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7dbd4a60 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7dbd4878 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbd4720 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7dbd4a90 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7dbd48a0 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55dc7dbd4aa8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7dbd4900 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7dbd48e8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7dbd48c0 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7dbd4ac0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7dbd4968 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7dbd4948 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7dbd4928 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7dbd4ad8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd4988 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7dbd4af0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd49a8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55dc7dbd4b08 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7dbd49c8 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb0b90 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:406:4, line:412:35>
|   |-ParagraphComment 0x55dc7dcb0950 <line:406:4>
|   | `-TextComment 0x55dc7dcb0920 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb0970 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb09d0 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb09a0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcb0a70 <line:408:3, line:410:45>
|   | |-TextComment 0x55dc7dcb09f0 <line:408:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcb0a10 <line:409:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb0a30 <line:410:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb0ac0 <line:412:3>
|   | `-TextComment 0x55dc7dcb0a90 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb0ae0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb0b40 <col:11, col:35>
|       `-TextComment 0x55dc7dcb0b10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd4c28 <line:428:1, line:432:1> line:428:21 k_us_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbd4ba0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbd4fe8 <line:429:1, line:432:1>
| | `-ReturnStmt 0x55dc7dbd4fa8 <line:431:2, col:65>
| |   `-CallExpr 0x55dc7dbd4e80 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd4e68 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dbd4cd0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7dbd4ee0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dbd4cf8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbd4ba0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd4ef8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7dbd4d20 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55dc7dbd4f10 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7dbd4d80 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7dbd4d68 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7dbd4d40 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7dbd4f28 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7dbd4de8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7dbd4dc8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7dbd4da8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd4f40 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd4e08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd4f58 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd4e28 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55dc7dbd4f90 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7dbd4e48 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb0e70 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:420:4, line:426:35>
|   |-ParagraphComment 0x55dc7dcb0c30 <line:420:4>
|   | `-TextComment 0x55dc7dcb0c00 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb0c50 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb0cb0 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb0c80 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcb0d50 <line:422:3, line:424:45>
|   | |-TextComment 0x55dc7dcb0cd0 <line:422:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcb0cf0 <line:423:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb0d10 <line:424:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb0da0 <line:426:3>
|   | `-TextComment 0x55dc7dcb0d70 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb0dc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb0e20 <col:11, col:35>
|       `-TextComment 0x55dc7dcb0df0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd5098 <line:442:1, line:446:1> line:442:21 k_us_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbd5010 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbd52e8 <line:443:1, line:446:1>
| `-FullComment 0x55dc7dcb1150 <line:434:4, line:440:35>
|   |-ParagraphComment 0x55dc7dcb0f10 <line:434:4>
|   | `-TextComment 0x55dc7dcb0ee0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb0f30 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb0f90 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcb0f60 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55dc7dcb1030 <line:436:3, line:438:44>
|   | |-TextComment 0x55dc7dcb0fb0 <line:436:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55dc7dcb0fd0 <line:437:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb0ff0 <line:438:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb1080 <line:440:3>
|   | `-TextComment 0x55dc7dcb1050 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb10a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb1100 <col:11, col:35>
|       `-TextComment 0x55dc7dcb10d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd5390 <line:456:1, line:460:1> line:456:21 k_us_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbd5308 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbd55d8 <line:457:1, line:460:1>
| `-FullComment 0x55dc7dcb1430 <line:448:4, line:454:35>
|   |-ParagraphComment 0x55dc7dcb11f0 <line:448:4>
|   | `-TextComment 0x55dc7dcb11c0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb1210 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb1270 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcb1240 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55dc7dcb1310 <line:450:3, line:452:44>
|   | |-TextComment 0x55dc7dcb1290 <line:450:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55dc7dcb12b0 <line:451:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb12d0 <line:452:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb1360 <line:454:3>
|   | `-TextComment 0x55dc7dcb1330 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb1380 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb13e0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb13b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd5680 <line:470:1, line:474:1> line:470:21 k_us_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbd55f8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbd58c8 <line:471:1, line:474:1>
| `-FullComment 0x55dc7dcb1710 <line:462:4, line:468:35>
|   |-ParagraphComment 0x55dc7dcb14d0 <line:462:4>
|   | `-TextComment 0x55dc7dcb14a0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb14f0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb1550 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcb1520 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55dc7dcb15f0 <line:464:3, line:466:37>
|   | |-TextComment 0x55dc7dcb1570 <line:464:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55dc7dcb1590 <line:465:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb15b0 <line:466:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb1640 <line:468:3>
|   | `-TextComment 0x55dc7dcb1610 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb1660 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb16c0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb1690 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd5970 <line:484:1, line:488:1> line:484:21 k_us_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbd58e8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbd5bb8 <line:485:1, line:488:1>
| `-FullComment 0x55dc7dcb19f0 <line:476:4, line:482:35>
|   |-ParagraphComment 0x55dc7dcb17b0 <line:476:4>
|   | `-TextComment 0x55dc7dcb1780 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb17d0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb1830 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcb1800 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55dc7dcb18d0 <line:478:3, line:480:37>
|   | |-TextComment 0x55dc7dcb1850 <line:478:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55dc7dcb1870 <line:479:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb1890 <line:480:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb1920 <line:482:3>
|   | `-TextComment 0x55dc7dcb18f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb1940 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb19a0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb1970 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd5c60 <line:498:1, line:502:1> line:498:21 k_us_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbd5bd8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbd5ea8 <line:499:1, line:502:1>
| `-FullComment 0x55dc7dcb1cd0 <line:490:4, line:496:35>
|   |-ParagraphComment 0x55dc7dcb1a90 <line:490:4>
|   | `-TextComment 0x55dc7dcb1a60 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb1ab0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb1b10 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcb1ae0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55dc7dcb1bb0 <line:492:3, line:494:45>
|   | |-TextComment 0x55dc7dcb1b30 <line:492:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55dc7dcb1b50 <line:493:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb1b70 <line:494:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb1c00 <line:496:3>
|   | `-TextComment 0x55dc7dcb1bd0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb1c20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb1c80 <col:11, col:35>
|       `-TextComment 0x55dc7dcb1c50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd6fb0 <line:512:1, line:516:1> line:512:21 k_us_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbd5ec8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbd71f8 <line:513:1, line:516:1>
| `-FullComment 0x55dc7dcb1fb0 <line:504:4, line:510:35>
|   |-ParagraphComment 0x55dc7dcb1d70 <line:504:4>
|   | `-TextComment 0x55dc7dcb1d40 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb1d90 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb1df0 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcb1dc0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55dc7dcb1e90 <line:506:3, line:508:45>
|   | |-TextComment 0x55dc7dcb1e10 <line:506:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55dc7dcb1e30 <line:507:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb1e50 <line:508:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb1ee0 <line:510:3>
|   | `-TextComment 0x55dc7dcb1eb0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb1f00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb1f60 <col:11, col:35>
|       `-TextComment 0x55dc7dcb1f30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd72a0 <line:526:1, line:530:1> line:526:21 k_ns_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbd7218 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbd7678 <line:527:1, line:530:1>
| | `-ReturnStmt 0x55dc7dbd7630 <line:529:2, col:65>
| |   `-ImplicitCastExpr 0x55dc7dbd7618 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7dbd74f8 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7dbd74e0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7dbd7348 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7dbd7570 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7dbd7558 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7dbd7370 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbd7218 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7dbd7588 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7dbd7398 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55dc7dbd75a0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7dbd73f8 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7dbd73e0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7dbd73b8 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7dbd75b8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7dbd7460 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7dbd7440 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7dbd7420 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7dbd75d0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd7480 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7dbd75e8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd74a0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55dc7dbd7600 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7dbd74c0 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb2290 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:518:4, line:524:35>
|   |-ParagraphComment 0x55dc7dcb2050 <line:518:4>
|   | `-TextComment 0x55dc7dcb2020 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb2070 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb20d0 <col:11, col:49>
|   |   `-TextComment 0x55dc7dcb20a0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcb2170 <line:520:3, line:522:44>
|   | |-TextComment 0x55dc7dcb20f0 <line:520:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcb2110 <line:521:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb2130 <line:522:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb21c0 <line:524:3>
|   | `-TextComment 0x55dc7dcb2190 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb21e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb2240 <col:11, col:35>
|       `-TextComment 0x55dc7dcb2210 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd7728 <line:540:1, line:544:1> line:540:21 k_ns_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbd76a0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbd7ac8 <line:541:1, line:544:1>
| | `-ReturnStmt 0x55dc7dbd7a88 <line:543:2, col:66>
| |   `-CallExpr 0x55dc7dbd7980 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd7968 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dbd77d0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7dbd79e0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dbd77f8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbd76a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd79f8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7dbd7820 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55dc7dbd7a10 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7dbd7880 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7dbd7868 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7dbd7840 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7dbd7a28 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7dbd78e8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7dbd78c8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7dbd78a8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd7a40 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd7908 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd7a58 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd7928 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55dc7dbd7a70 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7dbd7948 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb2570 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:532:4, line:538:35>
|   |-ParagraphComment 0x55dc7dcb2330 <line:532:4>
|   | `-TextComment 0x55dc7dcb2300 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb2350 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb23b0 <col:11, col:49>
|   |   `-TextComment 0x55dc7dcb2380 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcb2450 <line:534:3, line:536:44>
|   | |-TextComment 0x55dc7dcb23d0 <line:534:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcb23f0 <line:535:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb2410 <line:536:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb24a0 <line:538:3>
|   | `-TextComment 0x55dc7dcb2470 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb24c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb2520 <col:11, col:35>
|       `-TextComment 0x55dc7dcb24f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd7b78 <line:554:1, line:558:1> line:554:21 k_ns_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbd7af0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbd7f48 <line:555:1, line:558:1>
| | `-ReturnStmt 0x55dc7dbd7f08 <line:557:2, col:64>
| |   `-ImplicitCastExpr 0x55dc7dbd7ef0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7dbd7dd0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7dbd7db8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7dbd7c20 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7dbd7e48 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7dbd7e30 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7dbd7c48 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbd7af0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7dbd7e60 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7dbd7c70 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55dc7dbd7e78 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7dbd7cd0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7dbd7cb8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7dbd7c90 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7dbd7e90 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7dbd7d38 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7dbd7d18 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7dbd7cf8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7dbd7ea8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd7d58 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7dbd7ec0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd7d78 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55dc7dbd7ed8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7dbd7d98 <col:16> 'int' 1
| `-FullComment 0x55dc7dcb2870 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:546:4, line:552:35>
|   |-ParagraphComment 0x55dc7dcb2610 <line:546:4>
|   | `-TextComment 0x55dc7dcb25e0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb2630 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb2690 <col:11, col:49>
|   |   `-TextComment 0x55dc7dcb2660 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcb2730 <line:548:3, line:550:37>
|   | |-TextComment 0x55dc7dcb26b0 <line:548:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcb26d0 <line:549:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb26f0 <line:550:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb2780 <line:552:3>
|   | `-TextComment 0x55dc7dcb2750 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb27a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb2800 <col:11, col:35>
|       `-TextComment 0x55dc7dcb27d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd8048 <line:568:1, line:572:1> line:568:21 k_ns_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbd7fc0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbd83e8 <line:569:1, line:572:1>
| | `-ReturnStmt 0x55dc7dbd83a8 <line:571:2, col:65>
| |   `-CallExpr 0x55dc7dbd82a0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd8288 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dbd80f0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7dbd8300 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dbd8118 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbd7fc0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd8318 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7dbd8140 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55dc7dbd8330 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7dbd81a0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7dbd8188 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7dbd8160 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7dbd8348 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7dbd8208 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7dbd81e8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7dbd81c8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd8360 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd8228 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd8378 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd8248 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55dc7dbd8390 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7dbd8268 <col:16> 'int' 1
| `-FullComment 0x55dc7dcb2b50 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:560:4, line:566:35>
|   |-ParagraphComment 0x55dc7dcb2910 <line:560:4>
|   | `-TextComment 0x55dc7dcb28e0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb2930 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb2990 <col:11, col:49>
|   |   `-TextComment 0x55dc7dcb2960 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcb2a30 <line:562:3, line:564:37>
|   | |-TextComment 0x55dc7dcb29b0 <line:562:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcb29d0 <line:563:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb29f0 <line:564:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb2a80 <line:566:3>
|   | `-TextComment 0x55dc7dcb2a50 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb2aa0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb2b00 <col:11, col:35>
|       `-TextComment 0x55dc7dcb2ad0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd8498 <line:582:1, line:586:1> line:582:21 k_ns_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbd8410 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbd8868 <line:583:1, line:586:1>
| | `-ReturnStmt 0x55dc7dbd8828 <line:585:2, col:64>
| |   `-ImplicitCastExpr 0x55dc7dbd8810 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7dbd86f0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7dbd86d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7dbd8540 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7dbd8768 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7dbd8750 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7dbd8568 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbd8410 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7dbd8780 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7dbd8590 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55dc7dbd8798 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7dbd85f0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7dbd85d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7dbd85b0 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7dbd87b0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7dbd8658 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7dbd8638 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7dbd8618 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7dbd87c8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd8678 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7dbd87e0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbd8698 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55dc7dbd87f8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7dbd86b8 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb2e30 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:574:4, line:580:35>
|   |-ParagraphComment 0x55dc7dcb2bf0 <line:574:4>
|   | `-TextComment 0x55dc7dcb2bc0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb2c10 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb2c70 <col:11, col:49>
|   |   `-TextComment 0x55dc7dcb2c40 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcb2d10 <line:576:3, line:578:45>
|   | |-TextComment 0x55dc7dcb2c90 <line:576:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcb2cb0 <line:577:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb2cd0 <line:578:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb2d60 <line:580:3>
|   | `-TextComment 0x55dc7dcb2d30 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb2d80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb2de0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb2db0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd8918 <line:596:1, line:600:1> line:596:21 k_ns_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbd8890 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbd8cb8 <line:597:1, line:600:1>
| | `-ReturnStmt 0x55dc7dbd8c78 <line:599:2, col:65>
| |   `-CallExpr 0x55dc7dbd8b70 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd8b58 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dbd89c0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7dbd8bd0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dbd89e8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbd8890 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbd8be8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7dbd8a10 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55dc7dbd8c00 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7dbd8a70 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7dbd8a58 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7dbd8a30 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7dbd8c18 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7dbd8ad8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7dbd8ab8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7dbd8a98 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd8c30 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd8af8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbd8c48 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbd8b18 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55dc7dbd8c60 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7dbd8b38 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb3110 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:588:4, line:594:35>
|   |-ParagraphComment 0x55dc7dcb2ed0 <line:588:4>
|   | `-TextComment 0x55dc7dcb2ea0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb2ef0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb2f50 <col:11, col:49>
|   |   `-TextComment 0x55dc7dcb2f20 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55dc7dcb2ff0 <line:590:3, line:592:45>
|   | |-TextComment 0x55dc7dcb2f70 <line:590:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55dc7dcb2f90 <line:591:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb2fb0 <line:592:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb3040 <line:594:3>
|   | `-TextComment 0x55dc7dcb3010 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb3060 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb30c0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb3090 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbd8d68 <line:610:1, line:614:1> line:610:21 k_ns_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbd8ce0 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7db8c8a0 <line:611:1, line:614:1>
| `-FullComment 0x55dc7dcb33f0 <line:602:4, line:608:35>
|   |-ParagraphComment 0x55dc7dcb31b0 <line:602:4>
|   | `-TextComment 0x55dc7dcb3180 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb31d0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb3230 <col:11, col:39>
|   |   `-TextComment 0x55dc7dcb3200 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55dc7dcb32d0 <line:604:3, line:606:44>
|   | |-TextComment 0x55dc7dcb3250 <line:604:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55dc7dcb3270 <line:605:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb3290 <line:606:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb3320 <line:608:3>
|   | `-TextComment 0x55dc7dcb32f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb3340 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb33a0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb3370 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db8c948 <line:624:1, line:628:1> line:624:21 k_ns_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7db8c8c0 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7db8cb98 <line:625:1, line:628:1>
| `-FullComment 0x55dc7dcb36d0 <line:616:4, line:622:35>
|   |-ParagraphComment 0x55dc7dcb3490 <line:616:4>
|   | `-TextComment 0x55dc7dcb3460 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb34b0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb3510 <col:11, col:39>
|   |   `-TextComment 0x55dc7dcb34e0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55dc7dcb35b0 <line:618:3, line:620:44>
|   | |-TextComment 0x55dc7dcb3530 <line:618:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55dc7dcb3550 <line:619:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb3570 <line:620:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb3600 <line:622:3>
|   | `-TextComment 0x55dc7dcb35d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb3620 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb3680 <col:11, col:35>
|       `-TextComment 0x55dc7dcb3650 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db8cc40 <line:638:1, line:642:1> line:638:21 k_ns_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7db8cbb8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7db8ce88 <line:639:1, line:642:1>
| `-FullComment 0x55dc7dcb39b0 <line:630:4, line:636:35>
|   |-ParagraphComment 0x55dc7dcb3770 <line:630:4>
|   | `-TextComment 0x55dc7dcb3740 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb3790 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb37f0 <col:11, col:39>
|   |   `-TextComment 0x55dc7dcb37c0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55dc7dcb3890 <line:632:3, line:634:37>
|   | |-TextComment 0x55dc7dcb3810 <line:632:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55dc7dcb3830 <line:633:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb3850 <line:634:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb38e0 <line:636:3>
|   | `-TextComment 0x55dc7dcb38b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb3900 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb3960 <col:11, col:35>
|       `-TextComment 0x55dc7dcb3930 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db8cf30 <line:652:1, line:656:1> line:652:21 k_ns_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7db8cea8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7db8d178 <line:653:1, line:656:1>
| `-FullComment 0x55dc7dcb3c90 <line:644:4, line:650:35>
|   |-ParagraphComment 0x55dc7dcb3a50 <line:644:4>
|   | `-TextComment 0x55dc7dcb3a20 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb3a70 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb3ad0 <col:11, col:39>
|   |   `-TextComment 0x55dc7dcb3aa0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55dc7dcb3b70 <line:646:3, line:648:37>
|   | |-TextComment 0x55dc7dcb3af0 <line:646:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55dc7dcb3b10 <line:647:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb3b30 <line:648:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb3bc0 <line:650:3>
|   | `-TextComment 0x55dc7dcb3b90 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb3be0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb3c40 <col:11, col:35>
|       `-TextComment 0x55dc7dcb3c10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db8d220 <line:666:1, line:670:1> line:666:21 k_ns_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7db8d198 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7db8d3e8 <line:667:1, line:670:1>
| `-FullComment 0x55dc7dcb3f70 <line:658:4, line:664:35>
|   |-ParagraphComment 0x55dc7dcb3d30 <line:658:4>
|   | `-TextComment 0x55dc7dcb3d00 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb3d50 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb3db0 <col:11, col:39>
|   |   `-TextComment 0x55dc7dcb3d80 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55dc7dcb3e50 <line:660:3, line:662:45>
|   | |-TextComment 0x55dc7dcb3dd0 <line:660:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55dc7dcb3df0 <line:661:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb3e10 <line:662:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb3ea0 <line:664:3>
|   | `-TextComment 0x55dc7dcb3e70 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb3ec0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb3f20 <col:11, col:35>
|       `-TextComment 0x55dc7dcb3ef0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db8d490 <line:680:1, line:684:1> line:680:21 k_ns_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7db8d408 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7db8d658 <line:681:1, line:684:1>
| `-FullComment 0x55dc7dcb4250 <line:672:4, line:678:35>
|   |-ParagraphComment 0x55dc7dcb4010 <line:672:4>
|   | `-TextComment 0x55dc7dcb3fe0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb4030 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb4090 <col:11, col:39>
|   |   `-TextComment 0x55dc7dcb4060 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55dc7dcb4130 <line:674:3, line:676:45>
|   | |-TextComment 0x55dc7dcb40b0 <line:674:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55dc7dcb40d0 <line:675:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb40f0 <line:676:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb4180 <line:678:3>
|   | `-TextComment 0x55dc7dcb4150 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb41a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb4200 <col:11, col:35>
|       `-TextComment 0x55dc7dcb41d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db8d700 <line:694:1, line:698:1> line:694:21 k_cyc_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7db8d678 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7db8dae8 <line:695:1, line:698:1>
| | `-ReturnStmt 0x55dc7db8daa0 <line:697:2, col:65>
| |   `-ImplicitCastExpr 0x55dc7db8da88 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7db8d968 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7db8d950 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7db8d7a8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7db8d9e0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7db8d9c8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7db8d7d0 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7db8d678 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7db8d9f8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7db8d838 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7db8d820 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7db8d7f8 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7db8da10 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7db8d860 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55dc7db8da28 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7db8d8d0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7db8d8b0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7db8d880 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7db8da40 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7db8d8f0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7db8da58 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7db8d910 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55dc7db8da70 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7db8d930 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb4530 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:686:4, line:692:35>
|   |-ParagraphComment 0x55dc7dcb42f0 <line:686:4>
|   | `-TextComment 0x55dc7dcb42c0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb4310 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb4370 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb4340 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55dc7dcb4410 <line:688:3, line:690:44>
|   | |-TextComment 0x55dc7dcb4390 <line:688:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55dc7dcb43b0 <line:689:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb43d0 <line:690:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb4460 <line:692:3>
|   | `-TextComment 0x55dc7dcb4430 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb4480 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb44e0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb44b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db8db98 <line:708:1, line:712:1> line:708:21 k_cyc_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7db8db10 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7db8df38 <line:709:1, line:712:1>
| | `-ReturnStmt 0x55dc7db8def8 <line:711:2, col:66>
| |   `-CallExpr 0x55dc7db8ddf0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7db8ddd8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7db8dc40 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7db8de50 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7db8dc68 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7db8db10 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7db8de68 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7db8dcd0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7db8dcb8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7db8dc90 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7db8de80 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7db8dcf8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55dc7db8de98 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7db8dd58 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7db8dd38 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7db8dd18 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7db8deb0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7db8dd78 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7db8dec8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7db8dd98 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55dc7db8dee0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7db8ddb8 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb4810 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:700:4, line:706:35>
|   |-ParagraphComment 0x55dc7dcb45d0 <line:700:4>
|   | `-TextComment 0x55dc7dcb45a0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb45f0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb4650 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb4620 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55dc7dcb46f0 <line:702:3, line:704:44>
|   | |-TextComment 0x55dc7dcb4670 <line:702:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55dc7dcb4690 <line:703:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb46b0 <line:704:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb4740 <line:706:3>
|   | `-TextComment 0x55dc7dcb4710 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb4760 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb47c0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb4790 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db8dfe8 <line:722:1, line:726:1> line:722:21 k_cyc_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7db8df60 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7db8e3b8 <line:723:1, line:726:1>
| | `-ReturnStmt 0x55dc7db8e378 <line:725:2, col:64>
| |   `-ImplicitCastExpr 0x55dc7db8e360 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7db8e240 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7db8e228 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7db8e090 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7db8e2b8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7db8e2a0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7db8e0b8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7db8df60 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7db8e2d0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7db8e120 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7db8e108 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7db8e0e0 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7db8e2e8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7db8e148 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55dc7db8e300 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7db8e1a8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7db8e188 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7db8e168 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7db8e318 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7db8e1c8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7db8e330 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7db8e1e8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55dc7db8e348 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7db8e208 <col:16> 'int' 1
| `-FullComment 0x55dc7dcb4b00 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:714:4, line:720:35>
|   |-ParagraphComment 0x55dc7dcb48c0 <line:714:4>
|   | `-TextComment 0x55dc7dcb4890 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb48e0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb4940 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb4910 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55dc7dcb49e0 <line:716:3, line:718:37>
|   | |-TextComment 0x55dc7dcb4960 <line:716:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55dc7dcb4980 <line:717:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb49a0 <line:718:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb4a30 <line:720:3>
|   | `-TextComment 0x55dc7dcb4a00 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb4a50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb4ab0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb4a80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db8e468 <line:736:1, line:740:1> line:736:21 k_cyc_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7db8e3e0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7db8e808 <line:737:1, line:740:1>
| | `-ReturnStmt 0x55dc7db8e7c8 <line:739:2, col:65>
| |   `-CallExpr 0x55dc7db8e6c0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7db8e6a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7db8e510 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7db8e720 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7db8e538 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7db8e3e0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7db8e738 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7db8e5a0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7db8e588 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7db8e560 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7db8e750 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7db8e5c8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55dc7db8e768 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7db8e628 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7db8e608 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7db8e5e8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7db8e780 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7db8e648 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7db8e798 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7db8e668 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55dc7db8e7b0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7db8e688 <col:16> 'int' 1
| `-FullComment 0x55dc7dcb4de0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:728:4, line:734:35>
|   |-ParagraphComment 0x55dc7dcb4ba0 <line:728:4>
|   | `-TextComment 0x55dc7dcb4b70 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb4bc0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb4c20 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb4bf0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55dc7dcb4cc0 <line:730:3, line:732:37>
|   | |-TextComment 0x55dc7dcb4c40 <line:730:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55dc7dcb4c60 <line:731:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb4c80 <line:732:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb4d10 <line:734:3>
|   | `-TextComment 0x55dc7dcb4ce0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb4d30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb4d90 <col:11, col:35>
|       `-TextComment 0x55dc7dcb4d60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db8e8e8 <line:750:1, line:754:1> line:750:21 k_cyc_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7db8e830 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7db8ecb8 <line:751:1, line:754:1>
| | `-ReturnStmt 0x55dc7db8ec78 <line:753:2, col:64>
| |   `-ImplicitCastExpr 0x55dc7db8ec60 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7db8eb40 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7db8eb28 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7db8e990 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7db8ebb8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7db8eba0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7db8e9b8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7db8e830 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7db8ebd0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7db8ea20 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7db8ea08 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7db8e9e0 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7db8ebe8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7db8ea48 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55dc7db8ec00 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7db8eaa8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7db8ea88 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7db8ea68 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7db8ec18 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7db8eac8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7db8ec30 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7db8eae8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55dc7db8ec48 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7db8eb08 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb50c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:742:4, line:748:35>
|   |-ParagraphComment 0x55dc7dcb4e80 <line:742:4>
|   | `-TextComment 0x55dc7dcb4e50 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb4ea0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb4f00 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb4ed0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55dc7dcb4fa0 <line:744:3, line:746:45>
|   | |-TextComment 0x55dc7dcb4f20 <line:744:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55dc7dcb4f40 <line:745:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb4f60 <line:746:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb4ff0 <line:748:3>
|   | `-TextComment 0x55dc7dcb4fc0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb5010 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb5070 <col:11, col:35>
|       `-TextComment 0x55dc7dcb5040 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db8ed68 <line:764:1, line:768:1> line:764:21 k_cyc_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7db8ece0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7db8f108 <line:765:1, line:768:1>
| | `-ReturnStmt 0x55dc7db8f0c8 <line:767:2, col:65>
| |   `-CallExpr 0x55dc7db8efc0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7db8efa8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7db8ee10 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7db8f020 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7db8ee38 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7db8ece0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7db8f038 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7db8eea0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7db8ee88 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7db8ee60 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7db8f050 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7db8eec8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55dc7db8f068 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7db8ef28 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7db8ef08 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7db8eee8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7db8f080 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7db8ef48 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7db8f098 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7db8ef68 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55dc7db8f0b0 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7db8ef88 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb53a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:756:4, line:762:35>
|   |-ParagraphComment 0x55dc7dcb5160 <line:756:4>
|   | `-TextComment 0x55dc7dcb5130 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb5180 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb51e0 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb51b0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55dc7dcb5280 <line:758:3, line:760:45>
|   | |-TextComment 0x55dc7dcb5200 <line:758:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55dc7dcb5220 <line:759:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb5240 <line:760:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb52d0 <line:762:3>
|   | `-TextComment 0x55dc7dcb52a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb52f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb5350 <col:11, col:35>
|       `-TextComment 0x55dc7dcb5320 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db8f1b8 <line:778:1, line:782:1> line:778:21 k_cyc_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7db8f130 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7db8f588 <line:779:1, line:782:1>
| | `-ReturnStmt 0x55dc7db8f548 <line:781:2, col:65>
| |   `-ImplicitCastExpr 0x55dc7db8f530 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7db8f410 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7db8f3f8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7db8f260 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7db8f488 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7db8f470 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7db8f288 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7db8f130 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7db8f4a0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7db8f2f0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7db8f2d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7db8f2b0 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7db8f4b8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7db8f318 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55dc7db8f4d0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7db8f378 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7db8f358 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7db8f338 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7db8f4e8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7db8f398 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7db8f500 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7db8f3b8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55dc7db8f518 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7db8f3d8 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb5680 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:770:4, line:776:35>
|   |-ParagraphComment 0x55dc7dcb5440 <line:770:4>
|   | `-TextComment 0x55dc7dcb5410 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb5460 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb54c0 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb5490 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55dc7dcb5560 <line:772:3, line:774:44>
|   | |-TextComment 0x55dc7dcb54e0 <line:772:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55dc7dcb5500 <line:773:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb5520 <line:774:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb55b0 <line:776:3>
|   | `-TextComment 0x55dc7dcb5580 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb55d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb5630 <col:11, col:35>
|       `-TextComment 0x55dc7dcb5600 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db8f638 <line:792:1, line:796:1> line:792:21 k_cyc_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7db8f5b0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7db8f9f8 <line:793:1, line:796:1>
| | `-ReturnStmt 0x55dc7db8f9b8 <line:795:2, col:66>
| |   `-CallExpr 0x55dc7db8f890 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7db8f878 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7db8f6e0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7db8f910 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7db8f708 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7db8f5b0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7db8f928 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7db8f770 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7db8f758 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7db8f730 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7db8f940 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7db8f798 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55dc7db8f958 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7db8f7f8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7db8f7d8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7db8f7b8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7db8f970 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7db8f818 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7db8f988 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7db8f838 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55dc7db8f9a0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7db8f858 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb5960 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:784:4, line:790:35>
|   |-ParagraphComment 0x55dc7dcb5720 <line:784:4>
|   | `-TextComment 0x55dc7dcb56f0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb5740 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb57a0 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb5770 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55dc7dcb5840 <line:786:3, line:788:44>
|   | |-TextComment 0x55dc7dcb57c0 <line:786:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55dc7dcb57e0 <line:787:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb5800 <line:788:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb5890 <line:790:3>
|   | `-TextComment 0x55dc7dcb5860 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb58b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb5910 <col:11, col:35>
|       `-TextComment 0x55dc7dcb58e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db8faa8 <line:806:1, line:810:1> line:806:21 k_cyc_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7db8fa20 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7db8fe78 <line:807:1, line:810:1>
| | `-ReturnStmt 0x55dc7db8fe38 <line:809:2, col:64>
| |   `-ImplicitCastExpr 0x55dc7db8fe20 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7db8fd00 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7db8fce8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7db8fb50 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7db8fd78 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7db8fd60 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7db8fb78 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7db8fa20 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7db8fd90 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7db8fbe0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7db8fbc8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7db8fba0 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7db8fda8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7db8fc08 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55dc7db8fdc0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7db8fc68 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7db8fc48 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7db8fc28 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7db8fdd8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7db8fc88 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7db8fdf0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7db8fca8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55dc7db8fe08 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7db8fcc8 <col:16> 'int' 1
| `-FullComment 0x55dc7dcb5c40 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:798:4, line:804:35>
|   |-ParagraphComment 0x55dc7dcb5a00 <line:798:4>
|   | `-TextComment 0x55dc7dcb59d0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb5a20 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb5a80 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb5a50 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55dc7dcb5b20 <line:800:3, line:802:37>
|   | |-TextComment 0x55dc7dcb5aa0 <line:800:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55dc7dcb5ac0 <line:801:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb5ae0 <line:802:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb5b70 <line:804:3>
|   | `-TextComment 0x55dc7dcb5b40 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb5b90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb5bf0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb5bc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db8ff28 <line:820:1, line:824:1> line:820:21 k_cyc_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7db8fea0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7db902c8 <line:821:1, line:824:1>
| | `-ReturnStmt 0x55dc7db90288 <line:823:2, col:65>
| |   `-CallExpr 0x55dc7db90180 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7db90168 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7db8ffd0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7db901e0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7db8fff8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7db8fea0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7db901f8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7db90060 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7db90048 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7db90020 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7db90210 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7db90088 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55dc7db90228 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7db900e8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7db900c8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7db900a8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7db90240 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7db90108 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7db90258 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7db90128 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55dc7db90270 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7db90148 <col:16> 'int' 1
| `-FullComment 0x55dc7dcb5f20 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:812:4, line:818:35>
|   |-ParagraphComment 0x55dc7dcb5ce0 <line:812:4>
|   | `-TextComment 0x55dc7dcb5cb0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb5d00 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb5d60 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb5d30 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55dc7dcb5e00 <line:814:3, line:816:37>
|   | |-TextComment 0x55dc7dcb5d80 <line:814:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55dc7dcb5da0 <line:815:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb5dc0 <line:816:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb5e50 <line:818:3>
|   | `-TextComment 0x55dc7dcb5e20 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb5e70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb5ed0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb5ea0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db90378 <line:834:1, line:838:1> line:834:21 k_cyc_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7db902f0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7db90748 <line:835:1, line:838:1>
| | `-ReturnStmt 0x55dc7db90708 <line:837:2, col:64>
| |   `-ImplicitCastExpr 0x55dc7db906f0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7db905d0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7db905b8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7db90420 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7db90648 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7db90630 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7db90448 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7db902f0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7db90660 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7db904b0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7db90498 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7db90470 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7db90678 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7db904d8 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55dc7db90690 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7db90538 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7db90518 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7db904f8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7db906a8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7db90558 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7db906c0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7db90578 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55dc7db906d8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7db90598 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb6200 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:826:4, line:832:35>
|   |-ParagraphComment 0x55dc7dcb5fc0 <line:826:4>
|   | `-TextComment 0x55dc7dcb5f90 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb5fe0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb6040 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb6010 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55dc7dcb60e0 <line:828:3, line:830:45>
|   | |-TextComment 0x55dc7dcb6060 <line:828:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55dc7dcb6080 <line:829:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb60a0 <line:830:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb6130 <line:832:3>
|   | `-TextComment 0x55dc7dcb6100 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb6150 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb61b0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb6180 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db907f8 <line:848:1, line:852:1> line:848:21 k_cyc_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7db90770 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7db90bb8 <line:849:1, line:852:1>
| | `-ReturnStmt 0x55dc7db90b70 <line:851:2, col:65>
| |   `-CallExpr 0x55dc7db90a68 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7db90a50 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7db908a0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7db90ac8 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7db908e0 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7db90770 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7db90ae0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7db90948 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7db90930 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7db90908 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7db90af8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7db90970 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55dc7db90b10 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7db909d0 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7db909b0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7db90990 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7db90b28 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7db909f0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7db90b40 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7db90a10 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55dc7db90b58 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7db90a30 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb64e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:840:4, line:846:35>
|   |-ParagraphComment 0x55dc7dcb62a0 <line:840:4>
|   | `-TextComment 0x55dc7dcb6270 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb62c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb6320 <col:11, col:50>
|   |   `-TextComment 0x55dc7dcb62f0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55dc7dcb63c0 <line:842:3, line:844:45>
|   | |-TextComment 0x55dc7dcb6340 <line:842:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55dc7dcb6360 <line:843:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb6380 <line:844:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb6410 <line:846:3>
|   | `-TextComment 0x55dc7dcb63e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb6430 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb6490 <col:11, col:35>
|       `-TextComment 0x55dc7dcb6460 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db90c68 <line:862:1, line:866:1> line:862:21 k_cyc_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7db90be0 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7db91038 <line:863:1, line:866:1>
| | `-ReturnStmt 0x55dc7db90ff8 <line:865:2, col:65>
| |   `-ImplicitCastExpr 0x55dc7db90fe0 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7db90ec0 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7db90ea8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7db90d10 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7db90f38 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7db90f20 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7db90d38 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7db90be0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7db90f50 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7db90da0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7db90d88 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7db90d60 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7db90f68 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7db90dc8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55dc7db90f80 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7db90e28 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7db90e08 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7db90de8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7db90f98 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7db90e48 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7db90fb0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7db90e68 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55dc7db90fc8 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7db90e88 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb67c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:854:4, line:860:35>
|   |-ParagraphComment 0x55dc7dcb6580 <line:854:4>
|   | `-TextComment 0x55dc7dcb6550 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb65a0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb6600 <col:11, col:49>
|   |   `-TextComment 0x55dc7dcb65d0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55dc7dcb66a0 <line:856:3, line:858:44>
|   | |-TextComment 0x55dc7dcb6620 <line:856:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55dc7dcb6640 <line:857:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb6660 <line:858:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb66f0 <line:860:3>
|   | `-TextComment 0x55dc7dcb66c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb6710 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb6770 <col:11, col:35>
|       `-TextComment 0x55dc7dcb6740 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db910e8 <line:876:1, line:880:1> line:876:21 k_cyc_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7db91060 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7db91488 <line:877:1, line:880:1>
| | `-ReturnStmt 0x55dc7db91448 <line:879:2, col:66>
| |   `-CallExpr 0x55dc7db91340 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7db91328 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7db91190 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7db913a0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7db911b8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7db91060 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7db913b8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7db91220 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7db91208 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7db911e0 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7db913d0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7db91248 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55dc7db913e8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7db912a8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7db91288 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7db91268 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7db91400 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7db912c8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7db91418 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7db912e8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55dc7db91430 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7db91308 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb6ab0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:868:4, line:874:35>
|   |-ParagraphComment 0x55dc7dcb6870 <line:868:4>
|   | `-TextComment 0x55dc7dcb6830 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb6890 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb68f0 <col:11, col:49>
|   |   `-TextComment 0x55dc7dcb68c0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55dc7dcb6990 <line:870:3, line:872:44>
|   | |-TextComment 0x55dc7dcb6910 <line:870:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55dc7dcb6930 <line:871:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb6950 <line:872:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb69e0 <line:874:3>
|   | `-TextComment 0x55dc7dcb69b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb6a00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb6a60 <col:11, col:35>
|       `-TextComment 0x55dc7dcb6a30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7db91538 <line:890:1, line:894:1> line:890:21 k_cyc_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7db914b0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbe4fe8 <line:891:1, line:894:1>
| | `-ReturnStmt 0x55dc7db918c8 <line:893:2, col:64>
| |   `-ImplicitCastExpr 0x55dc7db918b0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7db91790 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7db91778 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7db915e0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7db91808 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7db917f0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7db91608 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7db914b0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7db91820 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7db91670 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7db91658 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7db91630 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7db91838 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7db91698 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55dc7db91850 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7db916f8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7db916d8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7db916b8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7db91868 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7db91718 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7db91880 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7db91738 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55dc7db91898 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7db91758 <col:16> 'int' 1
| `-FullComment 0x55dc7dcb6d90 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:882:4, line:888:35>
|   |-ParagraphComment 0x55dc7dcb6b50 <line:882:4>
|   | `-TextComment 0x55dc7dcb6b20 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb6b70 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb6bd0 <col:11, col:49>
|   |   `-TextComment 0x55dc7dcb6ba0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55dc7dcb6c70 <line:884:3, line:886:37>
|   | |-TextComment 0x55dc7dcb6bf0 <line:884:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55dc7dcb6c10 <line:885:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb6c30 <line:886:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb6cc0 <line:888:3>
|   | `-TextComment 0x55dc7dcb6c90 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb6ce0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb6d40 <col:11, col:35>
|       `-TextComment 0x55dc7dcb6d10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe5098 <line:904:1, line:908:1> line:904:21 k_cyc_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbe5010 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbe5438 <line:905:1, line:908:1>
| | `-ReturnStmt 0x55dc7dbe53f8 <line:907:2, col:65>
| |   `-CallExpr 0x55dc7dbe52f0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbe52d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dbe5140 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7dbe5350 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dbe5168 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbe5010 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbe5368 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7dbe51d0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7dbe51b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7dbe5190 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7dbe5380 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7dbe51f8 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55dc7dbe5398 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7dbe5258 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7dbe5238 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7dbe5218 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbe53b0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbe5278 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbe53c8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbe5298 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55dc7dbe53e0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7dbe52b8 <col:16> 'int' 1
| `-FullComment 0x55dc7dcb7070 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:896:4, line:902:35>
|   |-ParagraphComment 0x55dc7dcb6e30 <line:896:4>
|   | `-TextComment 0x55dc7dcb6e00 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb6e50 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb6eb0 <col:11, col:49>
|   |   `-TextComment 0x55dc7dcb6e80 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55dc7dcb6f50 <line:898:3, line:900:37>
|   | |-TextComment 0x55dc7dcb6ed0 <line:898:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55dc7dcb6ef0 <line:899:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb6f10 <line:900:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb6fa0 <line:902:3>
|   | `-TextComment 0x55dc7dcb6f70 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb6fc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb7020 <col:11, col:35>
|       `-TextComment 0x55dc7dcb6ff0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe54e8 <line:918:1, line:922:1> line:918:21 k_cyc_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbe5460 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbe58b8 <line:919:1, line:922:1>
| | `-ReturnStmt 0x55dc7dbe5878 <line:921:2, col:64>
| |   `-ImplicitCastExpr 0x55dc7dbe5860 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7dbe5740 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7dbe5728 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7dbe5590 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55dc7dbe57b8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55dc7dbe57a0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55dc7dbe55b8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbe5460 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55dc7dbe57d0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55dc7dbe5620 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55dc7dbe5608 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55dc7dbe55e0 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55dc7dbe57e8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55dc7dbe5648 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55dc7dbe5800 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55dc7dbe56a8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55dc7dbe5688 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55dc7dbe5668 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55dc7dbe5818 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbe56c8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55dc7dbe5830 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55dc7dbe56e8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55dc7dbe5848 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55dc7dbe5708 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb7350 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:910:4, line:916:35>
|   |-ParagraphComment 0x55dc7dcb7110 <line:910:4>
|   | `-TextComment 0x55dc7dcb70e0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb7130 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb7190 <col:11, col:49>
|   |   `-TextComment 0x55dc7dcb7160 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55dc7dcb7230 <line:912:3, line:914:45>
|   | |-TextComment 0x55dc7dcb71b0 <line:912:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55dc7dcb71d0 <line:913:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb71f0 <line:914:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb7280 <line:916:3>
|   | `-TextComment 0x55dc7dcb7250 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb72a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb7300 <col:11, col:35>
|       `-TextComment 0x55dc7dcb72d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe5968 <line:932:1, line:936:1> line:932:21 k_cyc_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbe58e0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbe5d08 <line:933:1, line:936:1>
| | `-ReturnStmt 0x55dc7dbe5cc8 <line:935:2, col:65>
| |   `-CallExpr 0x55dc7dbe5bc0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbe5ba8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dbe5a10 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55dc7dbc97c0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55dc7dbe5c20 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dbe5a38 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55dc7dbe58e0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55dc7dbe5c38 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55dc7dbe5aa0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55dc7dbe5a88 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55dc7dbe5a60 <col:18> 'int (void)' Function 0x55dc7dbc92b8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55dc7dbe5c50 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55dc7dbe5ac8 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55dc7dbe5c68 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55dc7dbe5b28 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55dc7dbe5b08 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55dc7dbe5ae8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbe5c80 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbe5b48 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55dc7dbe5c98 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55dc7dbe5b68 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55dc7dbe5cb0 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55dc7dbe5b88 <col:16> 'int' 0
| `-FullComment 0x55dc7dcb7630 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:924:4, line:930:35>
|   |-ParagraphComment 0x55dc7dcb73f0 <line:924:4>
|   | `-TextComment 0x55dc7dcb73c0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb7410 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb7470 <col:11, col:49>
|   |   `-TextComment 0x55dc7dcb7440 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55dc7dcb7510 <line:926:3, line:928:45>
|   | |-TextComment 0x55dc7dcb7490 <line:926:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55dc7dcb74b0 <line:927:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb74d0 <line:928:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb7560 <line:930:3>
|   | `-TextComment 0x55dc7dcb7530 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb7580 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb75e0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb75b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe5db8 <line:946:1, line:950:1> line:946:21 k_cyc_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbe5d30 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbe6018 <line:947:1, line:950:1>
| `-FullComment 0x55dc7dcb7910 <line:938:4, line:944:35>
|   |-ParagraphComment 0x55dc7dcb76d0 <line:938:4>
|   | `-TextComment 0x55dc7dcb76a0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb76f0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb7750 <col:11, col:43>
|   |   `-TextComment 0x55dc7dcb7720 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55dc7dcb77f0 <line:940:3, line:942:44>
|   | |-TextComment 0x55dc7dcb7770 <line:940:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55dc7dcb7790 <line:941:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb77b0 <line:942:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb7840 <line:944:3>
|   | `-TextComment 0x55dc7dcb7810 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb7860 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb78c0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb7890 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe60c0 <line:960:1, line:964:1> line:960:21 k_cyc_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbe6038 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbe6308 <line:961:1, line:964:1>
| `-FullComment 0x55dc7dcb7bf0 <line:952:4, line:958:35>
|   |-ParagraphComment 0x55dc7dcb79b0 <line:952:4>
|   | `-TextComment 0x55dc7dcb7980 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb79d0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb7a30 <col:11, col:43>
|   |   `-TextComment 0x55dc7dcb7a00 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55dc7dcb7ad0 <line:954:3, line:956:44>
|   | |-TextComment 0x55dc7dcb7a50 <line:954:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55dc7dcb7a70 <line:955:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb7a90 <line:956:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb7b20 <line:958:3>
|   | `-TextComment 0x55dc7dcb7af0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb7b40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb7ba0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb7b70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe63b0 <line:974:1, line:978:1> line:974:21 k_cyc_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbe6328 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbe65f8 <line:975:1, line:978:1>
| `-FullComment 0x55dc7dcb7ed0 <line:966:4, line:972:35>
|   |-ParagraphComment 0x55dc7dcb7c90 <line:966:4>
|   | `-TextComment 0x55dc7dcb7c60 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb7cb0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb7d10 <col:11, col:43>
|   |   `-TextComment 0x55dc7dcb7ce0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55dc7dcb7db0 <line:968:3, line:970:37>
|   | |-TextComment 0x55dc7dcb7d30 <line:968:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55dc7dcb7d50 <line:969:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb7d70 <line:970:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb7e00 <line:972:3>
|   | `-TextComment 0x55dc7dcb7dd0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb7e20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb7e80 <col:11, col:35>
|       `-TextComment 0x55dc7dcb7e50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe66a0 <line:988:1, line:992:1> line:988:21 k_cyc_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbe6618 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbe68e8 <line:989:1, line:992:1>
| `-FullComment 0x55dc7dcb81b0 <line:980:4, line:986:35>
|   |-ParagraphComment 0x55dc7dcb7f70 <line:980:4>
|   | `-TextComment 0x55dc7dcb7f40 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb7f90 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb7ff0 <col:11, col:43>
|   |   `-TextComment 0x55dc7dcb7fc0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55dc7dcb8090 <line:982:3, line:984:37>
|   | |-TextComment 0x55dc7dcb8010 <line:982:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55dc7dcb8030 <line:983:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb8050 <line:984:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb80e0 <line:986:3>
|   | `-TextComment 0x55dc7dcb80b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb8100 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb8160 <col:11, col:35>
|       `-TextComment 0x55dc7dcb8130 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe6990 <line:1002:1, line:1006:1> line:1002:21 k_cyc_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbe6908 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbe6bd8 <line:1003:1, line:1006:1>
| `-FullComment 0x55dc7dcb8490 <line:994:4, line:1000:35>
|   |-ParagraphComment 0x55dc7dcb8250 <line:994:4>
|   | `-TextComment 0x55dc7dcb8220 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb8270 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb82d0 <col:11, col:43>
|   |   `-TextComment 0x55dc7dcb82a0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55dc7dcb8370 <line:996:3, line:998:45>
|   | |-TextComment 0x55dc7dcb82f0 <line:996:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55dc7dcb8310 <line:997:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb8330 <line:998:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb83c0 <line:1000:3>
|   | `-TextComment 0x55dc7dcb8390 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb83e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb8440 <col:11, col:35>
|       `-TextComment 0x55dc7dcb8410 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe6c80 <line:1016:1, line:1020:1> line:1016:21 k_cyc_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbe6bf8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbe6ec8 <line:1017:1, line:1020:1>
| `-FullComment 0x55dc7dcb8770 <line:1008:4, line:1014:35>
|   |-ParagraphComment 0x55dc7dcb8530 <line:1008:4>
|   | `-TextComment 0x55dc7dcb8500 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb8550 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb85b0 <col:11, col:43>
|   |   `-TextComment 0x55dc7dcb8580 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55dc7dcb8650 <line:1010:3, line:1012:45>
|   | |-TextComment 0x55dc7dcb85d0 <line:1010:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55dc7dcb85f0 <line:1011:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb8610 <line:1012:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb86a0 <line:1014:3>
|   | `-TextComment 0x55dc7dcb8670 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb86c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb8720 <col:11, col:35>
|       `-TextComment 0x55dc7dcb86f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe6fe0 <line:1030:1, line:1034:1> line:1030:21 k_ticks_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbe6ee8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbe71a8 <line:1031:1, line:1034:1>
| `-FullComment 0x55dc7dcb8a60 <line:1022:4, line:1028:35>
|   |-ParagraphComment 0x55dc7dcb8810 <line:1022:4>
|   | `-TextComment 0x55dc7dcb87e0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb8830 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb88a0 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcb8870 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55dc7dcb8940 <line:1024:3, line:1026:44>
|   | |-TextComment 0x55dc7dcb88c0 <line:1024:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55dc7dcb88e0 <line:1025:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb8900 <line:1026:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb8990 <line:1028:3>
|   | `-TextComment 0x55dc7dcb8960 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb89b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb8a10 <col:11, col:35>
|       `-TextComment 0x55dc7dcb89e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe7250 <line:1044:1, line:1048:1> line:1044:21 used k_ticks_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbe71c8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbe7418 <line:1045:1, line:1048:1>
| `-FullComment 0x55dc7dcb8d40 <line:1036:4, line:1042:35>
|   |-ParagraphComment 0x55dc7dcb8b00 <line:1036:4>
|   | `-TextComment 0x55dc7dcb8ad0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb8b20 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb8b80 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcb8b50 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55dc7dcb8c20 <line:1038:3, line:1040:44>
|   | |-TextComment 0x55dc7dcb8ba0 <line:1038:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55dc7dcb8bc0 <line:1039:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb8be0 <line:1040:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb8c70 <line:1042:3>
|   | `-TextComment 0x55dc7dcb8c40 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb8c90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb8cf0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb8cc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe74c0 <line:1058:1, line:1062:1> line:1058:21 k_ticks_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbe7438 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbe7688 <line:1059:1, line:1062:1>
| `-FullComment 0x55dc7dcb9020 <line:1050:4, line:1056:35>
|   |-ParagraphComment 0x55dc7dcb8de0 <line:1050:4>
|   | `-TextComment 0x55dc7dcb8db0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb8e00 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb8e60 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcb8e30 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55dc7dcb8f00 <line:1052:3, line:1054:37>
|   | |-TextComment 0x55dc7dcb8e80 <line:1052:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55dc7dcb8ea0 <line:1053:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb8ec0 <line:1054:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb8f50 <line:1056:3>
|   | `-TextComment 0x55dc7dcb8f20 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb8f70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb8fd0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb8fa0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe7730 <line:1072:1, line:1076:1> line:1072:21 k_ticks_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbe76a8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbe78f8 <line:1073:1, line:1076:1>
| `-FullComment 0x55dc7dcb9300 <line:1064:4, line:1070:35>
|   |-ParagraphComment 0x55dc7dcb90c0 <line:1064:4>
|   | `-TextComment 0x55dc7dcb9090 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb90e0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb9140 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcb9110 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55dc7dcb91e0 <line:1066:3, line:1068:37>
|   | |-TextComment 0x55dc7dcb9160 <line:1066:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55dc7dcb9180 <line:1067:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb91a0 <line:1068:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcb9230 <line:1070:3>
|   | `-TextComment 0x55dc7dcb9200 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb9250 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb92b0 <col:11, col:35>
|       `-TextComment 0x55dc7dcb9280 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe79a0 <line:1086:1, line:1090:1> line:1086:21 k_ticks_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbe7918 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbe7b68 <line:1087:1, line:1090:1>
| `-FullComment 0x55dc7dcb95e0 <line:1078:4, line:1084:35>
|   |-ParagraphComment 0x55dc7dcb93a0 <line:1078:4>
|   | `-TextComment 0x55dc7dcb9370 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb93c0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb9420 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcb93f0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55dc7dcb94c0 <line:1080:3, line:1082:45>
|   | |-TextComment 0x55dc7dcb9440 <line:1080:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55dc7dcb9460 <line:1081:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb9480 <line:1082:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb9510 <line:1084:3>
|   | `-TextComment 0x55dc7dcb94e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb9530 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb9590 <col:11, col:35>
|       `-TextComment 0x55dc7dcb9560 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe7c10 <line:1100:1, line:1104:1> line:1100:21 k_ticks_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbe7b88 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbe7dd8 <line:1101:1, line:1104:1>
| `-FullComment 0x55dc7dcb98c0 <line:1092:4, line:1098:35>
|   |-ParagraphComment 0x55dc7dcb9680 <line:1092:4>
|   | `-TextComment 0x55dc7dcb9650 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb96a0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb9700 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcb96d0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55dc7dcb97a0 <line:1094:3, line:1096:45>
|   | |-TextComment 0x55dc7dcb9720 <line:1094:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55dc7dcb9740 <line:1095:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb9760 <line:1096:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcb97f0 <line:1098:3>
|   | `-TextComment 0x55dc7dcb97c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb9810 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb9870 <col:11, col:35>
|       `-TextComment 0x55dc7dcb9840 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe7e80 <line:1114:1, line:1118:1> line:1114:21 k_ticks_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbe7df8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbe9068 <line:1115:1, line:1118:1>
| `-FullComment 0x55dc7dcb9ba0 <line:1106:4, line:1112:35>
|   |-ParagraphComment 0x55dc7dcb9960 <line:1106:4>
|   | `-TextComment 0x55dc7dcb9930 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb9980 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb99e0 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcb99b0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55dc7dcb9a80 <line:1108:3, line:1110:44>
|   | |-TextComment 0x55dc7dcb9a00 <line:1108:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55dc7dcb9a20 <line:1109:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcb9a40 <line:1110:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb9ad0 <line:1112:3>
|   | `-TextComment 0x55dc7dcb9aa0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb9af0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb9b50 <col:11, col:35>
|       `-TextComment 0x55dc7dcb9b20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe9110 <line:1128:1, line:1132:1> line:1128:21 k_ticks_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbe9088 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbe92d8 <line:1129:1, line:1132:1>
| `-FullComment 0x55dc7dcb9e80 <line:1120:4, line:1126:35>
|   |-ParagraphComment 0x55dc7dcb9c40 <line:1120:4>
|   | `-TextComment 0x55dc7dcb9c10 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb9c60 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb9cc0 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcb9c90 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55dc7dcb9d60 <line:1122:3, line:1124:44>
|   | |-TextComment 0x55dc7dcb9ce0 <line:1122:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55dc7dcb9d00 <line:1123:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcb9d20 <line:1124:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcb9db0 <line:1126:3>
|   | `-TextComment 0x55dc7dcb9d80 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcb9dd0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcb9e30 <col:11, col:35>
|       `-TextComment 0x55dc7dcb9e00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe9380 <line:1142:1, line:1146:1> line:1142:21 k_ticks_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbe92f8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbe9548 <line:1143:1, line:1146:1>
| `-FullComment 0x55dc7dcba160 <line:1134:4, line:1140:35>
|   |-ParagraphComment 0x55dc7dcb9f20 <line:1134:4>
|   | `-TextComment 0x55dc7dcb9ef0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcb9f40 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcb9fa0 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcb9f70 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55dc7dcba040 <line:1136:3, line:1138:37>
|   | |-TextComment 0x55dc7dcb9fc0 <line:1136:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55dc7dcb9fe0 <line:1137:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcba000 <line:1138:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcba090 <line:1140:3>
|   | `-TextComment 0x55dc7dcba060 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcba0b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcba110 <col:11, col:35>
|       `-TextComment 0x55dc7dcba0e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe95f0 <line:1156:1, line:1160:1> line:1156:21 k_ticks_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbe9568 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbe97b8 <line:1157:1, line:1160:1>
| `-FullComment 0x55dc7dcba440 <line:1148:4, line:1154:35>
|   |-ParagraphComment 0x55dc7dcba200 <line:1148:4>
|   | `-TextComment 0x55dc7dcba1d0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcba220 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcba280 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcba250 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55dc7dcba320 <line:1150:3, line:1152:37>
|   | |-TextComment 0x55dc7dcba2a0 <line:1150:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55dc7dcba2c0 <line:1151:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcba2e0 <line:1152:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcba370 <line:1154:3>
|   | `-TextComment 0x55dc7dcba340 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcba390 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcba3f0 <col:11, col:35>
|       `-TextComment 0x55dc7dcba3c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe9860 <line:1170:1, line:1174:1> line:1170:21 k_ticks_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbe97d8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbe9a28 <line:1171:1, line:1174:1>
| `-FullComment 0x55dc7dcba720 <line:1162:4, line:1168:35>
|   |-ParagraphComment 0x55dc7dcba4e0 <line:1162:4>
|   | `-TextComment 0x55dc7dcba4b0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcba500 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcba560 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcba530 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55dc7dcba600 <line:1164:3, line:1166:45>
|   | |-TextComment 0x55dc7dcba580 <line:1164:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55dc7dcba5a0 <line:1165:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcba5c0 <line:1166:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcba650 <line:1168:3>
|   | `-TextComment 0x55dc7dcba620 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcba670 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcba6d0 <col:11, col:35>
|       `-TextComment 0x55dc7dcba6a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe9ad0 <line:1184:1, line:1188:1> line:1184:21 k_ticks_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbe9a48 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbe9c98 <line:1185:1, line:1188:1>
| `-FullComment 0x55dc7dcbaa20 <line:1176:4, line:1182:35>
|   |-ParagraphComment 0x55dc7dcba7c0 <line:1176:4>
|   | `-TextComment 0x55dc7dcba790 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcba7e0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcba840 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcba810 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55dc7dcba900 <line:1178:3, line:1180:45>
|   | |-TextComment 0x55dc7dcba880 <line:1178:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55dc7dcba8a0 <line:1179:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcba8c0 <line:1180:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcba950 <line:1182:3>
|   | `-TextComment 0x55dc7dcba920 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcba970 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcba9d0 <col:11, col:35>
|       `-TextComment 0x55dc7dcba9a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbe9d40 <line:1198:1, line:1202:1> line:1198:21 k_ticks_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbe9cb8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbe9f08 <line:1199:1, line:1202:1>
| `-FullComment 0x55dc7dcbad00 <line:1190:4, line:1196:35>
|   |-ParagraphComment 0x55dc7dcbaac0 <line:1190:4>
|   | `-TextComment 0x55dc7dcbaa90 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcbaae0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dcbab40 <col:11, col:39>
|   |   `-TextComment 0x55dc7dcbab10 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55dc7dcbabe0 <line:1192:3, line:1194:44>
|   | |-TextComment 0x55dc7dcbab60 <line:1192:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55dc7dcbab80 <line:1193:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcbaba0 <line:1194:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcbac30 <line:1196:3>
|   | `-TextComment 0x55dc7dcbac00 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcbac50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcbacb0 <col:11, col:35>
|       `-TextComment 0x55dc7dcbac80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbea010 <line:1212:1, line:1216:1> line:1212:21 k_ticks_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbe9f28 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbea1d8 <line:1213:1, line:1216:1>
| `-FullComment 0x55dc7dcbafe0 <line:1204:4, line:1210:35>
|   |-ParagraphComment 0x55dc7dcbada0 <line:1204:4>
|   | `-TextComment 0x55dc7dcbad70 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcbadc0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dcbae20 <col:11, col:39>
|   |   `-TextComment 0x55dc7dcbadf0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55dc7dcbaec0 <line:1206:3, line:1208:44>
|   | |-TextComment 0x55dc7dcbae40 <line:1206:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55dc7dcbae60 <line:1207:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcbae80 <line:1208:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcbaf10 <line:1210:3>
|   | `-TextComment 0x55dc7dcbaee0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcbaf30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcbaf90 <col:11, col:35>
|       `-TextComment 0x55dc7dcbaf60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbea280 <line:1226:1, line:1230:1> line:1226:21 k_ticks_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbea1f8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbea448 <line:1227:1, line:1230:1>
| `-FullComment 0x55dc7dcbb2c0 <line:1218:4, line:1224:35>
|   |-ParagraphComment 0x55dc7dcbb080 <line:1218:4>
|   | `-TextComment 0x55dc7dcbb050 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcbb0a0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dcbb100 <col:11, col:39>
|   |   `-TextComment 0x55dc7dcbb0d0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55dc7dcbb1a0 <line:1220:3, line:1222:37>
|   | |-TextComment 0x55dc7dcbb120 <line:1220:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55dc7dcbb140 <line:1221:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcbb160 <line:1222:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcbb1f0 <line:1224:3>
|   | `-TextComment 0x55dc7dcbb1c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcbb210 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcbb270 <col:11, col:35>
|       `-TextComment 0x55dc7dcbb240 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbea4f0 <line:1240:1, line:1244:1> line:1240:21 k_ticks_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbea468 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbea6b8 <line:1241:1, line:1244:1>
| `-FullComment 0x55dc7dcbb5a0 <line:1232:4, line:1238:35>
|   |-ParagraphComment 0x55dc7dcbb360 <line:1232:4>
|   | `-TextComment 0x55dc7dcbb330 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcbb380 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dcbb3e0 <col:11, col:39>
|   |   `-TextComment 0x55dc7dcbb3b0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55dc7dcbb480 <line:1234:3, line:1236:37>
|   | |-TextComment 0x55dc7dcbb400 <line:1234:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55dc7dcbb420 <line:1235:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcbb440 <line:1236:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcbb4d0 <line:1238:3>
|   | `-TextComment 0x55dc7dcbb4a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcbb4f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcbb550 <col:11, col:35>
|       `-TextComment 0x55dc7dcbb520 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbea760 <line:1254:1, line:1258:1> line:1254:21 k_ticks_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbea6d8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbea928 <line:1255:1, line:1258:1>
| `-FullComment 0x55dc7dcbb880 <line:1246:4, line:1252:35>
|   |-ParagraphComment 0x55dc7dcbb640 <line:1246:4>
|   | `-TextComment 0x55dc7dcbb610 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcbb660 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dcbb6c0 <col:11, col:39>
|   |   `-TextComment 0x55dc7dcbb690 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55dc7dcbb760 <line:1248:3, line:1250:45>
|   | |-TextComment 0x55dc7dcbb6e0 <line:1248:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55dc7dcbb700 <line:1249:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcbb720 <line:1250:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcbb7b0 <line:1252:3>
|   | `-TextComment 0x55dc7dcbb780 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcbb7d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcbb830 <col:11, col:35>
|       `-TextComment 0x55dc7dcbb800 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbea9d0 <line:1268:1, line:1272:1> line:1268:21 k_ticks_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbea948 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbeab98 <line:1269:1, line:1272:1>
| `-FullComment 0x55dc7dcbbb60 <line:1260:4, line:1266:35>
|   |-ParagraphComment 0x55dc7dcbb920 <line:1260:4>
|   | `-TextComment 0x55dc7dcbb8f0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcbb940 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dcbb9a0 <col:11, col:39>
|   |   `-TextComment 0x55dc7dcbb970 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55dc7dcbba40 <line:1262:3, line:1264:45>
|   | |-TextComment 0x55dc7dcbb9c0 <line:1262:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55dc7dcbb9e0 <line:1263:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcbba00 <line:1264:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcbba90 <line:1266:3>
|   | `-TextComment 0x55dc7dcbba60 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcbbab0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcbbb10 <col:11, col:35>
|       `-TextComment 0x55dc7dcbbae0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbeac40 <line:1282:1, line:1286:1> line:1282:21 k_ticks_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbeabb8 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbeae88 <line:1283:1, line:1286:1>
| `-FullComment 0x55dc7dcbbe40 <line:1274:4, line:1280:35>
|   |-ParagraphComment 0x55dc7dcbbc00 <line:1274:4>
|   | `-TextComment 0x55dc7dcbbbd0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcbbc20 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dcbbc80 <col:11, col:43>
|   |   `-TextComment 0x55dc7dcbbc50 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55dc7dcbbd20 <line:1276:3, line:1278:44>
|   | |-TextComment 0x55dc7dcbbca0 <line:1276:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55dc7dcbbcc0 <line:1277:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcbbce0 <line:1278:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcbbd70 <line:1280:3>
|   | `-TextComment 0x55dc7dcbbd40 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcbbd90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcbbdf0 <col:11, col:35>
|       `-TextComment 0x55dc7dcbbdc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbeaf30 <line:1296:1, line:1300:1> line:1296:21 k_ticks_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbeaea8 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbeb198 <line:1297:1, line:1300:1>
| `-FullComment 0x55dc7dcbc120 <line:1288:4, line:1294:35>
|   |-ParagraphComment 0x55dc7dcbbee0 <line:1288:4>
|   | `-TextComment 0x55dc7dcbbeb0 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcbbf00 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dcbbf60 <col:11, col:43>
|   |   `-TextComment 0x55dc7dcbbf30 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55dc7dcbc000 <line:1290:3, line:1292:44>
|   | |-TextComment 0x55dc7dcbbf80 <line:1290:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55dc7dcbbfa0 <line:1291:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcbbfc0 <line:1292:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55dc7dcbc050 <line:1294:3>
|   | `-TextComment 0x55dc7dcbc020 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcbc070 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcbc0d0 <col:11, col:35>
|       `-TextComment 0x55dc7dcbc0a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbeb240 <line:1310:1, line:1314:1> line:1310:21 k_ticks_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbeb1b8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbeb488 <line:1311:1, line:1314:1>
| `-FullComment 0x55dc7dcbc400 <line:1302:4, line:1308:35>
|   |-ParagraphComment 0x55dc7dcbc1c0 <line:1302:4>
|   | `-TextComment 0x55dc7dcbc190 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcbc1e0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dcbc240 <col:11, col:43>
|   |   `-TextComment 0x55dc7dcbc210 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55dc7dcbc2e0 <line:1304:3, line:1306:37>
|   | |-TextComment 0x55dc7dcbc260 <line:1304:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55dc7dcbc280 <line:1305:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcbc2a0 <line:1306:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcbc330 <line:1308:3>
|   | `-TextComment 0x55dc7dcbc300 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcbc350 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcbc3b0 <col:11, col:35>
|       `-TextComment 0x55dc7dcbc380 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbeb530 <line:1324:1, line:1328:1> line:1324:21 k_ticks_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbeb4a8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbeb778 <line:1325:1, line:1328:1>
| `-FullComment 0x55dc7dcbc6e0 <line:1316:4, line:1322:35>
|   |-ParagraphComment 0x55dc7dcbc4a0 <line:1316:4>
|   | `-TextComment 0x55dc7dcbc470 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcbc4c0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dcbc520 <col:11, col:43>
|   |   `-TextComment 0x55dc7dcbc4f0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55dc7dcbc5c0 <line:1318:3, line:1320:37>
|   | |-TextComment 0x55dc7dcbc540 <line:1318:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55dc7dcbc560 <line:1319:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcbc580 <line:1320:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55dc7dcbc610 <line:1322:3>
|   | `-TextComment 0x55dc7dcbc5e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcbc630 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcbc690 <col:11, col:35>
|       `-TextComment 0x55dc7dcbc660 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbeb820 <line:1338:1, line:1342:1> line:1338:21 k_ticks_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbeb798 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbeba68 <line:1339:1, line:1342:1>
| `-FullComment 0x55dc7dcbc9d0 <line:1330:4, line:1336:35>
|   |-ParagraphComment 0x55dc7dcbc780 <line:1330:4>
|   | `-TextComment 0x55dc7dcbc750 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcbc7a0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dcbc800 <col:11, col:43>
|   |   `-TextComment 0x55dc7dcbc7d0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55dc7dcbc8b0 <line:1332:3, line:1334:45>
|   | |-TextComment 0x55dc7dcbc820 <line:1332:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55dc7dcbc840 <line:1333:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55dc7dcbc860 <line:1334:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcbc900 <line:1336:3>
|   | `-TextComment 0x55dc7dcbc8d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcbc920 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcbc980 <col:11, col:35>
|       `-TextComment 0x55dc7dcbc950 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbebb10 <line:1352:1, line:1356:1> line:1352:21 k_ticks_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55dc7dbeba88 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55dc7dbebdb8 <line:1353:1, line:1356:1>
| `-FullComment 0x55dc7dcbccb0 <line:1344:4, line:1350:35>
|   |-ParagraphComment 0x55dc7dcbca70 <line:1344:4>
|   | `-TextComment 0x55dc7dcbca40 <col:4> Text=" "
|   |-BlockCommandComment 0x55dc7dcbca90 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dcbcaf0 <col:11, col:43>
|   |   `-TextComment 0x55dc7dcbcac0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55dc7dcbcb90 <line:1346:3, line:1348:45>
|   | |-TextComment 0x55dc7dcbcb10 <line:1346:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55dc7dcbcb30 <line:1347:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55dc7dcbcb50 <line:1348:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55dc7dcbcbe0 <line:1350:3>
|   | `-TextComment 0x55dc7dcbcbb0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcbcc00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55dc7dcbcc60 <col:11, col:35>
|       `-TextComment 0x55dc7dcbcc30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55dc7dbebe58 </vagrant/ext/zephyros/zephyr/include/sys_clock.h:117:1, col:25> col:7 z_tick_get_32 'u32_t (void)'
| `-FullComment 0x55dc7dcbcf40 <line:112:3, line:116:1>
|   |-ParagraphComment 0x55dc7dcbcd50 <line:112:3>
|   | `-TextComment 0x55dc7dcbcd20 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcbcd70 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x55dc7dcbcdd0 <col:10, col:64>
|   |   `-TextComment 0x55dc7dcbcda0 <col:10, col:64> Text=" Return the lower part of the current system tick count"
|   |-ParagraphComment 0x55dc7dcbce20 <line:114:3>
|   | `-TextComment 0x55dc7dcbcdf0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcbce40 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x55dc7dcbcea0 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcbce70 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x55dc7dcbcef0 <line:116:1>
|     `-TextComment 0x55dc7dcbcec0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dbee050 <line:126:1, col:22> col:7 z_tick_get 's64_t (void)'
| `-FullComment 0x55dc7dcbd1d0 <line:121:3, line:125:1>
|   |-ParagraphComment 0x55dc7dcbcfe0 <line:121:3>
|   | `-TextComment 0x55dc7dcbcfb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcbd000 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55dc7dcbd060 <col:10, col:46>
|   |   `-TextComment 0x55dc7dcbd030 <col:10, col:46> Text=" Return the current system tick count"
|   |-ParagraphComment 0x55dc7dcbd0b0 <line:123:3>
|   | `-TextComment 0x55dc7dcbd080 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcbd0d0 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x55dc7dcbd130 <col:11, col:40>
|   |   `-TextComment 0x55dc7dcbd100 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x55dc7dcbd180 <line:125:1>
|     `-TextComment 0x55dc7dcbd150 <col:1> Text=" "
|-RecordDecl 0x55dc7dbee0f0 <line:135:1, col:8> col:8 struct _timeout
|-TypedefDecl 0x55dc7dbee3f0 <line:136:1, col:51> col:16 referenced _timeout_func_t 'void (*)(struct _timeout *)'
| `-PointerType 0x55dc7dbee390 'void (*)(struct _timeout *)'
|   `-ParenType 0x55dc7dbee330 'void (struct _timeout *)' sugar
|     `-FunctionProtoType 0x55dc7dbee2f0 'void (struct _timeout *)' cdecl
|       |-BuiltinType 0x55dc7da66970 'void'
|       `-PointerType 0x55dc7dbee200 'struct _timeout *'
|         `-ElaboratedType 0x55dc7dbee1a0 'struct _timeout' sugar
|           `-RecordType 0x55dc7dbee180 'struct _timeout'
|             `-Record 0x55dc7dbee448 '_timeout'
|-RecordDecl 0x55dc7dbee448 prev 0x55dc7dbee0f0 <line:138:1, line:142:1> line:138:8 struct _timeout definition
| |-FieldDecl 0x55dc7dbee4e0 <line:139:2, col:14> col:14 node 'sys_dnode_t':'struct _dnode'
| |-FieldDecl 0x55dc7dbee560 <line:140:2, col:8> col:8 dticks 's32_t':'int'
| `-FieldDecl 0x55dc7dbee5e0 <line:141:2, col:18> col:18 fn '_timeout_func_t':'void (*)(struct _timeout *)'
|-RecordDecl 0x55dc7dbee628 </vagrant/ext/zephyros/zephyr/include/spinlock.h:25:1, line:27:1> line:25:8 struct k_spinlock_key definition
| `-FieldDecl 0x55dc7dbee6e8 <line:26:2, col:6> col:6 referenced key 'int'
|-TypedefDecl 0x55dc7dbee780 <line:29:1, col:31> col:31 referenced k_spinlock_key_t 'struct k_spinlock_key':'struct k_spinlock_key'
| `-ElaboratedType 0x55dc7dbee730 'struct k_spinlock_key' sugar
|   `-RecordType 0x55dc7dbee6b0 'struct k_spinlock_key'
|     `-Record 0x55dc7dbee628 'k_spinlock_key'
|-RecordDecl 0x55dc7dbee7d8 <line:31:1, line:60:1> line:31:8 struct k_spinlock definition
|-FunctionDecl 0x55dc7dbeea50 <line:62:1, line:86:1> line:62:39 k_spin_lock 'k_spinlock_key_t (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x55dc7dbee950 <col:51, col:70> col:70 used l 'struct k_spinlock *'
| |-CompoundStmt 0x55dc7dbeee68 <line:63:1, line:86:1>
| | |-CStyleCastExpr 0x55dc7dbeebe0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55dc7dbeebc8 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x55dc7dbeeba8 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x55dc7dbeeb40 </vagrant/ext/zephyros/zephyr/include/spinlock.h:64:13> 'struct k_spinlock *' lvalue ParmVar 0x55dc7dbee950 'l' 'struct k_spinlock *'
| | |-DeclStmt 0x55dc7dbeec78 <line:65:2, col:20>
| | | `-VarDecl 0x55dc7dbeec18 <col:2, col:19> col:19 used k 'k_spinlock_key_t':'struct k_spinlock_key'
| | |-BinaryOperator 0x55dc7dbeeda0 <line:71:2, col:24> 'int' '='
| | | |-MemberExpr 0x55dc7dbeecb8 <col:2, col:4> 'int' lvalue .key 0x55dc7dbee6e8
| | | | `-DeclRefExpr 0x55dc7dbeec90 <col:2> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x55dc7dbeec18 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| | | `-ImplicitCastExpr 0x55dc7dbeed88 <col:10, col:24> 'int' <IntegralCast>
| | |   `-CallExpr 0x55dc7dbeed60 <col:10, col:24> 'unsigned int'
| | |     `-ImplicitCastExpr 0x55dc7dbeed48 <col:10> 'unsigned int (*)(void)' <FunctionToPointerDecay>
| | |       `-DeclRefExpr 0x55dc7dbeecf0 <col:10> 'unsigned int (void)' Function 0x55dc7dbc81c0 'arch_irq_lock' 'unsigned int (void)'
| | `-ReturnStmt 0x55dc7dbeee50 <line:85:2, col:9>
| |   `-ImplicitCastExpr 0x55dc7dbeee38 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' <LValueToRValue>
| |     `-DeclRefExpr 0x55dc7dbeee10 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x55dc7dbeec18 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x55dc7dbeeaf8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x55dc7dbf0db0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:88:1, line:107:1> line:88:27 k_spin_unlock 'void (struct k_spinlock *, k_spinlock_key_t)' static inline
| |-ParmVarDecl 0x55dc7dbeeec0 <col:41, col:60> col:60 used l 'struct k_spinlock *'
| |-ParmVarDecl 0x55dc7dbeef30 <line:89:6, col:23> col:23 used key 'k_spinlock_key_t':'struct k_spinlock_key'
| |-CompoundStmt 0x55dc7dbf10a0 <line:90:1, line:107:1>
| | |-CStyleCastExpr 0x55dc7dbf0f48 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55dc7dbf0f30 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x55dc7dbf0f10 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x55dc7dbf0ea8 </vagrant/ext/zephyros/zephyr/include/spinlock.h:91:13> 'struct k_spinlock *' lvalue ParmVar 0x55dc7dbeeec0 'l' 'struct k_spinlock *'
| | `-CallExpr 0x55dc7dbf1040 <line:106:2, col:25> 'void'
| |   |-ImplicitCastExpr 0x55dc7dbf1028 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x55dc7dbf0f70 <col:2> 'void (unsigned int)' Function 0x55dc7dbc8328 'arch_irq_unlock' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x55dc7dbf1088 <col:18, col:22> 'unsigned int' <IntegralCast>
| |     `-ImplicitCastExpr 0x55dc7dbf1070 <col:18, col:22> 'int' <LValueToRValue>
| |       `-MemberExpr 0x55dc7dbf0fc0 <col:18, col:22> 'int' lvalue .key 0x55dc7dbee6e8
| |         `-DeclRefExpr 0x55dc7dbf0f98 <col:18> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue ParmVar 0x55dc7dbeef30 'key' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x55dc7dbf0e60 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x55dc7dbf11f0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:112:1, line:121:1> line:112:27 k_spin_release 'void (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x55dc7dbf10e8 <col:42, col:61> col:61 used l 'struct k_spinlock *'
| |-CompoundStmt 0x55dc7dbf1408 <line:113:1, line:121:1>
| | `-CStyleCastExpr 0x55dc7dbf1380 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55dc7dbf1368 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| |     `-ParenExpr 0x55dc7dbf1348 <col:29, col:31> 'struct k_spinlock *' lvalue
| |       `-DeclRefExpr 0x55dc7dbf12e0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:114:13> 'struct k_spinlock *' lvalue ParmVar 0x55dc7dbf10e8 'l' 'struct k_spinlock *'
| `-AlwaysInlineAttr 0x55dc7dbf1298 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-EnumDecl 0x55dc7dbf1420 </vagrant/ext/zephyros/zephyr/include/fatal.h:23:1, line:42:1> line:23:6 k_fatal_error_reason
| |-FullComment 0x55dc7dcbd430 <line:18:3, line:20:5>
| | |-ParagraphComment 0x55dc7dcbd270 <line:18:3>
| | | `-TextComment 0x55dc7dcbd240 <col:3> Text=" "
| | |-VerbatimLineComment 0x55dc7dcbd290 <col:4, col:41> Text=" fatal_apis Fatal error APIs"
| | |-ParagraphComment 0x55dc7dcbd300 <line:19:3>
| | | `-TextComment 0x55dc7dcbd2d0 <col:3> Text=" "
| | |-VerbatimLineComment 0x55dc7dcbd320 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x55dc7dcbd3e0 <line:20:3, col:5>
| |   |-TextComment 0x55dc7dcbd360 <col:3> Text=" "
| |   |-TextComment 0x55dc7dcbd380 <col:4> Text="@"
| |   `-TextComment 0x55dc7dcbd3a0 <col:5> Text="{"
| |-EnumConstantDecl 0x55dc7dbf1508 <line:25:2> col:2 K_ERR_CPU_EXCEPTION 'int'
| | `-FullComment 0x55dc7dcbd500 <line:24:5, col:55>
| |   `-ParagraphComment 0x55dc7dcbd4d0 <col:5, col:55>
| |     `-TextComment 0x55dc7dcbd4a0 <col:5, col:55> Text=" Generic CPU exception, not covered by other codes "
| |-EnumConstantDecl 0x55dc7dbf1578 <line:28:2> col:2 K_ERR_SPURIOUS_IRQ 'int'
| | `-FullComment 0x55dc7dcbd5d0 <line:27:5, col:34>
| |   `-ParagraphComment 0x55dc7dcbd5a0 <col:5, col:34>
| |     `-TextComment 0x55dc7dcbd570 <col:5, col:34> Text=" Unhandled hardware interrupt "
| |-EnumConstantDecl 0x55dc7dbf15e8 <line:31:2> col:2 K_ERR_STACK_CHK_FAIL 'int'
| | `-FullComment 0x55dc7dcbd6a0 <line:30:5, col:50>
| |   `-ParagraphComment 0x55dc7dcbd670 <col:5, col:50>
| |     `-TextComment 0x55dc7dcbd640 <col:5, col:50> Text=" Faulting context overflowed its stack buffer "
| |-EnumConstantDecl 0x55dc7dbf1658 <line:34:2> col:2 K_ERR_KERNEL_OOPS 'int'
| | `-FullComment 0x55dc7dcbd770 <line:33:5, col:38>
| |   `-ParagraphComment 0x55dc7dcbd740 <col:5, col:38>
| |     `-TextComment 0x55dc7dcbd710 <col:5, col:38> Text=" Moderate severity software error "
| `-EnumConstantDecl 0x55dc7dbf16c8 <line:37:2> col:2 K_ERR_KERNEL_PANIC 'int'
|   `-FullComment 0x55dc7dcbd840 <line:36:5, col:34>
|     `-ParagraphComment 0x55dc7dcbd810 <col:5, col:34>
|       `-TextComment 0x55dc7dcbd7e0 <col:5, col:34> Text=" High severity software error "
|-FunctionDecl 0x55dc7dbf1810 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:86:26, /vagrant/ext/zephyros/zephyr/include/fatal.h:52:52> col:20 k_fatal_halt 'void (unsigned int) __attribute__((noreturn))'
| |-ParmVarDecl 0x55dc7dbf1750 <col:33, col:46> col:46 reason 'unsigned int'
| `-FullComment 0x55dc7dcbdb20 <line:45:3, line:50:44>
|   |-ParagraphComment 0x55dc7dcbd8e0 <line:45:3>
|   | `-TextComment 0x55dc7dcbd8b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcbd900 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55dc7dcbd960 <col:10, col:42>
|   |   `-TextComment 0x55dc7dcbd930 <col:10, col:42> Text=" Halt the system on a fatal error"
|   |-ParagraphComment 0x55dc7dcbd9d0 <line:47:3, line:48:76>
|   | |-TextComment 0x55dc7dcbd980 <line:47:3, col:72> Text=" Invokes architecture-specific code to power off or halt the system in"
|   | `-TextComment 0x55dc7dcbd9a0 <line:48:3, col:76> Text=" a low power state. Lacking that, lock interrupts and sit in an idle loop."
|   |-ParagraphComment 0x55dc7dcbda20 <line:50:3>
|   | `-TextComment 0x55dc7dcbd9f0 <col:3> Text=" "
|   `-ParamCommandComment 0x55dc7dcbda40 <col:4, col:44> [in] implicitly Param="reason" ParamIndex=0
|     `-ParagraphComment 0x55dc7dcbdad0 <col:17, col:44>
|       `-TextComment 0x55dc7dcbdaa0 <col:17, col:44> Text=" Fatal exception reason code"
|-FunctionDecl 0x55dc7dbf1a50 <line:83:1, col:76> col:6 invalid k_sys_fatal_error_handler 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x55dc7dbf1900 <col:32, col:45> col:45 reason 'unsigned int'
| |-ParmVarDecl 0x55dc7dbf1978 <col:53, col:73> col:73 invalid esf 'const int *'
| `-FullComment 0x55dc7dcbe200 <line:55:3, line:81:71>
|   |-ParagraphComment 0x55dc7dcbdbc0 <line:55:3>
|   | `-TextComment 0x55dc7dcbdb90 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcbdbe0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55dc7dcbdc40 <col:10, col:36>
|   |   `-TextComment 0x55dc7dcbdc10 <col:10, col:36> Text=" Fatal error policy handler"
|   |-ParagraphComment 0x55dc7dcbdcb0 <line:57:3, line:58:67>
|   | |-TextComment 0x55dc7dcbdc60 <line:57:3, col:73> Text=" This function is not invoked by application code, but is declared as a"
|   | `-TextComment 0x55dc7dcbdc80 <line:58:3, col:67> Text=" weak symbol so that applications may introduce their own policy."
|   |-ParagraphComment 0x55dc7dcbdd50 <line:60:3, line:62:71>
|   | |-TextComment 0x55dc7dcbdcd0 <line:60:3, col:63> Text=" The default implementation of this function halts the system"
|   | |-TextComment 0x55dc7dcbdcf0 <line:61:3, col:66> Text=" unconditionally. Depending on architecture support, this may be"
|   | `-TextComment 0x55dc7dcbdd10 <line:62:3, col:71> Text=" a simple infinite loop, power off the hardware, or exit an emulator."
|   |-ParagraphComment 0x55dc7dcbddc0 <line:64:3, line:65:11>
|   | |-TextComment 0x55dc7dcbdd70 <line:64:3, col:72> Text=" If this function returns, then the currently executing thread will be"
|   | `-TextComment 0x55dc7dcbdd90 <line:65:3, col:11> Text=" aborted."
|   |-ParagraphComment 0x55dc7dcbde10 <line:67:3, col:42>
|   | `-TextComment 0x55dc7dcbdde0 <col:3, col:42> Text=" A few notes for custom implementations:"
|   |-ParagraphComment 0x55dc7dcbdfa0 <line:69:3, line:77:23>
|   | |-TextComment 0x55dc7dcbde30 <line:69:3, col:74> Text=" - If the error is determined to be unrecoverable, LOG_PANIC() should be"
|   | |-TextComment 0x55dc7dcbde50 <line:70:3, col:50> Text="   invoked to flush any pending logging buffers."
|   | |-TextComment 0x55dc7dcbde70 <line:71:3, col:76> Text=" - K_ERR_KERNEL_PANIC indicates a severe unrecoverable error in the kernel"
|   | |-TextComment 0x55dc7dcbde90 <line:72:3, col:76> Text="   itself, and should not be considered recoverable. There is an assertion"
|   | |-TextComment 0x55dc7dcbdeb0 <line:73:3, col:40> Text="   in z_fatal_error() to enforce this."
|   | |-TextComment 0x55dc7dcbded0 <line:74:3, col:76> Text=" - Even outside of a kernel panic, unless the fault occurred in user mode,"
|   | |-TextComment 0x55dc7dcbdef0 <line:75:3, col:73> Text="   the kernel itself may be in an inconsistent state, with API calls to"
|   | |-TextComment 0x55dc7dcbdf10 <line:76:3, col:72> Text="   kernel objects possibly exhibiting undefined behavior or triggering"
|   | `-TextComment 0x55dc7dcbdf30 <line:77:3, col:23> Text="   another exception."
|   |-ParagraphComment 0x55dc7dcbdff0 <line:79:3>
|   | `-TextComment 0x55dc7dcbdfc0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcbe010 <col:4, line:80:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcbe0c0 <line:79:17, line:80:3>
|   |   |-TextComment 0x55dc7dcbe070 <line:79:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x55dc7dcbe090 <line:80:3> Text=" "
|   `-ParamCommandComment 0x55dc7dcbe0e0 <col:4, line:81:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x55dc7dcbe190 <line:80:14, line:81:71>
|       |-TextComment 0x55dc7dcbe140 <line:80:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x55dc7dcbe160 <line:81:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x55dc7dbf1c48 <line:99:1, col:64> col:6 invalid z_fatal_error 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x55dc7dbf1b40 <col:20, col:33> col:33 reason 'unsigned int'
| |-ParmVarDecl 0x55dc7dbf1bb8 <col:41, col:61> col:61 invalid esf 'const int *'
| `-FullComment 0x55dc7dcbe5f0 <line:86:3, line:97:71>
|   |-ParagraphComment 0x55dc7dcbe2a0 <line:86:3, col:50>
|   | `-TextComment 0x55dc7dcbe270 <col:3, col:50> Text=" Called by architecture code upon a fatal error."
|   |-ParagraphComment 0x55dc7dcbe340 <line:88:3, line:90:31>
|   | |-TextComment 0x55dc7dcbe2c0 <line:88:3, col:76> Text=" This function dumps out architecture-agnostic information about the error"
|   | |-TextComment 0x55dc7dcbe2e0 <line:89:3, col:61> Text=" and then makes a policy decision on what to do by invoking"
|   | `-TextComment 0x55dc7dcbe300 <line:90:3, col:31> Text=" k_sys_fatal_error_handler()."
|   |-ParagraphComment 0x55dc7dcbe3b0 <line:92:3, line:93:24>
|   | |-TextComment 0x55dc7dcbe360 <line:92:3, col:71> Text=" On architectures where k_thread_abort() never returns, this function"
|   | `-TextComment 0x55dc7dcbe380 <line:93:3, col:24> Text=" never returns either."
|   |-ParagraphComment 0x55dc7dcbe400 <line:95:3>
|   | `-TextComment 0x55dc7dcbe3d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcbe420 <col:4, line:96:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcbe4d0 <line:95:17, line:96:3>
|   |   |-TextComment 0x55dc7dcbe480 <line:95:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x55dc7dcbe4a0 <line:96:3> Text=" "
|   `-ParamCommandComment 0x55dc7dcbe4f0 <col:4, line:97:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x55dc7dcbe5a0 <line:96:14, line:97:71>
|       |-TextComment 0x55dc7dcbe550 <line:96:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x55dc7dcbe570 <line:97:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x55dc7dbf5580 </vagrant/ext/zephyros/zephyr/include/irq.h:66:1, line:73:1> line:67:1 irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbf5260 <col:21, col:34> col:34 used irq 'unsigned int'
| |-ParmVarDecl 0x55dc7dbf52d8 <col:39, col:52> col:52 used priority 'unsigned int'
| |-ParmVarDecl 0x55dc7dbf53e8 <line:68:7, col:38> col:14 used routine 'void (*)(void *)'
| |-ParmVarDecl 0x55dc7dbf5460 <col:41, col:47> col:47 used parameter 'void *'
| |-ParmVarDecl 0x55dc7dbf54d0 <line:69:7, col:13> col:13 used flags 'u32_t':'unsigned int'
| |-CompoundStmt 0x55dc7dbf5ac8 <line:70:1, line:73:1>
| | `-ReturnStmt 0x55dc7dbf5878 <line:71:2, line:72:11>
| |   `-CallExpr 0x55dc7dbf57b0 <line:71:9, line:72:11> 'int'
| |     |-ImplicitCastExpr 0x55dc7dbf5798 <line:71:9> 'int (*)(unsigned int, unsigned int, void (*)(void *), void *, u32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dbf5648 <col:9> 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' Function 0x55dc7dbc8e78 'arch_irq_connect_dynamic' 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |     |-ImplicitCastExpr 0x55dc7dbf5800 <col:34> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dbf5670 <col:34> 'unsigned int' lvalue ParmVar 0x55dc7dbf5260 'irq' 'unsigned int'
| |     |-ImplicitCastExpr 0x55dc7dbf5818 <col:39> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dbf5698 <col:39> 'unsigned int' lvalue ParmVar 0x55dc7dbf52d8 'priority' 'unsigned int'
| |     |-ImplicitCastExpr 0x55dc7dbf5830 <col:49> 'void (*)(void *)' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dbf56c0 <col:49> 'void (*)(void *)' lvalue ParmVar 0x55dc7dbf53e8 'routine' 'void (*)(void *)'
| |     |-ImplicitCastExpr 0x55dc7dbf5848 <col:58> 'void *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dbf56e8 <col:58> 'void *' lvalue ParmVar 0x55dc7dbf5460 'parameter' 'void *'
| |     `-ImplicitCastExpr 0x55dc7dbf5860 <line:72:6> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-DeclRefExpr 0x55dc7dbf5710 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dbf54d0 'flags' 'u32_t':'unsigned int'
| `-FullComment 0x55dc7dbdb3c0 <line:54:3, line:64:48>
|   |-ParagraphComment 0x55dc7dcbe690 <line:54:3, col:33>
|   | `-TextComment 0x55dc7dcbe660 <col:3, col:33> Text=" Configure a dynamic interrupt."
|   |-ParagraphComment 0x55dc7dcbe6e0 <line:56:3, col:80>
|   | `-TextComment 0x55dc7dcbe6b0 <col:3, col:80> Text=" Use this instead of IRQ_CONNECT() if arguments cannot be known at build time."
|   |-ParagraphComment 0x55dc7dcbe730 <line:58:3>
|   | `-TextComment 0x55dc7dcbe700 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcbe750 <col:4, line:59:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcbe800 <line:58:14, line:59:3>
|   |   |-TextComment 0x55dc7dcbe7b0 <line:58:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x55dc7dcbe7d0 <line:59:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcbe820 <col:4, line:60:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dbdb030 <line:59:19, line:60:3>
|   |   |-TextComment 0x55dc7dbdafe0 <line:59:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x55dc7dbdb000 <line:60:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdb050 <col:4, line:61:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dbdb100 <line:60:18, line:61:3>
|   |   |-TextComment 0x55dc7dbdb0b0 <line:60:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x55dc7dbdb0d0 <line:61:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdb120 <col:4, line:62:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dbdb1d0 <line:61:20, line:62:3>
|   |   |-TextComment 0x55dc7dbdb180 <line:61:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x55dc7dbdb1a0 <line:62:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdb1f0 <col:4, col:53> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x55dc7dbdb280 <col:16, col:53>
|   |   `-TextComment 0x55dc7dbdb250 <col:16, col:53> Text=" Arch-specific IRQ configuration flags"
|   |-ParagraphComment 0x55dc7dbdb2d0 <line:64:3>
|   | `-TextComment 0x55dc7dbdb2a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dbdb2f0 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x55dc7dbdb350 <col:11, col:48>
|       `-TextComment 0x55dc7dbdb320 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x55dc7dbf5ba8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/sys/errno_private.h:28:28> col:16 z_errno 'int *(void)' static inline
| `-FullComment 0x55dc7dbdb5e0 <line:21:3, line:26:59>
|   |-ParagraphComment 0x55dc7dbdb460 <line:21:3, col:57>
|   | `-TextComment 0x55dc7dbdb430 <col:3, col:57> Text=" return a pointer to a memory location containing errno"
|   |-ParagraphComment 0x55dc7dbdb4d0 <line:23:3, line:24:52>
|   | |-TextComment 0x55dc7dbdb480 <line:23:3, col:69> Text=" errno is thread-specific, and can't just be a global. This pointer"
|   | `-TextComment 0x55dc7dbdb4a0 <line:24:3, col:52> Text=" is guaranteed to be read/writable from user mode."
|   |-ParagraphComment 0x55dc7dbdb520 <line:26:3>
|   | `-TextComment 0x55dc7dbdb4f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dbdb540 <col:4, col:59> Name="return"
|     `-ParagraphComment 0x55dc7dbdb5a0 <col:11, col:59>
|       `-TextComment 0x55dc7dbdb570 <col:11, col:59> Text=" Memory location of errno data for current thread"
|-FunctionDecl 0x55dc7dbf5ca0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:24:1, col:29> col:14 used z_impl_z_errno 'int *()' extern
|-FunctionDecl 0x55dc7dbf5d68 prev 0x55dc7dbf5ba8 <line:25:1, line:34:1> line:25:21 z_errno 'int *(void)' static inline
| `-CompoundStmt 0x55dc7dbf6058 <line:26:1, line:34:1>
|   |-DoStmt 0x55dc7dbf5f60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dbf5f28 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dbf5ed8 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dbf5f40 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dbf6018 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:33:2, col:24>
|     `-CallExpr 0x55dc7dbf5ff0 <col:9, col:24> 'int *'
|       `-ImplicitCastExpr 0x55dc7dbf5fd8 <col:9> 'int *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55dc7dbf5f80 <col:9> 'int *()' Function 0x55dc7dbf5ca0 'z_impl_z_errno' 'int *()'
|-RecordDecl 0x55dc7dbf6078 </vagrant/ext/zephyros/zephyr/include/kernel.h:91:9, line:93:1> line:91:9 struct definition
| `-FieldDecl 0x55dc7dbf6130 <line:92:2, col:14> col:14 waitq 'sys_dlist_t':'struct _dnode'
|-TypedefDecl 0x55dc7dc00b50 <line:91:1, line:93:3> col:3 referenced _wait_q_t 'struct _wait_q_t':'_wait_q_t'
| `-ElaboratedType 0x55dc7dbf6180 'struct _wait_q_t' sugar
|   `-RecordType 0x55dc7dbf6100 '_wait_q_t'
|     `-Record 0x55dc7dbf6078 ''
|-RecordDecl 0x55dc7dc00bc0 prev 0x55dc7dbc4298 <line:120:1, col:8> col:8 struct k_thread
|-RecordDecl 0x55dc7dc00c48 <line:121:1, col:8> col:8 struct k_mutex
|-RecordDecl 0x55dc7dc00cf0 <line:122:1, col:8> col:8 struct k_sem
|-RecordDecl 0x55dc7dc00da0 <line:123:1, col:8> col:8 struct k_msgq
|-RecordDecl 0x55dc7dc00e50 <line:124:1, col:8> col:8 struct k_mbox
|-RecordDecl 0x55dc7dc00f00 <line:125:1, col:8> col:8 struct k_pipe
|-RecordDecl 0x55dc7dc00fb0 <line:126:1, col:8> col:8 struct k_queue
|-RecordDecl 0x55dc7dc01060 <line:127:1, col:8> col:8 struct k_fifo
|-RecordDecl 0x55dc7dc01110 <line:128:1, col:8> col:8 struct k_lifo
|-RecordDecl 0x55dc7dc011c0 <line:129:1, col:8> col:8 struct k_stack
|-RecordDecl 0x55dc7dc01270 <line:130:1, col:8> col:8 struct k_mem_slab
|-RecordDecl 0x55dc7dc01320 <line:131:1, col:8> col:8 struct k_mem_pool
|-RecordDecl 0x55dc7dc013d0 <line:132:1, col:8> col:8 struct k_timer
|-RecordDecl 0x55dc7dc01480 <line:133:1, col:8> col:8 struct k_poll_event
|-RecordDecl 0x55dc7dc01530 <line:134:1, col:8> col:8 struct k_poll_signal
|-RecordDecl 0x55dc7dc015e0 prev 0x55dc7dbc4320 <line:135:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x55dc7dc01668 <line:136:1, col:8> col:8 struct k_mem_partition
|-RecordDecl 0x55dc7dc01710 <line:137:1, col:8> col:8 struct k_futex
|-EnumDecl 0x55dc7dc017e8 <line:146:1, line:160:1> line:146:6 k_objects
| |-FullComment 0x55dc7dbdb7e0 <line:140:3, line:144:33>
| | |-ParagraphComment 0x55dc7dbdb680 <line:140:3>
| | | `-TextComment 0x55dc7dbdb650 <col:3> Text=" "
| | |-BlockCommandComment 0x55dc7dbdb6a0 <col:4, col:29> Name="brief"
| | | `-ParagraphComment 0x55dc7dbdb700 <col:10, col:29>
| | |   `-TextComment 0x55dc7dbdb6d0 <col:10, col:29> Text=" Kernel Object Types"
| | `-ParagraphComment 0x55dc7dbdb7a0 <line:142:3, line:144:33>
| |   |-TextComment 0x55dc7dbdb720 <line:142:3, col:77> Text=" This enumeration needs to be kept in sync with the lists of kernel objects"
| |   |-TextComment 0x55dc7dbdb740 <line:143:3, col:79> Text=" and subsystems in scripts/gen_kobject_list.py, as well as the otype_to_str()"
| |   `-TextComment 0x55dc7dbdb760 <line:144:3, col:33> Text=" function in kernel/userspace.c"
| |-EnumConstantDecl 0x55dc7dc018a0 <line:147:2> col:2 K_OBJ_ANY 'int'
| |-EnumConstantDecl 0x55dc7dc01918 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/kobj-types-enum.h:2:1> col:1 K_OBJ_MEM_SLAB 'int'
| |-EnumConstantDecl 0x55dc7dc01960 <line:3:1> col:1 K_OBJ_MSGQ 'int'
| |-EnumConstantDecl 0x55dc7dc019a8 <line:4:1> col:1 K_OBJ_MUTEX 'int'
| |-EnumConstantDecl 0x55dc7dc019f0 <line:5:1> col:1 K_OBJ_PIPE 'int'
| |-EnumConstantDecl 0x55dc7dc01a38 <line:6:1> col:1 K_OBJ_QUEUE 'int'
| |-EnumConstantDecl 0x55dc7dc01a80 <line:7:1> col:1 K_OBJ_POLL_SIGNAL 'int'
| |-EnumConstantDecl 0x55dc7dc01ac8 <line:8:1> col:1 K_OBJ_SEM 'int'
| |-EnumConstantDecl 0x55dc7dc03dd0 <line:9:1> col:1 K_OBJ_STACK 'int'
| |-EnumConstantDecl 0x55dc7dc03e18 <line:10:1> col:1 K_OBJ_THREAD 'int'
| |-EnumConstantDecl 0x55dc7dc03e60 <line:11:1> col:1 K_OBJ_TIMER 'int'
| |-EnumConstantDecl 0x55dc7dc03ea8 <line:12:1> col:1 K_OBJ__THREAD_STACK_ELEMENT 'int'
| |-EnumConstantDecl 0x55dc7dc03ef0 <line:13:1> col:1 K_OBJ_SYS_MUTEX 'int'
| |-EnumConstantDecl 0x55dc7dc03f38 <line:14:1> col:1 K_OBJ_FUTEX 'int'
| |-EnumConstantDecl 0x55dc7dc03f80 <line:16:1> col:1 K_OBJ_DRIVER_ADC 'int'
| |-EnumConstantDecl 0x55dc7dc03fc8 <line:17:1> col:1 K_OBJ_DRIVER_AIO_CMP 'int'
| |-EnumConstantDecl 0x55dc7dc04010 <line:18:1> col:1 K_OBJ_DRIVER_COUNTER 'int'
| |-EnumConstantDecl 0x55dc7dc04058 <line:19:1> col:1 K_OBJ_DRIVER_CRYPTO 'int'
| |-EnumConstantDecl 0x55dc7dc040a0 <line:20:1> col:1 K_OBJ_DRIVER_DMA 'int'
| |-EnumConstantDecl 0x55dc7dc040e8 <line:21:1> col:1 K_OBJ_DRIVER_FLASH 'int'
| |-EnumConstantDecl 0x55dc7dc04130 <line:22:1> col:1 K_OBJ_DRIVER_GPIO 'int'
| |-EnumConstantDecl 0x55dc7dc04178 <line:23:1> col:1 K_OBJ_DRIVER_I2C 'int'
| |-EnumConstantDecl 0x55dc7dc041c0 <line:24:1> col:1 K_OBJ_DRIVER_I2S 'int'
| |-EnumConstantDecl 0x55dc7dc04208 <line:25:1> col:1 K_OBJ_DRIVER_IPM 'int'
| |-EnumConstantDecl 0x55dc7dc04250 <line:26:1> col:1 K_OBJ_DRIVER_LED 'int'
| |-EnumConstantDecl 0x55dc7dc04298 <line:27:1> col:1 K_OBJ_DRIVER_PINMUX 'int'
| |-EnumConstantDecl 0x55dc7dc042e0 <line:28:1> col:1 K_OBJ_DRIVER_PWM 'int'
| |-EnumConstantDecl 0x55dc7dc04328 <line:29:1> col:1 K_OBJ_DRIVER_ENTROPY 'int'
| |-EnumConstantDecl 0x55dc7dc04370 <line:30:1> col:1 K_OBJ_DRIVER_SENSOR 'int'
| |-EnumConstantDecl 0x55dc7dc043b8 <line:31:1> col:1 K_OBJ_DRIVER_SPI 'int'
| |-EnumConstantDecl 0x55dc7dc04400 <line:32:1> col:1 K_OBJ_DRIVER_UART 'int'
| |-EnumConstantDecl 0x55dc7dc04448 <line:33:1> col:1 K_OBJ_DRIVER_CAN 'int'
| |-EnumConstantDecl 0x55dc7dc04490 <line:34:1> col:1 K_OBJ_DRIVER_PTP_CLOCK 'int'
| |-EnumConstantDecl 0x55dc7dc044d8 <line:35:1> col:1 K_OBJ_DRIVER_EEPROM 'int'
| |-EnumConstantDecl 0x55dc7dc04520 <line:36:1> col:1 K_OBJ_DRIVER_WDT 'int'
| |-EnumConstantDecl 0x55dc7dc04568 <line:37:1> col:1 K_OBJ_DRIVER_SAMPLE 'int'
| `-EnumConstantDecl 0x55dc7dc045d8 </vagrant/ext/zephyros/zephyr/include/kernel.h:159:2> col:2 K_OBJ_LAST 'int'
|   `-FullComment 0x55dc7dbdb900 <line:156:5, col:13>
|     `-ParagraphComment 0x55dc7dbdb8d0 <col:5, col:13>
|       |-TextComment 0x55dc7dbdb850 <col:5> Text=" "
|       `-InlineCommandComment 0x55dc7dbdb8a0 <col:6, col:13> Name="endcond" RenderNormal
|-FunctionDecl 0x55dc7dc04718 <line:229:1, line:232:1> line:229:20 z_object_init 'void (void *)' static inline
| |-ParmVarDecl 0x55dc7dc04690 <col:34, col:40> col:40 used obj 'void *'
| |-CompoundStmt 0x55dc7dc048b8 <line:230:1, line:232:1>
| | `-CStyleCastExpr 0x55dc7dc04860 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55dc7dc04848 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x55dc7dc04828 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x55dc7dc047c0 </vagrant/ext/zephyros/zephyr/include/kernel.h:231:13> 'void *' lvalue ParmVar 0x55dc7dc04690 'obj' 'void *'
| `-FullComment 0x55dc7dbdba20 <line:227:3, col:12>
|   `-ParagraphComment 0x55dc7dbdb9f0 <col:3, col:12>
|     |-TextComment 0x55dc7dbdb970 <col:3> Text=" "
|     `-InlineCommandComment 0x55dc7dbdb9c0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55dc7dc04a80 <line:237:1, line:242:1> line:237:20 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x55dc7dc048e8 <col:49, col:55> col:55 used object 'void *'
| |-ParmVarDecl 0x55dc7dc04970 <line:238:13, col:30> col:30 used thread 'struct k_thread *'
| |-CompoundStmt 0x55dc7dc04ce8 <line:239:1, line:242:1>
| | |-CStyleCastExpr 0x55dc7dc04bd0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55dc7dc04bb8 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x55dc7dc04b98 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x55dc7dc04b30 </vagrant/ext/zephyros/zephyr/include/kernel.h:240:13> 'void *' lvalue ParmVar 0x55dc7dc048e8 'object' 'void *'
| | `-CStyleCastExpr 0x55dc7dc04c98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55dc7dc04c80 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x55dc7dc04c60 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x55dc7dc04bf8 </vagrant/ext/zephyros/zephyr/include/kernel.h:241:13> 'struct k_thread *' lvalue ParmVar 0x55dc7dc04970 'thread' 'struct k_thread *'
| `-FullComment 0x55dc7dbdbb10 <line:235:3, col:12>
|   `-ParagraphComment 0x55dc7dbdbae0 <col:3, col:12>
|     |-TextComment 0x55dc7dbdba90 <col:3> Text=" "
|     `-InlineCommandComment 0x55dc7dbdbab0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55dc7dc06380 <line:247:1, line:252:1> line:247:20 k_object_access_revoke 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x55dc7dc04d20 <col:43, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x55dc7dc062f0 <line:248:8, col:25> col:25 used thread 'struct k_thread *'
| |-CompoundStmt 0x55dc7dc065e8 <line:249:1, line:252:1>
| | |-CStyleCastExpr 0x55dc7dc064d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55dc7dc064b8 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x55dc7dc06498 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x55dc7dc06430 </vagrant/ext/zephyros/zephyr/include/kernel.h:250:13> 'void *' lvalue ParmVar 0x55dc7dc04d20 'object' 'void *'
| | `-CStyleCastExpr 0x55dc7dc06598 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55dc7dc06580 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x55dc7dc06560 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x55dc7dc064f8 </vagrant/ext/zephyros/zephyr/include/kernel.h:251:13> 'struct k_thread *' lvalue ParmVar 0x55dc7dc062f0 'thread' 'struct k_thread *'
| `-FullComment 0x55dc7dbdbc00 <line:245:3, col:12>
|   `-ParagraphComment 0x55dc7dbdbbd0 <col:3, col:12>
|     |-TextComment 0x55dc7dbdbb80 <col:3> Text=" "
|     `-InlineCommandComment 0x55dc7dbdbba0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55dc7dc066a8 <line:257:1, line:260:1> line:257:20 used z_impl_k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x55dc7dc06620 <col:44, col:50> col:50 used object 'void *'
| |-CompoundStmt 0x55dc7dc06818 <line:258:1, line:260:1>
| | `-CStyleCastExpr 0x55dc7dc067f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55dc7dc067d8 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x55dc7dc067b8 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x55dc7dc06750 </vagrant/ext/zephyros/zephyr/include/kernel.h:259:13> 'void *' lvalue ParmVar 0x55dc7dc06620 'object' 'void *'
| `-FullComment 0x55dc7dbdbcf0 <line:255:3, col:12>
|   `-ParagraphComment 0x55dc7dbdbcc0 <col:3, col:12>
|     |-TextComment 0x55dc7dbdbc70 <col:3> Text=" "
|     `-InlineCommandComment 0x55dc7dbdbc90 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55dc7dc068d0 <line:262:1, line:265:1> line:262:20 k_object_access_all_grant 'void (void *)' static inline
| |-ParmVarDecl 0x55dc7dc06848 <col:46, col:52> col:52 used object 'void *'
| `-CompoundStmt 0x55dc7dc06a68 <line:263:1, line:265:1>
|   `-CStyleCastExpr 0x55dc7dc06a18 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|     `-ImplicitCastExpr 0x55dc7dc06a00 <col:29, col:31> 'void *' <LValueToRValue>
|       `-ParenExpr 0x55dc7dc069e0 <col:29, col:31> 'void *' lvalue
|         `-DeclRefExpr 0x55dc7dc06978 </vagrant/ext/zephyros/zephyr/include/kernel.h:264:13> 'void *' lvalue ParmVar 0x55dc7dc06848 'object' 'void *'
|-FunctionDecl 0x55dc7dc06bb0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:279:75> col:16 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x55dc7dc06a98 <col:38, col:44> col:44 object 'void *'
| |-ParmVarDecl 0x55dc7dc06b20 <col:52, col:69> col:69 thread 'struct k_thread *'
| `-FullComment 0x55dc7dbdc050 <line:270:3, line:277:53>
|   |-ParagraphComment 0x55dc7dbdbd90 <line:270:3, col:43>
|   | `-TextComment 0x55dc7dbdbd60 <col:3, col:43> Text=" Grant a thread access to a kernel object"
|   |-ParagraphComment 0x55dc7dbdbe30 <line:272:3, line:274:67>
|   | |-TextComment 0x55dc7dbdbdb0 <line:272:3, col:72> Text=" The thread will be granted access to the object if the caller is from"
|   | |-TextComment 0x55dc7dbdbdd0 <line:273:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x55dc7dbdbdf0 <line:274:3, col:67> Text=" on both the object and the thread whose access is being granted."
|   |-ParagraphComment 0x55dc7dbdbe80 <line:276:3>
|   | `-TextComment 0x55dc7dbdbe50 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdbea0 <col:4, line:277:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbdbf50 <line:276:17, line:277:3>
|   |   |-TextComment 0x55dc7dbdbf00 <line:276:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x55dc7dbdbf20 <line:277:3> Text=" "
|   `-ParamCommandComment 0x55dc7dbdbf70 <col:4, col:53> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x55dc7dbdc000 <col:17, col:53>
|       `-TextComment 0x55dc7dbdbfd0 <col:17, col:53> Text=" Thread to grant access to the object"
|-FunctionDecl 0x55dc7dc06db8 prev 0x55dc7dc06380 <line:291:1, col:66> col:6 k_object_access_revoke 'void (void *, struct k_thread *)'
| |-ParmVarDecl 0x55dc7dc06ca0 <col:29, col:35> col:35 object 'void *'
| |-ParmVarDecl 0x55dc7dc06d28 <col:43, col:60> col:60 thread 'struct k_thread *'
| `-FullComment 0x55dc7dbdc3b0 <line:282:3, line:289:54>
|   |-ParagraphComment 0x55dc7dbdc0f0 <line:282:3, col:46>
|   | `-TextComment 0x55dc7dbdc0c0 <col:3, col:46> Text=" Revoke a thread's access to a kernel object"
|   |-ParagraphComment 0x55dc7dbdc190 <line:284:3, line:286:67>
|   | |-TextComment 0x55dc7dbdc110 <line:284:3, col:66> Text=" The thread will lose access to the object if the caller is from"
|   | |-TextComment 0x55dc7dbdc130 <line:285:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x55dc7dbdc150 <line:286:3, col:67> Text=" on both the object and the thread whose access is being revoked."
|   |-ParagraphComment 0x55dc7dbdc1e0 <line:288:3>
|   | `-TextComment 0x55dc7dbdc1b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdc200 <col:4, line:289:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbdc2b0 <line:288:17, line:289:3>
|   |   |-TextComment 0x55dc7dbdc260 <line:288:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x55dc7dbdc280 <line:289:3> Text=" "
|   `-ParamCommandComment 0x55dc7dbdc2d0 <col:4, col:54> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x55dc7dbdc360 <col:17, col:54>
|       `-TextComment 0x55dc7dbdc330 <col:17, col:54> Text=" Thread to remove access to the object"
|-FunctionDecl 0x55dc7dc06f38 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:302:45> col:16 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x55dc7dc06eb0 <col:33, col:39> col:39 object 'void *'
| `-FullComment 0x55dc7dbdc6e0 <line:294:3, line:301:1>
|   |-ParagraphComment 0x55dc7dbdc450 <line:294:3>
|   | `-TextComment 0x55dc7dbdc420 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dbdc470 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55dc7dbdc4d0 <col:10, col:27>
|   |   `-TextComment 0x55dc7dbdc4a0 <col:10, col:27> Text=" Release an object"
|   |-ParagraphComment 0x55dc7dbdc540 <line:296:3, line:297:72>
|   | |-TextComment 0x55dc7dbdc4f0 <line:296:3, col:64> Text=" Allows user threads to drop their own permission on an object"
|   | `-TextComment 0x55dc7dbdc510 <line:297:3, col:72> Text=" Their permissions are automatically cleared when a thread terminates."
|   |-ParagraphComment 0x55dc7dbdc590 <line:299:3>
|   | `-TextComment 0x55dc7dbdc560 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdc5b0 <col:4, col:42> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbdc640 <col:17, col:42>
|   |   `-TextComment 0x55dc7dbdc610 <col:17, col:42> Text=" The object to be released"
|   `-ParagraphComment 0x55dc7dbdc690 <line:301:1>
|     `-TextComment 0x55dc7dbdc660 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc070a8 prev 0x55dc7dc068d0 <line:321:1, col:44> col:6 k_object_access_all_grant 'void (void *)'
| |-ParmVarDecl 0x55dc7dc07020 <col:32, col:38> col:38 object 'void *'
| `-FullComment 0x55dc7dbdcaa0 <line:305:3, line:319:41>
|   |-ParagraphComment 0x55dc7dbdc780 <line:305:3, col:59>
|   | `-TextComment 0x55dc7dbdc750 <col:3, col:59> Text=" Grant all present and future threads access to an object"
|   |-ParagraphComment 0x55dc7dbdc840 <line:307:3, line:310:59>
|   | |-TextComment 0x55dc7dbdc7a0 <line:307:3, col:77> Text=" If the caller is from supervisor mode, or the caller is from user mode and"
|   | |-TextComment 0x55dc7dbdc7c0 <line:308:3, col:72> Text=" have sufficient permissions on the object, then that object will have"
|   | |-TextComment 0x55dc7dbdc7e0 <line:309:3, col:76> Text=" permissions granted to it for *all* current and future threads running in"
|   | `-TextComment 0x55dc7dbdc800 <line:310:3, col:59> Text=" the system, effectively becoming a public kernel object."
|   |-ParagraphComment 0x55dc7dbdc8e0 <line:312:3, line:314:43>
|   | |-TextComment 0x55dc7dbdc860 <line:312:3, col:79> Text=" Use of this API should be avoided on systems that are running untrusted code"
|   | |-TextComment 0x55dc7dbdc880 <line:313:3, col:76> Text=" as it is possible for such code to derive the addresses of kernel objects"
|   | `-TextComment 0x55dc7dbdc8a0 <line:314:3, col:43> Text=" and perform unwanted operations on them."
|   |-ParagraphComment 0x55dc7dbdc950 <line:316:3, line:317:25>
|   | |-TextComment 0x55dc7dbdc900 <line:316:3, col:75> Text=" It is not possible to revoke permissions on public objects; once public,"
|   | `-TextComment 0x55dc7dbdc920 <line:317:3, col:25> Text=" any thread may use it."
|   |-ParagraphComment 0x55dc7dbdc9a0 <line:319:3>
|   | `-TextComment 0x55dc7dbdc970 <col:3> Text=" "
|   `-ParamCommandComment 0x55dc7dbdc9c0 <col:4, col:41> [in] implicitly Param="object" ParamIndex=0
|     `-ParagraphComment 0x55dc7dbdca50 <col:17, col:41>
|       `-TextComment 0x55dc7dbdca20 <col:17, col:41> Text=" Address of kernel object"
|-FunctionDecl 0x55dc7dc07300 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:337:52> col:17 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x55dc7dc071d0 <col:32, col:47> col:47 otype 'enum k_objects':'enum k_objects'
| `-FullComment 0x55dc7dbdce60 <line:324:3, line:335:12>
|   |-ParagraphComment 0x55dc7dbdcb40 <line:324:3, col:48>
|   | `-TextComment 0x55dc7dbdcb10 <col:3, col:48> Text=" Allocate a kernel object of a designated type"
|   |-ParagraphComment 0x55dc7dbdcc00 <line:326:3, line:329:78>
|   | |-TextComment 0x55dc7dbdcb60 <line:326:3, col:74> Text=" This will instantiate at runtime a kernel object of the specified type,"
|   | |-TextComment 0x55dc7dbdcb80 <line:327:3, col:77> Text=" returning a pointer to it. The object will be returned in an uninitialized"
|   | |-TextComment 0x55dc7dbdcba0 <line:328:3, col:76> Text=" state, with the calling thread being granted permission on it. The memory"
|   | `-TextComment 0x55dc7dbdcbc0 <line:329:3, col:78> Text=" for the object will be allocated out of the calling thread's resource pool."
|   |-ParagraphComment 0x55dc7dbdcc50 <line:331:3, col:59>
|   | `-TextComment 0x55dc7dbdcc20 <col:3, col:59> Text=" Currently, allocation of thread stacks is not supported."
|   |-ParagraphComment 0x55dc7dbdcca0 <line:333:3>
|   | `-TextComment 0x55dc7dbdcc70 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dbdccc0 <col:4, line:334:3> [in] implicitly Param="otype" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dbdcd70 <line:333:16, line:334:3>
|   |   |-TextComment 0x55dc7dbdcd20 <line:333:16, col:44> Text=" Requested kernel object type"
|   |   `-TextComment 0x55dc7dbdcd40 <line:334:3> Text=" "
|   `-BlockCommandComment 0x55dc7dbdcd90 <col:4, line:335:12> Name="return"
|     `-ParagraphComment 0x55dc7dbdce10 <line:334:11, line:335:12>
|       |-TextComment 0x55dc7dbdcdc0 <line:334:11, col:77> Text=" A pointer to the allocated kernel object, or NULL if memory wasn't"
|       `-TextComment 0x55dc7dbdcde0 <line:335:3, col:12> Text=" available"
|-FunctionDecl 0x55dc7dc07458 <line:352:1, line:357:1> line:352:21 used z_impl_k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x55dc7dc073c8 <col:43, col:58> col:58 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x55dc7dc07688 <line:353:1, line:357:1>
|   |-CStyleCastExpr 0x55dc7dc075a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|   | `-ImplicitCastExpr 0x55dc7dc07588 <col:29, col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|   |   `-ParenExpr 0x55dc7dc07568 <col:29, col:31> 'enum k_objects':'enum k_objects' lvalue
|   |     `-DeclRefExpr 0x55dc7dc07500 </vagrant/ext/zephyros/zephyr/include/kernel.h:354:13> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x55dc7dc073c8 'otype' 'enum k_objects':'enum k_objects'
|   `-ReturnStmt 0x55dc7dc07648 <line:356:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ParenExpr 0x55dc7dc07628 <col:14, col:24> 'void *'
|       `-CStyleCastExpr 0x55dc7dc07600 <col:15, col:23> 'void *' <NullToPointer>
|         `-IntegerLiteral 0x55dc7dc075c8 <col:23> 'int' 0
|-FunctionDecl 0x55dc7dc07748 </vagrant/ext/zephyros/zephyr/include/kernel.h:363:1, line:366:1> line:363:20 k_obj_free 'void (void *)' static inline
| |-ParmVarDecl 0x55dc7dc076c0 <col:31, col:37> col:37 used obj 'void *'
| |-CompoundStmt 0x55dc7dc078e8 <line:364:1, line:366:1>
| | `-CStyleCastExpr 0x55dc7dc07890 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55dc7dc07878 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x55dc7dc07858 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x55dc7dc077f0 </vagrant/ext/zephyros/zephyr/include/kernel.h:365:13> 'void *' lvalue ParmVar 0x55dc7dc076c0 'obj' 'void *'
| `-FullComment 0x55dc7dcc29a0 <line:359:3, line:362:1>
|   |-ParagraphComment 0x55dc7dbdcf00 <line:359:3>
|   | `-TextComment 0x55dc7dbdced0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dbdcf20 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x55dc7dbdcf80 <col:10, col:24>
|   |   `-TextComment 0x55dc7dbdcf50 <col:10, col:24> Text=" Free an object"
|   |-ParagraphComment 0x55dc7dcc28b0 <line:361:3>
|   | `-TextComment 0x55dc7dbdcfa0 <col:3> Text=" "
|   `-ParamCommandComment 0x55dc7dcc28d0 <col:4, line:362:1> [in] implicitly Param="obj" ParamIndex=0
|     `-ParagraphComment 0x55dc7dcc2960 <col:1>
|       `-TextComment 0x55dc7dcc2930 <col:1> Text=" "
|-RecordDecl 0x55dc7dc07900 prev 0x55dc7dbc43d0 <line:387:1, line:389:1> line:387:17 struct _k_thread_stack_element definition
| |-PackedAttr 0x55dc7dc07988 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:168:40>
| `-FieldDecl 0x55dc7dc079e0 </vagrant/ext/zephyros/zephyr/include/kernel.h:388:2, col:7> col:7 data 'char'
|-RecordDecl 0x55dc7dc07a88 <line:427:1, line:503:1> line:427:8 struct _thread_base definition
| |-RecordDecl 0x55dc7dc07b30 <line:430:2, line:433:2> line:430:2 union definition
| | |-FieldDecl 0x55dc7dc07bf0 <line:431:3, col:15> col:15 qnode_dlist 'sys_dnode_t':'struct _dnode'
| | `-FieldDecl 0x55dc7dc07c58 <line:432:3, col:17> col:17 qnode_rb 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x55dc7dc07cf0 <line:430:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| |-IndirectFieldDecl 0x55dc7dc07d48 <line:431:15> col:15 implicit qnode_dlist 'sys_dnode_t':'struct _dnode'
| | |-Field 0x55dc7dc07cf0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x55dc7dc07bf0 'qnode_dlist' 'sys_dnode_t':'struct _dnode'
| |-IndirectFieldDecl 0x55dc7dc07d98 <line:432:17> col:17 implicit qnode_rb 'struct rbnode':'struct rbnode'
| | |-Field 0x55dc7dc07cf0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x55dc7dc07c58 'qnode_rb' 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x55dc7dc07e68 <line:438:2, col:13> col:13 pended_on '_wait_q_t *'
| |-FieldDecl 0x55dc7dc07ec0 <line:441:2, col:7> col:7 user_options 'u8_t':'unsigned char'
| |-FieldDecl 0x55dc7dc07f18 <line:444:2, col:7> col:7 thread_state 'u8_t':'unsigned char'
| |-RecordDecl 0x55dc7dc07f60 <line:460:2, line:471:2> line:460:2 union definition
| | |-RecordDecl 0x55dc7dc08010 <line:461:3, line:469:3> line:461:3 struct definition
| | | |-FieldDecl 0x55dc7dc080d0 <line:466:4, col:9> col:9 prio 's8_t':'signed char'
| | | `-FieldDecl 0x55dc7dc08128 <line:467:4, col:9> col:9 sched_locked 'u8_t':'unsigned char'
| | |-FieldDecl 0x55dc7dc081c0 <line:461:3> col:3 implicit 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | |-IndirectFieldDecl 0x55dc7dc08218 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | | |-Field 0x55dc7dc081c0 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x55dc7dc080d0 'prio' 's8_t':'signed char'
| | |-IndirectFieldDecl 0x55dc7dc08268 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | | |-Field 0x55dc7dc081c0 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x55dc7dc08128 'sched_locked' 'u8_t':'unsigned char'
| | `-FieldDecl 0x55dc7dc082b8 <line:470:3, col:9> col:9 preempt 'u16_t':'unsigned short'
| |-FieldDecl 0x55dc7dbbfe20 <line:460:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| |-IndirectFieldDecl 0x55dc7dbbfe80 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | |-Field 0x55dc7dbbfe20 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x55dc7dc081c0 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x55dc7dc080d0 'prio' 's8_t':'signed char'
| |-IndirectFieldDecl 0x55dc7dbbfed8 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | |-Field 0x55dc7dbbfe20 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x55dc7dc081c0 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x55dc7dc08128 'sched_locked' 'u8_t':'unsigned char'
| |-IndirectFieldDecl 0x55dc7dbbff28 <line:470:9> col:9 implicit preempt 'u16_t':'unsigned short'
| | |-Field 0x55dc7dbbfe20 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | `-Field 0x55dc7dc082b8 'preempt' 'u16_t':'unsigned short'
| |-FieldDecl 0x55dc7dbbff78 <line:477:2, col:8> col:8 order_key 'u32_t':'unsigned int'
| `-FieldDecl 0x55dc7dbbffd8 <line:497:2, col:8> col:8 swap_data 'void *'
|-TypedefDecl 0x55dc7dbc0110 <line:505:1, col:29> col:29 _thread_base_t 'struct _thread_base':'struct _thread_base'
| `-ElaboratedType 0x55dc7dbc00c0 'struct _thread_base' sugar
|   `-RecordType 0x55dc7dc07b10 'struct _thread_base'
|     `-Record 0x55dc7dc07a88 '_thread_base'
|-RecordDecl 0x55dc7dbc0198 prev 0x55dc7dc00bc0 <line:545:1, line:618:1> line:545:8 invalid struct k_thread definition
| |-FullComment 0x55dc7dcc2b10 <line:542:3, line:543:19>
| | |-ParagraphComment 0x55dc7dcc2a40 <line:542:3>
| | | `-TextComment 0x55dc7dcc2a10 <col:3> Text=" "
| | |-VerbatimLineComment 0x55dc7dcc2a60 <col:4, col:24> Text=" thread_apis"
| | `-ParagraphComment 0x55dc7dcc2ad0 <line:543:3, col:19>
| |   `-TextComment 0x55dc7dcc2aa0 <col:3, col:19> Text=" Thread Structure"
| |-FieldDecl 0x55dc7dbc0240 <line:547:2, col:22> col:22 base 'struct _thread_base':'struct _thread_base'
| |-RecordDecl 0x55dc7dbc02b8 parent 0x55dc7da66918 <line:550:2, col:9> col:9 struct _callee_saved
| |-FieldDecl 0x55dc7dbc03c0 <col:2, col:23> col:23 invalid callee_saved 'struct _callee_saved':'struct _callee_saved'
| | `-FullComment 0x55dc7dcc2be0 <line:549:5, col:59>
| |   `-ParagraphComment 0x55dc7dcc2bb0 <col:5, col:59>
| |     `-TextComment 0x55dc7dcc2b80 <col:5, col:59> Text=" defined by the architecture, but all archs need these "
| |-FieldDecl 0x55dc7dbc0450 <line:553:2, col:8> col:8 init_data 'void *'
| | `-FullComment 0x55dc7dcc2cb0 <line:552:5, col:29>
| |   `-ParagraphComment 0x55dc7dcc2c80 <col:5, col:29>
| |     `-TextComment 0x55dc7dcc2c50 <col:5, col:29> Text=" static thread init data "
| |-FieldDecl 0x55dc7dbc05f8 <line:559:2, col:23> col:9 fn_abort 'void (*)(void)'
| | `-FullComment 0x55dc7dcc2e40 <line:556:4, line:558:4>
| |   |-ParagraphComment 0x55dc7dcc2d70 <line:556:4, line:557:4>
| |   | |-TextComment 0x55dc7dcc2d20 <line:556:4, col:18> Text=" abort function"
| |   | `-TextComment 0x55dc7dcc2d40 <line:557:4> Text=" "
| |   |-VerbatimLineComment 0x55dc7dcc2d90 <col:5, col:22> Text=" K-THREAD-002"
| |   `-ParagraphComment 0x55dc7dcc2e00 <line:558:4>
| |     `-TextComment 0x55dc7dcc2dd0 <col:4> Text=" "
| |-FieldDecl 0x55dc7dbc0720 <line:614:2, col:21> col:21 referenced resource_pool 'struct k_mem_pool *'
| | `-FullComment 0x55dc7dcc2f10 <line:613:5, col:19>
| |   `-ParagraphComment 0x55dc7dcc2ee0 <col:5, col:19>
| |     `-TextComment 0x55dc7dcc2eb0 <col:5, col:19> Text=" resource pool "
| |-RecordDecl 0x55dc7dbc0798 parent 0x55dc7da66918 <line:617:2, col:9> col:9 struct _thread_arch
| `-FieldDecl 0x55dc7dbc08a0 <col:2, col:22> col:22 invalid arch 'struct _thread_arch':'struct _thread_arch'
|   `-FullComment 0x55dc7dcc2fe0 <line:616:5, col:47>
|     `-ParagraphComment 0x55dc7dcc2fb0 <col:5, col:47>
|       `-TextComment 0x55dc7dcc2f80 <col:5, col:47> Text=" arch-specifics: must always be at the end "
|-TypedefDecl 0x55dc7dbc09d0 <line:620:1, col:25> col:25 _thread_t 'struct k_thread':'struct k_thread'
| `-ElaboratedType 0x55dc7db569b0 'struct k_thread' sugar
|   `-RecordType 0x55dc7db56920 'struct k_thread'
|     `-Record 0x55dc7dbc0198 'k_thread'
|-TypedefDecl 0x55dc7dbc0a50 <line:621:1, col:26> col:26 referenced k_tid_t 'struct k_thread *'
| `-PointerType 0x55dc7db56a10 'struct k_thread *'
|   `-ElaboratedType 0x55dc7db569b0 'struct k_thread' sugar
|     `-RecordType 0x55dc7db56920 'struct k_thread'
|       `-Record 0x55dc7dbc0198 'k_thread'
|-EnumDecl 0x55dc7dbc0aa8 <line:623:1, line:627:1> line:623:6 execution_context_types
| |-EnumConstantDecl 0x55dc7dbc0b80 <line:624:2, col:10> col:2 K_ISR 'int'
| | `-IntegerLiteral 0x55dc7dbc0b60 <col:10> 'int' 0
| |-EnumConstantDecl 0x55dc7dbc0bc8 <line:625:2> col:2 K_COOP_THREAD 'int'
| `-EnumConstantDecl 0x55dc7dbc0c10 <line:626:2> col:2 K_PREEMPT_THREAD 'int'
|-TypedefDecl 0x55dc7dc0b0f8 <line:634:1, line:635:23> line:634:16 referenced k_thread_user_cb_t 'void (*)(const struct k_thread *, void *)'
| |-PointerType 0x55dc7dc0b090 'void (*)(const struct k_thread *, void *)'
| | `-ParenType 0x55dc7dc0b030 'void (const struct k_thread *, void *)' sugar
| |   `-FunctionProtoType 0x55dc7dc0aff0 'void (const struct k_thread *, void *)' cdecl
| |     |-BuiltinType 0x55dc7da66970 'void'
| |     |-PointerType 0x55dc7dbc0cc0 'const struct k_thread *'
| |     | `-QualType 0x55dc7db569b1 'const struct k_thread' const
| |     |   `-ElaboratedType 0x55dc7db569b0 'struct k_thread' sugar
| |     |     `-RecordType 0x55dc7db56920 'struct k_thread'
| |     |       `-Record 0x55dc7dbc0198 'k_thread'
| |     `-PointerType 0x55dc7da66e10 'void *'
| |       `-BuiltinType 0x55dc7da66970 'void'
| `-FullComment 0x55dc7dcc31a0 <line:630:3, line:631:5>
|   |-ParagraphComment 0x55dc7dcc3080 <line:630:3>
|   | `-TextComment 0x55dc7dcc3050 <col:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcc30a0 <col:4, col:27> Text=" thread_apis"
|   `-ParagraphComment 0x55dc7dcc3160 <line:631:3, col:5>
|     |-TextComment 0x55dc7dcc30e0 <col:3> Text=" "
|     |-TextComment 0x55dc7dcc3100 <col:4> Text="@"
|     `-TextComment 0x55dc7dcc3120 <col:5> Text="{"
|-FunctionDecl 0x55dc7dc0b340 <line:654:1, col:73> col:13 k_thread_foreach 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x55dc7dc0b1b0 <col:30, col:49> col:49 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x55dc7dc0b228 <col:58, col:64> col:64 user_data 'void *'
| `-FullComment 0x55dc7dcc38b0 <line:638:3, line:652:14>
|   |-ParagraphComment 0x55dc7dcc3240 <line:638:3>
|   | `-TextComment 0x55dc7dcc3210 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc3260 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc32c0 <col:10, col:53>
|   |   `-TextComment 0x55dc7dcc3290 <col:10, col:53> Text=" Iterate over all the threads in the system."
|   |-ParagraphComment 0x55dc7dcc3330 <line:640:3, line:641:46>
|   | |-TextComment 0x55dc7dcc32e0 <line:640:3, col:63> Text=" This routine iterates over all the threads in the system and"
|   | `-TextComment 0x55dc7dcc3300 <line:641:3, col:46> Text=" calls the user_cb function for each thread."
|   |-ParagraphComment 0x55dc7dcc3380 <line:643:3>
|   | `-TextComment 0x55dc7dcc3350 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc33a0 <col:4, line:644:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcc3450 <line:643:18, line:644:3>
|   |   |-TextComment 0x55dc7dcc3400 <line:643:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x55dc7dcc3420 <line:644:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc3470 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcc3500 <col:20, col:41>
|   |   `-TextComment 0x55dc7dcc34d0 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x55dc7dcc3550 <line:646:3>
|   | `-TextComment 0x55dc7dcc3520 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc3570 <col:4, line:648:3> Name="note"
|   | `-ParagraphComment 0x55dc7dcc3620 <line:646:9, line:648:3>
|   |   |-TextComment 0x55dc7dcc35a0 <line:646:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x55dc7dcc35c0 <line:647:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x55dc7dcc35e0 <line:648:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc3640 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x55dc7dcc36a0 <col:9, col:23>
|   |   `-TextComment 0x55dc7dcc3670 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x55dc7dcc36c0 <col:24, col:71> Text=" k_spin_lock to protect the _kernel.threads"
|   |-ParagraphComment 0x55dc7dcc3750 <line:649:3, line:650:46>
|   | |-TextComment 0x55dc7dcc3700 <line:649:3, col:72> Text=" list which means creation of new threads and terminations of existing"
|   | `-TextComment 0x55dc7dcc3720 <line:650:3, col:46> Text=" threads are blocked until this API returns."
|   |-ParagraphComment 0x55dc7dcc37a0 <line:652:3>
|   | `-TextComment 0x55dc7dcc3770 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcc37c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dcc3820 <col:11, col:14>
|       `-TextComment 0x55dc7dcc37f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dc0b530 <line:683:1, line:684:45> line:683:13 k_thread_foreach_unlocked 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x55dc7dc0b428 <line:684:2, col:21> col:21 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x55dc7dc0b4a0 <col:30, col:36> col:36 user_data 'void *'
| `-FullComment 0x55dc7dcc43b0 <line:657:3, line:681:72>
|   |-ParagraphComment 0x55dc7dcc3950 <line:657:3>
|   | `-TextComment 0x55dc7dcc3920 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc3970 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc39d0 <col:10, col:69>
|   |   `-TextComment 0x55dc7dcc39a0 <col:10, col:69> Text=" Iterate over all the threads in the system without locking."
|   |-ParagraphComment 0x55dc7dcc3a20 <line:659:3, col:44>
|   | `-TextComment 0x55dc7dcc39f0 <col:3, col:44> Text=" This routine works exactly the same like "
|   |-VerbatimLineComment 0x55dc7dcc3a40 <col:45, col:66> Text=" k_thread_foreach"
|   |-ParagraphComment 0x55dc7dcc3ab0 <line:660:3, col:51>
|   | `-TextComment 0x55dc7dcc3a80 <col:3, col:51> Text=" but unlocks interrupts when user_cb is executed."
|   |-ParagraphComment 0x55dc7dcc3b00 <line:662:3>
|   | `-TextComment 0x55dc7dcc3ad0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc3b20 <col:4, line:663:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcc3bd0 <line:662:18, line:663:3>
|   |   |-TextComment 0x55dc7dcc3b80 <line:662:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x55dc7dcc3ba0 <line:663:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc3bf0 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcc3c80 <col:20, col:41>
|   |   `-TextComment 0x55dc7dcc3c50 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x55dc7dcc3cd0 <line:665:3>
|   | `-TextComment 0x55dc7dcc3ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc3cf0 <col:4, line:667:3> Name="note"
|   | `-ParagraphComment 0x55dc7dcc3da0 <line:665:9, line:667:3>
|   |   |-TextComment 0x55dc7dcc3d20 <line:665:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x55dc7dcc3d40 <line:666:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x55dc7dcc3d60 <line:667:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc3dc0 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x55dc7dcc3e20 <col:9, col:23>
|   |   `-TextComment 0x55dc7dcc3df0 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x55dc7dcc3e40 <col:24, col:80> Text=" k_spin_lock only when accessing the _kernel.threads"
|   |-ParagraphComment 0x55dc7dcc4020 <line:668:3, line:674:3>
|   | |-TextComment 0x55dc7dcc3e80 <line:668:3, col:74> Text=" queue elements. It unlocks it during user callback function processing."
|   | |-TextComment 0x55dc7dcc3ea0 <line:669:3, col:38> Text=" If a new task is created when this "
|   | |-InlineCommandComment 0x55dc7dcc3ef0 <col:39, col:40> Name="c" RenderMonospaced Arg[0]="foreach"
|   | |-TextComment 0x55dc7dcc3f10 <col:49, col:73> Text=" function is in progress,"
|   | |-TextComment 0x55dc7dcc3f30 <line:670:3, col:63> Text=" the added new task would not be included in the enumeration."
|   | |-TextComment 0x55dc7dcc3f50 <line:671:3, col:75> Text=" If a task is aborted during this enumeration, there would be a race here"
|   | |-TextComment 0x55dc7dcc3f70 <line:672:3, col:77> Text=" and there is a possibility that this aborted task would be included in the"
|   | |-TextComment 0x55dc7dcc3f90 <line:673:3, col:15> Text=" enumeration."
|   | `-TextComment 0x55dc7dcc3fb0 <line:674:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcc4040 <col:4, line:681:72> Name="note"
|     `-ParagraphComment 0x55dc7dcc4320 <line:674:9, line:681:72>
|       |-TextComment 0x55dc7dcc4070 <line:674:9, col:63> Text=" If the task is aborted and the memory occupied by its "
|       |-InlineCommandComment 0x55dc7dcc40c0 <col:64, col:65> Name="c" RenderMonospaced Arg[0]="k_thread"
|       |-TextComment 0x55dc7dcc40e0 <line:675:3, col:33> Text=" structure is reused when this "
|       |-InlineCommandComment 0x55dc7dcc4140 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="k_thread_foreach_unlocked"
|       |-TextComment 0x55dc7dcc4160 <col:62, col:76> Text=" is in progress"
|       |-TextComment 0x55dc7dcc4180 <line:676:3, col:52> Text=" it might even lead to the system behave unstable."
|       |-TextComment 0x55dc7dcc41a0 <line:677:3, col:59> Text=" This function may never return, as it would follow some "
|       |-InlineCommandComment 0x55dc7dcc41f0 <col:60, col:61> Name="c" RenderMonospaced Arg[0]="next"
|       |-TextComment 0x55dc7dcc4210 <col:67, col:71> Text=" task"
|       |-TextComment 0x55dc7dcc4230 <line:678:3, col:73> Text=" pointers treating given pointer as a pointer to the k_thread structure"
|       |-TextComment 0x55dc7dcc4250 <line:679:3, col:45> Text=" while it is something different right now."
|       |-TextComment 0x55dc7dcc4270 <line:680:3, col:77> Text=" Do not reuse the memory that was occupied by k_thread structure of aborted"
|       `-TextComment 0x55dc7dcc4290 <line:681:3, col:72> Text=" task if it was aborted after this function was called in any context."
|-FunctionDecl 0x55dc7dc0bd50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:784:43> line:779:19 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc0b748 <col:35, col:52> col:52 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x55dc7dc0b7b8 <line:780:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55dc7dc0b828 <line:781:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc0b8c0 <line:782:7, col:24> col:24 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x55dc7dc0b938 <line:783:7, col:13> col:13 p1 'void *'
| |-ParmVarDecl 0x55dc7dc0b9b0 <col:17, col:23> col:23 p2 'void *'
| |-ParmVarDecl 0x55dc7dc0ba28 <col:27, col:33> col:33 p3 'void *'
| |-ParmVarDecl 0x55dc7dc0baa0 <line:784:7, col:11> col:11 prio 'int'
| |-ParmVarDecl 0x55dc7dc0bb10 <col:17, col:23> col:23 options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55dc7dc0bb80 <col:32, col:38> col:38 delay 's32_t':'int'
| `-FullComment 0x55dc7dcc5220 <line:746:3, line:778:1>
|   |-ParagraphComment 0x55dc7dcc4450 <line:746:3>
|   | `-TextComment 0x55dc7dcc4420 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc4470 <col:4, col:26> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc44d0 <col:10, col:26>
|   |   `-TextComment 0x55dc7dcc44a0 <col:10, col:26> Text=" Create a thread."
|   |-ParagraphComment 0x55dc7dcc4520 <line:748:3, col:70>
|   | `-TextComment 0x55dc7dcc44f0 <col:3, col:70> Text=" This routine initializes a thread, then schedules it for execution."
|   |-ParagraphComment 0x55dc7dcc45e0 <line:750:3, line:753:11>
|   | |-TextComment 0x55dc7dcc4540 <line:750:3, col:78> Text=" The new thread may be scheduled for immediate execution or a delayed start."
|   | |-TextComment 0x55dc7dcc4560 <line:751:3, col:71> Text=" If the newly spawned thread does not have a delayed start the kernel"
|   | |-TextComment 0x55dc7dcc4580 <line:752:3, col:70> Text=" scheduler may preempt the current thread to allow the new thread to"
|   | `-TextComment 0x55dc7dcc45a0 <line:753:3, col:11> Text=" execute."
|   |-ParagraphComment 0x55dc7dcc4680 <line:755:3, line:757:44>
|   | |-TextComment 0x55dc7dcc4600 <line:755:3, col:73> Text=" Thread options are architecture-specific, and can include K_ESSENTIAL,"
|   | |-TextComment 0x55dc7dcc4620 <line:756:3, col:77> Text=" K_FP_REGS, and K_SSE_REGS. Multiple options may be specified by separating"
|   | `-TextComment 0x55dc7dcc4640 <line:757:3, col:44> Text=" them using "|" (the logical OR operator)."
|   |-ParagraphComment 0x55dc7dcc4740 <line:759:3, line:762:13>
|   | |-TextComment 0x55dc7dcc46a0 <line:759:3, col:79> Text=" Historically, users often would use the beginning of the stack memory region"
|   | |-TextComment 0x55dc7dcc46c0 <line:760:3, col:75> Text=" to store the struct k_thread data, although corruption will occur if the"
|   | |-TextComment 0x55dc7dcc46e0 <line:761:3, col:80> Text=" stack overflows this region and stack protection features may not detect this"
|   | `-TextComment 0x55dc7dcc4700 <line:762:3, col:13> Text=" situation."
|   |-ParagraphComment 0x55dc7dcc4790 <line:764:3>
|   | `-TextComment 0x55dc7dcc4760 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc47b0 <col:4, line:765:3> [in] implicitly Param="new_thread" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcc4860 <line:764:21, line:765:3>
|   |   |-TextComment 0x55dc7dcc4810 <line:764:21, col:61> Text=" Pointer to uninitialized struct k_thread"
|   |   `-TextComment 0x55dc7dcc4830 <line:765:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc4880 <col:4, line:766:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcc4940 <line:765:16, line:766:3>
|   |   |-TextComment 0x55dc7dcc48f0 <line:765:16, col:43> Text=" Pointer to the stack space."
|   |   `-TextComment 0x55dc7dcc4910 <line:766:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc4960 <col:4, line:767:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcc4a10 <line:766:21, line:767:3>
|   |   |-TextComment 0x55dc7dcc49c0 <line:766:21, col:41> Text=" Stack size in bytes."
|   |   `-TextComment 0x55dc7dcc49e0 <line:767:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc4a30 <col:4, line:768:3> [in] implicitly Param="entry" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dcc4ae0 <line:767:16, line:768:3>
|   |   |-TextComment 0x55dc7dcc4a90 <line:767:16, col:38> Text=" Thread entry function."
|   |   `-TextComment 0x55dc7dcc4ab0 <line:768:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc4b00 <col:4, line:769:3> [in] implicitly Param="p1" ParamIndex=4
|   | `-ParagraphComment 0x55dc7dcc4bb0 <line:768:13, line:769:3>
|   |   |-TextComment 0x55dc7dcc4b60 <line:768:13, col:39> Text=" 1st entry point parameter."
|   |   `-TextComment 0x55dc7dcc4b80 <line:769:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc4bd0 <col:4, line:770:3> [in] implicitly Param="p2" ParamIndex=5
|   | `-ParagraphComment 0x55dc7dcc4c80 <line:769:13, line:770:3>
|   |   |-TextComment 0x55dc7dcc4c30 <line:769:13, col:39> Text=" 2nd entry point parameter."
|   |   `-TextComment 0x55dc7dcc4c50 <line:770:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc4ca0 <col:4, line:771:3> [in] implicitly Param="p3" ParamIndex=6
|   | `-ParagraphComment 0x55dc7dcc4d50 <line:770:13, line:771:3>
|   |   |-TextComment 0x55dc7dcc4d00 <line:770:13, col:39> Text=" 3rd entry point parameter."
|   |   `-TextComment 0x55dc7dcc4d20 <line:771:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc4d70 <col:4, line:772:3> [in] implicitly Param="prio" ParamIndex=7
|   | `-ParagraphComment 0x55dc7dcc4e20 <line:771:15, line:772:3>
|   |   |-TextComment 0x55dc7dcc4dd0 <line:771:15, col:31> Text=" Thread priority."
|   |   `-TextComment 0x55dc7dcc4df0 <line:772:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc4e40 <col:4, line:773:3> [in] implicitly Param="options" ParamIndex=8
|   | `-ParagraphComment 0x55dc7dcc4ef0 <line:772:18, line:773:3>
|   |   |-TextComment 0x55dc7dcc4ea0 <line:772:18, col:33> Text=" Thread options."
|   |   `-TextComment 0x55dc7dcc4ec0 <line:773:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc4f10 <col:4, col:80> [in] implicitly Param="delay" ParamIndex=9
|   | `-ParagraphComment 0x55dc7dcc4fa0 <col:16, col:80>
|   |   `-TextComment 0x55dc7dcc4f70 <col:16, col:80> Text=" Scheduling delay (in milliseconds), or K_NO_WAIT (for no delay)."
|   |-ParagraphComment 0x55dc7dcc4ff0 <line:775:3>
|   | `-TextComment 0x55dc7dcc4fc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc5010 <col:4, col:28> Name="return"
|   | `-ParagraphComment 0x55dc7dcc5070 <col:11, col:28>
|   |   `-TextComment 0x55dc7dcc5040 <col:11, col:28> Text=" ID of new thread."
|   |-ParagraphComment 0x55dc7dcc50c0 <line:777:3>
|   | `-TextComment 0x55dc7dcc5090 <col:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcc50e0 <col:4, col:21> Text=" K-THREAD-001"
|   `-ParagraphComment 0x55dc7dcc5150 <line:778:1>
|     `-TextComment 0x55dc7dcc5120 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc0f220 <line:795:1, line:797:18> line:795:27 k_thread_user_mode_enter 'void (k_thread_entry_t, void *, void *, void *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55dc7dc0be78 <col:52, col:69> col:69 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x55dc7dc0ef50 <line:796:10, col:16> col:16 p1 'void *'
| |-ParmVarDecl 0x55dc7dc0efc8 <col:20, col:26> col:26 p2 'void *'
| |-ParmVarDecl 0x55dc7dc0f040 <line:797:10, col:16> col:16 p3 'void *'
| `-FullComment 0x55dc7dcc57d0 <line:787:3, line:794:1>
|   |-ParagraphComment 0x55dc7dcc52c0 <line:787:3>
|   | `-TextComment 0x55dc7dcc5290 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc52e0 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc5340 <col:10, col:61>
|   |   `-TextComment 0x55dc7dcc5310 <col:10, col:61> Text=" Drop a thread's privileges permanently to user mode"
|   |-ParagraphComment 0x55dc7dcc5390 <line:789:3>
|   | `-TextComment 0x55dc7dcc5360 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc53b0 <col:4, line:790:3> [in] implicitly Param="entry" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcc5460 <line:789:16, line:790:3>
|   |   |-TextComment 0x55dc7dcc5410 <line:789:16, col:48> Text=" Function to start executing from"
|   |   `-TextComment 0x55dc7dcc5430 <line:790:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc5480 <col:4, line:791:3> [in] implicitly Param="p1" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcc5530 <line:790:13, line:791:3>
|   |   |-TextComment 0x55dc7dcc54e0 <line:790:13, col:38> Text=" 1st entry point parameter"
|   |   `-TextComment 0x55dc7dcc5500 <line:791:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc5550 <col:4, line:792:3> [in] implicitly Param="p2" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcc5600 <line:791:13, line:792:3>
|   |   |-TextComment 0x55dc7dcc55b0 <line:791:13, col:38> Text=" 2nd entry point parameter"
|   |   `-TextComment 0x55dc7dcc55d0 <line:792:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc5620 <col:4, line:793:3> [in] implicitly Param="p3" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dcc56d0 <line:792:13, line:793:3>
|   |   |-TextComment 0x55dc7dcc5680 <line:792:13, col:38> Text=" 3rd entry point parameter"
|   |   `-TextComment 0x55dc7dcc56a0 <line:793:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcc56f0 <col:4, col:21> Text=" K-THREAD-003"
|   `-ParagraphComment 0x55dc7dcc5760 <line:794:1>
|     `-TextComment 0x55dc7dcc5730 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc0f500 <line:831:1, line:835:1> line:831:20 k_thread_resource_pool_assign 'void (struct k_thread *, struct k_mem_pool *)' static inline
| |-ParmVarDecl 0x55dc7dc0f360 <col:50, col:67> col:67 used thread 'struct k_thread *'
| |-ParmVarDecl 0x55dc7dc0f3e8 <line:832:8, col:27> col:27 used pool 'struct k_mem_pool *'
| |-CompoundStmt 0x55dc7dc0f6b8 <line:833:1, line:835:1>
| | `-BinaryOperator 0x55dc7dc0f668 <line:834:2, col:26> 'struct k_mem_pool *' '='
| |   |-MemberExpr 0x55dc7dc0f5f0 <col:2, col:10> 'struct k_mem_pool *' lvalue ->resource_pool 0x55dc7dbc0720
| |   | `-ImplicitCastExpr 0x55dc7dc0f5d8 <col:2> 'struct k_thread *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55dc7dc0f5b0 <col:2> 'struct k_thread *' lvalue ParmVar 0x55dc7dc0f360 'thread' 'struct k_thread *'
| |   `-ImplicitCastExpr 0x55dc7dc0f650 <col:26> 'struct k_mem_pool *' <LValueToRValue>
| |     `-DeclRefExpr 0x55dc7dc0f628 <col:26> 'struct k_mem_pool *' lvalue ParmVar 0x55dc7dc0f3e8 'pool' 'struct k_mem_pool *'
| `-FullComment 0x55dc7dcc5d20 <line:817:3, line:830:1>
|   |-ParagraphComment 0x55dc7dcc5870 <line:817:3>
|   | `-TextComment 0x55dc7dcc5840 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc5890 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc58f0 <col:10, col:51>
|   |   `-TextComment 0x55dc7dcc58c0 <col:10, col:51> Text=" Assign a resource memory pool to a thread"
|   |-ParagraphComment 0x55dc7dcc5990 <line:819:3, line:821:51>
|   | |-TextComment 0x55dc7dcc5910 <line:819:3, col:73> Text=" By default, threads have no resource pool assigned unless their parent"
|   | |-TextComment 0x55dc7dcc5930 <line:820:3, col:70> Text=" thread has a resource pool, in which case it is inherited. Multiple"
|   | `-TextComment 0x55dc7dcc5950 <line:821:3, col:51> Text=" threads may be assigned to the same memory pool."
|   |-ParagraphComment 0x55dc7dcc5a00 <line:823:3, line:824:17>
|   | |-TextComment 0x55dc7dcc59b0 <line:823:3, col:74> Text=" Changing a thread's resource pool will not migrate allocations from the"
|   | `-TextComment 0x55dc7dcc59d0 <line:824:3, col:17> Text=" previous pool."
|   |-ParagraphComment 0x55dc7dcc5a50 <line:826:3>
|   | `-TextComment 0x55dc7dcc5a20 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc5a70 <col:4, line:828:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcc5b50 <line:826:17, line:828:3>
|   |   |-TextComment 0x55dc7dcc5ad0 <line:826:17, col:77> Text=" Target thread to assign a memory pool for resource requests,"
|   |   |-TextComment 0x55dc7dcc5af0 <line:827:3, col:75> Text="               or NULL if the thread should no longer have a memory pool."
|   |   `-TextComment 0x55dc7dcc5b10 <line:828:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc5b70 <col:4, line:829:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcc5c20 <line:828:15, line:829:3>
|   |   |-TextComment 0x55dc7dcc5bd0 <line:828:15, col:48> Text=" Memory pool to use for resources."
|   |   `-TextComment 0x55dc7dcc5bf0 <line:829:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcc5c40 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x55dc7dcc5cb0 <line:830:1>
|     `-TextComment 0x55dc7dcc5c80 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc0f7e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:864:33> col:17 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc0f6e0 <col:25, col:31> col:31 ms 's32_t':'int'
| `-FullComment 0x55dc7dcc6200 <line:855:3, line:863:1>
|   |-ParagraphComment 0x55dc7dcc5dc0 <line:855:3>
|   | `-TextComment 0x55dc7dcc5d90 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc5de0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc5e40 <col:10, col:42>
|   |   `-TextComment 0x55dc7dcc5e10 <col:10, col:42> Text=" Put the current thread to sleep."
|   |-ParagraphComment 0x55dc7dcc5f10 <line:857:3, col:78>
|   | |-TextComment 0x55dc7dcc5e60 <col:3, col:53> Text=" This routine puts the current thread to sleep for "
|   | |-InlineCommandComment 0x55dc7dcc5eb0 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="duration"
|   | `-TextComment 0x55dc7dcc5ed0 <col:65, col:78> Text=" milliseconds."
|   |-ParagraphComment 0x55dc7dcc5f60 <line:859:3>
|   | `-TextComment 0x55dc7dcc5f30 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc5f80 <col:4, col:45> [in] implicitly Param="ms" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcc6010 <col:13, col:45>
|   |   `-TextComment 0x55dc7dcc5fe0 <col:13, col:45> Text=" Number of milliseconds to sleep."
|   |-ParagraphComment 0x55dc7dcc6060 <line:861:3>
|   | `-TextComment 0x55dc7dcc6030 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc6080 <col:4, line:862:44> Name="return"
|   | `-ParagraphComment 0x55dc7dcc6100 <line:861:11, line:862:44>
|   |   |-TextComment 0x55dc7dcc60b0 <line:861:11, col:79> Text=" Zero if the requested time has elapsed or the number of milliseconds"
|   |   `-TextComment 0x55dc7dcc60d0 <line:862:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x55dc7dcc6120 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x55dc7dcc6190 <line:863:1>
|     `-TextComment 0x55dc7dcc6160 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc0f950 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:880:34> col:17 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc0f8c8 <col:26, col:32> col:32 us 's32_t':'int'
| `-FullComment 0x55dc7dcc6700 <line:867:3, line:879:1>
|   |-ParagraphComment 0x55dc7dcc62a0 <line:867:3>
|   | `-TextComment 0x55dc7dcc6270 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc62c0 <col:4, col:70> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc6320 <col:10, col:70>
|   |   `-TextComment 0x55dc7dcc62f0 <col:10, col:70> Text=" Put the current thread to sleep with microsecond resolution."
|   |-ParagraphComment 0x55dc7dcc6410 <line:869:3, line:873:71>
|   | |-TextComment 0x55dc7dcc6340 <line:869:3, col:71> Text=" This function is unlikely to work as expected without kernel tuning."
|   | |-TextComment 0x55dc7dcc6360 <line:870:3, col:71> Text=" In particular, because the lower bound on the duration of a sleep is"
|   | |-TextComment 0x55dc7dcc6380 <line:871:3, col:74> Text=" the duration of a tick, CONFIG_SYS_CLOCK_TICKS_PER_SEC must be adjusted"
|   | |-TextComment 0x55dc7dcc63a0 <line:872:3, col:73> Text=" to achieve the resolution desired. The implications of doing this must"
|   | `-TextComment 0x55dc7dcc63c0 <line:873:3, col:71> Text=" be understood before attempting to use k_usleep(). Use with caution."
|   |-ParagraphComment 0x55dc7dcc6460 <line:875:3>
|   | `-TextComment 0x55dc7dcc6430 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc6480 <col:4, col:45> [in] implicitly Param="us" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcc6510 <col:13, col:45>
|   |   `-TextComment 0x55dc7dcc64e0 <col:13, col:45> Text=" Number of microseconds to sleep."
|   |-ParagraphComment 0x55dc7dcc6560 <line:877:3>
|   | `-TextComment 0x55dc7dcc6530 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc6580 <col:4, line:878:44> Name="return"
|   | `-ParagraphComment 0x55dc7dcc6600 <line:877:11, line:878:44>
|   |   |-TextComment 0x55dc7dcc65b0 <line:877:11, col:79> Text=" Zero if the requested time has elapsed or the number of microseconds"
|   |   `-TextComment 0x55dc7dcc65d0 <line:878:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x55dc7dcc6620 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x55dc7dcc6690 <line:879:1>
|     `-TextComment 0x55dc7dcc6660 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc0fb00 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:890:46> col:16 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dc0fa38 <col:28, col:34> col:34 usec_to_wait 'u32_t':'unsigned int'
| `-FullComment 0x55dc7dcc6a50 <line:883:3, line:888:14>
|   |-ParagraphComment 0x55dc7dcc67a0 <line:883:3>
|   | `-TextComment 0x55dc7dcc6770 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc67c0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc6820 <col:10, col:48>
|   |   `-TextComment 0x55dc7dcc67f0 <col:10, col:48> Text=" Cause the current thread to busy wait."
|   |-ParagraphComment 0x55dc7dcc6930 <line:885:3, line:886:32>
|   | |-TextComment 0x55dc7dcc6840 <line:885:3, col:76> Text=" This routine causes the current thread to execute a "do nothing" loop for"
|   | |-TextComment 0x55dc7dcc6860 <line:886:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcc68d0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="usec_to_wait"
|   | `-TextComment 0x55dc7dcc68f0 <col:19, col:32> Text=" microseconds."
|   |-ParagraphComment 0x55dc7dcc6980 <line:888:3>
|   | `-TextComment 0x55dc7dcc6950 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcc69a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dcc6a00 <col:11, col:14>
|       `-TextComment 0x55dc7dcc69d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dc0fc68 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:902:28> col:16 k_yield 'void (void)' static inline
| `-FullComment 0x55dc7dcc6df0 <line:893:3, line:901:1>
|   |-ParagraphComment 0x55dc7dcc6af0 <line:893:3>
|   | `-TextComment 0x55dc7dcc6ac0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc6b10 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc6b70 <col:10, col:35>
|   |   `-TextComment 0x55dc7dcc6b40 <col:10, col:35> Text=" Yield the current thread."
|   |-ParagraphComment 0x55dc7dcc6c10 <line:895:3, line:897:67>
|   | |-TextComment 0x55dc7dcc6b90 <line:895:3, col:71> Text=" This routine causes the current thread to yield execution to another"
|   | |-TextComment 0x55dc7dcc6bb0 <line:896:3, col:77> Text=" thread of the same or higher priority. If there are no other ready threads"
|   | `-TextComment 0x55dc7dcc6bd0 <line:897:3, col:67> Text=" of the same or higher priority, the routine returns immediately."
|   |-ParagraphComment 0x55dc7dcc6c60 <line:899:3>
|   | `-TextComment 0x55dc7dcc6c30 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc6c80 <col:4, line:900:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcc6d00 <line:899:11, line:900:3>
|   |   |-TextComment 0x55dc7dcc6cb0 <line:899:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcc6cd0 <line:900:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcc6d20 <col:4, col:21> Text=" K-THREAD-015"
|   `-ParagraphComment 0x55dc7dcc6d90 <line:901:1>
|     `-TextComment 0x55dc7dcc6d60 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc0fe50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:916:39> col:16 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55dc7dc0fd48 <col:25, col:33> col:33 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55dc7dcc73a0 <line:905:3, line:915:1>
|   |-ParagraphComment 0x55dc7dcc6e90 <line:905:3>
|   | `-TextComment 0x55dc7dcc6e60 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc6eb0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc6f10 <col:10, col:36>
|   |   `-TextComment 0x55dc7dcc6ee0 <col:10, col:36> Text=" Wake up a sleeping thread."
|   |-ParagraphComment 0x55dc7dcc6fe0 <line:907:3, col:61>
|   | |-TextComment 0x55dc7dcc6f30 <col:3, col:37> Text=" This routine prematurely wakes up "
|   | |-InlineCommandComment 0x55dc7dcc6f80 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55dc7dcc6fa0 <col:47, col:61> Text=" from sleeping."
|   |-ParagraphComment 0x55dc7dcc70b0 <line:909:3, col:69>
|   | |-TextComment 0x55dc7dcc7000 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x55dc7dcc7050 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55dc7dcc7070 <col:16, col:69> Text=" is not currently sleeping, the routine has no effect."
|   |-ParagraphComment 0x55dc7dcc7100 <line:911:3>
|   | `-TextComment 0x55dc7dcc70d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc7120 <col:4, col:38> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcc71b0 <col:17, col:38>
|   |   `-TextComment 0x55dc7dcc7180 <col:17, col:38> Text=" ID of thread to wake."
|   |-ParagraphComment 0x55dc7dcc7200 <line:913:3>
|   | `-TextComment 0x55dc7dcc71d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc7220 <col:4, line:914:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcc72a0 <line:913:11, line:914:3>
|   |   |-TextComment 0x55dc7dcc7250 <line:913:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcc7270 <line:914:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcc72c0 <col:4, col:21> Text=" K-THREAD-014"
|   `-ParagraphComment 0x55dc7dcc7330 <line:915:1>
|     `-TextComment 0x55dc7dcc7300 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc10040 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:925:37> col:19 k_current_get 'k_tid_t (void)' static inline
| `-FullComment 0x55dc7dcc76d0 <line:919:3, line:924:1>
|   |-ParagraphComment 0x55dc7dcc7440 <line:919:3>
|   | `-TextComment 0x55dc7dcc7410 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc7460 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc74c0 <col:10, col:46>
|   |   `-TextComment 0x55dc7dcc7490 <col:10, col:46> Text=" Get thread ID of the current thread."
|   |-ParagraphComment 0x55dc7dcc7510 <line:921:3>
|   | `-TextComment 0x55dc7dcc74e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc7530 <col:4, col:32> Name="return"
|   | `-ParagraphComment 0x55dc7dcc7590 <col:11, col:32>
|   |   `-TextComment 0x55dc7dcc7560 <col:11, col:32> Text=" ID of current thread."
|   |-ParagraphComment 0x55dc7dcc75e0 <line:923:3>
|   | `-TextComment 0x55dc7dcc75b0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcc7600 <col:4, col:21> Text=" K-THREAD-013"
|   `-ParagraphComment 0x55dc7dcc7670 <line:924:1>
|     `-TextComment 0x55dc7dcc7640 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc101a0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:942:45> col:16 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55dc7dc10118 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55dc7dcc7c70 <line:928:3, line:941:1>
|   |-ParagraphComment 0x55dc7dcc7770 <line:928:3>
|   | `-TextComment 0x55dc7dcc7740 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc7790 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc77f0 <col:10, col:25>
|   |   `-TextComment 0x55dc7dcc77c0 <col:10, col:25> Text=" Abort a thread."
|   |-ParagraphComment 0x55dc7dcc7980 <line:930:3, line:935:38>
|   | |-TextComment 0x55dc7dcc7810 <line:930:3, col:47> Text=" This routine permanently stops execution of "
|   | |-InlineCommandComment 0x55dc7dcc7860 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="thread."
|   | |-TextComment 0x55dc7dcc7880 <col:58, col:77> Text=" The thread is taken"
|   | |-TextComment 0x55dc7dcc78a0 <line:931:3, col:73> Text=" off all kernel queues it is part of (i.e. the ready queue, the timeout"
|   | |-TextComment 0x55dc7dcc78c0 <line:932:3, col:75> Text=" queue, or a kernel object wait queue). However, any kernel resources the"
|   | |-TextComment 0x55dc7dcc78e0 <line:933:3, col:72> Text=" thread might currently own (such as mutexes or memory blocks) are not"
|   | |-TextComment 0x55dc7dcc7900 <line:934:3, col:77> Text=" released. It is the responsibility of the caller of this routine to ensure"
|   | `-TextComment 0x55dc7dcc7920 <line:935:3, col:38> Text=" all necessary cleanup is performed."
|   |-ParagraphComment 0x55dc7dcc79d0 <line:937:3>
|   | `-TextComment 0x55dc7dcc79a0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc79f0 <col:4, col:39> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcc7a80 <col:17, col:39>
|   |   `-TextComment 0x55dc7dcc7a50 <col:17, col:39> Text=" ID of thread to abort."
|   |-ParagraphComment 0x55dc7dcc7ad0 <line:939:3>
|   | `-TextComment 0x55dc7dcc7aa0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc7af0 <col:4, line:940:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcc7b70 <line:939:11, line:940:3>
|   |   |-TextComment 0x55dc7dcc7b20 <line:939:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcc7b40 <line:940:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcc7b90 <col:4, col:21> Text=" K-THREAD-012"
|   `-ParagraphComment 0x55dc7dcc7c00 <line:941:1>
|     `-TextComment 0x55dc7dcc7bd0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc10310 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:955:45> col:16 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55dc7dc10288 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55dc7dcc8040 <line:946:3, line:954:1>
|   |-ParagraphComment 0x55dc7dcc7d10 <line:946:3>
|   | `-TextComment 0x55dc7dcc7ce0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc7d30 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc7d90 <col:10, col:34>
|   |   `-TextComment 0x55dc7dcc7d60 <col:10, col:34> Text=" Start an inactive thread"
|   |-ParagraphComment 0x55dc7dcc7e30 <line:948:3, line:950:9>
|   | |-TextComment 0x55dc7dcc7db0 <line:948:3, col:73> Text=" If a thread was created with K_FOREVER in the delay parameter, it will"
|   | |-TextComment 0x55dc7dcc7dd0 <line:949:3, col:69> Text=" not be added to the scheduling queue until this function is called"
|   | `-TextComment 0x55dc7dcc7df0 <line:950:3, col:9> Text=" on it."
|   |-ParagraphComment 0x55dc7dcc7e80 <line:952:3>
|   | `-TextComment 0x55dc7dcc7e50 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc7ea0 <col:4, line:953:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcc7f50 <line:952:17, line:953:3>
|   |   |-TextComment 0x55dc7dcc7f00 <line:952:17, col:32> Text=" thread to start"
|   |   `-TextComment 0x55dc7dcc7f20 <line:953:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcc7f70 <col:4, col:21> Text=" K-THREAD-011"
|   `-ParagraphComment 0x55dc7dcc7fe0 <line:954:1>
|     `-TextComment 0x55dc7dcc7fb0 <col:1> Text=" "
|-RecordDecl 0x55dc7dc103e8 <line:964:1, line:977:1> line:964:8 struct _static_thread_data definition
| |-FieldDecl 0x55dc7dc104b8 <line:965:2, col:19> col:19 init_thread 'struct k_thread *'
| |-FieldDecl 0x55dc7dc10510 <line:966:2, col:20> col:20 init_stack 'k_thread_stack_t *'
| |-FieldDecl 0x55dc7dc10570 <line:967:2, col:15> col:15 init_stack_size 'unsigned int'
| |-FieldDecl 0x55dc7dc105c8 <line:968:2, col:19> col:19 init_entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-FieldDecl 0x55dc7dc10628 <line:969:2, col:8> col:8 init_p1 'void *'
| |-FieldDecl 0x55dc7dc10688 <line:970:2, col:8> col:8 init_p2 'void *'
| |-FieldDecl 0x55dc7dc106e8 <line:971:2, col:8> col:8 init_p3 'void *'
| |-FieldDecl 0x55dc7dc10748 <line:972:2, col:6> col:6 init_prio 'int'
| |-FieldDecl 0x55dc7dc107a0 <line:973:2, col:8> col:8 init_options 'u32_t':'unsigned int'
| |-FieldDecl 0x55dc7dc107f8 <line:974:2, col:8> col:8 init_delay 's32_t':'int'
| |-FieldDecl 0x55dc7dc108e0 <line:975:2, col:25> col:9 init_abort 'void (*)(void)'
| `-FieldDecl 0x55dc7dc10940 <line:976:2, col:14> col:14 init_name 'const char *'
|-FunctionDecl 0x55dc7dc10b38 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1053:51> col:15 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x55dc7dc10a28 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55dc7dcc8550 <line:1044:3, line:1052:1>
|   |-ParagraphComment 0x55dc7dcc80e0 <line:1044:3>
|   | `-TextComment 0x55dc7dcc80b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc8100 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc8160 <col:10, col:34>
|   |   `-TextComment 0x55dc7dcc8130 <col:10, col:34> Text=" Get a thread's priority."
|   |-ParagraphComment 0x55dc7dcc8200 <line:1046:3, col:39>
|   | |-TextComment 0x55dc7dcc8180 <col:3, col:37> Text=" This routine gets the priority of "
|   | `-InlineCommandComment 0x55dc7dcc81d0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x55dc7dcc8250 <line:1048:3>
|   | `-TextComment 0x55dc7dcc8220 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc8270 <col:4, col:55> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcc8300 <col:17, col:55>
|   |   `-TextComment 0x55dc7dcc82d0 <col:17, col:55> Text=" ID of thread whose priority is needed."
|   |-ParagraphComment 0x55dc7dcc8350 <line:1050:3>
|   | `-TextComment 0x55dc7dcc8320 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc8370 <col:4, line:1051:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcc8450 <line:1050:11, line:1051:3>
|   |   |-TextComment 0x55dc7dcc83a0 <line:1050:11, col:23> Text=" Priority of "
|   |   |-InlineCommandComment 0x55dc7dcc83f0 <col:24, col:25> Name="a" RenderEmphasized Arg[0]="thread."
|   |   `-TextComment 0x55dc7dcc8410 <line:1051:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcc8470 <col:4, col:21> Text=" K-THREAD-009"
|   `-ParagraphComment 0x55dc7dcc84e0 <line:1052:1>
|     `-TextComment 0x55dc7dcc84b0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc10da0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1083:62> col:16 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x55dc7dc10c18 <col:38, col:46> col:46 thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55dc7dc10c90 <col:54, col:58> col:58 prio 'int'
| `-FullComment 0x55dc7dcc8f20 <line:1056:3, line:1082:1>
|   |-ParagraphComment 0x55dc7dcc85f0 <line:1056:3>
|   | `-TextComment 0x55dc7dcc85c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc8610 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc8670 <col:10, col:34>
|   |   `-TextComment 0x55dc7dcc8640 <col:10, col:34> Text=" Set a thread's priority."
|   |-ParagraphComment 0x55dc7dcc8710 <line:1058:3, col:54>
|   | |-TextComment 0x55dc7dcc8690 <col:3, col:52> Text=" This routine immediately changes the priority of "
|   | `-InlineCommandComment 0x55dc7dcc86e0 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x55dc7dcc8800 <line:1060:3, line:1061:10>
|   | |-TextComment 0x55dc7dcc8730 <line:1060:3, col:64> Text=" Rescheduling can occur immediately depending on the priority "
|   | |-InlineCommandComment 0x55dc7dcc8780 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x55dc7dcc87a0 <col:74, col:76> Text=" is"
|   | `-TextComment 0x55dc7dcc87c0 <line:1061:3, col:10> Text=" set to:"
|   |-ParagraphComment 0x55dc7dcc8900 <line:1063:3, line:1064:75>
|   | |-TextComment 0x55dc7dcc8820 <line:1063:3, col:71> Text=" - If its priority is raised above the priority of the caller of this"
|   | |-TextComment 0x55dc7dcc8840 <line:1064:3, col:44> Text=" function, and the caller is preemptible, "
|   | |-InlineCommandComment 0x55dc7dcc8890 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55dc7dcc88b0 <col:54, col:75> Text=" will be scheduled in."
|   |-ParagraphComment 0x55dc7dcc89a0 <line:1066:3, line:1068:41>
|   | |-TextComment 0x55dc7dcc8920 <line:1066:3, col:75> Text=" - If the caller operates on itself, it lowers its priority below that of"
|   | |-TextComment 0x55dc7dcc8940 <line:1067:3, col:76> Text=" other threads in the system, and the caller is preemptible, the thread of"
|   | `-TextComment 0x55dc7dcc8960 <line:1068:3, col:41> Text=" highest priority will be scheduled in."
|   |-ParagraphComment 0x55dc7dcc8a40 <line:1070:3, line:1072:20>
|   | |-TextComment 0x55dc7dcc89c0 <line:1070:3, col:74> Text=" Priority can be assigned in the range of -CONFIG_NUM_COOP_PRIORITIES to"
|   | |-TextComment 0x55dc7dcc89e0 <line:1071:3, col:76> Text=" CONFIG_NUM_PREEMPT_PRIORITIES-1, where -CONFIG_NUM_COOP_PRIORITIES is the"
|   | `-TextComment 0x55dc7dcc8a00 <line:1072:3, col:20> Text=" highest priority."
|   |-ParagraphComment 0x55dc7dcc8a90 <line:1074:3>
|   | `-TextComment 0x55dc7dcc8a60 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc8ab0 <col:4, line:1075:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcc8b60 <line:1074:17, line:1075:3>
|   |   |-TextComment 0x55dc7dcc8b10 <line:1074:17, col:58> Text=" ID of thread whose priority is to be set."
|   |   `-TextComment 0x55dc7dcc8b30 <line:1075:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc8b80 <col:4, col:28> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcc8c10 <col:15, col:28>
|   |   `-TextComment 0x55dc7dcc8be0 <col:15, col:28> Text=" New priority."
|   |-ParagraphComment 0x55dc7dcc8c60 <line:1077:3>
|   | `-TextComment 0x55dc7dcc8c30 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc8c80 <col:4, line:1078:57> Name="warning"
|   | `-ParagraphComment 0x55dc7dcc8d00 <line:1077:12, line:1078:57>
|   |   |-TextComment 0x55dc7dcc8cb0 <line:1077:12, col:73> Text=" Changing the priority of a thread currently involved in mutex"
|   |   `-TextComment 0x55dc7dcc8cd0 <line:1078:3, col:57> Text=" priority inheritance may result in undefined behavior."
|   |-ParagraphComment 0x55dc7dcc8d50 <line:1080:3>
|   | `-TextComment 0x55dc7dcc8d20 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc8d70 <col:4, line:1081:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcc8df0 <line:1080:11, line:1081:3>
|   |   |-TextComment 0x55dc7dcc8da0 <line:1080:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcc8dc0 <line:1081:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcc8e10 <col:4, col:21> Text=" K-THREAD-008"
|   `-ParagraphComment 0x55dc7dcc8e80 <line:1082:1>
|     `-TextComment 0x55dc7dcc8e50 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc11620 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1213:47> col:16 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55dc7dc10e88 <col:33, col:41> col:41 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55dc7dcc9610 <line:1196:3, line:1212:1>
|   |-ParagraphComment 0x55dc7dcc8fc0 <line:1196:3>
|   | `-TextComment 0x55dc7dcc8f90 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc8fe0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc9040 <col:10, col:27>
|   |   `-TextComment 0x55dc7dcc9010 <col:10, col:27> Text=" Suspend a thread."
|   |-ParagraphComment 0x55dc7dcc9250 <line:1198:3, line:1204:48>
|   | |-TextComment 0x55dc7dcc9060 <line:1198:3, col:58> Text=" This routine prevents the kernel scheduler from making "
|   | |-InlineCommandComment 0x55dc7dcc90b0 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x55dc7dcc90d0 <line:1199:3, col:56> Text=" the current thread. All other internal operations on "
|   | |-InlineCommandComment 0x55dc7dcc9120 <col:57, col:58> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x55dc7dcc9140 <col:66, col:69> Text=" are"
|   | |-TextComment 0x55dc7dcc9160 <line:1200:3, col:68> Text=" still performed; for example, kernel objects it is waiting on are"
|   | |-TextComment 0x55dc7dcc9180 <line:1201:3, col:55> Text=" still handed to it.  Note that any existing timeouts"
|   | |-TextComment 0x55dc7dcc91a0 <line:1202:3, col:66> Text=" (e.g. k_sleep(), or a timeout argument to k_sem_take() et. al.)"
|   | |-TextComment 0x55dc7dcc91c0 <line:1203:3, col:62> Text=" will be canceled.  On resume, the thread will begin running"
|   | `-TextComment 0x55dc7dcc91e0 <line:1204:3, col:48> Text=" immediately and return from the blocked call."
|   |-ParagraphComment 0x55dc7dcc9320 <line:1206:3, col:64>
|   | |-TextComment 0x55dc7dcc9270 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x55dc7dcc92c0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55dc7dcc92e0 <col:16, col:64> Text=" is already suspended, the routine has no effect."
|   |-ParagraphComment 0x55dc7dcc9370 <line:1208:3>
|   | `-TextComment 0x55dc7dcc9340 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc9390 <col:4, col:41> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcc9420 <col:17, col:41>
|   |   `-TextComment 0x55dc7dcc93f0 <col:17, col:41> Text=" ID of thread to suspend."
|   |-ParagraphComment 0x55dc7dcc9470 <line:1210:3>
|   | `-TextComment 0x55dc7dcc9440 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc9490 <col:4, line:1211:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcc9510 <line:1210:11, line:1211:3>
|   |   |-TextComment 0x55dc7dcc94c0 <line:1210:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcc94e0 <line:1211:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcc9530 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x55dc7dcc95a0 <line:1212:1>
|     `-TextComment 0x55dc7dcc9570 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc11790 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1228:46> col:16 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55dc7dc11708 <col:32, col:40> col:40 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55dc7dcc9be0 <line:1216:3, line:1227:1>
|   |-ParagraphComment 0x55dc7dcc96b0 <line:1216:3>
|   | `-TextComment 0x55dc7dcc9680 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc96d0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc9730 <col:10, col:36>
|   |   `-TextComment 0x55dc7dcc9700 <col:10, col:36> Text=" Resume a suspended thread."
|   |-ParagraphComment 0x55dc7dcc9820 <line:1218:3, line:1219:50>
|   | |-TextComment 0x55dc7dcc9750 <line:1218:3, col:52> Text=" This routine allows the kernel scheduler to make "
|   | |-InlineCommandComment 0x55dc7dcc97a0 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x55dc7dcc97c0 <col:62, col:73> Text=" the current"
|   | `-TextComment 0x55dc7dcc97e0 <line:1219:3, col:50> Text=" thread, when it is next eligible for that role."
|   |-ParagraphComment 0x55dc7dcc98f0 <line:1221:3, col:70>
|   | |-TextComment 0x55dc7dcc9840 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x55dc7dcc9890 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55dc7dcc98b0 <col:16, col:70> Text=" is not currently suspended, the routine has no effect."
|   |-ParagraphComment 0x55dc7dcc9940 <line:1223:3>
|   | `-TextComment 0x55dc7dcc9910 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcc9960 <col:4, col:40> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcc99f0 <col:17, col:40>
|   |   `-TextComment 0x55dc7dcc99c0 <col:17, col:40> Text=" ID of thread to resume."
|   |-ParagraphComment 0x55dc7dcc9a40 <line:1225:3>
|   | `-TextComment 0x55dc7dcc9a10 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc9a60 <col:4, line:1226:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcc9ae0 <line:1225:11, line:1226:3>
|   |   |-TextComment 0x55dc7dcc9a90 <line:1225:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcc9ab0 <line:1226:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcc9b00 <col:4, col:21> Text=" K-THREAD-006"
|   `-ParagraphComment 0x55dc7dcc9b70 <line:1227:1>
|     `-TextComment 0x55dc7dcc9b40 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc11a00 <line:1258:1, col:57> col:13 k_sched_time_slice_set 'void (s32_t, int)' extern
| |-ParmVarDecl 0x55dc7dc11878 <col:36, col:42> col:42 slice 's32_t':'int'
| |-ParmVarDecl 0x55dc7dc118f0 <col:49, col:53> col:53 prio 'int'
| `-FullComment 0x55dc7dcca530 <line:1231:3, line:1256:14>
|   |-ParagraphComment 0x55dc7dcc9c80 <line:1231:3>
|   | `-TextComment 0x55dc7dcc9c50 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcc9ca0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55dc7dcc9d00 <col:10, col:44>
|   |   `-TextComment 0x55dc7dcc9cd0 <col:10, col:44> Text=" Set time-slicing period and scope."
|   |-ParagraphComment 0x55dc7dcc9d70 <line:1233:3, line:1234:23>
|   | |-TextComment 0x55dc7dcc9d20 <line:1233:3, col:72> Text=" This routine specifies how the scheduler will perform time slicing of"
|   | `-TextComment 0x55dc7dcc9d40 <line:1234:3, col:23> Text=" preemptible threads."
|   |-ParagraphComment 0x55dc7dcc9f60 <line:1236:3, line:1240:74>
|   | |-TextComment 0x55dc7dcc9d90 <line:1236:3, col:27> Text=" To enable time slicing, "
|   | |-InlineCommandComment 0x55dc7dcc9de0 <col:28, col:29> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x55dc7dcc9e00 <col:36, col:67> Text=" must be non-zero. The scheduler"
|   | |-TextComment 0x55dc7dcc9e20 <line:1237:3, col:69> Text=" ensures that no thread runs for more than the specified time limit"
|   | |-TextComment 0x55dc7dcc9e40 <line:1238:3, col:71> Text=" before other threads of that priority are given a chance to execute."
|   | |-TextComment 0x55dc7dcc9e60 <line:1239:3, col:44> Text=" Any thread whose priority is higher than "
|   | |-InlineCommandComment 0x55dc7dcc9eb0 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="prio"
|   | |-TextComment 0x55dc7dcc9ed0 <col:52, col:72> Text=" is exempted, and may"
|   | `-TextComment 0x55dc7dcc9ef0 <line:1240:3, col:74> Text=" execute as long as desired without being preempted due to time slicing."
|   |-ParagraphComment 0x55dc7dcca020 <line:1242:3, line:1245:32>
|   | |-TextComment 0x55dc7dcc9f80 <line:1242:3, col:80> Text=" Time slicing only limits the maximum amount of time a thread may continuously"
|   | |-TextComment 0x55dc7dcc9fa0 <line:1243:3, col:74> Text=" execute. Once the scheduler selects a thread for execution, there is no"
|   | |-TextComment 0x55dc7dcc9fc0 <line:1244:3, col:79> Text=" minimum guaranteed time the thread will execute before threads of greater or"
|   | `-TextComment 0x55dc7dcc9fe0 <line:1245:3, col:32> Text=" equal priority are scheduled."
|   |-ParagraphComment 0x55dc7dcca0c0 <line:1247:3, line:1249:46>
|   | |-TextComment 0x55dc7dcca040 <line:1247:3, col:68> Text=" When the current thread is the only one of that priority eligible"
|   | |-TextComment 0x55dc7dcca060 <line:1248:3, col:71> Text=" for execution, this routine has no effect; the thread is immediately"
|   | `-TextComment 0x55dc7dcca080 <line:1249:3, col:46> Text=" rescheduled after the slice period expires."
|   |-ParagraphComment 0x55dc7dcca210 <line:1251:3, col:65>
|   | |-TextComment 0x55dc7dcca0e0 <col:3, col:36> Text=" To disable timeslicing, set both "
|   | |-InlineCommandComment 0x55dc7dcca130 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x55dc7dcca150 <col:45, col:49> Text=" and "
|   | |-InlineCommandComment 0x55dc7dcca1a0 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="prio"
|   | `-TextComment 0x55dc7dcca1c0 <col:57, col:65> Text=" to zero."
|   |-ParagraphComment 0x55dc7dcca260 <line:1253:3>
|   | `-TextComment 0x55dc7dcca230 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcca280 <col:4, line:1254:3> [in] implicitly Param="slice" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcca330 <line:1253:16, line:1254:3>
|   |   |-TextComment 0x55dc7dcca2e0 <line:1253:16, col:60> Text=" Maximum time slice length (in milliseconds)."
|   |   `-TextComment 0x55dc7dcca300 <line:1254:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcca350 <col:4, col:71> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcca3e0 <col:15, col:71>
|   |   `-TextComment 0x55dc7dcca3b0 <col:15, col:71> Text=" Highest thread priority level eligible for time slicing."
|   |-ParagraphComment 0x55dc7dcca430 <line:1256:3>
|   | `-TextComment 0x55dc7dcca400 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcca450 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dcca4b0 <col:11, col:14>
|       `-TextComment 0x55dc7dcca480 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dc11bc8 <line:1278:1, col:29> col:13 k_is_in_isr 'bool (void)' extern
| `-FullComment 0x55dc7dcca980 <line:1268:3, line:1276:37>
|   |-ParagraphComment 0x55dc7dcca5d0 <line:1268:3>
|   | `-TextComment 0x55dc7dcca5a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcca5f0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x55dc7dcca650 <col:10, col:58>
|   |   `-TextComment 0x55dc7dcca620 <col:10, col:58> Text=" Determine if code is running at interrupt level."
|   |-ParagraphComment 0x55dc7dcca6c0 <line:1270:3, line:1271:36>
|   | |-TextComment 0x55dc7dcca670 <line:1270:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x55dc7dcca690 <line:1271:3, col:36> Text=" whether it is a thread or an ISR."
|   |-ParagraphComment 0x55dc7dcca710 <line:1273:3>
|   | `-TextComment 0x55dc7dcca6e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcca730 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcca790 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcca760 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcca7e0 <line:1275:3>
|   | `-TextComment 0x55dc7dcca7b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcca800 <col:4, line:1276:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcca880 <line:1275:11, line:1276:3>
|   |   |-TextComment 0x55dc7dcca830 <line:1275:11, col:40> Text=" false if invoked by a thread."
|   |   `-TextComment 0x55dc7dcca850 <line:1276:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcca8a0 <col:4, col:37> Name="return"
|     `-ParagraphComment 0x55dc7dcca920 <col:11, col:37>
|       `-TextComment 0x55dc7dcca8f0 <col:11, col:37> Text=" true if invoked by an ISR."
|-FunctionDecl 0x55dc7dc11d30 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1296:39> col:15 k_is_preempt_thread 'int (void)' static inline
| `-FullComment 0x55dc7dccae90 <line:1281:3, line:1294:55>
|   |-ParagraphComment 0x55dc7dccaa20 <line:1281:3>
|   | `-TextComment 0x55dc7dcca9f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccaa40 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x55dc7dccaaa0 <col:10, col:63>
|   |   `-TextComment 0x55dc7dccaa70 <col:10, col:63> Text=" Determine if code is running in a preemptible thread."
|   |-ParagraphComment 0x55dc7dccab40 <line:1283:3, line:1285:52>
|   | |-TextComment 0x55dc7dccaac0 <line:1283:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | |-TextComment 0x55dc7dccaae0 <line:1284:3, col:78> Text=" whether it can be preempted by another thread. The routine returns a 'true'"
|   | `-TextComment 0x55dc7dccab00 <line:1285:3, col:52> Text=" value if all of the following conditions are met:"
|   |-ParagraphComment 0x55dc7dccabe0 <line:1287:3, line:1289:45>
|   | |-TextComment 0x55dc7dccab60 <line:1287:3, col:49> Text=" - The code is running in a thread, not at ISR."
|   | |-TextComment 0x55dc7dccab80 <line:1288:3, col:55> Text=" - The thread's priority is in the preemptible range."
|   | `-TextComment 0x55dc7dccaba0 <line:1289:3, col:45> Text=" - The thread has not locked the scheduler."
|   |-ParagraphComment 0x55dc7dccac30 <line:1291:3>
|   | `-TextComment 0x55dc7dccac00 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccac50 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dccacb0 <col:9, col:31>
|   |   `-TextComment 0x55dc7dccac80 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dccad00 <line:1293:3>
|   | `-TextComment 0x55dc7dccacd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccad20 <col:4, line:1294:3> Name="return"
|   | `-ParagraphComment 0x55dc7dccada0 <line:1293:11, line:1294:3>
|   |   |-TextComment 0x55dc7dccad50 <line:1293:11, col:61> Text=" 0 if invoked by an ISR or by a cooperative thread."
|   |   `-TextComment 0x55dc7dccad70 <line:1294:3> Text=" "
|   `-BlockCommandComment 0x55dc7dccadc0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55dc7dccae20 <col:11, col:55>
|       `-TextComment 0x55dc7dccadf0 <col:11, col:55> Text=" Non-zero if invoked by a preemptible thread."
|-FunctionDecl 0x55dc7dc11e88 <line:1309:1, line:1314:1> line:1309:20 k_is_pre_kernel 'bool (void)' static inline
| |-CompoundStmt 0x55dc7dc120d8 <line:1310:1, line:1314:1>
| | |-DeclStmt 0x55dc7dc11fa8 <line:1311:2, col:31>
| | | `-VarDecl 0x55dc7dc11f38 parent 0x55dc7da66918 <col:2, col:14> col:14 used z_sys_post_kernel 'bool' extern
| | `-ReturnStmt 0x55dc7dc12038 <line:1313:2, col:10>
| |   `-ImplicitCastExpr 0x55dc7dc12020 <col:9, col:10> 'bool' <IntegralToBoolean>
| |     `-UnaryOperator 0x55dc7dc12000 <col:9, col:10> 'int' prefix '!'
| |       `-ImplicitCastExpr 0x55dc7dc11fe8 <col:10> 'bool' <LValueToRValue>
| |         `-DeclRefExpr 0x55dc7dc11fc0 <col:10> 'bool' lvalue Var 0x55dc7dc11f38 'z_sys_post_kernel' 'bool'
| `-FullComment 0x55dc7dccb2c0 <line:1299:3, line:1307:67>
|   |-ParagraphComment 0x55dc7dccaf30 <line:1299:3>
|   | `-TextComment 0x55dc7dccaf00 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccaf50 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x55dc7dccafb0 <col:10, col:64>
|   |   `-TextComment 0x55dc7dccaf80 <col:10, col:64> Text=" Test whether startup is in the before-main-task phase."
|   |-ParagraphComment 0x55dc7dccb020 <line:1301:3, line:1302:62>
|   | |-TextComment 0x55dc7dccafd0 <line:1301:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x55dc7dccaff0 <line:1302:3, col:62> Text=" whether it being invoked before the kernel is fully active."
|   |-ParagraphComment 0x55dc7dccb070 <line:1304:3>
|   | `-TextComment 0x55dc7dccb040 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccb090 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dccb0f0 <col:9, col:31>
|   |   `-TextComment 0x55dc7dccb0c0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dccb140 <line:1306:3>
|   | `-TextComment 0x55dc7dccb110 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccb160 <col:4, line:1307:3> Name="return"
|   | `-ParagraphComment 0x55dc7dccb1e0 <line:1306:11, line:1307:3>
|   |   |-TextComment 0x55dc7dccb190 <line:1306:11, col:60> Text=" true if invoked before post-kernel initialization"
|   |   `-TextComment 0x55dc7dccb1b0 <line:1307:3> Text=" "
|   `-BlockCommandComment 0x55dc7dccb200 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x55dc7dccb260 <col:11, col:67>
|       `-TextComment 0x55dc7dccb230 <col:11, col:67> Text=" false if invoked during/after post-kernel initialization"
|-FunctionDecl 0x55dc7dc12188 <line:1343:1, col:30> col:13 k_sched_lock 'void (void)' extern
| `-FullComment 0x55dc7dccb790 <line:1326:3, line:1341:14>
|   |-ParagraphComment 0x55dc7dccb360 <line:1326:3>
|   | `-TextComment 0x55dc7dccb330 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccb380 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55dc7dccb3e0 <col:10, col:29>
|   |   `-TextComment 0x55dc7dccb3b0 <col:10, col:29> Text=" Lock the scheduler."
|   |-ParagraphComment 0x55dc7dccb4d0 <line:1328:3, line:1332:78>
|   | |-TextComment 0x55dc7dccb400 <line:1328:3, col:75> Text=" This routine prevents the current thread from being preempted by another"
|   | |-TextComment 0x55dc7dccb420 <line:1329:3, col:75> Text=" thread by instructing the scheduler to treat it as a cooperative thread."
|   | |-TextComment 0x55dc7dccb440 <line:1330:3, col:74> Text=" If the thread subsequently performs an operation that makes it unready,"
|   | |-TextComment 0x55dc7dccb460 <line:1331:3, col:72> Text=" it will be context switched out in the normal manner. When the thread"
|   | `-TextComment 0x55dc7dccb480 <line:1332:3, col:78> Text=" again becomes the current thread, its non-preemptible status is maintained."
|   |-ParagraphComment 0x55dc7dccb520 <line:1334:3, col:42>
|   | `-TextComment 0x55dc7dccb4f0 <col:3, col:42> Text=" This routine can be called recursively."
|   |-ParagraphComment 0x55dc7dccb570 <line:1336:3>
|   | `-TextComment 0x55dc7dccb540 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccb590 <col:4, line:1339:68> Name="note"
|   | `-ParagraphComment 0x55dc7dccb660 <line:1336:9, line:1339:68>
|   |   |-TextComment 0x55dc7dccb5c0 <line:1336:9, col:68> Text=" k_sched_lock() and k_sched_unlock() should normally be used"
|   |   |-TextComment 0x55dc7dccb5e0 <line:1337:3, col:72> Text=" when the operation being performed can be safely interrupted by ISRs."
|   |   |-TextComment 0x55dc7dccb600 <line:1338:3, col:70> Text=" However, if the amount of processing involved is very small, better"
|   |   `-TextComment 0x55dc7dccb620 <line:1339:3, col:68> Text=" performance may be obtained by using irq_lock() and irq_unlock()."
|   |-ParagraphComment 0x55dc7dccb6b0 <line:1341:3>
|   | `-TextComment 0x55dc7dccb680 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dccb6d0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dccb730 <col:11, col:14>
|       `-TextComment 0x55dc7dccb700 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dc122e8 <line:1354:1, col:32> col:13 k_sched_unlock 'void (void)' extern
| `-FullComment 0x55dc7dccba70 <line:1346:3, line:1352:14>
|   |-ParagraphComment 0x55dc7dccb830 <line:1346:3>
|   | `-TextComment 0x55dc7dccb800 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccb850 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x55dc7dccb8b0 <col:10, col:31>
|   |   `-TextComment 0x55dc7dccb880 <col:10, col:31> Text=" Unlock the scheduler."
|   |-ParagraphComment 0x55dc7dccb950 <line:1348:3, line:1350:41>
|   | |-TextComment 0x55dc7dccb8d0 <line:1348:3, col:73> Text=" This routine reverses the effect of a previous call to k_sched_lock()."
|   | |-TextComment 0x55dc7dccb8f0 <line:1349:3, col:77> Text=" A thread must call the routine once for each time it called k_sched_lock()"
|   | `-TextComment 0x55dc7dccb910 <line:1350:3, col:41> Text=" before the thread becomes preemptible."
|   |-ParagraphComment 0x55dc7dccb9a0 <line:1352:3>
|   | `-TextComment 0x55dc7dccb970 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dccb9c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dccba20 <col:11, col:14>
|       `-TextComment 0x55dc7dccb9f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dc12458 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1371:52> col:16 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x55dc7dc123d0 <col:41, col:47> col:47 value 'void *'
| `-FullComment 0x55dc7dccc000 <line:1357:3, line:1370:1>
|   |-ParagraphComment 0x55dc7dccbb10 <line:1357:3>
|   | `-TextComment 0x55dc7dccbae0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccbb30 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dccbb90 <col:10, col:43>
|   |   `-TextComment 0x55dc7dccbb60 <col:10, col:43> Text=" Set current thread's custom data."
|   |-ParagraphComment 0x55dc7dccbc30 <line:1359:3, col:71>
|   | |-TextComment 0x55dc7dccbbb0 <col:3, col:63> Text=" This routine sets the custom data for the current thread to "
|   | |-TextComment 0x55dc7dccbbd0 <col:64> Text="@"
|   | `-TextComment 0x55dc7dccbbf0 <col:65, col:71> Text=" value."
|   |-ParagraphComment 0x55dc7dccbcd0 <line:1361:3, line:1363:44>
|   | |-TextComment 0x55dc7dccbc50 <line:1361:3, col:72> Text=" Custom data is not used by the kernel itself, and is freely available"
|   | |-TextComment 0x55dc7dccbc70 <line:1362:3, col:68> Text=" for a thread to use as it sees fit. It can be used as a framework"
|   | `-TextComment 0x55dc7dccbc90 <line:1363:3, col:44> Text=" upon which to build thread-local storage."
|   |-ParagraphComment 0x55dc7dccbd20 <line:1365:3>
|   | `-TextComment 0x55dc7dccbcf0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dccbd40 <col:4, col:38> [in] implicitly Param="value" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dccbdd0 <col:16, col:38>
|   |   `-TextComment 0x55dc7dccbda0 <col:16, col:38> Text=" New custom data value."
|   |-ParagraphComment 0x55dc7dccbe20 <line:1367:3>
|   | `-TextComment 0x55dc7dccbdf0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccbe40 <col:4, col:14> Name="return"
|   | `-ParagraphComment 0x55dc7dccbea0 <col:11, col:14>
|   |   `-TextComment 0x55dc7dccbe70 <col:11, col:14> Text=" N/A"
|   |-ParagraphComment 0x55dc7dccbef0 <line:1369:3>
|   | `-TextComment 0x55dc7dccbec0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dccbf10 <col:4, col:21> Text=" K-THREAD-016"
|   `-ParagraphComment 0x55dc7dccbf80 <line:1370:1>
|     `-TextComment 0x55dc7dccbf50 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc12630 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1381:46> col:17 k_thread_custom_data_get 'void *(void)' static inline
| `-FullComment 0x55dc7dccc350 <line:1374:3, line:1380:1>
|   |-ParagraphComment 0x55dc7dccc0a0 <line:1374:3>
|   | `-TextComment 0x55dc7dccc070 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccc0c0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dccc120 <col:10, col:43>
|   |   `-TextComment 0x55dc7dccc0f0 <col:10, col:43> Text=" Get current thread's custom data."
|   |-ParagraphComment 0x55dc7dccc170 <line:1376:3, col:63>
|   | `-TextComment 0x55dc7dccc140 <col:3, col:63> Text=" This routine returns the custom data for the current thread."
|   |-ParagraphComment 0x55dc7dccc1c0 <line:1378:3>
|   | `-TextComment 0x55dc7dccc190 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccc1e0 <col:4, line:1379:3> Name="return"
|   | `-ParagraphComment 0x55dc7dccc260 <line:1378:11, line:1379:3>
|   |   |-TextComment 0x55dc7dccc210 <line:1378:11, col:37> Text=" Current custom data value."
|   |   `-TextComment 0x55dc7dccc230 <line:1379:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dccc280 <col:4, col:21> Text=" K-THREAD-007"
|   `-ParagraphComment 0x55dc7dccc2f0 <line:1380:1>
|     `-TextComment 0x55dc7dccc2c0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc12898 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1396:69> col:15 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x55dc7dc12708 <col:33, col:41> col:41 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55dc7dc12780 <col:52, col:64> col:64 value 'const char *'
| `-FullComment 0x55dc7dccc930 <line:1384:3, line:1394:39>
|   |-ParagraphComment 0x55dc7dccc3f0 <line:1384:3>
|   | `-TextComment 0x55dc7dccc3c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccc410 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55dc7dccc470 <col:10, col:33>
|   |   `-TextComment 0x55dc7dccc440 <col:10, col:33> Text=" Set current thread name"
|   |-ParagraphComment 0x55dc7dccc4e0 <line:1386:3, line:1387:25>
|   | |-TextComment 0x55dc7dccc490 <line:1386:3, col:75> Text=" Set the name of the thread to be used when THREAD_MONITOR is enabled for"
|   | `-TextComment 0x55dc7dccc4b0 <line:1387:3, col:25> Text=" tracing and debugging."
|   |-ParagraphComment 0x55dc7dccc530 <line:1389:3>
|   | `-TextComment 0x55dc7dccc500 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dccc550 <col:4, line:1390:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dccc600 <line:1389:20, line:1390:3>
|   |   |-TextComment 0x55dc7dccc5b0 <line:1389:20, col:73> Text=" Thread to set name, or NULL to set the current thread"
|   |   `-TextComment 0x55dc7dccc5d0 <line:1390:3> Text=" "
|   `-ParamCommandComment 0x55dc7dccc620 <col:4, line:1394:39> [in] implicitly Param="value" ParamIndex=1
|     `-ParagraphComment 0x55dc7dccc8c0 <line:1390:16, line:1394:39>
|       |-TextComment 0x55dc7dccc680 <line:1390:16, col:27> Text=" Name string"
|       |-TextComment 0x55dc7dccc6a0 <line:1391:3> Text=" "
|       |-InlineCommandComment 0x55dc7dccc6f0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55dc7dccc710 <col:11, col:23> Text=" 0 on success"
|       |-TextComment 0x55dc7dccc730 <line:1392:3> Text=" "
|       |-InlineCommandComment 0x55dc7dccc750 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55dc7dccc770 <col:11, col:59> Text=" -EFAULT Memory access error with supplied string"
|       |-TextComment 0x55dc7dccc790 <line:1393:3> Text=" "
|       |-InlineCommandComment 0x55dc7dccc7b0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55dc7dccc7d0 <col:11, col:63> Text=" -ENOSYS Thread name configuration option not enabled"
|       |-TextComment 0x55dc7dccc7f0 <line:1394:3> Text=" "
|       |-InlineCommandComment 0x55dc7dccc810 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x55dc7dccc830 <col:11, col:39> Text=" -EINVAL Thread name too long"
|-FunctionDecl 0x55dc7dc12a98 <line:1406:1, col:48> col:13 k_thread_name_get 'const char *(k_tid_t)'
| |-ParmVarDecl 0x55dc7dc12988 <col:31, col:39> col:39 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55dc7dcccc60 <line:1399:3, line:1404:60>
|   |-ParagraphComment 0x55dc7dccc9d0 <line:1399:3>
|   | `-TextComment 0x55dc7dccc9a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccc9f0 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x55dc7dccca50 <col:10, col:25>
|   |   `-TextComment 0x55dc7dccca20 <col:10, col:25> Text=" Get thread name"
|   |-ParagraphComment 0x55dc7dcccaa0 <line:1401:3, col:27>
|   | `-TextComment 0x55dc7dccca70 <col:3, col:27> Text=" Get the name of a thread"
|   |-ParagraphComment 0x55dc7dcccaf0 <line:1403:3>
|   | `-TextComment 0x55dc7dcccac0 <col:3> Text=" "
|   `-ParamCommandComment 0x55dc7dcccb10 <col:4, line:1404:60> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x55dc7dcccc10 <line:1403:20, line:1404:60>
|       |-TextComment 0x55dc7dcccb70 <line:1403:20, col:29> Text=" Thread ID"
|       |-TextComment 0x55dc7dcccb90 <line:1404:3> Text=" "
|       |-InlineCommandComment 0x55dc7dcccbb0 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x55dc7dcccbd0 <col:11, col:60> Text=" Thread name, or NULL if configuration not enabled"
|-FunctionDecl 0x55dc7dc12d98 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1420:17> line:1419:15 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x55dc7dc12b78 <col:34, col:42> col:42 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55dc7dc12bf0 <col:53, col:59> col:59 buf 'char *'
| |-ParmVarDecl 0x55dc7dc12c60 <line:1420:6, col:13> col:13 size 'size_t':'unsigned long'
| `-FullComment 0x55dc7dccd250 <line:1409:3, line:1417:20>
|   |-ParagraphComment 0x55dc7dcccd00 <line:1409:3>
|   | `-TextComment 0x55dc7dccccd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcccd20 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55dc7dcccd80 <col:10, col:53>
|   |   `-TextComment 0x55dc7dcccd50 <col:10, col:53> Text=" Copy the thread name into a supplied buffer"
|   |-ParagraphComment 0x55dc7dcccdd0 <line:1411:3>
|   | `-TextComment 0x55dc7dcccda0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcccdf0 <col:4, line:1412:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcccea0 <line:1411:20, line:1412:3>
|   |   |-TextComment 0x55dc7dccce50 <line:1411:20, col:53> Text=" Thread to obtain name information"
|   |   `-TextComment 0x55dc7dccce70 <line:1412:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcccec0 <col:4, line:1413:3> [in] implicitly Param="buf" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcccf70 <line:1412:14, line:1413:3>
|   |   |-TextComment 0x55dc7dcccf20 <line:1412:14, col:32> Text=" Destination buffer"
|   |   `-TextComment 0x55dc7dcccf40 <line:1413:3> Text=" "
|   `-ParamCommandComment 0x55dc7dcccf90 <col:4, line:1417:20> [in] implicitly Param="size" ParamIndex=2
|     `-ParagraphComment 0x55dc7dccd200 <line:1413:15, line:1417:20>
|       |-TextComment 0x55dc7dcccff0 <line:1413:15, col:38> Text=" Destination buffer size"
|       |-TextComment 0x55dc7dccd010 <line:1414:3> Text=" "
|       |-InlineCommandComment 0x55dc7dccd030 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55dc7dccd050 <col:11, col:47> Text=" -ENOSPC Destination buffer too small"
|       |-TextComment 0x55dc7dccd070 <line:1415:3> Text=" "
|       |-InlineCommandComment 0x55dc7dccd090 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55dc7dccd0b0 <col:11, col:38> Text=" -EFAULT Memory access error"
|       |-TextComment 0x55dc7dccd0d0 <line:1416:3> Text=" "
|       |-InlineCommandComment 0x55dc7dccd0f0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55dc7dccd110 <col:11, col:50> Text=" -ENOSYS Thread name feature not enabled"
|       |-TextComment 0x55dc7dccd130 <line:1417:3> Text=" "
|       |-InlineCommandComment 0x55dc7dccd150 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x55dc7dccd170 <col:11, col:20> Text=" 0 Success"
|-FunctionDecl 0x55dc7dc12f18 <line:1430:1, col:49> col:13 k_thread_state_str 'const char *(k_tid_t)'
| |-ParmVarDecl 0x55dc7dc12e88 <col:32, col:40> col:40 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55dc7dccd580 <line:1423:3, line:1428:61>
|   |-ParagraphComment 0x55dc7dccd2f0 <line:1423:3>
|   | `-TextComment 0x55dc7dccd2c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccd310 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55dc7dccd370 <col:10, col:33>
|   |   `-TextComment 0x55dc7dccd340 <col:10, col:33> Text=" Get thread state string"
|   |-ParagraphComment 0x55dc7dccd3c0 <line:1425:3, col:45>
|   | `-TextComment 0x55dc7dccd390 <col:3, col:45> Text=" Get the human friendly thread state string"
|   |-ParagraphComment 0x55dc7dccd410 <line:1427:3>
|   | `-TextComment 0x55dc7dccd3e0 <col:3> Text=" "
|   `-ParamCommandComment 0x55dc7dccd430 <col:4, line:1428:61> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x55dc7dccd530 <line:1427:20, line:1428:61>
|       |-TextComment 0x55dc7dccd490 <line:1427:20, col:29> Text=" Thread ID"
|       |-TextComment 0x55dc7dccd4b0 <line:1428:3> Text=" "
|       |-InlineCommandComment 0x55dc7dccd4d0 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x55dc7dccd4f0 <col:11, col:61> Text=" Thread state string, empty if no state flag is set"
|-RecordDecl 0x55dc7dc13198 prev 0x55dc7dc013d0 <line:1517:1, line:1545:1> line:1517:8 struct k_timer definition
| |-FullComment 0x55dc7dccd6d0 <line:1514:3, col:24>
| | `-ParagraphComment 0x55dc7dccd6a0 <col:3, col:24>
| |   |-TextComment 0x55dc7dccd5f0 <col:3> Text=" "
| |   |-InlineCommandComment 0x55dc7dccd640 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55dc7dccd660 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55dc7dc13240 <line:1523:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| |-FieldDecl 0x55dc7dc13298 <line:1526:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x55dc7dc13530 <line:1529:2, col:41> col:9 expiry_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x55dc7dc15698 <line:1532:2, col:39> col:9 stop_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x55dc7dc156f0 <line:1535:2, col:8> col:8 period 's32_t':'int'
| |-FieldDecl 0x55dc7dc15748 <line:1538:2, col:8> col:8 status 'u32_t':'unsigned int'
| `-FieldDecl 0x55dc7dc157a8 <line:1541:2, col:8> col:8 referenced user_data 'void *'
|-TypedefDecl 0x55dc7dc15998 <line:1587:1, col:55> col:16 referenced k_timer_expiry_t 'void (*)(struct k_timer *)'
| |-PointerType 0x55dc7dc134d0 'void (*)(struct k_timer *)'
| | `-ParenType 0x55dc7dc13470 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x55dc7dc13430 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x55dc7da66970 'void'
| |     `-PointerType 0x55dc7dc13340 'struct k_timer *'
| |       `-ElaboratedType 0x55dc7dc132e0 'struct k_timer' sugar
| |         `-RecordType 0x55dc7dc01460 'struct k_timer'
| |           `-Record 0x55dc7dc13198 'k_timer'
| `-FullComment 0x55dc7dccdb60 <line:1576:3, line:1585:14>
|   |-ParagraphComment 0x55dc7dccd770 <line:1576:3>
|   | `-TextComment 0x55dc7dccd740 <col:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dccd790 <col:4, col:29> Text=" k_timer_expiry_t"
|   |-ParagraphComment 0x55dc7dccd800 <line:1577:3>
|   | `-TextComment 0x55dc7dccd7d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccd820 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55dc7dccd880 <col:10, col:37>
|   |   `-TextComment 0x55dc7dccd850 <col:10, col:37> Text=" Timer expiry function type."
|   |-ParagraphComment 0x55dc7dccd920 <line:1579:3, line:1581:54>
|   | |-TextComment 0x55dc7dccd8a0 <line:1579:3, col:78> Text=" A timer's expiry function is executed by the system clock interrupt handler"
|   | |-TextComment 0x55dc7dccd8c0 <line:1580:3, col:76> Text=" each time the timer expires. The expiry function is optional, and is only"
|   | `-TextComment 0x55dc7dccd8e0 <line:1581:3, col:54> Text=" invoked if the timer has been initialized with one."
|   |-ParagraphComment 0x55dc7dccd970 <line:1583:3>
|   | `-TextComment 0x55dc7dccd940 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dccd990 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dccda20 <col:16, col:37>
|   |   `-TextComment 0x55dc7dccd9f0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55dc7dccda70 <line:1585:3>
|   | `-TextComment 0x55dc7dccda40 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dccda90 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dccdaf0 <col:11, col:14>
|       `-TextComment 0x55dc7dccdac0 <col:11, col:14> Text=" N/A"
|-TypedefDecl 0x55dc7dc15ad8 <line:1602:1, col:53> col:16 referenced k_timer_stop_t 'void (*)(struct k_timer *)'
| |-PointerType 0x55dc7dc134d0 'void (*)(struct k_timer *)'
| | `-ParenType 0x55dc7dc13470 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x55dc7dc13430 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x55dc7da66970 'void'
| |     `-PointerType 0x55dc7dc13340 'struct k_timer *'
| |       `-ElaboratedType 0x55dc7dc132e0 'struct k_timer' sugar
| |         `-RecordType 0x55dc7dc01460 'struct k_timer'
| |           `-Record 0x55dc7dc13198 'k_timer'
| `-FullComment 0x55dc7dcce010 <line:1590:3, line:1600:14>
|   |-ParagraphComment 0x55dc7dccdc00 <line:1590:3>
|   | `-TextComment 0x55dc7dccdbd0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dccdc20 <col:4, col:27> Text=" k_timer_stop_t"
|   |-ParagraphComment 0x55dc7dccdc90 <line:1591:3>
|   | `-TextComment 0x55dc7dccdc60 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccdcb0 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x55dc7dccdd10 <col:10, col:35>
|   |   `-TextComment 0x55dc7dccdce0 <col:10, col:35> Text=" Timer stop function type."
|   |-ParagraphComment 0x55dc7dccddd0 <line:1593:3, line:1596:24>
|   | |-TextComment 0x55dc7dccdd30 <line:1593:3, col:75> Text=" A timer's stop function is executed if the timer is stopped prematurely."
|   | |-TextComment 0x55dc7dccdd50 <line:1594:3, col:71> Text=" The function runs in the context of the thread that stops the timer."
|   | |-TextComment 0x55dc7dccdd70 <line:1595:3, col:75> Text=" The stop function is optional, and is only invoked if the timer has been"
|   | `-TextComment 0x55dc7dccdd90 <line:1596:3, col:24> Text=" initialized with one."
|   |-ParagraphComment 0x55dc7dccde20 <line:1598:3>
|   | `-TextComment 0x55dc7dccddf0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dccde40 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dccded0 <col:16, col:37>
|   |   `-TextComment 0x55dc7dccdea0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55dc7dccdf20 <line:1600:3>
|   | `-TextComment 0x55dc7dccdef0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dccdf40 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dccdfa0 <col:11, col:14>
|       `-TextComment 0x55dc7dccdf70 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dc15e00 <line:1630:1, line:1632:27> line:1630:13 k_timer_init 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' extern
| |-ParmVarDecl 0x55dc7dc15bb0 <col:26, col:42> col:42 timer 'struct k_timer *'
| |-ParmVarDecl 0x55dc7dc15c40 <line:1631:5, col:22> col:22 expiry_fn 'k_timer_expiry_t':'void (*)(struct k_timer *)'
| |-ParmVarDecl 0x55dc7dc15cd0 <line:1632:5, col:20> col:20 stop_fn 'k_timer_stop_t':'void (*)(struct k_timer *)'
| `-FullComment 0x55dc7dcce560 <line:1620:3, line:1628:14>
|   |-ParagraphComment 0x55dc7dcce0b0 <line:1620:3>
|   | `-TextComment 0x55dc7dcce080 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcce0d0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55dc7dcce130 <col:10, col:29>
|   |   `-TextComment 0x55dc7dcce100 <col:10, col:29> Text=" Initialize a timer."
|   |-ParagraphComment 0x55dc7dcce180 <line:1622:3, col:60>
|   | `-TextComment 0x55dc7dcce150 <col:3, col:60> Text=" This routine initializes a timer, prior to its first use."
|   |-ParagraphComment 0x55dc7dcce1d0 <line:1624:3>
|   | `-TextComment 0x55dc7dcce1a0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcce1f0 <col:4, line:1625:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcce2a0 <line:1624:16, line:1625:3>
|   |   |-TextComment 0x55dc7dcce250 <line:1624:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x55dc7dcce270 <line:1625:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcce2c0 <col:4, line:1626:3> [in] implicitly Param="expiry_fn" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcce370 <line:1625:20, line:1626:3>
|   |   |-TextComment 0x55dc7dcce320 <line:1625:20, col:67> Text=" Function to invoke each time the timer expires."
|   |   `-TextComment 0x55dc7dcce340 <line:1626:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcce390 <col:4, col:77> [in] implicitly Param="stop_fn" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcce420 <col:18, col:77>
|   |   `-TextComment 0x55dc7dcce3f0 <col:18, col:77> Text="   Function to invoke if the timer is stopped while running."
|   |-ParagraphComment 0x55dc7dcce470 <line:1628:3>
|   | `-TextComment 0x55dc7dcce440 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcce490 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dcce4f0 <col:11, col:14>
|       `-TextComment 0x55dc7dcce4c0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dc15f08 <line:1634:1, col:30> col:13 k_trigger_update 'void ()' extern
|-FunctionDecl 0x55dc7dc16210 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1653:37> line:1652:16 k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc16000 <col:30, col:46> col:46 timer 'struct k_timer *'
| |-ParmVarDecl 0x55dc7dc16070 <line:1653:9, col:15> col:15 duration 's32_t':'int'
| |-ParmVarDecl 0x55dc7dc160e0 <col:25, col:31> col:31 period 's32_t':'int'
| `-FullComment 0x55dc7dcceb80 <line:1637:3, line:1650:14>
|   |-ParagraphComment 0x55dc7dcce600 <line:1637:3>
|   | `-TextComment 0x55dc7dcce5d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcce620 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x55dc7dcce680 <col:10, col:24>
|   |   `-TextComment 0x55dc7dcce650 <col:10, col:24> Text=" Start a timer."
|   |-ParagraphComment 0x55dc7dcce6f0 <line:1639:3, line:1640:71>
|   | |-TextComment 0x55dc7dcce6a0 <line:1639:3, col:72> Text=" This routine starts a timer, and resets its status to zero. The timer"
|   | `-TextComment 0x55dc7dcce6c0 <line:1640:3, col:71> Text=" begins counting down using the specified duration and period values."
|   |-ParagraphComment 0x55dc7dcce790 <line:1642:3, line:1644:44>
|   | |-TextComment 0x55dc7dcce710 <line:1642:3, col:68> Text=" Attempting to start a timer that is already running is permitted."
|   | |-TextComment 0x55dc7dcce730 <line:1643:3, col:73> Text=" The timer's status is reset to zero and the timer begins counting down"
|   | `-TextComment 0x55dc7dcce750 <line:1644:3, col:44> Text=" using the new duration and period values."
|   |-ParagraphComment 0x55dc7dcce7e0 <line:1646:3>
|   | `-TextComment 0x55dc7dcce7b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcce800 <col:4, line:1647:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcce8b0 <line:1646:16, line:1647:3>
|   |   |-TextComment 0x55dc7dcce860 <line:1646:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x55dc7dcce880 <line:1647:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcce8d0 <col:4, line:1648:3> [in] implicitly Param="duration" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcce990 <line:1647:19, line:1648:3>
|   |   |-TextComment 0x55dc7dcce940 <line:1647:19, col:61> Text="  Initial timer duration (in milliseconds)."
|   |   `-TextComment 0x55dc7dcce960 <line:1648:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcce9b0 <col:4, col:51> [in] implicitly Param="period" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dccea40 <col:17, col:51>
|   |   `-TextComment 0x55dc7dccea10 <col:17, col:51> Text="    Timer period (in milliseconds)."
|   |-ParagraphComment 0x55dc7dccea90 <line:1650:3>
|   | `-TextComment 0x55dc7dccea60 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcceab0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dcceb10 <col:11, col:14>
|       `-TextComment 0x55dc7dcceae0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dc163a8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1671:50> col:16 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x55dc7dc16320 <col:29, col:45> col:45 timer 'struct k_timer *'
| `-FullComment 0x55dc7dccf130 <line:1656:3, line:1669:14>
|   |-ParagraphComment 0x55dc7dccec20 <line:1656:3>
|   | `-TextComment 0x55dc7dccebf0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccec40 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x55dc7dcceca0 <col:10, col:23>
|   |   `-TextComment 0x55dc7dccec70 <col:10, col:23> Text=" Stop a timer."
|   |-ParagraphComment 0x55dc7dcced10 <line:1658:3, line:1659:43>
|   | |-TextComment 0x55dc7dccecc0 <line:1658:3, col:77> Text=" This routine stops a running timer prematurely. The timer's stop function,"
|   | `-TextComment 0x55dc7dccece0 <line:1659:3, col:43> Text=" if one exists, is invoked by the caller."
|   |-ParagraphComment 0x55dc7dcced80 <line:1661:3, line:1662:23>
|   | |-TextComment 0x55dc7dcced30 <line:1661:3, col:74> Text=" Attempting to stop a timer that is not running is permitted, but has no"
|   | `-TextComment 0x55dc7dcced50 <line:1662:3, col:23> Text=" effect on the timer."
|   |-ParagraphComment 0x55dc7dccedd0 <line:1664:3>
|   | `-TextComment 0x55dc7dcceda0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccedf0 <col:4, line:1665:48> Name="note"
|   | `-ParagraphComment 0x55dc7dcceef0 <line:1664:9, line:1665:48>
|   |   |-TextComment 0x55dc7dccee20 <line:1664:9, col:78> Text=" Can be called by ISRs.  The stop handler has to be callable from ISRs"
|   |   |-TextComment 0x55dc7dccee40 <line:1665:3, col:6> Text=" if "
|   |   |-InlineCommandComment 0x55dc7dccee90 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="k_timer_stop"
|   |   `-TextComment 0x55dc7dcceeb0 <col:22, col:48> Text=" is to be called from ISRs."
|   |-ParagraphComment 0x55dc7dccef40 <line:1667:3>
|   | `-TextComment 0x55dc7dccef10 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dccef60 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcceff0 <col:16, col:37>
|   |   `-TextComment 0x55dc7dccefc0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55dc7dccf040 <line:1669:3>
|   | `-TextComment 0x55dc7dccf010 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dccf060 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dccf0c0 <col:11, col:14>
|       `-TextComment 0x55dc7dccf090 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dc165a0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1685:57> col:17 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55dc7dc164a0 <col:36, col:52> col:52 timer 'struct k_timer *'
| `-FullComment 0x55dc7dccf540 <line:1674:3, line:1683:24>
|   |-ParagraphComment 0x55dc7dccf1d0 <line:1674:3>
|   | `-TextComment 0x55dc7dccf1a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccf1f0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x55dc7dccf250 <col:10, col:28>
|   |   `-TextComment 0x55dc7dccf220 <col:10, col:28> Text=" Read timer status."
|   |-ParagraphComment 0x55dc7dccf2c0 <line:1676:3, line:1677:49>
|   | |-TextComment 0x55dc7dccf270 <line:1676:3, col:77> Text=" This routine reads the timer's status, which indicates the number of times"
|   | `-TextComment 0x55dc7dccf290 <line:1677:3, col:49> Text=" it has expired since its status was last read."
|   |-ParagraphComment 0x55dc7dccf310 <line:1679:3, col:58>
|   | `-TextComment 0x55dc7dccf2e0 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x55dc7dccf360 <line:1681:3>
|   | `-TextComment 0x55dc7dccf330 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dccf380 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dccf410 <col:16, col:37>
|   |   `-TextComment 0x55dc7dccf3e0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55dc7dccf460 <line:1683:3>
|   | `-TextComment 0x55dc7dccf430 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dccf480 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x55dc7dccf4e0 <col:11, col:24>
|       `-TextComment 0x55dc7dccf4b0 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x55dc7dc16f98 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1704:58> col:17 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55dc7dc16f10 <col:37, col:53> col:53 timer 'struct k_timer *'
| `-FullComment 0x55dc7dccfa20 <line:1688:3, line:1702:24>
|   |-ParagraphComment 0x55dc7dccf5e0 <line:1688:3>
|   | `-TextComment 0x55dc7dccf5b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccf600 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dccf660 <col:10, col:49>
|   |   `-TextComment 0x55dc7dccf630 <col:10, col:49> Text=" Synchronize thread to timer expiration."
|   |-ParagraphComment 0x55dc7dccf720 <line:1690:3, line:1693:73>
|   | |-TextComment 0x55dc7dccf680 <line:1690:3, col:78> Text=" This routine blocks the calling thread until the timer's status is non-zero"
|   | |-TextComment 0x55dc7dccf6a0 <line:1691:3, col:76> Text=" (indicating that it has expired at least once since it was last examined)"
|   | |-TextComment 0x55dc7dccf6c0 <line:1692:3, col:68> Text=" or the timer is stopped. If the timer status is already non-zero,"
|   | `-TextComment 0x55dc7dccf6e0 <line:1693:3, col:73> Text=" or the timer is already stopped, the caller continues without waiting."
|   |-ParagraphComment 0x55dc7dccf770 <line:1695:3, col:58>
|   | `-TextComment 0x55dc7dccf740 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x55dc7dccf7e0 <line:1697:3, line:1698:20>
|   | |-TextComment 0x55dc7dccf790 <line:1697:3, col:74> Text=" This routine must not be used by interrupt handlers, since they are not"
|   | `-TextComment 0x55dc7dccf7b0 <line:1698:3, col:20> Text=" allowed to block."
|   |-ParagraphComment 0x55dc7dccf830 <line:1700:3>
|   | `-TextComment 0x55dc7dccf800 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dccf850 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dccf8e0 <col:16, col:37>
|   |   `-TextComment 0x55dc7dccf8b0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55dc7dccf930 <line:1702:3>
|   | `-TextComment 0x55dc7dccf900 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dccf950 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x55dc7dccf9b0 <col:11, col:24>
|       `-TextComment 0x55dc7dccf980 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x55dc7dc17170 <line:1706:1, col:58> col:14 used z_timeout_remaining 's32_t (struct _timeout *)' extern
| `-ParmVarDecl 0x55dc7dc17068 <col:34, col:51> col:51 timeout 'struct _timeout *'
|-FunctionDecl 0x55dc7dc172f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1718:60> col:17 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55dc7dc17270 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x55dc7dccfde0 <line:1709:3, line:1716:44>
|   |-ParagraphComment 0x55dc7dccfac0 <line:1709:3>
|   | `-TextComment 0x55dc7dccfa90 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccfae0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x55dc7dccfb40 <col:10, col:57>
|   |   `-TextComment 0x55dc7dccfb10 <col:10, col:57> Text=" Get time remaining before a timer next expires."
|   |-ParagraphComment 0x55dc7dccfbb0 <line:1711:3, line:1712:68>
|   | |-TextComment 0x55dc7dccfb60 <line:1711:3, col:74> Text=" This routine computes the (approximate) time remaining before a running"
|   | `-TextComment 0x55dc7dccfb80 <line:1712:3, col:68> Text=" timer next expires. If the timer is not running, it returns zero."
|   |-ParagraphComment 0x55dc7dccfc00 <line:1714:3>
|   | `-TextComment 0x55dc7dccfbd0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dccfc20 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dccfcb0 <col:16, col:37>
|   |   `-TextComment 0x55dc7dccfc80 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55dc7dccfd00 <line:1716:3>
|   | `-TextComment 0x55dc7dccfcd0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dccfd20 <col:4, col:44> Name="return"
|     `-ParagraphComment 0x55dc7dccfd80 <col:11, col:44>
|       `-TextComment 0x55dc7dccfd50 <col:11, col:44> Text=" Remaining time (in milliseconds)."
|-FunctionDecl 0x55dc7dc17450 <line:1720:1, line:1724:1> line:1720:21 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55dc7dc173c8 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x55dc7dc179d8 <line:1721:1, line:1724:1>
|   |-DeclStmt 0x55dc7dc176d0 <line:1722:2, col:58>
|   | `-VarDecl 0x55dc7dc17508 <col:2, col:57> col:14 used ticks 'const s32_t':'const int' cinit
|   |   `-CallExpr 0x55dc7dc176a0 <col:22, col:57> 's32_t':'int'
|   |     |-ImplicitCastExpr 0x55dc7dc17688 <col:22> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55dc7dc17568 <col:22> 's32_t (struct _timeout *)' Function 0x55dc7dc17170 'z_timeout_remaining' 's32_t (struct _timeout *)'
|   |     `-UnaryOperator 0x55dc7dc17608 <col:42, col:50> 'struct _timeout *' prefix '&'
|   |       `-MemberExpr 0x55dc7dc175d0 <col:43, col:50> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x55dc7dc13240
|   |         `-ImplicitCastExpr 0x55dc7dc175b8 <col:43> 'struct k_timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x55dc7dc17590 <col:43> 'struct k_timer *' lvalue ParmVar 0x55dc7dc173c8 'timer' 'struct k_timer *'
|   `-ReturnStmt 0x55dc7dc17990 <line:1723:2, col:61>
|     `-ConditionalOperator 0x55dc7dc17908 <col:9, col:61> 'unsigned int'
|       |-ParenExpr 0x55dc7dc17770 <col:9, col:19> 'int'
|       | `-BinaryOperator 0x55dc7dc17748 <col:10, col:18> 'int' '>'
|       |   |-ImplicitCastExpr 0x55dc7dc17730 <col:10> 's32_t':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x55dc7dc176e8 <col:10> 'const s32_t':'const int' lvalue Var 0x55dc7dc17508 'ticks' 'const s32_t':'const int'
|       |   `-IntegerLiteral 0x55dc7dc17710 <col:18> 'int' 0
|       |-CStyleCastExpr 0x55dc7dc178c0 <col:23, col:57> 'u32_t':'unsigned int' <IntegralCast>
|       | `-CallExpr 0x55dc7dc17850 <col:30, col:57> 'u64_t':'unsigned long long'
|       |   |-ImplicitCastExpr 0x55dc7dc17838 <col:30> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55dc7dc17790 <col:30> 'u64_t (u64_t)' Function 0x55dc7dbe7250 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
|       |   `-ImplicitCastExpr 0x55dc7dc17898 <col:52> 'u64_t':'unsigned long long' <IntegralCast>
|       |     `-ImplicitCastExpr 0x55dc7dc17880 <col:52> 's32_t':'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x55dc7dc177b8 <col:52> 'const s32_t':'const int' lvalue Var 0x55dc7dc17508 'ticks' 'const s32_t':'const int'
|       `-IntegerLiteral 0x55dc7dc178e8 <col:61> 'unsigned int' 0
|-FunctionDecl 0x55dc7dc17bb0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1740:76> col:16 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x55dc7dc17a20 <col:38, col:54> col:54 timer 'struct k_timer *'
| |-ParmVarDecl 0x55dc7dc17a98 <col:61, col:67> col:67 user_data 'void *'
| `-FullComment 0x55dc7dcd03f0 <line:1727:3, line:1738:14>
|   |-ParagraphComment 0x55dc7dccfe80 <line:1727:3>
|   | `-TextComment 0x55dc7dccfe50 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dccfea0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x55dc7dccff00 <col:10, col:52>
|   |   `-TextComment 0x55dc7dccfed0 <col:10, col:52> Text=" Associate user-specific data with a timer."
|   |-ParagraphComment 0x55dc7dcd0070 <line:1729:3, line:1730:9>
|   | |-TextComment 0x55dc7dccff20 <line:1729:3, col:28> Text=" This routine records the "
|   | |-InlineCommandComment 0x55dc7dccff70 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="user_data"
|   | |-TextComment 0x55dc7dccff90 <col:41, col:50> Text=" with the "
|   | |-InlineCommandComment 0x55dc7dccffe0 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="timer,"
|   | |-TextComment 0x55dc7dcd0000 <col:60, col:75> Text=" to be retrieved"
|   | `-TextComment 0x55dc7dcd0020 <line:1730:3, col:9> Text=" later."
|   |-ParagraphComment 0x55dc7dcd00e0 <line:1732:3, line:1733:73>
|   | |-TextComment 0x55dc7dcd0090 <line:1732:3, col:78> Text=" It can be used e.g. in a timer handler shared across multiple subsystems to"
|   | `-TextComment 0x55dc7dcd00b0 <line:1733:3, col:73> Text=" retrieve data specific to the subsystem this timer is associated with."
|   |-ParagraphComment 0x55dc7dcd0130 <line:1735:3>
|   | `-TextComment 0x55dc7dcd0100 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd0150 <col:4, line:1736:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd0200 <line:1735:16, line:1736:3>
|   |   |-TextComment 0x55dc7dcd01b0 <line:1735:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x55dc7dcd01d0 <line:1736:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd0220 <col:4, col:58> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcd02b0 <col:20, col:58>
|   |   `-TextComment 0x55dc7dcd0280 <col:20, col:58> Text=" User data to associate with the timer."
|   |-ParagraphComment 0x55dc7dcd0300 <line:1738:3>
|   | `-TextComment 0x55dc7dcd02d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd0320 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dcd0380 <col:11, col:14>
|       `-TextComment 0x55dc7dcd0350 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dc17db8 <line:1745:1, line:1749:1> line:1745:20 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x55dc7dc17cb0 <col:49, col:65> col:65 used timer 'struct k_timer *'
| |-ParmVarDecl 0x55dc7dc17d28 <line:1746:13, col:19> col:19 used user_data 'void *'
| |-CompoundStmt 0x55dc7dc183a8 <line:1747:1, line:1749:1>
| | `-BinaryOperator 0x55dc7dc18358 <line:1748:2, col:21> 'void *' '='
| |   |-MemberExpr 0x55dc7dc182e0 <col:2, col:9> 'void *' lvalue ->user_data 0x55dc7dc157a8
| |   | `-ImplicitCastExpr 0x55dc7dc17e90 <col:2> 'struct k_timer *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55dc7dc17e68 <col:2> 'struct k_timer *' lvalue ParmVar 0x55dc7dc17cb0 'timer' 'struct k_timer *'
| |   `-ImplicitCastExpr 0x55dc7dc18340 <col:21> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x55dc7dc18318 <col:21> 'void *' lvalue ParmVar 0x55dc7dc17d28 'user_data' 'void *'
| `-FullComment 0x55dc7dcd04e0 <line:1743:3, col:12>
|   `-ParagraphComment 0x55dc7dcd04b0 <col:3, col:12>
|     |-TextComment 0x55dc7dcd0460 <col:3> Text=" "
|     `-InlineCommandComment 0x55dc7dcd0480 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55dc7dc184f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1758:60> col:17 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x55dc7dc183e8 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x55dc7dcd0820 <line:1752:3, line:1756:25>
|   |-ParagraphComment 0x55dc7dcd0580 <line:1752:3>
|   | `-TextComment 0x55dc7dcd0550 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd05a0 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd0600 <col:10, col:55>
|   |   `-TextComment 0x55dc7dcd05d0 <col:10, col:55> Text=" Retrieve the user-specific data from a timer."
|   |-ParagraphComment 0x55dc7dcd0650 <line:1754:3>
|   | `-TextComment 0x55dc7dcd0620 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd0670 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd0700 <col:16, col:37>
|   |   `-TextComment 0x55dc7dcd06d0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55dc7dcd0750 <line:1756:3>
|   | `-TextComment 0x55dc7dcd0720 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd0770 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x55dc7dcd07d0 <col:11, col:25>
|       `-TextComment 0x55dc7dcd07a0 <col:11, col:25> Text=" The user data."
|-FunctionDecl 0x55dc7dc18658 <line:1760:1, line:1763:1> line:1760:21 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x55dc7dc185c8 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x55dc7dc18838 <line:1761:1, line:1763:1>
|   `-ReturnStmt 0x55dc7dc18790 <line:1762:2, col:16>
|     `-ImplicitCastExpr 0x55dc7dc18778 <col:9, col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55dc7dc18740 <col:9, col:16> 'void *' lvalue ->user_data 0x55dc7dc157a8
|         `-ImplicitCastExpr 0x55dc7dc18728 <col:9> 'struct k_timer *' <LValueToRValue>
|           `-DeclRefExpr 0x55dc7dc18700 <col:9> 'struct k_timer *' lvalue ParmVar 0x55dc7dc185c8 'timer' 'struct k_timer *'
|-FunctionDecl 0x55dc7dc188e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1787:34> col:17 used k_uptime_get 's64_t (void)' static inline
| `-FullComment 0x55dc7dcd0d10 <line:1773:3, line:1785:42>
|   |-ParagraphComment 0x55dc7dcd08c0 <line:1773:3>
|   | `-TextComment 0x55dc7dcd0890 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd08e0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd0950 <col:10, col:28>
|   |   `-TextComment 0x55dc7dcd0920 <col:10, col:28> Text=" Get system uptime."
|   |-ParagraphComment 0x55dc7dcd09c0 <line:1775:3, line:1776:19>
|   | |-TextComment 0x55dc7dcd0970 <line:1775:3, col:65> Text=" This routine returns the elapsed time since the system booted,"
|   | `-TextComment 0x55dc7dcd0990 <line:1776:3, col:19> Text=" in milliseconds."
|   |-ParagraphComment 0x55dc7dcd0a10 <line:1778:3>
|   | `-TextComment 0x55dc7dcd09e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd0a30 <col:4, line:1783:13> Name="note"
|   | `-ParagraphComment 0x55dc7dcd0be0 <line:1779:3, line:1783:13>
|   |   |-TextComment 0x55dc7dcd0a60 <line:1779:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x55dc7dcd0ab0 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x55dc7dcd0ad0 <line:1780:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x55dc7dcd0af0 <line:1781:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x55dc7dcd0b10 <line:1782:3, col:61> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option."
|   |   |-TextComment 0x55dc7dcd0b30 <line:1783:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x55dc7dcd0b80 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x55dc7dcd0c30 <line:1785:3>
|   | `-TextComment 0x55dc7dcd0c00 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd0c50 <col:4, col:42> Name="return"
|     `-ParagraphComment 0x55dc7dcd0cb0 <col:11, col:42>
|       `-TextComment 0x55dc7dcd0c80 <col:11, col:42> Text=" Current uptime in milliseconds."
|-FunctionDecl 0x55dc7dc18a40 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1805:1> line:1799:32 k_enable_sys_clock_always_on 'int (void)' static inline
| |-CompoundStmt 0x55dc7dc18be8 <line:1800:1, line:1805:1>
| | |-CompoundStmt 0x55dc7dc18b40 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x55dc7dc18b50 </vagrant/ext/zephyros/zephyr/include/kernel.h:1802:57>
| | `-ReturnStmt 0x55dc7dc18ba0 <line:1804:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-UnaryOperator 0x55dc7dc18b80 </vagrant/ext/zephyros/zephyr/include/kernel.h:1804:9, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     `-IntegerLiteral 0x55dc7dc18b60 <col:16> 'int' 0
| |-DeprecatedAttr 0x55dc7dc18ae0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x55dc7dcd0fb0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1790:3, line:1796:56>
|   |-ParagraphComment 0x55dc7dcd0db0 <line:1790:3>
|   | `-TextComment 0x55dc7dcd0d80 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd0dd0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd0e30 <col:10, col:51>
|   |   `-TextComment 0x55dc7dcd0e00 <col:10, col:51> Text=" Enable clock always on in tickless kernel"
|   |-ParagraphComment 0x55dc7dcd0ed0 <line:1792:3, line:1794:11>
|   | |-TextComment 0x55dc7dcd0e50 <line:1792:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|   | |-TextComment 0x55dc7dcd0e70 <line:1793:3, col:66> Text=" functionality has been migrated to the SYSTEM_CLOCK_SLOPPY_IDLE"
|   | `-TextComment 0x55dc7dcd0e90 <line:1794:3, col:11> Text=" kconfig."
|   `-ParagraphComment 0x55dc7dcd0f70 <line:1796:3, col:56>
|     |-TextComment 0x55dc7dcd0ef0 <col:3> Text=" "
|     |-InlineCommandComment 0x55dc7dcd0f10 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55dc7dcd0f30 <col:11, col:56> Text=" prev_status Previous status of always on flag"
|-FunctionDecl 0x55dc7dc18ca0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1820:1> line:1816:33 k_disable_sys_clock_always_on 'void (void)' static inline
| |-CompoundStmt 0x55dc7dc18de8 <line:1817:1, line:1820:1>
| | |-CompoundStmt 0x55dc7dc18da0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | `-NullStmt 0x55dc7dc18db0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1819:57>
| |-DeprecatedAttr 0x55dc7dc18d40 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x55dc7dcd11b0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1809:3, line:1813:11>
|   |-ParagraphComment 0x55dc7dcd1050 <line:1809:3>
|   | `-TextComment 0x55dc7dcd1020 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd1070 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd10d0 <col:10, col:52>
|   |   `-TextComment 0x55dc7dcd10a0 <col:10, col:52> Text=" Disable clock always on in tickless kernel"
|   `-ParagraphComment 0x55dc7dcd1170 <line:1811:3, line:1813:11>
|     |-TextComment 0x55dc7dcd10f0 <line:1811:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|     |-TextComment 0x55dc7dcd1110 <line:1812:3, col:63> Text=" functionality has been migrated to the SYS_CLOCK_SLOPPY_IDLE"
|     `-TextComment 0x55dc7dcd1130 <line:1813:3, col:11> Text=" kconfig."
|-FunctionDecl 0x55dc7dc18e98 <line:1844:1, line:1847:1> line:1844:21 k_uptime_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x55dc7dc19078 <line:1845:1, line:1847:1>
| | `-ReturnStmt 0x55dc7dc19030 <line:1846:2, col:29>
| |   `-CStyleCastExpr 0x55dc7dc19008 <col:9, col:29> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7dc18fd0 <col:16, col:29> 's64_t':'long long'
| |       `-ImplicitCastExpr 0x55dc7dc18fb8 <col:16> 's64_t (*)(void)' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x55dc7dc18f38 <col:16> 's64_t (void)' Function 0x55dc7dc188e0 'k_uptime_get' 's64_t (void)'
| `-FullComment 0x55dc7dcd1720 <line:1824:3, line:1842:66>
|   |-ParagraphComment 0x55dc7dcd1250 <line:1824:3>
|   | `-TextComment 0x55dc7dcd1220 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd1270 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd12d0 <col:10, col:45>
|   |   `-TextComment 0x55dc7dcd12a0 <col:10, col:45> Text=" Get system uptime (32-bit version)."
|   |-ParagraphComment 0x55dc7dcd1340 <line:1826:3, line:1827:16>
|   | |-TextComment 0x55dc7dcd12f0 <line:1826:3, col:65> Text=" This routine returns the lower 32 bits of the system uptime in"
|   | `-TextComment 0x55dc7dcd1310 <line:1827:3, col:16> Text=" milliseconds."
|   |-ParagraphComment 0x55dc7dcd1430 <line:1829:3, line:1833:38>
|   | |-TextComment 0x55dc7dcd1360 <line:1829:3, col:67> Text=" Because correct conversion requires full precision of the system"
|   | |-TextComment 0x55dc7dcd1380 <line:1830:3, col:69> Text=" clock there is no benefit to using this over k_uptime_get() unless"
|   | |-TextComment 0x55dc7dcd13a0 <line:1831:3, col:69> Text=" you know the application will never run long enough for the system"
|   | |-TextComment 0x55dc7dcd13c0 <line:1832:3, col:68> Text=" clock to approach 2^32 ticks.  Calls to this function may involve"
|   | `-TextComment 0x55dc7dcd13e0 <line:1833:3, col:38> Text=" interrupt blocking and 64-bit math."
|   |-ParagraphComment 0x55dc7dcd1480 <line:1835:3>
|   | `-TextComment 0x55dc7dcd1450 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd14a0 <col:4, line:1840:13> Name="note"
|   | `-ParagraphComment 0x55dc7dcd15f0 <line:1836:3, line:1840:13>
|   |   |-TextComment 0x55dc7dcd14d0 <line:1836:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x55dc7dcd14f0 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x55dc7dcd1510 <line:1837:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x55dc7dcd1530 <line:1838:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x55dc7dcd1550 <line:1839:3, col:60> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option"
|   |   |-TextComment 0x55dc7dcd1570 <line:1840:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x55dc7dcd1590 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x55dc7dcd1640 <line:1842:3>
|   | `-TextComment 0x55dc7dcd1610 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd1660 <col:4, col:66> Name="return"
|     `-ParagraphComment 0x55dc7dcd16c0 <col:11, col:66>
|       `-TextComment 0x55dc7dcd1690 <col:11, col:66> Text=" The low 32 bits of the current uptime, in milliseconds."
|-FunctionDecl 0x55dc7dc19200 <line:1860:1, line:1869:1> line:1860:21 used k_uptime_delta 's64_t (s64_t *)' static inline
| |-ParmVarDecl 0x55dc7dc190f8 <col:36, col:43> col:43 used reftime 's64_t *'
| |-CompoundStmt 0x55dc7dc19858 <line:1861:1, line:1869:1>
| | |-DeclStmt 0x55dc7dc19508 <line:1862:2, col:21>
| | | |-VarDecl 0x55dc7dc19420 <col:2, col:8> col:8 used uptime 's64_t':'long long'
| | | `-VarDecl 0x55dc7dc19490 <col:2, col:16> col:16 used delta 's64_t':'long long'
| | |-BinaryOperator 0x55dc7dc195b0 <line:1864:2, col:24> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x55dc7dc19520 <col:2> 's64_t':'long long' lvalue Var 0x55dc7dc19420 'uptime' 's64_t':'long long'
| | | `-CallExpr 0x55dc7dc19588 <col:11, col:24> 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x55dc7dc19570 <col:11> 's64_t (*)(void)' <FunctionToPointerDecay>
| | |     `-DeclRefExpr 0x55dc7dc19548 <col:11> 's64_t (void)' Function 0x55dc7dc188e0 'k_uptime_get' 's64_t (void)'
| | |-BinaryOperator 0x55dc7dc196e0 <line:1865:2, col:20> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x55dc7dc195d8 <col:2> 's64_t':'long long' lvalue Var 0x55dc7dc19490 'delta' 's64_t':'long long'
| | | `-BinaryOperator 0x55dc7dc196b8 <col:10, col:20> 'long long' '-'
| | |   |-ImplicitCastExpr 0x55dc7dc19688 <col:10> 's64_t':'long long' <LValueToRValue>
| | |   | `-DeclRefExpr 0x55dc7dc19600 <col:10> 's64_t':'long long' lvalue Var 0x55dc7dc19420 'uptime' 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x55dc7dc196a0 <col:19, col:20> 's64_t':'long long' <LValueToRValue>
| | |     `-UnaryOperator 0x55dc7dc19668 <col:19, col:20> 's64_t':'long long' lvalue prefix '*'
| | |       `-ImplicitCastExpr 0x55dc7dc19650 <col:20> 's64_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55dc7dc19628 <col:20> 's64_t *' lvalue ParmVar 0x55dc7dc190f8 'reftime' 's64_t *'
| | |-BinaryOperator 0x55dc7dc197a8 <line:1866:2, col:13> 's64_t':'long long' '='
| | | |-UnaryOperator 0x55dc7dc19748 <col:2, col:3> 's64_t':'long long' lvalue prefix '*'
| | | | `-ImplicitCastExpr 0x55dc7dc19730 <col:3> 's64_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55dc7dc19708 <col:3> 's64_t *' lvalue ParmVar 0x55dc7dc190f8 'reftime' 's64_t *'
| | | `-ImplicitCastExpr 0x55dc7dc19790 <col:13> 's64_t':'long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55dc7dc19768 <col:13> 's64_t':'long long' lvalue Var 0x55dc7dc19420 'uptime' 's64_t':'long long'
| | `-ReturnStmt 0x55dc7dc19810 <line:1868:2, col:9>
| |   `-ImplicitCastExpr 0x55dc7dc197f8 <col:9> 's64_t':'long long' <LValueToRValue>
| |     `-DeclRefExpr 0x55dc7dc197d0 <col:9> 's64_t':'long long' lvalue Var 0x55dc7dc19490 'delta' 's64_t':'long long'
| `-FullComment 0x55dc7dcd1b00 <line:1850:3, line:1858:24>
|   |-ParagraphComment 0x55dc7dcd17c0 <line:1850:3>
|   | `-TextComment 0x55dc7dcd1790 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd17e0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd1840 <col:10, col:27>
|   |   `-TextComment 0x55dc7dcd1810 <col:10, col:27> Text=" Get elapsed time."
|   |-ParagraphComment 0x55dc7dcd18b0 <line:1852:3, line:1853:50>
|   | |-TextComment 0x55dc7dcd1860 <line:1852:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x55dc7dcd1880 <line:1853:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x55dc7dcd1900 <line:1855:3>
|   | `-TextComment 0x55dc7dcd18d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd1920 <col:4, line:1856:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd19d0 <line:1855:18, line:1856:37>
|   |   |-TextComment 0x55dc7dcd1980 <line:1855:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x55dc7dcd19a0 <line:1856:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x55dc7dcd1a20 <line:1858:3>
|   | `-TextComment 0x55dc7dcd19f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd1a40 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x55dc7dcd1aa0 <col:11, col:24>
|       `-TextComment 0x55dc7dcd1a70 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x55dc7dc199a0 <line:1887:1, line:1890:1> line:1887:21 k_uptime_delta_32 'u32_t (s64_t *)' static inline
| |-ParmVarDecl 0x55dc7dc198a0 <col:39, col:46> col:46 used reftime 's64_t *'
| |-CompoundStmt 0x55dc7dc19bd8 <line:1888:1, line:1890:1>
| | `-ReturnStmt 0x55dc7dc19b90 <line:1889:2, col:38>
| |   `-CStyleCastExpr 0x55dc7dc19b68 <col:9, col:38> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55dc7dc19b10 <col:16, col:38> 's64_t':'long long'
| |       |-ImplicitCastExpr 0x55dc7dc19af8 <col:16> 's64_t (*)(s64_t *)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7dc19a48 <col:16> 's64_t (s64_t *)' Function 0x55dc7dc19200 'k_uptime_delta' 's64_t (s64_t *)'
| |       `-ImplicitCastExpr 0x55dc7dc19b40 <col:31> 's64_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55dc7dc19a70 <col:31> 's64_t *' lvalue ParmVar 0x55dc7dc198a0 'reftime' 's64_t *'
| `-FullComment 0x55dc7dcd1fa0 <line:1872:3, line:1885:24>
|   |-ParagraphComment 0x55dc7dcd1ba0 <line:1872:3>
|   | `-TextComment 0x55dc7dcd1b70 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd1bc0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd1c20 <col:10, col:44>
|   |   `-TextComment 0x55dc7dcd1bf0 <col:10, col:44> Text=" Get elapsed time (32-bit version)."
|   |-ParagraphComment 0x55dc7dcd1c90 <line:1874:3, line:1875:50>
|   | |-TextComment 0x55dc7dcd1c40 <line:1874:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x55dc7dcd1c60 <line:1875:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x55dc7dcd1d50 <line:1877:3, line:1880:41>
|   | |-TextComment 0x55dc7dcd1cb0 <line:1877:3, col:78> Text=" This routine can be more efficient than k_uptime_delta(), as it reduces the"
|   | |-TextComment 0x55dc7dcd1cd0 <line:1878:3, col:73> Text=" need for interrupt locking and 64-bit math. However, the 32-bit result"
|   | |-TextComment 0x55dc7dcd1cf0 <line:1879:3, col:72> Text=" cannot hold an elapsed time larger than approximately 50 days, so the"
|   | `-TextComment 0x55dc7dcd1d10 <line:1880:3, col:41> Text=" caller must handle possible rollovers."
|   |-ParagraphComment 0x55dc7dcd1da0 <line:1882:3>
|   | `-TextComment 0x55dc7dcd1d70 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd1dc0 <col:4, line:1883:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd1e70 <line:1882:18, line:1883:37>
|   |   |-TextComment 0x55dc7dcd1e20 <line:1882:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x55dc7dcd1e40 <line:1883:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x55dc7dcd1ec0 <line:1885:3>
|   | `-TextComment 0x55dc7dcd1e90 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd1ee0 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x55dc7dcd1f40 <col:11, col:24>
|       `-TextComment 0x55dc7dcd1f10 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x55dc7dc19c80 <line:1900:1, line:1903:1> line:1900:21 k_cycle_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x55dc7dc19e28 <line:1901:1, line:1903:1>
| | `-ReturnStmt 0x55dc7dc19db8 <line:1902:2, col:29>
| |   `-CallExpr 0x55dc7dc19d90 <col:9, col:29> 'u32_t':'unsigned int'
| |     `-ImplicitCastExpr 0x55dc7dc19d78 <col:9> 'u32_t (*)(void)' <FunctionToPointerDecay>
| |       `-DeclRefExpr 0x55dc7dc19d20 <col:9> 'u32_t (void)' Function 0x55dc7dbc6308 'arch_k_cycle_get_32' 'u32_t (void)'
| `-FullComment 0x55dc7dcd2250 <line:1893:3, line:1898:57>
|   |-ParagraphComment 0x55dc7dcd2040 <line:1893:3>
|   | `-TextComment 0x55dc7dcd2010 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd2060 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd20c0 <col:10, col:34>
|   |   `-TextComment 0x55dc7dcd2090 <col:10, col:34> Text=" Read the hardware clock."
|   |-ParagraphComment 0x55dc7dcd2130 <line:1895:3, line:1896:9>
|   | |-TextComment 0x55dc7dcd20e0 <line:1895:3, col:78> Text=" This routine returns the current time, as measured by the system's hardware"
|   | `-TextComment 0x55dc7dcd2100 <line:1896:3, col:9> Text=" clock."
|   |-ParagraphComment 0x55dc7dcd2180 <line:1898:3>
|   | `-TextComment 0x55dc7dcd2150 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd21a0 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x55dc7dcd2200 <col:11, col:57>
|       `-TextComment 0x55dc7dcd21d0 <col:11, col:57> Text=" Current hardware clock up-counter (in cycles)."
|-RecordDecl 0x55dc7dc19e40 prev 0x55dc7dc00fb0 <line:1913:1, line:1924:1> line:1913:8 struct k_queue definition
| |-FullComment 0x55dc7dcd2370 <line:1910:3, col:24>
| | `-ParagraphComment 0x55dc7dcd2340 <col:3, col:24>
| |   |-TextComment 0x55dc7dcd22c0 <col:3> Text=" "
| |   |-InlineCommandComment 0x55dc7dcd22e0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55dc7dcd2300 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55dc7dc19ed8 <line:1914:2, col:15> col:15 referenced data_q 'sys_sflist_t':'struct _sflist'
| |-FieldDecl 0x55dc7dc19f40 <line:1915:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-RecordDecl 0x55dc7dc19f88 <line:1916:2, line:1920:2> line:1916:2 union definition
| | `-FieldDecl 0x55dc7dc1a040 <line:1917:3, col:13> col:13 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x55dc7dc1a120 <line:1916:2> col:2 implicit 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
| `-IndirectFieldDecl 0x55dc7dc1a178 <line:1917:13> col:13 implicit wait_q '_wait_q_t':'_wait_q_t'
|   |-Field 0x55dc7dc1a120 '' 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
|   `-Field 0x55dc7dc1a040 'wait_q' '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x55dc7dc1aae0 <line:1939:1, col:67> col:14 used z_queue_node_peek 'void *(sys_sfnode_t *, bool)' extern
| |-ParmVarDecl 0x55dc7dc1a218 <col:32, col:46> col:46 node 'sys_sfnode_t *'
| `-ParmVarDecl 0x55dc7dc1a288 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/kernel.h:1939:57> col:57 needs_free 'bool'
|-FunctionDecl 0x55dc7dc1add0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1960:50> col:16 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x55dc7dc1acd0 <col:29, col:45> col:45 queue 'struct k_queue *'
| `-FullComment 0x55dc7dcd2710 <line:1952:3, line:1958:14>
|   |-ParagraphComment 0x55dc7dcd2410 <line:1952:3>
|   | `-TextComment 0x55dc7dcd23e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd2430 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd2490 <col:10, col:29>
|   |   `-TextComment 0x55dc7dcd2460 <col:10, col:29> Text=" Initialize a queue."
|   |-ParagraphComment 0x55dc7dcd24e0 <line:1954:3, col:67>
|   | `-TextComment 0x55dc7dcd24b0 <col:3, col:67> Text=" This routine initializes a queue object, prior to its first use."
|   |-ParagraphComment 0x55dc7dcd2530 <line:1956:3>
|   | `-TextComment 0x55dc7dcd2500 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd2550 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd25e0 <col:16, col:37>
|   |   `-TextComment 0x55dc7dcd25b0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55dc7dcd2630 <line:1958:3>
|   | `-TextComment 0x55dc7dcd2600 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd2650 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dcd26b0 <col:11, col:14>
|       `-TextComment 0x55dc7dcd2680 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dc1af58 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1977:57> col:16 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x55dc7dc1aed0 <col:36, col:52> col:52 queue 'struct k_queue *'
| `-FullComment 0x55dc7dcd2cc0 <line:1963:3, line:1975:14>
|   |-ParagraphComment 0x55dc7dcd27b0 <line:1963:3>
|   | `-TextComment 0x55dc7dcd2780 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd27d0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd2830 <col:10, col:36>
|   |   `-TextComment 0x55dc7dcd2800 <col:10, col:36> Text=" Cancel waiting on a queue."
|   |-ParagraphComment 0x55dc7dcd29b0 <line:1965:3, line:1969:35>
|   | |-TextComment 0x55dc7dcd2850 <line:1965:3, col:47> Text=" This routine causes first thread pending on "
|   | |-InlineCommandComment 0x55dc7dcd28a0 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="queue,"
|   | |-TextComment 0x55dc7dcd28c0 <col:57, col:67> Text=" if any, to"
|   | |-TextComment 0x55dc7dcd28e0 <line:1966:3, col:74> Text=" return from k_queue_get() call with NULL value (as if timeout expired)."
|   | |-TextComment 0x55dc7dcd2900 <line:1967:3, col:67> Text=" If the queue is being waited on by k_poll(), it will return with"
|   | |-TextComment 0x55dc7dcd2930 <line:1968:3, col:69> Text=" -EINTR and K_POLL_STATE_CANCELLED state (and per above, subsequent"
|   | `-TextComment 0x55dc7dcd2950 <line:1969:3, col:35> Text=" k_queue_get() will return NULL)."
|   |-ParagraphComment 0x55dc7dcd2a00 <line:1971:3>
|   | `-TextComment 0x55dc7dcd29d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd2a20 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcd2a80 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcd2a50 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcd2ad0 <line:1973:3>
|   | `-TextComment 0x55dc7dcd2aa0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd2af0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd2b80 <col:16, col:37>
|   |   `-TextComment 0x55dc7dcd2b50 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55dc7dcd2bd0 <line:1975:3>
|   | `-TextComment 0x55dc7dcd2ba0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd2bf0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dcd2c50 <col:11, col:14>
|       `-TextComment 0x55dc7dcd2c20 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dc1b1e0 <line:1993:1, col:61> col:13 used k_queue_append 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x55dc7dc1b050 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x55dc7dc1b0c8 <col:51, col:57> col:57 data 'void *'
| `-FullComment 0x55dc7dcd32e0 <line:1980:3, line:1991:14>
|   |-ParagraphComment 0x55dc7dcd2d60 <line:1980:3>
|   | `-TextComment 0x55dc7dcd2d30 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd2d80 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd2de0 <col:10, col:50>
|   |   `-TextComment 0x55dc7dcd2db0 <col:10, col:50> Text=" Append an element to the end of a queue."
|   |-ParagraphComment 0x55dc7dcd2f00 <line:1982:3, line:1984:24>
|   | |-TextComment 0x55dc7dcd2e00 <line:1982:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x55dc7dcd2e50 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55dc7dcd2e70 <col:49, col:74> Text=" A queue data item must be"
|   | |-TextComment 0x55dc7dcd2e90 <line:1983:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x55dc7dcd2eb0 <line:1984:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x55dc7dcd2f50 <line:1986:3>
|   | `-TextComment 0x55dc7dcd2f20 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd2f70 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcd2fd0 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcd2fa0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcd3020 <line:1988:3>
|   | `-TextComment 0x55dc7dcd2ff0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd3040 <col:4, line:1989:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd30f0 <line:1988:16, line:1989:3>
|   |   |-TextComment 0x55dc7dcd30a0 <line:1988:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55dc7dcd30c0 <line:1989:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd3110 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcd31a0 <col:15, col:40>
|   |   `-TextComment 0x55dc7dcd3170 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55dc7dcd31f0 <line:1991:3>
|   | `-TextComment 0x55dc7dcd31c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd3210 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dcd3270 <col:11, col:14>
|       `-TextComment 0x55dc7dcd3240 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dc1b470 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2011:71> col:17 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55dc7dc1b2e0 <col:38, col:54> col:54 queue 'struct k_queue *'
| |-ParmVarDecl 0x55dc7dc1b358 <col:61, col:67> col:67 data 'void *'
| `-FullComment 0x55dc7dcd3960 <line:1996:3, line:2009:78>
|   |-ParagraphComment 0x55dc7dcd3380 <line:1996:3>
|   | `-TextComment 0x55dc7dcd3350 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd33a0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd3400 <col:10, col:39>
|   |   `-TextComment 0x55dc7dcd33d0 <col:10, col:39> Text=" Append an element to a queue."
|   |-ParagraphComment 0x55dc7dcd3540 <line:1998:3, line:2001:50>
|   | |-TextComment 0x55dc7dcd3420 <line:1998:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x55dc7dcd3470 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55dc7dcd3490 <col:49, col:76> Text=" There is an implicit memory"
|   | |-TextComment 0x55dc7dcd34b0 <line:1999:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x55dc7dcd34d0 <line:2000:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x55dc7dcd34f0 <line:2001:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x55dc7dcd3590 <line:2003:3>
|   | `-TextComment 0x55dc7dcd3560 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd35b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcd3610 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcd35e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcd3660 <line:2005:3>
|   | `-TextComment 0x55dc7dcd3630 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd3680 <col:4, line:2006:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd3730 <line:2005:16, line:2006:3>
|   |   |-TextComment 0x55dc7dcd36e0 <line:2005:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55dc7dcd3700 <line:2006:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd3750 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcd37e0 <col:15, col:40>
|   |   `-TextComment 0x55dc7dcd37b0 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x55dc7dcd38f0 <line:2008:3, line:2009:78>
|     |-TextComment 0x55dc7dcd3800 <line:2008:3> Text=" "
|     |-InlineCommandComment 0x55dc7dcd3820 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55dc7dcd3840 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x55dc7dcd3860 <line:2009:3> Text=" "
|     |-InlineCommandComment 0x55dc7dcd3880 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55dc7dcd38a0 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x55dc7dc1b678 <line:2027:1, col:62> col:13 k_queue_prepend 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x55dc7dc1b570 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x55dc7dc1b5e8 <col:52, col:58> col:58 data 'void *'
| `-FullComment 0x55dc7dcd3f80 <line:2014:3, line:2025:14>
|   |-ParagraphComment 0x55dc7dcd3a00 <line:2014:3>
|   | `-TextComment 0x55dc7dcd39d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd3a20 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd3a80 <col:10, col:40>
|   |   `-TextComment 0x55dc7dcd3a50 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x55dc7dcd3ba0 <line:2016:3, line:2018:24>
|   | |-TextComment 0x55dc7dcd3aa0 <line:2016:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x55dc7dcd3af0 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55dc7dcd3b10 <col:50, col:75> Text=" A queue data item must be"
|   | |-TextComment 0x55dc7dcd3b30 <line:2017:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x55dc7dcd3b50 <line:2018:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x55dc7dcd3bf0 <line:2020:3>
|   | `-TextComment 0x55dc7dcd3bc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd3c10 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcd3c70 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcd3c40 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcd3cc0 <line:2022:3>
|   | `-TextComment 0x55dc7dcd3c90 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd3ce0 <col:4, line:2023:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd3d90 <line:2022:16, line:2023:3>
|   |   |-TextComment 0x55dc7dcd3d40 <line:2022:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55dc7dcd3d60 <line:2023:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd3db0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcd3e40 <col:15, col:40>
|   |   `-TextComment 0x55dc7dcd3e10 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55dc7dcd3e90 <line:2025:3>
|   | `-TextComment 0x55dc7dcd3e60 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd3eb0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dcd3f10 <col:11, col:14>
|       `-TextComment 0x55dc7dcd3ee0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dc1b888 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2045:72> col:17 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55dc7dc1b780 <col:39, col:55> col:55 queue 'struct k_queue *'
| |-ParmVarDecl 0x55dc7dc1b7f8 <col:62, col:68> col:68 data 'void *'
| `-FullComment 0x55dc7dcd4600 <line:2030:3, line:2043:78>
|   |-ParagraphComment 0x55dc7dcd4020 <line:2030:3>
|   | `-TextComment 0x55dc7dcd3ff0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd4040 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd40a0 <col:10, col:40>
|   |   `-TextComment 0x55dc7dcd4070 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x55dc7dcd41e0 <line:2032:3, line:2035:50>
|   | |-TextComment 0x55dc7dcd40c0 <line:2032:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x55dc7dcd4110 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55dc7dcd4130 <col:50, col:77> Text=" There is an implicit memory"
|   | |-TextComment 0x55dc7dcd4150 <line:2033:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x55dc7dcd4170 <line:2034:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x55dc7dcd4190 <line:2035:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x55dc7dcd4230 <line:2037:3>
|   | `-TextComment 0x55dc7dcd4200 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd4250 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcd42b0 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcd4280 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcd4300 <line:2039:3>
|   | `-TextComment 0x55dc7dcd42d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd4320 <col:4, line:2040:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd43d0 <line:2039:16, line:2040:3>
|   |   |-TextComment 0x55dc7dcd4380 <line:2039:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55dc7dcd43a0 <line:2040:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd43f0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcd4480 <col:15, col:40>
|   |   `-TextComment 0x55dc7dcd4450 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x55dc7dcd4590 <line:2042:3, line:2043:78>
|     |-TextComment 0x55dc7dcd44a0 <line:2042:3> Text=" "
|     |-InlineCommandComment 0x55dc7dcd44c0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55dc7dcd44e0 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x55dc7dcd4500 <line:2043:3> Text=" "
|     |-InlineCommandComment 0x55dc7dcd4520 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55dc7dcd4540 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x55dc7dc1bbc0 <line:2062:1, col:73> col:13 k_queue_insert 'void (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x55dc7dc1b990 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x55dc7dc1ba08 <col:51, col:57> col:57 prev 'void *'
| |-ParmVarDecl 0x55dc7dc1ba80 <col:63, col:69> col:69 data 'void *'
| `-FullComment 0x55dc7dcd4d10 <line:2048:3, line:2060:14>
|   |-ParagraphComment 0x55dc7dcd46a0 <line:2048:3>
|   | `-TextComment 0x55dc7dcd4670 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd46c0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd4720 <col:10, col:40>
|   |   `-TextComment 0x55dc7dcd46f0 <col:10, col:40> Text=" Inserts an element to a queue."
|   |-ParagraphComment 0x55dc7dcd4840 <line:2050:3, line:2052:45>
|   | |-TextComment 0x55dc7dcd4740 <line:2050:3, col:39> Text=" This routine inserts a data item to "
|   | |-InlineCommandComment 0x55dc7dcd4790 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x55dc7dcd47b0 <col:48, col:76> Text=" after previous item. A queue"
|   | |-TextComment 0x55dc7dcd47d0 <line:2051:3, col:70> Text=" data item must be aligned on a word boundary, and the first word of"
|   | `-TextComment 0x55dc7dcd47f0 <line:2052:3, col:45> Text=" the item is reserved for the kernel's use."
|   |-ParagraphComment 0x55dc7dcd4890 <line:2054:3>
|   | `-TextComment 0x55dc7dcd4860 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd48b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcd4910 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcd48e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcd4970 <line:2056:3>
|   | `-TextComment 0x55dc7dcd4940 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd4990 <col:4, line:2057:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd4a40 <line:2056:16, line:2057:3>
|   |   |-TextComment 0x55dc7dcd49f0 <line:2056:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55dc7dcd4a10 <line:2057:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd4a60 <col:4, line:2058:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcd4b10 <line:2057:15, line:2058:3>
|   |   |-TextComment 0x55dc7dcd4ac0 <line:2057:15, col:49> Text=" Address of the previous data item."
|   |   `-TextComment 0x55dc7dcd4ae0 <line:2058:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd4b30 <col:4, col:40> [in] implicitly Param="data" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcd4bc0 <col:15, col:40>
|   |   `-TextComment 0x55dc7dcd4b90 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55dc7dcd4c10 <line:2060:3>
|   | `-TextComment 0x55dc7dcd4be0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd4c30 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dcd4c90 <col:11, col:14>
|       `-TextComment 0x55dc7dcd4c60 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dc1bef8 <line:2082:1, col:77> col:12 k_queue_append_list 'int (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x55dc7dc1bcd0 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x55dc7dc1bd48 <col:55, col:61> col:61 head 'void *'
| |-ParmVarDecl 0x55dc7dc1bdc0 <col:67, col:73> col:73 tail 'void *'
| `-FullComment 0x55dc7dcd54c0 <line:2065:3, line:2081:1>
|   |-ParagraphComment 0x55dc7dcd4db0 <line:2065:3>
|   | `-TextComment 0x55dc7dcd4d80 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd4dd0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd4e30 <col:10, col:58>
|   |   `-TextComment 0x55dc7dcd4e00 <col:10, col:58> Text=" Atomically append a list of elements to a queue."
|   |-ParagraphComment 0x55dc7dcd4f70 <line:2067:3, line:2070:19>
|   | |-TextComment 0x55dc7dcd4e50 <line:2067:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x55dc7dcd4ea0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x55dc7dcd4ec0 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x55dc7dcd4ee0 <line:2068:3, col:70> Text=" The data items must be in a singly-linked list, with the first word"
|   | |-TextComment 0x55dc7dcd4f00 <line:2069:3, col:69> Text=" in each data item pointing to the next data item; the list must be"
|   | `-TextComment 0x55dc7dcd4f20 <line:2070:3, col:19> Text=" NULL-terminated."
|   |-ParagraphComment 0x55dc7dcd4fc0 <line:2072:3>
|   | `-TextComment 0x55dc7dcd4f90 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd4fe0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcd5040 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcd5010 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcd5090 <line:2074:3>
|   | `-TextComment 0x55dc7dcd5060 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd50b0 <col:4, line:2075:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd5160 <line:2074:16, line:2075:3>
|   |   |-TextComment 0x55dc7dcd5110 <line:2074:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55dc7dcd5130 <line:2075:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd5180 <col:4, line:2076:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcd5230 <line:2075:15, line:2076:3>
|   |   |-TextComment 0x55dc7dcd51e0 <line:2075:15, col:59> Text=" Pointer to first node in singly-linked list."
|   |   `-TextComment 0x55dc7dcd5200 <line:2076:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd5250 <col:4, col:58> [in] implicitly Param="tail" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcd52e0 <col:15, col:58>
|   |   `-TextComment 0x55dc7dcd52b0 <col:15, col:58> Text=" Pointer to last node in singly-linked list."
|   |-ParagraphComment 0x55dc7dcd53f0 <line:2078:3, line:2079:43>
|   | |-TextComment 0x55dc7dcd5300 <line:2078:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcd5320 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcd5340 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x55dc7dcd5360 <line:2079:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcd5380 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55dc7dcd53a0 <col:11, col:43> Text=" -EINVAL on invalid supplied data"
|   `-ParagraphComment 0x55dc7dcd5440 <line:2081:1>
|     `-TextComment 0x55dc7dcd5410 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc1c188 <line:2099:1, col:72> col:12 k_queue_merge_slist 'int (struct k_queue *, sys_slist_t *)' extern
| |-ParmVarDecl 0x55dc7dc1c000 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x55dc7dc1c070 <col:55, col:68> col:68 list 'sys_slist_t *'
| `-FullComment 0x55dc7dcd5b20 <line:2085:3, line:2097:34>
|   |-ParagraphComment 0x55dc7dcd5560 <line:2085:3>
|   | `-TextComment 0x55dc7dcd5530 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd5580 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd55e0 <col:10, col:55>
|   |   `-TextComment 0x55dc7dcd55b0 <col:10, col:55> Text=" Atomically add a list of elements to a queue."
|   |-ParagraphComment 0x55dc7dcd5700 <line:2087:3, line:2089:67>
|   | |-TextComment 0x55dc7dcd5600 <line:2087:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x55dc7dcd5650 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x55dc7dcd5670 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x55dc7dcd5690 <line:2088:3, col:69> Text=" The data items must be in a singly-linked list implemented using a"
|   | `-TextComment 0x55dc7dcd56b0 <line:2089:3, col:67> Text=" sys_slist_t object. Upon completion, the original list is empty."
|   |-ParagraphComment 0x55dc7dcd5750 <line:2091:3>
|   | `-TextComment 0x55dc7dcd5720 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd5770 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcd57d0 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcd57a0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcd5820 <line:2093:3>
|   | `-TextComment 0x55dc7dcd57f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd5840 <col:4, line:2094:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd58f0 <line:2093:16, line:2094:3>
|   |   |-TextComment 0x55dc7dcd58a0 <line:2093:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55dc7dcd58c0 <line:2094:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd5910 <col:4, col:45> [in] implicitly Param="list" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcd59a0 <col:15, col:45>
|   |   `-TextComment 0x55dc7dcd5970 <col:15, col:45> Text=" Pointer to sys_slist_t object."
|   `-ParagraphComment 0x55dc7dcd5ab0 <line:2096:3, line:2097:34>
|     |-TextComment 0x55dc7dcd59c0 <line:2096:3> Text=" "
|     |-InlineCommandComment 0x55dc7dcd59e0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55dc7dcd5a00 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x55dc7dcd5a20 <line:2097:3> Text=" "
|     |-InlineCommandComment 0x55dc7dcd5a40 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55dc7dcd5a60 <col:11, col:34> Text=" -EINVAL on invalid data"
|-FunctionDecl 0x55dc7dc1c418 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2117:65> col:17 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc1c290 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x55dc7dc1c300 <col:52, col:58> col:58 timeout 's32_t':'int'
| `-FullComment 0x55dc7dcd6200 <line:2102:3, line:2115:48>
|   |-ParagraphComment 0x55dc7dcd5bc0 <line:2102:3>
|   | `-TextComment 0x55dc7dcd5b90 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd5be0 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd5c40 <col:10, col:38>
|   |   `-TextComment 0x55dc7dcd5c10 <col:10, col:38> Text=" Get an element from a queue."
|   |-ParagraphComment 0x55dc7dcd5d30 <line:2104:3, line:2105:46>
|   | |-TextComment 0x55dc7dcd5c60 <line:2104:3, col:45> Text=" This routine removes first data item from "
|   | |-InlineCommandComment 0x55dc7dcd5cb0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55dc7dcd5cd0 <col:55, col:76> Text=" The first word of the"
|   | `-TextComment 0x55dc7dcd5cf0 <line:2105:3, col:46> Text=" data item is reserved for the kernel's use."
|   |-ParagraphComment 0x55dc7dcd5d80 <line:2107:3>
|   | `-TextComment 0x55dc7dcd5d50 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd5da0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x55dc7dcd5e80 <col:9, col:72>
|   |   |-TextComment 0x55dc7dcd5dd0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x55dc7dcd5e20 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x55dc7dcd5e40 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x55dc7dcd5ed0 <line:2109:3>
|   | `-TextComment 0x55dc7dcd5ea0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd5ef0 <col:4, line:2110:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd5fa0 <line:2109:16, line:2110:3>
|   |   |-TextComment 0x55dc7dcd5f50 <line:2109:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55dc7dcd5f70 <line:2110:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd5fc0 <col:4, line:2112:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcd60a0 <line:2110:18, line:2112:28>
|   |   |-TextComment 0x55dc7dcd6020 <line:2110:18, col:71> Text=" Non-negative waiting period to obtain a data item (in"
|   |   |-TextComment 0x55dc7dcd6040 <line:2111:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55dc7dcd6060 <line:2112:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55dc7dcd60f0 <line:2114:3>
|   | `-TextComment 0x55dc7dcd60c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd6110 <col:4, line:2115:48> Name="return"
|     `-ParagraphComment 0x55dc7dcd6190 <line:2114:11, line:2115:48>
|       |-TextComment 0x55dc7dcd6140 <line:2114:11, col:67> Text=" Address of the data item if successful; NULL if returned"
|       `-TextComment 0x55dc7dcd6160 <line:2115:3, col:48> Text=" without waiting, or waiting period timed out."
|-FunctionDecl 0x55dc7dc1c6b0 <line:2133:1, line:2136:1> line:2133:20 k_queue_remove 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55dc7dc1c520 <col:35, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x55dc7dc1c598 <col:58, col:64> col:64 used data 'void *'
| |-CompoundStmt 0x55dc7dc1c988 <line:2134:1, line:2136:1>
| | `-ReturnStmt 0x55dc7dc1c948 <line:2135:2, col:72>
| |   `-CallExpr 0x55dc7dc1c910 <col:9, col:72> 'bool'
| |     |-ImplicitCastExpr 0x55dc7dc1c8f8 <col:9> 'bool (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dc1c760 <col:9> 'bool (sys_sflist_t *, sys_sfnode_t *)' Function 0x55dc7db93070 'sys_sflist_find_and_remove' 'bool (sys_sflist_t *, sys_sfnode_t *)'
| |     |-UnaryOperator 0x55dc7dc1c800 <col:36, col:44> 'sys_sflist_t *' prefix '&'
| |     | `-MemberExpr 0x55dc7dc1c7c8 <col:37, col:44> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x55dc7dc19ed8
| |     |   `-ImplicitCastExpr 0x55dc7dc1c7b0 <col:37> 'struct k_queue *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x55dc7dc1c788 <col:37> 'struct k_queue *' lvalue ParmVar 0x55dc7dc1c520 'queue' 'struct k_queue *'
| |     `-CStyleCastExpr 0x55dc7dc1c870 <col:52, col:68> 'sys_sfnode_t *' <BitCast>
| |       `-ImplicitCastExpr 0x55dc7dc1c858 <col:68> 'void *' <LValueToRValue>
| |         `-DeclRefExpr 0x55dc7dc1c820 <col:68> 'void *' lvalue ParmVar 0x55dc7dc1c598 'data' 'void *'
| `-FullComment 0x55dc7dcd6820 <line:2120:3, line:2131:40>
|   |-ParagraphComment 0x55dc7dcd62a0 <line:2120:3>
|   | `-TextComment 0x55dc7dcd6270 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd62c0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd6320 <col:10, col:41>
|   |   `-TextComment 0x55dc7dcd62f0 <col:10, col:41> Text=" Remove an element from a queue."
|   |-ParagraphComment 0x55dc7dcd6440 <line:2122:3, line:2124:76>
|   | |-TextComment 0x55dc7dcd6340 <line:2122:3, col:39> Text=" This routine removes data item from "
|   | |-InlineCommandComment 0x55dc7dcd6390 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55dc7dcd63b0 <col:49, col:70> Text=" The first word of the"
|   | |-TextComment 0x55dc7dcd63d0 <line:2123:3, col:77> Text=" data item is reserved for the kernel's use. Removing elements from k_queue"
|   | `-TextComment 0x55dc7dcd63f0 <line:2124:3, col:76> Text=" rely on sys_slist_find_and_remove which is not a constant time operation."
|   |-ParagraphComment 0x55dc7dcd6490 <line:2126:3>
|   | `-TextComment 0x55dc7dcd6460 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd64b0 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x55dc7dcd6510 <col:9, col:30>
|   |   `-TextComment 0x55dc7dcd64e0 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x55dc7dcd6560 <line:2128:3>
|   | `-TextComment 0x55dc7dcd6530 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd6580 <col:4, line:2129:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd6630 <line:2128:16, line:2129:3>
|   |   |-TextComment 0x55dc7dcd65e0 <line:2128:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55dc7dcd6600 <line:2129:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd6650 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcd66e0 <col:15, col:40>
|   |   `-TextComment 0x55dc7dcd66b0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55dc7dcd6730 <line:2131:3>
|   | `-TextComment 0x55dc7dcd6700 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd6750 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x55dc7dcd67b0 <col:11, col:40>
|       `-TextComment 0x55dc7dcd6780 <col:11, col:40> Text=" true if data item was removed"
|-FunctionDecl 0x55dc7dc1cb00 <line:2152:1, line:2164:1> line:2152:20 k_queue_unique_append 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55dc7dc1c9c8 <col:42, col:58> col:58 used queue 'struct k_queue *'
| |-ParmVarDecl 0x55dc7dc1ca40 <col:65, col:71> col:71 used data 'void *'
| |-CompoundStmt 0x55dc7dc1d338 <line:2153:1, line:2164:1>
| | |-DeclStmt 0x55dc7dc1cc20 <line:2154:2, col:20>
| | | `-VarDecl 0x55dc7dc1cbc0 <col:2, col:16> col:16 used test 'sys_sfnode_t *'
| | |-ForStmt 0x55dc7dc1d128 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:2, /vagrant/ext/zephyros/zephyr/include/kernel.h:2160:2>
| | | |-BinaryOperator 0x55dc7dc1cd68 <line:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x55dc7dc1cc38 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x55dc7dc1cbc0 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x55dc7dc1cd38 <<scratch space>:153:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x55dc7dc1cd20 <<scratch space>:153:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x55dc7dc1cc60 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86930 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
| | | |   `-UnaryOperator 0x55dc7dc1cd00 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:27, col:35> 'sys_sflist_t *' prefix '&'
| | | |     `-MemberExpr 0x55dc7dc1ccc8 <col:28, col:35> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x55dc7dc19ed8
| | | |       `-ImplicitCastExpr 0x55dc7dc1ccb0 <col:28> 'struct k_queue *' <LValueToRValue>
| | | |         `-DeclRefExpr 0x55dc7dc1cc88 <col:28> 'struct k_queue *' lvalue ParmVar 0x55dc7dc1c9c8 'queue' 'struct k_queue *'
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x55dc7dc1ce68 <col:43, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| | | | |-ImplicitCastExpr 0x55dc7dc1ce38 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x55dc7dc1cd90 <col:43> 'sys_sfnode_t *' lvalue Var 0x55dc7dc1cbc0 'test' 'sys_sfnode_t *'
| | | | `-ImplicitCastExpr 0x55dc7dc1ce50 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
| | | |   `-ParenExpr 0x55dc7dc1ce18 <col:14, col:24> 'void *'
| | | |     `-CStyleCastExpr 0x55dc7dc1cdf0 <col:15, col:23> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x55dc7dc1cdb8 <col:23> 'int' 0
| | | |-BinaryOperator 0x55dc7dc1cf68 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x55dc7dc1ce90 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x55dc7dc1cbc0 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x55dc7dc1cf20 <<scratch space>:155:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x55dc7dc1cf08 <<scratch space>:155:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x55dc7dc1ceb8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55dc7db88308 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
| | | |   `-ImplicitCastExpr 0x55dc7dc1cf50 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55dc7dc1cee0 <col:43> 'sys_sfnode_t *' lvalue Var 0x55dc7dc1cbc0 'test' 'sys_sfnode_t *'
| | | `-CompoundStmt 0x55dc7dc1d110 <col:49, line:2160:2>
| | |   `-IfStmt 0x55dc7dc1d0d8 <line:2157:3, line:2159:3>
| | |     |-<<<NULL>>>
| | |     |-<<<NULL>>>
| | |     |-BinaryOperator 0x55dc7dc1d048 <line:2157:7, col:32> 'int' '=='
| | |     | |-ImplicitCastExpr 0x55dc7dc1d030 <col:7> 'sys_sfnode_t *' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x55dc7dc1cf90 <col:7> 'sys_sfnode_t *' lvalue Var 0x55dc7dc1cbc0 'test' 'sys_sfnode_t *'
| | |     | `-CStyleCastExpr 0x55dc7dc1d008 <col:15, col:32> 'sys_sfnode_t *' <BitCast>
| | |     |   `-ImplicitCastExpr 0x55dc7dc1cff0 <col:32> 'void *' <LValueToRValue>
| | |     |     `-DeclRefExpr 0x55dc7dc1cfb8 <col:32> 'void *' lvalue ParmVar 0x55dc7dc1ca40 'data' 'void *'
| | |     |-CompoundStmt 0x55dc7dc1d0c0 <col:38, line:2159:3>
| | |     | `-ReturnStmt 0x55dc7dc1d0a8 <line:2158:4, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| | |     |   `-ImplicitCastExpr 0x55dc7dc1d090 <col:16> 'bool' <IntegralToBoolean>
| | |     |     `-IntegerLiteral 0x55dc7dc1d070 <col:16> 'int' 0
| | |     `-<<<NULL>>>
| | |-CallExpr 0x55dc7dc1d250 </vagrant/ext/zephyros/zephyr/include/kernel.h:2162:2, col:28> 'void'
| | | |-ImplicitCastExpr 0x55dc7dc1d238 <col:2> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x55dc7dc1d160 <col:2> 'void (struct k_queue *, void *)' Function 0x55dc7dc1b1e0 'k_queue_append' 'void (struct k_queue *, void *)'
| | | |-ImplicitCastExpr 0x55dc7dc1d288 <col:17> 'struct k_queue *' <LValueToRValue>
| | | | `-DeclRefExpr 0x55dc7dc1d188 <col:17> 'struct k_queue *' lvalue ParmVar 0x55dc7dc1c9c8 'queue' 'struct k_queue *'
| | | `-ImplicitCastExpr 0x55dc7dc1d2a0 <col:24> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55dc7dc1d1b0 <col:24> 'void *' lvalue ParmVar 0x55dc7dc1ca40 'data' 'void *'
| | `-ReturnStmt 0x55dc7dc1d2f0 <line:2163:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
| |   `-ImplicitCastExpr 0x55dc7dc1d2d8 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x55dc7dc1d2b8 <col:16> 'int' 1
| `-FullComment 0x55dc7dcd6e50 </vagrant/ext/zephyros/zephyr/include/kernel.h:2139:3, line:2150:52>
|   |-ParagraphComment 0x55dc7dcd68c0 <line:2139:3>
|   | `-TextComment 0x55dc7dcd6890 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd68e0 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd6950 <col:10, col:72>
|   |   `-TextComment 0x55dc7dcd6910 <col:10, col:72> Text=" Append an element to a queue only if it's not present already."
|   |-ParagraphComment 0x55dc7dcd6a70 <line:2141:3, line:2143:78>
|   | |-TextComment 0x55dc7dcd6970 <line:2141:3, col:37> Text=" This routine appends data item to "
|   | |-InlineCommandComment 0x55dc7dcd69c0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55dc7dcd69e0 <col:47, col:73> Text=" The first word of the data"
|   | |-TextComment 0x55dc7dcd6a00 <line:2142:3, col:71> Text=" item is reserved for the kernel's use. Appending elements to k_queue"
|   | `-TextComment 0x55dc7dcd6a20 <line:2143:3, col:78> Text=" relies on sys_slist_is_node_in_list which is not a constant time operation."
|   |-ParagraphComment 0x55dc7dcd6ac0 <line:2145:3>
|   | `-TextComment 0x55dc7dcd6a90 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd6ae0 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x55dc7dcd6b40 <col:9, col:30>
|   |   `-TextComment 0x55dc7dcd6b10 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x55dc7dcd6b90 <line:2147:3>
|   | `-TextComment 0x55dc7dcd6b60 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd6bb0 <col:4, line:2148:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd6c60 <line:2147:16, line:2148:3>
|   |   |-TextComment 0x55dc7dcd6c10 <line:2147:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55dc7dcd6c30 <line:2148:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd6c80 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcd6d10 <col:15, col:40>
|   |   `-TextComment 0x55dc7dcd6ce0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55dc7dcd6d60 <line:2150:3>
|   | `-TextComment 0x55dc7dcd6d30 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd6d80 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x55dc7dcd6de0 <col:11, col:52>
|       `-TextComment 0x55dc7dcd6db0 <col:11, col:52> Text=" true if data item was added, false if not"
|-FunctionDecl 0x55dc7dc1d498 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2179:53> col:15 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x55dc7dc1d390 <col:32, col:48> col:48 queue 'struct k_queue *'
| `-FullComment 0x55dc7dcd7390 <line:2167:3, line:2177:34>
|   |-ParagraphComment 0x55dc7dcd6ef0 <line:2167:3>
|   | `-TextComment 0x55dc7dcd6ec0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd6f10 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd6f70 <col:10, col:56>
|   |   `-TextComment 0x55dc7dcd6f40 <col:10, col:56> Text=" Query a queue to see if it has data available."
|   |-ParagraphComment 0x55dc7dcd6fe0 <line:2169:3, line:2170:59>
|   | |-TextComment 0x55dc7dcd6f90 <line:2169:3, col:77> Text=" Note that the data might be already gone by the time this function returns"
|   | `-TextComment 0x55dc7dcd6fb0 <line:2170:3, col:59> Text=" if other threads are also trying to read from the queue."
|   |-ParagraphComment 0x55dc7dcd7030 <line:2172:3>
|   | `-TextComment 0x55dc7dcd7000 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd7050 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcd70b0 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcd7080 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcd7100 <line:2174:3>
|   | `-TextComment 0x55dc7dcd70d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd7120 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd71b0 <col:16, col:37>
|   |   `-TextComment 0x55dc7dcd7180 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55dc7dcd7200 <line:2176:3>
|   | `-TextComment 0x55dc7dcd71d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd7220 <col:4, line:2177:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcd72a0 <line:2176:11, line:2177:3>
|   |   |-TextComment 0x55dc7dcd7250 <line:2176:11, col:42> Text=" Non-zero if the queue is empty."
|   |   `-TextComment 0x55dc7dcd7270 <line:2177:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd72c0 <col:4, col:34> Name="return"
|     `-ParagraphComment 0x55dc7dcd7320 <col:11, col:34>
|       `-TextComment 0x55dc7dcd72f0 <col:11, col:34> Text=" 0 if data is available."
|-FunctionDecl 0x55dc7dc1d5f8 <line:2181:1, line:2184:1> line:2181:19 used z_impl_k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x55dc7dc1d568 <col:43, col:59> col:59 used queue 'struct k_queue *'
| `-CompoundStmt 0x55dc7dc1d828 <line:2182:1, line:2184:1>
|   `-ReturnStmt 0x55dc7dc1d7e8 <line:2183:2, col:48>
|     `-CStyleCastExpr 0x55dc7dc1d7c0 <col:9, col:48> 'int' <IntegralCast>
|       `-CallExpr 0x55dc7dc1d778 <col:14, col:48> 'bool'
|         |-ImplicitCastExpr 0x55dc7dc1d760 <col:14> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55dc7dc1d6a0 <col:14> 'bool (sys_sflist_t *)' Function 0x55dc7db87a90 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|         `-UnaryOperator 0x55dc7dc1d740 <col:34, col:42> 'sys_sflist_t *' prefix '&'
|           `-MemberExpr 0x55dc7dc1d708 <col:35, col:42> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x55dc7dc19ed8
|             `-ImplicitCastExpr 0x55dc7dc1d6f0 <col:35> 'struct k_queue *' <LValueToRValue>
|               `-DeclRefExpr 0x55dc7dc1d6c8 <col:35> 'struct k_queue *' lvalue ParmVar 0x55dc7dc1d568 'queue' 'struct k_queue *'
|-FunctionDecl 0x55dc7dc1d978 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2195:56> col:17 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55dc7dc1d868 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x55dc7dcd7730 <line:2187:3, line:2193:51>
|   |-ParagraphComment 0x55dc7dcd7430 <line:2187:3>
|   | `-TextComment 0x55dc7dcd7400 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd7450 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd74b0 <col:10, col:44>
|   |   `-TextComment 0x55dc7dcd7480 <col:10, col:44> Text=" Peek element at the head of queue."
|   |-ParagraphComment 0x55dc7dcd7500 <line:2189:3, col:61>
|   | `-TextComment 0x55dc7dcd74d0 <col:3, col:61> Text=" Return element from the head of queue without removing it."
|   |-ParagraphComment 0x55dc7dcd7550 <line:2191:3>
|   | `-TextComment 0x55dc7dcd7520 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd7570 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd7600 <col:16, col:37>
|   |   `-TextComment 0x55dc7dcd75d0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55dc7dcd7650 <line:2193:3>
|   | `-TextComment 0x55dc7dcd7620 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd7670 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x55dc7dcd76d0 <col:11, col:51>
|       `-TextComment 0x55dc7dcd76a0 <col:11, col:51> Text=" Head element, or NULL if queue is empty."
|-FunctionDecl 0x55dc7dc1e450 <line:2197:1, line:2200:1> line:2197:21 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55dc7dc1da48 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x55dc7dc1e758 <line:2198:1, line:2200:1>
|   `-ReturnStmt 0x55dc7dc1e710 <line:2199:2, col:70>
|     `-CallExpr 0x55dc7dc1e6c0 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x55dc7dc1e6a8 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc1e4f8 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x55dc7dc1aae0 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x55dc7dc1e5f8 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x55dc7dc1e5e0 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55dc7dc1e520 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86930 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x55dc7dc1e5c0 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x55dc7dc1e588 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x55dc7dc19ed8
|       |     `-ImplicitCastExpr 0x55dc7dc1e570 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x55dc7dc1e548 <col:49> 'struct k_queue *' lvalue ParmVar 0x55dc7dc1da48 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x55dc7dc1e6f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x55dc7dc1e628 <col:16> 'int' 0
|-FunctionDecl 0x55dc7dc1e828 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2211:56> col:17 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55dc7dc1e798 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x55dc7dcd7ad0 <line:2203:3, line:2209:51>
|   |-ParagraphComment 0x55dc7dcd77d0 <line:2203:3>
|   | `-TextComment 0x55dc7dcd77a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd77f0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd7850 <col:10, col:44>
|   |   `-TextComment 0x55dc7dcd7820 <col:10, col:44> Text=" Peek element at the tail of queue."
|   |-ParagraphComment 0x55dc7dcd78a0 <line:2205:3, col:61>
|   | `-TextComment 0x55dc7dcd7870 <col:3, col:61> Text=" Return element from the tail of queue without removing it."
|   |-ParagraphComment 0x55dc7dcd78f0 <line:2207:3>
|   | `-TextComment 0x55dc7dcd78c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd7910 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd79a0 <col:16, col:37>
|   |   `-TextComment 0x55dc7dcd7970 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55dc7dcd79f0 <line:2209:3>
|   | `-TextComment 0x55dc7dcd79c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dcd7a10 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x55dc7dcd7a70 <col:11, col:51>
|       `-TextComment 0x55dc7dcd7a40 <col:11, col:51> Text=" Tail element, or NULL if queue is empty."
|-FunctionDecl 0x55dc7dc1e988 <line:2213:1, line:2216:1> line:2213:21 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55dc7dc1e8f8 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x55dc7dc1ec58 <line:2214:1, line:2216:1>
|   `-ReturnStmt 0x55dc7dc1ebe8 <line:2215:2, col:70>
|     `-CallExpr 0x55dc7dc1eb98 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x55dc7dc1eb80 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc1ea30 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x55dc7dc1aae0 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x55dc7dc1eb30 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x55dc7dc1eb18 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55dc7dc1ea58 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55dc7db86b58 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x55dc7dc1eaf8 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x55dc7dc1eac0 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x55dc7dc19ed8
|       |     `-ImplicitCastExpr 0x55dc7dc1eaa8 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x55dc7dc1ea80 <col:49> 'struct k_queue *' lvalue ParmVar 0x55dc7dc1e8f8 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x55dc7dc1ebd0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x55dc7dc1eb60 <col:16> 'int' 0
|-RecordDecl 0x55dc7dc1ec70 prev 0x55dc7dc01060 </vagrant/ext/zephyros/zephyr/include/kernel.h:2310:1, line:2312:1> line:2310:8 struct k_fifo definition
| `-FieldDecl 0x55dc7dc1ed18 <line:2311:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-RecordDecl 0x55dc7dc1f108 prev 0x55dc7dc01110 <line:2525:1, line:2527:1> line:2525:8 struct k_lifo definition
| |-FullComment 0x55dc7dcd7bf0 <line:2523:4, col:7>
| | `-ParagraphComment 0x55dc7dcd7bc0 <col:4, col:7>
| |   |-TextComment 0x55dc7dcd7b40 <col:4> Text=" "
| |   |-TextComment 0x55dc7dcd7b60 <col:5> Text="@"
| |   `-TextComment 0x55dc7dcd7b80 <col:6, col:7> Text="} "
| `-FieldDecl 0x55dc7dc1f1b0 <line:2526:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-TypedefDecl 0x55dc7dc1f3e8 <line:2641:1, col:19> col:19 referenced stack_data_t 'uintptr_t':'unsigned long'
| `-TypedefType 0x55dc7db9e060 'uintptr_t' sugar
|   |-Typedef 0x55dc7dab28e8 'uintptr_t'
|   `-BuiltinType 0x55dc7da66ad0 'unsigned long'
|-RecordDecl 0x55dc7db1c160 prev 0x55dc7dc011c0 <line:2643:1, line:2651:1> line:2643:8 struct k_stack definition
| |-FieldDecl 0x55dc7db1c1f8 <line:2644:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x55dc7db1c260 <line:2645:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-FieldDecl 0x55dc7db1c338 <line:2646:2, col:16> col:16 base 'stack_data_t *'
| |-FieldDecl 0x55dc7db1c390 <col:2, col:23> col:23 next 'stack_data_t *'
| |-FieldDecl 0x55dc7db1c3e8 <col:2, col:30> col:30 top 'stack_data_t *'
| `-FieldDecl 0x55dc7db1c440 <line:2650:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x55dc7db1c7e0 <line:2686:1, line:2687:44> line:2686:6 k_stack_init 'void (struct k_stack *, stack_data_t *, u32_t)'
| |-ParmVarDecl 0x55dc7db1c5d0 <col:19, col:35> col:35 stack 'struct k_stack *'
| |-ParmVarDecl 0x55dc7db1c640 <line:2687:5, col:19> col:19 buffer 'stack_data_t *'
| |-ParmVarDecl 0x55dc7db1c6b0 <col:27, col:33> col:33 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x55dc7dcd8200 <line:2675:3, line:2685:1>
|   |-ParagraphComment 0x55dc7dcd7c90 <line:2675:3>
|   | `-TextComment 0x55dc7dcd7c60 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd7cb0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd7d10 <col:10, col:29>
|   |   `-TextComment 0x55dc7dcd7ce0 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x55dc7dcd7d60 <line:2677:3, col:67>
|   | `-TextComment 0x55dc7dcd7d30 <col:3, col:67> Text=" This routine initializes a stack object, prior to its first use."
|   |-ParagraphComment 0x55dc7dcd7db0 <line:2679:3>
|   | `-TextComment 0x55dc7dcd7d80 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd7dd0 <col:4, line:2680:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd7e80 <line:2679:16, line:2680:3>
|   |   |-TextComment 0x55dc7dcd7e30 <line:2679:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x55dc7dcd7e50 <line:2680:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd7ea0 <col:4, line:2681:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcd7f50 <line:2680:17, line:2681:3>
|   |   |-TextComment 0x55dc7dcd7f00 <line:2680:17, col:62> Text=" Address of array used to hold stacked values."
|   |   `-TextComment 0x55dc7dcd7f20 <line:2681:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd7f70 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcd8000 <col:22, col:67>
|   |   `-TextComment 0x55dc7dcd7fd0 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x55dc7dcd8050 <line:2683:3>
|   | `-TextComment 0x55dc7dcd8020 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd8070 <col:4, line:2684:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcd80f0 <line:2683:11, line:2684:3>
|   |   |-TextComment 0x55dc7dcd80a0 <line:2683:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcd80c0 <line:2684:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcd8110 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55dc7dcd8180 <line:2685:1>
|     `-TextComment 0x55dc7dcd8150 <col:1> Text=" "
|-FunctionDecl 0x55dc7db1ca70 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2706:25> line:2705:17 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x55dc7db1c8f0 <col:36, col:52> col:52 stack 'struct k_stack *'
| |-ParmVarDecl 0x55dc7db1c960 <line:2706:8, col:14> col:14 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x55dc7dcd87a0 <line:2691:3, line:2703:1>
|   |-ParagraphComment 0x55dc7dcd82a0 <line:2691:3>
|   | `-TextComment 0x55dc7dcd8270 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd82c0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd8320 <col:10, col:29>
|   |   `-TextComment 0x55dc7dcd82f0 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x55dc7dcd83e0 <line:2693:3, line:2696:72>
|   | |-TextComment 0x55dc7dcd8340 <line:2693:3, col:76> Text=" This routine initializes a stack object, prior to its first use. Internal"
|   | |-TextComment 0x55dc7dcd8360 <line:2694:3, col:69> Text=" buffers will be allocated from the calling thread's resource pool."
|   | |-TextComment 0x55dc7dcd8380 <line:2695:3, col:66> Text=" This memory will be released if k_stack_cleanup() is called, or"
|   | `-TextComment 0x55dc7dcd83a0 <line:2696:3, col:72> Text=" userspace is enabled and the stack object loses all references to it."
|   |-ParagraphComment 0x55dc7dcd8430 <line:2698:3>
|   | `-TextComment 0x55dc7dcd8400 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd8450 <col:4, line:2699:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd8500 <line:2698:16, line:2699:3>
|   |   |-TextComment 0x55dc7dcd84b0 <line:2698:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x55dc7dcd84d0 <line:2699:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd8520 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcd85b0 <col:22, col:67>
|   |   `-TextComment 0x55dc7dcd8580 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x55dc7dcd8600 <line:2701:3>
|   | `-TextComment 0x55dc7dcd85d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd8620 <col:4, line:2702:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcd86a0 <line:2701:11, line:2702:3>
|   |   |-TextComment 0x55dc7dcd8650 <line:2701:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x55dc7dcd8670 <line:2702:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcd86c0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55dc7dcd8730 <line:2703:1>
|     `-TextComment 0x55dc7dcd8700 <col:1> Text=" "
|-FunctionDecl 0x55dc7db1cc78 <line:2720:1, col:42> col:5 k_stack_cleanup 'int (struct k_stack *)'
| |-ParmVarDecl 0x55dc7db1cb70 <col:21, col:37> col:37 stack 'struct k_stack *'
| `-FullComment 0x55dc7dcd8c80 <line:2709:3, line:2719:1>
|   |-ParagraphComment 0x55dc7dcd8840 <line:2709:3>
|   | `-TextComment 0x55dc7dcd8810 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd8860 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd88c0 <col:10, col:44>
|   |   `-TextComment 0x55dc7dcd8890 <col:10, col:44> Text=" Release a stack's allocated buffer"
|   |-ParagraphComment 0x55dc7dcd8980 <line:2711:3, line:2713:46>
|   | |-TextComment 0x55dc7dcd88e0 <line:2711:3, col:65> Text=" If a stack object was given a dynamically allocated buffer via"
|   | |-TextComment 0x55dc7dcd8900 <line:2712:3, col:70> Text=" k_stack_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x55dc7dcd8920 <line:2713:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x55dc7dcd89d0 <line:2715:3>
|   | `-TextComment 0x55dc7dcd89a0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd89f0 <col:4, line:2718:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd8b90 <line:2715:16, line:2718:3>
|   |   |-TextComment 0x55dc7dcd8a50 <line:2715:16, col:37> Text=" Address of the stack."
|   |   |-TextComment 0x55dc7dcd8a70 <line:2716:3> Text=" "
|   |   |-InlineCommandComment 0x55dc7dcd8a90 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55dc7dcd8ab0 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x55dc7dcd8ad0 <line:2717:3> Text=" "
|   |   |-InlineCommandComment 0x55dc7dcd8af0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55dc7dcd8b10 <col:11, col:46> Text=" -EAGAIN when object is still in use"
|   |   `-TextComment 0x55dc7dcd8b30 <line:2718:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcd8bb0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55dc7dcd8c20 <line:2719:1>
|     `-TextComment 0x55dc7dcd8bf0 <col:1> Text=" "
|-FunctionDecl 0x55dc7db1cef8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2736:68> col:15 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x55dc7db1cd70 <col:28, col:44> col:44 stack 'struct k_stack *'
| |-ParmVarDecl 0x55dc7db1cde0 <col:51, col:64> col:64 data 'stack_data_t':'unsigned long'
| `-FullComment 0x55dc7dcd93b0 <line:2723:3, line:2735:1>
|   |-ParagraphComment 0x55dc7dcd8d20 <line:2723:3>
|   | `-TextComment 0x55dc7dcd8cf0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd8d40 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd8da0 <col:10, col:39>
|   |   `-TextComment 0x55dc7dcd8d70 <col:10, col:39> Text=" Push an element onto a stack."
|   |-ParagraphComment 0x55dc7dcd8ec0 <line:2725:3, col:55>
|   | |-TextComment 0x55dc7dcd8dc0 <col:3, col:42> Text=" This routine adds a stack_data_t value "
|   | |-InlineCommandComment 0x55dc7dcd8e10 <col:43, col:44> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x55dc7dcd8e30 <col:50, col:53> Text=" to "
|   | `-InlineCommandComment 0x55dc7dcd8e80 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="stack."
|   |-ParagraphComment 0x55dc7dcd8f10 <line:2727:3>
|   | `-TextComment 0x55dc7dcd8ee0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd8f30 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcd8f90 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcd8f60 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcd8fe0 <line:2729:3>
|   | `-TextComment 0x55dc7dcd8fb0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd9000 <col:4, line:2730:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd90b0 <line:2729:16, line:2730:3>
|   |   |-TextComment 0x55dc7dcd9060 <line:2729:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x55dc7dcd9080 <line:2730:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd90d0 <col:4, col:44> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcd9160 <col:15, col:44>
|   |   `-TextComment 0x55dc7dcd9130 <col:15, col:44> Text=" Value to push onto the stack."
|   |-ParagraphComment 0x55dc7dcd92a0 <line:2732:3, line:2734:3>
|   | |-TextComment 0x55dc7dcd9180 <line:2732:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcd91a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcd91c0 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x55dc7dcd91e0 <line:2733:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcd9200 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcd9220 <col:11, col:35> Text=" -ENOMEM if stack is full"
|   | `-TextComment 0x55dc7dcd9240 <line:2734:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcd92c0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55dc7dcd9330 <line:2735:1>
|     `-TextComment 0x55dc7dcd9300 <col:1> Text=" "
|-FunctionDecl 0x55dc7db1d598 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2758:19> line:2757:15 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x55dc7db1d000 <col:27, col:43> col:43 stack 'struct k_stack *'
| |-ParmVarDecl 0x55dc7db1d070 <col:50, col:64> col:64 data 'stack_data_t *'
| |-ParmVarDecl 0x55dc7db1d0e0 <line:2758:6, col:12> col:12 timeout 's32_t':'int'
| `-FullComment 0x55dc7dcd9d20 <line:2739:3, line:2756:1>
|   |-ParagraphComment 0x55dc7dcd9450 <line:2739:3>
|   | `-TextComment 0x55dc7dcd9420 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd9470 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd94d0 <col:10, col:38>
|   |   `-TextComment 0x55dc7dcd94a0 <col:10, col:38> Text=" Pop an element from a stack."
|   |-ParagraphComment 0x55dc7dcd9620 <line:2741:3, line:2742:47>
|   | |-TextComment 0x55dc7dcd94f0 <line:2741:3, col:50> Text=" This routine removes a stack_data_t value from "
|   | |-InlineCommandComment 0x55dc7dcd9540 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="stack"
|   | |-TextComment 0x55dc7dcd9560 <col:59, col:73> Text=" in a "last in,"
|   | |-TextComment 0x55dc7dcd9580 <line:2742:3, col:45> Text=" first out" manner and stores the value in "
|   | `-InlineCommandComment 0x55dc7dcd95d0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="data."
|   |-ParagraphComment 0x55dc7dcd9670 <line:2744:3>
|   | `-TextComment 0x55dc7dcd9640 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd9690 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x55dc7dcd9770 <col:9, col:72>
|   |   |-TextComment 0x55dc7dcd96c0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x55dc7dcd9710 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x55dc7dcd9730 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x55dc7dcd97c0 <line:2746:3>
|   | `-TextComment 0x55dc7dcd9790 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd97e0 <col:4, line:2747:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcd9890 <line:2746:16, line:2747:3>
|   |   |-TextComment 0x55dc7dcd9840 <line:2746:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x55dc7dcd9860 <line:2747:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd98b0 <col:4, line:2748:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcd9960 <line:2747:15, line:2748:3>
|   |   |-TextComment 0x55dc7dcd9910 <line:2747:15, col:71> Text=" Address of area to hold the value popped from the stack."
|   |   `-TextComment 0x55dc7dcd9930 <line:2748:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcd9980 <col:4, line:2750:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcd9a60 <line:2748:18, line:2750:28>
|   |   |-TextComment 0x55dc7dcd99e0 <line:2748:18, col:67> Text=" Non-negative waiting period to obtain a value (in"
|   |   |-TextComment 0x55dc7dcd9a00 <line:2749:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55dc7dcd9a20 <line:2750:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55dc7dcd9c10 <line:2752:3, line:2755:3>
|   | |-TextComment 0x55dc7dcd9a80 <line:2752:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcd9aa0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcd9ac0 <col:11, col:39> Text=" 0 Element popped from stack."
|   | |-TextComment 0x55dc7dcd9ae0 <line:2753:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcd9b00 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcd9b20 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x55dc7dcd9b40 <line:2754:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcd9b60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcd9b80 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55dc7dcd9ba0 <line:2755:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcd9c30 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55dc7dcd9ca0 <line:2756:1>
|     `-TextComment 0x55dc7dcd9c70 <col:1> Text=" "
|-RecordDecl 0x55dc7db1d6a8 <line:2780:1, col:8> col:8 struct k_work
| `-FullComment 0x55dc7dcd9e40 <line:2778:4, col:7>
|   `-ParagraphComment 0x55dc7dcd9e10 <col:4, col:7>
|     |-TextComment 0x55dc7dcd9d90 <col:4> Text=" "
|     |-TextComment 0x55dc7dcd9db0 <col:5> Text="@"
|     `-TextComment 0x55dc7dcd9dd0 <col:6, col:7> Text="} "
|-RecordDecl 0x55dc7db1d750 <line:2781:1, col:8> col:8 struct k_work_poll
|-TypedefDecl 0x55dc7db1dad0 <line:2784:1, col:68> col:15 referenced _poller_cb_t 'int (*)(struct k_poll_event *, u32_t)'
| `-PointerType 0x55dc7db1da60 'int (*)(struct k_poll_event *, u32_t)'
|   `-ParenType 0x55dc7db1da00 'int (struct k_poll_event *, u32_t)' sugar
|     `-FunctionProtoType 0x55dc7db1d9c0 'int (struct k_poll_event *, u32_t)' cdecl
|       |-BuiltinType 0x55dc7da66a10 'int'
|       |-PointerType 0x55dc7db1d860 'struct k_poll_event *'
|       | `-ElaboratedType 0x55dc7db1d800 'struct k_poll_event' sugar
|       |   `-RecordType 0x55dc7dc01510 'struct k_poll_event'
|       |     `-Record 0x55dc7dc4bd88 'k_poll_event'
|       `-TypedefType 0x55dc7dafa7f0 'u32_t' sugar
|         |-Typedef 0x55dc7dad6ab0 'u32_t'
|         `-BuiltinType 0x55dc7da66ab0 'unsigned int'
|-RecordDecl 0x55dc7db1db28 <line:2785:1, line:2789:1> line:2785:8 struct _poller definition
| |-FieldDecl 0x55dc7db1dbe0 <line:2786:2, col:16> col:16 is_polling 'volatile bool'
| |-FieldDecl 0x55dc7db1dc50 <line:2787:2, col:19> col:19 thread 'struct k_thread *'
| `-FieldDecl 0x55dc7db1dcd0 <line:2788:2, col:15> col:15 cb '_poller_cb_t':'int (*)(struct k_poll_event *, u32_t)'
|-TypedefDecl 0x55dc7db1dfd0 <line:2808:1, col:53> col:16 referenced k_work_handler_t 'void (*)(struct k_work *)'
| |-PointerType 0x55dc7db1df70 'void (*)(struct k_work *)'
| | `-ParenType 0x55dc7db1df10 'void (struct k_work *)' sugar
| |   `-FunctionProtoType 0x55dc7db1ded0 'void (struct k_work *)' cdecl
| |     |-BuiltinType 0x55dc7da66970 'void'
| |     `-PointerType 0x55dc7db1dde0 'struct k_work *'
| |       `-ElaboratedType 0x55dc7db1dd80 'struct k_work' sugar
| |         `-RecordType 0x55dc7db1d730 'struct k_work'
| |           `-Record 0x55dc7db1e2d8 'k_work'
| `-FullComment 0x55dc7dcda360 <line:2797:3, line:2807:1>
|   |-ParagraphComment 0x55dc7dcd9ee0 <line:2797:3>
|   | `-TextComment 0x55dc7dcd9eb0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcd9f00 <col:4, col:29> Text=" k_work_handler_t"
|   |-ParagraphComment 0x55dc7dcd9f70 <line:2798:3>
|   | `-TextComment 0x55dc7dcd9f40 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcd9f90 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55dc7dcd9ff0 <col:10, col:42>
|   |   `-TextComment 0x55dc7dcd9fc0 <col:10, col:42> Text=" Work item handler function type."
|   |-ParagraphComment 0x55dc7dcda060 <line:2800:3, line:2801:52>
|   | |-TextComment 0x55dc7dcda010 <line:2800:3, col:69> Text=" A work item's handler function is executed by a workqueue's thread"
|   | `-TextComment 0x55dc7dcda030 <line:2801:3, col:52> Text=" when the work item is processed by the workqueue."
|   |-ParagraphComment 0x55dc7dcda0b0 <line:2803:3>
|   | `-TextComment 0x55dc7dcda080 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcda0d0 <col:4, col:40> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcda160 <col:15, col:40>
|   |   `-TextComment 0x55dc7dcda130 <col:15, col:40> Text=" Address of the work item."
|   |-ParagraphComment 0x55dc7dcda1b0 <line:2805:3>
|   | `-TextComment 0x55dc7dcda180 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcda1d0 <col:4, line:2806:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcda250 <line:2805:11, line:2806:3>
|   |   |-TextComment 0x55dc7dcda200 <line:2805:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcda220 <line:2806:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcda270 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55dc7dcda2e0 <line:2807:1>
|     `-TextComment 0x55dc7dcda2b0 <col:1> Text=" "
|-RecordDecl 0x55dc7db1e058 <line:2814:1, line:2817:1> line:2814:8 invalid struct k_work_q definition
| |-FullComment 0x55dc7dcda480 <line:2811:3, col:24>
| | `-ParagraphComment 0x55dc7dcda450 <col:3, col:24>
| |   |-TextComment 0x55dc7dcda3d0 <col:3> Text=" "
| |   |-InlineCommandComment 0x55dc7dcda3f0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55dc7dcda410 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55dc7db1e120 <line:2815:2, col:17> col:17 referenced queue 'struct k_queue':'struct k_queue'
| `-FieldDecl 0x55dc7db1e188 <line:2816:2, col:18> col:18 invalid thread 'struct k_thread':'struct k_thread'
|-EnumDecl 0x55dc7db1e1d0 <line:2819:1, line:2821:1> line:2819:1
| `-EnumConstantDecl 0x55dc7db1e290 <line:2820:2> col:2 referenced K_WORK_STATE_PENDING 'int'
|-RecordDecl 0x55dc7db1e2d8 prev 0x55dc7db1d6a8 <line:2823:1, line:2827:1> line:2823:8 struct k_work definition
| |-FieldDecl 0x55dc7db1e378 <line:2824:2, col:8> col:8 _reserved 'void *'
| |-FieldDecl 0x55dc7db1e3f0 <line:2825:2, col:19> col:19 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FieldDecl 0x55dc7db1e878 <line:2826:2, col:18> col:11 referenced flags 'atomic_t [1]'
|-RecordDecl 0x55dc7db1e8c0 <line:2829:1, line:2833:1> line:2829:8 struct k_delayed_work definition
| |-FieldDecl 0x55dc7db1e990 <line:2830:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x55dc7db1e9f8 <line:2831:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x55dc7db1eaf0 <line:2832:2, col:19> col:19 work_q 'struct k_work_q *'
|-RecordDecl 0x55dc7db1eb90 prev 0x55dc7db1d750 <line:2835:1, line:2843:1> line:2835:8 struct k_work_poll definition
| |-FieldDecl 0x55dc7db1ec38 <line:2836:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x55dc7db1ecd0 <line:2837:2, col:17> col:17 poller 'struct _poller':'struct _poller'
| |-FieldDecl 0x55dc7db1ed40 <line:2838:2, col:23> col:23 events 'struct k_poll_event *'
| |-FieldDecl 0x55dc7db1eda0 <line:2839:2, col:6> col:6 num_events 'int'
| |-FieldDecl 0x55dc7db1edf8 <line:2840:2, col:19> col:19 real_handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-FieldDecl 0x55dc7db1ee60 <line:2841:2, col:18> col:18 timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x55dc7db1eec0 <line:2842:2, col:6> col:6 poll_result 'int'
|-VarDecl 0x55dc7db1ef28 <line:2845:1, col:24> col:24 used k_sys_work_q 'struct k_work_q':'struct k_work_q' extern
|-FunctionDecl 0x55dc7db1f1c0 <line:2886:1, line:2889:1> line:2886:20 k_work_init 'void (struct k_work *, k_work_handler_t)' static inline
| |-ParmVarDecl 0x55dc7db1f040 <col:32, col:47> col:47 used work 'struct k_work *'
| |-ParmVarDecl 0x55dc7db1f0b0 <col:53, col:70> col:70 used handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-CompoundStmt 0x55dc7db1f668 <line:2887:1, line:2889:1>
| | `-BinaryOperator 0x55dc7db1f610 <line:2888:2, line:2856:2> 'struct k_work':'struct k_work' '='
| |   |-UnaryOperator 0x55dc7db1f2b0 <line:2888:2, col:3> 'struct k_work':'struct k_work' lvalue prefix '*'
| |   | `-ImplicitCastExpr 0x55dc7db1f298 <col:3> 'struct k_work *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55dc7db1f270 <col:3> 'struct k_work *' lvalue ParmVar 0x55dc7db1f040 'work' 'struct k_work *'
| |   `-ImplicitCastExpr 0x55dc7db1f5f8 <col:10, line:2856:2> 'struct k_work':'struct k_work' <LValueToRValue>
| |     `-CompoundLiteralExpr 0x55dc7db1f5d0 <line:2888:10, line:2856:2> 'struct k_work':'struct k_work' lvalue
| |       `-InitListExpr 0x55dc7db1f518 <line:2852:2, line:2856:2> 'struct k_work':'struct k_work'
| |         |-ParenExpr 0x55dc7db1f350 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'void *'
| |         | `-CStyleCastExpr 0x55dc7db1f328 <col:15, col:23> 'void *' <NullToPointer>
| |         |   `-IntegerLiteral 0x55dc7db1f2f0 <col:23> 'int' 0
| |         |-ImplicitCastExpr 0x55dc7db1f570 </vagrant/ext/zephyros/zephyr/include/kernel.h:2888:44> 'k_work_handler_t':'void (*)(struct k_work *)' <LValueToRValue>
| |         | `-DeclRefExpr 0x55dc7db1f3b0 <col:44> 'k_work_handler_t':'void (*)(struct k_work *)' lvalue ParmVar 0x55dc7db1f0b0 'handler' 'k_work_handler_t':'void (*)(struct k_work *)'
| |         `-InitListExpr 0x55dc7db1f588 <line:2855:11, col:15> 'atomic_t [1]'
| |           `-IntegerLiteral 0x55dc7db1f418 <col:13> 'int' 0
| `-FullComment 0x55dc7dcda9c0 <line:2876:3, line:2885:1>
|   |-ParagraphComment 0x55dc7dcda520 <line:2876:3>
|   | `-TextComment 0x55dc7dcda4f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcda540 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55dc7dcda5a0 <col:10, col:33>
|   |   `-TextComment 0x55dc7dcda570 <col:10, col:33> Text=" Initialize a work item."
|   |-ParagraphComment 0x55dc7dcda5f0 <line:2878:3, col:74>
|   | `-TextComment 0x55dc7dcda5c0 <col:3, col:74> Text=" This routine initializes a workqueue work item, prior to its first use."
|   |-ParagraphComment 0x55dc7dcda640 <line:2880:3>
|   | `-TextComment 0x55dc7dcda610 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcda660 <col:4, line:2881:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcda710 <line:2880:15, line:2881:3>
|   |   |-TextComment 0x55dc7dcda6c0 <line:2880:15, col:36> Text=" Address of work item."
|   |   `-TextComment 0x55dc7dcda6e0 <line:2881:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcda730 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcda7c0 <col:18, col:70>
|   |   `-TextComment 0x55dc7dcda790 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x55dc7dcda810 <line:2883:3>
|   | `-TextComment 0x55dc7dcda7e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcda830 <col:4, line:2884:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcda8b0 <line:2883:11, line:2884:3>
|   |   |-TextComment 0x55dc7dcda860 <line:2883:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcda880 <line:2884:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcda8d0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55dc7dcda940 <line:2885:1>
|     `-TextComment 0x55dc7dcda910 <col:1> Text=" "
|-FunctionDecl 0x55dc7db1ffc0 <line:2913:1, line:2919:1> line:2913:20 used k_work_submit_to_queue 'void (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x55dc7db1f6a8 <col:43, col:60> col:60 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55dc7db1f730 <line:2914:8, col:23> col:23 used work 'struct k_work *'
| |-CompoundStmt 0x55dc7db20408 <line:2915:1, line:2919:1>
| | `-IfStmt 0x55dc7db203a0 <line:2916:2, line:2918:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-UnaryOperator 0x55dc7db20200 <line:2916:6, col:64> 'int' prefix '!'
| |   | `-CallExpr 0x55dc7db201b0 <col:7, col:64> 'bool'
| |   |   |-ImplicitCastExpr 0x55dc7db20198 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x55dc7db20070 <col:7> 'bool (atomic_t *, int)' Function 0x55dc7dafb5c0 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| |   |   |-ImplicitCastExpr 0x55dc7db201e8 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| |   |   | `-MemberExpr 0x55dc7db200d8 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x55dc7db1e878
| |   |   |   `-ImplicitCastExpr 0x55dc7db200c0 <col:31> 'struct k_work *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x55dc7db20098 <col:31> 'struct k_work *' lvalue ParmVar 0x55dc7db1f730 'work' 'struct k_work *'
| |   |   `-DeclRefExpr 0x55dc7db20110 <col:44> 'int' EnumConstant 0x55dc7db1e290 'K_WORK_STATE_PENDING' 'int'
| |   |-CompoundStmt 0x55dc7db20388 <col:67, line:2918:2>
| |   | `-CallExpr 0x55dc7db20320 <line:2917:3, col:38> 'void'
| |   |   |-ImplicitCastExpr 0x55dc7db20308 <col:3> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x55dc7db20220 <col:3> 'void (struct k_queue *, void *)' Function 0x55dc7dc1b1e0 'k_queue_append' 'void (struct k_queue *, void *)'
| |   |   |-UnaryOperator 0x55dc7db202c0 <col:18, col:27> 'struct k_queue *' prefix '&'
| |   |   | `-MemberExpr 0x55dc7db20288 <col:19, col:27> 'struct k_queue':'struct k_queue' lvalue ->queue 0x55dc7db1e120
| |   |   |   `-ImplicitCastExpr 0x55dc7db20270 <col:19> 'struct k_work_q *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x55dc7db20248 <col:19> 'struct k_work_q *' lvalue ParmVar 0x55dc7db1f6a8 'work_q' 'struct k_work_q *'
| |   |   `-ImplicitCastExpr 0x55dc7db20370 <col:34> 'void *' <BitCast>
| |   |     `-ImplicitCastExpr 0x55dc7db20358 <col:34> 'struct k_work *' <LValueToRValue>
| |   |       `-DeclRefExpr 0x55dc7db202e0 <col:34> 'struct k_work *' lvalue ParmVar 0x55dc7db1f730 'work' 'struct k_work *'
| |   `-<<<NULL>>>
| `-FullComment 0x55dc7dcdb290 <line:2892:3, line:2912:1>
|   |-ParagraphComment 0x55dc7dcdaa60 <line:2892:3>
|   | `-TextComment 0x55dc7dcdaa30 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdaa80 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55dc7dcdaae0 <col:10, col:29>
|   |   `-TextComment 0x55dc7dcdaab0 <col:10, col:29> Text=" Submit a work item."
|   |-ParagraphComment 0x55dc7dcdacf0 <line:2894:3, line:2899:15>
|   | |-TextComment 0x55dc7dcdab00 <line:2894:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x55dc7dcdab50 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55dc7dcdab70 <col:42, col:70> Text=" to be processed by workqueue"
|   | |-TextComment 0x55dc7dcdab90 <line:2895:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcdabe0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x55dc7dcdac00 <col:14, col:74> Text=" If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x55dc7dcdac20 <line:2896:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x55dc7dcdac40 <line:2897:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x55dc7dcdac60 <line:2898:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x55dc7dcdac80 <line:2899:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x55dc7dcdad40 <line:2901:3>
|   | `-TextComment 0x55dc7dcdad10 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdad60 <col:4, line:2903:20> Name="warning"
|   | `-ParagraphComment 0x55dc7dcdade0 <line:2902:3, line:2903:20>
|   |   |-TextComment 0x55dc7dcdad90 <line:2902:3, col:73> Text=" A submitted work item must not be modified until it has been processed"
|   |   `-TextComment 0x55dc7dcdadb0 <line:2903:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x55dc7dcdae30 <line:2905:3>
|   | `-TextComment 0x55dc7dcdae00 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdae50 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcdaeb0 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcdae80 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcdaf00 <line:2907:3>
|   | `-TextComment 0x55dc7dcdaed0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdaf20 <col:4, line:2908:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcdafd0 <line:2907:17, line:2908:3>
|   |   |-TextComment 0x55dc7dcdaf80 <line:2907:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55dc7dcdafa0 <line:2908:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdaff0 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcdb080 <col:15, col:36>
|   |   `-TextComment 0x55dc7dcdb050 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x55dc7dcdb0d0 <line:2910:3>
|   | `-TextComment 0x55dc7dcdb0a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdb0f0 <col:4, line:2911:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcdb170 <line:2910:11, line:2911:3>
|   |   |-TextComment 0x55dc7dcdb120 <line:2910:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcdb140 <line:2911:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcdb190 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55dc7dcdb200 <line:2912:1>
|     `-TextComment 0x55dc7dcdb1d0 <col:1> Text=" "
|-FunctionDecl 0x55dc7db205e8 <line:2942:1, line:2959:1> line:2942:19 k_work_submit_to_user_queue 'int (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x55dc7db20448 <col:47, col:64> col:64 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55dc7db204d0 <line:2943:12, col:27> col:27 used work 'struct k_work *'
| |-CompoundStmt 0x55dc7db20e08 <line:2944:1, line:2959:1>
| | |-DeclStmt 0x55dc7db20750 <line:2945:2, col:18>
| | | `-VarDecl 0x55dc7db206b0 <col:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> /vagrant/ext/zephyros/zephyr/include/kernel.h:2945:6 used ret 'int' cinit
| | |   `-UnaryOperator 0x55dc7db20730 <col:12, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> 'int' prefix '-'
| | |     `-IntegerLiteral 0x55dc7db20710 <col:15> 'int' 16
| | |-IfStmt 0x55dc7db20d50 </vagrant/ext/zephyros/zephyr/include/kernel.h:2947:2, line:2956:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x55dc7db20898 <line:2947:6, col:64> 'int' prefix '!'
| | | | `-CallExpr 0x55dc7db20848 <col:7, col:64> 'bool'
| | | |   |-ImplicitCastExpr 0x55dc7db20830 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x55dc7db20768 <col:7> 'bool (atomic_t *, int)' Function 0x55dc7dafb5c0 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| | | |   |-ImplicitCastExpr 0x55dc7db20880 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| | | |   | `-MemberExpr 0x55dc7db207d0 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x55dc7db1e878
| | | |   |   `-ImplicitCastExpr 0x55dc7db207b8 <col:31> 'struct k_work *' <LValueToRValue>
| | | |   |     `-DeclRefExpr 0x55dc7db20790 <col:31> 'struct k_work *' lvalue ParmVar 0x55dc7db204d0 'work' 'struct k_work *'
| | | |   `-DeclRefExpr 0x55dc7db20808 <col:44> 'int' EnumConstant 0x55dc7db1e290 'K_WORK_STATE_PENDING' 'int'
| | | |-CompoundStmt 0x55dc7db20d30 <col:67, line:2956:2>
| | | | |-BinaryOperator 0x55dc7db20aa8 <line:2948:3, col:50> 'int' '='
| | | | | |-DeclRefExpr 0x55dc7db208b8 <col:3> 'int' lvalue Var 0x55dc7db206b0 'ret' 'int'
| | | | | `-CallExpr 0x55dc7db20a40 <col:9, col:50> 's32_t':'int'
| | | | |   |-ImplicitCastExpr 0x55dc7db20a28 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | |   | `-DeclRefExpr 0x55dc7db208e0 <col:9> 's32_t (struct k_queue *, void *)' Function 0x55dc7dc1b470 'k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
| | | | |   |-UnaryOperator 0x55dc7db20980 <col:30, col:39> 'struct k_queue *' prefix '&'
| | | | |   | `-MemberExpr 0x55dc7db20948 <col:31, col:39> 'struct k_queue':'struct k_queue' lvalue ->queue 0x55dc7db1e120
| | | | |   |   `-ImplicitCastExpr 0x55dc7db20930 <col:31> 'struct k_work_q *' <LValueToRValue>
| | | | |   |     `-DeclRefExpr 0x55dc7db20908 <col:31> 'struct k_work_q *' lvalue ParmVar 0x55dc7db20448 'work_q' 'struct k_work_q *'
| | | | |   `-ImplicitCastExpr 0x55dc7db20a90 <col:46> 'void *' <BitCast>
| | | | |     `-ImplicitCastExpr 0x55dc7db20a78 <col:46> 'struct k_work *' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x55dc7db209a0 <col:46> 'struct k_work *' lvalue ParmVar 0x55dc7db204d0 'work' 'struct k_work *'
| | | | `-IfStmt 0x55dc7db20cf8 <line:2953:3, line:2955:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-BinaryOperator 0x55dc7db20b30 <line:2953:7, col:14> 'int' '!='
| | | |   | |-ImplicitCastExpr 0x55dc7db20b18 <col:7> 'int' <LValueToRValue>
| | | |   | | `-DeclRefExpr 0x55dc7db20ad0 <col:7> 'int' lvalue Var 0x55dc7db206b0 'ret' 'int'
| | | |   | `-IntegerLiteral 0x55dc7db20af8 <col:14> 'int' 0
| | | |   |-CompoundStmt 0x55dc7db20ce0 <col:17, line:2955:3>
| | | |   | `-CallExpr 0x55dc7db20c90 <line:2954:4, col:54> 'void'
| | | |   |   |-ImplicitCastExpr 0x55dc7db20c78 <col:4> 'void (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   |   | `-DeclRefExpr 0x55dc7db20b58 <col:4> 'void (atomic_t *, int)' Function 0x55dc7dafc0c0 'atomic_clear_bit' 'void (atomic_t *, int)'
| | | |   |   |-ImplicitCastExpr 0x55dc7db20cc8 <col:21, col:27> 'atomic_t *' <ArrayToPointerDecay>
| | | |   |   | `-MemberExpr 0x55dc7db20bc0 <col:21, col:27> 'atomic_t [1]' lvalue ->flags 0x55dc7db1e878
| | | |   |   |   `-ImplicitCastExpr 0x55dc7db20ba8 <col:21> 'struct k_work *' <LValueToRValue>
| | | |   |   |     `-DeclRefExpr 0x55dc7db20b80 <col:21> 'struct k_work *' lvalue ParmVar 0x55dc7db204d0 'work' 'struct k_work *'
| | | |   |   `-DeclRefExpr 0x55dc7db20bf8 <col:34> 'int' EnumConstant 0x55dc7db1e290 'K_WORK_STATE_PENDING' 'int'
| | | |   `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x55dc7db20dc8 <line:2958:2, col:9>
| |   `-ImplicitCastExpr 0x55dc7db20db0 <col:9> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55dc7db20d88 <col:9> 'int' lvalue Var 0x55dc7db206b0 'ret' 'int'
| `-FullComment 0x55dc7dcdba50 <line:2922:3, line:2941:1>
|   |-ParagraphComment 0x55dc7dcdb330 <line:2922:3>
|   | `-TextComment 0x55dc7dcdb300 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdb350 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55dc7dcdb3b0 <col:10, col:53>
|   |   `-TextComment 0x55dc7dcdb380 <col:10, col:53> Text=" Submit a work item to a user mode workqueue"
|   |-ParagraphComment 0x55dc7dcdb4a0 <line:2924:3, line:2928:71>
|   | |-TextComment 0x55dc7dcdb3d0 <line:2924:3, col:73> Text=" Submits a work item to a workqueue that runs in user mode. A temporary"
|   | |-TextComment 0x55dc7dcdb3f0 <line:2925:3, col:75> Text=" memory allocation is made from the caller's resource pool which is freed"
|   | |-TextComment 0x55dc7dcdb410 <line:2926:3, col:65> Text=" once the worker thread consumes the k_work item. The workqueue"
|   | |-TextComment 0x55dc7dcdb430 <line:2927:3, col:80> Text=" thread must have memory access to the k_work item being submitted. The caller"
|   | `-TextComment 0x55dc7dcdb450 <line:2928:3, col:71> Text=" must have permission granted on the work_q parameter's queue object."
|   |-ParagraphComment 0x55dc7dcdb4f0 <line:2930:3, col:61>
|   | `-TextComment 0x55dc7dcdb4c0 <col:3, col:61> Text=" Otherwise this works the same as k_work_submit_to_queue()."
|   |-ParagraphComment 0x55dc7dcdb540 <line:2932:3>
|   | `-TextComment 0x55dc7dcdb510 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdb560 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcdb5c0 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcdb590 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcdb610 <line:2934:3>
|   | `-TextComment 0x55dc7dcdb5e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdb630 <col:4, line:2935:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcdb6e0 <line:2934:17, line:2935:3>
|   |   |-TextComment 0x55dc7dcdb690 <line:2934:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55dc7dcdb6b0 <line:2935:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdb700 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcdb790 <col:15, col:36>
|   |   `-TextComment 0x55dc7dcdb760 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x55dc7dcdb940 <line:2937:3, line:2940:3>
|   | |-TextComment 0x55dc7dcdb7b0 <line:2937:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcdb7d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcdb7f0 <col:11, col:64> Text=" -EBUSY if the work item was already in some workqueue"
|   | |-TextComment 0x55dc7dcdb810 <line:2938:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcdb830 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcdb850 <col:11, col:67> Text=" -ENOMEM if no memory for thread resource pool allocation"
|   | |-TextComment 0x55dc7dcdb870 <line:2939:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcdb890 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcdb8b0 <col:11, col:20> Text=" 0 Success"
|   | `-TextComment 0x55dc7dcdb8d0 <line:2940:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcdb960 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55dc7dcdb9d0 <line:2941:1>
|     `-TextComment 0x55dc7dcdb9a0 <col:1> Text=" "
|-FunctionDecl 0x55dc7db20fa0 <line:2974:1, line:2977:1> line:2974:20 k_work_pending 'bool (struct k_work *)' static inline
| |-ParmVarDecl 0x55dc7db20e58 <col:35, col:50> col:50 used work 'struct k_work *'
| |-CompoundStmt 0x55dc7db21228 <line:2975:1, line:2977:1>
| | `-ReturnStmt 0x55dc7db211e8 <line:2976:2, col:58>
| |   `-CallExpr 0x55dc7db21180 <col:9, col:58> 'bool'
| |     |-ImplicitCastExpr 0x55dc7db21168 <col:9> 'bool (*)(const atomic_t *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7db21048 <col:9> 'bool (const atomic_t *, int)' Function 0x55dc7daf9d80 'atomic_test_bit' 'bool (const atomic_t *, int)'
| |     |-ImplicitCastExpr 0x55dc7db211d0 <col:25, col:31> 'const atomic_t *' <BitCast>
| |     | `-ImplicitCastExpr 0x55dc7db211b8 <col:25, col:31> 'atomic_t *' <ArrayToPointerDecay>
| |     |   `-MemberExpr 0x55dc7db210b0 <col:25, col:31> 'atomic_t [1]' lvalue ->flags 0x55dc7db1e878
| |     |     `-ImplicitCastExpr 0x55dc7db21098 <col:25> 'struct k_work *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x55dc7db21070 <col:25> 'struct k_work *' lvalue ParmVar 0x55dc7db20e58 'work' 'struct k_work *'
| |     `-DeclRefExpr 0x55dc7db210e8 <col:38> 'int' EnumConstant 0x55dc7db1e290 'K_WORK_STATE_PENDING' 'int'
| `-FullComment 0x55dc7dcdc030 <line:2962:3, line:2973:1>
|   |-ParagraphComment 0x55dc7dcdbaf0 <line:2962:3>
|   | `-TextComment 0x55dc7dcdbac0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdbb10 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55dc7dcdbb70 <col:10, col:42>
|   |   `-TextComment 0x55dc7dcdbb40 <col:10, col:42> Text=" Check if a work item is pending."
|   |-ParagraphComment 0x55dc7dcdbc60 <line:2964:3, line:2965:9>
|   | |-TextComment 0x55dc7dcdbb90 <line:2964:3, col:39> Text=" This routine indicates if work item "
|   | |-InlineCommandComment 0x55dc7dcdbbe0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55dc7dcdbc00 <col:47, col:74> Text=" is pending in a workqueue's"
|   | `-TextComment 0x55dc7dcdbc20 <line:2965:3, col:9> Text=" queue."
|   |-ParagraphComment 0x55dc7dcdbcb0 <line:2967:3>
|   | `-TextComment 0x55dc7dcdbc80 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdbcd0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcdbd30 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcdbd00 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcdbd80 <line:2969:3>
|   | `-TextComment 0x55dc7dcdbd50 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdbda0 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcdbe30 <col:15, col:36>
|   |   `-TextComment 0x55dc7dcdbe00 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x55dc7dcdbe80 <line:2971:3>
|   | `-TextComment 0x55dc7dcdbe50 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdbea0 <col:4, line:2972:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcdbf20 <line:2971:11, line:2972:3>
|   |   |-TextComment 0x55dc7dcdbed0 <line:2971:11, col:71> Text=" true if work item is pending, or false if it is not pending."
|   |   `-TextComment 0x55dc7dcdbef0 <line:2972:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcdbf40 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55dc7dcdbfb0 <line:2973:1>
|     `-TextComment 0x55dc7dcdbf80 <col:1> Text=" "
|-FunctionDecl 0x55dc7db21500 <line:2996:1, line:2998:34> line:2996:13 k_work_q_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x55dc7db21268 <col:28, col:45> col:45 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55dc7db212d8 <line:2997:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55dc7db21348 <line:2998:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7db213c0 <col:26, col:30> col:30 prio 'int'
| `-FullComment 0x55dc7dcdc830 <line:2980:3, line:2995:1>
|   |-ParagraphComment 0x55dc7dcdc0d0 <line:2980:3>
|   | `-TextComment 0x55dc7dcdc0a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdc0f0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x55dc7dcdc150 <col:10, col:28>
|   |   `-TextComment 0x55dc7dcdc120 <col:10, col:28> Text=" Start a workqueue."
|   |-ParagraphComment 0x55dc7dcdc240 <line:2982:3, line:2983:41>
|   | |-TextComment 0x55dc7dcdc170 <line:2982:3, col:33> Text=" This routine starts workqueue "
|   | |-InlineCommandComment 0x55dc7dcdc1c0 <col:34, col:35> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x55dc7dcdc1e0 <col:44, col:73> Text=" The workqueue spawns its work"
|   | `-TextComment 0x55dc7dcdc200 <line:2983:3, col:41> Text=" processing thread, which runs forever."
|   |-ParagraphComment 0x55dc7dcdc290 <line:2985:3>
|   | `-TextComment 0x55dc7dcdc260 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdc2b0 <col:4, line:2986:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcdc360 <line:2985:17, line:2986:3>
|   |   |-TextComment 0x55dc7dcdc310 <line:2985:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55dc7dcdc330 <line:2986:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdc380 <col:4, line:2988:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcdc460 <line:2986:16, line:2988:3>
|   |   |-TextComment 0x55dc7dcdc3e0 <line:2986:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x55dc7dcdc400 <line:2987:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x55dc7dcdc420 <line:2988:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdc480 <col:4, line:2991:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcdc580 <line:2988:21, line:2991:3>
|   |   |-TextComment 0x55dc7dcdc4e0 <line:2988:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x55dc7dcdc500 <line:2989:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x55dc7dcdc520 <line:2990:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x55dc7dcdc540 <line:2991:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdc5a0 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dcdc630 <col:15, col:51>
|   |   `-TextComment 0x55dc7dcdc600 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x55dc7dcdc680 <line:2993:3>
|   | `-TextComment 0x55dc7dcdc650 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdc6a0 <col:4, line:2994:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcdc720 <line:2993:11, line:2994:3>
|   |   |-TextComment 0x55dc7dcdc6d0 <line:2993:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcdc6f0 <line:2994:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcdc740 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55dc7dcdc7b0 <line:2995:1>
|     `-TextComment 0x55dc7dcdc780 <col:1> Text=" "
|-FunctionDecl 0x55dc7db21808 <line:3020:1, line:3022:32> line:3020:13 k_work_q_user_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x55dc7db21610 <col:33, col:50> col:50 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55dc7db21680 <line:3021:5, col:23> col:23 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55dc7db216f0 <line:3022:5, col:12> col:12 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7db21768 <col:24, col:28> col:28 prio 'int'
| `-FullComment 0x55dc7dcdd040 <line:3001:3, line:3019:1>
|   |-ParagraphComment 0x55dc7dcdc8d0 <line:3001:3>
|   | `-TextComment 0x55dc7dcdc8a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdc8f0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x55dc7dcdc950 <col:10, col:40>
|   |   `-TextComment 0x55dc7dcdc920 <col:10, col:40> Text=" Start a workqueue in user mode"
|   |-ParagraphComment 0x55dc7dcdca50 <line:3003:3, line:3007:21>
|   | |-TextComment 0x55dc7dcdc980 <line:3003:3, col:77> Text=" This works identically to k_work_q_start() except it is callable from user"
|   | |-TextComment 0x55dc7dcdc9a0 <line:3004:3, col:61> Text=" mode, and the worker thread created will run in user mode."
|   | |-TextComment 0x55dc7dcdc9c0 <line:3005:3, col:74> Text=" The caller must have permissions granted on both the work_q parameter's"
|   | |-TextComment 0x55dc7dcdc9e0 <line:3006:3, col:75> Text=" thread and queue objects, and the same restrictions on priority apply as"
|   | `-TextComment 0x55dc7dcdca00 <line:3007:3, col:21> Text=" k_thread_create()."
|   |-ParagraphComment 0x55dc7dcdcaa0 <line:3009:3>
|   | `-TextComment 0x55dc7dcdca70 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdcac0 <col:4, line:3010:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcdcb70 <line:3009:17, line:3010:3>
|   |   |-TextComment 0x55dc7dcdcb20 <line:3009:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55dc7dcdcb40 <line:3010:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdcb90 <col:4, line:3012:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcdcc70 <line:3010:16, line:3012:3>
|   |   |-TextComment 0x55dc7dcdcbf0 <line:3010:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x55dc7dcdcc10 <line:3011:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x55dc7dcdcc30 <line:3012:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdcc90 <col:4, line:3015:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcdcd90 <line:3012:21, line:3015:3>
|   |   |-TextComment 0x55dc7dcdccf0 <line:3012:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x55dc7dcdcd10 <line:3013:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x55dc7dcdcd30 <line:3014:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x55dc7dcdcd50 <line:3015:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdcdb0 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dcdce40 <col:15, col:51>
|   |   `-TextComment 0x55dc7dcdce10 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x55dc7dcdce90 <line:3017:3>
|   | `-TextComment 0x55dc7dcdce60 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdceb0 <col:4, line:3018:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcdcf30 <line:3017:11, line:3018:3>
|   |   |-TextComment 0x55dc7dcdcee0 <line:3017:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcdcf00 <line:3018:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcdcf50 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55dc7dcdcfc0 <line:3019:1>
|     `-TextComment 0x55dc7dcdcf90 <col:1> Text=" "
|-FunctionDecl 0x55dc7db21b30 <line:3036:1, line:3037:29> line:3036:13 k_delayed_work_init 'void (struct k_delayed_work *, k_work_handler_t)' extern
| |-ParmVarDecl 0x55dc7db219b0 <col:33, col:56> col:56 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x55dc7db21a20 <line:3037:5, col:22> col:22 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x55dc7dcdd590 <line:3025:3, line:3035:1>
|   |-ParagraphComment 0x55dc7dcdd0e0 <line:3025:3>
|   | `-TextComment 0x55dc7dcdd0b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdd100 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55dc7dcdd160 <col:10, col:41>
|   |   `-TextComment 0x55dc7dcdd130 <col:10, col:41> Text=" Initialize a delayed work item."
|   |-ParagraphComment 0x55dc7dcdd1d0 <line:3027:3, line:3028:17>
|   | |-TextComment 0x55dc7dcdd180 <line:3027:3, col:67> Text=" This routine initializes a workqueue delayed work item, prior to"
|   | `-TextComment 0x55dc7dcdd1a0 <line:3028:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x55dc7dcdd220 <line:3030:3>
|   | `-TextComment 0x55dc7dcdd1f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdd240 <col:4, line:3031:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcdd2f0 <line:3030:15, line:3031:3>
|   |   |-TextComment 0x55dc7dcdd2a0 <line:3030:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x55dc7dcdd2c0 <line:3031:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdd310 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcdd3a0 <col:18, col:70>
|   |   `-TextComment 0x55dc7dcdd370 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x55dc7dcdd3f0 <line:3033:3>
|   | `-TextComment 0x55dc7dcdd3c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdd410 <col:4, line:3034:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcdd490 <line:3033:11, line:3034:3>
|   |   |-TextComment 0x55dc7dcdd440 <line:3033:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcdd460 <line:3034:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcdd4b0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x55dc7dcdd520 <line:3035:1>
|     `-TextComment 0x55dc7dcdd4f0 <col:1> Text=" "
|-FunctionDecl 0x55dc7db21e68 <line:3071:1, line:3073:19> line:3071:12 used k_delayed_work_submit_to_queue 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' extern
| |-ParmVarDecl 0x55dc7db21c30 <col:43, col:60> col:60 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55dc7db21cb8 <line:3072:8, col:31> col:31 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x55dc7db21d28 <line:3073:8, col:14> col:14 delay 's32_t':'int'
| `-FullComment 0x55dc7dcde190 <line:3040:3, line:3070:1>
|   |-ParagraphComment 0x55dc7dcdd630 <line:3040:3>
|   | `-TextComment 0x55dc7dcdd600 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdd650 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55dc7dcdd6b0 <col:10, col:37>
|   |   `-TextComment 0x55dc7dcdd680 <col:10, col:37> Text=" Submit a delayed work item."
|   |-ParagraphComment 0x55dc7dcdd920 <line:3042:3, line:3046:37>
|   | |-TextComment 0x55dc7dcdd6d0 <line:3042:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x55dc7dcdd720 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55dc7dcdd740 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x55dc7dcdd760 <line:3043:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcdd7b0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x55dc7dcdd7d0 <col:13, col:30> Text=" after a delay of "
|   | |-InlineCommandComment 0x55dc7dcdd820 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x55dc7dcdd840 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x55dc7dcdd860 <line:3044:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x55dc7dcdd880 <line:3045:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x55dc7dcdd8a0 <line:3046:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x55dc7dcdda30 <line:3048:3, line:3053:28>
|   | |-TextComment 0x55dc7dcdd940 <line:3048:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x55dc7dcdd960 <line:3049:3, col:65> Text=" counting down cancels the existing submission and restarts the"
|   | |-TextComment 0x55dc7dcdd980 <line:3050:3, col:61> Text=" countdown using the new delay.  Note that this behavior is"
|   | |-TextComment 0x55dc7dcdd9a0 <line:3051:3, col:62> Text=" inherently subject to race conditions with the pre-existing"
|   | |-TextComment 0x55dc7dcdd9c0 <line:3052:3, col:69> Text=" timeouts and work queue, so care must be taken to synchronize such"
|   | `-TextComment 0x55dc7dcdd9e0 <line:3053:3, col:28> Text=" resubmissions externally."
|   |-ParagraphComment 0x55dc7dcdda80 <line:3055:3>
|   | `-TextComment 0x55dc7dcdda50 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcddaa0 <col:4, line:3057:20> Name="warning"
|   | `-ParagraphComment 0x55dc7dcddb20 <line:3056:3, line:3057:20>
|   |   |-TextComment 0x55dc7dcddad0 <line:3056:3, col:71> Text=" A delayed work item must not be modified until it has been processed"
|   |   `-TextComment 0x55dc7dcddaf0 <line:3057:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x55dc7dcddb70 <line:3059:3>
|   | `-TextComment 0x55dc7dcddb40 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcddb90 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcddbf0 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcddbc0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcddc40 <line:3061:3>
|   | `-TextComment 0x55dc7dcddc10 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcddc60 <col:4, line:3062:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcddd10 <line:3061:17, line:3062:3>
|   |   |-TextComment 0x55dc7dcddcc0 <line:3061:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55dc7dcddce0 <line:3062:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcddd30 <col:4, line:3063:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcddde0 <line:3062:15, line:3063:3>
|   |   |-TextComment 0x55dc7dcddd90 <line:3062:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x55dc7dcdddb0 <line:3063:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdde00 <col:4, line:3064:18> [in] implicitly Param="delay" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcddeb0 <line:3063:16, line:3064:18>
|   |   |-TextComment 0x55dc7dcdde60 <line:3063:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x55dc7dcdde80 <line:3064:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x55dc7dcde060 <line:3066:3, line:3069:3>
|   | |-TextComment 0x55dc7dcdded0 <line:3066:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcddef0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcddf10 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x55dc7dcddf30 <line:3067:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcddf50 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcddf70 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x55dc7dcddf90 <line:3068:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcddfb0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcddfd0 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x55dc7dcddff0 <line:3069:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcde080 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x55dc7dcde0f0 <line:3070:1>
|     `-TextComment 0x55dc7dcde0c0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc33c68 <line:3094:1, col:61> col:12 k_delayed_work_cancel 'int (struct k_delayed_work *)' extern
| |-ParmVarDecl 0x55dc7dc33b60 <col:34, col:57> col:57 work 'struct k_delayed_work *'
| `-FullComment 0x55dc7dcde8e0 <line:3076:3, line:3093:1>
|   |-ParagraphComment 0x55dc7dcde230 <line:3076:3>
|   | `-TextComment 0x55dc7dcde200 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcde250 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55dc7dcde2b0 <col:10, col:37>
|   |   `-TextComment 0x55dc7dcde280 <col:10, col:37> Text=" Cancel a delayed work item."
|   |-ParagraphComment 0x55dc7dcde3a0 <line:3078:3, line:3080:12>
|   | |-TextComment 0x55dc7dcde2d0 <line:3078:3, col:60> Text=" This routine cancels the submission of delayed work item "
|   | |-InlineCommandComment 0x55dc7dcde320 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x55dc7dcde340 <line:3079:3, col:72> Text=" A delayed work item can only be canceled while its countdown is still"
|   | `-TextComment 0x55dc7dcde360 <line:3080:3, col:12> Text=" underway."
|   |-ParagraphComment 0x55dc7dcde3f0 <line:3082:3>
|   | `-TextComment 0x55dc7dcde3c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcde410 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcde470 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcde440 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcde4c0 <line:3084:3>
|   | `-TextComment 0x55dc7dcde490 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcde4e0 <col:4, line:3086:55> Name="note"
|   | `-ParagraphComment 0x55dc7dcde590 <line:3084:9, line:3086:55>
|   |   |-TextComment 0x55dc7dcde510 <line:3084:9, col:69> Text=" The result of calling this on a k_delayed_work item that has"
|   |   |-TextComment 0x55dc7dcde530 <line:3085:3, col:52> Text=" not been submitted (i.e. before the return of the"
|   |   `-TextComment 0x55dc7dcde550 <line:3086:3, col:55> Text=" k_delayed_work_submit_to_queue() call) is undefined."
|   |-ParagraphComment 0x55dc7dcde5e0 <line:3088:3>
|   | `-TextComment 0x55dc7dcde5b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcde600 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcde690 <col:15, col:44>
|   |   `-TextComment 0x55dc7dcde660 <col:15, col:44> Text=" Address of delayed work item."
|   |-ParagraphComment 0x55dc7dcde7d0 <line:3090:3, line:3092:3>
|   | |-TextComment 0x55dc7dcde6b0 <line:3090:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcde6d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcde6f0 <col:11, col:42> Text=" 0 Work item countdown canceled."
|   | |-TextComment 0x55dc7dcde710 <line:3091:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcde730 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcde750 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | `-TextComment 0x55dc7dcde770 <line:3092:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcde7f0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x55dc7dcde860 <line:3093:1>
|     `-TextComment 0x55dc7dcde830 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc33de8 <line:3118:1, line:3121:1> line:3118:20 k_work_submit 'void (struct k_work *)' static inline
| |-ParmVarDecl 0x55dc7dc33d60 <col:34, col:49> col:49 used work 'struct k_work *'
| |-CompoundStmt 0x55dc7dc34018 <line:3119:1, line:3121:1>
| | `-CallExpr 0x55dc7dc33fa0 <line:3120:2, col:44> 'void'
| |   |-ImplicitCastExpr 0x55dc7dc33f88 <col:2> 'void (*)(struct k_work_q *, struct k_work *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x55dc7dc33e90 <col:2> 'void (struct k_work_q *, struct k_work *)' Function 0x55dc7db1ffc0 'k_work_submit_to_queue' 'void (struct k_work_q *, struct k_work *)'
| |   |-UnaryOperator 0x55dc7dc33ee0 <col:25, col:26> 'struct k_work_q *' prefix '&'
| |   | `-DeclRefExpr 0x55dc7dc33eb8 <col:26> 'struct k_work_q':'struct k_work_q' lvalue Var 0x55dc7db1ef28 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |   `-ImplicitCastExpr 0x55dc7dc33fd8 <col:40> 'struct k_work *' <LValueToRValue>
| |     `-DeclRefExpr 0x55dc7dc33f00 <col:40> 'struct k_work *' lvalue ParmVar 0x55dc7dc33d60 'work' 'struct k_work *'
| `-FullComment 0x55dc7dcdf0a0 <line:3097:3, line:3117:1>
|   |-ParagraphComment 0x55dc7dcde990 <line:3097:3>
|   | `-TextComment 0x55dc7dcde950 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcde9b0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55dc7dcdea10 <col:10, col:53>
|   |   `-TextComment 0x55dc7dcde9e0 <col:10, col:53> Text=" Submit a work item to the system workqueue."
|   |-ParagraphComment 0x55dc7dcdeba0 <line:3099:3, line:3104:15>
|   | |-TextComment 0x55dc7dcdea30 <line:3099:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x55dc7dcdea80 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55dc7dcdeaa0 <col:42, col:71> Text=" to be processed by the system"
|   | |-TextComment 0x55dc7dcdeac0 <line:3100:3, col:74> Text=" workqueue. If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x55dc7dcdeae0 <line:3101:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x55dc7dcdeb00 <line:3102:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x55dc7dcdeb20 <line:3103:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x55dc7dcdeb40 <line:3104:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x55dc7dcdebf0 <line:3106:3>
|   | `-TextComment 0x55dc7dcdebc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdec10 <col:4, line:3109:50> Name="warning"
|   | `-ParagraphComment 0x55dc7dcdecc0 <line:3107:3, line:3109:50>
|   |   |-TextComment 0x55dc7dcdec40 <line:3107:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x55dc7dcdec60 <line:3108:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x55dc7dcdec80 <line:3109:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x55dc7dcded10 <line:3111:3>
|   | `-TextComment 0x55dc7dcdece0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcded30 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcded90 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcded60 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcdede0 <line:3113:3>
|   | `-TextComment 0x55dc7dcdedb0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdee00 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcdee90 <col:15, col:36>
|   |   `-TextComment 0x55dc7dcdee60 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x55dc7dcdeee0 <line:3115:3>
|   | `-TextComment 0x55dc7dcdeeb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdef00 <col:4, line:3116:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcdef80 <line:3115:11, line:3116:3>
|   |   |-TextComment 0x55dc7dcdef30 <line:3115:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcdef50 <line:3116:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcdefa0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55dc7dcdf010 <line:3117:1>
|     `-TextComment 0x55dc7dcdefe0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc341e8 <line:3156:1, line:3160:1> line:3156:19 k_delayed_work_submit 'int (struct k_delayed_work *, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc34058 <col:41, col:64> col:64 used work 'struct k_delayed_work *'
| |-ParmVarDecl 0x55dc7dc340c8 <line:3157:6, col:12> col:12 used delay 's32_t':'int'
| |-CompoundStmt 0x55dc7dc34488 <line:3158:1, line:3160:1>
| | `-ReturnStmt 0x55dc7dc34440 <line:3159:2, col:66>
| |   `-CallExpr 0x55dc7dc343d0 <col:9, col:66> 'int'
| |     |-ImplicitCastExpr 0x55dc7dc343b8 <col:9> 'int (*)(struct k_work_q *, struct k_delayed_work *, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dc34298 <col:9> 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' Function 0x55dc7db21e68 'k_delayed_work_submit_to_queue' 'int (struct k_work_q *, struct k_delayed_work *, s32_t)'
| |     |-UnaryOperator 0x55dc7dc342e8 <col:40, col:41> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x55dc7dc342c0 <col:41> 'struct k_work_q':'struct k_work_q' lvalue Var 0x55dc7db1ef28 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x55dc7dc34410 <col:55> 'struct k_delayed_work *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dc34308 <col:55> 'struct k_delayed_work *' lvalue ParmVar 0x55dc7dc34058 'work' 'struct k_delayed_work *'
| |     `-ImplicitCastExpr 0x55dc7dc34428 <col:61> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x55dc7dc34330 <col:61> 's32_t':'int' lvalue ParmVar 0x55dc7dc340c8 'delay' 's32_t':'int'
| `-FullComment 0x55dc7dcdfba0 <line:3124:3, line:3155:1>
|   |-ParagraphComment 0x55dc7dcdf140 <line:3124:3>
|   | `-TextComment 0x55dc7dcdf110 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdf160 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x55dc7dcdf1c0 <col:10, col:61>
|   |   `-TextComment 0x55dc7dcdf190 <col:10, col:61> Text=" Submit a delayed work item to the system workqueue."
|   |-ParagraphComment 0x55dc7dcdf3b0 <line:3126:3, line:3130:37>
|   | |-TextComment 0x55dc7dcdf1e0 <line:3126:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x55dc7dcdf230 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55dc7dcdf250 <col:44, col:73> Text=" to be processed by the system"
|   | |-TextComment 0x55dc7dcdf270 <line:3127:3, col:30> Text=" workqueue after a delay of "
|   | |-InlineCommandComment 0x55dc7dcdf2c0 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x55dc7dcdf2e0 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x55dc7dcdf300 <line:3128:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x55dc7dcdf320 <line:3129:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x55dc7dcdf340 <line:3130:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x55dc7dcdf4f0 <line:3132:3, line:3138:72>
|   | |-TextComment 0x55dc7dcdf3d0 <line:3132:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x55dc7dcdf3f0 <line:3133:3, col:75> Text=" counting down cancels the existing submission and restarts the countdown"
|   | |-TextComment 0x55dc7dcdf410 <line:3134:3, col:68> Text=" using the new delay. If the work item is currently pending on the"
|   | |-TextComment 0x55dc7dcdf430 <line:3135:3, col:74> Text=" workqueue's queue because the countdown has completed it is too late to"
|   | |-TextComment 0x55dc7dcdf450 <line:3136:3, col:77> Text=" resubmit the item, and resubmission fails without impacting the work item."
|   | |-TextComment 0x55dc7dcdf470 <line:3137:3, col:80> Text=" If the work item has already been processed, or is currently being processed,"
|   | `-TextComment 0x55dc7dcdf490 <line:3138:3, col:72> Text=" its work is considered complete and the work item can be resubmitted."
|   |-ParagraphComment 0x55dc7dcdf540 <line:3140:3>
|   | `-TextComment 0x55dc7dcdf510 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdf560 <col:4, line:3143:50> Name="warning"
|   | `-ParagraphComment 0x55dc7dcdf610 <line:3141:3, line:3143:50>
|   |   |-TextComment 0x55dc7dcdf590 <line:3141:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x55dc7dcdf5b0 <line:3142:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x55dc7dcdf5d0 <line:3143:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x55dc7dcdf660 <line:3145:3>
|   | `-TextComment 0x55dc7dcdf630 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdf680 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dcdf6e0 <col:9, col:31>
|   |   `-TextComment 0x55dc7dcdf6b0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dcdf730 <line:3147:3>
|   | `-TextComment 0x55dc7dcdf700 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdf750 <col:4, line:3148:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcdf800 <line:3147:15, line:3148:3>
|   |   |-TextComment 0x55dc7dcdf7b0 <line:3147:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x55dc7dcdf7d0 <line:3148:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdf820 <col:4, line:3149:18> [in] implicitly Param="delay" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcdf8d0 <line:3148:16, line:3149:18>
|   |   |-TextComment 0x55dc7dcdf880 <line:3148:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x55dc7dcdf8a0 <line:3149:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x55dc7dcdfa80 <line:3151:3, line:3154:3>
|   | |-TextComment 0x55dc7dcdf8f0 <line:3151:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcdf910 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcdf930 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x55dc7dcdf950 <line:3152:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcdf970 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcdf990 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x55dc7dcdf9b0 <line:3153:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcdf9d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcdf9f0 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x55dc7dcdfa10 <line:3154:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcdfaa0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x55dc7dcdfb10 <line:3155:1>
|     `-TextComment 0x55dc7dcdfae0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc34590 <line:3174:1, line:3177:1> line:3174:21 k_delayed_work_remaining_get 's32_t (struct k_delayed_work *)' static inline
| |-ParmVarDecl 0x55dc7dc344c8 <col:50, col:73> col:73 used work 'struct k_delayed_work *'
| |-CompoundStmt 0x55dc7dc34828 <line:3175:1, line:3177:1>
| | `-ReturnStmt 0x55dc7dc347e0 <line:3176:2, col:66>
| |   `-ImplicitCastExpr 0x55dc7dc347c8 <col:9, col:66> 's32_t':'int' <IntegralCast>
| |     `-CallExpr 0x55dc7dc34780 <col:9, col:66> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55dc7dc34768 <col:9> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55dc7dc34638 <col:9> 'u64_t (u64_t)' Function 0x55dc7dbe7250 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
| |       `-ImplicitCastExpr 0x55dc7dc347b0 <col:31, col:65> 'u64_t':'unsigned long long' <IntegralCast>
| |         `-CallExpr 0x55dc7dc34738 <col:31, col:65> 's32_t':'int'
| |           |-ImplicitCastExpr 0x55dc7dc34720 <col:31> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x55dc7dc34660 <col:31> 's32_t (struct _timeout *)' Function 0x55dc7dc17170 'z_timeout_remaining' 's32_t (struct _timeout *)'
| |           `-UnaryOperator 0x55dc7dc34700 <col:51, col:58> 'struct _timeout *' prefix '&'
| |             `-MemberExpr 0x55dc7dc346c8 <col:52, col:58> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x55dc7db1e9f8
| |               `-ImplicitCastExpr 0x55dc7dc346b0 <col:52> 'struct k_delayed_work *' <LValueToRValue>
| |                 `-DeclRefExpr 0x55dc7dc34688 <col:52> 'struct k_delayed_work *' lvalue ParmVar 0x55dc7dc344c8 'work' 'struct k_delayed_work *'
| `-FullComment 0x55dc7dce0050 <line:3163:3, line:3173:1>
|   |-ParagraphComment 0x55dc7dcdfc40 <line:3163:3>
|   | `-TextComment 0x55dc7dcdfc10 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdfc60 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x55dc7dcdfcc0 <col:10, col:66>
|   |   `-TextComment 0x55dc7dcdfc90 <col:10, col:66> Text=" Get time remaining before a delayed work gets scheduled."
|   |-ParagraphComment 0x55dc7dcdfd60 <line:3165:3, line:3167:30>
|   | |-TextComment 0x55dc7dcdfce0 <line:3165:3, col:66> Text=" This routine computes the (approximate) time remaining before a"
|   | |-TextComment 0x55dc7dcdfd00 <line:3166:3, col:71> Text=" delayed work gets executed. If the delayed work is not waiting to be"
|   | `-TextComment 0x55dc7dcdfd20 <line:3167:3, col:30> Text=" scheduled, it returns zero."
|   |-ParagraphComment 0x55dc7dcdfdb0 <line:3169:3>
|   | `-TextComment 0x55dc7dcdfd80 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcdfdd0 <col:4, col:37> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcdfe60 <col:15, col:37>
|   |   `-TextComment 0x55dc7dcdfe30 <col:15, col:37> Text="     Delayed work item."
|   |-ParagraphComment 0x55dc7dcdfeb0 <line:3171:3>
|   | `-TextComment 0x55dc7dcdfe80 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcdfed0 <col:4, line:3172:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcdff50 <line:3171:11, line:3172:3>
|   |   |-TextComment 0x55dc7dcdff00 <line:3171:11, col:44> Text=" Remaining time (in milliseconds)."
|   |   `-TextComment 0x55dc7dcdff20 <line:3172:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcdff70 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x55dc7dcdffe0 <line:3173:1>
|     `-TextComment 0x55dc7dcdffb0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc34a70 <line:3190:1, line:3191:33> line:3190:13 k_work_poll_init 'void (struct k_work_poll *, k_work_handler_t)' extern
| |-ParmVarDecl 0x55dc7dc348f0 <col:30, col:50> col:50 work 'struct k_work_poll *'
| |-ParmVarDecl 0x55dc7dc34960 <line:3191:9, col:26> col:26 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x55dc7dce04e0 <line:3180:3, line:3188:14>
|   |-ParagraphComment 0x55dc7dce00f0 <line:3180:3>
|   | `-TextComment 0x55dc7dce00c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce0110 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dce0170 <col:10, col:43>
|   |   `-TextComment 0x55dc7dce0140 <col:10, col:43> Text=" Initialize a triggered work item."
|   |-ParagraphComment 0x55dc7dce01e0 <line:3182:3, line:3183:17>
|   | |-TextComment 0x55dc7dce0190 <line:3182:3, col:69> Text=" This routine initializes a workqueue triggered work item, prior to"
|   | `-TextComment 0x55dc7dce01b0 <line:3183:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x55dc7dce0230 <line:3185:3>
|   | `-TextComment 0x55dc7dce0200 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce0250 <col:4, line:3186:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce0300 <line:3185:15, line:3186:3>
|   |   |-TextComment 0x55dc7dce02b0 <line:3185:15, col:46> Text=" Address of triggered work item."
|   |   `-TextComment 0x55dc7dce02d0 <line:3186:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce0320 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dce03b0 <col:18, col:70>
|   |   `-TextComment 0x55dc7dce0380 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x55dc7dce0400 <line:3188:3>
|   | `-TextComment 0x55dc7dce03d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55dc7dce0420 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55dc7dce0480 <col:11, col:14>
|       `-TextComment 0x55dc7dce0450 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55dc7dc34ef8 <line:3227:1, line:3231:25> line:3227:12 used k_work_poll_submit_to_queue 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc34b98 <col:40, col:57> col:57 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55dc7dc34c20 <line:3228:12, col:32> col:32 work 'struct k_work_poll *'
| |-ParmVarDecl 0x55dc7dc34ca8 <line:3229:12, col:33> col:33 events 'struct k_poll_event *'
| |-ParmVarDecl 0x55dc7dc34d20 <line:3230:12, col:16> col:16 num_events 'int'
| |-ParmVarDecl 0x55dc7dc34d90 <line:3231:12, col:18> col:18 timeout 's32_t':'int'
| `-FullComment 0x55dc7dce1200 <line:3194:3, line:3225:69>
|   |-ParagraphComment 0x55dc7dce0580 <line:3194:3>
|   | `-TextComment 0x55dc7dce0550 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce05a0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dce0600 <col:10, col:39>
|   |   `-TextComment 0x55dc7dce05d0 <col:10, col:39> Text=" Submit a triggered work item."
|   |-ParagraphComment 0x55dc7dce0870 <line:3196:3, line:3200:50>
|   | |-TextComment 0x55dc7dce0620 <line:3196:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x55dc7dce0670 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55dc7dce0690 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x55dc7dce06b0 <line:3197:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce0700 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x55dc7dce0720 <col:13, col:35> Text=" when one of the given "
|   | |-InlineCommandComment 0x55dc7dce0770 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x55dc7dce0790 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x55dc7dce07b0 <line:3198:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x55dc7dce07d0 <line:3199:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x55dc7dce07f0 <line:3200:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x55dc7dce0960 <line:3202:3, line:3206:70>
|   | |-TextComment 0x55dc7dce0890 <line:3202:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x55dc7dce08b0 <line:3203:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x55dc7dce08d0 <line:3204:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x55dc7dce08f0 <line:3205:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x55dc7dce0910 <line:3206:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x55dc7dce09d0 <line:3208:3>
|   | `-TextComment 0x55dc7dce09a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce09f0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dce0a50 <col:9, col:31>
|   |   `-TextComment 0x55dc7dce0a20 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dce0aa0 <line:3210:3>
|   | `-TextComment 0x55dc7dce0a70 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce0ac0 <col:4, line:3213:57> Name="warning"
|   | `-ParagraphComment 0x55dc7dce0b70 <line:3211:3, line:3213:57>
|   |   |-TextComment 0x55dc7dce0af0 <line:3211:3, col:75> Text=" Provided array of events as well as a triggered work item must be placed"
|   |   |-TextComment 0x55dc7dce0b10 <line:3212:3, col:67> Text=" in persistent memory (valid until work handler execution or work"
|   |   `-TextComment 0x55dc7dce0b30 <line:3213:3, col:57> Text=" cancellation) and cannot be modified after submission."
|   |-ParagraphComment 0x55dc7dce0bc0 <line:3215:3>
|   | `-TextComment 0x55dc7dce0b90 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce0be0 <col:4, line:3216:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce0c90 <line:3215:17, line:3216:3>
|   |   |-TextComment 0x55dc7dce0c40 <line:3215:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55dc7dce0c60 <line:3216:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce0cb0 <col:4, line:3217:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dce0d60 <line:3216:15, line:3217:3>
|   |   |-TextComment 0x55dc7dce0d10 <line:3216:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x55dc7dce0d30 <line:3217:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce0d80 <col:4, line:3218:3> [in] implicitly Param="events" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dce0e30 <line:3217:17, line:3218:3>
|   |   |-TextComment 0x55dc7dce0de0 <line:3217:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x55dc7dce0e00 <line:3218:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce0e50 <col:4, line:3219:3> [in] implicitly Param="num_events" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dce0f00 <line:3218:21, line:3219:3>
|   |   |-TextComment 0x55dc7dce0eb0 <line:3218:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x55dc7dce0ed0 <line:3219:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce0f20 <col:4, line:3220:42> [in] implicitly Param="timeout" ParamIndex=4
|   | `-ParagraphComment 0x55dc7dce0fd0 <line:3219:18, line:3220:42>
|   |   |-TextComment 0x55dc7dce0f80 <line:3219:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x55dc7dce0fa0 <line:3220:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x55dc7dce1160 <line:3223:3, line:3225:69>
|     |-TextComment 0x55dc7dce0ff0 <line:3223:3> Text=" "
|     |-InlineCommandComment 0x55dc7dce1010 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55dc7dce1030 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x55dc7dce1050 <line:3224:3> Text=" "
|     |-InlineCommandComment 0x55dc7dce1070 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55dc7dce1090 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x55dc7dce10b0 <line:3225:3> Text=" "
|     |-InlineCommandComment 0x55dc7dce10d0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55dc7dce10f0 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x55dc7dc352c8 <line:3264:1, line:3271:1> line:3264:19 k_work_poll_submit 'int (struct k_work_poll *, struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc35010 <col:38, col:58> col:58 used work 'struct k_work_poll *'
| |-ParmVarDecl 0x55dc7dc35098 <line:3265:10, col:31> col:31 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x55dc7dc35110 <line:3266:10, col:14> col:14 used num_events 'int'
| |-ParmVarDecl 0x55dc7dc35180 <line:3267:10, col:16> col:16 used timeout 's32_t':'int'
| |-CompoundStmt 0x55dc7dc35608 <line:3268:1, line:3271:1>
| | `-ReturnStmt 0x55dc7dc355c0 <line:3269:2, line:3270:34>
| |   `-CallExpr 0x55dc7dc35510 <line:3269:9, line:3270:34> 'int'
| |     |-ImplicitCastExpr 0x55dc7dc354f8 <line:3269:9> 'int (*)(struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55dc7dc35388 <col:9> 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' Function 0x55dc7dc34ef8 'k_work_poll_submit_to_queue' 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)'
| |     |-UnaryOperator 0x55dc7dc353d8 <col:37, col:38> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x55dc7dc353b0 <col:38> 'struct k_work_q':'struct k_work_q' lvalue Var 0x55dc7db1ef28 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x55dc7dc35560 <col:52> 'struct k_work_poll *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dc353f8 <col:52> 'struct k_work_poll *' lvalue ParmVar 0x55dc7dc35010 'work' 'struct k_work_poll *'
| |     |-ImplicitCastExpr 0x55dc7dc35578 <line:3270:7> 'struct k_poll_event *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dc35420 <col:7> 'struct k_poll_event *' lvalue ParmVar 0x55dc7dc35098 'events' 'struct k_poll_event *'
| |     |-ImplicitCastExpr 0x55dc7dc35590 <col:15> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x55dc7dc35448 <col:15> 'int' lvalue ParmVar 0x55dc7dc35110 'num_events' 'int'
| |     `-ImplicitCastExpr 0x55dc7dc355a8 <col:27> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x55dc7dc35470 <col:27> 's32_t':'int' lvalue ParmVar 0x55dc7dc35180 'timeout' 's32_t':'int'
| `-FullComment 0x55dc7dce1d70 <line:3234:3, line:3262:69>
|   |-ParagraphComment 0x55dc7dce12a0 <line:3234:3>
|   | `-TextComment 0x55dc7dce1270 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce12c0 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x55dc7dce1320 <col:10, col:63>
|   |   `-TextComment 0x55dc7dce12f0 <col:10, col:63> Text=" Submit a triggered work item to the system workqueue."
|   |-ParagraphComment 0x55dc7dce1510 <line:3236:3, line:3240:50>
|   | |-TextComment 0x55dc7dce1340 <line:3236:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x55dc7dce1390 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55dc7dce13b0 <col:44, col:69> Text=" to be processed by system"
|   | |-TextComment 0x55dc7dce13d0 <line:3237:3, col:35> Text=" workqueue when one of the given "
|   | |-InlineCommandComment 0x55dc7dce1420 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x55dc7dce1440 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x55dc7dce1460 <line:3238:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x55dc7dce1480 <line:3239:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x55dc7dce14a0 <line:3240:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x55dc7dce1600 <line:3242:3, line:3246:70>
|   | |-TextComment 0x55dc7dce1530 <line:3242:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x55dc7dce1550 <line:3243:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x55dc7dce1570 <line:3244:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x55dc7dce1590 <line:3245:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x55dc7dce15b0 <line:3246:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x55dc7dce1650 <line:3248:3>
|   | `-TextComment 0x55dc7dce1620 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce1670 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dce16d0 <col:9, col:31>
|   |   `-TextComment 0x55dc7dce16a0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dce1720 <line:3250:3>
|   | `-TextComment 0x55dc7dce16f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce1740 <col:4, line:3252:63> Name="warning"
|   | `-ParagraphComment 0x55dc7dce17c0 <line:3251:3, line:3252:63>
|   |   |-TextComment 0x55dc7dce1770 <line:3251:3, col:72> Text=" Provided array of events as well as a triggered work item must not be"
|   |   `-TextComment 0x55dc7dce1790 <line:3252:3, col:63> Text=" modified until the item has been processed by the workqueue."
|   |-ParagraphComment 0x55dc7dce1810 <line:3254:3>
|   | `-TextComment 0x55dc7dce17e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce1830 <col:4, line:3255:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce18e0 <line:3254:15, line:3255:3>
|   |   |-TextComment 0x55dc7dce1890 <line:3254:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x55dc7dce18b0 <line:3255:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce1900 <col:4, line:3256:3> [in] implicitly Param="events" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dce19b0 <line:3255:17, line:3256:3>
|   |   |-TextComment 0x55dc7dce1960 <line:3255:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x55dc7dce1980 <line:3256:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce19d0 <col:4, line:3257:3> [in] implicitly Param="num_events" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dce1a80 <line:3256:21, line:3257:3>
|   |   |-TextComment 0x55dc7dce1a30 <line:3256:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x55dc7dce1a50 <line:3257:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce1aa0 <col:4, line:3258:42> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dce1b50 <line:3257:18, line:3258:42>
|   |   |-TextComment 0x55dc7dce1b00 <line:3257:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x55dc7dce1b20 <line:3258:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x55dc7dce1ce0 <line:3260:3, line:3262:69>
|     |-TextComment 0x55dc7dce1b70 <line:3260:3> Text=" "
|     |-InlineCommandComment 0x55dc7dce1b90 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55dc7dce1bb0 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x55dc7dce1bd0 <line:3261:3> Text=" "
|     |-InlineCommandComment 0x55dc7dce1bf0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55dc7dce1c10 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x55dc7dce1c30 <line:3262:3> Text=" "
|     |-InlineCommandComment 0x55dc7dce1c50 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55dc7dce1c70 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x55dc7dc35758 <line:3287:1, col:55> col:12 k_work_poll_cancel 'int (struct k_work_poll *)' extern
| |-ParmVarDecl 0x55dc7dc35648 <col:31, col:51> col:51 work 'struct k_work_poll *'
| `-FullComment 0x55dc7dce22c0 <line:3274:3, line:3285:74>
|   |-ParagraphComment 0x55dc7dce1e10 <line:3274:3>
|   | `-TextComment 0x55dc7dce1de0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce1e30 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dce1e90 <col:10, col:39>
|   |   `-TextComment 0x55dc7dce1e60 <col:10, col:39> Text=" Cancel a triggered work item."
|   |-ParagraphComment 0x55dc7dce1f80 <line:3276:3, line:3278:14>
|   | |-TextComment 0x55dc7dce1eb0 <line:3276:3, col:62> Text=" This routine cancels the submission of triggered work item "
|   | |-InlineCommandComment 0x55dc7dce1f00 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x55dc7dce1f20 <line:3277:3, col:72> Text=" A triggered work item can only be canceled if no event triggered work"
|   | `-TextComment 0x55dc7dce1f40 <line:3278:3, col:14> Text=" submission."
|   |-ParagraphComment 0x55dc7dce1fd0 <line:3280:3>
|   | `-TextComment 0x55dc7dce1fa0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce1ff0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dce2050 <col:9, col:31>
|   |   `-TextComment 0x55dc7dce2020 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dce20a0 <line:3282:3>
|   | `-TextComment 0x55dc7dce2070 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce20c0 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce2150 <col:15, col:44>
|   |   `-TextComment 0x55dc7dce2120 <col:15, col:44> Text=" Address of delayed work item."
|   `-ParagraphComment 0x55dc7dce2260 <line:3284:3, line:3285:74>
|     |-TextComment 0x55dc7dce2170 <line:3284:3> Text=" "
|     |-InlineCommandComment 0x55dc7dce2190 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55dc7dce21b0 <col:11, col:32> Text=" 0 Work item canceled."
|     |-TextComment 0x55dc7dce21d0 <line:3285:3> Text=" "
|     |-InlineCommandComment 0x55dc7dce21f0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55dc7dce2210 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|-RecordDecl 0x55dc7dc35858 prev 0x55dc7dc00c48 <line:3300:1, line:3314:1> line:3300:8 struct k_mutex definition
| |-FullComment 0x55dc7dce2450 <line:3297:3, line:3299:1>
| | |-ParagraphComment 0x55dc7dce2380 <line:3297:3, line:3298:3>
| | | |-TextComment 0x55dc7dce2330 <line:3297:3, col:18> Text=" Mutex Structure"
| | | `-TextComment 0x55dc7dce2350 <line:3298:3> Text=" "
| | |-VerbatimLineComment 0x55dc7dce23a0 <col:4, col:23> Text=" mutex_apis"
| | `-ParagraphComment 0x55dc7dce2410 <line:3299:1>
| |   `-TextComment 0x55dc7dce23e0 <col:1> Text=" "
| |-FieldDecl 0x55dc7dc35918 <line:3302:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x55dc7dce2520 <line:3301:5, col:22>
| |   `-ParagraphComment 0x55dc7dce24f0 <col:5, col:22>
| |     `-TextComment 0x55dc7dce24c0 <col:5, col:22> Text=" Mutex wait queue "
| |-FieldDecl 0x55dc7dc359b0 <line:3304:2, col:19> col:19 owner 'struct k_thread *'
| | `-FullComment 0x55dc7dce25f0 <line:3303:5, col:17>
| |   `-ParagraphComment 0x55dc7dce25c0 <col:5, col:17>
| |     `-TextComment 0x55dc7dce2590 <col:5, col:17> Text=" Mutex owner "
| |-FieldDecl 0x55dc7dc35a38 <line:3307:2, col:8> col:8 lock_count 'u32_t':'unsigned int'
| | `-FullComment 0x55dc7dce26c0 <line:3306:5, col:24>
| |   `-ParagraphComment 0x55dc7dce2690 <col:5, col:24>
| |     `-TextComment 0x55dc7dce2660 <col:5, col:24> Text=" Current lock count "
| `-FieldDecl 0x55dc7dc35ac0 <line:3310:2, col:6> col:6 owner_orig_prio 'int'
|   `-FullComment 0x55dc7dce2790 <line:3309:5, col:30>
|     `-ParagraphComment 0x55dc7dce2760 <col:5, col:30>
|       `-TextComment 0x55dc7dce2730 <col:5, col:30> Text=" Original thread priority "
|-FunctionDecl 0x55dc7dc35d98 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3361:49> col:15 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x55dc7dc35c90 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| `-FullComment 0x55dc7dce2c50 <line:3349:3, line:3360:1>
|   |-ParagraphComment 0x55dc7dce2830 <line:3349:3>
|   | `-TextComment 0x55dc7dce2800 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce2850 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55dc7dce28b0 <col:10, col:29>
|   |   `-TextComment 0x55dc7dce2880 <col:10, col:29> Text=" Initialize a mutex."
|   |-ParagraphComment 0x55dc7dce2900 <line:3351:3, col:67>
|   | `-TextComment 0x55dc7dce28d0 <col:3, col:67> Text=" This routine initializes a mutex object, prior to its first use."
|   |-ParagraphComment 0x55dc7dce2950 <line:3353:3, col:70>
|   | `-TextComment 0x55dc7dce2920 <col:3, col:70> Text=" Upon completion, the mutex is available and does not have an owner."
|   |-ParagraphComment 0x55dc7dce29b0 <line:3355:3>
|   | `-TextComment 0x55dc7dce2970 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce29d0 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce2a60 <col:16, col:37>
|   |   `-TextComment 0x55dc7dce2a30 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x55dc7dce2b00 <line:3357:3, col:33>
|   | |-TextComment 0x55dc7dce2a80 <col:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce2aa0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55dc7dce2ac0 <col:11, col:33> Text=" 0 Mutex object created"
|   |-ParagraphComment 0x55dc7dce2b50 <line:3359:3>
|   | `-TextComment 0x55dc7dce2b20 <col:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dce2b70 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x55dc7dce2be0 <line:3360:1>
|     `-TextComment 0x55dc7dce2bb0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc36018 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3384:64> col:15 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc35e90 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| |-ParmVarDecl 0x55dc7dc35f00 <col:51, col:57> col:57 timeout 's32_t':'int'
| `-FullComment 0x55dc7dce33d0 <line:3365:3, line:3383:1>
|   |-ParagraphComment 0x55dc7dce2cf0 <line:3365:3>
|   | `-TextComment 0x55dc7dce2cc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce2d10 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x55dc7dce2d70 <col:10, col:23>
|   |   `-TextComment 0x55dc7dce2d40 <col:10, col:23> Text=" Lock a mutex."
|   |-ParagraphComment 0x55dc7dce2e90 <line:3367:3, line:3369:20>
|   | |-TextComment 0x55dc7dce2d90 <line:3367:3, col:22> Text=" This routine locks "
|   | |-InlineCommandComment 0x55dc7dce2de0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x55dc7dce2e00 <col:32, col:73> Text=" If the mutex is locked by another thread,"
|   | |-TextComment 0x55dc7dce2e20 <line:3368:3, col:70> Text=" the calling thread waits until the mutex becomes available or until"
|   | `-TextComment 0x55dc7dce2e40 <line:3369:3, col:20> Text=" a timeout occurs."
|   |-ParagraphComment 0x55dc7dce2f00 <line:3371:3, line:3372:62>
|   | |-TextComment 0x55dc7dce2eb0 <line:3371:3, col:77> Text=" A thread is permitted to lock a mutex it has already locked. The operation"
|   | `-TextComment 0x55dc7dce2ed0 <line:3372:3, col:62> Text=" completes immediately and the lock count is increased by 1."
|   |-ParagraphComment 0x55dc7dce2f50 <line:3374:3>
|   | `-TextComment 0x55dc7dce2f20 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce2f70 <col:4, line:3375:3> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce3020 <line:3374:16, line:3375:3>
|   |   |-TextComment 0x55dc7dce2fd0 <line:3374:16, col:37> Text=" Address of the mutex."
|   |   `-TextComment 0x55dc7dce2ff0 <line:3375:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce3040 <col:4, line:3377:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dce3120 <line:3375:18, line:3377:28>
|   |   |-TextComment 0x55dc7dce30a0 <line:3375:18, col:67> Text=" Non-negative waiting period to lock the mutex (in"
|   |   |-TextComment 0x55dc7dce30c0 <line:3376:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55dc7dce30e0 <line:3377:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55dc7dce32d0 <line:3379:3, line:3382:3>
|   | |-TextComment 0x55dc7dce3140 <line:3379:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce3160 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce3180 <col:11, col:26> Text=" 0 Mutex locked."
|   | |-TextComment 0x55dc7dce31a0 <line:3380:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce31c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce31e0 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x55dc7dce3200 <line:3381:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce3220 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce3240 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55dc7dce3260 <line:3382:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dce32f0 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x55dc7dce3360 <line:3383:1>
|     `-TextComment 0x55dc7dce3330 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc361b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3404:51> col:15 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x55dc7dc36120 <col:30, col:46> col:46 mutex 'struct k_mutex *'
| `-FullComment 0x55dc7dce3a60 <line:3387:3, line:3403:1>
|   |-ParagraphComment 0x55dc7dce3470 <line:3387:3>
|   | `-TextComment 0x55dc7dce3440 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce3490 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x55dc7dce34f0 <col:10, col:25>
|   |   `-TextComment 0x55dc7dce34c0 <col:10, col:25> Text=" Unlock a mutex."
|   |-ParagraphComment 0x55dc7dce35e0 <line:3389:3, line:3390:18>
|   | |-TextComment 0x55dc7dce3510 <line:3389:3, col:24> Text=" This routine unlocks "
|   | |-InlineCommandComment 0x55dc7dce3560 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x55dc7dce3580 <col:34, col:73> Text=" The mutex must already be locked by the"
|   | `-TextComment 0x55dc7dce35a0 <line:3390:3, col:18> Text=" calling thread."
|   |-ParagraphComment 0x55dc7dce3680 <line:3392:3, line:3394:10>
|   | |-TextComment 0x55dc7dce3600 <line:3392:3, col:78> Text=" The mutex cannot be claimed by another thread until it has been unlocked by"
|   | |-TextComment 0x55dc7dce3620 <line:3393:3, col:71> Text=" the calling thread as many times as it was previously locked by that"
|   | `-TextComment 0x55dc7dce3640 <line:3394:3, col:10> Text=" thread."
|   |-ParagraphComment 0x55dc7dce36d0 <line:3396:3>
|   | `-TextComment 0x55dc7dce36a0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce36f0 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce3780 <col:16, col:37>
|   |   `-TextComment 0x55dc7dce3750 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x55dc7dce3910 <line:3398:3, line:3400:42>
|   | |-TextComment 0x55dc7dce37a0 <line:3398:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce37c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce37e0 <col:11, col:28> Text=" 0 Mutex unlocked."
|   | |-TextComment 0x55dc7dce3800 <line:3399:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce3820 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce3840 <col:11, col:59> Text=" -EPERM The current thread does not own the mutex"
|   | |-TextComment 0x55dc7dce3860 <line:3400:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce3880 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55dc7dce38a0 <col:11, col:42> Text=" -EINVAL The mutex is not locked"
|   |-ParagraphComment 0x55dc7dce3960 <line:3402:3>
|   | `-TextComment 0x55dc7dce3930 <col:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dce3980 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x55dc7dce39f0 <line:3403:1>
|     `-TextComment 0x55dc7dce39c0 <col:1> Text=" "
|-RecordDecl 0x55dc7dc362b8 prev 0x55dc7dc00cf0 <line:3414:1, line:3422:1> line:3414:8 struct k_sem definition
| |-FullComment 0x55dc7dce3b80 <line:3411:3, col:24>
| | `-ParagraphComment 0x55dc7dce3b50 <col:3, col:24>
| |   |-TextComment 0x55dc7dce3ad0 <col:3> Text=" "
| |   |-InlineCommandComment 0x55dc7dce3af0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55dc7dce3b10 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55dc7dc36350 <line:3415:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x55dc7dc363a8 <line:3416:2, col:8> col:8 referenced count 'u32_t':'unsigned int'
| `-FieldDecl 0x55dc7dc36400 <line:3417:2, col:8> col:8 limit 'u32_t':'unsigned int'
|-FunctionDecl 0x55dc7dc367b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3460:24> line:3459:15 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x55dc7dc36590 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x55dc7dc36608 <col:45, col:58> col:58 initial_count 'unsigned int'
| |-ParmVarDecl 0x55dc7dc36680 <line:3460:6, col:19> col:19 limit 'unsigned int'
| `-FullComment 0x55dc7dce4200 <line:3446:3, line:3458:1>
|   |-ParagraphComment 0x55dc7dce3c20 <line:3446:3>
|   | `-TextComment 0x55dc7dce3bf0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce3c40 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55dc7dce3ca0 <col:10, col:33>
|   |   `-TextComment 0x55dc7dce3c70 <col:10, col:33> Text=" Initialize a semaphore."
|   |-ParagraphComment 0x55dc7dce3cf0 <line:3448:3, col:71>
|   | `-TextComment 0x55dc7dce3cc0 <col:3, col:71> Text=" This routine initializes a semaphore object, prior to its first use."
|   |-ParagraphComment 0x55dc7dce3d40 <line:3450:3>
|   | `-TextComment 0x55dc7dce3d10 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce3d60 <col:4, line:3451:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce3e10 <line:3450:14, line:3451:3>
|   |   |-TextComment 0x55dc7dce3dc0 <line:3450:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x55dc7dce3de0 <line:3451:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce3e30 <col:4, line:3452:3> [in] implicitly Param="initial_count" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dce3ee0 <line:3451:24, line:3452:3>
|   |   |-TextComment 0x55dc7dce3e90 <line:3451:24, col:48> Text=" Initial semaphore count."
|   |   `-TextComment 0x55dc7dce3eb0 <line:3452:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce3f00 <col:4, col:50> [in] implicitly Param="limit" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dce3f90 <col:16, col:50>
|   |   `-TextComment 0x55dc7dce3f60 <col:16, col:50> Text=" Maximum permitted semaphore count."
|   |-ParagraphComment 0x55dc7dce40a0 <line:3454:3, line:3455:33>
|   | |-TextComment 0x55dc7dce3fb0 <line:3454:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce3fd0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce3ff0 <col:11, col:43> Text=" 0 Semaphore created successfully"
|   | |-TextComment 0x55dc7dce4010 <line:3455:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce4030 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55dc7dce4050 <col:11, col:33> Text=" -EINVAL Invalid values"
|   |-ParagraphComment 0x55dc7dce40f0 <line:3457:3>
|   | `-TextComment 0x55dc7dce40c0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dce4110 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55dc7dce4180 <line:3458:1>
|     `-TextComment 0x55dc7dce4150 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc36a48 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3479:58> col:15 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc368c0 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x55dc7dc36930 <col:45, col:51> col:51 timeout 's32_t':'int'
| `-FullComment 0x55dc7dce4a20 <line:3463:3, line:3478:1>
|   |-ParagraphComment 0x55dc7dce42a0 <line:3463:3>
|   | `-TextComment 0x55dc7dce4270 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce42c0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55dc7dce4320 <col:10, col:27>
|   |   `-TextComment 0x55dc7dce42f0 <col:10, col:27> Text=" Take a semaphore."
|   |-ParagraphComment 0x55dc7dce43c0 <line:3465:3, col:24>
|   | |-TextComment 0x55dc7dce4340 <col:3, col:22> Text=" This routine takes "
|   | `-InlineCommandComment 0x55dc7dce4390 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x55dc7dce4410 <line:3467:3>
|   | `-TextComment 0x55dc7dce43e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce4430 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x55dc7dce4510 <col:9, col:72>
|   |   |-TextComment 0x55dc7dce4460 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x55dc7dce44b0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x55dc7dce44d0 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x55dc7dce4560 <line:3469:3>
|   | `-TextComment 0x55dc7dce4530 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce4580 <col:4, line:3470:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce4630 <line:3469:14, line:3470:3>
|   |   |-TextComment 0x55dc7dce45e0 <line:3469:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x55dc7dce4600 <line:3470:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce4650 <col:4, line:3472:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dce4730 <line:3470:18, line:3472:28>
|   |   |-TextComment 0x55dc7dce46b0 <line:3470:18, col:71> Text=" Non-negative waiting period to take the semaphore (in"
|   |   |-TextComment 0x55dc7dce46d0 <line:3471:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55dc7dce46f0 <line:3472:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55dc7dce48e0 <line:3474:3, line:3477:3>
|   | |-TextComment 0x55dc7dce4750 <line:3474:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce4770 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce4790 <col:11, col:29> Text=" 0 Semaphore taken."
|   | |-TextComment 0x55dc7dce47b0 <line:3475:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce47d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce47f0 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x55dc7dce4810 <line:3476:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce4830 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce4850 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55dc7dce4870 <line:3477:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dce4900 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55dc7dce4970 <line:3478:1>
|     `-TextComment 0x55dc7dce4940 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc37ca0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3494:44> col:16 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55dc7dc37ba0 <col:27, col:41> col:41 sem 'struct k_sem *'
| `-FullComment 0x55dc7dce5000 <line:3482:3, line:3493:1>
|   |-ParagraphComment 0x55dc7dce4ac0 <line:3482:3>
|   | `-TextComment 0x55dc7dce4a90 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce4ae0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55dc7dce4b40 <col:10, col:27>
|   |   `-TextComment 0x55dc7dce4b10 <col:10, col:27> Text=" Give a semaphore."
|   |-ParagraphComment 0x55dc7dce4c30 <line:3484:3, line:3485:19>
|   | |-TextComment 0x55dc7dce4b60 <line:3484:3, col:22> Text=" This routine gives "
|   | |-InlineCommandComment 0x55dc7dce4bb0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem,"
|   | |-TextComment 0x55dc7dce4bd0 <col:30, col:76> Text=" unless the semaphore is already at its maximum"
|   | `-TextComment 0x55dc7dce4bf0 <line:3485:3, col:19> Text=" permitted count."
|   |-ParagraphComment 0x55dc7dce4c80 <line:3487:3>
|   | `-TextComment 0x55dc7dce4c50 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce4ca0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dce4d00 <col:9, col:31>
|   |   `-TextComment 0x55dc7dce4cd0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dce4d50 <line:3489:3>
|   | `-TextComment 0x55dc7dce4d20 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce4d70 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce4e00 <col:14, col:39>
|   |   `-TextComment 0x55dc7dce4dd0 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x55dc7dce4e50 <line:3491:3>
|   | `-TextComment 0x55dc7dce4e20 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce4e70 <col:4, line:3492:3> Name="return"
|   | `-ParagraphComment 0x55dc7dce4ef0 <line:3491:11, line:3492:3>
|   |   |-TextComment 0x55dc7dce4ea0 <line:3491:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dce4ec0 <line:3492:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dce4f10 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55dc7dce4f80 <line:3493:1>
|     `-TextComment 0x55dc7dce4f50 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc37e28 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3506:45> col:16 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55dc7dc37da0 <col:28, col:42> col:42 sem 'struct k_sem *'
| `-FullComment 0x55dc7dce54e0 <line:3497:3, line:3505:1>
|   |-ParagraphComment 0x55dc7dce50a0 <line:3497:3>
|   | `-TextComment 0x55dc7dce5070 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce50c0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55dc7dce5120 <col:10, col:44>
|   |   `-TextComment 0x55dc7dce50f0 <col:10, col:44> Text=" Reset a semaphore's count to zero."
|   |-ParagraphComment 0x55dc7dce51f0 <line:3499:3, col:49>
|   | |-TextComment 0x55dc7dce5140 <col:3, col:34> Text=" This routine sets the count of "
|   | |-InlineCommandComment 0x55dc7dce5190 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x55dc7dce51b0 <col:41, col:49> Text=" to zero."
|   |-ParagraphComment 0x55dc7dce5240 <line:3501:3>
|   | `-TextComment 0x55dc7dce5210 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce5260 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce52f0 <col:14, col:39>
|   |   `-TextComment 0x55dc7dce52c0 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x55dc7dce5340 <line:3503:3>
|   | `-TextComment 0x55dc7dce5310 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce5360 <col:4, line:3504:3> Name="return"
|   | `-ParagraphComment 0x55dc7dce53e0 <line:3503:11, line:3504:3>
|   |   |-TextComment 0x55dc7dce5390 <line:3503:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dce53b0 <line:3504:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dce5400 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55dc7dce5470 <line:3505:1>
|     `-TextComment 0x55dc7dce5440 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc37fa8 <line:3511:1, line:3514:1> line:3511:20 used z_impl_k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55dc7dc37f20 <col:39, col:53> col:53 used sem 'struct k_sem *'
| |-CompoundStmt 0x55dc7dc38138 <line:3512:1, line:3514:1>
| | `-BinaryOperator 0x55dc7dc380e8 <line:3513:2, col:15> 'u32_t':'unsigned int' '='
| |   |-MemberExpr 0x55dc7dc38090 <col:2, col:7> 'u32_t':'unsigned int' lvalue ->count 0x55dc7dc363a8
| |   | `-ImplicitCastExpr 0x55dc7dc38078 <col:2> 'struct k_sem *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55dc7dc38050 <col:2> 'struct k_sem *' lvalue ParmVar 0x55dc7dc37f20 'sem' 'struct k_sem *'
| |   `-IntegerLiteral 0x55dc7dc380c8 <col:15> 'unsigned int' 0
| `-FullComment 0x55dc7dce55d0 <line:3509:3, col:12>
|   `-ParagraphComment 0x55dc7dce55a0 <col:3, col:12>
|     |-TextComment 0x55dc7dce5550 <col:3> Text=" "
|     `-InlineCommandComment 0x55dc7dce5570 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55dc7dc38288 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3526:57> col:24 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x55dc7dc38178 <col:40, col:54> col:54 sem 'struct k_sem *'
| `-FullComment 0x55dc7dce5a80 <line:3517:3, line:3525:1>
|   |-ParagraphComment 0x55dc7dce5670 <line:3517:3>
|   | `-TextComment 0x55dc7dce5640 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce5690 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55dc7dce56f0 <col:10, col:34>
|   |   `-TextComment 0x55dc7dce56c0 <col:10, col:34> Text=" Get a semaphore's count."
|   |-ParagraphComment 0x55dc7dce5790 <line:3519:3, col:47>
|   | |-TextComment 0x55dc7dce5710 <col:3, col:45> Text=" This routine returns the current count of "
|   | `-InlineCommandComment 0x55dc7dce5760 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x55dc7dce57e0 <line:3521:3>
|   | `-TextComment 0x55dc7dce57b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce5800 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce5890 <col:14, col:39>
|   |   `-TextComment 0x55dc7dce5860 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x55dc7dce58e0 <line:3523:3>
|   | `-TextComment 0x55dc7dce58b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce5900 <col:4, line:3524:3> Name="return"
|   | `-ParagraphComment 0x55dc7dce5980 <line:3523:11, line:3524:3>
|   |   |-TextComment 0x55dc7dce5930 <line:3523:11, col:35> Text=" Current semaphore count."
|   |   `-TextComment 0x55dc7dce5950 <line:3524:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dce59a0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55dc7dce5a10 <line:3525:1>
|     `-TextComment 0x55dc7dce59e0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc38410 <line:3531:1, line:3534:1> line:3531:28 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x55dc7dc38380 <col:51, col:65> col:65 used sem 'struct k_sem *'
| |-CompoundStmt 0x55dc7dc38618 <line:3532:1, line:3534:1>
| | `-ReturnStmt 0x55dc7dc38548 <line:3533:2, col:14>
| |   `-ImplicitCastExpr 0x55dc7dc38530 <col:9, col:14> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x55dc7dc384f8 <col:9, col:14> 'u32_t':'unsigned int' lvalue ->count 0x55dc7dc363a8
| |       `-ImplicitCastExpr 0x55dc7dc384e0 <col:9> 'struct k_sem *' <LValueToRValue>
| |         `-DeclRefExpr 0x55dc7dc384b8 <col:9> 'struct k_sem *' lvalue ParmVar 0x55dc7dc38380 'sem' 'struct k_sem *'
| `-FullComment 0x55dc7dce5b70 <line:3529:3, col:12>
|   `-ParagraphComment 0x55dc7dce5b40 <col:3, col:12>
|     |-TextComment 0x55dc7dce5af0 <col:3> Text=" "
|     `-InlineCommandComment 0x55dc7dce5b10 <col:4, col:12> Name="internal" RenderNormal
|-RecordDecl 0x55dc7dc38630 prev 0x55dc7dc00da0 <line:3565:1, line:3590:1> line:3565:8 struct k_msgq definition
| |-FullComment 0x55dc7dce5cc0 <line:3563:3, col:33>
| | |-ParagraphComment 0x55dc7dce5c10 <col:3>
| | | `-TextComment 0x55dc7dce5be0 <col:3> Text=" "
| | `-BlockCommandComment 0x55dc7dce5c30 <col:4, col:33> Name="brief"
| |   `-ParagraphComment 0x55dc7dce5c90 <col:10, col:33>
| |     `-TextComment 0x55dc7dce5c60 <col:10, col:33> Text=" Message Queue Structure"
| |-FieldDecl 0x55dc7dc386f8 <line:3567:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x55dc7dce5d90 <line:3566:5, col:30>
| |   `-ParagraphComment 0x55dc7dce5d60 <col:5, col:30>
| |     `-TextComment 0x55dc7dce5d30 <col:5, col:30> Text=" Message queue wait queue "
| |-FieldDecl 0x55dc7dc38788 <line:3569:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x55dc7dce5e60 <line:3568:5, col:10>
| |   `-ParagraphComment 0x55dc7dce5e30 <col:5, col:10>
| |     `-TextComment 0x55dc7dce5e00 <col:5, col:10> Text=" Lock "
| |-FieldDecl 0x55dc7dc38808 <line:3571:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x55dc7dce5f30 <line:3570:5, col:18>
| |   `-ParagraphComment 0x55dc7dce5f00 <col:5, col:18>
| |     `-TextComment 0x55dc7dce5ed0 <col:5, col:18> Text=" Message size "
| |-FieldDecl 0x55dc7dc38888 <line:3573:2, col:8> col:8 referenced max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x55dc7dce6000 <line:3572:5, col:32>
| |   `-ParagraphComment 0x55dc7dce5fd0 <col:5, col:32>
| |     `-TextComment 0x55dc7dce5fa0 <col:5, col:32> Text=" Maximal number of messages "
| |-FieldDecl 0x55dc7dc38910 <line:3575:2, col:8> col:8 buffer_start 'char *'
| | `-FullComment 0x55dc7dce60d0 <line:3574:5, col:29>
| |   `-ParagraphComment 0x55dc7dce60a0 <col:5, col:29>
| |     `-TextComment 0x55dc7dce6070 <col:5, col:29> Text=" Start of message buffer "
| |-FieldDecl 0x55dc7dc389a0 <line:3577:2, col:8> col:8 buffer_end 'char *'
| | `-FullComment 0x55dc7dce61a0 <line:3576:5, col:27>
| |   `-ParagraphComment 0x55dc7dce6170 <col:5, col:27>
| |     `-TextComment 0x55dc7dce6140 <col:5, col:27> Text=" End of message buffer "
| |-FieldDecl 0x55dc7dc38a30 <line:3579:2, col:8> col:8 read_ptr 'char *'
| | `-FullComment 0x55dc7dce6270 <line:3578:5, col:18>
| |   `-ParagraphComment 0x55dc7dce6240 <col:5, col:18>
| |     `-TextComment 0x55dc7dce6210 <col:5, col:18> Text=" Read pointer "
| |-FieldDecl 0x55dc7dc38ac0 <line:3581:2, col:8> col:8 write_ptr 'char *'
| | `-FullComment 0x55dc7dce6340 <line:3580:5, col:19>
| |   `-ParagraphComment 0x55dc7dce6310 <col:5, col:19>
| |     `-TextComment 0x55dc7dce62e0 <col:5, col:19> Text=" Write pointer "
| |-FieldDecl 0x55dc7dc38b48 <line:3583:2, col:8> col:8 referenced used_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x55dc7dce6410 <line:3582:5, col:29>
| |   `-ParagraphComment 0x55dc7dce63e0 <col:5, col:29>
| |     `-TextComment 0x55dc7dce63b0 <col:5, col:29> Text=" Number of used messages "
| `-FieldDecl 0x55dc7dbe8028 <line:3589:2, col:7> col:7 flags 'u8_t':'unsigned char'
|   `-FullComment 0x55dc7dce64e0 <line:3588:5, col:19>
|     `-ParagraphComment 0x55dc7dce64b0 <col:5, col:19>
|       `-TextComment 0x55dc7dce6480 <col:5, col:19> Text=" Message queue "
|-RecordDecl 0x55dc7dbe80f8 <line:3619:1, line:3626:1> line:3619:8 struct k_msgq_attrs definition
| |-FullComment 0x55dc7dce6630 <line:3617:3, col:34>
| | |-ParagraphComment 0x55dc7dce6580 <col:3>
| | | `-TextComment 0x55dc7dce6550 <col:3> Text=" "
| | `-BlockCommandComment 0x55dc7dce65a0 <col:4, col:34> Name="brief"
| |   `-ParagraphComment 0x55dc7dce6600 <col:10, col:34>
| |     `-TextComment 0x55dc7dce65d0 <col:10, col:34> Text=" Message Queue Attributes"
| |-FieldDecl 0x55dc7dbe81d8 <line:3621:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x55dc7dce6700 <line:3620:5, col:18>
| |   `-ParagraphComment 0x55dc7dce66d0 <col:5, col:18>
| |     `-TextComment 0x55dc7dce66a0 <col:5, col:18> Text=" Message Size "
| |-FieldDecl 0x55dc7dbe8258 <line:3623:2, col:8> col:8 max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x55dc7dce67d0 <line:3622:5, col:32>
| |   `-ParagraphComment 0x55dc7dce67a0 <col:5, col:32>
| |     `-TextComment 0x55dc7dce6770 <col:5, col:32> Text=" Maximal number of messages "
| `-FieldDecl 0x55dc7dbe82d8 <line:3625:2, col:8> col:8 used_msgs 'u32_t':'unsigned int'
|   `-FullComment 0x55dc7dce68a0 <line:3624:5, col:19>
|     `-ParagraphComment 0x55dc7dce6870 <col:5, col:19>
|       `-TextComment 0x55dc7dce6840 <col:5, col:19> Text=" Used messages "
|-FunctionDecl 0x55dc7dbe86d0 <line:3676:1, line:3677:18> line:3676:6 k_msgq_init 'void (struct k_msgq *, char *, size_t, u32_t)'
| |-ParmVarDecl 0x55dc7dbe8430 <col:18, col:33> col:33 q 'struct k_msgq *'
| |-ParmVarDecl 0x55dc7dbe84a8 <col:36, col:42> col:42 buffer 'char *'
| |-ParmVarDecl 0x55dc7dbe8518 <col:50, col:57> col:57 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dbe8588 <line:3677:4, col:10> col:10 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x55dc7dce71e0 <line:3658:3, line:3675:1>
|   |-ParagraphComment 0x55dc7dce6940 <line:3658:3>
|   | `-TextComment 0x55dc7dce6910 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce6960 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55dc7dce69d0 <col:10, col:37>
|   |   `-TextComment 0x55dc7dce6990 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x55dc7dce6a20 <line:3660:3, col:75>
|   | `-TextComment 0x55dc7dce69f0 <col:3, col:75> Text=" This routine initializes a message queue object, prior to its first use."
|   |-ParagraphComment 0x55dc7dce6c60 <line:3662:3, line:3666:32>
|   | |-TextComment 0x55dc7dce6a40 <line:3662:3, col:58> Text=" The message queue's ring buffer must contain space for "
|   | |-InlineCommandComment 0x55dc7dce6a90 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="max_msgs"
|   | |-TextComment 0x55dc7dce6ab0 <col:70, col:79> Text=" messages,"
|   | |-TextComment 0x55dc7dce6ad0 <line:3663:3, col:20> Text=" each of which is "
|   | |-InlineCommandComment 0x55dc7dce6b20 <col:21, col:22> Name="a" RenderEmphasized Arg[0]="msg_size"
|   | |-TextComment 0x55dc7dce6b40 <col:32, col:76> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x55dc7dce6b60 <line:3664:3, col:74> Text=" N-byte boundary, where N is a power of 2 (i.e. 1, 2, 4, ...). To ensure"
|   | |-TextComment 0x55dc7dce6b80 <line:3665:3, col:60> Text=" that each message is similarly aligned to this boundary, "
|   | |-InlineCommandComment 0x55dc7dce6bd0 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="q_msg_size"
|   | `-TextComment 0x55dc7dce6bf0 <line:3666:3, col:32> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x55dc7dce6cb0 <line:3668:3>
|   | `-TextComment 0x55dc7dce6c80 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce6cd0 <col:4, line:3669:3> [in] implicitly Param="q" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce6d80 <line:3668:12, line:3669:3>
|   |   |-TextComment 0x55dc7dce6d30 <line:3668:12, col:41> Text=" Address of the message queue."
|   |   `-TextComment 0x55dc7dce6d50 <line:3669:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce6da0 <col:4, line:3670:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dce6e50 <line:3669:17, line:3670:3>
|   |   |-TextComment 0x55dc7dce6e00 <line:3669:17, col:67> Text=" Pointer to ring buffer that holds queued messages."
|   |   `-TextComment 0x55dc7dce6e20 <line:3670:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce6e70 <col:4, line:3671:3> [in] implicitly Param="msg_size" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dce6f20 <line:3670:19, line:3671:3>
|   |   |-TextComment 0x55dc7dce6ed0 <line:3670:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x55dc7dce6ef0 <line:3671:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce6f40 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dce6fd0 <col:19, col:65>
|   |   `-TextComment 0x55dc7dce6fa0 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x55dc7dce7020 <line:3673:3>
|   | `-TextComment 0x55dc7dce6ff0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce7040 <col:4, line:3674:3> Name="return"
|   | `-ParagraphComment 0x55dc7dce70c0 <line:3673:11, line:3674:3>
|   |   |-TextComment 0x55dc7dce7070 <line:3673:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dce7090 <line:3674:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dce70e0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55dc7dce7150 <line:3675:1>
|     `-TextComment 0x55dc7dce7120 <col:1> Text=" "
|-FunctionDecl 0x55dc7dbe89f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3700:19> line:3699:15 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x55dc7dbe87e0 <col:33, col:48> col:48 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55dc7dbe8850 <col:54, col:61> col:61 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dbe88c0 <line:3700:5, col:11> col:11 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x55dc7dce7930 <line:3680:3, line:3698:1>
|   |-ParagraphComment 0x55dc7dce7280 <line:3680:3>
|   | `-TextComment 0x55dc7dce7250 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce72a0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55dc7dce7300 <col:10, col:37>
|   |   `-TextComment 0x55dc7dce72d0 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x55dc7dce73a0 <line:3682:3, line:3684:8>
|   | |-TextComment 0x55dc7dce7320 <line:3682:3, col:75> Text=" This routine initializes a message queue object, prior to its first use,"
|   | |-TextComment 0x55dc7dce7340 <line:3683:3, col:73> Text=" allocating its internal ring buffer from the calling thread's resource"
|   | `-TextComment 0x55dc7dce7360 <line:3684:3, col:8> Text=" pool."
|   |-ParagraphComment 0x55dc7dce7440 <line:3686:3, line:3688:25>
|   | |-TextComment 0x55dc7dce73c0 <line:3686:3, col:66> Text=" Memory allocated for the ring buffer can be released by calling"
|   | |-TextComment 0x55dc7dce73e0 <line:3687:3, col:73> Text=" k_msgq_cleanup(), or if userspace is enabled and the msgq object loses"
|   | `-TextComment 0x55dc7dce7400 <line:3688:3, col:25> Text=" all of its references."
|   |-ParagraphComment 0x55dc7dce7490 <line:3690:3>
|   | `-TextComment 0x55dc7dce7460 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce74b0 <col:4, line:3691:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce7560 <line:3690:15, line:3691:3>
|   |   |-TextComment 0x55dc7dce7510 <line:3690:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55dc7dce7530 <line:3691:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce7580 <col:4, line:3692:3> [in] implicitly Param="msg_size" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dce7630 <line:3691:19, line:3692:3>
|   |   |-TextComment 0x55dc7dce75e0 <line:3691:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x55dc7dce7600 <line:3692:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce7650 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dce76e0 <col:19, col:65>
|   |   `-TextComment 0x55dc7dce76b0 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x55dc7dce7730 <line:3694:3>
|   | `-TextComment 0x55dc7dce7700 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce7750 <col:4, line:3697:3> Name="return"
|   | `-ParagraphComment 0x55dc7dce7820 <line:3694:11, line:3697:3>
|   |   |-TextComment 0x55dc7dce7780 <line:3694:11, col:72> Text=" 0 on success, -ENOMEM if there was insufficient memory in the"
|   |   |-TextComment 0x55dc7dce77a0 <line:3695:3, col:66> Text="	thread's resource pool, or -EINVAL if the size parameters cause"
|   |   |-TextComment 0x55dc7dce77c0 <line:3696:3, col:23> Text="	an integer overflow."
|   |   `-TextComment 0x55dc7dce77e0 <line:3697:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dce7840 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55dc7dce78b0 <line:3698:1>
|     `-TextComment 0x55dc7dce7880 <col:1> Text=" "
|-FunctionDecl 0x55dc7dbe8c08 <line:3712:1, col:39> col:5 k_msgq_cleanup 'int (struct k_msgq *)'
| |-ParmVarDecl 0x55dc7dbe8b00 <col:20, col:35> col:35 msgq 'struct k_msgq *'
| `-FullComment 0x55dc7dce7d00 <line:3703:3, line:3710:33>
|   |-ParagraphComment 0x55dc7dce79d0 <line:3703:3>
|   | `-TextComment 0x55dc7dce79a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce79f0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55dc7dce7a50 <col:10, col:46>
|   |   `-TextComment 0x55dc7dce7a20 <col:10, col:46> Text=" Release allocated buffer for a queue"
|   |-ParagraphComment 0x55dc7dce7aa0 <line:3705:3, col:49>
|   | `-TextComment 0x55dc7dce7a70 <col:3, col:49> Text=" Releases memory allocated for the ring buffer."
|   |-ParagraphComment 0x55dc7dce7af0 <line:3707:3>
|   | `-TextComment 0x55dc7dce7ac0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce7b10 <col:4, col:39> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce7ba0 <col:15, col:39>
|   |   `-TextComment 0x55dc7dce7b70 <col:15, col:39> Text=" message queue to cleanup"
|   `-ParagraphComment 0x55dc7dce7cb0 <line:3709:3, line:3710:33>
|     |-TextComment 0x55dc7dce7bc0 <line:3709:3> Text=" "
|     |-InlineCommandComment 0x55dc7dce7be0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55dc7dce7c00 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x55dc7dce7c20 <line:3710:3> Text=" "
|     |-InlineCommandComment 0x55dc7dce7c40 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55dc7dce7c60 <col:11, col:33> Text=" -EBUSY Queue not empty"
|-FunctionDecl 0x55dc7dbe8f28 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3732:72> col:15 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dbe8d00 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55dc7dbe8d78 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x55dc7dbe8de8 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x55dc7dce8540 <line:3715:3, line:3731:1>
|   |-ParagraphComment 0x55dc7dce7da0 <line:3715:3>
|   | `-TextComment 0x55dc7dce7d70 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce7dc0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55dc7dce7e20 <col:10, col:44>
|   |   `-TextComment 0x55dc7dce7df0 <col:10, col:44> Text=" Send a message to a message queue."
|   |-ParagraphComment 0x55dc7dce7ec0 <line:3717:3, col:51>
|   | |-TextComment 0x55dc7dce7e40 <col:3, col:49> Text=" This routine sends a message to message queue "
|   | `-InlineCommandComment 0x55dc7dce7e90 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="q."
|   |-ParagraphComment 0x55dc7dce7f10 <line:3719:3>
|   | `-TextComment 0x55dc7dce7ee0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce7f30 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dce7f90 <col:9, col:31>
|   |   `-TextComment 0x55dc7dce7f60 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dce7fe0 <line:3721:3>
|   | `-TextComment 0x55dc7dce7fb0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce8000 <col:4, line:3722:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce80b0 <line:3721:15, line:3722:3>
|   |   |-TextComment 0x55dc7dce8060 <line:3721:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55dc7dce8080 <line:3722:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce80d0 <col:4, line:3723:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dce8180 <line:3722:15, line:3723:3>
|   |   |-TextComment 0x55dc7dce8130 <line:3722:15, col:38> Text=" Pointer to the message."
|   |   `-TextComment 0x55dc7dce8150 <line:3723:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce81a0 <col:4, line:3725:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dce8280 <line:3723:18, line:3725:28>
|   |   |-TextComment 0x55dc7dce8200 <line:3723:18, col:68> Text=" Non-negative waiting period to add the message (in"
|   |   |-TextComment 0x55dc7dce8220 <line:3724:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55dc7dce8240 <line:3725:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55dc7dce8430 <line:3727:3, line:3730:3>
|   | |-TextComment 0x55dc7dce82a0 <line:3727:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce82c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce82e0 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x55dc7dce8300 <line:3728:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce8320 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce8340 <col:11, col:60> Text=" -ENOMSG Returned without waiting or queue purged."
|   | |-TextComment 0x55dc7dce8360 <line:3729:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce8380 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce83a0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55dc7dce83c0 <line:3730:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dce8450 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55dc7dce84c0 <line:3731:1>
|     `-TextComment 0x55dc7dce8490 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc3c618 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3753:72> col:15 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc3c490 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55dc7dc3c508 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x55dc7dc3c578 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x55dc7dce8e70 <line:3735:3, line:3752:1>
|   |-ParagraphComment 0x55dc7dce85e0 <line:3735:3>
|   | `-TextComment 0x55dc7dce85b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce8600 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dce8660 <col:10, col:49>
|   |   `-TextComment 0x55dc7dce8630 <col:10, col:49> Text=" Receive a message from a message queue."
|   |-ParagraphComment 0x55dc7dce8750 <line:3737:3, line:3738:21>
|   | |-TextComment 0x55dc7dce8680 <line:3737:3, col:54> Text=" This routine receives a message from message queue "
|   | |-InlineCommandComment 0x55dc7dce86d0 <col:55, col:56> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x55dc7dce86f0 <col:59, col:74> Text=" in a "first in,"
|   | `-TextComment 0x55dc7dce8710 <line:3738:3, col:21> Text=" first out" manner."
|   |-ParagraphComment 0x55dc7dce87a0 <line:3740:3>
|   | `-TextComment 0x55dc7dce8770 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce87c0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x55dc7dce88a0 <col:9, col:72>
|   |   |-TextComment 0x55dc7dce87f0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x55dc7dce8840 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x55dc7dce8860 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x55dc7dce88f0 <line:3742:3>
|   | `-TextComment 0x55dc7dce88c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce8910 <col:4, line:3743:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce89e0 <line:3742:15, line:3743:3>
|   |   |-TextComment 0x55dc7dce8970 <line:3742:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55dc7dce8990 <line:3743:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce8a00 <col:4, line:3744:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dce8ab0 <line:3743:15, line:3744:3>
|   |   |-TextComment 0x55dc7dce8a60 <line:3743:15, col:60> Text=" Address of area to hold the received message."
|   |   `-TextComment 0x55dc7dce8a80 <line:3744:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce8ad0 <col:4, line:3746:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dce8bb0 <line:3744:18, line:3746:28>
|   |   |-TextComment 0x55dc7dce8b30 <line:3744:18, col:72> Text=" Non-negative waiting period to receive the message (in"
|   |   |-TextComment 0x55dc7dce8b50 <line:3745:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55dc7dce8b70 <line:3746:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55dc7dce8d60 <line:3748:3, line:3751:3>
|   | |-TextComment 0x55dc7dce8bd0 <line:3748:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce8bf0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce8c10 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x55dc7dce8c30 <line:3749:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce8c50 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce8c70 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x55dc7dce8c90 <line:3750:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce8cb0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce8cd0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55dc7dce8cf0 <line:3751:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dce8d80 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55dc7dce8df0 <line:3752:1>
|     `-TextComment 0x55dc7dce8dc0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc3c8b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3770:58> col:15 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x55dc7dc3c720 <col:27, col:42> col:42 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55dc7dc3c798 <col:48, col:54> col:54 data 'void *'
| `-FullComment 0x55dc7dce9570 <line:3756:3, line:3769:1>
|   |-ParagraphComment 0x55dc7dce8f10 <line:3756:3>
|   | `-TextComment 0x55dc7dce8ee0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce8f30 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55dc7dce8f90 <col:10, col:51>
|   |   `-TextComment 0x55dc7dce8f60 <col:10, col:51> Text=" Peek/read a message from a message queue."
|   |-ParagraphComment 0x55dc7dce9080 <line:3758:3, line:3759:57>
|   | |-TextComment 0x55dc7dce8fb0 <line:3758:3, col:51> Text=" This routine reads a message from message queue "
|   | |-InlineCommandComment 0x55dc7dce9000 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x55dc7dce9020 <col:56, col:71> Text=" in a "first in,"
|   | `-TextComment 0x55dc7dce9040 <line:3759:3, col:57> Text=" first out" manner and leaves the message in the queue."
|   |-ParagraphComment 0x55dc7dce90d0 <line:3761:3>
|   | `-TextComment 0x55dc7dce90a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce90f0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55dc7dce9150 <col:9, col:31>
|   |   `-TextComment 0x55dc7dce9120 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55dc7dce91a0 <line:3763:3>
|   | `-TextComment 0x55dc7dce9170 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce91c0 <col:4, line:3764:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce9270 <line:3763:15, line:3764:3>
|   |   |-TextComment 0x55dc7dce9220 <line:3763:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55dc7dce9240 <line:3764:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce9290 <col:4, col:71> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dce9320 <col:15, col:71>
|   |   `-TextComment 0x55dc7dce92f0 <col:15, col:71> Text=" Address of area to hold the message read from the queue."
|   |-ParagraphComment 0x55dc7dce9460 <line:3766:3, line:3768:3>
|   | |-TextComment 0x55dc7dce9340 <line:3766:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce9360 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce9380 <col:11, col:26> Text=" 0 Message read."
|   | |-TextComment 0x55dc7dce93a0 <line:3767:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dce93c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dce93e0 <col:11, col:58> Text=" -ENOMSG Returned when the queue has no message."
|   | `-TextComment 0x55dc7dce9400 <line:3768:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dce9480 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55dc7dce94f0 <line:3769:1>
|     `-TextComment 0x55dc7dce94c0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc3cac0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3784:48> col:16 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55dc7dc3c9c0 <col:29, col:44> col:44 msgq 'struct k_msgq *'
| `-FullComment 0x55dc7dce9a20 <line:3773:3, line:3783:1>
|   |-ParagraphComment 0x55dc7dce9610 <line:3773:3>
|   | `-TextComment 0x55dc7dce95e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce9630 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x55dc7dce9690 <col:10, col:32>
|   |   `-TextComment 0x55dc7dce9660 <col:10, col:32> Text=" Purge a message queue."
|   |-ParagraphComment 0x55dc7dce9730 <line:3775:3, line:3777:61>
|   | |-TextComment 0x55dc7dce96b0 <line:3775:3, col:74> Text=" This routine discards all unreceived messages in a message queue's ring"
|   | |-TextComment 0x55dc7dce96d0 <line:3776:3, col:72> Text=" buffer. Any threads that are blocked waiting to send a message to the"
|   | `-TextComment 0x55dc7dce96f0 <line:3777:3, col:61> Text=" message queue are unblocked and see an -ENOMSG error code."
|   |-ParagraphComment 0x55dc7dce9780 <line:3779:3>
|   | `-TextComment 0x55dc7dce9750 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce97a0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce9830 <col:15, col:44>
|   |   `-TextComment 0x55dc7dce9800 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x55dc7dce9880 <line:3781:3>
|   | `-TextComment 0x55dc7dce9850 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce98a0 <col:4, line:3782:3> Name="return"
|   | `-ParagraphComment 0x55dc7dce9920 <line:3781:11, line:3782:3>
|   |   |-TextComment 0x55dc7dce98d0 <line:3781:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dce98f0 <line:3782:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dce9940 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55dc7dce99b0 <line:3783:1>
|     `-TextComment 0x55dc7dce9980 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc3ccc0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3797:56> col:17 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55dc7dc3cbc0 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x55dc7dce9ea0 <line:3787:3, line:3796:1>
|   |-ParagraphComment 0x55dc7dce9ac0 <line:3787:3>
|   | `-TextComment 0x55dc7dce9a90 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce9ae0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x55dc7dce9b40 <col:10, col:58>
|   |   `-TextComment 0x55dc7dce9b10 <col:10, col:58> Text=" Get the amount of free space in a message queue."
|   |-ParagraphComment 0x55dc7dce9bb0 <line:3789:3, line:3790:15>
|   | |-TextComment 0x55dc7dce9b60 <line:3789:3, col:73> Text=" This routine returns the number of unused entries in a message queue's"
|   | `-TextComment 0x55dc7dce9b80 <line:3790:3, col:15> Text=" ring buffer."
|   |-ParagraphComment 0x55dc7dce9c00 <line:3792:3>
|   | `-TextComment 0x55dc7dce9bd0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dce9c20 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dce9cb0 <col:15, col:44>
|   |   `-TextComment 0x55dc7dce9c80 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x55dc7dce9d00 <line:3794:3>
|   | `-TextComment 0x55dc7dce9cd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce9d20 <col:4, line:3795:3> Name="return"
|   | `-ParagraphComment 0x55dc7dce9da0 <line:3794:11, line:3795:3>
|   |   |-TextComment 0x55dc7dce9d50 <line:3794:11, col:48> Text=" Number of unused ring buffer entries."
|   |   `-TextComment 0x55dc7dce9d70 <line:3795:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dce9dc0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55dc7dce9e30 <line:3796:1>
|     `-TextComment 0x55dc7dce9e00 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc3cfe0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3811:32> line:3810:17 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x55dc7dc3cdc0 <col:34, col:49> col:49 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55dc7dc3ced0 <line:3811:6, col:27> col:27 attrs 'struct k_msgq_attrs *'
| `-FullComment 0x55dc7dcea3d0 <line:3800:3, line:3809:1>
|   |-ParagraphComment 0x55dc7dce9f40 <line:3800:3>
|   | `-TextComment 0x55dc7dce9f10 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dce9f60 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x55dc7dce9fc0 <col:10, col:50>
|   |   `-TextComment 0x55dc7dce9f90 <col:10, col:50> Text=" Get basic attributes of a message queue."
|   |-ParagraphComment 0x55dc7dcea010 <line:3802:3, col:77>
|   | `-TextComment 0x55dc7dce9fe0 <col:3, col:77> Text=" This routine fetches basic attributes of message queue into attr argument."
|   |-ParagraphComment 0x55dc7dcea060 <line:3804:3>
|   | `-TextComment 0x55dc7dcea030 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcea080 <col:4, line:3805:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcea130 <line:3804:15, line:3805:3>
|   |   |-TextComment 0x55dc7dcea0e0 <line:3804:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55dc7dcea100 <line:3805:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcea150 <col:4, col:61> [in] implicitly Param="attrs" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcea1e0 <col:16, col:61>
|   |   `-TextComment 0x55dc7dcea1b0 <col:16, col:61> Text=" pointer to message queue attribute structure."
|   |-ParagraphComment 0x55dc7dcea230 <line:3807:3>
|   | `-TextComment 0x55dc7dcea200 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcea250 <col:4, line:3808:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcea2d0 <line:3807:11, line:3808:3>
|   |   |-TextComment 0x55dc7dcea280 <line:3807:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcea2a0 <line:3808:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcea2f0 <col:4, col:19> Text=" K-MSGQ-003"
|   `-ParagraphComment 0x55dc7dcea360 <line:3809:1>
|     `-TextComment 0x55dc7dcea330 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc3d140 <line:3814:1, line:3817:1> line:3814:21 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55dc7dc3d0b8 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55dc7dc3d378 <line:3815:1, line:3817:1>
|   `-ReturnStmt 0x55dc7dc3d330 <line:3816:2, col:32>
|     `-BinaryOperator 0x55dc7dc3d308 <col:9, col:32> 'unsigned int' '-'
|       |-ImplicitCastExpr 0x55dc7dc3d2d8 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-MemberExpr 0x55dc7dc3d228 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->max_msgs 0x55dc7dc38888
|       |   `-ImplicitCastExpr 0x55dc7dc3d210 <col:9> 'struct k_msgq *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55dc7dc3d1e8 <col:9> 'struct k_msgq *' lvalue ParmVar 0x55dc7dc3d0b8 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x55dc7dc3d2f0 <col:26, col:32> 'u32_t':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x55dc7dc3d2a0 <col:26, col:32> 'u32_t':'unsigned int' lvalue ->used_msgs 0x55dc7dc38b48
|           `-ImplicitCastExpr 0x55dc7dc3d288 <col:26> 'struct k_msgq *' <LValueToRValue>
|             `-DeclRefExpr 0x55dc7dc3d260 <col:26> 'struct k_msgq *' lvalue ParmVar 0x55dc7dc3d0b8 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x55dc7dc3d8c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3829:56> col:17 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55dc7dc3d3b8 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x55dc7dcea830 <line:3820:3, line:3828:1>
|   |-ParagraphComment 0x55dc7dcea470 <line:3820:3>
|   | `-TextComment 0x55dc7dcea440 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcea490 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x55dc7dcea4f0 <col:10, col:56>
|   |   `-TextComment 0x55dc7dcea4c0 <col:10, col:56> Text=" Get the number of messages in a message queue."
|   |-ParagraphComment 0x55dc7dcea540 <line:3822:3, col:80>
|   | `-TextComment 0x55dc7dcea510 <col:3, col:80> Text=" This routine returns the number of messages in a message queue's ring buffer."
|   |-ParagraphComment 0x55dc7dcea590 <line:3824:3>
|   | `-TextComment 0x55dc7dcea560 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcea5b0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcea640 <col:15, col:44>
|   |   `-TextComment 0x55dc7dcea610 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x55dc7dcea690 <line:3826:3>
|   | `-TextComment 0x55dc7dcea660 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcea6b0 <col:4, line:3827:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcea730 <line:3826:11, line:3827:3>
|   |   |-TextComment 0x55dc7dcea6e0 <line:3826:11, col:30> Text=" Number of messages."
|   |   `-TextComment 0x55dc7dcea700 <line:3827:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcea750 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55dc7dcea7c0 <line:3828:1>
|     `-TextComment 0x55dc7dcea790 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc3da18 <line:3831:1, line:3834:1> line:3831:21 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55dc7dc3d990 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55dc7dc3dbc8 <line:3832:1, line:3834:1>
|   `-ReturnStmt 0x55dc7dc3db50 <line:3833:2, col:15>
|     `-ImplicitCastExpr 0x55dc7dc3db38 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55dc7dc3db00 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->used_msgs 0x55dc7dc38b48
|         `-ImplicitCastExpr 0x55dc7dc3dae8 <col:9> 'struct k_msgq *' <LValueToRValue>
|           `-DeclRefExpr 0x55dc7dc3dac0 <col:9> 'struct k_msgq *' lvalue ParmVar 0x55dc7dc3d990 'msgq' 'struct k_msgq *'
|-RecordDecl 0x55dc7dc3dbe0 <line:3849:1, line:3853:1> line:3849:8 struct k_mem_block_id definition
| |-FullComment 0x55dc7dceaaa0 <line:3839:3, line:3841:5>
| | |-ParagraphComment 0x55dc7dcea8d0 <line:3839:3>
| | | `-TextComment 0x55dc7dcea8a0 <col:3> Text=" "
| | |-VerbatimLineComment 0x55dc7dcea8f0 <col:4, col:44> Text=" mem_pool_apis Memory Pool APIs"
| | |-ParagraphComment 0x55dc7dcea960 <line:3840:3>
| | | `-TextComment 0x55dc7dcea930 <col:3> Text=" "
| | |-VerbatimLineComment 0x55dc7dcea980 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x55dc7dceaa50 <line:3841:3, col:5>
| |   |-TextComment 0x55dc7dcea9c0 <col:3> Text=" "
| |   |-TextComment 0x55dc7dcea9f0 <col:4> Text="@"
| |   `-TextComment 0x55dc7dceaa10 <col:5> Text="{"
| |-FieldDecl 0x55dc7dc3dcc0 <line:3850:2, col:15> col:8 pool 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x55dc7dc3dc90 <col:15> 'int' 8
| |-FieldDecl 0x55dc7dc3dd38 <line:3851:2, col:16> col:8 level 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x55dc7dc3dd08 <col:16> 'int' 4
| `-FieldDecl 0x55dc7dc3ddb0 <line:3852:2, col:16> col:8 block 'u32_t':'unsigned int'
|   `-IntegerLiteral 0x55dc7dc3dd80 <col:16> 'int' 20
|-RecordDecl 0x55dc7dc3ddf8 <line:3855:1, line:3858:1> line:3855:8 struct k_mem_block definition
| |-FieldDecl 0x55dc7dc3deb8 <line:3856:2, col:8> col:8 data 'void *'
| `-FieldDecl 0x55dc7dc3df50 <line:3857:2, col:24> col:24 id 'struct k_mem_block_id':'struct k_mem_block_id'
|-RecordDecl 0x55dc7dc3e028 <line:3872:1, line:3895:1> line:3872:8 struct k_mbox_msg definition
| |-FullComment 0x55dc7dceac50 <line:3869:3, line:3871:1>
| | |-ParagraphComment 0x55dc7dceab40 <line:3869:3>
| | | `-TextComment 0x55dc7dceab10 <col:3> Text=" "
| | |-BlockCommandComment 0x55dc7dceab60 <col:4, col:35> Name="brief"
| | | `-ParagraphComment 0x55dc7dceabc0 <col:10, col:35>
| | |   `-TextComment 0x55dc7dceab90 <col:10, col:35> Text=" Mailbox Message Structure"
| | `-ParagraphComment 0x55dc7dceac10 <line:3871:1>
| |   `-TextComment 0x55dc7dceabe0 <col:1> Text=" "
| |-FieldDecl 0x55dc7dc3e108 <line:3874:2, col:8> col:8 _mailbox 'u32_t':'unsigned int'
| | `-FullComment 0x55dc7dcead20 <line:3873:5, col:55>
| |   `-ParagraphComment 0x55dc7dceacf0 <col:5, col:55>
| |     `-TextComment 0x55dc7dceacc0 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x55dc7dc3e188 <line:3876:2, col:9> col:9 size 'size_t':'unsigned long'
| | `-FullComment 0x55dc7dceadf0 <line:3875:5, col:32>
| |   `-ParagraphComment 0x55dc7dceadc0 <col:5, col:32>
| |     `-TextComment 0x55dc7dcead90 <col:5, col:32> Text=" size of message (in bytes) "
| |-FieldDecl 0x55dc7dc3e208 <line:3878:2, col:8> col:8 info 'u32_t':'unsigned int'
| | `-FullComment 0x55dc7dceaec0 <line:3877:5, col:43>
| |   `-ParagraphComment 0x55dc7dceae90 <col:5, col:43>
| |     `-TextComment 0x55dc7dceae60 <col:5, col:43> Text=" application-defined information value "
| |-FieldDecl 0x55dc7dc3e290 <line:3880:2, col:8> col:8 tx_data 'void *'
| | `-FullComment 0x55dc7dceaf90 <line:3879:5, col:34>
| |   `-ParagraphComment 0x55dc7dceaf60 <col:5, col:34>
| |     `-TextComment 0x55dc7dceaf30 <col:5, col:34> Text=" sender's message data buffer "
| |-FieldDecl 0x55dc7dc3e320 <line:3882:2, col:8> col:8 _rx_data 'void *'
| | `-FullComment 0x55dc7dceb060 <line:3881:5, col:55>
| |   `-ParagraphComment 0x55dc7dceb030 <col:5, col:55>
| |     `-TextComment 0x55dc7dceb000 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x55dc7dc3e3f0 <line:3884:2, col:21> col:21 tx_block 'struct k_mem_block':'struct k_mem_block'
| | `-FullComment 0x55dc7dceb130 <line:3883:5, col:35>
| |   `-ParagraphComment 0x55dc7dceb100 <col:5, col:35>
| |     `-TextComment 0x55dc7dceb0d0 <col:5, col:35> Text=" message data block descriptor "
| |-FieldDecl 0x55dc7dc3e478 <line:3886:2, col:10> col:10 rx_source_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x55dc7dceb200 <line:3885:5, col:22>
| |   `-ParagraphComment 0x55dc7dceb1d0 <col:5, col:22>
| |     `-TextComment 0x55dc7dceb1a0 <col:5, col:22> Text=" source thread id "
| |-FieldDecl 0x55dc7dc3e4f8 <line:3888:2, col:10> col:10 tx_target_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x55dc7dceb2d0 <line:3887:5, col:22>
| |   `-ParagraphComment 0x55dc7dceb2a0 <col:5, col:22>
| |     `-TextComment 0x55dc7dceb270 <col:5, col:22> Text=" target thread id "
| `-FieldDecl 0x55dc7dc3e578 <line:3890:2, col:10> col:10 _syncing_thread 'k_tid_t':'struct k_thread *'
|   `-FullComment 0x55dc7dceb3a0 <line:3889:5, col:65>
|     `-ParagraphComment 0x55dc7dceb370 <col:5, col:65>
|       `-TextComment 0x55dc7dceb340 <col:5, col:65> Text=" internal use only - thread waiting on send (may be a dummy) "
|-RecordDecl 0x55dc7dc3e5e8 prev 0x55dc7dc00e50 <line:3900:1, line:3909:1> line:3900:8 struct k_mbox definition
| |-FullComment 0x55dc7dceb550 <line:3897:3, line:3899:1>
| | |-ParagraphComment 0x55dc7dceb440 <line:3897:3>
| | | `-TextComment 0x55dc7dceb410 <col:3> Text=" "
| | |-BlockCommandComment 0x55dc7dceb460 <col:4, col:27> Name="brief"
| | | `-ParagraphComment 0x55dc7dceb4c0 <col:10, col:27>
| | |   `-TextComment 0x55dc7dceb490 <col:10, col:27> Text=" Mailbox Structure"
| | `-ParagraphComment 0x55dc7dceb510 <line:3899:1>
| |   `-TextComment 0x55dc7dceb4e0 <col:1> Text=" "
| |-FieldDecl 0x55dc7dc3e6a8 <line:3902:2, col:12> col:12 tx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x55dc7dceb620 <line:3901:5, col:29>
| |   `-ParagraphComment 0x55dc7dceb5f0 <col:5, col:29>
| |     `-TextComment 0x55dc7dceb5c0 <col:5, col:29> Text=" Transmit messages queue "
| |-FieldDecl 0x55dc7dc3e728 <line:3904:2, col:12> col:12 rx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x55dc7dceb6f0 <line:3903:5, col:27>
| |   `-ParagraphComment 0x55dc7dceb6c0 <col:5, col:27>
| |     `-TextComment 0x55dc7dceb690 <col:5, col:27> Text=" Receive message queue "
| `-FieldDecl 0x55dc7dc3e790 <line:3905:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
|-FunctionDecl 0x55dc7dc3ff80 <line:3951:1, col:44> col:13 k_mbox_init 'void (struct k_mbox *)' extern
| |-ParmVarDecl 0x55dc7dc3fe80 <col:25, col:40> col:40 mbox 'struct k_mbox *'
| `-FullComment 0x55dc7dcebb50 <line:3942:3, line:3950:1>
|   |-ParagraphComment 0x55dc7dceb790 <line:3942:3>
|   | `-TextComment 0x55dc7dceb760 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dceb7b0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x55dc7dceb810 <col:10, col:31>
|   |   `-TextComment 0x55dc7dceb7e0 <col:10, col:31> Text=" Initialize a mailbox."
|   |-ParagraphComment 0x55dc7dceb860 <line:3944:3, col:69>
|   | `-TextComment 0x55dc7dceb830 <col:3, col:69> Text=" This routine initializes a mailbox object, prior to its first use."
|   |-ParagraphComment 0x55dc7dceb8b0 <line:3946:3>
|   | `-TextComment 0x55dc7dceb880 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dceb8d0 <col:4, col:38> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dceb960 <col:15, col:38>
|   |   `-TextComment 0x55dc7dceb930 <col:15, col:38> Text=" Address of the mailbox."
|   |-ParagraphComment 0x55dc7dceb9b0 <line:3948:3>
|   | `-TextComment 0x55dc7dceb980 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dceb9d0 <col:4, line:3949:3> Name="return"
|   | `-ParagraphComment 0x55dc7dceba50 <line:3948:11, line:3949:3>
|   |   |-TextComment 0x55dc7dceba00 <line:3948:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dceba20 <line:3949:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dceba70 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55dc7dcebae0 <line:3950:1>
|     `-TextComment 0x55dc7dcebab0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc40338 <line:3973:1, line:3974:22> line:3973:12 k_mbox_put 'int (struct k_mbox *, struct k_mbox_msg *, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc40080 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x55dc7dc40190 <col:44, col:63> col:63 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x55dc7dc40200 <line:3974:9, col:15> col:15 timeout 's32_t':'int'
| `-FullComment 0x55dc7dcec380 <line:3954:3, line:3972:1>
|   |-ParagraphComment 0x55dc7dcebbf0 <line:3954:3>
|   | `-TextComment 0x55dc7dcebbc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcebc10 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x55dc7dcebc70 <col:10, col:57>
|   |   `-TextComment 0x55dc7dcebc40 <col:10, col:57> Text=" Send a mailbox message in a synchronous manner."
|   |-ParagraphComment 0x55dc7dcebd90 <line:3956:3, line:3958:55>
|   | |-TextComment 0x55dc7dcebc90 <line:3956:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x55dc7dcebce0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x55dc7dcebd00 <col:43, col:75> Text=" and waits for a receiver to both"
|   | |-TextComment 0x55dc7dcebd20 <line:3957:3, col:75> Text=" receive and process it. The message data may be in a buffer, in a memory"
|   | `-TextComment 0x55dc7dcebd40 <line:3958:3, col:55> Text=" pool block, or non-existent (i.e. an empty message)."
|   |-ParagraphComment 0x55dc7dcebde0 <line:3960:3>
|   | `-TextComment 0x55dc7dcebdb0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcebe00 <col:4, line:3961:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcebeb0 <line:3960:15, line:3961:3>
|   |   |-TextComment 0x55dc7dcebe60 <line:3960:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x55dc7dcebe80 <line:3961:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcebed0 <col:4, line:3962:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcebf80 <line:3961:17, line:3962:3>
|   |   |-TextComment 0x55dc7dcebf30 <line:3961:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x55dc7dcebf50 <line:3962:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcebfa0 <col:4, line:3966:45> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcec0d0 <line:3962:18, line:3966:45>
|   |   |-TextComment 0x55dc7dcec000 <line:3962:18, col:80> Text=" Non-negative waiting period for the message to be received (in"
|   |   |-TextComment 0x55dc7dcec020 <line:3963:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   |-TextComment 0x55dc7dcec040 <line:3964:3, col:68> Text="                and K_FOREVER. Once the message has been received,"
|   |   |-TextComment 0x55dc7dcec060 <line:3965:3, col:73> Text="                this routine waits as long as necessary for the message"
|   |   `-TextComment 0x55dc7dcec080 <line:3966:3, col:45> Text="                to be completely processed."
|   |-ParagraphComment 0x55dc7dcec280 <line:3968:3, line:3971:3>
|   | |-TextComment 0x55dc7dcec0f0 <line:3968:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcec110 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcec130 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x55dc7dcec150 <line:3969:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcec170 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcec190 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x55dc7dcec1b0 <line:3970:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcec1d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcec1f0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55dc7dcec210 <line:3971:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcec2a0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55dc7dcec310 <line:3972:1>
|     `-TextComment 0x55dc7dcec2e0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc40680 <line:3992:1, line:3993:26> line:3992:13 k_mbox_async_put 'void (struct k_mbox *, struct k_mbox_msg *, struct k_sem *)' extern
| |-ParmVarDecl 0x55dc7dc40440 <col:30, col:45> col:45 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x55dc7dc404c8 <col:51, col:70> col:70 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x55dc7dc40550 <line:3993:9, col:23> col:23 sem 'struct k_sem *'
| `-FullComment 0x55dc7dcecb10 <line:3977:3, line:3991:1>
|   |-ParagraphComment 0x55dc7dcec420 <line:3977:3>
|   | `-TextComment 0x55dc7dcec3f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcec440 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55dc7dcec4a0 <col:10, col:59>
|   |   `-TextComment 0x55dc7dcec470 <col:10, col:59> Text=" Send a mailbox message in an asynchronous manner."
|   |-ParagraphComment 0x55dc7dcec660 <line:3979:3, line:3983:29>
|   | |-TextComment 0x55dc7dcec4c0 <line:3979:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x55dc7dcec510 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x55dc7dcec530 <col:43, col:73> Text=" without waiting for a receiver"
|   | |-TextComment 0x55dc7dcec550 <line:3980:3, col:78> Text=" to process it. The message data may be in a buffer, in a memory pool block,"
|   | |-TextComment 0x55dc7dcec570 <line:3981:3, col:70> Text=" or non-existent (i.e. an empty message). Optionally, the semaphore "
|   | |-InlineCommandComment 0x55dc7dcec5c0 <col:71, col:72> Name="a" RenderEmphasized Arg[0]="sem"
|   | |-TextComment 0x55dc7dcec5e0 <line:3982:3, col:71> Text=" will be given when the message has been both received and completely"
|   | `-TextComment 0x55dc7dcec600 <line:3983:3, col:29> Text=" processed by the receiver."
|   |-ParagraphComment 0x55dc7dcec6b0 <line:3985:3>
|   | `-TextComment 0x55dc7dcec680 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcec6d0 <col:4, line:3986:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcec780 <line:3985:15, line:3986:3>
|   |   |-TextComment 0x55dc7dcec730 <line:3985:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x55dc7dcec750 <line:3986:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcec7a0 <col:4, line:3987:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcec850 <line:3986:17, line:3987:3>
|   |   |-TextComment 0x55dc7dcec800 <line:3986:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x55dc7dcec820 <line:3987:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcec870 <col:4, col:64> [in] implicitly Param="sem" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcec900 <col:14, col:64>
|   |   `-TextComment 0x55dc7dcec8d0 <col:14, col:64> Text=" Address of a semaphore, or NULL if none is needed."
|   |-ParagraphComment 0x55dc7dcec950 <line:3989:3>
|   | `-TextComment 0x55dc7dcec920 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcec970 <col:4, line:3990:3> Name="return"
|   | `-ParagraphComment 0x55dc7dceca00 <line:3989:11, line:3990:3>
|   |   |-TextComment 0x55dc7dcec9a0 <line:3989:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcec9c0 <line:3990:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dceca20 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55dc7dceca90 <line:3991:1>
|     `-TextComment 0x55dc7dceca60 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc40a48 <line:4014:1, line:4015:36> line:4014:12 k_mbox_get 'int (struct k_mbox *, struct k_mbox_msg *, void *, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc40790 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x55dc7dc40818 <col:44, col:63> col:63 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x55dc7dc40890 <line:4015:9, col:15> col:15 buffer 'void *'
| |-ParmVarDecl 0x55dc7dc40900 <col:23, col:29> col:29 timeout 's32_t':'int'
| `-FullComment 0x55dc7dced3d0 <line:3996:3, line:4013:1>
|   |-ParagraphComment 0x55dc7dcecbb0 <line:3996:3>
|   | `-TextComment 0x55dc7dcecb80 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcecbd0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55dc7dcecc30 <col:10, col:36>
|   |   `-TextComment 0x55dc7dcecc00 <col:10, col:36> Text=" Receive a mailbox message."
|   |-ParagraphComment 0x55dc7dcecd20 <line:3998:3, line:3999:40>
|   | |-TextComment 0x55dc7dcecc50 <line:3998:3, col:40> Text=" This routine receives a message from "
|   | |-InlineCommandComment 0x55dc7dcecca0 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="mbox,"
|   | |-TextComment 0x55dc7dceccc0 <col:49, col:74> Text=" then optionally retrieves"
|   | `-TextComment 0x55dc7dcecce0 <line:3999:3, col:40> Text=" its data and disposes of the message."
|   |-ParagraphComment 0x55dc7dcecd70 <line:4001:3>
|   | `-TextComment 0x55dc7dcecd40 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcecd90 <col:4, line:4002:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcece40 <line:4001:15, line:4002:3>
|   |   |-TextComment 0x55dc7dcecdf0 <line:4001:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x55dc7dcece10 <line:4002:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcece60 <col:4, line:4003:3> [in] implicitly Param="rx_msg" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcecf10 <line:4002:17, line:4003:3>
|   |   |-TextComment 0x55dc7dcecec0 <line:4002:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x55dc7dcecee0 <line:4003:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcecf30 <col:4, line:4005:3> [in] implicitly Param="buffer" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dced010 <line:4003:17, line:4005:3>
|   |   |-TextComment 0x55dc7dcecf90 <line:4003:17, col:77> Text=" Address of the buffer to receive data, or NULL to defer data"
|   |   |-TextComment 0x55dc7dcecfb0 <line:4004:3, col:60> Text="               retrieval and message disposal until later."
|   |   `-TextComment 0x55dc7dcecfd0 <line:4005:3> Text=" "
|   |-ParamCommandComment 0x55dc7dced030 <col:4, line:4007:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dced110 <line:4005:18, line:4007:32>
|   |   |-TextComment 0x55dc7dced090 <line:4005:18, col:78> Text=" Non-negative waiting period for a message to be received (in"
|   |   |-TextComment 0x55dc7dced0b0 <line:4006:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x55dc7dced0d0 <line:4007:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x55dc7dced2c0 <line:4009:3, line:4012:3>
|   | |-TextComment 0x55dc7dced130 <line:4009:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dced150 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dced170 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x55dc7dced190 <line:4010:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dced1b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dced1d0 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x55dc7dced1f0 <line:4011:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dced210 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dced230 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55dc7dced250 <line:4012:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dced2e0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55dc7dced350 <line:4013:1>
|     `-TextComment 0x55dc7dced320 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc40cf0 <line:4033:1, col:68> col:13 k_mbox_data_get 'void (struct k_mbox_msg *, void *)' extern
| |-ParmVarDecl 0x55dc7dc40b60 <col:29, col:48> col:48 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x55dc7dc40bd8 <col:56, col:62> col:62 buffer 'void *'
| `-FullComment 0x55dc7dced9c0 <line:4018:3, line:4032:1>
|   |-ParagraphComment 0x55dc7dced470 <line:4018:3>
|   | `-TextComment 0x55dc7dced440 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dced490 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55dc7dced4f0 <col:10, col:54>
|   |   `-TextComment 0x55dc7dced4c0 <col:10, col:54> Text=" Retrieve mailbox message data into a buffer."
|   |-ParagraphComment 0x55dc7dced560 <line:4020:3, line:4021:57>
|   | |-TextComment 0x55dc7dced510 <line:4020:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | `-TextComment 0x55dc7dced530 <line:4021:3, col:57> Text=" its data into a buffer, then disposing of the message."
|   |-ParagraphComment 0x55dc7dced5d0 <line:4023:3, line:4024:31>
|   | |-TextComment 0x55dc7dced580 <line:4023:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | `-TextComment 0x55dc7dced5a0 <line:4024:3, col:31> Text=" without retrieving its data."
|   |-ParagraphComment 0x55dc7dced620 <line:4026:3>
|   | `-TextComment 0x55dc7dced5f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dced640 <col:4, line:4027:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dced6f0 <line:4026:17, line:4027:3>
|   |   |-TextComment 0x55dc7dced6a0 <line:4026:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x55dc7dced6c0 <line:4027:3> Text=" "
|   |-ParamCommandComment 0x55dc7dced710 <col:4, line:4028:26> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dced7c0 <line:4027:17, line:4028:26>
|   |   |-TextComment 0x55dc7dced770 <line:4027:17, col:74> Text=" Address of the buffer to receive data, or NULL to discard"
|   |   `-TextComment 0x55dc7dced790 <line:4028:3, col:26> Text="               the data."
|   |-ParagraphComment 0x55dc7dced810 <line:4030:3>
|   | `-TextComment 0x55dc7dced7e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dced830 <col:4, line:4031:3> Name="return"
|   | `-ParagraphComment 0x55dc7dced8b0 <line:4030:11, line:4031:3>
|   |   |-TextComment 0x55dc7dced860 <line:4030:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dced880 <line:4031:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dced8d0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55dc7dced940 <line:4032:1>
|     `-TextComment 0x55dc7dced910 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc41128 <line:4066:1, line:4068:46> line:4066:12 k_mbox_data_block_get 'int (struct k_mbox_msg *, struct k_mem_pool *, struct k_mem_block *, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc40e08 <col:34, col:53> col:53 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x55dc7dc40e90 <line:4067:6, col:25> col:25 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x55dc7dc40f70 <line:4068:6, col:26> col:26 block 'struct k_mem_block *'
| |-ParmVarDecl 0x55dc7dc40fe0 <col:33, col:39> col:39 timeout 's32_t':'int'
| `-FullComment 0x55dc7dcee3f0 <line:4036:3, line:4065:1>
|   |-ParagraphComment 0x55dc7dceda60 <line:4036:3>
|   | `-TextComment 0x55dc7dceda30 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dceda80 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x55dc7dcedae0 <col:10, col:65>
|   |   `-TextComment 0x55dc7dcedab0 <col:10, col:65> Text=" Retrieve mailbox message data into a memory pool block."
|   |-ParagraphComment 0x55dc7dcedbd0 <line:4038:3, line:4042:42>
|   | |-TextComment 0x55dc7dcedb00 <line:4038:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | |-TextComment 0x55dc7dcedb20 <line:4039:3, col:68> Text=" its data into a memory pool block, then disposing of the message."
|   | |-TextComment 0x55dc7dcedb40 <line:4040:3, col:71> Text=" The memory pool block that results from successful retrieval must be"
|   | |-TextComment 0x55dc7dcedb60 <line:4041:3, col:71> Text=" returned to the pool once the data has been processed, even in cases"
|   | `-TextComment 0x55dc7dcedb80 <line:4042:3, col:42> Text=" where zero bytes of data are retrieved."
|   |-ParagraphComment 0x55dc7dcedc70 <line:4044:3, line:4046:33>
|   | |-TextComment 0x55dc7dcedbf0 <line:4044:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | |-TextComment 0x55dc7dcedc10 <line:4045:3, col:73> Text=" without retrieving its data. In this case there is no need to return a"
|   | `-TextComment 0x55dc7dcedc30 <line:4046:3, col:33> Text=" memory pool block to the pool."
|   |-ParagraphComment 0x55dc7dcedd60 <line:4048:3, line:4052:55>
|   | |-TextComment 0x55dc7dcedc90 <line:4048:3, col:74> Text=" This routine allocates a new memory pool block for the data only if the"
|   | |-TextComment 0x55dc7dcedcb0 <line:4049:3, col:78> Text=" data is not already in one. If a new block cannot be allocated, the routine"
|   | |-TextComment 0x55dc7dcedcd0 <line:4050:3, col:74> Text=" returns a failure code and the received message is left unchanged. This"
|   | |-TextComment 0x55dc7dcedcf0 <line:4051:3, col:79> Text=" permits the caller to reattempt data retrieval at a later time or to dispose"
|   | `-TextComment 0x55dc7dcedd10 <line:4052:3, col:55> Text=" of the received message without retrieving its data."
|   |-ParagraphComment 0x55dc7dceddb0 <line:4054:3>
|   | `-TextComment 0x55dc7dcedd80 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dceddd0 <col:4, line:4055:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcede80 <line:4054:17, line:4055:3>
|   |   |-TextComment 0x55dc7dcede30 <line:4054:17, col:57> Text=" Address of a receive message descriptor."
|   |   `-TextComment 0x55dc7dcede50 <line:4055:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcedea0 <col:4, line:4056:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcedf50 <line:4055:15, line:4056:3>
|   |   |-TextComment 0x55dc7dcedf00 <line:4055:15, col:63> Text=" Address of memory pool, or NULL to discard data."
|   |   `-TextComment 0x55dc7dcedf20 <line:4056:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcedf70 <col:4, line:4057:3> [in] implicitly Param="block" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcee020 <line:4056:16, line:4057:3>
|   |   |-TextComment 0x55dc7dcedfd0 <line:4056:16, col:67> Text=" Address of the area to hold memory pool block info."
|   |   `-TextComment 0x55dc7dcedff0 <line:4057:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcee040 <col:4, line:4059:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dcee120 <line:4057:18, line:4059:32>
|   |   |-TextComment 0x55dc7dcee0a0 <line:4057:18, col:77> Text=" Non-negative waiting period to wait for a memory pool block"
|   |   |-TextComment 0x55dc7dcee0c0 <line:4058:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x55dc7dcee0e0 <line:4059:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x55dc7dcee2d0 <line:4061:3, line:4064:3>
|   | |-TextComment 0x55dc7dcee140 <line:4061:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcee160 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcee180 <col:11, col:28> Text=" 0 Data retrieved."
|   | |-TextComment 0x55dc7dcee1a0 <line:4062:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcee1c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcee1e0 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x55dc7dcee200 <line:4063:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcee220 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcee240 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55dc7dcee260 <line:4064:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcee2f0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55dc7dcee360 <line:4065:1>
|     `-TextComment 0x55dc7dcee330 <col:1> Text=" "
|-RecordDecl 0x55dc7dc41278 prev 0x55dc7dc00f00 <line:4079:1, line:4095:1> line:4079:8 struct k_pipe definition
| |-FullComment 0x55dc7dcee4c0 <line:4078:4, col:19>
| | `-ParagraphComment 0x55dc7dcee490 <col:4, col:19>
| |   `-TextComment 0x55dc7dcee460 <col:4, col:19> Text=" Pipe Structure "
| |-FieldDecl 0x55dc7dc41318 <line:4080:2, col:17> col:17 buffer 'unsigned char *'
| | `-FullComment 0x55dc7dcee590 <col:38, col:63>
| |   `-ParagraphComment 0x55dc7dcee560 <col:38, col:63>
| |     `-TextComment 0x55dc7dcee530 <col:38, col:63> Text=" Pipe buffer: may be NULL "
| |-FieldDecl 0x55dc7dc41398 <line:4081:2, col:17> col:17 size 'size_t':'unsigned long'
| | `-FullComment 0x55dc7dcee660 <col:38, col:50>
| |   `-ParagraphComment 0x55dc7dcee630 <col:38, col:50>
| |     `-TextComment 0x55dc7dcee600 <col:38, col:50> Text=" Buffer size "
| |-FieldDecl 0x55dc7dc41418 <line:4082:2, col:17> col:17 bytes_used 'size_t':'unsigned long'
| | `-FullComment 0x55dc7dcee730 <col:38, col:61>
| |   `-ParagraphComment 0x55dc7dcee700 <col:38, col:61>
| |     `-TextComment 0x55dc7dcee6d0 <col:38, col:61> Text=" # bytes used in buffer "
| |-FieldDecl 0x55dc7dc41498 <line:4083:2, col:17> col:17 read_index 'size_t':'unsigned long'
| | `-FullComment 0x55dc7dcee800 <col:38, col:67>
| |   `-ParagraphComment 0x55dc7dcee7d0 <col:38, col:67>
| |     `-TextComment 0x55dc7dcee7a0 <col:38, col:67> Text=" Where in buffer to read from "
| |-FieldDecl 0x55dc7dc41518 <line:4084:2, col:17> col:17 write_index 'size_t':'unsigned long'
| | `-FullComment 0x55dc7dcee8d0 <col:38, col:63>
| |   `-ParagraphComment 0x55dc7dcee8a0 <col:38, col:63>
| |     `-TextComment 0x55dc7dcee870 <col:38, col:63> Text=" Where in buffer to write "
| |-FieldDecl 0x55dc7dc415a8 <line:4085:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x55dc7dcee9a0 <col:31, col:52>
| |   `-ParagraphComment 0x55dc7dcee970 <col:31, col:52>
| |     `-TextComment 0x55dc7dcee940 <col:31, col:52> Text=" Synchronization lock "
| |-RecordDecl 0x55dc7dc41618 <line:4087:2, line:4090:2> line:4087:2 struct definition
| | |-FieldDecl 0x55dc7dc416d0 <line:4088:3, col:18> col:18 readers '_wait_q_t':'_wait_q_t'
| | | `-FullComment 0x55dc7dceeab0 <col:31, col:49>
| | |   `-ParagraphComment 0x55dc7dceea80 <col:31, col:49>
| | |     `-TextComment 0x55dc7dceea50 <col:31, col:49> Text=" Reader wait queue "
| | `-FieldDecl 0x55dc7dc41758 <line:4089:3, col:18> col:18 writers '_wait_q_t':'_wait_q_t'
| |   `-FullComment 0x55dc7dceeb80 <col:31, col:49>
| |     `-ParagraphComment 0x55dc7dceeb50 <col:31, col:49>
| |       `-TextComment 0x55dc7dceeb20 <col:31, col:49> Text=" Writer wait queue "
| |-FieldDecl 0x55dc7dc41820 <line:4087:2, line:4090:4> col:4 wait_q 'struct (anonymous struct at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)':'struct k_pipe::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)'
| `-FieldDecl 0x55dc7dc41878 <line:4094:2, col:14> col:14 flags 'u8_t':'unsigned char'
|   `-FullComment 0x55dc7dceec50 <col:26, col:32>
|     `-ParagraphComment 0x55dc7dceec20 <col:26, col:32>
|       `-TextComment 0x55dc7dceebf0 <col:26, col:32> Text=" Flags "
|-FunctionDecl 0x55dc7dc41cb0 <line:4158:1, col:73> col:6 k_pipe_init 'void (struct k_pipe *, unsigned char *, size_t)'
| |-ParmVarDecl 0x55dc7dc41a90 <col:18, col:33> col:33 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55dc7dc41b08 <col:39, col:54> col:54 buffer 'unsigned char *'
| |-ParmVarDecl 0x55dc7dc41b78 <col:62, col:69> col:69 size 'size_t':'unsigned long'
| `-FullComment 0x55dc7dcef2b0 <line:4145:3, line:4157:1>
|   |-ParagraphComment 0x55dc7dceecf0 <line:4145:3>
|   | `-TextComment 0x55dc7dceecc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dceed10 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x55dc7dceed70 <col:10, col:28>
|   |   `-TextComment 0x55dc7dceed40 <col:10, col:28> Text=" Initialize a pipe."
|   |-ParagraphComment 0x55dc7dceedc0 <line:4147:3, col:66>
|   | `-TextComment 0x55dc7dceed90 <col:3, col:66> Text=" This routine initializes a pipe object, prior to its first use."
|   |-ParagraphComment 0x55dc7dceee10 <line:4149:3>
|   | `-TextComment 0x55dc7dceede0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dceee30 <col:4, line:4150:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dceeee0 <line:4149:15, line:4150:3>
|   |   |-TextComment 0x55dc7dceee90 <line:4149:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x55dc7dceeeb0 <line:4150:3> Text=" "
|   |-ParamCommandComment 0x55dc7dceef00 <col:4, line:4152:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dceefe0 <line:4150:17, line:4152:3>
|   |   |-TextComment 0x55dc7dceef60 <line:4150:17, col:77> Text=" Address of the pipe's ring buffer, or NULL if no ring buffer"
|   |   |-TextComment 0x55dc7dceef80 <line:4151:3, col:25> Text="               is used."
|   |   `-TextComment 0x55dc7dceefa0 <line:4152:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcef000 <col:4, line:4153:30> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcef0b0 <line:4152:15, line:4153:30>
|   |   |-TextComment 0x55dc7dcef060 <line:4152:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   `-TextComment 0x55dc7dcef080 <line:4153:3, col:30> Text="             buffer is used."
|   |-ParagraphComment 0x55dc7dcef100 <line:4155:3>
|   | `-TextComment 0x55dc7dcef0d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcef120 <col:4, line:4156:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcef1a0 <line:4155:11, line:4156:3>
|   |   |-TextComment 0x55dc7dcef150 <line:4155:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcef170 <line:4156:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcef1c0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55dc7dcef230 <line:4157:1>
|     `-TextComment 0x55dc7dcef200 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc43908 <line:4172:1, col:39> col:5 k_pipe_cleanup 'int (struct k_pipe *)'
| |-ParmVarDecl 0x55dc7dc43800 <col:20, col:35> col:35 pipe 'struct k_pipe *'
| `-FullComment 0x55dc7dcef770 <line:4161:3, line:4171:1>
|   |-ParagraphComment 0x55dc7dcef350 <line:4161:3>
|   | `-TextComment 0x55dc7dcef320 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcef370 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55dc7dcef3d0 <col:10, col:43>
|   |   `-TextComment 0x55dc7dcef3a0 <col:10, col:43> Text=" Release a pipe's allocated buffer"
|   |-ParagraphComment 0x55dc7dcef470 <line:4163:3, line:4165:46>
|   | |-TextComment 0x55dc7dcef3f0 <line:4163:3, col:64> Text=" If a pipe object was given a dynamically allocated buffer via"
|   | |-TextComment 0x55dc7dcef410 <line:4164:3, col:69> Text=" k_pipe_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x55dc7dcef430 <line:4165:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x55dc7dcef4c0 <line:4167:3>
|   | `-TextComment 0x55dc7dcef490 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcef4e0 <col:4, line:4170:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcef680 <line:4167:15, line:4170:3>
|   |   |-TextComment 0x55dc7dcef540 <line:4167:15, col:35> Text=" Address of the pipe."
|   |   |-TextComment 0x55dc7dcef560 <line:4168:3> Text=" "
|   |   |-InlineCommandComment 0x55dc7dcef580 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55dc7dcef5a0 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x55dc7dcef5c0 <line:4169:3> Text=" "
|   |   |-InlineCommandComment 0x55dc7dcef5e0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55dc7dcef600 <col:11, col:37> Text=" -EAGAIN nothing to cleanup"
|   |   `-TextComment 0x55dc7dcef620 <line:4170:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcef6a0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55dc7dcef710 <line:4171:1>
|     `-TextComment 0x55dc7dcef6e0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc43b88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4190:65> col:15 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x55dc7dc43a00 <col:33, col:48> col:48 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55dc7dc43a70 <col:54, col:61> col:61 size 'size_t':'unsigned long'
| `-FullComment 0x55dc7dcefd90 <line:4175:3, line:4189:1>
|   |-ParagraphComment 0x55dc7dcef810 <line:4175:3>
|   | `-TextComment 0x55dc7dcef7e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcef830 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x55dc7dcef890 <col:10, col:56>
|   |   `-TextComment 0x55dc7dcef860 <col:10, col:56> Text=" Initialize a pipe and allocate a buffer for it"
|   |-ParagraphComment 0x55dc7dcef930 <line:4177:3, line:4179:74>
|   | |-TextComment 0x55dc7dcef8b0 <line:4177:3, col:76> Text=" Storage for the buffer region will be allocated from the calling thread's"
|   | |-TextComment 0x55dc7dcef8d0 <line:4178:3, col:77> Text=" resource pool. This memory will be released if k_pipe_cleanup() is called,"
|   | `-TextComment 0x55dc7dcef8f0 <line:4179:3, col:74> Text=" or userspace is enabled and the pipe object loses all references to it."
|   |-ParagraphComment 0x55dc7dcef980 <line:4181:3, col:69>
|   | `-TextComment 0x55dc7dcef950 <col:3, col:69> Text=" This function should only be called on uninitialized pipe objects."
|   |-ParagraphComment 0x55dc7dcef9d0 <line:4183:3>
|   | `-TextComment 0x55dc7dcef9a0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcef9f0 <col:4, line:4184:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcefaa0 <line:4183:15, line:4184:3>
|   |   |-TextComment 0x55dc7dcefa50 <line:4183:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x55dc7dcefa70 <line:4184:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcefac0 <col:4, line:4188:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcefc90 <line:4184:15, line:4188:3>
|   |   |-TextComment 0x55dc7dcefb20 <line:4184:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   |-TextComment 0x55dc7dcefb40 <line:4185:3, col:30> Text="             buffer is used."
|   |   |-TextComment 0x55dc7dcefb60 <line:4186:3> Text=" "
|   |   |-InlineCommandComment 0x55dc7dcefb80 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55dc7dcefba0 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x55dc7dcefbc0 <line:4187:3> Text=" "
|   |   |-InlineCommandComment 0x55dc7dcefbe0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55dc7dcefc00 <col:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x55dc7dcefc20 <line:4188:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcefcb0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55dc7dcefd20 <line:4189:1>
|     `-TextComment 0x55dc7dcefcf0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc44078 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4214:35> line:4212:15 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc43c90 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55dc7dc43d08 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x55dc7dc43d78 <line:4213:5, col:12> col:12 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc43e18 <col:28, col:36> col:36 bytes_written 'size_t *'
| |-ParmVarDecl 0x55dc7dc43e88 <line:4214:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc43ef8 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x55dc7dcf0900 <line:4193:3, line:4211:1>
|   |-ParagraphComment 0x55dc7dcefe30 <line:4193:3>
|   | `-TextComment 0x55dc7dcefe00 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcefe50 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x55dc7dcefeb0 <col:10, col:31>
|   |   `-TextComment 0x55dc7dcefe80 <col:10, col:31> Text=" Write data to a pipe."
|   |-ParagraphComment 0x55dc7dceffd0 <line:4195:3, col:66>
|   | |-TextComment 0x55dc7dcefed0 <col:3, col:29> Text=" This routine writes up to "
|   | |-InlineCommandComment 0x55dc7dceff20 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bytes_to_write"
|   | |-TextComment 0x55dc7dceff40 <col:47, col:64> Text=" bytes of data to "
|   | `-InlineCommandComment 0x55dc7dceff90 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x55dc7dcf0020 <line:4197:3>
|   | `-TextComment 0x55dc7dcefff0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf0040 <col:4, line:4198:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf00f0 <line:4197:15, line:4198:3>
|   |   |-TextComment 0x55dc7dcf00a0 <line:4197:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x55dc7dcf00c0 <line:4198:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf0110 <col:4, line:4199:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcf01c0 <line:4198:15, line:4199:3>
|   |   |-TextComment 0x55dc7dcf0170 <line:4198:15, col:40> Text=" Address of data to write."
|   |   `-TextComment 0x55dc7dcf0190 <line:4199:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf01e0 <col:4, line:4200:3> [in] implicitly Param="bytes_to_write" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcf0290 <line:4199:25, line:4200:3>
|   |   |-TextComment 0x55dc7dcf0240 <line:4199:25, col:49> Text=" Size of data (in bytes)."
|   |   `-TextComment 0x55dc7dcf0260 <line:4200:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf02b0 <col:4, line:4201:3> [in] implicitly Param="bytes_written" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dcf0360 <line:4200:24, line:4201:3>
|   |   |-TextComment 0x55dc7dcf0310 <line:4200:24, col:76> Text=" Address of area to hold the number of bytes written."
|   |   `-TextComment 0x55dc7dcf0330 <line:4201:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf0380 <col:4, line:4202:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x55dc7dcf0430 <line:4201:19, line:4202:3>
|   |   |-TextComment 0x55dc7dcf03e0 <line:4201:19, col:52> Text=" Minimum number of bytes to write."
|   |   `-TextComment 0x55dc7dcf0400 <line:4202:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf0450 <col:4, line:4204:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x55dc7dcf0530 <line:4202:18, line:4204:32>
|   |   |-TextComment 0x55dc7dcf04b0 <line:4202:18, col:80> Text=" Non-negative waiting period to wait for the data to be written"
|   |   |-TextComment 0x55dc7dcf04d0 <line:4203:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x55dc7dcf04f0 <line:4204:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x55dc7dcf07e0 <line:4206:3, line:4210:3>
|   | |-TextComment 0x55dc7dcf0550 <line:4206:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf0570 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf0590 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x55dc7dcf05e0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x55dc7dcf0600 <col:34, col:61> Text=" bytes of data were written."
|   | |-TextComment 0x55dc7dcf0620 <line:4207:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf0640 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf0660 <col:11, col:71> Text=" -EIO Returned without waiting; zero data bytes were written."
|   | |-TextComment 0x55dc7dcf0680 <line:4208:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf06a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf06c0 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x55dc7dcf0710 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x55dc7dcf0730 <line:4209:3, col:53> Text="                 minus one data bytes were written."
|   | `-TextComment 0x55dc7dcf0750 <line:4210:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf0800 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55dc7dcf0870 <line:4211:1>
|     `-TextComment 0x55dc7dcf0840 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc44490 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4239:35> line:4237:15 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc441a0 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55dc7dc44218 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x55dc7dc44288 <line:4238:5, col:12> col:12 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc442f8 <col:27, col:35> col:35 bytes_read 'size_t *'
| |-ParmVarDecl 0x55dc7dc44368 <line:4239:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc443d8 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x55dc7dcf1500 <line:4217:3, line:4236:1>
|   |-ParagraphComment 0x55dc7dcf09a0 <line:4217:3>
|   | `-TextComment 0x55dc7dcf0970 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf09c0 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf0a30 <col:10, col:32>
|   |   `-TextComment 0x55dc7dcf09f0 <col:10, col:32> Text=" Read data from a pipe."
|   |-ParagraphComment 0x55dc7dcf0b50 <line:4219:3, col:66>
|   | |-TextComment 0x55dc7dcf0a50 <col:3, col:28> Text=" This routine reads up to "
|   | |-InlineCommandComment 0x55dc7dcf0aa0 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="bytes_to_read"
|   | |-TextComment 0x55dc7dcf0ac0 <col:45, col:64> Text=" bytes of data from "
|   | `-InlineCommandComment 0x55dc7dcf0b10 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x55dc7dcf0ba0 <line:4221:3>
|   | `-TextComment 0x55dc7dcf0b70 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf0bc0 <col:4, line:4222:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf0c70 <line:4221:15, line:4222:3>
|   |   |-TextComment 0x55dc7dcf0c20 <line:4221:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x55dc7dcf0c40 <line:4222:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf0c90 <col:4, line:4223:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcf0d40 <line:4222:15, line:4223:3>
|   |   |-TextComment 0x55dc7dcf0cf0 <line:4222:15, col:56> Text=" Address to place the data read from pipe."
|   |   `-TextComment 0x55dc7dcf0d10 <line:4223:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf0d60 <col:4, line:4224:3> [in] implicitly Param="bytes_to_read" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcf0e10 <line:4223:24, line:4224:3>
|   |   |-TextComment 0x55dc7dcf0dc0 <line:4223:24, col:61> Text=" Maximum number of data bytes to read."
|   |   `-TextComment 0x55dc7dcf0de0 <line:4224:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf0e30 <col:4, line:4225:3> [in] implicitly Param="bytes_read" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dcf0ee0 <line:4224:21, line:4225:3>
|   |   |-TextComment 0x55dc7dcf0e90 <line:4224:21, col:70> Text=" Address of area to hold the number of bytes read."
|   |   `-TextComment 0x55dc7dcf0eb0 <line:4225:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf0f00 <col:4, line:4226:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x55dc7dcf0fb0 <line:4225:19, line:4226:3>
|   |   |-TextComment 0x55dc7dcf0f60 <line:4225:19, col:56> Text=" Minimum number of data bytes to read."
|   |   `-TextComment 0x55dc7dcf0f80 <line:4226:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf0fd0 <col:4, line:4228:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x55dc7dcf10b0 <line:4226:18, line:4228:32>
|   |   |-TextComment 0x55dc7dcf1030 <line:4226:18, col:77> Text=" Non-negative waiting period to wait for the data to be read"
|   |   |-TextComment 0x55dc7dcf1050 <line:4227:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x55dc7dcf1070 <line:4228:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x55dc7dcf13e0 <line:4230:3, line:4235:3>
|   | |-TextComment 0x55dc7dcf10d0 <line:4230:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf10f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf1110 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x55dc7dcf1160 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x55dc7dcf1180 <col:34, col:58> Text=" bytes of data were read."
|   | |-TextComment 0x55dc7dcf11a0 <line:4231:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf11c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf11e0 <col:11, col:46> Text=" -EINVAL invalid parameters supplied"
|   | |-TextComment 0x55dc7dcf1200 <line:4232:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf1220 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf1240 <col:11, col:68> Text=" -EIO Returned without waiting; zero data bytes were read."
|   | |-TextComment 0x55dc7dcf1260 <line:4233:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf1280 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf12a0 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x55dc7dcf12f0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x55dc7dcf1310 <line:4234:3, col:50> Text="                 minus one data bytes were read."
|   | `-TextComment 0x55dc7dcf1330 <line:4235:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf1400 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55dc7dcf1470 <line:4236:1>
|     `-TextComment 0x55dc7dcf1440 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc448a0 <line:4256:1, line:4257:39> line:4256:13 k_pipe_block_put 'void (struct k_pipe *, struct k_mem_block *, size_t, struct k_sem *)' extern
| |-ParmVarDecl 0x55dc7dc445b0 <col:30, col:45> col:45 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55dc7dc44638 <col:51, col:71> col:71 block 'struct k_mem_block *'
| |-ParmVarDecl 0x55dc7dc446a8 <line:4257:9, col:16> col:16 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc44730 <col:22, col:36> col:36 sem 'struct k_sem *'
| `-FullComment 0x55dc7dcf1d80 <line:4242:3, line:4255:1>
|   |-ParagraphComment 0x55dc7dcf15a0 <line:4242:3>
|   | `-TextComment 0x55dc7dcf1570 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf15c0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf1620 <col:10, col:39>
|   |   `-TextComment 0x55dc7dcf15f0 <col:10, col:39> Text=" Write memory block to a pipe."
|   |-ParagraphComment 0x55dc7dcf1810 <line:4244:3, line:4246:79>
|   | |-TextComment 0x55dc7dcf1640 <line:4244:3, col:63> Text=" This routine writes the data contained in a memory block to "
|   | |-InlineCommandComment 0x55dc7dcf1690 <col:64, col:65> Name="a" RenderEmphasized Arg[0]="pipe."
|   | |-TextComment 0x55dc7dcf16b0 <line:4245:3, col:74> Text=" Once all of the data in the block has been written to the pipe, it will"
|   | |-TextComment 0x55dc7dcf16d0 <line:4246:3, col:25> Text=" free the memory block "
|   | |-InlineCommandComment 0x55dc7dcf1720 <col:26, col:27> Name="a" RenderEmphasized Arg[0]="block"
|   | |-TextComment 0x55dc7dcf1740 <col:34, col:57> Text=" and give the semaphore "
|   | |-InlineCommandComment 0x55dc7dcf1790 <col:58, col:59> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x55dc7dcf17b0 <col:64, col:79> Text=" (if specified)."
|   |-ParagraphComment 0x55dc7dcf1860 <line:4248:3>
|   | `-TextComment 0x55dc7dcf1830 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf1880 <col:4, line:4249:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf1930 <line:4248:15, line:4249:3>
|   |   |-TextComment 0x55dc7dcf18e0 <line:4248:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x55dc7dcf1900 <line:4249:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf1950 <col:4, line:4250:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcf1a00 <line:4249:16, line:4250:3>
|   |   |-TextComment 0x55dc7dcf19b0 <line:4249:16, col:52> Text=" Memory block containing data to send"
|   |   `-TextComment 0x55dc7dcf19d0 <line:4250:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf1a20 <col:4, line:4251:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcf1ad0 <line:4250:15, line:4251:3>
|   |   |-TextComment 0x55dc7dcf1a80 <line:4250:15, col:59> Text=" Number of data bytes in memory block to send"
|   |   `-TextComment 0x55dc7dcf1aa0 <line:4251:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf1af0 <col:4, col:61> [in] implicitly Param="sem" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dcf1b80 <col:14, col:61>
|   |   `-TextComment 0x55dc7dcf1b50 <col:14, col:61> Text=" Semaphore to signal upon completion (else NULL)"
|   |-ParagraphComment 0x55dc7dcf1bd0 <line:4253:3>
|   | `-TextComment 0x55dc7dcf1ba0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf1bf0 <col:4, line:4254:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcf1c70 <line:4253:11, line:4254:3>
|   |   |-TextComment 0x55dc7dcf1c20 <line:4253:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcf1c40 <line:4254:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf1c90 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55dc7dcf1d00 <line:4255:1>
|     `-TextComment 0x55dc7dcf1cd0 <col:1> Text=" "
|-RecordDecl 0x55dc7dc449b8 prev 0x55dc7dc01270 <line:4265:1, line:4275:1> line:4265:8 struct k_mem_slab definition
| |-FullComment 0x55dc7dcf1ea0 <line:4262:3, col:24>
| | `-ParagraphComment 0x55dc7dcf1e70 <col:3, col:24>
| |   |-TextComment 0x55dc7dcf1df0 <col:3> Text=" "
| |   |-InlineCommandComment 0x55dc7dcf1e10 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55dc7dcf1e30 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55dc7dc44a50 <line:4266:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x55dc7dc44aa8 <line:4267:2, col:8> col:8 referenced num_blocks 'u32_t':'unsigned int'
| |-FieldDecl 0x55dc7dc44b00 <line:4268:2, col:9> col:9 block_size 'size_t':'unsigned long'
| |-FieldDecl 0x55dc7dc44b60 <line:4269:2, col:8> col:8 buffer 'char *'
| |-FieldDecl 0x55dc7dc44bc0 <line:4270:2, col:8> col:8 free_list 'char *'
| `-FieldDecl 0x55dc7dc44c18 <line:4271:2, col:8> col:8 referenced num_used 'u32_t':'unsigned int'
|-FunctionDecl 0x55dc7dc45078 <line:4351:1, line:4352:42> line:4351:12 k_mem_slab_init 'int (struct k_mem_slab *, void *, size_t, u32_t)' extern
| |-ParmVarDecl 0x55dc7dc44dd0 <col:28, col:47> col:47 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x55dc7dc44e48 <col:53, col:59> col:59 buffer 'void *'
| |-ParmVarDecl 0x55dc7dc44eb8 <line:4352:7, col:14> col:14 block_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc44f28 <col:26, col:32> col:32 num_blocks 'u32_t':'unsigned int'
| `-FullComment 0x55dc7dcf2890 <line:4330:3, line:4350:1>
|   |-ParagraphComment 0x55dc7dcf1f40 <line:4330:3>
|   | `-TextComment 0x55dc7dcf1f10 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf1f60 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf1fc0 <col:10, col:35>
|   |   `-TextComment 0x55dc7dcf1f90 <col:10, col:35> Text=" Initialize a memory slab."
|   |-ParagraphComment 0x55dc7dcf2010 <line:4332:3, col:53>
|   | `-TextComment 0x55dc7dcf1fe0 <col:3, col:53> Text=" Initializes a memory slab, prior to its first use."
|   |-ParagraphComment 0x55dc7dcf22a0 <line:4334:3, line:4339:51>
|   | |-TextComment 0x55dc7dcf2030 <line:4334:3, col:37> Text=" The memory slab's buffer contains "
|   | |-InlineCommandComment 0x55dc7dcf2080 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="slab_num_blocks"
|   | |-TextComment 0x55dc7dcf20a0 <col:56, col:69> Text=" memory blocks"
|   | |-TextComment 0x55dc7dcf20c0 <line:4335:3, col:12> Text=" that are "
|   | |-InlineCommandComment 0x55dc7dcf2110 <col:13, col:14> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | |-TextComment 0x55dc7dcf2130 <col:31, col:75> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x55dc7dcf2150 <line:4336:3, col:68> Text=" N-byte boundary matching a word boundary, where N is a power of 2"
|   | |-TextComment 0x55dc7dcf2170 <line:4337:3, col:42> Text=" (i.e. 4 on 32-bit systems, 8, 16, ...)."
|   | |-TextComment 0x55dc7dcf2190 <line:4338:3, col:74> Text=" To ensure that each memory block is similarly aligned to this boundary,"
|   | |-TextComment 0x55dc7dcf21b0 <line:4339:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf2200 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | `-TextComment 0x55dc7dcf2220 <col:22, col:51> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x55dc7dcf22f0 <line:4341:3>
|   | `-TextComment 0x55dc7dcf22c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf2310 <col:4, line:4342:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf23c0 <line:4341:15, line:4342:3>
|   |   |-TextComment 0x55dc7dcf2370 <line:4341:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x55dc7dcf2390 <line:4342:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf23e0 <col:4, line:4343:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcf2490 <line:4342:17, line:4343:3>
|   |   |-TextComment 0x55dc7dcf2440 <line:4342:17, col:62> Text=" Pointer to buffer used for the memory blocks."
|   |   `-TextComment 0x55dc7dcf2460 <line:4343:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf24b0 <col:4, line:4344:3> [in] implicitly Param="block_size" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcf2560 <line:4343:21, line:4344:3>
|   |   |-TextComment 0x55dc7dcf2510 <line:4343:21, col:58> Text=" Size of each memory block (in bytes)."
|   |   `-TextComment 0x55dc7dcf2530 <line:4344:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf2580 <col:4, col:45> [in] implicitly Param="num_blocks" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dcf2610 <col:21, col:45>
|   |   `-TextComment 0x55dc7dcf25e0 <col:21, col:45> Text=" Number of memory blocks."
|   |-ParagraphComment 0x55dc7dcf2720 <line:4346:3, line:4347:40>
|   | |-TextComment 0x55dc7dcf2630 <line:4346:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf2650 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf2670 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x55dc7dcf2690 <line:4347:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf26b0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55dc7dcf26d0 <col:11, col:40> Text=" -EINVAL invalid data supplied"
|   |-ParagraphComment 0x55dc7dcf2770 <line:4349:3>
|   | `-TextComment 0x55dc7dcf2740 <col:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf2790 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x55dc7dcf2800 <line:4350:1>
|     `-TextComment 0x55dc7dcf27d0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc453b8 <line:4372:1, line:4373:21> line:4372:12 k_mem_slab_alloc 'int (struct k_mem_slab *, void **, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc45190 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x55dc7dc45208 <col:54, col:61> col:61 mem 'void **'
| |-ParmVarDecl 0x55dc7dc45278 <line:4373:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x55dc7dcf30b0 <line:4355:3, line:4371:1>
|   |-ParagraphComment 0x55dc7dcf2930 <line:4355:3>
|   | `-TextComment 0x55dc7dcf2900 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf2950 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf29b0 <col:10, col:45>
|   |   `-TextComment 0x55dc7dcf2980 <col:10, col:45> Text=" Allocate memory from a memory slab."
|   |-ParagraphComment 0x55dc7dcf2a00 <line:4357:3, col:60>
|   | `-TextComment 0x55dc7dcf29d0 <col:3, col:60> Text=" This routine allocates a memory block from a memory slab."
|   |-ParagraphComment 0x55dc7dcf2a60 <line:4359:3>
|   | `-TextComment 0x55dc7dcf2a30 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf2a80 <col:4, line:4360:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf2b30 <line:4359:15, line:4360:3>
|   |   |-TextComment 0x55dc7dcf2ae0 <line:4359:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x55dc7dcf2b00 <line:4360:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf2b50 <col:4, line:4361:3> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcf2c00 <line:4360:14, line:4361:3>
|   |   |-TextComment 0x55dc7dcf2bb0 <line:4360:14, col:44> Text=" Pointer to block address area."
|   |   `-TextComment 0x55dc7dcf2bd0 <line:4361:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf2c20 <col:4, line:4363:52> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcf2d00 <line:4361:18, line:4363:52>
|   |   |-TextComment 0x55dc7dcf2c80 <line:4361:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x55dc7dcf2ca0 <line:4362:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x55dc7dcf2cc0 <line:4363:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x55dc7dcf2fb0 <line:4365:3, line:4370:3>
|   | |-TextComment 0x55dc7dcf2d20 <line:4365:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf2d40 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf2d60 <col:11, col:68> Text=" 0 Memory allocated. The block address area pointed at by "
|   | |-InlineCommandComment 0x55dc7dcf2db0 <col:69, col:70> Name="a" RenderEmphasized Arg[0]="mem"
|   | |-TextComment 0x55dc7dcf2dd0 <line:4366:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x55dc7dcf2df0 <line:4367:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf2e10 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf2e30 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x55dc7dcf2e50 <line:4368:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf2e70 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf2e90 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x55dc7dcf2eb0 <line:4369:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf2ed0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf2ef0 <col:11, col:40> Text=" -EINVAL Invalid data supplied"
|   | `-TextComment 0x55dc7dcf2f10 <line:4370:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf2fd0 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x55dc7dcf3040 <line:4371:1>
|     `-TextComment 0x55dc7dcf3010 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc45650 <line:4387:1, col:64> col:13 k_mem_slab_free 'void (struct k_mem_slab *, void **)' extern
| |-ParmVarDecl 0x55dc7dc454c0 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x55dc7dc45538 <col:54, col:61> col:61 mem 'void **'
| `-FullComment 0x55dc7dcf3600 <line:4376:3, line:4386:1>
|   |-ParagraphComment 0x55dc7dcf3150 <line:4376:3>
|   | `-TextComment 0x55dc7dcf3120 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf3170 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf31d0 <col:10, col:51>
|   |   `-TextComment 0x55dc7dcf31a0 <col:10, col:51> Text=" Free memory allocated from a memory slab."
|   |-ParagraphComment 0x55dc7dcf3240 <line:4378:3, line:4379:26>
|   | |-TextComment 0x55dc7dcf31f0 <line:4378:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x55dc7dcf3210 <line:4379:3, col:26> Text=" associated memory slab."
|   |-ParagraphComment 0x55dc7dcf3290 <line:4381:3>
|   | `-TextComment 0x55dc7dcf3260 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf32b0 <col:4, line:4382:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf3360 <line:4381:15, line:4382:3>
|   |   |-TextComment 0x55dc7dcf3310 <line:4381:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x55dc7dcf3330 <line:4382:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf3380 <col:4, col:75> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcf3410 <col:14, col:75>
|   |   `-TextComment 0x55dc7dcf33e0 <col:14, col:75> Text=" Pointer to block address area (as set by k_mem_slab_alloc())."
|   |-ParagraphComment 0x55dc7dcf3460 <line:4384:3>
|   | `-TextComment 0x55dc7dcf3430 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf3480 <col:4, line:4385:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcf3500 <line:4384:11, line:4385:3>
|   |   |-TextComment 0x55dc7dcf34b0 <line:4384:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcf34d0 <line:4385:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf3520 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x55dc7dcf3590 <line:4386:1>
|     `-TextComment 0x55dc7dcf3560 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc465e0 <line:4400:1, line:4403:1> line:4400:21 k_mem_slab_num_used_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x55dc7dc45750 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x55dc7dc46758 <line:4401:1, line:4403:1>
| | `-ReturnStmt 0x55dc7dc46718 <line:4402:2, col:15>
| |   `-ImplicitCastExpr 0x55dc7dc46700 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x55dc7dc466c8 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_used 0x55dc7dc44c18
| |       `-ImplicitCastExpr 0x55dc7dc466b0 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |         `-DeclRefExpr 0x55dc7dc46688 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x55dc7dc45750 'slab' 'struct k_mem_slab *'
| `-FullComment 0x55dc7dcf3ae0 <line:4390:3, line:4399:1>
|   |-ParagraphComment 0x55dc7dcf36a0 <line:4390:3>
|   | `-TextComment 0x55dc7dcf3670 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf36c0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf3720 <col:10, col:57>
|   |   `-TextComment 0x55dc7dcf36f0 <col:10, col:57> Text=" Get the number of used blocks in a memory slab."
|   |-ParagraphComment 0x55dc7dcf37f0 <line:4392:3, line:4393:18>
|   | |-TextComment 0x55dc7dcf3740 <line:4392:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x55dc7dcf3760 <line:4393:3, col:16> Text=" allocated in "
|   | `-InlineCommandComment 0x55dc7dcf37b0 <col:17, col:18> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x55dc7dcf3840 <line:4395:3>
|   | `-TextComment 0x55dc7dcf3810 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf3860 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf38f0 <col:15, col:42>
|   |   `-TextComment 0x55dc7dcf38c0 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x55dc7dcf3940 <line:4397:3>
|   | `-TextComment 0x55dc7dcf3910 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf3960 <col:4, line:4398:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcf39e0 <line:4397:11, line:4398:3>
|   |   |-TextComment 0x55dc7dcf3990 <line:4397:11, col:45> Text=" Number of allocated memory blocks."
|   |   `-TextComment 0x55dc7dcf39b0 <line:4398:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf3a00 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x55dc7dcf3a70 <line:4399:1>
|     `-TextComment 0x55dc7dcf3a40 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc46820 <line:4416:1, line:4419:1> line:4416:21 k_mem_slab_num_free_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x55dc7dc46798 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x55dc7dc46a88 <line:4417:1, line:4419:1>
| | `-ReturnStmt 0x55dc7dc46a10 <line:4418:2, col:34>
| |   `-BinaryOperator 0x55dc7dc469e8 <col:9, col:34> 'unsigned int' '-'
| |     |-ImplicitCastExpr 0x55dc7dc469b8 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     | `-MemberExpr 0x55dc7dc46908 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_blocks 0x55dc7dc44aa8
| |     |   `-ImplicitCastExpr 0x55dc7dc468f0 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x55dc7dc468c8 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x55dc7dc46798 'slab' 'struct k_mem_slab *'
| |     `-ImplicitCastExpr 0x55dc7dc469d0 <col:28, col:34> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-MemberExpr 0x55dc7dc46980 <col:28, col:34> 'u32_t':'unsigned int' lvalue ->num_used 0x55dc7dc44c18
| |         `-ImplicitCastExpr 0x55dc7dc46968 <col:28> 'struct k_mem_slab *' <LValueToRValue>
| |           `-DeclRefExpr 0x55dc7dc46940 <col:28> 'struct k_mem_slab *' lvalue ParmVar 0x55dc7dc46798 'slab' 'struct k_mem_slab *'
| `-FullComment 0x55dc7dcf3fc0 <line:4406:3, line:4415:1>
|   |-ParagraphComment 0x55dc7dcf3b80 <line:4406:3>
|   | `-TextComment 0x55dc7dcf3b50 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf3ba0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf3c00 <col:10, col:59>
|   |   `-TextComment 0x55dc7dcf3bd0 <col:10, col:59> Text=" Get the number of unused blocks in a memory slab."
|   |-ParagraphComment 0x55dc7dcf3cd0 <line:4408:3, line:4409:20>
|   | |-TextComment 0x55dc7dcf3c20 <line:4408:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x55dc7dcf3c40 <line:4409:3, col:18> Text=" unallocated in "
|   | `-InlineCommandComment 0x55dc7dcf3c90 <col:19, col:20> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x55dc7dcf3d20 <line:4411:3>
|   | `-TextComment 0x55dc7dcf3cf0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf3d40 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf3dd0 <col:15, col:42>
|   |   `-TextComment 0x55dc7dcf3da0 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x55dc7dcf3e20 <line:4413:3>
|   | `-TextComment 0x55dc7dcf3df0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf3e40 <col:4, line:4414:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcf3ec0 <line:4413:11, line:4414:3>
|   |   |-TextComment 0x55dc7dcf3e70 <line:4413:11, col:47> Text=" Number of unallocated memory blocks."
|   |   `-TextComment 0x55dc7dcf3e90 <line:4414:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf3ee0 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x55dc7dcf3f50 <line:4415:1>
|     `-TextComment 0x55dc7dcf3f20 <col:1> Text=" "
|-RecordDecl 0x55dc7dc46aa0 prev 0x55dc7dc01320 <line:4427:1, line:4430:1> line:4427:8 struct k_mem_pool definition
| |-FullComment 0x55dc7dcf40e0 <line:4424:3, col:24>
| | `-ParagraphComment 0x55dc7dcf40b0 <col:3, col:24>
| |   |-TextComment 0x55dc7dcf4030 <col:3> Text=" "
| |   |-InlineCommandComment 0x55dc7dcf4050 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55dc7dcf4070 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55dc7dc46b48 <line:4428:2, col:27> col:27 base 'struct sys_mem_pool_base':'struct sys_mem_pool_base'
| `-FieldDecl 0x55dc7dc46ba0 <line:4429:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x55dc7dc46ff8 <line:4495:1, line:4496:34> line:4495:12 k_mem_pool_alloc 'int (struct k_mem_pool *, struct k_mem_block *, size_t, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc46d40 <col:29, col:48> col:48 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x55dc7dc46dc8 <col:54, col:74> col:74 block 'struct k_mem_block *'
| |-ParmVarDecl 0x55dc7dc46e38 <line:4496:8, col:15> col:15 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc46ea8 <col:21, col:27> col:27 timeout 's32_t':'int'
| `-FullComment 0x55dc7dcf4980 <line:4478:3, line:4494:1>
|   |-ParagraphComment 0x55dc7dcf4180 <line:4478:3>
|   | `-TextComment 0x55dc7dcf4150 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf41a0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf4200 <col:10, col:45>
|   |   `-TextComment 0x55dc7dcf41d0 <col:10, col:45> Text=" Allocate memory from a memory pool."
|   |-ParagraphComment 0x55dc7dcf4250 <line:4480:3, col:60>
|   | `-TextComment 0x55dc7dcf4220 <col:3, col:60> Text=" This routine allocates a memory block from a memory pool."
|   |-ParagraphComment 0x55dc7dcf42a0 <line:4482:3>
|   | `-TextComment 0x55dc7dcf4270 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf42c0 <col:4, line:4483:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf4370 <line:4482:15, line:4483:3>
|   |   |-TextComment 0x55dc7dcf4320 <line:4482:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x55dc7dcf4340 <line:4483:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf4390 <col:4, line:4484:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcf4440 <line:4483:16, line:4484:3>
|   |   |-TextComment 0x55dc7dcf43f0 <line:4483:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |   `-TextComment 0x55dc7dcf4410 <line:4484:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf4460 <col:4, line:4485:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcf4510 <line:4484:15, line:4485:3>
|   |   |-TextComment 0x55dc7dcf44c0 <line:4484:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x55dc7dcf44e0 <line:4485:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf4530 <col:4, line:4487:52> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dcf4610 <line:4485:18, line:4487:52>
|   |   |-TextComment 0x55dc7dcf4590 <line:4485:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x55dc7dcf45b0 <line:4486:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x55dc7dcf45d0 <line:4487:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x55dc7dcf4870 <line:4489:3, line:4493:3>
|   | |-TextComment 0x55dc7dcf4630 <line:4489:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf4650 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf4670 <col:11, col:35> Text=" 0 Memory allocated. The "
|   | |-InlineCommandComment 0x55dc7dcf46c0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x55dc7dcf46e0 <col:43, col:72> Text=" field of the block descriptor"
|   | |-TextComment 0x55dc7dcf4700 <line:4490:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x55dc7dcf4720 <line:4491:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf4740 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf4760 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x55dc7dcf4780 <line:4492:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf47a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf47c0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55dc7dcf47e0 <line:4493:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf4890 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x55dc7dcf4900 <line:4494:1>
|     `-TextComment 0x55dc7dcf48d0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc47298 <line:4508:1, col:68> col:14 k_mem_pool_malloc 'void *(struct k_mem_pool *, size_t)' extern
| |-ParmVarDecl 0x55dc7dc47110 <col:32, col:51> col:51 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x55dc7dc47180 <col:57, col:64> col:64 size 'size_t':'unsigned long'
| `-FullComment 0x55dc7dcf4ea0 <line:4499:3, line:4507:1>
|   |-ParagraphComment 0x55dc7dcf4a40 <line:4499:3>
|   | `-TextComment 0x55dc7dcf49f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf4a60 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf4ac0 <col:10, col:68>
|   |   `-TextComment 0x55dc7dcf4a90 <col:10, col:68> Text=" Allocate memory from a memory pool with malloc() semantics"
|   |-ParagraphComment 0x55dc7dcf4b10 <line:4501:3, col:47>
|   | `-TextComment 0x55dc7dcf4ae0 <col:3, col:47> Text=" Such memory must be released using k_free()."
|   |-ParagraphComment 0x55dc7dcf4b60 <line:4503:3>
|   | `-TextComment 0x55dc7dcf4b30 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf4b80 <col:4, line:4504:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf4c30 <line:4503:15, line:4504:3>
|   |   |-TextComment 0x55dc7dcf4be0 <line:4503:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x55dc7dcf4c00 <line:4504:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf4c50 <col:4, line:4505:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcf4d00 <line:4504:15, line:4505:3>
|   |   |-TextComment 0x55dc7dcf4cb0 <line:4504:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x55dc7dcf4cd0 <line:4505:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf4d20 <col:4, line:4506:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcf4da0 <line:4505:11, line:4506:3>
|   |   |-TextComment 0x55dc7dcf4d50 <line:4505:11, col:72> Text=" Address of the allocated memory if successful, otherwise NULL"
|   |   `-TextComment 0x55dc7dcf4d70 <line:4506:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf4dc0 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x55dc7dcf4e30 <line:4507:1>
|     `-TextComment 0x55dc7dcf4e00 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc474a0 <line:4521:1, col:54> col:13 k_mem_pool_free 'void (struct k_mem_block *)' extern
| |-ParmVarDecl 0x55dc7dc473a0 <col:29, col:49> col:49 block 'struct k_mem_block *'
| `-FullComment 0x55dc7dcf5320 <line:4511:3, line:4520:1>
|   |-ParagraphComment 0x55dc7dcf4f40 <line:4511:3>
|   | `-TextComment 0x55dc7dcf4f10 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf4f60 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf4fc0 <col:10, col:51>
|   |   `-TextComment 0x55dc7dcf4f90 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x55dc7dcf5030 <line:4513:3, line:4514:15>
|   | |-TextComment 0x55dc7dcf4fe0 <line:4513:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x55dc7dcf5000 <line:4514:3, col:15> Text=" memory pool."
|   |-ParagraphComment 0x55dc7dcf5080 <line:4516:3>
|   | `-TextComment 0x55dc7dcf5050 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf50a0 <col:4, col:69> [in] implicitly Param="block" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf5130 <col:16, col:69>
|   |   `-TextComment 0x55dc7dcf5100 <col:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |-ParagraphComment 0x55dc7dcf5180 <line:4518:3>
|   | `-TextComment 0x55dc7dcf5150 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf51a0 <col:4, line:4519:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcf5220 <line:4518:11, line:4519:3>
|   |   |-TextComment 0x55dc7dcf51d0 <line:4518:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcf51f0 <line:4519:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf5240 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x55dc7dcf52b0 <line:4520:1>
|     `-TextComment 0x55dc7dcf5280 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc49900 <line:4534:1, col:57> col:13 k_mem_pool_free_id 'void (struct k_mem_block_id *)' extern
| |-ParmVarDecl 0x55dc7dc49800 <col:32, col:55> col:55 id 'struct k_mem_block_id *'
| `-FullComment 0x55dc7dcf57a0 <line:4524:3, line:4533:1>
|   |-ParagraphComment 0x55dc7dcf53c0 <line:4524:3>
|   | `-TextComment 0x55dc7dcf5390 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf53e0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf5440 <col:10, col:51>
|   |   `-TextComment 0x55dc7dcf5410 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x55dc7dcf54b0 <line:4526:3, line:4527:14>
|   | |-TextComment 0x55dc7dcf5460 <line:4526:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x55dc7dcf5480 <line:4527:3, col:14> Text=" memory pool"
|   |-ParagraphComment 0x55dc7dcf5500 <line:4529:3>
|   | `-TextComment 0x55dc7dcf54d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf5520 <col:4, col:37> [in] implicitly Param="id" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf55b0 <col:13, col:37>
|   |   `-TextComment 0x55dc7dcf5580 <col:13, col:37> Text=" Memory block identifier."
|   |-ParagraphComment 0x55dc7dcf5600 <line:4531:3>
|   | `-TextComment 0x55dc7dcf55d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf5620 <col:4, line:4532:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcf56a0 <line:4531:11, line:4532:3>
|   |   |-TextComment 0x55dc7dcf5650 <line:4531:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcf5670 <line:4532:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf56c0 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x55dc7dcf5730 <line:4533:1>
|     `-TextComment 0x55dc7dcf5700 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc49b58 <line:4557:1, col:34> col:14 k_malloc 'void *(size_t)' extern
| |-ParmVarDecl 0x55dc7dc49a48 <col:23, col:30> col:30 size 'size_t':'unsigned long'
| `-FullComment 0x55dc7dcf5c20 <line:4547:3, line:4556:1>
|   |-ParagraphComment 0x55dc7dcf5840 <line:4547:3>
|   | `-TextComment 0x55dc7dcf5810 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf5860 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf58c0 <col:10, col:36>
|   |   `-TextComment 0x55dc7dcf5890 <col:10, col:36> Text=" Allocate memory from heap."
|   |-ParagraphComment 0x55dc7dcf5930 <line:4549:3, line:4550:39>
|   | |-TextComment 0x55dc7dcf58e0 <line:4549:3, col:66> Text=" This routine provides traditional malloc() semantics. Memory is"
|   | `-TextComment 0x55dc7dcf5900 <line:4550:3, col:39> Text=" allocated from the heap memory pool."
|   |-ParagraphComment 0x55dc7dcf5980 <line:4552:3>
|   | `-TextComment 0x55dc7dcf5950 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf59a0 <col:4, col:53> [in] implicitly Param="size" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf5a30 <col:15, col:53>
|   |   `-TextComment 0x55dc7dcf5a00 <col:15, col:53> Text=" Amount of memory requested (in bytes)."
|   |-ParagraphComment 0x55dc7dcf5a80 <line:4554:3>
|   | `-TextComment 0x55dc7dcf5a50 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf5aa0 <col:4, line:4555:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcf5b20 <line:4554:11, line:4555:3>
|   |   |-TextComment 0x55dc7dcf5ad0 <line:4554:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x55dc7dcf5af0 <line:4555:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf5b40 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x55dc7dcf5bb0 <line:4556:1>
|     `-TextComment 0x55dc7dcf5b80 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc49cc8 <line:4573:1, col:29> col:13 k_free 'void (void *)' extern
| |-ParmVarDecl 0x55dc7dc49c40 <col:20, col:26> col:26 ptr 'void *'
| `-FullComment 0x55dc7dcf61a0 <line:4560:3, line:4572:1>
|   |-ParagraphComment 0x55dc7dcf5cc0 <line:4560:3>
|   | `-TextComment 0x55dc7dcf5c90 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf5ce0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf5d40 <col:10, col:42>
|   |   `-TextComment 0x55dc7dcf5d10 <col:10, col:42> Text=" Free memory allocated from heap."
|   |-ParagraphComment 0x55dc7dcf5de0 <line:4562:3, line:4564:23>
|   | |-TextComment 0x55dc7dcf5d60 <line:4562:3, col:71> Text=" This routine provides traditional free() semantics. The memory being"
|   | |-TextComment 0x55dc7dcf5d80 <line:4563:3, col:65> Text=" returned must have been allocated from the heap memory pool or"
|   | `-TextComment 0x55dc7dcf5da0 <line:4564:3, col:23> Text=" k_mem_pool_malloc()."
|   |-ParagraphComment 0x55dc7dcf5eb0 <line:4566:3, col:48>
|   | |-TextComment 0x55dc7dcf5e00 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x55dc7dcf5e50 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="ptr"
|   | `-TextComment 0x55dc7dcf5e70 <col:13, col:48> Text=" is NULL, no operation is performed."
|   |-ParagraphComment 0x55dc7dcf5f00 <line:4568:3>
|   | `-TextComment 0x55dc7dcf5ed0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf5f20 <col:4, col:53> [in] implicitly Param="ptr" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf5fb0 <col:14, col:53>
|   |   `-TextComment 0x55dc7dcf5f80 <col:14, col:53> Text=" Pointer to previously allocated memory."
|   |-ParagraphComment 0x55dc7dcf6000 <line:4570:3>
|   | `-TextComment 0x55dc7dcf5fd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf6020 <col:4, line:4571:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcf60a0 <line:4570:11, line:4571:3>
|   |   |-TextComment 0x55dc7dcf6050 <line:4570:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcf6070 <line:4571:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf60c0 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x55dc7dcf6130 <line:4572:1>
|     `-TextComment 0x55dc7dcf6100 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc49f38 <line:4587:1, col:48> col:14 k_calloc 'void *(size_t, size_t)' extern
| |-ParmVarDecl 0x55dc7dc49da8 <col:23, col:30> col:30 nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc49e18 <col:37, col:44> col:44 size 'size_t':'unsigned long'
| `-FullComment 0x55dc7dcf66f0 <line:4576:3, line:4586:1>
|   |-ParagraphComment 0x55dc7dcf6240 <line:4576:3>
|   | `-TextComment 0x55dc7dcf6210 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf6260 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf62c0 <col:10, col:48>
|   |   `-TextComment 0x55dc7dcf6290 <col:10, col:48> Text=" Allocate memory from heap, array style"
|   |-ParagraphComment 0x55dc7dcf6330 <line:4578:3, line:4579:50>
|   | |-TextComment 0x55dc7dcf62e0 <line:4578:3, col:66> Text=" This routine provides traditional calloc() semantics. Memory is"
|   | `-TextComment 0x55dc7dcf6300 <line:4579:3, col:50> Text=" allocated from the heap memory pool and zeroed."
|   |-ParagraphComment 0x55dc7dcf6380 <line:4581:3>
|   | `-TextComment 0x55dc7dcf6350 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf63a0 <col:4, line:4582:3> [in] implicitly Param="nmemb" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf6450 <line:4581:16, line:4582:3>
|   |   |-TextComment 0x55dc7dcf6400 <line:4581:16, col:57> Text=" Number of elements in the requested array"
|   |   `-TextComment 0x55dc7dcf6420 <line:4582:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf6470 <col:4, col:53> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcf6500 <col:15, col:53>
|   |   `-TextComment 0x55dc7dcf64d0 <col:15, col:53> Text=" Size of each array element (in bytes)."
|   |-ParagraphComment 0x55dc7dcf6550 <line:4584:3>
|   | `-TextComment 0x55dc7dcf6520 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf6570 <col:4, line:4585:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcf65f0 <line:4584:11, line:4585:3>
|   |   |-TextComment 0x55dc7dcf65a0 <line:4584:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x55dc7dcf65c0 <line:4585:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf6610 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x55dc7dcf6680 <line:4586:1>
|     `-TextComment 0x55dc7dcf6650 <col:1> Text=" "
|-EnumDecl 0x55dc7dc4a018 <line:4600:1, line:4614:1> line:4600:6 _poll_types_bits
| |-EnumConstantDecl 0x55dc7dc4a0d0 <line:4602:2> col:2 _POLL_TYPE_IGNORE 'int'
| |-EnumConstantDecl 0x55dc7dc4a118 <line:4605:2> col:2 _POLL_TYPE_SIGNAL 'int'
| |-EnumConstantDecl 0x55dc7dc4a160 <line:4608:2> col:2 _POLL_TYPE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x55dc7dc4a1a8 <line:4611:2> col:2 _POLL_TYPE_DATA_AVAILABLE 'int'
| `-EnumConstantDecl 0x55dc7dc4a1f0 <line:4613:2> col:2 referenced _POLL_NUM_TYPES 'int'
|-EnumDecl 0x55dc7dc4a238 <line:4619:1, line:4636:1> line:4619:6 _poll_states_bits
| |-EnumConstantDecl 0x55dc7dc4a2f0 <line:4621:2> col:2 _POLL_STATE_NOT_READY 'int'
| |-EnumConstantDecl 0x55dc7dc4a338 <line:4624:2> col:2 _POLL_STATE_SIGNALED 'int'
| |-EnumConstantDecl 0x55dc7dc4a380 <line:4627:2> col:2 _POLL_STATE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x55dc7dc4a3c8 <line:4630:2> col:2 _POLL_STATE_DATA_AVAILABLE 'int'
| |-EnumConstantDecl 0x55dc7dc4a410 <line:4633:2> col:2 _POLL_STATE_CANCELLED 'int'
| `-EnumConstantDecl 0x55dc7dc4a458 <line:4635:2> col:2 referenced _POLL_NUM_STATES 'int'
|-EnumDecl 0x55dc7dc4a4c8 <line:4667:1, line:4672:1> line:4667:6 k_poll_modes
| |-EnumConstantDecl 0x55dc7dc4a5a0 <line:4669:2, col:28> col:2 K_POLL_MODE_NOTIFY_ONLY 'int'
| | `-IntegerLiteral 0x55dc7dc4a580 <col:28> 'int' 0
| `-EnumConstantDecl 0x55dc7dc4a5e8 <line:4671:2> col:2 K_POLL_NUM_MODES 'int'
|-RecordDecl 0x55dc7dc4a630 prev 0x55dc7dc01530 <line:4683:1, line:4695:1> line:4683:8 struct k_poll_signal definition
| |-FieldDecl 0x55dc7dc4a6f8 <line:4685:2, col:14> col:14 poll_events 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x55dc7dcf67c0 <line:4684:5, col:28>
| |   `-ParagraphComment 0x55dc7dcf6790 <col:5, col:28>
| |     `-TextComment 0x55dc7dcf6760 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x55dc7dc4bc80 <line:4691:2, col:15> col:15 referenced signaled 'unsigned int'
| | `-FullComment 0x55dc7dcf68b0 <line:4688:4, line:4689:24>
| |   `-ParagraphComment 0x55dc7dcf6880 <line:4688:4, line:4689:24>
| |     |-TextComment 0x55dc7dcf6830 <line:4688:4, col:71> Text=" 1 if the event has been signaled, 0 otherwise. Stays set to 1 until"
| |     `-TextComment 0x55dc7dcf6850 <line:4689:4, col:24> Text=" user resets it to 0."
| `-FieldDecl 0x55dc7dc4bd10 <line:4694:2, col:6> col:6 result 'int'
|   `-FullComment 0x55dc7dcf6980 <line:4693:5, col:67>
|     `-ParagraphComment 0x55dc7dcf6950 <col:5, col:67>
|       `-TextComment 0x55dc7dcf6920 <col:5, col:67> Text=" custom result value passed to k_poll_signal_raise() if needed "
|-RecordDecl 0x55dc7dc4bd88 prev 0x55dc7dc01480 <line:4707:1, line:4737:1> line:4707:8 struct k_poll_event definition
| |-FullComment 0x55dc7dcf6b40 <line:4704:3, line:4706:1>
| | |-ParagraphComment 0x55dc7dcf6a20 <line:4704:3>
| | | `-TextComment 0x55dc7dcf69f0 <col:3> Text=" "
| | |-BlockCommandComment 0x55dc7dcf6a50 <col:4, col:20> Name="brief"
| | | `-ParagraphComment 0x55dc7dcf6ab0 <col:10, col:20>
| | |   `-TextComment 0x55dc7dcf6a80 <col:10, col:20> Text=" Poll Event"
| | `-ParagraphComment 0x55dc7dcf6b00 <line:4706:1>
| |   `-TextComment 0x55dc7dcf6ad0 <col:1> Text=" "
| |-FieldDecl 0x55dc7dc4be48 <line:4709:2, col:14> col:14 _node 'sys_dnode_t':'struct _dnode'
| | `-FullComment 0x55dc7dcf6c10 <line:4708:5, col:28>
| |   `-ParagraphComment 0x55dc7dcf6be0 <col:5, col:28>
| |     `-TextComment 0x55dc7dcf6bb0 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x55dc7dc4bf40 <line:4712:2, col:18> col:18 poller 'struct _poller *'
| | `-FullComment 0x55dc7dcf6ce0 <line:4711:5, col:28>
| |   `-ParagraphComment 0x55dc7dcf6cb0 <col:5, col:28>
| |     `-TextComment 0x55dc7dcf6c80 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x55dc7dc4bfe8 <line:4715:2, col:12> col:8 tag 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x55dc7dc4bfb8 <col:12> 'int' 8
| | `-FullComment 0x55dc7dcf6db0 <line:4714:5, col:63>
| |   `-ParagraphComment 0x55dc7dcf6d80 <col:5, col:63>
| |     `-TextComment 0x55dc7dcf6d50 <col:5, col:63> Text=" optional user-specified tag, opaque, untouched by the API "
| |-FieldDecl 0x55dc7dc4c090 <line:4718:2, col:13> col:8 type 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x55dc7dc4c058 <col:13> 'int' EnumConstant 0x55dc7dc4a1f0 '_POLL_NUM_TYPES' 'int'
| | `-FullComment 0x55dc7dcf6e80 <line:4717:5, col:67>
| |   `-ParagraphComment 0x55dc7dcf6e50 <col:5, col:67>
| |     `-TextComment 0x55dc7dcf6e20 <col:5, col:67> Text=" bitfield of event types (bitwise-ORed K_POLL_TYPE_xxx values) "
| |-FieldDecl 0x55dc7dc4c140 <line:4721:2, col:14> col:8 state 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x55dc7dc4c108 <col:14> 'int' EnumConstant 0x55dc7dc4a458 '_POLL_NUM_STATES' 'int'
| | `-FullComment 0x55dc7dcf6f50 <line:4720:5, col:69>
| |   `-ParagraphComment 0x55dc7dcf6f20 <col:5, col:69>
| |     `-TextComment 0x55dc7dcf6ef0 <col:5, col:69> Text=" bitfield of event states (bitwise-ORed K_POLL_STATE_xxx values) "
| |-FieldDecl 0x55dc7dc4c1e8 <line:4724:2, col:13> col:8 mode 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x55dc7dc4c1b8 <col:13> 'int' 1
| | `-FullComment 0x55dc7dcf7020 <line:4723:5, col:47>
| |   `-ParagraphComment 0x55dc7dcf6ff0 <col:5, col:47>
| |     `-TextComment 0x55dc7dcf6fc0 <col:5, col:47> Text=" mode of operation, from enum k_poll_modes "
| |-FieldDecl 0x55dc7dc4c440 <line:4727:2, line:4646:9> line:4727:8 unused 'u32_t':'unsigned int'
| | |-ParenExpr 0x55dc7dc4c410 <line:4641:2, line:4646:9> 'int'
| | | `-BinaryOperator 0x55dc7dc4c3e8 <line:4641:3, line:4646:8> 'int' '-'
| | |   |-IntegerLiteral 0x55dc7dc4c258 <line:4641:3> 'int' 32
| | |   `-ParenExpr 0x55dc7dc4c3c8 <col:8, line:4646:8> 'int'
| | |     `-BinaryOperator 0x55dc7dc4c3a0 <line:4641:9, line:4645:11> 'int' '+'
| | |       |-BinaryOperator 0x55dc7dc4c358 <line:4641:9, line:4644:11> 'int' '+'
| | |       | |-BinaryOperator 0x55dc7dc4c308 <line:4641:9, line:4643:11> 'int' '+'
| | |       | | |-BinaryOperator 0x55dc7dc4c2b8 <line:4641:9, line:4642:11> 'int' '+'
| | |       | | | |-IntegerLiteral 0x55dc7dc4c278 <line:4641:9> 'int' 0
| | |       | | | `-IntegerLiteral 0x55dc7dc4c298 <line:4642:11> 'int' 8
| | |       | | `-DeclRefExpr 0x55dc7dc4c2e0 <line:4643:11> 'int' EnumConstant 0x55dc7dc4a1f0 '_POLL_NUM_TYPES' 'int'
| | |       | `-DeclRefExpr 0x55dc7dc4c330 <line:4644:11> 'int' EnumConstant 0x55dc7dc4a458 '_POLL_NUM_STATES' 'int'
| | |       `-IntegerLiteral 0x55dc7dc4c380 <line:4645:11> 'int' 1
| | `-FullComment 0x55dc7dcf70f0 <line:4726:5, col:32>
| |   `-ParagraphComment 0x55dc7dcf70c0 <col:5, col:32>
| |     `-TextComment 0x55dc7dcf7090 <col:5, col:32> Text=" unused bits in 32-bit word "
| |-RecordDecl 0x55dc7dc4c4b8 <line:4730:2, line:4736:2> line:4730:2 union definition
| | |-FullComment 0x55dc7dcf71c0 <line:4729:5, col:19>
| | | `-ParagraphComment 0x55dc7dcf7190 <col:5, col:19>
| | |   `-TextComment 0x55dc7dcf7160 <col:5, col:19> Text=" per-type data "
| | |-FieldDecl 0x55dc7dc4c578 <line:4731:3, col:9> col:9 obj 'void *'
| | |-FieldDecl 0x55dc7dc4c670 <line:4732:3, col:25> col:25 signal 'struct k_poll_signal *'
| | |-FieldDecl 0x55dc7dc4c6e0 <line:4733:3, col:17> col:17 sem 'struct k_sem *'
| | |-FieldDecl 0x55dc7dc4c7e0 <line:4734:3, col:18> col:18 fifo 'struct k_fifo *'
| | `-FieldDecl 0x55dc7dc4c850 <line:4735:3, col:19> col:19 queue 'struct k_queue *'
| |-FieldDecl 0x55dc7dc4c8f0 <line:4730:2> col:2 implicit 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| |-IndirectFieldDecl 0x55dc7dc4c948 <line:4731:9> col:9 implicit obj 'void *'
| | |-Field 0x55dc7dc4c8f0 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x55dc7dc4c578 'obj' 'void *'
| |-IndirectFieldDecl 0x55dc7dc4c998 <line:4732:25> col:25 implicit signal 'struct k_poll_signal *'
| | |-Field 0x55dc7dc4c8f0 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x55dc7dc4c670 'signal' 'struct k_poll_signal *'
| |-IndirectFieldDecl 0x55dc7dc4c9e8 <line:4733:17> col:17 implicit sem 'struct k_sem *'
| | |-Field 0x55dc7dc4c8f0 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x55dc7dc4c6e0 'sem' 'struct k_sem *'
| |-IndirectFieldDecl 0x55dc7dc4ca38 <line:4734:18> col:18 implicit fifo 'struct k_fifo *'
| | |-Field 0x55dc7dc4c8f0 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x55dc7dc4c7e0 'fifo' 'struct k_fifo *'
| `-IndirectFieldDecl 0x55dc7dc4ca88 <line:4735:19> col:19 implicit queue 'struct k_queue *'
|   |-Field 0x55dc7dc4c8f0 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
|   `-Field 0x55dc7dc4c850 'queue' 'struct k_queue *'
|-FunctionDecl 0x55dc7dc4d7c0 <line:4778:1, line:4779:29> line:4778:13 k_poll_event_init 'void (struct k_poll_event *, u32_t, int, void *)' extern
| |-ParmVarDecl 0x55dc7dc4cb20 <col:31, col:52> col:52 event 'struct k_poll_event *'
| |-ParmVarDecl 0x55dc7dc4cb90 <col:59, col:65> col:65 type 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55dc7dc4cc08 <line:4779:10, col:14> col:14 mode 'int'
| |-ParmVarDecl 0x55dc7dc4d680 <col:20, col:26> col:26 obj 'void *'
| `-FullComment 0x55dc7dcf7940 <line:4761:3, line:4776:1>
|   |-ParagraphComment 0x55dc7dcf7260 <line:4761:3>
|   | `-TextComment 0x55dc7dcf7230 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf7280 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf72e0 <col:10, col:53>
|   |   `-TextComment 0x55dc7dcf72b0 <col:10, col:53> Text=" Initialize one struct k_poll_event instance"
|   |-ParagraphComment 0x55dc7dcf7350 <line:4763:3, line:4764:53>
|   | |-TextComment 0x55dc7dcf7300 <line:4763:3, col:73> Text=" After this routine is called on a poll event, the event it ready to be"
|   | `-TextComment 0x55dc7dcf7320 <line:4764:3, col:53> Text=" placed in an event array to be passed to k_poll()."
|   |-ParagraphComment 0x55dc7dcf73a0 <line:4766:3>
|   | `-TextComment 0x55dc7dcf7370 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf73c0 <col:4, line:4767:3> [in] implicitly Param="event" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf7470 <line:4766:16, line:4767:3>
|   |   |-TextComment 0x55dc7dcf7420 <line:4766:16, col:40> Text=" The event to initialize."
|   |   `-TextComment 0x55dc7dcf7440 <line:4767:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf7490 <col:4, line:4771:3> [in] implicitly Param="type" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcf75c0 <line:4767:15, line:4771:3>
|   |   |-TextComment 0x55dc7dcf74f0 <line:4767:15, col:73> Text=" A bitfield of the types of event, from the K_POLL_TYPE_xxx"
|   |   |-TextComment 0x55dc7dcf7510 <line:4768:3, col:77> Text="             values. Only values that apply to the same object being polled"
|   |   |-TextComment 0x55dc7dcf7530 <line:4769:3, col:77> Text="             can be used together. Choosing K_POLL_TYPE_IGNORE disables the"
|   |   |-TextComment 0x55dc7dcf7550 <line:4770:3, col:21> Text="             event."
|   |   `-TextComment 0x55dc7dcf7570 <line:4771:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf75e0 <col:4, line:4772:3> [in] implicitly Param="mode" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcf7690 <line:4771:15, line:4772:3>
|   |   |-TextComment 0x55dc7dcf7640 <line:4771:15, col:51> Text=" Future. Use K_POLL_MODE_NOTIFY_ONLY."
|   |   `-TextComment 0x55dc7dcf7660 <line:4772:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf76b0 <col:4, col:43> [in] implicitly Param="obj" ParamIndex=3
|   | `-ParagraphComment 0x55dc7dcf7740 <col:14, col:43>
|   |   `-TextComment 0x55dc7dcf7710 <col:14, col:43> Text=" Kernel object or poll signal."
|   |-ParagraphComment 0x55dc7dcf7790 <line:4774:3>
|   | `-TextComment 0x55dc7dcf7760 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf77b0 <col:4, line:4775:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcf7830 <line:4774:11, line:4775:3>
|   |   |-TextComment 0x55dc7dcf77e0 <line:4774:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcf7800 <line:4775:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf7850 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x55dc7dcf78c0 <line:4776:1>
|     `-TextComment 0x55dc7dcf7890 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc4daf8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4827:21> line:4826:15 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc4d8d0 <col:22, col:43> col:43 events 'struct k_poll_event *'
| |-ParmVarDecl 0x55dc7dc4d948 <col:51, col:55> col:55 num_events 'int'
| |-ParmVarDecl 0x55dc7dc4d9b8 <line:4827:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x55dc7dcf8560 <line:4782:3, line:4824:1>
|   |-ParagraphComment 0x55dc7dcf79e0 <line:4782:3>
|   | `-TextComment 0x55dc7dcf79b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf7a00 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf7a60 <col:10, col:63>
|   |   `-TextComment 0x55dc7dcf7a30 <col:10, col:63> Text=" Wait for one or many of multiple poll events to occur"
|   |-ParagraphComment 0x55dc7dcf7b00 <line:4784:3, line:4786:61>
|   | |-TextComment 0x55dc7dcf7a80 <line:4784:3, col:71> Text=" This routine allows a thread to wait concurrently for one or many of"
|   | |-TextComment 0x55dc7dcf7aa0 <line:4785:3, col:76> Text=" multiple poll events to have occurred. Such events can be a kernel object"
|   | `-TextComment 0x55dc7dcf7ac0 <line:4786:3, col:61> Text=" being available, like a semaphore, or a poll signal event."
|   |-ParagraphComment 0x55dc7dcf7c90 <line:4788:3, line:4796:68>
|   | |-TextComment 0x55dc7dcf7b20 <line:4788:3, col:78> Text=" When an event notifies that a kernel object is available, the kernel object"
|   | |-TextComment 0x55dc7dcf7b40 <line:4789:3, col:76> Text=" is not "given" to the thread calling k_poll(): it merely signals the fact"
|   | |-TextComment 0x55dc7dcf7b60 <line:4790:3, col:76> Text=" that the object was available when the k_poll() call was in effect. Also,"
|   | |-TextComment 0x55dc7dcf7b80 <line:4791:3, col:78> Text=" all threads trying to acquire an object the regular way, i.e. by pending on"
|   | |-TextComment 0x55dc7dcf7ba0 <line:4792:3, col:74> Text=" the object, have precedence over the thread polling on the object. This"
|   | |-TextComment 0x55dc7dcf7bc0 <line:4793:3, col:75> Text=" means that the polling thread will never get the poll event on an object"
|   | |-TextComment 0x55dc7dcf7be0 <line:4794:3, col:75> Text=" until the object becomes available and its pend queue is empty. For this"
|   | |-TextComment 0x55dc7dcf7c00 <line:4795:3, col:76> Text=" reason, the k_poll() call is more effective when the objects being polled"
|   | `-TextComment 0x55dc7dcf7c20 <line:4796:3, col:68> Text=" only have one thread, the polling thread, trying to acquire them."
|   |-ParagraphComment 0x55dc7dcf7d30 <line:4798:3, line:4800:44>
|   | |-TextComment 0x55dc7dcf7cb0 <line:4798:3, col:78> Text=" When k_poll() returns 0, the caller should loop on all the events that were"
|   | |-TextComment 0x55dc7dcf7cd0 <line:4799:3, col:72> Text=" passed to k_poll() and check the state field for the values that were"
|   | `-TextComment 0x55dc7dcf7cf0 <line:4800:3, col:44> Text=" expected and take the associated actions."
|   |-ParagraphComment 0x55dc7dcf7da0 <line:4802:3, line:4803:41>
|   | |-TextComment 0x55dc7dcf7d50 <line:4802:3, col:78> Text=" Before being reused for another call to k_poll(), the user has to reset the"
|   | `-TextComment 0x55dc7dcf7d70 <line:4803:3, col:41> Text=" state field to K_POLL_STATE_NOT_READY."
|   |-ParagraphComment 0x55dc7dcf7e10 <line:4805:3, line:4806:30>
|   | |-TextComment 0x55dc7dcf7dc0 <line:4805:3, col:77> Text=" When called from user mode, a temporary memory allocation is required from"
|   | `-TextComment 0x55dc7dcf7de0 <line:4806:3, col:30> Text=" the caller's resource pool."
|   |-ParagraphComment 0x55dc7dcf7e60 <line:4808:3>
|   | `-TextComment 0x55dc7dcf7e30 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf7e80 <col:4, line:4809:3> [in] implicitly Param="events" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf7f30 <line:4808:17, line:4809:3>
|   |   |-TextComment 0x55dc7dcf7ee0 <line:4808:17, col:65> Text=" An array of pointers to events to be polled for."
|   |   `-TextComment 0x55dc7dcf7f00 <line:4809:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf7f50 <col:4, line:4810:3> [in] implicitly Param="num_events" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcf8000 <line:4809:21, line:4810:3>
|   |   |-TextComment 0x55dc7dcf7fb0 <line:4809:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x55dc7dcf7fd0 <line:4810:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf8020 <col:4, line:4812:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcf8100 <line:4810:18, line:4812:28>
|   |   |-TextComment 0x55dc7dcf8080 <line:4810:18, col:74> Text=" Non-negative waiting period for an event to be ready (in"
|   |   |-TextComment 0x55dc7dcf80a0 <line:4811:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55dc7dcf80c0 <line:4812:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55dc7dcf8440 <line:4814:3, line:4823:3>
|   | |-TextComment 0x55dc7dcf8120 <line:4814:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf8140 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf8160 <col:11, col:42> Text=" 0 One or more events are ready."
|   | |-TextComment 0x55dc7dcf8180 <line:4815:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf81a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf81c0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x55dc7dcf81e0 <line:4816:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf8200 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf8220 <col:11, col:57> Text=" -EINTR Polling has been interrupted, e.g. with"
|   | |-TextComment 0x55dc7dcf8240 <line:4817:3, col:76> Text="         k_queue_cancel_wait(). All output events are still set and valid,"
|   | |-TextComment 0x55dc7dcf8260 <line:4818:3, col:77> Text="         cancelled event(s) will be set to K_POLL_STATE_CANCELLED. In other"
|   | |-TextComment 0x55dc7dcf8280 <line:4819:3, col:75> Text="         words, -EINTR status means that at least one of output events is"
|   | |-TextComment 0x55dc7dcf82a0 <line:4820:3, col:34> Text="         K_POLL_STATE_CANCELLED."
|   | |-TextComment 0x55dc7dcf82c0 <line:4821:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf82e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf8300 <col:11, col:76> Text=" -ENOMEM Thread resource pool insufficient memory (user mode only)"
|   | |-TextComment 0x55dc7dcf8320 <line:4822:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf8340 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf8360 <col:11, col:50> Text=" -EINVAL Bad parameters (user mode only)"
|   | `-TextComment 0x55dc7dcf8380 <line:4823:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf8460 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x55dc7dcf84d0 <line:4824:1>
|     `-TextComment 0x55dc7dcf84a0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc4dd00 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4840:63> col:16 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x55dc7dc4dc00 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| `-FullComment 0x55dc7dcf89c0 <line:4830:3, line:4838:1>
|   |-ParagraphComment 0x55dc7dcf8600 <line:4830:3>
|   | `-TextComment 0x55dc7dcf85d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf8620 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf8680 <col:10, col:42>
|   |   `-TextComment 0x55dc7dcf8650 <col:10, col:42> Text=" Initialize a poll signal object."
|   |-ParagraphComment 0x55dc7dcf86d0 <line:4832:3, col:71>
|   | `-TextComment 0x55dc7dcf86a0 <col:3, col:71> Text=" Ready a poll signal object to be signaled via k_poll_signal_raise()."
|   |-ParagraphComment 0x55dc7dcf8720 <line:4834:3>
|   | `-TextComment 0x55dc7dcf86f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf8740 <col:4, col:31> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf87d0 <col:17, col:31>
|   |   `-TextComment 0x55dc7dcf87a0 <col:17, col:31> Text=" A poll signal."
|   |-ParagraphComment 0x55dc7dcf8820 <line:4836:3>
|   | `-TextComment 0x55dc7dcf87f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf8840 <col:4, line:4837:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcf88c0 <line:4836:11, line:4837:3>
|   |   |-TextComment 0x55dc7dcf8870 <line:4836:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcf8890 <line:4837:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf88e0 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x55dc7dcf8950 <line:4838:1>
|     `-TextComment 0x55dc7dcf8920 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc4de58 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4848:64> col:16 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| `-ParmVarDecl 0x55dc7dc4ddd0 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
|-FunctionDecl 0x55dc7dc4dfb0 <line:4850:1, line:4853:1> line:4850:20 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x55dc7dc4df28 <col:47, col:69> col:69 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x55dc7dc4e148 <line:4851:1, line:4853:1>
|   `-BinaryOperator 0x55dc7dc4e0f0 <line:4852:2, col:21> 'unsigned int' '='
|     |-MemberExpr 0x55dc7dc4e098 <col:2, col:10> 'unsigned int' lvalue ->signaled 0x55dc7dc4bc80
|     | `-ImplicitCastExpr 0x55dc7dc4e080 <col:2> 'struct k_poll_signal *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55dc7dc4e058 <col:2> 'struct k_poll_signal *' lvalue ParmVar 0x55dc7dc4df28 'signal' 'struct k_poll_signal *'
|     `-IntegerLiteral 0x55dc7dc4e0d0 <col:21> 'unsigned int' 0
|-FunctionDecl 0x55dc7dc4e3b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4867:43> line:4866:16 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x55dc7dc4e188 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55dc7dc4e200 <line:4867:8, col:22> col:22 signaled 'unsigned int *'
| |-ParmVarDecl 0x55dc7dc4e278 <col:32, col:37> col:37 result 'int *'
| `-FullComment 0x55dc7dcf8f20 <line:4856:3, line:4865:1>
|   |-ParagraphComment 0x55dc7dcf8a70 <line:4856:3>
|   | `-TextComment 0x55dc7dcf8a30 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf8a90 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf8af0 <col:10, col:68>
|   |   `-TextComment 0x55dc7dcf8ac0 <col:10, col:68> Text=" Fetch the signaled state and result value of a poll signal"
|   |-ParagraphComment 0x55dc7dcf8b40 <line:4858:3>
|   | `-TextComment 0x55dc7dcf8b10 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf8b60 <col:4, line:4859:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf8c10 <line:4858:17, line:4859:3>
|   |   |-TextComment 0x55dc7dcf8bc0 <line:4858:17, col:37> Text=" A poll signal object"
|   |   `-TextComment 0x55dc7dcf8be0 <line:4859:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf8c30 <col:4, line:4861:3> [in] implicitly Param="signaled" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcf8d10 <line:4859:19, line:4861:3>
|   |   |-TextComment 0x55dc7dcf8c90 <line:4859:19, col:73> Text=" An integer buffer which will be written nonzero if the"
|   |   |-TextComment 0x55dc7dcf8cb0 <line:4860:3, col:26> Text="		   object was signaled"
|   |   `-TextComment 0x55dc7dcf8cd0 <line:4861:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf8d30 <col:4, line:4864:3> [in] implicitly Param="result" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcf8e30 <line:4861:17, line:4864:3>
|   |   |-TextComment 0x55dc7dcf8d90 <line:4861:17, col:77> Text=" An integer destination buffer which will be written with the"
|   |   |-TextComment 0x55dc7dcf8db0 <line:4862:3, col:63> Text="		   result value if the object was signaled, or an undefined"
|   |   |-TextComment 0x55dc7dcf8dd0 <line:4863:3, col:27> Text="		   value if it was not."
|   |   `-TextComment 0x55dc7dcf8df0 <line:4864:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf8e50 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x55dc7dcf8ec0 <line:4865:1>
|     `-TextComment 0x55dc7dcf8e90 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc4eb00 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4894:75> col:15 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x55dc7dc4e4c0 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55dc7dc4e538 <col:65, col:69> col:69 result 'int'
| `-FullComment 0x55dc7dcf9790 <line:4870:3, line:4892:1>
|   |-ParagraphComment 0x55dc7dcf8fc0 <line:4870:3>
|   | `-TextComment 0x55dc7dcf8f90 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf8fe0 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf9040 <col:10, col:38>
|   |   `-TextComment 0x55dc7dcf9010 <col:10, col:38> Text=" Signal a poll signal object."
|   |-ParagraphComment 0x55dc7dcf9160 <line:4872:3, line:4874:57>
|   | |-TextComment 0x55dc7dcf9060 <line:4872:3, col:77> Text=" This routine makes ready a poll signal, which is basically a poll event of"
|   | |-TextComment 0x55dc7dcf9080 <line:4873:3, col:77> Text=" type K_POLL_TYPE_SIGNAL. If a thread was polling on that event, it will be"
|   | |-TextComment 0x55dc7dcf90a0 <line:4874:3, col:24> Text=" made ready to run. A "
|   | |-InlineCommandComment 0x55dc7dcf90f0 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="result"
|   | `-TextComment 0x55dc7dcf9110 <col:34, col:57> Text=" value can be specified."
|   |-ParagraphComment 0x55dc7dcf9250 <line:4876:3, line:4880:27>
|   | |-TextComment 0x55dc7dcf9180 <line:4876:3, col:64> Text=" The poll signal contains a 'signaled' field that, when set by"
|   | |-TextComment 0x55dc7dcf91a0 <line:4877:3, col:73> Text=" k_poll_signal_raise(), stays set until the user sets it back to 0 with"
|   | |-TextComment 0x55dc7dcf91c0 <line:4878:3, col:74> Text=" k_poll_signal_reset(). It thus has to be reset by the user before being"
|   | |-TextComment 0x55dc7dcf91e0 <line:4879:3, col:76> Text=" passed again to k_poll() or k_poll() will consider it being signaled, and"
|   | `-TextComment 0x55dc7dcf9200 <line:4880:3, col:27> Text=" will return immediately."
|   |-ParagraphComment 0x55dc7dcf92a0 <line:4882:3>
|   | `-TextComment 0x55dc7dcf9270 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf92c0 <col:4, line:4884:65> Name="note"
|   | `-ParagraphComment 0x55dc7dcf9370 <line:4882:9, line:4884:65>
|   |   |-TextComment 0x55dc7dcf92f0 <line:4882:9, col:69> Text=" The result is stored and the 'signaled' field is set even if"
|   |   |-TextComment 0x55dc7dcf9310 <line:4883:3, col:70> Text=" this function returns an error indicating that an expiring poll was"
|   |   `-TextComment 0x55dc7dcf9330 <line:4884:3, col:65> Text=" not notified.  The next k_poll() will detect the missed raise."
|   |-ParagraphComment 0x55dc7dcf93c0 <line:4886:3>
|   | `-TextComment 0x55dc7dcf9390 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf93e0 <col:4, line:4887:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcf9490 <line:4886:17, line:4887:3>
|   |   |-TextComment 0x55dc7dcf9440 <line:4886:17, col:31> Text=" A poll signal."
|   |   `-TextComment 0x55dc7dcf9460 <line:4887:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcf94b0 <col:4, col:70> [in] implicitly Param="result" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcf9540 <col:17, col:70>
|   |   `-TextComment 0x55dc7dcf9510 <col:17, col:70> Text=" The value to store in the result field of the signal."
|   |-ParagraphComment 0x55dc7dcf9680 <line:4889:3, line:4891:3>
|   | |-TextComment 0x55dc7dcf9560 <line:4889:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf9580 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf95a0 <col:11, col:51> Text=" 0 The signal was delivered successfully."
|   | |-TextComment 0x55dc7dcf95c0 <line:4890:3> Text=" "
|   | |-InlineCommandComment 0x55dc7dcf95e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55dc7dcf9600 <col:11, col:78> Text=" -EAGAIN The polling thread's timeout is in the process of expiring."
|   | `-TextComment 0x55dc7dcf9620 <line:4891:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf96a0 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x55dc7dcf9710 <line:4892:1>
|     `-TextComment 0x55dc7dcf96e0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc4ed70 <line:4899:1, col:70> col:13 z_handle_obj_poll_events 'void (sys_dlist_t *, u32_t)' extern
| |-ParmVarDecl 0x55dc7dc4ebe8 <col:38, col:51> col:51 events 'sys_dlist_t *'
| |-ParmVarDecl 0x55dc7dc4ec58 <col:59, col:65> col:65 state 'u32_t':'unsigned int'
| `-FullComment 0x55dc7dcf9880 <line:4897:3, col:12>
|   `-ParagraphComment 0x55dc7dcf9850 <col:3, col:12>
|     |-TextComment 0x55dc7dcf9800 <col:3> Text=" "
|     `-InlineCommandComment 0x55dc7dcf9820 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55dc7dc4ef08 <line:4921:1, line:4924:1> line:4921:20 k_cpu_idle 'void (void)' static inline
| |-CompoundStmt 0x55dc7dc4f038 <line:4922:1, line:4924:1>
| | `-CallExpr 0x55dc7dc4efe8 <line:4923:2, col:16> 'void'
| |   `-ImplicitCastExpr 0x55dc7dc4efd0 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
| |     `-DeclRefExpr 0x55dc7dc4efa8 <col:2> 'void (void)' Function 0x55dc7dbc6680 'arch_cpu_idle' 'void (void)'
| `-FullComment 0x55dc7dcf9e80 <line:4904:3, line:4920:1>
|   |-ParagraphComment 0x55dc7dcf9920 <line:4904:3>
|   | `-TextComment 0x55dc7dcf98f0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf9940 <col:4, col:43> Text=" cpu_idle_apis CPU Idling APIs"
|   |-ParagraphComment 0x55dc7dcf99b0 <line:4905:3>
|   | `-TextComment 0x55dc7dcf9980 <col:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf99d0 <col:4, col:24> Text=" kernel_apis"
|   |-ParagraphComment 0x55dc7dcf9a90 <line:4906:3, col:5>
|   | |-TextComment 0x55dc7dcf9a10 <col:3> Text=" "
|   | |-TextComment 0x55dc7dcf9a30 <col:4> Text="@"
|   | `-TextComment 0x55dc7dcf9a50 <col:5> Text="{"
|   |-ParagraphComment 0x55dc7dcf9ae0 <line:4909:3>
|   | `-TextComment 0x55dc7dcf9ab0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf9b00 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf9b60 <col:10, col:28>
|   |   `-TextComment 0x55dc7dcf9b30 <col:10, col:28> Text=" Make the CPU idle."
|   |-ParagraphComment 0x55dc7dcf9bb0 <line:4911:3, col:63>
|   | `-TextComment 0x55dc7dcf9b80 <col:3, col:63> Text=" This function makes the CPU idle until an event wakes it up."
|   |-ParagraphComment 0x55dc7dcf9c70 <line:4913:3, line:4916:59>
|   | |-TextComment 0x55dc7dcf9bd0 <line:4913:3, col:77> Text=" In a regular system, the idle thread should be the only thread responsible"
|   | |-TextComment 0x55dc7dcf9bf0 <line:4914:3, col:71> Text=" for making the CPU idle and triggering any type of power management."
|   | |-TextComment 0x55dc7dcf9c10 <line:4915:3, col:79> Text=" However, in some more constrained systems, such as a single-threaded system,"
|   | `-TextComment 0x55dc7dcf9c30 <line:4916:3, col:59> Text=" the only thread would be responsible for this if needed."
|   |-ParagraphComment 0x55dc7dcf9cc0 <line:4918:3>
|   | `-TextComment 0x55dc7dcf9c90 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf9ce0 <col:4, line:4919:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcf9d60 <line:4918:11, line:4919:3>
|   |   |-TextComment 0x55dc7dcf9d10 <line:4918:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcf9d30 <line:4919:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcf9d80 <col:4, col:23> Text=" K-CPU-IDLE-001"
|   `-ParagraphComment 0x55dc7dcf9df0 <line:4920:1>
|     `-TextComment 0x55dc7dcf9dc0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc4f0f0 <line:4937:1, line:4940:1> line:4937:20 k_cpu_atomic_idle 'void (unsigned int)' static inline
| |-ParmVarDecl 0x55dc7dc4f068 <col:38, col:51> col:51 used key 'unsigned int'
| |-CompoundStmt 0x55dc7dc4f2a8 <line:4938:1, line:4940:1>
| | `-CallExpr 0x55dc7dc4f200 <line:4939:2, col:26> 'void'
| |   |-ImplicitCastExpr 0x55dc7dc4f1e8 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x55dc7dc4f198 <col:2> 'void (unsigned int)' Function 0x55dc7dbc6820 'arch_cpu_atomic_idle' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x55dc7dc4f230 <col:23> 'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x55dc7dc4f1c0 <col:23> 'unsigned int' lvalue ParmVar 0x55dc7dc4f068 'key' 'unsigned int'
| `-FullComment 0x55dc7dcfa300 <line:4927:3, line:4936:1>
|   |-ParagraphComment 0x55dc7dcf9f20 <line:4927:3>
|   | `-TextComment 0x55dc7dcf9ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcf9f40 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dcf9fa0 <col:10, col:49>
|   |   `-TextComment 0x55dc7dcf9f70 <col:10, col:49> Text=" Make the CPU idle in an atomic fashion."
|   |-ParagraphComment 0x55dc7dcfa010 <line:4929:3, line:4930:54>
|   | |-TextComment 0x55dc7dcf9fc0 <line:4929:3, col:75> Text=" Similar to k_cpu_idle(), but called with interrupts locked if operations"
|   | `-TextComment 0x55dc7dcf9fe0 <line:4930:3, col:54> Text=" must be done atomically before making the CPU idle."
|   |-ParagraphComment 0x55dc7dcfa060 <line:4932:3>
|   | `-TextComment 0x55dc7dcfa030 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcfa080 <col:4, col:61> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcfa110 <col:14, col:61>
|   |   `-TextComment 0x55dc7dcfa0e0 <col:14, col:61> Text=" Interrupt locking key obtained from irq_lock()."
|   |-ParagraphComment 0x55dc7dcfa160 <line:4934:3>
|   | `-TextComment 0x55dc7dcfa130 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcfa180 <col:4, line:4935:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcfa200 <line:4934:11, line:4935:3>
|   |   |-TextComment 0x55dc7dcfa1b0 <line:4934:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55dc7dcfa1d0 <line:4935:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcfa220 <col:4, col:23> Text=" K-CPU-IDLE-002"
|   `-ParagraphComment 0x55dc7dcfa290 <line:4936:1>
|     `-TextComment 0x55dc7dcfa260 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc4f3d0 <line:4949:1, col:51> col:13 z_sys_power_save_idle_exit 'void (s32_t)' extern
| |-ParmVarDecl 0x55dc7dc4f2d0 <col:40, col:46> col:46 ticks 's32_t':'int'
| `-FullComment 0x55dc7dcfa3f0 <line:4947:3, col:12>
|   `-ParagraphComment 0x55dc7dcfa3c0 <col:3, col:12>
|     |-TextComment 0x55dc7dcfa370 <col:3> Text=" "
|     `-InlineCommandComment 0x55dc7dcfa390 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55dc7dc4f830 <line:5008:1, line:5010:30> line:5008:13 z_init_thread_base 'void (struct _thread_base *, int, u32_t, unsigned int)' extern
| |-ParmVarDecl 0x55dc7dc4f590 <col:32, col:53> col:53 thread_base 'struct _thread_base *'
| |-ParmVarDecl 0x55dc7dc4f608 <line:5009:10, col:14> col:14 priority 'int'
| |-ParmVarDecl 0x55dc7dc4f678 <col:24, col:30> col:30 initial_state 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55dc7dc4f6f0 <line:5010:10, col:23> col:23 options 'unsigned int'
| `-FullComment 0x55dc7dcfa4e0 <line:5006:3, col:12>
|   `-ParagraphComment 0x55dc7dcfa4b0 <col:3, col:12>
|     |-TextComment 0x55dc7dcfa460 <col:3> Text=" "
|     `-InlineCommandComment 0x55dc7dcfa480 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55dc7dc4f9d8 <line:5027:1, col:39> col:13 z_is_thread_essential 'bool (void)' extern
| `-FullComment 0x55dc7dcfa5d0 <line:5025:3, col:12>
|   `-ParagraphComment 0x55dc7dcfa5a0 <col:3, col:12>
|     |-TextComment 0x55dc7dcfa550 <col:3> Text=" "
|     `-InlineCommandComment 0x55dc7dcfa570 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55dc7dc51f08 <line:5031:1, col:58> col:13 z_timer_expiration_handler 'void (struct _timeout *)' extern
| |-ParmVarDecl 0x55dc7dc51e80 <col:40, col:57> col:57 t 'struct _timeout *'
| `-FullComment 0x55dc7dcfa6c0 <line:5029:3, col:12>
|   `-ParagraphComment 0x55dc7dcfa690 <col:3, col:12>
|     |-TextComment 0x55dc7dcfa640 <col:3> Text=" "
|     `-InlineCommandComment 0x55dc7dcfa660 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55dc7dc52248 <line:5177:1, line:5180:1> line:5177:21 Z_THREAD_STACK_BUFFER 'char *(k_thread_stack_t *)' static inline
| |-ParmVarDecl 0x55dc7dc52138 <col:43, col:61> col:61 used sym 'k_thread_stack_t *'
| |-CompoundStmt 0x55dc7dc523e8 <line:5178:1, line:5180:1>
| | `-ReturnStmt 0x55dc7dc52370 <line:5179:2, col:17>
| |   `-CStyleCastExpr 0x55dc7dc52348 <col:9, col:17> 'char *' <BitCast>
| |     `-ImplicitCastExpr 0x55dc7dc52330 <col:17> 'k_thread_stack_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x55dc7dc522f0 <col:17> 'k_thread_stack_t *' lvalue ParmVar 0x55dc7dc52138 'sym' 'k_thread_stack_t *'
| `-FullComment 0x55dc7dcfab40 <line:5168:3, line:5176:1>
|   |-ParagraphComment 0x55dc7dcfa760 <line:5168:3>
|   | `-TextComment 0x55dc7dcfa730 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcfa780 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x55dc7dcfa7e0 <col:10, col:52>
|   |   `-TextComment 0x55dc7dcfa7b0 <col:10, col:52> Text=" Get a pointer to the physical stack buffer"
|   |-ParagraphComment 0x55dc7dcfa850 <line:5170:3, line:5171:76>
|   | |-TextComment 0x55dc7dcfa800 <line:5170:3, col:72> Text=" This macro is deprecated. If a stack buffer needs to be examined, the"
|   | `-TextComment 0x55dc7dcfa820 <line:5171:3, col:76> Text=" bounds should be obtained from the associated thread's stack_info struct."
|   |-ParagraphComment 0x55dc7dcfa8a0 <line:5173:3>
|   | `-TextComment 0x55dc7dcfa870 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcfa8c0 <col:4, line:5174:3> [in] implicitly Param="sym" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcfa970 <line:5173:14, line:5174:3>
|   |   |-TextComment 0x55dc7dcfa920 <line:5173:14, col:40> Text=" Declared stack symbol name"
|   |   `-TextComment 0x55dc7dcfa940 <line:5174:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcfa990 <col:4, line:5175:3> Name="return"
|   | `-ParagraphComment 0x55dc7dcfaa10 <line:5174:11, line:5175:3>
|   |   |-TextComment 0x55dc7dcfa9c0 <line:5174:11, col:38> Text=" The buffer itself, a char *"
|   |   `-TextComment 0x55dc7dcfa9e0 <line:5175:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcfaa70 <col:4, col:21> Text=" K-TSTACK-001"
|   `-ParagraphComment 0x55dc7dcfaae0 <line:5176:1>
|     `-TextComment 0x55dc7dcfaab0 <col:1> Text=" "
|-RecordDecl 0x55dc7dc52400 prev 0x55dc7dc01668 <line:5207:1, line:5216:1> line:5207:8 struct k_mem_partition definition
| |-FieldDecl 0x55dc7dc524c8 <line:5209:2, col:12> col:12 start 'uintptr_t':'unsigned long'
| | `-FullComment 0x55dc7dcfac10 <line:5208:5, col:39>
| |   `-ParagraphComment 0x55dc7dcfabe0 <col:5, col:39>
| |     `-TextComment 0x55dc7dcfabb0 <col:5, col:39> Text=" start address of memory partition "
| `-FieldDecl 0x55dc7dc52548 <line:5211:2, col:9> col:9 size 'size_t':'unsigned long'
|   `-FullComment 0x55dc7dcface0 <line:5210:5, col:30>
|     `-ParagraphComment 0x55dc7dcfacb0 <col:5, col:30>
|       `-TextComment 0x55dc7dcfac80 <col:5, col:30> Text=" size of memory partition "
|-RecordDecl 0x55dc7dc525b8 prev 0x55dc7dc015e0 <line:5222:1, line:5231:1> line:5222:8 struct k_mem_domain definition
| |-FullComment 0x55dc7dcfae90 <line:5219:3, line:5221:1>
| | |-ParagraphComment 0x55dc7dcfad80 <line:5219:3>
| | | `-TextComment 0x55dc7dcfad50 <col:3> Text=" "
| | |-BlockCommandComment 0x55dc7dcfada0 <col:4, col:23> Name="brief"
| | | `-ParagraphComment 0x55dc7dcfae00 <col:10, col:23>
| | |   `-TextComment 0x55dc7dcfadd0 <col:10, col:23> Text=" Memory Domain"
| | `-ParagraphComment 0x55dc7dcfae50 <line:5221:1>
| |   `-TextComment 0x55dc7dcfae20 <col:1> Text=" "
| |-FieldDecl 0x55dc7dc52678 <line:5228:2, col:14> col:14 mem_domain_q 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x55dc7dcfaf60 <line:5227:5, col:14>
| |   `-ParagraphComment 0x55dc7dcfaf30 <col:5, col:14>
| |     `-TextComment 0x55dc7dcfaf00 <col:5, col:14> Text=" domain q "
| `-FieldDecl 0x55dc7dc526f8 <line:5230:2, col:7> col:7 num_partitions 'u8_t':'unsigned char'
|   `-FullComment 0x55dc7dcfb030 <line:5229:5, col:40>
|     `-ParagraphComment 0x55dc7dcfb000 <col:5, col:40>
|       `-TextComment 0x55dc7dcfafd0 <col:5, col:40> Text=" number of partitions in the domain "
|-FunctionDecl 0x55dc7dc52bd0 <line:5248:1, line:5249:41> line:5248:13 k_mem_domain_init 'void (struct k_mem_domain *, u8_t, struct k_mem_partition **)' extern
| |-ParmVarDecl 0x55dc7dc52820 <col:31, col:52> col:52 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x55dc7dc52890 <col:60, col:65> col:65 num_parts 'u8_t':'unsigned char'
| |-ParmVarDecl 0x55dc7dc52aa0 <line:5249:10, col:40> col:34 parts 'struct k_mem_partition **':'struct k_mem_partition **'
| `-FullComment 0x55dc7dcfb600 <line:5235:3, line:5247:1>
|   |-ParagraphComment 0x55dc7dcfb0d0 <line:5235:3>
|   | `-TextComment 0x55dc7dcfb0a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcfb0f0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55dc7dcfb150 <col:10, col:37>
|   |   `-TextComment 0x55dc7dcfb120 <col:10, col:37> Text=" Initialize a memory domain."
|   |-ParagraphComment 0x55dc7dcfb1a0 <line:5237:3, col:68>
|   | `-TextComment 0x55dc7dcfb170 <col:3, col:68> Text=" Initialize a memory domain with given name and memory partitions."
|   |-ParagraphComment 0x55dc7dcfb210 <line:5239:3, line:5240:25>
|   | |-TextComment 0x55dc7dcfb1c0 <line:5239:3, col:71> Text=" See documentation for k_mem_domain_add_partition() for details about"
|   | `-TextComment 0x55dc7dcfb1e0 <line:5240:3, col:25> Text=" partition constraints."
|   |-ParagraphComment 0x55dc7dcfb260 <line:5242:3>
|   | `-TextComment 0x55dc7dcfb230 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcfb280 <col:4, line:5243:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcfb330 <line:5242:17, line:5243:3>
|   |   |-TextComment 0x55dc7dcfb2e0 <line:5242:17, col:53> Text=" The memory domain to be initialized."
|   |   `-TextComment 0x55dc7dcfb300 <line:5243:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcfb350 <col:4, line:5244:3> [in] implicitly Param="num_parts" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcfb400 <line:5243:20, line:5244:3>
|   |   |-TextComment 0x55dc7dcfb3b0 <line:5243:20, col:67> Text=" The number of array items of "parts" parameter."
|   |   `-TextComment 0x55dc7dcfb3d0 <line:5244:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcfb420 <col:4, line:5246:3> [in] implicitly Param="parts" ParamIndex=2
|   | `-ParagraphComment 0x55dc7dcfb500 <line:5244:16, line:5246:3>
|   |   |-TextComment 0x55dc7dcfb480 <line:5244:16, col:74> Text=" An array of pointers to the memory partitions. Can be NULL"
|   |   |-TextComment 0x55dc7dcfb4a0 <line:5245:3, col:37> Text="              if num_parts is zero."
|   |   `-TextComment 0x55dc7dcfb4c0 <line:5246:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcfb520 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55dc7dcfb590 <line:5247:1>
|     `-TextComment 0x55dc7dcfb560 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc52de0 <line:5258:1, col:61> col:13 k_mem_domain_destroy 'void (struct k_mem_domain *)' extern
| |-ParmVarDecl 0x55dc7dc52ce0 <col:34, col:55> col:55 domain 'struct k_mem_domain *'
| `-FullComment 0x55dc7dcfb980 <line:5251:3, line:5257:1>
|   |-ParagraphComment 0x55dc7dcfb6a0 <line:5251:3>
|   | `-TextComment 0x55dc7dcfb670 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcfb6c0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55dc7dcfb720 <col:10, col:34>
|   |   `-TextComment 0x55dc7dcfb6f0 <col:10, col:34> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x55dc7dcfb770 <line:5253:3, col:27>
|   | `-TextComment 0x55dc7dcfb740 <col:3, col:27> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x55dc7dcfb7c0 <line:5255:3>
|   | `-TextComment 0x55dc7dcfb790 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcfb7e0 <col:4, line:5256:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcfb890 <line:5255:17, line:5256:3>
|   |   |-TextComment 0x55dc7dcfb840 <line:5255:17, col:51> Text=" The memory domain to be destroyed."
|   |   `-TextComment 0x55dc7dcfb860 <line:5256:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcfb8b0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55dc7dcfb920 <line:5257:1>
|     `-TextComment 0x55dc7dcfb8f0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc53710 <line:5284:1, line:5285:39> line:5284:13 k_mem_domain_add_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x55dc7dc53570 <col:40, col:61> col:61 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x55dc7dc535f8 <line:5285:11, col:35> col:35 part 'struct k_mem_partition *'
| `-FullComment 0x55dc7dcfc020 <line:5261:3, line:5283:1>
|   |-ParagraphComment 0x55dc7dcfba20 <line:5261:3>
|   | `-TextComment 0x55dc7dcfb9f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcfba40 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55dc7dcfbaa0 <col:10, col:54>
|   |   `-TextComment 0x55dc7dcfba70 <col:10, col:54> Text=" Add a memory partition into a memory domain."
|   |-ParagraphComment 0x55dc7dcfbb10 <line:5263:3, line:5264:29>
|   | |-TextComment 0x55dc7dcfbac0 <line:5263:3, col:74> Text=" Add a memory partition into a memory domain. Partitions must conform to"
|   | `-TextComment 0x55dc7dcfbae0 <line:5264:3, col:29> Text=" the following constraints:"
|   |-ParagraphComment 0x55dc7dcfbcc0 <line:5266:3, line:5275:28>
|   | |-TextComment 0x55dc7dcfbb30 <line:5266:3, col:71> Text=" - Partition bounds must be within system RAM boundaries on MMU-based"
|   | |-TextComment 0x55dc7dcfbb50 <line:5267:3, col:13> Text="   systems."
|   | |-TextComment 0x55dc7dcfbb70 <line:5268:3, col:69> Text=" - Partitions in the same memory domain may not overlap each other."
|   | |-TextComment 0x55dc7dcfbb90 <line:5269:3, col:63> Text=" - Partitions must not be defined which expose private kernel"
|   | |-TextComment 0x55dc7dcfbbb0 <line:5270:3, col:39> Text="   data structures or kernel objects."
|   | |-TextComment 0x55dc7dcfbbd0 <line:5271:3, col:75> Text=" - The starting address alignment, and the partition size must conform to"
|   | |-TextComment 0x55dc7dcfbbf0 <line:5272:3, col:72> Text="   the constraints of the underlying memory management hardware, which"
|   | |-TextComment 0x55dc7dcfbc10 <line:5273:3, col:29> Text="   varies per architecture."
|   | |-TextComment 0x55dc7dcfbc30 <line:5274:3, col:75> Text=" - Memory domain partitions are only intended to control access to memory"
|   | `-TextComment 0x55dc7dcfbc50 <line:5275:3, col:28> Text="   from user mode threads."
|   |-ParagraphComment 0x55dc7dcfbd30 <line:5277:3, line:5278:12>
|   | |-TextComment 0x55dc7dcfbce0 <line:5277:3, col:70> Text=" Violating these constraints may lead to CPU exceptions or undefined"
|   | `-TextComment 0x55dc7dcfbd00 <line:5278:3, col:12> Text=" behavior."
|   |-ParagraphComment 0x55dc7dcfbd80 <line:5280:3>
|   | `-TextComment 0x55dc7dcfbd50 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcfbda0 <col:4, line:5281:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcfbe50 <line:5280:17, line:5281:3>
|   |   |-TextComment 0x55dc7dcfbe00 <line:5280:17, col:66> Text=" The memory domain to be added a memory partition."
|   |   `-TextComment 0x55dc7dcfbe20 <line:5281:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcfbe70 <col:4, line:5282:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcfbf20 <line:5281:15, line:5282:3>
|   |   |-TextComment 0x55dc7dcfbed0 <line:5281:15, col:47> Text=" The memory partition to be added"
|   |   `-TextComment 0x55dc7dcfbef0 <line:5282:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcfbf40 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55dc7dcfbfb0 <line:5283:1>
|     `-TextComment 0x55dc7dcfbf80 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc53928 <line:5296:1, line:5297:35> line:5296:13 k_mem_domain_remove_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x55dc7dc53810 <col:43, col:64> col:64 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x55dc7dc53898 <line:5297:7, col:31> col:31 part 'struct k_mem_partition *'
| `-FullComment 0x55dc7dcfc470 <line:5288:3, line:5295:1>
|   |-ParagraphComment 0x55dc7dcfc0c0 <line:5288:3>
|   | `-TextComment 0x55dc7dcfc090 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcfc0e0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x55dc7dcfc140 <col:10, col:57>
|   |   `-TextComment 0x55dc7dcfc110 <col:10, col:57> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x55dc7dcfc190 <line:5290:3, col:50>
|   | `-TextComment 0x55dc7dcfc160 <col:3, col:50> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x55dc7dcfc1e0 <line:5292:3>
|   | `-TextComment 0x55dc7dcfc1b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcfc200 <col:4, line:5293:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcfc2b0 <line:5292:17, line:5293:3>
|   |   |-TextComment 0x55dc7dcfc260 <line:5292:17, col:68> Text=" The memory domain to be removed a memory partition."
|   |   `-TextComment 0x55dc7dcfc280 <line:5293:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcfc2d0 <col:4, line:5294:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcfc380 <line:5293:15, line:5294:3>
|   |   |-TextComment 0x55dc7dcfc330 <line:5293:15, col:49> Text=" The memory partition to be removed"
|   |   `-TextComment 0x55dc7dcfc350 <line:5294:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcfc3a0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55dc7dcfc410 <line:5295:1>
|     `-TextComment 0x55dc7dcfc3e0 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc53bb0 <line:5309:1, line:5310:23> line:5309:13 k_mem_domain_add_thread 'void (struct k_mem_domain *, k_tid_t)' extern
| |-ParmVarDecl 0x55dc7dc53a30 <col:37, col:58> col:58 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x55dc7dc53aa0 <line:5310:9, col:17> col:17 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55dc7dcfc900 <line:5300:3, line:5308:1>
|   |-ParagraphComment 0x55dc7dcfc510 <line:5300:3>
|   | `-TextComment 0x55dc7dcfc4e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcfc530 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55dc7dcfc590 <col:10, col:44>
|   |   `-TextComment 0x55dc7dcfc560 <col:10, col:44> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x55dc7dcfc5e0 <line:5302:3, col:37>
|   | `-TextComment 0x55dc7dcfc5b0 <col:3, col:37> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x55dc7dcfc630 <line:5304:3>
|   | `-TextComment 0x55dc7dcfc600 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcfc650 <col:4, line:5305:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcfc700 <line:5304:17, line:5305:3>
|   |   |-TextComment 0x55dc7dcfc6b0 <line:5304:17, col:77> Text=" The memory domain that the thread is going to be added into."
|   |   `-TextComment 0x55dc7dcfc6d0 <line:5305:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcfc720 <col:4, col:71> [in] implicitly Param="thread" ParamIndex=1
|   | `-ParagraphComment 0x55dc7dcfc7b0 <col:17, col:71>
|   |   `-TextComment 0x55dc7dcfc780 <col:17, col:71> Text=" ID of thread going to be added into the memory domain."
|   |-ParagraphComment 0x55dc7dcfc800 <line:5307:3>
|   | `-TextComment 0x55dc7dcfc7d0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcfc820 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55dc7dcfc890 <line:5308:1>
|     `-TextComment 0x55dc7dcfc860 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc53d20 <line:5320:1, col:54> col:13 k_mem_domain_remove_thread 'void (k_tid_t)' extern
| |-ParmVarDecl 0x55dc7dc53c98 <col:40, col:48> col:48 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55dc7dcfcc90 <line:5313:3, line:5319:1>
|   |-ParagraphComment 0x55dc7dcfc9a0 <line:5313:3>
|   | `-TextComment 0x55dc7dcfc970 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcfc9c0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55dc7dcfca20 <col:10, col:49>
|   |   `-TextComment 0x55dc7dcfc9f0 <col:10, col:49> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x55dc7dcfca80 <line:5315:3, col:42>
|   | `-TextComment 0x55dc7dcfca40 <col:3, col:42> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x55dc7dcfcad0 <line:5317:3>
|   | `-TextComment 0x55dc7dcfcaa0 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcfcaf0 <col:4, line:5318:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcfcba0 <line:5317:17, line:5318:3>
|   |   |-TextComment 0x55dc7dcfcb50 <line:5317:17, col:73> Text=" ID of thread going to be removed from its memory domain."
|   |   `-TextComment 0x55dc7dcfcb70 <line:5318:3> Text=" "
|   |-VerbatimLineComment 0x55dc7dcfcbc0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55dc7dcfcc30 <line:5319:1>
|     `-TextComment 0x55dc7dcfcc00 <col:1> Text=" "
|-FunctionDecl 0x55dc7dc53f18 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:5356:54> col:15 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x55dc7dc53e50 <col:31, col:48> col:48 thread 'struct k_thread *'
| `-FullComment 0x55dc7dcfd2b0 <line:5337:3, line:5354:74>
|   |-ParagraphComment 0x55dc7dcfcd30 <line:5337:3>
|   | `-TextComment 0x55dc7dcfcd00 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcfcd50 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x55dc7dcfcdb0 <col:10, col:69>
|   |   `-TextComment 0x55dc7dcfcd80 <col:10, col:69> Text=" Disable preservation of floating point context information."
|   |-ParagraphComment 0x55dc7dcfce20 <line:5339:3, line:5340:56>
|   | |-TextComment 0x55dc7dcfcdd0 <line:5339:3, col:60> Text=" This routine informs the kernel that the specified thread"
|   | `-TextComment 0x55dc7dcfcdf0 <line:5340:3, col:56> Text=" will no longer be using the floating point registers."
|   |-ParagraphComment 0x55dc7dcfce70 <line:5342:3>
|   | `-TextComment 0x55dc7dcfce40 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcfce90 <col:4, line:5344:63> Name="warning"
|   | `-ParagraphComment 0x55dc7dcfcf10 <line:5343:3, line:5344:63>
|   |   |-TextComment 0x55dc7dcfcec0 <line:5343:3, col:73> Text=" Some architectures apply restrictions on how the disabling of floating"
|   |   `-TextComment 0x55dc7dcfcee0 <line:5344:3, col:63> Text=" point preservation may be requested, see arch_float_disable."
|   |-ParagraphComment 0x55dc7dcfcf60 <line:5346:3>
|   | `-TextComment 0x55dc7dcfcf30 <col:3> Text=" "
|   |-BlockCommandComment 0x55dc7dcfcf80 <col:4, line:5348:52> Name="warning"
|   | `-ParagraphComment 0x55dc7dcfd000 <line:5347:3, line:5348:52>
|   |   |-TextComment 0x55dc7dcfcfb0 <line:5347:3, col:73> Text=" This routine should only be used to disable floating point support for"
|   |   `-TextComment 0x55dc7dcfcfd0 <line:5348:3, col:52> Text=" a thread that currently has such support enabled."
|   |-ParagraphComment 0x55dc7dcfd050 <line:5350:3>
|   | `-TextComment 0x55dc7dcfd020 <col:3> Text=" "
|   |-ParamCommandComment 0x55dc7dcfd070 <col:4, col:30> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55dc7dcfd100 <col:17, col:30>
|   |   `-TextComment 0x55dc7dcfd0d0 <col:17, col:30> Text=" ID of thread."
|   `-ParagraphComment 0x55dc7dcfd240 <line:5352:3, line:5354:74>
|     |-TextComment 0x55dc7dcfd120 <line:5352:3> Text=" "
|     |-InlineCommandComment 0x55dc7dcfd140 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55dc7dcfd160 <col:11, col:30> Text=" 0       On success."
|     |-TextComment 0x55dc7dcfd180 <line:5353:3> Text=" "
|     |-InlineCommandComment 0x55dc7dcfd1a0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55dc7dcfd1c0 <col:11, col:70> Text=" -ENOSYS If the floating point disabling is not implemented."
|     `-TextComment 0x55dc7dcfd1e0 <line:5354:3, col:74> Text="         -EINVAL If the floating point disabling could not be performed."
|-FunctionDecl 0x55dc7dc58e80 prev 0x55dc7dc04a80 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:24:1, col:81> col:13 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' extern
| |-ParmVarDecl 0x55dc7dc54360 <col:42, col:49> col:49 object 'void *'
| `-ParmVarDecl 0x55dc7dc543e8 <col:57, col:75> col:75 thread 'struct k_thread *'
|-FunctionDecl 0x55dc7dc59060 prev 0x55dc7dc06bb0 <line:25:1, line:35:1> line:25:20 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x55dc7dc58f48 <col:42, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x55dc7dc58fd0 <col:57, col:75> col:75 used thread 'struct k_thread *'
| `-CompoundStmt 0x55dc7dc59368 <line:26:1, line:35:1>
|   |-DoStmt 0x55dc7dc591f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc591b8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc59168 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc591d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc59300 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:34:2, col:45> 'void'
|     |-ImplicitCastExpr 0x55dc7dc592e8 <col:2> 'void (*)(void *, struct k_thread *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc59210 <col:2> 'void (void *, struct k_thread *)' Function 0x55dc7dc58e80 'z_impl_k_object_access_grant' 'void (void *, struct k_thread *)'
|     |-ImplicitCastExpr 0x55dc7dc59338 <col:31> 'void *' <LValueToRValue>
|     | `-DeclRefExpr 0x55dc7dc59238 <col:31> 'void *' lvalue ParmVar 0x55dc7dc58f48 'object' 'void *'
|     `-ImplicitCastExpr 0x55dc7dc59350 <col:39> 'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc59260 <col:39> 'struct k_thread *' lvalue ParmVar 0x55dc7dc58fd0 'thread' 'struct k_thread *'
|-FunctionDecl 0x55dc7dc59428 prev 0x55dc7dc066a8 <line:38:1, col:50> col:13 used z_impl_k_object_release 'void (void *)' extern
| `-ParmVarDecl 0x55dc7dc593a0 <col:37, col:44> col:44 object 'void *'
|-FunctionDecl 0x55dc7dc59570 prev 0x55dc7dc06f38 <line:39:1, line:49:1> line:39:20 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x55dc7dc594e8 <col:37, col:44> col:44 used object 'void *'
| `-CompoundStmt 0x55dc7dc597c8 <line:40:1, line:49:1>
|   |-DoStmt 0x55dc7dc596f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc596c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc59670 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc596d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc59780 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:48:2, col:32> 'void'
|     |-ImplicitCastExpr 0x55dc7dc59768 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc59718 <col:2> 'void (void *)' Function 0x55dc7dc59428 'z_impl_k_object_release' 'void (void *)'
|     `-ImplicitCastExpr 0x55dc7dc597b0 <col:26> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc59740 <col:26> 'void *' lvalue ParmVar 0x55dc7dc594e8 'object' 'void *'
|-FunctionDecl 0x55dc7dc59898 prev 0x55dc7dc07458 <line:52:1, col:57> col:15 used z_impl_k_object_alloc 'void *(enum k_objects)' extern
| `-ParmVarDecl 0x55dc7dc59808 <col:37, col:52> col:52 otype 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x55dc7dc599f0 prev 0x55dc7dc07300 <line:53:1, line:62:1> line:53:22 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x55dc7dc59960 <col:37, col:52> col:52 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x55dc7dc59cc0 <line:54:1, line:62:1>
|   |-DoStmt 0x55dc7dc59b78 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc59b40 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc59af0 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc59b58 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc59ca8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:61:2, col:36>
|     `-CallExpr 0x55dc7dc59c60 <col:9, col:36> 'void *'
|       |-ImplicitCastExpr 0x55dc7dc59c48 <col:9> 'void *(*)(enum k_objects)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc59b98 <col:9> 'void *(enum k_objects)' Function 0x55dc7dc59898 'z_impl_k_object_alloc' 'void *(enum k_objects)'
|       `-ImplicitCastExpr 0x55dc7dc59c90 <col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc59bc0 <col:31> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x55dc7dc59960 'otype' 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x55dc7dc5a220 <line:65:1, col:207> col:16 used z_impl_k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc59d08 <col:39, col:57> col:57 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x55dc7dc59d78 <col:69, col:88> col:88 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55dc7dc59de8 <col:95, col:102> col:102 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc59e90 <col:114, col:131> col:131 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x55dc7dc59f08 <col:138, col:145> col:145 p1 'void *'
| |-ParmVarDecl 0x55dc7dc59f80 <col:149, col:156> col:156 p2 'void *'
| |-ParmVarDecl 0x55dc7dc59ff8 <col:160, col:167> col:167 p3 'void *'
| |-ParmVarDecl 0x55dc7dc5a070 <col:171, col:175> col:175 prio 'int'
| |-ParmVarDecl 0x55dc7dc5a0e0 <col:181, col:187> col:187 options 'u32_t':'unsigned int'
| `-ParmVarDecl 0x55dc7dc5a150 <col:196, col:202> col:202 delay 's32_t':'int'
|-FunctionDecl 0x55dc7dc5a818 prev 0x55dc7dc0bd50 <line:66:1, line:82:1> line:66:23 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc5a338 <col:39, col:57> col:57 used new_thread 'struct k_thread *'
| |-ParmVarDecl 0x55dc7dc5a3a8 <col:69, col:88> col:88 used stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55dc7dc5a418 <col:95, col:102> col:102 used stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc5a488 <col:114, col:131> col:131 used entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x55dc7dc5a500 <col:138, col:145> col:145 used p1 'void *'
| |-ParmVarDecl 0x55dc7dc5a578 <col:149, col:156> col:156 used p2 'void *'
| |-ParmVarDecl 0x55dc7dc5a5f0 <col:160, col:167> col:167 used p3 'void *'
| |-ParmVarDecl 0x55dc7dc5a668 <col:171, col:175> col:175 used prio 'int'
| |-ParmVarDecl 0x55dc7dc5a6d8 <col:181, col:187> col:187 used options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55dc7dc5a748 <col:196, col:202> col:202 used delay 's32_t':'int'
| `-CompoundStmt 0x55dc7dc5adb0 <line:67:1, line:82:1>
|   |-DoStmt 0x55dc7dc5a9e8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5a9b0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5a960 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5a9c8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc5ad98 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:81:2, col:102>
|     `-CallExpr 0x55dc7dc5ac30 <col:9, col:102> 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x55dc7dc5ac18 <col:9> 'k_tid_t (*)(struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc5aa08 <col:9> 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' Function 0x55dc7dc5a220 'z_impl_k_thread_create' 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)'
|       |-ImplicitCastExpr 0x55dc7dc5aca8 <col:32> 'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc5aa30 <col:32> 'struct k_thread *' lvalue ParmVar 0x55dc7dc5a338 'new_thread' 'struct k_thread *'
|       |-ImplicitCastExpr 0x55dc7dc5acc0 <col:44> 'k_thread_stack_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc5aa58 <col:44> 'k_thread_stack_t *' lvalue ParmVar 0x55dc7dc5a3a8 'stack' 'k_thread_stack_t *'
|       |-ImplicitCastExpr 0x55dc7dc5acd8 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc5aa80 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x55dc7dc5a418 'stack_size' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x55dc7dc5acf0 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc5aaa8 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' lvalue ParmVar 0x55dc7dc5a488 'entry' 'k_thread_entry_t':'void (*)(void *, void *, void *)'
|       |-ImplicitCastExpr 0x55dc7dc5ad08 <col:70> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc5aad0 <col:70> 'void *' lvalue ParmVar 0x55dc7dc5a500 'p1' 'void *'
|       |-ImplicitCastExpr 0x55dc7dc5ad20 <col:74> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc5aaf8 <col:74> 'void *' lvalue ParmVar 0x55dc7dc5a578 'p2' 'void *'
|       |-ImplicitCastExpr 0x55dc7dc5ad38 <col:78> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc5ab20 <col:78> 'void *' lvalue ParmVar 0x55dc7dc5a5f0 'p3' 'void *'
|       |-ImplicitCastExpr 0x55dc7dc5ad50 <col:82> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc5ab48 <col:82> 'int' lvalue ParmVar 0x55dc7dc5a668 'prio' 'int'
|       |-ImplicitCastExpr 0x55dc7dc5ad68 <col:88> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc5ab70 <col:88> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dc5a6d8 'options' 'u32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55dc7dc5ad80 <col:97> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc5ab98 <col:97> 's32_t':'int' lvalue ParmVar 0x55dc7dc5a748 'delay' 's32_t':'int'
|-FunctionDecl 0x55dc7dc5aea0 <line:85:1, col:37> col:14 used z_impl_k_sleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x55dc7dc5ade0 <col:29, col:35> col:35 ms 's32_t':'int'
|-FunctionDecl 0x55dc7dc5afe0 prev 0x55dc7dc0f7e0 <line:86:1, line:95:1> line:86:21 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc5af58 <col:29, col:35> col:35 used ms 's32_t':'int'
| `-CompoundStmt 0x55dc7dc5b2b0 <line:87:1, line:95:1>
|   |-DoStmt 0x55dc7dc5b168 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5b130 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5b0e0 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5b148 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc5b298 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:94:2, col:26>
|     `-CallExpr 0x55dc7dc5b250 <col:9, col:26> 's32_t':'int'
|       |-ImplicitCastExpr 0x55dc7dc5b238 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc5b188 <col:9> 's32_t (s32_t)' Function 0x55dc7dc5aea0 'z_impl_k_sleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x55dc7dc5b280 <col:24> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc5b1b0 <col:24> 's32_t':'int' lvalue ParmVar 0x55dc7dc5af58 'ms' 's32_t':'int'
|-FunctionDecl 0x55dc7dc5b368 <line:98:1, col:38> col:14 used z_impl_k_usleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x55dc7dc5b2e0 <col:30, col:36> col:36 us 's32_t':'int'
|-FunctionDecl 0x55dc7dc5b4a8 prev 0x55dc7dc0f950 <line:99:1, line:108:1> line:99:21 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc5b420 <col:30, col:36> col:36 used us 's32_t':'int'
| `-CompoundStmt 0x55dc7dc5b718 <line:100:1, line:108:1>
|   |-DoStmt 0x55dc7dc5b630 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5b5f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5b5a8 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5b610 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc5b700 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:107:2, col:27>
|     `-CallExpr 0x55dc7dc5b6b8 <col:9, col:27> 's32_t':'int'
|       |-ImplicitCastExpr 0x55dc7dc5b6a0 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc5b650 <col:9> 's32_t (s32_t)' Function 0x55dc7dc5b368 'z_impl_k_usleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x55dc7dc5b6e8 <col:25> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc5b678 <col:25> 's32_t':'int' lvalue ParmVar 0x55dc7dc5b420 'us' 's32_t':'int'
|-FunctionDecl 0x55dc7dc5b7d0 <line:111:1, col:50> col:13 used z_impl_k_busy_wait 'void (u32_t)' extern
| `-ParmVarDecl 0x55dc7dc5b748 <col:32, col:38> col:38 usec_to_wait 'u32_t':'unsigned int'
|-FunctionDecl 0x55dc7dc5b910 prev 0x55dc7dc0fb00 <line:112:1, line:122:1> line:112:20 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x55dc7dc5b888 <col:32, col:38> col:38 used usec_to_wait 'u32_t':'unsigned int'
| `-CompoundStmt 0x55dc7dc5bb98 <line:113:1, line:122:1>
|   |-DoStmt 0x55dc7dc5ba98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5ba60 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5ba10 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5ba78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc5bb50 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:121:2, col:33> 'void'
|     |-ImplicitCastExpr 0x55dc7dc5bb38 <col:2> 'void (*)(u32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc5bab8 <col:2> 'void (u32_t)' Function 0x55dc7dc5b7d0 'z_impl_k_busy_wait' 'void (u32_t)'
|     `-ImplicitCastExpr 0x55dc7dc5bb80 <col:21> 'u32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc5bae0 <col:21> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dc5b888 'usec_to_wait' 'u32_t':'unsigned int'
|-FunctionDecl 0x55dc7dc5bbd8 <line:125:1, col:28> col:13 used z_impl_k_yield 'void ()' extern
|-FunctionDecl 0x55dc7dc5bc98 prev 0x55dc7dc0fc68 <line:126:1, line:136:1> line:126:20 k_yield 'void (void)' static inline
| `-CompoundStmt 0x55dc7dc5bed8 <line:127:1, line:136:1>
|   |-DoStmt 0x55dc7dc5be18 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5bde0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5bd90 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5bdf8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc5beb0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:135:2, col:17> 'void'
|     `-ImplicitCastExpr 0x55dc7dc5be88 <col:2> 'void (*)()' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x55dc7dc5be38 <col:2> 'void ()' Function 0x55dc7dc5bbd8 'z_impl_k_yield' 'void ()'
|-FunctionDecl 0x55dc7dc5bf90 <line:139:1, col:43> col:13 used z_impl_k_wakeup 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55dc7dc5bf08 <col:29, col:37> col:37 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55dc7dc5c0d0 prev 0x55dc7dc0fe50 <line:140:1, line:150:1> line:140:20 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55dc7dc5c048 <col:29, col:37> col:37 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55dc7dc5c388 <line:141:1, line:150:1>
|   |-DoStmt 0x55dc7dc5c258 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5c220 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5c1d0 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5c238 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc5c340 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:149:2, col:24> 'void'
|     |-ImplicitCastExpr 0x55dc7dc5c328 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc5c278 <col:2> 'void (k_tid_t)' Function 0x55dc7dc5bf90 'z_impl_k_wakeup' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55dc7dc5c370 <col:18> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc5c2a0 <col:18> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55dc7dc5c048 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55dc7dc5c428 <line:153:1, col:37> col:16 used z_impl_k_current_get 'k_tid_t ()' extern
|-FunctionDecl 0x55dc7dc5c4e8 prev 0x55dc7dc10040 <line:154:1, line:163:1> line:154:23 k_current_get 'k_tid_t (void)' static inline
| `-CompoundStmt 0x55dc7dc5c760 <line:155:1, line:163:1>
|   |-DoStmt 0x55dc7dc5c668 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5c630 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5c5e0 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5c648 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc5c748 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:162:2, col:30>
|     `-CallExpr 0x55dc7dc5c720 <col:9, col:30> 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x55dc7dc5c708 <col:9> 'k_tid_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55dc7dc5c688 <col:9> 'k_tid_t ()' Function 0x55dc7dc5c428 'z_impl_k_current_get' 'k_tid_t ()'
|-FunctionDecl 0x55dc7dc5c818 <line:166:1, col:49> col:13 used z_impl_k_thread_abort 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55dc7dc5c790 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55dc7dc5c958 prev 0x55dc7dc101a0 <line:167:1, line:177:1> line:167:20 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55dc7dc5c8d0 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55dc7dc5cbb0 <line:168:1, line:177:1>
|   |-DoStmt 0x55dc7dc5cae0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5caa8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5ca58 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5cac0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc5cb68 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:176:2, col:30> 'void'
|     |-ImplicitCastExpr 0x55dc7dc5cb50 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc5cb00 <col:2> 'void (k_tid_t)' Function 0x55dc7dc5c818 'z_impl_k_thread_abort' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55dc7dc5cb98 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc5cb28 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55dc7dc5c8d0 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55dc7dc5cc68 <line:180:1, col:49> col:13 used z_impl_k_thread_start 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55dc7dc5cbe0 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55dc7dc5cda8 prev 0x55dc7dc10310 <line:181:1, line:191:1> line:181:20 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55dc7dc5cd20 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55dc7dc5d018 <line:182:1, line:191:1>
|   |-DoStmt 0x55dc7dc5cf48 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5cf10 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5cec0 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5cf28 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc5cfd0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:190:2, col:30> 'void'
|     |-ImplicitCastExpr 0x55dc7dc5cfb8 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc5cf68 <col:2> 'void (k_tid_t)' Function 0x55dc7dc5cc68 'z_impl_k_thread_start' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55dc7dc5d000 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc5cf90 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55dc7dc5cd20 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55dc7dc5d0d8 <line:194:1, col:55> col:12 used z_impl_k_thread_priority_get 'int (k_tid_t)' extern
| `-ParmVarDecl 0x55dc7dc5d048 <col:41, col:49> col:49 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55dc7dc5d220 prev 0x55dc7dc10b38 <line:195:1, line:204:1> line:195:19 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x55dc7dc5d190 <col:41, col:49> col:49 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55dc7dc5d4f0 <line:196:1, line:204:1>
|   |-DoStmt 0x55dc7dc5d3a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5d370 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5d320 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5d388 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc5d4d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:203:2, col:44>
|     `-CallExpr 0x55dc7dc5d490 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x55dc7dc5d478 <col:9> 'int (*)(k_tid_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc5d3c8 <col:9> 'int (k_tid_t)' Function 0x55dc7dc5d0d8 'z_impl_k_thread_priority_get' 'int (k_tid_t)'
|       `-ImplicitCastExpr 0x55dc7dc5d4c0 <col:38> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc5d3f0 <col:38> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55dc7dc5d190 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55dc7dc5d628 <line:207:1, col:66> col:13 used z_impl_k_thread_priority_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x55dc7dc5d520 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x55dc7dc5d598 <col:58, col:62> col:62 prio 'int'
|-FunctionDecl 0x55dc7dc5d7f0 prev 0x55dc7dc10da0 <line:208:1, line:218:1> line:208:20 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x55dc7dc5d6e8 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55dc7dc5d760 <col:58, col:62> col:62 used prio 'int'
| `-CompoundStmt 0x55dc7dc5daf8 <line:209:1, line:218:1>
|   |-DoStmt 0x55dc7dc5d980 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5d948 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5d8f8 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5d960 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc5da90 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:217:2, col:43> 'void'
|     |-ImplicitCastExpr 0x55dc7dc5da78 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc5d9a0 <col:2> 'void (k_tid_t, int)' Function 0x55dc7dc5d628 'z_impl_k_thread_priority_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x55dc7dc5dac8 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x55dc7dc5d9c8 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55dc7dc5d6e8 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x55dc7dc5dae0 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc5d9f0 <col:39> 'int' lvalue ParmVar 0x55dc7dc5d760 'prio' 'int'
|-FunctionDecl 0x55dc7dc5dc30 <line:221:1, col:70> col:13 used z_impl_k_thread_deadline_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x55dc7dc5db28 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x55dc7dc5dba0 <col:58, col:62> col:62 deadline 'int'
|-FunctionDecl 0x55dc7dc5ddf8 <line:222:1, line:232:1> line:222:20 k_thread_deadline_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x55dc7dc5dcf0 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55dc7dc5dd68 <col:58, col:62> col:62 used deadline 'int'
| `-CompoundStmt 0x55dc7dc5e0c8 <line:223:1, line:232:1>
|   |-DoStmt 0x55dc7dc5dfb0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5df78 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5df28 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5df90 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc5e060 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:231:2, col:47> 'void'
|     |-ImplicitCastExpr 0x55dc7dc5e048 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc5dfd0 <col:2> 'void (k_tid_t, int)' Function 0x55dc7dc5dc30 'z_impl_k_thread_deadline_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x55dc7dc5e098 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x55dc7dc5dff8 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55dc7dc5dcf0 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x55dc7dc5e0b0 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc5e020 <col:39> 'int' lvalue ParmVar 0x55dc7dc5dd68 'deadline' 'int'
|-FunctionDecl 0x55dc7dc5e180 <line:235:1, col:51> col:13 used z_impl_k_thread_suspend 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55dc7dc5e0f8 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55dc7dc5e2c0 prev 0x55dc7dc11620 <line:236:1, line:246:1> line:236:20 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55dc7dc5e238 <col:37, col:45> col:45 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55dc7dc5e518 <line:237:1, line:246:1>
|   |-DoStmt 0x55dc7dc5e448 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5e410 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5e3c0 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5e428 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc5e4d0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:245:2, col:32> 'void'
|     |-ImplicitCastExpr 0x55dc7dc5e4b8 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc5e468 <col:2> 'void (k_tid_t)' Function 0x55dc7dc5e180 'z_impl_k_thread_suspend' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55dc7dc5e500 <col:26> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc5e490 <col:26> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55dc7dc5e238 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55dc7dc5e5d0 <line:249:1, col:50> col:13 used z_impl_k_thread_resume 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55dc7dc5e548 <col:36, col:44> col:44 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55dc7dc5e710 prev 0x55dc7dc11790 <line:250:1, line:260:1> line:250:20 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55dc7dc5e688 <col:36, col:44> col:44 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55dc7dc5e968 <line:251:1, line:260:1>
|   |-DoStmt 0x55dc7dc5e898 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5e860 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5e810 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5e878 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc5e920 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:259:2, col:31> 'void'
|     |-ImplicitCastExpr 0x55dc7dc5e908 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc5e8b8 <col:2> 'void (k_tid_t)' Function 0x55dc7dc5e5d0 'z_impl_k_thread_resume' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55dc7dc5e950 <col:25> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc5e8e0 <col:25> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55dc7dc5e688 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55dc7dc5e9e0 <line:263:1, col:39> col:12 used z_impl_k_is_preempt_thread 'int ()' extern
|-FunctionDecl 0x55dc7dc5eaa8 prev 0x55dc7dc11d30 <line:264:1, line:273:1> line:264:19 k_is_preempt_thread 'int (void)' static inline
| `-CompoundStmt 0x55dc7dc5ecf0 <line:265:1, line:273:1>
|   |-DoStmt 0x55dc7dc5ec28 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5ebf0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5eba0 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5ec08 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc5ecd8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:272:2, col:36>
|     `-CallExpr 0x55dc7dc5ecb0 <col:9, col:36> 'int'
|       `-ImplicitCastExpr 0x55dc7dc5ec98 <col:9> 'int (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55dc7dc5ec48 <col:9> 'int ()' Function 0x55dc7dc5e9e0 'z_impl_k_is_preempt_thread' 'int ()'
|-FunctionDecl 0x55dc7dc5edb0 <line:276:1, col:57> col:13 used z_impl_k_thread_custom_data_set 'void (void *)' extern
| `-ParmVarDecl 0x55dc7dc5ed28 <col:45, col:52> col:52 value 'void *'
|-FunctionDecl 0x55dc7dc5ef08 prev 0x55dc7dc12458 <line:277:1, line:287:1> line:277:20 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x55dc7dc5ee70 <col:45, col:52> col:52 used value 'void *'
| `-CompoundStmt 0x55dc7dc5f160 <line:278:1, line:287:1>
|   |-DoStmt 0x55dc7dc5f090 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5f058 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5f008 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5f070 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc5f118 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:286:2, col:39> 'void'
|     |-ImplicitCastExpr 0x55dc7dc5f100 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc5f0b0 <col:2> 'void (void *)' Function 0x55dc7dc5edb0 'z_impl_k_thread_custom_data_set' 'void (void *)'
|     `-ImplicitCastExpr 0x55dc7dc5f148 <col:34> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc5f0d8 <col:34> 'void *' lvalue ParmVar 0x55dc7dc5ee70 'value' 'void *'
|-FunctionDecl 0x55dc7dc5f1d0 <line:290:1, col:47> col:15 used z_impl_k_thread_custom_data_get 'void *()' extern
|-FunctionDecl 0x55dc7dc5f298 prev 0x55dc7dc12630 <line:291:1, line:300:1> line:291:22 k_thread_custom_data_get 'void *(void)' static inline
| `-CompoundStmt 0x55dc7dc5f4e0 <line:292:1, line:300:1>
|   |-DoStmt 0x55dc7dc5f418 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5f3e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5f390 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5f3f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc5f4c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:299:2, col:41>
|     `-CallExpr 0x55dc7dc5f4a0 <col:9, col:41> 'void *'
|       `-ImplicitCastExpr 0x55dc7dc5f488 <col:9> 'void *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55dc7dc5f438 <col:9> 'void *()' Function 0x55dc7dc5f1d0 'z_impl_k_thread_custom_data_get' 'void *()'
|-FunctionDecl 0x55dc7dc5f620 <line:303:1, col:74> col:12 used z_impl_k_thread_name_set 'int (k_tid_t, const char *)' extern
| |-ParmVarDecl 0x55dc7dc5f510 <col:37, col:45> col:45 thread_id 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x55dc7dc5f588 <col:56, col:69> col:69 value 'const char *'
|-FunctionDecl 0x55dc7dc5f7f0 prev 0x55dc7dc12898 <line:304:1, line:313:1> line:304:19 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x55dc7dc5f6e0 <col:37, col:45> col:45 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55dc7dc5f758 <col:56, col:69> col:69 used value 'const char *'
| `-CompoundStmt 0x55dc7dc5fb10 <line:305:1, line:313:1>
|   |-DoStmt 0x55dc7dc5f980 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc5f948 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc5f8f8 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc5f960 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc5faf8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:312:2, col:50>
|     `-CallExpr 0x55dc7dc5fa90 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x55dc7dc5fa78 <col:9> 'int (*)(k_tid_t, const char *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc5f9a0 <col:9> 'int (k_tid_t, const char *)' Function 0x55dc7dc5f620 'z_impl_k_thread_name_set' 'int (k_tid_t, const char *)'
|       |-ImplicitCastExpr 0x55dc7dc5fac8 <col:34> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc5f9c8 <col:34> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55dc7dc5f6e0 'thread_id' 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x55dc7dc5fae0 <col:45> 'const char *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc5f9f0 <col:45> 'const char *' lvalue ParmVar 0x55dc7dc5f758 'value' 'const char *'
|-FunctionDecl 0x55dc7dc5fcc8 <line:316:1, col:80> col:12 used z_impl_k_thread_name_copy 'int (k_tid_t, char *, size_t)' extern
| |-ParmVarDecl 0x55dc7dc5fb40 <col:38, col:46> col:46 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55dc7dc5fbb8 <col:57, col:64> col:64 buf 'char *'
| `-ParmVarDecl 0x55dc7dc5fc28 <col:69, col:76> col:76 size 'size_t':'unsigned long'
|-FunctionDecl 0x55dc7dc5ff30 prev 0x55dc7dc12d98 <line:317:1, line:326:1> line:317:19 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x55dc7dc5fd90 <col:38, col:46> col:46 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55dc7dc5fe08 <col:57, col:64> col:64 used buf 'char *'
| |-ParmVarDecl 0x55dc7dc5fe78 <col:69, col:76> col:76 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x55dc7dc602a0 <line:318:1, line:326:1>
|   |-DoStmt 0x55dc7dc600c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc60090 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc60040 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc600a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc60288 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:325:2, col:55>
|     `-CallExpr 0x55dc7dc60200 <col:9, col:55> 'int'
|       |-ImplicitCastExpr 0x55dc7dc601e8 <col:9> 'int (*)(k_tid_t, char *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc600e8 <col:9> 'int (k_tid_t, char *, size_t)' Function 0x55dc7dc5fcc8 'z_impl_k_thread_name_copy' 'int (k_tid_t, char *, size_t)'
|       |-ImplicitCastExpr 0x55dc7dc60240 <col:35> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc60110 <col:35> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55dc7dc5fd90 'thread_id' 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x55dc7dc60258 <col:46> 'char *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc60138 <col:46> 'char *' lvalue ParmVar 0x55dc7dc5fe08 'buf' 'char *'
|       `-ImplicitCastExpr 0x55dc7dc60270 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc60160 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x55dc7dc5fe78 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x55dc7dc60460 <line:329:1, col:86> col:13 used z_impl_k_timer_start 'void (struct k_timer *, s32_t, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc602e8 <col:34, col:51> col:51 timer 'struct k_timer *'
| |-ParmVarDecl 0x55dc7dc60358 <col:58, col:64> col:64 duration 's32_t':'int'
| `-ParmVarDecl 0x55dc7dc603c8 <col:74, col:80> col:80 period 's32_t':'int'
|-FunctionDecl 0x55dc7dc606b8 prev 0x55dc7dc16210 <line:330:1, line:340:1> line:330:20 k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc60540 <col:34, col:51> col:51 used timer 'struct k_timer *'
| |-ParmVarDecl 0x55dc7dc605b0 <col:58, col:64> col:64 used duration 's32_t':'int'
| |-ParmVarDecl 0x55dc7dc60620 <col:74, col:80> col:80 used period 's32_t':'int'
| `-CompoundStmt 0x55dc7dc60a08 <line:331:1, line:340:1>
|   |-DoStmt 0x55dc7dc60850 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc60818 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc607c8 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc60830 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc60980 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:339:2, col:46> 'void'
|     |-ImplicitCastExpr 0x55dc7dc60968 <col:2> 'void (*)(struct k_timer *, s32_t, s32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc60870 <col:2> 'void (struct k_timer *, s32_t, s32_t)' Function 0x55dc7dc60460 'z_impl_k_timer_start' 'void (struct k_timer *, s32_t, s32_t)'
|     |-ImplicitCastExpr 0x55dc7dc609c0 <col:23> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x55dc7dc60898 <col:23> 'struct k_timer *' lvalue ParmVar 0x55dc7dc60540 'timer' 'struct k_timer *'
|     |-ImplicitCastExpr 0x55dc7dc609d8 <col:30> 's32_t':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55dc7dc608c0 <col:30> 's32_t':'int' lvalue ParmVar 0x55dc7dc605b0 'duration' 's32_t':'int'
|     `-ImplicitCastExpr 0x55dc7dc609f0 <col:40> 's32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc608e8 <col:40> 's32_t':'int' lvalue ParmVar 0x55dc7dc60620 'period' 's32_t':'int'
|-FunctionDecl 0x55dc7dc60ad8 <line:343:1, col:55> col:13 used z_impl_k_timer_stop 'void (struct k_timer *)' extern
| `-ParmVarDecl 0x55dc7dc60a50 <col:33, col:50> col:50 timer 'struct k_timer *'
|-FunctionDecl 0x55dc7dc60c30 prev 0x55dc7dc163a8 <line:344:1, line:354:1> line:344:20 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x55dc7dc60ba8 <col:33, col:50> col:50 used timer 'struct k_timer *'
| `-CompoundStmt 0x55dc7dc60eb8 <line:345:1, line:354:1>
|   |-DoStmt 0x55dc7dc60db8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc60d80 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc60d30 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc60d98 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc60e70 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:353:2, col:27> 'void'
|     |-ImplicitCastExpr 0x55dc7dc60e58 <col:2> 'void (*)(struct k_timer *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc60dd8 <col:2> 'void (struct k_timer *)' Function 0x55dc7dc60ad8 'z_impl_k_timer_stop' 'void (struct k_timer *)'
|     `-ImplicitCastExpr 0x55dc7dc60ea0 <col:22> 'struct k_timer *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc60e00 <col:22> 'struct k_timer *' lvalue ParmVar 0x55dc7dc60ba8 'timer' 'struct k_timer *'
|-FunctionDecl 0x55dc7dc617c0 <line:357:1, col:62> col:14 used z_impl_k_timer_status_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x55dc7dc61738 <col:40, col:57> col:57 timer 'struct k_timer *'
|-FunctionDecl 0x55dc7dc61918 prev 0x55dc7dc165a0 <line:358:1, line:367:1> line:358:21 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55dc7dc61890 <col:40, col:57> col:57 used timer 'struct k_timer *'
| `-CompoundStmt 0x55dc7dc61be0 <line:359:1, line:367:1>
|   |-DoStmt 0x55dc7dc61aa0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc61a68 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc61a18 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc61a80 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc61bc8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:366:2, col:40>
|     `-CallExpr 0x55dc7dc61b80 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55dc7dc61b68 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc61ac0 <col:9> 'u32_t (struct k_timer *)' Function 0x55dc7dc617c0 'z_impl_k_timer_status_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x55dc7dc61bb0 <col:35> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc61ae8 <col:35> 'struct k_timer *' lvalue ParmVar 0x55dc7dc61890 'timer' 'struct k_timer *'
|-FunctionDecl 0x55dc7dc61cb0 <line:370:1, col:63> col:14 used z_impl_k_timer_status_sync 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x55dc7dc61c28 <col:41, col:58> col:58 timer 'struct k_timer *'
|-FunctionDecl 0x55dc7dc61e08 prev 0x55dc7dc16f98 <line:371:1, line:380:1> line:371:21 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55dc7dc61d80 <col:41, col:58> col:58 used timer 'struct k_timer *'
| `-CompoundStmt 0x55dc7dc62078 <line:372:1, line:380:1>
|   |-DoStmt 0x55dc7dc61f90 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc61f58 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc61f08 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc61f70 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc62060 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:379:2, col:41>
|     `-CallExpr 0x55dc7dc62018 <col:9, col:41> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55dc7dc62000 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc61fb0 <col:9> 'u32_t (struct k_timer *)' Function 0x55dc7dc61cb0 'z_impl_k_timer_status_sync' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x55dc7dc62048 <col:36> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc61fd8 <col:36> 'struct k_timer *' lvalue ParmVar 0x55dc7dc61d80 'timer' 'struct k_timer *'
|-FunctionDecl 0x55dc7dc62148 prev 0x55dc7dc17450 <line:383:1, col:65> col:14 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x55dc7dc620c0 <col:43, col:60> col:60 timer 'struct k_timer *'
|-FunctionDecl 0x55dc7dc622a0 prev 0x55dc7dc172f8 <line:384:1, line:393:1> line:384:21 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55dc7dc62218 <col:43, col:60> col:60 used timer 'struct k_timer *'
| `-CompoundStmt 0x55dc7dc62510 <line:385:1, line:393:1>
|   |-DoStmt 0x55dc7dc62428 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc623f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc623a0 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc62408 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc624f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:392:2, col:43>
|     `-CallExpr 0x55dc7dc624b0 <col:9, col:43> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55dc7dc62498 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc62448 <col:9> 'u32_t (struct k_timer *)' Function 0x55dc7dc62148 'z_impl_k_timer_remaining_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x55dc7dc624e0 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc62470 <col:38> 'struct k_timer *' lvalue ParmVar 0x55dc7dc62218 'timer' 'struct k_timer *'
|-FunctionDecl 0x55dc7dc62660 prev 0x55dc7dc17db8 <line:396:1, col:82> col:13 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' extern
| |-ParmVarDecl 0x55dc7dc62558 <col:42, col:59> col:59 timer 'struct k_timer *'
| `-ParmVarDecl 0x55dc7dc625d0 <col:66, col:73> col:73 user_data 'void *'
|-FunctionDecl 0x55dc7dc62850 prev 0x55dc7dc17bb0 <line:397:1, line:407:1> line:397:20 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x55dc7dc62748 <col:42, col:59> col:59 used timer 'struct k_timer *'
| |-ParmVarDecl 0x55dc7dc627c0 <col:66, col:73> col:73 used user_data 'void *'
| `-CompoundStmt 0x55dc7dc62b58 <line:398:1, line:407:1>
|   |-DoStmt 0x55dc7dc629e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc629a8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc62958 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc629c0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc62af0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:406:2, col:47> 'void'
|     |-ImplicitCastExpr 0x55dc7dc62ad8 <col:2> 'void (*)(struct k_timer *, void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc62a00 <col:2> 'void (struct k_timer *, void *)' Function 0x55dc7dc62660 'z_impl_k_timer_user_data_set' 'void (struct k_timer *, void *)'
|     |-ImplicitCastExpr 0x55dc7dc62b28 <col:31> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x55dc7dc62a28 <col:31> 'struct k_timer *' lvalue ParmVar 0x55dc7dc62748 'timer' 'struct k_timer *'
|     `-ImplicitCastExpr 0x55dc7dc62b40 <col:38> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc62a50 <col:38> 'void *' lvalue ParmVar 0x55dc7dc627c0 'user_data' 'void *'
|-FunctionDecl 0x55dc7dc62c30 prev 0x55dc7dc18658 <line:410:1, col:66> col:15 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' extern
| `-ParmVarDecl 0x55dc7dc62ba0 <col:44, col:61> col:61 timer 'struct k_timer *'
|-FunctionDecl 0x55dc7dc62d90 prev 0x55dc7dc184f8 <line:411:1, line:420:1> line:411:22 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x55dc7dc62d00 <col:44, col:61> col:61 used timer 'struct k_timer *'
| `-CompoundStmt 0x55dc7dc63060 <line:412:1, line:420:1>
|   |-DoStmt 0x55dc7dc62f18 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc62ee0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc62e90 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc62ef8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc63048 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:419:2, col:43>
|     `-CallExpr 0x55dc7dc63000 <col:9, col:43> 'void *'
|       |-ImplicitCastExpr 0x55dc7dc62fe8 <col:9> 'void *(*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc62f38 <col:9> 'void *(struct k_timer *)' Function 0x55dc7dc62c30 'z_impl_k_timer_user_data_get' 'void *(struct k_timer *)'
|       `-ImplicitCastExpr 0x55dc7dc63030 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc62f60 <col:38> 'struct k_timer *' lvalue ParmVar 0x55dc7dc62d00 'timer' 'struct k_timer *'
|-FunctionDecl 0x55dc7dc630f8 <line:423:1, col:34> col:14 used z_impl_k_uptime_get 's64_t ()' extern
|-FunctionDecl 0x55dc7dc631b8 prev 0x55dc7dc188e0 <line:424:1, line:435:1> line:424:21 used k_uptime_get 's64_t (void)' static inline
| `-CompoundStmt 0x55dc7dc63430 <line:425:1, line:435:1>
|   |-DoStmt 0x55dc7dc63338 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc63300 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc632b0 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc63318 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc63418 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:434:2, col:29>
|     `-CallExpr 0x55dc7dc633f0 <col:9, col:29> 's64_t':'long long'
|       `-ImplicitCastExpr 0x55dc7dc633d8 <col:9> 's64_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55dc7dc63358 <col:9> 's64_t ()' Function 0x55dc7dc630f8 'z_impl_k_uptime_get' 's64_t ()'
|-FunctionDecl 0x55dc7dc63500 <line:438:1, col:55> col:13 used z_impl_k_queue_init 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x55dc7dc63478 <col:33, col:50> col:50 queue 'struct k_queue *'
|-FunctionDecl 0x55dc7dc63658 prev 0x55dc7dc1add0 <line:439:1, line:449:1> line:439:20 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x55dc7dc635d0 <col:33, col:50> col:50 used queue 'struct k_queue *'
| `-CompoundStmt 0x55dc7dc63938 <line:440:1, line:449:1>
|   |-DoStmt 0x55dc7dc63810 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc637d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc63788 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc637f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc638f0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:448:2, col:27> 'void'
|     |-ImplicitCastExpr 0x55dc7dc638d8 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc63830 <col:2> 'void (struct k_queue *)' Function 0x55dc7dc63500 'z_impl_k_queue_init' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x55dc7dc63920 <col:22> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc63858 <col:22> 'struct k_queue *' lvalue ParmVar 0x55dc7dc635d0 'queue' 'struct k_queue *'
|-FunctionDecl 0x55dc7dc63a08 <line:452:1, col:62> col:13 used z_impl_k_queue_cancel_wait 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x55dc7dc63980 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x55dc7dc63b60 prev 0x55dc7dc1af58 <line:453:1, line:463:1> line:453:20 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x55dc7dc63ad8 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x55dc7dc63db8 <line:454:1, line:463:1>
|   |-DoStmt 0x55dc7dc63ce8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc63cb0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc63c60 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc63cc8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc63d70 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:462:2, col:34> 'void'
|     |-ImplicitCastExpr 0x55dc7dc63d58 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc63d08 <col:2> 'void (struct k_queue *)' Function 0x55dc7dc63a08 'z_impl_k_queue_cancel_wait' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x55dc7dc63da0 <col:29> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc63d30 <col:29> 'struct k_queue *' lvalue ParmVar 0x55dc7dc63ad8 'queue' 'struct k_queue *'
|-FunctionDecl 0x55dc7dc63f08 <line:466:1, col:77> col:14 used z_impl_k_queue_alloc_append 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x55dc7dc63e00 <col:42, col:59> col:59 queue 'struct k_queue *'
| `-ParmVarDecl 0x55dc7dc63e78 <col:66, col:73> col:73 data 'void *'
|-FunctionDecl 0x55dc7dc640e8 prev 0x55dc7dc1b470 <line:467:1, line:476:1> line:467:21 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55dc7dc63fe0 <col:42, col:59> col:59 used queue 'struct k_queue *'
| |-ParmVarDecl 0x55dc7dc64058 <col:66, col:73> col:73 used data 'void *'
| `-CompoundStmt 0x55dc7dc643a8 <line:468:1, line:476:1>
|   |-DoStmt 0x55dc7dc64278 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc64240 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc641f0 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc64258 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc64390 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:475:2, col:48>
|     `-CallExpr 0x55dc7dc64328 <col:9, col:48> 's32_t':'int'
|       |-ImplicitCastExpr 0x55dc7dc64310 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc64298 <col:9> 's32_t (struct k_queue *, void *)' Function 0x55dc7dc63f08 'z_impl_k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x55dc7dc64360 <col:37> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc642c0 <col:37> 'struct k_queue *' lvalue ParmVar 0x55dc7dc63fe0 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x55dc7dc64378 <col:44> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc642e8 <col:44> 'void *' lvalue ParmVar 0x55dc7dc64058 'data' 'void *'
|-FunctionDecl 0x55dc7dc644f8 <line:479:1, col:78> col:14 used z_impl_k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x55dc7dc643f0 <col:43, col:60> col:60 queue 'struct k_queue *'
| `-ParmVarDecl 0x55dc7dc64468 <col:67, col:74> col:74 data 'void *'
|-FunctionDecl 0x55dc7dc64740 prev 0x55dc7dc1b888 <line:480:1, line:489:1> line:480:21 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55dc7dc645d0 <col:43, col:60> col:60 used queue 'struct k_queue *'
| |-ParmVarDecl 0x55dc7dc64648 <col:67, col:74> col:74 used data 'void *'
| `-CompoundStmt 0x55dc7dc64a00 <line:481:1, line:489:1>
|   |-DoStmt 0x55dc7dc648d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc64898 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc64848 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc648b0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc649e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:488:2, col:49>
|     `-CallExpr 0x55dc7dc64980 <col:9, col:49> 's32_t':'int'
|       |-ImplicitCastExpr 0x55dc7dc64968 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc648f0 <col:9> 's32_t (struct k_queue *, void *)' Function 0x55dc7dc644f8 'z_impl_k_queue_alloc_prepend' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x55dc7dc649b8 <col:38> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc64918 <col:38> 'struct k_queue *' lvalue ParmVar 0x55dc7dc645d0 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x55dc7dc649d0 <col:45> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc64940 <col:45> 'void *' lvalue ParmVar 0x55dc7dc64648 'data' 'void *'
|-FunctionDecl 0x55dc7dc64b50 <line:492:1, col:71> col:15 used z_impl_k_queue_get 'void *(struct k_queue *, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc64a48 <col:34, col:51> col:51 queue 'struct k_queue *'
| `-ParmVarDecl 0x55dc7dc64ab8 <col:58, col:64> col:64 timeout 's32_t':'int'
|-FunctionDecl 0x55dc7dc64d30 prev 0x55dc7dc1c418 <line:493:1, line:502:1> line:493:22 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc64c28 <col:34, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x55dc7dc64c98 <col:58, col:64> col:64 used timeout 's32_t':'int'
| `-CompoundStmt 0x55dc7dc65050 <line:494:1, line:502:1>
|   |-DoStmt 0x55dc7dc64ec0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc64e88 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc64e38 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc64ea0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc65038 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:501:2, col:42>
|     `-CallExpr 0x55dc7dc64fd0 <col:9, col:42> 'void *'
|       |-ImplicitCastExpr 0x55dc7dc64fb8 <col:9> 'void *(*)(struct k_queue *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc64ee0 <col:9> 'void *(struct k_queue *, s32_t)' Function 0x55dc7dc64b50 'z_impl_k_queue_get' 'void *(struct k_queue *, s32_t)'
|       |-ImplicitCastExpr 0x55dc7dc65008 <col:28> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc64f08 <col:28> 'struct k_queue *' lvalue ParmVar 0x55dc7dc64c28 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x55dc7dc65020 <col:35> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc64f30 <col:35> 's32_t':'int' lvalue ParmVar 0x55dc7dc64c98 'timeout' 's32_t':'int'
|-FunctionDecl 0x55dc7dc65128 prev 0x55dc7dc1d5f8 <line:505:1, col:58> col:12 used z_impl_k_queue_is_empty 'int (struct k_queue *)' extern
| `-ParmVarDecl 0x55dc7dc65098 <col:36, col:53> col:53 queue 'struct k_queue *'
|-FunctionDecl 0x55dc7dc65288 prev 0x55dc7dc1d498 <line:506:1, line:515:1> line:506:19 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x55dc7dc651f8 <col:36, col:53> col:53 used queue 'struct k_queue *'
| `-CompoundStmt 0x55dc7dc65550 <line:507:1, line:515:1>
|   |-DoStmt 0x55dc7dc65410 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc653d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc65388 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc653f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc65538 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:514:2, col:38>
|     `-CallExpr 0x55dc7dc654f0 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x55dc7dc654d8 <col:9> 'int (*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc65430 <col:9> 'int (struct k_queue *)' Function 0x55dc7dc65128 'z_impl_k_queue_is_empty' 'int (struct k_queue *)'
|       `-ImplicitCastExpr 0x55dc7dc65520 <col:33> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc65458 <col:33> 'struct k_queue *' lvalue ParmVar 0x55dc7dc651f8 'queue' 'struct k_queue *'
|-FunctionDecl 0x55dc7dc65628 prev 0x55dc7dc1e450 <line:518:1, col:62> col:15 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x55dc7dc65598 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x55dc7dc657e0 prev 0x55dc7dc1d978 <line:519:1, line:528:1> line:519:22 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55dc7dc65750 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x55dc7dc65ab0 <line:520:1, line:528:1>
|   |-DoStmt 0x55dc7dc65968 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc65930 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc658e0 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc65948 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc65a98 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:527:2, col:39>
|     `-CallExpr 0x55dc7dc65a50 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x55dc7dc65a38 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc65988 <col:9> 'void *(struct k_queue *)' Function 0x55dc7dc65628 'z_impl_k_queue_peek_head' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x55dc7dc65a80 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc659b0 <col:34> 'struct k_queue *' lvalue ParmVar 0x55dc7dc65750 'queue' 'struct k_queue *'
|-FunctionDecl 0x55dc7dc65b88 prev 0x55dc7dc1e988 <line:531:1, col:62> col:15 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x55dc7dc65af8 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x55dc7dc65ce8 prev 0x55dc7dc1e828 <line:532:1, line:541:1> line:532:22 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55dc7dc65c58 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x55dc7dc65f58 <line:533:1, line:541:1>
|   |-DoStmt 0x55dc7dc65e70 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc65e38 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc65de8 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc65e50 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc65f40 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:540:2, col:39>
|     `-CallExpr 0x55dc7dc65ef8 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x55dc7dc65ee0 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc65e90 <col:9> 'void *(struct k_queue *)' Function 0x55dc7dc65b88 'z_impl_k_queue_peek_tail' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x55dc7dc65f28 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc65eb8 <col:34> 'struct k_queue *' lvalue ParmVar 0x55dc7dc65c58 'queue' 'struct k_queue *'
|-FunctionDecl 0x55dc7dc66258 <line:544:1, col:83> col:12 used z_impl_k_futex_wait 'int (struct k_futex *, int, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc66030 <col:32, col:49> col:49 futex 'struct k_futex *'
| |-ParmVarDecl 0x55dc7dc660a8 <col:56, col:60> col:60 expected 'int'
| `-ParmVarDecl 0x55dc7dc66118 <col:70, col:76> col:76 timeout 's32_t':'int'
|-FunctionDecl 0x55dc7dc664c0 <line:545:1, line:554:1> line:545:19 k_futex_wait 'int (struct k_futex *, int, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc66338 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x55dc7dc663b0 <col:56, col:60> col:60 used expected 'int'
| |-ParmVarDecl 0x55dc7dc66420 <col:70, col:76> col:76 used timeout 's32_t':'int'
| `-CompoundStmt 0x55dc7dc66840 <line:546:1, line:554:1>
|   |-DoStmt 0x55dc7dc66658 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc66620 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc665d0 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc66638 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc66828 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:553:2, col:53>
|     `-CallExpr 0x55dc7dc667a0 <col:9, col:53> 'int'
|       |-ImplicitCastExpr 0x55dc7dc66788 <col:9> 'int (*)(struct k_futex *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc66678 <col:9> 'int (struct k_futex *, int, s32_t)' Function 0x55dc7dc66258 'z_impl_k_futex_wait' 'int (struct k_futex *, int, s32_t)'
|       |-ImplicitCastExpr 0x55dc7dc667e0 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc666a0 <col:29> 'struct k_futex *' lvalue ParmVar 0x55dc7dc66338 'futex' 'struct k_futex *'
|       |-ImplicitCastExpr 0x55dc7dc667f8 <col:36> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc666c8 <col:36> 'int' lvalue ParmVar 0x55dc7dc663b0 'expected' 'int'
|       `-ImplicitCastExpr 0x55dc7dc66810 <col:46> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc666f0 <col:46> 's32_t':'int' lvalue ParmVar 0x55dc7dc66420 'timeout' 's32_t':'int'
|-FunctionDecl 0x55dc7dc66a18 <line:557:1, col:69> col:12 used z_impl_k_futex_wake 'int (struct k_futex *, bool)' extern
| |-ParmVarDecl 0x55dc7dc66888 <col:32, col:49> col:49 futex 'struct k_futex *'
| `-ParmVarDecl 0x55dc7dc668f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:557:61> col:61 wake_all 'bool'
|-FunctionDecl 0x55dc7dc66bf8 <line:558:1, line:567:1> line:558:19 k_futex_wake 'int (struct k_futex *, bool)' static inline
| |-ParmVarDecl 0x55dc7dc66af0 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x55dc7dc66b60 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:558:61> col:61 used wake_all 'bool'
| `-CompoundStmt 0x55dc7dc66f10 <line:559:1, line:567:1>
|   |-DoStmt 0x55dc7dc66d88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc66d50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc66d00 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc66d68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc66ef8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:566:2, col:44>
|     `-CallExpr 0x55dc7dc66e90 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x55dc7dc66e78 <col:9> 'int (*)(struct k_futex *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc66da8 <col:9> 'int (struct k_futex *, bool)' Function 0x55dc7dc66a18 'z_impl_k_futex_wake' 'int (struct k_futex *, bool)'
|       |-ImplicitCastExpr 0x55dc7dc66ec8 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc66dd0 <col:29> 'struct k_futex *' lvalue ParmVar 0x55dc7dc66af0 'futex' 'struct k_futex *'
|       `-ImplicitCastExpr 0x55dc7dc66ee0 <col:36> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc66df8 <col:36> 'bool' lvalue ParmVar 0x55dc7dc66b60 'wake_all' 'bool'
|-FunctionDecl 0x55dc7dc67058 <line:570:1, col:81> col:14 used z_impl_k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' extern
| |-ParmVarDecl 0x55dc7dc66f58 <col:40, col:57> col:57 stack 'struct k_stack *'
| `-ParmVarDecl 0x55dc7dc66fc8 <col:64, col:70> col:70 num_entries 'u32_t':'unsigned int'
|-FunctionDecl 0x55dc7dc67230 prev 0x55dc7db1ca70 <line:571:1, line:580:1> line:571:21 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x55dc7dc67130 <col:40, col:57> col:57 used stack 'struct k_stack *'
| |-ParmVarDecl 0x55dc7dc671a0 <col:64, col:70> col:70 used num_entries 'u32_t':'unsigned int'
| `-CompoundStmt 0x55dc7dc67550 <line:572:1, line:580:1>
|   |-DoStmt 0x55dc7dc673c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc67388 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc67338 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc673a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc67538 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:579:2, col:53>
|     `-CallExpr 0x55dc7dc674d0 <col:9, col:53> 's32_t':'int'
|       |-ImplicitCastExpr 0x55dc7dc674b8 <col:9> 's32_t (*)(struct k_stack *, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc673e0 <col:9> 's32_t (struct k_stack *, u32_t)' Function 0x55dc7dc67058 'z_impl_k_stack_alloc_init' 's32_t (struct k_stack *, u32_t)'
|       |-ImplicitCastExpr 0x55dc7dc67508 <col:35> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc67408 <col:35> 'struct k_stack *' lvalue ParmVar 0x55dc7dc67130 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x55dc7dc67520 <col:42> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc67430 <col:42> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dc671a0 'num_entries' 'u32_t':'unsigned int'
|-FunctionDecl 0x55dc7dc676a0 <line:583:1, col:73> col:12 used z_impl_k_stack_push 'int (struct k_stack *, stack_data_t)' extern
| |-ParmVarDecl 0x55dc7dc67598 <col:32, col:49> col:49 stack 'struct k_stack *'
| `-ParmVarDecl 0x55dc7dc67608 <col:56, col:69> col:69 data 'stack_data_t':'unsigned long'
|-FunctionDecl 0x55dc7dc678a0 prev 0x55dc7db1cef8 <line:584:1, line:593:1> line:584:19 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x55dc7dc67798 <col:32, col:49> col:49 used stack 'struct k_stack *'
| |-ParmVarDecl 0x55dc7dc67808 <col:56, col:69> col:69 used data 'stack_data_t':'unsigned long'
| `-CompoundStmt 0x55dc7dc67bc0 <line:585:1, line:593:1>
|   |-DoStmt 0x55dc7dc67a30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc679f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc679a8 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc67a10 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc67ba8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:592:2, col:40>
|     `-CallExpr 0x55dc7dc67b40 <col:9, col:40> 'int'
|       |-ImplicitCastExpr 0x55dc7dc67b28 <col:9> 'int (*)(struct k_stack *, stack_data_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc67a50 <col:9> 'int (struct k_stack *, stack_data_t)' Function 0x55dc7dc676a0 'z_impl_k_stack_push' 'int (struct k_stack *, stack_data_t)'
|       |-ImplicitCastExpr 0x55dc7dc67b78 <col:29> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc67a78 <col:29> 'struct k_stack *' lvalue ParmVar 0x55dc7dc67798 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x55dc7dc67b90 <col:36> 'stack_data_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc67aa0 <col:36> 'stack_data_t':'unsigned long' lvalue ParmVar 0x55dc7dc67808 'data' 'stack_data_t':'unsigned long'
|-FunctionDecl 0x55dc7dc67d88 <line:596:1, col:89> col:12 used z_impl_k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc67c08 <col:31, col:48> col:48 stack 'struct k_stack *'
| |-ParmVarDecl 0x55dc7dc67c78 <col:55, col:70> col:70 data 'stack_data_t *'
| `-ParmVarDecl 0x55dc7dc67ce8 <col:76, col:82> col:82 timeout 's32_t':'int'
|-FunctionDecl 0x55dc7dc67fe8 prev 0x55dc7db1d598 <line:597:1, line:606:1> line:597:19 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc67e68 <col:31, col:48> col:48 used stack 'struct k_stack *'
| |-ParmVarDecl 0x55dc7dc67ed8 <col:55, col:70> col:70 used data 'stack_data_t *'
| |-ParmVarDecl 0x55dc7dc67f48 <col:76, col:82> col:82 used timeout 's32_t':'int'
| `-CompoundStmt 0x55dc7dc68350 <line:598:1, line:606:1>
|   |-DoStmt 0x55dc7dc68180 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc68148 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc680f8 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc68160 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc68338 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:605:2, col:48>
|     `-CallExpr 0x55dc7dc682b0 <col:9, col:48> 'int'
|       |-ImplicitCastExpr 0x55dc7dc68298 <col:9> 'int (*)(struct k_stack *, stack_data_t *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc681a0 <col:9> 'int (struct k_stack *, stack_data_t *, s32_t)' Function 0x55dc7dc67d88 'z_impl_k_stack_pop' 'int (struct k_stack *, stack_data_t *, s32_t)'
|       |-ImplicitCastExpr 0x55dc7dc682f0 <col:28> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc681c8 <col:28> 'struct k_stack *' lvalue ParmVar 0x55dc7dc67e68 'stack' 'struct k_stack *'
|       |-ImplicitCastExpr 0x55dc7dc68308 <col:35> 'stack_data_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc681f0 <col:35> 'stack_data_t *' lvalue ParmVar 0x55dc7dc67ed8 'data' 'stack_data_t *'
|       `-ImplicitCastExpr 0x55dc7dc68320 <col:41> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc68218 <col:41> 's32_t':'int' lvalue ParmVar 0x55dc7dc67f48 'timeout' 's32_t':'int'
|-FunctionDecl 0x55dc7dc68428 <line:609:1, col:54> col:12 used z_impl_k_mutex_init 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x55dc7dc68398 <col:32, col:49> col:49 mutex 'struct k_mutex *'
|-FunctionDecl 0x55dc7dc68588 prev 0x55dc7dc35d98 <line:610:1, line:619:1> line:610:19 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x55dc7dc684f8 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x55dc7dc68880 <line:611:1, line:619:1>
|   |-DoStmt 0x55dc7dc68710 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc686d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc68688 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc686f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc68868 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:618:2, col:34>
|     `-CallExpr 0x55dc7dc68820 <col:9, col:34> 'int'
|       |-ImplicitCastExpr 0x55dc7dc68808 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc68730 <col:9> 'int (struct k_mutex *)' Function 0x55dc7dc68428 'z_impl_k_mutex_init' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x55dc7dc68850 <col:29> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc68780 <col:29> 'struct k_mutex *' lvalue ParmVar 0x55dc7dc684f8 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x55dc7dc689d0 <line:622:1, col:69> col:12 used z_impl_k_mutex_lock 'int (struct k_mutex *, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc688c8 <col:32, col:49> col:49 mutex 'struct k_mutex *'
| `-ParmVarDecl 0x55dc7dc68938 <col:56, col:62> col:62 timeout 's32_t':'int'
|-FunctionDecl 0x55dc7dc68bb0 prev 0x55dc7dc36018 <line:623:1, line:632:1> line:623:19 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc68aa8 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| |-ParmVarDecl 0x55dc7dc68b18 <col:56, col:62> col:62 used timeout 's32_t':'int'
| `-CompoundStmt 0x55dc7dc68ed0 <line:624:1, line:632:1>
|   |-DoStmt 0x55dc7dc68d40 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc68d08 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc68cb8 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc68d20 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc68eb8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:631:2, col:43>
|     `-CallExpr 0x55dc7dc68e50 <col:9, col:43> 'int'
|       |-ImplicitCastExpr 0x55dc7dc68e38 <col:9> 'int (*)(struct k_mutex *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc68d60 <col:9> 'int (struct k_mutex *, s32_t)' Function 0x55dc7dc689d0 'z_impl_k_mutex_lock' 'int (struct k_mutex *, s32_t)'
|       |-ImplicitCastExpr 0x55dc7dc68e88 <col:29> 'struct k_mutex *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc68d88 <col:29> 'struct k_mutex *' lvalue ParmVar 0x55dc7dc68aa8 'mutex' 'struct k_mutex *'
|       `-ImplicitCastExpr 0x55dc7dc68ea0 <col:36> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc68db0 <col:36> 's32_t':'int' lvalue ParmVar 0x55dc7dc68b18 'timeout' 's32_t':'int'
|-FunctionDecl 0x55dc7dc68fa8 <line:635:1, col:56> col:12 used z_impl_k_mutex_unlock 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x55dc7dc68f18 <col:34, col:51> col:51 mutex 'struct k_mutex *'
|-FunctionDecl 0x55dc7dc69108 prev 0x55dc7dc361b0 <line:636:1, line:645:1> line:636:19 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x55dc7dc69078 <col:34, col:51> col:51 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x55dc7dc69378 <line:637:1, line:645:1>
|   |-DoStmt 0x55dc7dc69290 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc69258 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc69208 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc69270 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc69360 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:644:2, col:36>
|     `-CallExpr 0x55dc7dc69318 <col:9, col:36> 'int'
|       |-ImplicitCastExpr 0x55dc7dc69300 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc692b0 <col:9> 'int (struct k_mutex *)' Function 0x55dc7dc68fa8 'z_impl_k_mutex_unlock' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x55dc7dc69348 <col:31> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc692d8 <col:31> 'struct k_mutex *' lvalue ParmVar 0x55dc7dc69078 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x55dc7dc69550 <line:648:1, col:96> col:12 used z_impl_k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' extern
| |-ParmVarDecl 0x55dc7dc693c0 <col:30, col:45> col:45 sem 'struct k_sem *'
| |-ParmVarDecl 0x55dc7dc69438 <col:50, col:63> col:63 initial_count 'unsigned int'
| `-ParmVarDecl 0x55dc7dc694b0 <col:78, col:91> col:91 limit 'unsigned int'
|-FunctionDecl 0x55dc7dc697c0 prev 0x55dc7dc367b8 <line:649:1, line:658:1> line:649:19 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x55dc7dc69630 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x55dc7dc696a8 <col:50, col:63> col:63 used initial_count 'unsigned int'
| |-ParmVarDecl 0x55dc7dc69720 <col:78, col:91> col:91 used limit 'unsigned int'
| `-CompoundStmt 0x55dc7dc69b30 <line:650:1, line:658:1>
|   |-DoStmt 0x55dc7dc69958 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc69920 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc698d0 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc69938 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc69b18 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:657:2, col:52>
|     `-CallExpr 0x55dc7dc69a90 <col:9, col:52> 'int'
|       |-ImplicitCastExpr 0x55dc7dc69a78 <col:9> 'int (*)(struct k_sem *, unsigned int, unsigned int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc69978 <col:9> 'int (struct k_sem *, unsigned int, unsigned int)' Function 0x55dc7dc69550 'z_impl_k_sem_init' 'int (struct k_sem *, unsigned int, unsigned int)'
|       |-ImplicitCastExpr 0x55dc7dc69ad0 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc699a0 <col:27> 'struct k_sem *' lvalue ParmVar 0x55dc7dc69630 'sem' 'struct k_sem *'
|       |-ImplicitCastExpr 0x55dc7dc69ae8 <col:32> 'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc699c8 <col:32> 'unsigned int' lvalue ParmVar 0x55dc7dc696a8 'initial_count' 'unsigned int'
|       `-ImplicitCastExpr 0x55dc7dc69b00 <col:47> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc699f0 <col:47> 'unsigned int' lvalue ParmVar 0x55dc7dc69720 'limit' 'unsigned int'
|-FunctionDecl 0x55dc7dc69c80 <line:661:1, col:63> col:12 used z_impl_k_sem_take 'int (struct k_sem *, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc69b78 <col:30, col:45> col:45 sem 'struct k_sem *'
| `-ParmVarDecl 0x55dc7dc69be8 <col:50, col:56> col:56 timeout 's32_t':'int'
|-FunctionDecl 0x55dc7dc69e60 prev 0x55dc7dc36a48 <line:662:1, line:671:1> line:662:19 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc69d58 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x55dc7dc69dc8 <col:50, col:56> col:56 used timeout 's32_t':'int'
| `-CompoundStmt 0x55dc7dc6a180 <line:663:1, line:671:1>
|   |-DoStmt 0x55dc7dc69ff0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc69fb8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc69f68 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc69fd0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc6a168 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:670:2, col:39>
|     `-CallExpr 0x55dc7dc6a100 <col:9, col:39> 'int'
|       |-ImplicitCastExpr 0x55dc7dc6a0e8 <col:9> 'int (*)(struct k_sem *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc6a010 <col:9> 'int (struct k_sem *, s32_t)' Function 0x55dc7dc69c80 'z_impl_k_sem_take' 'int (struct k_sem *, s32_t)'
|       |-ImplicitCastExpr 0x55dc7dc6a138 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6a038 <col:27> 'struct k_sem *' lvalue ParmVar 0x55dc7dc69d58 'sem' 'struct k_sem *'
|       `-ImplicitCastExpr 0x55dc7dc6a150 <col:32> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc6a060 <col:32> 's32_t':'int' lvalue ParmVar 0x55dc7dc69dc8 'timeout' 's32_t':'int'
|-FunctionDecl 0x55dc7dc6a250 <line:674:1, col:49> col:13 used z_impl_k_sem_give 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x55dc7dc6a1c8 <col:31, col:46> col:46 sem 'struct k_sem *'
|-FunctionDecl 0x55dc7dc6a3a8 prev 0x55dc7dc37ca0 <line:675:1, line:685:1> line:675:20 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55dc7dc6a320 <col:31, col:46> col:46 used sem 'struct k_sem *'
| `-CompoundStmt 0x55dc7dc6a658 <line:676:1, line:685:1>
|   |-DoStmt 0x55dc7dc6a530 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc6a4f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc6a4a8 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc6a510 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc6a610 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:684:2, col:23> 'void'
|     |-ImplicitCastExpr 0x55dc7dc6a5f8 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc6a550 <col:2> 'void (struct k_sem *)' Function 0x55dc7dc6a250 'z_impl_k_sem_give' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x55dc7dc6a640 <col:20> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc6a578 <col:20> 'struct k_sem *' lvalue ParmVar 0x55dc7dc6a320 'sem' 'struct k_sem *'
|-FunctionDecl 0x55dc7dc6a790 prev 0x55dc7dc37fa8 <line:688:1, col:50> col:13 used z_impl_k_sem_reset 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x55dc7dc6a6a0 <col:32, col:47> col:47 sem 'struct k_sem *'
|-FunctionDecl 0x55dc7dc6a8e8 prev 0x55dc7dc37e28 <line:689:1, line:699:1> line:689:20 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55dc7dc6a860 <col:32, col:47> col:47 used sem 'struct k_sem *'
| `-CompoundStmt 0x55dc7dc6ab40 <line:690:1, line:699:1>
|   |-DoStmt 0x55dc7dc6aa70 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc6aa38 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc6a9e8 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc6aa50 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc6aaf8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:698:2, col:24> 'void'
|     |-ImplicitCastExpr 0x55dc7dc6aae0 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc6aa90 <col:2> 'void (struct k_sem *)' Function 0x55dc7dc6a790 'z_impl_k_sem_reset' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x55dc7dc6ab28 <col:21> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc6aab8 <col:21> 'struct k_sem *' lvalue ParmVar 0x55dc7dc6a860 'sem' 'struct k_sem *'
|-FunctionDecl 0x55dc7dc6ac18 prev 0x55dc7dc38410 <line:702:1, col:62> col:21 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' extern
| `-ParmVarDecl 0x55dc7dc6ab88 <col:44, col:59> col:59 sem 'struct k_sem *'
|-FunctionDecl 0x55dc7dc6ad78 prev 0x55dc7dc38288 <line:703:1, line:712:1> line:703:28 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x55dc7dc6ace8 <col:44, col:59> col:59 used sem 'struct k_sem *'
| `-CompoundStmt 0x55dc7dc6b040 <line:704:1, line:712:1>
|   |-DoStmt 0x55dc7dc6af00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc6aec8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc6ae78 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc6aee0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc6b028 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:711:2, col:35>
|     `-CallExpr 0x55dc7dc6afe0 <col:9, col:35> 'unsigned int'
|       |-ImplicitCastExpr 0x55dc7dc6afc8 <col:9> 'unsigned int (*)(struct k_sem *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc6af20 <col:9> 'unsigned int (struct k_sem *)' Function 0x55dc7dc6ac18 'z_impl_k_sem_count_get' 'unsigned int (struct k_sem *)'
|       `-ImplicitCastExpr 0x55dc7dc6b010 <col:32> 'struct k_sem *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc6af48 <col:32> 'struct k_sem *' lvalue ParmVar 0x55dc7dc6ace8 'sem' 'struct k_sem *'
|-FunctionDecl 0x55dc7dc6b208 <line:715:1, col:90> col:12 used z_impl_k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' extern
| |-ParmVarDecl 0x55dc7dc6b088 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55dc7dc6b0f8 <col:59, col:66> col:66 msg_size 'size_t':'unsigned long'
| `-ParmVarDecl 0x55dc7dc6b168 <col:76, col:82> col:82 max_msgs 'u32_t':'unsigned int'
|-FunctionDecl 0x55dc7dc6b468 prev 0x55dc7dbe89f8 <line:716:1, line:725:1> line:716:19 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x55dc7dc6b2e8 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55dc7dc6b358 <col:59, col:66> col:66 used msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc6b3c8 <col:76, col:82> col:82 used max_msgs 'u32_t':'unsigned int'
| `-CompoundStmt 0x55dc7dc6b7d0 <line:717:1, line:725:1>
|   |-DoStmt 0x55dc7dc6b600 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc6b5c8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc6b578 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc6b5e0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc6b7b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:724:2, col:58>
|     `-CallExpr 0x55dc7dc6b730 <col:9, col:58> 'int'
|       |-ImplicitCastExpr 0x55dc7dc6b718 <col:9> 'int (*)(struct k_msgq *, size_t, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc6b620 <col:9> 'int (struct k_msgq *, size_t, u32_t)' Function 0x55dc7dc6b208 'z_impl_k_msgq_alloc_init' 'int (struct k_msgq *, size_t, u32_t)'
|       |-ImplicitCastExpr 0x55dc7dc6b770 <col:34> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6b648 <col:34> 'struct k_msgq *' lvalue ParmVar 0x55dc7dc6b2e8 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x55dc7dc6b788 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6b670 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x55dc7dc6b358 'msg_size' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x55dc7dc6b7a0 <col:50> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc6b698 <col:50> 'u32_t':'unsigned int' lvalue ParmVar 0x55dc7dc6b3c8 'max_msgs' 'u32_t':'unsigned int'
|-FunctionDecl 0x55dc7dc6b9a0 <line:728:1, col:78> col:12 used z_impl_k_msgq_put 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc6b818 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55dc7dc6b890 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x55dc7dc6b900 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x55dc7dc6bc08 prev 0x55dc7dbe8f28 <line:729:1, line:738:1> line:729:19 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc6ba80 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55dc7dc6baf8 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x55dc7dc6bb68 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x55dc7dc6bf70 <line:730:1, line:738:1>
|   |-DoStmt 0x55dc7dc6bda0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc6bd68 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc6bd18 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc6bd80 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc6bf58 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:737:2, col:46>
|     `-CallExpr 0x55dc7dc6bed0 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x55dc7dc6beb8 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc6bdc0 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x55dc7dc6b9a0 'z_impl_k_msgq_put' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x55dc7dc6bf10 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6bde8 <col:27> 'struct k_msgq *' lvalue ParmVar 0x55dc7dc6ba80 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x55dc7dc6bf28 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6be10 <col:33> 'void *' lvalue ParmVar 0x55dc7dc6baf8 'data' 'void *'
|       `-ImplicitCastExpr 0x55dc7dc6bf40 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc6be38 <col:39> 's32_t':'int' lvalue ParmVar 0x55dc7dc6bb68 'timeout' 's32_t':'int'
|-FunctionDecl 0x55dc7dc6c140 <line:741:1, col:78> col:12 used z_impl_k_msgq_get 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc6bfb8 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55dc7dc6c030 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x55dc7dc6c0a0 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x55dc7dc6c3a8 prev 0x55dc7dc3c618 <line:742:1, line:751:1> line:742:19 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc6c220 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55dc7dc6c298 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x55dc7dc6c308 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x55dc7dc6c6b8 <line:743:1, line:751:1>
|   |-DoStmt 0x55dc7dc6c540 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc6c508 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc6c4b8 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc6c520 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc6c6a0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:750:2, col:46>
|     `-CallExpr 0x55dc7dc6c618 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x55dc7dc6c600 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc6c560 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x55dc7dc6c140 'z_impl_k_msgq_get' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x55dc7dc6c658 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6c588 <col:27> 'struct k_msgq *' lvalue ParmVar 0x55dc7dc6c220 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x55dc7dc6c670 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6c5b0 <col:33> 'void *' lvalue ParmVar 0x55dc7dc6c298 'data' 'void *'
|       `-ImplicitCastExpr 0x55dc7dc6c688 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc6c5d8 <col:39> 's32_t':'int' lvalue ParmVar 0x55dc7dc6c308 'timeout' 's32_t':'int'
|-FunctionDecl 0x55dc7dc6c838 <line:754:1, col:64> col:12 used z_impl_k_msgq_peek 'int (struct k_msgq *, void *)' extern
| |-ParmVarDecl 0x55dc7dc6c700 <col:31, col:47> col:47 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x55dc7dc6c7a0 <col:53, col:60> col:60 data 'void *'
|-FunctionDecl 0x55dc7dc6ca20 prev 0x55dc7dc3c8b8 <line:755:1, line:764:1> line:755:19 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x55dc7dc6c910 <col:31, col:47> col:47 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55dc7dc6c988 <col:53, col:60> col:60 used data 'void *'
| `-CompoundStmt 0x55dc7dc6cd40 <line:756:1, line:764:1>
|   |-DoStmt 0x55dc7dc6cbb0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc6cb78 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc6cb28 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc6cb90 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc6cd28 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:763:2, col:38>
|     `-CallExpr 0x55dc7dc6ccc0 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x55dc7dc6cca8 <col:9> 'int (*)(struct k_msgq *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc6cbd0 <col:9> 'int (struct k_msgq *, void *)' Function 0x55dc7dc6c838 'z_impl_k_msgq_peek' 'int (struct k_msgq *, void *)'
|       |-ImplicitCastExpr 0x55dc7dc6ccf8 <col:28> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6cbf8 <col:28> 'struct k_msgq *' lvalue ParmVar 0x55dc7dc6c910 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x55dc7dc6cd10 <col:34> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc6cc20 <col:34> 'void *' lvalue ParmVar 0x55dc7dc6c988 'data' 'void *'
|-FunctionDecl 0x55dc7dc6ce10 <line:767:1, col:53> col:13 used z_impl_k_msgq_purge 'void (struct k_msgq *)' extern
| `-ParmVarDecl 0x55dc7dc6cd88 <col:33, col:49> col:49 msgq 'struct k_msgq *'
|-FunctionDecl 0x55dc7dc6cf68 prev 0x55dc7dc3cac0 <line:768:1, line:778:1> line:768:20 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55dc7dc6cee0 <col:33, col:49> col:49 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55dc7dc6d218 <line:769:1, line:778:1>
|   |-DoStmt 0x55dc7dc6d0f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc6d0b8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc6d068 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc6d0d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc6d1d0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:777:2, col:26> 'void'
|     |-ImplicitCastExpr 0x55dc7dc6d1b8 <col:2> 'void (*)(struct k_msgq *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc6d110 <col:2> 'void (struct k_msgq *)' Function 0x55dc7dc6ce10 'z_impl_k_msgq_purge' 'void (struct k_msgq *)'
|     `-ImplicitCastExpr 0x55dc7dc6d200 <col:22> 'struct k_msgq *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc6d138 <col:22> 'struct k_msgq *' lvalue ParmVar 0x55dc7dc6cee0 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x55dc7dc6d2e8 prev 0x55dc7dc3d140 <line:781:1, col:61> col:14 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x55dc7dc6d260 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x55dc7dc6d440 prev 0x55dc7dc3ccc0 <line:782:1, line:791:1> line:782:21 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55dc7dc6d3b8 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55dc7dc6d710 <line:783:1, line:791:1>
|   |-DoStmt 0x55dc7dc6d5c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc6d590 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc6d540 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc6d5a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc6d6f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:790:2, col:40>
|     `-CallExpr 0x55dc7dc6d6b0 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55dc7dc6d698 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc6d5e8 <col:9> 'u32_t (struct k_msgq *)' Function 0x55dc7dc6d2e8 'z_impl_k_msgq_num_free_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x55dc7dc6d6e0 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc6d610 <col:36> 'struct k_msgq *' lvalue ParmVar 0x55dc7dc6d3b8 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x55dc7dc6d870 <line:794:1, col:86> col:13 used z_impl_k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' extern
| |-ParmVarDecl 0x55dc7dc6d758 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x55dc7dc6d7e0 <col:59, col:81> col:81 attrs 'struct k_msgq_attrs *'
|-FunctionDecl 0x55dc7dc6da60 prev 0x55dc7dc3cfe0 <line:795:1, line:805:1> line:795:20 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x55dc7dc6d948 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55dc7dc6d9d0 <col:59, col:81> col:81 used attrs 'struct k_msgq_attrs *'
| `-CompoundStmt 0x55dc7dc6dd68 <line:796:1, line:805:1>
|   |-DoStmt 0x55dc7dc6dbf0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc6dbb8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc6db68 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc6dbd0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc6dd00 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:804:2, col:37> 'void'
|     |-ImplicitCastExpr 0x55dc7dc6dce8 <col:2> 'void (*)(struct k_msgq *, struct k_msgq_attrs *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc6dc10 <col:2> 'void (struct k_msgq *, struct k_msgq_attrs *)' Function 0x55dc7dc6d870 'z_impl_k_msgq_get_attrs' 'void (struct k_msgq *, struct k_msgq_attrs *)'
|     |-ImplicitCastExpr 0x55dc7dc6dd38 <col:26> 'struct k_msgq *' <LValueToRValue>
|     | `-DeclRefExpr 0x55dc7dc6dc38 <col:26> 'struct k_msgq *' lvalue ParmVar 0x55dc7dc6d948 'msgq' 'struct k_msgq *'
|     `-ImplicitCastExpr 0x55dc7dc6dd50 <col:32> 'struct k_msgq_attrs *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc6dc60 <col:32> 'struct k_msgq_attrs *' lvalue ParmVar 0x55dc7dc6d9d0 'attrs' 'struct k_msgq_attrs *'
|-FunctionDecl 0x55dc7dc6de38 prev 0x55dc7dc3da18 <line:808:1, col:61> col:14 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x55dc7dc6ddb0 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x55dc7dc6df90 prev 0x55dc7dc3d8c0 <line:809:1, line:818:1> line:809:21 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55dc7dc6df08 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55dc7dc6e200 <line:810:1, line:818:1>
|   |-DoStmt 0x55dc7dc6e118 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc6e0e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc6e090 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc6e0f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc6e1e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:817:2, col:40>
|     `-CallExpr 0x55dc7dc6e1a0 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55dc7dc6e188 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc6e138 <col:9> 'u32_t (struct k_msgq *)' Function 0x55dc7dc6de38 'z_impl_k_msgq_num_used_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x55dc7dc6e1d0 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc6e160 <col:36> 'struct k_msgq *' lvalue ParmVar 0x55dc7dc6df08 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x55dc7dc6e350 <line:821:1, col:70> col:12 used z_impl_k_pipe_alloc_init 'int (struct k_pipe *, size_t)' extern
| |-ParmVarDecl 0x55dc7dc6e248 <col:37, col:53> col:53 pipe 'struct k_pipe *'
| `-ParmVarDecl 0x55dc7dc6e2b8 <col:59, col:66> col:66 size 'size_t':'unsigned long'
|-FunctionDecl 0x55dc7dc6e530 prev 0x55dc7dc43b88 <line:822:1, line:831:1> line:822:19 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x55dc7dc6e428 <col:37, col:53> col:53 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55dc7dc6e498 <col:59, col:66> col:66 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x55dc7dc6e870 <line:823:1, line:831:1>
|   |-DoStmt 0x55dc7dc6e6c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc6e688 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc6e638 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc6e6a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc6e858 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:830:2, col:44>
|     `-CallExpr 0x55dc7dc6e7f0 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x55dc7dc6e7d8 <col:9> 'int (*)(struct k_pipe *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc6e6e0 <col:9> 'int (struct k_pipe *, size_t)' Function 0x55dc7dc6e350 'z_impl_k_pipe_alloc_init' 'int (struct k_pipe *, size_t)'
|       |-ImplicitCastExpr 0x55dc7dc6e828 <col:34> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6e708 <col:34> 'struct k_pipe *' lvalue ParmVar 0x55dc7dc6e428 'pipe' 'struct k_pipe *'
|       `-ImplicitCastExpr 0x55dc7dc6e840 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc6e730 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x55dc7dc6e498 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x55dc7dc6eba8 <line:834:1, col:142> col:12 used z_impl_k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc6e8b8 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55dc7dc6e930 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x55dc7dc6e9a0 <col:65, col:72> col:72 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc6ea10 <col:88, col:97> col:97 bytes_written 'size_t *'
| |-ParmVarDecl 0x55dc7dc6ea80 <col:112, col:119> col:119 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x55dc7dc6eaf0 <col:129, col:135> col:135 timeout 's32_t':'int'
|-FunctionDecl 0x55dc7dc6ef90 prev 0x55dc7dc44078 <line:835:1, line:844:1> line:835:19 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc6eca0 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55dc7dc6ed18 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x55dc7dc6ed88 <col:65, col:72> col:72 used bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc6edf8 <col:88, col:97> col:97 used bytes_written 'size_t *'
| |-ParmVarDecl 0x55dc7dc6ee68 <col:112, col:119> col:119 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc6eed8 <col:129, col:135> col:135 used timeout 's32_t':'int'
| `-CompoundStmt 0x55dc7dc6f3f0 <line:836:1, line:844:1>
|   |-DoStmt 0x55dc7dc6f140 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc6f108 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc6f0b8 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc6f120 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc6f3d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:843:2, col:87>
|     `-CallExpr 0x55dc7dc6f2f0 <col:9, col:87> 'int'
|       |-ImplicitCastExpr 0x55dc7dc6f2d8 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc6f160 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x55dc7dc6eba8 'z_impl_k_pipe_put' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x55dc7dc6f348 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6f188 <col:27> 'struct k_pipe *' lvalue ParmVar 0x55dc7dc6eca0 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x55dc7dc6f360 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6f1b0 <col:33> 'void *' lvalue ParmVar 0x55dc7dc6ed18 'data' 'void *'
|       |-ImplicitCastExpr 0x55dc7dc6f378 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6f1d8 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x55dc7dc6ed88 'bytes_to_write' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x55dc7dc6f390 <col:55> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6f200 <col:55> 'size_t *' lvalue ParmVar 0x55dc7dc6edf8 'bytes_written' 'size_t *'
|       |-ImplicitCastExpr 0x55dc7dc6f3a8 <col:70> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6f228 <col:70> 'size_t':'unsigned long' lvalue ParmVar 0x55dc7dc6ee68 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x55dc7dc6f3c0 <col:80> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc6f250 <col:80> 's32_t':'int' lvalue ParmVar 0x55dc7dc6eed8 'timeout' 's32_t':'int'
|-FunctionDecl 0x55dc7dc6f728 <line:847:1, col:138> col:12 used z_impl_k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc6f438 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55dc7dc6f4b0 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x55dc7dc6f520 <col:65, col:72> col:72 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc6f590 <col:87, col:96> col:96 bytes_read 'size_t *'
| |-ParmVarDecl 0x55dc7dc6f600 <col:108, col:115> col:115 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x55dc7dc6f670 <col:125, col:131> col:131 timeout 's32_t':'int'
|-FunctionDecl 0x55dc7dc6fb10 prev 0x55dc7dc44490 <line:848:1, line:857:1> line:848:19 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc6f820 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55dc7dc6f898 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x55dc7dc6f908 <col:65, col:72> col:72 used bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc6f978 <col:87, col:96> col:96 used bytes_read 'size_t *'
| |-ParmVarDecl 0x55dc7dc6f9e8 <col:108, col:115> col:115 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x55dc7dc6fa58 <col:125, col:131> col:131 used timeout 's32_t':'int'
| `-CompoundStmt 0x55dc7dc6ff10 <line:849:1, line:857:1>
|   |-DoStmt 0x55dc7dc6fcc0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc6fc88 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc6fc38 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc6fca0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc6fef8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:856:2, col:83>
|     `-CallExpr 0x55dc7dc6fe10 <col:9, col:83> 'int'
|       |-ImplicitCastExpr 0x55dc7dc6fdf8 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc6fce0 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x55dc7dc6f728 'z_impl_k_pipe_get' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x55dc7dc6fe68 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6fd08 <col:27> 'struct k_pipe *' lvalue ParmVar 0x55dc7dc6f820 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x55dc7dc6fe80 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6fd30 <col:33> 'void *' lvalue ParmVar 0x55dc7dc6f898 'data' 'void *'
|       |-ImplicitCastExpr 0x55dc7dc6fe98 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6fd58 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x55dc7dc6f908 'bytes_to_read' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x55dc7dc6feb0 <col:54> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6fd80 <col:54> 'size_t *' lvalue ParmVar 0x55dc7dc6f978 'bytes_read' 'size_t *'
|       |-ImplicitCastExpr 0x55dc7dc6fec8 <col:66> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc6fda8 <col:66> 'size_t':'unsigned long' lvalue ParmVar 0x55dc7dc6f9e8 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x55dc7dc6fee0 <col:76> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc6fdd0 <col:76> 's32_t':'int' lvalue ParmVar 0x55dc7dc6fa58 'timeout' 's32_t':'int'
|-FunctionDecl 0x55dc7dc700e0 <line:860:1, col:85> col:12 used z_impl_k_poll 'int (struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x55dc7dc6ff58 <col:26, col:48> col:48 events 'struct k_poll_event *'
| |-ParmVarDecl 0x55dc7dc6ffd0 <col:56, col:60> col:60 num_events 'int'
| `-ParmVarDecl 0x55dc7dc70040 <col:72, col:78> col:78 timeout 's32_t':'int'
|-FunctionDecl 0x55dc7dc70348 prev 0x55dc7dc4daf8 <line:861:1, line:870:1> line:861:19 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x55dc7dc701c0 <col:26, col:48> col:48 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x55dc7dc70238 <col:56, col:60> col:60 used num_events 'int'
| |-ParmVarDecl 0x55dc7dc702a8 <col:72, col:78> col:78 used timeout 's32_t':'int'
| `-CompoundStmt 0x55dc7dc706b0 <line:862:1, line:870:1>
|   |-DoStmt 0x55dc7dc704e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc704a8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc70458 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc704c0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc70698 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:869:2, col:50>
|     `-CallExpr 0x55dc7dc70610 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x55dc7dc705f8 <col:9> 'int (*)(struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc70500 <col:9> 'int (struct k_poll_event *, int, s32_t)' Function 0x55dc7dc700e0 'z_impl_k_poll' 'int (struct k_poll_event *, int, s32_t)'
|       |-ImplicitCastExpr 0x55dc7dc70650 <col:23> 'struct k_poll_event *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc70528 <col:23> 'struct k_poll_event *' lvalue ParmVar 0x55dc7dc701c0 'events' 'struct k_poll_event *'
|       |-ImplicitCastExpr 0x55dc7dc70668 <col:31> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc70550 <col:31> 'int' lvalue ParmVar 0x55dc7dc70238 'num_events' 'int'
|       `-ImplicitCastExpr 0x55dc7dc70680 <col:43> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc70578 <col:43> 's32_t':'int' lvalue ParmVar 0x55dc7dc702a8 'timeout' 's32_t':'int'
|-FunctionDecl 0x55dc7dc707c0 <line:873:1, col:68> col:13 used z_impl_k_poll_signal_init 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x55dc7dc706f8 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
|-FunctionDecl 0x55dc7dc70918 prev 0x55dc7dc4dd00 <line:874:1, line:884:1> line:874:20 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x55dc7dc70890 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x55dc7dc70bc8 <line:875:1, line:884:1>
|   |-DoStmt 0x55dc7dc70aa0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc70a68 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc70a18 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc70a80 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc70b80 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:883:2, col:34> 'void'
|     |-ImplicitCastExpr 0x55dc7dc70b68 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc70ac0 <col:2> 'void (struct k_poll_signal *)' Function 0x55dc7dc707c0 'z_impl_k_poll_signal_init' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x55dc7dc70bb0 <col:28> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc70ae8 <col:28> 'struct k_poll_signal *' lvalue ParmVar 0x55dc7dc70890 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x55dc7dc70c98 prev 0x55dc7dc4dfb0 <line:887:1, col:69> col:13 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x55dc7dc70c10 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
|-FunctionDecl 0x55dc7dc70df0 prev 0x55dc7dc4de58 <line:888:1, line:898:1> line:888:20 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x55dc7dc70d68 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x55dc7dc71048 <line:889:1, line:898:1>
|   |-DoStmt 0x55dc7dc70f78 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc70f40 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc70ef0 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc70f58 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc71000 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:897:2, col:35> 'void'
|     |-ImplicitCastExpr 0x55dc7dc70fe8 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc70f98 <col:2> 'void (struct k_poll_signal *)' Function 0x55dc7dc70c98 'z_impl_k_poll_signal_reset' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x55dc7dc71030 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc70fc0 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x55dc7dc70d68 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x55dc7dc71218 <line:901:1, col:108> col:13 used z_impl_k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' extern
| |-ParmVarDecl 0x55dc7dc71090 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55dc7dc71108 <col:71, col:86> col:86 signaled 'unsigned int *'
| `-ParmVarDecl 0x55dc7dc71180 <col:96, col:102> col:102 result 'int *'
|-FunctionDecl 0x55dc7dc71480 prev 0x55dc7dc4e3b0 <line:902:1, line:912:1> line:902:20 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x55dc7dc712f8 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55dc7dc71370 <col:71, col:86> col:86 used signaled 'unsigned int *'
| |-ParmVarDecl 0x55dc7dc713e8 <col:96, col:102> col:102 used result 'int *'
| `-CompoundStmt 0x55dc7dc717d8 <line:903:1, line:912:1>
|   |-DoStmt 0x55dc7dc71618 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc715e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc71590 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc715f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc71750 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:911:2, col:53> 'void'
|     |-ImplicitCastExpr 0x55dc7dc71738 <col:2> 'void (*)(struct k_poll_signal *, unsigned int *, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc71638 <col:2> 'void (struct k_poll_signal *, unsigned int *, int *)' Function 0x55dc7dc71218 'z_impl_k_poll_signal_check' 'void (struct k_poll_signal *, unsigned int *, int *)'
|     |-ImplicitCastExpr 0x55dc7dc71790 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55dc7dc71660 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x55dc7dc712f8 'signal' 'struct k_poll_signal *'
|     |-ImplicitCastExpr 0x55dc7dc717a8 <col:37> 'unsigned int *' <LValueToRValue>
|     | `-DeclRefExpr 0x55dc7dc71688 <col:37> 'unsigned int *' lvalue ParmVar 0x55dc7dc71370 'signaled' 'unsigned int *'
|     `-ImplicitCastExpr 0x55dc7dc717c0 <col:47> 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc716b0 <col:47> 'int *' lvalue ParmVar 0x55dc7dc713e8 'result' 'int *'
|-FunctionDecl 0x55dc7dc71930 <line:915:1, col:80> col:12 used z_impl_k_poll_signal_raise 'int (struct k_poll_signal *, int)' extern
| |-ParmVarDecl 0x55dc7dc71820 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
| `-ParmVarDecl 0x55dc7dc71898 <col:70, col:74> col:74 result 'int'
|-FunctionDecl 0x55dc7dc71b18 prev 0x55dc7dc4eb00 <line:916:1, line:925:1> line:916:19 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x55dc7dc71a08 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55dc7dc71a80 <col:70, col:74> col:74 used result 'int'
| `-CompoundStmt 0x55dc7dc71e30 <line:917:1, line:925:1>
|   |-DoStmt 0x55dc7dc71ca8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc71c70 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc71c20 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc71c88 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc71e18 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:924:2, col:50>
|     `-CallExpr 0x55dc7dc71db0 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x55dc7dc71d98 <col:9> 'int (*)(struct k_poll_signal *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc71cc8 <col:9> 'int (struct k_poll_signal *, int)' Function 0x55dc7dc71930 'z_impl_k_poll_signal_raise' 'int (struct k_poll_signal *, int)'
|       |-ImplicitCastExpr 0x55dc7dc71de8 <col:36> 'struct k_poll_signal *' <LValueToRValue>
|       | `-DeclRefExpr 0x55dc7dc71cf0 <col:36> 'struct k_poll_signal *' lvalue ParmVar 0x55dc7dc71a08 'signal' 'struct k_poll_signal *'
|       `-ImplicitCastExpr 0x55dc7dc71e00 <col:44> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc71d18 <col:44> 'int' lvalue ParmVar 0x55dc7dc71a80 'result' 'int'
|-FunctionDecl 0x55dc7dc71ff0 <line:928:1, col:48> col:13 used z_impl_k_str_out 'void (char *, size_t)' extern
| |-ParmVarDecl 0x55dc7dc71e68 <col:30, col:37> col:37 c 'char *'
| `-ParmVarDecl 0x55dc7dc71ed8 <col:40, col:47> col:47 n 'size_t':'unsigned long'
|-FunctionDecl 0x55dc7dc721b8 <line:929:1, line:939:1> line:929:20 k_str_out 'void (char *, size_t)' static inline
| |-ParmVarDecl 0x55dc7dc720b8 <col:30, col:37> col:37 used c 'char *'
| |-ParmVarDecl 0x55dc7dc72128 <col:40, col:47> col:47 used n 'size_t':'unsigned long'
| `-CompoundStmt 0x55dc7dc724b8 <line:930:1, line:939:1>
|   |-DoStmt 0x55dc7dc72348 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc72310 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc722c0 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc72328 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55dc7dc72450 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:938:2, col:23> 'void'
|     |-ImplicitCastExpr 0x55dc7dc72438 <col:2> 'void (*)(char *, size_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55dc7dc72368 <col:2> 'void (char *, size_t)' Function 0x55dc7dc71ff0 'z_impl_k_str_out' 'void (char *, size_t)'
|     |-ImplicitCastExpr 0x55dc7dc72488 <col:19> 'char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55dc7dc72390 <col:19> 'char *' lvalue ParmVar 0x55dc7dc720b8 'c' 'char *'
|     `-ImplicitCastExpr 0x55dc7dc724a0 <col:22> 'size_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55dc7dc723b8 <col:22> 'size_t':'unsigned long' lvalue ParmVar 0x55dc7dc72128 'n' 'size_t':'unsigned long'
|-FunctionDecl 0x55dc7dc72590 <line:942:1, col:59> col:12 used z_impl_k_float_disable 'int (struct k_thread *)' extern
| `-ParmVarDecl 0x55dc7dc72500 <col:35, col:53> col:53 thread 'struct k_thread *'
|-FunctionDecl 0x55dc7dc726f0 prev 0x55dc7dc53f18 <line:943:1, line:952:1> line:943:19 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x55dc7dc72660 <col:35, col:53> col:53 used thread 'struct k_thread *'
| `-CompoundStmt 0x55dc7dc739b0 <line:944:1, line:952:1>
|   |-DoStmt 0x55dc7dc73898 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55dc7dc73860 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55dc7dc73810 <col:2, col:39>
|   | `-IntegerLiteral 0x55dc7dc73878 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55dc7dc73998 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:951:2, col:38>
|     `-CallExpr 0x55dc7dc73950 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x55dc7dc73938 <col:9> 'int (*)(struct k_thread *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55dc7dc738b8 <col:9> 'int (struct k_thread *)' Function 0x55dc7dc72590 'z_impl_k_float_disable' 'int (struct k_thread *)'
|       `-ImplicitCastExpr 0x55dc7dc73980 <col:32> 'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x55dc7dc738e0 <col:32> 'struct k_thread *' lvalue ParmVar 0x55dc7dc72660 'thread' 'struct k_thread *'
|-FunctionDecl 0x55dc7dc73ab0 </vagrant/apps/plc_4out/./_build/arm-tfm/install/export/tfm/inc/tfm_gpio_veneers.h:11:1, col:32> col:10 tfm_gpio_read_all 'uint32_t (void)'
|-FunctionDecl 0x55dc7dc73c80 <line:12:1, col:40> col:9 tfm_gpio_write_all 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x55dc7dc73b80 <col:28, col:37> col:37 out 'uint32_t':'unsigned int'
|-FunctionDecl 0x55dc7dc73dc0 <line:13:1, col:46> col:9 tfm_gpio_enable_outputs 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x55dc7dc73d38 <col:33, col:42> col:42 pins 'uint32_t':'unsigned int'
|-FunctionDecl 0x55dc7dc73f80 <line:14:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55dc7dc73e78 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55dc7dc740c0 <line:16:1, col:43> col:9 tfm_gpio_enable_output 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55dc7dc74038 <col:32, col:40> col:40 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55dc7dc74200 <line:17:1, col:33> col:9 tfm_gpio_set 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55dc7dc74178 <col:22, col:30> col:30 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55dc7dc74340 <line:18:1, col:35> col:9 tfm_gpio_clear 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55dc7dc742b8 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55dc7dc74480 <line:19:1, col:37> col:9 tfm_gpio_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55dc7dc743f8 <col:26, col:34> col:34 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55dc7dc745c0 prev 0x55dc7dc73f80 <line:20:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55dc7dc74538 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-RecordDecl 0x55dc7dc74668 <line:34:9, line:38:1> line:34:9 struct definition
| |-FieldDecl 0x55dc7dc74720 <line:35:5, col:13> col:13 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x55dc7dc74778 <line:36:5, col:13> col:13 polarity 'uint8_t':'unsigned char'
| `-FieldDecl 0x55dc7dc74860 <line:37:5, col:21> col:12 cb 'void (*)(void)'
|-TypedefDecl 0x55dc7dc74900 <line:34:1, line:38:3> col:3 referenced gpio_int_config 'struct gpio_int_config':'gpio_int_config'
| `-ElaboratedType 0x55dc7dc748b0 'struct gpio_int_config' sugar
|   `-RecordType 0x55dc7dc746f0 'gpio_int_config'
|     `-Record 0x55dc7dc74668 ''
|-FunctionDecl 0x55dc7dc74b80 <line:40:1, col:68> col:9 tfm_gpio_interrupt_enable 'uint8_t (uint8_t, gpio_int_config *)'
| |-ParmVarDecl 0x55dc7dc74980 <col:35, col:43> col:43 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x55dc7dc74a68 <col:48, col:65> col:65 cfg 'gpio_int_config *'
|-FunctionDecl 0x55dc7dc74cc8 <line:41:1, col:47> col:9 tfm_gpio_interrupt_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55dc7dc74c40 <col:36, col:44> col:44 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x55dc7dc74d88 </vagrant/apps/plc_4out/./inc/plc_platform.h:5:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x55dc7da669f0 'short'
|-TypedefDecl 0x55dc7dc74df8 <line:6:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x55dc7da66a70 'unsigned char'
|-EnumDecl 0x55dc7dc74e50 <line:25:9, line:29:1> line:25:9
| |-EnumConstantDecl 0x55dc7dc74f30 <line:26:2, col:6> col:2 R 'int'
| | `-IntegerLiteral 0x55dc7dc74f10 <col:6> 'int' 2
| |-EnumConstantDecl 0x55dc7dc74f98 <line:27:2, col:6> col:2 G 'int'
| | `-IntegerLiteral 0x55dc7dc74f78 <col:6> 'int' 3
| `-EnumConstantDecl 0x55dc7dc75000 <line:28:2, col:6> col:2 B 'int'
|   `-IntegerLiteral 0x55dc7dc74fe0 <col:6> 'int' 4
|-TypedefDecl 0x55dc7dc750a0 <line:25:1, line:29:3> col:3 referenced LED 'enum LED':'LED'
| `-ElaboratedType 0x55dc7dc75050 'enum LED' sugar
|   `-EnumType 0x55dc7dc74ef0 'LED'
|     `-Enum 0x55dc7dc74e50 ''
|-FunctionDecl 0x55dc7dc752d0 <line:31:1, col:56> col:6 enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x55dc7dc75148 <col:25, col:34> col:34 pins 'uint8_t *'
| `-ParmVarDecl 0x55dc7dc751b8 <col:40, col:48> col:48 num_pins 'uint8_t':'unsigned char'
|-FunctionDecl 0x55dc7dc75490 <line:33:1, col:35> col:6 enable_pin_output 'void (uint8_t)'
| `-ParmVarDecl 0x55dc7dc75390 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55dc7dc755c8 <line:35:1, col:24> col:6 read_in_table 'void (void)'
|-FunctionDecl 0x55dc7dc756f8 <line:37:1, col:26> col:6 write_out_table 'void (void)'
|-FunctionDecl 0x55dc7dc77468 <line:41:1, col:25> col:6 set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x55dc7dc773e0 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
| `-FullComment 0x55dc7dcfd380 <line:39:4, col:42>
|   `-ParagraphComment 0x55dc7dcfd350 <col:4, col:42>
|     `-TextComment 0x55dc7dcfd320 <col:4, col:42> Text="************** For User ***************"
|-FunctionDecl 0x55dc7dc775a8 <line:43:1, col:25> col:6 clr_pin 'void (uint8_t)'
| `-ParmVarDecl 0x55dc7dc77520 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55dc7dc77800 <line:45:1, col:37> col:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x55dc7dc77660 <col:16, col:24> col:24 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x55dc7dc776f0 <col:29, col:34> col:34 val 'BOOL':'unsigned char'
|-FunctionDecl 0x55dc7dc77980 <line:47:1, col:26> col:6 read_pin 'BOOL (uint8_t)'
| `-ParmVarDecl 0x55dc7dc778c0 <col:15, col:23> col:23 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55dc7dc77b60 <line:49:1, col:22> col:6 LED_on 'void (LED)'
| `-ParmVarDecl 0x55dc7dc77a60 <col:13, col:17> col:17 color 'LED':'LED'
|-FunctionDecl 0x55dc7dc77ca0 <line:51:1, col:23> col:6 LED_off 'void (LED)'
| `-ParmVarDecl 0x55dc7dc77c18 <col:14, col:18> col:18 color 'LED':'LED'
|-FunctionDecl 0x55dc7dc77e60 <line:53:1, col:24> col:6 read_LED 'BOOL (LED)'
| `-ParmVarDecl 0x55dc7dc77d58 <col:15, col:19> col:19 color 'LED':'LED'
|-FunctionDecl 0x55dc7dc780a0 <line:55:1, col:33> col:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x55dc7dc77f18 <col:16, col:20> col:20 color 'LED':'LED'
| `-ParmVarDecl 0x55dc7dc77f88 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55dc7dc781e8 <line:57:1, col:40> col:6 read_button_active_low 'BOOL (uint8_t)'
| `-ParmVarDecl 0x55dc7dc78160 <col:29, col:37> col:37 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x55dc7dc782a8 prev 0x55dc7dc74d88 </vagrant/apps/plc_4out/./inc/ladder.h:7:1, col:22> col:22 referenced SWORD 'short'
| `-BuiltinType 0x55dc7da669f0 'short'
|-TypedefDecl 0x55dc7dc78318 prev 0x55dc7dc74df8 <line:8:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x55dc7da66a70 'unsigned char'
|-VarDecl 0x55dc7dc78458 <line:13:1, col:99> col:16 output_pins 'uint8_t [5]' static cinit
| |-InitListExpr 0x55dc7dc78618 <col:68, col:99> 'uint8_t [5]'
| | |-ImplicitCastExpr 0x55dc7dc78658 </vagrant/apps/plc_4out/./inc/plc_platform.h:11:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x55dc7dc78510 <col:14> 'int' 3
| | |-ImplicitCastExpr 0x55dc7dc78678 <line:16:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x55dc7dc78530 <col:14> 'int' 8
| | |-ImplicitCastExpr 0x55dc7dc786a0 <line:17:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x55dc7dc78550 <col:14> 'int' 9
| | |-ImplicitCastExpr 0x55dc7dc786d8 <line:18:15> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x55dc7dc78570 <col:15> 'int' 10
| | `-ImplicitCastExpr 0x55dc7dc786f0 <line:19:15> 'uint8_t':'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x55dc7dc78590 <col:15> 'int' 11
| `-SectionAttr 0x55dc7dc784b8 </vagrant/apps/plc_4out/./inc/ladder.h:13:45, col:62> section ".rodata"
|-FunctionDecl 0x55dc7dc78888 <line:18:1, col:19> col:6 PlcCycle 'void (void)'
| `-FullComment 0x55dc7dcfd450 <line:15:4, col:57>
|   `-ParagraphComment 0x55dc7dcfd420 <col:4, col:57>
|     `-TextComment 0x55dc7dcfd3f0 <col:4, col:57> Text="************ DO NOT EDIT THESE FUNCTIONS *************"
|-FunctionDecl 0x55dc7dc789d8 <line:21:1, col:36> col:6 plc_callback 'void (struct k_timer *)'
| `-ParmVarDecl 0x55dc7dc78950 <col:19, col:35> col:35 t 'struct k_timer *'
|-FunctionDecl 0x55dc7dc78b10 <line:24:1, col:19> col:6 init_plc 'void (void)'
|-FunctionDecl 0x55dc7dc78d20 <line:31:1, col:27> col:6 used Read_U_b_XMStart 'BOOL (void)'
| `-FullComment 0x55dc7dcfd520 <line:29:4, col:57>
|   `-ParagraphComment 0x55dc7dcfd4f0 <col:4, col:57>
|     `-TextComment 0x55dc7dcfd4c0 <col:4, col:57> Text="*********** FUNCTIONS CREATED BY LDMICRO *************"
|-FunctionDecl 0x55dc7dc78e50 <line:33:1, col:25> col:6 used Read_U_b_XStop 'BOOL (void)'
|-FunctionDecl 0x55dc7dc78f80 <line:35:1, col:24> col:6 Read_U_b_YLED 'BOOL (void)'
|-FunctionDecl 0x55dc7dc790f0 <line:36:1, col:27> col:6 used Write_U_b_YLED 'void (BOOL)'
| `-ParmVarDecl 0x55dc7dc79030 <col:21, col:26> col:26 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55dc7dc79228 <line:38:1, col:25> col:6 Read_U_b_YOut0 'BOOL (void)'
|-FunctionDecl 0x55dc7dc7a4e0 <line:39:1, col:28> col:6 used Write_U_b_YOut0 'void (BOOL)'
| `-ParmVarDecl 0x55dc7dc792d8 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55dc7dc7a618 <line:41:1, col:25> col:6 Read_U_b_YOut1 'BOOL (void)'
|-FunctionDecl 0x55dc7dc7a750 <line:42:1, col:28> col:6 used Write_U_b_YOut1 'void (BOOL)'
| `-ParmVarDecl 0x55dc7dc7a6c8 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55dc7dc7a888 <line:44:1, col:25> col:6 Read_U_b_YOut2 'BOOL (void)'
|-FunctionDecl 0x55dc7dc7a9c0 <line:45:1, col:28> col:6 used Write_U_b_YOut2 'void (BOOL)'
| `-ParmVarDecl 0x55dc7dc7a938 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55dc7dc7aaf8 <line:47:1, col:25> col:6 Read_U_b_YOut3 'BOOL (void)'
|-FunctionDecl 0x55dc7dc7ac30 <line:48:1, col:28> col:6 used Write_U_b_YOut3 'void (BOOL)'
| `-ParmVarDecl 0x55dc7dc7aba8 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-VarDecl 0x55dc7dc7ace8 <./src/4Outs_v2.c:26:16, line:43:23> col:13 used I_b_mcr 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x55dc7dc7ad68 <col:23> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x55dc7dc7ad48 <col:23> 'int' 0
|-VarDecl 0x55dc7dc7ad90 <line:26:16, line:46:28> col:13 used I_b_rung_top 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x55dc7dc7ae10 <col:28> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x55dc7dc7adf0 <col:28> 'int' 0
|-VarDecl 0x55dc7dc7ae38 <line:26:16, line:49:31> col:13 used I_b_parOut_0000 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x55dc7dc7aeb8 <col:31> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x55dc7dc7ae98 <col:31> 'int' 0
|-VarDecl 0x55dc7dc7aee0 <line:26:16, line:52:32> col:13 used I_b_parThis_0000 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x55dc7dc7af60 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x55dc7dc7af40 <col:32> 'int' 0
|-FunctionDecl 0x55dc7dc7b008 prev 0x55dc7dc78d20 <line:57:7, col:40> col:19 used Read_U_b_XMStart 'BOOL (void)' extern
|-VarDecl 0x55dc7dc7b0b8 <line:26:16, line:59:27> col:13 used U_b_RMaster 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x55dc7dc7b138 <col:27> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x55dc7dc7b118 <col:27> 'int' 0
|-FunctionDecl 0x55dc7dc7b1e0 prev 0x55dc7dc78e50 <line:64:7, col:38> col:19 used Read_U_b_XStop 'BOOL (void)' extern
|-VarDecl 0x55dc7dc7b290 <line:26:16, line:66:26> col:13 used U_b_RDone3 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x55dc7dc7b310 <col:26> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x55dc7dc7b2f0 <col:26> 'int' 0
|-FunctionDecl 0x55dc7dc7b3b8 prev 0x55dc7dc78f80 <line:71:7, col:30> col:12 Read_U_b_YLED 'BOOL (void)'
|-FunctionDecl 0x55dc7dc7b4f0 prev 0x55dc7dc790f0 <line:72:7, col:33> col:12 used Write_U_b_YLED 'void (BOOL)'
| `-ParmVarDecl 0x55dc7dc7b468 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-VarDecl 0x55dc7dc7b5d0 <line:26:16, line:74:23> col:14 used U_i_T0 'SWORD':'short' static cinit
| `-ImplicitCastExpr 0x55dc7dc7b650 <col:23> 'SWORD':'short' <IntegralCast>
|   `-IntegerLiteral 0x55dc7dc7b630 <col:23> 'int' 0
|-VarDecl 0x55dc7dc7b678 <line:26:16, line:75:26> col:13 used U_b_RDone0 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x55dc7dc7b6f8 <col:26> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x55dc7dc7b6d8 <col:26> 'int' 0
|-VarDecl 0x55dc7dc7b720 <line:26:16, line:78:23> col:14 used U_i_T1 'SWORD':'short' static cinit
| `-ImplicitCastExpr 0x55dc7dc7b7a0 <col:23> 'SWORD':'short' <IntegralCast>
|   `-IntegerLiteral 0x55dc7dc7b780 <col:23> 'int' 0
|-VarDecl 0x55dc7dc7b7c8 <line:26:16, line:79:26> col:13 used U_b_RDone1 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x55dc7dc7b848 <col:26> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x55dc7dc7b828 <col:26> 'int' 0
|-VarDecl 0x55dc7dc7b870 <line:26:16, line:82:23> col:14 used U_i_T2 'SWORD':'short' static cinit
| `-ImplicitCastExpr 0x55dc7dc7b8f0 <col:23> 'SWORD':'short' <IntegralCast>
|   `-IntegerLiteral 0x55dc7dc7b8d0 <col:23> 'int' 0
|-VarDecl 0x55dc7dc7b918 <line:26:16, line:83:26> col:13 used U_b_RDone2 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x55dc7dc7b998 <col:26> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x55dc7dc7b978 <col:26> 'int' 0
|-VarDecl 0x55dc7dc7b9c0 <line:26:16, line:86:23> col:14 used U_i_T3 'SWORD':'short' static cinit
| `-ImplicitCastExpr 0x55dc7dc7ba40 <col:23> 'SWORD':'short' <IntegralCast>
|   `-IntegerLiteral 0x55dc7dc7ba20 <col:23> 'int' 0
|-FunctionDecl 0x55dc7dc7bae8 prev 0x55dc7dc79228 <line:89:7, col:31> col:12 Read_U_b_YOut0 'BOOL (void)'
|-FunctionDecl 0x55dc7dc7bc20 prev 0x55dc7dc7a4e0 <line:90:7, col:34> col:12 used Write_U_b_YOut0 'void (BOOL)'
| `-ParmVarDecl 0x55dc7dc7bb98 <col:28, col:33> col:33 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55dc7dc7bd58 prev 0x55dc7dc7a618 <line:94:7, col:31> col:12 Read_U_b_YOut1 'BOOL (void)'
|-FunctionDecl 0x55dc7dc7be90 prev 0x55dc7dc7a750 <line:95:7, col:34> col:12 used Write_U_b_YOut1 'void (BOOL)'
| `-ParmVarDecl 0x55dc7dc7be08 <col:28, col:33> col:33 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55dc7dc7bfc8 prev 0x55dc7dc7a888 <line:99:7, col:31> col:12 Read_U_b_YOut2 'BOOL (void)'
|-FunctionDecl 0x55dc7dc7c100 prev 0x55dc7dc7a9c0 <line:100:7, col:34> col:12 used Write_U_b_YOut2 'void (BOOL)'
| `-ParmVarDecl 0x55dc7dc7c078 <col:28, col:33> col:33 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55dc7dc7c238 prev 0x55dc7dc7aaf8 <line:104:7, col:31> col:12 Read_U_b_YOut3 'BOOL (void)'
|-FunctionDecl 0x55dc7dc7c370 prev 0x55dc7dc7ac30 <line:105:7, col:34> col:12 used Write_U_b_YOut3 'void (BOOL)'
| `-ParmVarDecl 0x55dc7dc7c2e8 <col:28, col:33> col:33 v 'BOOL':'unsigned char'
`-FunctionDecl 0x55dc7dc7e740 prev 0x55dc7dc78888 <line:112:1, line:335:1> line:112:6 PlcCycle 'void (void)'
  `-CompoundStmt 0x55dc7dbda980 <line:113:1, line:335:1>
    |-BinaryOperator 0x55dc7dc7e840 <line:45:26, line:114:19> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dc7e7e0 <line:45:26> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ace8 'I_b_mcr' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dc7e828 <line:114:19> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x55dc7dc7e808 <col:19> 'int' 1
    |-BinaryOperator 0x55dc7dc7e8d0 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dc7e868 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dc7e8b8 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dc7e890 <col:24> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ace8 'I_b_mcr' 'BOOL':'unsigned char'
    |-BinaryOperator 0x55dc7dc7e958 <line:51:34, line:121:27> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dc7e8f8 <line:51:34> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ae38 'I_b_parOut_0000' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dc7e940 <line:121:27> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x55dc7dc7e920 <col:27> 'int' 0
    |-BinaryOperator 0x55dc7dc7e9e8 <line:54:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dc7e980 <line:54:35> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7aee0 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dc7e9d0 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dc7e9a8 <col:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x55dc7dc7eb98 <line:123:5, line:125:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dc7ead8 <line:123:8, col:26> 'int' prefix '!'
    | | `-CallExpr 0x55dc7dc7eab0 <col:9, col:26> 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dc7ea98 <col:9> 'BOOL (*)(void)' <FunctionToPointerDecay>
    | |     `-DeclRefExpr 0x55dc7dc7ea10 <col:9> 'BOOL (void)' Function 0x55dc7dc7b008 'Read_U_b_XMStart' 'BOOL (void)'
    | |-CompoundStmt 0x55dc7dc7eb80 <col:29, line:125:5>
    | | `-BinaryOperator 0x55dc7dc7eb58 <line:54:35, line:124:32> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dc7eaf8 <line:54:35> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7aee0 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dc7eb40 <line:124:32> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dc7eb20 <col:32> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dc7ecb0 <line:127:5, line:129:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x55dc7dc7ebf8 <line:53:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x55dc7dc7ebd0 <col:33> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7aee0 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dc7ec98 <line:127:33, line:129:5>
    | | `-BinaryOperator 0x55dc7dc7ec70 <line:51:34, line:128:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dc7ec10 <line:51:34> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ae38 'I_b_parOut_0000' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dc7ec58 <line:128:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dc7ec38 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x55dc7dc7ed50 <line:54:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dc7ece8 <line:54:35> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7aee0 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dc7ed38 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dc7ed10 <col:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x55dc7dc7ee78 <line:131:5, line:133:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dc7edb8 <line:131:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x55dc7dc7eda0 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x55dc7dc7ed78 <col:28> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b0b8 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dc7ee60 <line:131:29, line:133:5>
    | | `-BinaryOperator 0x55dc7dc7ee38 <line:54:35, line:132:32> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dc7edd8 <line:54:35> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7aee0 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dc7ee20 <line:132:32> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dc7ee00 <col:32> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dc7ef90 <line:135:5, line:137:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x55dc7dc7eed8 <line:53:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x55dc7dc7eeb0 <col:33> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7aee0 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dc7ef78 <line:135:33, line:137:5>
    | | `-BinaryOperator 0x55dc7dc7ef50 <line:51:34, line:136:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dc7eef0 <line:51:34> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ae38 'I_b_parOut_0000' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dc7ef38 <line:136:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dc7ef18 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x55dc7dc7f030 <line:48:31, line:50:32> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dc7efc8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dc7f018 <line:50:32> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dc7eff0 <col:32> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ae38 'I_b_parOut_0000' 'BOOL':'unsigned char'
    |-IfStmt 0x55dc7dc7f160 <line:140:5, line:142:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-CallExpr 0x55dc7dc7f098 <line:140:8, col:23> 'BOOL':'unsigned char'
    | | `-ImplicitCastExpr 0x55dc7dc7f080 <col:8> 'BOOL (*)(void)' <FunctionToPointerDecay>
    | |   `-DeclRefExpr 0x55dc7dc7f058 <col:8> 'BOOL (void)' Function 0x55dc7dc7b1e0 'Read_U_b_XStop' 'BOOL (void)'
    | |-CompoundStmt 0x55dc7dc7f148 <col:26, line:142:5>
    | | `-BinaryOperator 0x55dc7dc7f120 <line:48:31, line:141:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dc7f0c0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dc7f108 <line:141:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dc7f0e8 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dc7f278 <line:144:5, line:146:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x55dc7dc7f1c0 <line:67:27> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x55dc7dc7f198 <col:27> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b290 'U_b_RDone3' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dc7f260 <line:144:27, line:146:5>
    | | `-BinaryOperator 0x55dc7dc7f238 <line:48:31, line:145:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dc7f1d8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dc7f220 <line:145:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dc7f200 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-BinaryOperator 0x55dc7dc7f318 <line:61:30, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dc7f2b0 <line:61:30> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b0b8 'U_b_RMaster' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dc7f300 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dc7f2d8 <col:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x55dc7dc7f3a8 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dc7f340 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dc7f390 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dc7f368 <col:24> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ace8 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x55dc7dc7f4d0 <line:156:5, line:158:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dc7f410 <line:156:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x55dc7dc7f3f8 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x55dc7dc7f3d0 <col:28> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b0b8 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dc7f4b8 <line:156:29, line:158:5>
    | | `-BinaryOperator 0x55dc7dc7f490 <line:48:31, line:157:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dc7f430 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dc7f478 <line:157:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dc7f458 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-CallExpr 0x55dc7dc7f5d0 <line:160:5, col:39> 'void'
    | |-ImplicitCastExpr 0x55dc7dc7f5b8 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55dc7dc7f508 <col:5> 'void (BOOL)' Function 0x55dc7dc7b4f0 'Write_U_b_YLED' 'void (BOOL)'
    | `-ImplicitCastExpr 0x55dc7dc7f600 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dc7f530 <col:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x55dc7dc7f680 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dc7f618 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dc7f668 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dc7f640 <col:24> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ace8 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x55dc7dc7f7a8 <line:168:5, line:170:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dc7f6e8 <line:168:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x55dc7dc7f6d0 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x55dc7dc7f6a8 <col:28> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b0b8 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dc7f790 <line:168:29, line:170:5>
    | | `-BinaryOperator 0x55dc7dc7f768 <line:48:31, line:169:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dc7f708 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dc7f750 <line:169:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dc7f730 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dc7faa0 <line:172:5, line:179:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x55dc7dc7f808 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x55dc7dc7f7e0 <col:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dc7f9e8 <line:172:29, line:177:5>
    | | `-IfStmt 0x55dc7dc7f9b0 <line:173:9, line:176:9>
    | |   |-<<<NULL>>>
    | |   |-<<<NULL>>>
    | |   |-BinaryOperator 0x55dc7dc7f898 <line:173:12, col:21> 'int' '<'
    | |   | |-ImplicitCastExpr 0x55dc7dc7f880 <col:12> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x55dc7dc7f868 <col:12> 'SWORD':'short' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x55dc7dc7f820 <col:12> 'SWORD':'short' lvalue Var 0x55dc7dc7b5d0 'U_i_T0' 'SWORD':'short'
    | |   | `-IntegerLiteral 0x55dc7dc7f848 <col:21> 'int' 500
    | |   |-CompoundStmt 0x55dc7dc7f990 <col:26, line:176:9>
    | |   | |-UnaryOperator 0x55dc7dc7f8e8 <line:174:13, col:19> 'SWORD':'short' postfix '++'
    | |   | | `-DeclRefExpr 0x55dc7dc7f8c0 <col:13> 'SWORD':'short' lvalue Var 0x55dc7dc7b5d0 'U_i_T0' 'SWORD':'short'
    | |   | `-BinaryOperator 0x55dc7dc7f968 <line:48:31, line:175:32> 'BOOL':'unsigned char' '='
    | |   |   |-DeclRefExpr 0x55dc7dc7f908 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   |   `-ImplicitCastExpr 0x55dc7dc7f950 <line:175:32> 'BOOL':'unsigned char' <IntegralCast>
    | |   |     `-IntegerLiteral 0x55dc7dc7f930 <col:32> 'int' 0
    | |   `-<<<NULL>>>
    | `-CompoundStmt 0x55dc7dc7fa88 <line:177:12, line:179:5>
    |   `-BinaryOperator 0x55dc7dc7fa60 <line:178:9, col:18> 'SWORD':'short' '='
    |     |-DeclRefExpr 0x55dc7dc7fa00 <col:9> 'SWORD':'short' lvalue Var 0x55dc7dc7b5d0 'U_i_T0' 'SWORD':'short'
    |     `-ImplicitCastExpr 0x55dc7dc7fa48 <col:18> 'SWORD':'short' <IntegralCast>
    |       `-IntegerLiteral 0x55dc7dc7fa28 <col:18> 'int' 0
    |-BinaryOperator 0x55dc7dc7fb40 <line:77:29, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dc7fad8 <line:77:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b678 'U_b_RDone0' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dc7fb28 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dc7fb00 <col:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x55dc7dc7fbd0 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dc7fb68 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dc7fbb8 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dc7fb90 <col:24> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ace8 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x55dc7dc7fcf8 <line:189:5, line:191:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dc7fc38 <line:189:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x55dc7dc7fc20 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x55dc7dc7fbf8 <col:28> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b0b8 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dc7fce0 <line:189:29, line:191:5>
    | | `-BinaryOperator 0x55dc7dc7fcb8 <line:48:31, line:190:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dc7fc58 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dc7fca0 <line:190:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dc7fc80 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dc7fe30 <line:193:5, line:195:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dc7fd70 <line:193:8, line:76:27> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x55dc7dc7fd58 <col:27> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x55dc7dc7fd30 <col:27> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b678 'U_b_RDone0' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dc7fe18 <line:193:28, line:195:5>
    | | `-BinaryOperator 0x55dc7dc7fdf0 <line:48:31, line:194:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dc7fd90 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dc7fdd8 <line:194:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dc7fdb8 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dc80128 <line:197:5, line:204:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x55dc7dc7fe90 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x55dc7dc7fe68 <col:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dc80070 <line:197:29, line:202:5>
    | | `-IfStmt 0x55dc7dc80038 <line:198:9, line:201:9>
    | |   |-<<<NULL>>>
    | |   |-<<<NULL>>>
    | |   |-BinaryOperator 0x55dc7dc7ff20 <line:198:12, col:21> 'int' '<'
    | |   | |-ImplicitCastExpr 0x55dc7dc7ff08 <col:12> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x55dc7dc7fef0 <col:12> 'SWORD':'short' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x55dc7dc7fea8 <col:12> 'SWORD':'short' lvalue Var 0x55dc7dc7b720 'U_i_T1' 'SWORD':'short'
    | |   | `-IntegerLiteral 0x55dc7dc7fed0 <col:21> 'int' 500
    | |   |-CompoundStmt 0x55dc7dc80018 <col:26, line:201:9>
    | |   | |-UnaryOperator 0x55dc7dc7ff70 <line:199:13, col:19> 'SWORD':'short' postfix '++'
    | |   | | `-DeclRefExpr 0x55dc7dc7ff48 <col:13> 'SWORD':'short' lvalue Var 0x55dc7dc7b720 'U_i_T1' 'SWORD':'short'
    | |   | `-BinaryOperator 0x55dc7dc7fff0 <line:48:31, line:200:32> 'BOOL':'unsigned char' '='
    | |   |   |-DeclRefExpr 0x55dc7dc7ff90 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   |   `-ImplicitCastExpr 0x55dc7dc7ffd8 <line:200:32> 'BOOL':'unsigned char' <IntegralCast>
    | |   |     `-IntegerLiteral 0x55dc7dc7ffb8 <col:32> 'int' 0
    | |   `-<<<NULL>>>
    | `-CompoundStmt 0x55dc7dc80110 <line:202:12, line:204:5>
    |   `-BinaryOperator 0x55dc7dc800e8 <line:203:9, col:18> 'SWORD':'short' '='
    |     |-DeclRefExpr 0x55dc7dc80088 <col:9> 'SWORD':'short' lvalue Var 0x55dc7dc7b720 'U_i_T1' 'SWORD':'short'
    |     `-ImplicitCastExpr 0x55dc7dc800d0 <col:18> 'SWORD':'short' <IntegralCast>
    |       `-IntegerLiteral 0x55dc7dc800b0 <col:18> 'int' 0
    |-BinaryOperator 0x55dc7dc801c8 <line:81:29, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dc80160 <line:81:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b7c8 'U_b_RDone1' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dc801b0 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dc80188 <col:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x55dc7dc80258 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dc801f0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dc80240 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dc80218 <col:24> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ace8 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x55dc7dc80380 <line:214:5, line:216:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dc802c0 <line:214:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x55dc7dc802a8 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x55dc7dc80280 <col:28> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b0b8 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dc80368 <line:214:29, line:216:5>
    | | `-BinaryOperator 0x55dc7dc80340 <line:48:31, line:215:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dc802e0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dc80328 <line:215:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dc80308 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dc804b8 <line:218:5, line:220:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dc803f8 <line:218:8, line:80:27> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x55dc7dc803e0 <col:27> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x55dc7dc803b8 <col:27> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b7c8 'U_b_RDone1' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dc804a0 <line:218:28, line:220:5>
    | | `-BinaryOperator 0x55dc7dc80478 <line:48:31, line:219:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dc80418 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dc80460 <line:219:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dc80440 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dbd9048 <line:222:5, line:229:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x55dc7dc80518 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x55dc7dc804f0 <col:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dc806f8 <line:222:29, line:227:5>
    | | `-IfStmt 0x55dc7dc806c0 <line:223:9, line:226:9>
    | |   |-<<<NULL>>>
    | |   |-<<<NULL>>>
    | |   |-BinaryOperator 0x55dc7dc805a8 <line:223:12, col:21> 'int' '<'
    | |   | |-ImplicitCastExpr 0x55dc7dc80590 <col:12> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x55dc7dc80578 <col:12> 'SWORD':'short' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x55dc7dc80530 <col:12> 'SWORD':'short' lvalue Var 0x55dc7dc7b870 'U_i_T2' 'SWORD':'short'
    | |   | `-IntegerLiteral 0x55dc7dc80558 <col:21> 'int' 500
    | |   |-CompoundStmt 0x55dc7dc806a0 <col:26, line:226:9>
    | |   | |-UnaryOperator 0x55dc7dc805f8 <line:224:13, col:19> 'SWORD':'short' postfix '++'
    | |   | | `-DeclRefExpr 0x55dc7dc805d0 <col:13> 'SWORD':'short' lvalue Var 0x55dc7dc7b870 'U_i_T2' 'SWORD':'short'
    | |   | `-BinaryOperator 0x55dc7dc80678 <line:48:31, line:225:32> 'BOOL':'unsigned char' '='
    | |   |   |-DeclRefExpr 0x55dc7dc80618 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   |   `-ImplicitCastExpr 0x55dc7dc80660 <line:225:32> 'BOOL':'unsigned char' <IntegralCast>
    | |   |     `-IntegerLiteral 0x55dc7dc80640 <col:32> 'int' 0
    | |   `-<<<NULL>>>
    | `-CompoundStmt 0x55dc7dbd9030 <line:227:12, line:229:5>
    |   `-BinaryOperator 0x55dc7dbd9008 <line:228:9, col:18> 'SWORD':'short' '='
    |     |-DeclRefExpr 0x55dc7dc80710 <col:9> 'SWORD':'short' lvalue Var 0x55dc7dc7b870 'U_i_T2' 'SWORD':'short'
    |     `-ImplicitCastExpr 0x55dc7dbd8ff0 <col:18> 'SWORD':'short' <IntegralCast>
    |       `-IntegerLiteral 0x55dc7dbd8fd0 <col:18> 'int' 0
    |-BinaryOperator 0x55dc7dbd90e8 <line:85:29, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dbd9080 <line:85:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b918 'U_b_RDone2' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dbd90d0 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dbd90a8 <col:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x55dc7dbd9178 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dbd9110 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dbd9160 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dbd9138 <col:24> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ace8 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x55dc7dbd92a0 <line:239:5, line:241:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dbd91e0 <line:239:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x55dc7dbd91c8 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x55dc7dbd91a0 <col:28> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b0b8 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dbd9288 <line:239:29, line:241:5>
    | | `-BinaryOperator 0x55dc7dbd9260 <line:48:31, line:240:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dbd9200 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dbd9248 <line:240:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dbd9228 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dbd93d8 <line:243:5, line:245:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dbd9318 <line:243:8, line:84:27> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x55dc7dbd9300 <col:27> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x55dc7dbd92d8 <col:27> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b918 'U_b_RDone2' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dbd93c0 <line:243:28, line:245:5>
    | | `-BinaryOperator 0x55dc7dbd9398 <line:48:31, line:244:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dbd9338 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dbd9380 <line:244:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dbd9360 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dbd96d0 <line:247:5, line:254:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x55dc7dbd9438 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x55dc7dbd9410 <col:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dbd9618 <line:247:29, line:252:5>
    | | `-IfStmt 0x55dc7dbd95e0 <line:248:9, line:251:9>
    | |   |-<<<NULL>>>
    | |   |-<<<NULL>>>
    | |   |-BinaryOperator 0x55dc7dbd94c8 <line:248:12, col:21> 'int' '<'
    | |   | |-ImplicitCastExpr 0x55dc7dbd94b0 <col:12> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x55dc7dbd9498 <col:12> 'SWORD':'short' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x55dc7dbd9450 <col:12> 'SWORD':'short' lvalue Var 0x55dc7dc7b9c0 'U_i_T3' 'SWORD':'short'
    | |   | `-IntegerLiteral 0x55dc7dbd9478 <col:21> 'int' 500
    | |   |-CompoundStmt 0x55dc7dbd95c0 <col:26, line:251:9>
    | |   | |-UnaryOperator 0x55dc7dbd9518 <line:249:13, col:19> 'SWORD':'short' postfix '++'
    | |   | | `-DeclRefExpr 0x55dc7dbd94f0 <col:13> 'SWORD':'short' lvalue Var 0x55dc7dc7b9c0 'U_i_T3' 'SWORD':'short'
    | |   | `-BinaryOperator 0x55dc7dbd9598 <line:48:31, line:250:32> 'BOOL':'unsigned char' '='
    | |   |   |-DeclRefExpr 0x55dc7dbd9538 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   |   `-ImplicitCastExpr 0x55dc7dbd9580 <line:250:32> 'BOOL':'unsigned char' <IntegralCast>
    | |   |     `-IntegerLiteral 0x55dc7dbd9560 <col:32> 'int' 0
    | |   `-<<<NULL>>>
    | `-CompoundStmt 0x55dc7dbd96b8 <line:252:12, line:254:5>
    |   `-BinaryOperator 0x55dc7dbd9690 <line:253:9, col:18> 'SWORD':'short' '='
    |     |-DeclRefExpr 0x55dc7dbd9630 <col:9> 'SWORD':'short' lvalue Var 0x55dc7dc7b9c0 'U_i_T3' 'SWORD':'short'
    |     `-ImplicitCastExpr 0x55dc7dbd9678 <col:18> 'SWORD':'short' <IntegralCast>
    |       `-IntegerLiteral 0x55dc7dbd9658 <col:18> 'int' 0
    |-BinaryOperator 0x55dc7dbd9770 <line:68:29, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dbd9708 <line:68:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b290 'U_b_RDone3' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dbd9758 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dbd9730 <col:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x55dc7dbd9800 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dbd9798 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dbd97e8 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dbd97c0 <col:24> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ace8 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x55dc7dbd9928 <line:264:5, line:266:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dbd9868 <line:264:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x55dc7dbd9850 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x55dc7dbd9828 <col:28> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b0b8 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dbd9910 <line:264:29, line:266:5>
    | | `-BinaryOperator 0x55dc7dbd98e8 <line:48:31, line:265:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dbd9888 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dbd98d0 <line:265:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dbd98b0 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dbd9a40 <line:268:5, line:270:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x55dc7dbd9988 <line:76:27> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x55dc7dbd9960 <col:27> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b678 'U_b_RDone0' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dbd9a28 <line:268:27, line:270:5>
    | | `-BinaryOperator 0x55dc7dbd9a00 <line:48:31, line:269:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dbd99a0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dbd99e8 <line:269:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dbd99c8 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-CallExpr 0x55dc7dbd9ae0 <line:272:5, col:40> 'void'
    | |-ImplicitCastExpr 0x55dc7dbd9ac8 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55dc7dbd9a78 <col:5> 'void (BOOL)' Function 0x55dc7dc7bc20 'Write_U_b_YOut0' 'void (BOOL)'
    | `-ImplicitCastExpr 0x55dc7dbd9b10 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dbd9aa0 <col:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x55dc7dbd9b90 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dbd9b28 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dbd9b78 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dbd9b50 <col:24> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ace8 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x55dc7dbd9cb8 <line:280:5, line:282:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dbd9bf8 <line:280:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x55dc7dbd9be0 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x55dc7dbd9bb8 <col:28> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b0b8 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dbd9ca0 <line:280:29, line:282:5>
    | | `-BinaryOperator 0x55dc7dbd9c78 <line:48:31, line:281:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dbd9c18 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dbd9c60 <line:281:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dbd9c40 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dbd9df0 <line:284:5, line:286:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dbd9d30 <line:284:8, line:76:27> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x55dc7dbd9d18 <col:27> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x55dc7dbd9cf0 <col:27> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b678 'U_b_RDone0' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dbd9dd8 <line:284:28, line:286:5>
    | | `-BinaryOperator 0x55dc7dbd9db0 <line:48:31, line:285:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dbd9d50 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dbd9d98 <line:285:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dbd9d78 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dbd9f08 <line:288:5, line:290:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x55dc7dbd9e50 <line:80:27> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x55dc7dbd9e28 <col:27> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b7c8 'U_b_RDone1' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dbd9ef0 <line:288:27, line:290:5>
    | | `-BinaryOperator 0x55dc7dbd9ec8 <line:48:31, line:289:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dbd9e68 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dbd9eb0 <line:289:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dbd9e90 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-CallExpr 0x55dc7dbd9fa8 <line:292:5, col:40> 'void'
    | |-ImplicitCastExpr 0x55dc7dbd9f90 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55dc7dbd9f40 <col:5> 'void (BOOL)' Function 0x55dc7dc7be90 'Write_U_b_YOut1' 'void (BOOL)'
    | `-ImplicitCastExpr 0x55dc7dbd9fd8 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dbd9f68 <col:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x55dc7dbda058 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dbd9ff0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dbda040 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dbda018 <col:24> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ace8 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x55dc7dbda180 <line:300:5, line:302:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dbda0c0 <line:300:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x55dc7dbda0a8 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x55dc7dbda080 <col:28> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b0b8 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dbda168 <line:300:29, line:302:5>
    | | `-BinaryOperator 0x55dc7dbda140 <line:48:31, line:301:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dbda0e0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dbda128 <line:301:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dbda108 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dbda2b8 <line:304:5, line:306:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dbda1f8 <line:304:8, line:80:27> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x55dc7dbda1e0 <col:27> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x55dc7dbda1b8 <col:27> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b7c8 'U_b_RDone1' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dbda2a0 <line:304:28, line:306:5>
    | | `-BinaryOperator 0x55dc7dbda278 <line:48:31, line:305:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dbda218 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dbda260 <line:305:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dbda240 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dbda3d0 <line:308:5, line:310:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x55dc7dbda318 <line:84:27> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x55dc7dbda2f0 <col:27> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b918 'U_b_RDone2' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dbda3b8 <line:308:27, line:310:5>
    | | `-BinaryOperator 0x55dc7dbda390 <line:48:31, line:309:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dbda330 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dbda378 <line:309:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dbda358 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-CallExpr 0x55dc7dbda470 <line:312:5, col:40> 'void'
    | |-ImplicitCastExpr 0x55dc7dbda458 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55dc7dbda408 <col:5> 'void (BOOL)' Function 0x55dc7dc7c100 'Write_U_b_YOut2' 'void (BOOL)'
    | `-ImplicitCastExpr 0x55dc7dbda4a0 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dbda430 <col:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x55dc7dbda520 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x55dc7dbda4b8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x55dc7dbda508 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x55dc7dbda4e0 <col:24> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ace8 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x55dc7dbda648 <line:320:5, line:322:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dbda588 <line:320:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x55dc7dbda570 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x55dc7dbda548 <col:28> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b0b8 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dbda630 <line:320:29, line:322:5>
    | | `-BinaryOperator 0x55dc7dbda608 <line:48:31, line:321:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dbda5a8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dbda5f0 <line:321:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dbda5d0 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dbda780 <line:324:5, line:326:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x55dc7dbda6c0 <line:324:8, line:84:27> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x55dc7dbda6a8 <col:27> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x55dc7dbda680 <col:27> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b918 'U_b_RDone2' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dbda768 <line:324:28, line:326:5>
    | | `-BinaryOperator 0x55dc7dbda740 <line:48:31, line:325:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dbda6e0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dbda728 <line:325:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dbda708 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x55dc7dbda898 <line:328:5, line:330:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x55dc7dbda7e0 <line:67:27> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x55dc7dbda7b8 <col:27> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7b290 'U_b_RDone3' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x55dc7dbda880 <line:328:27, line:330:5>
    | | `-BinaryOperator 0x55dc7dbda858 <line:48:31, line:329:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x55dc7dbda7f8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x55dc7dbda840 <line:329:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x55dc7dbda820 <col:28> 'int' 0
    | `-<<<NULL>>>
    `-CallExpr 0x55dc7dbda938 <line:332:5, col:40> 'void'
      |-ImplicitCastExpr 0x55dc7dbda920 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x55dc7dbda8d0 <col:5> 'void (BOOL)' Function 0x55dc7dc7c370 'Write_U_b_YOut3' 'void (BOOL)'
      `-ImplicitCastExpr 0x55dc7dbda968 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
        `-DeclRefExpr 0x55dc7dbda8f8 <col:29> 'BOOL':'unsigned char' lvalue Var 0x55dc7dc7ad90 'I_b_rung_top' 'BOOL':'unsigned char'
TranslationUnitDecl 0x559d09aea918 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x559d09aeae90 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x559d09aeabb0 '__int128'
|-TypedefDecl 0x559d09aeaf00 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x559d09aeabd0 'unsigned __int128'
|-TypedefDecl 0x559d09aeb1d8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x559d09aeafe0 'struct __NSConstantString_tag'
|   `-Record 0x559d09aeaf58 '__NSConstantString_tag'
|-TypedefDecl 0x559d09aeb270 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x559d09aeb230 'char *'
|   `-BuiltinType 0x559d09aea9b0 'char'
|-TypedefDecl 0x559d09aeb538 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x559d09aeb4e0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x559d09aeb350 'struct __va_list_tag'
|     `-Record 0x559d09aeb2c8 '__va_list_tag'
|-TypedefDecl 0x559d09b4d990 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:143:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x559d09aeaa30 'long'
|-TypedefDecl 0x559d09b4da00 <line:209:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x559d09aeaad0 'unsigned long'
|-TypedefDecl 0x559d09b4da70 <line:321:1, col:24> col:24 wchar_t 'int'
| `-BuiltinType 0x559d09aeaa10 'int'
|-RecordDecl 0x559d09b4dac8 <line:415:9, line:426:1> line:415:9 struct definition
| |-FieldDecl 0x559d09b4dbc0 <line:416:3, col:13> col:13 __max_align_ll 'long long'
| | `-AlignedAttr 0x559d09b4dc08 <col:43, col:77> aligned
| |   `-UnaryExprOrTypeTraitExpr 0x559d09b4db88 <col:55, col:76> 'unsigned long' alignof 'long long'
| `-FieldDecl 0x559d09b4dca8 <line:417:3, col:15> col:15 __max_align_ld 'long double'
|   `-AlignedAttr 0x559d09b4dcf0 <col:45, col:81> aligned
|     `-UnaryExprOrTypeTraitExpr 0x559d09b4dc70 <col:57, col:80> 'unsigned long' alignof 'long double'
|-TypedefDecl 0x559d09b4dd90 <line:415:1, line:426:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x559d09b4dd40 'struct max_align_t' sugar
|   `-RecordType 0x559d09b4db50 'max_align_t'
|     `-Record 0x559d09b4dac8 ''
|-TypedefDecl 0x559d09b4de30 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h:40:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x559d09b4de00 '__builtin_va_list' sugar
|   |-Typedef 0x559d09aeb538 '__builtin_va_list'
|   `-ConstantArrayType 0x559d09aeb4e0 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x559d09aeb350 'struct __va_list_tag'
|       `-Record 0x559d09aeb2c8 '__va_list_tag'
|-TypedefDecl 0x559d09b4dec0 <line:99:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x559d09b4de90 '__gnuc_va_list' sugar
|   |-Typedef 0x559d09b4de30 '__gnuc_va_list'
|   `-TypedefType 0x559d09b4de00 '__builtin_va_list' sugar
|     |-Typedef 0x559d09aeb538 '__builtin_va_list'
|     `-ConstantArrayType 0x559d09aeb4e0 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x559d09aeb350 'struct __va_list_tag'
|         `-Record 0x559d09aeb2c8 '__va_list_tag'
|-TypedefDecl 0x559d09b4df30 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdint.h:40:1, col:24> col:24 int8_t 'signed char'
| `-BuiltinType 0x559d09aea9d0 'signed char'
|-TypedefDecl 0x559d09b4dfa0 <line:41:1, col:25> col:25 int16_t 'short'
| `-BuiltinType 0x559d09aea9f0 'short'
|-TypedefDecl 0x559d09b4e010 <line:42:1, col:25> col:25 int32_t 'int'
| `-BuiltinType 0x559d09aeaa10 'int'
|-TypedefDecl 0x559d09b4e080 <line:43:1, col:25> col:25 int64_t 'long'
| `-BuiltinType 0x559d09aeaa30 'long'
|-TypedefDecl 0x559d09b4e0f0 <line:45:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x559d09aea9d0 'signed char'
|-TypedefDecl 0x559d09b4e160 <line:46:1, col:29> col:29 int_fast16_t 'short'
| `-BuiltinType 0x559d09aea9f0 'short'
|-TypedefDecl 0x559d09b4e1d0 <line:47:1, col:29> col:29 int_fast32_t 'int'
| `-BuiltinType 0x559d09aeaa10 'int'
|-TypedefDecl 0x559d09b4e240 <line:48:1, col:29> col:29 int_fast64_t 'long'
| `-BuiltinType 0x559d09aeaa30 'long'
|-TypedefDecl 0x559d09b4e2b0 <line:50:1, col:29> col:29 int_least8_t 'signed char'
| `-BuiltinType 0x559d09aea9d0 'signed char'
|-TypedefDecl 0x559d09b4e320 <line:51:1, col:30> col:30 int_least16_t 'short'
| `-BuiltinType 0x559d09aea9f0 'short'
|-TypedefDecl 0x559d09b4e390 <line:52:1, col:30> col:30 int_least32_t 'int'
| `-BuiltinType 0x559d09aeaa10 'int'
|-TypedefDecl 0x559d09b4e400 <line:53:1, col:30> col:30 int_least64_t 'long'
| `-BuiltinType 0x559d09aeaa30 'long'
|-TypedefDecl 0x559d09b4e470 <line:55:1, col:25> col:25 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x559d09aeaa70 'unsigned char'
|-TypedefDecl 0x559d09b4e4e0 <line:56:1, col:26> col:26 uint16_t 'unsigned short'
| `-BuiltinType 0x559d09aeaa90 'unsigned short'
|-TypedefDecl 0x559d09b4e550 <line:57:1, col:26> col:26 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x559d09aeaab0 'unsigned int'
|-TypedefDecl 0x559d09b4e5c0 <line:58:1, col:26> col:26 uint64_t 'unsigned long'
| `-BuiltinType 0x559d09aeaad0 'unsigned long'
|-TypedefDecl 0x559d09b4e630 <line:60:1, col:29> col:29 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x559d09aeaa70 'unsigned char'
|-TypedefDecl 0x559d09b4e6a0 <line:61:1, col:30> col:30 uint_fast16_t 'unsigned short'
| `-BuiltinType 0x559d09aeaa90 'unsigned short'
|-TypedefDecl 0x559d09b4e710 <line:62:1, col:30> col:30 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x559d09aeaab0 'unsigned int'
|-TypedefDecl 0x559d09b4e780 <line:63:1, col:30> col:30 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x559d09aeaad0 'unsigned long'
|-TypedefDecl 0x559d09b4e7f0 <line:65:1, col:30> col:30 uint_least8_t 'unsigned char'
| `-BuiltinType 0x559d09aeaa70 'unsigned char'
|-TypedefDecl 0x559d09b4e860 <line:66:1, col:31> col:31 uint_least16_t 'unsigned short'
| `-BuiltinType 0x559d09aeaa90 'unsigned short'
|-TypedefDecl 0x559d09b6a790 <line:67:1, col:31> col:31 uint_least32_t 'unsigned int'
| `-BuiltinType 0x559d09aeaab0 'unsigned int'
|-TypedefDecl 0x559d09b6a800 <line:68:1, col:31> col:31 uint_least64_t 'unsigned long'
| `-BuiltinType 0x559d09aeaad0 'unsigned long'
|-TypedefDecl 0x559d09b6a870 <line:70:1, col:26> col:26 intptr_t 'long'
| `-BuiltinType 0x559d09aeaa30 'long'
|-TypedefDecl 0x559d09b6a8e0 <line:71:1, col:26> col:26 uintptr_t 'unsigned long'
| `-BuiltinType 0x559d09aeaad0 'unsigned long'
|-FunctionDecl 0x559d09b6aa90 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:51:1, line:54:1> line:51:40 used printk 'void (const char *, ...)' static inline
| |-ParmVarDecl 0x559d09b6a9d0 <col:47, col:59> col:59 used fmt 'const char *'
| |-CompoundStmt 0x559d09b6ac98 <line:52:1, line:54:1>
| | `-CStyleCastExpr 0x559d09b6ac70 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x559d09b6ac58 <col:29, col:31> 'const char *' <LValueToRValue>
| |     `-ParenExpr 0x559d09b6ac38 <col:29, col:31> 'const char *' lvalue
| |       `-DeclRefExpr 0x559d09b6abd0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:53:13> 'const char *' lvalue ParmVar 0x559d09b6a9d0 'fmt' 'const char *'
| `-FormatAttr 0x559d09b6ab38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 2
|-FunctionDecl 0x559d09b6af20 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:56:1, line:60:1> line:56:40 vprintk 'void (const char *, struct __va_list_tag *)' static inline
| |-ParmVarDecl 0x559d09b6ad18 <col:48, col:60> col:60 used fmt 'const char *'
| |-ParmVarDecl 0x559d09b6ae10 <col:65, col:73> col:73 used ap 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x559d09b6b1b8 <line:57:1, line:60:1>
| | |-CStyleCastExpr 0x559d09b6b0c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x559d09b6b0b0 <col:29, col:31> 'const char *' <LValueToRValue>
| | |   `-ParenExpr 0x559d09b6b090 <col:29, col:31> 'const char *' lvalue
| | |     `-DeclRefExpr 0x559d09b6b028 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:58:13> 'const char *' lvalue ParmVar 0x559d09b6ad18 'fmt' 'const char *'
| | `-CStyleCastExpr 0x559d09b6b190 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x559d09b6b178 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue>
| |     `-ParenExpr 0x559d09b6b158 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue
| |       `-DeclRefExpr 0x559d09b6b0f0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:59:13> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x559d09b6ae10 'ap' 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x559d09b6afd0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 0
|-FunctionDecl 0x559d09b6b488 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:63:1, line:64:26> line:63:32 snprintk 'int (char *, size_t, const char *, ...)' extern
| |-ParmVarDecl 0x559d09b6b240 <col:41, col:47> col:47 str 'char *'
| |-ParmVarDecl 0x559d09b6b2d0 <col:52, col:59> col:59 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559d09b6b348 <line:64:6, col:18> col:18 fmt 'const char *'
| `-FormatAttr 0x559d09b6b540 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 4
|-FunctionDecl 0x559d09b6ea68 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:65:1, line:66:35> line:65:32 vsnprintk 'int (char *, size_t, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x559d09b6b600 <col:42, col:48> col:48 str 'char *'
| |-ParmVarDecl 0x559d09b6b670 <col:53, col:60> col:60 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559d09b6b6e8 <line:66:8, col:20> col:20 fmt 'const char *'
| |-ParmVarDecl 0x559d09b6e920 <col:25, col:33> col:33 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x559d09b6eb28 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x559d09b6f070 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:68:1, line:69:34> line:68:33 z_vprintk 'void (int (*)(int, void *), void *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x559d09b6edd0 <col:43, col:68> col:49 out 'int (*)(int, void *)'
| |-ParmVarDecl 0x559d09b6ee48 <col:71, col:77> col:77 ctx 'void *'
| |-ParmVarDecl 0x559d09b6eec0 <line:69:7, col:19> col:19 fmt 'const char *'
| |-ParmVarDecl 0x559d09b6ef30 <col:24, col:32> col:32 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x559d09b6f130 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x559d09b6f2a0 </vagrant/apps/plc_4out/./_build/arm-tfm/install/export/tfm/inc/tfm_gpio_veneers.h:11:1, col:32> col:10 used tfm_gpio_read_all 'uint32_t (void)'
|-FunctionDecl 0x559d09b6f470 <line:12:1, col:40> col:9 used tfm_gpio_write_all 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x559d09b6f370 <col:28, col:37> col:37 out 'uint32_t':'unsigned int'
|-FunctionDecl 0x559d09b6f5b0 <line:13:1, col:46> col:9 used tfm_gpio_enable_outputs 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x559d09b6f528 <col:33, col:42> col:42 pins 'uint32_t':'unsigned int'
|-FunctionDecl 0x559d09b6f770 <line:14:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559d09b6f668 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559d09b71500 <line:16:1, col:43> col:9 used tfm_gpio_enable_output 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559d09b6f828 <col:32, col:40> col:40 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559d09b71640 <line:17:1, col:33> col:9 tfm_gpio_set 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559d09b715b8 <col:22, col:30> col:30 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559d09b71780 <line:18:1, col:35> col:9 tfm_gpio_clear 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559d09b716f8 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559d09b718c0 <line:19:1, col:37> col:9 tfm_gpio_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559d09b71838 <col:26, col:34> col:34 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559d09b71a00 prev 0x559d09b6f770 <line:20:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559d09b71978 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-RecordDecl 0x559d09b71aa8 <line:34:9, line:38:1> line:34:9 struct definition
| |-FieldDecl 0x559d09b71b60 <line:35:5, col:13> col:13 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x559d09b71bb8 <line:36:5, col:13> col:13 polarity 'uint8_t':'unsigned char'
| `-FieldDecl 0x559d09b71d58 <line:37:5, col:21> col:12 cb 'void (*)(void)'
|-TypedefDecl 0x559d09b71df0 <line:34:1, line:38:3> col:3 referenced gpio_int_config 'struct gpio_int_config':'gpio_int_config'
| `-ElaboratedType 0x559d09b71da0 'struct gpio_int_config' sugar
|   `-RecordType 0x559d09b71b30 'gpio_int_config'
|     `-Record 0x559d09b71aa8 ''
|-FunctionDecl 0x559d09b72070 <line:40:1, col:68> col:9 tfm_gpio_interrupt_enable 'uint8_t (uint8_t, gpio_int_config *)'
| |-ParmVarDecl 0x559d09b71e70 <col:35, col:43> col:43 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x559d09b71f58 <col:48, col:65> col:65 cfg 'gpio_int_config *'
|-FunctionDecl 0x559d09b721b8 <line:41:1, col:47> col:9 tfm_gpio_interrupt_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559d09b72130 <col:36, col:44> col:44 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x559d09b72278 </vagrant/apps/plc_4out/./inc/plc_platform.h:5:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x559d09aea9f0 'short'
|-TypedefDecl 0x559d09b722e8 <line:6:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x559d09aeaa70 'unsigned char'
|-EnumDecl 0x559d09b72340 <line:25:9, line:29:1> line:25:9
| |-EnumConstantDecl 0x559d09b72420 <line:26:2, col:6> col:2 R 'int'
| | `-IntegerLiteral 0x559d09b72400 <col:6> 'int' 2
| |-EnumConstantDecl 0x559d09b72488 <line:27:2, col:6> col:2 G 'int'
| | `-IntegerLiteral 0x559d09b72468 <col:6> 'int' 3
| `-EnumConstantDecl 0x559d09b74990 <line:28:2, col:6> col:2 B 'int'
|   `-IntegerLiteral 0x559d09b724d0 <col:6> 'int' 4
|-TypedefDecl 0x559d09b74a30 <line:25:1, line:29:3> col:3 referenced LED 'enum LED':'LED'
| `-ElaboratedType 0x559d09b749e0 'enum LED' sugar
|   `-EnumType 0x559d09b723e0 'LED'
|     `-Enum 0x559d09b72340 ''
|-FunctionDecl 0x559d09b74c90 <line:31:1, col:56> col:6 enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x559d09b74b08 <col:25, col:34> col:34 pins 'uint8_t *'
| `-ParmVarDecl 0x559d09b74b78 <col:40, col:48> col:48 num_pins 'uint8_t':'unsigned char'
|-FunctionDecl 0x559d09b74e50 <line:33:1, col:35> col:6 enable_pin_output 'void (uint8_t)'
| `-ParmVarDecl 0x559d09b74d50 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559d09b74f88 <line:35:1, col:24> col:6 read_in_table 'void (void)'
|-FunctionDecl 0x559d09b750b8 <line:37:1, col:26> col:6 write_out_table 'void (void)'
|-FunctionDecl 0x559d09b75220 <line:41:1, col:25> col:6 used set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x559d09b75198 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
| `-FullComment 0x559d09b796e0 <line:39:4, col:42>
|   `-ParagraphComment 0x559d09b796b0 <col:4, col:42>
|     `-TextComment 0x559d09b79680 <col:4, col:42> Text="************** For User ***************"
|-FunctionDecl 0x559d09b75360 <line:43:1, col:25> col:6 used clr_pin 'void (uint8_t)'
| `-ParmVarDecl 0x559d09b752d8 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559d09b755c0 <line:45:1, col:37> col:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x559d09b75418 <col:16, col:24> col:24 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x559d09b754b0 <col:29, col:34> col:34 val 'BOOL':'unsigned char'
|-FunctionDecl 0x559d09b75740 <line:47:1, col:26> col:6 used read_pin 'BOOL (uint8_t)'
| `-ParmVarDecl 0x559d09b75680 <col:15, col:23> col:23 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559d09b759a0 <line:49:1, col:22> col:6 used LED_on 'void (LED)'
| `-ParmVarDecl 0x559d09b75820 <col:13, col:17> col:17 color 'LED':'LED'
|-FunctionDecl 0x559d09b75ae0 <line:51:1, col:23> col:6 used LED_off 'void (LED)'
| `-ParmVarDecl 0x559d09b75a58 <col:14, col:18> col:18 color 'LED':'LED'
|-FunctionDecl 0x559d09b75ca0 <line:53:1, col:24> col:6 read_LED 'BOOL (LED)'
| `-ParmVarDecl 0x559d09b75b98 <col:15, col:19> col:19 color 'LED':'LED'
|-FunctionDecl 0x559d09b75ee0 <line:55:1, col:33> col:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x559d09b75d58 <col:16, col:20> col:20 color 'LED':'LED'
| `-ParmVarDecl 0x559d09b75dc8 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-FunctionDecl 0x559d09b76028 <line:57:1, col:40> col:6 read_button_active_low 'BOOL (uint8_t)'
| `-ParmVarDecl 0x559d09b75fa0 <col:29, col:37> col:37 pin 'uint8_t':'unsigned char'
|-VarDecl 0x559d09b760e0 <./src/plc_platform.c:6:1, col:33> col:17 used gpio_in_table 'uint32_t':'unsigned int' static cinit
| `-ImplicitCastExpr 0x559d09b76160 <col:33> 'uint32_t':'unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x559d09b76140 <col:33> 'int' 0
|-VarDecl 0x559d09b76188 <line:7:1, col:34> col:17 used gpio_out_table 'uint32_t':'unsigned int' static cinit
| `-ImplicitCastExpr 0x559d09b76208 <col:34> 'uint32_t':'unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x559d09b761e8 <col:34> 'int' 0
|-VarDecl 0x559d09b76230 <line:10:1, col:10> col:10 cntr 'uint32_t':'unsigned int'
|-FunctionDecl 0x559d09b763a0 prev 0x559d09b74c90 <line:12:1, line:20:1> line:12:6 enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x559d09b762a0 <col:25, col:34> col:34 used pins 'uint8_t *'
| |-ParmVarDecl 0x559d09b76310 <col:40, col:48> col:48 used num_pins 'uint8_t':'unsigned char'
| `-CompoundStmt 0x559d09b76d80 <col:58, line:20:1>
|   |-DeclStmt 0x559d09b764f8 <line:13:2, col:18>
|   | `-VarDecl 0x559d09b76460 <col:2, col:17> col:11 used out 'uint32_t':'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x559d09b764e0 <col:17> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-IntegerLiteral 0x559d09b764c0 <col:17> 'int' 0
|   |-ForStmt 0x559d09b768c0 <line:14:2, line:16:2>
|   | |-DeclStmt 0x559d09b765b8 <line:14:7, col:20>
|   | | `-VarDecl 0x559d09b76520 <col:7, col:19> col:15 used i 'uint8_t':'unsigned char' cinit
|   | |   `-ImplicitCastExpr 0x559d09b765a0 <col:19> 'uint8_t':'unsigned char' <IntegralCast>
|   | |     `-IntegerLiteral 0x559d09b76580 <col:19> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559d09b76680 <col:22, col:26> 'int' '<'
|   | | |-ImplicitCastExpr 0x559d09b76638 <col:22> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x559d09b76620 <col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x559d09b765d0 <col:22> 'uint8_t':'unsigned char' lvalue Var 0x559d09b76520 'i' 'uint8_t':'unsigned char'
|   | | `-ImplicitCastExpr 0x559d09b76668 <col:26> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x559d09b76650 <col:26> 'uint8_t':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x559d09b765f8 <col:26> 'uint8_t':'unsigned char' lvalue ParmVar 0x559d09b76310 'num_pins' 'uint8_t':'unsigned char'
|   | |-UnaryOperator 0x559d09b766d0 <col:36, col:37> 'uint8_t':'unsigned char' postfix '++'
|   | | `-DeclRefExpr 0x559d09b766a8 <col:36> 'uint8_t':'unsigned char' lvalue Var 0x559d09b76520 'i' 'uint8_t':'unsigned char'
|   | `-CompoundStmt 0x559d09b768a8 <col:41, line:16:2>
|   |   `-CompoundAssignOperator 0x559d09b76870 <line:15:3, col:23> 'uint32_t':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |     |-DeclRefExpr 0x559d09b766f0 <col:3> 'uint32_t':'unsigned int' lvalue Var 0x559d09b76460 'out' 'uint32_t':'unsigned int'
|   |     `-ImplicitCastExpr 0x559d09b76858 <col:10, col:23> 'unsigned int' <IntegralCast>
|   |       `-ParenExpr 0x559d09b76838 <col:10, col:23> 'int'
|   |         `-BinaryOperator 0x559d09b76810 <col:11, col:22> 'int' '<<'
|   |           |-IntegerLiteral 0x559d09b76718 <col:11> 'int' 1
|   |           `-ImplicitCastExpr 0x559d09b767f8 <col:16, col:22> 'int' <IntegralCast>
|   |             `-ImplicitCastExpr 0x559d09b767e0 <col:16, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|   |               `-ArraySubscriptExpr 0x559d09b767b8 <col:16, col:22> 'uint8_t':'unsigned char' lvalue
|   |                 |-ImplicitCastExpr 0x559d09b76788 <col:16> 'uint8_t *' <LValueToRValue>
|   |                 | `-DeclRefExpr 0x559d09b76738 <col:16> 'uint8_t *' lvalue ParmVar 0x559d09b762a0 'pins' 'uint8_t *'
|   |                 `-ImplicitCastExpr 0x559d09b767a0 <col:21> 'uint8_t':'unsigned char' <LValueToRValue>
|   |                   `-DeclRefExpr 0x559d09b76760 <col:21> 'uint8_t':'unsigned char' lvalue Var 0x559d09b76520 'i' 'uint8_t':'unsigned char'
|   |-CallExpr 0x559d09b76be0 <line:17:2, col:38> 'void'
|   | |-ImplicitCastExpr 0x559d09b76bc8 <col:2> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559d09b768f8 <col:2> 'void (const char *, ...)' Function 0x559d09b6aa90 'printk' 'void (const char *, ...)'
|   | |-ImplicitCastExpr 0x559d09b76c30 <col:9> 'const char *' <BitCast>
|   | | `-ImplicitCastExpr 0x559d09b76c18 <col:9> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x559d09b76958 <col:9> 'char [22]' lvalue "Enabling Outputs: %x\n"
|   | `-ImplicitCastExpr 0x559d09b76c48 <col:35> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x559d09b76b70 <col:35> 'uint32_t':'unsigned int' lvalue Var 0x559d09b76460 'out' 'uint32_t':'unsigned int'
|   |-CallExpr 0x559d09b76d20 <line:18:2, col:29> 'uint8_t':'unsigned char'
|   | |-ImplicitCastExpr 0x559d09b76d08 <col:2> 'uint8_t (*)(uint32_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559d09b76c60 <col:2> 'uint8_t (uint32_t)' Function 0x559d09b6f5b0 'tfm_gpio_enable_outputs' 'uint8_t (uint32_t)'
|   | `-ImplicitCastExpr 0x559d09b76d50 <col:26> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x559d09b76c88 <col:26> 'uint32_t':'unsigned int' lvalue Var 0x559d09b76460 'out' 'uint32_t':'unsigned int'
|   `-ReturnStmt 0x559d09b76d68 <line:19:2>
|-FunctionDecl 0x559d09b76e50 prev 0x559d09b74e50 <line:22:1, line:27:1> line:22:6 enable_pin_output 'void (uint8_t)'
| |-ParmVarDecl 0x559d09b76dc8 <col:24, col:32> col:32 used pin 'uint8_t':'unsigned char'
| `-CompoundStmt 0x559d09b771f0 <col:37, line:27:1>
|   |-IfStmt 0x559d09b771a0 <line:23:2, line:25:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559d09b77040 <line:23:6, col:37> 'int' '!='
|   | | |-ImplicitCastExpr 0x559d09b77028 <col:6, col:32> 'int' <IntegralCast>
|   | | | `-CallExpr 0x559d09b76fc0 <col:6, col:32> 'uint8_t':'unsigned char'
|   | | |   |-ImplicitCastExpr 0x559d09b76fa8 <col:6> 'uint8_t (*)(uint8_t)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x559d09b76ef8 <col:6> 'uint8_t (uint8_t)' Function 0x559d09b71500 'tfm_gpio_enable_output' 'uint8_t (uint8_t)'
|   | | |   `-ImplicitCastExpr 0x559d09b76ff0 <col:29> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x559d09b76f20 <col:29> 'uint8_t':'unsigned char' lvalue ParmVar 0x559d09b76dc8 'pin' 'uint8_t':'unsigned char'
|   | | `-IntegerLiteral 0x559d09b77008 <col:37> 'int' 0
|   | |-CompoundStmt 0x559d09b77188 <col:40, line:25:2>
|   | | `-CallExpr 0x559d09b77128 <line:24:3, col:37> 'void'
|   | |   |-ImplicitCastExpr 0x559d09b77110 <col:3> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559d09b77068 <col:3> 'void (const char *, ...)' Function 0x559d09b6aa90 'printk' 'void (const char *, ...)'
|   | |   `-ImplicitCastExpr 0x559d09b77170 <col:10> 'const char *' <BitCast>
|   | |     `-ImplicitCastExpr 0x559d09b77158 <col:10> 'char *' <ArrayToPointerDecay>
|   | |       `-StringLiteral 0x559d09b770c8 <col:10> 'char [26]' lvalue "Error! Cannot Enable Pin!"
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x559d09b771d8 <line:26:2>
|-FunctionDecl 0x559d09b772a0 prev 0x559d09b74f88 <line:29:1, line:36:1> line:29:6 read_in_table 'void (void)'
| `-CompoundStmt 0x559d09b77468 <col:26, line:36:1>
|   |-BinaryOperator 0x559d09b77428 <line:30:2, col:36> 'uint32_t':'unsigned int' '='
|   | |-DeclRefExpr 0x559d09b77340 <col:2> 'uint32_t':'unsigned int' lvalue Var 0x559d09b760e0 'gpio_in_table' 'uint32_t':'unsigned int'
|   | `-CallExpr 0x559d09b77400 <col:18, col:36> 'uint32_t':'unsigned int'
|   |   `-ImplicitCastExpr 0x559d09b773e8 <col:18> 'uint32_t (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x559d09b77368 <col:18> 'uint32_t (void)' Function 0x559d09b6f2a0 'tfm_gpio_read_all' 'uint32_t (void)'
|   `-ReturnStmt 0x559d09b77450 <line:35:2>
|-FunctionDecl 0x559d09b77518 prev 0x559d09b750b8 <line:38:1, line:46:1> line:38:6 write_out_table 'void (void)'
| `-CompoundStmt 0x559d09b77680 <col:28, line:46:1>
|   |-CallExpr 0x559d09b77620 <line:44:2, col:35> 'uint8_t':'unsigned char'
|   | |-ImplicitCastExpr 0x559d09b77608 <col:2> 'uint8_t (*)(uint32_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559d09b775b8 <col:2> 'uint8_t (uint32_t)' Function 0x559d09b6f470 'tfm_gpio_write_all' 'uint8_t (uint32_t)'
|   | `-ImplicitCastExpr 0x559d09b77650 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x559d09b775e0 <col:21> 'uint32_t':'unsigned int' lvalue Var 0x559d09b76188 'gpio_out_table' 'uint32_t':'unsigned int'
|   `-ReturnStmt 0x559d09b77668 <line:45:2>
|-FunctionDecl 0x559d09b77738 prev 0x559d09b75220 <line:48:1, line:52:1> line:48:6 used set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x559d09b776b0 <col:14, col:22> col:22 used pin 'uint8_t':'unsigned char'
| `-CompoundStmt 0x559d09b77a38 <col:27, line:52:1>
|   |-IfStmt 0x559d09b778b0 <line:49:2, col:26>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559d09b77858 <col:6, col:12> 'int' '>'
|   | | |-ImplicitCastExpr 0x559d09b77840 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x559d09b77828 <col:6> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x559d09b777e0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x559d09b776b0 'pin' 'uint8_t':'unsigned char'
|   | | `-IntegerLiteral 0x559d09b77808 <col:12> 'int' 15
|   | |-CompoundStmt 0x559d09b77898 <col:16, col:26>
|   | | `-ReturnStmt 0x559d09b77880 <col:18>
|   | `-<<<NULL>>>
|   |-CompoundAssignOperator 0x559d09b779e8 <line:50:2, col:29> 'uint32_t':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-DeclRefExpr 0x559d09b778e8 <col:2> 'uint32_t':'unsigned int' lvalue Var 0x559d09b76188 'gpio_out_table' 'uint32_t':'unsigned int'
|   | `-ImplicitCastExpr 0x559d09b779d0 <col:20, col:29> 'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x559d09b779b0 <col:20, col:29> 'int'
|   |     `-BinaryOperator 0x559d09b77988 <col:21, col:26> 'int' '<<'
|   |       |-IntegerLiteral 0x559d09b77910 <col:21> 'int' 1
|   |       `-ImplicitCastExpr 0x559d09b77970 <col:26> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x559d09b77958 <col:26> 'uint8_t':'unsigned char' <LValueToRValue>
|   |           `-DeclRefExpr 0x559d09b77930 <col:26> 'uint8_t':'unsigned char' lvalue ParmVar 0x559d09b776b0 'pin' 'uint8_t':'unsigned char'
|   `-ReturnStmt 0x559d09b77a20 <line:51:2>
|-FunctionDecl 0x559d09b77b80 prev 0x559d09b75360 <line:54:1, line:58:1> line:54:6 used clr_pin 'void (uint8_t)'
| |-ParmVarDecl 0x559d09b77a70 <col:14, col:22> col:22 used pin 'uint8_t':'unsigned char'
| `-CompoundStmt 0x559d09b77ea0 <col:27, line:58:1>
|   |-IfStmt 0x559d09b77cf8 <line:55:2, col:26>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559d09b77ca0 <col:6, col:12> 'int' '>'
|   | | |-ImplicitCastExpr 0x559d09b77c88 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x559d09b77c70 <col:6> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x559d09b77c28 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x559d09b77a70 'pin' 'uint8_t':'unsigned char'
|   | | `-IntegerLiteral 0x559d09b77c50 <col:12> 'int' 15
|   | |-CompoundStmt 0x559d09b77ce0 <col:16, col:26>
|   | | `-ReturnStmt 0x559d09b77cc8 <col:18>
|   | `-<<<NULL>>>
|   |-CompoundAssignOperator 0x559d09b77e50 <line:56:2, col:30> 'uint32_t':'unsigned int' '&=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-DeclRefExpr 0x559d09b77d30 <col:2> 'uint32_t':'unsigned int' lvalue Var 0x559d09b76188 'gpio_out_table' 'uint32_t':'unsigned int'
|   | `-ImplicitCastExpr 0x559d09b77e38 <col:20, col:30> 'unsigned int' <IntegralCast>
|   |   `-UnaryOperator 0x559d09b77e18 <col:20, col:30> 'int' prefix '~'
|   |     `-ParenExpr 0x559d09b77df8 <col:21, col:30> 'int'
|   |       `-BinaryOperator 0x559d09b77dd0 <col:22, col:27> 'int' '<<'
|   |         |-IntegerLiteral 0x559d09b77d58 <col:22> 'int' 1
|   |         `-ImplicitCastExpr 0x559d09b77db8 <col:27> 'int' <IntegralCast>
|   |           `-ImplicitCastExpr 0x559d09b77da0 <col:27> 'uint8_t':'unsigned char' <LValueToRValue>
|   |             `-DeclRefExpr 0x559d09b77d78 <col:27> 'uint8_t':'unsigned char' lvalue ParmVar 0x559d09b77a70 'pin' 'uint8_t':'unsigned char'
|   `-ReturnStmt 0x559d09b77e88 <line:57:2>
|-FunctionDecl 0x559d09b77fd8 prev 0x559d09b755c0 <line:60:1, line:67:1> line:60:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x559d09b77ed8 <col:16, col:24> col:24 used pin 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x559d09b77f48 <col:29, col:34> col:34 used val 'BOOL':'unsigned char'
| `-CompoundStmt 0x559d09b78308 <col:39, line:67:1>
|   |-IfStmt 0x559d09b782b8 <line:61:2, line:65:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x559d09b780b0 <line:61:6> 'BOOL':'unsigned char' <LValueToRValue>
|   | | `-DeclRefExpr 0x559d09b78088 <col:6> 'BOOL':'unsigned char' lvalue ParmVar 0x559d09b77f48 'val' 'BOOL':'unsigned char'
|   | |-CompoundStmt 0x559d09b781d8 <col:11, line:63:2>
|   | | `-CallExpr 0x559d09b78190 <line:62:3, col:14> 'void'
|   | |   |-ImplicitCastExpr 0x559d09b78178 <col:3> 'void (*)(uint8_t)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559d09b780c8 <col:3> 'void (uint8_t)' Function 0x559d09b77738 'set_pin' 'void (uint8_t)'
|   | |   `-ImplicitCastExpr 0x559d09b781c0 <col:11> 'uint8_t':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x559d09b780f0 <col:11> 'uint8_t':'unsigned char' lvalue ParmVar 0x559d09b77ed8 'pin' 'uint8_t':'unsigned char'
|   | `-CompoundStmt 0x559d09b782a0 <line:63:9, line:65:2>
|   |   `-CallExpr 0x559d09b78258 <line:64:3, col:14> 'void'
|   |     |-ImplicitCastExpr 0x559d09b78240 <col:3> 'void (*)(uint8_t)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559d09b781f0 <col:3> 'void (uint8_t)' Function 0x559d09b77b80 'clr_pin' 'void (uint8_t)'
|   |     `-ImplicitCastExpr 0x559d09b78288 <col:11> 'uint8_t':'unsigned char' <LValueToRValue>
|   |       `-DeclRefExpr 0x559d09b78218 <col:11> 'uint8_t':'unsigned char' lvalue ParmVar 0x559d09b77ed8 'pin' 'uint8_t':'unsigned char'
|   `-ReturnStmt 0x559d09b782f0 <line:66:2>
|-FunctionDecl 0x559d09b783c0 prev 0x559d09b75740 <line:69:1, line:72:1> line:69:6 used read_pin 'BOOL (uint8_t)'
| |-ParmVarDecl 0x559d09b78338 <col:15, col:23> col:23 used pin 'uint8_t':'unsigned char'
| `-CompoundStmt 0x559d09b78788 <col:28, line:72:1>
|   |-IfStmt 0x559d09b78578 <line:70:2, col:30>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559d09b784e0 <col:6, col:12> 'int' '>'
|   | | |-ImplicitCastExpr 0x559d09b784c8 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x559d09b784b0 <col:6> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x559d09b78468 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x559d09b78338 'pin' 'uint8_t':'unsigned char'
|   | | `-IntegerLiteral 0x559d09b78490 <col:12> 'int' 15
|   | |-CompoundStmt 0x559d09b78560 <col:16, col:30>
|   | | `-ReturnStmt 0x559d09b78548 <col:18, col:25>
|   | |   `-ImplicitCastExpr 0x559d09b78530 <col:25> 'uint8_t':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x559d09b78508 <col:25> 'uint8_t':'unsigned char' lvalue ParmVar 0x559d09b78338 'pin' 'uint8_t':'unsigned char'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x559d09b78770 <line:71:2, col:41>
|     `-ImplicitCastExpr 0x559d09b78758 <col:9, col:41> 'BOOL':'unsigned char' <IntegralCast>
|       `-BinaryOperator 0x559d09b78730 <col:9, col:41> 'int' '%'
|         |-ImplicitCastExpr 0x559d09b78718 <col:9, col:37> 'int' <IntegralCast>
|         | `-CStyleCastExpr 0x559d09b786d0 <col:9, col:37> 'BOOL':'unsigned char' <IntegralCast>
|         |   `-ParenExpr 0x559d09b786b0 <col:16, col:37> 'uint32_t':'unsigned int'
|         |     `-BinaryOperator 0x559d09b78648 <col:17, col:34> 'uint32_t':'unsigned int' '>>'
|         |       |-ImplicitCastExpr 0x559d09b78600 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|         |       | `-DeclRefExpr 0x559d09b785b0 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x559d09b760e0 'gpio_in_table' 'uint32_t':'unsigned int'
|         |       `-ImplicitCastExpr 0x559d09b78630 <col:34> 'int' <IntegralCast>
|         |         `-ImplicitCastExpr 0x559d09b78618 <col:34> 'uint8_t':'unsigned char' <LValueToRValue>
|         |           `-DeclRefExpr 0x559d09b785d8 <col:34> 'uint8_t':'unsigned char' lvalue ParmVar 0x559d09b78338 'pin' 'uint8_t':'unsigned char'
|         `-IntegerLiteral 0x559d09b786f8 <col:41> 'int' 2
|-FunctionDecl 0x559d09b78840 prev 0x559d09b759a0 <line:74:1, line:77:1> line:74:6 used LED_on 'void (LED)'
| |-ParmVarDecl 0x559d09b787b8 <col:13, col:17> col:17 used color 'LED':'LED'
| `-CompoundStmt 0x559d09b789c8 <col:24, line:77:1>
|   |-CallExpr 0x559d09b78950 <line:75:2, col:15> 'void'
|   | |-ImplicitCastExpr 0x559d09b78938 <col:2> 'void (*)(uint8_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559d09b788e8 <col:2> 'void (uint8_t)' Function 0x559d09b77b80 'clr_pin' 'void (uint8_t)'
|   | `-ImplicitCastExpr 0x559d09b78998 <col:10> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-ImplicitCastExpr 0x559d09b78980 <col:10> 'LED':'LED' <LValueToRValue>
|   |     `-DeclRefExpr 0x559d09b78910 <col:10> 'LED':'LED' lvalue ParmVar 0x559d09b787b8 'color' 'LED':'LED'
|   `-ReturnStmt 0x559d09b789b0 <line:76:2>
|-FunctionDecl 0x559d09b78a80 prev 0x559d09b75ae0 <line:79:1, line:82:1> line:79:6 used LED_off 'void (LED)'
| |-ParmVarDecl 0x559d09b789f8 <col:14, col:18> col:18 used color 'LED':'LED'
| `-CompoundStmt 0x559d09b78c20 <col:25, line:82:1>
|   |-CallExpr 0x559d09b78ba8 <line:80:2, col:15> 'void'
|   | |-ImplicitCastExpr 0x559d09b78b90 <col:2> 'void (*)(uint8_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559d09b78b28 <col:2> 'void (uint8_t)' Function 0x559d09b77738 'set_pin' 'void (uint8_t)'
|   | `-ImplicitCastExpr 0x559d09b78bf0 <col:10> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-ImplicitCastExpr 0x559d09b78bd8 <col:10> 'LED':'LED' <LValueToRValue>
|   |     `-DeclRefExpr 0x559d09b78b50 <col:10> 'LED':'LED' lvalue ParmVar 0x559d09b789f8 'color' 'LED':'LED'
|   `-ReturnStmt 0x559d09b78c08 <line:81:2>
|-FunctionDecl 0x559d09b78cd8 prev 0x559d09b75ca0 <line:84:1, line:86:1> line:84:6 read_LED 'BOOL (LED)'
| |-ParmVarDecl 0x559d09b78c50 <col:15, col:19> col:19 used color 'LED':'LED'
| `-CompoundStmt 0x559d09b78ec0 <col:26, line:86:1>
|   `-ReturnStmt 0x559d09b78ea8 <line:85:2, col:30>
|     `-CStyleCastExpr 0x559d09b78e80 <col:9, col:30> 'BOOL':'unsigned char' <NoOp>
|       `-CallExpr 0x559d09b78e10 <col:16, col:30> 'BOOL':'unsigned char'
|         |-ImplicitCastExpr 0x559d09b78df8 <col:16> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x559d09b78d80 <col:16> 'BOOL (uint8_t)' Function 0x559d09b783c0 'read_pin' 'BOOL (uint8_t)'
|         `-ImplicitCastExpr 0x559d09b78e58 <col:25> 'uint8_t':'unsigned char' <IntegralCast>
|           `-ImplicitCastExpr 0x559d09b78e40 <col:25> 'LED':'LED' <LValueToRValue>
|             `-DeclRefExpr 0x559d09b78da8 <col:25> 'LED':'LED' lvalue ParmVar 0x559d09b78c50 'color' 'LED':'LED'
|-FunctionDecl 0x559d09b78fe8 prev 0x559d09b75ee0 <line:88:1, line:94:1> line:88:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x559d09b78ee8 <col:16, col:20> col:20 used color 'LED':'LED'
| |-ParmVarDecl 0x559d09b78f58 <col:27, col:32> col:32 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x559d09b79360 <col:35, line:94:1>
|   `-IfStmt 0x559d09b79328 <line:89:2, line:93:2>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x559d09b79110 <line:89:6, col:11> 'int' '=='
|     | |-ImplicitCastExpr 0x559d09b790f8 <col:6> 'int' <IntegralCast>
|     | | `-ImplicitCastExpr 0x559d09b790e0 <col:6> 'BOOL':'unsigned char' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559d09b79098 <col:6> 'BOOL':'unsigned char' lvalue ParmVar 0x559d09b78f58 'v' 'BOOL':'unsigned char'
|     | `-IntegerLiteral 0x559d09b790c0 <col:11> 'int' 0
|     |-CompoundStmt 0x559d09b79248 <col:14, line:91:2>
|     | `-CallExpr 0x559d09b79200 <line:90:3, col:16> 'void'
|     |   |-ImplicitCastExpr 0x559d09b791e8 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x559d09b79138 <col:3> 'void (LED)' Function 0x559d09b78a80 'LED_off' 'void (LED)'
|     |   `-ImplicitCastExpr 0x559d09b79230 <col:11> 'LED':'LED' <LValueToRValue>
|     |     `-DeclRefExpr 0x559d09b79160 <col:11> 'LED':'LED' lvalue ParmVar 0x559d09b78ee8 'color' 'LED':'LED'
|     `-CompoundStmt 0x559d09b79310 <line:91:9, line:93:2>
|       `-CallExpr 0x559d09b792c8 <line:92:3, col:15> 'void'
|         |-ImplicitCastExpr 0x559d09b792b0 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x559d09b79260 <col:3> 'void (LED)' Function 0x559d09b78840 'LED_on' 'void (LED)'
|         `-ImplicitCastExpr 0x559d09b792f8 <col:10> 'LED':'LED' <LValueToRValue>
|           `-DeclRefExpr 0x559d09b79288 <col:10> 'LED':'LED' lvalue ParmVar 0x559d09b78ee8 'color' 'LED':'LED'
`-FunctionDecl 0x559d09b79410 prev 0x559d09b76028 <line:96:1, line:98:1> line:96:6 read_button_active_low 'BOOL (uint8_t)'
  |-ParmVarDecl 0x559d09b79388 <col:29, col:37> col:37 used pin 'uint8_t':'unsigned char'
  `-CompoundStmt 0x559d09b79620 <col:42, line:98:1>
    `-ReturnStmt 0x559d09b79608 <line:97:2, col:29>
      `-ImplicitCastExpr 0x559d09b795f0 <col:9, col:29> 'BOOL':'unsigned char' <IntegralCast>
        `-ConditionalOperator 0x559d09b795c0 <col:9, col:29> 'int'
          |-ImplicitCastExpr 0x559d09b795a8 <col:9, col:21> 'int' <IntegralCast>
          | `-CallExpr 0x559d09b79520 <col:9, col:21> 'BOOL':'unsigned char'
          |   |-ImplicitCastExpr 0x559d09b79508 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
          |   | `-DeclRefExpr 0x559d09b794b8 <col:9> 'BOOL (uint8_t)' Function 0x559d09b783c0 'read_pin' 'BOOL (uint8_t)'
          |   `-ImplicitCastExpr 0x559d09b79550 <col:18> 'uint8_t':'unsigned char' <LValueToRValue>
          |     `-DeclRefExpr 0x559d09b794e0 <col:18> 'uint8_t':'unsigned char' lvalue ParmVar 0x559d09b79388 'pin' 'uint8_t':'unsigned char'
          |-IntegerLiteral 0x559d09b79568 <col:25> 'int' 0
          `-IntegerLiteral 0x559d09b79588 <col:29> 'int' 1
TranslationUnitDecl 0x563ea805b698 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x563ea805bc10 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x563ea805b930 '__int128'
|-TypedefDecl 0x563ea805bc80 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x563ea805b950 'unsigned __int128'
|-TypedefDecl 0x563ea805bf58 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x563ea805bd60 'struct __NSConstantString_tag'
|   `-Record 0x563ea805bcd8 '__NSConstantString_tag'
|-TypedefDecl 0x563ea805bff0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x563ea805bfb0 'char *'
|   `-BuiltinType 0x563ea805b730 'char'
|-TypedefDecl 0x563ea805c2b8 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x563ea805c260 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x563ea805c0d0 'struct __va_list_tag'
|     `-Record 0x563ea805c048 '__va_list_tag'
|-TypedefDecl 0x563ea80be2e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:143:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x563ea805b7b0 'long'
|-TypedefDecl 0x563ea80be350 <line:209:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x563ea805b850 'unsigned long'
|-TypedefDecl 0x563ea80be3c0 <line:321:1, col:24> col:24 wchar_t 'int'
| `-BuiltinType 0x563ea805b790 'int'
|-RecordDecl 0x563ea80be418 <line:415:9, line:426:1> line:415:9 struct definition
| |-FieldDecl 0x563ea80be510 <line:416:3, col:13> col:13 __max_align_ll 'long long'
| | `-AlignedAttr 0x563ea80be558 <col:43, col:77> aligned
| |   `-UnaryExprOrTypeTraitExpr 0x563ea80be4d8 <col:55, col:76> 'unsigned long' alignof 'long long'
| `-FieldDecl 0x563ea80be5f8 <line:417:3, col:15> col:15 __max_align_ld 'long double'
|   `-AlignedAttr 0x563ea80be640 <col:45, col:81> aligned
|     `-UnaryExprOrTypeTraitExpr 0x563ea80be5c0 <col:57, col:80> 'unsigned long' alignof 'long double'
|-TypedefDecl 0x563ea80be6e0 <line:415:1, line:426:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x563ea80be690 'struct max_align_t' sugar
|   `-RecordType 0x563ea80be4a0 'max_align_t'
|     `-Record 0x563ea80be418 ''
|-TypedefDecl 0x563ea80be780 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h:40:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x563ea80be750 '__builtin_va_list' sugar
|   |-Typedef 0x563ea805c2b8 '__builtin_va_list'
|   `-ConstantArrayType 0x563ea805c260 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x563ea805c0d0 'struct __va_list_tag'
|       `-Record 0x563ea805c048 '__va_list_tag'
|-TypedefDecl 0x563ea80be810 <line:99:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x563ea80be7e0 '__gnuc_va_list' sugar
|   |-Typedef 0x563ea80be780 '__gnuc_va_list'
|   `-TypedefType 0x563ea80be750 '__builtin_va_list' sugar
|     |-Typedef 0x563ea805c2b8 '__builtin_va_list'
|     `-ConstantArrayType 0x563ea805c260 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x563ea805c0d0 'struct __va_list_tag'
|         `-Record 0x563ea805c048 '__va_list_tag'
|-TypedefDecl 0x563ea80be880 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdint.h:40:1, col:24> col:24 int8_t 'signed char'
| `-BuiltinType 0x563ea805b750 'signed char'
|-TypedefDecl 0x563ea80be8f0 <line:41:1, col:25> col:25 int16_t 'short'
| `-BuiltinType 0x563ea805b770 'short'
|-TypedefDecl 0x563ea80be960 <line:42:1, col:25> col:25 int32_t 'int'
| `-BuiltinType 0x563ea805b790 'int'
|-TypedefDecl 0x563ea80be9d0 <line:43:1, col:25> col:25 int64_t 'long'
| `-BuiltinType 0x563ea805b7b0 'long'
|-TypedefDecl 0x563ea80bea40 <line:45:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x563ea805b750 'signed char'
|-TypedefDecl 0x563ea80beab0 <line:46:1, col:29> col:29 int_fast16_t 'short'
| `-BuiltinType 0x563ea805b770 'short'
|-TypedefDecl 0x563ea80beb20 <line:47:1, col:29> col:29 int_fast32_t 'int'
| `-BuiltinType 0x563ea805b790 'int'
|-TypedefDecl 0x563ea80beb90 <line:48:1, col:29> col:29 int_fast64_t 'long'
| `-BuiltinType 0x563ea805b7b0 'long'
|-TypedefDecl 0x563ea80bec00 <line:50:1, col:29> col:29 int_least8_t 'signed char'
| `-BuiltinType 0x563ea805b750 'signed char'
|-TypedefDecl 0x563ea80bec70 <line:51:1, col:30> col:30 int_least16_t 'short'
| `-BuiltinType 0x563ea805b770 'short'
|-TypedefDecl 0x563ea80bece0 <line:52:1, col:30> col:30 int_least32_t 'int'
| `-BuiltinType 0x563ea805b790 'int'
|-TypedefDecl 0x563ea80bed50 <line:53:1, col:30> col:30 int_least64_t 'long'
| `-BuiltinType 0x563ea805b7b0 'long'
|-TypedefDecl 0x563ea80bedc0 <line:55:1, col:25> col:25 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x563ea805b7f0 'unsigned char'
|-TypedefDecl 0x563ea80bee30 <line:56:1, col:26> col:26 uint16_t 'unsigned short'
| `-BuiltinType 0x563ea805b810 'unsigned short'
|-TypedefDecl 0x563ea80beea0 <line:57:1, col:26> col:26 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x563ea805b830 'unsigned int'
|-TypedefDecl 0x563ea80bef10 <line:58:1, col:26> col:26 uint64_t 'unsigned long'
| `-BuiltinType 0x563ea805b850 'unsigned long'
|-TypedefDecl 0x563ea80bef80 <line:60:1, col:29> col:29 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x563ea805b7f0 'unsigned char'
|-TypedefDecl 0x563ea80beff0 <line:61:1, col:30> col:30 uint_fast16_t 'unsigned short'
| `-BuiltinType 0x563ea805b810 'unsigned short'
|-TypedefDecl 0x563ea80bf060 <line:62:1, col:30> col:30 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x563ea805b830 'unsigned int'
|-TypedefDecl 0x563ea80bf0d0 <line:63:1, col:30> col:30 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x563ea805b850 'unsigned long'
|-TypedefDecl 0x563ea80bf140 <line:65:1, col:30> col:30 uint_least8_t 'unsigned char'
| `-BuiltinType 0x563ea805b7f0 'unsigned char'
|-TypedefDecl 0x563ea80bf1b0 <line:66:1, col:31> col:31 uint_least16_t 'unsigned short'
| `-BuiltinType 0x563ea805b810 'unsigned short'
|-TypedefDecl 0x563ea80db130 <line:67:1, col:31> col:31 uint_least32_t 'unsigned int'
| `-BuiltinType 0x563ea805b830 'unsigned int'
|-TypedefDecl 0x563ea80db1a0 <line:68:1, col:31> col:31 uint_least64_t 'unsigned long'
| `-BuiltinType 0x563ea805b850 'unsigned long'
|-TypedefDecl 0x563ea80db210 <line:70:1, col:26> col:26 intptr_t 'long'
| `-BuiltinType 0x563ea805b7b0 'long'
|-TypedefDecl 0x563ea80db280 <line:71:1, col:26> col:26 referenced uintptr_t 'unsigned long'
| `-BuiltinType 0x563ea805b850 'unsigned long'
|-FunctionDecl 0x563ea80db430 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:51:1, line:54:1> line:51:40 printk 'void (const char *, ...)' static inline
| |-ParmVarDecl 0x563ea80db370 <col:47, col:59> col:59 used fmt 'const char *'
| |-CompoundStmt 0x563ea80db638 <line:52:1, line:54:1>
| | `-CStyleCastExpr 0x563ea80db610 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x563ea80db5f8 <col:29, col:31> 'const char *' <LValueToRValue>
| |     `-ParenExpr 0x563ea80db5d8 <col:29, col:31> 'const char *' lvalue
| |       `-DeclRefExpr 0x563ea80db570 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:53:13> 'const char *' lvalue ParmVar 0x563ea80db370 'fmt' 'const char *'
| `-FormatAttr 0x563ea80db4d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 2
|-FunctionDecl 0x563ea80db8c0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:56:1, line:60:1> line:56:40 vprintk 'void (const char *, struct __va_list_tag *)' static inline
| |-ParmVarDecl 0x563ea80db6b8 <col:48, col:60> col:60 used fmt 'const char *'
| |-ParmVarDecl 0x563ea80db7b0 <col:65, col:73> col:73 used ap 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x563ea80dbb58 <line:57:1, line:60:1>
| | |-CStyleCastExpr 0x563ea80dba68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x563ea80dba50 <col:29, col:31> 'const char *' <LValueToRValue>
| | |   `-ParenExpr 0x563ea80dba30 <col:29, col:31> 'const char *' lvalue
| | |     `-DeclRefExpr 0x563ea80db9c8 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:58:13> 'const char *' lvalue ParmVar 0x563ea80db6b8 'fmt' 'const char *'
| | `-CStyleCastExpr 0x563ea80dbb30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x563ea80dbb18 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue>
| |     `-ParenExpr 0x563ea80dbaf8 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue
| |       `-DeclRefExpr 0x563ea80dba90 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:59:13> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x563ea80db7b0 'ap' 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x563ea80db970 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 0
|-FunctionDecl 0x563ea80dbe28 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:63:1, line:64:26> line:63:32 snprintk 'int (char *, size_t, const char *, ...)' extern
| |-ParmVarDecl 0x563ea80dbbe0 <col:41, col:47> col:47 str 'char *'
| |-ParmVarDecl 0x563ea80dbc70 <col:52, col:59> col:59 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea80dbce8 <line:64:6, col:18> col:18 fmt 'const char *'
| `-FormatAttr 0x563ea80dbee0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 4
|-FunctionDecl 0x563ea80df408 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:65:1, line:66:35> line:65:32 vsnprintk 'int (char *, size_t, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x563ea80dbfa0 <col:42, col:48> col:48 str 'char *'
| |-ParmVarDecl 0x563ea80dc010 <col:53, col:60> col:60 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea80dc088 <line:66:8, col:20> col:20 fmt 'const char *'
| |-ParmVarDecl 0x563ea80df2c0 <col:25, col:33> col:33 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x563ea80df4c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x563ea80dfa10 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:68:1, line:69:34> line:68:33 z_vprintk 'void (int (*)(int, void *), void *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x563ea80df770 <col:43, col:68> col:49 out 'int (*)(int, void *)'
| |-ParmVarDecl 0x563ea80df7e8 <col:71, col:77> col:77 ctx 'void *'
| |-ParmVarDecl 0x563ea80df860 <line:69:7, col:19> col:19 fmt 'const char *'
| |-ParmVarDecl 0x563ea80df8d0 <col:24, col:32> col:32 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x563ea80dfad0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-TypedefDecl 0x563ea80dfba0 </vagrant/ext/zephyros/zephyr/include/zephyr/types.h:16:1, col:29> col:29 referenced s8_t 'signed char'
| `-BuiltinType 0x563ea805b750 'signed char'
|-TypedefDecl 0x563ea80dfc10 <line:17:1, col:29> col:29 s16_t 'short'
| `-BuiltinType 0x563ea805b770 'short'
|-TypedefDecl 0x563ea80dfc80 <line:18:1, col:29> col:29 referenced s32_t 'int'
| `-BuiltinType 0x563ea805b790 'int'
|-TypedefDecl 0x563ea80dfcf0 <line:19:1, col:29> col:29 referenced s64_t 'long long'
| `-BuiltinType 0x563ea805b7d0 'long long'
|-TypedefDecl 0x563ea80dfd60 <line:21:1, col:29> col:29 referenced u8_t 'unsigned char'
| `-BuiltinType 0x563ea805b7f0 'unsigned char'
|-TypedefDecl 0x563ea80dfdd0 <line:22:1, col:29> col:29 referenced u16_t 'unsigned short'
| `-BuiltinType 0x563ea805b810 'unsigned short'
|-TypedefDecl 0x563ea80dfe40 <line:23:1, col:29> col:29 referenced u32_t 'unsigned int'
| `-BuiltinType 0x563ea805b830 'unsigned int'
|-TypedefDecl 0x563ea80dfeb0 <line:24:1, col:29> col:29 referenced u64_t 'unsigned long long'
| `-BuiltinType 0x563ea805b870 'unsigned long long'
|-TypedefDecl 0x563ea80dff20 <line:27:1, col:29> col:29 ulong_t 'unsigned long'
| `-BuiltinType 0x563ea805b850 'unsigned long'
|-TypedefDecl 0x563ea80dffc0 </vagrant/ext/zephyros/zephyr/include/sys/atomic.h:21:1, col:13> col:13 referenced atomic_t 'int'
| `-BuiltinType 0x563ea805b790 'int'
|-TypedefDecl 0x563ea80e0050 <line:22:1, col:18> col:18 referenced atomic_val_t 'atomic_t':'int'
| `-TypedefType 0x563ea80e0020 'atomic_t' sugar
|   |-Typedef 0x563ea80dffc0 'atomic_t'
|   `-BuiltinType 0x563ea805b790 'int'
|-FunctionDecl 0x563ea80ed248 <line:56:1, line:57:31> line:56:12 atomic_cas 'int (atomic_t *, atomic_val_t, atomic_val_t)' extern
| |-ParmVarDecl 0x563ea80e0178 <col:23, col:33> col:33 target 'atomic_t *'
| |-ParmVarDecl 0x563ea80e0210 <col:41, col:54> col:54 old_value 'atomic_val_t':'int'
| `-ParmVarDecl 0x563ea80ed110 <line:57:9, col:22> col:22 new_value 'atomic_val_t':'int'
|-FunctionDecl 0x563ea80ed4c0 <line:79:1, col:68> col:21 atomic_add 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x563ea80ed338 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x563ea80ed3a8 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x563ea80ed6a8 <line:101:1, col:68> col:21 atomic_sub 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x563ea80ed5a8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x563ea80ed618 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x563ea80ed8a0 <line:120:1, col:48> col:21 atomic_inc 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x563ea80ed798 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x563ea80eda10 <line:139:1, col:48> col:21 atomic_dec 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x563ea80ed988 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x563ea80edc30 <line:158:1, col:54> col:21 used atomic_get 'atomic_val_t (const atomic_t *)' extern
| `-ParmVarDecl 0x563ea80edb28 <col:32, col:48> col:48 target 'const atomic_t *'
|-FunctionDecl 0x563ea80ede18 <line:185:1, col:68> col:21 atomic_set 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x563ea80edd18 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x563ea80edd88 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x563ea80edf90 <line:205:1, col:50> col:21 atomic_clear 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x563ea80edf08 <col:34, col:44> col:44 target 'atomic_t *'
|-FunctionDecl 0x563ea80ee1b0 <line:229:1, col:67> col:21 used atomic_or 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x563ea80ee078 <col:31, col:41> col:41 target 'atomic_t *'
| `-ParmVarDecl 0x563ea80ee120 <col:49, col:62> col:62 value 'atomic_val_t':'int'
|-FunctionDecl 0x563ea80ee398 <line:252:1, col:68> col:21 atomic_xor 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x563ea80ee298 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x563ea80ee308 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x563ea80ee588 <line:275:1, col:68> col:21 used atomic_and 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x563ea80ee488 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x563ea80ee4f8 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x563ea80ee778 <line:298:1, col:69> col:21 atomic_nand 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x563ea80ee678 <col:33, col:43> col:43 target 'atomic_t *'
| `-ParmVarDecl 0x563ea80ee6e8 <col:51, col:64> col:64 value 'atomic_val_t':'int'
|-FunctionDecl 0x563ea80eeab0 <line:351:1, line:356:1> line:351:20 used atomic_test_bit 'bool (const atomic_t *, int)' static inline
| |-ParmVarDecl 0x563ea80ee928 <col:36, col:52> col:52 used target 'const atomic_t *'
| |-ParmVarDecl 0x563ea80ee9a0 <col:60, col:64> col:64 used bit 'int'
| |-CompoundStmt 0x563ea80f0aa8 <line:352:1, line:356:1>
| | |-DeclStmt 0x563ea80eeeb0 <line:353:2, col:57>
| | | `-VarDecl 0x563ea80eeb70 <col:2, col:56> col:15 used val 'atomic_val_t':'int' cinit
| | |   `-CallExpr 0x563ea80eee80 <col:21, col:56> 'atomic_val_t':'int'
| | |     |-ImplicitCastExpr 0x563ea80eee68 <col:21> 'atomic_val_t (*)(const atomic_t *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x563ea80eebd0 <col:21> 'atomic_val_t (const atomic_t *)' Function 0x563ea80edc30 'atomic_get' 'atomic_val_t (const atomic_t *)'
| | |     `-ParenExpr 0x563ea80eedf0 <line:318:32, col:63> 'const atomic_t *'
| | |       `-BinaryOperator 0x563ea80eedc8 <col:33, col:62> 'const atomic_t *' '+'
| | |         |-ImplicitCastExpr 0x563ea80eedb0 <col:33, col:38> 'const atomic_t *' <LValueToRValue>
| | |         | `-ParenExpr 0x563ea80eec20 <col:33, col:38> 'const atomic_t *' lvalue
| | |         |   `-DeclRefExpr 0x563ea80eebf8 <line:353:44> 'const atomic_t *' lvalue ParmVar 0x563ea80ee928 'target' 'const atomic_t *'
| | |         `-ParenExpr 0x563ea80eed90 <line:318:42, col:62> 'unsigned long'
| | |           `-BinaryOperator 0x563ea80eed68 <col:43, line:316:46> 'unsigned long' '/'
| | |             |-ImplicitCastExpr 0x563ea80eed50 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |             | `-ImplicitCastExpr 0x563ea80eed38 <col:43, col:47> 'int' <LValueToRValue>
| | |             |   `-ParenExpr 0x563ea80eec68 <col:43, col:47> 'int' lvalue
| | |             |     `-DeclRefExpr 0x563ea80eec40 <line:353:52> 'int' lvalue ParmVar 0x563ea80ee9a0 'bit' 'int'
| | |             `-ParenExpr 0x563ea80eed18 <line:316:21, col:46> 'unsigned long'
| | |               `-BinaryOperator 0x563ea80eecf0 <col:22, col:45> 'unsigned long' '*'
| | |                 |-UnaryExprOrTypeTraitExpr 0x563ea80eec98 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |                 `-ImplicitCastExpr 0x563ea80eecd8 <col:45> 'unsigned long' <IntegralCast>
| | |                   `-IntegerLiteral 0x563ea80eecb8 <col:45> 'int' 8
| | `-ReturnStmt 0x563ea80f0a68 <line:355:2, col:53>
| |   `-ImplicitCastExpr 0x563ea80f0a50 <col:9, col:53> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x563ea80f0a28 <col:9, col:53> 'int' '!='
| |       |-ParenExpr 0x563ea80f09e8 <col:9, col:48> 'int'
| |       | `-BinaryOperator 0x563ea80f09c0 <col:10, col:47> 'int' '&'
| |       |   |-IntegerLiteral 0x563ea80eeec8 <col:10> 'int' 1
| |       |   `-ParenExpr 0x563ea80f09a0 <col:14, col:47> 'atomic_val_t':'int'
| |       |     `-BinaryOperator 0x563ea80ef0f8 <col:15, col:46> 'atomic_val_t':'int' '>>'
| |       |       |-ImplicitCastExpr 0x563ea80ef0e0 <col:15> 'atomic_val_t':'int' <LValueToRValue>
| |       |       | `-DeclRefExpr 0x563ea80eeee8 <col:15> 'atomic_val_t':'int' lvalue Var 0x563ea80eeb70 'val' 'atomic_val_t':'int'
| |       |       `-ParenExpr 0x563ea80ef0c0 <col:22, col:46> 'unsigned long'
| |       |         `-BinaryOperator 0x563ea80ef098 <col:23, col:45> 'unsigned long' '&'
| |       |           |-ImplicitCastExpr 0x563ea80ef080 <col:23> 'unsigned long' <IntegralCast>
| |       |           | `-ImplicitCastExpr 0x563ea80ef068 <col:23> 'int' <LValueToRValue>
| |       |           |   `-DeclRefExpr 0x563ea80eef10 <col:23> 'int' lvalue ParmVar 0x563ea80ee9a0 'bit' 'int'
| |       |           `-ParenExpr 0x563ea80ef048 <col:29, col:45> 'unsigned long'
| |       |             `-BinaryOperator 0x563ea80ef020 <line:316:21, line:355:44> 'unsigned long' '-'
| |       |               |-ParenExpr 0x563ea80eefc8 <line:316:21, col:46> 'unsigned long'
| |       |               | `-BinaryOperator 0x563ea80eefa0 <col:22, col:45> 'unsigned long' '*'
| |       |               |   |-UnaryExprOrTypeTraitExpr 0x563ea80eef48 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |       |               |   `-ImplicitCastExpr 0x563ea80eef88 <col:45> 'unsigned long' <IntegralCast>
| |       |               |     `-IntegerLiteral 0x563ea80eef68 <col:45> 'int' 8
| |       |               `-ImplicitCastExpr 0x563ea80ef008 <line:355:44> 'unsigned long' <IntegralCast>
| |       |                 `-IntegerLiteral 0x563ea80eefe8 <col:44> 'int' 1
| |       `-IntegerLiteral 0x563ea80f0a08 <col:53> 'int' 0
| `-FullComment 0x563ea826df70 <line:341:3, line:349:55>
|   |-ParagraphComment 0x563ea826da80 <line:341:3>
|   | `-TextComment 0x563ea826da50 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea826daa0 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x563ea826db00 <col:10, col:32>
|   |   `-TextComment 0x563ea826dad0 <col:10, col:32> Text=" Atomically test a bit."
|   |-ParagraphComment 0x563ea826dc70 <line:343:3, line:344:66>
|   | |-TextComment 0x563ea826db20 <line:343:3, col:41> Text=" This routine tests whether bit number "
|   | |-InlineCommandComment 0x563ea826db70 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x563ea826db90 <col:48, col:51> Text=" of "
|   | |-InlineCommandComment 0x563ea826dbe0 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x563ea826dc00 <col:61, col:75> Text=" is set or not."
|   | `-TextComment 0x563ea826dc20 <line:344:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x563ea826dcc0 <line:346:3>
|   | `-TextComment 0x563ea826dc90 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea826dce0 <col:4, line:347:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x563ea826dd90 <line:346:17, line:347:3>
|   |   |-TextComment 0x563ea826dd40 <line:346:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x563ea826dd60 <line:347:3> Text=" "
|   |-ParamCommandComment 0x563ea826ddb0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x563ea826de40 <col:14, col:43>
|   |   `-TextComment 0x563ea826de10 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x563ea826de90 <line:349:3>
|   | `-TextComment 0x563ea826de60 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea826deb0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x563ea826df10 <col:11, col:55>
|       `-TextComment 0x563ea826dee0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x563ea80f0c60 <line:369:1, line:377:1> line:369:20 atomic_test_and_clear_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x563ea80f0ad8 <col:46, col:56> col:56 used target 'atomic_t *'
| |-ParmVarDecl 0x563ea80f0b50 <col:64, col:68> col:68 used bit 'int'
| |-CompoundStmt 0x563ea80f1608 <line:370:1, line:377:1>
| | |-DeclStmt 0x563ea80f1060 <line:371:2, col:38>
| | | `-VarDecl 0x563ea80f0d20 <col:2, line:317:66> line:371:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x563ea80f1040 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x563ea80f1018 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x563ea80f0d80 <col:27> 'int' 1
| | |       `-ParenExpr 0x563ea80f0ff8 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x563ea80f0fd0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x563ea80f0fb8 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x563ea80f0e60 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x563ea80f0e48 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x563ea80f0e28 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x563ea80f0dc0 <line:371:34> 'int' lvalue ParmVar 0x563ea80f0b50 'bit' 'int'
| | |           `-ParenExpr 0x563ea80f0f98 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x563ea80f0f70 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x563ea80f0f18 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x563ea80f0ef0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x563ea80f0e98 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x563ea80f0ed8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x563ea80f0eb8 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x563ea80f0f58 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x563ea80f0f38 <col:63> 'int' 1
| | |-DeclStmt 0x563ea80f10e8 <line:372:2, col:18>
| | | `-VarDecl 0x563ea80f1088 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x563ea80f1478 <line:374:2, col:50> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x563ea80f1100 <col:2> 'atomic_val_t':'int' lvalue Var 0x563ea80f1088 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x563ea80f1440 <col:8, col:50> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x563ea80f1428 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x563ea80f1128 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x563ea80ee588 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x563ea80f1348 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x563ea80f1320 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x563ea80f1308 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x563ea80f1178 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x563ea80f1150 <line:374:31> 'atomic_t *' lvalue ParmVar 0x563ea80f0ad8 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x563ea80f12e8 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x563ea80f12c0 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x563ea80f12a8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x563ea80f1290 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x563ea80f11c0 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x563ea80f1198 <line:374:39> 'int' lvalue ParmVar 0x563ea80f0b50 'bit' 'int'
| | |   |       `-ParenExpr 0x563ea80f1270 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x563ea80f1248 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x563ea80f11f0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x563ea80f1230 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x563ea80f1210 <col:45> 'int' 8
| | |   `-UnaryOperator 0x563ea80f13a8 <line:374:45, col:46> 'atomic_val_t':'int' prefix '~'
| | |     `-ImplicitCastExpr 0x563ea80f1390 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x563ea80f1368 <col:46> 'atomic_val_t':'int' lvalue Var 0x563ea80f0d20 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x563ea80f15c8 <line:376:2, col:25>
| |   `-ImplicitCastExpr 0x563ea80f15b0 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x563ea80f1588 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x563ea80f1548 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x563ea80f1520 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x563ea80f14f0 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x563ea80f14a0 <col:10> 'atomic_val_t':'int' lvalue Var 0x563ea80f1088 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x563ea80f1508 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x563ea80f14c8 <col:16> 'atomic_val_t':'int' lvalue Var 0x563ea80f0d20 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x563ea80f1568 <col:25> 'int' 0
| `-FullComment 0x563ea826e500 <line:359:3, line:367:55>
|   |-ParagraphComment 0x563ea826e010 <line:359:3>
|   | `-TextComment 0x563ea826dfe0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea826e030 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x563ea826e090 <col:10, col:42>
|   |   `-TextComment 0x563ea826e060 <col:10, col:42> Text=" Atomically test and clear a bit."
|   |-ParagraphComment 0x563ea826e200 <line:361:3, line:362:66>
|   | |-TextComment 0x563ea826e0b0 <line:361:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x563ea826e100 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x563ea826e120 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x563ea826e170 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x563ea826e190 <col:51, col:76> Text=" and return its old value."
|   | `-TextComment 0x563ea826e1b0 <line:362:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x563ea826e250 <line:364:3>
|   | `-TextComment 0x563ea826e220 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea826e270 <col:4, line:365:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x563ea826e320 <line:364:17, line:365:3>
|   |   |-TextComment 0x563ea826e2d0 <line:364:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x563ea826e2f0 <line:365:3> Text=" "
|   |-ParamCommandComment 0x563ea826e340 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x563ea826e3d0 <col:14, col:43>
|   |   `-TextComment 0x563ea826e3a0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x563ea826e420 <line:367:3>
|   | `-TextComment 0x563ea826e3f0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea826e440 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x563ea826e4a0 <col:11, col:55>
|       `-TextComment 0x563ea826e470 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x563ea80f1750 <line:390:1, line:398:1> line:390:20 used atomic_test_and_set_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x563ea80f1648 <col:44, col:54> col:54 used target 'atomic_t *'
| |-ParmVarDecl 0x563ea80f16c0 <col:62, col:66> col:66 used bit 'int'
| |-CompoundStmt 0x563ea80f2088 <line:391:1, line:398:1>
| | |-DeclStmt 0x563ea80f1b58 <line:392:2, col:38>
| | | `-VarDecl 0x563ea80f1810 <col:2, line:317:66> line:392:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x563ea80f1b38 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x563ea80f1b10 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x563ea80f1870 <col:27> 'int' 1
| | |       `-ParenExpr 0x563ea80f1af0 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x563ea80f1ac8 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x563ea80f1ab0 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x563ea80f1930 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x563ea80f1918 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x563ea80f18f8 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x563ea80f1890 <line:392:34> 'int' lvalue ParmVar 0x563ea80f16c0 'bit' 'int'
| | |           `-ParenExpr 0x563ea80f1a90 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x563ea80f1a68 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x563ea80f1a10 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x563ea80f19e8 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x563ea80f1968 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x563ea80f19d0 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x563ea80f19b0 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x563ea80f1a50 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x563ea80f1a30 <col:63> 'int' 1
| | |-DeclStmt 0x563ea80f1be0 <line:393:2, col:18>
| | | `-VarDecl 0x563ea80f1b80 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x563ea80f1ef0 <line:395:2, col:48> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x563ea80f1bf8 <col:2> 'atomic_val_t':'int' lvalue Var 0x563ea80f1b80 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x563ea80f1ea0 <col:8, col:48> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x563ea80f1e88 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x563ea80f1c20 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x563ea80ee1b0 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x563ea80f1e40 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x563ea80f1e18 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x563ea80f1e00 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x563ea80f1c70 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x563ea80f1c48 <line:395:30> 'atomic_t *' lvalue ParmVar 0x563ea80f1648 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x563ea80f1de0 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x563ea80f1db8 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x563ea80f1da0 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x563ea80f1d88 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x563ea80f1cb8 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x563ea80f1c90 <line:395:38> 'int' lvalue ParmVar 0x563ea80f16c0 'bit' 'int'
| | |   |       `-ParenExpr 0x563ea80f1d68 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x563ea80f1d40 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x563ea80f1ce8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x563ea80f1d28 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x563ea80f1d08 <col:45> 'int' 8
| | |   `-ImplicitCastExpr 0x563ea80f1ed8 <line:395:44> 'atomic_val_t':'int' <LValueToRValue>
| | |     `-DeclRefExpr 0x563ea80f1e60 <col:44> 'atomic_val_t':'int' lvalue Var 0x563ea80f1810 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x563ea80f2040 <line:397:2, col:25>
| |   `-ImplicitCastExpr 0x563ea80f2028 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x563ea80f2000 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x563ea80f1fc0 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x563ea80f1f98 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x563ea80f1f68 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x563ea80f1f18 <col:10> 'atomic_val_t':'int' lvalue Var 0x563ea80f1b80 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x563ea80f1f80 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x563ea80f1f40 <col:16> 'atomic_val_t':'int' lvalue Var 0x563ea80f1810 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x563ea80f1fe0 <col:25> 'int' 0
| `-FullComment 0x563ea8273300 <line:380:3, line:388:55>
|   |-ParagraphComment 0x563ea826e5a0 <line:380:3>
|   | `-TextComment 0x563ea826e570 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea826e5c0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x563ea826e620 <col:10, col:31>
|   |   `-TextComment 0x563ea826e5f0 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x563ea826e790 <line:382:3, line:383:66>
|   | |-TextComment 0x563ea826e640 <line:382:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x563ea826e690 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x563ea826e6b0 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x563ea826e700 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x563ea826e720 <col:49, col:74> Text=" and return its old value."
|   | `-TextComment 0x563ea826e740 <line:383:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x563ea826e7e0 <line:385:3>
|   | `-TextComment 0x563ea826e7b0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea826e800 <col:4, line:386:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x563ea826e8b0 <line:385:17, line:386:3>
|   |   |-TextComment 0x563ea826e860 <line:385:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x563ea826e880 <line:386:3> Text=" "
|   |-ParamCommandComment 0x563ea826e8d0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x563ea826e960 <col:14, col:43>
|   |   `-TextComment 0x563ea826e930 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x563ea826e9b0 <line:388:3>
|   | `-TextComment 0x563ea826e980 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea826e9d0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x563ea826ea30 <col:11, col:55>
|       `-TextComment 0x563ea826ea00 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x563ea80f2250 <line:411:1, line:416:1> line:411:20 used atomic_clear_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x563ea80f20c8 <col:37, col:47> col:47 used target 'atomic_t *'
| |-ParmVarDecl 0x563ea80f2140 <col:55, col:59> col:59 used bit 'int'
| |-CompoundStmt 0x563ea80f29c0 <line:412:1, line:416:1>
| | |-DeclStmt 0x563ea80f2630 <line:413:2, col:38>
| | | `-VarDecl 0x563ea80f2310 <col:2, line:317:66> line:413:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x563ea80f2610 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x563ea80f25e8 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x563ea80f2370 <col:27> 'int' 1
| | |       `-ParenExpr 0x563ea80f25c8 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x563ea80f25a0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x563ea80f2588 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x563ea80f2430 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x563ea80f2418 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x563ea80f23f8 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x563ea80f2390 <line:413:34> 'int' lvalue ParmVar 0x563ea80f2140 'bit' 'int'
| | |           `-ParenExpr 0x563ea80f2568 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x563ea80f2540 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x563ea80f24e8 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x563ea80f24c0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x563ea80f2468 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x563ea80f24a8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x563ea80f2488 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x563ea80f2528 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x563ea80f2508 <col:63> 'int' 1
| | `-CStyleCastExpr 0x563ea80f2948 <line:415:2, col:50> 'void' <ToVoid>
| |   `-CallExpr 0x563ea80f2900 <col:8, col:50> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x563ea80f28e8 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea80f2648 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x563ea80ee588 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x563ea80f2868 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x563ea80f2840 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x563ea80f2828 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x563ea80f2698 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x563ea80f2670 <line:415:31> 'atomic_t *' lvalue ParmVar 0x563ea80f20c8 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x563ea80f2808 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x563ea80f27e0 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x563ea80f27c8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x563ea80f27b0 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x563ea80f26e0 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x563ea80f26b8 <line:415:39> 'int' lvalue ParmVar 0x563ea80f2140 'bit' 'int'
| |     |       `-ParenExpr 0x563ea80f2790 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x563ea80f2768 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x563ea80f2710 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x563ea80f2750 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x563ea80f2730 <col:45> 'int' 8
| |     `-UnaryOperator 0x563ea80f28c8 <line:415:45, col:46> 'atomic_val_t':'int' prefix '~'
| |       `-ImplicitCastExpr 0x563ea80f28b0 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| |         `-DeclRefExpr 0x563ea80f2888 <col:46> 'atomic_val_t':'int' lvalue Var 0x563ea80f2310 'mask' 'atomic_val_t':'int'
| `-FullComment 0x563ea8273870 <line:401:3, line:409:14>
|   |-ParagraphComment 0x563ea82733a0 <line:401:3>
|   | `-TextComment 0x563ea8273370 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82733c0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x563ea8273420 <col:10, col:33>
|   |   `-TextComment 0x563ea82733f0 <col:10, col:33> Text=" Atomically clear a bit."
|   |-ParagraphComment 0x563ea8273570 <line:403:3, line:404:66>
|   | |-TextComment 0x563ea8273440 <line:403:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x563ea8273490 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x563ea82734b0 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x563ea8273500 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x563ea8273520 <line:404:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x563ea82735c0 <line:406:3>
|   | `-TextComment 0x563ea8273590 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82735e0 <col:4, line:407:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x563ea8273690 <line:406:17, line:407:3>
|   |   |-TextComment 0x563ea8273640 <line:406:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x563ea8273660 <line:407:3> Text=" "
|   |-ParamCommandComment 0x563ea82736b0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x563ea8273740 <col:14, col:43>
|   |   `-TextComment 0x563ea8273710 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x563ea8273790 <line:409:3>
|   | `-TextComment 0x563ea8273760 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82737b0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea8273810 <col:11, col:14>
|       `-TextComment 0x563ea82737e0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea80f2af8 <line:429:1, line:434:1> line:429:20 atomic_set_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x563ea80f29f0 <col:35, col:45> col:45 used target 'atomic_t *'
| |-ParmVarDecl 0x563ea80f2a68 <col:53, col:57> col:57 used bit 'int'
| |-CompoundStmt 0x563ea80f3228 <line:430:1, line:434:1>
| | |-DeclStmt 0x563ea80f2ed8 <line:431:2, col:38>
| | | `-VarDecl 0x563ea80f2bb8 <col:2, line:317:66> line:431:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x563ea80f2eb8 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x563ea80f2e90 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x563ea80f2c18 <col:27> 'int' 1
| | |       `-ParenExpr 0x563ea80f2e70 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x563ea80f2e48 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x563ea80f2e30 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x563ea80f2cd8 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x563ea80f2cc0 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x563ea80f2ca0 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x563ea80f2c38 <line:431:34> 'int' lvalue ParmVar 0x563ea80f2a68 'bit' 'int'
| | |           `-ParenExpr 0x563ea80f2e10 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x563ea80f2de8 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x563ea80f2d90 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x563ea80f2d68 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x563ea80f2d10 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x563ea80f2d50 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x563ea80f2d30 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x563ea80f2dd0 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x563ea80f2db0 <col:63> 'int' 1
| | `-CStyleCastExpr 0x563ea80f31d0 <line:433:2, col:48> 'void' <ToVoid>
| |   `-CallExpr 0x563ea80f3170 <col:8, col:48> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x563ea80f3158 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea80f2ef0 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x563ea80ee1b0 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x563ea80f3110 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x563ea80f30e8 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x563ea80f30d0 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x563ea80f2f40 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x563ea80f2f18 <line:433:30> 'atomic_t *' lvalue ParmVar 0x563ea80f29f0 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x563ea80f30b0 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x563ea80f3088 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x563ea80f3070 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x563ea80f3058 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x563ea80f2f88 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x563ea80f2f60 <line:433:38> 'int' lvalue ParmVar 0x563ea80f2a68 'bit' 'int'
| |     |       `-ParenExpr 0x563ea80f3038 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x563ea80f3010 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x563ea80f2fb8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x563ea80f2ff8 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x563ea80f2fd8 <col:45> 'int' 8
| |     `-ImplicitCastExpr 0x563ea80f31a8 <line:433:44> 'atomic_val_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x563ea80f3130 <col:44> 'atomic_val_t':'int' lvalue Var 0x563ea80f2bb8 'mask' 'atomic_val_t':'int'
| `-FullComment 0x563ea8273de0 <line:419:3, line:427:14>
|   |-ParagraphComment 0x563ea8273910 <line:419:3>
|   | `-TextComment 0x563ea82738e0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8273930 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x563ea8273990 <col:10, col:31>
|   |   `-TextComment 0x563ea8273960 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x563ea8273ae0 <line:421:3, line:422:66>
|   | |-TextComment 0x563ea82739b0 <line:421:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x563ea8273a00 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x563ea8273a20 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x563ea8273a70 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x563ea8273a90 <line:422:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x563ea8273b30 <line:424:3>
|   | `-TextComment 0x563ea8273b00 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8273b50 <col:4, line:425:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x563ea8273c00 <line:424:17, line:425:3>
|   |   |-TextComment 0x563ea8273bb0 <line:424:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x563ea8273bd0 <line:425:3> Text=" "
|   |-ParamCommandComment 0x563ea8273c20 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x563ea8273cb0 <col:14, col:43>
|   |   `-TextComment 0x563ea8273c80 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x563ea8273d00 <line:427:3>
|   | `-TextComment 0x563ea8273cd0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8273d20 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea8273d80 <col:11, col:14>
|       `-TextComment 0x563ea8273d50 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea80f3470 <line:448:1, line:457:1> line:448:20 atomic_set_bit_to 'void (atomic_t *, int, bool)' static inline
| |-ParmVarDecl 0x563ea80f3258 <col:38, col:48> col:48 used target 'atomic_t *'
| |-ParmVarDecl 0x563ea80f32d0 <col:56, col:60> col:60 used bit 'int'
| |-ParmVarDecl 0x563ea80f3340 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/atomic.h:448:70> col:70 used val 'bool'
| |-CompoundStmt 0x563ea80f5808 <line:449:1, line:457:1>
| | |-DeclStmt 0x563ea80f3858 <line:450:2, col:38>
| | | `-VarDecl 0x563ea80f3538 <col:2, line:317:66> line:450:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x563ea80f3838 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x563ea80f3810 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x563ea80f3598 <col:27> 'int' 1
| | |       `-ParenExpr 0x563ea80f37f0 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x563ea80f37c8 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x563ea80f37b0 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x563ea80f3658 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x563ea80f3640 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x563ea80f3620 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x563ea80f35b8 <line:450:34> 'int' lvalue ParmVar 0x563ea80f32d0 'bit' 'int'
| | |           `-ParenExpr 0x563ea80f3790 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x563ea80f3768 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x563ea80f3710 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x563ea80f36e8 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x563ea80f3690 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x563ea80f36d0 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x563ea80f36b0 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x563ea80f3750 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x563ea80f3730 <col:63> 'int' 1
| | `-IfStmt 0x563ea80f5718 <line:452:2, line:456:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x563ea80f3898 <line:452:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x563ea80f3870 <col:6> 'bool' lvalue ParmVar 0x563ea80f3340 'val' 'bool'
| |   |-CompoundStmt 0x563ea80f53c0 <col:11, line:454:2>
| |   | `-CStyleCastExpr 0x563ea80f5398 <line:453:3, col:49> 'void' <ToVoid>
| |   |   `-CallExpr 0x563ea80f5338 <col:9, col:49> 'atomic_val_t':'int'
| |   |     |-ImplicitCastExpr 0x563ea80f5320 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x563ea80f38b0 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x563ea80ee1b0 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |   |     |-ParenExpr 0x563ea80f52d8 <line:318:32, col:63> 'atomic_t *'
| |   |     | `-BinaryOperator 0x563ea80f52b0 <col:33, col:62> 'atomic_t *' '+'
| |   |     |   |-ImplicitCastExpr 0x563ea80f5298 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |   |     |   | `-ParenExpr 0x563ea80f3900 <col:33, col:38> 'atomic_t *' lvalue
| |   |     |   |   `-DeclRefExpr 0x563ea80f38d8 <line:453:31> 'atomic_t *' lvalue ParmVar 0x563ea80f3258 'target' 'atomic_t *'
| |   |     |   `-ParenExpr 0x563ea80f5278 <line:318:42, col:62> 'unsigned long'
| |   |     |     `-BinaryOperator 0x563ea80f5250 <col:43, line:316:46> 'unsigned long' '/'
| |   |     |       |-ImplicitCastExpr 0x563ea80f5238 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |   |     |       | `-ImplicitCastExpr 0x563ea80f5220 <col:43, col:47> 'int' <LValueToRValue>
| |   |     |       |   `-ParenExpr 0x563ea80f3948 <col:43, col:47> 'int' lvalue
| |   |     |       |     `-DeclRefExpr 0x563ea80f3920 <line:453:39> 'int' lvalue ParmVar 0x563ea80f32d0 'bit' 'int'
| |   |     |       `-ParenExpr 0x563ea80f5200 <line:316:21, col:46> 'unsigned long'
| |   |     |         `-BinaryOperator 0x563ea80f51d8 <col:22, col:45> 'unsigned long' '*'
| |   |     |           |-UnaryExprOrTypeTraitExpr 0x563ea80f3978 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |   |     |           `-ImplicitCastExpr 0x563ea80f51c0 <col:45> 'unsigned long' <IntegralCast>
| |   |     |             `-IntegerLiteral 0x563ea80f3998 <col:45> 'int' 8
| |   |     `-ImplicitCastExpr 0x563ea80f5370 <line:453:45> 'atomic_val_t':'int' <LValueToRValue>
| |   |       `-DeclRefExpr 0x563ea80f52f8 <col:45> 'atomic_val_t':'int' lvalue Var 0x563ea80f3538 'mask' 'atomic_val_t':'int'
| |   `-CompoundStmt 0x563ea80f5700 <line:454:9, line:456:2>
| |     `-CStyleCastExpr 0x563ea80f56d8 <line:455:3, col:51> 'void' <ToVoid>
| |       `-CallExpr 0x563ea80f5690 <col:9, col:51> 'atomic_val_t':'int'
| |         |-ImplicitCastExpr 0x563ea80f5678 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x563ea80f53d8 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x563ea80ee588 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |         |-ParenExpr 0x563ea80f55f8 <line:318:32, col:63> 'atomic_t *'
| |         | `-BinaryOperator 0x563ea80f55d0 <col:33, col:62> 'atomic_t *' '+'
| |         |   |-ImplicitCastExpr 0x563ea80f55b8 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |         |   | `-ParenExpr 0x563ea80f5428 <col:33, col:38> 'atomic_t *' lvalue
| |         |   |   `-DeclRefExpr 0x563ea80f5400 <line:455:32> 'atomic_t *' lvalue ParmVar 0x563ea80f3258 'target' 'atomic_t *'
| |         |   `-ParenExpr 0x563ea80f5598 <line:318:42, col:62> 'unsigned long'
| |         |     `-BinaryOperator 0x563ea80f5570 <col:43, line:316:46> 'unsigned long' '/'
| |         |       |-ImplicitCastExpr 0x563ea80f5558 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |         |       | `-ImplicitCastExpr 0x563ea80f5540 <col:43, col:47> 'int' <LValueToRValue>
| |         |       |   `-ParenExpr 0x563ea80f5470 <col:43, col:47> 'int' lvalue
| |         |       |     `-DeclRefExpr 0x563ea80f5448 <line:455:40> 'int' lvalue ParmVar 0x563ea80f32d0 'bit' 'int'
| |         |       `-ParenExpr 0x563ea80f5520 <line:316:21, col:46> 'unsigned long'
| |         |         `-BinaryOperator 0x563ea80f54f8 <col:22, col:45> 'unsigned long' '*'
| |         |           |-UnaryExprOrTypeTraitExpr 0x563ea80f54a0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |         |           `-ImplicitCastExpr 0x563ea80f54e0 <col:45> 'unsigned long' <IntegralCast>
| |         |             `-IntegerLiteral 0x563ea80f54c0 <col:45> 'int' 8
| |         `-UnaryOperator 0x563ea80f5658 <line:455:46, col:47> 'atomic_val_t':'int' prefix '~'
| |           `-ImplicitCastExpr 0x563ea80f5640 <col:47> 'atomic_val_t':'int' <LValueToRValue>
| |             `-DeclRefExpr 0x563ea80f5618 <col:47> 'atomic_val_t':'int' lvalue Var 0x563ea80f3538 'mask' 'atomic_val_t':'int'
| `-FullComment 0x563ea82744b0 <line:437:3, line:446:14>
|   |-ParagraphComment 0x563ea8273e80 <line:437:3>
|   | `-TextComment 0x563ea8273e50 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8273ea0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x563ea8273f00 <col:10, col:48>
|   |   `-TextComment 0x563ea8273ed0 <col:10, col:48> Text=" Atomically set a bit to a given value."
|   |-ParagraphComment 0x563ea82740d0 <line:439:3, line:440:66>
|   | |-TextComment 0x563ea8273f20 <line:439:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x563ea8273f70 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x563ea8273f90 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x563ea8273fe0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x563ea8274000 <col:49, col:58> Text=" to value "
|   | |-InlineCommandComment 0x563ea8274050 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="val."
|   | `-TextComment 0x563ea8274070 <line:440:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x563ea8274120 <line:442:3>
|   | `-TextComment 0x563ea82740f0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8274140 <col:4, line:443:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x563ea82741f0 <line:442:17, line:443:3>
|   |   |-TextComment 0x563ea82741a0 <line:442:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x563ea82741c0 <line:443:3> Text=" "
|   |-ParamCommandComment 0x563ea8274210 <col:4, line:444:3> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x563ea82742c0 <line:443:14, line:444:3>
|   |   |-TextComment 0x563ea8274270 <line:443:14, col:43> Text=" Bit number (starting from 0)."
|   |   `-TextComment 0x563ea8274290 <line:444:3> Text=" "
|   |-ParamCommandComment 0x563ea82742e0 <col:4, col:38> [in] implicitly Param="val" ParamIndex=2
|   | `-ParagraphComment 0x563ea8274370 <col:14, col:38>
|   |   `-TextComment 0x563ea8274340 <col:14, col:38> Text=" true for 1, false for 0."
|   |-ParagraphComment 0x563ea82743c0 <line:446:3>
|   | `-TextComment 0x563ea8274390 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82743e0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea8274440 <col:11, col:14>
|       `-TextComment 0x563ea8274410 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea80f5900 </vagrant/ext/zephyros/zephyr/include/sys/util.h:113:1, line:116:1> line:113:20 is_power_of_two 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x563ea80f5840 <col:36, col:49> col:49 used x 'unsigned int'
| `-CompoundStmt 0x563ea80f5c58 <line:114:1, line:116:1>
|   `-ReturnStmt 0x563ea80f5c40 <line:115:2, col:42>
|     `-ImplicitCastExpr 0x563ea80f5c28 <col:9, col:42> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x563ea80f5c00 <col:9, col:42> 'int' '&&'
|         |-ParenExpr 0x563ea80f5a30 <col:9, col:17> 'int'
|         | `-BinaryOperator 0x563ea80f5a08 <col:10, col:15> 'int' '!='
|         |   |-ImplicitCastExpr 0x563ea80f59f0 <col:10> 'unsigned int' <LValueToRValue>
|         |   | `-DeclRefExpr 0x563ea80f59a8 <col:10> 'unsigned int' lvalue ParmVar 0x563ea80f5840 'x' 'unsigned int'
|         |   `-IntegerLiteral 0x563ea80f59d0 <col:15> 'unsigned int' 0
|         `-ParenExpr 0x563ea80f5be0 <col:22, col:42> 'int'
|           `-BinaryOperator 0x563ea80f5bb8 <col:23, col:40> 'int' '=='
|             |-ParenExpr 0x563ea80f5b78 <col:23, col:35> 'unsigned int'
|             | `-BinaryOperator 0x563ea80f5b50 <col:24, col:34> 'unsigned int' '&'
|             |   |-ImplicitCastExpr 0x563ea80f5b38 <col:24> 'unsigned int' <LValueToRValue>
|             |   | `-DeclRefExpr 0x563ea80f5a50 <col:24> 'unsigned int' lvalue ParmVar 0x563ea80f5840 'x' 'unsigned int'
|             |   `-ParenExpr 0x563ea80f5b18 <col:28, col:34> 'unsigned int'
|             |     `-BinaryOperator 0x563ea80f5af0 <col:29, col:33> 'unsigned int' '-'
|             |       |-ImplicitCastExpr 0x563ea80f5ac0 <col:29> 'unsigned int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x563ea80f5a78 <col:29> 'unsigned int' lvalue ParmVar 0x563ea80f5840 'x' 'unsigned int'
|             |       `-ImplicitCastExpr 0x563ea80f5ad8 <col:33> 'unsigned int' <IntegralCast>
|             |         `-IntegerLiteral 0x563ea80f5aa0 <col:33> 'int' 1
|             `-IntegerLiteral 0x563ea80f5b98 <col:40> 'unsigned int' 0
|-FunctionDecl 0x563ea80f5e40 <line:118:1, line:134:1> line:118:21 arithmetic_shift_right 's64_t (s64_t, u8_t)' static inline
| |-ParmVarDecl 0x563ea80f5ca0 <col:44, col:50> col:50 used value 's64_t':'long long'
| |-ParmVarDecl 0x563ea80f5d30 <col:57, col:62> col:62 used shift 'u8_t':'unsigned char'
| `-CompoundStmt 0x563ea80fdd48 <line:119:1, line:134:1>
|   |-DeclStmt 0x563ea80f5f60 <line:120:2, col:16>
|   | `-VarDecl 0x563ea80f5f00 <col:2, col:8> col:8 used sign_ext 's64_t':'long long'
|   |-IfStmt 0x563ea80f6088 <line:122:2, line:124:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x563ea80f5ff0 <line:122:6, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x563ea80f5fd8 <col:6> 'unsigned int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x563ea80f5fc0 <col:6> 'u8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x563ea80f5f78 <col:6> 'u8_t':'unsigned char' lvalue ParmVar 0x563ea80f5d30 'shift' 'u8_t':'unsigned char'
|   | | `-IntegerLiteral 0x563ea80f5fa0 <col:15> 'unsigned int' 0
|   | |-CompoundStmt 0x563ea80f6070 <col:19, line:124:2>
|   | | `-ReturnStmt 0x563ea80f6058 <line:123:3, col:10>
|   | |   `-ImplicitCastExpr 0x563ea80f6040 <col:10> 's64_t':'long long' <LValueToRValue>
|   | |     `-DeclRefExpr 0x563ea80f6018 <col:10> 's64_t':'long long' lvalue ParmVar 0x563ea80f5ca0 'value' 's64_t':'long long'
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x563ea80fd9e0 <line:127:2, col:29> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x563ea80f60c0 <col:2> 's64_t':'long long' lvalue Var 0x563ea80f5f00 'sign_ext' 's64_t':'long long'
|   | `-BinaryOperator 0x563ea80fd9b8 <col:13, col:29> 'long long' '&'
|   |   |-ParenExpr 0x563ea80f6170 <col:13, col:25> 's64_t':'long long'
|   |   | `-BinaryOperator 0x563ea80f6148 <col:14, col:23> 's64_t':'long long' '>>'
|   |   |   |-ImplicitCastExpr 0x563ea80f6130 <col:14> 's64_t':'long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x563ea80f60e8 <col:14> 's64_t':'long long' lvalue ParmVar 0x563ea80f5ca0 'value' 's64_t':'long long'
|   |   |   `-IntegerLiteral 0x563ea80f6110 <col:23> 'int' 63
|   |   `-ImplicitCastExpr 0x563ea80fd9a0 <col:29> 'long long' <IntegralCast>
|   |     `-IntegerLiteral 0x563ea80f6190 <col:29> 'int' 1
|   |-BinaryOperator 0x563ea80fda90 <line:130:2, col:14> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x563ea80fda08 <col:2> 's64_t':'long long' lvalue Var 0x563ea80f5f00 'sign_ext' 's64_t':'long long'
|   | `-UnaryOperator 0x563ea80fda70 <col:13, col:14> 's64_t':'long long' prefix '-'
|   |   `-ImplicitCastExpr 0x563ea80fda58 <col:14> 's64_t':'long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x563ea80fda30 <col:14> 's64_t':'long long' lvalue Var 0x563ea80f5f00 'sign_ext' 's64_t':'long long'
|   `-ReturnStmt 0x563ea80fdd08 <line:133:2, col:53>
|     `-BinaryOperator 0x563ea80fdce0 <col:9, col:53> 'long long' '|'
|       |-ParenExpr 0x563ea80fdb78 <col:9, col:24> 's64_t':'long long'
|       | `-BinaryOperator 0x563ea80fdb50 <col:10, col:19> 's64_t':'long long' '>>'
|       |   |-ImplicitCastExpr 0x563ea80fdb08 <col:10> 's64_t':'long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x563ea80fdab8 <col:10> 's64_t':'long long' lvalue ParmVar 0x563ea80f5ca0 'value' 's64_t':'long long'
|       |   `-ImplicitCastExpr 0x563ea80fdb38 <col:19> 'int' <IntegralCast>
|       |     `-ImplicitCastExpr 0x563ea80fdb20 <col:19> 'u8_t':'unsigned char' <LValueToRValue>
|       |       `-DeclRefExpr 0x563ea80fdae0 <col:19> 'u8_t':'unsigned char' lvalue ParmVar 0x563ea80f5d30 'shift' 'u8_t':'unsigned char'
|       `-ParenExpr 0x563ea80fdcc0 <col:28, col:53> 's64_t':'long long'
|         `-BinaryOperator 0x563ea80fdc98 <col:29, col:52> 's64_t':'long long' '<<'
|           |-ImplicitCastExpr 0x563ea80fdc80 <col:29> 's64_t':'long long' <LValueToRValue>
|           | `-DeclRefExpr 0x563ea80fdb98 <col:29> 's64_t':'long long' lvalue Var 0x563ea80f5f00 'sign_ext' 's64_t':'long long'
|           `-ParenExpr 0x563ea80fdc60 <col:41, col:52> 'int'
|             `-BinaryOperator 0x563ea80fdc38 <col:42, col:47> 'int' '-'
|               |-IntegerLiteral 0x563ea80fdbc0 <col:42> 'int' 64
|               `-ImplicitCastExpr 0x563ea80fdc20 <col:47> 'int' <IntegralCast>
|                 `-ImplicitCastExpr 0x563ea80fdc08 <col:47> 'u8_t':'unsigned char' <LValueToRValue>
|                   `-DeclRefExpr 0x563ea80fdbe0 <col:47> 'u8_t':'unsigned char' lvalue ParmVar 0x563ea80f5d30 'shift' 'u8_t':'unsigned char'
|-FunctionDecl 0x563ea80fdf78 <line:144:1, col:29> col:5 char2hex 'int (char, u8_t *)'
| |-ParmVarDecl 0x563ea80fdd90 <col:14, col:19> col:19 c 'char'
| |-ParmVarDecl 0x563ea80fde58 <col:22, col:28> col:28 x 'u8_t *'
| `-FullComment 0x563ea82748d0 <line:137:3, line:142:63>
|   |-ParagraphComment 0x563ea8274550 <line:137:3>
|   | `-TextComment 0x563ea8274520 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8274570 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x563ea82745d0 <col:10, col:68>
|   |   `-TextComment 0x563ea82745a0 <col:10, col:68> Text="      Convert a single character into a hexadecimal nibble."
|   |-ParagraphComment 0x563ea8274620 <line:139:3>
|   | `-TextComment 0x563ea82745f0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8274640 <col:4, line:140:3> [in] explicitly Param="c" ParamIndex=0
|   | `-ParagraphComment 0x563ea82746f0 <line:139:17, line:140:3>
|   |   |-TextComment 0x563ea82746a0 <line:139:17, col:45> Text="     The character to convert"
|   |   `-TextComment 0x563ea82746c0 <line:140:3> Text=" "
|   |-ParamCommandComment 0x563ea8274710 <col:4, col:69> [in] implicitly Param="x" ParamIndex=1
|   | `-ParagraphComment 0x563ea82747a0 <col:17, col:69>
|   |   `-TextComment 0x563ea8274770 <col:17, col:69> Text="     The address of storage for the converted number."
|   |-ParagraphComment 0x563ea82747f0 <line:142:3, col:4>
|   | `-TextComment 0x563ea82747c0 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x563ea8274810 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x563ea8274870 <col:12, col:63>
|       `-TextComment 0x563ea8274840 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x563ea80fe1f8 <line:154:1, col:29> col:5 hex2char 'int (u8_t, char *)'
| |-ParmVarDecl 0x563ea80fe068 <col:14, col:19> col:19 x 'u8_t':'unsigned char'
| |-ParmVarDecl 0x563ea80fe0e0 <col:22, col:28> col:28 c 'char *'
| `-FullComment 0x563ea8274cf0 <line:147:3, line:152:63>
|   |-ParagraphComment 0x563ea8274970 <line:147:3>
|   | `-TextComment 0x563ea8274940 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8274990 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x563ea82749f0 <col:10, col:68>
|   |   `-TextComment 0x563ea82749c0 <col:10, col:68> Text="      Convert a single hexadecimal nibble into a character."
|   |-ParagraphComment 0x563ea8274a40 <line:149:3>
|   | `-TextComment 0x563ea8274a10 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8274a60 <col:4, line:150:3> [in] explicitly Param="c" ParamIndex=1
|   | `-ParagraphComment 0x563ea8274b10 <line:149:17, line:150:3>
|   |   |-TextComment 0x563ea8274ac0 <line:149:17, col:42> Text="     The number to convert"
|   |   `-TextComment 0x563ea8274ae0 <line:150:3> Text=" "
|   |-ParamCommandComment 0x563ea8274b30 <col:4, col:72> [in] implicitly Param="x" ParamIndex=0
|   | `-ParagraphComment 0x563ea8274bc0 <col:17, col:72>
|   |   `-TextComment 0x563ea8274b90 <col:17, col:72> Text="     The address of storage for the converted character."
|   |-ParagraphComment 0x563ea8274c10 <line:152:3, col:4>
|   | `-TextComment 0x563ea8274be0 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x563ea8274c30 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x563ea8274c90 <col:12, col:63>
|       `-TextComment 0x563ea8274c60 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x563ea80fe5e0 <line:166:1, col:72> col:8 bin2hex 'size_t (const u8_t *, size_t, char *, size_t)'
| |-ParmVarDecl 0x563ea80fe348 <col:16, col:28> col:28 buf 'const u8_t *'
| |-ParmVarDecl 0x563ea80fe3b8 <col:33, col:40> col:40 buflen 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea80fe430 <col:48, col:54> col:54 hex 'char *'
| |-ParmVarDecl 0x563ea80fe4a0 <col:59, col:66> col:66 hexlen 'size_t':'unsigned long'
| `-FullComment 0x563ea82752c0 <line:157:3, line:164:77>
|   |-ParagraphComment 0x563ea8274d90 <line:157:3>
|   | `-TextComment 0x563ea8274d60 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8274db0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x563ea8274e10 <col:10, col:65>
|   |   `-TextComment 0x563ea8274de0 <col:10, col:65> Text="      Convert a binary array into string representation."
|   |-ParagraphComment 0x563ea8274e60 <line:159:3>
|   | `-TextComment 0x563ea8274e30 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8274e80 <col:4, line:160:3> [in] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x563ea8274f30 <line:159:19, line:160:3>
|   |   |-TextComment 0x563ea8274ee0 <line:159:19, col:50> Text="     The binary array to convert"
|   |   `-TextComment 0x563ea8274f00 <line:160:3> Text=" "
|   |-ParamCommandComment 0x563ea8274f50 <col:4, line:161:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x563ea8275000 <line:160:22, line:161:3>
|   |   |-TextComment 0x563ea8274fb0 <line:160:22, col:64> Text="  The length of the binary array to convert"
|   |   `-TextComment 0x563ea8274fd0 <line:161:3> Text=" "
|   |-ParamCommandComment 0x563ea8275020 <col:4, line:162:3> [out] explicitly Param="hex" ParamIndex=2
|   | `-ParagraphComment 0x563ea82750d0 <line:161:19, line:162:3>
|   |   |-TextComment 0x563ea8275080 <line:161:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x563ea82750a0 <line:162:3> Text=" "
|   |-ParamCommandComment 0x563ea82750f0 <col:4, col:74> [in] explicitly Param="hexlen" ParamIndex=3
|   | `-ParagraphComment 0x563ea8275180 <col:22, col:74>
|   |   `-TextComment 0x563ea8275150 <col:22, col:74> Text="  Size of the storage area for string representation."
|   |-ParagraphComment 0x563ea82751d0 <line:164:3>
|   | `-TextComment 0x563ea82751a0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82751f0 <col:4, col:77> Name="return"
|     `-ParagraphComment 0x563ea8275250 <col:11, col:77>
|       `-TextComment 0x563ea8275220 <col:11, col:77> Text="     The length of the converted string, or 0 if an error occurred."
|-FunctionDecl 0x563ea80fe9b0 <line:184:1, col:72> col:8 hex2bin 'size_t (const char *, size_t, u8_t *, size_t)'
| |-ParmVarDecl 0x563ea80fe6e0 <col:16, col:28> col:28 hex 'const char *'
| |-ParmVarDecl 0x563ea80fe750 <col:33, col:40> col:40 hexlen 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea80fe7c0 <col:48, col:54> col:54 buf 'u8_t *'
| |-ParmVarDecl 0x563ea80fe830 <col:59, col:66> col:66 buflen 'size_t':'unsigned long'
| `-FullComment 0x563ea82758b0 <line:175:3, line:182:74>
|   |-ParagraphComment 0x563ea8275380 <line:175:3>
|   | `-TextComment 0x563ea8275350 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82753a0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x563ea8275400 <col:10, col:64>
|   |   `-TextComment 0x563ea82753d0 <col:10, col:64> Text="      Convert a hexadecimal string into a binary array."
|   |-ParagraphComment 0x563ea8275450 <line:177:3>
|   | `-TextComment 0x563ea8275420 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8275470 <col:4, line:178:3> [in] explicitly Param="hex" ParamIndex=0
|   | `-ParagraphComment 0x563ea8275520 <line:177:19, line:178:3>
|   |   |-TextComment 0x563ea82754d0 <line:177:19, col:56> Text="     The hexadecimal string to convert"
|   |   `-TextComment 0x563ea82754f0 <line:178:3> Text=" "
|   |-ParamCommandComment 0x563ea8275540 <col:4, line:179:3> [in] explicitly Param="hexlen" ParamIndex=1
|   | `-ParagraphComment 0x563ea82755f0 <line:178:22, line:179:3>
|   |   |-TextComment 0x563ea82755a0 <line:178:22, col:71> Text="  The length of the hexadecimal string to convert."
|   |   `-TextComment 0x563ea82755c0 <line:179:3> Text=" "
|   |-ParamCommandComment 0x563ea8275610 <col:4, line:180:3> [out] explicitly Param="buf" ParamIndex=2
|   | `-ParagraphComment 0x563ea82756c0 <line:179:19, line:180:3>
|   |   |-TextComment 0x563ea8275670 <line:179:19, col:64> Text="     Address of where to store the binary data"
|   |   `-TextComment 0x563ea8275690 <line:180:3> Text=" "
|   |-ParamCommandComment 0x563ea82756e0 <col:4, col:63> [in] explicitly Param="buflen" ParamIndex=3
|   | `-ParagraphComment 0x563ea8275770 <col:22, col:63>
|   |   `-TextComment 0x563ea8275740 <col:22, col:63> Text="  Size of the storage area for binary data"
|   |-ParagraphComment 0x563ea82757c0 <line:182:3>
|   | `-TextComment 0x563ea8275790 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82757e0 <col:4, col:74> Name="return"
|     `-ParagraphComment 0x563ea8275840 <col:11, col:74>
|       `-TextComment 0x563ea8275810 <col:11, col:74> Text="     The length of the binary array , or 0 if an error occurred."
|-FunctionDecl 0x563ea80fecc0 <line:199:1, col:50> col:6 u8_to_dec 'u8_t (char *, u8_t, u8_t)'
| |-ParmVarDecl 0x563ea80feab0 <col:16, col:22> col:22 buf 'char *'
| |-ParmVarDecl 0x563ea80feb20 <col:27, col:32> col:32 buflen 'u8_t':'unsigned char'
| |-ParmVarDecl 0x563ea80feb90 <col:40, col:45> col:45 value 'u8_t':'unsigned char'
| `-FullComment 0x563ea8275e40 <line:187:3, line:197:47>
|   |-ParagraphComment 0x563ea8275950 <line:187:3>
|   | `-TextComment 0x563ea8275920 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8275970 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x563ea82759d0 <col:10, col:65>
|   |   `-TextComment 0x563ea82759a0 <col:10, col:65> Text="      Convert a u8_t into decimal string representation."
|   |-ParagraphComment 0x563ea8275a40 <line:189:3, line:190:60>
|   | |-TextComment 0x563ea82759f0 <line:189:3, col:65> Text=" Convert a u8_t value into ASCII decimal string representation."
|   | `-TextComment 0x563ea8275a10 <line:190:3, col:60> Text=" The string is terminated if there is enough space in buf."
|   |-ParagraphComment 0x563ea8275a90 <line:192:3>
|   | `-TextComment 0x563ea8275a60 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8275ab0 <col:4, line:193:3> [out] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x563ea8275b60 <line:192:19, line:193:3>
|   |   |-TextComment 0x563ea8275b10 <line:192:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x563ea8275b30 <line:193:3> Text=" "
|   |-ParamCommandComment 0x563ea8275b80 <col:4, line:194:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x563ea8275c30 <line:193:22, line:194:3>
|   |   |-TextComment 0x563ea8275be0 <line:193:22, col:74> Text="  Size of the storage area for string representation."
|   |   `-TextComment 0x563ea8275c00 <line:194:3> Text=" "
|   |-ParamCommandComment 0x563ea8275c50 <col:4, col:61> [in] explicitly Param="value" ParamIndex=2
|   | `-ParagraphComment 0x563ea8275ce0 <col:21, col:61>
|   |   `-TextComment 0x563ea8275cb0 <col:21, col:61> Text="   The value to convert to decimal string"
|   |-ParagraphComment 0x563ea8275d30 <line:196:3>
|   | `-TextComment 0x563ea8275d00 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8275d50 <col:4, line:197:47> Name="return"
|     `-ParagraphComment 0x563ea8275dd0 <line:196:11, line:197:47>
|       |-TextComment 0x563ea8275d80 <line:196:11, col:74> Text="     The length of the converted string (excluding terminator if"
|       `-TextComment 0x563ea8275da0 <line:197:3, col:47> Text="             any), or 0 if an error occurred."
|-RecordDecl 0x563ea80ff078 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:31:1, line:40:1> line:31:8 struct _dnode definition
| |-RecordDecl 0x563ea80ff120 <line:32:2, line:35:2> line:32:2 union definition
| | |-FieldDecl 0x563ea80ff280 <line:33:3, col:18> col:18 referenced head 'struct _dnode *'
| | `-FieldDecl 0x563ea80ff2f0 <line:34:3, col:18> col:18 referenced next 'struct _dnode *'
| |-FieldDecl 0x563ea80ff390 <line:32:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| |-IndirectFieldDecl 0x563ea80ff3e8 <line:33:18> col:18 implicit head 'struct _dnode *'
| | |-Field 0x563ea80ff390 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x563ea80ff280 'head' 'struct _dnode *'
| |-IndirectFieldDecl 0x563ea80ff438 <line:34:18> col:18 implicit next 'struct _dnode *'
| | |-Field 0x563ea80ff390 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x563ea80ff2f0 'next' 'struct _dnode *'
| |-RecordDecl 0x563ea80ff478 <line:36:2, line:39:2> line:36:2 union definition
| | |-FieldDecl 0x563ea80ff548 <line:37:3, col:18> col:18 referenced tail 'struct _dnode *'
| | `-FieldDecl 0x563ea80ff5b8 <line:38:3, col:18> col:18 referenced prev 'struct _dnode *'
| |-FieldDecl 0x563ea80ff650 <line:36:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| |-IndirectFieldDecl 0x563ea80ff6a8 <line:37:18> col:18 implicit tail 'struct _dnode *'
| | |-Field 0x563ea80ff650 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| | `-Field 0x563ea80ff548 'tail' 'struct _dnode *'
| `-IndirectFieldDecl 0x563ea80ff6f8 <line:38:18> col:18 implicit prev 'struct _dnode *'
|   |-Field 0x563ea80ff650 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
|   `-Field 0x563ea80ff5b8 'prev' 'struct _dnode *'
|-TypedefDecl 0x563ea80ff7a8 <line:42:1, col:23> col:23 referenced sys_dlist_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x563ea80ff1d0 'struct _dnode' sugar
|   `-RecordType 0x563ea80ff100 'struct _dnode'
|     `-Record 0x563ea80ff078 '_dnode'
|-TypedefDecl 0x563ea80ff820 <line:43:1, col:23> col:23 referenced sys_dnode_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x563ea80ff1d0 'struct _dnode' sugar
|   `-RecordType 0x563ea80ff100 'struct _dnode'
|     `-Record 0x563ea80ff078 '_dnode'
|-FunctionDecl 0x563ea8138920 <line:192:1, line:196:1> line:192:20 sys_dlist_init 'void (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x563ea8138818 <col:35, col:48> col:48 used list 'sys_dlist_t *'
| |-CompoundStmt 0x563ea8138d18 <line:193:1, line:196:1>
| | |-BinaryOperator 0x563ea8138b58 <line:194:2, col:30> 'struct _dnode *' '='
| | | |-MemberExpr 0x563ea8138a58 <col:2, col:8> 'struct _dnode *' lvalue .head 0x563ea80ff280
| | | | `-MemberExpr 0x563ea8138a08 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| | | |   `-ImplicitCastExpr 0x563ea81389f0 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x563ea81389c8 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x563ea8138818 'list' 'sys_dlist_t *'
| | | `-CStyleCastExpr 0x563ea8138b30 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| | |   `-ImplicitCastExpr 0x563ea8138b18 <col:30> 'sys_dlist_t *' <LValueToRValue>
| | |     `-DeclRefExpr 0x563ea8138ab0 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x563ea8138818 'list' 'sys_dlist_t *'
| | `-BinaryOperator 0x563ea8138cc0 <line:195:2, col:30> 'struct _dnode *' '='
| |   |-MemberExpr 0x563ea8138c10 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x563ea80ff548
| |   | `-MemberExpr 0x563ea8138bc0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| |   |   `-ImplicitCastExpr 0x563ea8138ba8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x563ea8138b80 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x563ea8138818 'list' 'sys_dlist_t *'
| |   `-CStyleCastExpr 0x563ea8138c98 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| |     `-ImplicitCastExpr 0x563ea8138c80 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x563ea8138c48 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x563ea8138818 'list' 'sys_dlist_t *'
| `-FullComment 0x563ea8276180 <line:185:3, line:189:14>
|   |-ParagraphComment 0x563ea8275ee0 <line:185:3>
|   | `-TextComment 0x563ea8275eb0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8275f00 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x563ea8275f60 <col:10, col:44>
|   |   `-TextComment 0x563ea8275f30 <col:10, col:44> Text=" initialize list to its empty state"
|   |-ParagraphComment 0x563ea8275fb0 <line:187:3>
|   | `-TextComment 0x563ea8275f80 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8275fd0 <col:4, col:37> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8276060 <col:15, col:37>
|   |   `-TextComment 0x563ea8276030 <col:15, col:37> Text=" the doubly-linked list"
|   |-ParagraphComment 0x563ea82760b0 <line:189:3>
|   | `-TextComment 0x563ea8276080 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82760d0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea8276130 <col:11, col:14>
|       `-TextComment 0x563ea8276100 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea8138e10 <line:208:1, line:212:1> line:208:20 used sys_dnode_init 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x563ea8138d48 <col:35, col:48> col:48 used node 'sys_dnode_t *'
| |-CompoundStmt 0x563ea81391f8 <line:209:1, line:212:1>
| | |-BinaryOperator 0x563ea8139018 <line:210:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| | | |-MemberExpr 0x563ea8138f48 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:210:2, col:8> 'struct _dnode *' lvalue .next 0x563ea80ff2f0
| | | | `-MemberExpr 0x563ea8138ef8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| | | |   `-ImplicitCastExpr 0x563ea8138ee0 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x563ea8138eb8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x563ea8138d48 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x563ea8139000 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| | |   `-ParenExpr 0x563ea8138fe0 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x563ea8138fb8 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x563ea8138f80 <col:23> 'int' 0
| | `-BinaryOperator 0x563ea81391a0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| |   |-MemberExpr 0x563ea81390d0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, col:8> 'struct _dnode *' lvalue .prev 0x563ea80ff5b8
| |   | `-MemberExpr 0x563ea8139080 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| |   |   `-ImplicitCastExpr 0x563ea8139068 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x563ea8139040 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x563ea8138d48 'node' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x563ea8139188 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     `-ParenExpr 0x563ea8139168 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x563ea8139140 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x563ea8139108 <col:23> 'int' 0
| `-FullComment 0x563ea82764c0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:201:3, line:205:14>
|   |-ParagraphComment 0x563ea8276220 <line:201:3>
|   | `-TextComment 0x563ea82761f0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8276240 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x563ea82762a0 <col:10, col:57>
|   |   `-TextComment 0x563ea8276270 <col:10, col:57> Text=" initialize node to its state when not in a list"
|   |-ParagraphComment 0x563ea82762f0 <line:203:3>
|   | `-TextComment 0x563ea82762c0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8276310 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x563ea82763a0 <col:15, col:23>
|   |   `-TextComment 0x563ea8276370 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x563ea82763f0 <line:205:3>
|   | `-TextComment 0x563ea82763c0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8276410 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea8276470 <col:11, col:14>
|       `-TextComment 0x563ea8276440 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea8139390 <line:222:1, line:225:1> line:222:20 sys_dnode_is_linked 'bool (const sys_dnode_t *)' static inline
| |-ParmVarDecl 0x563ea8139288 <col:40, col:59> col:59 used node 'const sys_dnode_t *'
| |-CompoundStmt 0x563ea8139638 <line:223:1, line:225:1>
| | `-ReturnStmt 0x563ea81395f0 <line:224:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ImplicitCastExpr 0x563ea81395d8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x563ea81395b0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       |-ImplicitCastExpr 0x563ea8139580 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x563ea81394c8 <col:9, col:15> 'struct _dnode *const' lvalue .next 0x563ea80ff2f0
| |       |   `-MemberExpr 0x563ea8139478 <col:9, col:15> 'const union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| |       |     `-ImplicitCastExpr 0x563ea8139460 <col:9> 'const sys_dnode_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x563ea8139438 <col:9> 'const sys_dnode_t *' lvalue ParmVar 0x563ea8139288 'node' 'const sys_dnode_t *'
| |       `-ImplicitCastExpr 0x563ea8139598 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <BitCast>
| |         `-ParenExpr 0x563ea8139560 <col:14, col:24> 'void *'
| |           `-CStyleCastExpr 0x563ea8139538 <col:15, col:23> 'void *' <NullToPointer>
| |             `-IntegerLiteral 0x563ea8139500 <col:23> 'int' 0
| `-FullComment 0x563ea8276800 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:215:3, line:219:65>
|   |-ParagraphComment 0x563ea8276560 <line:215:3>
|   | `-TextComment 0x563ea8276530 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8276580 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea82765e0 <col:10, col:49>
|   |   `-TextComment 0x563ea82765b0 <col:10, col:49> Text=" check if a node is a member of any list"
|   |-ParagraphComment 0x563ea8276630 <line:217:3>
|   | `-TextComment 0x563ea8276600 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8276650 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x563ea82766e0 <col:15, col:23>
|   |   `-TextComment 0x563ea82766b0 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x563ea8276730 <line:219:3>
|   | `-TextComment 0x563ea8276700 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8276750 <col:4, col:65> Name="return"
|     `-ParagraphComment 0x563ea82767b0 <col:11, col:65>
|       `-TextComment 0x563ea8276780 <col:11, col:65> Text=" true if node is linked into a list, false if it is not"
|-FunctionDecl 0x563ea813a9c0 <line:236:1, line:239:1> line:236:20 sys_dlist_is_head 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x563ea8139660 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x563ea81396d0 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x563ea813ac18 <line:237:1, line:239:1>
| | `-ReturnStmt 0x563ea813abd0 <line:238:2, col:23>
| |   `-ImplicitCastExpr 0x563ea813abb8 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x563ea813ab90 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x563ea813ab60 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x563ea813ab00 <col:9, col:15> 'struct _dnode *' lvalue .head 0x563ea80ff280
| |       |   `-MemberExpr 0x563ea813aab0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| |       |     `-ImplicitCastExpr 0x563ea813aa98 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x563ea813aa70 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x563ea8139660 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x563ea813ab78 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x563ea813ab38 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x563ea81396d0 'node' 'sys_dnode_t *'
| `-FullComment 0x563ea8276c20 <line:228:3, line:233:52>
|   |-ParagraphComment 0x563ea82768a0 <line:228:3>
|   | `-TextComment 0x563ea8276870 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82768c0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x563ea8276920 <col:10, col:44>
|   |   `-TextComment 0x563ea82768f0 <col:10, col:44> Text=" check if a node is the list's head"
|   |-ParagraphComment 0x563ea8276970 <line:230:3>
|   | `-TextComment 0x563ea8276940 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8276990 <col:4, line:231:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8276a40 <line:230:15, line:231:3>
|   |   |-TextComment 0x563ea82769f0 <line:230:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x563ea8276a10 <line:231:3> Text=" "
|   |-ParamCommandComment 0x563ea8276a60 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x563ea8276af0 <col:15, col:32>
|   |   `-TextComment 0x563ea8276ac0 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x563ea8276b40 <line:233:3>
|   | `-TextComment 0x563ea8276b10 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8276b60 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x563ea8276bc0 <col:11, col:52>
|       `-TextComment 0x563ea8276b90 <col:11, col:52> Text=" true if node is the head, false otherwise"
|-FunctionDecl 0x563ea813ad40 <line:250:1, line:253:1> line:250:20 sys_dlist_is_tail 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x563ea813ac40 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x563ea813acb0 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x563ea813af98 <line:251:1, line:253:1>
| | `-ReturnStmt 0x563ea813af50 <line:252:2, col:23>
| |   `-ImplicitCastExpr 0x563ea813af38 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x563ea813af10 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x563ea813aee0 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x563ea813ae80 <col:9, col:15> 'struct _dnode *' lvalue .tail 0x563ea80ff548
| |       |   `-MemberExpr 0x563ea813ae30 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| |       |     `-ImplicitCastExpr 0x563ea813ae18 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x563ea813adf0 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x563ea813ac40 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x563ea813aef8 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x563ea813aeb8 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x563ea813acb0 'node' 'sys_dnode_t *'
| `-FullComment 0x563ea8277040 <line:242:3, line:247:52>
|   |-ParagraphComment 0x563ea8276cc0 <line:242:3>
|   | `-TextComment 0x563ea8276c90 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8276ce0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x563ea8276d40 <col:10, col:44>
|   |   `-TextComment 0x563ea8276d10 <col:10, col:44> Text=" check if a node is the list's tail"
|   |-ParagraphComment 0x563ea8276d90 <line:244:3>
|   | `-TextComment 0x563ea8276d60 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8276db0 <col:4, line:245:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8276e60 <line:244:15, line:245:3>
|   |   |-TextComment 0x563ea8276e10 <line:244:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x563ea8276e30 <line:245:3> Text=" "
|   |-ParamCommandComment 0x563ea8276e80 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x563ea8276f10 <col:15, col:32>
|   |   `-TextComment 0x563ea8276ee0 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x563ea8276f60 <line:247:3>
|   | `-TextComment 0x563ea8276f30 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8276f80 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x563ea8276fe0 <col:11, col:52>
|       `-TextComment 0x563ea8276fb0 <col:11, col:52> Text=" true if node is the tail, false otherwise"
|-FunctionDecl 0x563ea813b0c0 <line:263:1, line:266:1> line:263:20 used sys_dlist_is_empty 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x563ea813afc0 <col:39, col:52> col:52 used list 'sys_dlist_t *'
| |-CompoundStmt 0x563ea813b308 <line:264:1, line:266:1>
| | `-ReturnStmt 0x563ea813b2c8 <line:265:2, col:23>
| |   `-ImplicitCastExpr 0x563ea813b2b0 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x563ea813b288 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x563ea813b258 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x563ea813b1f8 <col:9, col:15> 'struct _dnode *' lvalue .head 0x563ea80ff280
| |       |   `-MemberExpr 0x563ea813b1a8 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| |       |     `-ImplicitCastExpr 0x563ea813b190 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x563ea813b168 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x563ea813afc0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x563ea813b270 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x563ea813b230 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x563ea813afc0 'list' 'sys_dlist_t *'
| `-FullComment 0x563ea82793d0 <line:256:3, line:260:41>
|   |-ParagraphComment 0x563ea82770e0 <line:256:3>
|   | `-TextComment 0x563ea82770b0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8277100 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x563ea8277160 <col:10, col:36>
|   |   `-TextComment 0x563ea8277130 <col:10, col:36> Text=" check if the list is empty"
|   |-ParagraphComment 0x563ea82771b0 <line:258:3>
|   | `-TextComment 0x563ea8277180 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82771d0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8277260 <col:15, col:51>
|   |   `-TextComment 0x563ea8277230 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x563ea82772b0 <line:260:3>
|   | `-TextComment 0x563ea8277280 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82772d0 <col:4, col:41> Name="return"
|     `-ParagraphComment 0x563ea8279380 <col:11, col:41>
|       `-TextComment 0x563ea8279350 <col:11, col:41> Text=" true if empty, false otherwise"
|-FunctionDecl 0x563ea813b3b8 <line:278:1, line:281:1> line:278:20 sys_dlist_has_multiple_nodes 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x563ea813b330 <col:49, col:62> col:62 used list 'sys_dlist_t *'
| |-CompoundStmt 0x563ea813b6a8 <line:279:1, line:281:1>
| | `-ReturnStmt 0x563ea813b660 <line:280:2, col:29>
| |   `-ImplicitCastExpr 0x563ea813b648 <col:9, col:29> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x563ea813b620 <col:9, col:29> 'int' '!='
| |       |-ImplicitCastExpr 0x563ea813b5f0 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x563ea813b4f0 <col:9, col:15> 'struct _dnode *' lvalue .head 0x563ea80ff280
| |       |   `-MemberExpr 0x563ea813b4a0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| |       |     `-ImplicitCastExpr 0x563ea813b488 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x563ea813b460 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x563ea813b330 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x563ea813b608 <col:23, col:29> 'struct _dnode *' <LValueToRValue>
| |         `-MemberExpr 0x563ea813b5b8 <col:23, col:29> 'struct _dnode *' lvalue .tail 0x563ea80ff548
| |           `-MemberExpr 0x563ea813b568 <col:23, col:29> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| |             `-ImplicitCastExpr 0x563ea813b550 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |               `-DeclRefExpr 0x563ea813b528 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x563ea813b330 'list' 'sys_dlist_t *'
| `-FullComment 0x563ea8279770 <line:269:3, line:275:50>
|   |-ParagraphComment 0x563ea8279470 <line:269:3>
|   | `-TextComment 0x563ea8279440 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8279490 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x563ea82794f0 <col:10, col:45>
|   |   `-TextComment 0x563ea82794c0 <col:10, col:45> Text=" check if more than one node present"
|   |-ParagraphComment 0x563ea8279540 <line:271:3, col:62>
|   | `-TextComment 0x563ea8279510 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea8279590 <line:273:3>
|   | `-TextComment 0x563ea8279560 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82795b0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8279640 <col:15, col:51>
|   |   `-TextComment 0x563ea8279610 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x563ea8279690 <line:275:3>
|   | `-TextComment 0x563ea8279660 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82796b0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x563ea8279710 <col:11, col:50>
|       `-TextComment 0x563ea82796e0 <col:11, col:50> Text=" true if multiple nodes, false otherwise"
|-FunctionDecl 0x563ea813b7d0 <line:291:1, line:294:1> line:291:28 used sys_dlist_peek_head 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x563ea813b6d0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x563ea813bba8 <line:292:1, line:294:1>
| | `-ReturnStmt 0x563ea813bb60 <line:293:2, col:49>
| |   `-ConditionalOperator 0x563ea813bb30 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x563ea813bae8 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x563ea813b940 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x563ea813b928 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x563ea813b878 <col:9> 'bool (sys_dlist_t *)' Function 0x563ea813b0c0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x563ea813b970 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x563ea813b8a0 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x563ea813b6d0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x563ea813bb18 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x563ea813ba00 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x563ea813b9d8 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x563ea813b9a0 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x563ea813bb00 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:293:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x563ea813bab0 <col:43, col:49> 'struct _dnode *' lvalue .head 0x563ea80ff280
| |         `-MemberExpr 0x563ea813ba60 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| |           `-ImplicitCastExpr 0x563ea813ba48 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x563ea813ba20 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x563ea813b6d0 'list' 'sys_dlist_t *'
| `-FullComment 0x563ea8279ab0 <line:284:3, line:288:63>
|   |-ParagraphComment 0x563ea8279810 <line:284:3>
|   | `-TextComment 0x563ea82797e0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8279830 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x563ea8279890 <col:10, col:54>
|   |   `-TextComment 0x563ea8279860 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x563ea82798e0 <line:286:3>
|   | `-TextComment 0x563ea82798b0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8279900 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8279990 <col:15, col:51>
|   |   `-TextComment 0x563ea8279960 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x563ea82799e0 <line:288:3>
|   | `-TextComment 0x563ea82799b0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8279a00 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x563ea8279a60 <col:11, col:63>
|       `-TextComment 0x563ea8279a30 <col:11, col:63> Text=" a pointer to the head element, NULL if list is empty"
|-FunctionDecl 0x563ea813bc58 <line:306:1, line:309:1> line:306:28 sys_dlist_peek_head_not_empty 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x563ea813bbd0 <col:58, col:71> col:71 used list 'sys_dlist_t *'
| |-CompoundStmt 0x563ea813be28 <line:307:1, line:309:1>
| | `-ReturnStmt 0x563ea813bde0 <line:308:2, col:15>
| |   `-ImplicitCastExpr 0x563ea813bdc8 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |     `-MemberExpr 0x563ea813bd90 <col:9, col:15> 'struct _dnode *' lvalue .head 0x563ea80ff280
| |       `-MemberExpr 0x563ea813bd40 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| |         `-ImplicitCastExpr 0x563ea813bd28 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |           `-DeclRefExpr 0x563ea813bd00 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x563ea813bbd0 'list' 'sys_dlist_t *'
| `-FullComment 0x563ea8279e50 <line:297:3, line:303:40>
|   |-ParagraphComment 0x563ea8279b50 <line:297:3>
|   | `-TextComment 0x563ea8279b20 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8279b70 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x563ea8279bd0 <col:10, col:54>
|   |   `-TextComment 0x563ea8279ba0 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x563ea8279c20 <line:299:3, col:42>
|   | `-TextComment 0x563ea8279bf0 <col:3, col:42> Text=" The list must be known to be non-empty."
|   |-ParagraphComment 0x563ea8279c70 <line:301:3>
|   | `-TextComment 0x563ea8279c40 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8279c90 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8279d20 <col:15, col:51>
|   |   `-TextComment 0x563ea8279cf0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x563ea8279d70 <line:303:3>
|   | `-TextComment 0x563ea8279d40 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8279d90 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x563ea8279df0 <col:11, col:40>
|       `-TextComment 0x563ea8279dc0 <col:11, col:40> Text=" a pointer to the head element"
|-FunctionDecl 0x563ea813bfd0 <line:322:1, line:326:1> line:322:28 used sys_dlist_peek_next_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x563ea813be50 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x563ea813bec0 <line:323:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x563ea813c3d8 <line:324:1, line:326:1>
| | `-ReturnStmt 0x563ea813c390 <line:325:2, col:45>
| |   `-ConditionalOperator 0x563ea813c360 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x563ea813c1c8 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x563ea813c1a0 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x563ea813c170 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x563ea813c080 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x563ea813bec0 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x563ea813c188 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x563ea813c138 <col:18, col:24> 'struct _dnode *' lvalue .tail 0x563ea80ff548
| |     |       `-MemberExpr 0x563ea813c0e8 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| |     |         `-ImplicitCastExpr 0x563ea813c0d0 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x563ea813c0a8 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x563ea813be50 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x563ea813c348 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x563ea813c248 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x563ea813c220 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x563ea813c1e8 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x563ea813c330 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:325:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x563ea813c2f8 <col:39, col:45> 'struct _dnode *' lvalue .next 0x563ea80ff2f0
| |         `-MemberExpr 0x563ea813c2a8 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| |           `-ImplicitCastExpr 0x563ea813c290 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x563ea813c268 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x563ea813bec0 'node' 'sys_dnode_t *'
| `-FullComment 0x563ea827a2c0 <line:312:3, line:319:78>
|   |-ParagraphComment 0x563ea8279ef0 <line:312:3>
|   | `-TextComment 0x563ea8279ec0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8279f10 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x563ea8279f70 <col:10, col:72>
|   |   `-TextComment 0x563ea8279f40 <col:10, col:72> Text=" get a reference to the next item in the list, node is not NULL"
|   |-ParagraphComment 0x563ea8279fc0 <line:314:3, col:69>
|   | `-TextComment 0x563ea8279f90 <col:3, col:69> Text=" Faster than sys_dlist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x563ea827a010 <line:316:3>
|   | `-TextComment 0x563ea8279fe0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827a030 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea827a0e0 <line:316:15, line:317:3>
|   |   |-TextComment 0x563ea827a090 <line:316:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x563ea827a0b0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x563ea827a100 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x563ea827a190 <col:15, col:70>
|   |   `-TextComment 0x563ea827a160 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x563ea827a1e0 <line:319:3>
|   | `-TextComment 0x563ea827a1b0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827a200 <col:4, col:78> Name="return"
|     `-ParagraphComment 0x563ea827a260 <col:11, col:78>
|       `-TextComment 0x563ea827a230 <col:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|-FunctionDecl 0x563ea813c500 <line:338:1, line:342:1> line:338:28 used sys_dlist_peek_next 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x563ea813c400 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x563ea813c470 <line:339:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x563ea813c938 <line:340:1, line:342:1>
| | `-ReturnStmt 0x563ea813c8f0 <line:341:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x563ea813c8c0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x563ea813c6b0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, col:22> 'int'
| |     | `-BinaryOperator 0x563ea813c688 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x563ea813c658 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x563ea813c5b0 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x563ea813c470 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x563ea813c670 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x563ea813c638 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x563ea813c610 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x563ea813c5d8 <col:23> 'int' 0
| |     |-CallExpr 0x563ea813c7c0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x563ea813c7a8 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x563ea813c6d0 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x563ea813bfd0 'sys_dlist_peek_next_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x563ea813c7f8 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x563ea813c6f8 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x563ea813c400 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x563ea813c810 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x563ea813c720 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x563ea813c470 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x563ea813c8a8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x563ea813c888 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x563ea813c860 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x563ea813c828 <col:23> 'int' 0
| `-FullComment 0x563ea827a700 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:329:3, line:335:68>
|   |-ParagraphComment 0x563ea827a360 <line:329:3>
|   | `-TextComment 0x563ea827a330 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827a380 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x563ea827a3e0 <col:10, col:54>
|   |   `-TextComment 0x563ea827a3b0 <col:10, col:54> Text=" get a reference to the next item in the list"
|   |-ParagraphComment 0x563ea827a430 <line:331:3>
|   | `-TextComment 0x563ea827a400 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827a450 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea827a500 <line:331:15, line:332:3>
|   |   |-TextComment 0x563ea827a4b0 <line:331:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x563ea827a4d0 <line:332:3> Text=" "
|   |-ParamCommandComment 0x563ea827a520 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x563ea827a5b0 <col:15, col:70>
|   |   `-TextComment 0x563ea827a580 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x563ea827a600 <line:334:3>
|   | `-TextComment 0x563ea827a5d0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827a620 <col:4, line:335:68> Name="return"
|     `-ParagraphComment 0x563ea827a6a0 <line:334:11, line:335:68>
|       |-TextComment 0x563ea827a650 <line:334:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|       `-TextComment 0x563ea827a670 <line:335:3, col:68> Text=" or NULL (when node comes from reading the head of an empty list)."
|-FunctionDecl 0x563ea813cab0 <line:356:1, line:360:1> line:356:28 used sys_dlist_peek_prev_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x563ea813c9b0 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x563ea813ca20 <line:357:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x563ea813ceb8 <line:358:1, line:360:1>
| | `-ReturnStmt 0x563ea813ce70 <line:359:2, col:45>
| |   `-ConditionalOperator 0x563ea813ce40 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x563ea813cca8 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x563ea813cc80 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x563ea813cc50 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x563ea813cb60 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x563ea813ca20 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x563ea813cc68 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x563ea813cc18 <col:18, col:24> 'struct _dnode *' lvalue .head 0x563ea80ff280
| |     |       `-MemberExpr 0x563ea813cbc8 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| |     |         `-ImplicitCastExpr 0x563ea813cbb0 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x563ea813cb88 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x563ea813c9b0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x563ea813ce28 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x563ea813cd28 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x563ea813cd00 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x563ea813ccc8 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x563ea813ce10 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:359:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x563ea813cdd8 <col:39, col:45> 'struct _dnode *' lvalue .prev 0x563ea80ff5b8
| |         `-MemberExpr 0x563ea813cd88 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| |           `-ImplicitCastExpr 0x563ea813cd70 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x563ea813cd48 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x563ea813ca20 'node' 'sys_dnode_t *'
| `-FullComment 0x563ea827ab90 <line:345:3, line:353:10>
|   |-ParagraphComment 0x563ea827a7a0 <line:345:3>
|   | `-TextComment 0x563ea827a770 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827a7c0 <col:4, col:76> Name="brief"
|   | `-ParagraphComment 0x563ea827a820 <col:10, col:76>
|   |   `-TextComment 0x563ea827a7f0 <col:10, col:76> Text=" get a reference to the previous item in the list, node is not NULL"
|   |-ParagraphComment 0x563ea827a870 <line:347:3, col:69>
|   | `-TextComment 0x563ea827a840 <col:3, col:69> Text=" Faster than sys_dlist_peek_prev() if node is known not to be NULL."
|   |-ParagraphComment 0x563ea827a8c0 <line:349:3>
|   | `-TextComment 0x563ea827a890 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827a8e0 <col:4, line:350:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea827a990 <line:349:15, line:350:3>
|   |   |-TextComment 0x563ea827a940 <line:349:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x563ea827a960 <line:350:3> Text=" "
|   |-ParamCommandComment 0x563ea827a9b0 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x563ea827aa40 <col:15, col:74>
|   |   `-TextComment 0x563ea827aa10 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x563ea827aa90 <line:352:3>
|   | `-TextComment 0x563ea827aa60 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827aab0 <col:4, line:353:10> Name="return"
|     `-ParagraphComment 0x563ea827ab30 <line:352:11, line:353:10>
|       |-TextComment 0x563ea827aae0 <line:352:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       `-TextComment 0x563ea827ab00 <line:353:3, col:10> Text="	   tail"
|-FunctionDecl 0x563ea813cfe0 <line:373:1, line:377:1> line:373:28 sys_dlist_peek_prev 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x563ea813cee0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x563ea813cf50 <line:374:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x563ea813d3b8 <line:375:1, line:377:1>
| | `-ReturnStmt 0x563ea813d370 <line:376:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x563ea813d340 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x563ea813d190 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, col:22> 'int'
| |     | `-BinaryOperator 0x563ea813d168 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x563ea813d138 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x563ea813d090 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x563ea813cf50 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x563ea813d150 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x563ea813d118 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x563ea813d0f0 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x563ea813d0b8 <col:23> 'int' 0
| |     |-CallExpr 0x563ea813d240 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x563ea813d228 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x563ea813d1b0 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x563ea813cab0 'sys_dlist_peek_prev_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x563ea813d278 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x563ea813d1d8 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x563ea813cee0 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x563ea813d290 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x563ea813d200 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x563ea813cf50 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x563ea813d328 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x563ea813d308 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x563ea813d2e0 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x563ea813d2a8 <col:23> 'int' 0
| `-FullComment 0x563ea827b000 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:363:3, line:370:13>
|   |-ParagraphComment 0x563ea827ac30 <line:363:3>
|   | `-TextComment 0x563ea827ac00 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827ac50 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x563ea827acb0 <col:10, col:58>
|   |   `-TextComment 0x563ea827ac80 <col:10, col:58> Text=" get a reference to the previous item in the list"
|   |-ParagraphComment 0x563ea827ad00 <line:365:3>
|   | `-TextComment 0x563ea827acd0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827ad20 <col:4, line:366:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea827add0 <line:365:15, line:366:3>
|   |   |-TextComment 0x563ea827ad80 <line:365:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x563ea827ada0 <line:366:3> Text=" "
|   |-ParamCommandComment 0x563ea827adf0 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x563ea827ae80 <col:15, col:74>
|   |   `-TextComment 0x563ea827ae50 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x563ea827aed0 <line:368:3>
|   | `-TextComment 0x563ea827aea0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827aef0 <col:4, line:370:13> Name="return"
|     `-ParagraphComment 0x563ea827afa0 <line:368:11, line:370:13>
|       |-TextComment 0x563ea827af20 <line:368:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       |-TextComment 0x563ea827af40 <line:369:3, col:70> Text=" 	   tail or NULL (when node comes from reading the head of an empty"
|       `-TextComment 0x563ea827af60 <line:370:3, col:13> Text=" 	   list)."
|-FunctionDecl 0x563ea813d468 <line:387:1, line:390:1> line:387:28 sys_dlist_peek_tail 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x563ea813d3e0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x563ea813d7c8 <line:388:1, line:390:1>
| | `-ReturnStmt 0x563ea813d780 <line:389:2, col:49>
| |   `-ConditionalOperator 0x563ea813d750 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x563ea813d708 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x563ea813d578 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x563ea813d560 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x563ea813d510 <col:9> 'bool (sys_dlist_t *)' Function 0x563ea813b0c0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x563ea813d5a8 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x563ea813d538 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x563ea813d3e0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x563ea813d738 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x563ea813d620 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x563ea813d5f8 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x563ea813d5c0 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x563ea813d720 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:389:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x563ea813d6d0 <col:43, col:49> 'struct _dnode *' lvalue .tail 0x563ea80ff548
| |         `-MemberExpr 0x563ea813d680 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| |           `-ImplicitCastExpr 0x563ea813d668 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x563ea813d640 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x563ea813d3e0 'list' 'sys_dlist_t *'
| `-FullComment 0x563ea827b360 <line:380:3, line:384:63>
|   |-ParagraphComment 0x563ea827b0a0 <line:380:3>
|   | `-TextComment 0x563ea827b070 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827b0c0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x563ea827b120 <col:10, col:54>
|   |   `-TextComment 0x563ea827b0f0 <col:10, col:54> Text=" get a reference to the tail item in the list"
|   |-ParagraphComment 0x563ea827b170 <line:382:3>
|   | `-TextComment 0x563ea827b140 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827b190 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea827b220 <col:15, col:51>
|   |   `-TextComment 0x563ea827b1f0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x563ea827b270 <line:384:3>
|   | `-TextComment 0x563ea827b240 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827b290 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x563ea827b2f0 <col:11, col:63>
|       `-TextComment 0x563ea827b2c0 <col:11, col:63> Text=" a pointer to the tail element, NULL if list is empty"
|-FunctionDecl 0x563ea813d9c0 <line:403:1, line:410:1> line:403:20 used sys_dlist_append 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x563ea813d7f0 <col:37, col:50> col:50 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x563ea813d860 <col:56, col:69> col:69 used node 'sys_dnode_t *'
| |-CompoundStmt 0x563ea813e098 <line:404:1, line:410:1>
| | |-BinaryOperator 0x563ea813db78 <line:405:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x563ea813db00 <col:2, col:8> 'struct _dnode *' lvalue .next 0x563ea80ff2f0
| | | | `-MemberExpr 0x563ea813dab0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| | | |   `-ImplicitCastExpr 0x563ea813da98 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x563ea813da70 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x563ea813d860 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x563ea813db60 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x563ea813db38 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x563ea813d7f0 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x563ea813dd48 <line:406:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x563ea813dc30 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x563ea80ff5b8
| | | | `-MemberExpr 0x563ea813dbe0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| | | |   `-ImplicitCastExpr 0x563ea813dbc8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x563ea813dba0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x563ea813d860 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x563ea813dd30 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x563ea813dcf8 <col:15, col:21> 'struct _dnode *' lvalue .tail 0x563ea80ff548
| | |     `-MemberExpr 0x563ea813dca8 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| | |       `-ImplicitCastExpr 0x563ea813dc90 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x563ea813dc68 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x563ea813d7f0 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x563ea813df18 <line:408:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x563ea813dea0 <col:2, col:14> 'struct _dnode *' lvalue .next 0x563ea80ff2f0
| | | | `-MemberExpr 0x563ea813de50 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| | | |   `-ImplicitCastExpr 0x563ea813de38 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x563ea813de00 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x563ea80ff548
| | | |       `-MemberExpr 0x563ea813ddb0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| | | |         `-ImplicitCastExpr 0x563ea813dd98 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x563ea813dd70 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x563ea813d7f0 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x563ea813df00 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x563ea813ded8 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x563ea813d860 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x563ea813e048 <line:409:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x563ea813dfd0 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x563ea80ff548
| |   | `-MemberExpr 0x563ea813df80 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| |   |   `-ImplicitCastExpr 0x563ea813df68 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x563ea813df40 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x563ea813d7f0 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x563ea813e030 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x563ea813e008 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x563ea813d860 'node' 'sys_dnode_t *'
| `-FullComment 0x563ea827b7d0 <line:393:3, line:400:14>
|   |-ParagraphComment 0x563ea827b400 <line:393:3>
|   | `-TextComment 0x563ea827b3d0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827b420 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x563ea827b480 <col:10, col:34>
|   |   `-TextComment 0x563ea827b450 <col:10, col:34> Text=" add node to tail of list"
|   |-ParagraphComment 0x563ea827b4d0 <line:395:3, col:62>
|   | `-TextComment 0x563ea827b4a0 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea827b520 <line:397:3>
|   | `-TextComment 0x563ea827b4f0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827b540 <col:4, line:398:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea827b5f0 <line:397:15, line:398:3>
|   |   |-TextComment 0x563ea827b5a0 <line:397:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x563ea827b5c0 <line:398:3> Text=" "
|   |-ParamCommandComment 0x563ea827b610 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x563ea827b6a0 <col:15, col:36>
|   |   `-TextComment 0x563ea827b670 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x563ea827b6f0 <line:400:3>
|   | `-TextComment 0x563ea827b6c0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827b710 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea827b770 <col:11, col:14>
|       `-TextComment 0x563ea827b740 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea813e1d8 <line:423:1, line:430:1> line:423:20 sys_dlist_prepend 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x563ea813e0d8 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x563ea813e148 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x563ea813e8b8 <line:424:1, line:430:1>
| | |-BinaryOperator 0x563ea813e430 <line:425:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x563ea813e318 <col:2, col:8> 'struct _dnode *' lvalue .next 0x563ea80ff2f0
| | | | `-MemberExpr 0x563ea813e2c8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| | | |   `-ImplicitCastExpr 0x563ea813e2b0 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x563ea813e288 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x563ea813e148 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x563ea813e418 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x563ea813e3e0 <col:15, col:21> 'struct _dnode *' lvalue .head 0x563ea80ff280
| | |     `-MemberExpr 0x563ea813e390 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| | |       `-ImplicitCastExpr 0x563ea813e378 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x563ea813e350 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x563ea813e0d8 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x563ea813e560 <line:426:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x563ea813e4e8 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x563ea80ff5b8
| | | | `-MemberExpr 0x563ea813e498 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| | | |   `-ImplicitCastExpr 0x563ea813e480 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x563ea813e458 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x563ea813e148 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x563ea813e548 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x563ea813e520 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x563ea813e0d8 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x563ea813e730 <line:428:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x563ea813e6b8 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x563ea80ff5b8
| | | | `-MemberExpr 0x563ea813e668 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| | | |   `-ImplicitCastExpr 0x563ea813e650 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x563ea813e618 <col:2, col:8> 'struct _dnode *' lvalue .head 0x563ea80ff280
| | | |       `-MemberExpr 0x563ea813e5c8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| | | |         `-ImplicitCastExpr 0x563ea813e5b0 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x563ea813e588 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x563ea813e0d8 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x563ea813e718 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x563ea813e6f0 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x563ea813e148 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x563ea813e860 <line:429:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x563ea813e7e8 <col:2, col:8> 'struct _dnode *' lvalue .head 0x563ea80ff280
| |   | `-MemberExpr 0x563ea813e798 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| |   |   `-ImplicitCastExpr 0x563ea813e780 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x563ea813e758 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x563ea813e0d8 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x563ea813e848 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x563ea813e820 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x563ea813e148 'node' 'sys_dnode_t *'
| `-FullComment 0x563ea827bc40 <line:413:3, line:420:14>
|   |-ParagraphComment 0x563ea827b870 <line:413:3>
|   | `-TextComment 0x563ea827b840 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827b890 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x563ea827b8f0 <col:10, col:34>
|   |   `-TextComment 0x563ea827b8c0 <col:10, col:34> Text=" add node to head of list"
|   |-ParagraphComment 0x563ea827b940 <line:415:3, col:62>
|   | `-TextComment 0x563ea827b910 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea827b990 <line:417:3>
|   | `-TextComment 0x563ea827b960 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827b9b0 <col:4, line:418:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea827ba60 <line:417:15, line:418:3>
|   |   |-TextComment 0x563ea827ba10 <line:417:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x563ea827ba30 <line:418:3> Text=" "
|   |-ParamCommandComment 0x563ea827ba80 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x563ea827bb10 <col:15, col:36>
|   |   `-TextComment 0x563ea827bae0 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x563ea827bb60 <line:420:3>
|   | `-TextComment 0x563ea827bb30 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827bb80 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea827bbe0 <col:11, col:14>
|       `-TextComment 0x563ea827bbb0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea813f2b0 <line:440:1, line:446:1> line:440:20 used sys_dlist_insert 'void (sys_dnode_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x563ea813e8f8 <col:37, col:50> col:50 used successor 'sys_dnode_t *'
| |-ParmVarDecl 0x563ea813f1e0 <col:61, col:74> col:74 used node 'sys_dnode_t *'
| |-CompoundStmt 0x563ea813f988 <line:441:1, line:446:1>
| | |-BinaryOperator 0x563ea813f508 <line:442:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x563ea813f3f0 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x563ea80ff5b8
| | | | `-MemberExpr 0x563ea813f3a0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| | | |   `-ImplicitCastExpr 0x563ea813f388 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x563ea813f360 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x563ea813f1e0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x563ea813f4f0 <col:15, col:26> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x563ea813f4b8 <col:15, col:26> 'struct _dnode *' lvalue .prev 0x563ea80ff5b8
| | |     `-MemberExpr 0x563ea813f468 <col:15, col:26> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| | |       `-ImplicitCastExpr 0x563ea813f450 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x563ea813f428 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x563ea813e8f8 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x563ea813f638 <line:443:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x563ea813f5c0 <col:2, col:8> 'struct _dnode *' lvalue .next 0x563ea80ff2f0
| | | | `-MemberExpr 0x563ea813f570 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| | | |   `-ImplicitCastExpr 0x563ea813f558 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x563ea813f530 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x563ea813f1e0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x563ea813f620 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x563ea813f5f8 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x563ea813e8f8 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x563ea813f808 <line:444:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x563ea813f790 <col:2, col:19> 'struct _dnode *' lvalue .next 0x563ea80ff2f0
| | | | `-MemberExpr 0x563ea813f740 <col:2, col:19> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| | | |   `-ImplicitCastExpr 0x563ea813f728 <col:2, col:13> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x563ea813f6f0 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x563ea80ff5b8
| | | |       `-MemberExpr 0x563ea813f6a0 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| | | |         `-ImplicitCastExpr 0x563ea813f688 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x563ea813f660 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x563ea813e8f8 'successor' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x563ea813f7f0 <col:26> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x563ea813f7c8 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x563ea813f1e0 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x563ea813f938 <line:445:2, col:20> 'struct _dnode *' '='
| |   |-MemberExpr 0x563ea813f8c0 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x563ea80ff5b8
| |   | `-MemberExpr 0x563ea813f870 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| |   |   `-ImplicitCastExpr 0x563ea813f858 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x563ea813f830 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x563ea813e8f8 'successor' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x563ea813f920 <col:20> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x563ea813f8f8 <col:20> 'sys_dnode_t *' lvalue ParmVar 0x563ea813f1e0 'node' 'sys_dnode_t *'
| `-FullComment 0x563ea827bfd0 <line:433:3, line:438:36>
|   |-ParagraphComment 0x563ea827bce0 <line:433:3>
|   | `-TextComment 0x563ea827bcb0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827bd00 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x563ea827bd60 <col:10, col:35>
|   |   `-TextComment 0x563ea827bd30 <col:10, col:35> Text=" Insert a node into a list"
|   |-ParagraphComment 0x563ea827bdb0 <line:435:3, col:52>
|   | `-TextComment 0x563ea827bd80 <col:3, col:52> Text=" Insert a node before a specified node in a dlist."
|   |-ParagraphComment 0x563ea827be00 <line:437:3>
|   | `-TextComment 0x563ea827bdd0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827be20 <col:4, line:438:3> [in] implicitly Param="successor" ParamIndex=0
|   | `-ParagraphComment 0x563ea827bed0 <line:437:20, line:438:3>
|   |   |-TextComment 0x563ea827be80 <line:437:20, col:69> Text=" the position before which "node" will be inserted"
|   |   `-TextComment 0x563ea827bea0 <line:438:3> Text=" "
|   `-ParamCommandComment 0x563ea827bef0 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x563ea827bf80 <col:15, col:36>
|       `-TextComment 0x563ea827bf50 <col:15, col:36> Text=" the element to insert"
|-FunctionDecl 0x563ea813fe90 <line:465:1, line:482:1> line:465:20 sys_dlist_insert_at 'void (sys_dlist_t *, sys_dnode_t *, int (*)(sys_dnode_t *, void *), void *)' static inline
| |-ParmVarDecl 0x563ea813f9c8 <col:40, col:53> col:53 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x563ea813fa38 <col:59, col:72> col:72 used node 'sys_dnode_t *'
| |-ParmVarDecl 0x563ea813fcd0 <line:466:2, col:43> col:8 used cond 'int (*)(sys_dnode_t *, void *)'
| |-ParmVarDecl 0x563ea813fd48 <col:46, col:52> col:52 used data 'void *'
| |-CompoundStmt 0x563ea8145b58 <line:467:1, line:482:1>
| | `-IfStmt 0x563ea8145af0 <line:468:2, line:481:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-CallExpr 0x563ea813ffb8 <line:468:6, col:29> 'bool'
| |   | |-ImplicitCastExpr 0x563ea813ffa0 <col:6> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x563ea813ff50 <col:6> 'bool (sys_dlist_t *)' Function 0x563ea813b0c0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |   | `-ImplicitCastExpr 0x563ea813ffe8 <col:25> 'sys_dlist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x563ea813ff78 <col:25> 'sys_dlist_t *' lvalue ParmVar 0x563ea813f9c8 'list' 'sys_dlist_t *'
| |   |-CompoundStmt 0x563ea8140158 <col:32, line:470:2>
| |   | `-CallExpr 0x563ea81400f0 <line:469:3, col:30> 'void'
| |   |   |-ImplicitCastExpr 0x563ea81400d8 <col:3> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x563ea8140000 <col:3> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x563ea813d9c0 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |   |   |-ImplicitCastExpr 0x563ea8140128 <col:20> 'sys_dlist_t *' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x563ea8140028 <col:20> 'sys_dlist_t *' lvalue ParmVar 0x563ea813f9c8 'list' 'sys_dlist_t *'
| |   |   `-ImplicitCastExpr 0x563ea8140140 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x563ea8140050 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x563ea813fa38 'node' 'sys_dnode_t *'
| |   `-CompoundStmt 0x563ea8145ac8 <line:470:9, line:481:2>
| |     |-DeclStmt 0x563ea8145308 <line:471:3, col:47>
| |     | `-VarDecl 0x563ea8140180 <col:3, col:46> col:16 used pos 'sys_dnode_t *' cinit
| |     |   `-CallExpr 0x563ea81452c0 <col:22, col:46> 'sys_dnode_t *'
| |     |     |-ImplicitCastExpr 0x563ea81452a8 <col:22> 'sys_dnode_t *(*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x563ea8145200 <col:22> 'sys_dnode_t *(sys_dlist_t *)' Function 0x563ea813b7d0 'sys_dlist_peek_head' 'sys_dnode_t *(sys_dlist_t *)'
| |     |     `-ImplicitCastExpr 0x563ea81452f0 <col:42> 'sys_dlist_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x563ea8145228 <col:42> 'sys_dlist_t *' lvalue ParmVar 0x563ea813f9c8 'list' 'sys_dlist_t *'
| |     |-WhileStmt 0x563ea8145728 <line:473:3, line:475:3>
| |     | |-<<<NULL>>>
| |     | |-BinaryOperator 0x563ea81455a0 <line:473:10, col:48> 'int' '&&'
| |     | | |-ParenExpr 0x563ea8145420 <col:10, col:22> 'int'
| |     | | | `-BinaryOperator 0x563ea81453f8 <col:11, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     | | |   |-ImplicitCastExpr 0x563ea81453c8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:11> 'sys_dnode_t *' <LValueToRValue>
| |     | | |   | `-DeclRefExpr 0x563ea8145320 <col:11> 'sys_dnode_t *' lvalue Var 0x563ea8140180 'pos' 'sys_dnode_t *'
| |     | | |   `-ImplicitCastExpr 0x563ea81453e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     | | |     `-ParenExpr 0x563ea81453a8 <col:14, col:24> 'void *'
| |     | | |       `-CStyleCastExpr 0x563ea8145380 <col:15, col:23> 'void *' <NullToPointer>
| |     | | |         `-IntegerLiteral 0x563ea8145348 <col:23> 'int' 0
| |     | | `-ParenExpr 0x563ea8145580 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:27, col:48> 'int'
| |     | |   `-BinaryOperator 0x563ea8145558 <col:28, col:47> 'int' '=='
| |     | |     |-CallExpr 0x563ea81454d0 <col:28, col:42> 'int'
| |     | |     | |-ImplicitCastExpr 0x563ea81454b8 <col:28> 'int (*)(sys_dnode_t *, void *)' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x563ea8145440 <col:28> 'int (*)(sys_dnode_t *, void *)' lvalue ParmVar 0x563ea813fcd0 'cond' 'int (*)(sys_dnode_t *, void *)'
| |     | |     | |-ImplicitCastExpr 0x563ea8145508 <col:33> 'sys_dnode_t *' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x563ea8145468 <col:33> 'sys_dnode_t *' lvalue Var 0x563ea8140180 'pos' 'sys_dnode_t *'
| |     | |     | `-ImplicitCastExpr 0x563ea8145520 <col:38> 'void *' <LValueToRValue>
| |     | |     |   `-DeclRefExpr 0x563ea8145490 <col:38> 'void *' lvalue ParmVar 0x563ea813fd48 'data' 'void *'
| |     | |     `-IntegerLiteral 0x563ea8145538 <col:47> 'int' 0
| |     | `-CompoundStmt 0x563ea8145710 <col:51, line:475:3>
| |     |   `-BinaryOperator 0x563ea81456e8 <line:474:4, col:39> 'sys_dnode_t *' '='
| |     |     |-DeclRefExpr 0x563ea81455c8 <col:4> 'sys_dnode_t *' lvalue Var 0x563ea8140180 'pos' 'sys_dnode_t *'
| |     |     `-CallExpr 0x563ea8145680 <col:10, col:39> 'sys_dnode_t *'
| |     |       |-ImplicitCastExpr 0x563ea8145668 <col:10> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     |       | `-DeclRefExpr 0x563ea81455f0 <col:10> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x563ea813c500 'sys_dlist_peek_next' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     |       |-ImplicitCastExpr 0x563ea81456b8 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |     |       | `-DeclRefExpr 0x563ea8145618 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x563ea813f9c8 'list' 'sys_dlist_t *'
| |     |       `-ImplicitCastExpr 0x563ea81456d0 <col:36> 'sys_dnode_t *' <LValueToRValue>
| |     |         `-DeclRefExpr 0x563ea8145640 <col:36> 'sys_dnode_t *' lvalue Var 0x563ea8140180 'pos' 'sys_dnode_t *'
| |     `-IfStmt 0x563ea8145a90 <line:476:3, line:480:3>
| |       |-<<<NULL>>>
| |       |-<<<NULL>>>
| |       |-BinaryOperator 0x563ea8145820 <line:476:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       | |-ImplicitCastExpr 0x563ea81457f0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:7> 'sys_dnode_t *' <LValueToRValue>
| |       | | `-DeclRefExpr 0x563ea8145748 <col:7> 'sys_dnode_t *' lvalue Var 0x563ea8140180 'pos' 'sys_dnode_t *'
| |       | `-ImplicitCastExpr 0x563ea8145808 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |       |   `-ParenExpr 0x563ea81457d0 <col:14, col:24> 'void *'
| |       |     `-CStyleCastExpr 0x563ea81457a8 <col:15, col:23> 'void *' <NullToPointer>
| |       |       `-IntegerLiteral 0x563ea8145770 <col:23> 'int' 0
| |       |-CompoundStmt 0x563ea8145968 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:20, line:478:3>
| |       | `-CallExpr 0x563ea8145900 <line:477:4, col:30> 'void'
| |       |   |-ImplicitCastExpr 0x563ea81458e8 <col:4> 'void (*)(sys_dnode_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |       |   | `-DeclRefExpr 0x563ea8145848 <col:4> 'void (sys_dnode_t *, sys_dnode_t *)' Function 0x563ea813f2b0 'sys_dlist_insert' 'void (sys_dnode_t *, sys_dnode_t *)'
| |       |   |-ImplicitCastExpr 0x563ea8145938 <col:21> 'sys_dnode_t *' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x563ea8145870 <col:21> 'sys_dnode_t *' lvalue Var 0x563ea8140180 'pos' 'sys_dnode_t *'
| |       |   `-ImplicitCastExpr 0x563ea8145950 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x563ea8145898 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x563ea813fa38 'node' 'sys_dnode_t *'
| |       `-CompoundStmt 0x563ea8145a78 <line:478:10, line:480:3>
| |         `-CallExpr 0x563ea8145a10 <line:479:4, col:31> 'void'
| |           |-ImplicitCastExpr 0x563ea81459f8 <col:4> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x563ea8145980 <col:4> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x563ea813d9c0 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |           |-ImplicitCastExpr 0x563ea8145a48 <col:21> 'sys_dlist_t *' <LValueToRValue>
| |           | `-DeclRefExpr 0x563ea81459a8 <col:21> 'sys_dlist_t *' lvalue ParmVar 0x563ea813f9c8 'list' 'sys_dlist_t *'
| |           `-ImplicitCastExpr 0x563ea8145a60 <col:27> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x563ea81459d0 <col:27> 'sys_dnode_t *' lvalue ParmVar 0x563ea813fa38 'node' 'sys_dnode_t *'
| `-FullComment 0x563ea827c690 <line:449:3, line:462:14>
|   |-ParagraphComment 0x563ea827c070 <line:449:3>
|   | `-TextComment 0x563ea827c040 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827c090 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x563ea827c0f0 <col:10, col:33>
|   |   `-TextComment 0x563ea827c0c0 <col:10, col:33> Text=" insert node at position"
|   |-ParagraphComment 0x563ea827c1b0 <line:451:3, line:454:62>
|   | |-TextComment 0x563ea827c110 <line:451:3, col:76> Text=" Insert a node in a location depending on a external condition. The cond()"
|   | |-TextComment 0x563ea827c130 <line:452:3, col:74> Text=" function checks if the node is to be inserted _before_ the current node"
|   | |-TextComment 0x563ea827c150 <line:453:3, col:31> Text=" against which it is checked."
|   | `-TextComment 0x563ea827c170 <line:454:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea827c200 <line:456:3>
|   | `-TextComment 0x563ea827c1d0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827c220 <col:4, line:457:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea827c2d0 <line:456:15, line:457:3>
|   |   |-TextComment 0x563ea827c280 <line:456:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x563ea827c2a0 <line:457:3> Text=" "
|   |-ParamCommandComment 0x563ea827c2f0 <col:4, line:458:3> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x563ea827c3a0 <line:457:15, line:458:3>
|   |   |-TextComment 0x563ea827c350 <line:457:15, col:36> Text=" the element to insert"
|   |   `-TextComment 0x563ea827c370 <line:458:3> Text=" "
|   |-ParamCommandComment 0x563ea827c3c0 <col:4, line:460:3> [in] implicitly Param="cond" ParamIndex=2
|   | `-ParagraphComment 0x563ea827c4a0 <line:458:15, line:460:3>
|   |   |-TextComment 0x563ea827c420 <line:458:15, col:76> Text=" a function that determines if the current node is the correct"
|   |   |-TextComment 0x563ea827c440 <line:459:3, col:27> Text="             insert point"
|   |   `-TextComment 0x563ea827c460 <line:460:3> Text=" "
|   |-ParamCommandComment 0x563ea827c4c0 <col:4, col:34> [in] implicitly Param="data" ParamIndex=3
|   | `-ParagraphComment 0x563ea827c550 <col:15, col:34>
|   |   `-TextComment 0x563ea827c520 <col:15, col:34> Text=" parameter to cond()"
|   |-ParagraphComment 0x563ea827c5a0 <line:462:3>
|   | `-TextComment 0x563ea827c570 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827c5c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea827c620 <col:11, col:14>
|       `-TextComment 0x563ea827c5f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea8145c08 <line:495:1, line:500:1> line:495:20 used sys_dlist_remove 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x563ea8145b80 <col:37, col:50> col:50 used node 'sys_dnode_t *'
| |-CompoundStmt 0x563ea8146678 <line:496:1, line:500:1>
| | |-BinaryOperator 0x563ea8145ef8 <line:497:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x563ea8145de0 <col:2, col:14> 'struct _dnode *' lvalue .next 0x563ea80ff2f0
| | | | `-MemberExpr 0x563ea8145d90 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| | | |   `-ImplicitCastExpr 0x563ea8145d78 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x563ea8145d40 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x563ea80ff5b8
| | | |       `-MemberExpr 0x563ea8145cf0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| | | |         `-ImplicitCastExpr 0x563ea8145cd8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x563ea8145cb0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x563ea8145b80 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x563ea8145ee0 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x563ea8145ea8 <col:21, col:27> 'struct _dnode *' lvalue .next 0x563ea80ff2f0
| | |     `-MemberExpr 0x563ea8145e58 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| | |       `-ImplicitCastExpr 0x563ea8145e40 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x563ea8145e18 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x563ea8145b80 'node' 'sys_dnode_t *'
| | |-BinaryOperator 0x563ea8146168 <line:498:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x563ea8146050 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x563ea80ff5b8
| | | | `-MemberExpr 0x563ea8146000 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| | | |   `-ImplicitCastExpr 0x563ea8145fe8 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x563ea8145fb0 <col:2, col:8> 'struct _dnode *' lvalue .next 0x563ea80ff2f0
| | | |       `-MemberExpr 0x563ea8145f60 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| | | |         `-ImplicitCastExpr 0x563ea8145f48 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x563ea8145f20 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x563ea8145b80 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x563ea8146150 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x563ea8146118 <col:21, col:27> 'struct _dnode *' lvalue .prev 0x563ea80ff5b8
| | |     `-MemberExpr 0x563ea81460c8 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x563ea80ff650
| | |       `-ImplicitCastExpr 0x563ea81460b0 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x563ea8146088 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x563ea8145b80 'node' 'sys_dnode_t *'
| | `-CallExpr 0x563ea8146600 <line:499:2, col:21> 'void'
| |   |-ImplicitCastExpr 0x563ea81465e8 <col:2> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x563ea8146190 <col:2> 'void (sys_dnode_t *)' Function 0x563ea8138e10 'sys_dnode_init' 'void (sys_dnode_t *)'
| |   `-ImplicitCastExpr 0x563ea8146630 <col:17> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x563ea81461b8 <col:17> 'sys_dnode_t *' lvalue ParmVar 0x563ea8145b80 'node' 'sys_dnode_t *'
| `-FullComment 0x563ea827ca50 <line:485:3, line:492:14>
|   |-ParagraphComment 0x563ea827c730 <line:485:3>
|   | `-TextComment 0x563ea827c700 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827c750 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x563ea827c7b0 <col:10, col:44>
|   |   `-TextComment 0x563ea827c780 <col:10, col:44> Text=" remove a specific node from a list"
|   |-ParagraphComment 0x563ea827c820 <line:487:3, line:488:62>
|   | |-TextComment 0x563ea827c7d0 <line:487:3, col:71> Text=" The list is implicit from the node. The node must be part of a list."
|   | `-TextComment 0x563ea827c7f0 <line:488:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea827c870 <line:490:3>
|   | `-TextComment 0x563ea827c840 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827c890 <col:4, col:33> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x563ea827c920 <col:15, col:33>
|   |   `-TextComment 0x563ea827c8f0 <col:15, col:33> Text=" the node to remove"
|   |-ParagraphComment 0x563ea827c970 <line:492:3>
|   | `-TextComment 0x563ea827c940 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827c990 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea827c9f0 <col:11, col:14>
|       `-TextComment 0x563ea827c9c0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea8146738 <line:512:1, line:522:1> line:512:28 sys_dlist_get 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x563ea81466b0 <col:42, col:55> col:55 used list 'sys_dlist_t *'
| |-CompoundStmt 0x563ea8146c88 <line:513:1, line:522:1>
| | |-DeclStmt 0x563ea81468e8 <line:514:2, col:26>
| | | `-VarDecl 0x563ea81467f0 <col:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:514:15 used node 'sys_dnode_t *' cinit
| | |   `-ImplicitCastExpr 0x563ea81468d0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| | |     `-ParenExpr 0x563ea81468b0 <col:14, col:24> 'void *'
| | |       `-CStyleCastExpr 0x563ea8146888 <col:15, col:23> 'void *' <NullToPointer>
| | |         `-IntegerLiteral 0x563ea8146850 <col:23> 'int' 0
| | |-IfStmt 0x563ea8146bd0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:516:2, line:519:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x563ea81469b0 <line:516:6, col:30> 'int' prefix '!'
| | | | `-CallExpr 0x563ea8146968 <col:7, col:30> 'bool'
| | | |   |-ImplicitCastExpr 0x563ea8146950 <col:7> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x563ea8146900 <col:7> 'bool (sys_dlist_t *)' Function 0x563ea813b0c0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| | | |   `-ImplicitCastExpr 0x563ea8146998 <col:26> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x563ea8146928 <col:26> 'sys_dlist_t *' lvalue ParmVar 0x563ea81466b0 'list' 'sys_dlist_t *'
| | | |-CompoundStmt 0x563ea8146bb0 <col:33, line:519:2>
| | | | |-BinaryOperator 0x563ea8146ad8 <line:517:3, col:16> 'sys_dnode_t *' '='
| | | | | |-DeclRefExpr 0x563ea81469d0 <col:3> 'sys_dnode_t *' lvalue Var 0x563ea81467f0 'node' 'sys_dnode_t *'
| | | | | `-ImplicitCastExpr 0x563ea8146ac0 <col:10, col:16> 'struct _dnode *' <LValueToRValue>
| | | | |   `-MemberExpr 0x563ea8146a88 <col:10, col:16> 'struct _dnode *' lvalue .head 0x563ea80ff280
| | | | |     `-MemberExpr 0x563ea8146a38 <col:10, col:16> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x563ea80ff390
| | | | |       `-ImplicitCastExpr 0x563ea8146a20 <col:10> 'sys_dlist_t *' <LValueToRValue>
| | | | |         `-DeclRefExpr 0x563ea81469f8 <col:10> 'sys_dlist_t *' lvalue ParmVar 0x563ea81466b0 'list' 'sys_dlist_t *'
| | | | `-CallExpr 0x563ea8146b68 <line:518:3, col:24> 'void'
| | | |   |-ImplicitCastExpr 0x563ea8146b50 <col:3> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x563ea8146b00 <col:3> 'void (sys_dnode_t *)' Function 0x563ea8145c08 'sys_dlist_remove' 'void (sys_dnode_t *)'
| | | |   `-ImplicitCastExpr 0x563ea8146b98 <col:20> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x563ea8146b28 <col:20> 'sys_dnode_t *' lvalue Var 0x563ea81467f0 'node' 'sys_dnode_t *'
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x563ea8146c48 <line:521:2, col:9>
| |   `-ImplicitCastExpr 0x563ea8146c30 <col:9> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x563ea8146c08 <col:9> 'sys_dnode_t *' lvalue Var 0x563ea81467f0 'node' 'sys_dnode_t *'
| `-FullComment 0x563ea827cdf0 <line:503:3, line:509:60>
|   |-ParagraphComment 0x563ea827caf0 <line:503:3>
|   | `-TextComment 0x563ea827cac0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827cb10 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x563ea827cb70 <col:10, col:38>
|   |   `-TextComment 0x563ea827cb40 <col:10, col:38> Text=" get the first node in a list"
|   |-ParagraphComment 0x563ea827cbc0 <line:505:3, col:62>
|   | `-TextComment 0x563ea827cb90 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea827cc10 <line:507:3>
|   | `-TextComment 0x563ea827cbe0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827cc30 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea827ccc0 <col:15, col:51>
|   |   `-TextComment 0x563ea827cc90 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x563ea827cd10 <line:509:3>
|   | `-TextComment 0x563ea827cce0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827cd30 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x563ea827cd90 <col:11, col:60>
|       `-TextComment 0x563ea827cd60 <col:11, col:60> Text=" the first node in the list, NULL if list is empty"
|-RecordDecl 0x563ea8146cb0 </vagrant/ext/zephyros/zephyr/include/sys/rb.h:48:1, line:50:1> line:48:8 struct rbnode definition
| `-FieldDecl 0x563ea8146ec0 <line:49:2, col:27> col:17 children 'struct rbnode *[2]'
|-TypedefDecl 0x563ea8147198 <line:74:1, col:65> col:16 referenced rb_lessthan_t 'bool (*)(struct rbnode *, struct rbnode *)'
| |-PointerType 0x563ea8147130 'bool (*)(struct rbnode *, struct rbnode *)'
| | `-ParenType 0x563ea81470d0 'bool (struct rbnode *, struct rbnode *)' sugar
| |   `-FunctionProtoType 0x563ea8147090 'bool (struct rbnode *, struct rbnode *)' cdecl
| |     |-BuiltinType 0x563ea805b710 'bool'
| |     |-PointerType 0x563ea8146de0 'struct rbnode *'
| |     | `-ElaboratedType 0x563ea8146d80 'struct rbnode' sugar
| |     |   `-RecordType 0x563ea8146d40 'struct rbnode'
| |     |     `-Record 0x563ea8146cb0 'rbnode'
| |     `-PointerType 0x563ea8146de0 'struct rbnode *'
| |       `-ElaboratedType 0x563ea8146d80 'struct rbnode' sugar
| |         `-RecordType 0x563ea8146d40 'struct rbnode'
| |           `-Record 0x563ea8146cb0 'rbnode'
| `-FullComment 0x563ea827d150 <line:62:3, line:72:36>
|   |-ParagraphComment 0x563ea827ce90 <line:62:3>
|   | `-TextComment 0x563ea827ce60 <col:3> Text=" "
|   |-VerbatimLineComment 0x563ea827ceb0 <col:4, col:26> Text=" rb_lessthan_t"
|   |-ParagraphComment 0x563ea827cf20 <line:63:3>
|   | `-TextComment 0x563ea827cef0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827cf40 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x563ea827cfa0 <col:10, col:45>
|   |   `-TextComment 0x563ea827cf70 <col:10, col:45> Text=" Red/black tree comparison predicate"
|   |-ParagraphComment 0x563ea827d010 <line:65:3, line:66:68>
|   | |-TextComment 0x563ea827cfc0 <line:65:3, col:69> Text=" Compares the two nodes and returns true if node A is strictly less"
|   | `-TextComment 0x563ea827cfe0 <line:66:3, col:68> Text=" than B according to the tree's sorting criteria, false otherwise."
|   `-ParagraphComment 0x563ea827d100 <line:68:3, line:72:36>
|     |-TextComment 0x563ea827d030 <line:68:3, col:70> Text=" Note that during insert, the new node being inserted will always be"
|     |-TextComment 0x563ea827d050 <line:69:3, col:68> Text=" "A", where "B" is the existing node within the tree against which"
|     |-TextComment 0x563ea827d070 <line:70:3, col:64> Text=" it is being compared.  This trait can be used (with care!) to"
|     |-TextComment 0x563ea827d090 <line:71:3, col:70> Text=" implement "most/least recently added" semantics between nodes which"
|     `-TextComment 0x563ea827d0b0 <line:72:3, col:36> Text=" would otherwise compare as equal."
|-RecordDecl 0x563ea81471f0 <line:76:1, line:84:1> line:76:8 struct rbtree definition
| |-FieldDecl 0x563ea81472c8 <line:77:2, col:17> col:17 referenced root 'struct rbnode *'
| |-FieldDecl 0x563ea8147340 <line:78:2, col:16> col:16 lessthan_fn 'rb_lessthan_t':'bool (*)(struct rbnode *, struct rbnode *)'
| `-FieldDecl 0x563ea81473a0 <line:79:2, col:6> col:6 max_depth 'int'
|-TypedefDecl 0x563ea8149858 <line:86:1, col:61> col:16 referenced rb_visit_t 'void (*)(struct rbnode *, void *)'
| `-PointerType 0x563ea81497f0 'void (*)(struct rbnode *, void *)'
|   `-ParenType 0x563ea8149790 'void (struct rbnode *, void *)' sugar
|     `-FunctionProtoType 0x563ea8147530 'void (struct rbnode *, void *)' cdecl
|       |-BuiltinType 0x563ea805b6f0 'void'
|       |-PointerType 0x563ea8146de0 'struct rbnode *'
|       | `-ElaboratedType 0x563ea8146d80 'struct rbnode' sugar
|       |   `-RecordType 0x563ea8146d40 'struct rbnode'
|       |     `-Record 0x563ea8146cb0 'rbnode'
|       `-PointerType 0x563ea805bb90 'void *'
|         `-BuiltinType 0x563ea805b6f0 'void'
|-FunctionDecl 0x563ea8149a78 <line:88:1, col:56> col:16 z_rb_child 'struct rbnode *(struct rbnode *, int)'
| |-ParmVarDecl 0x563ea81498d8 <col:27, col:42> col:42 node 'struct rbnode *'
| `-ParmVarDecl 0x563ea8149950 <col:48, col:52> col:52 side 'int'
|-FunctionDecl 0x563ea8149c58 <line:89:1, col:38> col:5 z_rb_is_black 'int (struct rbnode *)'
| `-ParmVarDecl 0x563ea8149b50 <col:19, col:34> col:34 node 'struct rbnode *'
|-FunctionDecl 0x563ea8149f70 <line:91:1, col:70> col:6 used z_rb_walk 'void (struct rbnode *, rb_visit_t, void *)'
| |-ParmVarDecl 0x563ea8149d28 <col:16, col:31> col:31 node 'struct rbnode *'
| |-ParmVarDecl 0x563ea8149dc0 <col:37, col:48> col:48 visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| `-ParmVarDecl 0x563ea8149e38 <col:58, col:64> col:64 cookie 'void *'
|-FunctionDecl 0x563ea814a288 <line:93:1, col:61> col:16 used z_rb_get_minmax 'struct rbnode *(struct rbtree *, int)'
| |-ParmVarDecl 0x563ea814a0e0 <col:32, col:47> col:47 tree 'struct rbtree *'
| `-ParmVarDecl 0x563ea814a158 <col:53, col:57> col:57 side 'int'
|-FunctionDecl 0x563ea814a530 <line:98:1, col:56> col:6 rb_insert 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x563ea814a390 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x563ea814a418 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x563ea827d2a0 <line:96:3, col:31>
|   |-ParagraphComment 0x563ea827d1f0 <col:3>
|   | `-TextComment 0x563ea827d1c0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827d210 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x563ea827d270 <col:10, col:31>
|       `-TextComment 0x563ea827d240 <col:10, col:31> Text=" Insert node into tree"
|-FunctionDecl 0x563ea814a7a0 <line:103:1, col:56> col:6 rb_remove 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x563ea814a630 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x563ea814a6b8 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x563ea827d400 <line:101:3, col:31>
|   |-ParagraphComment 0x563ea827d340 <col:3>
|   | `-TextComment 0x563ea827d310 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827d370 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x563ea827d3d0 <col:10, col:31>
|       `-TextComment 0x563ea827d3a0 <col:10, col:31> Text=" Remove node from tree"
|-FunctionDecl 0x563ea814a9b8 <line:108:1, line:111:1> line:108:30 rb_get_min 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x563ea814a8a0 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x563ea814abd8 <line:109:1, line:111:1>
| | `-ReturnStmt 0x563ea814ab90 <line:110:2, col:32>
| |   `-CallExpr 0x563ea814ab40 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x563ea814ab28 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea814aa60 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x563ea814a288 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x563ea814ab78 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea814aa88 <col:25> 'struct rbtree *' lvalue ParmVar 0x563ea814a8a0 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x563ea814aab0 <col:31> 'int' 0
| `-FullComment 0x563ea827d550 <line:106:3, col:54>
|   |-ParagraphComment 0x563ea827d4a0 <col:3>
|   | `-TextComment 0x563ea827d470 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827d4c0 <col:4, col:54> Name="brief"
|     `-ParagraphComment 0x563ea827d520 <col:10, col:54>
|       `-TextComment 0x563ea827d4f0 <col:10, col:54> Text=" Returns the lowest-sorted member of the tree"
|-FunctionDecl 0x563ea814acb8 <line:116:1, line:119:1> line:116:30 rb_get_max 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x563ea814ac18 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x563ea814ae78 <line:117:1, line:119:1>
| | `-ReturnStmt 0x563ea814ae38 <line:118:2, col:32>
| |   `-CallExpr 0x563ea814ade8 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x563ea814add0 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea814ad60 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x563ea814a288 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x563ea814ae20 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea814ad88 <col:25> 'struct rbtree *' lvalue ParmVar 0x563ea814ac18 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x563ea814adb0 <col:31> 'int' 1
| `-FullComment 0x563ea827d6a0 <line:114:3, col:55>
|   |-ParagraphComment 0x563ea827d5f0 <col:3>
|   | `-TextComment 0x563ea827d5c0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827d610 <col:4, col:55> Name="brief"
|     `-ParagraphComment 0x563ea827d670 <col:10, col:55>
|       `-TextComment 0x563ea827d640 <col:10, col:55> Text=" Returns the highest-sorted member of the tree"
|-FunctionDecl 0x563ea814b050 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/rb.h:130:58> col:6 rb_contains 'bool (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x563ea814aeb8 <col:18, col:33> col:33 tree 'struct rbtree *'
| |-ParmVarDecl 0x563ea814af40 <col:39, col:54> col:54 node 'struct rbnode *'
| `-FullComment 0x563ea827d8f0 <line:122:3, line:128:10>
|   |-ParagraphComment 0x563ea827d740 <line:122:3>
|   | `-TextComment 0x563ea827d710 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827d760 <col:4, col:60> Name="brief"
|   | `-ParagraphComment 0x563ea827d7c0 <col:10, col:60>
|   |   `-TextComment 0x563ea827d790 <col:10, col:60> Text=" Returns true if the given node is part of the tree"
|   `-ParagraphComment 0x563ea827d8b0 <line:124:3, line:128:10>
|     |-TextComment 0x563ea827d7e0 <line:124:3, col:66> Text=" Note that this does not internally dereference the node pointer"
|     |-TextComment 0x563ea827d800 <line:125:3, col:69> Text=" (though the tree's lessthan callback might!), it just tests it for"
|     |-TextComment 0x563ea827d820 <line:126:3, col:68> Text=" equality with items in the tree.  So it's feasible to use this to"
|     |-TextComment 0x563ea827d840 <line:127:3, col:66> Text=" implement a "set" construct by simply testing the pointer value"
|     `-TextComment 0x563ea827d860 <line:128:3, col:10> Text=" itself."
|-FunctionDecl 0x563ea814b370 <line:141:1, line:145:1> line:141:20 rb_walk 'void (struct rbtree *, rb_visit_t, void *)' static inline
| |-ParmVarDecl 0x563ea814b150 <col:28, col:43> col:43 used tree 'struct rbtree *'
| |-ParmVarDecl 0x563ea814b1c0 <col:49, col:60> col:60 used visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |-ParmVarDecl 0x563ea814b238 <line:142:7, col:13> col:13 used cookie 'void *'
| |-CompoundStmt 0x563ea814b618 <line:143:1, line:145:1>
| | `-CallExpr 0x563ea814b590 <line:144:2, col:40> 'void'
| |   |-ImplicitCastExpr 0x563ea814b578 <col:2> 'void (*)(struct rbnode *, rb_visit_t, void *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x563ea814b428 <col:2> 'void (struct rbnode *, rb_visit_t, void *)' Function 0x563ea8149f70 'z_rb_walk' 'void (struct rbnode *, rb_visit_t, void *)'
| |   |-ImplicitCastExpr 0x563ea814b5d0 <col:12, col:18> 'struct rbnode *' <LValueToRValue>
| |   | `-MemberExpr 0x563ea814b490 <col:12, col:18> 'struct rbnode *' lvalue ->root 0x563ea81472c8
| |   |   `-ImplicitCastExpr 0x563ea814b478 <col:12> 'struct rbtree *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x563ea814b450 <col:12> 'struct rbtree *' lvalue ParmVar 0x563ea814b150 'tree' 'struct rbtree *'
| |   |-ImplicitCastExpr 0x563ea814b5e8 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' <LValueToRValue>
| |   | `-DeclRefExpr 0x563ea814b4c8 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' lvalue ParmVar 0x563ea814b1c0 'visit_fn' 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |   `-ImplicitCastExpr 0x563ea814b600 <col:34> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x563ea814b4f0 <col:34> 'void *' lvalue ParmVar 0x563ea814b238 'cookie' 'void *'
| `-FullComment 0x563ea827db10 <line:134:3, line:139:18>
|   |-ParagraphComment 0x563ea827d990 <line:134:3>
|   | `-TextComment 0x563ea827d960 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827d9b0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x563ea827da10 <col:10, col:33>
|   |   `-TextComment 0x563ea827d9e0 <col:10, col:33> Text=" Walk/enumerate a rbtree"
|   `-ParagraphComment 0x563ea827dad0 <line:136:3, line:139:18>
|     |-TextComment 0x563ea827da30 <line:136:3, col:69> Text=" Very simple recursive enumeration.  Low code size, but requiring a"
|     |-TextComment 0x563ea827da50 <line:137:3, col:70> Text=" separate function can be clumsy for the user and there is no way to"
|     |-TextComment 0x563ea827da70 <line:138:3, col:65> Text=" break out of the loop early.  See RB_FOR_EACH for an iterative"
|     `-TextComment 0x563ea827da90 <line:139:3, col:18> Text=" implementation."
|-RecordDecl 0x563ea814b630 <line:148:1, line:152:1> line:148:8 struct _rb_foreach definition
| |-FieldDecl 0x563ea814b7b0 <line:149:2, col:18> col:18 stack 'struct rbnode **'
| |-FieldDecl 0x563ea814b810 <line:150:2, col:8> col:8 is_left 'char *'
| `-FieldDecl 0x563ea814b870 <line:151:2, col:6> col:6 top 'int'
|-FunctionDecl 0x563ea814bb18 <line:169:1, col:76> col:16 z_rb_foreach_next 'struct rbnode *(struct rbtree *, struct _rb_foreach *)'
| |-ParmVarDecl 0x563ea814b8e0 <col:34, col:49> col:49 tree 'struct rbtree *'
| `-ParmVarDecl 0x563ea814b9f0 <col:55, col:75> col:75 f 'struct _rb_foreach *'
|-RecordDecl 0x563ea814bc88 </vagrant/ext/zephyros/zephyr/include/sched_priq.h:32:1, col:8> col:8 struct k_thread
|-FunctionDecl 0x563ea814bee8 <line:34:1, col:50> col:18 z_priq_dumb_best 'struct k_thread *(sys_dlist_t *)'
| `-ParmVarDecl 0x563ea814bd40 <col:35, col:48> col:48 pq 'sys_dlist_t *'
|-FunctionDecl 0x563ea814c140 <line:35:1, col:65> col:6 z_priq_dumb_remove 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x563ea814bfa0 <col:25, col:38> col:38 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x563ea814c028 <col:42, col:59> col:59 thread 'struct k_thread *'
|-FunctionDecl 0x563ea814c318 <line:36:1, col:62> col:6 z_priq_dumb_add 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x563ea814c200 <col:22, col:35> col:35 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x563ea814c288 <col:39, col:56> col:56 thread 'struct k_thread *'
|-RecordDecl 0x563ea814c3c8 <line:38:1, line:41:1> line:38:8 struct _priq_rb definition
| |-FieldDecl 0x563ea814c490 <line:39:2, col:16> col:16 tree 'struct rbtree':'struct rbtree'
| `-FieldDecl 0x563ea814c4f0 <line:40:2, col:6> col:6 next_order_key 'int'
|-FunctionDecl 0x563ea814e8b0 <line:43:1, col:64> col:6 z_priq_rb_add 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x563ea814c640 <col:20, col:37> col:37 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x563ea814c6c8 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x563ea814eaa0 <line:44:1, col:67> col:6 z_priq_rb_remove 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x563ea814e988 <col:23, col:40> col:40 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x563ea814ea10 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x563ea814ec98 <line:45:1, col:52> col:18 z_priq_rb_best 'struct k_thread *(struct _priq_rb *)'
| `-ParmVarDecl 0x563ea814eb78 <col:33, col:50> col:50 pq 'struct _priq_rb *'
|-RecordDecl 0x563ea814ed40 <line:54:1, line:57:1> line:54:8 struct _priq_mq definition
| |-FieldDecl 0x563ea814ef48 <line:55:2, col:23> col:14 queues 'sys_dlist_t [32]'
| `-FieldDecl 0x563ea814efa8 <line:56:2, col:15> col:15 bitmask 'unsigned int'
|-FunctionDecl 0x563ea814f240 <line:59:1, col:64> col:6 z_priq_mq_add 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x563ea814f0a0 <col:20, col:37> col:37 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x563ea814f128 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x563ea814f430 <line:60:1, col:67> col:6 z_priq_mq_remove 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x563ea814f318 <col:23, col:40> col:40 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x563ea814f3a0 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x563ea814f628 <line:61:1, col:52> col:18 z_priq_mq_best 'struct k_thread *(struct _priq_mq *)'
| `-ParmVarDecl 0x563ea814f508 <col:33, col:50> col:50 pq 'struct _priq_mq *'
|-RecordDecl 0x563ea814f6f8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:29:1, line:31:1> line:29:8 struct _snode definition
| `-FieldDecl 0x563ea8161ad0 <line:30:2, col:17> col:17 referenced next 'struct _snode *'
|-TypedefDecl 0x563ea8161b38 <line:33:1, col:23> col:23 referenced sys_snode_t 'struct _snode':'struct _snode'
| `-ElaboratedType 0x563ea814f7a0 'struct _snode' sugar
|   `-RecordType 0x563ea814f780 'struct _snode'
|     `-Record 0x563ea814f6f8 '_snode'
|-RecordDecl 0x563ea8161b90 <line:35:1, line:38:1> line:35:8 struct _slist definition
| |-FieldDecl 0x563ea8161c98 <line:36:2, col:15> col:15 referenced head 'sys_snode_t *'
| `-FieldDecl 0x563ea8161cf0 <line:37:2, col:15> col:15 referenced tail 'sys_snode_t *'
|-TypedefDecl 0x563ea8161d90 <line:40:1, col:23> col:23 referenced sys_slist_t 'struct _slist':'struct _slist'
| `-ElaboratedType 0x563ea8161d40 'struct _slist' sugar
|   `-RecordType 0x563ea8161c20 'struct _slist'
|     `-Record 0x563ea8161b90 '_slist'
|-FunctionDecl 0x563ea81620a0 <line:190:1, line:194:1> line:190:20 used sys_slist_init 'void (sys_slist_t *)' static inline
| |-ParmVarDecl 0x563ea8161f98 <col:35, col:48> col:48 used list 'sys_slist_t *'
| |-CompoundStmt 0x563ea81623b8 <line:191:1, line:194:1>
| | |-BinaryOperator 0x563ea8162258 <line:192:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| | | |-MemberExpr 0x563ea8162188 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:192:2, col:8> 'sys_snode_t *' lvalue ->head 0x563ea8161c98
| | | | `-ImplicitCastExpr 0x563ea8162170 <col:2> 'sys_slist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x563ea8162148 <col:2> 'sys_slist_t *' lvalue ParmVar 0x563ea8161f98 'list' 'sys_slist_t *'
| | | `-ImplicitCastExpr 0x563ea8162240 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| | |   `-ParenExpr 0x563ea8162220 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x563ea81621f8 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x563ea81621c0 <col:23> 'int' 0
| | `-BinaryOperator 0x563ea8162390 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| |   |-MemberExpr 0x563ea81622c0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, col:8> 'sys_snode_t *' lvalue ->tail 0x563ea8161cf0
| |   | `-ImplicitCastExpr 0x563ea81622a8 <col:2> 'sys_slist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x563ea8162280 <col:2> 'sys_slist_t *' lvalue ParmVar 0x563ea8161f98 'list' 'sys_slist_t *'
| |   `-ImplicitCastExpr 0x563ea8162378 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| |     `-ParenExpr 0x563ea8162358 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x563ea8162330 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x563ea81622f8 <col:23> 'int' 0
| `-FullComment 0x563ea827dd70 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:186:3, line:188:50>
|   |-ParagraphComment 0x563ea827dbb0 <line:186:3>
|   | `-TextComment 0x563ea827db80 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827dbd0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x563ea827dc30 <col:10, col:27>
|   |   `-TextComment 0x563ea827dc00 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x563ea827dc80 <line:188:3>
|   | `-TextComment 0x563ea827dc50 <col:3> Text=" "
|   `-ParamCommandComment 0x563ea827dca0 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x563ea827dd30 <col:15, col:50>
|       `-TextComment 0x563ea827dd00 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x563ea81624f0 <line:198:1, line:201:1> line:198:28 used z_snode_next_peek 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea81623e8 <col:46, col:59> col:59 used node 'sys_snode_t *'
| `-CompoundStmt 0x563ea8162640 <line:199:1, line:201:1>
|   `-ReturnStmt 0x563ea8162628 <line:200:2, col:15>
|     `-ImplicitCastExpr 0x563ea8162610 <col:9, col:15> 'struct _snode *' <LValueToRValue>
|       `-MemberExpr 0x563ea81625d8 <col:9, col:15> 'struct _snode *' lvalue ->next 0x563ea8161ad0
|         `-ImplicitCastExpr 0x563ea81625c0 <col:9> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x563ea8162598 <col:9> 'sys_snode_t *' lvalue ParmVar 0x563ea81623e8 'node' 'sys_snode_t *'
|-FunctionDecl 0x563ea81627f0 <line:203:1, line:206:1> line:203:20 used z_snode_next_set 'void (sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea8162668 <col:37, col:50> col:50 used parent 'sys_snode_t *'
| |-ParmVarDecl 0x563ea81626d8 <col:58, col:71> col:71 used child 'sys_snode_t *'
| `-CompoundStmt 0x563ea8162980 <line:204:1, line:206:1>
|   `-BinaryOperator 0x563ea8162958 <line:205:2, col:17> 'struct _snode *' '='
|     |-MemberExpr 0x563ea81628e0 <col:2, col:10> 'struct _snode *' lvalue ->next 0x563ea8161ad0
|     | `-ImplicitCastExpr 0x563ea81628c8 <col:2> 'sys_snode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x563ea81628a0 <col:2> 'sys_snode_t *' lvalue ParmVar 0x563ea8162668 'parent' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x563ea8162940 <col:17> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea8162918 <col:17> 'sys_snode_t *' lvalue ParmVar 0x563ea81626d8 'child' 'sys_snode_t *'
|-FunctionDecl 0x563ea8165450 <line:208:1, line:211:1> line:208:20 used z_slist_head_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea81629a8 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x563ea8162a18 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x563ea81655e0 <line:209:1, line:211:1>
|   `-BinaryOperator 0x563ea81655b8 <line:210:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x563ea8165540 <col:2, col:8> 'sys_snode_t *' lvalue ->head 0x563ea8161c98
|     | `-ImplicitCastExpr 0x563ea8165528 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x563ea8165500 <col:2> 'sys_slist_t *' lvalue ParmVar 0x563ea81629a8 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x563ea81655a0 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea8165578 <col:15> 'sys_snode_t *' lvalue ParmVar 0x563ea8162a18 'node' 'sys_snode_t *'
|-FunctionDecl 0x563ea8165708 <line:213:1, line:216:1> line:213:20 used z_slist_tail_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea8165608 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x563ea8165678 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x563ea81658c8 <line:214:1, line:216:1>
|   `-BinaryOperator 0x563ea8165870 <line:215:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x563ea81657f8 <col:2, col:8> 'sys_snode_t *' lvalue ->tail 0x563ea8161cf0
|     | `-ImplicitCastExpr 0x563ea81657e0 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x563ea81657b8 <col:2> 'sys_slist_t *' lvalue ParmVar 0x563ea8165608 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x563ea8165858 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea8165830 <col:15> 'sys_snode_t *' lvalue ParmVar 0x563ea8165678 'node' 'sys_snode_t *'
|-FunctionDecl 0x563ea81659f0 <line:225:1, line:228:1> line:225:28 used sys_slist_peek_head 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x563ea81658f0 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x563ea8165b68 <line:226:1, line:228:1>
| | `-ReturnStmt 0x563ea8165b28 <line:227:2, col:15>
| |   `-ImplicitCastExpr 0x563ea8165b10 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x563ea8165ad8 <col:9, col:15> 'sys_snode_t *' lvalue ->head 0x563ea8161c98
| |       `-ImplicitCastExpr 0x563ea8165ac0 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x563ea8165a98 <col:9> 'sys_slist_t *' lvalue ParmVar 0x563ea81658f0 'list' 'sys_slist_t *'
| `-FullComment 0x563ea827e0b0 <line:219:3, line:223:68>
|   |-ParagraphComment 0x563ea827de10 <line:219:3>
|   | `-TextComment 0x563ea827dde0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827de30 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea827de90 <col:10, col:43>
|   |   `-TextComment 0x563ea827de60 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x563ea827dee0 <line:221:3>
|   | `-TextComment 0x563ea827deb0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827df00 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea827df90 <col:15, col:62>
|   |   `-TextComment 0x563ea827df60 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x563ea827dfe0 <line:223:3>
|   | `-TextComment 0x563ea827dfb0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827e000 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x563ea827e060 <col:11, col:68>
|       `-TextComment 0x563ea827e030 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x563ea8165c18 <line:237:1, line:240:1> line:237:28 used sys_slist_peek_tail 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x563ea8165b90 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x563ea8165d98 <line:238:1, line:240:1>
| | `-ReturnStmt 0x563ea8165d50 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x563ea8165d38 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x563ea8165d00 <col:9, col:15> 'sys_snode_t *' lvalue ->tail 0x563ea8161cf0
| |       `-ImplicitCastExpr 0x563ea8165ce8 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x563ea8165cc0 <col:9> 'sys_slist_t *' lvalue ParmVar 0x563ea8165b90 'list' 'sys_slist_t *'
| `-FullComment 0x563ea827e3f0 <line:231:3, line:235:67>
|   |-ParagraphComment 0x563ea827e150 <line:231:3>
|   | `-TextComment 0x563ea827e120 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827e170 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x563ea827e1d0 <col:10, col:42>
|   |   `-TextComment 0x563ea827e1a0 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x563ea827e220 <line:233:3>
|   | `-TextComment 0x563ea827e1f0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827e240 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea827e2d0 <col:15, col:61>
|   |   `-TextComment 0x563ea827e2a0 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x563ea827e320 <line:235:3>
|   | `-TextComment 0x563ea827e2f0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827e340 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x563ea827e3a0 <col:11, col:67>
|       `-TextComment 0x563ea827e370 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x563ea8165ec0 <line:253:1, col:56> col:20 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x563ea8165dc0 <col:39, col:52> col:52 list 'sys_slist_t *'
| `-FullComment 0x563ea827e730 <line:247:3, line:251:57>
|   |-ParagraphComment 0x563ea827e490 <line:247:3>
|   | `-TextComment 0x563ea827e460 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827e4b0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x563ea827e510 <col:10, col:41>
|   |   `-TextComment 0x563ea827e4e0 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x563ea827e560 <line:249:3>
|   | `-TextComment 0x563ea827e530 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827e580 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea827e610 <col:15, col:44>
|   |   `-TextComment 0x563ea827e5e0 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x563ea827e660 <line:251:3>
|   | `-TextComment 0x563ea827e630 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827e680 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x563ea827e6e0 <col:11, col:57>
|       `-TextComment 0x563ea827e6b0 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x563ea8166000 prev 0x563ea8165ec0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:3:1 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x563ea8165f78 <line:5:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_slist_t *'
| `-CompoundStmt 0x563ea81662f8 <line:60:2, line:62:2>
|   `-ReturnStmt 0x563ea81662b0 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x563ea8166298 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x563ea8166278 <col:10, col:54> 'int'
|         `-BinaryOperator 0x563ea8166250 <<scratch space>:7:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x563ea8166170 <<scratch space>:7:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_snode_t *'
|           | |-ImplicitCastExpr 0x563ea8166158 <<scratch space>:7:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x563ea81660a8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea81659f0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|           | `-ImplicitCastExpr 0x563ea81661a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_slist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x563ea81660d0 <col:41> 'sys_slist_t *' lvalue ParmVar 0x563ea8165f78 'list' 'sys_slist_t *'
|           `-ImplicitCastExpr 0x563ea8166238 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|             `-ParenExpr 0x563ea8166218 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x563ea81661f0 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x563ea81661b8 <col:23> 'int' 0
|-FunctionDecl 0x563ea8168410 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:266:1, col:74> col:28 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea8166320 <col:57, col:70> col:70 node 'sys_snode_t *'
| `-FullComment 0x563ea827ead0 <line:258:3, line:264:55>
|   |-ParagraphComment 0x563ea827e7d0 <line:258:3>
|   | `-TextComment 0x563ea827e7a0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827e7f0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x563ea827e850 <col:10, col:64>
|   |   `-TextComment 0x563ea827e820 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x563ea827e8a0 <line:260:3, col:69>
|   | `-TextComment 0x563ea827e870 <col:3, col:69> Text=" Faster then sys_slist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x563ea827e8f0 <line:262:3>
|   | `-TextComment 0x563ea827e8c0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827e910 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x563ea827e9a0 <col:15, col:64>
|   |   `-TextComment 0x563ea827e970 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x563ea827e9f0 <line:264:3>
|   | `-TextComment 0x563ea827e9c0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827ea10 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x563ea827ea70 <col:11, col:55>
|       `-TextComment 0x563ea827ea40 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x563ea8168550 prev 0x563ea8168410 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:11:1 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea81684c8 <line:13:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_snode_t *'
| `-CompoundStmt 0x563ea8168748 <line:67:2, line:69:2>
|   `-ReturnStmt 0x563ea8168708 <line:68:3, col:42>
|     `-CallExpr 0x563ea81686c0 <<scratch space>:15:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x563ea81686a8 <<scratch space>:15:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea81685f8 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x563ea81624f0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       `-ImplicitCastExpr 0x563ea81686f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_snode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8168620 <col:38> 'sys_snode_t *' lvalue ParmVar 0x563ea81684c8 'node' 'sys_snode_t *'
|-FunctionDecl 0x563ea81687f8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:277:1, col:65> col:28 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea8168770 <col:48, col:61> col:61 node 'sys_snode_t *'
| `-FullComment 0x563ea827ee10 <line:271:3, line:275:55>
|   |-ParagraphComment 0x563ea827eb70 <line:271:3>
|   | `-TextComment 0x563ea827eb40 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827eb90 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x563ea827ebf0 <col:10, col:46>
|   |   `-TextComment 0x563ea827ebc0 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x563ea827ec40 <line:273:3>
|   | `-TextComment 0x563ea827ec10 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827ec60 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x563ea827ecf0 <col:15, col:64>
|   |   `-TextComment 0x563ea827ecc0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x563ea827ed40 <line:275:3>
|   | `-TextComment 0x563ea827ed10 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea827ed60 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x563ea827edc0 <col:11, col:55>
|       `-TextComment 0x563ea827ed90 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x563ea8168938 prev 0x563ea81687f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:19:1 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea81688b0 <line:21:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_snode_t *'
| `-CompoundStmt 0x563ea8168c98 <line:74:2, line:78:2>
|   `-ReturnStmt 0x563ea8168c58 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x563ea8168c28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *'
|       |-BinaryOperator 0x563ea8168ab8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x563ea8168a88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_snode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x563ea81689e0 <col:10> 'sys_snode_t *' lvalue ParmVar 0x563ea81688b0 'node' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x563ea8168aa0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x563ea8168a68 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x563ea8168a40 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x563ea8168a08 <col:23> 'int' 0
|       |-CallExpr 0x563ea8168b48 <<scratch space>:23:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_snode_t *'
|       | |-ImplicitCastExpr 0x563ea8168b30 <<scratch space>:23:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x563ea8168ae0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x563ea8168550 'sys_slist_peek_next_no_check' 'sys_snode_t *(sys_snode_t *)'
|       | `-ImplicitCastExpr 0x563ea8168b78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x563ea8168b08 <col:43> 'sys_snode_t *' lvalue ParmVar 0x563ea81688b0 'node' 'sys_snode_t *'
|       `-ImplicitCastExpr 0x563ea8168c10 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|         `-ParenExpr 0x563ea8168bf0 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x563ea8168bc8 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x563ea8168b90 <col:23> 'int' 0
|-FunctionDecl 0x563ea8168dc0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:289:1, line:290:27> line:289:20 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea8168cc0 <col:38, col:51> col:51 list 'sys_slist_t *'
| |-ParmVarDecl 0x563ea8168d30 <line:290:10, col:23> col:23 node 'sys_snode_t *'
| `-FullComment 0x563ea827f1a0 <line:282:3, line:287:47>
|   |-ParagraphComment 0x563ea827eeb0 <line:282:3>
|   | `-TextComment 0x563ea827ee80 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827eed0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x563ea827ef30 <col:10, col:42>
|   |   `-TextComment 0x563ea827ef00 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x563ea827ef80 <line:284:3, col:62>
|   | `-TextComment 0x563ea827ef50 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea827efd0 <line:286:3>
|   | `-TextComment 0x563ea827efa0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea827eff0 <col:4, line:287:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea827f0a0 <line:286:15, line:287:3>
|   |   |-TextComment 0x563ea827f050 <line:286:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x563ea827f070 <line:287:3> Text=" "
|   `-ParamCommandComment 0x563ea827f0c0 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x563ea827f150 <col:15, col:47>
|       `-TextComment 0x563ea827f120 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x563ea8168f80 prev 0x563ea8168dc0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:25:1 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea8168e80 <line:27:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_slist_t *'
| |-ParmVarDecl 0x563ea8168ef0 <<scratch space>:29:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_snode_t *'
| `-CompoundStmt 0x563ea816a378 <line:84:2, line:93:2>
|   |-CallExpr 0x563ea81691a0 <<scratch space>:31:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x563ea8169188 <<scratch space>:31:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x563ea8169030 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x563ea81627f0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x563ea81691d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x563ea8169058 <col:30> 'sys_snode_t *' lvalue ParmVar 0x563ea8168ef0 'node' 'sys_snode_t *'
|   | `-CallExpr 0x563ea81690e8 <<scratch space>:33:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x563ea81690d0 <<scratch space>:33:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x563ea8169080 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea81659f0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x563ea8169118 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x563ea81690a8 <col:36> 'sys_slist_t *' lvalue ParmVar 0x563ea8168e80 'list' 'sys_slist_t *'
|   |-CallExpr 0x563ea81692e0 <<scratch space>:35:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x563ea81692c8 <<scratch space>:35:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x563ea81691f0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x563ea8165450 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x563ea8169318 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x563ea8169218 <col:30> 'sys_slist_t *' lvalue ParmVar 0x563ea8168e80 'list' 'sys_slist_t *'
|   | `-ImplicitCastExpr 0x563ea8169330 <col:36> 'sys_snode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x563ea8169240 <col:36> 'sys_snode_t *' lvalue ParmVar 0x563ea8168ef0 'node' 'sys_snode_t *'
|   `-IfStmt 0x563ea816a310 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x563ea816a168 <<scratch space>:37:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x563ea81693b0 <<scratch space>:37:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x563ea8169398 <<scratch space>:37:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x563ea8169348 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea8165c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x563ea81693e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x563ea8169370 <col:37> 'sys_slist_t *' lvalue ParmVar 0x563ea8168e80 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x563ea816a150 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x563ea816a130 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x563ea816a108 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x563ea816a0d0 <col:23> 'int' 0
|     |-CompoundStmt 0x563ea816a2f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x563ea816a2a8 <<scratch space>:39:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x563ea816a290 <<scratch space>:39:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x563ea816a190 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x563ea8165708 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x563ea816a2e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x563ea816a1b8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x563ea8168e80 'list' 'sys_slist_t *'
|     |   `-CallExpr 0x563ea816a248 <<scratch space>:41:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_snode_t *'
|     |     |-ImplicitCastExpr 0x563ea816a230 <<scratch space>:41:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x563ea816a1e0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea81659f0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|     |     `-ImplicitCastExpr 0x563ea816a278 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_slist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x563ea816a208 <col:36> 'sys_slist_t *' lvalue ParmVar 0x563ea8168e80 'list' 'sys_slist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x563ea816a4b0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:302:1, line:303:26> line:302:20 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea816a3b0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x563ea816a420 <line:303:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x563ea8280560 <line:295:3, line:300:46>
|   |-ParagraphComment 0x563ea827f240 <line:295:3>
|   | `-TextComment 0x563ea827f210 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea827f260 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x563ea827f2c0 <col:10, col:41>
|   |   `-TextComment 0x563ea827f290 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x563ea827f310 <line:297:3, col:62>
|   | `-TextComment 0x563ea827f2e0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea8280390 <line:299:3>
|   | `-TextComment 0x563ea827f330 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82803b0 <col:4, line:300:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8280460 <line:299:15, line:300:3>
|   |   |-TextComment 0x563ea8280410 <line:299:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x563ea8280430 <line:300:3> Text=" "
|   `-ParamCommandComment 0x563ea8280480 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x563ea8280510 <col:15, col:46>
|       `-TextComment 0x563ea82804e0 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x563ea816a670 prev 0x563ea816a4b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:43:1 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea816a570 <line:45:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x563ea816a5e0 <<scratch space>:47:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x563ea816aed8 <line:99:2, line:111:2>
|   |-CallExpr 0x563ea816a808 <<scratch space>:49:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x563ea816a7f0 <<scratch space>:49:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x563ea816a720 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x563ea81627f0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x563ea816a840 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x563ea816a748 <col:30> 'sys_snode_t *' lvalue ParmVar 0x563ea816a5e0 'node' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x563ea816a858 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |   `-ParenExpr 0x563ea816a7d0 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x563ea816a7a8 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x563ea816a770 <col:23> 'int' 0
|   `-IfStmt 0x563ea816ae70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x563ea816a9b8 <<scratch space>:51:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x563ea816a8d8 <<scratch space>:51:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x563ea816a8c0 <<scratch space>:51:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x563ea816a870 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea8165c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x563ea816a908 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x563ea816a898 <col:37> 'sys_slist_t *' lvalue ParmVar 0x563ea816a570 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x563ea816a9a0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x563ea816a980 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x563ea816a958 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x563ea816a920 <col:23> 'int' 0
|     |-CompoundStmt 0x563ea816abd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x563ea816aa70 <<scratch space>:53:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x563ea816aa58 <<scratch space>:53:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x563ea816a9e0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x563ea8165708 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     | | |-ImplicitCastExpr 0x563ea816aaa8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_slist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x563ea816aa08 <col:31> 'sys_slist_t *' lvalue ParmVar 0x563ea816a570 'list' 'sys_slist_t *'
|     | | `-ImplicitCastExpr 0x563ea816aac0 <col:37> 'sys_snode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x563ea816aa30 <col:37> 'sys_snode_t *' lvalue ParmVar 0x563ea816a5e0 'node' 'sys_snode_t *'
|     | `-CallExpr 0x563ea816ab68 <<scratch space>:55:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x563ea816ab50 <<scratch space>:55:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x563ea816aad8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x563ea8165450 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x563ea816aba0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x563ea816ab00 <col:31> 'sys_slist_t *' lvalue ParmVar 0x563ea816a570 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x563ea816abb8 <col:37> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x563ea816ab28 <col:37> 'sys_snode_t *' lvalue ParmVar 0x563ea816a5e0 'node' 'sys_snode_t *'
|     `-CompoundStmt 0x563ea816ae50 <line:105:10, line:110:3>
|       |-CallExpr 0x563ea816ad08 <<scratch space>:57:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x563ea816acf0 <<scratch space>:57:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x563ea816abf0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x563ea81627f0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|       | |-CallExpr 0x563ea816ac80 <line:59:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x563ea816ac68 <<scratch space>:59:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x563ea816ac18 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea8165c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|       | | `-ImplicitCastExpr 0x563ea816acb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_slist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x563ea816ac40 <col:35> 'sys_slist_t *' lvalue ParmVar 0x563ea816a570 'list' 'sys_slist_t *'
|       | `-ImplicitCastExpr 0x563ea816ad40 <line:108:5> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x563ea816acc8 <col:5> 'sys_snode_t *' lvalue ParmVar 0x563ea816a5e0 'node' 'sys_snode_t *'
|       `-CallExpr 0x563ea816ade8 <<scratch space>:61:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x563ea816add0 <<scratch space>:61:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x563ea816ad58 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x563ea8165708 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|         |-ImplicitCastExpr 0x563ea816ae20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_slist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x563ea816ad80 <col:31> 'sys_slist_t *' lvalue ParmVar 0x563ea816a570 'list' 'sys_slist_t *'
|         `-ImplicitCastExpr 0x563ea816ae38 <col:37> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x563ea816ada8 <col:37> 'sys_snode_t *' lvalue ParmVar 0x563ea816a5e0 'node' 'sys_snode_t *'
|-FunctionDecl 0x563ea816b160 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:320:1, line:321:29> line:320:20 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x563ea816af08 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x563ea816af80 <line:321:7, col:13> col:13 head 'void *'
| |-ParmVarDecl 0x563ea816aff8 <col:19, col:25> col:25 tail 'void *'
| `-FullComment 0x563ea8280ac0 <line:308:3, line:318:66>
|   |-ParagraphComment 0x563ea8280600 <line:308:3>
|   | `-TextComment 0x563ea82805d0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8280620 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x563ea8280680 <col:10, col:41>
|   |   `-TextComment 0x563ea8280650 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x563ea8280770 <line:310:3, line:312:62>
|   | |-TextComment 0x563ea82806a0 <line:310:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x563ea82806c0 <line:311:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x563ea8280710 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x563ea8280730 <line:312:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea82807c0 <line:314:3, col:48>
|   | `-TextComment 0x563ea8280790 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x563ea8280810 <line:316:3>
|   | `-TextComment 0x563ea82807e0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8280830 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea82808e0 <line:316:15, line:317:3>
|   |   |-TextComment 0x563ea8280890 <line:316:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x563ea82808b0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x563ea8280900 <col:4, line:318:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x563ea82809b0 <line:317:15, line:318:3>
|   |   |-TextComment 0x563ea8280960 <line:317:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x563ea8280980 <line:318:3> Text=" "
|   `-ParamCommandComment 0x563ea82809d0 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x563ea8280a60 <col:15, col:66>
|       `-TextComment 0x563ea8280a30 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x563ea816b3b0 prev 0x563ea816b160 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:63:1 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x563ea816b228 <line:65:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_slist_t *'
| |-ParmVarDecl 0x563ea816b2a0 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x563ea816b318 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x563ea816ba68 <col:31, line:127:42>
|   |-IfStmt 0x563ea816b8d8 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x563ea816b5b0 <<scratch space>:67:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x563ea816b4d0 <<scratch space>:67:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x563ea816b4b8 <<scratch space>:67:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x563ea816b468 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea8165c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x563ea816b500 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x563ea816b490 <col:36> 'sys_slist_t *' lvalue ParmVar 0x563ea816b228 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x563ea816b598 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x563ea816b578 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x563ea816b550 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x563ea816b518 <col:23> 'int' 0
|   | |-CompoundStmt 0x563ea816b708 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x563ea816b6b8 <<scratch space>:69:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x563ea816b6a0 <<scratch space>:69:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x563ea816b5d8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x563ea8165450 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x563ea816b6f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x563ea816b600 <col:30> 'sys_slist_t *' lvalue ParmVar 0x563ea816b228 'list' 'sys_slist_t *'
|   | |   `-CStyleCastExpr 0x563ea816b678 <line:120:6, col:31> 'sys_snode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x563ea816b660 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x563ea816b628 <col:31> 'void *' lvalue ParmVar 0x563ea816b2a0 'head' 'void *'
|   | `-CompoundStmt 0x563ea816b8c0 <line:121:9, line:125:2>
|   |   `-CallExpr 0x563ea816b888 <<scratch space>:73:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x563ea816b870 <<scratch space>:73:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ea816b720 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x563ea81627f0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |     |-CallExpr 0x563ea816b7b0 <line:75:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_snode_t *'
|   |     | |-ImplicitCastExpr 0x563ea816b798 <<scratch space>:75:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x563ea816b748 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea8165c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | `-ImplicitCastExpr 0x563ea816b7e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_slist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563ea816b770 <col:34> 'sys_slist_t *' lvalue ParmVar 0x563ea816b228 'list' 'sys_slist_t *'
|   |     `-CStyleCastExpr 0x563ea816b848 <line:124:4, col:29> 'sys_snode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x563ea816b830 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x563ea816b7f8 <col:29> 'void *' lvalue ParmVar 0x563ea816b2a0 'head' 'void *'
|   `-CallExpr 0x563ea816b9f0 <<scratch space>:79:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x563ea816b9d8 <<scratch space>:79:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea816b910 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x563ea8165708 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x563ea816ba28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_slist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ea816b938 <col:29> 'sys_slist_t *' lvalue ParmVar 0x563ea816b228 'list' 'sys_slist_t *'
|     `-CStyleCastExpr 0x563ea816b9b0 <line:127:10, col:35> 'sys_snode_t *' <BitCast>
|       `-ImplicitCastExpr 0x563ea816b998 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea816b960 <col:35> 'void *' lvalue ParmVar 0x563ea816b318 'tail' 'void *'
|-FunctionDecl 0x563ea816bc20 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:334:1, line:335:34> line:334:20 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x563ea816ba98 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x563ea816bb08 <line:335:7, col:20> col:20 list_to_append 'sys_slist_t *'
| `-FullComment 0x563ea8280e70 <line:326:3, line:332:57>
|   |-ParagraphComment 0x563ea8280b60 <line:326:3>
|   | `-TextComment 0x563ea8280b30 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8280b80 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x563ea8280be0 <col:10, col:65>
|   |   `-TextComment 0x563ea8280bb0 <col:10, col:65> Text=" merge two slists, appending the second one to the first"
|   |-ParagraphComment 0x563ea8280c50 <line:328:3, line:329:62>
|   | |-TextComment 0x563ea8280c00 <line:328:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x563ea8280c20 <line:329:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea8280ca0 <line:331:3>
|   | `-TextComment 0x563ea8280c70 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8280cc0 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8280d70 <line:331:15, line:332:3>
|   |   |-TextComment 0x563ea8280d20 <line:331:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x563ea8280d40 <line:332:3> Text=" "
|   `-ParamCommandComment 0x563ea8280d90 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x563ea8280e20 <col:25, col:57>
|       `-TextComment 0x563ea8280df0 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x563ea816bde0 prev 0x563ea816bc20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:84:1 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x563ea816bce0 <line:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_slist_t *'
| |-ParmVarDecl 0x563ea816bd50 <<scratch space>:88:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_slist_t *'
| `-CompoundStmt 0x563ea80f3db8 <line:135:2, line:141:2>
|   |-DeclStmt 0x563ea816bf88 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x563ea816bea0 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_snode_t *'
|   | `-VarDecl 0x563ea816bf10 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_snode_t *'
|   |-BinaryOperator 0x563ea816c078 <line:137:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x563ea816bfa0 <col:3> 'sys_snode_t *' lvalue Var 0x563ea816bea0 'head' 'sys_snode_t *'
|   | `-CallExpr 0x563ea816c030 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x563ea816c018 <<scratch space>:92:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x563ea816bfc8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea81659f0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x563ea816c060 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x563ea816bff0 <col:40> 'sys_slist_t *' lvalue ParmVar 0x563ea816bd50 'list_to_append' 'sys_slist_t *'
|   |-BinaryOperator 0x563ea80f3a80 <line:138:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x563ea816c0a0 <col:3> 'sys_snode_t *' lvalue Var 0x563ea816bf10 'tail' 'sys_snode_t *'
|   | `-CallExpr 0x563ea80f3a38 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x563ea80f3a20 <<scratch space>:94:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x563ea80f39d0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea8165c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x563ea80f3a68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x563ea80f39f8 <col:40> 'sys_slist_t *' lvalue ParmVar 0x563ea816bd50 'list_to_append' 'sys_slist_t *'
|   |-CallExpr 0x563ea80f3bc0 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x563ea80f3ba8 <<scratch space>:96:1> 'void (*)(sys_slist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x563ea80f3aa8 <col:1> 'void (sys_slist_t *, void *, void *)' Function 0x563ea816b3b0 'sys_slist_append_list' 'void (sys_slist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x563ea80f3c00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x563ea80f3ad0 <col:35> 'sys_slist_t *' lvalue ParmVar 0x563ea816bce0 'list' 'sys_slist_t *'
|   | |-ImplicitCastExpr 0x563ea80f3c30 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x563ea80f3c18 <col:41> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x563ea80f3af8 <col:41> 'sys_snode_t *' lvalue Var 0x563ea816bea0 'head' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x563ea80f3c60 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x563ea80f3c48 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x563ea80f3b20 <col:47> 'sys_snode_t *' lvalue Var 0x563ea816bf10 'tail' 'sys_snode_t *'
|   `-CallExpr 0x563ea80f3d40 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x563ea80f3d28 <<scratch space>:98:1> 'void (*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea80f3c78 <col:1> 'void (sys_slist_t *)' Function 0x563ea81620a0 'sys_slist_init' 'void (sys_slist_t *)'
|     `-ImplicitCastExpr 0x563ea80f3d70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_slist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea80f3ca0 <col:28> 'sys_slist_t *' lvalue ParmVar 0x563ea816bd50 'list_to_append' 'sys_slist_t *'
|-FunctionDecl 0x563ea80f4010 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:348:1, line:350:26> line:348:20 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea80f3e00 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x563ea80f3e70 <line:349:9, col:22> col:22 prev 'sys_snode_t *'
| |-ParmVarDecl 0x563ea80f3ee0 <line:350:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x563ea82812e0 <line:340:3, line:346:46>
|   |-ParagraphComment 0x563ea8280f10 <line:340:3>
|   | `-TextComment 0x563ea8280ee0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8280f30 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x563ea8280f90 <col:10, col:41>
|   |   `-TextComment 0x563ea8280f60 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x563ea8280fe0 <line:342:3, col:62>
|   | `-TextComment 0x563ea8280fb0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea8281030 <line:344:3>
|   | `-TextComment 0x563ea8281000 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8281050 <col:4, line:345:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8281100 <line:344:15, line:345:3>
|   |   |-TextComment 0x563ea82810b0 <line:344:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x563ea82810d0 <line:345:3> Text=" "
|   |-ParamCommandComment 0x563ea8281120 <col:4, line:346:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x563ea82811d0 <line:345:15, line:346:3>
|   |   |-TextComment 0x563ea8281180 <line:345:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x563ea82811a0 <line:346:3> Text=" "
|   `-ParamCommandComment 0x563ea82811f0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x563ea8281280 <col:15, col:46>
|       `-TextComment 0x563ea8281250 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x563ea80f4250 prev 0x563ea80f4010 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:100:1 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea80f40d8 <line:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x563ea80f4148 <<scratch space>:104:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_snode_t *'
| |-ParmVarDecl 0x563ea80f41b8 <<scratch space>:106:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x563ea816f1c8 <line:148:2, line:158:2>
|   `-IfStmt 0x563ea816f168 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x563ea80f43e0 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x563ea80f43b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_snode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x563ea80f4308 <col:7> 'sys_snode_t *' lvalue ParmVar 0x563ea80f4148 'prev' 'sys_snode_t *'
|     | `-ImplicitCastExpr 0x563ea80f43c8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x563ea80f4390 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x563ea80f4368 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x563ea80f4330 <col:23> 'int' 0
|     |-CompoundStmt 0x563ea80f4500 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x563ea80f4498 <<scratch space>:108:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x563ea80f4480 <<scratch space>:108:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x563ea80f4408 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x563ea8168f80 'sys_slist_prepend' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x563ea80f44d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x563ea80f4430 <col:32> 'sys_slist_t *' lvalue ParmVar 0x563ea80f40d8 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x563ea80f44e8 <col:38> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x563ea80f4458 <col:38> 'sys_snode_t *' lvalue ParmVar 0x563ea80f41b8 'node' 'sys_snode_t *'
|     `-IfStmt 0x563ea816f130 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x563ea80f4660 <<scratch space>:110:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x563ea80f4580 <<scratch space>:110:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x563ea80f4568 <<scratch space>:110:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x563ea80f4518 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x563ea81624f0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       | | `-ImplicitCastExpr 0x563ea80f45b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_snode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x563ea80f4540 <col:42> 'sys_snode_t *' lvalue ParmVar 0x563ea80f4148 'prev' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x563ea80f4648 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x563ea80f4628 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x563ea80f4600 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x563ea80f45c8 <col:23> 'int' 0
|       |-CompoundStmt 0x563ea80f4780 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x563ea80f4718 <<scratch space>:112:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x563ea80f4700 <<scratch space>:112:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x563ea80f4688 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x563ea816a670 'sys_slist_append' 'void (sys_slist_t *, sys_snode_t *)'
|       |   |-ImplicitCastExpr 0x563ea80f4750 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_slist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x563ea80f46b0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x563ea80f40d8 'list' 'sys_slist_t *'
|       |   `-ImplicitCastExpr 0x563ea80f4768 <col:37> 'sys_snode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x563ea80f46d8 <col:37> 'sys_snode_t *' lvalue ParmVar 0x563ea80f41b8 'node' 'sys_snode_t *'
|       `-CompoundStmt 0x563ea816f110 <line:153:10, line:157:3>
|         |-CallExpr 0x563ea80f48b0 <<scratch space>:114:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x563ea80f4898 <<scratch space>:114:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x563ea80f4798 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x563ea81627f0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|         | |-ImplicitCastExpr 0x563ea80f48e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_snode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x563ea80f47c0 <col:31> 'sys_snode_t *' lvalue ParmVar 0x563ea80f41b8 'node' 'sys_snode_t *'
|         | `-CallExpr 0x563ea80f4850 <<scratch space>:116:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_snode_t *'
|         |   |-ImplicitCastExpr 0x563ea80f4838 <<scratch space>:116:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x563ea80f47e8 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x563ea81624f0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|         |   `-ImplicitCastExpr 0x563ea80f4880 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_snode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x563ea80f4810 <col:33> 'sys_snode_t *' lvalue ParmVar 0x563ea80f4148 'prev' 'sys_snode_t *'
|         `-CallExpr 0x563ea80f4990 <<scratch space>:118:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x563ea80f4978 <<scratch space>:118:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x563ea80f4900 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x563ea81627f0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|           |-ImplicitCastExpr 0x563ea816f0e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_snode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x563ea80f4928 <col:31> 'sys_snode_t *' lvalue ParmVar 0x563ea80f4148 'prev' 'sys_snode_t *'
|           `-ImplicitCastExpr 0x563ea816f0f8 <col:37> 'sys_snode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x563ea80f4950 <col:37> 'sys_snode_t *' lvalue ParmVar 0x563ea80f41b8 'node' 'sys_snode_t *'
|-FunctionDecl 0x563ea816f278 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:364:1, col:69> col:28 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x563ea816f1f0 <col:52, col:65> col:65 list 'sys_slist_t *'
| `-FullComment 0x563ea82816a0 <line:355:3, line:362:50>
|   |-ParagraphComment 0x563ea8281380 <line:355:3>
|   | `-TextComment 0x563ea8281350 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82813a0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x563ea8281400 <col:10, col:59>
|   |   `-TextComment 0x563ea82813d0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x563ea8281470 <line:357:3, line:358:62>
|   | |-TextComment 0x563ea8281420 <line:357:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x563ea8281440 <line:358:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea82814c0 <line:360:3>
|   | `-TextComment 0x563ea8281490 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82814e0 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8281570 <col:15, col:46>
|   |   `-TextComment 0x563ea8281540 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x563ea82815c0 <line:362:3>
|   | `-TextComment 0x563ea8281590 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82815e0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x563ea8281640 <col:11, col:50>
|       `-TextComment 0x563ea8281610 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x563ea816f3b8 prev 0x563ea816f278 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:122:1 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x563ea816f330 <line:124:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_slist_t *'
| `-CompoundStmt 0x563ea816fa58 <line:163:2, line:175:2>
|   |-DeclStmt 0x563ea816f580 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x563ea816f470 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_snode_t *' cinit
|   |   `-CallExpr 0x563ea816f538 <<scratch space>:128:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_snode_t *'
|   |     |-ImplicitCastExpr 0x563ea816f520 <<scratch space>:128:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ea816f4d0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea81659f0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |     `-ImplicitCastExpr 0x563ea816f568 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_slist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x563ea816f4f8 <col:35> 'sys_slist_t *' lvalue ParmVar 0x563ea816f330 'list' 'sys_slist_t *'
|   |-CallExpr 0x563ea816f6b0 <<scratch space>:130:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x563ea816f698 <<scratch space>:130:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x563ea816f598 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x563ea8165450 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x563ea816f6e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x563ea816f5c0 <col:30> 'sys_slist_t *' lvalue ParmVar 0x563ea816f330 'list' 'sys_slist_t *'
|   | `-CallExpr 0x563ea816f650 <<scratch space>:132:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x563ea816f638 <<scratch space>:132:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x563ea816f5e8 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x563ea81624f0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   `-ImplicitCastExpr 0x563ea816f680 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x563ea816f610 <col:33> 'sys_snode_t *' lvalue Var 0x563ea816f470 'node' 'sys_snode_t *'
|   |-IfStmt 0x563ea816f998 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x563ea816f7f0 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x563ea816f768 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x563ea816f750 <<scratch space>:134:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x563ea816f700 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea8165c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x563ea816f798 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x563ea816f728 <col:37> 'sys_slist_t *' lvalue ParmVar 0x563ea816f330 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x563ea816f7d8 <col:46> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x563ea816f7b0 <col:46> 'sys_snode_t *' lvalue Var 0x563ea816f470 'node' 'sys_snode_t *'
|   | |-CompoundStmt 0x563ea816f980 <col:52, line:172:3>
|   | | `-CallExpr 0x563ea816f930 <<scratch space>:136:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x563ea816f918 <<scratch space>:136:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x563ea816f818 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x563ea8165708 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x563ea816f968 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x563ea816f840 <col:31> 'sys_slist_t *' lvalue ParmVar 0x563ea816f330 'list' 'sys_slist_t *'
|   | |   `-CallExpr 0x563ea816f8d0 <<scratch space>:138:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_snode_t *'
|   | |     |-ImplicitCastExpr 0x563ea816f8b8 <<scratch space>:138:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x563ea816f868 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea81659f0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |     `-ImplicitCastExpr 0x563ea816f900 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_slist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x563ea816f890 <col:35> 'sys_slist_t *' lvalue ParmVar 0x563ea816f330 'list' 'sys_slist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x563ea816fa10 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x563ea816f9f8 <col:10> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea816f9d0 <col:10> 'sys_snode_t *' lvalue Var 0x563ea816f470 'node' 'sys_snode_t *'
|-FunctionDecl 0x563ea816fb20 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:377:1, col:59> col:28 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x563ea816fa98 <col:42, col:55> col:55 list 'sys_slist_t *'
| `-FullComment 0x563ea8281a40 <line:369:3, line:375:69>
|   |-ParagraphComment 0x563ea8281740 <line:369:3>
|   | `-TextComment 0x563ea8281710 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8281760 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x563ea82817c0 <col:10, col:59>
|   |   `-TextComment 0x563ea8281790 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x563ea8281810 <line:371:3, col:62>
|   | `-TextComment 0x563ea82817e0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea8281860 <line:373:3>
|   | `-TextComment 0x563ea8281830 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8281880 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8281910 <col:15, col:46>
|   |   `-TextComment 0x563ea82818e0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x563ea8281960 <line:375:3>
|   | `-TextComment 0x563ea8281930 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8281980 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x563ea82819e0 <col:11, col:69>
|       `-TextComment 0x563ea82819b0 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x563ea816fc60 prev 0x563ea816fb20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:142:1 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x563ea816fbd8 <line:144:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_slist_t *'
| `-CompoundStmt 0x563ea816ffe8 <line:180:2, line:183:2>
|   `-ReturnStmt 0x563ea816ffa8 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x563ea816ff78 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x563ea816ff48 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x563ea816fdd0 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x563ea816fdb8 <<scratch space>:146:1> 'bool (*)(sys_slist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x563ea816fd08 <col:1> 'bool (sys_slist_t *)' Function 0x563ea8166000 'sys_slist_is_empty' 'bool (sys_slist_t *)'
|       |   `-ImplicitCastExpr 0x563ea816fe00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_slist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x563ea816fd30 <col:39> 'sys_slist_t *' lvalue ParmVar 0x563ea816fbd8 'list' 'sys_slist_t *'
|       |-ImplicitCastExpr 0x563ea816ff60 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       | `-ParenExpr 0x563ea816fe78 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x563ea816fe50 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x563ea816fe18 <col:23> 'int' 0
|       `-CallExpr 0x563ea816ff00 <<scratch space>:148:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|         |-ImplicitCastExpr 0x563ea816fee8 <<scratch space>:148:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x563ea816fe98 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea816f3b8 'sys_slist_get_not_empty' 'sys_snode_t *(sys_slist_t *)'
|         `-ImplicitCastExpr 0x563ea816ff30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_slist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x563ea816fec0 <col:38> 'sys_slist_t *' lvalue ParmVar 0x563ea816fbd8 'list' 'sys_slist_t *'
|-FunctionDecl 0x563ea8170198 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:391:1, line:393:26> line:391:20 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea8170010 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x563ea8170080 <line:392:9, col:22> col:22 prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x563ea8170100 <line:393:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x563ea8281ee0 <line:382:3, line:389:46>
|   |-ParagraphComment 0x563ea8281ae0 <line:382:3>
|   | `-TextComment 0x563ea8281ab0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8281b00 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x563ea8281b60 <col:10, col:23>
|   |   `-TextComment 0x563ea8281b30 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x563ea8281bb0 <line:384:3, col:62>
|   | `-TextComment 0x563ea8281b80 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea8281c00 <line:386:3>
|   | `-TextComment 0x563ea8281bd0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8281c20 <col:4, line:387:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8281cd0 <line:386:15, line:387:3>
|   |   |-TextComment 0x563ea8281c80 <line:386:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x563ea8281ca0 <line:387:3> Text=" "
|   |-ParamCommandComment 0x563ea8281cf0 <col:4, line:389:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x563ea8281dd0 <line:387:20, line:389:3>
|   |   |-TextComment 0x563ea8281d50 <line:387:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x563ea8281d70 <line:388:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x563ea8281d90 <line:389:3> Text=" "
|   `-ParamCommandComment 0x563ea8281df0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x563ea8281e80 <col:15, col:46>
|       `-TextComment 0x563ea8281e50 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x563ea81703d8 prev 0x563ea8170198 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:150:1 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea8170260 <line:152:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x563ea81702d0 <<scratch space>:154:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x563ea8170340 <<scratch space>:156:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x563ea8170f88 <line:190:2, line:212:2>
|   |-IfStmt 0x563ea8170dd0 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x563ea8170568 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x563ea8170538 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x563ea8170490 <col:7> 'sys_snode_t *' lvalue ParmVar 0x563ea81702d0 'prev_node' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x563ea8170550 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x563ea8170518 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x563ea81704f0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x563ea81704b8 <col:23> 'int' 0
|   | |-CompoundStmt 0x563ea81709c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x563ea81706a8 <<scratch space>:158:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x563ea8170690 <<scratch space>:158:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x563ea8170590 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x563ea8165450 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | | | |-ImplicitCastExpr 0x563ea81706e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_slist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x563ea81705b8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x563ea8170260 'list' 'sys_slist_t *'
|   | | | `-CallExpr 0x563ea8170648 <<scratch space>:160:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_snode_t *'
|   | | |   |-ImplicitCastExpr 0x563ea8170630 <<scratch space>:160:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x563ea81705e0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x563ea81624f0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   | | |   `-ImplicitCastExpr 0x563ea8170678 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_snode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x563ea8170608 <col:33> 'sys_snode_t *' lvalue ParmVar 0x563ea8170340 'node' 'sys_snode_t *'
|   | | `-IfStmt 0x563ea8170990 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x563ea81707e8 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x563ea8170760 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_snode_t *'
|   | |   | | |-ImplicitCastExpr 0x563ea8170748 <<scratch space>:162:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x563ea81706f8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea8165c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | |   | | `-ImplicitCastExpr 0x563ea8170790 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_slist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x563ea8170720 <col:38> 'sys_slist_t *' lvalue ParmVar 0x563ea8170260 'list' 'sys_slist_t *'
|   | |   | `-ImplicitCastExpr 0x563ea81707d0 <col:47> 'sys_snode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x563ea81707a8 <col:47> 'sys_snode_t *' lvalue ParmVar 0x563ea8170340 'node' 'sys_snode_t *'
|   | |   |-CompoundStmt 0x563ea8170978 <col:53, line:199:4>
|   | |   | `-CallExpr 0x563ea8170928 <<scratch space>:164:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x563ea8170910 <<scratch space>:164:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x563ea8170810 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x563ea8165708 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |   |-ImplicitCastExpr 0x563ea8170960 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_slist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x563ea8170838 <col:32> 'sys_slist_t *' lvalue ParmVar 0x563ea8170260 'list' 'sys_slist_t *'
|   | |   |   `-CallExpr 0x563ea81708c8 <<scratch space>:166:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_snode_t *'
|   | |   |     |-ImplicitCastExpr 0x563ea81708b0 <<scratch space>:166:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x563ea8170860 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea81659f0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   |     `-ImplicitCastExpr 0x563ea81708f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_slist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x563ea8170888 <col:36> 'sys_slist_t *' lvalue ParmVar 0x563ea8170260 'list' 'sys_slist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x563ea8170db0 <line:200:10, line:209:3>
|   |   |-CallExpr 0x563ea8170b00 <<scratch space>:168:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x563ea8170ae8 <<scratch space>:168:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x563ea81709e8 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x563ea81627f0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |   | |-ImplicitCastExpr 0x563ea8170b38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_snode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x563ea8170a10 <col:31> 'sys_snode_t *' lvalue ParmVar 0x563ea81702d0 'prev_node' 'sys_snode_t *'
|   |   | `-CallExpr 0x563ea8170aa0 <<scratch space>:170:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_snode_t *'
|   |   |   |-ImplicitCastExpr 0x563ea8170a88 <<scratch space>:170:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x563ea8170a38 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x563ea81624f0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   |   `-ImplicitCastExpr 0x563ea8170ad0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_snode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x563ea8170a60 <col:33> 'sys_snode_t *' lvalue ParmVar 0x563ea8170340 'node' 'sys_snode_t *'
|   |   `-IfStmt 0x563ea8170d78 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x563ea8170c40 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x563ea8170bb8 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_snode_t *'
|   |     | | |-ImplicitCastExpr 0x563ea8170ba0 <<scratch space>:172:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x563ea8170b50 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea8165c18 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | | `-ImplicitCastExpr 0x563ea8170be8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_slist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x563ea8170b78 <col:38> 'sys_slist_t *' lvalue ParmVar 0x563ea8170260 'list' 'sys_slist_t *'
|   |     | `-ImplicitCastExpr 0x563ea8170c28 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563ea8170c00 <col:47> 'sys_snode_t *' lvalue ParmVar 0x563ea8170340 'node' 'sys_snode_t *'
|   |     |-CompoundStmt 0x563ea8170d60 <col:53, line:208:4>
|   |     | `-CallExpr 0x563ea8170cf8 <<scratch space>:174:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x563ea8170ce0 <<scratch space>:174:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x563ea8170c68 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x563ea8165708 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   |     |   |-ImplicitCastExpr 0x563ea8170d30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_slist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x563ea8170c90 <col:32> 'sys_slist_t *' lvalue ParmVar 0x563ea8170260 'list' 'sys_slist_t *'
|   |     |   `-ImplicitCastExpr 0x563ea8170d48 <line:207:13> 'sys_snode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x563ea8170cb8 <col:13> 'sys_snode_t *' lvalue ParmVar 0x563ea81702d0 'prev_node' 'sys_snode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x563ea8170ef0 <<scratch space>:176:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x563ea8170ed8 <<scratch space>:176:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea8170e08 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x563ea81627f0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x563ea8170f28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_snode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ea8170e30 <col:30> 'sys_snode_t *' lvalue ParmVar 0x563ea8170340 'node' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x563ea8170f40 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       `-ParenExpr 0x563ea8170eb8 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x563ea8170e90 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x563ea8170e58 <col:23> 'int' 0
|-FunctionDecl 0x563ea8171170 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:407:1, line:408:28> line:407:20 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea8170fb8 <col:46, col:59> col:59 list 'sys_slist_t *'
| |-ParmVarDecl 0x563ea8171028 <line:408:11, col:24> col:24 node 'sys_snode_t *'
| `-FullComment 0x563ea8282350 <line:398:3, line:405:35>
|   |-ParagraphComment 0x563ea8281f80 <line:398:3>
|   | `-TextComment 0x563ea8281f50 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8281fa0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x563ea8282000 <col:10, col:44>
|   |   `-TextComment 0x563ea8281fd0 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x563ea8282050 <line:400:3, col:62>
|   | `-TextComment 0x563ea8282020 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea82820a0 <line:402:3>
|   | `-TextComment 0x563ea8282070 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82820c0 <col:4, line:403:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8282170 <line:402:15, line:403:3>
|   |   |-TextComment 0x563ea8282120 <line:402:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x563ea8282140 <line:403:3> Text=" "
|   |-ParamCommandComment 0x563ea8282190 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x563ea8282220 <col:15, col:60>
|   |   `-TextComment 0x563ea82821f0 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x563ea8282270 <line:405:3>
|   | `-TextComment 0x563ea8282240 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8282290 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea82822f0 <col:11, col:35>
|       `-TextComment 0x563ea82822c0 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x563ea8171330 prev 0x563ea8171170 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:178:1 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x563ea8171230 <line:180:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_slist_t *'
| |-ParmVarDecl 0x563ea81712a0 <<scratch space>:182:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_snode_t *'
| `-CompoundStmt 0x563ea8171cd8 <line:218:2, line:233:2>
|   |-DeclStmt 0x563ea81714e8 <<scratch space>:184:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x563ea81713f0 <<scratch space>:184:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_snode_t *' cinit
|   |   `-ImplicitCastExpr 0x563ea81714d0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |     `-ParenExpr 0x563ea81714b0 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x563ea8171488 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x563ea8171450 <col:23> 'int' 0
|   |-DeclStmt 0x563ea8171570 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x563ea8171510 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_snode_t *'
|   |-ForStmt 0x563ea8171c20 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x563ea8171660 <line:222:42, line:15:47> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x563ea8171588 <line:222:42> 'sys_snode_t *' lvalue Var 0x563ea8171510 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x563ea8171618 <<scratch space>:188:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x563ea8171600 <<scratch space>:188:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x563ea81715b0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x563ea81659f0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   `-ImplicitCastExpr 0x563ea8171648 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_slist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x563ea81715d8 <col:36> 'sys_slist_t *' lvalue ParmVar 0x563ea8171230 'list' 'sys_slist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x563ea8171760 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x563ea8171730 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x563ea8171688 <col:42> 'sys_snode_t *' lvalue Var 0x563ea8171510 'test' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x563ea8171748 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x563ea8171710 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x563ea81716e8 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x563ea81716b0 <col:23> 'int' 0
|   | |-BinaryOperator 0x563ea8171860 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x563ea8171788 <line:222:42> 'sys_snode_t *' lvalue Var 0x563ea8171510 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x563ea8171818 <<scratch space>:190:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x563ea8171800 <<scratch space>:190:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x563ea81717b0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x563ea8168938 'sys_slist_peek_next' 'sys_snode_t *(sys_snode_t *)'
|   | |   `-ImplicitCastExpr 0x563ea8171848 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x563ea81717d8 <col:42> 'sys_snode_t *' lvalue Var 0x563ea8171510 'test' 'sys_snode_t *'
|   | `-CompoundStmt 0x563ea8171c00 <col:48, line:230:3>
|   |   |-IfStmt 0x563ea8171b38 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x563ea8171908 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x563ea81718d8 <col:8> 'sys_snode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x563ea8171888 <col:8> 'sys_snode_t *' lvalue Var 0x563ea8171510 'test' 'sys_snode_t *'
|   |   | | `-ImplicitCastExpr 0x563ea81718f0 <col:16> 'sys_snode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x563ea81718b0 <col:16> 'sys_snode_t *' lvalue ParmVar 0x563ea81712a0 'node' 'sys_snode_t *'
|   |   | |-CompoundStmt 0x563ea8171b18 <col:22, line:227:4>
|   |   | | |-CallExpr 0x563ea8171a40 <<scratch space>:192:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x563ea8171a28 <<scratch space>:192:1> 'void (*)(sys_slist_t *, sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x563ea8171930 <col:1> 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' Function 0x563ea81703d8 'sys_slist_remove' 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)'
|   |   | | | |-ImplicitCastExpr 0x563ea8171a80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_slist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x563ea8171958 <col:32> 'sys_slist_t *' lvalue ParmVar 0x563ea8171230 'list' 'sys_slist_t *'
|   |   | | | |-ImplicitCastExpr 0x563ea8171a98 <col:38> 'sys_snode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x563ea8171980 <col:38> 'sys_snode_t *' lvalue Var 0x563ea81713f0 'prev' 'sys_snode_t *'
|   |   | | | `-ImplicitCastExpr 0x563ea8171ab0 <line:225:11> 'sys_snode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x563ea81719a8 <col:11> 'sys_snode_t *' lvalue ParmVar 0x563ea81712a0 'node' 'sys_snode_t *'
|   |   | | `-ReturnStmt 0x563ea8171b00 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x563ea8171ae8 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x563ea8171ac8 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x563ea8171bd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_snode_t *' '='
|   |     |-DeclRefExpr 0x563ea8171b70 <col:4> 'sys_snode_t *' lvalue Var 0x563ea81713f0 'prev' 'sys_snode_t *'
|   |     `-ImplicitCastExpr 0x563ea8171bc0 <col:11> 'sys_snode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x563ea8171b98 <col:11> 'sys_snode_t *' lvalue Var 0x563ea8171510 'test' 'sys_snode_t *'
|   `-ReturnStmt 0x563ea8171c90 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x563ea8171c78 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x563ea8171c58 <col:16> 'int' 0
|-TypedefDecl 0x563ea8171d40 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:29:1, col:15> col:15 referenced unative_t 'u64_t':'unsigned long long'
| `-TypedefType 0x563ea8171d10 'u64_t' sugar
|   |-Typedef 0x563ea80dfeb0 'u64_t'
|   `-BuiltinType 0x563ea805b870 'unsigned long long'
|-RecordDecl 0x563ea8171d98 <line:34:1, line:36:1> line:34:8 struct _sfnode definition
| `-FieldDecl 0x563ea8171e70 <line:35:2, col:12> col:12 referenced next_and_flags 'unative_t':'unsigned long long'
|-TypedefDecl 0x563ea8171f10 <line:38:1, col:24> col:24 referenced sys_sfnode_t 'struct _sfnode':'struct _sfnode'
| `-ElaboratedType 0x563ea8171ec0 'struct _sfnode' sugar
|   `-RecordType 0x563ea8171e20 'struct _sfnode'
|     `-Record 0x563ea8171d98 '_sfnode'
|-RecordDecl 0x563ea8171f68 <line:40:1, line:43:1> line:40:8 struct _sflist definition
| |-FieldDecl 0x563ea8172098 <line:41:2, col:16> col:16 referenced head 'sys_sfnode_t *'
| `-FieldDecl 0x563ea81778b0 <line:42:2, col:16> col:16 referenced tail 'sys_sfnode_t *'
|-TypedefDecl 0x563ea8177950 <line:45:1, col:24> col:24 referenced sys_sflist_t 'struct _sflist':'struct _sflist'
| `-ElaboratedType 0x563ea8177900 'struct _sflist' sugar
|   `-RecordType 0x563ea8171ff0 'struct _sflist'
|     `-Record 0x563ea8171f68 '_sflist'
|-FunctionDecl 0x563ea8177c60 <line:196:1, line:200:1> line:196:20 used sys_sflist_init 'void (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x563ea8177b58 <col:36, col:50> col:50 used list 'sys_sflist_t *'
| |-CompoundStmt 0x563ea8177f78 <line:197:1, line:200:1>
| | |-BinaryOperator 0x563ea8177e18 <line:198:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| | | |-MemberExpr 0x563ea8177d48 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:198:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x563ea8172098
| | | | `-ImplicitCastExpr 0x563ea8177d30 <col:2> 'sys_sflist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x563ea8177d08 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x563ea8177b58 'list' 'sys_sflist_t *'
| | | `-ImplicitCastExpr 0x563ea8177e00 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| | |   `-ParenExpr 0x563ea8177de0 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x563ea8177db8 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x563ea8177d80 <col:23> 'int' 0
| | `-BinaryOperator 0x563ea8177f50 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| |   |-MemberExpr 0x563ea8177e80 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x563ea81778b0
| |   | `-ImplicitCastExpr 0x563ea8177e68 <col:2> 'sys_sflist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x563ea8177e40 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x563ea8177b58 'list' 'sys_sflist_t *'
| |   `-ImplicitCastExpr 0x563ea8177f38 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| |     `-ParenExpr 0x563ea8177f18 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x563ea8177ef0 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x563ea8177eb8 <col:23> 'int' 0
| `-FullComment 0x563ea82835e0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:192:3, line:194:50>
|   |-ParagraphComment 0x563ea8283420 <line:192:3>
|   | `-TextComment 0x563ea82833f0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8283440 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x563ea82834a0 <col:10, col:27>
|   |   `-TextComment 0x563ea8283470 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x563ea82834f0 <line:194:3>
|   | `-TextComment 0x563ea82834c0 <col:3> Text=" "
|   `-ParamCommandComment 0x563ea8283510 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x563ea82835a0 <col:15, col:50>
|       `-TextComment 0x563ea8283570 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x563ea81780b0 <line:205:1, line:208:1> line:205:29 used z_sfnode_next_peek 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea8177fa8 <col:48, col:62> col:62 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x563ea8178308 <line:206:1, line:208:1>
|   `-ReturnStmt 0x563ea81782f0 <line:207:2, col:71>
|     `-CStyleCastExpr 0x563ea81782c8 <col:9, col:71> 'sys_sfnode_t *' <IntegralToPointer>
|       `-ParenExpr 0x563ea81782a8 <col:25, col:71> 'unsigned long long'
|         `-BinaryOperator 0x563ea8178240 <col:26, line:203:31> 'unsigned long long' '&'
|           |-ImplicitCastExpr 0x563ea8178210 <line:207:26, col:32> 'unative_t':'unsigned long long' <LValueToRValue>
|           | `-MemberExpr 0x563ea8178198 <col:26, col:32> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x563ea8171e70
|           |   `-ImplicitCastExpr 0x563ea8178180 <col:26> 'sys_sfnode_t *' <LValueToRValue>
|           |     `-DeclRefExpr 0x563ea8178158 <col:26> 'sys_sfnode_t *' lvalue ParmVar 0x563ea8177fa8 'node' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x563ea8178228 <col:49, line:203:31> 'unsigned long long' <IntegralCast>
|             `-UnaryOperator 0x563ea81781f0 <line:207:49, line:203:31> 'unsigned long' prefix '~'
|               `-IntegerLiteral 0x563ea81781d0 <col:31> 'unsigned long' 3
|-FunctionDecl 0x563ea8178430 <line:210:1, col:59> col:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| `-ParmVarDecl 0x563ea8178330 <col:41, col:55> col:55 node 'sys_sfnode_t *'
|-FunctionDecl 0x563ea8178670 <line:212:1, line:218:1> line:212:20 used z_sfnode_next_set 'void (sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea81784e8 <col:38, col:52> col:52 used parent 'sys_sfnode_t *'
| |-ParmVarDecl 0x563ea8178558 <line:213:12, col:26> col:26 used child 'sys_sfnode_t *'
| `-CompoundStmt 0x563ea8179a68 <line:214:1, line:218:1>
|   |-DeclStmt 0x563ea8178898 <line:215:2, col:47>
|   | `-VarDecl 0x563ea8178730 <col:2, col:46> col:7 used cur_flags 'u8_t':'unsigned char' cinit
|   |   `-CallExpr 0x563ea8178850 <col:19, col:46> 'u8_t':'unsigned char'
|   |     |-ImplicitCastExpr 0x563ea8178838 <col:19> 'u8_t (*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ea8178790 <col:19> 'u8_t (sys_sfnode_t *)' Function 0x563ea8178430 'sys_sfnode_flags_get' 'u8_t (sys_sfnode_t *)'
|   |     `-ImplicitCastExpr 0x563ea8178880 <col:40> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x563ea81787b8 <col:40> 'sys_sfnode_t *' lvalue ParmVar 0x563ea81784e8 'parent' 'sys_sfnode_t *'
|   `-BinaryOperator 0x563ea8179a40 <line:217:2, col:50> 'unative_t':'unsigned long long' '='
|     |-MemberExpr 0x563ea8179910 <col:2, col:10> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x563ea8171e70
|     | `-ImplicitCastExpr 0x563ea81798f8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x563ea81798d0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x563ea81784e8 'parent' 'sys_sfnode_t *'
|     `-BinaryOperator 0x563ea8179a18 <col:27, col:50> 'unsigned long long' '|'
|       |-ImplicitCastExpr 0x563ea8179a00 <col:27> 'unsigned long long' <IntegralCast>
|       | `-ImplicitCastExpr 0x563ea81799e8 <col:27> 'u8_t':'unsigned char' <LValueToRValue>
|       |   `-DeclRefExpr 0x563ea8179948 <col:27> 'u8_t':'unsigned char' lvalue Var 0x563ea8178730 'cur_flags' 'u8_t':'unsigned char'
|       `-CStyleCastExpr 0x563ea81799c0 <col:39, col:50> 'unative_t':'unsigned long long' <PointerToIntegral>
|         `-ImplicitCastExpr 0x563ea81799a8 <col:50> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x563ea8179970 <col:50> 'sys_sfnode_t *' lvalue ParmVar 0x563ea8178558 'child' 'sys_sfnode_t *'
|-FunctionDecl 0x563ea8179c20 <line:220:1, line:223:1> line:220:20 used z_sflist_head_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea8179a98 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x563ea8179b08 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x563ea8179db0 <line:221:1, line:223:1>
|   `-BinaryOperator 0x563ea8179d88 <line:222:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x563ea8179d10 <col:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x563ea8172098
|     | `-ImplicitCastExpr 0x563ea8179cf8 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x563ea8179cd0 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x563ea8179a98 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x563ea8179d70 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea8179d48 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x563ea8179b08 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x563ea8179ed8 <line:225:1, line:228:1> line:225:20 used z_sflist_tail_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea8179dd8 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x563ea8179e48 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x563ea817a098 <line:226:1, line:228:1>
|   `-BinaryOperator 0x563ea817a040 <line:227:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x563ea8179fc8 <col:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x563ea81778b0
|     | `-ImplicitCastExpr 0x563ea8179fb0 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x563ea8179f88 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x563ea8179dd8 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x563ea817a028 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea817a000 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x563ea8179e48 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x563ea817a1c0 <line:237:1, line:240:1> line:237:29 used sys_sflist_peek_head 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x563ea817a0c0 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x563ea817a338 <line:238:1, line:240:1>
| | `-ReturnStmt 0x563ea817a2f8 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x563ea817a2e0 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x563ea817a2a8 <col:9, col:15> 'sys_sfnode_t *' lvalue ->head 0x563ea8172098
| |       `-ImplicitCastExpr 0x563ea817a290 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x563ea817a268 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x563ea817a0c0 'list' 'sys_sflist_t *'
| `-FullComment 0x563ea8283920 <line:231:3, line:235:68>
|   |-ParagraphComment 0x563ea8283680 <line:231:3>
|   | `-TextComment 0x563ea8283650 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82836a0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea8283700 <col:10, col:43>
|   |   `-TextComment 0x563ea82836d0 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x563ea8283750 <line:233:3>
|   | `-TextComment 0x563ea8283720 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8283770 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8283800 <col:15, col:62>
|   |   `-TextComment 0x563ea82837d0 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x563ea8283850 <line:235:3>
|   | `-TextComment 0x563ea8283820 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8283870 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x563ea82838d0 <col:11, col:68>
|       `-TextComment 0x563ea82838a0 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x563ea817a3e8 <line:249:1, line:252:1> line:249:29 used sys_sflist_peek_tail 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x563ea817a360 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x563ea817a568 <line:250:1, line:252:1>
| | `-ReturnStmt 0x563ea817a520 <line:251:2, col:15>
| |   `-ImplicitCastExpr 0x563ea817a508 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x563ea817a4d0 <col:9, col:15> 'sys_sfnode_t *' lvalue ->tail 0x563ea81778b0
| |       `-ImplicitCastExpr 0x563ea817a4b8 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x563ea817a490 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x563ea817a360 'list' 'sys_sflist_t *'
| `-FullComment 0x563ea8283c60 <line:243:3, line:247:67>
|   |-ParagraphComment 0x563ea82839c0 <line:243:3>
|   | `-TextComment 0x563ea8283990 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82839e0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x563ea8283a40 <col:10, col:42>
|   |   `-TextComment 0x563ea8283a10 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x563ea8283a90 <line:245:3>
|   | `-TextComment 0x563ea8283a60 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8283ab0 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8283b40 <col:15, col:61>
|   |   `-TextComment 0x563ea8283b10 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x563ea8283b90 <line:247:3>
|   | `-TextComment 0x563ea8283b60 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8283bb0 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x563ea8283c10 <col:11, col:67>
|       `-TextComment 0x563ea8283be0 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x563ea817a618 prev 0x563ea8178430 <line:264:1, line:267:1> line:264:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea817a590 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-CompoundStmt 0x563ea817a808 <line:265:1, line:267:1>
| | `-ReturnStmt 0x563ea817a7c8 <line:266:2, line:203:31>
| |   `-ImplicitCastExpr 0x563ea817a7b0 <line:266:9, line:203:31> 'u8_t':'unsigned char' <IntegralCast>
| |     `-BinaryOperator 0x563ea817a788 <line:266:9, line:203:31> 'unsigned long long' '&'
| |       |-ImplicitCastExpr 0x563ea817a758 <line:266:9, col:15> 'unative_t':'unsigned long long' <LValueToRValue>
| |       | `-MemberExpr 0x563ea817a700 <col:9, col:15> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x563ea8171e70
| |       |   `-ImplicitCastExpr 0x563ea817a6e8 <col:9> 'sys_sfnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x563ea817a6c0 <col:9> 'sys_sfnode_t *' lvalue ParmVar 0x563ea817a590 'node' 'sys_sfnode_t *'
| |       `-ImplicitCastExpr 0x563ea817a770 <line:203:31> 'unsigned long long' <IntegralCast>
| |         `-IntegerLiteral 0x563ea817a738 <col:31> 'unsigned long' 3
| `-FullComment 0x563ea8283f70 <line:259:3, line:262:60>
|   |-ParagraphComment 0x563ea8283d00 <line:259:3>
|   | `-TextComment 0x563ea8283cd0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8283d20 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x563ea8283d80 <col:10, col:51>
|   |   `-TextComment 0x563ea8283d50 <col:10, col:51> Text=" Fetch flags value for a particular sfnode"
|   |-ParagraphComment 0x563ea8283dd0 <line:261:3>
|   | `-TextComment 0x563ea8283da0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8283df0 <col:4, line:262:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x563ea8283ea0 <line:261:15, line:262:3>
|   |   |-TextComment 0x563ea8283e50 <line:261:15, col:56> Text=" A pointer to the node to fetch flags from"
|   |   `-TextComment 0x563ea8283e70 <line:262:3> Text=" "
|   `-BlockCommandComment 0x563ea8283ec0 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x563ea8283f20 <col:11, col:60>
|       `-TextComment 0x563ea8283ef0 <col:11, col:60> Text=" The value of flags, which will be between 0 and 3"
|-FunctionDecl 0x563ea817a9f0 <line:282:1, line:286:1> line:282:20 sys_sfnode_init 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x563ea817a830 <col:36, col:50> col:50 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x563ea817a8e0 <col:56, col:61> col:61 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x563ea817abe8 <line:283:1, line:286:1>
| | |-CompoundStmt 0x563ea817aaa0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x563ea817aab0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:284:70>
| | `-BinaryOperator 0x563ea817ab90 <line:285:2, col:25> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x563ea817ab00 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x563ea8171e70
| |   | `-ImplicitCastExpr 0x563ea817aae8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x563ea817aac0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x563ea817a830 'node' 'sys_sfnode_t *'
| |   `-ImplicitCastExpr 0x563ea817ab78 <col:25> 'unative_t':'unsigned long long' <IntegralCast>
| |     `-ImplicitCastExpr 0x563ea817ab60 <col:25> 'u8_t':'unsigned char' <LValueToRValue>
| |       `-DeclRefExpr 0x563ea817ab38 <col:25> 'u8_t':'unsigned char' lvalue ParmVar 0x563ea817a8e0 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x563ea82843d0 <line:270:3, line:280:62>
|   |-ParagraphComment 0x563ea8284010 <line:270:3>
|   | `-TextComment 0x563ea8283fe0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8284030 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x563ea8284090 <col:10, col:35>
|   |   `-TextComment 0x563ea8284060 <col:10, col:35> Text=" Initialize an sflist node"
|   |-ParagraphComment 0x563ea8284130 <line:272:3, line:274:64>
|   | |-TextComment 0x563ea82840b0 <line:272:3, col:79> Text=" Set an initial flags value for this slist node, which can be a value between"
|   | |-TextComment 0x563ea82840d0 <line:273:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x563ea82840f0 <line:274:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x563ea82841a0 <line:276:3, line:277:61>
|   | |-TextComment 0x563ea8284150 <line:276:3, col:73> Text=" This is ever so slightly faster than sys_sfnode_flags_set() and should"
|   | `-TextComment 0x563ea8284170 <line:277:3, col:61> Text=" only be used on a node that hasn't been added to any list."
|   |-ParagraphComment 0x563ea82841f0 <line:279:3>
|   | `-TextComment 0x563ea82841c0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8284210 <col:4, line:280:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x563ea82842c0 <line:279:15, line:280:3>
|   |   |-TextComment 0x563ea8284270 <line:279:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x563ea8284290 <line:280:3> Text=" "
|   `-ParamCommandComment 0x563ea82842e0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x563ea8284370 <col:16, col:62>
|       `-TextComment 0x563ea8284340 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x563ea817ad20 <line:298:1, line:302:1> line:298:20 sys_sfnode_flags_set 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x563ea817ac20 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x563ea817ac90 <col:61, col:66> col:66 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x563ea817b0d8 <line:299:1, line:302:1>
| | |-CompoundStmt 0x563ea817add0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x563ea817ade0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:300:70>
| | `-BinaryOperator 0x563ea817b080 <line:301:2, col:65> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x563ea817ae30 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x563ea8171e70
| |   | `-ImplicitCastExpr 0x563ea817ae18 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x563ea817adf0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x563ea817ac20 'node' 'sys_sfnode_t *'
| |   `-BinaryOperator 0x563ea817b058 <col:25, col:65> 'unsigned long long' '|'
| |     |-CStyleCastExpr 0x563ea817afd8 <col:25, col:61> 'unative_t':'unsigned long long' <PointerToIntegral>
| |     | `-ParenExpr 0x563ea817afb8 <col:36, col:61> 'sys_sfnode_t *'
| |     |   `-CallExpr 0x563ea817af30 <col:37, col:60> 'sys_sfnode_t *'
| |     |     |-ImplicitCastExpr 0x563ea817af18 <col:37> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x563ea817ae68 <col:37> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x563ea81780b0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
| |     |     `-ImplicitCastExpr 0x563ea817af60 <col:56> 'sys_sfnode_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x563ea817ae90 <col:56> 'sys_sfnode_t *' lvalue ParmVar 0x563ea817ac20 'node' 'sys_sfnode_t *'
| |     `-ImplicitCastExpr 0x563ea817b040 <col:65> 'unsigned long long' <IntegralCast>
| |       `-ImplicitCastExpr 0x563ea817b028 <col:65> 'u8_t':'unsigned char' <LValueToRValue>
| |         `-DeclRefExpr 0x563ea817b000 <col:65> 'u8_t':'unsigned char' lvalue ParmVar 0x563ea817ac90 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x563ea82847b0 <line:289:3, line:296:62>
|   |-ParagraphComment 0x563ea8284470 <line:289:3>
|   | `-TextComment 0x563ea8284440 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8284490 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x563ea82844f0 <col:10, col:44>
|   |   `-TextComment 0x563ea82844c0 <col:10, col:44> Text=" Set flags value for an sflist node"
|   |-ParagraphComment 0x563ea8284590 <line:291:3, line:293:64>
|   | |-TextComment 0x563ea8284510 <line:291:3, col:70> Text=" Set a flags value for this slist node, which can be a value between"
|   | |-TextComment 0x563ea8284530 <line:292:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x563ea8284550 <line:293:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x563ea82845e0 <line:295:3>
|   | `-TextComment 0x563ea82845b0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8284600 <col:4, line:296:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x563ea82846b0 <line:295:15, line:296:3>
|   |   |-TextComment 0x563ea8284660 <line:295:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x563ea8284680 <line:296:3> Text=" "
|   `-ParamCommandComment 0x563ea82846d0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x563ea8284760 <col:16, col:62>
|       `-TextComment 0x563ea8284730 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x563ea817b210 <line:315:1, col:58> col:20 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x563ea817b110 <col:40, col:54> col:54 list 'sys_sflist_t *'
| `-FullComment 0x563ea8284af0 <line:309:3, line:313:57>
|   |-ParagraphComment 0x563ea8284850 <line:309:3>
|   | `-TextComment 0x563ea8284820 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8284870 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x563ea82848d0 <col:10, col:41>
|   |   `-TextComment 0x563ea82848a0 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x563ea8284920 <line:311:3>
|   | `-TextComment 0x563ea82848f0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8284940 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea82849d0 <col:15, col:44>
|   |   `-TextComment 0x563ea82849a0 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x563ea8284a20 <line:313:3>
|   | `-TextComment 0x563ea82849f0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8284a40 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x563ea8284aa0 <col:11, col:57>
|       `-TextComment 0x563ea8284a70 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x563ea817b350 prev 0x563ea817b210 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:194:1 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x563ea817b2c8 <line:196:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_sflist_t *'
| `-CompoundStmt 0x563ea817b648 <line:60:2, line:62:2>
|   `-ReturnStmt 0x563ea817b600 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x563ea817b5e8 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x563ea817b5c8 <col:10, col:54> 'int'
|         `-BinaryOperator 0x563ea817b5a0 <<scratch space>:198:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x563ea817b4c0 <<scratch space>:198:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_sfnode_t *'
|           | |-ImplicitCastExpr 0x563ea817b4a8 <<scratch space>:198:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x563ea817b3f8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|           | `-ImplicitCastExpr 0x563ea817b4f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_sflist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x563ea817b420 <col:41> 'sys_sflist_t *' lvalue ParmVar 0x563ea817b2c8 'list' 'sys_sflist_t *'
|           `-ImplicitCastExpr 0x563ea817b588 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|             `-ParenExpr 0x563ea817b568 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x563ea817b540 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x563ea817b508 <col:23> 'int' 0
|-FunctionDecl 0x563ea817b6f8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:328:1, col:77> col:29 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea817b670 <col:59, col:73> col:73 node 'sys_sfnode_t *'
| `-FullComment 0x563ea8284e90 <line:320:3, line:326:55>
|   |-ParagraphComment 0x563ea8284b90 <line:320:3>
|   | `-TextComment 0x563ea8284b60 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8284bb0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x563ea8284c10 <col:10, col:64>
|   |   `-TextComment 0x563ea8284be0 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x563ea8284c60 <line:322:3, col:70>
|   | `-TextComment 0x563ea8284c30 <col:3, col:70> Text=" Faster then sys_sflist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x563ea8284cb0 <line:324:3>
|   | `-TextComment 0x563ea8284c80 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8284cd0 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x563ea8284d60 <col:15, col:64>
|   |   `-TextComment 0x563ea8284d30 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x563ea8284db0 <line:326:3>
|   | `-TextComment 0x563ea8284d80 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8284dd0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x563ea8284e30 <col:11, col:55>
|       `-TextComment 0x563ea8284e00 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x563ea817b838 prev 0x563ea817b6f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:202:1 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea817b7b0 <line:204:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x563ea817c9f8 <line:67:2, line:69:2>
|   `-ReturnStmt 0x563ea817c9b0 <line:68:3, col:42>
|     `-CallExpr 0x563ea817c968 <<scratch space>:206:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x563ea817c950 <<scratch space>:206:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea817c900 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x563ea81780b0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       `-ImplicitCastExpr 0x563ea817c998 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_sfnode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea817c928 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x563ea817b7b0 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x563ea817caa8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:339:1, col:68> col:29 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea817ca20 <col:50, col:64> col:64 node 'sys_sfnode_t *'
| `-FullComment 0x563ea82851d0 <line:333:3, line:337:55>
|   |-ParagraphComment 0x563ea8284f30 <line:333:3>
|   | `-TextComment 0x563ea8284f00 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8284f50 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x563ea8284fb0 <col:10, col:46>
|   |   `-TextComment 0x563ea8284f80 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x563ea8285000 <line:335:3>
|   | `-TextComment 0x563ea8284fd0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8285020 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x563ea82850b0 <col:15, col:64>
|   |   `-TextComment 0x563ea8285080 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x563ea8285100 <line:337:3>
|   | `-TextComment 0x563ea82850d0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8285120 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x563ea8285180 <col:11, col:55>
|       `-TextComment 0x563ea8285150 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x563ea817cbe8 prev 0x563ea817caa8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:210:1 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea817cb60 <line:212:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x563ea817cf48 <line:74:2, line:78:2>
|   `-ReturnStmt 0x563ea817cf08 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x563ea817ced8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *'
|       |-BinaryOperator 0x563ea817cd68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x563ea817cd38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_sfnode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x563ea817cc90 <col:10> 'sys_sfnode_t *' lvalue ParmVar 0x563ea817cb60 'node' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x563ea817cd50 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x563ea817cd18 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x563ea817ccf0 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x563ea817ccb8 <col:23> 'int' 0
|       |-CallExpr 0x563ea817cdf8 <<scratch space>:214:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x563ea817cde0 <<scratch space>:214:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x563ea817cd90 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x563ea817b838 'sys_sflist_peek_next_no_check' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | `-ImplicitCastExpr 0x563ea817ce28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x563ea817cdb8 <col:43> 'sys_sfnode_t *' lvalue ParmVar 0x563ea817cb60 'node' 'sys_sfnode_t *'
|       `-ImplicitCastExpr 0x563ea817cec0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|         `-ParenExpr 0x563ea817cea0 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x563ea817ce78 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x563ea817ce40 <col:23> 'int' 0
|-FunctionDecl 0x563ea817d070 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:351:1, line:352:29> line:351:20 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea817cf70 <col:39, col:53> col:53 list 'sys_sflist_t *'
| |-ParmVarDecl 0x563ea817cfe0 <line:352:11, col:25> col:25 node 'sys_sfnode_t *'
| `-FullComment 0x563ea8285570 <line:344:3, line:349:47>
|   |-ParagraphComment 0x563ea8285270 <line:344:3>
|   | `-TextComment 0x563ea8285240 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8285290 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x563ea82852f0 <col:10, col:42>
|   |   `-TextComment 0x563ea82852c0 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x563ea8285340 <line:346:3, col:63>
|   | `-TextComment 0x563ea8285310 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea8285390 <line:348:3>
|   | `-TextComment 0x563ea8285360 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82853c0 <col:4, line:349:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8285470 <line:348:15, line:349:3>
|   |   |-TextComment 0x563ea8285420 <line:348:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x563ea8285440 <line:349:3> Text=" "
|   `-ParamCommandComment 0x563ea8285490 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x563ea8285520 <col:15, col:47>
|       `-TextComment 0x563ea82854f0 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x563ea817d230 prev 0x563ea817d070 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:216:1 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea817d130 <line:218:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x563ea817d1a0 <<scratch space>:220:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x563ea817d978 <line:84:2, line:93:2>
|   |-CallExpr 0x563ea817d450 <<scratch space>:222:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x563ea817d438 <<scratch space>:222:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x563ea817d2e0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x563ea8178670 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x563ea817d488 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x563ea817d308 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x563ea817d1a0 'node' 'sys_sfnode_t *'
|   | `-CallExpr 0x563ea817d398 <<scratch space>:224:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x563ea817d380 <<scratch space>:224:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x563ea817d330 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x563ea817d3c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x563ea817d358 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x563ea817d130 'list' 'sys_sflist_t *'
|   |-CallExpr 0x563ea817d590 <<scratch space>:226:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x563ea817d578 <<scratch space>:226:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x563ea817d4a0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x563ea8179c20 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x563ea817d5c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x563ea817d4c8 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x563ea817d130 'list' 'sys_sflist_t *'
|   | `-ImplicitCastExpr 0x563ea817d5e0 <col:36> 'sys_sfnode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x563ea817d4f0 <col:36> 'sys_sfnode_t *' lvalue ParmVar 0x563ea817d1a0 'node' 'sys_sfnode_t *'
|   `-IfStmt 0x563ea817d910 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x563ea817d740 <<scratch space>:228:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x563ea817d660 <<scratch space>:228:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x563ea817d648 <<scratch space>:228:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x563ea817d5f8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x563ea817d690 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x563ea817d620 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x563ea817d130 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x563ea817d728 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x563ea817d708 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x563ea817d6e0 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x563ea817d6a8 <col:23> 'int' 0
|     |-CompoundStmt 0x563ea817d8d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x563ea817d880 <<scratch space>:230:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x563ea817d868 <<scratch space>:230:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x563ea817d768 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x563ea8179ed8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x563ea817d8b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x563ea817d790 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x563ea817d130 'list' 'sys_sflist_t *'
|     |   `-CallExpr 0x563ea817d820 <<scratch space>:232:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_sfnode_t *'
|     |     |-ImplicitCastExpr 0x563ea817d808 <<scratch space>:232:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x563ea817d7b8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|     |     `-ImplicitCastExpr 0x563ea817d850 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_sflist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x563ea817d7e0 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x563ea817d130 'list' 'sys_sflist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x563ea817dab0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:364:1, line:365:28> line:364:20 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea817d9b0 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x563ea817da20 <line:365:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x563ea8285900 <line:357:3, line:362:46>
|   |-ParagraphComment 0x563ea8285610 <line:357:3>
|   | `-TextComment 0x563ea82855e0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8285630 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x563ea8285690 <col:10, col:41>
|   |   `-TextComment 0x563ea8285660 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x563ea82856e0 <line:359:3, col:63>
|   | `-TextComment 0x563ea82856b0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea8285730 <line:361:3>
|   | `-TextComment 0x563ea8285700 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8285750 <col:4, line:362:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8285800 <line:361:15, line:362:3>
|   |   |-TextComment 0x563ea82857b0 <line:361:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x563ea82857d0 <line:362:3> Text=" "
|   `-ParamCommandComment 0x563ea8285820 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x563ea82858b0 <col:15, col:46>
|       `-TextComment 0x563ea8285880 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x563ea817dc70 prev 0x563ea817dab0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:234:1 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea817db70 <line:236:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x563ea817dbe0 <<scratch space>:238:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x563ea817e4d8 <line:99:2, line:111:2>
|   |-CallExpr 0x563ea817de08 <<scratch space>:240:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x563ea817ddf0 <<scratch space>:240:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x563ea817dd20 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x563ea8178670 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x563ea817de40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x563ea817dd48 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x563ea817dbe0 'node' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x563ea817de58 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |   `-ParenExpr 0x563ea817ddd0 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x563ea817dda8 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x563ea817dd70 <col:23> 'int' 0
|   `-IfStmt 0x563ea817e470 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x563ea817dfb8 <<scratch space>:242:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x563ea817ded8 <<scratch space>:242:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x563ea817dec0 <<scratch space>:242:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x563ea817de70 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x563ea817df08 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x563ea817de98 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x563ea817db70 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x563ea817dfa0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x563ea817df80 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x563ea817df58 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x563ea817df20 <col:23> 'int' 0
|     |-CompoundStmt 0x563ea817e1d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x563ea817e070 <<scratch space>:244:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x563ea817e058 <<scratch space>:244:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x563ea817dfe0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x563ea8179ed8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     | | |-ImplicitCastExpr 0x563ea817e0a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_sflist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x563ea817e008 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x563ea817db70 'list' 'sys_sflist_t *'
|     | | `-ImplicitCastExpr 0x563ea817e0c0 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x563ea817e030 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x563ea817dbe0 'node' 'sys_sfnode_t *'
|     | `-CallExpr 0x563ea817e168 <<scratch space>:246:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x563ea817e150 <<scratch space>:246:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x563ea817e0d8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x563ea8179c20 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x563ea817e1a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x563ea817e100 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x563ea817db70 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x563ea817e1b8 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x563ea817e128 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x563ea817dbe0 'node' 'sys_sfnode_t *'
|     `-CompoundStmt 0x563ea817e450 <line:105:10, line:110:3>
|       |-CallExpr 0x563ea817e308 <<scratch space>:248:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x563ea817e2f0 <<scratch space>:248:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x563ea817e1f0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x563ea8178670 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|       | |-CallExpr 0x563ea817e280 <line:250:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x563ea817e268 <<scratch space>:250:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x563ea817e218 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | | `-ImplicitCastExpr 0x563ea817e2b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_sflist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x563ea817e240 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x563ea817db70 'list' 'sys_sflist_t *'
|       | `-ImplicitCastExpr 0x563ea817e340 <line:108:5> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x563ea817e2c8 <col:5> 'sys_sfnode_t *' lvalue ParmVar 0x563ea817dbe0 'node' 'sys_sfnode_t *'
|       `-CallExpr 0x563ea817e3e8 <<scratch space>:252:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x563ea817e3d0 <<scratch space>:252:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x563ea817e358 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x563ea8179ed8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|         |-ImplicitCastExpr 0x563ea817e420 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_sflist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x563ea817e380 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x563ea817db70 'list' 'sys_sflist_t *'
|         `-ImplicitCastExpr 0x563ea817e438 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x563ea817e3a8 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x563ea817dbe0 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x563ea817e730 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:382:1, line:383:30> line:382:20 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x563ea817e508 <col:43, col:57> col:57 list 'sys_sflist_t *'
| |-ParmVarDecl 0x563ea817e580 <line:383:8, col:14> col:14 head 'void *'
| |-ParmVarDecl 0x563ea817e5f8 <col:20, col:26> col:26 tail 'void *'
| `-FullComment 0x563ea8285e60 <line:370:3, line:380:66>
|   |-ParagraphComment 0x563ea82859a0 <line:370:3>
|   | `-TextComment 0x563ea8285970 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82859c0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x563ea8285a20 <col:10, col:41>
|   |   `-TextComment 0x563ea82859f0 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x563ea8285b10 <line:372:3, line:374:63>
|   | |-TextComment 0x563ea8285a40 <line:372:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x563ea8285a60 <line:373:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x563ea8285ab0 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x563ea8285ad0 <line:374:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea8285b60 <line:376:3, col:48>
|   | `-TextComment 0x563ea8285b30 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x563ea8285bb0 <line:378:3>
|   | `-TextComment 0x563ea8285b80 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8285bd0 <col:4, line:379:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8285c80 <line:378:15, line:379:3>
|   |   |-TextComment 0x563ea8285c30 <line:378:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x563ea8285c50 <line:379:3> Text=" "
|   |-ParamCommandComment 0x563ea8285ca0 <col:4, line:380:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x563ea8285d50 <line:379:15, line:380:3>
|   |   |-TextComment 0x563ea8285d00 <line:379:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x563ea8285d20 <line:380:3> Text=" "
|   `-ParamCommandComment 0x563ea8285d70 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x563ea8285e00 <col:15, col:66>
|       `-TextComment 0x563ea8285dd0 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x563ea817e9b8 prev 0x563ea817e730 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:254:1 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x563ea817e7f8 <line:256:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x563ea817e870 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x563ea817e920 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x563ea817f078 <col:31, line:127:42>
|   |-IfStmt 0x563ea817eee0 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x563ea817ebb8 <<scratch space>:258:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x563ea817ead8 <<scratch space>:258:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x563ea817eac0 <<scratch space>:258:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x563ea817ea70 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x563ea817eb08 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x563ea817ea98 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x563ea817e7f8 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x563ea817eba0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x563ea817eb80 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x563ea817eb58 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x563ea817eb20 <col:23> 'int' 0
|   | |-CompoundStmt 0x563ea817ed10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x563ea817ecc0 <<scratch space>:260:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x563ea817eca8 <<scratch space>:260:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x563ea817ebe0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x563ea8179c20 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x563ea817ecf8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x563ea817ec08 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x563ea817e7f8 'list' 'sys_sflist_t *'
|   | |   `-CStyleCastExpr 0x563ea817ec80 <line:120:6, col:31> 'sys_sfnode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x563ea817ec68 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x563ea817ec30 <col:31> 'void *' lvalue ParmVar 0x563ea817e870 'head' 'void *'
|   | `-CompoundStmt 0x563ea817eec8 <line:121:9, line:125:2>
|   |   `-CallExpr 0x563ea817ee90 <<scratch space>:264:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x563ea817ee78 <<scratch space>:264:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ea817ed28 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x563ea8178670 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |     |-CallExpr 0x563ea817edb8 <line:266:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_sfnode_t *'
|   |     | |-ImplicitCastExpr 0x563ea817eda0 <<scratch space>:266:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x563ea817ed50 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | `-ImplicitCastExpr 0x563ea817ede8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_sflist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563ea817ed78 <col:34> 'sys_sflist_t *' lvalue ParmVar 0x563ea817e7f8 'list' 'sys_sflist_t *'
|   |     `-CStyleCastExpr 0x563ea817ee50 <line:124:4, col:29> 'sys_sfnode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x563ea817ee38 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x563ea817ee00 <col:29> 'void *' lvalue ParmVar 0x563ea817e870 'head' 'void *'
|   `-CallExpr 0x563ea817eff8 <<scratch space>:270:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x563ea817efe0 <<scratch space>:270:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea817ef18 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x563ea8179ed8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x563ea817f030 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_sflist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ea817ef40 <col:29> 'sys_sflist_t *' lvalue ParmVar 0x563ea817e7f8 'list' 'sys_sflist_t *'
|     `-CStyleCastExpr 0x563ea817efb8 <line:127:10, col:35> 'sys_sfnode_t *' <BitCast>
|       `-ImplicitCastExpr 0x563ea817efa0 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea817ef68 <col:35> 'void *' lvalue ParmVar 0x563ea817e920 'tail' 'void *'
|-FunctionDecl 0x563ea817f230 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:396:1, line:397:37> line:396:20 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x563ea817f0a8 <col:44, col:58> col:58 list 'sys_sflist_t *'
| |-ParmVarDecl 0x563ea817f118 <line:397:9, col:23> col:23 list_to_append 'sys_sflist_t *'
| `-FullComment 0x563ea8286210 <line:388:3, line:394:57>
|   |-ParagraphComment 0x563ea8285f00 <line:388:3>
|   | `-TextComment 0x563ea8285ed0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8285f20 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x563ea8285f80 <col:10, col:66>
|   |   `-TextComment 0x563ea8285f50 <col:10, col:66> Text=" merge two sflists, appending the second one to the first"
|   |-ParagraphComment 0x563ea8285ff0 <line:390:3, line:391:63>
|   | |-TextComment 0x563ea8285fa0 <line:390:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x563ea8285fc0 <line:391:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea8286040 <line:393:3>
|   | `-TextComment 0x563ea8286010 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8286060 <col:4, line:394:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8286110 <line:393:15, line:394:3>
|   |   |-TextComment 0x563ea82860c0 <line:393:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x563ea82860e0 <line:394:3> Text=" "
|   `-ParamCommandComment 0x563ea8286130 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x563ea82861c0 <col:25, col:57>
|       `-TextComment 0x563ea8286190 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x563ea817f3f0 prev 0x563ea817f230 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:275:1 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x563ea817f2f0 <line:277:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x563ea817f360 <<scratch space>:279:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_sflist_t *'
| `-CompoundStmt 0x563ea816d2a8 <line:135:2, line:141:2>
|   |-DeclStmt 0x563ea817f598 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x563ea817f4b0 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_sfnode_t *'
|   | `-VarDecl 0x563ea817f520 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_sfnode_t *'
|   |-BinaryOperator 0x563ea817f688 <line:137:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x563ea817f5b0 <col:3> 'sys_sfnode_t *' lvalue Var 0x563ea817f4b0 'head' 'sys_sfnode_t *'
|   | `-CallExpr 0x563ea817f640 <<scratch space>:2:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x563ea817f628 <<scratch space>:2:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x563ea817f5d8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x563ea817f670 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x563ea817f600 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x563ea817f360 'list_to_append' 'sys_sflist_t *'
|   |-BinaryOperator 0x563ea817f788 <line:138:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x563ea817f6b0 <col:3> 'sys_sfnode_t *' lvalue Var 0x563ea817f520 'tail' 'sys_sfnode_t *'
|   | `-CallExpr 0x563ea817f740 <<scratch space>:4:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x563ea817f728 <<scratch space>:4:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x563ea817f6d8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x563ea817f770 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x563ea817f700 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x563ea817f360 'list_to_append' 'sys_sflist_t *'
|   |-CallExpr 0x563ea817f8c0 <<scratch space>:6:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x563ea817f8a8 <<scratch space>:6:1> 'void (*)(sys_sflist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x563ea817f7b0 <col:1> 'void (sys_sflist_t *, void *, void *)' Function 0x563ea817e9b8 'sys_sflist_append_list' 'void (sys_sflist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x563ea817f900 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x563ea817f7d8 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x563ea817f2f0 'list' 'sys_sflist_t *'
|   | |-ImplicitCastExpr 0x563ea816d128 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x563ea816d110 <col:41> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x563ea817f800 <col:41> 'sys_sfnode_t *' lvalue Var 0x563ea817f4b0 'head' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x563ea816d158 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x563ea816d140 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x563ea817f828 <col:47> 'sys_sfnode_t *' lvalue Var 0x563ea817f520 'tail' 'sys_sfnode_t *'
|   `-CallExpr 0x563ea816d230 <<scratch space>:8:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x563ea816d218 <<scratch space>:8:1> 'void (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea816d170 <col:1> 'void (sys_sflist_t *)' Function 0x563ea8177c60 'sys_sflist_init' 'void (sys_sflist_t *)'
|     `-ImplicitCastExpr 0x563ea816d260 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_sflist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea816d198 <col:28> 'sys_sflist_t *' lvalue ParmVar 0x563ea817f360 'list_to_append' 'sys_sflist_t *'
|-FunctionDecl 0x563ea816d500 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:410:1, line:412:28> line:410:20 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea816d2f0 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x563ea816d360 <line:411:10, col:24> col:24 prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x563ea816d3d0 <line:412:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x563ea8286680 <line:402:3, line:408:46>
|   |-ParagraphComment 0x563ea82862b0 <line:402:3>
|   | `-TextComment 0x563ea8286280 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82862d0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x563ea8286330 <col:10, col:41>
|   |   `-TextComment 0x563ea8286300 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x563ea8286380 <line:404:3, col:63>
|   | `-TextComment 0x563ea8286350 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea82863d0 <line:406:3>
|   | `-TextComment 0x563ea82863a0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82863f0 <col:4, line:407:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea82864a0 <line:406:15, line:407:3>
|   |   |-TextComment 0x563ea8286450 <line:406:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x563ea8286470 <line:407:3> Text=" "
|   |-ParamCommandComment 0x563ea82864c0 <col:4, line:408:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x563ea8286570 <line:407:15, line:408:3>
|   |   |-TextComment 0x563ea8286520 <line:407:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x563ea8286540 <line:408:3> Text=" "
|   `-ParamCommandComment 0x563ea8286590 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x563ea8286620 <col:15, col:46>
|       `-TextComment 0x563ea82865f0 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x563ea816d740 prev 0x563ea816d500 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:10:1 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea816d5c8 <line:12:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x563ea816d638 <<scratch space>:14:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x563ea816d6a8 <<scratch space>:16:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x563ea816dfa8 <line:148:2, line:158:2>
|   `-IfStmt 0x563ea816df40 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x563ea816d8d0 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x563ea816d8a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_sfnode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x563ea816d7f8 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x563ea816d638 'prev' 'sys_sfnode_t *'
|     | `-ImplicitCastExpr 0x563ea816d8b8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x563ea816d880 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x563ea816d858 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x563ea816d820 <col:23> 'int' 0
|     |-CompoundStmt 0x563ea816d9f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x563ea816d988 <<scratch space>:18:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x563ea816d970 <<scratch space>:18:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x563ea816d8f8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x563ea817d230 'sys_sflist_prepend' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x563ea816d9c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x563ea816d920 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x563ea816d5c8 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x563ea816d9d8 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x563ea816d948 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x563ea816d6a8 'node' 'sys_sfnode_t *'
|     `-IfStmt 0x563ea816df08 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x563ea816db50 <<scratch space>:20:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x563ea816da70 <<scratch space>:20:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x563ea816da58 <<scratch space>:20:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x563ea816da08 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x563ea81780b0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | | `-ImplicitCastExpr 0x563ea816daa0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_sfnode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x563ea816da30 <col:42> 'sys_sfnode_t *' lvalue ParmVar 0x563ea816d638 'prev' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x563ea816db38 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x563ea816db18 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x563ea816daf0 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x563ea816dab8 <col:23> 'int' 0
|       |-CompoundStmt 0x563ea816dc70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x563ea816dc08 <<scratch space>:22:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x563ea816dbf0 <<scratch space>:22:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x563ea816db78 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x563ea817dc70 'sys_sflist_append' 'void (sys_sflist_t *, sys_sfnode_t *)'
|       |   |-ImplicitCastExpr 0x563ea816dc40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_sflist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x563ea816dba0 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x563ea816d5c8 'list' 'sys_sflist_t *'
|       |   `-ImplicitCastExpr 0x563ea816dc58 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x563ea816dbc8 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x563ea816d6a8 'node' 'sys_sfnode_t *'
|       `-CompoundStmt 0x563ea816dee8 <line:153:10, line:157:3>
|         |-CallExpr 0x563ea816dda0 <<scratch space>:24:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x563ea816dd88 <<scratch space>:24:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x563ea816dc88 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x563ea8178670 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|         | |-ImplicitCastExpr 0x563ea816ddd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_sfnode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x563ea816dcb0 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x563ea816d6a8 'node' 'sys_sfnode_t *'
|         | `-CallExpr 0x563ea816dd40 <<scratch space>:26:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_sfnode_t *'
|         |   |-ImplicitCastExpr 0x563ea816dd28 <<scratch space>:26:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x563ea816dcd8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x563ea81780b0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|         |   `-ImplicitCastExpr 0x563ea816dd70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_sfnode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x563ea816dd00 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x563ea816d638 'prev' 'sys_sfnode_t *'
|         `-CallExpr 0x563ea816de80 <<scratch space>:28:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x563ea816de68 <<scratch space>:28:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x563ea816ddf0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x563ea8178670 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|           |-ImplicitCastExpr 0x563ea816deb8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_sfnode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x563ea816de18 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x563ea816d638 'prev' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x563ea816ded0 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x563ea816de40 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x563ea816d6a8 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x563ea816e058 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:426:1, col:72> col:29 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x563ea816dfd0 <col:54, col:68> col:68 list 'sys_sflist_t *'
| `-FullComment 0x563ea8286a40 <line:417:3, line:424:50>
|   |-ParagraphComment 0x563ea8286720 <line:417:3>
|   | `-TextComment 0x563ea82866f0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8286740 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x563ea82867a0 <col:10, col:59>
|   |   `-TextComment 0x563ea8286770 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x563ea8286810 <line:419:3, line:420:63>
|   | |-TextComment 0x563ea82867c0 <line:419:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x563ea82867e0 <line:420:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea8286860 <line:422:3>
|   | `-TextComment 0x563ea8286830 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8286880 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8286910 <col:15, col:46>
|   |   `-TextComment 0x563ea82868e0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x563ea8286960 <line:424:3>
|   | `-TextComment 0x563ea8286930 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8286980 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x563ea82869e0 <col:11, col:50>
|       `-TextComment 0x563ea82869b0 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x563ea81859a8 prev 0x563ea816e058 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:32:1 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x563ea8185920 <line:34:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_sflist_t *'
| `-CompoundStmt 0x563ea8186048 <line:163:2, line:175:2>
|   |-DeclStmt 0x563ea8185b70 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x563ea8185a60 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_sfnode_t *' cinit
|   |   `-CallExpr 0x563ea8185b28 <<scratch space>:38:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_sfnode_t *'
|   |     |-ImplicitCastExpr 0x563ea8185b10 <<scratch space>:38:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ea8185ac0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     `-ImplicitCastExpr 0x563ea8185b58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_sflist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x563ea8185ae8 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x563ea8185920 'list' 'sys_sflist_t *'
|   |-CallExpr 0x563ea8185ca0 <<scratch space>:40:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x563ea8185c88 <<scratch space>:40:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x563ea8185b88 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x563ea8179c20 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x563ea8185cd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x563ea8185bb0 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x563ea8185920 'list' 'sys_sflist_t *'
|   | `-CallExpr 0x563ea8185c40 <<scratch space>:42:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x563ea8185c28 <<scratch space>:42:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x563ea8185bd8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x563ea81780b0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   `-ImplicitCastExpr 0x563ea8185c70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x563ea8185c00 <col:33> 'sys_sfnode_t *' lvalue Var 0x563ea8185a60 'node' 'sys_sfnode_t *'
|   |-IfStmt 0x563ea8185f88 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x563ea8185de0 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x563ea8185d58 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x563ea8185d40 <<scratch space>:44:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x563ea8185cf0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x563ea8185d88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x563ea8185d18 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x563ea8185920 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x563ea8185dc8 <col:46> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x563ea8185da0 <col:46> 'sys_sfnode_t *' lvalue Var 0x563ea8185a60 'node' 'sys_sfnode_t *'
|   | |-CompoundStmt 0x563ea8185f70 <col:52, line:172:3>
|   | | `-CallExpr 0x563ea8185f20 <<scratch space>:46:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x563ea8185f08 <<scratch space>:46:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x563ea8185e08 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x563ea8179ed8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x563ea8185f58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x563ea8185e30 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x563ea8185920 'list' 'sys_sflist_t *'
|   | |   `-CallExpr 0x563ea8185ec0 <<scratch space>:48:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_sfnode_t *'
|   | |     |-ImplicitCastExpr 0x563ea8185ea8 <<scratch space>:48:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x563ea8185e58 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |     `-ImplicitCastExpr 0x563ea8185ef0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_sflist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x563ea8185e80 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x563ea8185920 'list' 'sys_sflist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x563ea8186000 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x563ea8185fe8 <col:10> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea8185fc0 <col:10> 'sys_sfnode_t *' lvalue Var 0x563ea8185a60 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x563ea8186110 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:439:1, col:62> col:29 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x563ea8186088 <col:44, col:58> col:58 list 'sys_sflist_t *'
| `-FullComment 0x563ea8286de0 <line:431:3, line:437:69>
|   |-ParagraphComment 0x563ea8286ae0 <line:431:3>
|   | `-TextComment 0x563ea8286ab0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8286b00 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x563ea8286b60 <col:10, col:59>
|   |   `-TextComment 0x563ea8286b30 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x563ea8286bb0 <line:433:3, col:63>
|   | `-TextComment 0x563ea8286b80 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea8286c00 <line:435:3>
|   | `-TextComment 0x563ea8286bd0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8286c20 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8286cb0 <col:15, col:46>
|   |   `-TextComment 0x563ea8286c80 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x563ea8286d00 <line:437:3>
|   | `-TextComment 0x563ea8286cd0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8286d20 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x563ea8286d80 <col:11, col:69>
|       `-TextComment 0x563ea8286d50 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x563ea8186250 prev 0x563ea8186110 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:52:1 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x563ea81861c8 <line:54:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_sflist_t *'
| `-CompoundStmt 0x563ea81865d8 <line:180:2, line:183:2>
|   `-ReturnStmt 0x563ea8186598 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x563ea8186568 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x563ea8186538 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x563ea81863c0 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x563ea81863a8 <<scratch space>:56:1> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x563ea81862f8 <col:1> 'bool (sys_sflist_t *)' Function 0x563ea817b350 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|       |   `-ImplicitCastExpr 0x563ea81863f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_sflist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x563ea8186320 <col:39> 'sys_sflist_t *' lvalue ParmVar 0x563ea81861c8 'list' 'sys_sflist_t *'
|       |-ImplicitCastExpr 0x563ea8186550 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       | `-ParenExpr 0x563ea8186468 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x563ea8186440 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x563ea8186408 <col:23> 'int' 0
|       `-CallExpr 0x563ea81864f0 <<scratch space>:58:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|         |-ImplicitCastExpr 0x563ea81864d8 <<scratch space>:58:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x563ea8186488 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea81859a8 'sys_sflist_get_not_empty' 'sys_sfnode_t *(sys_sflist_t *)'
|         `-ImplicitCastExpr 0x563ea8186520 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_sflist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x563ea81864b0 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x563ea81861c8 'list' 'sys_sflist_t *'
|-FunctionDecl 0x563ea8186778 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:453:1, line:455:28> line:453:20 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea8186600 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x563ea8186670 <line:454:10, col:24> col:24 prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x563ea81866e0 <line:455:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x563ea8287280 <line:444:3, line:451:46>
|   |-ParagraphComment 0x563ea8286e80 <line:444:3>
|   | `-TextComment 0x563ea8286e50 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8286ea0 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x563ea8286f00 <col:10, col:23>
|   |   `-TextComment 0x563ea8286ed0 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x563ea8286f50 <line:446:3, col:63>
|   | `-TextComment 0x563ea8286f20 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea8286fa0 <line:448:3>
|   | `-TextComment 0x563ea8286f70 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8286fc0 <col:4, line:449:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8287070 <line:448:15, line:449:3>
|   |   |-TextComment 0x563ea8287020 <line:448:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x563ea8287040 <line:449:3> Text=" "
|   |-ParamCommandComment 0x563ea8287090 <col:4, line:451:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x563ea8287170 <line:449:20, line:451:3>
|   |   |-TextComment 0x563ea82870f0 <line:449:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x563ea8287110 <line:450:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x563ea8287130 <line:451:3> Text=" "
|   `-ParamCommandComment 0x563ea8287190 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x563ea8287220 <col:15, col:46>
|       `-TextComment 0x563ea82871f0 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x563ea81869c8 prev 0x563ea8186778 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:60:1 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea8186840 <line:62:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x563ea81868b0 <<scratch space>:64:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x563ea8186930 <<scratch space>:66:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x563ea8187578 <line:190:2, line:212:2>
|   |-IfStmt 0x563ea81873c0 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x563ea8186b58 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x563ea8186b28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x563ea8186a80 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x563ea81868b0 'prev_node' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x563ea8186b40 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x563ea8186b08 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x563ea8186ae0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x563ea8186aa8 <col:23> 'int' 0
|   | |-CompoundStmt 0x563ea8186fb8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x563ea8186c98 <<scratch space>:68:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x563ea8186c80 <<scratch space>:68:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x563ea8186b80 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x563ea8179c20 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | | | |-ImplicitCastExpr 0x563ea8186cd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_sflist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x563ea8186ba8 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x563ea8186840 'list' 'sys_sflist_t *'
|   | | | `-CallExpr 0x563ea8186c38 <<scratch space>:70:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_sfnode_t *'
|   | | |   |-ImplicitCastExpr 0x563ea8186c20 <<scratch space>:70:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x563ea8186bd0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x563ea81780b0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | | |   `-ImplicitCastExpr 0x563ea8186c68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_sfnode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x563ea8186bf8 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x563ea8186930 'node' 'sys_sfnode_t *'
|   | | `-IfStmt 0x563ea8186f80 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x563ea8186dd8 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x563ea8186d50 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_sfnode_t *'
|   | |   | | |-ImplicitCastExpr 0x563ea8186d38 <<scratch space>:72:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x563ea8186ce8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   | | `-ImplicitCastExpr 0x563ea8186d80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_sflist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x563ea8186d10 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x563ea8186840 'list' 'sys_sflist_t *'
|   | |   | `-ImplicitCastExpr 0x563ea8186dc0 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x563ea8186d98 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x563ea8186930 'node' 'sys_sfnode_t *'
|   | |   |-CompoundStmt 0x563ea8186f68 <col:53, line:199:4>
|   | |   | `-CallExpr 0x563ea8186f18 <<scratch space>:74:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x563ea8186f00 <<scratch space>:74:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x563ea8186e00 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x563ea8179ed8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |   |-ImplicitCastExpr 0x563ea8186f50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_sflist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x563ea8186e28 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x563ea8186840 'list' 'sys_sflist_t *'
|   | |   |   `-CallExpr 0x563ea8186eb8 <<scratch space>:76:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_sfnode_t *'
|   | |   |     |-ImplicitCastExpr 0x563ea8186ea0 <<scratch space>:76:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x563ea8186e50 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   |     `-ImplicitCastExpr 0x563ea8186ee8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_sflist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x563ea8186e78 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x563ea8186840 'list' 'sys_sflist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x563ea81873a0 <line:200:10, line:209:3>
|   |   |-CallExpr 0x563ea81870f0 <<scratch space>:78:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x563ea81870d8 <<scratch space>:78:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x563ea8186fd8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x563ea8178670 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |   | |-ImplicitCastExpr 0x563ea8187128 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x563ea8187000 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x563ea81868b0 'prev_node' 'sys_sfnode_t *'
|   |   | `-CallExpr 0x563ea8187090 <<scratch space>:80:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_sfnode_t *'
|   |   |   |-ImplicitCastExpr 0x563ea8187078 <<scratch space>:80:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x563ea8187028 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x563ea81780b0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   |   `-ImplicitCastExpr 0x563ea81870c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_sfnode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x563ea8187050 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x563ea8186930 'node' 'sys_sfnode_t *'
|   |   `-IfStmt 0x563ea8187368 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x563ea8187230 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x563ea81871a8 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_sfnode_t *'
|   |     | | |-ImplicitCastExpr 0x563ea8187190 <<scratch space>:82:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x563ea8187140 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | | `-ImplicitCastExpr 0x563ea81871d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_sflist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x563ea8187168 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x563ea8186840 'list' 'sys_sflist_t *'
|   |     | `-ImplicitCastExpr 0x563ea8187218 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563ea81871f0 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x563ea8186930 'node' 'sys_sfnode_t *'
|   |     |-CompoundStmt 0x563ea8187350 <col:53, line:208:4>
|   |     | `-CallExpr 0x563ea81872e8 <<scratch space>:84:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x563ea81872d0 <<scratch space>:84:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x563ea8187258 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x563ea8179ed8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   |     |   |-ImplicitCastExpr 0x563ea8187320 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_sflist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x563ea8187280 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x563ea8186840 'list' 'sys_sflist_t *'
|   |     |   `-ImplicitCastExpr 0x563ea8187338 <line:207:13> 'sys_sfnode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x563ea81872a8 <col:13> 'sys_sfnode_t *' lvalue ParmVar 0x563ea81868b0 'prev_node' 'sys_sfnode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x563ea81874e0 <<scratch space>:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x563ea81874c8 <<scratch space>:86:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea81873f8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x563ea8178670 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x563ea8187518 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_sfnode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ea8187420 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x563ea8186930 'node' 'sys_sfnode_t *'
|     `-ImplicitCastExpr 0x563ea8187530 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       `-ParenExpr 0x563ea81874a8 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x563ea8187480 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x563ea8187448 <col:23> 'int' 0
|-FunctionDecl 0x563ea8187730 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:469:1, line:470:30> line:469:20 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea81875a8 <col:47, col:61> col:61 list 'sys_sflist_t *'
| |-ParmVarDecl 0x563ea8187618 <line:470:12, col:26> col:26 node 'sys_sfnode_t *'
| `-FullComment 0x563ea8287700 <line:460:3, line:467:35>
|   |-ParagraphComment 0x563ea8287320 <line:460:3>
|   | `-TextComment 0x563ea82872f0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8287340 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x563ea82873a0 <col:10, col:44>
|   |   `-TextComment 0x563ea8287370 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x563ea8287400 <line:462:3, col:63>
|   | `-TextComment 0x563ea82873d0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x563ea8287450 <line:464:3>
|   | `-TextComment 0x563ea8287420 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8287470 <col:4, line:465:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x563ea8287520 <line:464:15, line:465:3>
|   |   |-TextComment 0x563ea82874d0 <line:464:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x563ea82874f0 <line:465:3> Text=" "
|   |-ParamCommandComment 0x563ea8287540 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x563ea82875d0 <col:15, col:60>
|   |   `-TextComment 0x563ea82875a0 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x563ea8287620 <line:467:3>
|   | `-TextComment 0x563ea82875f0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8287640 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea82876a0 <col:11, col:35>
|       `-TextComment 0x563ea8287670 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x563ea8187940 prev 0x563ea8187730 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:88:1 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x563ea81877f0 <line:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x563ea8187860 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x563ea81882b8 <line:218:2, line:233:2>
|   |-DeclStmt 0x563ea8187af8 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x563ea8187a00 <<scratch space>:94:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_sfnode_t *' cinit
|   |   `-ImplicitCastExpr 0x563ea8187ae0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |     `-ParenExpr 0x563ea8187ac0 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x563ea8187a98 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x563ea8187a60 <col:23> 'int' 0
|   |-DeclStmt 0x563ea8187b80 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x563ea8187b20 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_sfnode_t *'
|   |-ForStmt 0x563ea8188230 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x563ea8187c70 <line:222:42, line:15:47> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x563ea8187b98 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x563ea8187b20 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x563ea8187c28 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x563ea8187c10 <<scratch space>:98:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x563ea8187bc0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   `-ImplicitCastExpr 0x563ea8187c58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_sflist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x563ea8187be8 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x563ea81877f0 'list' 'sys_sflist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x563ea8187d70 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x563ea8187d40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x563ea8187c98 <col:42> 'sys_sfnode_t *' lvalue Var 0x563ea8187b20 'test' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x563ea8187d58 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x563ea8187d20 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x563ea8187cf8 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x563ea8187cc0 <col:23> 'int' 0
|   | |-BinaryOperator 0x563ea8187e70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x563ea8187d98 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x563ea8187b20 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x563ea8187e28 <<scratch space>:100:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x563ea8187e10 <<scratch space>:100:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x563ea8187dc0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x563ea817cbe8 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | |   `-ImplicitCastExpr 0x563ea8187e58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x563ea8187de8 <col:42> 'sys_sfnode_t *' lvalue Var 0x563ea8187b20 'test' 'sys_sfnode_t *'
|   | `-CompoundStmt 0x563ea8188210 <col:48, line:230:3>
|   |   |-IfStmt 0x563ea8188148 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x563ea8187f18 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x563ea8187ee8 <col:8> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x563ea8187e98 <col:8> 'sys_sfnode_t *' lvalue Var 0x563ea8187b20 'test' 'sys_sfnode_t *'
|   |   | | `-ImplicitCastExpr 0x563ea8187f00 <col:16> 'sys_sfnode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x563ea8187ec0 <col:16> 'sys_sfnode_t *' lvalue ParmVar 0x563ea8187860 'node' 'sys_sfnode_t *'
|   |   | |-CompoundStmt 0x563ea8188128 <col:22, line:227:4>
|   |   | | |-CallExpr 0x563ea8188050 <<scratch space>:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x563ea8188038 <<scratch space>:102:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x563ea8187f40 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' Function 0x563ea81869c8 'sys_sflist_remove' 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)'
|   |   | | | |-ImplicitCastExpr 0x563ea8188090 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_sflist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x563ea8187f68 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x563ea81877f0 'list' 'sys_sflist_t *'
|   |   | | | |-ImplicitCastExpr 0x563ea81880a8 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x563ea8187f90 <col:38> 'sys_sfnode_t *' lvalue Var 0x563ea8187a00 'prev' 'sys_sfnode_t *'
|   |   | | | `-ImplicitCastExpr 0x563ea81880c0 <line:225:11> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x563ea8187fb8 <col:11> 'sys_sfnode_t *' lvalue ParmVar 0x563ea8187860 'node' 'sys_sfnode_t *'
|   |   | | `-ReturnStmt 0x563ea8188110 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x563ea81880f8 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x563ea81880d8 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x563ea81881e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_sfnode_t *' '='
|   |     |-DeclRefExpr 0x563ea8188180 <col:4> 'sys_sfnode_t *' lvalue Var 0x563ea8187a00 'prev' 'sys_sfnode_t *'
|   |     `-ImplicitCastExpr 0x563ea81881d0 <col:11> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x563ea81881a8 <col:11> 'sys_sfnode_t *' lvalue Var 0x563ea8187b20 'test' 'sys_sfnode_t *'
|   `-ReturnStmt 0x563ea81882a0 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x563ea8188288 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x563ea8188268 <col:16> 'int' 0
|-RecordDecl 0x563ea81882e8 </vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:18:1, line:24:1> line:18:8 struct sys_mem_pool_lvl definition
| |-RecordDecl 0x563ea8188390 <line:19:2, line:22:2> line:19:2 union definition
| | |-FieldDecl 0x563ea81884a8 <line:20:3, col:10> col:10 bits_p 'u32_t *'
| | `-FieldDecl 0x563ea8188618 <line:21:3, col:31> col:9 bits 'u32_t [2]'
| |-FieldDecl 0x563ea81886b0 <line:19:2> col:2 implicit 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| |-IndirectFieldDecl 0x563ea8188708 <line:20:10> col:10 implicit bits_p 'u32_t *'
| | |-Field 0x563ea81886b0 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x563ea81884a8 'bits_p' 'u32_t *'
| |-IndirectFieldDecl 0x563ea8188758 <line:21:9> col:9 implicit bits 'u32_t [2]'
| | |-Field 0x563ea81886b0 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x563ea8188618 'bits' 'u32_t [2]'
| `-FieldDecl 0x563ea81887a8 <line:23:2, col:14> col:14 free_list 'sys_dlist_t':'struct _dnode'
|-RecordDecl 0x563ea8188840 <line:29:1, line:37:1> line:29:8 struct sys_mem_pool_base definition
| |-FieldDecl 0x563ea8189720 <line:30:2, col:8> col:8 buf 'void *'
| |-FieldDecl 0x563ea8189778 <line:31:2, col:9> col:9 max_sz 'size_t':'unsigned long'
| |-FieldDecl 0x563ea81897f0 <line:32:2, col:8> col:8 n_max 'u16_t':'unsigned short'
| |-FieldDecl 0x563ea8189848 <line:33:2, col:7> col:7 n_levels 'u8_t':'unsigned char'
| |-FieldDecl 0x563ea81898c0 <line:34:2, col:7> col:7 max_inline_level 's8_t':'signed char'
| |-FieldDecl 0x563ea81899c0 <line:35:2, col:27> col:27 levels 'struct sys_mem_pool_lvl *'
| `-FieldDecl 0x563ea8189a18 <line:36:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x563ea8189c10 <line:98:1, col:58> col:6 z_sys_mem_pool_base_init 'void (struct sys_mem_pool_base *)'
| `-ParmVarDecl 0x563ea8189b10 <col:31, col:57> col:57 p 'struct sys_mem_pool_base *'
|-FunctionDecl 0x563ea818a038 <line:100:1, line:101:55> line:100:5 z_sys_mem_pool_block_alloc 'int (struct sys_mem_pool_base *, size_t, u32_t *, u32_t *, void **)'
| |-ParmVarDecl 0x563ea8189ce0 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x563ea8189d50 <col:61, col:68> col:68 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea8189dc0 <line:101:10, col:17> col:17 level_p 'u32_t *'
| |-ParmVarDecl 0x563ea8189e30 <col:26, col:33> col:33 block_p 'u32_t *'
| `-ParmVarDecl 0x563ea8189ed0 <col:42, col:49> col:49 data_p 'void **'
|-FunctionDecl 0x563ea818a340 <line:103:1, line:104:21> line:103:6 z_sys_mem_pool_block_free 'void (struct sys_mem_pool_base *, u32_t, u32_t)'
| |-ParmVarDecl 0x563ea818a128 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x563ea818a198 <col:61, col:67> col:67 level 'u32_t':'unsigned int'
| `-ParmVarDecl 0x563ea818a208 <line:104:10, col:16> col:16 block 'u32_t':'unsigned int'
|-RecordDecl 0x563ea818a3f8 </vagrant/ext/zephyros/zephyr/include/kernel_structs.h:83:1, line:96:1> line:83:8 struct _ready_q definition
| `-FieldDecl 0x563ea818a4c8 <line:86:2, col:19> col:19 cache 'struct k_thread *'
|-TypedefDecl 0x563ea818a560 <line:98:1, col:25> col:25 _ready_q_t 'struct _ready_q':'struct _ready_q'
| `-ElaboratedType 0x563ea818a510 'struct _ready_q' sugar
|   `-RecordType 0x563ea818a480 'struct _ready_q'
|     `-Record 0x563ea818a3f8 '_ready_q'
|-RecordDecl 0x563ea818a5b8 <line:100:1, line:134:1> line:100:8 struct _cpu definition
| |-FieldDecl 0x563ea818a670 <line:102:2, col:8> col:8 nested 'u32_t':'unsigned int'
| |-FieldDecl 0x563ea818a6d0 <line:105:2, col:8> col:8 irq_stack 'char *'
| |-FieldDecl 0x563ea8192fb8 <line:108:2, col:19> col:19 current 'struct k_thread *'
| |-FieldDecl 0x563ea8193028 <line:111:2, col:19> col:19 idle_thread 'struct k_thread *'
| `-FieldDecl 0x563ea8193080 <line:128:2, col:7> col:7 id 'u8_t':'unsigned char'
|-TypedefDecl 0x563ea8193120 <line:136:1, col:21> col:21 _cpu_t 'struct _cpu':'struct _cpu'
| `-ElaboratedType 0x563ea81930d0 'struct _cpu' sugar
|   `-RecordType 0x563ea818a640 'struct _cpu'
|     `-Record 0x563ea818a5b8 '_cpu'
|-RecordDecl 0x563ea8193178 <line:138:1, line:191:1> line:138:8 struct z_kernel definition
| |-RecordDecl 0x563ea8193220 <line:143:2, line:157:2> line:143:2 invalid union definition
| | |-FieldDecl 0x563ea8193318 <line:144:3, col:15> col:15 invalid cpus 'struct _cpu':'struct _cpu'
| | |-RecordDecl 0x563ea8193360 <line:146:3, line:155:3> line:146:3 struct definition
| | | |-FieldDecl 0x563ea8193420 <line:148:4, col:10> col:10 nested 'u32_t':'unsigned int'
| | | |-FieldDecl 0x563ea8193480 <line:151:4, col:10> col:10 irq_stack 'char *'
| | | `-FieldDecl 0x563ea81934f0 <line:154:4, col:21> col:21 current 'struct k_thread *'
| | |-FieldDecl 0x563ea8193590 <line:146:3> col:3 implicit 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | |-IndirectFieldDecl 0x563ea81935e8 <line:148:10> col:10 implicit nested 'u32_t':'unsigned int'
| | | |-Field 0x563ea8193590 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x563ea8193420 'nested' 'u32_t':'unsigned int'
| | |-IndirectFieldDecl 0x563ea8193638 <line:151:10> col:10 implicit irq_stack 'char *'
| | | |-Field 0x563ea8193590 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x563ea8193480 'irq_stack' 'char *'
| | `-IndirectFieldDecl 0x563ea8193688 <line:154:21> col:21 implicit current 'struct k_thread *'
| |   |-Field 0x563ea8193590 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| |   `-Field 0x563ea81934f0 'current' 'struct k_thread *'
| `-FieldDecl 0x563ea8193750 <line:172:2, col:18> col:18 ready_q 'struct _ready_q':'struct _ready_q'
|-TypedefDecl 0x563ea8193830 <line:193:1, col:25> col:25 _kernel_t 'struct z_kernel':'struct z_kernel'
| `-ElaboratedType 0x563ea81937e0 'struct z_kernel' sugar
|   `-RecordType 0x563ea8193200 'struct z_kernel'
|     `-Record 0x563ea8193178 'z_kernel'
|-VarDecl 0x563ea81938a8 <line:195:1, col:24> col:24 _kernel 'struct z_kernel':'struct z_kernel' extern
|-FunctionDecl 0x563ea8193a60 </vagrant/ext/zephyros/zephyr/include/kernel_version.h:47:1, col:41> col:14 sys_kernel_version_get 'u32_t (void)' extern
| `-FullComment 0x563ea82879b0 <line:40:3, line:45:25>
|   |-ParagraphComment 0x563ea82877a0 <line:40:3>
|   | `-TextComment 0x563ea8287770 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82877c0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x563ea8287820 <col:10, col:56>
|   |   `-TextComment 0x563ea82877f0 <col:10, col:56> Text=" Return the kernel version of the present build"
|   |-ParagraphComment 0x563ea8287890 <line:42:3, line:43:27>
|   | |-TextComment 0x563ea8287840 <line:42:3, col:76> Text=" The kernel version is a four-byte value, whose format is described in the"
|   | `-TextComment 0x563ea8287860 <line:43:3, col:27> Text=" file "kernel_version.h"."
|   |-ParagraphComment 0x563ea82878e0 <line:45:3>
|   | `-TextComment 0x563ea82878b0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8287900 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x563ea8287960 <col:11, col:25>
|       `-TextComment 0x563ea8287930 <col:11, col:25> Text=" kernel version"
|-FunctionDecl 0x563ea8193c48 </vagrant/ext/zephyros/zephyr/include/random/rand32.h:45:1, col:33> col:14 sys_rand32_get 'u32_t (void)' extern
| `-FullComment 0x563ea8287d00 <line:37:3, line:43:31>
|   |-ParagraphComment 0x563ea8287a50 <line:37:3>
|   | `-TextComment 0x563ea8287a20 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8287a70 <col:4, line:38:20> Name="brief"
|   | `-ParagraphComment 0x563ea8287af0 <line:37:10, line:38:20>
|   |   |-TextComment 0x563ea8287aa0 <line:37:10, col:63> Text=" Return a 32-bit random value that should pass general"
|   |   `-TextComment 0x563ea8287ac0 <line:38:3, col:20> Text=" randomness tests."
|   |-ParagraphComment 0x563ea8287b40 <line:40:3>
|   | `-TextComment 0x563ea8287b10 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8287b60 <col:4, line:41:23> Name="note"
|   | `-ParagraphComment 0x563ea8287be0 <line:40:9, line:41:23>
|   |   |-TextComment 0x563ea8287b90 <line:40:9, col:68> Text=" The random value returned is not a cryptographically secure"
|   |   `-TextComment 0x563ea8287bb0 <line:41:3, col:23> Text=" random number value."
|   |-ParagraphComment 0x563ea8287c30 <line:43:3>
|   | `-TextComment 0x563ea8287c00 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8287c50 <col:4, col:31> Name="return"
|     `-ParagraphComment 0x563ea8287cb0 <col:11, col:31>
|       `-TextComment 0x563ea8287c80 <col:11, col:31> Text=" 32-bit random value."
|-FunctionDecl 0x563ea8193eb0 <line:57:1, col:47> col:13 sys_rand_get 'void (void *, size_t)' extern
| |-ParmVarDecl 0x563ea8193d30 <col:26, col:32> col:32 dst 'void *'
| |-ParmVarDecl 0x563ea8193da0 <col:37, col:44> col:44 len 'size_t':'unsigned long'
| `-FullComment 0x563ea82881b0 <line:47:3, line:56:1>
|   |-ParagraphComment 0x563ea8287da0 <line:47:3>
|   | `-TextComment 0x563ea8287d70 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8287dc0 <col:4, line:48:33> Name="brief"
|   | `-ParagraphComment 0x563ea8287e40 <line:47:10, line:48:33>
|   |   |-TextComment 0x563ea8287df0 <line:47:10, col:73> Text=" Fill the destination buffer with random data values that should"
|   |   `-TextComment 0x563ea8287e10 <line:48:3, col:33> Text=" pass general randomness tests."
|   |-ParagraphComment 0x563ea8287e90 <line:50:3>
|   | `-TextComment 0x563ea8287e60 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8287eb0 <col:4, line:51:31> Name="note"
|   | `-ParagraphComment 0x563ea8287f30 <line:50:9, line:51:31>
|   |   |-TextComment 0x563ea8287ee0 <line:50:9, col:72> Text=" The random values returned are not considered cryptographically"
|   |   `-TextComment 0x563ea8287f00 <line:51:3, col:31> Text=" secure random number values."
|   |-ParagraphComment 0x563ea8287f80 <line:53:3>
|   | `-TextComment 0x563ea8287f50 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8287fa0 <col:4, line:54:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x563ea8288050 <line:53:20, line:54:3>
|   |   |-TextComment 0x563ea8288000 <line:53:20, col:64> Text=" destination buffer to fill with random data."
|   |   `-TextComment 0x563ea8288020 <line:54:3> Text=" "
|   |-ParamCommandComment 0x563ea8288070 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x563ea8288100 <col:14, col:45>
|   |   `-TextComment 0x563ea82880d0 <col:14, col:45> Text=" size of the destination buffer."
|   `-ParagraphComment 0x563ea8288150 <line:56:1>
|     `-TextComment 0x563ea8288120 <col:1> Text=" "
|-FunctionDecl 0x563ea8196fb8 <line:72:1, col:48> col:12 sys_csrand_get 'int (void *, size_t)' extern
| |-ParmVarDecl 0x563ea8196e28 <col:27, col:33> col:33 dst 'void *'
| |-ParmVarDecl 0x563ea8196e98 <col:38, col:45> col:45 len 'size_t':'unsigned long'
| `-FullComment 0x563ea8288740 <line:60:3, line:71:1>
|   |-ParagraphComment 0x563ea8288250 <line:60:3>
|   | `-TextComment 0x563ea8288220 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8288270 <col:4, line:61:22> Name="brief"
|   | `-ParagraphComment 0x563ea82882f0 <line:60:10, line:61:22>
|   |   |-TextComment 0x563ea82882a0 <line:60:10, col:67> Text=" Fill the destination buffer with cryptographically secure"
|   |   `-TextComment 0x563ea82882c0 <line:61:3, col:22> Text=" random data values."
|   |-ParagraphComment 0x563ea8288340 <line:63:3>
|   | `-TextComment 0x563ea8288310 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8288360 <col:4, line:64:42> Name="note"
|   | `-ParagraphComment 0x563ea82883e0 <line:63:9, line:64:42>
|   |   |-TextComment 0x563ea8288390 <line:63:9, col:75> Text=" If the random values requested do not need to be cryptographically"
|   |   `-TextComment 0x563ea82883b0 <line:64:3, col:42> Text=" secure then use sys_rand_get() instead."
|   |-ParagraphComment 0x563ea8288430 <line:66:3>
|   | `-TextComment 0x563ea8288400 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8288450 <col:4, line:67:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x563ea8288500 <line:66:20, line:67:3>
|   |   |-TextComment 0x563ea82884b0 <line:66:20, col:47> Text=" destination buffer to fill."
|   |   `-TextComment 0x563ea82884d0 <line:67:3> Text=" "
|   |-ParamCommandComment 0x563ea8288520 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x563ea82885b0 <col:14, col:45>
|   |   `-TextComment 0x563ea8288580 <col:14, col:45> Text=" size of the destination buffer."
|   |-ParagraphComment 0x563ea8288600 <line:69:3>
|   | `-TextComment 0x563ea82885d0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8288620 <col:4, col:53> Name="return"
|   | `-ParagraphComment 0x563ea8288680 <col:11, col:53>
|   |   `-TextComment 0x563ea8288650 <col:11, col:53> Text=" 0 if success, -EIO if entropy reseed error"
|   `-ParagraphComment 0x563ea82886d0 <line:71:1>
|     `-TextComment 0x563ea82886a0 <col:1> Text=" "
|-TypedefDecl 0x563ea81975e0 </vagrant/ext/zephyros/zephyr/include/syscall.h:85:1, line:88:17> line:85:21 _k_syscall_handler_t 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| |-PointerType 0x563ea8197550 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| | `-ParenType 0x563ea81974f0 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' sugar
| |   `-FunctionProtoType 0x563ea8197480 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' cdecl
| |     |-TypedefType 0x563ea81970d0 'uintptr_t' sugar
| |     | |-Typedef 0x563ea80db280 'uintptr_t'
| |     | `-BuiltinType 0x563ea805b850 'unsigned long'
| |     |-TypedefType 0x563ea81970d0 'uintptr_t' sugar
| |     | |-Typedef 0x563ea80db280 'uintptr_t'
| |     | `-BuiltinType 0x563ea805b850 'unsigned long'
| |     |-TypedefType 0x563ea81970d0 'uintptr_t' sugar
| |     | |-Typedef 0x563ea80db280 'uintptr_t'
| |     | `-BuiltinType 0x563ea805b850 'unsigned long'
| |     |-TypedefType 0x563ea81970d0 'uintptr_t' sugar
| |     | |-Typedef 0x563ea80db280 'uintptr_t'
| |     | `-BuiltinType 0x563ea805b850 'unsigned long'
| |     |-TypedefType 0x563ea81970d0 'uintptr_t' sugar
| |     | |-Typedef 0x563ea80db280 'uintptr_t'
| |     | `-BuiltinType 0x563ea805b850 'unsigned long'
| |     |-TypedefType 0x563ea81970d0 'uintptr_t' sugar
| |     | |-Typedef 0x563ea80db280 'uintptr_t'
| |     | `-BuiltinType 0x563ea805b850 'unsigned long'
| |     |-TypedefType 0x563ea81970d0 'uintptr_t' sugar
| |     | |-Typedef 0x563ea80db280 'uintptr_t'
| |     | `-BuiltinType 0x563ea805b850 'unsigned long'
| |     `-PointerType 0x563ea805bb90 'void *'
| |       `-BuiltinType 0x563ea805b6f0 'void'
| `-FullComment 0x563ea82893e0 <line:50:3, line:84:1>
|   |-ParagraphComment 0x563ea82887e0 <line:50:3>
|   | `-TextComment 0x563ea82887b0 <col:3> Text=" "
|   |-VerbatimLineComment 0x563ea8288800 <col:4, col:33> Text=" _k_syscall_handler_t"
|   |-ParagraphComment 0x563ea8288870 <line:51:3>
|   | `-TextComment 0x563ea8288840 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8288890 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea82888f0 <col:10, col:43>
|   |   `-TextComment 0x563ea82888c0 <col:10, col:43> Text=" System call handler function type"
|   |-ParagraphComment 0x563ea8288960 <line:53:3, line:54:67>
|   | |-TextComment 0x563ea8288910 <line:53:3, col:70> Text=" These are kernel-side skeleton functions for system calls. They are"
|   | `-TextComment 0x563ea8288930 <line:54:3, col:67> Text=" necessary to sanitize the arguments passed into the system call:"
|   |-ParagraphComment 0x563ea8288b40 <line:56:3, line:66:41>
|   | |-TextComment 0x563ea8288980 <line:56:3, col:78> Text=" - Any kernel object or device pointers are validated with _SYSCALL_IS_OBJ()"
|   | |-TextComment 0x563ea82889a0 <line:57:3, col:79> Text=" - Any memory buffers passed in are checked to ensure that the calling thread"
|   | |-TextComment 0x563ea82889c0 <line:58:3, col:32> Text="   actually has access to them"
|   | |-TextComment 0x563ea82889e0 <line:59:3, col:69> Text=" - Many kernel calls do no sanity checking of parameters other than"
|   | |-TextComment 0x563ea8288a00 <line:60:3, col:69> Text="   assertions. The handler must check all of these conditions using"
|   | |-TextComment 0x563ea8288a20 <line:61:3, col:22> Text="   _SYSCALL_ASSERT()"
|   | |-TextComment 0x563ea8288a40 <line:62:3, col:78> Text=" - If the system call has more than 6 arguments, then arg6 will be a pointer"
|   | |-TextComment 0x563ea8288a60 <line:63:3, col:74> Text="   to some struct containing arguments 6+. The struct itself needs to be"
|   | |-TextComment 0x563ea8288a80 <line:64:3, col:78> Text="   validated like any other buffer passed in from userspace, and its members"
|   | |-TextComment 0x563ea8288aa0 <line:65:3, col:70> Text="   individually validated (if necessary) and then passed to the real"
|   | `-TextComment 0x563ea8288ac0 <line:66:3, col:41> Text="   implementation like normal arguments"
|   |-ParagraphComment 0x563ea8288bb0 <line:68:3, line:69:70>
|   | |-TextComment 0x563ea8288b60 <line:68:3, col:75> Text=" Even if the system call implementation has no return value, these always"
|   | `-TextComment 0x563ea8288b80 <line:69:3, col:70> Text=" return something, even 0, to prevent register leakage to userspace."
|   |-ParagraphComment 0x563ea8288c00 <line:71:3, col:80>
|   | `-TextComment 0x563ea8288bd0 <col:3, col:80> Text=" Once everything has been validated, the real implementation will be executed."
|   |-ParagraphComment 0x563ea8288c50 <line:73:3>
|   | `-TextComment 0x563ea8288c20 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8288c70 <col:4, line:74:3> [in] implicitly Param="arg1" ParamIndex=0
|   | `-ParagraphComment 0x563ea8288d20 <line:73:15, line:74:3>
|   |   |-TextComment 0x563ea8288cd0 <line:73:15, col:37> Text=" system call argument 1"
|   |   `-TextComment 0x563ea8288cf0 <line:74:3> Text=" "
|   |-ParamCommandComment 0x563ea8288d40 <col:4, line:75:3> [in] implicitly Param="arg2" ParamIndex=1
|   | `-ParagraphComment 0x563ea8288df0 <line:74:15, line:75:3>
|   |   |-TextComment 0x563ea8288da0 <line:74:15, col:37> Text=" system call argument 2"
|   |   `-TextComment 0x563ea8288dc0 <line:75:3> Text=" "
|   |-ParamCommandComment 0x563ea8288e10 <col:4, line:76:3> [in] implicitly Param="arg3" ParamIndex=2
|   | `-ParagraphComment 0x563ea8288ec0 <line:75:15, line:76:3>
|   |   |-TextComment 0x563ea8288e70 <line:75:15, col:37> Text=" system call argument 3"
|   |   `-TextComment 0x563ea8288e90 <line:76:3> Text=" "
|   |-ParamCommandComment 0x563ea8288ee0 <col:4, line:77:3> [in] implicitly Param="arg4" ParamIndex=3
|   | `-ParagraphComment 0x563ea8288f90 <line:76:15, line:77:3>
|   |   |-TextComment 0x563ea8288f40 <line:76:15, col:37> Text=" system call argument 4"
|   |   `-TextComment 0x563ea8288f60 <line:77:3> Text=" "
|   |-ParamCommandComment 0x563ea8288fb0 <col:4, line:78:3> [in] implicitly Param="arg5" ParamIndex=4
|   | `-ParagraphComment 0x563ea8289060 <line:77:15, line:78:3>
|   |   |-TextComment 0x563ea8289010 <line:77:15, col:37> Text=" system call argument 5"
|   |   `-TextComment 0x563ea8289030 <line:78:3> Text=" "
|   |-ParamCommandComment 0x563ea8289080 <col:4, line:79:3> [in] implicitly Param="arg6" ParamIndex=5
|   | `-ParagraphComment 0x563ea8289130 <line:78:15, line:79:3>
|   |   |-TextComment 0x563ea82890e0 <line:78:15, col:37> Text=" system call argument 6"
|   |   `-TextComment 0x563ea8289100 <line:79:3> Text=" "
|   |-ParamCommandComment 0x563ea8289150 <col:4, line:81:3> [in] implicitly Param="ssf" ParamIndex=6
|   | `-ParagraphComment 0x563ea8289230 <line:79:14, line:81:3>
|   |   |-TextComment 0x563ea82891b0 <line:79:14, col:75> Text=" System call stack frame pointer. Used to generate kernel oops"
|   |   |-TextComment 0x563ea82891d0 <line:80:3, col:70> Text="            via _arch_syscall_oops_at(). Contents are arch-specific."
|   |   `-TextComment 0x563ea82891f0 <line:81:3> Text=" "
|   |-BlockCommandComment 0x563ea8289250 <col:4, line:82:22> Name="return"
|   | `-ParagraphComment 0x563ea82892d0 <line:81:11, line:82:22>
|   |   |-TextComment 0x563ea8289280 <line:81:11, col:75> Text=" system call return value, or 0 if the system call implementation"
|   |   `-TextComment 0x563ea82892a0 <line:82:3, col:22> Text="         return void"
|   `-ParagraphComment 0x563ea8289320 <line:84:1>
|     `-TextComment 0x563ea82892f0 <col:1> Text=" "
|-FunctionDecl 0x563ea8197700 <line:93:1, line:106:1> line:93:27 z_syscall_trap 'bool (void)' static inline
| |-CompoundStmt 0x563ea8197928 <line:94:1, line:106:1>
| | |-DeclStmt 0x563ea8197890 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/syscall.h:95:18>
| | | `-VarDecl 0x563ea81977f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, line:15:16> /vagrant/ext/zephyros/zephyr/include/syscall.h:95:7 used ret 'bool' cinit
| | |   `-ImplicitCastExpr 0x563ea8197878 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
| | |     `-IntegerLiteral 0x563ea8197858 <col:16> 'int' 0
| | `-ReturnStmt 0x563ea81978e8 </vagrant/ext/zephyros/zephyr/include/syscall.h:105:2, col:9>
| |   `-ImplicitCastExpr 0x563ea81978d0 <col:9> 'bool' <LValueToRValue>
| |     `-DeclRefExpr 0x563ea81978a8 <col:9> 'bool' lvalue Var 0x563ea81977f8 'ret' 'bool'
| `-AlwaysInlineAttr 0x563ea81977a0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x563ea81979d8 </vagrant/ext/zephyros/zephyr/include/syscall.h:113:1, line:120:1> line:113:20 _is_user_context 'bool (void)' static inline
| |-CompoundStmt 0x563ea8197b28 <line:114:1, line:120:1>
| | `-ReturnStmt 0x563ea8197ab0 <line:118:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-ImplicitCastExpr 0x563ea8197a98 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x563ea8197a78 <col:16> 'int' 0
| `-FullComment 0x563ea8289590 </vagrant/ext/zephyros/zephyr/include/syscall.h:109:3, line:111:69>
|   |-ParagraphComment 0x563ea8289480 <line:109:3, col:53>
|   | `-TextComment 0x563ea8289450 <col:3, col:53> Text=" Indicate whether the CPU is currently in user mode"
|   |-ParagraphComment 0x563ea82894d0 <line:111:3>
|   | `-TextComment 0x563ea82894a0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82894f0 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x563ea8289550 <col:11, col:69>
|       `-TextComment 0x563ea8289520 <col:11, col:69> Text=" true if the CPU is currently running with user permissions"
|-RecordDecl 0x563ea8197b40 prev 0x563ea814bc88 </vagrant/ext/zephyros/zephyr/include/sys/arch_interface.h:41:1, col:8> col:8 struct k_thread
|-RecordDecl 0x563ea8197bc8 <line:42:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x563ea8197c70 <line:44:9, col:16> col:16 struct _k_thread_stack_element
|-TypedefDecl 0x563ea8197d70 <col:1, col:40> col:40 referenced k_thread_stack_t 'struct _k_thread_stack_element':'struct _k_thread_stack_element'
| `-ElaboratedType 0x563ea8197d20 'struct _k_thread_stack_element' sugar
|   `-RecordType 0x563ea8197d00 'struct _k_thread_stack_element'
|     `-Record 0x563ea81f9ac0 '_k_thread_stack_element'
|-TypedefDecl 0x563ea81b8c60 <line:46:1, col:62> col:16 referenced k_thread_entry_t 'void (*)(void *, void *, void *)'
| `-PointerType 0x563ea81b8bf0 'void (*)(void *, void *, void *)'
|   `-ParenType 0x563ea81b8b90 'void (void *, void *, void *)' sugar
|     `-FunctionProtoType 0x563ea81b8b40 'void (void *, void *, void *)' cdecl
|       |-BuiltinType 0x563ea805b6f0 'void'
|       |-PointerType 0x563ea805bb90 'void *'
|       | `-BuiltinType 0x563ea805b6f0 'void'
|       |-PointerType 0x563ea805bb90 'void *'
|       | `-BuiltinType 0x563ea805b6f0 'void'
|       `-PointerType 0x563ea805bb90 'void *'
|         `-BuiltinType 0x563ea805b6f0 'void'
|-FunctionDecl 0x563ea81b8da8 <line:59:1, col:45> col:21 used arch_k_cycle_get_32 'u32_t (void)' static inline
| `-FullComment 0x563ea8289740 <line:55:3, line:57:24>
|   |-ParagraphComment 0x563ea8289630 <line:55:3, col:70>
|   | `-TextComment 0x563ea8289600 <col:3, col:70> Text=" Obtain the current cycle count, in units that are hardware-specific"
|   |-ParagraphComment 0x563ea8289680 <line:57:3>
|   | `-TextComment 0x563ea8289650 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82896a0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x563ea8289700 <col:8, col:24>
|       `-TextComment 0x563ea82896d0 <col:8, col:24> Text=" k_cycle_get_32()"
|-FunctionDecl 0x563ea81b9120 <line:132:1, col:24> col:6 used arch_cpu_idle 'void (void)'
| `-FullComment 0x563ea8289ac0 <line:120:3, line:130:20>
|   |-ParagraphComment 0x563ea82897e0 <line:120:3>
|   | `-TextComment 0x563ea82897b0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8289800 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x563ea8289860 <col:10, col:33>
|   |   `-TextComment 0x563ea8289830 <col:10, col:33> Text=" Power save idle routine"
|   |-ParagraphComment 0x563ea8289900 <line:122:3, line:124:47>
|   | |-TextComment 0x563ea8289880 <line:122:3, col:74> Text=" This function will be called by the kernel idle loop or possibly within"
|   | |-TextComment 0x563ea82898a0 <line:123:3, col:68> Text=" an implementation of z_sys_power_save_idle in the kernel when the"
|   | `-TextComment 0x563ea82898c0 <line:124:3, col:47> Text=" '_sys_power_save_flag' variable is non-zero."
|   |-ParagraphComment 0x563ea82899a0 <line:126:3, line:128:35>
|   | |-TextComment 0x563ea8289920 <line:126:3, col:72> Text=" Architectures that do not implement power management instructions may"
|   | |-TextComment 0x563ea8289940 <line:127:3, col:69> Text=" immediately return, otherwise a power-saving instruction should be"
|   | `-TextComment 0x563ea8289960 <line:128:3, col:35> Text=" issued to wait for an interrupt."
|   |-ParagraphComment 0x563ea82899f0 <line:130:3>
|   | `-TextComment 0x563ea82899c0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8289a10 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x563ea8289a70 <col:8, col:20>
|       `-TextComment 0x563ea8289a40 <col:8, col:20> Text=" k_cpu_idle()"
|-FunctionDecl 0x563ea81b92c0 <line:152:1, col:43> col:6 used arch_cpu_atomic_idle 'void (unsigned int)'
| |-ParmVarDecl 0x563ea81b9200 <col:27, col:40> col:40 key 'unsigned int'
| `-FullComment 0x563ea8289fd0 <line:135:3, line:150:76>
|   |-ParagraphComment 0x563ea8289b60 <line:135:3>
|   | `-TextComment 0x563ea8289b30 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8289b80 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x563ea8289be0 <col:10, col:66>
|   |   `-TextComment 0x563ea8289bb0 <col:10, col:66> Text=" Atomically re-enable interrupts and enter low power mode"
|   |-ParagraphComment 0x563ea8289c30 <line:137:3, col:62>
|   | `-TextComment 0x563ea8289c00 <col:3, col:62> Text=" The requirements for arch_cpu_atomic_idle() are as follows:"
|   |-ParagraphComment 0x563ea8289d20 <line:139:3, line:143:44>
|   | |-TextComment 0x563ea8289c50 <line:139:3, col:67> Text=" -# Enabling interrupts and entering a low-power mode needs to be"
|   | |-TextComment 0x563ea8289c70 <line:140:3, col:73> Text="    atomic, i.e. there should be no period of time where interrupts are"
|   | |-TextComment 0x563ea8289c90 <line:141:3, col:77> Text="    enabled before the processor enters a low-power mode.  See the comments"
|   | |-TextComment 0x563ea8289cb0 <line:142:3, col:62> Text="    in k_lifo_get(), for example, of the race condition that"
|   | `-TextComment 0x563ea8289cd0 <line:143:3, col:44> Text="    occurs if this requirement is not met."
|   |-ParagraphComment 0x563ea8289d90 <line:145:3, line:146:65>
|   | |-TextComment 0x563ea8289d40 <line:145:3, col:74> Text=" -# After waking up from the low-power mode, the interrupt lockout state"
|   | `-TextComment 0x563ea8289d60 <line:146:3, col:65> Text="    must be restored as indicated in the 'key' input parameter."
|   |-ParagraphComment 0x563ea8289de0 <line:148:3>
|   | `-TextComment 0x563ea8289db0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8289e00 <col:4, col:27> Name="see"
|   | `-ParagraphComment 0x563ea8289e60 <col:8, col:27>
|   |   `-TextComment 0x563ea8289e30 <col:8, col:27> Text=" k_cpu_atomic_idle()"
|   |-ParagraphComment 0x563ea8289eb0 <line:150:3>
|   | `-TextComment 0x563ea8289e80 <col:3> Text=" "
|   `-ParamCommandComment 0x563ea8289ed0 <col:4, col:76> [in] implicitly Param="key" ParamIndex=0
|     `-ParagraphComment 0x563ea8289f60 <col:14, col:76>
|       `-TextComment 0x563ea8289f30 <col:14, col:76> Text=" Lockout key returned by previous invocation of arch_irq_lock()"
|-TypedefDecl 0x563ea81b95b0 <line:167:1, col:57> col:30 referenced arch_cpustart_t 'void (*)(void *) __attribute__((noreturn))'
| |-PointerType 0x563ea81b9550 'void (*)(void *) __attribute__((noreturn))'
| | `-ParenType 0x563ea81b94f0 'void (void *) __attribute__((noreturn))' sugar
| |   `-FunctionProtoType 0x563ea81b94b0 'void (void *) __attribute__((noreturn))' noreturn cdecl
| |     |-BuiltinType 0x563ea805b6f0 'void'
| |     `-PointerType 0x563ea805bb90 'void *'
| |       `-BuiltinType 0x563ea805b6f0 'void'
| `-FullComment 0x563ea828a1b0 <line:163:3, line:165:52>
|   |-ParagraphComment 0x563ea828a070 <line:163:3, col:25>
|   | `-TextComment 0x563ea828a040 <col:3, col:25> Text=" Per-cpu entry function"
|   |-ParagraphComment 0x563ea828a0c0 <line:165:3>
|   | `-TextComment 0x563ea828a090 <col:3> Text=" "
|   `-ParamCommandComment 0x563ea828a0e0 <col:4, col:52> [in] implicitly Param="context"
|     `-ParagraphComment 0x563ea828a170 <col:18, col:52>
|       `-TextComment 0x563ea828a140 <col:18, col:52> Text=" parameter, implementation specific"
|-FunctionDecl 0x563ea81baa58 <line:189:1, line:190:36> line:189:6 arch_start_cpu 'void (int, k_thread_stack_t *, int, arch_cpustart_t, void *)'
| |-ParmVarDecl 0x563ea81b9650 <col:21, col:25> col:25 cpu_num 'int'
| |-ParmVarDecl 0x563ea81b9738 <col:34, col:52> col:52 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x563ea81b97b0 <col:59, col:63> col:63 sz 'int'
| |-ParmVarDecl 0x563ea81b9840 <line:190:7, col:23> col:23 fn 'arch_cpustart_t':'void (*)(void *) __attribute__((noreturn))'
| |-ParmVarDecl 0x563ea81b98b8 <col:27, col:33> col:33 arg 'void *'
| `-FullComment 0x563ea828a930 <line:170:3, line:187:51>
|   |-ParagraphComment 0x563ea828a250 <line:170:3>
|   | `-TextComment 0x563ea828a220 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea828a270 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x563ea828a2d0 <col:10, col:53>
|   |   `-TextComment 0x563ea828a2a0 <col:10, col:53> Text=" Start a numbered CPU on a MP-capable system"
|   |-ParagraphComment 0x563ea828a3c0 <line:172:3, line:176:68>
|   | |-TextComment 0x563ea828a2f0 <line:172:3, col:77> Text=" This starts and initializes a specific CPU.  The main thread on startup is"
|   | |-TextComment 0x563ea828a310 <line:173:3, col:78> Text=" running on CPU zero, other processors are numbered sequentially.  On return"
|   | |-TextComment 0x563ea828a330 <line:174:3, col:78> Text=" from this function, the CPU is known to have begun operating and will enter"
|   | |-TextComment 0x563ea828a350 <line:175:3, col:79> Text=" the provided function.  Its interrupts will be initialized but disabled such"
|   | `-TextComment 0x563ea828a370 <line:176:3, col:68> Text=" that irq_unlock() with the provided key will work to enable them."
|   |-ParagraphComment 0x563ea828a480 <line:178:3, line:181:41>
|   | |-TextComment 0x563ea828a3e0 <line:178:3, col:67> Text=" Normally, in SMP mode this function will be called by the kernel"
|   | |-TextComment 0x563ea828a400 <line:179:3, col:79> Text=" initialization and should not be used as a user API.  But it is defined here"
|   | |-TextComment 0x563ea828a420 <line:180:3, col:76> Text=" for special-purpose apps which want Zephyr running on one core and to use"
|   | `-TextComment 0x563ea828a440 <line:181:3, col:41> Text=" others for design-specific processing."
|   |-ParagraphComment 0x563ea828a4d0 <line:183:3>
|   | `-TextComment 0x563ea828a4a0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea828a4f0 <col:4, line:184:3> [in] implicitly Param="cpu_num" ParamIndex=0
|   | `-ParagraphComment 0x563ea828a5a0 <line:183:18, line:184:3>
|   |   |-TextComment 0x563ea828a550 <line:183:18, col:43> Text=" Integer number of the CPU"
|   |   `-TextComment 0x563ea828a570 <line:184:3> Text=" "
|   |-ParamCommandComment 0x563ea828a5c0 <col:4, line:185:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x563ea828a670 <line:184:16, line:185:3>
|   |   |-TextComment 0x563ea828a620 <line:184:16, col:40> Text=" Stack memory for the CPU"
|   |   `-TextComment 0x563ea828a640 <line:185:3> Text=" "
|   |-ParamCommandComment 0x563ea828a690 <col:4, line:186:3> [in] implicitly Param="sz" ParamIndex=2
|   | `-ParagraphComment 0x563ea828a740 <line:185:13, line:186:3>
|   |   |-TextComment 0x563ea828a6f0 <line:185:13, col:40> Text=" Stack buffer size, in bytes"
|   |   `-TextComment 0x563ea828a710 <line:186:3> Text=" "
|   |-ParamCommandComment 0x563ea828a760 <col:4, line:187:3> [in] implicitly Param="fn" ParamIndex=3
|   | `-ParagraphComment 0x563ea828a810 <line:186:13, line:187:3>
|   |   |-TextComment 0x563ea828a7c0 <line:186:13, col:50> Text=" Function to begin running on the CPU."
|   |   `-TextComment 0x563ea828a7e0 <line:187:3> Text=" "
|   `-ParamCommandComment 0x563ea828a830 <col:4, col:51> [in] implicitly Param="arg" ParamIndex=4
|     `-ParagraphComment 0x563ea828a8c0 <col:14, col:51>
|       `-TextComment 0x563ea828a890 <col:14, col:51> Text=" Untyped argument to be passed to "fn""
|-FunctionDecl 0x563ea81bac40 <line:204:1, col:46> col:28 used arch_irq_lock 'unsigned int (void)' static inline
| `-FullComment 0x563ea828aae0 <line:200:3, line:202:18>
|   |-ParagraphComment 0x563ea828a9d0 <line:200:3, col:37>
|   | `-TextComment 0x563ea828a9a0 <col:3, col:37> Text=" Lock interrupts on the current CPU"
|   |-ParagraphComment 0x563ea828aa20 <line:202:3>
|   | `-TextComment 0x563ea828a9f0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828aa40 <col:4, col:18> Name="see"
|     `-ParagraphComment 0x563ea828aaa0 <col:8, col:18>
|       `-TextComment 0x563ea828aa70 <col:8, col:18> Text=" irq_lock()"
|-FunctionDecl 0x563ea81bada8 <line:211:1, col:52> col:20 used arch_irq_unlock 'void (unsigned int)' static inline
| |-ParmVarDecl 0x563ea81bad20 <col:36, col:49> col:49 key 'unsigned int'
| `-FullComment 0x563ea828ac90 <line:207:3, line:209:20>
|   |-ParagraphComment 0x563ea828ab80 <line:207:3, col:39>
|   | `-TextComment 0x563ea828ab50 <col:3, col:39> Text=" Unlock interrupts on the current CPU"
|   |-ParagraphComment 0x563ea828abd0 <line:209:3>
|   | `-TextComment 0x563ea828aba0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828abf0 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x563ea828ac50 <col:8, col:20>
|       `-TextComment 0x563ea828ac20 <col:8, col:20> Text=" irq_unlock()"
|-FunctionDecl 0x563ea81baf18 <line:220:1, col:54> col:20 arch_irq_unlocked 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x563ea81bae90 <col:38, col:51> col:51 key 'unsigned int'
| `-FullComment 0x563ea828af30 <line:214:3, line:218:39>
|   |-ParagraphComment 0x563ea828ad30 <line:214:3, col:68>
|   | `-TextComment 0x563ea828ad00 <col:3, col:68> Text=" Test if calling arch_irq_unlock() with this key would unlock irqs"
|   |-ParagraphComment 0x563ea828ad80 <line:216:3>
|   | `-TextComment 0x563ea828ad50 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea828ada0 <col:4, line:217:3> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x563ea828ae50 <line:216:14, line:217:3>
|   |   |-TextComment 0x563ea828ae00 <line:216:14, col:47> Text=" value returned by arch_irq_lock()"
|   |   `-TextComment 0x563ea828ae20 <line:217:3> Text=" "
|   `-BlockCommandComment 0x563ea828ae70 <col:4, line:218:39> Name="return"
|     `-ParagraphComment 0x563ea828aef0 <line:217:11, line:218:39>
|       |-TextComment 0x563ea828aea0 <line:217:11, col:72> Text=" true if interrupts were unlocked prior to the arch_irq_lock()"
|       `-TextComment 0x563ea828aec0 <line:218:3, col:39> Text=" call that produced the key argument."
|-FunctionDecl 0x563ea81bb088 <line:227:1, col:39> col:6 arch_irq_disable 'void (unsigned int)'
| |-ParmVarDecl 0x563ea81bb000 <col:23, col:36> col:36 irq 'unsigned int'
| `-FullComment 0x563ea828b0e0 <line:223:3, line:225:21>
|   |-ParagraphComment 0x563ea828afd0 <line:223:3, col:39>
|   | `-TextComment 0x563ea828afa0 <col:3, col:39> Text=" Disable the specified interrupt line"
|   |-ParagraphComment 0x563ea828b020 <line:225:3>
|   | `-TextComment 0x563ea828aff0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828b040 <col:4, col:21> Name="see"
|     `-ParagraphComment 0x563ea828b0a0 <col:8, col:21>
|       `-TextComment 0x563ea828b070 <col:8, col:21> Text=" irq_disable()"
|-FunctionDecl 0x563ea81bb1f8 <line:234:1, col:38> col:6 arch_irq_enable 'void (unsigned int)'
| |-ParmVarDecl 0x563ea81bb170 <col:22, col:35> col:35 irq 'unsigned int'
| `-FullComment 0x563ea828b290 <line:230:3, line:232:20>
|   |-ParagraphComment 0x563ea828b180 <line:230:3, col:38>
|   | `-TextComment 0x563ea828b150 <col:3, col:38> Text=" Enable the specified interrupt line"
|   |-ParagraphComment 0x563ea828b1d0 <line:232:3>
|   | `-TextComment 0x563ea828b1a0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828b1f0 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x563ea828b250 <col:8, col:20>
|       `-TextComment 0x563ea828b220 <col:8, col:20> Text=" irq_enable()"
|-FunctionDecl 0x563ea81bb3a8 <line:241:1, col:41> col:5 arch_irq_is_enabled 'int (unsigned int)'
| |-ParmVarDecl 0x563ea81bb2e0 <col:25, col:38> col:38 irq 'unsigned int'
| `-FullComment 0x563ea828b460 <line:237:3, line:239:24>
|   |-ParagraphComment 0x563ea828b330 <line:237:3, col:39>
|   | `-TextComment 0x563ea828b300 <col:3, col:39> Text=" Test if an interrupt line is enabled"
|   |-ParagraphComment 0x563ea828b380 <line:239:3>
|   | `-TextComment 0x563ea828b350 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828b3a0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x563ea828b420 <col:8, col:24>
|       `-TextComment 0x563ea828b3f0 <col:8, col:24> Text=" irq_is_enabled()"
|-FunctionDecl 0x563ea81bb8f8 <line:254:1, line:256:37> line:254:5 used arch_irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |-ParmVarDecl 0x563ea81bb490 <col:30, col:43> col:43 irq 'unsigned int'
| |-ParmVarDecl 0x563ea81bb508 <col:48, col:61> col:61 priority 'unsigned int'
| |-ParmVarDecl 0x563ea81bb6a0 <line:255:9, col:40> col:16 routine 'void (*)(void *)'
| |-ParmVarDecl 0x563ea81bb718 <line:256:9, col:15> col:15 parameter 'void *'
| |-ParmVarDecl 0x563ea81bb788 <col:26, col:32> col:32 flags 'u32_t':'unsigned int'
| `-FullComment 0x563ea828ba80 <line:244:3, line:252:48>
|   |-ParagraphComment 0x563ea828b500 <line:244:3, col:53>
|   | `-TextComment 0x563ea828b4d0 <col:3, col:53> Text=" Arch-specific hook to install a dynamic interrupt."
|   |-ParagraphComment 0x563ea828b550 <line:246:3>
|   | `-TextComment 0x563ea828b520 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea828b570 <col:4, line:247:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x563ea828b620 <line:246:14, line:247:3>
|   |   |-TextComment 0x563ea828b5d0 <line:246:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x563ea828b5f0 <line:247:3> Text=" "
|   |-ParamCommandComment 0x563ea828b640 <col:4, line:248:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x563ea828b6f0 <line:247:19, line:248:3>
|   |   |-TextComment 0x563ea828b6a0 <line:247:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x563ea828b6c0 <line:248:3> Text=" "
|   |-ParamCommandComment 0x563ea828b710 <col:4, line:249:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x563ea828b7c0 <line:248:18, line:249:3>
|   |   |-TextComment 0x563ea828b770 <line:248:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x563ea828b790 <line:249:3> Text=" "
|   |-ParamCommandComment 0x563ea828b7e0 <col:4, line:250:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x563ea828b890 <line:249:20, line:250:3>
|   |   |-TextComment 0x563ea828b840 <line:249:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x563ea828b860 <line:250:3> Text=" "
|   |-ParamCommandComment 0x563ea828b8b0 <col:4, col:52> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x563ea828b940 <col:16, col:52>
|   |   `-TextComment 0x563ea828b910 <col:16, col:52> Text=" Arch-specific IRQ configuration flag"
|   |-ParagraphComment 0x563ea828b990 <line:252:3>
|   | `-TextComment 0x563ea828b960 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828b9b0 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x563ea828ba10 <col:11, col:48>
|       `-TextComment 0x563ea828b9e0 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x563ea81bbd58 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:27:1, line:34:1> line:27:19 used sys_clock_hw_cycles_per_sec 'int (void)' static inline
| `-CompoundStmt 0x563ea81bbe08 <line:28:1, line:34:1>
|-FunctionDecl 0x563ea81bc260 <line:55:1, line:105:1> line:55:28 used z_tmcvt 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' static inline
| |-ParmVarDecl 0x563ea81bbe28 <col:36, col:42> col:42 used t 'u64_t':'unsigned long long'
| |-ParmVarDecl 0x563ea81bbe98 <col:45, col:51> col:51 used from_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x563ea81bbf08 <col:60, col:66> col:66 used to_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x563ea81bbf78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:13> col:13 used const_hz 'bool'
| |-ParmVarDecl 0x563ea81bbfe8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:28> col:28 used result32 'bool'
| |-ParmVarDecl 0x563ea81bc058 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:13> col:13 used round_up 'bool'
| |-ParmVarDecl 0x563ea81bc0c8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:28> col:28 used round_off 'bool'
| |-CompoundStmt 0x563ea81c09f8 <line:58:1, line:105:1>
| | |-DeclStmt 0x563ea81bc6c0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:48>
| | | `-VarDecl 0x563ea81bc390 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:47> line:59:7 used mul_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x563ea81bc6a8 <col:19, line:60:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x563ea81bc680 <line:59:19, line:60:47> 'int' '&&'
| | |       |-BinaryOperator 0x563ea81bc510 <line:59:19, line:60:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x563ea81bc4f8 <line:59:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x563ea81bc4e0 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x563ea81bc3f0 <col:19> 'bool' lvalue ParmVar 0x563ea81bbf78 'const_hz' 'bool'
| | |       | `-ParenExpr 0x563ea81bc4c0 <line:60:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x563ea81bc498 <col:4, col:12> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x563ea81bc468 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x563ea81bc418 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbf08 'to_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x563ea81bc480 <col:12> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x563ea81bc440 <col:12> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbe98 'from_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x563ea81bc660 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x563ea81bc638 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x563ea81bc5e0 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x563ea81bc5b8 <col:26, col:34> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x563ea81bc588 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x563ea81bc538 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbf08 'to_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x563ea81bc5a0 <col:34> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x563ea81bc560 <col:34> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbe98 'from_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x563ea81bc620 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x563ea81bc600 <col:46> 'int' 0
| | |-DeclStmt 0x563ea81bf1f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:48>
| | | `-VarDecl 0x563ea81bc6e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:47> line:61:7 used div_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x563ea81bca00 <col:19, line:62:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x563ea81bc9d8 <line:61:19, line:62:47> 'int' '&&'
| | |       |-BinaryOperator 0x563ea81bc868 <line:61:19, line:62:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x563ea81bc850 <line:61:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x563ea81bc838 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x563ea81bc748 <col:19> 'bool' lvalue ParmVar 0x563ea81bbf78 'const_hz' 'bool'
| | |       | `-ParenExpr 0x563ea81bc818 <line:62:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x563ea81bc7f0 <col:4, col:14> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x563ea81bc7c0 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x563ea81bc770 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbe98 'from_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x563ea81bc7d8 <col:14> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x563ea81bc798 <col:14> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbf08 'to_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x563ea81bc9b8 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x563ea81bc990 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x563ea81bc938 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x563ea81bc910 <col:26, col:36> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x563ea81bc8e0 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x563ea81bc890 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbe98 'from_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x563ea81bc8f8 <col:36> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x563ea81bc8b8 <col:36> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbf08 'to_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x563ea81bc978 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x563ea81bc958 <col:46> 'int' 0
| | |-IfStmt 0x563ea81bf458 <line:64:2, line:66:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x563ea81bf288 <line:64:6, col:17> 'int' '=='
| | | | |-ImplicitCastExpr 0x563ea81bf258 <col:6> 'u32_t':'unsigned int' <LValueToRValue>
| | | | | `-DeclRefExpr 0x563ea81bf208 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbe98 'from_hz' 'u32_t':'unsigned int'
| | | | `-ImplicitCastExpr 0x563ea81bf270 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x563ea81bf230 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbf08 'to_hz' 'u32_t':'unsigned int'
| | | |-CompoundStmt 0x563ea81bf440 <col:24, line:66:2>
| | | | `-ReturnStmt 0x563ea81bf428 <line:65:3, col:34>
| | | |   `-ConditionalOperator 0x563ea81bf3f8 <col:10, col:34> 'unsigned long long'
| | | |     |-ImplicitCastExpr 0x563ea81bf3b0 <col:10> 'int' <IntegralCast>
| | | |     | `-ImplicitCastExpr 0x563ea81bf398 <col:10> 'bool' <LValueToRValue>
| | | |     |   `-DeclRefExpr 0x563ea81bf2b0 <col:10> 'bool' lvalue ParmVar 0x563ea81bbfe8 'result32' 'bool'
| | | |     |-ImplicitCastExpr 0x563ea81bf3e0 <col:21, col:30> 'unsigned long long' <IntegralCast>
| | | |     | `-ParenExpr 0x563ea81bf350 <col:21, col:30> 'u32_t':'unsigned int'
| | | |     |   `-CStyleCastExpr 0x563ea81bf328 <col:22, col:29> 'u32_t':'unsigned int' <IntegralCast>
| | | |     |     `-ImplicitCastExpr 0x563ea81bf310 <col:29> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |     |       `-DeclRefExpr 0x563ea81bf2d8 <col:29> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81bbe28 't' 'u64_t':'unsigned long long'
| | | |     `-ImplicitCastExpr 0x563ea81bf3c8 <col:34> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |       `-DeclRefExpr 0x563ea81bf370 <col:34> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81bbe28 't' 'u64_t':'unsigned long long'
| | | `-<<<NULL>>>
| | |-DeclStmt 0x563ea81bf538 <line:68:2, col:15>
| | | `-VarDecl 0x563ea81bf4a0 <col:2, col:14> col:8 used off 'u64_t':'unsigned long long' cinit
| | |   `-ImplicitCastExpr 0x563ea81bf520 <col:14> 'u64_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x563ea81bf500 <col:14> 'int' 0
| | |-IfStmt 0x563ea81bfb18 <line:70:2, line:78:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x563ea81bf590 <line:70:6, col:7> 'int' prefix '!'
| | | | `-ImplicitCastExpr 0x563ea81bf578 <col:7> 'bool' <LValueToRValue>
| | | |   `-DeclRefExpr 0x563ea81bf550 <col:7> 'bool' lvalue Var 0x563ea81bc390 'mul_ratio' 'bool'
| | | |-CompoundStmt 0x563ea81bfaf8 <col:18, line:78:2>
| | | | |-DeclStmt 0x563ea81bf7b0 <line:71:3, col:59>
| | | | | `-VarDecl 0x563ea81bf5c0 <col:3, col:52> col:9 used rdivisor 'u32_t':'unsigned int' cinit
| | | | |   `-ConditionalOperator 0x563ea81bf780 <col:20, col:52> 'unsigned int'
| | | | |     |-ImplicitCastExpr 0x563ea81bf750 <col:20> 'int' <IntegralCast>
| | | | |     | `-ImplicitCastExpr 0x563ea81bf738 <col:20> 'bool' <LValueToRValue>
| | | | |     |   `-DeclRefExpr 0x563ea81bf620 <col:20> 'bool' lvalue Var 0x563ea81bc6e8 'div_ratio' 'bool'
| | | | |     |-ParenExpr 0x563ea81bf6f0 <col:32, col:48> 'unsigned int'
| | | | |     | `-BinaryOperator 0x563ea81bf6c8 <col:33, col:43> 'unsigned int' '/'
| | | | |     |   |-ImplicitCastExpr 0x563ea81bf698 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |   | `-DeclRefExpr 0x563ea81bf648 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbe98 'from_hz' 'u32_t':'unsigned int'
| | | | |     |   `-ImplicitCastExpr 0x563ea81bf6b0 <col:43> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |     `-DeclRefExpr 0x563ea81bf670 <col:43> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbf08 'to_hz' 'u32_t':'unsigned int'
| | | | |     `-ImplicitCastExpr 0x563ea81bf768 <col:52> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x563ea81bf710 <col:52> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbe98 'from_hz' 'u32_t':'unsigned int'
| | | | `-IfStmt 0x563ea81bfac0 <line:73:3, line:77:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-ImplicitCastExpr 0x563ea81bf7f0 <line:73:7> 'bool' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x563ea81bf7c8 <col:7> 'bool' lvalue ParmVar 0x563ea81bc058 'round_up' 'bool'
| | | |   |-CompoundStmt 0x563ea81bf910 <col:17, line:75:3>
| | | |   | `-BinaryOperator 0x563ea81bf8e8 <line:74:4, col:21> 'u64_t':'unsigned long long' '='
| | | |   |   |-DeclRefExpr 0x563ea81bf808 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x563ea81bf4a0 'off' 'u64_t':'unsigned long long'
| | | |   |   `-ImplicitCastExpr 0x563ea81bf8d0 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |   |     `-BinaryOperator 0x563ea81bf8a8 <col:10, col:21> 'unsigned int' '-'
| | | |   |       |-ImplicitCastExpr 0x563ea81bf878 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   |       | `-DeclRefExpr 0x563ea81bf830 <col:10> 'u32_t':'unsigned int' lvalue Var 0x563ea81bf5c0 'rdivisor' 'u32_t':'unsigned int'
| | | |   |       `-ImplicitCastExpr 0x563ea81bf890 <col:21> 'unsigned int' <IntegralCast>
| | | |   |         `-IntegerLiteral 0x563ea81bf858 <col:21> 'int' 1
| | | |   `-IfStmt 0x563ea81bfa88 <line:75:10, line:77:3>
| | | |     |-<<<NULL>>>
| | | |     |-<<<NULL>>>
| | | |     |-ImplicitCastExpr 0x563ea81bf950 <line:75:14> 'bool' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x563ea81bf928 <col:14> 'bool' lvalue ParmVar 0x563ea81bc0c8 'round_off' 'bool'
| | | |     |-CompoundStmt 0x563ea81bfa70 <col:25, line:77:3>
| | | |     | `-BinaryOperator 0x563ea81bfa48 <line:76:4, col:21> 'u64_t':'unsigned long long' '='
| | | |     |   |-DeclRefExpr 0x563ea81bf968 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x563ea81bf4a0 'off' 'u64_t':'unsigned long long'
| | | |     |   `-ImplicitCastExpr 0x563ea81bfa30 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |     |     `-BinaryOperator 0x563ea81bfa08 <col:10, col:21> 'unsigned int' '/'
| | | |     |       |-ImplicitCastExpr 0x563ea81bf9d8 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |     |       | `-DeclRefExpr 0x563ea81bf990 <col:10> 'u32_t':'unsigned int' lvalue Var 0x563ea81bf5c0 'rdivisor' 'u32_t':'unsigned int'
| | | |     |       `-ImplicitCastExpr 0x563ea81bf9f0 <col:21> 'unsigned int' <IntegralCast>
| | | |     |         `-IntegerLiteral 0x563ea81bf9b8 <col:21> 'int' 2
| | | |     `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-IfStmt 0x563ea81c0990 <line:85:2, line:104:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x563ea81bfb78 <line:85:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x563ea81bfb50 <col:6> 'bool' lvalue Var 0x563ea81bc6e8 'div_ratio' 'bool'
| |   |-CompoundStmt 0x563ea81bfff0 <col:17, line:92:2>
| |   | |-CompoundAssignOperator 0x563ea81bfbf8 <line:86:3, col:8> 'u64_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| |   | | |-DeclRefExpr 0x563ea81bfb90 <col:3> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81bbe28 't' 'u64_t':'unsigned long long'
| |   | | `-ImplicitCastExpr 0x563ea81bfbe0 <col:8> 'u64_t':'unsigned long long' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x563ea81bfbb8 <col:8> 'u64_t':'unsigned long long' lvalue Var 0x563ea81bf4a0 'off' 'u64_t':'unsigned long long'
| |   | `-IfStmt 0x563ea81bffb8 <line:87:3, line:91:3>
| |   |   |-<<<NULL>>>
| |   |   |-<<<NULL>>>
| |   |   |-ImplicitCastExpr 0x563ea81bfc58 <line:87:7> 'bool' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x563ea81bfc30 <col:7> 'bool' lvalue ParmVar 0x563ea81bbfe8 'result32' 'bool'
| |   |   |-CompoundStmt 0x563ea81bfe28 <col:17, line:89:3>
| |   |   | `-ReturnStmt 0x563ea81bfe10 <line:88:4, col:40>
| |   |   |   `-ImplicitCastExpr 0x563ea81bfdf8 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |   |   |     `-BinaryOperator 0x563ea81bfdd0 <col:11, col:40> 'unsigned int' '/'
| |   |   |       |-ParenExpr 0x563ea81bfce8 <col:11, col:20> 'u32_t':'unsigned int'
| |   |   |       | `-CStyleCastExpr 0x563ea81bfcc0 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |   |   |       |   `-ImplicitCastExpr 0x563ea81bfca8 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |   |       |     `-DeclRefExpr 0x563ea81bfc70 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81bbe28 't' 'u64_t':'unsigned long long'
| |   |   |       `-ParenExpr 0x563ea81bfdb0 <col:24, col:40> 'unsigned int'
| |   |   |         `-BinaryOperator 0x563ea81bfd88 <col:25, col:35> 'unsigned int' '/'
| |   |   |           |-ImplicitCastExpr 0x563ea81bfd58 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |           | `-DeclRefExpr 0x563ea81bfd08 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbe98 'from_hz' 'u32_t':'unsigned int'
| |   |   |           `-ImplicitCastExpr 0x563ea81bfd70 <col:35> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |             `-DeclRefExpr 0x563ea81bfd30 <col:35> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbf08 'to_hz' 'u32_t':'unsigned int'
| |   |   `-CompoundStmt 0x563ea81bffa0 <line:89:10, line:91:3>
| |   |     `-ReturnStmt 0x563ea81bff88 <line:90:4, col:31>
| |   |       `-BinaryOperator 0x563ea81bff60 <col:11, col:31> 'unsigned long long' '/'
| |   |         |-ImplicitCastExpr 0x563ea81bff30 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |         | `-DeclRefExpr 0x563ea81bfe40 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81bbe28 't' 'u64_t':'unsigned long long'
| |   |         `-ImplicitCastExpr 0x563ea81bff48 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |   |           `-ParenExpr 0x563ea81bff10 <col:15, col:31> 'unsigned int'
| |   |             `-BinaryOperator 0x563ea81bfee8 <col:16, col:26> 'unsigned int' '/'
| |   |               |-ImplicitCastExpr 0x563ea81bfeb8 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |   |               | `-DeclRefExpr 0x563ea81bfe68 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbe98 'from_hz' 'u32_t':'unsigned int'
| |   |               `-ImplicitCastExpr 0x563ea81bfed0 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| |   |                 `-DeclRefExpr 0x563ea81bfe90 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbf08 'to_hz' 'u32_t':'unsigned int'
| |   `-IfStmt 0x563ea81c0958 <line:92:9, line:104:2>
| |     |-<<<NULL>>>
| |     |-<<<NULL>>>
| |     |-ImplicitCastExpr 0x563ea81c0038 <line:92:13> 'bool' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81c0010 <col:13> 'bool' lvalue Var 0x563ea81bc390 'mul_ratio' 'bool'
| |     |-CompoundStmt 0x563ea81c0420 <col:24, line:98:2>
| |     | `-IfStmt 0x563ea81c03e8 <line:93:3, line:97:3>
| |     |   |-<<<NULL>>>
| |     |   |-<<<NULL>>>
| |     |   |-ImplicitCastExpr 0x563ea81c0078 <line:93:7> 'bool' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x563ea81c0050 <col:7> 'bool' lvalue ParmVar 0x563ea81bbfe8 'result32' 'bool'
| |     |   |-CompoundStmt 0x563ea81c0258 <col:17, line:95:3>
| |     |   | `-ReturnStmt 0x563ea81c0240 <line:94:4, col:40>
| |     |   |   `-ImplicitCastExpr 0x563ea81c0228 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |     |   |     `-BinaryOperator 0x563ea81c0200 <col:11, col:40> 'unsigned int' '*'
| |     |   |       |-ParenExpr 0x563ea81c0108 <col:11, col:20> 'u32_t':'unsigned int'
| |     |   |       | `-CStyleCastExpr 0x563ea81c00e0 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |     |   |       |   `-ImplicitCastExpr 0x563ea81c00c8 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |   |       |     `-DeclRefExpr 0x563ea81c0090 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81bbe28 't' 'u64_t':'unsigned long long'
| |     |   |       `-ParenExpr 0x563ea81c01d0 <col:24, col:40> 'unsigned int'
| |     |   |         `-BinaryOperator 0x563ea81c01a8 <col:25, col:33> 'unsigned int' '/'
| |     |   |           |-ImplicitCastExpr 0x563ea81c0178 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |           | `-DeclRefExpr 0x563ea81c0128 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbf08 'to_hz' 'u32_t':'unsigned int'
| |     |   |           `-ImplicitCastExpr 0x563ea81c0190 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |             `-DeclRefExpr 0x563ea81c0150 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbe98 'from_hz' 'u32_t':'unsigned int'
| |     |   `-CompoundStmt 0x563ea81c03d0 <line:95:10, line:97:3>
| |     |     `-ReturnStmt 0x563ea81c03b8 <line:96:4, col:31>
| |     |       `-BinaryOperator 0x563ea81c0390 <col:11, col:31> 'unsigned long long' '*'
| |     |         |-ImplicitCastExpr 0x563ea81c0360 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |         | `-DeclRefExpr 0x563ea81c0270 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81bbe28 't' 'u64_t':'unsigned long long'
| |     |         `-ImplicitCastExpr 0x563ea81c0378 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |     |           `-ParenExpr 0x563ea81c0340 <col:15, col:31> 'unsigned int'
| |     |             `-BinaryOperator 0x563ea81c0318 <col:16, col:24> 'unsigned int' '/'
| |     |               |-ImplicitCastExpr 0x563ea81c02e8 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |     |               | `-DeclRefExpr 0x563ea81c0298 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbf08 'to_hz' 'u32_t':'unsigned int'
| |     |               `-ImplicitCastExpr 0x563ea81c0300 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |     |                 `-DeclRefExpr 0x563ea81c02c0 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbe98 'from_hz' 'u32_t':'unsigned int'
| |     `-CompoundStmt 0x563ea81c0940 <line:98:9, line:104:2>
| |       `-IfStmt 0x563ea81c0908 <line:99:3, line:103:3>
| |         |-<<<NULL>>>
| |         |-<<<NULL>>>
| |         |-ImplicitCastExpr 0x563ea81c0460 <line:99:7> 'bool' <LValueToRValue>
| |         | `-DeclRefExpr 0x563ea81c0438 <col:7> 'bool' lvalue ParmVar 0x563ea81bbfe8 'result32' 'bool'
| |         |-CompoundStmt 0x563ea81c06f8 <col:17, line:101:3>
| |         | `-ReturnStmt 0x563ea81c06e0 <line:100:4, col:46>
| |         |   `-ImplicitCastExpr 0x563ea81c06c8 <col:11, col:46> 'u64_t':'unsigned long long' <IntegralCast>
| |         |     `-CStyleCastExpr 0x563ea81c06a0 <col:11, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |         |       `-ParenExpr 0x563ea81c0680 <col:18, col:46> 'unsigned long long'
| |         |         `-BinaryOperator 0x563ea81c0618 <col:19, col:39> 'unsigned long long' '/'
| |         |           |-ParenExpr 0x563ea81c05a0 <col:19, col:35> 'unsigned long long'
| |         |           | `-BinaryOperator 0x563ea81c0578 <col:20, col:32> 'unsigned long long' '+'
| |         |           |   |-BinaryOperator 0x563ea81c0510 <col:20, col:24> 'unsigned long long' '*'
| |         |           |   | |-ImplicitCastExpr 0x563ea81c04c8 <col:20> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |   | | `-DeclRefExpr 0x563ea81c0478 <col:20> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81bbe28 't' 'u64_t':'unsigned long long'
| |         |           |   | `-ImplicitCastExpr 0x563ea81c04f8 <col:24> 'unsigned long long' <IntegralCast>
| |         |           |   |   `-ImplicitCastExpr 0x563ea81c04e0 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |         |           |   |     `-DeclRefExpr 0x563ea81c04a0 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbf08 'to_hz' 'u32_t':'unsigned int'
| |         |           |   `-ImplicitCastExpr 0x563ea81c0560 <col:32> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |     `-DeclRefExpr 0x563ea81c0538 <col:32> 'u64_t':'unsigned long long' lvalue Var 0x563ea81bf4a0 'off' 'u64_t':'unsigned long long'
| |         |           `-ImplicitCastExpr 0x563ea81c0600 <col:39> 'unsigned long long' <IntegralCast>
| |         |             `-ImplicitCastExpr 0x563ea81c05e8 <col:39> 'u32_t':'unsigned int' <LValueToRValue>
| |         |               `-DeclRefExpr 0x563ea81c05c0 <col:39> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbe98 'from_hz' 'u32_t':'unsigned int'
| |         `-CompoundStmt 0x563ea81c08f0 <line:101:10, line:103:3>
| |           `-ReturnStmt 0x563ea81c08d8 <line:102:4, col:31>
| |             `-BinaryOperator 0x563ea81c08b0 <col:11, col:31> 'unsigned long long' '/'
| |               |-ParenExpr 0x563ea81c0838 <col:11, col:27> 'unsigned long long'
| |               | `-BinaryOperator 0x563ea81c0810 <col:12, col:24> 'unsigned long long' '+'
| |               |   |-BinaryOperator 0x563ea81c07a8 <col:12, col:16> 'unsigned long long' '*'
| |               |   | |-ImplicitCastExpr 0x563ea81c0760 <col:12> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |   | | `-DeclRefExpr 0x563ea81c0710 <col:12> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81bbe28 't' 'u64_t':'unsigned long long'
| |               |   | `-ImplicitCastExpr 0x563ea81c0790 <col:16> 'unsigned long long' <IntegralCast>
| |               |   |   `-ImplicitCastExpr 0x563ea81c0778 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |               |   |     `-DeclRefExpr 0x563ea81c0738 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbf08 'to_hz' 'u32_t':'unsigned int'
| |               |   `-ImplicitCastExpr 0x563ea81c07f8 <col:24> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |     `-DeclRefExpr 0x563ea81c07d0 <col:24> 'u64_t':'unsigned long long' lvalue Var 0x563ea81bf4a0 'off' 'u64_t':'unsigned long long'
| |               `-ImplicitCastExpr 0x563ea81c0898 <col:31> 'unsigned long long' <IntegralCast>
| |                 `-ImplicitCastExpr 0x563ea81c0880 <col:31> 'u32_t':'unsigned int' <LValueToRValue>
| |                   `-DeclRefExpr 0x563ea81c0858 <col:31> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81bbe98 'from_hz' 'u32_t':'unsigned int'
| `-AlwaysInlineAttr 0x563ea81bc338 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x563ea81c0b50 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:190:1, line:194:1> line:190:21 k_ms_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81c0a48 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81c0fa8 <line:191:1, line:194:1>
| | `-ReturnStmt 0x563ea81c0f68 <line:193:2, col:65>
| |   `-ImplicitCastExpr 0x563ea81c0f50 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea81c0e30 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea81c0e18 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea81c0bf8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea81c0ea8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea81c0e90 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea81c0c20 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81c0a48 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea81c0ec0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea81c0c48 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x563ea81c0ed8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea81c0cd0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea81c0cb8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea81c0c68 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea81c0ef0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea81c0d38 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea81c0d18 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea81c0cf8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea81c0f08 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81c0d58 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea81c0f20 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81c0d78 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x563ea81c0f38 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea81c0d98 <col:16> 'int' 0
| `-FullComment 0x563ea828bd60 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:182:4, line:188:35>
|   |-ParagraphComment 0x563ea828bb20 <line:182:4>
|   | `-TextComment 0x563ea828baf0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828bb40 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea828bba0 <col:11, col:50>
|   |   `-TextComment 0x563ea828bb70 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x563ea828bc40 <line:184:3, line:186:44>
|   | |-TextComment 0x563ea828bbc0 <line:184:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x563ea828bbe0 <line:185:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea828bc00 <line:186:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea828bc90 <line:188:3>
|   | `-TextComment 0x563ea828bc60 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828bcb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828bd10 <col:11, col:35>
|       `-TextComment 0x563ea828bce0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c10d0 <line:204:1, line:208:1> line:204:21 k_ms_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81c0fd0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81c2a18 <line:205:1, line:208:1>
| | `-ReturnStmt 0x563ea81c29d8 <line:207:2, col:66>
| |   `-CallExpr 0x563ea81c28d0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81c28b8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea81c1178 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea81c2930 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81c11a0 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81c0fd0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81c2948 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea81c11c8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x563ea81c2960 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea81c27d0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea81c27b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea81c2790 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea81c2978 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea81c2838 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea81c2818 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea81c27f8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81c2990 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81c2858 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81c29a8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81c2878 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x563ea81c29c0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea81c2898 <col:16> 'int' 0
| `-FullComment 0x563ea828c040 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:196:4, line:202:35>
|   |-ParagraphComment 0x563ea828be00 <line:196:4>
|   | `-TextComment 0x563ea828bdd0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828be20 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea828be80 <col:11, col:50>
|   |   `-TextComment 0x563ea828be50 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x563ea828bf20 <line:198:3, line:200:44>
|   | |-TextComment 0x563ea828bea0 <line:198:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x563ea828bec0 <line:199:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea828bee0 <line:200:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea828bf70 <line:202:3>
|   | `-TextComment 0x563ea828bf40 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828bf90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828bff0 <col:11, col:35>
|       `-TextComment 0x563ea828bfc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c2ac8 <line:218:1, line:222:1> line:218:21 k_ms_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81c2a40 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81c2e98 <line:219:1, line:222:1>
| | `-ReturnStmt 0x563ea81c2e58 <line:221:2, col:64>
| |   `-ImplicitCastExpr 0x563ea81c2e40 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea81c2d20 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea81c2d08 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea81c2b70 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea81c2d98 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea81c2d80 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea81c2b98 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81c2a40 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea81c2db0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea81c2bc0 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x563ea81c2dc8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea81c2c20 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea81c2c08 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea81c2be0 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea81c2de0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea81c2c88 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea81c2c68 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea81c2c48 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea81c2df8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81c2ca8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea81c2e10 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81c2cc8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x563ea81c2e28 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea81c2ce8 <col:16> 'int' 1
| `-FullComment 0x563ea828c320 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:210:4, line:216:35>
|   |-ParagraphComment 0x563ea828c0e0 <line:210:4>
|   | `-TextComment 0x563ea828c0b0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828c100 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea828c160 <col:11, col:50>
|   |   `-TextComment 0x563ea828c130 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x563ea828c200 <line:212:3, line:214:37>
|   | |-TextComment 0x563ea828c180 <line:212:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x563ea828c1a0 <line:213:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea828c1c0 <line:214:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea828c250 <line:216:3>
|   | `-TextComment 0x563ea828c220 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828c270 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828c2d0 <col:11, col:35>
|       `-TextComment 0x563ea828c2a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c2f48 <line:232:1, line:236:1> line:232:21 k_ms_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81c2ec0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81c32e8 <line:233:1, line:236:1>
| | `-ReturnStmt 0x563ea81c32a8 <line:235:2, col:65>
| |   `-CallExpr 0x563ea81c31a0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81c3188 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea81c2ff0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea81c3200 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81c3018 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81c2ec0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81c3218 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea81c3040 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x563ea81c3230 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea81c30a0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea81c3088 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea81c3060 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea81c3248 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea81c3108 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea81c30e8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea81c30c8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81c3260 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81c3128 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81c3278 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81c3148 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x563ea81c3290 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea81c3168 <col:16> 'int' 1
| `-FullComment 0x563ea828c600 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:224:4, line:230:35>
|   |-ParagraphComment 0x563ea828c3c0 <line:224:4>
|   | `-TextComment 0x563ea828c390 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828c3e0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea828c440 <col:11, col:50>
|   |   `-TextComment 0x563ea828c410 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x563ea828c4e0 <line:226:3, line:228:37>
|   | |-TextComment 0x563ea828c460 <line:226:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x563ea828c480 <line:227:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea828c4a0 <line:228:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea828c530 <line:230:3>
|   | `-TextComment 0x563ea828c500 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828c550 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828c5b0 <col:11, col:35>
|       `-TextComment 0x563ea828c580 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c3398 <line:246:1, line:250:1> line:246:21 k_ms_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81c3310 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81c3768 <line:247:1, line:250:1>
| | `-ReturnStmt 0x563ea81c3728 <line:249:2, col:64>
| |   `-ImplicitCastExpr 0x563ea81c3710 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea81c35f0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea81c35d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea81c3440 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea81c3668 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea81c3650 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea81c3468 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81c3310 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea81c3680 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea81c3490 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x563ea81c3698 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea81c34f0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea81c34d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea81c34b0 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea81c36b0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea81c3558 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea81c3538 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea81c3518 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea81c36c8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81c3578 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea81c36e0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81c3598 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x563ea81c36f8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea81c35b8 <col:16> 'int' 0
| `-FullComment 0x563ea828c8e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:238:4, line:244:35>
|   |-ParagraphComment 0x563ea828c6a0 <line:238:4>
|   | `-TextComment 0x563ea828c670 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828c6c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea828c720 <col:11, col:50>
|   |   `-TextComment 0x563ea828c6f0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x563ea828c7c0 <line:240:3, line:242:45>
|   | |-TextComment 0x563ea828c740 <line:240:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x563ea828c760 <line:241:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea828c780 <line:242:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea828c810 <line:244:3>
|   | `-TextComment 0x563ea828c7e0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828c830 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828c890 <col:11, col:35>
|       `-TextComment 0x563ea828c860 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c3828 <line:260:1, line:264:1> line:260:21 k_ms_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81c37a0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81c3bc8 <line:261:1, line:264:1>
| | `-ReturnStmt 0x563ea81c3b88 <line:263:2, col:65>
| |   `-CallExpr 0x563ea81c3a80 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81c3a68 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea81c38d0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea81c3ae0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81c38f8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81c37a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81c3af8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea81c3920 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x563ea81c3b10 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea81c3980 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea81c3968 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea81c3940 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea81c3b28 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea81c39e8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea81c39c8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea81c39a8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81c3b40 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81c3a08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81c3b58 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81c3a28 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x563ea81c3b70 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea81c3a48 <col:16> 'int' 0
| `-FullComment 0x563ea828cbc0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:252:4, line:258:35>
|   |-ParagraphComment 0x563ea828c980 <line:252:4>
|   | `-TextComment 0x563ea828c950 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828c9a0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea828ca00 <col:11, col:50>
|   |   `-TextComment 0x563ea828c9d0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x563ea828caa0 <line:254:3, line:256:45>
|   | |-TextComment 0x563ea828ca20 <line:254:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x563ea828ca40 <line:255:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea828ca60 <line:256:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea828caf0 <line:258:3>
|   | `-TextComment 0x563ea828cac0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828cb10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828cb70 <col:11, col:35>
|       `-TextComment 0x563ea828cb40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c3c78 <line:274:1, line:278:1> line:274:21 k_ms_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81c3bf0 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81c3ec8 <line:275:1, line:278:1>
| `-FullComment 0x563ea828cea0 <line:266:4, line:272:35>
|   |-ParagraphComment 0x563ea828cc60 <line:266:4>
|   | `-TextComment 0x563ea828cc30 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828cc80 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea828cce0 <col:11, col:40>
|   |   `-TextComment 0x563ea828ccb0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x563ea828cd80 <line:268:3, line:270:44>
|   | |-TextComment 0x563ea828cd00 <line:268:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x563ea828cd20 <line:269:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea828cd40 <line:270:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea828cdd0 <line:272:3>
|   | `-TextComment 0x563ea828cda0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828cdf0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828ce50 <col:11, col:35>
|       `-TextComment 0x563ea828ce20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c3f70 <line:288:1, line:292:1> line:288:21 k_ms_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81c3ee8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81c41b8 <line:289:1, line:292:1>
| `-FullComment 0x563ea828d180 <line:280:4, line:286:35>
|   |-ParagraphComment 0x563ea828cf40 <line:280:4>
|   | `-TextComment 0x563ea828cf10 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828cf60 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea828cfc0 <col:11, col:40>
|   |   `-TextComment 0x563ea828cf90 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x563ea828d060 <line:282:3, line:284:44>
|   | |-TextComment 0x563ea828cfe0 <line:282:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x563ea828d000 <line:283:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea828d020 <line:284:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea828d0b0 <line:286:3>
|   | `-TextComment 0x563ea828d080 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828d0d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828d130 <col:11, col:35>
|       `-TextComment 0x563ea828d100 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c4260 <line:302:1, line:306:1> line:302:21 k_ms_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81c41d8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81c44a8 <line:303:1, line:306:1>
| `-FullComment 0x563ea828d480 <line:294:4, line:300:35>
|   |-ParagraphComment 0x563ea828d220 <line:294:4>
|   | `-TextComment 0x563ea828d1f0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828d240 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea828d2a0 <col:11, col:40>
|   |   `-TextComment 0x563ea828d270 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x563ea828d340 <line:296:3, line:298:37>
|   | |-TextComment 0x563ea828d2c0 <line:296:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x563ea828d2e0 <line:297:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea828d300 <line:298:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea828d390 <line:300:3>
|   | `-TextComment 0x563ea828d360 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828d3b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828d430 <col:11, col:35>
|       `-TextComment 0x563ea828d400 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c4550 <line:316:1, line:320:1> line:316:21 k_ms_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81c44c8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81c4f10 <line:317:1, line:320:1>
| `-FullComment 0x563ea828d760 <line:308:4, line:314:35>
|   |-ParagraphComment 0x563ea828d520 <line:308:4>
|   | `-TextComment 0x563ea828d4f0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828d540 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea828d5a0 <col:11, col:40>
|   |   `-TextComment 0x563ea828d570 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x563ea828d640 <line:310:3, line:312:37>
|   | |-TextComment 0x563ea828d5c0 <line:310:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x563ea828d5e0 <line:311:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea828d600 <line:312:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea828d690 <line:314:3>
|   | `-TextComment 0x563ea828d660 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828d6b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828d710 <col:11, col:35>
|       `-TextComment 0x563ea828d6e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c4fb8 <line:330:1, line:334:1> line:330:21 k_ms_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81c4f30 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81c5208 <line:331:1, line:334:1>
| `-FullComment 0x563ea828da40 <line:322:4, line:328:35>
|   |-ParagraphComment 0x563ea828d800 <line:322:4>
|   | `-TextComment 0x563ea828d7d0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828d820 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea828d880 <col:11, col:40>
|   |   `-TextComment 0x563ea828d850 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x563ea828d920 <line:324:3, line:326:45>
|   | |-TextComment 0x563ea828d8a0 <line:324:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x563ea828d8c0 <line:325:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea828d8e0 <line:326:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea828d970 <line:328:3>
|   | `-TextComment 0x563ea828d940 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828d990 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828d9f0 <col:11, col:35>
|       `-TextComment 0x563ea828d9c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c52b0 <line:344:1, line:348:1> line:344:21 k_ms_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81c5228 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81c54f8 <line:345:1, line:348:1>
| `-FullComment 0x563ea828dd20 <line:336:4, line:342:35>
|   |-ParagraphComment 0x563ea828dae0 <line:336:4>
|   | `-TextComment 0x563ea828dab0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828db00 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea828db60 <col:11, col:40>
|   |   `-TextComment 0x563ea828db30 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x563ea828dc00 <line:338:3, line:340:45>
|   | |-TextComment 0x563ea828db80 <line:338:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x563ea828dba0 <line:339:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea828dbc0 <line:340:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea828dc50 <line:342:3>
|   | `-TextComment 0x563ea828dc20 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828dc70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828dcd0 <col:11, col:35>
|       `-TextComment 0x563ea828dca0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c55a0 <line:358:1, line:362:1> line:358:21 k_us_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81c5518 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81c5978 <line:359:1, line:362:1>
| | `-ReturnStmt 0x563ea81c5930 <line:361:2, col:65>
| |   `-ImplicitCastExpr 0x563ea81c5918 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea81c57f8 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea81c57e0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea81c5648 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea81c5870 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea81c5858 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea81c5670 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81c5518 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea81c5888 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea81c5698 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x563ea81c58a0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea81c56f8 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea81c56e0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea81c56b8 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea81c58b8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea81c5760 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea81c5740 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea81c5720 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea81c58d0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81c5780 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea81c58e8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81c57a0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x563ea81c5900 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea81c57c0 <col:16> 'int' 0
| `-FullComment 0x563ea828e000 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:350:4, line:356:35>
|   |-ParagraphComment 0x563ea828ddc0 <line:350:4>
|   | `-TextComment 0x563ea828dd90 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828dde0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea828de40 <col:11, col:50>
|   |   `-TextComment 0x563ea828de10 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x563ea828dee0 <line:352:3, line:354:44>
|   | |-TextComment 0x563ea828de60 <line:352:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x563ea828de80 <line:353:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea828dea0 <line:354:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea828df30 <line:356:3>
|   | `-TextComment 0x563ea828df00 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828df50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828dfb0 <col:11, col:35>
|       `-TextComment 0x563ea828df80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c5a28 <line:372:1, line:376:1> line:372:21 k_us_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81c59a0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81c5dc8 <line:373:1, line:376:1>
| | `-ReturnStmt 0x563ea81c5d88 <line:375:2, col:66>
| |   `-CallExpr 0x563ea81c5c80 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81c5c68 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea81c5ad0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea81c5ce0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81c5af8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81c59a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81c5cf8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea81c5b20 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x563ea81c5d10 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea81c5b80 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea81c5b68 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea81c5b40 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea81c5d28 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea81c5be8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea81c5bc8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea81c5ba8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81c5d40 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81c5c08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81c5d58 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81c5c28 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x563ea81c5d70 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea81c5c48 <col:16> 'int' 0
| `-FullComment 0x563ea828e2e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:364:4, line:370:35>
|   |-ParagraphComment 0x563ea828e0a0 <line:364:4>
|   | `-TextComment 0x563ea828e070 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828e0c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea828e120 <col:11, col:50>
|   |   `-TextComment 0x563ea828e0f0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x563ea828e1c0 <line:366:3, line:368:44>
|   | |-TextComment 0x563ea828e140 <line:366:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x563ea828e160 <line:367:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea828e180 <line:368:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea828e210 <line:370:3>
|   | `-TextComment 0x563ea828e1e0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828e230 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828e290 <col:11, col:35>
|       `-TextComment 0x563ea828e260 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c5f20 <line:386:1, line:390:1> line:386:21 k_us_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81c5df0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81c62f8 <line:387:1, line:390:1>
| | `-ReturnStmt 0x563ea81c62b0 <line:389:2, col:64>
| |   `-ImplicitCastExpr 0x563ea81c6298 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea81c6178 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea81c6160 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea81c5fc8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea81c61f0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea81c61d8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea81c5ff0 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81c5df0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea81c6208 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea81c6018 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x563ea81c6220 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea81c6078 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea81c6060 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea81c6038 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea81c6238 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea81c60e0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea81c60c0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea81c60a0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea81c6250 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81c6100 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea81c6268 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81c6120 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x563ea81c6280 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea81c6140 <col:16> 'int' 1
| `-FullComment 0x563ea828e5c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:378:4, line:384:35>
|   |-ParagraphComment 0x563ea828e380 <line:378:4>
|   | `-TextComment 0x563ea828e350 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828e3a0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea828e400 <col:11, col:50>
|   |   `-TextComment 0x563ea828e3d0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x563ea828e4a0 <line:380:3, line:382:37>
|   | |-TextComment 0x563ea828e420 <line:380:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x563ea828e440 <line:381:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea828e460 <line:382:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea828e4f0 <line:384:3>
|   | `-TextComment 0x563ea828e4c0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828e510 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828e570 <col:11, col:35>
|       `-TextComment 0x563ea828e540 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c63a8 <line:400:1, line:404:1> line:400:21 k_us_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81c6320 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81c6748 <line:401:1, line:404:1>
| | `-ReturnStmt 0x563ea81c6708 <line:403:2, col:65>
| |   `-CallExpr 0x563ea81c6600 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81c65e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea81c6450 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea81c6660 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81c6478 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81c6320 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81c6678 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea81c64a0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x563ea81c6690 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea81c6500 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea81c64e8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea81c64c0 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea81c66a8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea81c6568 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea81c6548 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea81c6528 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81c66c0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81c6588 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81c66d8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81c65a8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x563ea81c66f0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea81c65c8 <col:16> 'int' 1
| `-FullComment 0x563ea828e8a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:392:4, line:398:35>
|   |-ParagraphComment 0x563ea828e660 <line:392:4>
|   | `-TextComment 0x563ea828e630 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828e680 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea828e6e0 <col:11, col:50>
|   |   `-TextComment 0x563ea828e6b0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x563ea828e780 <line:394:3, line:396:37>
|   | |-TextComment 0x563ea828e700 <line:394:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x563ea828e720 <line:395:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea828e740 <line:396:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea828e7d0 <line:398:3>
|   | `-TextComment 0x563ea828e7a0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828e7f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828e850 <col:11, col:35>
|       `-TextComment 0x563ea828e820 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c67f8 <line:414:1, line:418:1> line:414:21 k_us_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81c6770 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81c6bc8 <line:415:1, line:418:1>
| | `-ReturnStmt 0x563ea81c6b88 <line:417:2, col:64>
| |   `-ImplicitCastExpr 0x563ea81c6b70 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea81c6a50 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea81c6a38 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea81c68a0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea81c6ac8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea81c6ab0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea81c68c8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81c6770 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea81c6ae0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea81c68f0 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x563ea81c6af8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea81c6950 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea81c6938 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea81c6910 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea81c6b10 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea81c69b8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea81c6998 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea81c6978 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea81c6b28 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81c69d8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea81c6b40 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81c69f8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x563ea81c6b58 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea81c6a18 <col:16> 'int' 0
| `-FullComment 0x563ea828eb80 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:406:4, line:412:35>
|   |-ParagraphComment 0x563ea828e940 <line:406:4>
|   | `-TextComment 0x563ea828e910 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828e960 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea828e9c0 <col:11, col:50>
|   |   `-TextComment 0x563ea828e990 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x563ea828ea60 <line:408:3, line:410:45>
|   | |-TextComment 0x563ea828e9e0 <line:408:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x563ea828ea00 <line:409:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea828ea20 <line:410:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea828eab0 <line:412:3>
|   | `-TextComment 0x563ea828ea80 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828ead0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828eb30 <col:11, col:35>
|       `-TextComment 0x563ea828eb00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c6c78 <line:428:1, line:432:1> line:428:21 k_us_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81c6bf0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81c7058 <line:429:1, line:432:1>
| | `-ReturnStmt 0x563ea81c7018 <line:431:2, col:65>
| |   `-CallExpr 0x563ea81c6ed0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81c6eb8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea81c6d20 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea81c6f70 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81c6d48 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81c6bf0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81c6f88 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea81c6d70 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x563ea81c6fa0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea81c6dd0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea81c6db8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea81c6d90 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea81c6fb8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea81c6e38 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea81c6e18 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea81c6df8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81c6fd0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81c6e58 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81c6fe8 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81c6e78 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x563ea81c7000 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea81c6e98 <col:16> 'int' 0
| `-FullComment 0x563ea828ee60 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:420:4, line:426:35>
|   |-ParagraphComment 0x563ea828ec20 <line:420:4>
|   | `-TextComment 0x563ea828ebf0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828ec40 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea828eca0 <col:11, col:50>
|   |   `-TextComment 0x563ea828ec70 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x563ea828ed40 <line:422:3, line:424:45>
|   | |-TextComment 0x563ea828ecc0 <line:422:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x563ea828ece0 <line:423:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea828ed00 <line:424:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea828ed90 <line:426:3>
|   | `-TextComment 0x563ea828ed60 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828edb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828ee10 <col:11, col:35>
|       `-TextComment 0x563ea828ede0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c7108 <line:442:1, line:446:1> line:442:21 k_us_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81c7080 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81c7358 <line:443:1, line:446:1>
| `-FullComment 0x563ea828f140 <line:434:4, line:440:35>
|   |-ParagraphComment 0x563ea828ef00 <line:434:4>
|   | `-TextComment 0x563ea828eed0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828ef20 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea828ef80 <col:11, col:40>
|   |   `-TextComment 0x563ea828ef50 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x563ea828f020 <line:436:3, line:438:44>
|   | |-TextComment 0x563ea828efa0 <line:436:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x563ea828efc0 <line:437:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea828efe0 <line:438:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea828f070 <line:440:3>
|   | `-TextComment 0x563ea828f040 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828f090 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828f0f0 <col:11, col:35>
|       `-TextComment 0x563ea828f0c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c7400 <line:456:1, line:460:1> line:456:21 k_us_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81c7378 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81c7648 <line:457:1, line:460:1>
| `-FullComment 0x563ea828f440 <line:448:4, line:454:35>
|   |-ParagraphComment 0x563ea828f1e0 <line:448:4>
|   | `-TextComment 0x563ea828f1b0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828f200 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea828f260 <col:11, col:40>
|   |   `-TextComment 0x563ea828f230 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x563ea828f300 <line:450:3, line:452:44>
|   | |-TextComment 0x563ea828f280 <line:450:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x563ea828f2a0 <line:451:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea828f2c0 <line:452:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea828f350 <line:454:3>
|   | `-TextComment 0x563ea828f320 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828f370 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828f3d0 <col:11, col:35>
|       `-TextComment 0x563ea828f3a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c76f0 <line:470:1, line:474:1> line:470:21 k_us_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81c7668 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81c7938 <line:471:1, line:474:1>
| `-FullComment 0x563ea828f720 <line:462:4, line:468:35>
|   |-ParagraphComment 0x563ea828f4e0 <line:462:4>
|   | `-TextComment 0x563ea828f4b0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828f500 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea828f560 <col:11, col:40>
|   |   `-TextComment 0x563ea828f530 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x563ea828f600 <line:464:3, line:466:37>
|   | |-TextComment 0x563ea828f580 <line:464:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x563ea828f5a0 <line:465:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea828f5c0 <line:466:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea828f650 <line:468:3>
|   | `-TextComment 0x563ea828f620 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828f670 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828f6d0 <col:11, col:35>
|       `-TextComment 0x563ea828f6a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c79e0 <line:484:1, line:488:1> line:484:21 k_us_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81c7958 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81c7c28 <line:485:1, line:488:1>
| `-FullComment 0x563ea828fa00 <line:476:4, line:482:35>
|   |-ParagraphComment 0x563ea828f7c0 <line:476:4>
|   | `-TextComment 0x563ea828f790 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828f7e0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea828f840 <col:11, col:40>
|   |   `-TextComment 0x563ea828f810 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x563ea828f8e0 <line:478:3, line:480:37>
|   | |-TextComment 0x563ea828f860 <line:478:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x563ea828f880 <line:479:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea828f8a0 <line:480:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea828f930 <line:482:3>
|   | `-TextComment 0x563ea828f900 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828f950 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828f9b0 <col:11, col:35>
|       `-TextComment 0x563ea828f980 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c7cd0 <line:498:1, line:502:1> line:498:21 k_us_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81c7c48 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81c7f18 <line:499:1, line:502:1>
| `-FullComment 0x563ea828fce0 <line:490:4, line:496:35>
|   |-ParagraphComment 0x563ea828faa0 <line:490:4>
|   | `-TextComment 0x563ea828fa70 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828fac0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea828fb20 <col:11, col:40>
|   |   `-TextComment 0x563ea828faf0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x563ea828fbc0 <line:492:3, line:494:45>
|   | |-TextComment 0x563ea828fb40 <line:492:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x563ea828fb60 <line:493:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea828fb80 <line:494:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea828fc10 <line:496:3>
|   | `-TextComment 0x563ea828fbe0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828fc30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828fc90 <col:11, col:35>
|       `-TextComment 0x563ea828fc60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c7fd8 <line:512:1, line:516:1> line:512:21 k_us_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81c7f50 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81c8228 <line:513:1, line:516:1>
| `-FullComment 0x563ea828ffc0 <line:504:4, line:510:35>
|   |-ParagraphComment 0x563ea828fd80 <line:504:4>
|   | `-TextComment 0x563ea828fd50 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea828fda0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea828fe00 <col:11, col:40>
|   |   `-TextComment 0x563ea828fdd0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x563ea828fea0 <line:506:3, line:508:45>
|   | |-TextComment 0x563ea828fe20 <line:506:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x563ea828fe40 <line:507:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea828fe60 <line:508:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea828fef0 <line:510:3>
|   | `-TextComment 0x563ea828fec0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea828ff10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea828ff70 <col:11, col:35>
|       `-TextComment 0x563ea828ff40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c82d0 <line:526:1, line:530:1> line:526:21 k_ns_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81c8248 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81c86a8 <line:527:1, line:530:1>
| | `-ReturnStmt 0x563ea81c8660 <line:529:2, col:65>
| |   `-ImplicitCastExpr 0x563ea81c8648 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea81c8528 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea81c8510 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea81c8378 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea81c85a0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea81c8588 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea81c83a0 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81c8248 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea81c85b8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea81c83c8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x563ea81c85d0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea81c8428 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea81c8410 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea81c83e8 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea81c85e8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea81c8490 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea81c8470 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea81c8450 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea81c8600 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81c84b0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea81c8618 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81c84d0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x563ea81c8630 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea81c84f0 <col:16> 'int' 0
| `-FullComment 0x563ea82902a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:518:4, line:524:35>
|   |-ParagraphComment 0x563ea8290060 <line:518:4>
|   | `-TextComment 0x563ea8290030 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8290080 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea82900e0 <col:11, col:49>
|   |   `-TextComment 0x563ea82900b0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x563ea8290180 <line:520:3, line:522:44>
|   | |-TextComment 0x563ea8290100 <line:520:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x563ea8290120 <line:521:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8290140 <line:522:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea82901d0 <line:524:3>
|   | `-TextComment 0x563ea82901a0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82901f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8290250 <col:11, col:35>
|       `-TextComment 0x563ea8290220 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c8758 <line:540:1, line:544:1> line:540:21 k_ns_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81c86d0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81c8af8 <line:541:1, line:544:1>
| | `-ReturnStmt 0x563ea81c8ab8 <line:543:2, col:66>
| |   `-CallExpr 0x563ea81c89b0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81c8998 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea81c8800 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea81c8a10 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81c8828 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81c86d0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81c8a28 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea81c8850 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x563ea81c8a40 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea81c88b0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea81c8898 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea81c8870 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea81c8a58 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea81c8918 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea81c88f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea81c88d8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81c8a70 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81c8938 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81c8a88 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81c8958 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x563ea81c8aa0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea81c8978 <col:16> 'int' 0
| `-FullComment 0x563ea8290580 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:532:4, line:538:35>
|   |-ParagraphComment 0x563ea8290340 <line:532:4>
|   | `-TextComment 0x563ea8290310 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8290360 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea82903c0 <col:11, col:49>
|   |   `-TextComment 0x563ea8290390 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x563ea8290460 <line:534:3, line:536:44>
|   | |-TextComment 0x563ea82903e0 <line:534:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x563ea8290400 <line:535:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8290420 <line:536:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea82904b0 <line:538:3>
|   | `-TextComment 0x563ea8290480 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82904d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8290530 <col:11, col:35>
|       `-TextComment 0x563ea8290500 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81c8ba8 <line:554:1, line:558:1> line:554:21 k_ns_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81c8b20 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81c9fa8 <line:555:1, line:558:1>
| | `-ReturnStmt 0x563ea81c9f60 <line:557:2, col:64>
| |   `-ImplicitCastExpr 0x563ea81c8f20 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea81c8e00 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea81c8de8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea81c8c50 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea81c8e78 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea81c8e60 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea81c8c78 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81c8b20 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea81c8e90 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea81c8ca0 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x563ea81c8ea8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea81c8d00 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea81c8ce8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea81c8cc0 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea81c8ec0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea81c8d68 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea81c8d48 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea81c8d28 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea81c8ed8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81c8d88 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea81c8ef0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81c8da8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x563ea81c8f08 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea81c8dc8 <col:16> 'int' 1
| `-FullComment 0x563ea8290860 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:546:4, line:552:35>
|   |-ParagraphComment 0x563ea8290620 <line:546:4>
|   | `-TextComment 0x563ea82905f0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8290640 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea82906a0 <col:11, col:49>
|   |   `-TextComment 0x563ea8290670 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x563ea8290740 <line:548:3, line:550:37>
|   | |-TextComment 0x563ea82906c0 <line:548:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x563ea82906e0 <line:549:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8290700 <line:550:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea8290790 <line:552:3>
|   | `-TextComment 0x563ea8290760 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82907b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8290810 <col:11, col:35>
|       `-TextComment 0x563ea82907e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81ca058 <line:568:1, line:572:1> line:568:21 k_ns_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81c9fd0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81ca3f8 <line:569:1, line:572:1>
| | `-ReturnStmt 0x563ea81ca3b8 <line:571:2, col:65>
| |   `-CallExpr 0x563ea81ca2b0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81ca298 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea81ca100 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea81ca310 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81ca128 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81c9fd0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81ca328 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea81ca150 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x563ea81ca340 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea81ca1b0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea81ca198 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea81ca170 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea81ca358 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea81ca218 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea81ca1f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea81ca1d8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81ca370 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81ca238 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81ca388 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81ca258 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x563ea81ca3a0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea81ca278 <col:16> 'int' 1
| `-FullComment 0x563ea8290b40 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:560:4, line:566:35>
|   |-ParagraphComment 0x563ea8290900 <line:560:4>
|   | `-TextComment 0x563ea82908d0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8290920 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea8290980 <col:11, col:49>
|   |   `-TextComment 0x563ea8290950 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x563ea8290a20 <line:562:3, line:564:37>
|   | |-TextComment 0x563ea82909a0 <line:562:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x563ea82909c0 <line:563:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea82909e0 <line:564:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea8290a70 <line:566:3>
|   | `-TextComment 0x563ea8290a40 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8290a90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8290af0 <col:11, col:35>
|       `-TextComment 0x563ea8290ac0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81ca4a8 <line:582:1, line:586:1> line:582:21 k_ns_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81ca420 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81ca878 <line:583:1, line:586:1>
| | `-ReturnStmt 0x563ea81ca838 <line:585:2, col:64>
| |   `-ImplicitCastExpr 0x563ea81ca820 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea81ca700 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea81ca6e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea81ca550 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea81ca778 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea81ca760 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea81ca578 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81ca420 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea81ca790 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea81ca5a0 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x563ea81ca7a8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea81ca600 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea81ca5e8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea81ca5c0 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea81ca7c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea81ca668 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea81ca648 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea81ca628 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea81ca7d8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81ca688 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea81ca7f0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81ca6a8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x563ea81ca808 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea81ca6c8 <col:16> 'int' 0
| `-FullComment 0x563ea8290e20 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:574:4, line:580:35>
|   |-ParagraphComment 0x563ea8290be0 <line:574:4>
|   | `-TextComment 0x563ea8290bb0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8290c00 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea8290c60 <col:11, col:49>
|   |   `-TextComment 0x563ea8290c30 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x563ea8290d00 <line:576:3, line:578:45>
|   | |-TextComment 0x563ea8290c80 <line:576:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x563ea8290ca0 <line:577:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8290cc0 <line:578:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea8290d50 <line:580:3>
|   | `-TextComment 0x563ea8290d20 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8290d70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8290dd0 <col:11, col:35>
|       `-TextComment 0x563ea8290da0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81ca928 <line:596:1, line:600:1> line:596:21 k_ns_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81ca8a0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81cacc8 <line:597:1, line:600:1>
| | `-ReturnStmt 0x563ea81cac88 <line:599:2, col:65>
| |   `-CallExpr 0x563ea81cab80 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81cab68 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea81ca9d0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea81cabe0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81ca9f8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81ca8a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81cabf8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea81caa20 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x563ea81cac10 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea81caa80 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea81caa68 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea81caa40 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea81cac28 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea81caae8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea81caac8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea81caaa8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81cac40 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81cab08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81cac58 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81cab28 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x563ea81cac70 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea81cab48 <col:16> 'int' 0
| `-FullComment 0x563ea8291100 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:588:4, line:594:35>
|   |-ParagraphComment 0x563ea8290ec0 <line:588:4>
|   | `-TextComment 0x563ea8290e90 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8290ee0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea8290f40 <col:11, col:49>
|   |   `-TextComment 0x563ea8290f10 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x563ea8290fe0 <line:590:3, line:592:45>
|   | |-TextComment 0x563ea8290f60 <line:590:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x563ea8290f80 <line:591:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8290fa0 <line:592:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea8291030 <line:594:3>
|   | `-TextComment 0x563ea8291000 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8291050 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea82910b0 <col:11, col:35>
|       `-TextComment 0x563ea8291080 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81cad78 <line:610:1, line:614:1> line:610:21 k_ns_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81cacf0 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea817f998 <line:611:1, line:614:1>
| `-FullComment 0x563ea82913e0 <line:602:4, line:608:35>
|   |-ParagraphComment 0x563ea82911a0 <line:602:4>
|   | `-TextComment 0x563ea8291170 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea82911c0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea8291220 <col:11, col:39>
|   |   `-TextComment 0x563ea82911f0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x563ea82912c0 <line:604:3, line:606:44>
|   | |-TextComment 0x563ea8291240 <line:604:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x563ea8291260 <line:605:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8291280 <line:606:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea8291310 <line:608:3>
|   | `-TextComment 0x563ea82912e0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8291330 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8291390 <col:11, col:35>
|       `-TextComment 0x563ea8291360 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea817fa40 <line:624:1, line:628:1> line:624:21 k_ns_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea817f9b8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea817fc88 <line:625:1, line:628:1>
| `-FullComment 0x563ea82916d0 <line:616:4, line:622:35>
|   |-ParagraphComment 0x563ea8291490 <line:616:4>
|   | `-TextComment 0x563ea8291460 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea82914b0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea8291510 <col:11, col:39>
|   |   `-TextComment 0x563ea82914e0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x563ea82915b0 <line:618:3, line:620:44>
|   | |-TextComment 0x563ea8291530 <line:618:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x563ea8291550 <line:619:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8291570 <line:620:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea8291600 <line:622:3>
|   | `-TextComment 0x563ea82915d0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8291620 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8291680 <col:11, col:35>
|       `-TextComment 0x563ea8291650 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea817fd30 <line:638:1, line:642:1> line:638:21 k_ns_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea817fca8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea817ff78 <line:639:1, line:642:1>
| `-FullComment 0x563ea82919b0 <line:630:4, line:636:35>
|   |-ParagraphComment 0x563ea8291770 <line:630:4>
|   | `-TextComment 0x563ea8291740 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8291790 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea82917f0 <col:11, col:39>
|   |   `-TextComment 0x563ea82917c0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x563ea8291890 <line:632:3, line:634:37>
|   | |-TextComment 0x563ea8291810 <line:632:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x563ea8291830 <line:633:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8291850 <line:634:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea82918e0 <line:636:3>
|   | `-TextComment 0x563ea82918b0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8291900 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8291960 <col:11, col:35>
|       `-TextComment 0x563ea8291930 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea8180020 <line:652:1, line:656:1> line:652:21 k_ns_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea817ff98 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea8180268 <line:653:1, line:656:1>
| `-FullComment 0x563ea8291c90 <line:644:4, line:650:35>
|   |-ParagraphComment 0x563ea8291a50 <line:644:4>
|   | `-TextComment 0x563ea8291a20 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8291a70 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea8291ad0 <col:11, col:39>
|   |   `-TextComment 0x563ea8291aa0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x563ea8291b70 <line:646:3, line:648:37>
|   | |-TextComment 0x563ea8291af0 <line:646:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x563ea8291b10 <line:647:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8291b30 <line:648:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea8291bc0 <line:650:3>
|   | `-TextComment 0x563ea8291b90 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8291be0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8291c40 <col:11, col:35>
|       `-TextComment 0x563ea8291c10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea8180310 <line:666:1, line:670:1> line:666:21 k_ns_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea8180288 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81804d8 <line:667:1, line:670:1>
| `-FullComment 0x563ea8291f70 <line:658:4, line:664:35>
|   |-ParagraphComment 0x563ea8291d30 <line:658:4>
|   | `-TextComment 0x563ea8291d00 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8291d50 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea8291db0 <col:11, col:39>
|   |   `-TextComment 0x563ea8291d80 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x563ea8291e50 <line:660:3, line:662:45>
|   | |-TextComment 0x563ea8291dd0 <line:660:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x563ea8291df0 <line:661:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8291e10 <line:662:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea8291ea0 <line:664:3>
|   | `-TextComment 0x563ea8291e70 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8291ec0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8291f20 <col:11, col:35>
|       `-TextComment 0x563ea8291ef0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea8180580 <line:680:1, line:684:1> line:680:21 k_ns_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81804f8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea8180748 <line:681:1, line:684:1>
| `-FullComment 0x563ea8292250 <line:672:4, line:678:35>
|   |-ParagraphComment 0x563ea8292010 <line:672:4>
|   | `-TextComment 0x563ea8291fe0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8292030 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea8292090 <col:11, col:39>
|   |   `-TextComment 0x563ea8292060 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x563ea8292130 <line:674:3, line:676:45>
|   | |-TextComment 0x563ea82920b0 <line:674:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x563ea82920d0 <line:675:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea82920f0 <line:676:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea8292180 <line:678:3>
|   | `-TextComment 0x563ea8292150 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82921a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8292200 <col:11, col:35>
|       `-TextComment 0x563ea82921d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81807f0 <line:694:1, line:698:1> line:694:21 k_cyc_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea8180768 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea8180bd8 <line:695:1, line:698:1>
| | `-ReturnStmt 0x563ea8180b98 <line:697:2, col:65>
| |   `-ImplicitCastExpr 0x563ea8180b80 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea8180a60 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea8180a48 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea8180898 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea8180ad8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea8180ac0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea81808c0 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea8180768 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea8180af0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea8180940 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea8180910 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea81808e8 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea8180b08 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea8180968 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x563ea8180b20 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea81809c8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea81809a8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea8180988 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea8180b38 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81809e8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea8180b50 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea8180a08 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x563ea8180b68 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea8180a28 <col:16> 'int' 0
| `-FullComment 0x563ea8292530 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:686:4, line:692:35>
|   |-ParagraphComment 0x563ea82922f0 <line:686:4>
|   | `-TextComment 0x563ea82922c0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8292310 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea8292370 <col:11, col:50>
|   |   `-TextComment 0x563ea8292340 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x563ea8292410 <line:688:3, line:690:44>
|   | |-TextComment 0x563ea8292390 <line:688:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x563ea82923b0 <line:689:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea82923d0 <line:690:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea8292460 <line:692:3>
|   | `-TextComment 0x563ea8292430 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8292480 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea82924e0 <col:11, col:35>
|       `-TextComment 0x563ea82924b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea8180c88 <line:708:1, line:712:1> line:708:21 k_cyc_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea8180c00 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea8181028 <line:709:1, line:712:1>
| | `-ReturnStmt 0x563ea8180fe8 <line:711:2, col:66>
| |   `-CallExpr 0x563ea8180ee0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea8180ec8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea8180d30 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea8180f40 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea8180d58 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea8180c00 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea8180f58 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea8180dc0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea8180da8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea8180d80 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea8180f70 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea8180de8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x563ea8180f88 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea8180e48 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea8180e28 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea8180e08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea8180fa0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea8180e68 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea8180fb8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea8180e88 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x563ea8180fd0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea8180ea8 <col:16> 'int' 0
| `-FullComment 0x563ea8292810 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:700:4, line:706:35>
|   |-ParagraphComment 0x563ea82925d0 <line:700:4>
|   | `-TextComment 0x563ea82925a0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea82925f0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea8292650 <col:11, col:50>
|   |   `-TextComment 0x563ea8292620 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x563ea82926f0 <line:702:3, line:704:44>
|   | |-TextComment 0x563ea8292670 <line:702:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x563ea8292690 <line:703:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea82926b0 <line:704:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea8292740 <line:706:3>
|   | `-TextComment 0x563ea8292710 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8292760 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea82927c0 <col:11, col:35>
|       `-TextComment 0x563ea8292790 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81810d8 <line:722:1, line:726:1> line:722:21 k_cyc_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea8181050 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81814a8 <line:723:1, line:726:1>
| | `-ReturnStmt 0x563ea8181468 <line:725:2, col:64>
| |   `-ImplicitCastExpr 0x563ea8181450 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea8181330 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea8181318 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea8181180 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea81813a8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea8181390 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea81811a8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea8181050 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea81813c0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea8181210 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea81811f8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea81811d0 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea81813d8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea8181238 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x563ea81813f0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea8181298 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea8181278 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea8181258 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea8181408 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81812b8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea8181420 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81812d8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x563ea8181438 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea81812f8 <col:16> 'int' 1
| `-FullComment 0x563ea8292af0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:714:4, line:720:35>
|   |-ParagraphComment 0x563ea82928b0 <line:714:4>
|   | `-TextComment 0x563ea8292880 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea82928d0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea8292930 <col:11, col:50>
|   |   `-TextComment 0x563ea8292900 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x563ea82929d0 <line:716:3, line:718:37>
|   | |-TextComment 0x563ea8292950 <line:716:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x563ea8292970 <line:717:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8292990 <line:718:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea8292a20 <line:720:3>
|   | `-TextComment 0x563ea82929f0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8292a40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8292aa0 <col:11, col:35>
|       `-TextComment 0x563ea8292a70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea8181558 <line:736:1, line:740:1> line:736:21 k_cyc_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81814d0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81818f8 <line:737:1, line:740:1>
| | `-ReturnStmt 0x563ea81818b8 <line:739:2, col:65>
| |   `-CallExpr 0x563ea81817b0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea8181798 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea8181600 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea8181810 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea8181628 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81814d0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea8181828 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea8181690 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea8181678 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea8181650 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea8181840 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea81816b8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x563ea8181858 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea8181718 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea81816f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea81816d8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea8181870 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea8181738 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea8181888 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea8181758 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x563ea81818a0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea8181778 <col:16> 'int' 1
| `-FullComment 0x563ea8292dd0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:728:4, line:734:35>
|   |-ParagraphComment 0x563ea8292b90 <line:728:4>
|   | `-TextComment 0x563ea8292b60 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8292bb0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea8292c10 <col:11, col:50>
|   |   `-TextComment 0x563ea8292be0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x563ea8292cb0 <line:730:3, line:732:37>
|   | |-TextComment 0x563ea8292c30 <line:730:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x563ea8292c50 <line:731:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8292c70 <line:732:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea8292d00 <line:734:3>
|   | `-TextComment 0x563ea8292cd0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8292d20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8292d80 <col:11, col:35>
|       `-TextComment 0x563ea8292d50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81819d8 <line:750:1, line:754:1> line:750:21 k_cyc_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea8181950 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea8181da8 <line:751:1, line:754:1>
| | `-ReturnStmt 0x563ea8181d68 <line:753:2, col:64>
| |   `-ImplicitCastExpr 0x563ea8181d50 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea8181c30 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea8181c18 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea8181a80 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea8181ca8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea8181c90 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea8181aa8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea8181950 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea8181cc0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea8181b10 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea8181af8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea8181ad0 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea8181cd8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea8181b38 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x563ea8181cf0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea8181b98 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea8181b78 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea8181b58 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea8181d08 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea8181bb8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea8181d20 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea8181bd8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x563ea8181d38 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea8181bf8 <col:16> 'int' 0
| `-FullComment 0x563ea82930b0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:742:4, line:748:35>
|   |-ParagraphComment 0x563ea8292e70 <line:742:4>
|   | `-TextComment 0x563ea8292e40 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8292e90 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea8292ef0 <col:11, col:50>
|   |   `-TextComment 0x563ea8292ec0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x563ea8292f90 <line:744:3, line:746:45>
|   | |-TextComment 0x563ea8292f10 <line:744:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x563ea8292f30 <line:745:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8292f50 <line:746:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea8292fe0 <line:748:3>
|   | `-TextComment 0x563ea8292fb0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8293000 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8293060 <col:11, col:35>
|       `-TextComment 0x563ea8293030 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea8181e58 <line:764:1, line:768:1> line:764:21 k_cyc_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea8181dd0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81821f8 <line:765:1, line:768:1>
| | `-ReturnStmt 0x563ea81821b8 <line:767:2, col:65>
| |   `-CallExpr 0x563ea81820b0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea8182098 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea8181f00 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea8182110 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea8181f28 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea8181dd0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea8182128 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea8181f90 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea8181f78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea8181f50 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea8182140 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea8181fb8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x563ea8182158 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea8182018 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea8181ff8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea8181fd8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea8182170 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea8182038 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea8182188 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea8182058 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x563ea81821a0 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea8182078 <col:16> 'int' 0
| `-FullComment 0x563ea8293390 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:756:4, line:762:35>
|   |-ParagraphComment 0x563ea8293150 <line:756:4>
|   | `-TextComment 0x563ea8293120 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8293170 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea82931d0 <col:11, col:50>
|   |   `-TextComment 0x563ea82931a0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x563ea8293270 <line:758:3, line:760:45>
|   | |-TextComment 0x563ea82931f0 <line:758:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x563ea8293210 <line:759:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8293230 <line:760:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea82932c0 <line:762:3>
|   | `-TextComment 0x563ea8293290 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82932e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8293340 <col:11, col:35>
|       `-TextComment 0x563ea8293310 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81822a8 <line:778:1, line:782:1> line:778:21 k_cyc_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea8182220 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea8182678 <line:779:1, line:782:1>
| | `-ReturnStmt 0x563ea8182638 <line:781:2, col:65>
| |   `-ImplicitCastExpr 0x563ea8182620 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea8182500 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea81824e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea8182350 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea8182578 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea8182560 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea8182378 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea8182220 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea8182590 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea81823e0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea81823c8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea81823a0 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea81825a8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea8182408 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x563ea81825c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea8182468 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea8182448 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea8182428 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea81825d8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea8182488 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea81825f0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81824a8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x563ea8182608 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea81824c8 <col:16> 'int' 0
| `-FullComment 0x563ea8293680 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:770:4, line:776:35>
|   |-ParagraphComment 0x563ea8293440 <line:770:4>
|   | `-TextComment 0x563ea8293400 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8293460 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea82934c0 <col:11, col:50>
|   |   `-TextComment 0x563ea8293490 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x563ea8293560 <line:772:3, line:774:44>
|   | |-TextComment 0x563ea82934e0 <line:772:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x563ea8293500 <line:773:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8293520 <line:774:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea82935b0 <line:776:3>
|   | `-TextComment 0x563ea8293580 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82935d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8293630 <col:11, col:35>
|       `-TextComment 0x563ea8293600 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea8182728 <line:792:1, line:796:1> line:792:21 k_cyc_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81826a0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea8182ae8 <line:793:1, line:796:1>
| | `-ReturnStmt 0x563ea8182aa0 <line:795:2, col:66>
| |   `-CallExpr 0x563ea8182998 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea8182980 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea81827d0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea81829f8 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81827f8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81826a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea8182a10 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea8182860 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea8182848 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea8182820 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea8182a28 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea8182888 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x563ea8182a40 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea81828e8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea81828c8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea81828a8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea8182a58 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea8182908 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea8182a70 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea8182928 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x563ea8182a88 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea8182960 <col:16> 'int' 0
| `-FullComment 0x563ea8293960 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:784:4, line:790:35>
|   |-ParagraphComment 0x563ea8293720 <line:784:4>
|   | `-TextComment 0x563ea82936f0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8293740 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea82937a0 <col:11, col:50>
|   |   `-TextComment 0x563ea8293770 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x563ea8293840 <line:786:3, line:788:44>
|   | |-TextComment 0x563ea82937c0 <line:786:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x563ea82937e0 <line:787:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8293800 <line:788:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea8293890 <line:790:3>
|   | `-TextComment 0x563ea8293860 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82938b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8293910 <col:11, col:35>
|       `-TextComment 0x563ea82938e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea8182b98 <line:806:1, line:810:1> line:806:21 k_cyc_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea8182b10 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea8182f68 <line:807:1, line:810:1>
| | `-ReturnStmt 0x563ea8182f28 <line:809:2, col:64>
| |   `-ImplicitCastExpr 0x563ea8182f10 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea8182df0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea8182dd8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea8182c40 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea8182e68 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea8182e50 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea8182c68 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea8182b10 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea8182e80 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea8182cd0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea8182cb8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea8182c90 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea8182e98 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea8182cf8 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x563ea8182eb0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea8182d58 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea8182d38 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea8182d18 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea8182ec8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea8182d78 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea8182ee0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea8182d98 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x563ea8182ef8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea8182db8 <col:16> 'int' 1
| `-FullComment 0x563ea8293c40 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:798:4, line:804:35>
|   |-ParagraphComment 0x563ea8293a00 <line:798:4>
|   | `-TextComment 0x563ea82939d0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8293a20 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea8293a80 <col:11, col:50>
|   |   `-TextComment 0x563ea8293a50 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x563ea8293b20 <line:800:3, line:802:37>
|   | |-TextComment 0x563ea8293aa0 <line:800:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x563ea8293ac0 <line:801:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8293ae0 <line:802:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea8293b70 <line:804:3>
|   | `-TextComment 0x563ea8293b40 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8293b90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8293bf0 <col:11, col:35>
|       `-TextComment 0x563ea8293bc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea8183018 <line:820:1, line:824:1> line:820:21 k_cyc_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea8182f90 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81833b8 <line:821:1, line:824:1>
| | `-ReturnStmt 0x563ea8183378 <line:823:2, col:65>
| |   `-CallExpr 0x563ea8183270 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea8183258 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea81830c0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea81832d0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81830e8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea8182f90 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81832e8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea8183150 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea8183138 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea8183110 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea8183300 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea8183178 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x563ea8183318 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea81831d8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea81831b8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea8183198 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea8183330 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81831f8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea8183348 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea8183218 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x563ea8183360 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea8183238 <col:16> 'int' 1
| `-FullComment 0x563ea8293f20 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:812:4, line:818:35>
|   |-ParagraphComment 0x563ea8293ce0 <line:812:4>
|   | `-TextComment 0x563ea8293cb0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8293d00 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea8293d60 <col:11, col:50>
|   |   `-TextComment 0x563ea8293d30 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x563ea8293e00 <line:814:3, line:816:37>
|   | |-TextComment 0x563ea8293d80 <line:814:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x563ea8293da0 <line:815:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8293dc0 <line:816:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea8293e50 <line:818:3>
|   | `-TextComment 0x563ea8293e20 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8293e70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8293ed0 <col:11, col:35>
|       `-TextComment 0x563ea8293ea0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea8183468 <line:834:1, line:838:1> line:834:21 k_cyc_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81833e0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea8183838 <line:835:1, line:838:1>
| | `-ReturnStmt 0x563ea81837f8 <line:837:2, col:64>
| |   `-ImplicitCastExpr 0x563ea81837e0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea81836c0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea81836a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea8183510 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea8183738 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea8183720 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea8183538 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81833e0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea8183750 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea81835a0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea8183588 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea8183560 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea8183768 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea81835c8 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x563ea8183780 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea8183628 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea8183608 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea81835e8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea8183798 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea8183648 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea81837b0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea8183668 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x563ea81837c8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea8183688 <col:16> 'int' 0
| `-FullComment 0x563ea8294200 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:826:4, line:832:35>
|   |-ParagraphComment 0x563ea8293fc0 <line:826:4>
|   | `-TextComment 0x563ea8293f90 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8293fe0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea8294040 <col:11, col:50>
|   |   `-TextComment 0x563ea8294010 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x563ea82940e0 <line:828:3, line:830:45>
|   | |-TextComment 0x563ea8294060 <line:828:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x563ea8294080 <line:829:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea82940a0 <line:830:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea8294130 <line:832:3>
|   | `-TextComment 0x563ea8294100 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8294150 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea82941b0 <col:11, col:35>
|       `-TextComment 0x563ea8294180 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea8183970 <line:848:1, line:852:1> line:848:21 k_cyc_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea8183860 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea8183d18 <line:849:1, line:852:1>
| | `-ReturnStmt 0x563ea8183cd0 <line:851:2, col:65>
| |   `-CallExpr 0x563ea8183bc8 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea8183bb0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea8183a18 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea8183c28 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea8183a40 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea8183860 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea8183c40 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea8183aa8 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea8183a90 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea8183a68 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea8183c58 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea8183ad0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x563ea8183c70 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea8183b30 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea8183b10 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea8183af0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea8183c88 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea8183b50 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea8183ca0 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea8183b70 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x563ea8183cb8 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea8183b90 <col:16> 'int' 0
| `-FullComment 0x563ea82944e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:840:4, line:846:35>
|   |-ParagraphComment 0x563ea82942a0 <line:840:4>
|   | `-TextComment 0x563ea8294270 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea82942c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea8294320 <col:11, col:50>
|   |   `-TextComment 0x563ea82942f0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x563ea82943c0 <line:842:3, line:844:45>
|   | |-TextComment 0x563ea8294340 <line:842:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x563ea8294360 <line:843:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8294380 <line:844:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea8294410 <line:846:3>
|   | `-TextComment 0x563ea82943e0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8294430 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8294490 <col:11, col:35>
|       `-TextComment 0x563ea8294460 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea8183dc8 <line:862:1, line:866:1> line:862:21 k_cyc_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea8183d40 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea8184198 <line:863:1, line:866:1>
| | `-ReturnStmt 0x563ea8184158 <line:865:2, col:65>
| |   `-ImplicitCastExpr 0x563ea8184140 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea8184020 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea8184008 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea8183e70 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea8184098 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea8184080 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea8183e98 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea8183d40 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea81840b0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea8183f00 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea8183ee8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea8183ec0 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea81840c8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea8183f28 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x563ea81840e0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea8183f88 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea8183f68 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea8183f48 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea81840f8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea8183fa8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea8184110 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea8183fc8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x563ea8184128 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea8183fe8 <col:16> 'int' 0
| `-FullComment 0x563ea82947c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:854:4, line:860:35>
|   |-ParagraphComment 0x563ea8294580 <line:854:4>
|   | `-TextComment 0x563ea8294550 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea82945a0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea8294600 <col:11, col:49>
|   |   `-TextComment 0x563ea82945d0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x563ea82946a0 <line:856:3, line:858:44>
|   | |-TextComment 0x563ea8294620 <line:856:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x563ea8294640 <line:857:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8294660 <line:858:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea82946f0 <line:860:3>
|   | `-TextComment 0x563ea82946c0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8294710 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8294770 <col:11, col:35>
|       `-TextComment 0x563ea8294740 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea8184248 <line:876:1, line:880:1> line:876:21 k_cyc_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81841c0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81845e8 <line:877:1, line:880:1>
| | `-ReturnStmt 0x563ea81845a8 <line:879:2, col:66>
| |   `-CallExpr 0x563ea81844a0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea8184488 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea81842f0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea8184500 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea8184318 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81841c0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea8184518 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea8184380 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea8184368 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea8184340 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea8184530 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea81843a8 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x563ea8184548 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea8184408 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea81843e8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea81843c8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea8184560 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea8184428 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea8184578 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea8184448 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x563ea8184590 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea8184468 <col:16> 'int' 0
| `-FullComment 0x563ea8294aa0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:868:4, line:874:35>
|   |-ParagraphComment 0x563ea8294860 <line:868:4>
|   | `-TextComment 0x563ea8294830 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8294880 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea82948e0 <col:11, col:49>
|   |   `-TextComment 0x563ea82948b0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x563ea8294980 <line:870:3, line:872:44>
|   | |-TextComment 0x563ea8294900 <line:870:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x563ea8294920 <line:871:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8294940 <line:872:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea82949d0 <line:874:3>
|   | `-TextComment 0x563ea82949a0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82949f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8294a50 <col:11, col:35>
|       `-TextComment 0x563ea8294a20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea8184698 <line:890:1, line:894:1> line:890:21 k_cyc_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea8184610 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81d7068 <line:891:1, line:894:1>
| | `-ReturnStmt 0x563ea81d7020 <line:893:2, col:64>
| |   `-ImplicitCastExpr 0x563ea81d7008 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea81848f0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea81848d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea8184740 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea81d6f60 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea8184950 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea8184768 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea8184610 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea81d6f78 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea81847d0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea81847b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea8184790 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea81d6f90 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea81847f8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x563ea81d6fa8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea8184858 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea8184838 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea8184818 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea81d6fc0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea8184878 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea81d6fd8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea8184898 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x563ea81d6ff0 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea81848b8 <col:16> 'int' 1
| `-FullComment 0x563ea8294d80 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:882:4, line:888:35>
|   |-ParagraphComment 0x563ea8294b40 <line:882:4>
|   | `-TextComment 0x563ea8294b10 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8294b60 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea8294bc0 <col:11, col:49>
|   |   `-TextComment 0x563ea8294b90 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x563ea8294c60 <line:884:3, line:886:37>
|   | |-TextComment 0x563ea8294be0 <line:884:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x563ea8294c00 <line:885:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8294c20 <line:886:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea8294cb0 <line:888:3>
|   | `-TextComment 0x563ea8294c80 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8294cd0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8294d30 <col:11, col:35>
|       `-TextComment 0x563ea8294d00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81d7118 <line:904:1, line:908:1> line:904:21 k_cyc_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81d7090 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81d74b8 <line:905:1, line:908:1>
| | `-ReturnStmt 0x563ea81d7478 <line:907:2, col:65>
| |   `-CallExpr 0x563ea81d7370 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81d7358 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea81d71c0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea81d73d0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81d71e8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81d7090 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81d73e8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea81d7250 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea81d7238 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea81d7210 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea81d7400 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea81d7278 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x563ea81d7418 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea81d72d8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea81d72b8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea81d7298 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81d7430 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81d72f8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81d7448 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81d7318 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x563ea81d7460 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea81d7338 <col:16> 'int' 1
| `-FullComment 0x563ea8295060 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:896:4, line:902:35>
|   |-ParagraphComment 0x563ea8294e20 <line:896:4>
|   | `-TextComment 0x563ea8294df0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8294e40 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea8294ea0 <col:11, col:49>
|   |   `-TextComment 0x563ea8294e70 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x563ea8294f40 <line:898:3, line:900:37>
|   | |-TextComment 0x563ea8294ec0 <line:898:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x563ea8294ee0 <line:899:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8294f00 <line:900:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea8294f90 <line:902:3>
|   | `-TextComment 0x563ea8294f60 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8294fb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8295010 <col:11, col:35>
|       `-TextComment 0x563ea8294fe0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81d7568 <line:918:1, line:922:1> line:918:21 k_cyc_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81d74e0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81d7938 <line:919:1, line:922:1>
| | `-ReturnStmt 0x563ea81d78f8 <line:921:2, col:64>
| |   `-ImplicitCastExpr 0x563ea81d78e0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea81d77c0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea81d77a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea81d7610 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x563ea81d7838 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563ea81d7820 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563ea81d7638 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81d74e0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x563ea81d7850 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x563ea81d76a0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x563ea81d7688 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x563ea81d7660 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x563ea81d7868 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x563ea81d76c8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x563ea81d7880 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x563ea81d7728 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x563ea81d7708 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x563ea81d76e8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x563ea81d7898 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81d7748 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x563ea81d78b0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x563ea81d7768 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x563ea81d78c8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x563ea81d7788 <col:16> 'int' 0
| `-FullComment 0x563ea8295340 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:910:4, line:916:35>
|   |-ParagraphComment 0x563ea8295100 <line:910:4>
|   | `-TextComment 0x563ea82950d0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8295120 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea8295180 <col:11, col:49>
|   |   `-TextComment 0x563ea8295150 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x563ea8295220 <line:912:3, line:914:45>
|   | |-TextComment 0x563ea82951a0 <line:912:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x563ea82951c0 <line:913:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea82951e0 <line:914:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea8295270 <line:916:3>
|   | `-TextComment 0x563ea8295240 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8295290 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea82952f0 <col:11, col:35>
|       `-TextComment 0x563ea82952c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81d79e8 <line:932:1, line:936:1> line:932:21 k_cyc_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81d7960 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81d7d88 <line:933:1, line:936:1>
| | `-ReturnStmt 0x563ea81d7d48 <line:935:2, col:65>
| |   `-CallExpr 0x563ea81d7c40 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81d7c28 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea81d7a90 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x563ea81bc260 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x563ea81d7ca0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81d7ab8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x563ea81d7960 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x563ea81d7cb8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x563ea81d7b20 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x563ea81d7b08 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x563ea81d7ae0 <col:18> 'int (void)' Function 0x563ea81bbd58 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x563ea81d7cd0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x563ea81d7b48 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x563ea81d7ce8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x563ea81d7ba8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x563ea81d7b88 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x563ea81d7b68 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81d7d00 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81d7bc8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x563ea81d7d18 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x563ea81d7be8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x563ea81d7d30 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x563ea81d7c08 <col:16> 'int' 0
| `-FullComment 0x563ea8295630 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:924:4, line:930:35>
|   |-ParagraphComment 0x563ea82953e0 <line:924:4>
|   | `-TextComment 0x563ea82953b0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8295400 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea8295470 <col:11, col:49>
|   |   `-TextComment 0x563ea8295440 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x563ea8295510 <line:926:3, line:928:45>
|   | |-TextComment 0x563ea8295490 <line:926:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x563ea82954b0 <line:927:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea82954d0 <line:928:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea8295560 <line:930:3>
|   | `-TextComment 0x563ea8295530 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8295580 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea82955e0 <col:11, col:35>
|       `-TextComment 0x563ea82955b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81d7e38 <line:946:1, line:950:1> line:946:21 k_cyc_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81d7db0 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81d8098 <line:947:1, line:950:1>
| `-FullComment 0x563ea8295910 <line:938:4, line:944:35>
|   |-ParagraphComment 0x563ea82956d0 <line:938:4>
|   | `-TextComment 0x563ea82956a0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea82956f0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea8295750 <col:11, col:43>
|   |   `-TextComment 0x563ea8295720 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x563ea82957f0 <line:940:3, line:942:44>
|   | |-TextComment 0x563ea8295770 <line:940:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x563ea8295790 <line:941:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea82957b0 <line:942:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea8295840 <line:944:3>
|   | `-TextComment 0x563ea8295810 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8295860 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea82958c0 <col:11, col:35>
|       `-TextComment 0x563ea8295890 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81d8140 <line:960:1, line:964:1> line:960:21 k_cyc_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81d80b8 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81d8388 <line:961:1, line:964:1>
| `-FullComment 0x563ea8295bf0 <line:952:4, line:958:35>
|   |-ParagraphComment 0x563ea82959b0 <line:952:4>
|   | `-TextComment 0x563ea8295980 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea82959d0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea8295a30 <col:11, col:43>
|   |   `-TextComment 0x563ea8295a00 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x563ea8295ad0 <line:954:3, line:956:44>
|   | |-TextComment 0x563ea8295a50 <line:954:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x563ea8295a70 <line:955:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8295a90 <line:956:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea8295b20 <line:958:3>
|   | `-TextComment 0x563ea8295af0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8295b40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8295ba0 <col:11, col:35>
|       `-TextComment 0x563ea8295b70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81d8430 <line:974:1, line:978:1> line:974:21 k_cyc_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81d83a8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81d8678 <line:975:1, line:978:1>
| `-FullComment 0x563ea8295ed0 <line:966:4, line:972:35>
|   |-ParagraphComment 0x563ea8295c90 <line:966:4>
|   | `-TextComment 0x563ea8295c60 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8295cb0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea8295d10 <col:11, col:43>
|   |   `-TextComment 0x563ea8295ce0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x563ea8295db0 <line:968:3, line:970:37>
|   | |-TextComment 0x563ea8295d30 <line:968:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x563ea8295d50 <line:969:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8295d70 <line:970:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea8295e00 <line:972:3>
|   | `-TextComment 0x563ea8295dd0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8295e20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8295e80 <col:11, col:35>
|       `-TextComment 0x563ea8295e50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81d8720 <line:988:1, line:992:1> line:988:21 k_cyc_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81d8698 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81d8968 <line:989:1, line:992:1>
| `-FullComment 0x563ea82961b0 <line:980:4, line:986:35>
|   |-ParagraphComment 0x563ea8295f70 <line:980:4>
|   | `-TextComment 0x563ea8295f40 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8295f90 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea8295ff0 <col:11, col:43>
|   |   `-TextComment 0x563ea8295fc0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x563ea8296090 <line:982:3, line:984:37>
|   | |-TextComment 0x563ea8296010 <line:982:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x563ea8296030 <line:983:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8296050 <line:984:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea82960e0 <line:986:3>
|   | `-TextComment 0x563ea82960b0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8296100 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8296160 <col:11, col:35>
|       `-TextComment 0x563ea8296130 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81d8a10 <line:1002:1, line:1006:1> line:1002:21 k_cyc_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81d8988 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81d8c58 <line:1003:1, line:1006:1>
| `-FullComment 0x563ea8296490 <line:994:4, line:1000:35>
|   |-ParagraphComment 0x563ea8296250 <line:994:4>
|   | `-TextComment 0x563ea8296220 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8296270 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea82962d0 <col:11, col:43>
|   |   `-TextComment 0x563ea82962a0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x563ea8296370 <line:996:3, line:998:45>
|   | |-TextComment 0x563ea82962f0 <line:996:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x563ea8296310 <line:997:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8296330 <line:998:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea82963c0 <line:1000:3>
|   | `-TextComment 0x563ea8296390 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82963e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8296440 <col:11, col:35>
|       `-TextComment 0x563ea8296410 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81d8d00 <line:1016:1, line:1020:1> line:1016:21 k_cyc_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81d8c78 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81d8f48 <line:1017:1, line:1020:1>
| `-FullComment 0x563ea8296770 <line:1008:4, line:1014:35>
|   |-ParagraphComment 0x563ea8296530 <line:1008:4>
|   | `-TextComment 0x563ea8296500 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8296550 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea82965b0 <col:11, col:43>
|   |   `-TextComment 0x563ea8296580 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x563ea8296650 <line:1010:3, line:1012:45>
|   | |-TextComment 0x563ea82965d0 <line:1010:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x563ea82965f0 <line:1011:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8296610 <line:1012:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea82966a0 <line:1014:3>
|   | `-TextComment 0x563ea8296670 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82966c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8296720 <col:11, col:35>
|       `-TextComment 0x563ea82966f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81d9008 <line:1030:1, line:1034:1> line:1030:21 k_ticks_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81d8f80 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81d91c8 <line:1031:1, line:1034:1>
| `-FullComment 0x563ea8296a50 <line:1022:4, line:1028:35>
|   |-ParagraphComment 0x563ea8296810 <line:1022:4>
|   | `-TextComment 0x563ea82967e0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8296830 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea8296890 <col:11, col:40>
|   |   `-TextComment 0x563ea8296860 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x563ea8296930 <line:1024:3, line:1026:44>
|   | |-TextComment 0x563ea82968b0 <line:1024:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x563ea82968d0 <line:1025:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea82968f0 <line:1026:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea8296980 <line:1028:3>
|   | `-TextComment 0x563ea8296950 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82969a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8296a00 <col:11, col:35>
|       `-TextComment 0x563ea82969d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81d9270 <line:1044:1, line:1048:1> line:1044:21 used k_ticks_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81d91e8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81d9438 <line:1045:1, line:1048:1>
| `-FullComment 0x563ea8296d30 <line:1036:4, line:1042:35>
|   |-ParagraphComment 0x563ea8296af0 <line:1036:4>
|   | `-TextComment 0x563ea8296ac0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8296b10 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea8296b70 <col:11, col:40>
|   |   `-TextComment 0x563ea8296b40 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x563ea8296c10 <line:1038:3, line:1040:44>
|   | |-TextComment 0x563ea8296b90 <line:1038:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x563ea8296bb0 <line:1039:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8296bd0 <line:1040:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea8296c60 <line:1042:3>
|   | `-TextComment 0x563ea8296c30 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8296c80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8296ce0 <col:11, col:35>
|       `-TextComment 0x563ea8296cb0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81d94e0 <line:1058:1, line:1062:1> line:1058:21 k_ticks_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81d9458 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81d96a8 <line:1059:1, line:1062:1>
| `-FullComment 0x563ea8297010 <line:1050:4, line:1056:35>
|   |-ParagraphComment 0x563ea8296dd0 <line:1050:4>
|   | `-TextComment 0x563ea8296da0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8296df0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea8296e50 <col:11, col:40>
|   |   `-TextComment 0x563ea8296e20 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x563ea8296ef0 <line:1052:3, line:1054:37>
|   | |-TextComment 0x563ea8296e70 <line:1052:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x563ea8296e90 <line:1053:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8296eb0 <line:1054:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea8296f40 <line:1056:3>
|   | `-TextComment 0x563ea8296f10 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8296f60 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8296fc0 <col:11, col:35>
|       `-TextComment 0x563ea8296f90 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81d9750 <line:1072:1, line:1076:1> line:1072:21 k_ticks_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81d96c8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81d9918 <line:1073:1, line:1076:1>
| `-FullComment 0x563ea82972f0 <line:1064:4, line:1070:35>
|   |-ParagraphComment 0x563ea82970b0 <line:1064:4>
|   | `-TextComment 0x563ea8297080 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea82970d0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea8297130 <col:11, col:40>
|   |   `-TextComment 0x563ea8297100 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x563ea82971d0 <line:1066:3, line:1068:37>
|   | |-TextComment 0x563ea8297150 <line:1066:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x563ea8297170 <line:1067:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8297190 <line:1068:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea8297220 <line:1070:3>
|   | `-TextComment 0x563ea82971f0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8297240 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea82972a0 <col:11, col:35>
|       `-TextComment 0x563ea8297270 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81d99c0 <line:1086:1, line:1090:1> line:1086:21 k_ticks_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81d9938 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81d9b88 <line:1087:1, line:1090:1>
| `-FullComment 0x563ea82975f0 <line:1078:4, line:1084:35>
|   |-ParagraphComment 0x563ea8297390 <line:1078:4>
|   | `-TextComment 0x563ea8297360 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea82973b0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea8297410 <col:11, col:40>
|   |   `-TextComment 0x563ea82973e0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x563ea82974d0 <line:1080:3, line:1082:45>
|   | |-TextComment 0x563ea8297450 <line:1080:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x563ea8297470 <line:1081:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8297490 <line:1082:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea8297520 <line:1084:3>
|   | `-TextComment 0x563ea82974f0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8297540 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea82975a0 <col:11, col:35>
|       `-TextComment 0x563ea8297570 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81d9c30 <line:1100:1, line:1104:1> line:1100:21 k_ticks_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81d9ba8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81d9df8 <line:1101:1, line:1104:1>
| `-FullComment 0x563ea82978d0 <line:1092:4, line:1098:35>
|   |-ParagraphComment 0x563ea8297690 <line:1092:4>
|   | `-TextComment 0x563ea8297660 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea82976b0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea8297710 <col:11, col:40>
|   |   `-TextComment 0x563ea82976e0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x563ea82977b0 <line:1094:3, line:1096:45>
|   | |-TextComment 0x563ea8297730 <line:1094:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x563ea8297750 <line:1095:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8297770 <line:1096:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea8297800 <line:1098:3>
|   | `-TextComment 0x563ea82977d0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8297820 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8297880 <col:11, col:35>
|       `-TextComment 0x563ea8297850 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81d9ea0 <line:1114:1, line:1118:1> line:1114:21 k_ticks_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81d9e18 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81db098 <line:1115:1, line:1118:1>
| `-FullComment 0x563ea8297bb0 <line:1106:4, line:1112:35>
|   |-ParagraphComment 0x563ea8297970 <line:1106:4>
|   | `-TextComment 0x563ea8297940 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8297990 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea82979f0 <col:11, col:40>
|   |   `-TextComment 0x563ea82979c0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x563ea8297a90 <line:1108:3, line:1110:44>
|   | |-TextComment 0x563ea8297a10 <line:1108:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x563ea8297a30 <line:1109:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8297a50 <line:1110:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea8297ae0 <line:1112:3>
|   | `-TextComment 0x563ea8297ab0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8297b00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8297b60 <col:11, col:35>
|       `-TextComment 0x563ea8297b30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81db140 <line:1128:1, line:1132:1> line:1128:21 k_ticks_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81db0b8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81db308 <line:1129:1, line:1132:1>
| `-FullComment 0x563ea8297e90 <line:1120:4, line:1126:35>
|   |-ParagraphComment 0x563ea8297c50 <line:1120:4>
|   | `-TextComment 0x563ea8297c20 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8297c70 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea8297cd0 <col:11, col:40>
|   |   `-TextComment 0x563ea8297ca0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x563ea8297d70 <line:1122:3, line:1124:44>
|   | |-TextComment 0x563ea8297cf0 <line:1122:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x563ea8297d10 <line:1123:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8297d30 <line:1124:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea8297dc0 <line:1126:3>
|   | `-TextComment 0x563ea8297d90 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8297de0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8297e40 <col:11, col:35>
|       `-TextComment 0x563ea8297e10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81db3b0 <line:1142:1, line:1146:1> line:1142:21 k_ticks_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81db328 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81db578 <line:1143:1, line:1146:1>
| `-FullComment 0x563ea8298170 <line:1134:4, line:1140:35>
|   |-ParagraphComment 0x563ea8297f30 <line:1134:4>
|   | `-TextComment 0x563ea8297f00 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8297f50 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea8297fb0 <col:11, col:40>
|   |   `-TextComment 0x563ea8297f80 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x563ea8298050 <line:1136:3, line:1138:37>
|   | |-TextComment 0x563ea8297fd0 <line:1136:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x563ea8297ff0 <line:1137:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8298010 <line:1138:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea82980a0 <line:1140:3>
|   | `-TextComment 0x563ea8298070 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82980c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8298120 <col:11, col:35>
|       `-TextComment 0x563ea82980f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81db620 <line:1156:1, line:1160:1> line:1156:21 k_ticks_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81db598 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81db7e8 <line:1157:1, line:1160:1>
| `-FullComment 0x563ea8298450 <line:1148:4, line:1154:35>
|   |-ParagraphComment 0x563ea8298210 <line:1148:4>
|   | `-TextComment 0x563ea82981e0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8298230 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea8298290 <col:11, col:40>
|   |   `-TextComment 0x563ea8298260 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x563ea8298330 <line:1150:3, line:1152:37>
|   | |-TextComment 0x563ea82982b0 <line:1150:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x563ea82982d0 <line:1151:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea82982f0 <line:1152:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea8298380 <line:1154:3>
|   | `-TextComment 0x563ea8298350 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82983a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8298400 <col:11, col:35>
|       `-TextComment 0x563ea82983d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81db890 <line:1170:1, line:1174:1> line:1170:21 k_ticks_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81db808 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81dba58 <line:1171:1, line:1174:1>
| `-FullComment 0x563ea8298730 <line:1162:4, line:1168:35>
|   |-ParagraphComment 0x563ea82984f0 <line:1162:4>
|   | `-TextComment 0x563ea82984c0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8298510 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea8298570 <col:11, col:40>
|   |   `-TextComment 0x563ea8298540 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x563ea8298610 <line:1164:3, line:1166:45>
|   | |-TextComment 0x563ea8298590 <line:1164:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x563ea82985b0 <line:1165:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea82985d0 <line:1166:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea8298660 <line:1168:3>
|   | `-TextComment 0x563ea8298630 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8298680 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea82986e0 <col:11, col:35>
|       `-TextComment 0x563ea82986b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81dbb00 <line:1184:1, line:1188:1> line:1184:21 k_ticks_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81dba78 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81dbcc8 <line:1185:1, line:1188:1>
| `-FullComment 0x563ea8298a10 <line:1176:4, line:1182:35>
|   |-ParagraphComment 0x563ea82987d0 <line:1176:4>
|   | `-TextComment 0x563ea82987a0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea82987f0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea8298850 <col:11, col:40>
|   |   `-TextComment 0x563ea8298820 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x563ea82988f0 <line:1178:3, line:1180:45>
|   | |-TextComment 0x563ea8298870 <line:1178:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x563ea8298890 <line:1179:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea82988b0 <line:1180:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea8298940 <line:1182:3>
|   | `-TextComment 0x563ea8298910 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8298960 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea82989c0 <col:11, col:35>
|       `-TextComment 0x563ea8298990 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81dbd70 <line:1198:1, line:1202:1> line:1198:21 k_ticks_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81dbce8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81dbf38 <line:1199:1, line:1202:1>
| `-FullComment 0x563ea8298cf0 <line:1190:4, line:1196:35>
|   |-ParagraphComment 0x563ea8298ab0 <line:1190:4>
|   | `-TextComment 0x563ea8298a80 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8298ad0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea8298b30 <col:11, col:39>
|   |   `-TextComment 0x563ea8298b00 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x563ea8298bd0 <line:1192:3, line:1194:44>
|   | |-TextComment 0x563ea8298b50 <line:1192:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x563ea8298b70 <line:1193:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8298b90 <line:1194:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea8298c20 <line:1196:3>
|   | `-TextComment 0x563ea8298bf0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8298c40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8298ca0 <col:11, col:35>
|       `-TextComment 0x563ea8298c70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81dc038 <line:1212:1, line:1216:1> line:1212:21 k_ticks_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81dbfb0 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81dc1f8 <line:1213:1, line:1216:1>
| `-FullComment 0x563ea8298fd0 <line:1204:4, line:1210:35>
|   |-ParagraphComment 0x563ea8298d90 <line:1204:4>
|   | `-TextComment 0x563ea8298d60 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8298db0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea8298e10 <col:11, col:39>
|   |   `-TextComment 0x563ea8298de0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x563ea8298eb0 <line:1206:3, line:1208:44>
|   | |-TextComment 0x563ea8298e30 <line:1206:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x563ea8298e50 <line:1207:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8298e70 <line:1208:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea8298f00 <line:1210:3>
|   | `-TextComment 0x563ea8298ed0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8298f20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8298f80 <col:11, col:35>
|       `-TextComment 0x563ea8298f50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81dc2a0 <line:1226:1, line:1230:1> line:1226:21 k_ticks_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81dc218 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81dc468 <line:1227:1, line:1230:1>
| `-FullComment 0x563ea82992b0 <line:1218:4, line:1224:35>
|   |-ParagraphComment 0x563ea8299070 <line:1218:4>
|   | `-TextComment 0x563ea8299040 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8299090 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea82990f0 <col:11, col:39>
|   |   `-TextComment 0x563ea82990c0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x563ea8299190 <line:1220:3, line:1222:37>
|   | |-TextComment 0x563ea8299110 <line:1220:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x563ea8299130 <line:1221:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8299150 <line:1222:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea82991e0 <line:1224:3>
|   | `-TextComment 0x563ea82991b0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8299200 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8299260 <col:11, col:35>
|       `-TextComment 0x563ea8299230 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81dc510 <line:1240:1, line:1244:1> line:1240:21 k_ticks_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81dc488 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81dc6d8 <line:1241:1, line:1244:1>
| `-FullComment 0x563ea82995a0 <line:1232:4, line:1238:35>
|   |-ParagraphComment 0x563ea8299350 <line:1232:4>
|   | `-TextComment 0x563ea8299320 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8299370 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea82993d0 <col:11, col:39>
|   |   `-TextComment 0x563ea82993a0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x563ea8299480 <line:1234:3, line:1236:37>
|   | |-TextComment 0x563ea82993f0 <line:1234:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x563ea8299410 <line:1235:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8299430 <line:1236:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea82994d0 <line:1238:3>
|   | `-TextComment 0x563ea82994a0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82994f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8299550 <col:11, col:35>
|       `-TextComment 0x563ea8299520 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81dc780 <line:1254:1, line:1258:1> line:1254:21 k_ticks_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81dc6f8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81dc948 <line:1255:1, line:1258:1>
| `-FullComment 0x563ea8299880 <line:1246:4, line:1252:35>
|   |-ParagraphComment 0x563ea8299640 <line:1246:4>
|   | `-TextComment 0x563ea8299610 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8299660 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea82996c0 <col:11, col:39>
|   |   `-TextComment 0x563ea8299690 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x563ea8299760 <line:1248:3, line:1250:45>
|   | |-TextComment 0x563ea82996e0 <line:1248:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x563ea8299700 <line:1249:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8299720 <line:1250:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea82997b0 <line:1252:3>
|   | `-TextComment 0x563ea8299780 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82997d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8299830 <col:11, col:35>
|       `-TextComment 0x563ea8299800 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81dc9f0 <line:1268:1, line:1272:1> line:1268:21 k_ticks_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81dc968 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81dcbb8 <line:1269:1, line:1272:1>
| `-FullComment 0x563ea8299b60 <line:1260:4, line:1266:35>
|   |-ParagraphComment 0x563ea8299920 <line:1260:4>
|   | `-TextComment 0x563ea82998f0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8299940 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea82999a0 <col:11, col:39>
|   |   `-TextComment 0x563ea8299970 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x563ea8299a40 <line:1262:3, line:1264:45>
|   | |-TextComment 0x563ea82999c0 <line:1262:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x563ea82999e0 <line:1263:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8299a00 <line:1264:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea8299a90 <line:1266:3>
|   | `-TextComment 0x563ea8299a60 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8299ab0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8299b10 <col:11, col:35>
|       `-TextComment 0x563ea8299ae0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81dcc60 <line:1282:1, line:1286:1> line:1282:21 k_ticks_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81dcbd8 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81dcea8 <line:1283:1, line:1286:1>
| `-FullComment 0x563ea8299e40 <line:1274:4, line:1280:35>
|   |-ParagraphComment 0x563ea8299c00 <line:1274:4>
|   | `-TextComment 0x563ea8299bd0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8299c20 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea8299c80 <col:11, col:43>
|   |   `-TextComment 0x563ea8299c50 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x563ea8299d20 <line:1276:3, line:1278:44>
|   | |-TextComment 0x563ea8299ca0 <line:1276:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x563ea8299cc0 <line:1277:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea8299ce0 <line:1278:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea8299d70 <line:1280:3>
|   | `-TextComment 0x563ea8299d40 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8299d90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea8299df0 <col:11, col:35>
|       `-TextComment 0x563ea8299dc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81dcfc0 <line:1296:1, line:1300:1> line:1296:21 k_ticks_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81dcec8 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81dd208 <line:1297:1, line:1300:1>
| `-FullComment 0x563ea829a120 <line:1288:4, line:1294:35>
|   |-ParagraphComment 0x563ea8299ee0 <line:1288:4>
|   | `-TextComment 0x563ea8299eb0 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea8299f00 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea8299f60 <col:11, col:43>
|   |   `-TextComment 0x563ea8299f30 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x563ea829a000 <line:1290:3, line:1292:44>
|   | |-TextComment 0x563ea8299f80 <line:1290:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x563ea8299fa0 <line:1291:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea8299fc0 <line:1292:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x563ea829a050 <line:1294:3>
|   | `-TextComment 0x563ea829a020 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea829a070 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea829a0d0 <col:11, col:35>
|       `-TextComment 0x563ea829a0a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81dd2b0 <line:1310:1, line:1314:1> line:1310:21 k_ticks_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81dd228 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81dd4f8 <line:1311:1, line:1314:1>
| `-FullComment 0x563ea829a400 <line:1302:4, line:1308:35>
|   |-ParagraphComment 0x563ea829a1c0 <line:1302:4>
|   | `-TextComment 0x563ea829a190 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea829a1e0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea829a240 <col:11, col:43>
|   |   `-TextComment 0x563ea829a210 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x563ea829a2e0 <line:1304:3, line:1306:37>
|   | |-TextComment 0x563ea829a260 <line:1304:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x563ea829a280 <line:1305:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea829a2a0 <line:1306:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea829a330 <line:1308:3>
|   | `-TextComment 0x563ea829a300 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea829a350 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea829a3b0 <col:11, col:35>
|       `-TextComment 0x563ea829a380 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81dd5a0 <line:1324:1, line:1328:1> line:1324:21 k_ticks_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81dd518 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81dd7e8 <line:1325:1, line:1328:1>
| `-FullComment 0x563ea829a6e0 <line:1316:4, line:1322:35>
|   |-ParagraphComment 0x563ea829a4a0 <line:1316:4>
|   | `-TextComment 0x563ea829a470 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea829a4c0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea829a520 <col:11, col:43>
|   |   `-TextComment 0x563ea829a4f0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x563ea829a5c0 <line:1318:3, line:1320:37>
|   | |-TextComment 0x563ea829a540 <line:1318:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x563ea829a560 <line:1319:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea829a580 <line:1320:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x563ea829a610 <line:1322:3>
|   | `-TextComment 0x563ea829a5e0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea829a630 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea829a690 <col:11, col:35>
|       `-TextComment 0x563ea829a660 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81dd890 <line:1338:1, line:1342:1> line:1338:21 k_ticks_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x563ea81dd808 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81ddad8 <line:1339:1, line:1342:1>
| `-FullComment 0x563ea829a9c0 <line:1330:4, line:1336:35>
|   |-ParagraphComment 0x563ea829a780 <line:1330:4>
|   | `-TextComment 0x563ea829a750 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea829a7a0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea829a800 <col:11, col:43>
|   |   `-TextComment 0x563ea829a7d0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x563ea829a8a0 <line:1332:3, line:1334:45>
|   | |-TextComment 0x563ea829a820 <line:1332:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x563ea829a840 <line:1333:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x563ea829a860 <line:1334:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea829a8f0 <line:1336:3>
|   | `-TextComment 0x563ea829a8c0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea829a910 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea829a970 <col:11, col:35>
|       `-TextComment 0x563ea829a940 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81ddb80 <line:1352:1, line:1356:1> line:1352:21 k_ticks_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x563ea81ddaf8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x563ea81dde28 <line:1353:1, line:1356:1>
| `-FullComment 0x563ea829aca0 <line:1344:4, line:1350:35>
|   |-ParagraphComment 0x563ea829aa60 <line:1344:4>
|   | `-TextComment 0x563ea829aa30 <col:4> Text=" "
|   |-BlockCommandComment 0x563ea829aa80 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea829aae0 <col:11, col:43>
|   |   `-TextComment 0x563ea829aab0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x563ea829ab80 <line:1346:3, line:1348:45>
|   | |-TextComment 0x563ea829ab00 <line:1346:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x563ea829ab20 <line:1347:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x563ea829ab40 <line:1348:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x563ea829abd0 <line:1350:3>
|   | `-TextComment 0x563ea829aba0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea829abf0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x563ea829ac50 <col:11, col:35>
|       `-TextComment 0x563ea829ac20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x563ea81ddec8 </vagrant/ext/zephyros/zephyr/include/sys_clock.h:117:1, col:25> col:7 z_tick_get_32 'u32_t (void)'
| `-FullComment 0x563ea829af30 <line:112:3, line:116:1>
|   |-ParagraphComment 0x563ea829ad40 <line:112:3>
|   | `-TextComment 0x563ea829ad10 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea829ad60 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x563ea829adc0 <col:10, col:64>
|   |   `-TextComment 0x563ea829ad90 <col:10, col:64> Text=" Return the lower part of the current system tick count"
|   |-ParagraphComment 0x563ea829ae10 <line:114:3>
|   | `-TextComment 0x563ea829ade0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea829ae30 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x563ea829ae90 <col:11, col:40>
|   |   `-TextComment 0x563ea829ae60 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x563ea829aee0 <line:116:1>
|     `-TextComment 0x563ea829aeb0 <col:1> Text=" "
|-FunctionDecl 0x563ea81e00d0 <line:126:1, col:22> col:7 z_tick_get 's64_t (void)'
| `-FullComment 0x563ea829b1c0 <line:121:3, line:125:1>
|   |-ParagraphComment 0x563ea829afd0 <line:121:3>
|   | `-TextComment 0x563ea829afa0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea829aff0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x563ea829b050 <col:10, col:46>
|   |   `-TextComment 0x563ea829b020 <col:10, col:46> Text=" Return the current system tick count"
|   |-ParagraphComment 0x563ea829b0a0 <line:123:3>
|   | `-TextComment 0x563ea829b070 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea829b0c0 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x563ea829b120 <col:11, col:40>
|   |   `-TextComment 0x563ea829b0f0 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x563ea829b170 <line:125:1>
|     `-TextComment 0x563ea829b140 <col:1> Text=" "
|-RecordDecl 0x563ea81e0170 <line:135:1, col:8> col:8 struct _timeout
|-TypedefDecl 0x563ea81e0470 <line:136:1, col:51> col:16 referenced _timeout_func_t 'void (*)(struct _timeout *)'
| `-PointerType 0x563ea81e0410 'void (*)(struct _timeout *)'
|   `-ParenType 0x563ea81e03b0 'void (struct _timeout *)' sugar
|     `-FunctionProtoType 0x563ea81e0370 'void (struct _timeout *)' cdecl
|       |-BuiltinType 0x563ea805b6f0 'void'
|       `-PointerType 0x563ea81e0280 'struct _timeout *'
|         `-ElaboratedType 0x563ea81e0220 'struct _timeout' sugar
|           `-RecordType 0x563ea81e0200 'struct _timeout'
|             `-Record 0x563ea81e04c8 '_timeout'
|-RecordDecl 0x563ea81e04c8 prev 0x563ea81e0170 <line:138:1, line:142:1> line:138:8 struct _timeout definition
| |-FieldDecl 0x563ea81e0560 <line:139:2, col:14> col:14 node 'sys_dnode_t':'struct _dnode'
| |-FieldDecl 0x563ea81e05e0 <line:140:2, col:8> col:8 dticks 's32_t':'int'
| `-FieldDecl 0x563ea81e0660 <line:141:2, col:18> col:18 fn '_timeout_func_t':'void (*)(struct _timeout *)'
|-RecordDecl 0x563ea81e06a8 </vagrant/ext/zephyros/zephyr/include/spinlock.h:25:1, line:27:1> line:25:8 struct k_spinlock_key definition
| `-FieldDecl 0x563ea81e0768 <line:26:2, col:6> col:6 referenced key 'int'
|-TypedefDecl 0x563ea81e0800 <line:29:1, col:31> col:31 referenced k_spinlock_key_t 'struct k_spinlock_key':'struct k_spinlock_key'
| `-ElaboratedType 0x563ea81e07b0 'struct k_spinlock_key' sugar
|   `-RecordType 0x563ea81e0730 'struct k_spinlock_key'
|     `-Record 0x563ea81e06a8 'k_spinlock_key'
|-RecordDecl 0x563ea81e0858 <line:31:1, line:60:1> line:31:8 struct k_spinlock definition
|-FunctionDecl 0x563ea81e0ad0 <line:62:1, line:86:1> line:62:39 k_spin_lock 'k_spinlock_key_t (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x563ea81e09d0 <col:51, col:70> col:70 used l 'struct k_spinlock *'
| |-CompoundStmt 0x563ea81e0ee8 <line:63:1, line:86:1>
| | |-CStyleCastExpr 0x563ea81e0c60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x563ea81e0c48 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x563ea81e0c28 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x563ea81e0bc0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:64:13> 'struct k_spinlock *' lvalue ParmVar 0x563ea81e09d0 'l' 'struct k_spinlock *'
| | |-DeclStmt 0x563ea81e0cf8 <line:65:2, col:20>
| | | `-VarDecl 0x563ea81e0c98 <col:2, col:19> col:19 used k 'k_spinlock_key_t':'struct k_spinlock_key'
| | |-BinaryOperator 0x563ea81e0e20 <line:71:2, col:24> 'int' '='
| | | |-MemberExpr 0x563ea81e0d38 <col:2, col:4> 'int' lvalue .key 0x563ea81e0768
| | | | `-DeclRefExpr 0x563ea81e0d10 <col:2> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x563ea81e0c98 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| | | `-ImplicitCastExpr 0x563ea81e0e08 <col:10, col:24> 'int' <IntegralCast>
| | |   `-CallExpr 0x563ea81e0de0 <col:10, col:24> 'unsigned int'
| | |     `-ImplicitCastExpr 0x563ea81e0dc8 <col:10> 'unsigned int (*)(void)' <FunctionToPointerDecay>
| | |       `-DeclRefExpr 0x563ea81e0d70 <col:10> 'unsigned int (void)' Function 0x563ea81bac40 'arch_irq_lock' 'unsigned int (void)'
| | `-ReturnStmt 0x563ea81e0ed0 <line:85:2, col:9>
| |   `-ImplicitCastExpr 0x563ea81e0eb8 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' <LValueToRValue>
| |     `-DeclRefExpr 0x563ea81e0e90 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x563ea81e0c98 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x563ea81e0b78 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x563ea81e2e60 </vagrant/ext/zephyros/zephyr/include/spinlock.h:88:1, line:107:1> line:88:27 k_spin_unlock 'void (struct k_spinlock *, k_spinlock_key_t)' static inline
| |-ParmVarDecl 0x563ea81e0f40 <col:41, col:60> col:60 used l 'struct k_spinlock *'
| |-ParmVarDecl 0x563ea81e2d50 <line:89:6, col:23> col:23 used key 'k_spinlock_key_t':'struct k_spinlock_key'
| |-CompoundStmt 0x563ea81e3150 <line:90:1, line:107:1>
| | |-CStyleCastExpr 0x563ea81e2ff8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x563ea81e2fe0 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x563ea81e2fc0 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x563ea81e2f58 </vagrant/ext/zephyros/zephyr/include/spinlock.h:91:13> 'struct k_spinlock *' lvalue ParmVar 0x563ea81e0f40 'l' 'struct k_spinlock *'
| | `-CallExpr 0x563ea81e30f0 <line:106:2, col:25> 'void'
| |   |-ImplicitCastExpr 0x563ea81e30d8 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x563ea81e3020 <col:2> 'void (unsigned int)' Function 0x563ea81bada8 'arch_irq_unlock' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x563ea81e3138 <col:18, col:22> 'unsigned int' <IntegralCast>
| |     `-ImplicitCastExpr 0x563ea81e3120 <col:18, col:22> 'int' <LValueToRValue>
| |       `-MemberExpr 0x563ea81e3070 <col:18, col:22> 'int' lvalue .key 0x563ea81e0768
| |         `-DeclRefExpr 0x563ea81e3048 <col:18> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue ParmVar 0x563ea81e2d50 'key' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x563ea81e2f10 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x563ea81e32a0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:112:1, line:121:1> line:112:27 k_spin_release 'void (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x563ea81e3198 <col:42, col:61> col:61 used l 'struct k_spinlock *'
| |-CompoundStmt 0x563ea81e34b8 <line:113:1, line:121:1>
| | `-CStyleCastExpr 0x563ea81e3430 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x563ea81e3418 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| |     `-ParenExpr 0x563ea81e33f8 <col:29, col:31> 'struct k_spinlock *' lvalue
| |       `-DeclRefExpr 0x563ea81e3390 </vagrant/ext/zephyros/zephyr/include/spinlock.h:114:13> 'struct k_spinlock *' lvalue ParmVar 0x563ea81e3198 'l' 'struct k_spinlock *'
| `-AlwaysInlineAttr 0x563ea81e3348 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-EnumDecl 0x563ea81e34d0 </vagrant/ext/zephyros/zephyr/include/fatal.h:23:1, line:42:1> line:23:6 k_fatal_error_reason
| |-FullComment 0x563ea829b420 <line:18:3, line:20:5>
| | |-ParagraphComment 0x563ea829b260 <line:18:3>
| | | `-TextComment 0x563ea829b230 <col:3> Text=" "
| | |-VerbatimLineComment 0x563ea829b280 <col:4, col:41> Text=" fatal_apis Fatal error APIs"
| | |-ParagraphComment 0x563ea829b2f0 <line:19:3>
| | | `-TextComment 0x563ea829b2c0 <col:3> Text=" "
| | |-VerbatimLineComment 0x563ea829b310 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x563ea829b3d0 <line:20:3, col:5>
| |   |-TextComment 0x563ea829b350 <col:3> Text=" "
| |   |-TextComment 0x563ea829b370 <col:4> Text="@"
| |   `-TextComment 0x563ea829b390 <col:5> Text="{"
| |-EnumConstantDecl 0x563ea81e35b8 <line:25:2> col:2 K_ERR_CPU_EXCEPTION 'int'
| | `-FullComment 0x563ea8270380 <line:24:5, col:55>
| |   `-ParagraphComment 0x563ea8270350 <col:5, col:55>
| |     `-TextComment 0x563ea8270320 <col:5, col:55> Text=" Generic CPU exception, not covered by other codes "
| |-EnumConstantDecl 0x563ea81e3628 <line:28:2> col:2 K_ERR_SPURIOUS_IRQ 'int'
| | `-FullComment 0x563ea8270450 <line:27:5, col:34>
| |   `-ParagraphComment 0x563ea8270420 <col:5, col:34>
| |     `-TextComment 0x563ea82703f0 <col:5, col:34> Text=" Unhandled hardware interrupt "
| |-EnumConstantDecl 0x563ea81e3698 <line:31:2> col:2 K_ERR_STACK_CHK_FAIL 'int'
| | `-FullComment 0x563ea8270520 <line:30:5, col:50>
| |   `-ParagraphComment 0x563ea82704f0 <col:5, col:50>
| |     `-TextComment 0x563ea82704c0 <col:5, col:50> Text=" Faulting context overflowed its stack buffer "
| |-EnumConstantDecl 0x563ea81e3708 <line:34:2> col:2 K_ERR_KERNEL_OOPS 'int'
| | `-FullComment 0x563ea82705f0 <line:33:5, col:38>
| |   `-ParagraphComment 0x563ea82705c0 <col:5, col:38>
| |     `-TextComment 0x563ea8270590 <col:5, col:38> Text=" Moderate severity software error "
| `-EnumConstantDecl 0x563ea81e3778 <line:37:2> col:2 K_ERR_KERNEL_PANIC 'int'
|   `-FullComment 0x563ea82706c0 <line:36:5, col:34>
|     `-ParagraphComment 0x563ea8270690 <col:5, col:34>
|       `-TextComment 0x563ea8270660 <col:5, col:34> Text=" High severity software error "
|-FunctionDecl 0x563ea81e38c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:86:26, /vagrant/ext/zephyros/zephyr/include/fatal.h:52:52> col:20 k_fatal_halt 'void (unsigned int) __attribute__((noreturn))'
| |-ParmVarDecl 0x563ea81e3800 <col:33, col:46> col:46 reason 'unsigned int'
| `-FullComment 0x563ea82709a0 <line:45:3, line:50:44>
|   |-ParagraphComment 0x563ea8270760 <line:45:3>
|   | `-TextComment 0x563ea8270730 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8270780 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x563ea82707e0 <col:10, col:42>
|   |   `-TextComment 0x563ea82707b0 <col:10, col:42> Text=" Halt the system on a fatal error"
|   |-ParagraphComment 0x563ea8270850 <line:47:3, line:48:76>
|   | |-TextComment 0x563ea8270800 <line:47:3, col:72> Text=" Invokes architecture-specific code to power off or halt the system in"
|   | `-TextComment 0x563ea8270820 <line:48:3, col:76> Text=" a low power state. Lacking that, lock interrupts and sit in an idle loop."
|   |-ParagraphComment 0x563ea82708a0 <line:50:3>
|   | `-TextComment 0x563ea8270870 <col:3> Text=" "
|   `-ParamCommandComment 0x563ea82708c0 <col:4, col:44> [in] implicitly Param="reason" ParamIndex=0
|     `-ParagraphComment 0x563ea8270950 <col:17, col:44>
|       `-TextComment 0x563ea8270920 <col:17, col:44> Text=" Fatal exception reason code"
|-FunctionDecl 0x563ea81e3b00 <line:83:1, col:76> col:6 invalid k_sys_fatal_error_handler 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x563ea81e39b0 <col:32, col:45> col:45 reason 'unsigned int'
| |-ParmVarDecl 0x563ea81e3a28 <col:53, col:73> col:73 invalid esf 'const int *'
| `-FullComment 0x563ea8271080 <line:55:3, line:81:71>
|   |-ParagraphComment 0x563ea8270a40 <line:55:3>
|   | `-TextComment 0x563ea8270a10 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea8270a60 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x563ea8270ac0 <col:10, col:36>
|   |   `-TextComment 0x563ea8270a90 <col:10, col:36> Text=" Fatal error policy handler"
|   |-ParagraphComment 0x563ea8270b30 <line:57:3, line:58:67>
|   | |-TextComment 0x563ea8270ae0 <line:57:3, col:73> Text=" This function is not invoked by application code, but is declared as a"
|   | `-TextComment 0x563ea8270b00 <line:58:3, col:67> Text=" weak symbol so that applications may introduce their own policy."
|   |-ParagraphComment 0x563ea8270bd0 <line:60:3, line:62:71>
|   | |-TextComment 0x563ea8270b50 <line:60:3, col:63> Text=" The default implementation of this function halts the system"
|   | |-TextComment 0x563ea8270b70 <line:61:3, col:66> Text=" unconditionally. Depending on architecture support, this may be"
|   | `-TextComment 0x563ea8270b90 <line:62:3, col:71> Text=" a simple infinite loop, power off the hardware, or exit an emulator."
|   |-ParagraphComment 0x563ea8270c40 <line:64:3, line:65:11>
|   | |-TextComment 0x563ea8270bf0 <line:64:3, col:72> Text=" If this function returns, then the currently executing thread will be"
|   | `-TextComment 0x563ea8270c10 <line:65:3, col:11> Text=" aborted."
|   |-ParagraphComment 0x563ea8270c90 <line:67:3, col:42>
|   | `-TextComment 0x563ea8270c60 <col:3, col:42> Text=" A few notes for custom implementations:"
|   |-ParagraphComment 0x563ea8270e20 <line:69:3, line:77:23>
|   | |-TextComment 0x563ea8270cb0 <line:69:3, col:74> Text=" - If the error is determined to be unrecoverable, LOG_PANIC() should be"
|   | |-TextComment 0x563ea8270cd0 <line:70:3, col:50> Text="   invoked to flush any pending logging buffers."
|   | |-TextComment 0x563ea8270cf0 <line:71:3, col:76> Text=" - K_ERR_KERNEL_PANIC indicates a severe unrecoverable error in the kernel"
|   | |-TextComment 0x563ea8270d10 <line:72:3, col:76> Text="   itself, and should not be considered recoverable. There is an assertion"
|   | |-TextComment 0x563ea8270d30 <line:73:3, col:40> Text="   in z_fatal_error() to enforce this."
|   | |-TextComment 0x563ea8270d50 <line:74:3, col:76> Text=" - Even outside of a kernel panic, unless the fault occurred in user mode,"
|   | |-TextComment 0x563ea8270d70 <line:75:3, col:73> Text="   the kernel itself may be in an inconsistent state, with API calls to"
|   | |-TextComment 0x563ea8270d90 <line:76:3, col:72> Text="   kernel objects possibly exhibiting undefined behavior or triggering"
|   | `-TextComment 0x563ea8270db0 <line:77:3, col:23> Text="   another exception."
|   |-ParagraphComment 0x563ea8270e70 <line:79:3>
|   | `-TextComment 0x563ea8270e40 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea8270e90 <col:4, line:80:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x563ea8270f40 <line:79:17, line:80:3>
|   |   |-TextComment 0x563ea8270ef0 <line:79:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x563ea8270f10 <line:80:3> Text=" "
|   `-ParamCommandComment 0x563ea8270f60 <col:4, line:81:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x563ea8271010 <line:80:14, line:81:71>
|       |-TextComment 0x563ea8270fc0 <line:80:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x563ea8270fe0 <line:81:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x563ea81e49f0 <line:99:1, col:64> col:6 invalid z_fatal_error 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x563ea81e3bf0 <col:20, col:33> col:33 reason 'unsigned int'
| |-ParmVarDecl 0x563ea81e3c68 <col:41, col:61> col:61 invalid esf 'const int *'
| `-FullComment 0x563ea8271470 <line:86:3, line:97:71>
|   |-ParagraphComment 0x563ea8271120 <line:86:3, col:50>
|   | `-TextComment 0x563ea82710f0 <col:3, col:50> Text=" Called by architecture code upon a fatal error."
|   |-ParagraphComment 0x563ea82711c0 <line:88:3, line:90:31>
|   | |-TextComment 0x563ea8271140 <line:88:3, col:76> Text=" This function dumps out architecture-agnostic information about the error"
|   | |-TextComment 0x563ea8271160 <line:89:3, col:61> Text=" and then makes a policy decision on what to do by invoking"
|   | `-TextComment 0x563ea8271180 <line:90:3, col:31> Text=" k_sys_fatal_error_handler()."
|   |-ParagraphComment 0x563ea8271230 <line:92:3, line:93:24>
|   | |-TextComment 0x563ea82711e0 <line:92:3, col:71> Text=" On architectures where k_thread_abort() never returns, this function"
|   | `-TextComment 0x563ea8271200 <line:93:3, col:24> Text=" never returns either."
|   |-ParagraphComment 0x563ea8271280 <line:95:3>
|   | `-TextComment 0x563ea8271250 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82712a0 <col:4, line:96:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x563ea8271350 <line:95:17, line:96:3>
|   |   |-TextComment 0x563ea8271300 <line:95:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x563ea8271320 <line:96:3> Text=" "
|   `-ParamCommandComment 0x563ea8271370 <col:4, line:97:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x563ea8271420 <line:96:14, line:97:71>
|       |-TextComment 0x563ea82713d0 <line:96:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x563ea82713f0 <line:97:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x563ea81e4ec0 </vagrant/ext/zephyros/zephyr/include/irq.h:66:1, line:73:1> line:67:1 irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' static inline
| |-ParmVarDecl 0x563ea81e4ba0 <col:21, col:34> col:34 used irq 'unsigned int'
| |-ParmVarDecl 0x563ea81e4c18 <col:39, col:52> col:52 used priority 'unsigned int'
| |-ParmVarDecl 0x563ea81e4d28 <line:68:7, col:38> col:14 used routine 'void (*)(void *)'
| |-ParmVarDecl 0x563ea81e4da0 <col:41, col:47> col:47 used parameter 'void *'
| |-ParmVarDecl 0x563ea81e4e10 <line:69:7, col:13> col:13 used flags 'u32_t':'unsigned int'
| |-CompoundStmt 0x563ea81e5408 <line:70:1, line:73:1>
| | `-ReturnStmt 0x563ea81e51b8 <line:71:2, line:72:11>
| |   `-CallExpr 0x563ea81e50f0 <line:71:9, line:72:11> 'int'
| |     |-ImplicitCastExpr 0x563ea81e50d8 <line:71:9> 'int (*)(unsigned int, unsigned int, void (*)(void *), void *, u32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea81e4f88 <col:9> 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' Function 0x563ea81bb8f8 'arch_irq_connect_dynamic' 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |     |-ImplicitCastExpr 0x563ea81e5140 <col:34> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81e4fb0 <col:34> 'unsigned int' lvalue ParmVar 0x563ea81e4ba0 'irq' 'unsigned int'
| |     |-ImplicitCastExpr 0x563ea81e5158 <col:39> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81e4fd8 <col:39> 'unsigned int' lvalue ParmVar 0x563ea81e4c18 'priority' 'unsigned int'
| |     |-ImplicitCastExpr 0x563ea81e5170 <col:49> 'void (*)(void *)' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81e5000 <col:49> 'void (*)(void *)' lvalue ParmVar 0x563ea81e4d28 'routine' 'void (*)(void *)'
| |     |-ImplicitCastExpr 0x563ea81e5188 <col:58> 'void *' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea81e5028 <col:58> 'void *' lvalue ParmVar 0x563ea81e4da0 'parameter' 'void *'
| |     `-ImplicitCastExpr 0x563ea81e51a0 <line:72:6> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-DeclRefExpr 0x563ea81e5050 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea81e4e10 'flags' 'u32_t':'unsigned int'
| `-FullComment 0x563ea8271ae0 <line:54:3, line:64:48>
|   |-ParagraphComment 0x563ea8271510 <line:54:3, col:33>
|   | `-TextComment 0x563ea82714e0 <col:3, col:33> Text=" Configure a dynamic interrupt."
|   |-ParagraphComment 0x563ea8271560 <line:56:3, col:80>
|   | `-TextComment 0x563ea8271530 <col:3, col:80> Text=" Use this instead of IRQ_CONNECT() if arguments cannot be known at build time."
|   |-ParagraphComment 0x563ea82715b0 <line:58:3>
|   | `-TextComment 0x563ea8271580 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82715d0 <col:4, line:59:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x563ea8271680 <line:58:14, line:59:3>
|   |   |-TextComment 0x563ea8271630 <line:58:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x563ea8271650 <line:59:3> Text=" "
|   |-ParamCommandComment 0x563ea82716a0 <col:4, line:60:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x563ea8271750 <line:59:19, line:60:3>
|   |   |-TextComment 0x563ea8271700 <line:59:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x563ea8271720 <line:60:3> Text=" "
|   |-ParamCommandComment 0x563ea8271770 <col:4, line:61:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x563ea8271820 <line:60:18, line:61:3>
|   |   |-TextComment 0x563ea82717d0 <line:60:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x563ea82717f0 <line:61:3> Text=" "
|   |-ParamCommandComment 0x563ea8271840 <col:4, line:62:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x563ea82718f0 <line:61:20, line:62:3>
|   |   |-TextComment 0x563ea82718a0 <line:61:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x563ea82718c0 <line:62:3> Text=" "
|   |-ParamCommandComment 0x563ea8271910 <col:4, col:53> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x563ea82719a0 <col:16, col:53>
|   |   `-TextComment 0x563ea8271970 <col:16, col:53> Text=" Arch-specific IRQ configuration flags"
|   |-ParagraphComment 0x563ea82719f0 <line:64:3>
|   | `-TextComment 0x563ea82719c0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8271a10 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x563ea8271a70 <col:11, col:48>
|       `-TextComment 0x563ea8271a40 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x563ea81e54e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/sys/errno_private.h:28:28> col:16 z_errno 'int *(void)' static inline
| `-FullComment 0x563ea8271d00 <line:21:3, line:26:59>
|   |-ParagraphComment 0x563ea8271b80 <line:21:3, col:57>
|   | `-TextComment 0x563ea8271b50 <col:3, col:57> Text=" return a pointer to a memory location containing errno"
|   |-ParagraphComment 0x563ea8271bf0 <line:23:3, line:24:52>
|   | |-TextComment 0x563ea8271ba0 <line:23:3, col:69> Text=" errno is thread-specific, and can't just be a global. This pointer"
|   | `-TextComment 0x563ea8271bc0 <line:24:3, col:52> Text=" is guaranteed to be read/writable from user mode."
|   |-ParagraphComment 0x563ea8271c40 <line:26:3>
|   | `-TextComment 0x563ea8271c10 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea8271c60 <col:4, col:59> Name="return"
|     `-ParagraphComment 0x563ea8271cc0 <col:11, col:59>
|       `-TextComment 0x563ea8271c90 <col:11, col:59> Text=" Memory location of errno data for current thread"
|-FunctionDecl 0x563ea81e55e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:24:1, col:29> col:14 used z_impl_z_errno 'int *()' extern
|-FunctionDecl 0x563ea81e56a8 prev 0x563ea81e54e8 <line:25:1, line:34:1> line:25:21 z_errno 'int *(void)' static inline
| `-CompoundStmt 0x563ea81e5998 <line:26:1, line:34:1>
|   |-DoStmt 0x563ea81e58a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea81e5868 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea81e5818 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea81e5880 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea81e5958 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:33:2, col:24>
|     `-CallExpr 0x563ea81e5930 <col:9, col:24> 'int *'
|       `-ImplicitCastExpr 0x563ea81e5918 <col:9> 'int *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x563ea81e58c0 <col:9> 'int *()' Function 0x563ea81e55e0 'z_impl_z_errno' 'int *()'
|-RecordDecl 0x563ea81f2ba0 </vagrant/ext/zephyros/zephyr/include/kernel.h:91:9, line:93:1> line:91:9 struct definition
| `-FieldDecl 0x563ea81f2c60 <line:92:2, col:14> col:14 waitq 'sys_dlist_t':'struct _dnode'
|-TypedefDecl 0x563ea81f2d00 <line:91:1, line:93:3> col:3 referenced _wait_q_t 'struct _wait_q_t':'_wait_q_t'
| `-ElaboratedType 0x563ea81f2cb0 'struct _wait_q_t' sugar
|   `-RecordType 0x563ea81f2c30 '_wait_q_t'
|     `-Record 0x563ea81f2ba0 ''
|-RecordDecl 0x563ea81f2d70 prev 0x563ea8197b40 <line:120:1, col:8> col:8 struct k_thread
|-RecordDecl 0x563ea81f2df8 <line:121:1, col:8> col:8 struct k_mutex
|-RecordDecl 0x563ea81f2ea0 <line:122:1, col:8> col:8 struct k_sem
|-RecordDecl 0x563ea81f2f50 <line:123:1, col:8> col:8 struct k_msgq
|-RecordDecl 0x563ea81f3000 <line:124:1, col:8> col:8 struct k_mbox
|-RecordDecl 0x563ea81f30b0 <line:125:1, col:8> col:8 struct k_pipe
|-RecordDecl 0x563ea81f3160 <line:126:1, col:8> col:8 struct k_queue
|-RecordDecl 0x563ea81f3210 <line:127:1, col:8> col:8 struct k_fifo
|-RecordDecl 0x563ea81f32c0 <line:128:1, col:8> col:8 struct k_lifo
|-RecordDecl 0x563ea81f3370 <line:129:1, col:8> col:8 struct k_stack
|-RecordDecl 0x563ea81f3420 <line:130:1, col:8> col:8 struct k_mem_slab
|-RecordDecl 0x563ea81f34d0 <line:131:1, col:8> col:8 struct k_mem_pool
|-RecordDecl 0x563ea81f3580 <line:132:1, col:8> col:8 struct k_timer
|-RecordDecl 0x563ea81f3630 <line:133:1, col:8> col:8 struct k_poll_event
|-RecordDecl 0x563ea81f36e0 <line:134:1, col:8> col:8 struct k_poll_signal
|-RecordDecl 0x563ea81f3790 prev 0x563ea8197bc8 <line:135:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x563ea81f3818 <line:136:1, col:8> col:8 struct k_mem_partition
|-RecordDecl 0x563ea81f38c0 <line:137:1, col:8> col:8 struct k_futex
|-EnumDecl 0x563ea81f3998 <line:146:1, line:160:1> line:146:6 k_objects
| |-FullComment 0x563ea8271f00 <line:140:3, line:144:33>
| | |-ParagraphComment 0x563ea8271da0 <line:140:3>
| | | `-TextComment 0x563ea8271d70 <col:3> Text=" "
| | |-BlockCommandComment 0x563ea8271dc0 <col:4, col:29> Name="brief"
| | | `-ParagraphComment 0x563ea8271e20 <col:10, col:29>
| | |   `-TextComment 0x563ea8271df0 <col:10, col:29> Text=" Kernel Object Types"
| | `-ParagraphComment 0x563ea8271ec0 <line:142:3, line:144:33>
| |   |-TextComment 0x563ea8271e40 <line:142:3, col:77> Text=" This enumeration needs to be kept in sync with the lists of kernel objects"
| |   |-TextComment 0x563ea8271e60 <line:143:3, col:79> Text=" and subsystems in scripts/gen_kobject_list.py, as well as the otype_to_str()"
| |   `-TextComment 0x563ea8271e80 <line:144:3, col:33> Text=" function in kernel/userspace.c"
| |-EnumConstantDecl 0x563ea81f3a50 <line:147:2> col:2 K_OBJ_ANY 'int'
| |-EnumConstantDecl 0x563ea81f3ac8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/kobj-types-enum.h:2:1> col:1 K_OBJ_MEM_SLAB 'int'
| |-EnumConstantDecl 0x563ea81f3b10 <line:3:1> col:1 K_OBJ_MSGQ 'int'
| |-EnumConstantDecl 0x563ea81f3b58 <line:4:1> col:1 K_OBJ_MUTEX 'int'
| |-EnumConstantDecl 0x563ea81f5e80 <line:5:1> col:1 K_OBJ_PIPE 'int'
| |-EnumConstantDecl 0x563ea81f5ec8 <line:6:1> col:1 K_OBJ_QUEUE 'int'
| |-EnumConstantDecl 0x563ea81f5f10 <line:7:1> col:1 K_OBJ_POLL_SIGNAL 'int'
| |-EnumConstantDecl 0x563ea81f5f58 <line:8:1> col:1 K_OBJ_SEM 'int'
| |-EnumConstantDecl 0x563ea81f5fa0 <line:9:1> col:1 K_OBJ_STACK 'int'
| |-EnumConstantDecl 0x563ea81f5fe8 <line:10:1> col:1 K_OBJ_THREAD 'int'
| |-EnumConstantDecl 0x563ea81f6030 <line:11:1> col:1 K_OBJ_TIMER 'int'
| |-EnumConstantDecl 0x563ea81f6078 <line:12:1> col:1 K_OBJ__THREAD_STACK_ELEMENT 'int'
| |-EnumConstantDecl 0x563ea81f60c0 <line:13:1> col:1 K_OBJ_SYS_MUTEX 'int'
| |-EnumConstantDecl 0x563ea81f6108 <line:14:1> col:1 K_OBJ_FUTEX 'int'
| |-EnumConstantDecl 0x563ea81f6150 <line:16:1> col:1 K_OBJ_DRIVER_ADC 'int'
| |-EnumConstantDecl 0x563ea81f6198 <line:17:1> col:1 K_OBJ_DRIVER_AIO_CMP 'int'
| |-EnumConstantDecl 0x563ea81f61e0 <line:18:1> col:1 K_OBJ_DRIVER_COUNTER 'int'
| |-EnumConstantDecl 0x563ea81f6228 <line:19:1> col:1 K_OBJ_DRIVER_CRYPTO 'int'
| |-EnumConstantDecl 0x563ea81f6270 <line:20:1> col:1 K_OBJ_DRIVER_DMA 'int'
| |-EnumConstantDecl 0x563ea81f62b8 <line:21:1> col:1 K_OBJ_DRIVER_FLASH 'int'
| |-EnumConstantDecl 0x563ea81f6300 <line:22:1> col:1 K_OBJ_DRIVER_GPIO 'int'
| |-EnumConstantDecl 0x563ea81f6348 <line:23:1> col:1 K_OBJ_DRIVER_I2C 'int'
| |-EnumConstantDecl 0x563ea81f6390 <line:24:1> col:1 K_OBJ_DRIVER_I2S 'int'
| |-EnumConstantDecl 0x563ea81f63d8 <line:25:1> col:1 K_OBJ_DRIVER_IPM 'int'
| |-EnumConstantDecl 0x563ea81f6420 <line:26:1> col:1 K_OBJ_DRIVER_LED 'int'
| |-EnumConstantDecl 0x563ea81f6468 <line:27:1> col:1 K_OBJ_DRIVER_PINMUX 'int'
| |-EnumConstantDecl 0x563ea81f64b0 <line:28:1> col:1 K_OBJ_DRIVER_PWM 'int'
| |-EnumConstantDecl 0x563ea81f64f8 <line:29:1> col:1 K_OBJ_DRIVER_ENTROPY 'int'
| |-EnumConstantDecl 0x563ea81f6540 <line:30:1> col:1 K_OBJ_DRIVER_SENSOR 'int'
| |-EnumConstantDecl 0x563ea81f6588 <line:31:1> col:1 K_OBJ_DRIVER_SPI 'int'
| |-EnumConstantDecl 0x563ea81f65d0 <line:32:1> col:1 K_OBJ_DRIVER_UART 'int'
| |-EnumConstantDecl 0x563ea81f6618 <line:33:1> col:1 K_OBJ_DRIVER_CAN 'int'
| |-EnumConstantDecl 0x563ea81f6660 <line:34:1> col:1 K_OBJ_DRIVER_PTP_CLOCK 'int'
| |-EnumConstantDecl 0x563ea81f66a8 <line:35:1> col:1 K_OBJ_DRIVER_EEPROM 'int'
| |-EnumConstantDecl 0x563ea81f66f0 <line:36:1> col:1 K_OBJ_DRIVER_WDT 'int'
| |-EnumConstantDecl 0x563ea81f6738 <line:37:1> col:1 K_OBJ_DRIVER_SAMPLE 'int'
| `-EnumConstantDecl 0x563ea81f67a8 </vagrant/ext/zephyros/zephyr/include/kernel.h:159:2> col:2 K_OBJ_LAST 'int'
|   `-FullComment 0x563ea8272020 <line:156:5, col:13>
|     `-ParagraphComment 0x563ea8271ff0 <col:5, col:13>
|       |-TextComment 0x563ea8271f70 <col:5> Text=" "
|       `-InlineCommandComment 0x563ea8271fc0 <col:6, col:13> Name="endcond" RenderNormal
|-FunctionDecl 0x563ea81f68e8 <line:229:1, line:232:1> line:229:20 z_object_init 'void (void *)' static inline
| |-ParmVarDecl 0x563ea81f6860 <col:34, col:40> col:40 used obj 'void *'
| |-CompoundStmt 0x563ea81f6a88 <line:230:1, line:232:1>
| | `-CStyleCastExpr 0x563ea81f6a30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x563ea81f6a18 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x563ea81f69f8 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x563ea81f6990 </vagrant/ext/zephyros/zephyr/include/kernel.h:231:13> 'void *' lvalue ParmVar 0x563ea81f6860 'obj' 'void *'
| `-FullComment 0x563ea8272140 <line:227:3, col:12>
|   `-ParagraphComment 0x563ea8272110 <col:3, col:12>
|     |-TextComment 0x563ea8272090 <col:3> Text=" "
|     `-InlineCommandComment 0x563ea82720e0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x563ea81f6c50 <line:237:1, line:242:1> line:237:20 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x563ea81f6ab8 <col:49, col:55> col:55 used object 'void *'
| |-ParmVarDecl 0x563ea81f6b40 <line:238:13, col:30> col:30 used thread 'struct k_thread *'
| |-CompoundStmt 0x563ea81f83f8 <line:239:1, line:242:1>
| | |-CStyleCastExpr 0x563ea81f6da0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x563ea81f6d88 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x563ea81f6d68 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x563ea81f6d00 </vagrant/ext/zephyros/zephyr/include/kernel.h:240:13> 'void *' lvalue ParmVar 0x563ea81f6ab8 'object' 'void *'
| | `-CStyleCastExpr 0x563ea81f83a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x563ea81f6e50 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x563ea81f6e30 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x563ea81f6dc8 </vagrant/ext/zephyros/zephyr/include/kernel.h:241:13> 'struct k_thread *' lvalue ParmVar 0x563ea81f6b40 'thread' 'struct k_thread *'
| `-FullComment 0x563ea8272230 <line:235:3, col:12>
|   `-ParagraphComment 0x563ea8272200 <col:3, col:12>
|     |-TextComment 0x563ea82721b0 <col:3> Text=" "
|     `-InlineCommandComment 0x563ea82721d0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x563ea81f8548 <line:247:1, line:252:1> line:247:20 k_object_access_revoke 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x563ea81f8430 <col:43, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x563ea81f84b8 <line:248:8, col:25> col:25 used thread 'struct k_thread *'
| |-CompoundStmt 0x563ea81f87b8 <line:249:1, line:252:1>
| | |-CStyleCastExpr 0x563ea81f8698 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x563ea81f8680 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x563ea81f8660 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x563ea81f85f8 </vagrant/ext/zephyros/zephyr/include/kernel.h:250:13> 'void *' lvalue ParmVar 0x563ea81f8430 'object' 'void *'
| | `-CStyleCastExpr 0x563ea81f8760 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x563ea81f8748 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x563ea81f8728 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x563ea81f86c0 </vagrant/ext/zephyros/zephyr/include/kernel.h:251:13> 'struct k_thread *' lvalue ParmVar 0x563ea81f84b8 'thread' 'struct k_thread *'
| `-FullComment 0x563ea82a04d0 <line:245:3, col:12>
|   `-ParagraphComment 0x563ea82a04a0 <col:3, col:12>
|     |-TextComment 0x563ea82722a0 <col:3> Text=" "
|     `-InlineCommandComment 0x563ea82722c0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x563ea81f8878 <line:257:1, line:260:1> line:257:20 used z_impl_k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x563ea81f87f0 <col:44, col:50> col:50 used object 'void *'
| |-CompoundStmt 0x563ea81f89e8 <line:258:1, line:260:1>
| | `-CStyleCastExpr 0x563ea81f89c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x563ea81f89a8 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x563ea81f8988 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x563ea81f8920 </vagrant/ext/zephyros/zephyr/include/kernel.h:259:13> 'void *' lvalue ParmVar 0x563ea81f87f0 'object' 'void *'
| `-FullComment 0x563ea82a05c0 <line:255:3, col:12>
|   `-ParagraphComment 0x563ea82a0590 <col:3, col:12>
|     |-TextComment 0x563ea82a0540 <col:3> Text=" "
|     `-InlineCommandComment 0x563ea82a0560 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x563ea81f8aa0 <line:262:1, line:265:1> line:262:20 k_object_access_all_grant 'void (void *)' static inline
| |-ParmVarDecl 0x563ea81f8a18 <col:46, col:52> col:52 used object 'void *'
| `-CompoundStmt 0x563ea81f8c38 <line:263:1, line:265:1>
|   `-CStyleCastExpr 0x563ea81f8be8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|     `-ImplicitCastExpr 0x563ea81f8bd0 <col:29, col:31> 'void *' <LValueToRValue>
|       `-ParenExpr 0x563ea81f8bb0 <col:29, col:31> 'void *' lvalue
|         `-DeclRefExpr 0x563ea81f8b48 </vagrant/ext/zephyros/zephyr/include/kernel.h:264:13> 'void *' lvalue ParmVar 0x563ea81f8a18 'object' 'void *'
|-FunctionDecl 0x563ea81f8d80 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:279:75> col:16 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x563ea81f8c68 <col:38, col:44> col:44 object 'void *'
| |-ParmVarDecl 0x563ea81f8cf0 <col:52, col:69> col:69 thread 'struct k_thread *'
| `-FullComment 0x563ea82a0920 <line:270:3, line:277:53>
|   |-ParagraphComment 0x563ea82a0660 <line:270:3, col:43>
|   | `-TextComment 0x563ea82a0630 <col:3, col:43> Text=" Grant a thread access to a kernel object"
|   |-ParagraphComment 0x563ea82a0700 <line:272:3, line:274:67>
|   | |-TextComment 0x563ea82a0680 <line:272:3, col:72> Text=" The thread will be granted access to the object if the caller is from"
|   | |-TextComment 0x563ea82a06a0 <line:273:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x563ea82a06c0 <line:274:3, col:67> Text=" on both the object and the thread whose access is being granted."
|   |-ParagraphComment 0x563ea82a0750 <line:276:3>
|   | `-TextComment 0x563ea82a0720 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a0770 <col:4, line:277:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a0820 <line:276:17, line:277:3>
|   |   |-TextComment 0x563ea82a07d0 <line:276:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x563ea82a07f0 <line:277:3> Text=" "
|   `-ParamCommandComment 0x563ea82a0840 <col:4, col:53> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x563ea82a08d0 <col:17, col:53>
|       `-TextComment 0x563ea82a08a0 <col:17, col:53> Text=" Thread to grant access to the object"
|-FunctionDecl 0x563ea81f8f88 prev 0x563ea81f8548 <line:291:1, col:66> col:6 k_object_access_revoke 'void (void *, struct k_thread *)'
| |-ParmVarDecl 0x563ea81f8e70 <col:29, col:35> col:35 object 'void *'
| |-ParmVarDecl 0x563ea81f8ef8 <col:43, col:60> col:60 thread 'struct k_thread *'
| `-FullComment 0x563ea82a0c80 <line:282:3, line:289:54>
|   |-ParagraphComment 0x563ea82a09c0 <line:282:3, col:46>
|   | `-TextComment 0x563ea82a0990 <col:3, col:46> Text=" Revoke a thread's access to a kernel object"
|   |-ParagraphComment 0x563ea82a0a60 <line:284:3, line:286:67>
|   | |-TextComment 0x563ea82a09e0 <line:284:3, col:66> Text=" The thread will lose access to the object if the caller is from"
|   | |-TextComment 0x563ea82a0a00 <line:285:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x563ea82a0a20 <line:286:3, col:67> Text=" on both the object and the thread whose access is being revoked."
|   |-ParagraphComment 0x563ea82a0ab0 <line:288:3>
|   | `-TextComment 0x563ea82a0a80 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a0ad0 <col:4, line:289:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a0b80 <line:288:17, line:289:3>
|   |   |-TextComment 0x563ea82a0b30 <line:288:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x563ea82a0b50 <line:289:3> Text=" "
|   `-ParamCommandComment 0x563ea82a0ba0 <col:4, col:54> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x563ea82a0c30 <col:17, col:54>
|       `-TextComment 0x563ea82a0c00 <col:17, col:54> Text=" Thread to remove access to the object"
|-FunctionDecl 0x563ea81f9108 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:302:45> col:16 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x563ea81f9080 <col:33, col:39> col:39 object 'void *'
| `-FullComment 0x563ea82a0fb0 <line:294:3, line:301:1>
|   |-ParagraphComment 0x563ea82a0d20 <line:294:3>
|   | `-TextComment 0x563ea82a0cf0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a0d40 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x563ea82a0da0 <col:10, col:27>
|   |   `-TextComment 0x563ea82a0d70 <col:10, col:27> Text=" Release an object"
|   |-ParagraphComment 0x563ea82a0e10 <line:296:3, line:297:72>
|   | |-TextComment 0x563ea82a0dc0 <line:296:3, col:64> Text=" Allows user threads to drop their own permission on an object"
|   | `-TextComment 0x563ea82a0de0 <line:297:3, col:72> Text=" Their permissions are automatically cleared when a thread terminates."
|   |-ParagraphComment 0x563ea82a0e60 <line:299:3>
|   | `-TextComment 0x563ea82a0e30 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a0e80 <col:4, col:42> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a0f10 <col:17, col:42>
|   |   `-TextComment 0x563ea82a0ee0 <col:17, col:42> Text=" The object to be released"
|   `-ParagraphComment 0x563ea82a0f60 <line:301:1>
|     `-TextComment 0x563ea82a0f30 <col:1> Text=" "
|-FunctionDecl 0x563ea81f9278 prev 0x563ea81f8aa0 <line:321:1, col:44> col:6 k_object_access_all_grant 'void (void *)'
| |-ParmVarDecl 0x563ea81f91f0 <col:32, col:38> col:38 object 'void *'
| `-FullComment 0x563ea82a1370 <line:305:3, line:319:41>
|   |-ParagraphComment 0x563ea82a1050 <line:305:3, col:59>
|   | `-TextComment 0x563ea82a1020 <col:3, col:59> Text=" Grant all present and future threads access to an object"
|   |-ParagraphComment 0x563ea82a1110 <line:307:3, line:310:59>
|   | |-TextComment 0x563ea82a1070 <line:307:3, col:77> Text=" If the caller is from supervisor mode, or the caller is from user mode and"
|   | |-TextComment 0x563ea82a1090 <line:308:3, col:72> Text=" have sufficient permissions on the object, then that object will have"
|   | |-TextComment 0x563ea82a10b0 <line:309:3, col:76> Text=" permissions granted to it for *all* current and future threads running in"
|   | `-TextComment 0x563ea82a10d0 <line:310:3, col:59> Text=" the system, effectively becoming a public kernel object."
|   |-ParagraphComment 0x563ea82a11b0 <line:312:3, line:314:43>
|   | |-TextComment 0x563ea82a1130 <line:312:3, col:79> Text=" Use of this API should be avoided on systems that are running untrusted code"
|   | |-TextComment 0x563ea82a1150 <line:313:3, col:76> Text=" as it is possible for such code to derive the addresses of kernel objects"
|   | `-TextComment 0x563ea82a1170 <line:314:3, col:43> Text=" and perform unwanted operations on them."
|   |-ParagraphComment 0x563ea82a1220 <line:316:3, line:317:25>
|   | |-TextComment 0x563ea82a11d0 <line:316:3, col:75> Text=" It is not possible to revoke permissions on public objects; once public,"
|   | `-TextComment 0x563ea82a11f0 <line:317:3, col:25> Text=" any thread may use it."
|   |-ParagraphComment 0x563ea82a1270 <line:319:3>
|   | `-TextComment 0x563ea82a1240 <col:3> Text=" "
|   `-ParamCommandComment 0x563ea82a1290 <col:4, col:41> [in] implicitly Param="object" ParamIndex=0
|     `-ParagraphComment 0x563ea82a1320 <col:17, col:41>
|       `-TextComment 0x563ea82a12f0 <col:17, col:41> Text=" Address of kernel object"
|-FunctionDecl 0x563ea81f94b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:337:52> col:17 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x563ea81f93b0 <col:32, col:47> col:47 otype 'enum k_objects':'enum k_objects'
| `-FullComment 0x563ea82a1730 <line:324:3, line:335:12>
|   |-ParagraphComment 0x563ea82a1410 <line:324:3, col:48>
|   | `-TextComment 0x563ea82a13e0 <col:3, col:48> Text=" Allocate a kernel object of a designated type"
|   |-ParagraphComment 0x563ea82a14d0 <line:326:3, line:329:78>
|   | |-TextComment 0x563ea82a1430 <line:326:3, col:74> Text=" This will instantiate at runtime a kernel object of the specified type,"
|   | |-TextComment 0x563ea82a1450 <line:327:3, col:77> Text=" returning a pointer to it. The object will be returned in an uninitialized"
|   | |-TextComment 0x563ea82a1470 <line:328:3, col:76> Text=" state, with the calling thread being granted permission on it. The memory"
|   | `-TextComment 0x563ea82a1490 <line:329:3, col:78> Text=" for the object will be allocated out of the calling thread's resource pool."
|   |-ParagraphComment 0x563ea82a1520 <line:331:3, col:59>
|   | `-TextComment 0x563ea82a14f0 <col:3, col:59> Text=" Currently, allocation of thread stacks is not supported."
|   |-ParagraphComment 0x563ea82a1570 <line:333:3>
|   | `-TextComment 0x563ea82a1540 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a1590 <col:4, line:334:3> [in] implicitly Param="otype" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a1640 <line:333:16, line:334:3>
|   |   |-TextComment 0x563ea82a15f0 <line:333:16, col:44> Text=" Requested kernel object type"
|   |   `-TextComment 0x563ea82a1610 <line:334:3> Text=" "
|   `-BlockCommandComment 0x563ea82a1660 <col:4, line:335:12> Name="return"
|     `-ParagraphComment 0x563ea82a16e0 <line:334:11, line:335:12>
|       |-TextComment 0x563ea82a1690 <line:334:11, col:77> Text=" A pointer to the allocated kernel object, or NULL if memory wasn't"
|       `-TextComment 0x563ea82a16b0 <line:335:3, col:12> Text=" available"
|-FunctionDecl 0x563ea81f9610 <line:352:1, line:357:1> line:352:21 used z_impl_k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x563ea81f9580 <col:43, col:58> col:58 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x563ea81f9848 <line:353:1, line:357:1>
|   |-CStyleCastExpr 0x563ea81f9758 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|   | `-ImplicitCastExpr 0x563ea81f9740 <col:29, col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|   |   `-ParenExpr 0x563ea81f9720 <col:29, col:31> 'enum k_objects':'enum k_objects' lvalue
|   |     `-DeclRefExpr 0x563ea81f96b8 </vagrant/ext/zephyros/zephyr/include/kernel.h:354:13> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x563ea81f9580 'otype' 'enum k_objects':'enum k_objects'
|   `-ReturnStmt 0x563ea81f9800 <line:356:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ParenExpr 0x563ea81f97e0 <col:14, col:24> 'void *'
|       `-CStyleCastExpr 0x563ea81f97b8 <col:15, col:23> 'void *' <NullToPointer>
|         `-IntegerLiteral 0x563ea81f9780 <col:23> 'int' 0
|-FunctionDecl 0x563ea81f9908 </vagrant/ext/zephyros/zephyr/include/kernel.h:363:1, line:366:1> line:363:20 k_obj_free 'void (void *)' static inline
| |-ParmVarDecl 0x563ea81f9880 <col:31, col:37> col:37 used obj 'void *'
| |-CompoundStmt 0x563ea81f9aa8 <line:364:1, line:366:1>
| | `-CStyleCastExpr 0x563ea81f9a50 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x563ea81f9a38 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x563ea81f9a18 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x563ea81f99b0 </vagrant/ext/zephyros/zephyr/include/kernel.h:365:13> 'void *' lvalue ParmVar 0x563ea81f9880 'obj' 'void *'
| `-FullComment 0x563ea82a1990 <line:359:3, line:362:1>
|   |-ParagraphComment 0x563ea82a17d0 <line:359:3>
|   | `-TextComment 0x563ea82a17a0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a17f0 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x563ea82a1850 <col:10, col:24>
|   |   `-TextComment 0x563ea82a1820 <col:10, col:24> Text=" Free an object"
|   |-ParagraphComment 0x563ea82a18a0 <line:361:3>
|   | `-TextComment 0x563ea82a1870 <col:3> Text=" "
|   `-ParamCommandComment 0x563ea82a18c0 <col:4, line:362:1> [in] implicitly Param="obj" ParamIndex=0
|     `-ParagraphComment 0x563ea82a1950 <col:1>
|       `-TextComment 0x563ea82a1920 <col:1> Text=" "
|-RecordDecl 0x563ea81f9ac0 prev 0x563ea8197c70 <line:387:1, line:389:1> line:387:17 struct _k_thread_stack_element definition
| |-PackedAttr 0x563ea81f9b48 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:168:40>
| `-FieldDecl 0x563ea81f9ba0 </vagrant/ext/zephyros/zephyr/include/kernel.h:388:2, col:7> col:7 data 'char'
|-RecordDecl 0x563ea81f9c48 <line:427:1, line:503:1> line:427:8 struct _thread_base definition
| |-RecordDecl 0x563ea81f9cf0 <line:430:2, line:433:2> line:430:2 union definition
| | |-FieldDecl 0x563ea81f9db0 <line:431:3, col:15> col:15 qnode_dlist 'sys_dnode_t':'struct _dnode'
| | `-FieldDecl 0x563ea81f9e18 <line:432:3, col:17> col:17 qnode_rb 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x563ea81f9eb0 <line:430:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| |-IndirectFieldDecl 0x563ea81f9f08 <line:431:15> col:15 implicit qnode_dlist 'sys_dnode_t':'struct _dnode'
| | |-Field 0x563ea81f9eb0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x563ea81f9db0 'qnode_dlist' 'sys_dnode_t':'struct _dnode'
| |-IndirectFieldDecl 0x563ea81f9f58 <line:432:17> col:17 implicit qnode_rb 'struct rbnode':'struct rbnode'
| | |-Field 0x563ea81f9eb0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x563ea81f9e18 'qnode_rb' 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x563ea81fa028 <line:438:2, col:13> col:13 pended_on '_wait_q_t *'
| |-FieldDecl 0x563ea81fa080 <line:441:2, col:7> col:7 user_options 'u8_t':'unsigned char'
| |-FieldDecl 0x563ea81fa0d8 <line:444:2, col:7> col:7 thread_state 'u8_t':'unsigned char'
| |-RecordDecl 0x563ea81fa120 <line:460:2, line:471:2> line:460:2 union definition
| | |-RecordDecl 0x563ea81fa1d0 <line:461:3, line:469:3> line:461:3 struct definition
| | | |-FieldDecl 0x563ea81fa290 <line:466:4, col:9> col:9 prio 's8_t':'signed char'
| | | `-FieldDecl 0x563ea81fa2e8 <line:467:4, col:9> col:9 sched_locked 'u8_t':'unsigned char'
| | |-FieldDecl 0x563ea8195e00 <line:461:3> col:3 implicit 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | |-IndirectFieldDecl 0x563ea8195e58 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | | |-Field 0x563ea8195e00 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x563ea81fa290 'prio' 's8_t':'signed char'
| | |-IndirectFieldDecl 0x563ea8195ea8 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | | |-Field 0x563ea8195e00 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x563ea81fa2e8 'sched_locked' 'u8_t':'unsigned char'
| | `-FieldDecl 0x563ea8195ef8 <line:470:3, col:9> col:9 preempt 'u16_t':'unsigned short'
| |-FieldDecl 0x563ea8195fe0 <line:460:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| |-IndirectFieldDecl 0x563ea8196040 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | |-Field 0x563ea8195fe0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x563ea8195e00 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x563ea81fa290 'prio' 's8_t':'signed char'
| |-IndirectFieldDecl 0x563ea8196098 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | |-Field 0x563ea8195fe0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x563ea8195e00 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x563ea81fa2e8 'sched_locked' 'u8_t':'unsigned char'
| |-IndirectFieldDecl 0x563ea81960e8 <line:470:9> col:9 implicit preempt 'u16_t':'unsigned short'
| | |-Field 0x563ea8195fe0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | `-Field 0x563ea8195ef8 'preempt' 'u16_t':'unsigned short'
| |-FieldDecl 0x563ea8196138 <line:477:2, col:8> col:8 order_key 'u32_t':'unsigned int'
| `-FieldDecl 0x563ea8196198 <line:497:2, col:8> col:8 swap_data 'void *'
|-TypedefDecl 0x563ea81962d0 <line:505:1, col:29> col:29 _thread_base_t 'struct _thread_base':'struct _thread_base'
| `-ElaboratedType 0x563ea8196280 'struct _thread_base' sugar
|   `-RecordType 0x563ea81f9cd0 'struct _thread_base'
|     `-Record 0x563ea81f9c48 '_thread_base'
|-RecordDecl 0x563ea8196358 prev 0x563ea81f2d70 <line:545:1, line:618:1> line:545:8 invalid struct k_thread definition
| |-FullComment 0x563ea82a1b00 <line:542:3, line:543:19>
| | |-ParagraphComment 0x563ea82a1a30 <line:542:3>
| | | `-TextComment 0x563ea82a1a00 <col:3> Text=" "
| | |-VerbatimLineComment 0x563ea82a1a50 <col:4, col:24> Text=" thread_apis"
| | `-ParagraphComment 0x563ea82a1ac0 <line:543:3, col:19>
| |   `-TextComment 0x563ea82a1a90 <col:3, col:19> Text=" Thread Structure"
| |-FieldDecl 0x563ea8196400 <line:547:2, col:22> col:22 base 'struct _thread_base':'struct _thread_base'
| |-RecordDecl 0x563ea8196478 parent 0x563ea805b698 <line:550:2, col:9> col:9 struct _callee_saved
| |-FieldDecl 0x563ea8196580 <col:2, col:23> col:23 invalid callee_saved 'struct _callee_saved':'struct _callee_saved'
| | `-FullComment 0x563ea82a1bd0 <line:549:5, col:59>
| |   `-ParagraphComment 0x563ea82a1ba0 <col:5, col:59>
| |     `-TextComment 0x563ea82a1b70 <col:5, col:59> Text=" defined by the architecture, but all archs need these "
| |-FieldDecl 0x563ea8196610 <line:553:2, col:8> col:8 init_data 'void *'
| | `-FullComment 0x563ea82a1ca0 <line:552:5, col:29>
| |   `-ParagraphComment 0x563ea82a1c70 <col:5, col:29>
| |     `-TextComment 0x563ea82a1c40 <col:5, col:29> Text=" static thread init data "
| |-FieldDecl 0x563ea81967b8 <line:559:2, col:23> col:9 fn_abort 'void (*)(void)'
| | `-FullComment 0x563ea82a1e30 <line:556:4, line:558:4>
| |   |-ParagraphComment 0x563ea82a1d60 <line:556:4, line:557:4>
| |   | |-TextComment 0x563ea82a1d10 <line:556:4, col:18> Text=" abort function"
| |   | `-TextComment 0x563ea82a1d30 <line:557:4> Text=" "
| |   |-VerbatimLineComment 0x563ea82a1d80 <col:5, col:22> Text=" K-THREAD-002"
| |   `-ParagraphComment 0x563ea82a1df0 <line:558:4>
| |     `-TextComment 0x563ea82a1dc0 <col:4> Text=" "
| |-FieldDecl 0x563ea81968e0 <line:614:2, col:21> col:21 referenced resource_pool 'struct k_mem_pool *'
| | `-FullComment 0x563ea82a1f00 <line:613:5, col:19>
| |   `-ParagraphComment 0x563ea82a1ed0 <col:5, col:19>
| |     `-TextComment 0x563ea82a1ea0 <col:5, col:19> Text=" resource pool "
| |-RecordDecl 0x563ea8196958 parent 0x563ea805b698 <line:617:2, col:9> col:9 struct _thread_arch
| `-FieldDecl 0x563ea8196a60 <col:2, col:22> col:22 invalid arch 'struct _thread_arch':'struct _thread_arch'
|   `-FullComment 0x563ea82a1fd0 <line:616:5, col:47>
|     `-ParagraphComment 0x563ea82a1fa0 <col:5, col:47>
|       `-TextComment 0x563ea82a1f70 <col:5, col:47> Text=" arch-specifics: must always be at the end "
|-TypedefDecl 0x563ea8196b90 <line:620:1, col:25> col:25 _thread_t 'struct k_thread':'struct k_thread'
| `-ElaboratedType 0x563ea814bda0 'struct k_thread' sugar
|   `-RecordType 0x563ea814bd10 'struct k_thread'
|     `-Record 0x563ea8196358 'k_thread'
|-TypedefDecl 0x563ea8196c10 <line:621:1, col:26> col:26 referenced k_tid_t 'struct k_thread *'
| `-PointerType 0x563ea814be00 'struct k_thread *'
|   `-ElaboratedType 0x563ea814bda0 'struct k_thread' sugar
|     `-RecordType 0x563ea814bd10 'struct k_thread'
|       `-Record 0x563ea8196358 'k_thread'
|-EnumDecl 0x563ea8196c68 <line:623:1, line:627:1> line:623:6 execution_context_types
| |-EnumConstantDecl 0x563ea8196d40 <line:624:2, col:10> col:2 K_ISR 'int'
| | `-IntegerLiteral 0x563ea8196d20 <col:10> 'int' 0
| |-EnumConstantDecl 0x563ea8196d88 <line:625:2> col:2 K_COOP_THREAD 'int'
| `-EnumConstantDecl 0x563ea81fcfe0 <line:626:2> col:2 K_PREEMPT_THREAD 'int'
|-TypedefDecl 0x563ea81fd308 <line:634:1, line:635:23> line:634:16 referenced k_thread_user_cb_t 'void (*)(const struct k_thread *, void *)'
| |-PointerType 0x563ea81fd2a0 'void (*)(const struct k_thread *, void *)'
| | `-ParenType 0x563ea81fd240 'void (const struct k_thread *, void *)' sugar
| |   `-FunctionProtoType 0x563ea81fd200 'void (const struct k_thread *, void *)' cdecl
| |     |-BuiltinType 0x563ea805b6f0 'void'
| |     |-PointerType 0x563ea81fd090 'const struct k_thread *'
| |     | `-QualType 0x563ea814bda1 'const struct k_thread' const
| |     |   `-ElaboratedType 0x563ea814bda0 'struct k_thread' sugar
| |     |     `-RecordType 0x563ea814bd10 'struct k_thread'
| |     |       `-Record 0x563ea8196358 'k_thread'
| |     `-PointerType 0x563ea805bb90 'void *'
| |       `-BuiltinType 0x563ea805b6f0 'void'
| `-FullComment 0x563ea82a2190 <line:630:3, line:631:5>
|   |-ParagraphComment 0x563ea82a2070 <line:630:3>
|   | `-TextComment 0x563ea82a2040 <col:3> Text=" "
|   |-VerbatimLineComment 0x563ea82a2090 <col:4, col:27> Text=" thread_apis"
|   `-ParagraphComment 0x563ea82a2150 <line:631:3, col:5>
|     |-TextComment 0x563ea82a20d0 <col:3> Text=" "
|     |-TextComment 0x563ea82a20f0 <col:4> Text="@"
|     `-TextComment 0x563ea82a2110 <col:5> Text="{"
|-FunctionDecl 0x563ea81fd550 <line:654:1, col:73> col:13 k_thread_foreach 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x563ea81fd3c0 <col:30, col:49> col:49 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x563ea81fd438 <col:58, col:64> col:64 user_data 'void *'
| `-FullComment 0x563ea82a28b0 <line:638:3, line:652:14>
|   |-ParagraphComment 0x563ea82a2230 <line:638:3>
|   | `-TextComment 0x563ea82a2200 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a2250 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x563ea82a22b0 <col:10, col:53>
|   |   `-TextComment 0x563ea82a2280 <col:10, col:53> Text=" Iterate over all the threads in the system."
|   |-ParagraphComment 0x563ea82a2320 <line:640:3, line:641:46>
|   | |-TextComment 0x563ea82a22d0 <line:640:3, col:63> Text=" This routine iterates over all the threads in the system and"
|   | `-TextComment 0x563ea82a22f0 <line:641:3, col:46> Text=" calls the user_cb function for each thread."
|   |-ParagraphComment 0x563ea82a2370 <line:643:3>
|   | `-TextComment 0x563ea82a2340 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a2390 <col:4, line:644:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a2440 <line:643:18, line:644:3>
|   |   |-TextComment 0x563ea82a23f0 <line:643:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x563ea82a2410 <line:644:3> Text=" "
|   |-ParamCommandComment 0x563ea82a2460 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x563ea82a2500 <col:20, col:41>
|   |   `-TextComment 0x563ea82a24d0 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x563ea82a2550 <line:646:3>
|   | `-TextComment 0x563ea82a2520 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a2570 <col:4, line:648:3> Name="note"
|   | `-ParagraphComment 0x563ea82a2620 <line:646:9, line:648:3>
|   |   |-TextComment 0x563ea82a25a0 <line:646:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x563ea82a25c0 <line:647:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x563ea82a25e0 <line:648:3> Text=" "
|   |-BlockCommandComment 0x563ea82a2640 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x563ea82a26a0 <col:9, col:23>
|   |   `-TextComment 0x563ea82a2670 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x563ea82a26c0 <col:24, col:71> Text=" k_spin_lock to protect the _kernel.threads"
|   |-ParagraphComment 0x563ea82a2750 <line:649:3, line:650:46>
|   | |-TextComment 0x563ea82a2700 <line:649:3, col:72> Text=" list which means creation of new threads and terminations of existing"
|   | `-TextComment 0x563ea82a2720 <line:650:3, col:46> Text=" threads are blocked until this API returns."
|   |-ParagraphComment 0x563ea82a27a0 <line:652:3>
|   | `-TextComment 0x563ea82a2770 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82a27c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82a2820 <col:11, col:14>
|       `-TextComment 0x563ea82a27f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea81fd740 <line:683:1, line:684:45> line:683:13 k_thread_foreach_unlocked 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x563ea81fd638 <line:684:2, col:21> col:21 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x563ea81fd6b0 <col:30, col:36> col:36 user_data 'void *'
| `-FullComment 0x563ea82a33b0 <line:657:3, line:681:72>
|   |-ParagraphComment 0x563ea82a2950 <line:657:3>
|   | `-TextComment 0x563ea82a2920 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a2970 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x563ea82a29d0 <col:10, col:69>
|   |   `-TextComment 0x563ea82a29a0 <col:10, col:69> Text=" Iterate over all the threads in the system without locking."
|   |-ParagraphComment 0x563ea82a2a20 <line:659:3, col:44>
|   | `-TextComment 0x563ea82a29f0 <col:3, col:44> Text=" This routine works exactly the same like "
|   |-VerbatimLineComment 0x563ea82a2a40 <col:45, col:66> Text=" k_thread_foreach"
|   |-ParagraphComment 0x563ea82a2ab0 <line:660:3, col:51>
|   | `-TextComment 0x563ea82a2a80 <col:3, col:51> Text=" but unlocks interrupts when user_cb is executed."
|   |-ParagraphComment 0x563ea82a2b00 <line:662:3>
|   | `-TextComment 0x563ea82a2ad0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a2b20 <col:4, line:663:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a2bd0 <line:662:18, line:663:3>
|   |   |-TextComment 0x563ea82a2b80 <line:662:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x563ea82a2ba0 <line:663:3> Text=" "
|   |-ParamCommandComment 0x563ea82a2bf0 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x563ea82a2c80 <col:20, col:41>
|   |   `-TextComment 0x563ea82a2c50 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x563ea82a2cd0 <line:665:3>
|   | `-TextComment 0x563ea82a2ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a2cf0 <col:4, line:667:3> Name="note"
|   | `-ParagraphComment 0x563ea82a2da0 <line:665:9, line:667:3>
|   |   |-TextComment 0x563ea82a2d20 <line:665:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x563ea82a2d40 <line:666:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x563ea82a2d60 <line:667:3> Text=" "
|   |-BlockCommandComment 0x563ea82a2dc0 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x563ea82a2e20 <col:9, col:23>
|   |   `-TextComment 0x563ea82a2df0 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x563ea82a2e40 <col:24, col:80> Text=" k_spin_lock only when accessing the _kernel.threads"
|   |-ParagraphComment 0x563ea82a3020 <line:668:3, line:674:3>
|   | |-TextComment 0x563ea82a2e80 <line:668:3, col:74> Text=" queue elements. It unlocks it during user callback function processing."
|   | |-TextComment 0x563ea82a2ea0 <line:669:3, col:38> Text=" If a new task is created when this "
|   | |-InlineCommandComment 0x563ea82a2ef0 <col:39, col:40> Name="c" RenderMonospaced Arg[0]="foreach"
|   | |-TextComment 0x563ea82a2f10 <col:49, col:73> Text=" function is in progress,"
|   | |-TextComment 0x563ea82a2f30 <line:670:3, col:63> Text=" the added new task would not be included in the enumeration."
|   | |-TextComment 0x563ea82a2f50 <line:671:3, col:75> Text=" If a task is aborted during this enumeration, there would be a race here"
|   | |-TextComment 0x563ea82a2f70 <line:672:3, col:77> Text=" and there is a possibility that this aborted task would be included in the"
|   | |-TextComment 0x563ea82a2f90 <line:673:3, col:15> Text=" enumeration."
|   | `-TextComment 0x563ea82a2fb0 <line:674:3> Text=" "
|   `-BlockCommandComment 0x563ea82a3040 <col:4, line:681:72> Name="note"
|     `-ParagraphComment 0x563ea82a3320 <line:674:9, line:681:72>
|       |-TextComment 0x563ea82a3070 <line:674:9, col:63> Text=" If the task is aborted and the memory occupied by its "
|       |-InlineCommandComment 0x563ea82a30c0 <col:64, col:65> Name="c" RenderMonospaced Arg[0]="k_thread"
|       |-TextComment 0x563ea82a30e0 <line:675:3, col:33> Text=" structure is reused when this "
|       |-InlineCommandComment 0x563ea82a3140 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="k_thread_foreach_unlocked"
|       |-TextComment 0x563ea82a3160 <col:62, col:76> Text=" is in progress"
|       |-TextComment 0x563ea82a3180 <line:676:3, col:52> Text=" it might even lead to the system behave unstable."
|       |-TextComment 0x563ea82a31a0 <line:677:3, col:59> Text=" This function may never return, as it would follow some "
|       |-InlineCommandComment 0x563ea82a31f0 <col:60, col:61> Name="c" RenderMonospaced Arg[0]="next"
|       |-TextComment 0x563ea82a3210 <col:67, col:71> Text=" task"
|       |-TextComment 0x563ea82a3230 <line:678:3, col:73> Text=" pointers treating given pointer as a pointer to the k_thread structure"
|       |-TextComment 0x563ea82a3250 <line:679:3, col:45> Text=" while it is something different right now."
|       |-TextComment 0x563ea82a3270 <line:680:3, col:77> Text=" Do not reuse the memory that was occupied by k_thread structure of aborted"
|       `-TextComment 0x563ea82a3290 <line:681:3, col:72> Text=" task if it was aborted after this function was called in any context."
|-FunctionDecl 0x563ea8201000 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:784:43> line:779:19 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x563ea81fd958 <col:35, col:52> col:52 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x563ea81fd9c8 <line:780:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x563ea81fda38 <line:781:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea81fdad0 <line:782:7, col:24> col:24 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x563ea81fdb48 <line:783:7, col:13> col:13 p1 'void *'
| |-ParmVarDecl 0x563ea81fdbc0 <col:17, col:23> col:23 p2 'void *'
| |-ParmVarDecl 0x563ea81fdc38 <col:27, col:33> col:33 p3 'void *'
| |-ParmVarDecl 0x563ea81fdcb0 <line:784:7, col:11> col:11 prio 'int'
| |-ParmVarDecl 0x563ea81fdd20 <col:17, col:23> col:23 options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x563ea81fdd90 <col:32, col:38> col:38 delay 's32_t':'int'
| `-FullComment 0x563ea82a4210 <line:746:3, line:778:1>
|   |-ParagraphComment 0x563ea82a3450 <line:746:3>
|   | `-TextComment 0x563ea82a3420 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a3470 <col:4, col:26> Name="brief"
|   | `-ParagraphComment 0x563ea82a34d0 <col:10, col:26>
|   |   `-TextComment 0x563ea82a34a0 <col:10, col:26> Text=" Create a thread."
|   |-ParagraphComment 0x563ea82a3520 <line:748:3, col:70>
|   | `-TextComment 0x563ea82a34f0 <col:3, col:70> Text=" This routine initializes a thread, then schedules it for execution."
|   |-ParagraphComment 0x563ea82a35e0 <line:750:3, line:753:11>
|   | |-TextComment 0x563ea82a3540 <line:750:3, col:78> Text=" The new thread may be scheduled for immediate execution or a delayed start."
|   | |-TextComment 0x563ea82a3560 <line:751:3, col:71> Text=" If the newly spawned thread does not have a delayed start the kernel"
|   | |-TextComment 0x563ea82a3580 <line:752:3, col:70> Text=" scheduler may preempt the current thread to allow the new thread to"
|   | `-TextComment 0x563ea82a35a0 <line:753:3, col:11> Text=" execute."
|   |-ParagraphComment 0x563ea82a3680 <line:755:3, line:757:44>
|   | |-TextComment 0x563ea82a3600 <line:755:3, col:73> Text=" Thread options are architecture-specific, and can include K_ESSENTIAL,"
|   | |-TextComment 0x563ea82a3620 <line:756:3, col:77> Text=" K_FP_REGS, and K_SSE_REGS. Multiple options may be specified by separating"
|   | `-TextComment 0x563ea82a3640 <line:757:3, col:44> Text=" them using "|" (the logical OR operator)."
|   |-ParagraphComment 0x563ea82a3740 <line:759:3, line:762:13>
|   | |-TextComment 0x563ea82a36a0 <line:759:3, col:79> Text=" Historically, users often would use the beginning of the stack memory region"
|   | |-TextComment 0x563ea82a36c0 <line:760:3, col:75> Text=" to store the struct k_thread data, although corruption will occur if the"
|   | |-TextComment 0x563ea82a36e0 <line:761:3, col:80> Text=" stack overflows this region and stack protection features may not detect this"
|   | `-TextComment 0x563ea82a3700 <line:762:3, col:13> Text=" situation."
|   |-ParagraphComment 0x563ea82a3790 <line:764:3>
|   | `-TextComment 0x563ea82a3760 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a37b0 <col:4, line:765:3> [in] implicitly Param="new_thread" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a3860 <line:764:21, line:765:3>
|   |   |-TextComment 0x563ea82a3810 <line:764:21, col:61> Text=" Pointer to uninitialized struct k_thread"
|   |   `-TextComment 0x563ea82a3830 <line:765:3> Text=" "
|   |-ParamCommandComment 0x563ea82a3880 <col:4, line:766:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x563ea82a3930 <line:765:16, line:766:3>
|   |   |-TextComment 0x563ea82a38e0 <line:765:16, col:43> Text=" Pointer to the stack space."
|   |   `-TextComment 0x563ea82a3900 <line:766:3> Text=" "
|   |-ParamCommandComment 0x563ea82a3950 <col:4, line:767:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x563ea82a3a00 <line:766:21, line:767:3>
|   |   |-TextComment 0x563ea82a39b0 <line:766:21, col:41> Text=" Stack size in bytes."
|   |   `-TextComment 0x563ea82a39d0 <line:767:3> Text=" "
|   |-ParamCommandComment 0x563ea82a3a20 <col:4, line:768:3> [in] implicitly Param="entry" ParamIndex=3
|   | `-ParagraphComment 0x563ea82a3ad0 <line:767:16, line:768:3>
|   |   |-TextComment 0x563ea82a3a80 <line:767:16, col:38> Text=" Thread entry function."
|   |   `-TextComment 0x563ea82a3aa0 <line:768:3> Text=" "
|   |-ParamCommandComment 0x563ea82a3af0 <col:4, line:769:3> [in] implicitly Param="p1" ParamIndex=4
|   | `-ParagraphComment 0x563ea82a3ba0 <line:768:13, line:769:3>
|   |   |-TextComment 0x563ea82a3b50 <line:768:13, col:39> Text=" 1st entry point parameter."
|   |   `-TextComment 0x563ea82a3b70 <line:769:3> Text=" "
|   |-ParamCommandComment 0x563ea82a3bc0 <col:4, line:770:3> [in] implicitly Param="p2" ParamIndex=5
|   | `-ParagraphComment 0x563ea82a3c70 <line:769:13, line:770:3>
|   |   |-TextComment 0x563ea82a3c20 <line:769:13, col:39> Text=" 2nd entry point parameter."
|   |   `-TextComment 0x563ea82a3c40 <line:770:3> Text=" "
|   |-ParamCommandComment 0x563ea82a3c90 <col:4, line:771:3> [in] implicitly Param="p3" ParamIndex=6
|   | `-ParagraphComment 0x563ea82a3d40 <line:770:13, line:771:3>
|   |   |-TextComment 0x563ea82a3cf0 <line:770:13, col:39> Text=" 3rd entry point parameter."
|   |   `-TextComment 0x563ea82a3d10 <line:771:3> Text=" "
|   |-ParamCommandComment 0x563ea82a3d60 <col:4, line:772:3> [in] implicitly Param="prio" ParamIndex=7
|   | `-ParagraphComment 0x563ea82a3e10 <line:771:15, line:772:3>
|   |   |-TextComment 0x563ea82a3dc0 <line:771:15, col:31> Text=" Thread priority."
|   |   `-TextComment 0x563ea82a3de0 <line:772:3> Text=" "
|   |-ParamCommandComment 0x563ea82a3e30 <col:4, line:773:3> [in] implicitly Param="options" ParamIndex=8
|   | `-ParagraphComment 0x563ea82a3ee0 <line:772:18, line:773:3>
|   |   |-TextComment 0x563ea82a3e90 <line:772:18, col:33> Text=" Thread options."
|   |   `-TextComment 0x563ea82a3eb0 <line:773:3> Text=" "
|   |-ParamCommandComment 0x563ea82a3f00 <col:4, col:80> [in] implicitly Param="delay" ParamIndex=9
|   | `-ParagraphComment 0x563ea82a3f90 <col:16, col:80>
|   |   `-TextComment 0x563ea82a3f60 <col:16, col:80> Text=" Scheduling delay (in milliseconds), or K_NO_WAIT (for no delay)."
|   |-ParagraphComment 0x563ea82a3fe0 <line:775:3>
|   | `-TextComment 0x563ea82a3fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a4000 <col:4, col:28> Name="return"
|   | `-ParagraphComment 0x563ea82a4060 <col:11, col:28>
|   |   `-TextComment 0x563ea82a4030 <col:11, col:28> Text=" ID of new thread."
|   |-ParagraphComment 0x563ea82a40b0 <line:777:3>
|   | `-TextComment 0x563ea82a4080 <col:3> Text=" "
|   |-VerbatimLineComment 0x563ea82a40d0 <col:4, col:21> Text=" K-THREAD-001"
|   `-ParagraphComment 0x563ea82a4140 <line:778:1>
|     `-TextComment 0x563ea82a4110 <col:1> Text=" "
|-FunctionDecl 0x563ea8201470 <line:795:1, line:797:18> line:795:27 k_thread_user_mode_enter 'void (k_thread_entry_t, void *, void *, void *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x563ea8201128 <col:52, col:69> col:69 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x563ea82011a0 <line:796:10, col:16> col:16 p1 'void *'
| |-ParmVarDecl 0x563ea8201218 <col:20, col:26> col:26 p2 'void *'
| |-ParmVarDecl 0x563ea8201290 <line:797:10, col:16> col:16 p3 'void *'
| `-FullComment 0x563ea82a47d0 <line:787:3, line:794:1>
|   |-ParagraphComment 0x563ea82a42b0 <line:787:3>
|   | `-TextComment 0x563ea82a4280 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a42d0 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x563ea82a4330 <col:10, col:61>
|   |   `-TextComment 0x563ea82a4300 <col:10, col:61> Text=" Drop a thread's privileges permanently to user mode"
|   |-ParagraphComment 0x563ea82a4380 <line:789:3>
|   | `-TextComment 0x563ea82a4350 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a43a0 <col:4, line:790:3> [in] implicitly Param="entry" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a4450 <line:789:16, line:790:3>
|   |   |-TextComment 0x563ea82a4400 <line:789:16, col:48> Text=" Function to start executing from"
|   |   `-TextComment 0x563ea82a4420 <line:790:3> Text=" "
|   |-ParamCommandComment 0x563ea82a4470 <col:4, line:791:3> [in] implicitly Param="p1" ParamIndex=1
|   | `-ParagraphComment 0x563ea82a4530 <line:790:13, line:791:3>
|   |   |-TextComment 0x563ea82a44e0 <line:790:13, col:38> Text=" 1st entry point parameter"
|   |   `-TextComment 0x563ea82a4500 <line:791:3> Text=" "
|   |-ParamCommandComment 0x563ea82a4550 <col:4, line:792:3> [in] implicitly Param="p2" ParamIndex=2
|   | `-ParagraphComment 0x563ea82a4600 <line:791:13, line:792:3>
|   |   |-TextComment 0x563ea82a45b0 <line:791:13, col:38> Text=" 2nd entry point parameter"
|   |   `-TextComment 0x563ea82a45d0 <line:792:3> Text=" "
|   |-ParamCommandComment 0x563ea82a4620 <col:4, line:793:3> [in] implicitly Param="p3" ParamIndex=3
|   | `-ParagraphComment 0x563ea82a46d0 <line:792:13, line:793:3>
|   |   |-TextComment 0x563ea82a4680 <line:792:13, col:38> Text=" 3rd entry point parameter"
|   |   `-TextComment 0x563ea82a46a0 <line:793:3> Text=" "
|   |-VerbatimLineComment 0x563ea82a46f0 <col:4, col:21> Text=" K-THREAD-003"
|   `-ParagraphComment 0x563ea82a4760 <line:794:1>
|     `-TextComment 0x563ea82a4730 <col:1> Text=" "
|-FunctionDecl 0x563ea8201750 <line:831:1, line:835:1> line:831:20 k_thread_resource_pool_assign 'void (struct k_thread *, struct k_mem_pool *)' static inline
| |-ParmVarDecl 0x563ea82015b0 <col:50, col:67> col:67 used thread 'struct k_thread *'
| |-ParmVarDecl 0x563ea8201638 <line:832:8, col:27> col:27 used pool 'struct k_mem_pool *'
| |-CompoundStmt 0x563ea8201908 <line:833:1, line:835:1>
| | `-BinaryOperator 0x563ea82018b8 <line:834:2, col:26> 'struct k_mem_pool *' '='
| |   |-MemberExpr 0x563ea8201840 <col:2, col:10> 'struct k_mem_pool *' lvalue ->resource_pool 0x563ea81968e0
| |   | `-ImplicitCastExpr 0x563ea8201828 <col:2> 'struct k_thread *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x563ea8201800 <col:2> 'struct k_thread *' lvalue ParmVar 0x563ea82015b0 'thread' 'struct k_thread *'
| |   `-ImplicitCastExpr 0x563ea82018a0 <col:26> 'struct k_mem_pool *' <LValueToRValue>
| |     `-DeclRefExpr 0x563ea8201878 <col:26> 'struct k_mem_pool *' lvalue ParmVar 0x563ea8201638 'pool' 'struct k_mem_pool *'
| `-FullComment 0x563ea82a4d20 <line:817:3, line:830:1>
|   |-ParagraphComment 0x563ea82a4870 <line:817:3>
|   | `-TextComment 0x563ea82a4840 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a4890 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x563ea82a48f0 <col:10, col:51>
|   |   `-TextComment 0x563ea82a48c0 <col:10, col:51> Text=" Assign a resource memory pool to a thread"
|   |-ParagraphComment 0x563ea82a4990 <line:819:3, line:821:51>
|   | |-TextComment 0x563ea82a4910 <line:819:3, col:73> Text=" By default, threads have no resource pool assigned unless their parent"
|   | |-TextComment 0x563ea82a4930 <line:820:3, col:70> Text=" thread has a resource pool, in which case it is inherited. Multiple"
|   | `-TextComment 0x563ea82a4950 <line:821:3, col:51> Text=" threads may be assigned to the same memory pool."
|   |-ParagraphComment 0x563ea82a4a00 <line:823:3, line:824:17>
|   | |-TextComment 0x563ea82a49b0 <line:823:3, col:74> Text=" Changing a thread's resource pool will not migrate allocations from the"
|   | `-TextComment 0x563ea82a49d0 <line:824:3, col:17> Text=" previous pool."
|   |-ParagraphComment 0x563ea82a4a50 <line:826:3>
|   | `-TextComment 0x563ea82a4a20 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a4a70 <col:4, line:828:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a4b50 <line:826:17, line:828:3>
|   |   |-TextComment 0x563ea82a4ad0 <line:826:17, col:77> Text=" Target thread to assign a memory pool for resource requests,"
|   |   |-TextComment 0x563ea82a4af0 <line:827:3, col:75> Text="               or NULL if the thread should no longer have a memory pool."
|   |   `-TextComment 0x563ea82a4b10 <line:828:3> Text=" "
|   |-ParamCommandComment 0x563ea82a4b70 <col:4, line:829:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x563ea82a4c20 <line:828:15, line:829:3>
|   |   |-TextComment 0x563ea82a4bd0 <line:828:15, col:48> Text=" Memory pool to use for resources."
|   |   `-TextComment 0x563ea82a4bf0 <line:829:3> Text=" "
|   |-VerbatimLineComment 0x563ea82a4c40 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x563ea82a4cb0 <line:830:1>
|     `-TextComment 0x563ea82a4c80 <col:1> Text=" "
|-FunctionDecl 0x563ea8201a30 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:864:33> col:17 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x563ea8201930 <col:25, col:31> col:31 ms 's32_t':'int'
| `-FullComment 0x563ea82a5200 <line:855:3, line:863:1>
|   |-ParagraphComment 0x563ea82a4dc0 <line:855:3>
|   | `-TextComment 0x563ea82a4d90 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a4de0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x563ea82a4e40 <col:10, col:42>
|   |   `-TextComment 0x563ea82a4e10 <col:10, col:42> Text=" Put the current thread to sleep."
|   |-ParagraphComment 0x563ea82a4f10 <line:857:3, col:78>
|   | |-TextComment 0x563ea82a4e60 <col:3, col:53> Text=" This routine puts the current thread to sleep for "
|   | |-InlineCommandComment 0x563ea82a4eb0 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="duration"
|   | `-TextComment 0x563ea82a4ed0 <col:65, col:78> Text=" milliseconds."
|   |-ParagraphComment 0x563ea82a4f60 <line:859:3>
|   | `-TextComment 0x563ea82a4f30 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a4f80 <col:4, col:45> [in] implicitly Param="ms" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a5010 <col:13, col:45>
|   |   `-TextComment 0x563ea82a4fe0 <col:13, col:45> Text=" Number of milliseconds to sleep."
|   |-ParagraphComment 0x563ea82a5060 <line:861:3>
|   | `-TextComment 0x563ea82a5030 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a5080 <col:4, line:862:44> Name="return"
|   | `-ParagraphComment 0x563ea82a5100 <line:861:11, line:862:44>
|   |   |-TextComment 0x563ea82a50b0 <line:861:11, col:79> Text=" Zero if the requested time has elapsed or the number of milliseconds"
|   |   `-TextComment 0x563ea82a50d0 <line:862:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x563ea82a5120 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x563ea82a5190 <line:863:1>
|     `-TextComment 0x563ea82a5160 <col:1> Text=" "
|-FunctionDecl 0x563ea8201ba0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:880:34> col:17 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x563ea8201b18 <col:26, col:32> col:32 us 's32_t':'int'
| `-FullComment 0x563ea82a5700 <line:867:3, line:879:1>
|   |-ParagraphComment 0x563ea82a52a0 <line:867:3>
|   | `-TextComment 0x563ea82a5270 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a52c0 <col:4, col:70> Name="brief"
|   | `-ParagraphComment 0x563ea82a5320 <col:10, col:70>
|   |   `-TextComment 0x563ea82a52f0 <col:10, col:70> Text=" Put the current thread to sleep with microsecond resolution."
|   |-ParagraphComment 0x563ea82a5410 <line:869:3, line:873:71>
|   | |-TextComment 0x563ea82a5340 <line:869:3, col:71> Text=" This function is unlikely to work as expected without kernel tuning."
|   | |-TextComment 0x563ea82a5360 <line:870:3, col:71> Text=" In particular, because the lower bound on the duration of a sleep is"
|   | |-TextComment 0x563ea82a5380 <line:871:3, col:74> Text=" the duration of a tick, CONFIG_SYS_CLOCK_TICKS_PER_SEC must be adjusted"
|   | |-TextComment 0x563ea82a53a0 <line:872:3, col:73> Text=" to achieve the resolution desired. The implications of doing this must"
|   | `-TextComment 0x563ea82a53c0 <line:873:3, col:71> Text=" be understood before attempting to use k_usleep(). Use with caution."
|   |-ParagraphComment 0x563ea82a5460 <line:875:3>
|   | `-TextComment 0x563ea82a5430 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a5480 <col:4, col:45> [in] implicitly Param="us" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a5510 <col:13, col:45>
|   |   `-TextComment 0x563ea82a54e0 <col:13, col:45> Text=" Number of microseconds to sleep."
|   |-ParagraphComment 0x563ea82a5560 <line:877:3>
|   | `-TextComment 0x563ea82a5530 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a5580 <col:4, line:878:44> Name="return"
|   | `-ParagraphComment 0x563ea82a5600 <line:877:11, line:878:44>
|   |   |-TextComment 0x563ea82a55b0 <line:877:11, col:79> Text=" Zero if the requested time has elapsed or the number of microseconds"
|   |   `-TextComment 0x563ea82a55d0 <line:878:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x563ea82a5620 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x563ea82a5690 <line:879:1>
|     `-TextComment 0x563ea82a5660 <col:1> Text=" "
|-FunctionDecl 0x563ea8201d50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:890:46> col:16 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x563ea8201c88 <col:28, col:34> col:34 usec_to_wait 'u32_t':'unsigned int'
| `-FullComment 0x563ea82a5a30 <line:883:3, line:888:14>
|   |-ParagraphComment 0x563ea82a57a0 <line:883:3>
|   | `-TextComment 0x563ea82a5770 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a57c0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x563ea82a5820 <col:10, col:48>
|   |   `-TextComment 0x563ea82a57f0 <col:10, col:48> Text=" Cause the current thread to busy wait."
|   |-ParagraphComment 0x563ea82a5910 <line:885:3, line:886:32>
|   | |-TextComment 0x563ea82a5840 <line:885:3, col:76> Text=" This routine causes the current thread to execute a "do nothing" loop for"
|   | |-TextComment 0x563ea82a5860 <line:886:3> Text=" "
|   | |-InlineCommandComment 0x563ea82a58b0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="usec_to_wait"
|   | `-TextComment 0x563ea82a58d0 <col:19, col:32> Text=" microseconds."
|   |-ParagraphComment 0x563ea82a5960 <line:888:3>
|   | `-TextComment 0x563ea82a5930 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82a5980 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82a59e0 <col:11, col:14>
|       `-TextComment 0x563ea82a59b0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea8201eb8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:902:28> col:16 k_yield 'void (void)' static inline
| `-FullComment 0x563ea82a5dd0 <line:893:3, line:901:1>
|   |-ParagraphComment 0x563ea82a5ad0 <line:893:3>
|   | `-TextComment 0x563ea82a5aa0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a5af0 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x563ea82a5b50 <col:10, col:35>
|   |   `-TextComment 0x563ea82a5b20 <col:10, col:35> Text=" Yield the current thread."
|   |-ParagraphComment 0x563ea82a5bf0 <line:895:3, line:897:67>
|   | |-TextComment 0x563ea82a5b70 <line:895:3, col:71> Text=" This routine causes the current thread to yield execution to another"
|   | |-TextComment 0x563ea82a5b90 <line:896:3, col:77> Text=" thread of the same or higher priority. If there are no other ready threads"
|   | `-TextComment 0x563ea82a5bb0 <line:897:3, col:67> Text=" of the same or higher priority, the routine returns immediately."
|   |-ParagraphComment 0x563ea82a5c40 <line:899:3>
|   | `-TextComment 0x563ea82a5c10 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a5c60 <col:4, line:900:3> Name="return"
|   | `-ParagraphComment 0x563ea82a5ce0 <line:899:11, line:900:3>
|   |   |-TextComment 0x563ea82a5c90 <line:899:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82a5cb0 <line:900:3> Text=" "
|   |-VerbatimLineComment 0x563ea82a5d00 <col:4, col:21> Text=" K-THREAD-015"
|   `-ParagraphComment 0x563ea82a5d70 <line:901:1>
|     `-TextComment 0x563ea82a5d40 <col:1> Text=" "
|-FunctionDecl 0x563ea82020b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:916:39> col:16 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x563ea8201f98 <col:25, col:33> col:33 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x563ea82a6380 <line:905:3, line:915:1>
|   |-ParagraphComment 0x563ea82a5e70 <line:905:3>
|   | `-TextComment 0x563ea82a5e40 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a5e90 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x563ea82a5ef0 <col:10, col:36>
|   |   `-TextComment 0x563ea82a5ec0 <col:10, col:36> Text=" Wake up a sleeping thread."
|   |-ParagraphComment 0x563ea82a5fc0 <line:907:3, col:61>
|   | |-TextComment 0x563ea82a5f10 <col:3, col:37> Text=" This routine prematurely wakes up "
|   | |-InlineCommandComment 0x563ea82a5f60 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x563ea82a5f80 <col:47, col:61> Text=" from sleeping."
|   |-ParagraphComment 0x563ea82a6090 <line:909:3, col:69>
|   | |-TextComment 0x563ea82a5fe0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x563ea82a6030 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x563ea82a6050 <col:16, col:69> Text=" is not currently sleeping, the routine has no effect."
|   |-ParagraphComment 0x563ea82a60e0 <line:911:3>
|   | `-TextComment 0x563ea82a60b0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a6100 <col:4, col:38> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a6190 <col:17, col:38>
|   |   `-TextComment 0x563ea82a6160 <col:17, col:38> Text=" ID of thread to wake."
|   |-ParagraphComment 0x563ea82a61e0 <line:913:3>
|   | `-TextComment 0x563ea82a61b0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a6200 <col:4, line:914:3> Name="return"
|   | `-ParagraphComment 0x563ea82a6280 <line:913:11, line:914:3>
|   |   |-TextComment 0x563ea82a6230 <line:913:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82a6250 <line:914:3> Text=" "
|   |-VerbatimLineComment 0x563ea82a62a0 <col:4, col:21> Text=" K-THREAD-014"
|   `-ParagraphComment 0x563ea82a6310 <line:915:1>
|     `-TextComment 0x563ea82a62e0 <col:1> Text=" "
|-FunctionDecl 0x563ea8202280 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:925:37> col:19 k_current_get 'k_tid_t (void)' static inline
| `-FullComment 0x563ea82a66d0 <line:919:3, line:924:1>
|   |-ParagraphComment 0x563ea82a6420 <line:919:3>
|   | `-TextComment 0x563ea82a63f0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a6440 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x563ea82a64c0 <col:10, col:46>
|   |   `-TextComment 0x563ea82a6470 <col:10, col:46> Text=" Get thread ID of the current thread."
|   |-ParagraphComment 0x563ea82a6510 <line:921:3>
|   | `-TextComment 0x563ea82a64e0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a6530 <col:4, col:32> Name="return"
|   | `-ParagraphComment 0x563ea82a6590 <col:11, col:32>
|   |   `-TextComment 0x563ea82a6560 <col:11, col:32> Text=" ID of current thread."
|   |-ParagraphComment 0x563ea82a65e0 <line:923:3>
|   | `-TextComment 0x563ea82a65b0 <col:3> Text=" "
|   |-VerbatimLineComment 0x563ea82a6600 <col:4, col:21> Text=" K-THREAD-013"
|   `-ParagraphComment 0x563ea82a6670 <line:924:1>
|     `-TextComment 0x563ea82a6640 <col:1> Text=" "
|-FunctionDecl 0x563ea82023e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:942:45> col:16 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x563ea8202358 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x563ea82a6c70 <line:928:3, line:941:1>
|   |-ParagraphComment 0x563ea82a6770 <line:928:3>
|   | `-TextComment 0x563ea82a6740 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a6790 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x563ea82a67f0 <col:10, col:25>
|   |   `-TextComment 0x563ea82a67c0 <col:10, col:25> Text=" Abort a thread."
|   |-ParagraphComment 0x563ea82a6980 <line:930:3, line:935:38>
|   | |-TextComment 0x563ea82a6810 <line:930:3, col:47> Text=" This routine permanently stops execution of "
|   | |-InlineCommandComment 0x563ea82a6860 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="thread."
|   | |-TextComment 0x563ea82a6880 <col:58, col:77> Text=" The thread is taken"
|   | |-TextComment 0x563ea82a68a0 <line:931:3, col:73> Text=" off all kernel queues it is part of (i.e. the ready queue, the timeout"
|   | |-TextComment 0x563ea82a68c0 <line:932:3, col:75> Text=" queue, or a kernel object wait queue). However, any kernel resources the"
|   | |-TextComment 0x563ea82a68e0 <line:933:3, col:72> Text=" thread might currently own (such as mutexes or memory blocks) are not"
|   | |-TextComment 0x563ea82a6900 <line:934:3, col:77> Text=" released. It is the responsibility of the caller of this routine to ensure"
|   | `-TextComment 0x563ea82a6920 <line:935:3, col:38> Text=" all necessary cleanup is performed."
|   |-ParagraphComment 0x563ea82a69d0 <line:937:3>
|   | `-TextComment 0x563ea82a69a0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a69f0 <col:4, col:39> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a6a80 <col:17, col:39>
|   |   `-TextComment 0x563ea82a6a50 <col:17, col:39> Text=" ID of thread to abort."
|   |-ParagraphComment 0x563ea82a6ad0 <line:939:3>
|   | `-TextComment 0x563ea82a6aa0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a6af0 <col:4, line:940:3> Name="return"
|   | `-ParagraphComment 0x563ea82a6b70 <line:939:11, line:940:3>
|   |   |-TextComment 0x563ea82a6b20 <line:939:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82a6b40 <line:940:3> Text=" "
|   |-VerbatimLineComment 0x563ea82a6b90 <col:4, col:21> Text=" K-THREAD-012"
|   `-ParagraphComment 0x563ea82a6c00 <line:941:1>
|     `-TextComment 0x563ea82a6bd0 <col:1> Text=" "
|-FunctionDecl 0x563ea8202550 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:955:45> col:16 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x563ea82024c8 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x563ea82a7040 <line:946:3, line:954:1>
|   |-ParagraphComment 0x563ea82a6d10 <line:946:3>
|   | `-TextComment 0x563ea82a6ce0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a6d30 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x563ea82a6d90 <col:10, col:34>
|   |   `-TextComment 0x563ea82a6d60 <col:10, col:34> Text=" Start an inactive thread"
|   |-ParagraphComment 0x563ea82a6e30 <line:948:3, line:950:9>
|   | |-TextComment 0x563ea82a6db0 <line:948:3, col:73> Text=" If a thread was created with K_FOREVER in the delay parameter, it will"
|   | |-TextComment 0x563ea82a6dd0 <line:949:3, col:69> Text=" not be added to the scheduling queue until this function is called"
|   | `-TextComment 0x563ea82a6df0 <line:950:3, col:9> Text=" on it."
|   |-ParagraphComment 0x563ea82a6e80 <line:952:3>
|   | `-TextComment 0x563ea82a6e50 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a6ea0 <col:4, line:953:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a6f50 <line:952:17, line:953:3>
|   |   |-TextComment 0x563ea82a6f00 <line:952:17, col:32> Text=" thread to start"
|   |   `-TextComment 0x563ea82a6f20 <line:953:3> Text=" "
|   |-VerbatimLineComment 0x563ea82a6f70 <col:4, col:21> Text=" K-THREAD-011"
|   `-ParagraphComment 0x563ea82a6fe0 <line:954:1>
|     `-TextComment 0x563ea82a6fb0 <col:1> Text=" "
|-RecordDecl 0x563ea8202628 <line:964:1, line:977:1> line:964:8 struct _static_thread_data definition
| |-FieldDecl 0x563ea82026f8 <line:965:2, col:19> col:19 init_thread 'struct k_thread *'
| |-FieldDecl 0x563ea8202750 <line:966:2, col:20> col:20 init_stack 'k_thread_stack_t *'
| |-FieldDecl 0x563ea82027b0 <line:967:2, col:15> col:15 init_stack_size 'unsigned int'
| |-FieldDecl 0x563ea8202808 <line:968:2, col:19> col:19 init_entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-FieldDecl 0x563ea8202868 <line:969:2, col:8> col:8 init_p1 'void *'
| |-FieldDecl 0x563ea82028c8 <line:970:2, col:8> col:8 init_p2 'void *'
| |-FieldDecl 0x563ea8202928 <line:971:2, col:8> col:8 init_p3 'void *'
| |-FieldDecl 0x563ea8202988 <line:972:2, col:6> col:6 init_prio 'int'
| |-FieldDecl 0x563ea82029e0 <line:973:2, col:8> col:8 init_options 'u32_t':'unsigned int'
| |-FieldDecl 0x563ea8202a38 <line:974:2, col:8> col:8 init_delay 's32_t':'int'
| |-FieldDecl 0x563ea8202b20 <line:975:2, col:25> col:9 init_abort 'void (*)(void)'
| `-FieldDecl 0x563ea8202b80 <line:976:2, col:14> col:14 init_name 'const char *'
|-FunctionDecl 0x563ea8202d78 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1053:51> col:15 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x563ea8202c68 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x563ea82a7550 <line:1044:3, line:1052:1>
|   |-ParagraphComment 0x563ea82a70e0 <line:1044:3>
|   | `-TextComment 0x563ea82a70b0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a7100 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x563ea82a7160 <col:10, col:34>
|   |   `-TextComment 0x563ea82a7130 <col:10, col:34> Text=" Get a thread's priority."
|   |-ParagraphComment 0x563ea82a7200 <line:1046:3, col:39>
|   | |-TextComment 0x563ea82a7180 <col:3, col:37> Text=" This routine gets the priority of "
|   | `-InlineCommandComment 0x563ea82a71d0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x563ea82a7250 <line:1048:3>
|   | `-TextComment 0x563ea82a7220 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a7270 <col:4, col:55> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a7300 <col:17, col:55>
|   |   `-TextComment 0x563ea82a72d0 <col:17, col:55> Text=" ID of thread whose priority is needed."
|   |-ParagraphComment 0x563ea82a7350 <line:1050:3>
|   | `-TextComment 0x563ea82a7320 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a7370 <col:4, line:1051:3> Name="return"
|   | `-ParagraphComment 0x563ea82a7450 <line:1050:11, line:1051:3>
|   |   |-TextComment 0x563ea82a73a0 <line:1050:11, col:23> Text=" Priority of "
|   |   |-InlineCommandComment 0x563ea82a73f0 <col:24, col:25> Name="a" RenderEmphasized Arg[0]="thread."
|   |   `-TextComment 0x563ea82a7410 <line:1051:3> Text=" "
|   |-VerbatimLineComment 0x563ea82a7470 <col:4, col:21> Text=" K-THREAD-009"
|   `-ParagraphComment 0x563ea82a74e0 <line:1052:1>
|     `-TextComment 0x563ea82a74b0 <col:1> Text=" "
|-FunctionDecl 0x563ea82036d0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1083:62> col:16 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x563ea8202e58 <col:38, col:46> col:46 thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x563ea8202ed0 <col:54, col:58> col:58 prio 'int'
| `-FullComment 0x563ea82a7f10 <line:1056:3, line:1082:1>
|   |-ParagraphComment 0x563ea82a75f0 <line:1056:3>
|   | `-TextComment 0x563ea82a75c0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a7610 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x563ea82a7670 <col:10, col:34>
|   |   `-TextComment 0x563ea82a7640 <col:10, col:34> Text=" Set a thread's priority."
|   |-ParagraphComment 0x563ea82a7710 <line:1058:3, col:54>
|   | |-TextComment 0x563ea82a7690 <col:3, col:52> Text=" This routine immediately changes the priority of "
|   | `-InlineCommandComment 0x563ea82a76e0 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x563ea82a7800 <line:1060:3, line:1061:10>
|   | |-TextComment 0x563ea82a7730 <line:1060:3, col:64> Text=" Rescheduling can occur immediately depending on the priority "
|   | |-InlineCommandComment 0x563ea82a7780 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x563ea82a77a0 <col:74, col:76> Text=" is"
|   | `-TextComment 0x563ea82a77c0 <line:1061:3, col:10> Text=" set to:"
|   |-ParagraphComment 0x563ea82a78f0 <line:1063:3, line:1064:75>
|   | |-TextComment 0x563ea82a7820 <line:1063:3, col:71> Text=" - If its priority is raised above the priority of the caller of this"
|   | |-TextComment 0x563ea82a7840 <line:1064:3, col:44> Text=" function, and the caller is preemptible, "
|   | |-InlineCommandComment 0x563ea82a7890 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x563ea82a78b0 <col:54, col:75> Text=" will be scheduled in."
|   |-ParagraphComment 0x563ea82a7990 <line:1066:3, line:1068:41>
|   | |-TextComment 0x563ea82a7910 <line:1066:3, col:75> Text=" - If the caller operates on itself, it lowers its priority below that of"
|   | |-TextComment 0x563ea82a7930 <line:1067:3, col:76> Text=" other threads in the system, and the caller is preemptible, the thread of"
|   | `-TextComment 0x563ea82a7950 <line:1068:3, col:41> Text=" highest priority will be scheduled in."
|   |-ParagraphComment 0x563ea82a7a30 <line:1070:3, line:1072:20>
|   | |-TextComment 0x563ea82a79b0 <line:1070:3, col:74> Text=" Priority can be assigned in the range of -CONFIG_NUM_COOP_PRIORITIES to"
|   | |-TextComment 0x563ea82a79d0 <line:1071:3, col:76> Text=" CONFIG_NUM_PREEMPT_PRIORITIES-1, where -CONFIG_NUM_COOP_PRIORITIES is the"
|   | `-TextComment 0x563ea82a79f0 <line:1072:3, col:20> Text=" highest priority."
|   |-ParagraphComment 0x563ea82a7a80 <line:1074:3>
|   | `-TextComment 0x563ea82a7a50 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a7aa0 <col:4, line:1075:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a7b50 <line:1074:17, line:1075:3>
|   |   |-TextComment 0x563ea82a7b00 <line:1074:17, col:58> Text=" ID of thread whose priority is to be set."
|   |   `-TextComment 0x563ea82a7b20 <line:1075:3> Text=" "
|   |-ParamCommandComment 0x563ea82a7b70 <col:4, col:28> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x563ea82a7c00 <col:15, col:28>
|   |   `-TextComment 0x563ea82a7bd0 <col:15, col:28> Text=" New priority."
|   |-ParagraphComment 0x563ea82a7c50 <line:1077:3>
|   | `-TextComment 0x563ea82a7c20 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a7c70 <col:4, line:1078:57> Name="warning"
|   | `-ParagraphComment 0x563ea82a7cf0 <line:1077:12, line:1078:57>
|   |   |-TextComment 0x563ea82a7ca0 <line:1077:12, col:73> Text=" Changing the priority of a thread currently involved in mutex"
|   |   `-TextComment 0x563ea82a7cc0 <line:1078:3, col:57> Text=" priority inheritance may result in undefined behavior."
|   |-ParagraphComment 0x563ea82a7d40 <line:1080:3>
|   | `-TextComment 0x563ea82a7d10 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a7d60 <col:4, line:1081:3> Name="return"
|   | `-ParagraphComment 0x563ea82a7de0 <line:1080:11, line:1081:3>
|   |   |-TextComment 0x563ea82a7d90 <line:1080:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82a7db0 <line:1081:3> Text=" "
|   |-VerbatimLineComment 0x563ea82a7e00 <col:4, col:21> Text=" K-THREAD-008"
|   `-ParagraphComment 0x563ea82a7e70 <line:1082:1>
|     `-TextComment 0x563ea82a7e40 <col:1> Text=" "
|-FunctionDecl 0x563ea8203840 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1213:47> col:16 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x563ea82037b8 <col:33, col:41> col:41 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x563ea82a8620 <line:1196:3, line:1212:1>
|   |-ParagraphComment 0x563ea82a7fb0 <line:1196:3>
|   | `-TextComment 0x563ea82a7f80 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a7fd0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x563ea82a8030 <col:10, col:27>
|   |   `-TextComment 0x563ea82a8000 <col:10, col:27> Text=" Suspend a thread."
|   |-ParagraphComment 0x563ea82a8240 <line:1198:3, line:1204:48>
|   | |-TextComment 0x563ea82a8050 <line:1198:3, col:58> Text=" This routine prevents the kernel scheduler from making "
|   | |-InlineCommandComment 0x563ea82a80a0 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x563ea82a80c0 <line:1199:3, col:56> Text=" the current thread. All other internal operations on "
|   | |-InlineCommandComment 0x563ea82a8110 <col:57, col:58> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x563ea82a8130 <col:66, col:69> Text=" are"
|   | |-TextComment 0x563ea82a8150 <line:1200:3, col:68> Text=" still performed; for example, kernel objects it is waiting on are"
|   | |-TextComment 0x563ea82a8170 <line:1201:3, col:55> Text=" still handed to it.  Note that any existing timeouts"
|   | |-TextComment 0x563ea82a8190 <line:1202:3, col:66> Text=" (e.g. k_sleep(), or a timeout argument to k_sem_take() et. al.)"
|   | |-TextComment 0x563ea82a81b0 <line:1203:3, col:62> Text=" will be canceled.  On resume, the thread will begin running"
|   | `-TextComment 0x563ea82a81d0 <line:1204:3, col:48> Text=" immediately and return from the blocked call."
|   |-ParagraphComment 0x563ea82a8310 <line:1206:3, col:64>
|   | |-TextComment 0x563ea82a8260 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x563ea82a82b0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x563ea82a82d0 <col:16, col:64> Text=" is already suspended, the routine has no effect."
|   |-ParagraphComment 0x563ea82a8360 <line:1208:3>
|   | `-TextComment 0x563ea82a8330 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a8380 <col:4, col:41> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a8410 <col:17, col:41>
|   |   `-TextComment 0x563ea82a83e0 <col:17, col:41> Text=" ID of thread to suspend."
|   |-ParagraphComment 0x563ea82a8460 <line:1210:3>
|   | `-TextComment 0x563ea82a8430 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a8480 <col:4, line:1211:3> Name="return"
|   | `-ParagraphComment 0x563ea82a8520 <line:1210:11, line:1211:3>
|   |   |-TextComment 0x563ea82a84d0 <line:1210:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82a84f0 <line:1211:3> Text=" "
|   |-VerbatimLineComment 0x563ea82a8540 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x563ea82a85b0 <line:1212:1>
|     `-TextComment 0x563ea82a8580 <col:1> Text=" "
|-FunctionDecl 0x563ea82039b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1228:46> col:16 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x563ea8203928 <col:32, col:40> col:40 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x563ea82a8bf0 <line:1216:3, line:1227:1>
|   |-ParagraphComment 0x563ea82a86c0 <line:1216:3>
|   | `-TextComment 0x563ea82a8690 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a86e0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x563ea82a8740 <col:10, col:36>
|   |   `-TextComment 0x563ea82a8710 <col:10, col:36> Text=" Resume a suspended thread."
|   |-ParagraphComment 0x563ea82a8830 <line:1218:3, line:1219:50>
|   | |-TextComment 0x563ea82a8760 <line:1218:3, col:52> Text=" This routine allows the kernel scheduler to make "
|   | |-InlineCommandComment 0x563ea82a87b0 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x563ea82a87d0 <col:62, col:73> Text=" the current"
|   | `-TextComment 0x563ea82a87f0 <line:1219:3, col:50> Text=" thread, when it is next eligible for that role."
|   |-ParagraphComment 0x563ea82a8900 <line:1221:3, col:70>
|   | |-TextComment 0x563ea82a8850 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x563ea82a88a0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x563ea82a88c0 <col:16, col:70> Text=" is not currently suspended, the routine has no effect."
|   |-ParagraphComment 0x563ea82a8950 <line:1223:3>
|   | `-TextComment 0x563ea82a8920 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a8970 <col:4, col:40> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a8a00 <col:17, col:40>
|   |   `-TextComment 0x563ea82a89d0 <col:17, col:40> Text=" ID of thread to resume."
|   |-ParagraphComment 0x563ea82a8a50 <line:1225:3>
|   | `-TextComment 0x563ea82a8a20 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a8a70 <col:4, line:1226:3> Name="return"
|   | `-ParagraphComment 0x563ea82a8af0 <line:1225:11, line:1226:3>
|   |   |-TextComment 0x563ea82a8aa0 <line:1225:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82a8ac0 <line:1226:3> Text=" "
|   |-VerbatimLineComment 0x563ea82a8b10 <col:4, col:21> Text=" K-THREAD-006"
|   `-ParagraphComment 0x563ea82a8b80 <line:1227:1>
|     `-TextComment 0x563ea82a8b50 <col:1> Text=" "
|-FunctionDecl 0x563ea8203c20 <line:1258:1, col:57> col:13 k_sched_time_slice_set 'void (s32_t, int)' extern
| |-ParmVarDecl 0x563ea8203a98 <col:36, col:42> col:42 slice 's32_t':'int'
| |-ParmVarDecl 0x563ea8203b10 <col:49, col:53> col:53 prio 'int'
| `-FullComment 0x563ea82a9540 <line:1231:3, line:1256:14>
|   |-ParagraphComment 0x563ea82a8c90 <line:1231:3>
|   | `-TextComment 0x563ea82a8c60 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a8cb0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x563ea82a8d10 <col:10, col:44>
|   |   `-TextComment 0x563ea82a8ce0 <col:10, col:44> Text=" Set time-slicing period and scope."
|   |-ParagraphComment 0x563ea82a8d80 <line:1233:3, line:1234:23>
|   | |-TextComment 0x563ea82a8d30 <line:1233:3, col:72> Text=" This routine specifies how the scheduler will perform time slicing of"
|   | `-TextComment 0x563ea82a8d50 <line:1234:3, col:23> Text=" preemptible threads."
|   |-ParagraphComment 0x563ea82a8f70 <line:1236:3, line:1240:74>
|   | |-TextComment 0x563ea82a8da0 <line:1236:3, col:27> Text=" To enable time slicing, "
|   | |-InlineCommandComment 0x563ea82a8df0 <col:28, col:29> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x563ea82a8e10 <col:36, col:67> Text=" must be non-zero. The scheduler"
|   | |-TextComment 0x563ea82a8e30 <line:1237:3, col:69> Text=" ensures that no thread runs for more than the specified time limit"
|   | |-TextComment 0x563ea82a8e50 <line:1238:3, col:71> Text=" before other threads of that priority are given a chance to execute."
|   | |-TextComment 0x563ea82a8e70 <line:1239:3, col:44> Text=" Any thread whose priority is higher than "
|   | |-InlineCommandComment 0x563ea82a8ec0 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="prio"
|   | |-TextComment 0x563ea82a8ee0 <col:52, col:72> Text=" is exempted, and may"
|   | `-TextComment 0x563ea82a8f00 <line:1240:3, col:74> Text=" execute as long as desired without being preempted due to time slicing."
|   |-ParagraphComment 0x563ea82a9030 <line:1242:3, line:1245:32>
|   | |-TextComment 0x563ea82a8f90 <line:1242:3, col:80> Text=" Time slicing only limits the maximum amount of time a thread may continuously"
|   | |-TextComment 0x563ea82a8fb0 <line:1243:3, col:74> Text=" execute. Once the scheduler selects a thread for execution, there is no"
|   | |-TextComment 0x563ea82a8fd0 <line:1244:3, col:79> Text=" minimum guaranteed time the thread will execute before threads of greater or"
|   | `-TextComment 0x563ea82a8ff0 <line:1245:3, col:32> Text=" equal priority are scheduled."
|   |-ParagraphComment 0x563ea82a90d0 <line:1247:3, line:1249:46>
|   | |-TextComment 0x563ea82a9050 <line:1247:3, col:68> Text=" When the current thread is the only one of that priority eligible"
|   | |-TextComment 0x563ea82a9070 <line:1248:3, col:71> Text=" for execution, this routine has no effect; the thread is immediately"
|   | `-TextComment 0x563ea82a9090 <line:1249:3, col:46> Text=" rescheduled after the slice period expires."
|   |-ParagraphComment 0x563ea82a9220 <line:1251:3, col:65>
|   | |-TextComment 0x563ea82a90f0 <col:3, col:36> Text=" To disable timeslicing, set both "
|   | |-InlineCommandComment 0x563ea82a9140 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x563ea82a9160 <col:45, col:49> Text=" and "
|   | |-InlineCommandComment 0x563ea82a91b0 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="prio"
|   | `-TextComment 0x563ea82a91d0 <col:57, col:65> Text=" to zero."
|   |-ParagraphComment 0x563ea82a9270 <line:1253:3>
|   | `-TextComment 0x563ea82a9240 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82a9290 <col:4, line:1254:3> [in] implicitly Param="slice" ParamIndex=0
|   | `-ParagraphComment 0x563ea82a9340 <line:1253:16, line:1254:3>
|   |   |-TextComment 0x563ea82a92f0 <line:1253:16, col:60> Text=" Maximum time slice length (in milliseconds)."
|   |   `-TextComment 0x563ea82a9310 <line:1254:3> Text=" "
|   |-ParamCommandComment 0x563ea82a9360 <col:4, col:71> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x563ea82a93f0 <col:15, col:71>
|   |   `-TextComment 0x563ea82a93c0 <col:15, col:71> Text=" Highest thread priority level eligible for time slicing."
|   |-ParagraphComment 0x563ea82a9440 <line:1256:3>
|   | `-TextComment 0x563ea82a9410 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82a9460 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82a94c0 <col:11, col:14>
|       `-TextComment 0x563ea82a9490 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea8203de8 <line:1278:1, col:29> col:13 k_is_in_isr 'bool (void)' extern
| `-FullComment 0x563ea82a9970 <line:1268:3, line:1276:37>
|   |-ParagraphComment 0x563ea82a95e0 <line:1268:3>
|   | `-TextComment 0x563ea82a95b0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a9600 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x563ea82a9660 <col:10, col:58>
|   |   `-TextComment 0x563ea82a9630 <col:10, col:58> Text=" Determine if code is running at interrupt level."
|   |-ParagraphComment 0x563ea82a96d0 <line:1270:3, line:1271:36>
|   | |-TextComment 0x563ea82a9680 <line:1270:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x563ea82a96a0 <line:1271:3, col:36> Text=" whether it is a thread or an ISR."
|   |-ParagraphComment 0x563ea82a9720 <line:1273:3>
|   | `-TextComment 0x563ea82a96f0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a9740 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82a97a0 <col:9, col:31>
|   |   `-TextComment 0x563ea82a9770 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82a97f0 <line:1275:3>
|   | `-TextComment 0x563ea82a97c0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a9810 <col:4, line:1276:3> Name="return"
|   | `-ParagraphComment 0x563ea82a9890 <line:1275:11, line:1276:3>
|   |   |-TextComment 0x563ea82a9840 <line:1275:11, col:40> Text=" false if invoked by a thread."
|   |   `-TextComment 0x563ea82a9860 <line:1276:3> Text=" "
|   `-BlockCommandComment 0x563ea82a98b0 <col:4, col:37> Name="return"
|     `-ParagraphComment 0x563ea82a9910 <col:11, col:37>
|       `-TextComment 0x563ea82a98e0 <col:11, col:37> Text=" true if invoked by an ISR."
|-FunctionDecl 0x563ea8203f50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1296:39> col:15 k_is_preempt_thread 'int (void)' static inline
| `-FullComment 0x563ea82a9e80 <line:1281:3, line:1294:55>
|   |-ParagraphComment 0x563ea82a9a10 <line:1281:3>
|   | `-TextComment 0x563ea82a99e0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a9a30 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x563ea82a9a90 <col:10, col:63>
|   |   `-TextComment 0x563ea82a9a60 <col:10, col:63> Text=" Determine if code is running in a preemptible thread."
|   |-ParagraphComment 0x563ea82a9b30 <line:1283:3, line:1285:52>
|   | |-TextComment 0x563ea82a9ab0 <line:1283:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | |-TextComment 0x563ea82a9ad0 <line:1284:3, col:78> Text=" whether it can be preempted by another thread. The routine returns a 'true'"
|   | `-TextComment 0x563ea82a9af0 <line:1285:3, col:52> Text=" value if all of the following conditions are met:"
|   |-ParagraphComment 0x563ea82a9bd0 <line:1287:3, line:1289:45>
|   | |-TextComment 0x563ea82a9b50 <line:1287:3, col:49> Text=" - The code is running in a thread, not at ISR."
|   | |-TextComment 0x563ea82a9b70 <line:1288:3, col:55> Text=" - The thread's priority is in the preemptible range."
|   | `-TextComment 0x563ea82a9b90 <line:1289:3, col:45> Text=" - The thread has not locked the scheduler."
|   |-ParagraphComment 0x563ea82a9c20 <line:1291:3>
|   | `-TextComment 0x563ea82a9bf0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a9c40 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82a9ca0 <col:9, col:31>
|   |   `-TextComment 0x563ea82a9c70 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82a9cf0 <line:1293:3>
|   | `-TextComment 0x563ea82a9cc0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a9d10 <col:4, line:1294:3> Name="return"
|   | `-ParagraphComment 0x563ea82a9d90 <line:1293:11, line:1294:3>
|   |   |-TextComment 0x563ea82a9d40 <line:1293:11, col:61> Text=" 0 if invoked by an ISR or by a cooperative thread."
|   |   `-TextComment 0x563ea82a9d60 <line:1294:3> Text=" "
|   `-BlockCommandComment 0x563ea82a9db0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x563ea82a9e10 <col:11, col:55>
|       `-TextComment 0x563ea82a9de0 <col:11, col:55> Text=" Non-zero if invoked by a preemptible thread."
|-FunctionDecl 0x563ea82040a8 <line:1309:1, line:1314:1> line:1309:20 k_is_pre_kernel 'bool (void)' static inline
| |-CompoundStmt 0x563ea82042f8 <line:1310:1, line:1314:1>
| | |-DeclStmt 0x563ea82041c8 <line:1311:2, col:31>
| | | `-VarDecl 0x563ea8204158 parent 0x563ea805b698 <col:2, col:14> col:14 used z_sys_post_kernel 'bool' extern
| | `-ReturnStmt 0x563ea8204258 <line:1313:2, col:10>
| |   `-ImplicitCastExpr 0x563ea8204240 <col:9, col:10> 'bool' <IntegralToBoolean>
| |     `-UnaryOperator 0x563ea8204220 <col:9, col:10> 'int' prefix '!'
| |       `-ImplicitCastExpr 0x563ea8204208 <col:10> 'bool' <LValueToRValue>
| |         `-DeclRefExpr 0x563ea82041e0 <col:10> 'bool' lvalue Var 0x563ea8204158 'z_sys_post_kernel' 'bool'
| `-FullComment 0x563ea82aa2b0 <line:1299:3, line:1307:67>
|   |-ParagraphComment 0x563ea82a9f20 <line:1299:3>
|   | `-TextComment 0x563ea82a9ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82a9f40 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x563ea82a9fa0 <col:10, col:64>
|   |   `-TextComment 0x563ea82a9f70 <col:10, col:64> Text=" Test whether startup is in the before-main-task phase."
|   |-ParagraphComment 0x563ea82aa010 <line:1301:3, line:1302:62>
|   | |-TextComment 0x563ea82a9fc0 <line:1301:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x563ea82a9fe0 <line:1302:3, col:62> Text=" whether it being invoked before the kernel is fully active."
|   |-ParagraphComment 0x563ea82aa060 <line:1304:3>
|   | `-TextComment 0x563ea82aa030 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82aa080 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82aa0e0 <col:9, col:31>
|   |   `-TextComment 0x563ea82aa0b0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82aa130 <line:1306:3>
|   | `-TextComment 0x563ea82aa100 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82aa150 <col:4, line:1307:3> Name="return"
|   | `-ParagraphComment 0x563ea82aa1d0 <line:1306:11, line:1307:3>
|   |   |-TextComment 0x563ea82aa180 <line:1306:11, col:60> Text=" true if invoked before post-kernel initialization"
|   |   `-TextComment 0x563ea82aa1a0 <line:1307:3> Text=" "
|   `-BlockCommandComment 0x563ea82aa1f0 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x563ea82aa250 <col:11, col:67>
|       `-TextComment 0x563ea82aa220 <col:11, col:67> Text=" false if invoked during/after post-kernel initialization"
|-FunctionDecl 0x563ea82043a8 <line:1343:1, col:30> col:13 k_sched_lock 'void (void)' extern
| `-FullComment 0x563ea82ab1a0 <line:1326:3, line:1341:14>
|   |-ParagraphComment 0x563ea82aa350 <line:1326:3>
|   | `-TextComment 0x563ea82aa320 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82aa370 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x563ea82aa3d0 <col:10, col:29>
|   |   `-TextComment 0x563ea82aa3a0 <col:10, col:29> Text=" Lock the scheduler."
|   |-ParagraphComment 0x563ea82aaee0 <line:1328:3, line:1332:78>
|   | |-TextComment 0x563ea82aa3f0 <line:1328:3, col:75> Text=" This routine prevents the current thread from being preempted by another"
|   | |-TextComment 0x563ea82aa410 <line:1329:3, col:75> Text=" thread by instructing the scheduler to treat it as a cooperative thread."
|   | |-TextComment 0x563ea82aa430 <line:1330:3, col:74> Text=" If the thread subsequently performs an operation that makes it unready,"
|   | |-TextComment 0x563ea82aa450 <line:1331:3, col:72> Text=" it will be context switched out in the normal manner. When the thread"
|   | `-TextComment 0x563ea82aa470 <line:1332:3, col:78> Text=" again becomes the current thread, its non-preemptible status is maintained."
|   |-ParagraphComment 0x563ea82aaf30 <line:1334:3, col:42>
|   | `-TextComment 0x563ea82aaf00 <col:3, col:42> Text=" This routine can be called recursively."
|   |-ParagraphComment 0x563ea82aaf80 <line:1336:3>
|   | `-TextComment 0x563ea82aaf50 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82aafa0 <col:4, line:1339:68> Name="note"
|   | `-ParagraphComment 0x563ea82ab070 <line:1336:9, line:1339:68>
|   |   |-TextComment 0x563ea82aafd0 <line:1336:9, col:68> Text=" k_sched_lock() and k_sched_unlock() should normally be used"
|   |   |-TextComment 0x563ea82aaff0 <line:1337:3, col:72> Text=" when the operation being performed can be safely interrupted by ISRs."
|   |   |-TextComment 0x563ea82ab010 <line:1338:3, col:70> Text=" However, if the amount of processing involved is very small, better"
|   |   `-TextComment 0x563ea82ab030 <line:1339:3, col:68> Text=" performance may be obtained by using irq_lock() and irq_unlock()."
|   |-ParagraphComment 0x563ea82ab0c0 <line:1341:3>
|   | `-TextComment 0x563ea82ab090 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82ab0e0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82ab140 <col:11, col:14>
|       `-TextComment 0x563ea82ab110 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea8204508 <line:1354:1, col:32> col:13 k_sched_unlock 'void (void)' extern
| `-FullComment 0x563ea82ab480 <line:1346:3, line:1352:14>
|   |-ParagraphComment 0x563ea82ab240 <line:1346:3>
|   | `-TextComment 0x563ea82ab210 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ab260 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x563ea82ab2c0 <col:10, col:31>
|   |   `-TextComment 0x563ea82ab290 <col:10, col:31> Text=" Unlock the scheduler."
|   |-ParagraphComment 0x563ea82ab360 <line:1348:3, line:1350:41>
|   | |-TextComment 0x563ea82ab2e0 <line:1348:3, col:73> Text=" This routine reverses the effect of a previous call to k_sched_lock()."
|   | |-TextComment 0x563ea82ab300 <line:1349:3, col:77> Text=" A thread must call the routine once for each time it called k_sched_lock()"
|   | `-TextComment 0x563ea82ab320 <line:1350:3, col:41> Text=" before the thread becomes preemptible."
|   |-ParagraphComment 0x563ea82ab3b0 <line:1352:3>
|   | `-TextComment 0x563ea82ab380 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82ab3d0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82ab430 <col:11, col:14>
|       `-TextComment 0x563ea82ab400 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea82046e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1371:52> col:16 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x563ea82045f0 <col:41, col:47> col:47 value 'void *'
| `-FullComment 0x563ea82aba10 <line:1357:3, line:1370:1>
|   |-ParagraphComment 0x563ea82ab520 <line:1357:3>
|   | `-TextComment 0x563ea82ab4f0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ab540 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea82ab5a0 <col:10, col:43>
|   |   `-TextComment 0x563ea82ab570 <col:10, col:43> Text=" Set current thread's custom data."
|   |-ParagraphComment 0x563ea82ab640 <line:1359:3, col:71>
|   | |-TextComment 0x563ea82ab5c0 <col:3, col:63> Text=" This routine sets the custom data for the current thread to "
|   | |-TextComment 0x563ea82ab5e0 <col:64> Text="@"
|   | `-TextComment 0x563ea82ab600 <col:65, col:71> Text=" value."
|   |-ParagraphComment 0x563ea82ab6e0 <line:1361:3, line:1363:44>
|   | |-TextComment 0x563ea82ab660 <line:1361:3, col:72> Text=" Custom data is not used by the kernel itself, and is freely available"
|   | |-TextComment 0x563ea82ab680 <line:1362:3, col:68> Text=" for a thread to use as it sees fit. It can be used as a framework"
|   | `-TextComment 0x563ea82ab6a0 <line:1363:3, col:44> Text=" upon which to build thread-local storage."
|   |-ParagraphComment 0x563ea82ab730 <line:1365:3>
|   | `-TextComment 0x563ea82ab700 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82ab750 <col:4, col:38> [in] implicitly Param="value" ParamIndex=0
|   | `-ParagraphComment 0x563ea82ab7e0 <col:16, col:38>
|   |   `-TextComment 0x563ea82ab7b0 <col:16, col:38> Text=" New custom data value."
|   |-ParagraphComment 0x563ea82ab830 <line:1367:3>
|   | `-TextComment 0x563ea82ab800 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ab850 <col:4, col:14> Name="return"
|   | `-ParagraphComment 0x563ea82ab8b0 <col:11, col:14>
|   |   `-TextComment 0x563ea82ab880 <col:11, col:14> Text=" N/A"
|   |-ParagraphComment 0x563ea82ab900 <line:1369:3>
|   | `-TextComment 0x563ea82ab8d0 <col:3> Text=" "
|   |-VerbatimLineComment 0x563ea82ab920 <col:4, col:21> Text=" K-THREAD-016"
|   `-ParagraphComment 0x563ea82ab990 <line:1370:1>
|     `-TextComment 0x563ea82ab960 <col:1> Text=" "
|-FunctionDecl 0x563ea8204888 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1381:46> col:17 k_thread_custom_data_get 'void *(void)' static inline
| `-FullComment 0x563ea82abd60 <line:1374:3, line:1380:1>
|   |-ParagraphComment 0x563ea82abab0 <line:1374:3>
|   | `-TextComment 0x563ea82aba80 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82abad0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea82abb30 <col:10, col:43>
|   |   `-TextComment 0x563ea82abb00 <col:10, col:43> Text=" Get current thread's custom data."
|   |-ParagraphComment 0x563ea82abb80 <line:1376:3, col:63>
|   | `-TextComment 0x563ea82abb50 <col:3, col:63> Text=" This routine returns the custom data for the current thread."
|   |-ParagraphComment 0x563ea82abbd0 <line:1378:3>
|   | `-TextComment 0x563ea82abba0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82abbf0 <col:4, line:1379:3> Name="return"
|   | `-ParagraphComment 0x563ea82abc70 <line:1378:11, line:1379:3>
|   |   |-TextComment 0x563ea82abc20 <line:1378:11, col:37> Text=" Current custom data value."
|   |   `-TextComment 0x563ea82abc40 <line:1379:3> Text=" "
|   |-VerbatimLineComment 0x563ea82abc90 <col:4, col:21> Text=" K-THREAD-007"
|   `-ParagraphComment 0x563ea82abd00 <line:1380:1>
|     `-TextComment 0x563ea82abcd0 <col:1> Text=" "
|-FunctionDecl 0x563ea8204af8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1396:69> col:15 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x563ea8204968 <col:33, col:41> col:41 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x563ea82049e0 <col:52, col:64> col:64 value 'const char *'
| `-FullComment 0x563ea82ac320 <line:1384:3, line:1394:39>
|   |-ParagraphComment 0x563ea82abe00 <line:1384:3>
|   | `-TextComment 0x563ea82abdd0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82abe20 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x563ea82abe80 <col:10, col:33>
|   |   `-TextComment 0x563ea82abe50 <col:10, col:33> Text=" Set current thread name"
|   |-ParagraphComment 0x563ea82abef0 <line:1386:3, line:1387:25>
|   | |-TextComment 0x563ea82abea0 <line:1386:3, col:75> Text=" Set the name of the thread to be used when THREAD_MONITOR is enabled for"
|   | `-TextComment 0x563ea82abec0 <line:1387:3, col:25> Text=" tracing and debugging."
|   |-ParagraphComment 0x563ea82abf40 <line:1389:3>
|   | `-TextComment 0x563ea82abf10 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82abf60 <col:4, line:1390:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x563ea82ac010 <line:1389:20, line:1390:3>
|   |   |-TextComment 0x563ea82abfc0 <line:1389:20, col:73> Text=" Thread to set name, or NULL to set the current thread"
|   |   `-TextComment 0x563ea82abfe0 <line:1390:3> Text=" "
|   `-ParamCommandComment 0x563ea82ac030 <col:4, line:1394:39> [in] implicitly Param="value" ParamIndex=1
|     `-ParagraphComment 0x563ea82ac2d0 <line:1390:16, line:1394:39>
|       |-TextComment 0x563ea82ac090 <line:1390:16, col:27> Text=" Name string"
|       |-TextComment 0x563ea82ac0b0 <line:1391:3> Text=" "
|       |-InlineCommandComment 0x563ea82ac100 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x563ea82ac120 <col:11, col:23> Text=" 0 on success"
|       |-TextComment 0x563ea82ac140 <line:1392:3> Text=" "
|       |-InlineCommandComment 0x563ea82ac160 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x563ea82ac180 <col:11, col:59> Text=" -EFAULT Memory access error with supplied string"
|       |-TextComment 0x563ea82ac1a0 <line:1393:3> Text=" "
|       |-InlineCommandComment 0x563ea82ac1c0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x563ea82ac1e0 <col:11, col:63> Text=" -ENOSYS Thread name configuration option not enabled"
|       |-TextComment 0x563ea82ac200 <line:1394:3> Text=" "
|       |-InlineCommandComment 0x563ea82ac220 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x563ea82ac240 <col:11, col:39> Text=" -EINVAL Thread name too long"
|-FunctionDecl 0x563ea8204cf8 <line:1406:1, col:48> col:13 k_thread_name_get 'const char *(k_tid_t)'
| |-ParmVarDecl 0x563ea8204be8 <col:31, col:39> col:39 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x563ea82ac650 <line:1399:3, line:1404:60>
|   |-ParagraphComment 0x563ea82ac3c0 <line:1399:3>
|   | `-TextComment 0x563ea82ac390 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ac3e0 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x563ea82ac440 <col:10, col:25>
|   |   `-TextComment 0x563ea82ac410 <col:10, col:25> Text=" Get thread name"
|   |-ParagraphComment 0x563ea82ac490 <line:1401:3, col:27>
|   | `-TextComment 0x563ea82ac460 <col:3, col:27> Text=" Get the name of a thread"
|   |-ParagraphComment 0x563ea82ac4e0 <line:1403:3>
|   | `-TextComment 0x563ea82ac4b0 <col:3> Text=" "
|   `-ParamCommandComment 0x563ea82ac500 <col:4, line:1404:60> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x563ea82ac600 <line:1403:20, line:1404:60>
|       |-TextComment 0x563ea82ac560 <line:1403:20, col:29> Text=" Thread ID"
|       |-TextComment 0x563ea82ac580 <line:1404:3> Text=" "
|       |-InlineCommandComment 0x563ea82ac5a0 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x563ea82ac5c0 <col:11, col:60> Text=" Thread name, or NULL if configuration not enabled"
|-FunctionDecl 0x563ea8204ff8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1420:17> line:1419:15 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x563ea8204dd8 <col:34, col:42> col:42 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x563ea8204e50 <col:53, col:59> col:59 buf 'char *'
| |-ParmVarDecl 0x563ea8204ec0 <line:1420:6, col:13> col:13 size 'size_t':'unsigned long'
| `-FullComment 0x563ea82acc40 <line:1409:3, line:1417:20>
|   |-ParagraphComment 0x563ea82ac6f0 <line:1409:3>
|   | `-TextComment 0x563ea82ac6c0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ac710 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x563ea82ac770 <col:10, col:53>
|   |   `-TextComment 0x563ea82ac740 <col:10, col:53> Text=" Copy the thread name into a supplied buffer"
|   |-ParagraphComment 0x563ea82ac7c0 <line:1411:3>
|   | `-TextComment 0x563ea82ac790 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82ac7e0 <col:4, line:1412:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x563ea82ac890 <line:1411:20, line:1412:3>
|   |   |-TextComment 0x563ea82ac840 <line:1411:20, col:53> Text=" Thread to obtain name information"
|   |   `-TextComment 0x563ea82ac860 <line:1412:3> Text=" "
|   |-ParamCommandComment 0x563ea82ac8b0 <col:4, line:1413:3> [in] implicitly Param="buf" ParamIndex=1
|   | `-ParagraphComment 0x563ea82ac960 <line:1412:14, line:1413:3>
|   |   |-TextComment 0x563ea82ac910 <line:1412:14, col:32> Text=" Destination buffer"
|   |   `-TextComment 0x563ea82ac930 <line:1413:3> Text=" "
|   `-ParamCommandComment 0x563ea82ac980 <col:4, line:1417:20> [in] implicitly Param="size" ParamIndex=2
|     `-ParagraphComment 0x563ea82acbf0 <line:1413:15, line:1417:20>
|       |-TextComment 0x563ea82ac9e0 <line:1413:15, col:38> Text=" Destination buffer size"
|       |-TextComment 0x563ea82aca00 <line:1414:3> Text=" "
|       |-InlineCommandComment 0x563ea82aca20 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x563ea82aca40 <col:11, col:47> Text=" -ENOSPC Destination buffer too small"
|       |-TextComment 0x563ea82aca60 <line:1415:3> Text=" "
|       |-InlineCommandComment 0x563ea82aca80 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x563ea82acaa0 <col:11, col:38> Text=" -EFAULT Memory access error"
|       |-TextComment 0x563ea82acac0 <line:1416:3> Text=" "
|       |-InlineCommandComment 0x563ea82acae0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x563ea82acb00 <col:11, col:50> Text=" -ENOSYS Thread name feature not enabled"
|       |-TextComment 0x563ea82acb20 <line:1417:3> Text=" "
|       |-InlineCommandComment 0x563ea82acb40 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x563ea82acb60 <col:11, col:20> Text=" 0 Success"
|-FunctionDecl 0x563ea8205178 <line:1430:1, col:49> col:13 k_thread_state_str 'const char *(k_tid_t)'
| |-ParmVarDecl 0x563ea82050e8 <col:32, col:40> col:40 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x563ea82acf80 <line:1423:3, line:1428:61>
|   |-ParagraphComment 0x563ea82acce0 <line:1423:3>
|   | `-TextComment 0x563ea82accb0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82acd00 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x563ea82acd60 <col:10, col:33>
|   |   `-TextComment 0x563ea82acd30 <col:10, col:33> Text=" Get thread state string"
|   |-ParagraphComment 0x563ea82acdb0 <line:1425:3, col:45>
|   | `-TextComment 0x563ea82acd80 <col:3, col:45> Text=" Get the human friendly thread state string"
|   |-ParagraphComment 0x563ea82ace00 <line:1427:3>
|   | `-TextComment 0x563ea82acdd0 <col:3> Text=" "
|   `-ParamCommandComment 0x563ea82ace20 <col:4, line:1428:61> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x563ea82acf30 <line:1427:20, line:1428:61>
|       |-TextComment 0x563ea82ace80 <line:1427:20, col:29> Text=" Thread ID"
|       |-TextComment 0x563ea82acea0 <line:1428:3> Text=" "
|       |-InlineCommandComment 0x563ea82acec0 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x563ea82acef0 <col:11, col:61> Text=" Thread state string, empty if no state flag is set"
|-RecordDecl 0x563ea82053f8 prev 0x563ea81f3580 <line:1517:1, line:1545:1> line:1517:8 struct k_timer definition
| |-FullComment 0x563ea82ad0d0 <line:1514:3, col:24>
| | `-ParagraphComment 0x563ea82ad0a0 <col:3, col:24>
| |   |-TextComment 0x563ea82acff0 <col:3> Text=" "
| |   |-InlineCommandComment 0x563ea82ad040 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x563ea82ad060 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x563ea82054a0 <line:1523:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| |-FieldDecl 0x563ea82054f8 <line:1526:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x563ea82077d0 <line:1529:2, col:41> col:9 expiry_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x563ea82078d8 <line:1532:2, col:39> col:9 stop_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x563ea8207930 <line:1535:2, col:8> col:8 period 's32_t':'int'
| |-FieldDecl 0x563ea8207988 <line:1538:2, col:8> col:8 status 'u32_t':'unsigned int'
| `-FieldDecl 0x563ea82079e8 <line:1541:2, col:8> col:8 referenced user_data 'void *'
|-TypedefDecl 0x563ea8207bd8 <line:1587:1, col:55> col:16 referenced k_timer_expiry_t 'void (*)(struct k_timer *)'
| |-PointerType 0x563ea8207770 'void (*)(struct k_timer *)'
| | `-ParenType 0x563ea8207710 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x563ea8205690 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x563ea805b6f0 'void'
| |     `-PointerType 0x563ea82055a0 'struct k_timer *'
| |       `-ElaboratedType 0x563ea8205540 'struct k_timer' sugar
| |         `-RecordType 0x563ea81f3610 'struct k_timer'
| |           `-Record 0x563ea82053f8 'k_timer'
| `-FullComment 0x563ea82ad560 <line:1576:3, line:1585:14>
|   |-ParagraphComment 0x563ea82ad170 <line:1576:3>
|   | `-TextComment 0x563ea82ad140 <col:3> Text=" "
|   |-VerbatimLineComment 0x563ea82ad190 <col:4, col:29> Text=" k_timer_expiry_t"
|   |-ParagraphComment 0x563ea82ad200 <line:1577:3>
|   | `-TextComment 0x563ea82ad1d0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ad220 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x563ea82ad280 <col:10, col:37>
|   |   `-TextComment 0x563ea82ad250 <col:10, col:37> Text=" Timer expiry function type."
|   |-ParagraphComment 0x563ea82ad320 <line:1579:3, line:1581:54>
|   | |-TextComment 0x563ea82ad2a0 <line:1579:3, col:78> Text=" A timer's expiry function is executed by the system clock interrupt handler"
|   | |-TextComment 0x563ea82ad2c0 <line:1580:3, col:76> Text=" each time the timer expires. The expiry function is optional, and is only"
|   | `-TextComment 0x563ea82ad2e0 <line:1581:3, col:54> Text=" invoked if the timer has been initialized with one."
|   |-ParagraphComment 0x563ea82ad370 <line:1583:3>
|   | `-TextComment 0x563ea82ad340 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82ad390 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x563ea82ad420 <col:16, col:37>
|   |   `-TextComment 0x563ea82ad3f0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x563ea82ad470 <line:1585:3>
|   | `-TextComment 0x563ea82ad440 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82ad490 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82ad4f0 <col:11, col:14>
|       `-TextComment 0x563ea82ad4c0 <col:11, col:14> Text=" N/A"
|-TypedefDecl 0x563ea8207d18 <line:1602:1, col:53> col:16 referenced k_timer_stop_t 'void (*)(struct k_timer *)'
| |-PointerType 0x563ea8207770 'void (*)(struct k_timer *)'
| | `-ParenType 0x563ea8207710 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x563ea8205690 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x563ea805b6f0 'void'
| |     `-PointerType 0x563ea82055a0 'struct k_timer *'
| |       `-ElaboratedType 0x563ea8205540 'struct k_timer' sugar
| |         `-RecordType 0x563ea81f3610 'struct k_timer'
| |           `-Record 0x563ea82053f8 'k_timer'
| `-FullComment 0x563ea82ada10 <line:1590:3, line:1600:14>
|   |-ParagraphComment 0x563ea82ad600 <line:1590:3>
|   | `-TextComment 0x563ea82ad5d0 <col:3> Text=" "
|   |-VerbatimLineComment 0x563ea82ad620 <col:4, col:27> Text=" k_timer_stop_t"
|   |-ParagraphComment 0x563ea82ad690 <line:1591:3>
|   | `-TextComment 0x563ea82ad660 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ad6b0 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x563ea82ad710 <col:10, col:35>
|   |   `-TextComment 0x563ea82ad6e0 <col:10, col:35> Text=" Timer stop function type."
|   |-ParagraphComment 0x563ea82ad7d0 <line:1593:3, line:1596:24>
|   | |-TextComment 0x563ea82ad730 <line:1593:3, col:75> Text=" A timer's stop function is executed if the timer is stopped prematurely."
|   | |-TextComment 0x563ea82ad750 <line:1594:3, col:71> Text=" The function runs in the context of the thread that stops the timer."
|   | |-TextComment 0x563ea82ad770 <line:1595:3, col:75> Text=" The stop function is optional, and is only invoked if the timer has been"
|   | `-TextComment 0x563ea82ad790 <line:1596:3, col:24> Text=" initialized with one."
|   |-ParagraphComment 0x563ea82ad820 <line:1598:3>
|   | `-TextComment 0x563ea82ad7f0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82ad840 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x563ea82ad8d0 <col:16, col:37>
|   |   `-TextComment 0x563ea82ad8a0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x563ea82ad920 <line:1600:3>
|   | `-TextComment 0x563ea82ad8f0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82ad940 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82ad9a0 <col:11, col:14>
|       `-TextComment 0x563ea82ad970 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea8208040 <line:1630:1, line:1632:27> line:1630:13 used k_timer_init 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' extern
| |-ParmVarDecl 0x563ea8207df0 <col:26, col:42> col:42 timer 'struct k_timer *'
| |-ParmVarDecl 0x563ea8207e80 <line:1631:5, col:22> col:22 expiry_fn 'k_timer_expiry_t':'void (*)(struct k_timer *)'
| |-ParmVarDecl 0x563ea8207f10 <line:1632:5, col:20> col:20 stop_fn 'k_timer_stop_t':'void (*)(struct k_timer *)'
| `-FullComment 0x563ea82adf60 <line:1620:3, line:1628:14>
|   |-ParagraphComment 0x563ea82adab0 <line:1620:3>
|   | `-TextComment 0x563ea82ada80 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82adad0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x563ea82adb30 <col:10, col:29>
|   |   `-TextComment 0x563ea82adb00 <col:10, col:29> Text=" Initialize a timer."
|   |-ParagraphComment 0x563ea82adb80 <line:1622:3, col:60>
|   | `-TextComment 0x563ea82adb50 <col:3, col:60> Text=" This routine initializes a timer, prior to its first use."
|   |-ParagraphComment 0x563ea82adbd0 <line:1624:3>
|   | `-TextComment 0x563ea82adba0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82adbf0 <col:4, line:1625:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x563ea82adca0 <line:1624:16, line:1625:3>
|   |   |-TextComment 0x563ea82adc50 <line:1624:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x563ea82adc70 <line:1625:3> Text=" "
|   |-ParamCommandComment 0x563ea82adcc0 <col:4, line:1626:3> [in] implicitly Param="expiry_fn" ParamIndex=1
|   | `-ParagraphComment 0x563ea82add70 <line:1625:20, line:1626:3>
|   |   |-TextComment 0x563ea82add20 <line:1625:20, col:67> Text=" Function to invoke each time the timer expires."
|   |   `-TextComment 0x563ea82add40 <line:1626:3> Text=" "
|   |-ParamCommandComment 0x563ea82add90 <col:4, col:77> [in] implicitly Param="stop_fn" ParamIndex=2
|   | `-ParagraphComment 0x563ea82ade20 <col:18, col:77>
|   |   `-TextComment 0x563ea82addf0 <col:18, col:77> Text="   Function to invoke if the timer is stopped while running."
|   |-ParagraphComment 0x563ea82ade70 <line:1628:3>
|   | `-TextComment 0x563ea82ade40 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82ade90 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82adef0 <col:11, col:14>
|       `-TextComment 0x563ea82adec0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea8208148 <line:1634:1, col:30> col:13 k_trigger_update 'void ()' extern
|-FunctionDecl 0x563ea8208450 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1653:37> line:1652:16 used k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x563ea8208240 <col:30, col:46> col:46 timer 'struct k_timer *'
| |-ParmVarDecl 0x563ea82082b0 <line:1653:9, col:15> col:15 duration 's32_t':'int'
| |-ParmVarDecl 0x563ea8208320 <col:25, col:31> col:31 period 's32_t':'int'
| `-FullComment 0x563ea82ae570 <line:1637:3, line:1650:14>
|   |-ParagraphComment 0x563ea82ae000 <line:1637:3>
|   | `-TextComment 0x563ea82adfd0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ae020 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x563ea82ae080 <col:10, col:24>
|   |   `-TextComment 0x563ea82ae050 <col:10, col:24> Text=" Start a timer."
|   |-ParagraphComment 0x563ea82ae0f0 <line:1639:3, line:1640:71>
|   | |-TextComment 0x563ea82ae0a0 <line:1639:3, col:72> Text=" This routine starts a timer, and resets its status to zero. The timer"
|   | `-TextComment 0x563ea82ae0c0 <line:1640:3, col:71> Text=" begins counting down using the specified duration and period values."
|   |-ParagraphComment 0x563ea82ae190 <line:1642:3, line:1644:44>
|   | |-TextComment 0x563ea82ae110 <line:1642:3, col:68> Text=" Attempting to start a timer that is already running is permitted."
|   | |-TextComment 0x563ea82ae130 <line:1643:3, col:73> Text=" The timer's status is reset to zero and the timer begins counting down"
|   | `-TextComment 0x563ea82ae150 <line:1644:3, col:44> Text=" using the new duration and period values."
|   |-ParagraphComment 0x563ea82ae1e0 <line:1646:3>
|   | `-TextComment 0x563ea82ae1b0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82ae200 <col:4, line:1647:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x563ea82ae2b0 <line:1646:16, line:1647:3>
|   |   |-TextComment 0x563ea82ae260 <line:1646:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x563ea82ae280 <line:1647:3> Text=" "
|   |-ParamCommandComment 0x563ea82ae2d0 <col:4, line:1648:3> [in] implicitly Param="duration" ParamIndex=1
|   | `-ParagraphComment 0x563ea82ae380 <line:1647:19, line:1648:3>
|   |   |-TextComment 0x563ea82ae330 <line:1647:19, col:61> Text="  Initial timer duration (in milliseconds)."
|   |   `-TextComment 0x563ea82ae350 <line:1648:3> Text=" "
|   |-ParamCommandComment 0x563ea82ae3a0 <col:4, col:51> [in] implicitly Param="period" ParamIndex=2
|   | `-ParagraphComment 0x563ea82ae430 <col:17, col:51>
|   |   `-TextComment 0x563ea82ae400 <col:17, col:51> Text="    Timer period (in milliseconds)."
|   |-ParagraphComment 0x563ea82ae480 <line:1650:3>
|   | `-TextComment 0x563ea82ae450 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82ae4a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82ae500 <col:11, col:14>
|       `-TextComment 0x563ea82ae4d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea82085e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1671:50> col:16 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x563ea8208560 <col:29, col:45> col:45 timer 'struct k_timer *'
| `-FullComment 0x563ea82aeb20 <line:1656:3, line:1669:14>
|   |-ParagraphComment 0x563ea82ae610 <line:1656:3>
|   | `-TextComment 0x563ea82ae5e0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ae630 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x563ea82ae690 <col:10, col:23>
|   |   `-TextComment 0x563ea82ae660 <col:10, col:23> Text=" Stop a timer."
|   |-ParagraphComment 0x563ea82ae700 <line:1658:3, line:1659:43>
|   | |-TextComment 0x563ea82ae6b0 <line:1658:3, col:77> Text=" This routine stops a running timer prematurely. The timer's stop function,"
|   | `-TextComment 0x563ea82ae6d0 <line:1659:3, col:43> Text=" if one exists, is invoked by the caller."
|   |-ParagraphComment 0x563ea82ae770 <line:1661:3, line:1662:23>
|   | |-TextComment 0x563ea82ae720 <line:1661:3, col:74> Text=" Attempting to stop a timer that is not running is permitted, but has no"
|   | `-TextComment 0x563ea82ae740 <line:1662:3, col:23> Text=" effect on the timer."
|   |-ParagraphComment 0x563ea82ae7c0 <line:1664:3>
|   | `-TextComment 0x563ea82ae790 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ae7e0 <col:4, line:1665:48> Name="note"
|   | `-ParagraphComment 0x563ea82ae8e0 <line:1664:9, line:1665:48>
|   |   |-TextComment 0x563ea82ae810 <line:1664:9, col:78> Text=" Can be called by ISRs.  The stop handler has to be callable from ISRs"
|   |   |-TextComment 0x563ea82ae830 <line:1665:3, col:6> Text=" if "
|   |   |-InlineCommandComment 0x563ea82ae880 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="k_timer_stop"
|   |   `-TextComment 0x563ea82ae8a0 <col:22, col:48> Text=" is to be called from ISRs."
|   |-ParagraphComment 0x563ea82ae930 <line:1667:3>
|   | `-TextComment 0x563ea82ae900 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82ae950 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x563ea82ae9e0 <col:16, col:37>
|   |   `-TextComment 0x563ea82ae9b0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x563ea82aea30 <line:1669:3>
|   | `-TextComment 0x563ea82aea00 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82aea50 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82aeab0 <col:11, col:14>
|       `-TextComment 0x563ea82aea80 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea8209070 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1685:57> col:17 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x563ea8208f70 <col:36, col:52> col:52 timer 'struct k_timer *'
| `-FullComment 0x563ea82aef40 <line:1674:3, line:1683:24>
|   |-ParagraphComment 0x563ea82aebc0 <line:1674:3>
|   | `-TextComment 0x563ea82aeb90 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82aebe0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x563ea82aec40 <col:10, col:28>
|   |   `-TextComment 0x563ea82aec10 <col:10, col:28> Text=" Read timer status."
|   |-ParagraphComment 0x563ea82aecb0 <line:1676:3, line:1677:49>
|   | |-TextComment 0x563ea82aec60 <line:1676:3, col:77> Text=" This routine reads the timer's status, which indicates the number of times"
|   | `-TextComment 0x563ea82aec80 <line:1677:3, col:49> Text=" it has expired since its status was last read."
|   |-ParagraphComment 0x563ea82aed00 <line:1679:3, col:58>
|   | `-TextComment 0x563ea82aecd0 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x563ea82aed50 <line:1681:3>
|   | `-TextComment 0x563ea82aed20 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82aed70 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x563ea82aee00 <col:16, col:37>
|   |   `-TextComment 0x563ea82aedd0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x563ea82aee50 <line:1683:3>
|   | `-TextComment 0x563ea82aee20 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82aee70 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x563ea82aeed0 <col:11, col:24>
|       `-TextComment 0x563ea82aeea0 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x563ea82091f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1704:58> col:17 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x563ea8209170 <col:37, col:53> col:53 timer 'struct k_timer *'
| `-FullComment 0x563ea82af420 <line:1688:3, line:1702:24>
|   |-ParagraphComment 0x563ea82aefe0 <line:1688:3>
|   | `-TextComment 0x563ea82aefb0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82af000 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea82af060 <col:10, col:49>
|   |   `-TextComment 0x563ea82af030 <col:10, col:49> Text=" Synchronize thread to timer expiration."
|   |-ParagraphComment 0x563ea82af120 <line:1690:3, line:1693:73>
|   | |-TextComment 0x563ea82af080 <line:1690:3, col:78> Text=" This routine blocks the calling thread until the timer's status is non-zero"
|   | |-TextComment 0x563ea82af0a0 <line:1691:3, col:76> Text=" (indicating that it has expired at least once since it was last examined)"
|   | |-TextComment 0x563ea82af0c0 <line:1692:3, col:68> Text=" or the timer is stopped. If the timer status is already non-zero,"
|   | `-TextComment 0x563ea82af0e0 <line:1693:3, col:73> Text=" or the timer is already stopped, the caller continues without waiting."
|   |-ParagraphComment 0x563ea82af170 <line:1695:3, col:58>
|   | `-TextComment 0x563ea82af140 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x563ea82af1e0 <line:1697:3, line:1698:20>
|   | |-TextComment 0x563ea82af190 <line:1697:3, col:74> Text=" This routine must not be used by interrupt handlers, since they are not"
|   | `-TextComment 0x563ea82af1b0 <line:1698:3, col:20> Text=" allowed to block."
|   |-ParagraphComment 0x563ea82af230 <line:1700:3>
|   | `-TextComment 0x563ea82af200 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82af250 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x563ea82af2e0 <col:16, col:37>
|   |   `-TextComment 0x563ea82af2b0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x563ea82af330 <line:1702:3>
|   | `-TextComment 0x563ea82af300 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82af350 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x563ea82af3b0 <col:11, col:24>
|       `-TextComment 0x563ea82af380 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x563ea82093d0 <line:1706:1, col:58> col:14 used z_timeout_remaining 's32_t (struct _timeout *)' extern
| `-ParmVarDecl 0x563ea82092c8 <col:34, col:51> col:51 timeout 'struct _timeout *'
|-FunctionDecl 0x563ea8209558 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1718:60> col:17 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x563ea82094d0 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x563ea82af7e0 <line:1709:3, line:1716:44>
|   |-ParagraphComment 0x563ea82af4c0 <line:1709:3>
|   | `-TextComment 0x563ea82af490 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82af4e0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x563ea82af540 <col:10, col:57>
|   |   `-TextComment 0x563ea82af510 <col:10, col:57> Text=" Get time remaining before a timer next expires."
|   |-ParagraphComment 0x563ea82af5b0 <line:1711:3, line:1712:68>
|   | |-TextComment 0x563ea82af560 <line:1711:3, col:74> Text=" This routine computes the (approximate) time remaining before a running"
|   | `-TextComment 0x563ea82af580 <line:1712:3, col:68> Text=" timer next expires. If the timer is not running, it returns zero."
|   |-ParagraphComment 0x563ea82af600 <line:1714:3>
|   | `-TextComment 0x563ea82af5d0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82af620 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x563ea82af6b0 <col:16, col:37>
|   |   `-TextComment 0x563ea82af680 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x563ea82af700 <line:1716:3>
|   | `-TextComment 0x563ea82af6d0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82af720 <col:4, col:44> Name="return"
|     `-ParagraphComment 0x563ea82af780 <col:11, col:44>
|       `-TextComment 0x563ea82af750 <col:11, col:44> Text=" Remaining time (in milliseconds)."
|-FunctionDecl 0x563ea82096b0 <line:1720:1, line:1724:1> line:1720:21 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x563ea8209628 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x563ea8209c38 <line:1721:1, line:1724:1>
|   |-DeclStmt 0x563ea8209930 <line:1722:2, col:58>
|   | `-VarDecl 0x563ea8209768 <col:2, col:57> col:14 used ticks 'const s32_t':'const int' cinit
|   |   `-CallExpr 0x563ea8209900 <col:22, col:57> 's32_t':'int'
|   |     |-ImplicitCastExpr 0x563ea82098e8 <col:22> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ea82097c8 <col:22> 's32_t (struct _timeout *)' Function 0x563ea82093d0 'z_timeout_remaining' 's32_t (struct _timeout *)'
|   |     `-UnaryOperator 0x563ea8209868 <col:42, col:50> 'struct _timeout *' prefix '&'
|   |       `-MemberExpr 0x563ea8209830 <col:43, col:50> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x563ea82054a0
|   |         `-ImplicitCastExpr 0x563ea8209818 <col:43> 'struct k_timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x563ea82097f0 <col:43> 'struct k_timer *' lvalue ParmVar 0x563ea8209628 'timer' 'struct k_timer *'
|   `-ReturnStmt 0x563ea8209bf0 <line:1723:2, col:61>
|     `-ConditionalOperator 0x563ea8209b68 <col:9, col:61> 'unsigned int'
|       |-ParenExpr 0x563ea82099d0 <col:9, col:19> 'int'
|       | `-BinaryOperator 0x563ea82099a8 <col:10, col:18> 'int' '>'
|       |   |-ImplicitCastExpr 0x563ea8209990 <col:10> 's32_t':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x563ea8209948 <col:10> 'const s32_t':'const int' lvalue Var 0x563ea8209768 'ticks' 'const s32_t':'const int'
|       |   `-IntegerLiteral 0x563ea8209970 <col:18> 'int' 0
|       |-CStyleCastExpr 0x563ea8209b20 <col:23, col:57> 'u32_t':'unsigned int' <IntegralCast>
|       | `-CallExpr 0x563ea8209ab0 <col:30, col:57> 'u64_t':'unsigned long long'
|       |   |-ImplicitCastExpr 0x563ea8209a98 <col:30> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x563ea82099f0 <col:30> 'u64_t (u64_t)' Function 0x563ea81d9270 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
|       |   `-ImplicitCastExpr 0x563ea8209af8 <col:52> 'u64_t':'unsigned long long' <IntegralCast>
|       |     `-ImplicitCastExpr 0x563ea8209ae0 <col:52> 's32_t':'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x563ea8209a18 <col:52> 'const s32_t':'const int' lvalue Var 0x563ea8209768 'ticks' 'const s32_t':'const int'
|       `-IntegerLiteral 0x563ea8209b48 <col:61> 'unsigned int' 0
|-FunctionDecl 0x563ea8209e10 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1740:76> col:16 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x563ea8209c80 <col:38, col:54> col:54 timer 'struct k_timer *'
| |-ParmVarDecl 0x563ea8209cf8 <col:61, col:67> col:67 user_data 'void *'
| `-FullComment 0x563ea82afdf0 <line:1727:3, line:1738:14>
|   |-ParagraphComment 0x563ea82af880 <line:1727:3>
|   | `-TextComment 0x563ea82af850 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82af8a0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x563ea82af900 <col:10, col:52>
|   |   `-TextComment 0x563ea82af8d0 <col:10, col:52> Text=" Associate user-specific data with a timer."
|   |-ParagraphComment 0x563ea82afa70 <line:1729:3, line:1730:9>
|   | |-TextComment 0x563ea82af920 <line:1729:3, col:28> Text=" This routine records the "
|   | |-InlineCommandComment 0x563ea82af970 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="user_data"
|   | |-TextComment 0x563ea82af990 <col:41, col:50> Text=" with the "
|   | |-InlineCommandComment 0x563ea82af9e0 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="timer,"
|   | |-TextComment 0x563ea82afa00 <col:60, col:75> Text=" to be retrieved"
|   | `-TextComment 0x563ea82afa20 <line:1730:3, col:9> Text=" later."
|   |-ParagraphComment 0x563ea82afae0 <line:1732:3, line:1733:73>
|   | |-TextComment 0x563ea82afa90 <line:1732:3, col:78> Text=" It can be used e.g. in a timer handler shared across multiple subsystems to"
|   | `-TextComment 0x563ea82afab0 <line:1733:3, col:73> Text=" retrieve data specific to the subsystem this timer is associated with."
|   |-ParagraphComment 0x563ea82afb30 <line:1735:3>
|   | `-TextComment 0x563ea82afb00 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82afb50 <col:4, line:1736:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x563ea82afc00 <line:1735:16, line:1736:3>
|   |   |-TextComment 0x563ea82afbb0 <line:1735:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x563ea82afbd0 <line:1736:3> Text=" "
|   |-ParamCommandComment 0x563ea82afc20 <col:4, col:58> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x563ea82afcb0 <col:20, col:58>
|   |   `-TextComment 0x563ea82afc80 <col:20, col:58> Text=" User data to associate with the timer."
|   |-ParagraphComment 0x563ea82afd00 <line:1738:3>
|   | `-TextComment 0x563ea82afcd0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82afd20 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82afd80 <col:11, col:14>
|       `-TextComment 0x563ea82afd50 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea820a438 <line:1745:1, line:1749:1> line:1745:20 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x563ea8209f10 <col:49, col:65> col:65 used timer 'struct k_timer *'
| |-ParmVarDecl 0x563ea820a3a8 <line:1746:13, col:19> col:19 used user_data 'void *'
| |-CompoundStmt 0x563ea820a5f8 <line:1747:1, line:1749:1>
| | `-BinaryOperator 0x563ea820a5a0 <line:1748:2, col:21> 'void *' '='
| |   |-MemberExpr 0x563ea820a528 <col:2, col:9> 'void *' lvalue ->user_data 0x563ea82079e8
| |   | `-ImplicitCastExpr 0x563ea820a510 <col:2> 'struct k_timer *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x563ea820a4e8 <col:2> 'struct k_timer *' lvalue ParmVar 0x563ea8209f10 'timer' 'struct k_timer *'
| |   `-ImplicitCastExpr 0x563ea820a588 <col:21> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x563ea820a560 <col:21> 'void *' lvalue ParmVar 0x563ea820a3a8 'user_data' 'void *'
| `-FullComment 0x563ea82afee0 <line:1743:3, col:12>
|   `-ParagraphComment 0x563ea82afeb0 <col:3, col:12>
|     |-TextComment 0x563ea82afe60 <col:3> Text=" "
|     `-InlineCommandComment 0x563ea82afe80 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x563ea820a748 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1758:60> col:17 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x563ea820a638 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x563ea82b0220 <line:1752:3, line:1756:25>
|   |-ParagraphComment 0x563ea82aff80 <line:1752:3>
|   | `-TextComment 0x563ea82aff50 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82affa0 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x563ea82b0000 <col:10, col:55>
|   |   `-TextComment 0x563ea82affd0 <col:10, col:55> Text=" Retrieve the user-specific data from a timer."
|   |-ParagraphComment 0x563ea82b0050 <line:1754:3>
|   | `-TextComment 0x563ea82b0020 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b0070 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b0100 <col:16, col:37>
|   |   `-TextComment 0x563ea82b00d0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x563ea82b0150 <line:1756:3>
|   | `-TextComment 0x563ea82b0120 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82b0170 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x563ea82b01d0 <col:11, col:25>
|       `-TextComment 0x563ea82b01a0 <col:11, col:25> Text=" The user data."
|-FunctionDecl 0x563ea820a8a8 <line:1760:1, line:1763:1> line:1760:21 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x563ea820a818 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x563ea820aa88 <line:1761:1, line:1763:1>
|   `-ReturnStmt 0x563ea820a9e0 <line:1762:2, col:16>
|     `-ImplicitCastExpr 0x563ea820a9c8 <col:9, col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x563ea820a990 <col:9, col:16> 'void *' lvalue ->user_data 0x563ea82079e8
|         `-ImplicitCastExpr 0x563ea820a978 <col:9> 'struct k_timer *' <LValueToRValue>
|           `-DeclRefExpr 0x563ea820a950 <col:9> 'struct k_timer *' lvalue ParmVar 0x563ea820a818 'timer' 'struct k_timer *'
|-FunctionDecl 0x563ea820ab30 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1787:34> col:17 used k_uptime_get 's64_t (void)' static inline
| `-FullComment 0x563ea82b0700 <line:1773:3, line:1785:42>
|   |-ParagraphComment 0x563ea82b02c0 <line:1773:3>
|   | `-TextComment 0x563ea82b0290 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b02e0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x563ea82b0340 <col:10, col:28>
|   |   `-TextComment 0x563ea82b0310 <col:10, col:28> Text=" Get system uptime."
|   |-ParagraphComment 0x563ea82b03b0 <line:1775:3, line:1776:19>
|   | |-TextComment 0x563ea82b0360 <line:1775:3, col:65> Text=" This routine returns the elapsed time since the system booted,"
|   | `-TextComment 0x563ea82b0380 <line:1776:3, col:19> Text=" in milliseconds."
|   |-ParagraphComment 0x563ea82b0400 <line:1778:3>
|   | `-TextComment 0x563ea82b03d0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b0420 <col:4, line:1783:13> Name="note"
|   | `-ParagraphComment 0x563ea82b05d0 <line:1779:3, line:1783:13>
|   |   |-TextComment 0x563ea82b0450 <line:1779:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x563ea82b04a0 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x563ea82b04c0 <line:1780:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x563ea82b04e0 <line:1781:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x563ea82b0500 <line:1782:3, col:61> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option."
|   |   |-TextComment 0x563ea82b0520 <line:1783:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x563ea82b0570 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x563ea82b0620 <line:1785:3>
|   | `-TextComment 0x563ea82b05f0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82b0640 <col:4, col:42> Name="return"
|     `-ParagraphComment 0x563ea82b06a0 <col:11, col:42>
|       `-TextComment 0x563ea82b0670 <col:11, col:42> Text=" Current uptime in milliseconds."
|-FunctionDecl 0x563ea820ac90 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1805:1> line:1799:32 k_enable_sys_clock_always_on 'int (void)' static inline
| |-CompoundStmt 0x563ea820ae38 <line:1800:1, line:1805:1>
| | |-CompoundStmt 0x563ea820ad90 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x563ea820ada0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1802:57>
| | `-ReturnStmt 0x563ea820adf0 <line:1804:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-UnaryOperator 0x563ea820add0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1804:9, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     `-IntegerLiteral 0x563ea820adb0 <col:16> 'int' 0
| |-DeprecatedAttr 0x563ea820ad30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x563ea82b09a0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1790:3, line:1796:56>
|   |-ParagraphComment 0x563ea82b07a0 <line:1790:3>
|   | `-TextComment 0x563ea82b0770 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b07c0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x563ea82b0820 <col:10, col:51>
|   |   `-TextComment 0x563ea82b07f0 <col:10, col:51> Text=" Enable clock always on in tickless kernel"
|   |-ParagraphComment 0x563ea82b08c0 <line:1792:3, line:1794:11>
|   | |-TextComment 0x563ea82b0840 <line:1792:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|   | |-TextComment 0x563ea82b0860 <line:1793:3, col:66> Text=" functionality has been migrated to the SYSTEM_CLOCK_SLOPPY_IDLE"
|   | `-TextComment 0x563ea82b0880 <line:1794:3, col:11> Text=" kconfig."
|   `-ParagraphComment 0x563ea82b0960 <line:1796:3, col:56>
|     |-TextComment 0x563ea82b08e0 <col:3> Text=" "
|     |-InlineCommandComment 0x563ea82b0900 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x563ea82b0920 <col:11, col:56> Text=" prev_status Previous status of always on flag"
|-FunctionDecl 0x563ea820aef0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1820:1> line:1816:33 k_disable_sys_clock_always_on 'void (void)' static inline
| |-CompoundStmt 0x563ea820b038 <line:1817:1, line:1820:1>
| | |-CompoundStmt 0x563ea820aff0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | `-NullStmt 0x563ea820b000 </vagrant/ext/zephyros/zephyr/include/kernel.h:1819:57>
| |-DeprecatedAttr 0x563ea820af90 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x563ea82b0ba0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1809:3, line:1813:11>
|   |-ParagraphComment 0x563ea82b0a40 <line:1809:3>
|   | `-TextComment 0x563ea82b0a10 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b0a60 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x563ea82b0ac0 <col:10, col:52>
|   |   `-TextComment 0x563ea82b0a90 <col:10, col:52> Text=" Disable clock always on in tickless kernel"
|   `-ParagraphComment 0x563ea82b0b60 <line:1811:3, line:1813:11>
|     |-TextComment 0x563ea82b0ae0 <line:1811:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|     |-TextComment 0x563ea82b0b00 <line:1812:3, col:63> Text=" functionality has been migrated to the SYS_CLOCK_SLOPPY_IDLE"
|     `-TextComment 0x563ea82b0b20 <line:1813:3, col:11> Text=" kconfig."
|-FunctionDecl 0x563ea820b0e8 <line:1844:1, line:1847:1> line:1844:21 k_uptime_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x563ea820b2c8 <line:1845:1, line:1847:1>
| | `-ReturnStmt 0x563ea820b280 <line:1846:2, col:29>
| |   `-CStyleCastExpr 0x563ea820b258 <col:9, col:29> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea820b220 <col:16, col:29> 's64_t':'long long'
| |       `-ImplicitCastExpr 0x563ea820b208 <col:16> 's64_t (*)(void)' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x563ea820b188 <col:16> 's64_t (void)' Function 0x563ea820ab30 'k_uptime_get' 's64_t (void)'
| `-FullComment 0x563ea82b1120 <line:1824:3, line:1842:66>
|   |-ParagraphComment 0x563ea82b0c40 <line:1824:3>
|   | `-TextComment 0x563ea82b0c10 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b0c60 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x563ea82b0cc0 <col:10, col:45>
|   |   `-TextComment 0x563ea82b0c90 <col:10, col:45> Text=" Get system uptime (32-bit version)."
|   |-ParagraphComment 0x563ea82b0d30 <line:1826:3, line:1827:16>
|   | |-TextComment 0x563ea82b0ce0 <line:1826:3, col:65> Text=" This routine returns the lower 32 bits of the system uptime in"
|   | `-TextComment 0x563ea82b0d00 <line:1827:3, col:16> Text=" milliseconds."
|   |-ParagraphComment 0x563ea82b0e20 <line:1829:3, line:1833:38>
|   | |-TextComment 0x563ea82b0d50 <line:1829:3, col:67> Text=" Because correct conversion requires full precision of the system"
|   | |-TextComment 0x563ea82b0d70 <line:1830:3, col:69> Text=" clock there is no benefit to using this over k_uptime_get() unless"
|   | |-TextComment 0x563ea82b0d90 <line:1831:3, col:69> Text=" you know the application will never run long enough for the system"
|   | |-TextComment 0x563ea82b0db0 <line:1832:3, col:68> Text=" clock to approach 2^32 ticks.  Calls to this function may involve"
|   | `-TextComment 0x563ea82b0dd0 <line:1833:3, col:38> Text=" interrupt blocking and 64-bit math."
|   |-ParagraphComment 0x563ea82b0e70 <line:1835:3>
|   | `-TextComment 0x563ea82b0e40 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b0e90 <col:4, line:1840:13> Name="note"
|   | `-ParagraphComment 0x563ea82b0ff0 <line:1836:3, line:1840:13>
|   |   |-TextComment 0x563ea82b0ec0 <line:1836:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x563ea82b0ee0 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x563ea82b0f10 <line:1837:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x563ea82b0f30 <line:1838:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x563ea82b0f50 <line:1839:3, col:60> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option"
|   |   |-TextComment 0x563ea82b0f70 <line:1840:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x563ea82b0f90 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x563ea82b1040 <line:1842:3>
|   | `-TextComment 0x563ea82b1010 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82b1060 <col:4, col:66> Name="return"
|     `-ParagraphComment 0x563ea82b10c0 <col:11, col:66>
|       `-TextComment 0x563ea82b1090 <col:11, col:66> Text=" The low 32 bits of the current uptime, in milliseconds."
|-FunctionDecl 0x563ea820b5d0 <line:1860:1, line:1869:1> line:1860:21 used k_uptime_delta 's64_t (s64_t *)' static inline
| |-ParmVarDecl 0x563ea820b4d0 <col:36, col:43> col:43 used reftime 's64_t *'
| |-CompoundStmt 0x563ea820bab8 <line:1861:1, line:1869:1>
| | |-DeclStmt 0x563ea820b770 <line:1862:2, col:21>
| | | |-VarDecl 0x563ea820b688 <col:2, col:8> col:8 used uptime 's64_t':'long long'
| | | `-VarDecl 0x563ea820b6f8 <col:2, col:16> col:16 used delta 's64_t':'long long'
| | |-BinaryOperator 0x563ea820b818 <line:1864:2, col:24> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x563ea820b788 <col:2> 's64_t':'long long' lvalue Var 0x563ea820b688 'uptime' 's64_t':'long long'
| | | `-CallExpr 0x563ea820b7f0 <col:11, col:24> 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x563ea820b7d8 <col:11> 's64_t (*)(void)' <FunctionToPointerDecay>
| | |     `-DeclRefExpr 0x563ea820b7b0 <col:11> 's64_t (void)' Function 0x563ea820ab30 'k_uptime_get' 's64_t (void)'
| | |-BinaryOperator 0x563ea820b948 <line:1865:2, col:20> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x563ea820b840 <col:2> 's64_t':'long long' lvalue Var 0x563ea820b6f8 'delta' 's64_t':'long long'
| | | `-BinaryOperator 0x563ea820b920 <col:10, col:20> 'long long' '-'
| | |   |-ImplicitCastExpr 0x563ea820b8f0 <col:10> 's64_t':'long long' <LValueToRValue>
| | |   | `-DeclRefExpr 0x563ea820b868 <col:10> 's64_t':'long long' lvalue Var 0x563ea820b688 'uptime' 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x563ea820b908 <col:19, col:20> 's64_t':'long long' <LValueToRValue>
| | |     `-UnaryOperator 0x563ea820b8d0 <col:19, col:20> 's64_t':'long long' lvalue prefix '*'
| | |       `-ImplicitCastExpr 0x563ea820b8b8 <col:20> 's64_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x563ea820b890 <col:20> 's64_t *' lvalue ParmVar 0x563ea820b4d0 'reftime' 's64_t *'
| | |-BinaryOperator 0x563ea820ba10 <line:1866:2, col:13> 's64_t':'long long' '='
| | | |-UnaryOperator 0x563ea820b9b0 <col:2, col:3> 's64_t':'long long' lvalue prefix '*'
| | | | `-ImplicitCastExpr 0x563ea820b998 <col:3> 's64_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x563ea820b970 <col:3> 's64_t *' lvalue ParmVar 0x563ea820b4d0 'reftime' 's64_t *'
| | | `-ImplicitCastExpr 0x563ea820b9f8 <col:13> 's64_t':'long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x563ea820b9d0 <col:13> 's64_t':'long long' lvalue Var 0x563ea820b688 'uptime' 's64_t':'long long'
| | `-ReturnStmt 0x563ea820ba78 <line:1868:2, col:9>
| |   `-ImplicitCastExpr 0x563ea820ba60 <col:9> 's64_t':'long long' <LValueToRValue>
| |     `-DeclRefExpr 0x563ea820ba38 <col:9> 's64_t':'long long' lvalue Var 0x563ea820b6f8 'delta' 's64_t':'long long'
| `-FullComment 0x563ea82b1500 <line:1850:3, line:1858:24>
|   |-ParagraphComment 0x563ea82b11c0 <line:1850:3>
|   | `-TextComment 0x563ea82b1190 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b11e0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x563ea82b1240 <col:10, col:27>
|   |   `-TextComment 0x563ea82b1210 <col:10, col:27> Text=" Get elapsed time."
|   |-ParagraphComment 0x563ea82b12b0 <line:1852:3, line:1853:50>
|   | |-TextComment 0x563ea82b1260 <line:1852:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x563ea82b1280 <line:1853:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x563ea82b1300 <line:1855:3>
|   | `-TextComment 0x563ea82b12d0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b1320 <col:4, line:1856:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b13d0 <line:1855:18, line:1856:37>
|   |   |-TextComment 0x563ea82b1380 <line:1855:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x563ea82b13a0 <line:1856:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x563ea82b1420 <line:1858:3>
|   | `-TextComment 0x563ea82b13f0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82b1440 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x563ea82b14a0 <col:11, col:24>
|       `-TextComment 0x563ea82b1470 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x563ea820bc00 <line:1887:1, line:1890:1> line:1887:21 k_uptime_delta_32 'u32_t (s64_t *)' static inline
| |-ParmVarDecl 0x563ea820bb00 <col:39, col:46> col:46 used reftime 's64_t *'
| |-CompoundStmt 0x563ea820be38 <line:1888:1, line:1890:1>
| | `-ReturnStmt 0x563ea820bdf0 <line:1889:2, col:38>
| |   `-CStyleCastExpr 0x563ea820bdc8 <col:9, col:38> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x563ea820bd70 <col:16, col:38> 's64_t':'long long'
| |       |-ImplicitCastExpr 0x563ea820bd58 <col:16> 's64_t (*)(s64_t *)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea820bca8 <col:16> 's64_t (s64_t *)' Function 0x563ea820b5d0 'k_uptime_delta' 's64_t (s64_t *)'
| |       `-ImplicitCastExpr 0x563ea820bda0 <col:31> 's64_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x563ea820bcd0 <col:31> 's64_t *' lvalue ParmVar 0x563ea820bb00 'reftime' 's64_t *'
| `-FullComment 0x563ea82b19a0 <line:1872:3, line:1885:24>
|   |-ParagraphComment 0x563ea82b15a0 <line:1872:3>
|   | `-TextComment 0x563ea82b1570 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b15c0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x563ea82b1620 <col:10, col:44>
|   |   `-TextComment 0x563ea82b15f0 <col:10, col:44> Text=" Get elapsed time (32-bit version)."
|   |-ParagraphComment 0x563ea82b1690 <line:1874:3, line:1875:50>
|   | |-TextComment 0x563ea82b1640 <line:1874:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x563ea82b1660 <line:1875:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x563ea82b1750 <line:1877:3, line:1880:41>
|   | |-TextComment 0x563ea82b16b0 <line:1877:3, col:78> Text=" This routine can be more efficient than k_uptime_delta(), as it reduces the"
|   | |-TextComment 0x563ea82b16d0 <line:1878:3, col:73> Text=" need for interrupt locking and 64-bit math. However, the 32-bit result"
|   | |-TextComment 0x563ea82b16f0 <line:1879:3, col:72> Text=" cannot hold an elapsed time larger than approximately 50 days, so the"
|   | `-TextComment 0x563ea82b1710 <line:1880:3, col:41> Text=" caller must handle possible rollovers."
|   |-ParagraphComment 0x563ea82b17a0 <line:1882:3>
|   | `-TextComment 0x563ea82b1770 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b17c0 <col:4, line:1883:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b1870 <line:1882:18, line:1883:37>
|   |   |-TextComment 0x563ea82b1820 <line:1882:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x563ea82b1840 <line:1883:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x563ea82b18c0 <line:1885:3>
|   | `-TextComment 0x563ea82b1890 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82b18e0 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x563ea82b1940 <col:11, col:24>
|       `-TextComment 0x563ea82b1910 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x563ea820bee0 <line:1900:1, line:1903:1> line:1900:21 k_cycle_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x563ea820c088 <line:1901:1, line:1903:1>
| | `-ReturnStmt 0x563ea820c018 <line:1902:2, col:29>
| |   `-CallExpr 0x563ea820bff0 <col:9, col:29> 'u32_t':'unsigned int'
| |     `-ImplicitCastExpr 0x563ea820bfd8 <col:9> 'u32_t (*)(void)' <FunctionToPointerDecay>
| |       `-DeclRefExpr 0x563ea820bf80 <col:9> 'u32_t (void)' Function 0x563ea81b8da8 'arch_k_cycle_get_32' 'u32_t (void)'
| `-FullComment 0x563ea82b1c50 <line:1893:3, line:1898:57>
|   |-ParagraphComment 0x563ea82b1a40 <line:1893:3>
|   | `-TextComment 0x563ea82b1a10 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b1a60 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x563ea82b1ac0 <col:10, col:34>
|   |   `-TextComment 0x563ea82b1a90 <col:10, col:34> Text=" Read the hardware clock."
|   |-ParagraphComment 0x563ea82b1b30 <line:1895:3, line:1896:9>
|   | |-TextComment 0x563ea82b1ae0 <line:1895:3, col:78> Text=" This routine returns the current time, as measured by the system's hardware"
|   | `-TextComment 0x563ea82b1b00 <line:1896:3, col:9> Text=" clock."
|   |-ParagraphComment 0x563ea82b1b80 <line:1898:3>
|   | `-TextComment 0x563ea82b1b50 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82b1ba0 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x563ea82b1c00 <col:11, col:57>
|       `-TextComment 0x563ea82b1bd0 <col:11, col:57> Text=" Current hardware clock up-counter (in cycles)."
|-RecordDecl 0x563ea820c0a0 prev 0x563ea81f3160 <line:1913:1, line:1924:1> line:1913:8 struct k_queue definition
| |-FullComment 0x563ea82b1d70 <line:1910:3, col:24>
| | `-ParagraphComment 0x563ea82b1d40 <col:3, col:24>
| |   |-TextComment 0x563ea82b1cc0 <col:3> Text=" "
| |   |-InlineCommandComment 0x563ea82b1ce0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x563ea82b1d00 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x563ea820c138 <line:1914:2, col:15> col:15 referenced data_q 'sys_sflist_t':'struct _sflist'
| |-FieldDecl 0x563ea820c1a0 <line:1915:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-RecordDecl 0x563ea820c1e8 <line:1916:2, line:1920:2> line:1916:2 union definition
| | `-FieldDecl 0x563ea820c2a0 <line:1917:3, col:13> col:13 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x563ea820c380 <line:1916:2> col:2 implicit 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
| `-IndirectFieldDecl 0x563ea820c3d8 <line:1917:13> col:13 implicit wait_q '_wait_q_t':'_wait_q_t'
|   |-Field 0x563ea820c380 '' 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
|   `-Field 0x563ea820c2a0 'wait_q' '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x563ea820cd18 <line:1939:1, col:67> col:14 used z_queue_node_peek 'void *(sys_sfnode_t *, bool)' extern
| |-ParmVarDecl 0x563ea820cb90 <col:32, col:46> col:46 node 'sys_sfnode_t *'
| `-ParmVarDecl 0x563ea820cc00 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/kernel.h:1939:57> col:57 needs_free 'bool'
|-FunctionDecl 0x563ea820d010 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1960:50> col:16 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x563ea820cf10 <col:29, col:45> col:45 queue 'struct k_queue *'
| `-FullComment 0x563ea82b2110 <line:1952:3, line:1958:14>
|   |-ParagraphComment 0x563ea82b1e10 <line:1952:3>
|   | `-TextComment 0x563ea82b1de0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b1e30 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x563ea82b1e90 <col:10, col:29>
|   |   `-TextComment 0x563ea82b1e60 <col:10, col:29> Text=" Initialize a queue."
|   |-ParagraphComment 0x563ea82b1ee0 <line:1954:3, col:67>
|   | `-TextComment 0x563ea82b1eb0 <col:3, col:67> Text=" This routine initializes a queue object, prior to its first use."
|   |-ParagraphComment 0x563ea82b1f30 <line:1956:3>
|   | `-TextComment 0x563ea82b1f00 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b1f50 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b1fe0 <col:16, col:37>
|   |   `-TextComment 0x563ea82b1fb0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x563ea82b2030 <line:1958:3>
|   | `-TextComment 0x563ea82b2000 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82b2050 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82b20b0 <col:11, col:14>
|       `-TextComment 0x563ea82b2080 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea820d198 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1977:57> col:16 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x563ea820d110 <col:36, col:52> col:52 queue 'struct k_queue *'
| `-FullComment 0x563ea82b26b0 <line:1963:3, line:1975:14>
|   |-ParagraphComment 0x563ea82b21b0 <line:1963:3>
|   | `-TextComment 0x563ea82b2180 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b21d0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x563ea82b2230 <col:10, col:36>
|   |   `-TextComment 0x563ea82b2200 <col:10, col:36> Text=" Cancel waiting on a queue."
|   |-ParagraphComment 0x563ea82b23a0 <line:1965:3, line:1969:35>
|   | |-TextComment 0x563ea82b2250 <line:1965:3, col:47> Text=" This routine causes first thread pending on "
|   | |-InlineCommandComment 0x563ea82b22a0 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="queue,"
|   | |-TextComment 0x563ea82b22c0 <col:57, col:67> Text=" if any, to"
|   | |-TextComment 0x563ea82b22e0 <line:1966:3, col:74> Text=" return from k_queue_get() call with NULL value (as if timeout expired)."
|   | |-TextComment 0x563ea82b2300 <line:1967:3, col:67> Text=" If the queue is being waited on by k_poll(), it will return with"
|   | |-TextComment 0x563ea82b2320 <line:1968:3, col:69> Text=" -EINTR and K_POLL_STATE_CANCELLED state (and per above, subsequent"
|   | `-TextComment 0x563ea82b2340 <line:1969:3, col:35> Text=" k_queue_get() will return NULL)."
|   |-ParagraphComment 0x563ea82b23f0 <line:1971:3>
|   | `-TextComment 0x563ea82b23c0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b2410 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82b2470 <col:9, col:31>
|   |   `-TextComment 0x563ea82b2440 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82b24c0 <line:1973:3>
|   | `-TextComment 0x563ea82b2490 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b24e0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b2570 <col:16, col:37>
|   |   `-TextComment 0x563ea82b2540 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x563ea82b25c0 <line:1975:3>
|   | `-TextComment 0x563ea82b2590 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82b25e0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82b2640 <col:11, col:14>
|       `-TextComment 0x563ea82b2610 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea820d420 <line:1993:1, col:61> col:13 used k_queue_append 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x563ea820d290 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x563ea820d308 <col:51, col:57> col:57 data 'void *'
| `-FullComment 0x563ea82b2cd0 <line:1980:3, line:1991:14>
|   |-ParagraphComment 0x563ea82b2750 <line:1980:3>
|   | `-TextComment 0x563ea82b2720 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b2770 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea82b27d0 <col:10, col:50>
|   |   `-TextComment 0x563ea82b27a0 <col:10, col:50> Text=" Append an element to the end of a queue."
|   |-ParagraphComment 0x563ea82b28f0 <line:1982:3, line:1984:24>
|   | |-TextComment 0x563ea82b27f0 <line:1982:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x563ea82b2840 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x563ea82b2860 <col:49, col:74> Text=" A queue data item must be"
|   | |-TextComment 0x563ea82b2880 <line:1983:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x563ea82b28a0 <line:1984:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x563ea82b2940 <line:1986:3>
|   | `-TextComment 0x563ea82b2910 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b2960 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82b29c0 <col:9, col:31>
|   |   `-TextComment 0x563ea82b2990 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82b2a10 <line:1988:3>
|   | `-TextComment 0x563ea82b29e0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b2a30 <col:4, line:1989:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b2ae0 <line:1988:16, line:1989:3>
|   |   |-TextComment 0x563ea82b2a90 <line:1988:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x563ea82b2ab0 <line:1989:3> Text=" "
|   |-ParamCommandComment 0x563ea82b2b00 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x563ea82b2b90 <col:15, col:40>
|   |   `-TextComment 0x563ea82b2b60 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x563ea82b2be0 <line:1991:3>
|   | `-TextComment 0x563ea82b2bb0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82b2c00 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82b2c60 <col:11, col:14>
|       `-TextComment 0x563ea82b2c30 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea820d6b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2011:71> col:17 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x563ea820d520 <col:38, col:54> col:54 queue 'struct k_queue *'
| |-ParmVarDecl 0x563ea820d598 <col:61, col:67> col:67 data 'void *'
| `-FullComment 0x563ea82b3370 <line:1996:3, line:2009:78>
|   |-ParagraphComment 0x563ea82b2d70 <line:1996:3>
|   | `-TextComment 0x563ea82b2d40 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b2d90 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea82b2df0 <col:10, col:39>
|   |   `-TextComment 0x563ea82b2dc0 <col:10, col:39> Text=" Append an element to a queue."
|   |-ParagraphComment 0x563ea82b2f50 <line:1998:3, line:2001:50>
|   | |-TextComment 0x563ea82b2e10 <line:1998:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x563ea82b2e60 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x563ea82b2e80 <col:49, col:76> Text=" There is an implicit memory"
|   | |-TextComment 0x563ea82b2ea0 <line:1999:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x563ea82b2ec0 <line:2000:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x563ea82b2ee0 <line:2001:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x563ea82b2fa0 <line:2003:3>
|   | `-TextComment 0x563ea82b2f70 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b2fc0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82b3020 <col:9, col:31>
|   |   `-TextComment 0x563ea82b2ff0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82b3070 <line:2005:3>
|   | `-TextComment 0x563ea82b3040 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b3090 <col:4, line:2006:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b3140 <line:2005:16, line:2006:3>
|   |   |-TextComment 0x563ea82b30f0 <line:2005:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x563ea82b3110 <line:2006:3> Text=" "
|   |-ParamCommandComment 0x563ea82b3160 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x563ea82b31f0 <col:15, col:40>
|   |   `-TextComment 0x563ea82b31c0 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x563ea82b3300 <line:2008:3, line:2009:78>
|     |-TextComment 0x563ea82b3210 <line:2008:3> Text=" "
|     |-InlineCommandComment 0x563ea82b3230 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x563ea82b3250 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x563ea82b3270 <line:2009:3> Text=" "
|     |-InlineCommandComment 0x563ea82b3290 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x563ea82b32b0 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x563ea820d8b8 <line:2027:1, col:62> col:13 k_queue_prepend 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x563ea820d7b0 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x563ea820d828 <col:52, col:58> col:58 data 'void *'
| `-FullComment 0x563ea82b3990 <line:2014:3, line:2025:14>
|   |-ParagraphComment 0x563ea82b3410 <line:2014:3>
|   | `-TextComment 0x563ea82b33e0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b3430 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea82b3490 <col:10, col:40>
|   |   `-TextComment 0x563ea82b3460 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x563ea82b35b0 <line:2016:3, line:2018:24>
|   | |-TextComment 0x563ea82b34b0 <line:2016:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x563ea82b3500 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x563ea82b3520 <col:50, col:75> Text=" A queue data item must be"
|   | |-TextComment 0x563ea82b3540 <line:2017:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x563ea82b3560 <line:2018:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x563ea82b3600 <line:2020:3>
|   | `-TextComment 0x563ea82b35d0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b3620 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82b3680 <col:9, col:31>
|   |   `-TextComment 0x563ea82b3650 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82b36d0 <line:2022:3>
|   | `-TextComment 0x563ea82b36a0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b36f0 <col:4, line:2023:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b37a0 <line:2022:16, line:2023:3>
|   |   |-TextComment 0x563ea82b3750 <line:2022:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x563ea82b3770 <line:2023:3> Text=" "
|   |-ParamCommandComment 0x563ea82b37c0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x563ea82b3850 <col:15, col:40>
|   |   `-TextComment 0x563ea82b3820 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x563ea82b38a0 <line:2025:3>
|   | `-TextComment 0x563ea82b3870 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82b38c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82b3920 <col:11, col:14>
|       `-TextComment 0x563ea82b38f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea820dac8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2045:72> col:17 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x563ea820d9c0 <col:39, col:55> col:55 queue 'struct k_queue *'
| |-ParmVarDecl 0x563ea820da38 <col:62, col:68> col:68 data 'void *'
| `-FullComment 0x563ea82b4010 <line:2030:3, line:2043:78>
|   |-ParagraphComment 0x563ea82b3a30 <line:2030:3>
|   | `-TextComment 0x563ea82b3a00 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b3a50 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea82b3ab0 <col:10, col:40>
|   |   `-TextComment 0x563ea82b3a80 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x563ea82b3bf0 <line:2032:3, line:2035:50>
|   | |-TextComment 0x563ea82b3ad0 <line:2032:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x563ea82b3b20 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x563ea82b3b40 <col:50, col:77> Text=" There is an implicit memory"
|   | |-TextComment 0x563ea82b3b60 <line:2033:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x563ea82b3b80 <line:2034:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x563ea82b3ba0 <line:2035:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x563ea82b3c40 <line:2037:3>
|   | `-TextComment 0x563ea82b3c10 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b3c60 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82b3cc0 <col:9, col:31>
|   |   `-TextComment 0x563ea82b3c90 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82b3d10 <line:2039:3>
|   | `-TextComment 0x563ea82b3ce0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b3d30 <col:4, line:2040:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b3de0 <line:2039:16, line:2040:3>
|   |   |-TextComment 0x563ea82b3d90 <line:2039:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x563ea82b3db0 <line:2040:3> Text=" "
|   |-ParamCommandComment 0x563ea82b3e00 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x563ea82b3e90 <col:15, col:40>
|   |   `-TextComment 0x563ea82b3e60 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x563ea82b3fa0 <line:2042:3, line:2043:78>
|     |-TextComment 0x563ea82b3eb0 <line:2042:3> Text=" "
|     |-InlineCommandComment 0x563ea82b3ed0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x563ea82b3ef0 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x563ea82b3f10 <line:2043:3> Text=" "
|     |-InlineCommandComment 0x563ea82b3f30 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x563ea82b3f50 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x563ea820de10 <line:2062:1, col:73> col:13 k_queue_insert 'void (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x563ea820dbf0 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x563ea820dc68 <col:51, col:57> col:57 prev 'void *'
| |-ParmVarDecl 0x563ea820dce0 <col:63, col:69> col:69 data 'void *'
| `-FullComment 0x563ea82b4710 <line:2048:3, line:2060:14>
|   |-ParagraphComment 0x563ea82b40b0 <line:2048:3>
|   | `-TextComment 0x563ea82b4080 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b40d0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea82b4130 <col:10, col:40>
|   |   `-TextComment 0x563ea82b4100 <col:10, col:40> Text=" Inserts an element to a queue."
|   |-ParagraphComment 0x563ea82b4250 <line:2050:3, line:2052:45>
|   | |-TextComment 0x563ea82b4150 <line:2050:3, col:39> Text=" This routine inserts a data item to "
|   | |-InlineCommandComment 0x563ea82b41a0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x563ea82b41c0 <col:48, col:76> Text=" after previous item. A queue"
|   | |-TextComment 0x563ea82b41e0 <line:2051:3, col:70> Text=" data item must be aligned on a word boundary, and the first word of"
|   | `-TextComment 0x563ea82b4200 <line:2052:3, col:45> Text=" the item is reserved for the kernel's use."
|   |-ParagraphComment 0x563ea82b42a0 <line:2054:3>
|   | `-TextComment 0x563ea82b4270 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b42c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82b4320 <col:9, col:31>
|   |   `-TextComment 0x563ea82b42f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82b4370 <line:2056:3>
|   | `-TextComment 0x563ea82b4340 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b4390 <col:4, line:2057:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b4440 <line:2056:16, line:2057:3>
|   |   |-TextComment 0x563ea82b43f0 <line:2056:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x563ea82b4410 <line:2057:3> Text=" "
|   |-ParamCommandComment 0x563ea82b4460 <col:4, line:2058:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x563ea82b4510 <line:2057:15, line:2058:3>
|   |   |-TextComment 0x563ea82b44c0 <line:2057:15, col:49> Text=" Address of the previous data item."
|   |   `-TextComment 0x563ea82b44e0 <line:2058:3> Text=" "
|   |-ParamCommandComment 0x563ea82b4530 <col:4, col:40> [in] implicitly Param="data" ParamIndex=2
|   | `-ParagraphComment 0x563ea82b45c0 <col:15, col:40>
|   |   `-TextComment 0x563ea82b4590 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x563ea82b4610 <line:2060:3>
|   | `-TextComment 0x563ea82b45e0 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82b4630 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82b4690 <col:11, col:14>
|       `-TextComment 0x563ea82b4660 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea820e148 <line:2082:1, col:77> col:12 k_queue_append_list 'int (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x563ea820df20 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x563ea820df98 <col:55, col:61> col:61 head 'void *'
| |-ParmVarDecl 0x563ea820e010 <col:67, col:73> col:73 tail 'void *'
| `-FullComment 0x563ea82b4ec0 <line:2065:3, line:2081:1>
|   |-ParagraphComment 0x563ea82b47b0 <line:2065:3>
|   | `-TextComment 0x563ea82b4780 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b47d0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x563ea82b4830 <col:10, col:58>
|   |   `-TextComment 0x563ea82b4800 <col:10, col:58> Text=" Atomically append a list of elements to a queue."
|   |-ParagraphComment 0x563ea82b4970 <line:2067:3, line:2070:19>
|   | |-TextComment 0x563ea82b4850 <line:2067:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x563ea82b48a0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x563ea82b48c0 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x563ea82b48e0 <line:2068:3, col:70> Text=" The data items must be in a singly-linked list, with the first word"
|   | |-TextComment 0x563ea82b4900 <line:2069:3, col:69> Text=" in each data item pointing to the next data item; the list must be"
|   | `-TextComment 0x563ea82b4920 <line:2070:3, col:19> Text=" NULL-terminated."
|   |-ParagraphComment 0x563ea82b49c0 <line:2072:3>
|   | `-TextComment 0x563ea82b4990 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b49e0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82b4a40 <col:9, col:31>
|   |   `-TextComment 0x563ea82b4a10 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82b4a90 <line:2074:3>
|   | `-TextComment 0x563ea82b4a60 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b4ab0 <col:4, line:2075:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b4b60 <line:2074:16, line:2075:3>
|   |   |-TextComment 0x563ea82b4b10 <line:2074:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x563ea82b4b30 <line:2075:3> Text=" "
|   |-ParamCommandComment 0x563ea82b4b80 <col:4, line:2076:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x563ea82b4c30 <line:2075:15, line:2076:3>
|   |   |-TextComment 0x563ea82b4be0 <line:2075:15, col:59> Text=" Pointer to first node in singly-linked list."
|   |   `-TextComment 0x563ea82b4c00 <line:2076:3> Text=" "
|   |-ParamCommandComment 0x563ea82b4c50 <col:4, col:58> [in] implicitly Param="tail" ParamIndex=2
|   | `-ParagraphComment 0x563ea82b4ce0 <col:15, col:58>
|   |   `-TextComment 0x563ea82b4cb0 <col:15, col:58> Text=" Pointer to last node in singly-linked list."
|   |-ParagraphComment 0x563ea82b4df0 <line:2078:3, line:2079:43>
|   | |-TextComment 0x563ea82b4d00 <line:2078:3> Text=" "
|   | |-InlineCommandComment 0x563ea82b4d20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82b4d40 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x563ea82b4d60 <line:2079:3> Text=" "
|   | |-InlineCommandComment 0x563ea82b4d80 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x563ea82b4da0 <col:11, col:43> Text=" -EINVAL on invalid supplied data"
|   `-ParagraphComment 0x563ea82b4e40 <line:2081:1>
|     `-TextComment 0x563ea82b4e10 <col:1> Text=" "
|-FunctionDecl 0x563ea820e3d8 <line:2099:1, col:72> col:12 k_queue_merge_slist 'int (struct k_queue *, sys_slist_t *)' extern
| |-ParmVarDecl 0x563ea820e250 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x563ea820e2c0 <col:55, col:68> col:68 list 'sys_slist_t *'
| `-FullComment 0x563ea82b5560 <line:2085:3, line:2097:34>
|   |-ParagraphComment 0x563ea82b4fa0 <line:2085:3>
|   | `-TextComment 0x563ea82b4f70 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b4fc0 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x563ea82b5020 <col:10, col:55>
|   |   `-TextComment 0x563ea82b4ff0 <col:10, col:55> Text=" Atomically add a list of elements to a queue."
|   |-ParagraphComment 0x563ea82b5140 <line:2087:3, line:2089:67>
|   | |-TextComment 0x563ea82b5040 <line:2087:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x563ea82b5090 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x563ea82b50b0 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x563ea82b50d0 <line:2088:3, col:69> Text=" The data items must be in a singly-linked list implemented using a"
|   | `-TextComment 0x563ea82b50f0 <line:2089:3, col:67> Text=" sys_slist_t object. Upon completion, the original list is empty."
|   |-ParagraphComment 0x563ea82b5190 <line:2091:3>
|   | `-TextComment 0x563ea82b5160 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b51b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82b5210 <col:9, col:31>
|   |   `-TextComment 0x563ea82b51e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82b5260 <line:2093:3>
|   | `-TextComment 0x563ea82b5230 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b5280 <col:4, line:2094:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b5330 <line:2093:16, line:2094:3>
|   |   |-TextComment 0x563ea82b52e0 <line:2093:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x563ea82b5300 <line:2094:3> Text=" "
|   |-ParamCommandComment 0x563ea82b5350 <col:4, col:45> [in] implicitly Param="list" ParamIndex=1
|   | `-ParagraphComment 0x563ea82b53e0 <col:15, col:45>
|   |   `-TextComment 0x563ea82b53b0 <col:15, col:45> Text=" Pointer to sys_slist_t object."
|   `-ParagraphComment 0x563ea82b54f0 <line:2096:3, line:2097:34>
|     |-TextComment 0x563ea82b5400 <line:2096:3> Text=" "
|     |-InlineCommandComment 0x563ea82b5420 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x563ea82b5440 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x563ea82b5460 <line:2097:3> Text=" "
|     |-InlineCommandComment 0x563ea82b5480 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x563ea82b54a0 <col:11, col:34> Text=" -EINVAL on invalid data"
|-FunctionDecl 0x563ea820e668 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2117:65> col:17 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x563ea820e4e0 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x563ea820e550 <col:52, col:58> col:58 timeout 's32_t':'int'
| `-FullComment 0x563ea82b5c40 <line:2102:3, line:2115:48>
|   |-ParagraphComment 0x563ea82b5600 <line:2102:3>
|   | `-TextComment 0x563ea82b55d0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b5620 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x563ea82b5680 <col:10, col:38>
|   |   `-TextComment 0x563ea82b5650 <col:10, col:38> Text=" Get an element from a queue."
|   |-ParagraphComment 0x563ea82b5770 <line:2104:3, line:2105:46>
|   | |-TextComment 0x563ea82b56a0 <line:2104:3, col:45> Text=" This routine removes first data item from "
|   | |-InlineCommandComment 0x563ea82b56f0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x563ea82b5710 <col:55, col:76> Text=" The first word of the"
|   | `-TextComment 0x563ea82b5730 <line:2105:3, col:46> Text=" data item is reserved for the kernel's use."
|   |-ParagraphComment 0x563ea82b57c0 <line:2107:3>
|   | `-TextComment 0x563ea82b5790 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b57e0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x563ea82b58c0 <col:9, col:72>
|   |   |-TextComment 0x563ea82b5810 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x563ea82b5860 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x563ea82b5880 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x563ea82b5910 <line:2109:3>
|   | `-TextComment 0x563ea82b58e0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b5930 <col:4, line:2110:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b59e0 <line:2109:16, line:2110:3>
|   |   |-TextComment 0x563ea82b5990 <line:2109:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x563ea82b59b0 <line:2110:3> Text=" "
|   |-ParamCommandComment 0x563ea82b5a00 <col:4, line:2112:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x563ea82b5ae0 <line:2110:18, line:2112:28>
|   |   |-TextComment 0x563ea82b5a60 <line:2110:18, col:71> Text=" Non-negative waiting period to obtain a data item (in"
|   |   |-TextComment 0x563ea82b5a80 <line:2111:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x563ea82b5aa0 <line:2112:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x563ea82b5b30 <line:2114:3>
|   | `-TextComment 0x563ea82b5b00 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82b5b50 <col:4, line:2115:48> Name="return"
|     `-ParagraphComment 0x563ea82b5bd0 <line:2114:11, line:2115:48>
|       |-TextComment 0x563ea82b5b80 <line:2114:11, col:67> Text=" Address of the data item if successful; NULL if returned"
|       `-TextComment 0x563ea82b5ba0 <line:2115:3, col:48> Text=" without waiting, or waiting period timed out."
|-FunctionDecl 0x563ea820e900 <line:2133:1, line:2136:1> line:2133:20 k_queue_remove 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x563ea820e770 <col:35, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x563ea820e7e8 <col:58, col:64> col:64 used data 'void *'
| |-CompoundStmt 0x563ea820ebf8 <line:2134:1, line:2136:1>
| | `-ReturnStmt 0x563ea820ebb0 <line:2135:2, col:72>
| |   `-CallExpr 0x563ea820eb60 <col:9, col:72> 'bool'
| |     |-ImplicitCastExpr 0x563ea820eb48 <col:9> 'bool (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea820e9b0 <col:9> 'bool (sys_sflist_t *, sys_sfnode_t *)' Function 0x563ea8187940 'sys_sflist_find_and_remove' 'bool (sys_sflist_t *, sys_sfnode_t *)'
| |     |-UnaryOperator 0x563ea820ea50 <col:36, col:44> 'sys_sflist_t *' prefix '&'
| |     | `-MemberExpr 0x563ea820ea18 <col:37, col:44> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x563ea820c138
| |     |   `-ImplicitCastExpr 0x563ea820ea00 <col:37> 'struct k_queue *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x563ea820e9d8 <col:37> 'struct k_queue *' lvalue ParmVar 0x563ea820e770 'queue' 'struct k_queue *'
| |     `-CStyleCastExpr 0x563ea820eac0 <col:52, col:68> 'sys_sfnode_t *' <BitCast>
| |       `-ImplicitCastExpr 0x563ea820eaa8 <col:68> 'void *' <LValueToRValue>
| |         `-DeclRefExpr 0x563ea820ea70 <col:68> 'void *' lvalue ParmVar 0x563ea820e7e8 'data' 'void *'
| `-FullComment 0x563ea82b6260 <line:2120:3, line:2131:40>
|   |-ParagraphComment 0x563ea82b5ce0 <line:2120:3>
|   | `-TextComment 0x563ea82b5cb0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b5d00 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x563ea82b5d60 <col:10, col:41>
|   |   `-TextComment 0x563ea82b5d30 <col:10, col:41> Text=" Remove an element from a queue."
|   |-ParagraphComment 0x563ea82b5e80 <line:2122:3, line:2124:76>
|   | |-TextComment 0x563ea82b5d80 <line:2122:3, col:39> Text=" This routine removes data item from "
|   | |-InlineCommandComment 0x563ea82b5dd0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x563ea82b5df0 <col:49, col:70> Text=" The first word of the"
|   | |-TextComment 0x563ea82b5e10 <line:2123:3, col:77> Text=" data item is reserved for the kernel's use. Removing elements from k_queue"
|   | `-TextComment 0x563ea82b5e30 <line:2124:3, col:76> Text=" rely on sys_slist_find_and_remove which is not a constant time operation."
|   |-ParagraphComment 0x563ea82b5ed0 <line:2126:3>
|   | `-TextComment 0x563ea82b5ea0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b5ef0 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x563ea82b5f50 <col:9, col:30>
|   |   `-TextComment 0x563ea82b5f20 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x563ea82b5fa0 <line:2128:3>
|   | `-TextComment 0x563ea82b5f70 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b5fc0 <col:4, line:2129:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b6070 <line:2128:16, line:2129:3>
|   |   |-TextComment 0x563ea82b6020 <line:2128:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x563ea82b6040 <line:2129:3> Text=" "
|   |-ParamCommandComment 0x563ea82b6090 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x563ea82b6120 <col:15, col:40>
|   |   `-TextComment 0x563ea82b60f0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x563ea82b6170 <line:2131:3>
|   | `-TextComment 0x563ea82b6140 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82b6190 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x563ea82b61f0 <col:11, col:40>
|       `-TextComment 0x563ea82b61c0 <col:11, col:40> Text=" true if data item was removed"
|-FunctionDecl 0x563ea820ed40 <line:2152:1, line:2164:1> line:2152:20 k_queue_unique_append 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x563ea820ec38 <col:42, col:58> col:58 used queue 'struct k_queue *'
| |-ParmVarDecl 0x563ea820ecb0 <col:65, col:71> col:71 used data 'void *'
| |-CompoundStmt 0x563ea820f578 <line:2153:1, line:2164:1>
| | |-DeclStmt 0x563ea820ee60 <line:2154:2, col:20>
| | | `-VarDecl 0x563ea820ee00 <col:2, col:16> col:16 used test 'sys_sfnode_t *'
| | |-ForStmt 0x563ea820f368 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:2, /vagrant/ext/zephyros/zephyr/include/kernel.h:2160:2>
| | | |-BinaryOperator 0x563ea820efa8 <line:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x563ea820ee78 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x563ea820ee00 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x563ea820ef78 <<scratch space>:153:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x563ea820ef60 <<scratch space>:153:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x563ea820eea0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
| | | |   `-UnaryOperator 0x563ea820ef40 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:27, col:35> 'sys_sflist_t *' prefix '&'
| | | |     `-MemberExpr 0x563ea820ef08 <col:28, col:35> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x563ea820c138
| | | |       `-ImplicitCastExpr 0x563ea820eef0 <col:28> 'struct k_queue *' <LValueToRValue>
| | | |         `-DeclRefExpr 0x563ea820eec8 <col:28> 'struct k_queue *' lvalue ParmVar 0x563ea820ec38 'queue' 'struct k_queue *'
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x563ea820f0a8 <col:43, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| | | | |-ImplicitCastExpr 0x563ea820f078 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x563ea820efd0 <col:43> 'sys_sfnode_t *' lvalue Var 0x563ea820ee00 'test' 'sys_sfnode_t *'
| | | | `-ImplicitCastExpr 0x563ea820f090 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
| | | |   `-ParenExpr 0x563ea820f058 <col:14, col:24> 'void *'
| | | |     `-CStyleCastExpr 0x563ea820f030 <col:15, col:23> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x563ea820eff8 <col:23> 'int' 0
| | | |-BinaryOperator 0x563ea820f1a8 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x563ea820f0d0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x563ea820ee00 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x563ea820f160 <<scratch space>:155:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x563ea820f148 <<scratch space>:155:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x563ea820f0f8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x563ea817cbe8 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
| | | |   `-ImplicitCastExpr 0x563ea820f190 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x563ea820f120 <col:43> 'sys_sfnode_t *' lvalue Var 0x563ea820ee00 'test' 'sys_sfnode_t *'
| | | `-CompoundStmt 0x563ea820f350 <col:49, line:2160:2>
| | |   `-IfStmt 0x563ea820f318 <line:2157:3, line:2159:3>
| | |     |-<<<NULL>>>
| | |     |-<<<NULL>>>
| | |     |-BinaryOperator 0x563ea820f288 <line:2157:7, col:32> 'int' '=='
| | |     | |-ImplicitCastExpr 0x563ea820f270 <col:7> 'sys_sfnode_t *' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x563ea820f1d0 <col:7> 'sys_sfnode_t *' lvalue Var 0x563ea820ee00 'test' 'sys_sfnode_t *'
| | |     | `-CStyleCastExpr 0x563ea820f248 <col:15, col:32> 'sys_sfnode_t *' <BitCast>
| | |     |   `-ImplicitCastExpr 0x563ea820f230 <col:32> 'void *' <LValueToRValue>
| | |     |     `-DeclRefExpr 0x563ea820f1f8 <col:32> 'void *' lvalue ParmVar 0x563ea820ecb0 'data' 'void *'
| | |     |-CompoundStmt 0x563ea820f300 <col:38, line:2159:3>
| | |     | `-ReturnStmt 0x563ea820f2e8 <line:2158:4, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| | |     |   `-ImplicitCastExpr 0x563ea820f2d0 <col:16> 'bool' <IntegralToBoolean>
| | |     |     `-IntegerLiteral 0x563ea820f2b0 <col:16> 'int' 0
| | |     `-<<<NULL>>>
| | |-CallExpr 0x563ea820f490 </vagrant/ext/zephyros/zephyr/include/kernel.h:2162:2, col:28> 'void'
| | | |-ImplicitCastExpr 0x563ea820f478 <col:2> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x563ea820f3a0 <col:2> 'void (struct k_queue *, void *)' Function 0x563ea820d420 'k_queue_append' 'void (struct k_queue *, void *)'
| | | |-ImplicitCastExpr 0x563ea820f4c8 <col:17> 'struct k_queue *' <LValueToRValue>
| | | | `-DeclRefExpr 0x563ea820f3c8 <col:17> 'struct k_queue *' lvalue ParmVar 0x563ea820ec38 'queue' 'struct k_queue *'
| | | `-ImplicitCastExpr 0x563ea820f4e0 <col:24> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x563ea820f3f0 <col:24> 'void *' lvalue ParmVar 0x563ea820ecb0 'data' 'void *'
| | `-ReturnStmt 0x563ea820f530 <line:2163:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
| |   `-ImplicitCastExpr 0x563ea820f518 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x563ea820f4f8 <col:16> 'int' 1
| `-FullComment 0x563ea82b6880 </vagrant/ext/zephyros/zephyr/include/kernel.h:2139:3, line:2150:52>
|   |-ParagraphComment 0x563ea82b6300 <line:2139:3>
|   | `-TextComment 0x563ea82b62d0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b6320 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x563ea82b6380 <col:10, col:72>
|   |   `-TextComment 0x563ea82b6350 <col:10, col:72> Text=" Append an element to a queue only if it's not present already."
|   |-ParagraphComment 0x563ea82b64a0 <line:2141:3, line:2143:78>
|   | |-TextComment 0x563ea82b63a0 <line:2141:3, col:37> Text=" This routine appends data item to "
|   | |-InlineCommandComment 0x563ea82b63f0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x563ea82b6410 <col:47, col:73> Text=" The first word of the data"
|   | |-TextComment 0x563ea82b6430 <line:2142:3, col:71> Text=" item is reserved for the kernel's use. Appending elements to k_queue"
|   | `-TextComment 0x563ea82b6450 <line:2143:3, col:78> Text=" relies on sys_slist_is_node_in_list which is not a constant time operation."
|   |-ParagraphComment 0x563ea82b64f0 <line:2145:3>
|   | `-TextComment 0x563ea82b64c0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b6510 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x563ea82b6570 <col:9, col:30>
|   |   `-TextComment 0x563ea82b6540 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x563ea82b65c0 <line:2147:3>
|   | `-TextComment 0x563ea82b6590 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b65e0 <col:4, line:2148:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b6690 <line:2147:16, line:2148:3>
|   |   |-TextComment 0x563ea82b6640 <line:2147:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x563ea82b6660 <line:2148:3> Text=" "
|   |-ParamCommandComment 0x563ea82b66b0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x563ea82b6740 <col:15, col:40>
|   |   `-TextComment 0x563ea82b6710 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x563ea82b6790 <line:2150:3>
|   | `-TextComment 0x563ea82b6760 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82b67b0 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x563ea82b6810 <col:11, col:52>
|       `-TextComment 0x563ea82b67e0 <col:11, col:52> Text=" true if data item was added, false if not"
|-FunctionDecl 0x563ea820f6d8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2179:53> col:15 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x563ea820f5d0 <col:32, col:48> col:48 queue 'struct k_queue *'
| `-FullComment 0x563ea82b6dc0 <line:2167:3, line:2177:34>
|   |-ParagraphComment 0x563ea82b6920 <line:2167:3>
|   | `-TextComment 0x563ea82b68f0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b6940 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x563ea82b69a0 <col:10, col:56>
|   |   `-TextComment 0x563ea82b6970 <col:10, col:56> Text=" Query a queue to see if it has data available."
|   |-ParagraphComment 0x563ea82b6a10 <line:2169:3, line:2170:59>
|   | |-TextComment 0x563ea82b69c0 <line:2169:3, col:77> Text=" Note that the data might be already gone by the time this function returns"
|   | `-TextComment 0x563ea82b69e0 <line:2170:3, col:59> Text=" if other threads are also trying to read from the queue."
|   |-ParagraphComment 0x563ea82b6a60 <line:2172:3>
|   | `-TextComment 0x563ea82b6a30 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b6a80 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82b6ae0 <col:9, col:31>
|   |   `-TextComment 0x563ea82b6ab0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82b6b30 <line:2174:3>
|   | `-TextComment 0x563ea82b6b00 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b6b50 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b6be0 <col:16, col:37>
|   |   `-TextComment 0x563ea82b6bb0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x563ea82b6c30 <line:2176:3>
|   | `-TextComment 0x563ea82b6c00 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b6c50 <col:4, line:2177:3> Name="return"
|   | `-ParagraphComment 0x563ea82b6cd0 <line:2176:11, line:2177:3>
|   |   |-TextComment 0x563ea82b6c80 <line:2176:11, col:42> Text=" Non-zero if the queue is empty."
|   |   `-TextComment 0x563ea82b6ca0 <line:2177:3> Text=" "
|   `-BlockCommandComment 0x563ea82b6cf0 <col:4, col:34> Name="return"
|     `-ParagraphComment 0x563ea82b6d50 <col:11, col:34>
|       `-TextComment 0x563ea82b6d20 <col:11, col:34> Text=" 0 if data is available."
|-FunctionDecl 0x563ea820f838 <line:2181:1, line:2184:1> line:2181:19 used z_impl_k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x563ea820f7a8 <col:43, col:59> col:59 used queue 'struct k_queue *'
| `-CompoundStmt 0x563ea820fa68 <line:2182:1, line:2184:1>
|   `-ReturnStmt 0x563ea820fa28 <line:2183:2, col:48>
|     `-CStyleCastExpr 0x563ea820fa00 <col:9, col:48> 'int' <IntegralCast>
|       `-CallExpr 0x563ea820f9b8 <col:14, col:48> 'bool'
|         |-ImplicitCastExpr 0x563ea820f9a0 <col:14> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x563ea820f8e0 <col:14> 'bool (sys_sflist_t *)' Function 0x563ea817b350 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|         `-UnaryOperator 0x563ea820f980 <col:34, col:42> 'sys_sflist_t *' prefix '&'
|           `-MemberExpr 0x563ea820f948 <col:35, col:42> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x563ea820c138
|             `-ImplicitCastExpr 0x563ea820f930 <col:35> 'struct k_queue *' <LValueToRValue>
|               `-DeclRefExpr 0x563ea820f908 <col:35> 'struct k_queue *' lvalue ParmVar 0x563ea820f7a8 'queue' 'struct k_queue *'
|-FunctionDecl 0x563ea8210530 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2195:56> col:17 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x563ea820faa8 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x563ea82b7170 <line:2187:3, line:2193:51>
|   |-ParagraphComment 0x563ea82b6e60 <line:2187:3>
|   | `-TextComment 0x563ea82b6e30 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b6e80 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x563ea82b6ee0 <col:10, col:44>
|   |   `-TextComment 0x563ea82b6eb0 <col:10, col:44> Text=" Peek element at the head of queue."
|   |-ParagraphComment 0x563ea82b6f40 <line:2189:3, col:61>
|   | `-TextComment 0x563ea82b6f00 <col:3, col:61> Text=" Return element from the head of queue without removing it."
|   |-ParagraphComment 0x563ea82b6f90 <line:2191:3>
|   | `-TextComment 0x563ea82b6f60 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b6fb0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b7040 <col:16, col:37>
|   |   `-TextComment 0x563ea82b7010 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x563ea82b7090 <line:2193:3>
|   | `-TextComment 0x563ea82b7060 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82b70b0 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x563ea82b7110 <col:11, col:51>
|       `-TextComment 0x563ea82b70e0 <col:11, col:51> Text=" Head element, or NULL if queue is empty."
|-FunctionDecl 0x563ea8210690 <line:2197:1, line:2200:1> line:2197:21 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x563ea8210600 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x563ea8210998 <line:2198:1, line:2200:1>
|   `-ReturnStmt 0x563ea8210950 <line:2199:2, col:70>
|     `-CallExpr 0x563ea8210900 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x563ea82108e8 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8210738 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x563ea820cd18 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x563ea8210838 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x563ea8210820 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x563ea8210760 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a1c0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x563ea8210800 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x563ea82107c8 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x563ea820c138
|       |     `-ImplicitCastExpr 0x563ea82107b0 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x563ea8210788 <col:49> 'struct k_queue *' lvalue ParmVar 0x563ea8210600 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x563ea8210938 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x563ea8210868 <col:16> 'int' 0
|-FunctionDecl 0x563ea8210a68 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2211:56> col:17 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x563ea82109d8 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x563ea82b7510 <line:2203:3, line:2209:51>
|   |-ParagraphComment 0x563ea82b7210 <line:2203:3>
|   | `-TextComment 0x563ea82b71e0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b7230 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x563ea82b7290 <col:10, col:44>
|   |   `-TextComment 0x563ea82b7260 <col:10, col:44> Text=" Peek element at the tail of queue."
|   |-ParagraphComment 0x563ea82b72e0 <line:2205:3, col:61>
|   | `-TextComment 0x563ea82b72b0 <col:3, col:61> Text=" Return element from the tail of queue without removing it."
|   |-ParagraphComment 0x563ea82b7330 <line:2207:3>
|   | `-TextComment 0x563ea82b7300 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b7350 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b73e0 <col:16, col:37>
|   |   `-TextComment 0x563ea82b73b0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x563ea82b7430 <line:2209:3>
|   | `-TextComment 0x563ea82b7400 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82b7450 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x563ea82b74b0 <col:11, col:51>
|       `-TextComment 0x563ea82b7480 <col:11, col:51> Text=" Tail element, or NULL if queue is empty."
|-FunctionDecl 0x563ea8210bc8 <line:2213:1, line:2216:1> line:2213:21 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x563ea8210b38 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x563ea8210e98 <line:2214:1, line:2216:1>
|   `-ReturnStmt 0x563ea8210e28 <line:2215:2, col:70>
|     `-CallExpr 0x563ea8210dd8 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x563ea8210dc0 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8210c70 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x563ea820cd18 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x563ea8210d70 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x563ea8210d58 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x563ea8210c98 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x563ea817a3e8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x563ea8210d38 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x563ea8210d00 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x563ea820c138
|       |     `-ImplicitCastExpr 0x563ea8210ce8 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x563ea8210cc0 <col:49> 'struct k_queue *' lvalue ParmVar 0x563ea8210b38 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x563ea8210e10 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x563ea8210da0 <col:16> 'int' 0
|-RecordDecl 0x563ea8210eb0 prev 0x563ea81f3210 </vagrant/ext/zephyros/zephyr/include/kernel.h:2310:1, line:2312:1> line:2310:8 struct k_fifo definition
| `-FieldDecl 0x563ea8210f58 <line:2311:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-RecordDecl 0x563ea8211348 prev 0x563ea81f32c0 <line:2525:1, line:2527:1> line:2525:8 struct k_lifo definition
| |-FullComment 0x563ea82b7630 <line:2523:4, col:7>
| | `-ParagraphComment 0x563ea82b7600 <col:4, col:7>
| |   |-TextComment 0x563ea82b7580 <col:4> Text=" "
| |   |-TextComment 0x563ea82b75a0 <col:5> Text="@"
| |   `-TextComment 0x563ea82b75c0 <col:6, col:7> Text="} "
| `-FieldDecl 0x563ea82113f0 <line:2526:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-TypedefDecl 0x563ea810dda8 <line:2641:1, col:19> col:19 referenced stack_data_t 'uintptr_t':'unsigned long'
| `-TypedefType 0x563ea81970d0 'uintptr_t' sugar
|   |-Typedef 0x563ea80db280 'uintptr_t'
|   `-BuiltinType 0x563ea805b850 'unsigned long'
|-RecordDecl 0x563ea810de00 prev 0x563ea81f3370 <line:2643:1, line:2651:1> line:2643:8 struct k_stack definition
| |-FieldDecl 0x563ea810de98 <line:2644:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x563ea810df00 <line:2645:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-FieldDecl 0x563ea810dfd8 <line:2646:2, col:16> col:16 base 'stack_data_t *'
| |-FieldDecl 0x563ea810e030 <col:2, col:23> col:23 next 'stack_data_t *'
| |-FieldDecl 0x563ea810e088 <col:2, col:30> col:30 top 'stack_data_t *'
| `-FieldDecl 0x563ea810e0e0 <line:2650:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x563ea810e480 <line:2686:1, line:2687:44> line:2686:6 k_stack_init 'void (struct k_stack *, stack_data_t *, u32_t)'
| |-ParmVarDecl 0x563ea810e270 <col:19, col:35> col:35 stack 'struct k_stack *'
| |-ParmVarDecl 0x563ea810e2e0 <line:2687:5, col:19> col:19 buffer 'stack_data_t *'
| |-ParmVarDecl 0x563ea810e350 <col:27, col:33> col:33 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x563ea82b7c40 <line:2675:3, line:2685:1>
|   |-ParagraphComment 0x563ea82b76d0 <line:2675:3>
|   | `-TextComment 0x563ea82b76a0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b76f0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x563ea82b7750 <col:10, col:29>
|   |   `-TextComment 0x563ea82b7720 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x563ea82b77a0 <line:2677:3, col:67>
|   | `-TextComment 0x563ea82b7770 <col:3, col:67> Text=" This routine initializes a stack object, prior to its first use."
|   |-ParagraphComment 0x563ea82b77f0 <line:2679:3>
|   | `-TextComment 0x563ea82b77c0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b7810 <col:4, line:2680:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b78c0 <line:2679:16, line:2680:3>
|   |   |-TextComment 0x563ea82b7870 <line:2679:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x563ea82b7890 <line:2680:3> Text=" "
|   |-ParamCommandComment 0x563ea82b78e0 <col:4, line:2681:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x563ea82b7990 <line:2680:17, line:2681:3>
|   |   |-TextComment 0x563ea82b7940 <line:2680:17, col:62> Text=" Address of array used to hold stacked values."
|   |   `-TextComment 0x563ea82b7960 <line:2681:3> Text=" "
|   |-ParamCommandComment 0x563ea82b79b0 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=2
|   | `-ParagraphComment 0x563ea82b7a40 <col:22, col:67>
|   |   `-TextComment 0x563ea82b7a10 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x563ea82b7a90 <line:2683:3>
|   | `-TextComment 0x563ea82b7a60 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b7ab0 <col:4, line:2684:3> Name="return"
|   | `-ParagraphComment 0x563ea82b7b30 <line:2683:11, line:2684:3>
|   |   |-TextComment 0x563ea82b7ae0 <line:2683:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82b7b00 <line:2684:3> Text=" "
|   |-VerbatimLineComment 0x563ea82b7b50 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x563ea82b7bc0 <line:2685:1>
|     `-TextComment 0x563ea82b7b90 <col:1> Text=" "
|-FunctionDecl 0x563ea810e710 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2706:25> line:2705:17 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x563ea810e590 <col:36, col:52> col:52 stack 'struct k_stack *'
| |-ParmVarDecl 0x563ea810e600 <line:2706:8, col:14> col:14 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x563ea82b81e0 <line:2691:3, line:2703:1>
|   |-ParagraphComment 0x563ea82b7ce0 <line:2691:3>
|   | `-TextComment 0x563ea82b7cb0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b7d00 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x563ea82b7d60 <col:10, col:29>
|   |   `-TextComment 0x563ea82b7d30 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x563ea82b7e20 <line:2693:3, line:2696:72>
|   | |-TextComment 0x563ea82b7d80 <line:2693:3, col:76> Text=" This routine initializes a stack object, prior to its first use. Internal"
|   | |-TextComment 0x563ea82b7da0 <line:2694:3, col:69> Text=" buffers will be allocated from the calling thread's resource pool."
|   | |-TextComment 0x563ea82b7dc0 <line:2695:3, col:66> Text=" This memory will be released if k_stack_cleanup() is called, or"
|   | `-TextComment 0x563ea82b7de0 <line:2696:3, col:72> Text=" userspace is enabled and the stack object loses all references to it."
|   |-ParagraphComment 0x563ea82b7e70 <line:2698:3>
|   | `-TextComment 0x563ea82b7e40 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b7e90 <col:4, line:2699:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b7f40 <line:2698:16, line:2699:3>
|   |   |-TextComment 0x563ea82b7ef0 <line:2698:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x563ea82b7f10 <line:2699:3> Text=" "
|   |-ParamCommandComment 0x563ea82b7f60 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=1
|   | `-ParagraphComment 0x563ea82b7ff0 <col:22, col:67>
|   |   `-TextComment 0x563ea82b7fc0 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x563ea82b8040 <line:2701:3>
|   | `-TextComment 0x563ea82b8010 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b8060 <col:4, line:2702:3> Name="return"
|   | `-ParagraphComment 0x563ea82b80e0 <line:2701:11, line:2702:3>
|   |   |-TextComment 0x563ea82b8090 <line:2701:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x563ea82b80b0 <line:2702:3> Text=" "
|   |-VerbatimLineComment 0x563ea82b8100 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x563ea82b8170 <line:2703:1>
|     `-TextComment 0x563ea82b8140 <col:1> Text=" "
|-FunctionDecl 0x563ea810e918 <line:2720:1, col:42> col:5 k_stack_cleanup 'int (struct k_stack *)'
| |-ParmVarDecl 0x563ea810e810 <col:21, col:37> col:37 stack 'struct k_stack *'
| `-FullComment 0x563ea82b86a0 <line:2709:3, line:2719:1>
|   |-ParagraphComment 0x563ea82b8280 <line:2709:3>
|   | `-TextComment 0x563ea82b8250 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b82a0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x563ea82b8300 <col:10, col:44>
|   |   `-TextComment 0x563ea82b82d0 <col:10, col:44> Text=" Release a stack's allocated buffer"
|   |-ParagraphComment 0x563ea82b83a0 <line:2711:3, line:2713:46>
|   | |-TextComment 0x563ea82b8320 <line:2711:3, col:65> Text=" If a stack object was given a dynamically allocated buffer via"
|   | |-TextComment 0x563ea82b8340 <line:2712:3, col:70> Text=" k_stack_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x563ea82b8360 <line:2713:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x563ea82b83f0 <line:2715:3>
|   | `-TextComment 0x563ea82b83c0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b8410 <col:4, line:2718:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b85b0 <line:2715:16, line:2718:3>
|   |   |-TextComment 0x563ea82b8470 <line:2715:16, col:37> Text=" Address of the stack."
|   |   |-TextComment 0x563ea82b8490 <line:2716:3> Text=" "
|   |   |-InlineCommandComment 0x563ea82b84b0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x563ea82b84d0 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x563ea82b84f0 <line:2717:3> Text=" "
|   |   |-InlineCommandComment 0x563ea82b8510 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x563ea82b8530 <col:11, col:46> Text=" -EAGAIN when object is still in use"
|   |   `-TextComment 0x563ea82b8550 <line:2718:3> Text=" "
|   |-VerbatimLineComment 0x563ea82b85d0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x563ea82b8640 <line:2719:1>
|     `-TextComment 0x563ea82b8610 <col:1> Text=" "
|-FunctionDecl 0x563ea810eb98 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2736:68> col:15 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x563ea810ea10 <col:28, col:44> col:44 stack 'struct k_stack *'
| |-ParmVarDecl 0x563ea810ea80 <col:51, col:64> col:64 data 'stack_data_t':'unsigned long'
| `-FullComment 0x563ea82b8dd0 <line:2723:3, line:2735:1>
|   |-ParagraphComment 0x563ea82b8740 <line:2723:3>
|   | `-TextComment 0x563ea82b8710 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b8760 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea82b87c0 <col:10, col:39>
|   |   `-TextComment 0x563ea82b8790 <col:10, col:39> Text=" Push an element onto a stack."
|   |-ParagraphComment 0x563ea82b88e0 <line:2725:3, col:55>
|   | |-TextComment 0x563ea82b87e0 <col:3, col:42> Text=" This routine adds a stack_data_t value "
|   | |-InlineCommandComment 0x563ea82b8830 <col:43, col:44> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x563ea82b8850 <col:50, col:53> Text=" to "
|   | `-InlineCommandComment 0x563ea82b88a0 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="stack."
|   |-ParagraphComment 0x563ea82b8930 <line:2727:3>
|   | `-TextComment 0x563ea82b8900 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b8950 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82b89b0 <col:9, col:31>
|   |   `-TextComment 0x563ea82b8980 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82b8a00 <line:2729:3>
|   | `-TextComment 0x563ea82b89d0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b8a20 <col:4, line:2730:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b8ad0 <line:2729:16, line:2730:3>
|   |   |-TextComment 0x563ea82b8a80 <line:2729:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x563ea82b8aa0 <line:2730:3> Text=" "
|   |-ParamCommandComment 0x563ea82b8af0 <col:4, col:44> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x563ea82b8b80 <col:15, col:44>
|   |   `-TextComment 0x563ea82b8b50 <col:15, col:44> Text=" Value to push onto the stack."
|   |-ParagraphComment 0x563ea82b8cc0 <line:2732:3, line:2734:3>
|   | |-TextComment 0x563ea82b8ba0 <line:2732:3> Text=" "
|   | |-InlineCommandComment 0x563ea82b8bc0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82b8be0 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x563ea82b8c00 <line:2733:3> Text=" "
|   | |-InlineCommandComment 0x563ea82b8c20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82b8c40 <col:11, col:35> Text=" -ENOMEM if stack is full"
|   | `-TextComment 0x563ea82b8c60 <line:2734:3> Text=" "
|   |-VerbatimLineComment 0x563ea82b8ce0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x563ea82b8d50 <line:2735:1>
|     `-TextComment 0x563ea82b8d20 <col:1> Text=" "
|-FunctionDecl 0x563ea810f8a8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2758:19> line:2757:15 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x563ea810f688 <col:27, col:43> col:43 stack 'struct k_stack *'
| |-ParmVarDecl 0x563ea810f6f8 <col:50, col:64> col:64 data 'stack_data_t *'
| |-ParmVarDecl 0x563ea810f768 <line:2758:6, col:12> col:12 timeout 's32_t':'int'
| `-FullComment 0x563ea82b9750 <line:2739:3, line:2756:1>
|   |-ParagraphComment 0x563ea82b8e70 <line:2739:3>
|   | `-TextComment 0x563ea82b8e40 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b8e90 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x563ea82b8ef0 <col:10, col:38>
|   |   `-TextComment 0x563ea82b8ec0 <col:10, col:38> Text=" Pop an element from a stack."
|   |-ParagraphComment 0x563ea82b9050 <line:2741:3, line:2742:47>
|   | |-TextComment 0x563ea82b8f10 <line:2741:3, col:50> Text=" This routine removes a stack_data_t value from "
|   | |-InlineCommandComment 0x563ea82b8f70 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="stack"
|   | |-TextComment 0x563ea82b8f90 <col:59, col:73> Text=" in a "last in,"
|   | |-TextComment 0x563ea82b8fb0 <line:2742:3, col:45> Text=" first out" manner and stores the value in "
|   | `-InlineCommandComment 0x563ea82b9000 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="data."
|   |-ParagraphComment 0x563ea82b90a0 <line:2744:3>
|   | `-TextComment 0x563ea82b9070 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b90c0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x563ea82b91a0 <col:9, col:72>
|   |   |-TextComment 0x563ea82b90f0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x563ea82b9140 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x563ea82b9160 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x563ea82b91f0 <line:2746:3>
|   | `-TextComment 0x563ea82b91c0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b9210 <col:4, line:2747:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b92c0 <line:2746:16, line:2747:3>
|   |   |-TextComment 0x563ea82b9270 <line:2746:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x563ea82b9290 <line:2747:3> Text=" "
|   |-ParamCommandComment 0x563ea82b92e0 <col:4, line:2748:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x563ea82b9390 <line:2747:15, line:2748:3>
|   |   |-TextComment 0x563ea82b9340 <line:2747:15, col:71> Text=" Address of area to hold the value popped from the stack."
|   |   `-TextComment 0x563ea82b9360 <line:2748:3> Text=" "
|   |-ParamCommandComment 0x563ea82b93b0 <col:4, line:2750:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x563ea82b9490 <line:2748:18, line:2750:28>
|   |   |-TextComment 0x563ea82b9410 <line:2748:18, col:67> Text=" Non-negative waiting period to obtain a value (in"
|   |   |-TextComment 0x563ea82b9430 <line:2749:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x563ea82b9450 <line:2750:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x563ea82b9640 <line:2752:3, line:2755:3>
|   | |-TextComment 0x563ea82b94b0 <line:2752:3> Text=" "
|   | |-InlineCommandComment 0x563ea82b94d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82b94f0 <col:11, col:39> Text=" 0 Element popped from stack."
|   | |-TextComment 0x563ea82b9510 <line:2753:3> Text=" "
|   | |-InlineCommandComment 0x563ea82b9530 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82b9550 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x563ea82b9570 <line:2754:3> Text=" "
|   | |-InlineCommandComment 0x563ea82b9590 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82b95b0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x563ea82b95d0 <line:2755:3> Text=" "
|   |-VerbatimLineComment 0x563ea82b9660 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x563ea82b96d0 <line:2756:1>
|     `-TextComment 0x563ea82b96a0 <col:1> Text=" "
|-RecordDecl 0x563ea810f9b8 <line:2780:1, col:8> col:8 struct k_work
| `-FullComment 0x563ea82b9870 <line:2778:4, col:7>
|   `-ParagraphComment 0x563ea82b9840 <col:4, col:7>
|     |-TextComment 0x563ea82b97c0 <col:4> Text=" "
|     |-TextComment 0x563ea82b97e0 <col:5> Text="@"
|     `-TextComment 0x563ea82b9800 <col:6, col:7> Text="} "
|-RecordDecl 0x563ea810fa60 <line:2781:1, col:8> col:8 struct k_work_poll
|-TypedefDecl 0x563ea810fde0 <line:2784:1, col:68> col:15 referenced _poller_cb_t 'int (*)(struct k_poll_event *, u32_t)'
| `-PointerType 0x563ea810fd70 'int (*)(struct k_poll_event *, u32_t)'
|   `-ParenType 0x563ea810fd10 'int (struct k_poll_event *, u32_t)' sugar
|     `-FunctionProtoType 0x563ea810fcd0 'int (struct k_poll_event *, u32_t)' cdecl
|       |-BuiltinType 0x563ea805b790 'int'
|       |-PointerType 0x563ea810fb70 'struct k_poll_event *'
|       | `-ElaboratedType 0x563ea810fb10 'struct k_poll_event' sugar
|       |   `-RecordType 0x563ea81f36c0 'struct k_poll_event'
|       |     `-Record 0x563ea823e0f8 'k_poll_event'
|       `-TypedefType 0x563ea80f0da0 'u32_t' sugar
|         |-Typedef 0x563ea80dfe40 'u32_t'
|         `-BuiltinType 0x563ea805b830 'unsigned int'
|-RecordDecl 0x563ea810fe38 <line:2785:1, line:2789:1> line:2785:8 struct _poller definition
| |-FieldDecl 0x563ea810fef0 <line:2786:2, col:16> col:16 is_polling 'volatile bool'
| |-FieldDecl 0x563ea810ff60 <line:2787:2, col:19> col:19 thread 'struct k_thread *'
| `-FieldDecl 0x563ea810ffe0 <line:2788:2, col:15> col:15 cb '_poller_cb_t':'int (*)(struct k_poll_event *, u32_t)'
|-TypedefDecl 0x563ea81102e0 <line:2808:1, col:53> col:16 referenced k_work_handler_t 'void (*)(struct k_work *)'
| |-PointerType 0x563ea8110280 'void (*)(struct k_work *)'
| | `-ParenType 0x563ea8110220 'void (struct k_work *)' sugar
| |   `-FunctionProtoType 0x563ea81101e0 'void (struct k_work *)' cdecl
| |     |-BuiltinType 0x563ea805b6f0 'void'
| |     `-PointerType 0x563ea81100f0 'struct k_work *'
| |       `-ElaboratedType 0x563ea8110090 'struct k_work' sugar
| |         `-RecordType 0x563ea810fa40 'struct k_work'
| |           `-Record 0x563ea81109c0 'k_work'
| `-FullComment 0x563ea82b9d90 <line:2797:3, line:2807:1>
|   |-ParagraphComment 0x563ea82b9910 <line:2797:3>
|   | `-TextComment 0x563ea82b98e0 <col:3> Text=" "
|   |-VerbatimLineComment 0x563ea82b9930 <col:4, col:29> Text=" k_work_handler_t"
|   |-ParagraphComment 0x563ea82b99a0 <line:2798:3>
|   | `-TextComment 0x563ea82b9970 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b99c0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x563ea82b9a20 <col:10, col:42>
|   |   `-TextComment 0x563ea82b99f0 <col:10, col:42> Text=" Work item handler function type."
|   |-ParagraphComment 0x563ea82b9a90 <line:2800:3, line:2801:52>
|   | |-TextComment 0x563ea82b9a40 <line:2800:3, col:69> Text=" A work item's handler function is executed by a workqueue's thread"
|   | `-TextComment 0x563ea82b9a60 <line:2801:3, col:52> Text=" when the work item is processed by the workqueue."
|   |-ParagraphComment 0x563ea82b9ae0 <line:2803:3>
|   | `-TextComment 0x563ea82b9ab0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82b9b00 <col:4, col:40> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x563ea82b9b90 <col:15, col:40>
|   |   `-TextComment 0x563ea82b9b60 <col:15, col:40> Text=" Address of the work item."
|   |-ParagraphComment 0x563ea82b9be0 <line:2805:3>
|   | `-TextComment 0x563ea82b9bb0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b9c00 <col:4, line:2806:3> Name="return"
|   | `-ParagraphComment 0x563ea82b9c80 <line:2805:11, line:2806:3>
|   |   |-TextComment 0x563ea82b9c30 <line:2805:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82b9c50 <line:2806:3> Text=" "
|   |-VerbatimLineComment 0x563ea82b9ca0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x563ea82b9d10 <line:2807:1>
|     `-TextComment 0x563ea82b9ce0 <col:1> Text=" "
|-RecordDecl 0x563ea8110368 <line:2814:1, line:2817:1> line:2814:8 invalid struct k_work_q definition
| |-FullComment 0x563ea82b9eb0 <line:2811:3, col:24>
| | `-ParagraphComment 0x563ea82b9e80 <col:3, col:24>
| |   |-TextComment 0x563ea82b9e00 <col:3> Text=" "
| |   |-InlineCommandComment 0x563ea82b9e20 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x563ea82b9e40 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x563ea8110430 <line:2815:2, col:17> col:17 referenced queue 'struct k_queue':'struct k_queue'
| `-FieldDecl 0x563ea8110498 <line:2816:2, col:18> col:18 invalid thread 'struct k_thread':'struct k_thread'
|-EnumDecl 0x563ea81104e0 <line:2819:1, line:2821:1> line:2819:1
| `-EnumConstantDecl 0x563ea81105a0 <line:2820:2> col:2 referenced K_WORK_STATE_PENDING 'int'
|-RecordDecl 0x563ea81109c0 prev 0x563ea810f9b8 <line:2823:1, line:2827:1> line:2823:8 struct k_work definition
| |-FieldDecl 0x563ea8110a60 <line:2824:2, col:8> col:8 _reserved 'void *'
| |-FieldDecl 0x563ea8110ae0 <line:2825:2, col:19> col:19 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FieldDecl 0x563ea8110be8 <line:2826:2, col:18> col:11 referenced flags 'atomic_t [1]'
|-RecordDecl 0x563ea8110c30 <line:2829:1, line:2833:1> line:2829:8 struct k_delayed_work definition
| |-FieldDecl 0x563ea8110d00 <line:2830:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x563ea8110d68 <line:2831:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x563ea8110e60 <line:2832:2, col:19> col:19 work_q 'struct k_work_q *'
|-RecordDecl 0x563ea8110f00 prev 0x563ea810fa60 <line:2835:1, line:2843:1> line:2835:8 struct k_work_poll definition
| |-FieldDecl 0x563ea8110fa8 <line:2836:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x563ea8111040 <line:2837:2, col:17> col:17 poller 'struct _poller':'struct _poller'
| |-FieldDecl 0x563ea81110b0 <line:2838:2, col:23> col:23 events 'struct k_poll_event *'
| |-FieldDecl 0x563ea8111110 <line:2839:2, col:6> col:6 num_events 'int'
| |-FieldDecl 0x563ea8111168 <line:2840:2, col:19> col:19 real_handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-FieldDecl 0x563ea81111d0 <line:2841:2, col:18> col:18 timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x563ea8111230 <line:2842:2, col:6> col:6 poll_result 'int'
|-VarDecl 0x563ea8111298 <line:2845:1, col:24> col:24 used k_sys_work_q 'struct k_work_q':'struct k_work_q' extern
|-FunctionDecl 0x563ea8111530 <line:2886:1, line:2889:1> line:2886:20 k_work_init 'void (struct k_work *, k_work_handler_t)' static inline
| |-ParmVarDecl 0x563ea81113b0 <col:32, col:47> col:47 used work 'struct k_work *'
| |-ParmVarDecl 0x563ea8111420 <col:53, col:70> col:70 used handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-CompoundStmt 0x563ea8112158 <line:2887:1, line:2889:1>
| | `-BinaryOperator 0x563ea8111980 <line:2888:2, line:2856:2> 'struct k_work':'struct k_work' '='
| |   |-UnaryOperator 0x563ea8111620 <line:2888:2, col:3> 'struct k_work':'struct k_work' lvalue prefix '*'
| |   | `-ImplicitCastExpr 0x563ea8111608 <col:3> 'struct k_work *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x563ea81115e0 <col:3> 'struct k_work *' lvalue ParmVar 0x563ea81113b0 'work' 'struct k_work *'
| |   `-ImplicitCastExpr 0x563ea8111968 <col:10, line:2856:2> 'struct k_work':'struct k_work' <LValueToRValue>
| |     `-CompoundLiteralExpr 0x563ea8111940 <line:2888:10, line:2856:2> 'struct k_work':'struct k_work' lvalue
| |       `-InitListExpr 0x563ea8111888 <line:2852:2, line:2856:2> 'struct k_work':'struct k_work'
| |         |-ParenExpr 0x563ea81116c0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'void *'
| |         | `-CStyleCastExpr 0x563ea8111698 <col:15, col:23> 'void *' <NullToPointer>
| |         |   `-IntegerLiteral 0x563ea8111660 <col:23> 'int' 0
| |         |-ImplicitCastExpr 0x563ea81118e0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2888:44> 'k_work_handler_t':'void (*)(struct k_work *)' <LValueToRValue>
| |         | `-DeclRefExpr 0x563ea8111720 <col:44> 'k_work_handler_t':'void (*)(struct k_work *)' lvalue ParmVar 0x563ea8111420 'handler' 'k_work_handler_t':'void (*)(struct k_work *)'
| |         `-InitListExpr 0x563ea81118f8 <line:2855:11, col:15> 'atomic_t [1]'
| |           `-IntegerLiteral 0x563ea8111788 <col:13> 'int' 0
| `-FullComment 0x563ea82ba3e0 <line:2876:3, line:2885:1>
|   |-ParagraphComment 0x563ea82b9f50 <line:2876:3>
|   | `-TextComment 0x563ea82b9f20 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82b9f70 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x563ea82b9fd0 <col:10, col:33>
|   |   `-TextComment 0x563ea82b9fa0 <col:10, col:33> Text=" Initialize a work item."
|   |-ParagraphComment 0x563ea82ba020 <line:2878:3, col:74>
|   | `-TextComment 0x563ea82b9ff0 <col:3, col:74> Text=" This routine initializes a workqueue work item, prior to its first use."
|   |-ParagraphComment 0x563ea82ba070 <line:2880:3>
|   | `-TextComment 0x563ea82ba040 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82ba090 <col:4, line:2881:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x563ea82ba140 <line:2880:15, line:2881:3>
|   |   |-TextComment 0x563ea82ba0f0 <line:2880:15, col:36> Text=" Address of work item."
|   |   `-TextComment 0x563ea82ba110 <line:2881:3> Text=" "
|   |-ParamCommandComment 0x563ea82ba160 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x563ea82ba1f0 <col:18, col:70>
|   |   `-TextComment 0x563ea82ba1c0 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x563ea82ba240 <line:2883:3>
|   | `-TextComment 0x563ea82ba210 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ba260 <col:4, line:2884:3> Name="return"
|   | `-ParagraphComment 0x563ea82ba2e0 <line:2883:11, line:2884:3>
|   |   |-TextComment 0x563ea82ba290 <line:2883:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82ba2b0 <line:2884:3> Text=" "
|   |-VerbatimLineComment 0x563ea82ba300 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x563ea82ba370 <line:2885:1>
|     `-TextComment 0x563ea82ba340 <col:1> Text=" "
|-FunctionDecl 0x563ea8112330 <line:2913:1, line:2919:1> line:2913:20 used k_work_submit_to_queue 'void (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x563ea8112198 <col:43, col:60> col:60 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x563ea8112220 <line:2914:8, col:23> col:23 used work 'struct k_work *'
| |-CompoundStmt 0x563ea8112778 <line:2915:1, line:2919:1>
| | `-IfStmt 0x563ea8112710 <line:2916:2, line:2918:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-UnaryOperator 0x563ea8112570 <line:2916:6, col:64> 'int' prefix '!'
| |   | `-CallExpr 0x563ea8112520 <col:7, col:64> 'bool'
| |   |   |-ImplicitCastExpr 0x563ea8112508 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x563ea81123e0 <col:7> 'bool (atomic_t *, int)' Function 0x563ea80f1750 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| |   |   |-ImplicitCastExpr 0x563ea8112558 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| |   |   | `-MemberExpr 0x563ea8112448 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x563ea8110be8
| |   |   |   `-ImplicitCastExpr 0x563ea8112430 <col:31> 'struct k_work *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x563ea8112408 <col:31> 'struct k_work *' lvalue ParmVar 0x563ea8112220 'work' 'struct k_work *'
| |   |   `-DeclRefExpr 0x563ea8112480 <col:44> 'int' EnumConstant 0x563ea81105a0 'K_WORK_STATE_PENDING' 'int'
| |   |-CompoundStmt 0x563ea81126f8 <col:67, line:2918:2>
| |   | `-CallExpr 0x563ea8112690 <line:2917:3, col:38> 'void'
| |   |   |-ImplicitCastExpr 0x563ea8112678 <col:3> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x563ea8112590 <col:3> 'void (struct k_queue *, void *)' Function 0x563ea820d420 'k_queue_append' 'void (struct k_queue *, void *)'
| |   |   |-UnaryOperator 0x563ea8112630 <col:18, col:27> 'struct k_queue *' prefix '&'
| |   |   | `-MemberExpr 0x563ea81125f8 <col:19, col:27> 'struct k_queue':'struct k_queue' lvalue ->queue 0x563ea8110430
| |   |   |   `-ImplicitCastExpr 0x563ea81125e0 <col:19> 'struct k_work_q *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x563ea81125b8 <col:19> 'struct k_work_q *' lvalue ParmVar 0x563ea8112198 'work_q' 'struct k_work_q *'
| |   |   `-ImplicitCastExpr 0x563ea81126e0 <col:34> 'void *' <BitCast>
| |   |     `-ImplicitCastExpr 0x563ea81126c8 <col:34> 'struct k_work *' <LValueToRValue>
| |   |       `-DeclRefExpr 0x563ea8112650 <col:34> 'struct k_work *' lvalue ParmVar 0x563ea8112220 'work' 'struct k_work *'
| |   `-<<<NULL>>>
| `-FullComment 0x563ea82bacb0 <line:2892:3, line:2912:1>
|   |-ParagraphComment 0x563ea82ba480 <line:2892:3>
|   | `-TextComment 0x563ea82ba450 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ba4a0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x563ea82ba500 <col:10, col:29>
|   |   `-TextComment 0x563ea82ba4d0 <col:10, col:29> Text=" Submit a work item."
|   |-ParagraphComment 0x563ea82ba710 <line:2894:3, line:2899:15>
|   | |-TextComment 0x563ea82ba520 <line:2894:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x563ea82ba570 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x563ea82ba590 <col:42, col:70> Text=" to be processed by workqueue"
|   | |-TextComment 0x563ea82ba5b0 <line:2895:3> Text=" "
|   | |-InlineCommandComment 0x563ea82ba600 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x563ea82ba620 <col:14, col:74> Text=" If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x563ea82ba640 <line:2896:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x563ea82ba660 <line:2897:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x563ea82ba680 <line:2898:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x563ea82ba6a0 <line:2899:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x563ea82ba760 <line:2901:3>
|   | `-TextComment 0x563ea82ba730 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ba780 <col:4, line:2903:20> Name="warning"
|   | `-ParagraphComment 0x563ea82ba800 <line:2902:3, line:2903:20>
|   |   |-TextComment 0x563ea82ba7b0 <line:2902:3, col:73> Text=" A submitted work item must not be modified until it has been processed"
|   |   `-TextComment 0x563ea82ba7d0 <line:2903:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x563ea82ba850 <line:2905:3>
|   | `-TextComment 0x563ea82ba820 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ba870 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82ba8d0 <col:9, col:31>
|   |   `-TextComment 0x563ea82ba8a0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82ba920 <line:2907:3>
|   | `-TextComment 0x563ea82ba8f0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82ba940 <col:4, line:2908:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x563ea82ba9f0 <line:2907:17, line:2908:3>
|   |   |-TextComment 0x563ea82ba9a0 <line:2907:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x563ea82ba9c0 <line:2908:3> Text=" "
|   |-ParamCommandComment 0x563ea82baa10 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x563ea82baaa0 <col:15, col:36>
|   |   `-TextComment 0x563ea82baa70 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x563ea82baaf0 <line:2910:3>
|   | `-TextComment 0x563ea82baac0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bab10 <col:4, line:2911:3> Name="return"
|   | `-ParagraphComment 0x563ea82bab90 <line:2910:11, line:2911:3>
|   |   |-TextComment 0x563ea82bab40 <line:2910:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82bab60 <line:2911:3> Text=" "
|   |-VerbatimLineComment 0x563ea82babb0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x563ea82bac20 <line:2912:1>
|     `-TextComment 0x563ea82babf0 <col:1> Text=" "
|-FunctionDecl 0x563ea8112958 <line:2942:1, line:2959:1> line:2942:19 k_work_submit_to_user_queue 'int (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x563ea81127b8 <col:47, col:64> col:64 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x563ea8112840 <line:2943:12, col:27> col:27 used work 'struct k_work *'
| |-CompoundStmt 0x563ea8113198 <line:2944:1, line:2959:1>
| | |-DeclStmt 0x563ea8112ac0 <line:2945:2, col:18>
| | | `-VarDecl 0x563ea8112a20 <col:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> /vagrant/ext/zephyros/zephyr/include/kernel.h:2945:6 used ret 'int' cinit
| | |   `-UnaryOperator 0x563ea8112aa0 <col:12, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> 'int' prefix '-'
| | |     `-IntegerLiteral 0x563ea8112a80 <col:15> 'int' 16
| | |-IfStmt 0x563ea81130c0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2947:2, line:2956:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x563ea8112c08 <line:2947:6, col:64> 'int' prefix '!'
| | | | `-CallExpr 0x563ea8112bb8 <col:7, col:64> 'bool'
| | | |   |-ImplicitCastExpr 0x563ea8112ba0 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x563ea8112ad8 <col:7> 'bool (atomic_t *, int)' Function 0x563ea80f1750 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| | | |   |-ImplicitCastExpr 0x563ea8112bf0 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| | | |   | `-MemberExpr 0x563ea8112b40 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x563ea8110be8
| | | |   |   `-ImplicitCastExpr 0x563ea8112b28 <col:31> 'struct k_work *' <LValueToRValue>
| | | |   |     `-DeclRefExpr 0x563ea8112b00 <col:31> 'struct k_work *' lvalue ParmVar 0x563ea8112840 'work' 'struct k_work *'
| | | |   `-DeclRefExpr 0x563ea8112b78 <col:44> 'int' EnumConstant 0x563ea81105a0 'K_WORK_STATE_PENDING' 'int'
| | | |-CompoundStmt 0x563ea81130a0 <col:67, line:2956:2>
| | | | |-BinaryOperator 0x563ea8112e18 <line:2948:3, col:50> 'int' '='
| | | | | |-DeclRefExpr 0x563ea8112c28 <col:3> 'int' lvalue Var 0x563ea8112a20 'ret' 'int'
| | | | | `-CallExpr 0x563ea8112db0 <col:9, col:50> 's32_t':'int'
| | | | |   |-ImplicitCastExpr 0x563ea8112d98 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | |   | `-DeclRefExpr 0x563ea8112c50 <col:9> 's32_t (struct k_queue *, void *)' Function 0x563ea820d6b0 'k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
| | | | |   |-UnaryOperator 0x563ea8112cf0 <col:30, col:39> 'struct k_queue *' prefix '&'
| | | | |   | `-MemberExpr 0x563ea8112cb8 <col:31, col:39> 'struct k_queue':'struct k_queue' lvalue ->queue 0x563ea8110430
| | | | |   |   `-ImplicitCastExpr 0x563ea8112ca0 <col:31> 'struct k_work_q *' <LValueToRValue>
| | | | |   |     `-DeclRefExpr 0x563ea8112c78 <col:31> 'struct k_work_q *' lvalue ParmVar 0x563ea81127b8 'work_q' 'struct k_work_q *'
| | | | |   `-ImplicitCastExpr 0x563ea8112e00 <col:46> 'void *' <BitCast>
| | | | |     `-ImplicitCastExpr 0x563ea8112de8 <col:46> 'struct k_work *' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x563ea8112d10 <col:46> 'struct k_work *' lvalue ParmVar 0x563ea8112840 'work' 'struct k_work *'
| | | | `-IfStmt 0x563ea8113068 <line:2953:3, line:2955:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-BinaryOperator 0x563ea8112ea0 <line:2953:7, col:14> 'int' '!='
| | | |   | |-ImplicitCastExpr 0x563ea8112e88 <col:7> 'int' <LValueToRValue>
| | | |   | | `-DeclRefExpr 0x563ea8112e40 <col:7> 'int' lvalue Var 0x563ea8112a20 'ret' 'int'
| | | |   | `-IntegerLiteral 0x563ea8112e68 <col:14> 'int' 0
| | | |   |-CompoundStmt 0x563ea8113050 <col:17, line:2955:3>
| | | |   | `-CallExpr 0x563ea8113000 <line:2954:4, col:54> 'void'
| | | |   |   |-ImplicitCastExpr 0x563ea8112fe8 <col:4> 'void (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   |   | `-DeclRefExpr 0x563ea8112ec8 <col:4> 'void (atomic_t *, int)' Function 0x563ea80f2250 'atomic_clear_bit' 'void (atomic_t *, int)'
| | | |   |   |-ImplicitCastExpr 0x563ea8113038 <col:21, col:27> 'atomic_t *' <ArrayToPointerDecay>
| | | |   |   | `-MemberExpr 0x563ea8112f30 <col:21, col:27> 'atomic_t [1]' lvalue ->flags 0x563ea8110be8
| | | |   |   |   `-ImplicitCastExpr 0x563ea8112f18 <col:21> 'struct k_work *' <LValueToRValue>
| | | |   |   |     `-DeclRefExpr 0x563ea8112ef0 <col:21> 'struct k_work *' lvalue ParmVar 0x563ea8112840 'work' 'struct k_work *'
| | | |   |   `-DeclRefExpr 0x563ea8112f68 <col:34> 'int' EnumConstant 0x563ea81105a0 'K_WORK_STATE_PENDING' 'int'
| | | |   `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x563ea8113158 <line:2958:2, col:9>
| |   `-ImplicitCastExpr 0x563ea8113140 <col:9> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x563ea81130f8 <col:9> 'int' lvalue Var 0x563ea8112a20 'ret' 'int'
| `-FullComment 0x563ea82bb480 <line:2922:3, line:2941:1>
|   |-ParagraphComment 0x563ea82bad50 <line:2922:3>
|   | `-TextComment 0x563ea82bad20 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bad70 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x563ea82badd0 <col:10, col:53>
|   |   `-TextComment 0x563ea82bada0 <col:10, col:53> Text=" Submit a work item to a user mode workqueue"
|   |-ParagraphComment 0x563ea82baec0 <line:2924:3, line:2928:71>
|   | |-TextComment 0x563ea82badf0 <line:2924:3, col:73> Text=" Submits a work item to a workqueue that runs in user mode. A temporary"
|   | |-TextComment 0x563ea82bae10 <line:2925:3, col:75> Text=" memory allocation is made from the caller's resource pool which is freed"
|   | |-TextComment 0x563ea82bae30 <line:2926:3, col:65> Text=" once the worker thread consumes the k_work item. The workqueue"
|   | |-TextComment 0x563ea82bae50 <line:2927:3, col:80> Text=" thread must have memory access to the k_work item being submitted. The caller"
|   | `-TextComment 0x563ea82bae70 <line:2928:3, col:71> Text=" must have permission granted on the work_q parameter's queue object."
|   |-ParagraphComment 0x563ea82baf10 <line:2930:3, col:61>
|   | `-TextComment 0x563ea82baee0 <col:3, col:61> Text=" Otherwise this works the same as k_work_submit_to_queue()."
|   |-ParagraphComment 0x563ea82baf70 <line:2932:3>
|   | `-TextComment 0x563ea82baf30 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82baf90 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82baff0 <col:9, col:31>
|   |   `-TextComment 0x563ea82bafc0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82bb040 <line:2934:3>
|   | `-TextComment 0x563ea82bb010 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82bb060 <col:4, line:2935:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x563ea82bb110 <line:2934:17, line:2935:3>
|   |   |-TextComment 0x563ea82bb0c0 <line:2934:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x563ea82bb0e0 <line:2935:3> Text=" "
|   |-ParamCommandComment 0x563ea82bb130 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x563ea82bb1c0 <col:15, col:36>
|   |   `-TextComment 0x563ea82bb190 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x563ea82bb370 <line:2937:3, line:2940:3>
|   | |-TextComment 0x563ea82bb1e0 <line:2937:3> Text=" "
|   | |-InlineCommandComment 0x563ea82bb200 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82bb220 <col:11, col:64> Text=" -EBUSY if the work item was already in some workqueue"
|   | |-TextComment 0x563ea82bb240 <line:2938:3> Text=" "
|   | |-InlineCommandComment 0x563ea82bb260 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82bb280 <col:11, col:67> Text=" -ENOMEM if no memory for thread resource pool allocation"
|   | |-TextComment 0x563ea82bb2a0 <line:2939:3> Text=" "
|   | |-InlineCommandComment 0x563ea82bb2c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82bb2e0 <col:11, col:20> Text=" 0 Success"
|   | `-TextComment 0x563ea82bb300 <line:2940:3> Text=" "
|   |-VerbatimLineComment 0x563ea82bb390 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x563ea82bb400 <line:2941:1>
|     `-TextComment 0x563ea82bb3d0 <col:1> Text=" "
|-FunctionDecl 0x563ea81132f0 <line:2974:1, line:2977:1> line:2974:20 k_work_pending 'bool (struct k_work *)' static inline
| |-ParmVarDecl 0x563ea81131e8 <col:35, col:50> col:50 used work 'struct k_work *'
| |-CompoundStmt 0x563ea8113578 <line:2975:1, line:2977:1>
| | `-ReturnStmt 0x563ea8113538 <line:2976:2, col:58>
| |   `-CallExpr 0x563ea81134d0 <col:9, col:58> 'bool'
| |     |-ImplicitCastExpr 0x563ea81134b8 <col:9> 'bool (*)(const atomic_t *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea8113398 <col:9> 'bool (const atomic_t *, int)' Function 0x563ea80eeab0 'atomic_test_bit' 'bool (const atomic_t *, int)'
| |     |-ImplicitCastExpr 0x563ea8113520 <col:25, col:31> 'const atomic_t *' <BitCast>
| |     | `-ImplicitCastExpr 0x563ea8113508 <col:25, col:31> 'atomic_t *' <ArrayToPointerDecay>
| |     |   `-MemberExpr 0x563ea8113400 <col:25, col:31> 'atomic_t [1]' lvalue ->flags 0x563ea8110be8
| |     |     `-ImplicitCastExpr 0x563ea81133e8 <col:25> 'struct k_work *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x563ea81133c0 <col:25> 'struct k_work *' lvalue ParmVar 0x563ea81131e8 'work' 'struct k_work *'
| |     `-DeclRefExpr 0x563ea8113438 <col:38> 'int' EnumConstant 0x563ea81105a0 'K_WORK_STATE_PENDING' 'int'
| `-FullComment 0x563ea82bba60 <line:2962:3, line:2973:1>
|   |-ParagraphComment 0x563ea82bb520 <line:2962:3>
|   | `-TextComment 0x563ea82bb4f0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bb540 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x563ea82bb5a0 <col:10, col:42>
|   |   `-TextComment 0x563ea82bb570 <col:10, col:42> Text=" Check if a work item is pending."
|   |-ParagraphComment 0x563ea82bb690 <line:2964:3, line:2965:9>
|   | |-TextComment 0x563ea82bb5c0 <line:2964:3, col:39> Text=" This routine indicates if work item "
|   | |-InlineCommandComment 0x563ea82bb610 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x563ea82bb630 <col:47, col:74> Text=" is pending in a workqueue's"
|   | `-TextComment 0x563ea82bb650 <line:2965:3, col:9> Text=" queue."
|   |-ParagraphComment 0x563ea82bb6e0 <line:2967:3>
|   | `-TextComment 0x563ea82bb6b0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bb700 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82bb760 <col:9, col:31>
|   |   `-TextComment 0x563ea82bb730 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82bb7b0 <line:2969:3>
|   | `-TextComment 0x563ea82bb780 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82bb7d0 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x563ea82bb860 <col:15, col:36>
|   |   `-TextComment 0x563ea82bb830 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x563ea82bb8b0 <line:2971:3>
|   | `-TextComment 0x563ea82bb880 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bb8d0 <col:4, line:2972:3> Name="return"
|   | `-ParagraphComment 0x563ea82bb950 <line:2971:11, line:2972:3>
|   |   |-TextComment 0x563ea82bb900 <line:2971:11, col:71> Text=" true if work item is pending, or false if it is not pending."
|   |   `-TextComment 0x563ea82bb920 <line:2972:3> Text=" "
|   |-VerbatimLineComment 0x563ea82bb970 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x563ea82bb9e0 <line:2973:1>
|     `-TextComment 0x563ea82bb9b0 <col:1> Text=" "
|-FunctionDecl 0x563ea8113850 <line:2996:1, line:2998:34> line:2996:13 k_work_q_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x563ea81135b8 <col:28, col:45> col:45 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x563ea8113628 <line:2997:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x563ea8113698 <line:2998:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea8113710 <col:26, col:30> col:30 prio 'int'
| `-FullComment 0x563ea82bc260 <line:2980:3, line:2995:1>
|   |-ParagraphComment 0x563ea82bbb00 <line:2980:3>
|   | `-TextComment 0x563ea82bbad0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bbb20 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x563ea82bbb80 <col:10, col:28>
|   |   `-TextComment 0x563ea82bbb50 <col:10, col:28> Text=" Start a workqueue."
|   |-ParagraphComment 0x563ea82bbc70 <line:2982:3, line:2983:41>
|   | |-TextComment 0x563ea82bbba0 <line:2982:3, col:33> Text=" This routine starts workqueue "
|   | |-InlineCommandComment 0x563ea82bbbf0 <col:34, col:35> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x563ea82bbc10 <col:44, col:73> Text=" The workqueue spawns its work"
|   | `-TextComment 0x563ea82bbc30 <line:2983:3, col:41> Text=" processing thread, which runs forever."
|   |-ParagraphComment 0x563ea82bbcc0 <line:2985:3>
|   | `-TextComment 0x563ea82bbc90 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82bbce0 <col:4, line:2986:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x563ea82bbd90 <line:2985:17, line:2986:3>
|   |   |-TextComment 0x563ea82bbd40 <line:2985:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x563ea82bbd60 <line:2986:3> Text=" "
|   |-ParamCommandComment 0x563ea82bbdb0 <col:4, line:2988:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x563ea82bbe90 <line:2986:16, line:2988:3>
|   |   |-TextComment 0x563ea82bbe10 <line:2986:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x563ea82bbe30 <line:2987:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x563ea82bbe50 <line:2988:3> Text=" "
|   |-ParamCommandComment 0x563ea82bbeb0 <col:4, line:2991:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x563ea82bbfb0 <line:2988:21, line:2991:3>
|   |   |-TextComment 0x563ea82bbf10 <line:2988:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x563ea82bbf30 <line:2989:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x563ea82bbf50 <line:2990:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x563ea82bbf70 <line:2991:3> Text=" "
|   |-ParamCommandComment 0x563ea82bbfd0 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x563ea82bc060 <col:15, col:51>
|   |   `-TextComment 0x563ea82bc030 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x563ea82bc0b0 <line:2993:3>
|   | `-TextComment 0x563ea82bc080 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bc0d0 <col:4, line:2994:3> Name="return"
|   | `-ParagraphComment 0x563ea82bc150 <line:2993:11, line:2994:3>
|   |   |-TextComment 0x563ea82bc100 <line:2993:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82bc120 <line:2994:3> Text=" "
|   |-VerbatimLineComment 0x563ea82bc170 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x563ea82bc1e0 <line:2995:1>
|     `-TextComment 0x563ea82bc1b0 <col:1> Text=" "
|-FunctionDecl 0x563ea8113b58 <line:3020:1, line:3022:32> line:3020:13 k_work_q_user_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x563ea8113960 <col:33, col:50> col:50 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x563ea81139d0 <line:3021:5, col:23> col:23 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x563ea8113a40 <line:3022:5, col:12> col:12 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea8113ab8 <col:24, col:28> col:28 prio 'int'
| `-FullComment 0x563ea82bca60 <line:3001:3, line:3019:1>
|   |-ParagraphComment 0x563ea82bc300 <line:3001:3>
|   | `-TextComment 0x563ea82bc2d0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bc320 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x563ea82bc380 <col:10, col:40>
|   |   `-TextComment 0x563ea82bc350 <col:10, col:40> Text=" Start a workqueue in user mode"
|   |-ParagraphComment 0x563ea82bc470 <line:3003:3, line:3007:21>
|   | |-TextComment 0x563ea82bc3a0 <line:3003:3, col:77> Text=" This works identically to k_work_q_start() except it is callable from user"
|   | |-TextComment 0x563ea82bc3c0 <line:3004:3, col:61> Text=" mode, and the worker thread created will run in user mode."
|   | |-TextComment 0x563ea82bc3e0 <line:3005:3, col:74> Text=" The caller must have permissions granted on both the work_q parameter's"
|   | |-TextComment 0x563ea82bc400 <line:3006:3, col:75> Text=" thread and queue objects, and the same restrictions on priority apply as"
|   | `-TextComment 0x563ea82bc420 <line:3007:3, col:21> Text=" k_thread_create()."
|   |-ParagraphComment 0x563ea82bc4c0 <line:3009:3>
|   | `-TextComment 0x563ea82bc490 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82bc4e0 <col:4, line:3010:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x563ea82bc590 <line:3009:17, line:3010:3>
|   |   |-TextComment 0x563ea82bc540 <line:3009:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x563ea82bc560 <line:3010:3> Text=" "
|   |-ParamCommandComment 0x563ea82bc5b0 <col:4, line:3012:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x563ea82bc690 <line:3010:16, line:3012:3>
|   |   |-TextComment 0x563ea82bc610 <line:3010:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x563ea82bc630 <line:3011:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x563ea82bc650 <line:3012:3> Text=" "
|   |-ParamCommandComment 0x563ea82bc6b0 <col:4, line:3015:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x563ea82bc7b0 <line:3012:21, line:3015:3>
|   |   |-TextComment 0x563ea82bc710 <line:3012:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x563ea82bc730 <line:3013:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x563ea82bc750 <line:3014:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x563ea82bc770 <line:3015:3> Text=" "
|   |-ParamCommandComment 0x563ea82bc7d0 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x563ea82bc860 <col:15, col:51>
|   |   `-TextComment 0x563ea82bc830 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x563ea82bc8b0 <line:3017:3>
|   | `-TextComment 0x563ea82bc880 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bc8d0 <col:4, line:3018:3> Name="return"
|   | `-ParagraphComment 0x563ea82bc950 <line:3017:11, line:3018:3>
|   |   |-TextComment 0x563ea82bc900 <line:3017:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82bc920 <line:3018:3> Text=" "
|   |-VerbatimLineComment 0x563ea82bc970 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x563ea82bc9e0 <line:3019:1>
|     `-TextComment 0x563ea82bc9b0 <col:1> Text=" "
|-FunctionDecl 0x563ea8113e80 <line:3036:1, line:3037:29> line:3036:13 k_delayed_work_init 'void (struct k_delayed_work *, k_work_handler_t)' extern
| |-ParmVarDecl 0x563ea8113d00 <col:33, col:56> col:56 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x563ea8113d70 <line:3037:5, col:22> col:22 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x563ea82bcfc0 <line:3025:3, line:3035:1>
|   |-ParagraphComment 0x563ea82bcb00 <line:3025:3>
|   | `-TextComment 0x563ea82bcad0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bcb20 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x563ea82bcb80 <col:10, col:41>
|   |   `-TextComment 0x563ea82bcb50 <col:10, col:41> Text=" Initialize a delayed work item."
|   |-ParagraphComment 0x563ea82bcbf0 <line:3027:3, line:3028:17>
|   | |-TextComment 0x563ea82bcba0 <line:3027:3, col:67> Text=" This routine initializes a workqueue delayed work item, prior to"
|   | `-TextComment 0x563ea82bcbc0 <line:3028:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x563ea82bcc40 <line:3030:3>
|   | `-TextComment 0x563ea82bcc10 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82bcc60 <col:4, line:3031:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x563ea82bcd10 <line:3030:15, line:3031:3>
|   |   |-TextComment 0x563ea82bccc0 <line:3030:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x563ea82bcce0 <line:3031:3> Text=" "
|   |-ParamCommandComment 0x563ea82bcd30 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x563ea82bcdc0 <col:18, col:70>
|   |   `-TextComment 0x563ea82bcd90 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x563ea82bce10 <line:3033:3>
|   | `-TextComment 0x563ea82bcde0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bce30 <col:4, line:3034:3> Name="return"
|   | `-ParagraphComment 0x563ea82bceb0 <line:3033:11, line:3034:3>
|   |   |-TextComment 0x563ea82bce60 <line:3033:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82bce80 <line:3034:3> Text=" "
|   |-VerbatimLineComment 0x563ea82bced0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x563ea82bcf40 <line:3035:1>
|     `-TextComment 0x563ea82bcf10 <col:1> Text=" "
|-FunctionDecl 0x563ea8225c98 <line:3071:1, line:3073:19> line:3071:12 used k_delayed_work_submit_to_queue 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' extern
| |-ParmVarDecl 0x563ea8113f80 <col:43, col:60> col:60 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x563ea8114008 <line:3072:8, col:31> col:31 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x563ea8114078 <line:3073:8, col:14> col:14 delay 's32_t':'int'
| `-FullComment 0x563ea82bdbc0 <line:3040:3, line:3070:1>
|   |-ParagraphComment 0x563ea82bd060 <line:3040:3>
|   | `-TextComment 0x563ea82bd030 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bd080 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x563ea82bd0e0 <col:10, col:37>
|   |   `-TextComment 0x563ea82bd0b0 <col:10, col:37> Text=" Submit a delayed work item."
|   |-ParagraphComment 0x563ea82bd350 <line:3042:3, line:3046:37>
|   | |-TextComment 0x563ea82bd100 <line:3042:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x563ea82bd150 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x563ea82bd170 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x563ea82bd190 <line:3043:3> Text=" "
|   | |-InlineCommandComment 0x563ea82bd1e0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x563ea82bd200 <col:13, col:30> Text=" after a delay of "
|   | |-InlineCommandComment 0x563ea82bd250 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x563ea82bd270 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x563ea82bd290 <line:3044:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x563ea82bd2b0 <line:3045:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x563ea82bd2d0 <line:3046:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x563ea82bd460 <line:3048:3, line:3053:28>
|   | |-TextComment 0x563ea82bd370 <line:3048:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x563ea82bd390 <line:3049:3, col:65> Text=" counting down cancels the existing submission and restarts the"
|   | |-TextComment 0x563ea82bd3b0 <line:3050:3, col:61> Text=" countdown using the new delay.  Note that this behavior is"
|   | |-TextComment 0x563ea82bd3d0 <line:3051:3, col:62> Text=" inherently subject to race conditions with the pre-existing"
|   | |-TextComment 0x563ea82bd3f0 <line:3052:3, col:69> Text=" timeouts and work queue, so care must be taken to synchronize such"
|   | `-TextComment 0x563ea82bd410 <line:3053:3, col:28> Text=" resubmissions externally."
|   |-ParagraphComment 0x563ea82bd4b0 <line:3055:3>
|   | `-TextComment 0x563ea82bd480 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bd4d0 <col:4, line:3057:20> Name="warning"
|   | `-ParagraphComment 0x563ea82bd550 <line:3056:3, line:3057:20>
|   |   |-TextComment 0x563ea82bd500 <line:3056:3, col:71> Text=" A delayed work item must not be modified until it has been processed"
|   |   `-TextComment 0x563ea82bd520 <line:3057:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x563ea82bd5a0 <line:3059:3>
|   | `-TextComment 0x563ea82bd570 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bd5c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82bd620 <col:9, col:31>
|   |   `-TextComment 0x563ea82bd5f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82bd670 <line:3061:3>
|   | `-TextComment 0x563ea82bd640 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82bd690 <col:4, line:3062:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x563ea82bd740 <line:3061:17, line:3062:3>
|   |   |-TextComment 0x563ea82bd6f0 <line:3061:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x563ea82bd710 <line:3062:3> Text=" "
|   |-ParamCommandComment 0x563ea82bd760 <col:4, line:3063:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x563ea82bd810 <line:3062:15, line:3063:3>
|   |   |-TextComment 0x563ea82bd7c0 <line:3062:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x563ea82bd7e0 <line:3063:3> Text=" "
|   |-ParamCommandComment 0x563ea82bd830 <col:4, line:3064:18> [in] implicitly Param="delay" ParamIndex=2
|   | `-ParagraphComment 0x563ea82bd8e0 <line:3063:16, line:3064:18>
|   |   |-TextComment 0x563ea82bd890 <line:3063:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x563ea82bd8b0 <line:3064:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x563ea82bda90 <line:3066:3, line:3069:3>
|   | |-TextComment 0x563ea82bd900 <line:3066:3> Text=" "
|   | |-InlineCommandComment 0x563ea82bd920 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82bd940 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x563ea82bd960 <line:3067:3> Text=" "
|   | |-InlineCommandComment 0x563ea82bd980 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82bd9a0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x563ea82bd9c0 <line:3068:3> Text=" "
|   | |-InlineCommandComment 0x563ea82bd9e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82bda00 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x563ea82bda20 <line:3069:3> Text=" "
|   |-VerbatimLineComment 0x563ea82bdab0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x563ea82bdb20 <line:3070:1>
|     `-TextComment 0x563ea82bdaf0 <col:1> Text=" "
|-FunctionDecl 0x563ea8225ea8 <line:3094:1, col:61> col:12 k_delayed_work_cancel 'int (struct k_delayed_work *)' extern
| |-ParmVarDecl 0x563ea8225da0 <col:34, col:57> col:57 work 'struct k_delayed_work *'
| `-FullComment 0x563ea82be310 <line:3076:3, line:3093:1>
|   |-ParagraphComment 0x563ea82bdc60 <line:3076:3>
|   | `-TextComment 0x563ea82bdc30 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bdc80 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x563ea82bdce0 <col:10, col:37>
|   |   `-TextComment 0x563ea82bdcb0 <col:10, col:37> Text=" Cancel a delayed work item."
|   |-ParagraphComment 0x563ea82bddd0 <line:3078:3, line:3080:12>
|   | |-TextComment 0x563ea82bdd00 <line:3078:3, col:60> Text=" This routine cancels the submission of delayed work item "
|   | |-InlineCommandComment 0x563ea82bdd50 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x563ea82bdd70 <line:3079:3, col:72> Text=" A delayed work item can only be canceled while its countdown is still"
|   | `-TextComment 0x563ea82bdd90 <line:3080:3, col:12> Text=" underway."
|   |-ParagraphComment 0x563ea82bde20 <line:3082:3>
|   | `-TextComment 0x563ea82bddf0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bde40 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82bdea0 <col:9, col:31>
|   |   `-TextComment 0x563ea82bde70 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82bdef0 <line:3084:3>
|   | `-TextComment 0x563ea82bdec0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bdf10 <col:4, line:3086:55> Name="note"
|   | `-ParagraphComment 0x563ea82bdfc0 <line:3084:9, line:3086:55>
|   |   |-TextComment 0x563ea82bdf40 <line:3084:9, col:69> Text=" The result of calling this on a k_delayed_work item that has"
|   |   |-TextComment 0x563ea82bdf60 <line:3085:3, col:52> Text=" not been submitted (i.e. before the return of the"
|   |   `-TextComment 0x563ea82bdf80 <line:3086:3, col:55> Text=" k_delayed_work_submit_to_queue() call) is undefined."
|   |-ParagraphComment 0x563ea82be010 <line:3088:3>
|   | `-TextComment 0x563ea82bdfe0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82be030 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x563ea82be0c0 <col:15, col:44>
|   |   `-TextComment 0x563ea82be090 <col:15, col:44> Text=" Address of delayed work item."
|   |-ParagraphComment 0x563ea82be200 <line:3090:3, line:3092:3>
|   | |-TextComment 0x563ea82be0e0 <line:3090:3> Text=" "
|   | |-InlineCommandComment 0x563ea82be100 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82be120 <col:11, col:42> Text=" 0 Work item countdown canceled."
|   | |-TextComment 0x563ea82be140 <line:3091:3> Text=" "
|   | |-InlineCommandComment 0x563ea82be160 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82be180 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | `-TextComment 0x563ea82be1a0 <line:3092:3> Text=" "
|   |-VerbatimLineComment 0x563ea82be220 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x563ea82be290 <line:3093:1>
|     `-TextComment 0x563ea82be260 <col:1> Text=" "
|-FunctionDecl 0x563ea8226028 <line:3118:1, line:3121:1> line:3118:20 k_work_submit 'void (struct k_work *)' static inline
| |-ParmVarDecl 0x563ea8225fa0 <col:34, col:49> col:49 used work 'struct k_work *'
| |-CompoundStmt 0x563ea8226258 <line:3119:1, line:3121:1>
| | `-CallExpr 0x563ea82261e0 <line:3120:2, col:44> 'void'
| |   |-ImplicitCastExpr 0x563ea82261c8 <col:2> 'void (*)(struct k_work_q *, struct k_work *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x563ea82260d0 <col:2> 'void (struct k_work_q *, struct k_work *)' Function 0x563ea8112330 'k_work_submit_to_queue' 'void (struct k_work_q *, struct k_work *)'
| |   |-UnaryOperator 0x563ea8226120 <col:25, col:26> 'struct k_work_q *' prefix '&'
| |   | `-DeclRefExpr 0x563ea82260f8 <col:26> 'struct k_work_q':'struct k_work_q' lvalue Var 0x563ea8111298 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |   `-ImplicitCastExpr 0x563ea8226218 <col:40> 'struct k_work *' <LValueToRValue>
| |     `-DeclRefExpr 0x563ea8226140 <col:40> 'struct k_work *' lvalue ParmVar 0x563ea8225fa0 'work' 'struct k_work *'
| `-FullComment 0x563ea82beac0 <line:3097:3, line:3117:1>
|   |-ParagraphComment 0x563ea82be3b0 <line:3097:3>
|   | `-TextComment 0x563ea82be380 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82be3d0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x563ea82be430 <col:10, col:53>
|   |   `-TextComment 0x563ea82be400 <col:10, col:53> Text=" Submit a work item to the system workqueue."
|   |-ParagraphComment 0x563ea82be5c0 <line:3099:3, line:3104:15>
|   | |-TextComment 0x563ea82be450 <line:3099:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x563ea82be4a0 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x563ea82be4c0 <col:42, col:71> Text=" to be processed by the system"
|   | |-TextComment 0x563ea82be4e0 <line:3100:3, col:74> Text=" workqueue. If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x563ea82be500 <line:3101:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x563ea82be520 <line:3102:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x563ea82be540 <line:3103:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x563ea82be560 <line:3104:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x563ea82be610 <line:3106:3>
|   | `-TextComment 0x563ea82be5e0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82be630 <col:4, line:3109:50> Name="warning"
|   | `-ParagraphComment 0x563ea82be6e0 <line:3107:3, line:3109:50>
|   |   |-TextComment 0x563ea82be660 <line:3107:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x563ea82be680 <line:3108:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x563ea82be6a0 <line:3109:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x563ea82be730 <line:3111:3>
|   | `-TextComment 0x563ea82be700 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82be750 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82be7b0 <col:9, col:31>
|   |   `-TextComment 0x563ea82be780 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82be800 <line:3113:3>
|   | `-TextComment 0x563ea82be7d0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82be820 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x563ea82be8b0 <col:15, col:36>
|   |   `-TextComment 0x563ea82be880 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x563ea82be900 <line:3115:3>
|   | `-TextComment 0x563ea82be8d0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82be920 <col:4, line:3116:3> Name="return"
|   | `-ParagraphComment 0x563ea82be9a0 <line:3115:11, line:3116:3>
|   |   |-TextComment 0x563ea82be950 <line:3115:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82be970 <line:3116:3> Text=" "
|   |-VerbatimLineComment 0x563ea82be9c0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x563ea82bea30 <line:3117:1>
|     `-TextComment 0x563ea82bea00 <col:1> Text=" "
|-FunctionDecl 0x563ea8226428 <line:3156:1, line:3160:1> line:3156:19 k_delayed_work_submit 'int (struct k_delayed_work *, s32_t)' static inline
| |-ParmVarDecl 0x563ea8226298 <col:41, col:64> col:64 used work 'struct k_delayed_work *'
| |-ParmVarDecl 0x563ea8226308 <line:3157:6, col:12> col:12 used delay 's32_t':'int'
| |-CompoundStmt 0x563ea82266c8 <line:3158:1, line:3160:1>
| | `-ReturnStmt 0x563ea8226680 <line:3159:2, col:66>
| |   `-CallExpr 0x563ea8226610 <col:9, col:66> 'int'
| |     |-ImplicitCastExpr 0x563ea82265f8 <col:9> 'int (*)(struct k_work_q *, struct k_delayed_work *, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea82264d8 <col:9> 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' Function 0x563ea8225c98 'k_delayed_work_submit_to_queue' 'int (struct k_work_q *, struct k_delayed_work *, s32_t)'
| |     |-UnaryOperator 0x563ea8226528 <col:40, col:41> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x563ea8226500 <col:41> 'struct k_work_q':'struct k_work_q' lvalue Var 0x563ea8111298 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x563ea8226650 <col:55> 'struct k_delayed_work *' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea8226548 <col:55> 'struct k_delayed_work *' lvalue ParmVar 0x563ea8226298 'work' 'struct k_delayed_work *'
| |     `-ImplicitCastExpr 0x563ea8226668 <col:61> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x563ea8226570 <col:61> 's32_t':'int' lvalue ParmVar 0x563ea8226308 'delay' 's32_t':'int'
| `-FullComment 0x563ea82bf5e0 <line:3124:3, line:3155:1>
|   |-ParagraphComment 0x563ea82beb60 <line:3124:3>
|   | `-TextComment 0x563ea82beb30 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82beb80 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x563ea82bebe0 <col:10, col:61>
|   |   `-TextComment 0x563ea82bebb0 <col:10, col:61> Text=" Submit a delayed work item to the system workqueue."
|   |-ParagraphComment 0x563ea82bedd0 <line:3126:3, line:3130:37>
|   | |-TextComment 0x563ea82bec00 <line:3126:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x563ea82bec50 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x563ea82bec70 <col:44, col:73> Text=" to be processed by the system"
|   | |-TextComment 0x563ea82bec90 <line:3127:3, col:30> Text=" workqueue after a delay of "
|   | |-InlineCommandComment 0x563ea82bece0 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x563ea82bed00 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x563ea82bed20 <line:3128:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x563ea82bed40 <line:3129:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x563ea82bed60 <line:3130:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x563ea82bef10 <line:3132:3, line:3138:72>
|   | |-TextComment 0x563ea82bedf0 <line:3132:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x563ea82bee10 <line:3133:3, col:75> Text=" counting down cancels the existing submission and restarts the countdown"
|   | |-TextComment 0x563ea82bee30 <line:3134:3, col:68> Text=" using the new delay. If the work item is currently pending on the"
|   | |-TextComment 0x563ea82bee50 <line:3135:3, col:74> Text=" workqueue's queue because the countdown has completed it is too late to"
|   | |-TextComment 0x563ea82bee70 <line:3136:3, col:77> Text=" resubmit the item, and resubmission fails without impacting the work item."
|   | |-TextComment 0x563ea82bee90 <line:3137:3, col:80> Text=" If the work item has already been processed, or is currently being processed,"
|   | `-TextComment 0x563ea82beeb0 <line:3138:3, col:72> Text=" its work is considered complete and the work item can be resubmitted."
|   |-ParagraphComment 0x563ea82bef80 <line:3140:3>
|   | `-TextComment 0x563ea82bef30 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82befa0 <col:4, line:3143:50> Name="warning"
|   | `-ParagraphComment 0x563ea82bf050 <line:3141:3, line:3143:50>
|   |   |-TextComment 0x563ea82befd0 <line:3141:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x563ea82beff0 <line:3142:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x563ea82bf010 <line:3143:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x563ea82bf0a0 <line:3145:3>
|   | `-TextComment 0x563ea82bf070 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bf0c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82bf120 <col:9, col:31>
|   |   `-TextComment 0x563ea82bf0f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82bf170 <line:3147:3>
|   | `-TextComment 0x563ea82bf140 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82bf190 <col:4, line:3148:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x563ea82bf240 <line:3147:15, line:3148:3>
|   |   |-TextComment 0x563ea82bf1f0 <line:3147:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x563ea82bf210 <line:3148:3> Text=" "
|   |-ParamCommandComment 0x563ea82bf260 <col:4, line:3149:18> [in] implicitly Param="delay" ParamIndex=1
|   | `-ParagraphComment 0x563ea82bf310 <line:3148:16, line:3149:18>
|   |   |-TextComment 0x563ea82bf2c0 <line:3148:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x563ea82bf2e0 <line:3149:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x563ea82bf4c0 <line:3151:3, line:3154:3>
|   | |-TextComment 0x563ea82bf330 <line:3151:3> Text=" "
|   | |-InlineCommandComment 0x563ea82bf350 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82bf370 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x563ea82bf390 <line:3152:3> Text=" "
|   | |-InlineCommandComment 0x563ea82bf3b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82bf3d0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x563ea82bf3f0 <line:3153:3> Text=" "
|   | |-InlineCommandComment 0x563ea82bf410 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82bf430 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x563ea82bf450 <line:3154:3> Text=" "
|   |-VerbatimLineComment 0x563ea82bf4e0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x563ea82bf550 <line:3155:1>
|     `-TextComment 0x563ea82bf520 <col:1> Text=" "
|-FunctionDecl 0x563ea82267d0 <line:3174:1, line:3177:1> line:3174:21 k_delayed_work_remaining_get 's32_t (struct k_delayed_work *)' static inline
| |-ParmVarDecl 0x563ea8226708 <col:50, col:73> col:73 used work 'struct k_delayed_work *'
| |-CompoundStmt 0x563ea8226a68 <line:3175:1, line:3177:1>
| | `-ReturnStmt 0x563ea8226a20 <line:3176:2, col:66>
| |   `-ImplicitCastExpr 0x563ea8226a08 <col:9, col:66> 's32_t':'int' <IntegralCast>
| |     `-CallExpr 0x563ea82269c0 <col:9, col:66> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x563ea82269a8 <col:9> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x563ea8226878 <col:9> 'u64_t (u64_t)' Function 0x563ea81d9270 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
| |       `-ImplicitCastExpr 0x563ea82269f0 <col:31, col:65> 'u64_t':'unsigned long long' <IntegralCast>
| |         `-CallExpr 0x563ea8226978 <col:31, col:65> 's32_t':'int'
| |           |-ImplicitCastExpr 0x563ea8226960 <col:31> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x563ea82268a0 <col:31> 's32_t (struct _timeout *)' Function 0x563ea82093d0 'z_timeout_remaining' 's32_t (struct _timeout *)'
| |           `-UnaryOperator 0x563ea8226940 <col:51, col:58> 'struct _timeout *' prefix '&'
| |             `-MemberExpr 0x563ea8226908 <col:52, col:58> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x563ea8110d68
| |               `-ImplicitCastExpr 0x563ea82268f0 <col:52> 'struct k_delayed_work *' <LValueToRValue>
| |                 `-DeclRefExpr 0x563ea82268c8 <col:52> 'struct k_delayed_work *' lvalue ParmVar 0x563ea8226708 'work' 'struct k_delayed_work *'
| `-FullComment 0x563ea82bfa90 <line:3163:3, line:3173:1>
|   |-ParagraphComment 0x563ea82bf680 <line:3163:3>
|   | `-TextComment 0x563ea82bf650 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bf6a0 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x563ea82bf700 <col:10, col:66>
|   |   `-TextComment 0x563ea82bf6d0 <col:10, col:66> Text=" Get time remaining before a delayed work gets scheduled."
|   |-ParagraphComment 0x563ea82bf7a0 <line:3165:3, line:3167:30>
|   | |-TextComment 0x563ea82bf720 <line:3165:3, col:66> Text=" This routine computes the (approximate) time remaining before a"
|   | |-TextComment 0x563ea82bf740 <line:3166:3, col:71> Text=" delayed work gets executed. If the delayed work is not waiting to be"
|   | `-TextComment 0x563ea82bf760 <line:3167:3, col:30> Text=" scheduled, it returns zero."
|   |-ParagraphComment 0x563ea82bf7f0 <line:3169:3>
|   | `-TextComment 0x563ea82bf7c0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82bf810 <col:4, col:37> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x563ea82bf8a0 <col:15, col:37>
|   |   `-TextComment 0x563ea82bf870 <col:15, col:37> Text="     Delayed work item."
|   |-ParagraphComment 0x563ea82bf8f0 <line:3171:3>
|   | `-TextComment 0x563ea82bf8c0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bf910 <col:4, line:3172:3> Name="return"
|   | `-ParagraphComment 0x563ea82bf990 <line:3171:11, line:3172:3>
|   |   |-TextComment 0x563ea82bf940 <line:3171:11, col:44> Text=" Remaining time (in milliseconds)."
|   |   `-TextComment 0x563ea82bf960 <line:3172:3> Text=" "
|   |-VerbatimLineComment 0x563ea82bf9b0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x563ea82bfa20 <line:3173:1>
|     `-TextComment 0x563ea82bf9f0 <col:1> Text=" "
|-FunctionDecl 0x563ea8226cd0 <line:3190:1, line:3191:33> line:3190:13 k_work_poll_init 'void (struct k_work_poll *, k_work_handler_t)' extern
| |-ParmVarDecl 0x563ea8226b30 <col:30, col:50> col:50 work 'struct k_work_poll *'
| |-ParmVarDecl 0x563ea8226ba0 <line:3191:9, col:26> col:26 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x563ea82bff20 <line:3180:3, line:3188:14>
|   |-ParagraphComment 0x563ea82bfb30 <line:3180:3>
|   | `-TextComment 0x563ea82bfb00 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bfb50 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea82bfbb0 <col:10, col:43>
|   |   `-TextComment 0x563ea82bfb80 <col:10, col:43> Text=" Initialize a triggered work item."
|   |-ParagraphComment 0x563ea82bfc20 <line:3182:3, line:3183:17>
|   | |-TextComment 0x563ea82bfbd0 <line:3182:3, col:69> Text=" This routine initializes a workqueue triggered work item, prior to"
|   | `-TextComment 0x563ea82bfbf0 <line:3183:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x563ea82bfc70 <line:3185:3>
|   | `-TextComment 0x563ea82bfc40 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82bfc90 <col:4, line:3186:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x563ea82bfd40 <line:3185:15, line:3186:3>
|   |   |-TextComment 0x563ea82bfcf0 <line:3185:15, col:46> Text=" Address of triggered work item."
|   |   `-TextComment 0x563ea82bfd10 <line:3186:3> Text=" "
|   |-ParamCommandComment 0x563ea82bfd60 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x563ea82bfdf0 <col:18, col:70>
|   |   `-TextComment 0x563ea82bfdc0 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x563ea82bfe40 <line:3188:3>
|   | `-TextComment 0x563ea82bfe10 <col:3> Text=" "
|   `-BlockCommandComment 0x563ea82bfe60 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x563ea82bfec0 <col:11, col:14>
|       `-TextComment 0x563ea82bfe90 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x563ea8227138 <line:3227:1, line:3231:25> line:3227:12 used k_work_poll_submit_to_queue 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x563ea8226dd0 <col:40, col:57> col:57 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x563ea8226e58 <line:3228:12, col:32> col:32 work 'struct k_work_poll *'
| |-ParmVarDecl 0x563ea8226ee0 <line:3229:12, col:33> col:33 events 'struct k_poll_event *'
| |-ParmVarDecl 0x563ea8226f58 <line:3230:12, col:16> col:16 num_events 'int'
| |-ParmVarDecl 0x563ea8226fc8 <line:3231:12, col:18> col:18 timeout 's32_t':'int'
| `-FullComment 0x563ea82c0c20 <line:3194:3, line:3225:69>
|   |-ParagraphComment 0x563ea82bffc0 <line:3194:3>
|   | `-TextComment 0x563ea82bff90 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82bffe0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea82c0040 <col:10, col:39>
|   |   `-TextComment 0x563ea82c0010 <col:10, col:39> Text=" Submit a triggered work item."
|   |-ParagraphComment 0x563ea82c02b0 <line:3196:3, line:3200:50>
|   | |-TextComment 0x563ea82c0060 <line:3196:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x563ea82c00b0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x563ea82c00d0 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x563ea82c00f0 <line:3197:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c0140 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x563ea82c0160 <col:13, col:35> Text=" when one of the given "
|   | |-InlineCommandComment 0x563ea82c01b0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x563ea82c01d0 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x563ea82c01f0 <line:3198:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x563ea82c0210 <line:3199:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x563ea82c0230 <line:3200:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x563ea82c03a0 <line:3202:3, line:3206:70>
|   | |-TextComment 0x563ea82c02d0 <line:3202:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x563ea82c02f0 <line:3203:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x563ea82c0310 <line:3204:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x563ea82c0330 <line:3205:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x563ea82c0350 <line:3206:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x563ea82c03f0 <line:3208:3>
|   | `-TextComment 0x563ea82c03c0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c0410 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82c0470 <col:9, col:31>
|   |   `-TextComment 0x563ea82c0440 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82c04c0 <line:3210:3>
|   | `-TextComment 0x563ea82c0490 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c04e0 <col:4, line:3213:57> Name="warning"
|   | `-ParagraphComment 0x563ea82c0590 <line:3211:3, line:3213:57>
|   |   |-TextComment 0x563ea82c0510 <line:3211:3, col:75> Text=" Provided array of events as well as a triggered work item must be placed"
|   |   |-TextComment 0x563ea82c0530 <line:3212:3, col:67> Text=" in persistent memory (valid until work handler execution or work"
|   |   `-TextComment 0x563ea82c0550 <line:3213:3, col:57> Text=" cancellation) and cannot be modified after submission."
|   |-ParagraphComment 0x563ea82c05e0 <line:3215:3>
|   | `-TextComment 0x563ea82c05b0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c0600 <col:4, line:3216:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c06b0 <line:3215:17, line:3216:3>
|   |   |-TextComment 0x563ea82c0660 <line:3215:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x563ea82c0680 <line:3216:3> Text=" "
|   |-ParamCommandComment 0x563ea82c06d0 <col:4, line:3217:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x563ea82c0780 <line:3216:15, line:3217:3>
|   |   |-TextComment 0x563ea82c0730 <line:3216:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x563ea82c0750 <line:3217:3> Text=" "
|   |-ParamCommandComment 0x563ea82c07a0 <col:4, line:3218:3> [in] implicitly Param="events" ParamIndex=2
|   | `-ParagraphComment 0x563ea82c0850 <line:3217:17, line:3218:3>
|   |   |-TextComment 0x563ea82c0800 <line:3217:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x563ea82c0820 <line:3218:3> Text=" "
|   |-ParamCommandComment 0x563ea82c0870 <col:4, line:3219:3> [in] implicitly Param="num_events" ParamIndex=3
|   | `-ParagraphComment 0x563ea82c0920 <line:3218:21, line:3219:3>
|   |   |-TextComment 0x563ea82c08d0 <line:3218:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x563ea82c08f0 <line:3219:3> Text=" "
|   |-ParamCommandComment 0x563ea82c0940 <col:4, line:3220:42> [in] implicitly Param="timeout" ParamIndex=4
|   | `-ParagraphComment 0x563ea82c09f0 <line:3219:18, line:3220:42>
|   |   |-TextComment 0x563ea82c09a0 <line:3219:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x563ea82c09c0 <line:3220:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x563ea82c0b80 <line:3223:3, line:3225:69>
|     |-TextComment 0x563ea82c0a10 <line:3223:3> Text=" "
|     |-InlineCommandComment 0x563ea82c0a30 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x563ea82c0a50 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x563ea82c0a70 <line:3224:3> Text=" "
|     |-InlineCommandComment 0x563ea82c0a90 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x563ea82c0ab0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x563ea82c0ad0 <line:3225:3> Text=" "
|     |-InlineCommandComment 0x563ea82c0af0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x563ea82c0b10 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x563ea8227508 <line:3264:1, line:3271:1> line:3264:19 k_work_poll_submit 'int (struct k_work_poll *, struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x563ea8227250 <col:38, col:58> col:58 used work 'struct k_work_poll *'
| |-ParmVarDecl 0x563ea82272d8 <line:3265:10, col:31> col:31 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x563ea8227350 <line:3266:10, col:14> col:14 used num_events 'int'
| |-ParmVarDecl 0x563ea82273c0 <line:3267:10, col:16> col:16 used timeout 's32_t':'int'
| |-CompoundStmt 0x563ea8227848 <line:3268:1, line:3271:1>
| | `-ReturnStmt 0x563ea8227800 <line:3269:2, line:3270:34>
| |   `-CallExpr 0x563ea8227750 <line:3269:9, line:3270:34> 'int'
| |     |-ImplicitCastExpr 0x563ea8227738 <line:3269:9> 'int (*)(struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ea82275c8 <col:9> 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' Function 0x563ea8227138 'k_work_poll_submit_to_queue' 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)'
| |     |-UnaryOperator 0x563ea8227618 <col:37, col:38> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x563ea82275f0 <col:38> 'struct k_work_q':'struct k_work_q' lvalue Var 0x563ea8111298 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x563ea82277a0 <col:52> 'struct k_work_poll *' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea8227638 <col:52> 'struct k_work_poll *' lvalue ParmVar 0x563ea8227250 'work' 'struct k_work_poll *'
| |     |-ImplicitCastExpr 0x563ea82277b8 <line:3270:7> 'struct k_poll_event *' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea8227660 <col:7> 'struct k_poll_event *' lvalue ParmVar 0x563ea82272d8 'events' 'struct k_poll_event *'
| |     |-ImplicitCastExpr 0x563ea82277d0 <col:15> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x563ea8227688 <col:15> 'int' lvalue ParmVar 0x563ea8227350 'num_events' 'int'
| |     `-ImplicitCastExpr 0x563ea82277e8 <col:27> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x563ea82276b0 <col:27> 's32_t':'int' lvalue ParmVar 0x563ea82273c0 'timeout' 's32_t':'int'
| `-FullComment 0x563ea82c17b0 <line:3234:3, line:3262:69>
|   |-ParagraphComment 0x563ea82c0cc0 <line:3234:3>
|   | `-TextComment 0x563ea82c0c90 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c0ce0 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x563ea82c0d40 <col:10, col:63>
|   |   `-TextComment 0x563ea82c0d10 <col:10, col:63> Text=" Submit a triggered work item to the system workqueue."
|   |-ParagraphComment 0x563ea82c0f30 <line:3236:3, line:3240:50>
|   | |-TextComment 0x563ea82c0d60 <line:3236:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x563ea82c0db0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x563ea82c0dd0 <col:44, col:69> Text=" to be processed by system"
|   | |-TextComment 0x563ea82c0df0 <line:3237:3, col:35> Text=" workqueue when one of the given "
|   | |-InlineCommandComment 0x563ea82c0e40 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x563ea82c0e60 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x563ea82c0e80 <line:3238:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x563ea82c0ea0 <line:3239:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x563ea82c0ec0 <line:3240:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x563ea82c1040 <line:3242:3, line:3246:70>
|   | |-TextComment 0x563ea82c0f50 <line:3242:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x563ea82c0f90 <line:3243:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x563ea82c0fb0 <line:3244:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x563ea82c0fd0 <line:3245:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x563ea82c0ff0 <line:3246:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x563ea82c1090 <line:3248:3>
|   | `-TextComment 0x563ea82c1060 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c10b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82c1110 <col:9, col:31>
|   |   `-TextComment 0x563ea82c10e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82c1160 <line:3250:3>
|   | `-TextComment 0x563ea82c1130 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c1180 <col:4, line:3252:63> Name="warning"
|   | `-ParagraphComment 0x563ea82c1200 <line:3251:3, line:3252:63>
|   |   |-TextComment 0x563ea82c11b0 <line:3251:3, col:72> Text=" Provided array of events as well as a triggered work item must not be"
|   |   `-TextComment 0x563ea82c11d0 <line:3252:3, col:63> Text=" modified until the item has been processed by the workqueue."
|   |-ParagraphComment 0x563ea82c1250 <line:3254:3>
|   | `-TextComment 0x563ea82c1220 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c1270 <col:4, line:3255:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c1320 <line:3254:15, line:3255:3>
|   |   |-TextComment 0x563ea82c12d0 <line:3254:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x563ea82c12f0 <line:3255:3> Text=" "
|   |-ParamCommandComment 0x563ea82c1340 <col:4, line:3256:3> [in] implicitly Param="events" ParamIndex=1
|   | `-ParagraphComment 0x563ea82c13f0 <line:3255:17, line:3256:3>
|   |   |-TextComment 0x563ea82c13a0 <line:3255:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x563ea82c13c0 <line:3256:3> Text=" "
|   |-ParamCommandComment 0x563ea82c1410 <col:4, line:3257:3> [in] implicitly Param="num_events" ParamIndex=2
|   | `-ParagraphComment 0x563ea82c14c0 <line:3256:21, line:3257:3>
|   |   |-TextComment 0x563ea82c1470 <line:3256:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x563ea82c1490 <line:3257:3> Text=" "
|   |-ParamCommandComment 0x563ea82c14e0 <col:4, line:3258:42> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x563ea82c1590 <line:3257:18, line:3258:42>
|   |   |-TextComment 0x563ea82c1540 <line:3257:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x563ea82c1560 <line:3258:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x563ea82c1720 <line:3260:3, line:3262:69>
|     |-TextComment 0x563ea82c15b0 <line:3260:3> Text=" "
|     |-InlineCommandComment 0x563ea82c15d0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x563ea82c15f0 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x563ea82c1610 <line:3261:3> Text=" "
|     |-InlineCommandComment 0x563ea82c1630 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x563ea82c1650 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x563ea82c1670 <line:3262:3> Text=" "
|     |-InlineCommandComment 0x563ea82c1690 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x563ea82c16b0 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x563ea8227998 <line:3287:1, col:55> col:12 k_work_poll_cancel 'int (struct k_work_poll *)' extern
| |-ParmVarDecl 0x563ea8227888 <col:31, col:51> col:51 work 'struct k_work_poll *'
| `-FullComment 0x563ea82c1d00 <line:3274:3, line:3285:74>
|   |-ParagraphComment 0x563ea82c1850 <line:3274:3>
|   | `-TextComment 0x563ea82c1820 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c1870 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea82c18d0 <col:10, col:39>
|   |   `-TextComment 0x563ea82c18a0 <col:10, col:39> Text=" Cancel a triggered work item."
|   |-ParagraphComment 0x563ea82c19c0 <line:3276:3, line:3278:14>
|   | |-TextComment 0x563ea82c18f0 <line:3276:3, col:62> Text=" This routine cancels the submission of triggered work item "
|   | |-InlineCommandComment 0x563ea82c1940 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x563ea82c1960 <line:3277:3, col:72> Text=" A triggered work item can only be canceled if no event triggered work"
|   | `-TextComment 0x563ea82c1980 <line:3278:3, col:14> Text=" submission."
|   |-ParagraphComment 0x563ea82c1a10 <line:3280:3>
|   | `-TextComment 0x563ea82c19e0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c1a30 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82c1a90 <col:9, col:31>
|   |   `-TextComment 0x563ea82c1a60 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82c1ae0 <line:3282:3>
|   | `-TextComment 0x563ea82c1ab0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c1b00 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c1b90 <col:15, col:44>
|   |   `-TextComment 0x563ea82c1b60 <col:15, col:44> Text=" Address of delayed work item."
|   `-ParagraphComment 0x563ea82c1ca0 <line:3284:3, line:3285:74>
|     |-TextComment 0x563ea82c1bb0 <line:3284:3> Text=" "
|     |-InlineCommandComment 0x563ea82c1bd0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x563ea82c1bf0 <col:11, col:32> Text=" 0 Work item canceled."
|     |-TextComment 0x563ea82c1c10 <line:3285:3> Text=" "
|     |-InlineCommandComment 0x563ea82c1c30 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x563ea82c1c50 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|-RecordDecl 0x563ea8227a98 prev 0x563ea81f2df8 <line:3300:1, line:3314:1> line:3300:8 struct k_mutex definition
| |-FullComment 0x563ea82c1e90 <line:3297:3, line:3299:1>
| | |-ParagraphComment 0x563ea82c1dc0 <line:3297:3, line:3298:3>
| | | |-TextComment 0x563ea82c1d70 <line:3297:3, col:18> Text=" Mutex Structure"
| | | `-TextComment 0x563ea82c1d90 <line:3298:3> Text=" "
| | |-VerbatimLineComment 0x563ea82c1de0 <col:4, col:23> Text=" mutex_apis"
| | `-ParagraphComment 0x563ea82c1e50 <line:3299:1>
| |   `-TextComment 0x563ea82c1e20 <col:1> Text=" "
| |-FieldDecl 0x563ea8227b58 <line:3302:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x563ea82c1f60 <line:3301:5, col:22>
| |   `-ParagraphComment 0x563ea82c1f30 <col:5, col:22>
| |     `-TextComment 0x563ea82c1f00 <col:5, col:22> Text=" Mutex wait queue "
| |-FieldDecl 0x563ea8227c30 <line:3304:2, col:19> col:19 owner 'struct k_thread *'
| | `-FullComment 0x563ea82c2030 <line:3303:5, col:17>
| |   `-ParagraphComment 0x563ea82c2000 <col:5, col:17>
| |     `-TextComment 0x563ea82c1fd0 <col:5, col:17> Text=" Mutex owner "
| |-FieldDecl 0x563ea8227cb8 <line:3307:2, col:8> col:8 lock_count 'u32_t':'unsigned int'
| | `-FullComment 0x563ea82c2100 <line:3306:5, col:24>
| |   `-ParagraphComment 0x563ea82c20d0 <col:5, col:24>
| |     `-TextComment 0x563ea82c20a0 <col:5, col:24> Text=" Current lock count "
| `-FieldDecl 0x563ea8227d40 <line:3310:2, col:6> col:6 owner_orig_prio 'int'
|   `-FullComment 0x563ea82c21d0 <line:3309:5, col:30>
|     `-ParagraphComment 0x563ea82c21a0 <col:5, col:30>
|       `-TextComment 0x563ea82c2170 <col:5, col:30> Text=" Original thread priority "
|-FunctionDecl 0x563ea8228008 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3361:49> col:15 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x563ea8227f00 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| `-FullComment 0x563ea82c2680 <line:3349:3, line:3360:1>
|   |-ParagraphComment 0x563ea82c2270 <line:3349:3>
|   | `-TextComment 0x563ea82c2240 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c2290 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x563ea82c22f0 <col:10, col:29>
|   |   `-TextComment 0x563ea82c22c0 <col:10, col:29> Text=" Initialize a mutex."
|   |-ParagraphComment 0x563ea82c2340 <line:3351:3, col:67>
|   | `-TextComment 0x563ea82c2310 <col:3, col:67> Text=" This routine initializes a mutex object, prior to its first use."
|   |-ParagraphComment 0x563ea82c2390 <line:3353:3, col:70>
|   | `-TextComment 0x563ea82c2360 <col:3, col:70> Text=" Upon completion, the mutex is available and does not have an owner."
|   |-ParagraphComment 0x563ea82c23e0 <line:3355:3>
|   | `-TextComment 0x563ea82c23b0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c2400 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c2490 <col:16, col:37>
|   |   `-TextComment 0x563ea82c2460 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x563ea82c2530 <line:3357:3, col:33>
|   | |-TextComment 0x563ea82c24b0 <col:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c24d0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x563ea82c24f0 <col:11, col:33> Text=" 0 Mutex object created"
|   |-ParagraphComment 0x563ea82c2580 <line:3359:3>
|   | `-TextComment 0x563ea82c2550 <col:3> Text=" "
|   |-VerbatimLineComment 0x563ea82c25a0 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x563ea82c2610 <line:3360:1>
|     `-TextComment 0x563ea82c25e0 <col:1> Text=" "
|-FunctionDecl 0x563ea8228288 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3384:64> col:15 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x563ea8228100 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| |-ParmVarDecl 0x563ea8228170 <col:51, col:57> col:57 timeout 's32_t':'int'
| `-FullComment 0x563ea82c2e00 <line:3365:3, line:3383:1>
|   |-ParagraphComment 0x563ea82c2720 <line:3365:3>
|   | `-TextComment 0x563ea82c26f0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c2740 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x563ea82c27a0 <col:10, col:23>
|   |   `-TextComment 0x563ea82c2770 <col:10, col:23> Text=" Lock a mutex."
|   |-ParagraphComment 0x563ea82c28c0 <line:3367:3, line:3369:20>
|   | |-TextComment 0x563ea82c27c0 <line:3367:3, col:22> Text=" This routine locks "
|   | |-InlineCommandComment 0x563ea82c2810 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x563ea82c2830 <col:32, col:73> Text=" If the mutex is locked by another thread,"
|   | |-TextComment 0x563ea82c2850 <line:3368:3, col:70> Text=" the calling thread waits until the mutex becomes available or until"
|   | `-TextComment 0x563ea82c2870 <line:3369:3, col:20> Text=" a timeout occurs."
|   |-ParagraphComment 0x563ea82c2930 <line:3371:3, line:3372:62>
|   | |-TextComment 0x563ea82c28e0 <line:3371:3, col:77> Text=" A thread is permitted to lock a mutex it has already locked. The operation"
|   | `-TextComment 0x563ea82c2900 <line:3372:3, col:62> Text=" completes immediately and the lock count is increased by 1."
|   |-ParagraphComment 0x563ea82c2980 <line:3374:3>
|   | `-TextComment 0x563ea82c2950 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c29a0 <col:4, line:3375:3> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c2a50 <line:3374:16, line:3375:3>
|   |   |-TextComment 0x563ea82c2a00 <line:3374:16, col:37> Text=" Address of the mutex."
|   |   `-TextComment 0x563ea82c2a20 <line:3375:3> Text=" "
|   |-ParamCommandComment 0x563ea82c2a70 <col:4, line:3377:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x563ea82c2b50 <line:3375:18, line:3377:28>
|   |   |-TextComment 0x563ea82c2ad0 <line:3375:18, col:67> Text=" Non-negative waiting period to lock the mutex (in"
|   |   |-TextComment 0x563ea82c2af0 <line:3376:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x563ea82c2b10 <line:3377:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x563ea82c2d00 <line:3379:3, line:3382:3>
|   | |-TextComment 0x563ea82c2b70 <line:3379:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c2b90 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c2bb0 <col:11, col:26> Text=" 0 Mutex locked."
|   | |-TextComment 0x563ea82c2bd0 <line:3380:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c2bf0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c2c10 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x563ea82c2c30 <line:3381:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c2c50 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c2c70 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x563ea82c2c90 <line:3382:3> Text=" "
|   |-VerbatimLineComment 0x563ea82c2d20 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x563ea82c2d90 <line:3383:1>
|     `-TextComment 0x563ea82c2d60 <col:1> Text=" "
|-FunctionDecl 0x563ea8228420 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3404:51> col:15 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x563ea8228390 <col:30, col:46> col:46 mutex 'struct k_mutex *'
| `-FullComment 0x563ea82c34a0 <line:3387:3, line:3403:1>
|   |-ParagraphComment 0x563ea82c2ea0 <line:3387:3>
|   | `-TextComment 0x563ea82c2e70 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c2ec0 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x563ea82c2f20 <col:10, col:25>
|   |   `-TextComment 0x563ea82c2ef0 <col:10, col:25> Text=" Unlock a mutex."
|   |-ParagraphComment 0x563ea82c3020 <line:3389:3, line:3390:18>
|   | |-TextComment 0x563ea82c2f40 <line:3389:3, col:24> Text=" This routine unlocks "
|   | |-InlineCommandComment 0x563ea82c2fa0 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x563ea82c2fc0 <col:34, col:73> Text=" The mutex must already be locked by the"
|   | `-TextComment 0x563ea82c2fe0 <line:3390:3, col:18> Text=" calling thread."
|   |-ParagraphComment 0x563ea82c30c0 <line:3392:3, line:3394:10>
|   | |-TextComment 0x563ea82c3040 <line:3392:3, col:78> Text=" The mutex cannot be claimed by another thread until it has been unlocked by"
|   | |-TextComment 0x563ea82c3060 <line:3393:3, col:71> Text=" the calling thread as many times as it was previously locked by that"
|   | `-TextComment 0x563ea82c3080 <line:3394:3, col:10> Text=" thread."
|   |-ParagraphComment 0x563ea82c3110 <line:3396:3>
|   | `-TextComment 0x563ea82c30e0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c3130 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c31c0 <col:16, col:37>
|   |   `-TextComment 0x563ea82c3190 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x563ea82c3350 <line:3398:3, line:3400:42>
|   | |-TextComment 0x563ea82c31e0 <line:3398:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c3200 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c3220 <col:11, col:28> Text=" 0 Mutex unlocked."
|   | |-TextComment 0x563ea82c3240 <line:3399:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c3260 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c3280 <col:11, col:59> Text=" -EPERM The current thread does not own the mutex"
|   | |-TextComment 0x563ea82c32a0 <line:3400:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c32c0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x563ea82c32e0 <col:11, col:42> Text=" -EINVAL The mutex is not locked"
|   |-ParagraphComment 0x563ea82c33a0 <line:3402:3>
|   | `-TextComment 0x563ea82c3370 <col:3> Text=" "
|   |-VerbatimLineComment 0x563ea82c33c0 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x563ea82c3430 <line:3403:1>
|     `-TextComment 0x563ea82c3400 <col:1> Text=" "
|-RecordDecl 0x563ea8228528 prev 0x563ea81f2ea0 <line:3414:1, line:3422:1> line:3414:8 struct k_sem definition
| |-FullComment 0x563ea82c35c0 <line:3411:3, col:24>
| | `-ParagraphComment 0x563ea82c3590 <col:3, col:24>
| |   |-TextComment 0x563ea82c3510 <col:3> Text=" "
| |   |-InlineCommandComment 0x563ea82c3530 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x563ea82c3550 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x563ea82285c0 <line:3415:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x563ea8228618 <line:3416:2, col:8> col:8 referenced count 'u32_t':'unsigned int'
| `-FieldDecl 0x563ea8228670 <line:3417:2, col:8> col:8 limit 'u32_t':'unsigned int'
|-FunctionDecl 0x563ea8228a28 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3460:24> line:3459:15 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x563ea8228800 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x563ea8228878 <col:45, col:58> col:58 initial_count 'unsigned int'
| |-ParmVarDecl 0x563ea82288f0 <line:3460:6, col:19> col:19 limit 'unsigned int'
| `-FullComment 0x563ea82c3c40 <line:3446:3, line:3458:1>
|   |-ParagraphComment 0x563ea82c3660 <line:3446:3>
|   | `-TextComment 0x563ea82c3630 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c3680 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x563ea82c36e0 <col:10, col:33>
|   |   `-TextComment 0x563ea82c36b0 <col:10, col:33> Text=" Initialize a semaphore."
|   |-ParagraphComment 0x563ea82c3730 <line:3448:3, col:71>
|   | `-TextComment 0x563ea82c3700 <col:3, col:71> Text=" This routine initializes a semaphore object, prior to its first use."
|   |-ParagraphComment 0x563ea82c3780 <line:3450:3>
|   | `-TextComment 0x563ea82c3750 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c37a0 <col:4, line:3451:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c3850 <line:3450:14, line:3451:3>
|   |   |-TextComment 0x563ea82c3800 <line:3450:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x563ea82c3820 <line:3451:3> Text=" "
|   |-ParamCommandComment 0x563ea82c3870 <col:4, line:3452:3> [in] implicitly Param="initial_count" ParamIndex=1
|   | `-ParagraphComment 0x563ea82c3920 <line:3451:24, line:3452:3>
|   |   |-TextComment 0x563ea82c38d0 <line:3451:24, col:48> Text=" Initial semaphore count."
|   |   `-TextComment 0x563ea82c38f0 <line:3452:3> Text=" "
|   |-ParamCommandComment 0x563ea82c3940 <col:4, col:50> [in] implicitly Param="limit" ParamIndex=2
|   | `-ParagraphComment 0x563ea82c39d0 <col:16, col:50>
|   |   `-TextComment 0x563ea82c39a0 <col:16, col:50> Text=" Maximum permitted semaphore count."
|   |-ParagraphComment 0x563ea82c3ae0 <line:3454:3, line:3455:33>
|   | |-TextComment 0x563ea82c39f0 <line:3454:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c3a10 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c3a30 <col:11, col:43> Text=" 0 Semaphore created successfully"
|   | |-TextComment 0x563ea82c3a50 <line:3455:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c3a70 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x563ea82c3a90 <col:11, col:33> Text=" -EINVAL Invalid values"
|   |-ParagraphComment 0x563ea82c3b30 <line:3457:3>
|   | `-TextComment 0x563ea82c3b00 <col:3> Text=" "
|   |-VerbatimLineComment 0x563ea82c3b50 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x563ea82c3bc0 <line:3458:1>
|     `-TextComment 0x563ea82c3b90 <col:1> Text=" "
|-FunctionDecl 0x563ea8229d08 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3479:58> col:15 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x563ea8228b30 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x563ea8228ba0 <col:45, col:51> col:51 timeout 's32_t':'int'
| `-FullComment 0x563ea82c4430 <line:3463:3, line:3478:1>
|   |-ParagraphComment 0x563ea82c3ce0 <line:3463:3>
|   | `-TextComment 0x563ea82c3cb0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c3d00 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x563ea82c3d60 <col:10, col:27>
|   |   `-TextComment 0x563ea82c3d30 <col:10, col:27> Text=" Take a semaphore."
|   |-ParagraphComment 0x563ea82c3e00 <line:3465:3, col:24>
|   | |-TextComment 0x563ea82c3d80 <col:3, col:22> Text=" This routine takes "
|   | `-InlineCommandComment 0x563ea82c3dd0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x563ea82c3e50 <line:3467:3>
|   | `-TextComment 0x563ea82c3e20 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c3e70 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x563ea82c3f50 <col:9, col:72>
|   |   |-TextComment 0x563ea82c3ea0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x563ea82c3ef0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x563ea82c3f10 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x563ea82c3fa0 <line:3469:3>
|   | `-TextComment 0x563ea82c3f70 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c3fc0 <col:4, line:3470:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c4070 <line:3469:14, line:3470:3>
|   |   |-TextComment 0x563ea82c4020 <line:3469:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x563ea82c4040 <line:3470:3> Text=" "
|   |-ParamCommandComment 0x563ea82c4090 <col:4, line:3472:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x563ea82c4170 <line:3470:18, line:3472:28>
|   |   |-TextComment 0x563ea82c40f0 <line:3470:18, col:71> Text=" Non-negative waiting period to take the semaphore (in"
|   |   |-TextComment 0x563ea82c4110 <line:3471:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x563ea82c4130 <line:3472:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x563ea82c4320 <line:3474:3, line:3477:3>
|   | |-TextComment 0x563ea82c4190 <line:3474:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c41b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c41d0 <col:11, col:29> Text=" 0 Semaphore taken."
|   | |-TextComment 0x563ea82c41f0 <line:3475:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c4210 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c4230 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x563ea82c4250 <line:3476:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c4270 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c4290 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x563ea82c42b0 <line:3477:3> Text=" "
|   |-VerbatimLineComment 0x563ea82c4340 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x563ea82c43b0 <line:3478:1>
|     `-TextComment 0x563ea82c4380 <col:1> Text=" "
|-FunctionDecl 0x563ea8229f10 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3494:44> col:16 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x563ea8229e10 <col:27, col:41> col:41 sem 'struct k_sem *'
| `-FullComment 0x563ea82c4a10 <line:3482:3, line:3493:1>
|   |-ParagraphComment 0x563ea82c44d0 <line:3482:3>
|   | `-TextComment 0x563ea82c44a0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c44f0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x563ea82c4550 <col:10, col:27>
|   |   `-TextComment 0x563ea82c4520 <col:10, col:27> Text=" Give a semaphore."
|   |-ParagraphComment 0x563ea82c4640 <line:3484:3, line:3485:19>
|   | |-TextComment 0x563ea82c4570 <line:3484:3, col:22> Text=" This routine gives "
|   | |-InlineCommandComment 0x563ea82c45c0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem,"
|   | |-TextComment 0x563ea82c45e0 <col:30, col:76> Text=" unless the semaphore is already at its maximum"
|   | `-TextComment 0x563ea82c4600 <line:3485:3, col:19> Text=" permitted count."
|   |-ParagraphComment 0x563ea82c4690 <line:3487:3>
|   | `-TextComment 0x563ea82c4660 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c46b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82c4710 <col:9, col:31>
|   |   `-TextComment 0x563ea82c46e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82c4760 <line:3489:3>
|   | `-TextComment 0x563ea82c4730 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c4780 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c4810 <col:14, col:39>
|   |   `-TextComment 0x563ea82c47e0 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x563ea82c4860 <line:3491:3>
|   | `-TextComment 0x563ea82c4830 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c4880 <col:4, line:3492:3> Name="return"
|   | `-ParagraphComment 0x563ea82c4900 <line:3491:11, line:3492:3>
|   |   |-TextComment 0x563ea82c48b0 <line:3491:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82c48d0 <line:3492:3> Text=" "
|   |-VerbatimLineComment 0x563ea82c4920 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x563ea82c4990 <line:3493:1>
|     `-TextComment 0x563ea82c4960 <col:1> Text=" "
|-FunctionDecl 0x563ea822a098 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3506:45> col:16 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x563ea822a010 <col:28, col:42> col:42 sem 'struct k_sem *'
| `-FullComment 0x563ea82c4ef0 <line:3497:3, line:3505:1>
|   |-ParagraphComment 0x563ea82c4ab0 <line:3497:3>
|   | `-TextComment 0x563ea82c4a80 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c4ad0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x563ea82c4b30 <col:10, col:44>
|   |   `-TextComment 0x563ea82c4b00 <col:10, col:44> Text=" Reset a semaphore's count to zero."
|   |-ParagraphComment 0x563ea82c4c00 <line:3499:3, col:49>
|   | |-TextComment 0x563ea82c4b50 <col:3, col:34> Text=" This routine sets the count of "
|   | |-InlineCommandComment 0x563ea82c4ba0 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x563ea82c4bc0 <col:41, col:49> Text=" to zero."
|   |-ParagraphComment 0x563ea82c4c50 <line:3501:3>
|   | `-TextComment 0x563ea82c4c20 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c4c70 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c4d00 <col:14, col:39>
|   |   `-TextComment 0x563ea82c4cd0 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x563ea82c4d50 <line:3503:3>
|   | `-TextComment 0x563ea82c4d20 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c4d70 <col:4, line:3504:3> Name="return"
|   | `-ParagraphComment 0x563ea82c4df0 <line:3503:11, line:3504:3>
|   |   |-TextComment 0x563ea82c4da0 <line:3503:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82c4dc0 <line:3504:3> Text=" "
|   |-VerbatimLineComment 0x563ea82c4e10 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x563ea82c4e80 <line:3505:1>
|     `-TextComment 0x563ea82c4e50 <col:1> Text=" "
|-FunctionDecl 0x563ea822a218 <line:3511:1, line:3514:1> line:3511:20 used z_impl_k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x563ea822a190 <col:39, col:53> col:53 used sem 'struct k_sem *'
| |-CompoundStmt 0x563ea822a3a8 <line:3512:1, line:3514:1>
| | `-BinaryOperator 0x563ea822a358 <line:3513:2, col:15> 'u32_t':'unsigned int' '='
| |   |-MemberExpr 0x563ea822a300 <col:2, col:7> 'u32_t':'unsigned int' lvalue ->count 0x563ea8228618
| |   | `-ImplicitCastExpr 0x563ea822a2e8 <col:2> 'struct k_sem *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x563ea822a2c0 <col:2> 'struct k_sem *' lvalue ParmVar 0x563ea822a190 'sem' 'struct k_sem *'
| |   `-IntegerLiteral 0x563ea822a338 <col:15> 'unsigned int' 0
| `-FullComment 0x563ea82c4ff0 <line:3509:3, col:12>
|   `-ParagraphComment 0x563ea82c4fc0 <col:3, col:12>
|     |-TextComment 0x563ea82c4f60 <col:3> Text=" "
|     `-InlineCommandComment 0x563ea82c4f80 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x563ea822a4f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3526:57> col:24 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x563ea822a3e8 <col:40, col:54> col:54 sem 'struct k_sem *'
| `-FullComment 0x563ea82c54a0 <line:3517:3, line:3525:1>
|   |-ParagraphComment 0x563ea82c5090 <line:3517:3>
|   | `-TextComment 0x563ea82c5060 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c50b0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x563ea82c5110 <col:10, col:34>
|   |   `-TextComment 0x563ea82c50e0 <col:10, col:34> Text=" Get a semaphore's count."
|   |-ParagraphComment 0x563ea82c51b0 <line:3519:3, col:47>
|   | |-TextComment 0x563ea82c5130 <col:3, col:45> Text=" This routine returns the current count of "
|   | `-InlineCommandComment 0x563ea82c5180 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x563ea82c5200 <line:3521:3>
|   | `-TextComment 0x563ea82c51d0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c5220 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c52b0 <col:14, col:39>
|   |   `-TextComment 0x563ea82c5280 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x563ea82c5300 <line:3523:3>
|   | `-TextComment 0x563ea82c52d0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c5320 <col:4, line:3524:3> Name="return"
|   | `-ParagraphComment 0x563ea82c53a0 <line:3523:11, line:3524:3>
|   |   |-TextComment 0x563ea82c5350 <line:3523:11, col:35> Text=" Current semaphore count."
|   |   `-TextComment 0x563ea82c5370 <line:3524:3> Text=" "
|   |-VerbatimLineComment 0x563ea82c53c0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x563ea82c5430 <line:3525:1>
|     `-TextComment 0x563ea82c5400 <col:1> Text=" "
|-FunctionDecl 0x563ea822a680 <line:3531:1, line:3534:1> line:3531:28 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x563ea822a5f0 <col:51, col:65> col:65 used sem 'struct k_sem *'
| |-CompoundStmt 0x563ea822a888 <line:3532:1, line:3534:1>
| | `-ReturnStmt 0x563ea822a7b8 <line:3533:2, col:14>
| |   `-ImplicitCastExpr 0x563ea822a7a0 <col:9, col:14> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x563ea822a768 <col:9, col:14> 'u32_t':'unsigned int' lvalue ->count 0x563ea8228618
| |       `-ImplicitCastExpr 0x563ea822a750 <col:9> 'struct k_sem *' <LValueToRValue>
| |         `-DeclRefExpr 0x563ea822a728 <col:9> 'struct k_sem *' lvalue ParmVar 0x563ea822a5f0 'sem' 'struct k_sem *'
| `-FullComment 0x563ea82c5590 <line:3529:3, col:12>
|   `-ParagraphComment 0x563ea82c5560 <col:3, col:12>
|     |-TextComment 0x563ea82c5510 <col:3> Text=" "
|     `-InlineCommandComment 0x563ea82c5530 <col:4, col:12> Name="internal" RenderNormal
|-RecordDecl 0x563ea822a8a0 prev 0x563ea81f2f50 <line:3565:1, line:3590:1> line:3565:8 struct k_msgq definition
| |-FullComment 0x563ea82c56e0 <line:3563:3, col:33>
| | |-ParagraphComment 0x563ea82c5630 <col:3>
| | | `-TextComment 0x563ea82c5600 <col:3> Text=" "
| | `-BlockCommandComment 0x563ea82c5650 <col:4, col:33> Name="brief"
| |   `-ParagraphComment 0x563ea82c56b0 <col:10, col:33>
| |     `-TextComment 0x563ea82c5680 <col:10, col:33> Text=" Message Queue Structure"
| |-FieldDecl 0x563ea822a968 <line:3567:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x563ea82c57b0 <line:3566:5, col:30>
| |   `-ParagraphComment 0x563ea82c5780 <col:5, col:30>
| |     `-TextComment 0x563ea82c5750 <col:5, col:30> Text=" Message queue wait queue "
| |-FieldDecl 0x563ea822a9f8 <line:3569:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x563ea82c5880 <line:3568:5, col:10>
| |   `-ParagraphComment 0x563ea82c5850 <col:5, col:10>
| |     `-TextComment 0x563ea82c5820 <col:5, col:10> Text=" Lock "
| |-FieldDecl 0x563ea822aa78 <line:3571:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x563ea82c5950 <line:3570:5, col:18>
| |   `-ParagraphComment 0x563ea82c5920 <col:5, col:18>
| |     `-TextComment 0x563ea82c58f0 <col:5, col:18> Text=" Message size "
| |-FieldDecl 0x563ea822aaf8 <line:3573:2, col:8> col:8 referenced max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x563ea82c5a20 <line:3572:5, col:32>
| |   `-ParagraphComment 0x563ea82c59f0 <col:5, col:32>
| |     `-TextComment 0x563ea82c59c0 <col:5, col:32> Text=" Maximal number of messages "
| |-FieldDecl 0x563ea822ab80 <line:3575:2, col:8> col:8 buffer_start 'char *'
| | `-FullComment 0x563ea82c5af0 <line:3574:5, col:29>
| |   `-ParagraphComment 0x563ea82c5ac0 <col:5, col:29>
| |     `-TextComment 0x563ea82c5a90 <col:5, col:29> Text=" Start of message buffer "
| |-FieldDecl 0x563ea81d9f90 <line:3577:2, col:8> col:8 buffer_end 'char *'
| | `-FullComment 0x563ea82c5bc0 <line:3576:5, col:27>
| |   `-ParagraphComment 0x563ea82c5b90 <col:5, col:27>
| |     `-TextComment 0x563ea82c5b60 <col:5, col:27> Text=" End of message buffer "
| |-FieldDecl 0x563ea81da020 <line:3579:2, col:8> col:8 read_ptr 'char *'
| | `-FullComment 0x563ea82c5c90 <line:3578:5, col:18>
| |   `-ParagraphComment 0x563ea82c5c60 <col:5, col:18>
| |     `-TextComment 0x563ea82c5c30 <col:5, col:18> Text=" Read pointer "
| |-FieldDecl 0x563ea81da0b0 <line:3581:2, col:8> col:8 write_ptr 'char *'
| | `-FullComment 0x563ea82c5d60 <line:3580:5, col:19>
| |   `-ParagraphComment 0x563ea82c5d30 <col:5, col:19>
| |     `-TextComment 0x563ea82c5d00 <col:5, col:19> Text=" Write pointer "
| |-FieldDecl 0x563ea81da138 <line:3583:2, col:8> col:8 referenced used_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x563ea82c5e30 <line:3582:5, col:29>
| |   `-ParagraphComment 0x563ea82c5e00 <col:5, col:29>
| |     `-TextComment 0x563ea82c5dd0 <col:5, col:29> Text=" Number of used messages "
| `-FieldDecl 0x563ea81da1b8 <line:3589:2, col:7> col:7 flags 'u8_t':'unsigned char'
|   `-FullComment 0x563ea82c5f00 <line:3588:5, col:19>
|     `-ParagraphComment 0x563ea82c5ed0 <col:5, col:19>
|       `-TextComment 0x563ea82c5ea0 <col:5, col:19> Text=" Message queue "
|-RecordDecl 0x563ea81da288 <line:3619:1, line:3626:1> line:3619:8 struct k_msgq_attrs definition
| |-FullComment 0x563ea82c6050 <line:3617:3, col:34>
| | |-ParagraphComment 0x563ea82c5fa0 <col:3>
| | | `-TextComment 0x563ea82c5f70 <col:3> Text=" "
| | `-BlockCommandComment 0x563ea82c5fc0 <col:4, col:34> Name="brief"
| |   `-ParagraphComment 0x563ea82c6020 <col:10, col:34>
| |     `-TextComment 0x563ea82c5ff0 <col:10, col:34> Text=" Message Queue Attributes"
| |-FieldDecl 0x563ea81da368 <line:3621:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x563ea82c6120 <line:3620:5, col:18>
| |   `-ParagraphComment 0x563ea82c60f0 <col:5, col:18>
| |     `-TextComment 0x563ea82c60c0 <col:5, col:18> Text=" Message Size "
| |-FieldDecl 0x563ea81da3e8 <line:3623:2, col:8> col:8 max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x563ea82c61f0 <line:3622:5, col:32>
| |   `-ParagraphComment 0x563ea82c61c0 <col:5, col:32>
| |     `-TextComment 0x563ea82c6190 <col:5, col:32> Text=" Maximal number of messages "
| `-FieldDecl 0x563ea81da468 <line:3625:2, col:8> col:8 used_msgs 'u32_t':'unsigned int'
|   `-FullComment 0x563ea82c62c0 <line:3624:5, col:19>
|     `-ParagraphComment 0x563ea82c6290 <col:5, col:19>
|       `-TextComment 0x563ea82c6260 <col:5, col:19> Text=" Used messages "
|-FunctionDecl 0x563ea81da860 <line:3676:1, line:3677:18> line:3676:6 k_msgq_init 'void (struct k_msgq *, char *, size_t, u32_t)'
| |-ParmVarDecl 0x563ea81da5c0 <col:18, col:33> col:33 q 'struct k_msgq *'
| |-ParmVarDecl 0x563ea81da638 <col:36, col:42> col:42 buffer 'char *'
| |-ParmVarDecl 0x563ea81da6a8 <col:50, col:57> col:57 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea81da718 <line:3677:4, col:10> col:10 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x563ea82c6bf0 <line:3658:3, line:3675:1>
|   |-ParagraphComment 0x563ea82c6360 <line:3658:3>
|   | `-TextComment 0x563ea82c6330 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c6380 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x563ea82c63e0 <col:10, col:37>
|   |   `-TextComment 0x563ea82c63b0 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x563ea82c6430 <line:3660:3, col:75>
|   | `-TextComment 0x563ea82c6400 <col:3, col:75> Text=" This routine initializes a message queue object, prior to its first use."
|   |-ParagraphComment 0x563ea82c6670 <line:3662:3, line:3666:32>
|   | |-TextComment 0x563ea82c6450 <line:3662:3, col:58> Text=" The message queue's ring buffer must contain space for "
|   | |-InlineCommandComment 0x563ea82c64a0 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="max_msgs"
|   | |-TextComment 0x563ea82c64c0 <col:70, col:79> Text=" messages,"
|   | |-TextComment 0x563ea82c64e0 <line:3663:3, col:20> Text=" each of which is "
|   | |-InlineCommandComment 0x563ea82c6530 <col:21, col:22> Name="a" RenderEmphasized Arg[0]="msg_size"
|   | |-TextComment 0x563ea82c6550 <col:32, col:76> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x563ea82c6570 <line:3664:3, col:74> Text=" N-byte boundary, where N is a power of 2 (i.e. 1, 2, 4, ...). To ensure"
|   | |-TextComment 0x563ea82c6590 <line:3665:3, col:60> Text=" that each message is similarly aligned to this boundary, "
|   | |-InlineCommandComment 0x563ea82c65e0 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="q_msg_size"
|   | `-TextComment 0x563ea82c6600 <line:3666:3, col:32> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x563ea82c66c0 <line:3668:3>
|   | `-TextComment 0x563ea82c6690 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c66e0 <col:4, line:3669:3> [in] implicitly Param="q" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c6790 <line:3668:12, line:3669:3>
|   |   |-TextComment 0x563ea82c6740 <line:3668:12, col:41> Text=" Address of the message queue."
|   |   `-TextComment 0x563ea82c6760 <line:3669:3> Text=" "
|   |-ParamCommandComment 0x563ea82c67b0 <col:4, line:3670:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x563ea82c6860 <line:3669:17, line:3670:3>
|   |   |-TextComment 0x563ea82c6810 <line:3669:17, col:67> Text=" Pointer to ring buffer that holds queued messages."
|   |   `-TextComment 0x563ea82c6830 <line:3670:3> Text=" "
|   |-ParamCommandComment 0x563ea82c6880 <col:4, line:3671:3> [in] implicitly Param="msg_size" ParamIndex=2
|   | `-ParagraphComment 0x563ea82c6930 <line:3670:19, line:3671:3>
|   |   |-TextComment 0x563ea82c68e0 <line:3670:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x563ea82c6900 <line:3671:3> Text=" "
|   |-ParamCommandComment 0x563ea82c6950 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=3
|   | `-ParagraphComment 0x563ea82c69e0 <col:19, col:65>
|   |   `-TextComment 0x563ea82c69b0 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x563ea82c6a30 <line:3673:3>
|   | `-TextComment 0x563ea82c6a00 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c6a50 <col:4, line:3674:3> Name="return"
|   | `-ParagraphComment 0x563ea82c6ad0 <line:3673:11, line:3674:3>
|   |   |-TextComment 0x563ea82c6a80 <line:3673:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82c6aa0 <line:3674:3> Text=" "
|   |-VerbatimLineComment 0x563ea82c6af0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x563ea82c6b60 <line:3675:1>
|     `-TextComment 0x563ea82c6b30 <col:1> Text=" "
|-FunctionDecl 0x563ea81dab88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3700:19> line:3699:15 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x563ea81da970 <col:33, col:48> col:48 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x563ea81da9e0 <col:54, col:61> col:61 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea81daa50 <line:3700:5, col:11> col:11 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x563ea82c7370 <line:3680:3, line:3698:1>
|   |-ParagraphComment 0x563ea82c6c90 <line:3680:3>
|   | `-TextComment 0x563ea82c6c60 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c6cb0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x563ea82c6d10 <col:10, col:37>
|   |   `-TextComment 0x563ea82c6ce0 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x563ea82c6db0 <line:3682:3, line:3684:8>
|   | |-TextComment 0x563ea82c6d30 <line:3682:3, col:75> Text=" This routine initializes a message queue object, prior to its first use,"
|   | |-TextComment 0x563ea82c6d50 <line:3683:3, col:73> Text=" allocating its internal ring buffer from the calling thread's resource"
|   | `-TextComment 0x563ea82c6d70 <line:3684:3, col:8> Text=" pool."
|   |-ParagraphComment 0x563ea82c6e50 <line:3686:3, line:3688:25>
|   | |-TextComment 0x563ea82c6dd0 <line:3686:3, col:66> Text=" Memory allocated for the ring buffer can be released by calling"
|   | |-TextComment 0x563ea82c6df0 <line:3687:3, col:73> Text=" k_msgq_cleanup(), or if userspace is enabled and the msgq object loses"
|   | `-TextComment 0x563ea82c6e10 <line:3688:3, col:25> Text=" all of its references."
|   |-ParagraphComment 0x563ea82c6ea0 <line:3690:3>
|   | `-TextComment 0x563ea82c6e70 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c6ec0 <col:4, line:3691:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c6f70 <line:3690:15, line:3691:3>
|   |   |-TextComment 0x563ea82c6f20 <line:3690:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x563ea82c6f40 <line:3691:3> Text=" "
|   |-ParamCommandComment 0x563ea82c6fc0 <col:4, line:3692:3> [in] implicitly Param="msg_size" ParamIndex=1
|   | `-ParagraphComment 0x563ea82c7070 <line:3691:19, line:3692:3>
|   |   |-TextComment 0x563ea82c7020 <line:3691:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x563ea82c7040 <line:3692:3> Text=" "
|   |-ParamCommandComment 0x563ea82c7090 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=2
|   | `-ParagraphComment 0x563ea82c7120 <col:19, col:65>
|   |   `-TextComment 0x563ea82c70f0 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x563ea82c7170 <line:3694:3>
|   | `-TextComment 0x563ea82c7140 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c7190 <col:4, line:3697:3> Name="return"
|   | `-ParagraphComment 0x563ea82c7260 <line:3694:11, line:3697:3>
|   |   |-TextComment 0x563ea82c71c0 <line:3694:11, col:72> Text=" 0 on success, -ENOMEM if there was insufficient memory in the"
|   |   |-TextComment 0x563ea82c71e0 <line:3695:3, col:66> Text="	thread's resource pool, or -EINVAL if the size parameters cause"
|   |   |-TextComment 0x563ea82c7200 <line:3696:3, col:23> Text="	an integer overflow."
|   |   `-TextComment 0x563ea82c7220 <line:3697:3> Text=" "
|   |-VerbatimLineComment 0x563ea82c7280 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x563ea82c72f0 <line:3698:1>
|     `-TextComment 0x563ea82c72c0 <col:1> Text=" "
|-FunctionDecl 0x563ea81dad98 <line:3712:1, col:39> col:5 k_msgq_cleanup 'int (struct k_msgq *)'
| |-ParmVarDecl 0x563ea81dac90 <col:20, col:35> col:35 msgq 'struct k_msgq *'
| `-FullComment 0x563ea82c7740 <line:3703:3, line:3710:33>
|   |-ParagraphComment 0x563ea82c7410 <line:3703:3>
|   | `-TextComment 0x563ea82c73e0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c7430 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x563ea82c7490 <col:10, col:46>
|   |   `-TextComment 0x563ea82c7460 <col:10, col:46> Text=" Release allocated buffer for a queue"
|   |-ParagraphComment 0x563ea82c74e0 <line:3705:3, col:49>
|   | `-TextComment 0x563ea82c74b0 <col:3, col:49> Text=" Releases memory allocated for the ring buffer."
|   |-ParagraphComment 0x563ea82c7530 <line:3707:3>
|   | `-TextComment 0x563ea82c7500 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c7550 <col:4, col:39> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c75e0 <col:15, col:39>
|   |   `-TextComment 0x563ea82c75b0 <col:15, col:39> Text=" message queue to cleanup"
|   `-ParagraphComment 0x563ea82c76f0 <line:3709:3, line:3710:33>
|     |-TextComment 0x563ea82c7600 <line:3709:3> Text=" "
|     |-InlineCommandComment 0x563ea82c7620 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x563ea82c7640 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x563ea82c7660 <line:3710:3> Text=" "
|     |-InlineCommandComment 0x563ea82c7680 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x563ea82c76a0 <col:11, col:33> Text=" -EBUSY Queue not empty"
|-FunctionDecl 0x563ea822e628 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3732:72> col:15 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x563ea81dae90 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x563ea81daf08 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x563ea822e4f0 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x563ea82c7f80 <line:3715:3, line:3731:1>
|   |-ParagraphComment 0x563ea82c77e0 <line:3715:3>
|   | `-TextComment 0x563ea82c77b0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c7800 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x563ea82c7860 <col:10, col:44>
|   |   `-TextComment 0x563ea82c7830 <col:10, col:44> Text=" Send a message to a message queue."
|   |-ParagraphComment 0x563ea82c7900 <line:3717:3, col:51>
|   | |-TextComment 0x563ea82c7880 <col:3, col:49> Text=" This routine sends a message to message queue "
|   | `-InlineCommandComment 0x563ea82c78d0 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="q."
|   |-ParagraphComment 0x563ea82c7950 <line:3719:3>
|   | `-TextComment 0x563ea82c7920 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c7970 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82c79d0 <col:9, col:31>
|   |   `-TextComment 0x563ea82c79a0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82c7a20 <line:3721:3>
|   | `-TextComment 0x563ea82c79f0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c7a40 <col:4, line:3722:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c7af0 <line:3721:15, line:3722:3>
|   |   |-TextComment 0x563ea82c7aa0 <line:3721:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x563ea82c7ac0 <line:3722:3> Text=" "
|   |-ParamCommandComment 0x563ea82c7b10 <col:4, line:3723:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x563ea82c7bc0 <line:3722:15, line:3723:3>
|   |   |-TextComment 0x563ea82c7b70 <line:3722:15, col:38> Text=" Pointer to the message."
|   |   `-TextComment 0x563ea82c7b90 <line:3723:3> Text=" "
|   |-ParamCommandComment 0x563ea82c7be0 <col:4, line:3725:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x563ea82c7cc0 <line:3723:18, line:3725:28>
|   |   |-TextComment 0x563ea82c7c40 <line:3723:18, col:68> Text=" Non-negative waiting period to add the message (in"
|   |   |-TextComment 0x563ea82c7c60 <line:3724:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x563ea82c7c80 <line:3725:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x563ea82c7e70 <line:3727:3, line:3730:3>
|   | |-TextComment 0x563ea82c7ce0 <line:3727:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c7d00 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c7d20 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x563ea82c7d40 <line:3728:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c7d60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c7d80 <col:11, col:60> Text=" -ENOMSG Returned without waiting or queue purged."
|   | |-TextComment 0x563ea82c7da0 <line:3729:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c7dc0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c7de0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x563ea82c7e00 <line:3730:3> Text=" "
|   |-VerbatimLineComment 0x563ea82c7e90 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x563ea82c7f00 <line:3731:1>
|     `-TextComment 0x563ea82c7ed0 <col:1> Text=" "
|-FunctionDecl 0x563ea822e8b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3753:72> col:15 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x563ea822e730 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x563ea822e7a8 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x563ea822e818 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x563ea82c8890 <line:3735:3, line:3752:1>
|   |-ParagraphComment 0x563ea82c8020 <line:3735:3>
|   | `-TextComment 0x563ea82c7ff0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c8040 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea82c80a0 <col:10, col:49>
|   |   `-TextComment 0x563ea82c8070 <col:10, col:49> Text=" Receive a message from a message queue."
|   |-ParagraphComment 0x563ea82c8190 <line:3737:3, line:3738:21>
|   | |-TextComment 0x563ea82c80c0 <line:3737:3, col:54> Text=" This routine receives a message from message queue "
|   | |-InlineCommandComment 0x563ea82c8110 <col:55, col:56> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x563ea82c8130 <col:59, col:74> Text=" in a "first in,"
|   | `-TextComment 0x563ea82c8150 <line:3738:3, col:21> Text=" first out" manner."
|   |-ParagraphComment 0x563ea82c81e0 <line:3740:3>
|   | `-TextComment 0x563ea82c81b0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c8200 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x563ea82c82e0 <col:9, col:72>
|   |   |-TextComment 0x563ea82c8230 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x563ea82c8280 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x563ea82c82a0 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x563ea82c8330 <line:3742:3>
|   | `-TextComment 0x563ea82c8300 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c8350 <col:4, line:3743:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c8400 <line:3742:15, line:3743:3>
|   |   |-TextComment 0x563ea82c83b0 <line:3742:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x563ea82c83d0 <line:3743:3> Text=" "
|   |-ParamCommandComment 0x563ea82c8420 <col:4, line:3744:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x563ea82c84d0 <line:3743:15, line:3744:3>
|   |   |-TextComment 0x563ea82c8480 <line:3743:15, col:60> Text=" Address of area to hold the received message."
|   |   `-TextComment 0x563ea82c84a0 <line:3744:3> Text=" "
|   |-ParamCommandComment 0x563ea82c84f0 <col:4, line:3746:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x563ea82c85d0 <line:3744:18, line:3746:28>
|   |   |-TextComment 0x563ea82c8550 <line:3744:18, col:72> Text=" Non-negative waiting period to receive the message (in"
|   |   |-TextComment 0x563ea82c8570 <line:3745:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x563ea82c8590 <line:3746:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x563ea82c8780 <line:3748:3, line:3751:3>
|   | |-TextComment 0x563ea82c85f0 <line:3748:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c8610 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c8630 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x563ea82c8650 <line:3749:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c8670 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c8690 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x563ea82c86b0 <line:3750:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c86d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c86f0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x563ea82c8710 <line:3751:3> Text=" "
|   |-VerbatimLineComment 0x563ea82c87a0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x563ea82c8810 <line:3752:1>
|     `-TextComment 0x563ea82c87e0 <col:1> Text=" "
|-FunctionDecl 0x563ea822eb58 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3770:58> col:15 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x563ea822e9c0 <col:27, col:42> col:42 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x563ea822ea38 <col:48, col:54> col:54 data 'void *'
| `-FullComment 0x563ea82c8f90 <line:3756:3, line:3769:1>
|   |-ParagraphComment 0x563ea82c8930 <line:3756:3>
|   | `-TextComment 0x563ea82c8900 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c8950 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x563ea82c89b0 <col:10, col:51>
|   |   `-TextComment 0x563ea82c8980 <col:10, col:51> Text=" Peek/read a message from a message queue."
|   |-ParagraphComment 0x563ea82c8aa0 <line:3758:3, line:3759:57>
|   | |-TextComment 0x563ea82c89d0 <line:3758:3, col:51> Text=" This routine reads a message from message queue "
|   | |-InlineCommandComment 0x563ea82c8a20 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x563ea82c8a40 <col:56, col:71> Text=" in a "first in,"
|   | `-TextComment 0x563ea82c8a60 <line:3759:3, col:57> Text=" first out" manner and leaves the message in the queue."
|   |-ParagraphComment 0x563ea82c8af0 <line:3761:3>
|   | `-TextComment 0x563ea82c8ac0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c8b10 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x563ea82c8b70 <col:9, col:31>
|   |   `-TextComment 0x563ea82c8b40 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x563ea82c8bc0 <line:3763:3>
|   | `-TextComment 0x563ea82c8b90 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c8be0 <col:4, line:3764:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c8c90 <line:3763:15, line:3764:3>
|   |   |-TextComment 0x563ea82c8c40 <line:3763:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x563ea82c8c60 <line:3764:3> Text=" "
|   |-ParamCommandComment 0x563ea82c8cb0 <col:4, col:71> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x563ea82c8d40 <col:15, col:71>
|   |   `-TextComment 0x563ea82c8d10 <col:15, col:71> Text=" Address of area to hold the message read from the queue."
|   |-ParagraphComment 0x563ea82c8e80 <line:3766:3, line:3768:3>
|   | |-TextComment 0x563ea82c8d60 <line:3766:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c8d80 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c8da0 <col:11, col:26> Text=" 0 Message read."
|   | |-TextComment 0x563ea82c8dc0 <line:3767:3> Text=" "
|   | |-InlineCommandComment 0x563ea82c8de0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82c8e00 <col:11, col:58> Text=" -ENOMSG Returned when the queue has no message."
|   | `-TextComment 0x563ea82c8e20 <line:3768:3> Text=" "
|   |-VerbatimLineComment 0x563ea82c8ea0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x563ea82c8f10 <line:3769:1>
|     `-TextComment 0x563ea82c8ee0 <col:1> Text=" "
|-FunctionDecl 0x563ea822ed60 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3784:48> col:16 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x563ea822ec60 <col:29, col:44> col:44 msgq 'struct k_msgq *'
| `-FullComment 0x563ea82c9450 <line:3773:3, line:3783:1>
|   |-ParagraphComment 0x563ea82c9040 <line:3773:3>
|   | `-TextComment 0x563ea82c9010 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c9060 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x563ea82c90c0 <col:10, col:32>
|   |   `-TextComment 0x563ea82c9090 <col:10, col:32> Text=" Purge a message queue."
|   |-ParagraphComment 0x563ea82c9160 <line:3775:3, line:3777:61>
|   | |-TextComment 0x563ea82c90e0 <line:3775:3, col:74> Text=" This routine discards all unreceived messages in a message queue's ring"
|   | |-TextComment 0x563ea82c9100 <line:3776:3, col:72> Text=" buffer. Any threads that are blocked waiting to send a message to the"
|   | `-TextComment 0x563ea82c9120 <line:3777:3, col:61> Text=" message queue are unblocked and see an -ENOMSG error code."
|   |-ParagraphComment 0x563ea82c91b0 <line:3779:3>
|   | `-TextComment 0x563ea82c9180 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c91d0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c9260 <col:15, col:44>
|   |   `-TextComment 0x563ea82c9230 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x563ea82c92b0 <line:3781:3>
|   | `-TextComment 0x563ea82c9280 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c92d0 <col:4, line:3782:3> Name="return"
|   | `-ParagraphComment 0x563ea82c9350 <line:3781:11, line:3782:3>
|   |   |-TextComment 0x563ea82c9300 <line:3781:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82c9320 <line:3782:3> Text=" "
|   |-VerbatimLineComment 0x563ea82c9370 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x563ea82c93e0 <line:3783:1>
|     `-TextComment 0x563ea82c93b0 <col:1> Text=" "
|-FunctionDecl 0x563ea822ef60 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3797:56> col:17 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x563ea822ee60 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x563ea82c98d0 <line:3787:3, line:3796:1>
|   |-ParagraphComment 0x563ea82c94f0 <line:3787:3>
|   | `-TextComment 0x563ea82c94c0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c9510 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x563ea82c9570 <col:10, col:58>
|   |   `-TextComment 0x563ea82c9540 <col:10, col:58> Text=" Get the amount of free space in a message queue."
|   |-ParagraphComment 0x563ea82c95e0 <line:3789:3, line:3790:15>
|   | |-TextComment 0x563ea82c9590 <line:3789:3, col:73> Text=" This routine returns the number of unused entries in a message queue's"
|   | `-TextComment 0x563ea82c95b0 <line:3790:3, col:15> Text=" ring buffer."
|   |-ParagraphComment 0x563ea82c9630 <line:3792:3>
|   | `-TextComment 0x563ea82c9600 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c9650 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c96e0 <col:15, col:44>
|   |   `-TextComment 0x563ea82c96b0 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x563ea82c9730 <line:3794:3>
|   | `-TextComment 0x563ea82c9700 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c9750 <col:4, line:3795:3> Name="return"
|   | `-ParagraphComment 0x563ea82c97d0 <line:3794:11, line:3795:3>
|   |   |-TextComment 0x563ea82c9780 <line:3794:11, col:48> Text=" Number of unused ring buffer entries."
|   |   `-TextComment 0x563ea82c97a0 <line:3795:3> Text=" "
|   |-VerbatimLineComment 0x563ea82c97f0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x563ea82c9860 <line:3796:1>
|     `-TextComment 0x563ea82c9830 <col:1> Text=" "
|-FunctionDecl 0x563ea822f280 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3811:32> line:3810:17 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x563ea822f060 <col:34, col:49> col:49 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x563ea822f170 <line:3811:6, col:27> col:27 attrs 'struct k_msgq_attrs *'
| `-FullComment 0x563ea82c9e00 <line:3800:3, line:3809:1>
|   |-ParagraphComment 0x563ea82c9970 <line:3800:3>
|   | `-TextComment 0x563ea82c9940 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c9990 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x563ea82c99f0 <col:10, col:50>
|   |   `-TextComment 0x563ea82c99c0 <col:10, col:50> Text=" Get basic attributes of a message queue."
|   |-ParagraphComment 0x563ea82c9a40 <line:3802:3, col:77>
|   | `-TextComment 0x563ea82c9a10 <col:3, col:77> Text=" This routine fetches basic attributes of message queue into attr argument."
|   |-ParagraphComment 0x563ea82c9a90 <line:3804:3>
|   | `-TextComment 0x563ea82c9a60 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c9ab0 <col:4, line:3805:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x563ea82c9b60 <line:3804:15, line:3805:3>
|   |   |-TextComment 0x563ea82c9b10 <line:3804:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x563ea82c9b30 <line:3805:3> Text=" "
|   |-ParamCommandComment 0x563ea82c9b80 <col:4, col:61> [in] implicitly Param="attrs" ParamIndex=1
|   | `-ParagraphComment 0x563ea82c9c10 <col:16, col:61>
|   |   `-TextComment 0x563ea82c9be0 <col:16, col:61> Text=" pointer to message queue attribute structure."
|   |-ParagraphComment 0x563ea82c9c60 <line:3807:3>
|   | `-TextComment 0x563ea82c9c30 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c9c80 <col:4, line:3808:3> Name="return"
|   | `-ParagraphComment 0x563ea82c9d00 <line:3807:11, line:3808:3>
|   |   |-TextComment 0x563ea82c9cb0 <line:3807:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82c9cd0 <line:3808:3> Text=" "
|   |-VerbatimLineComment 0x563ea82c9d20 <col:4, col:19> Text=" K-MSGQ-003"
|   `-ParagraphComment 0x563ea82c9d90 <line:3809:1>
|     `-TextComment 0x563ea82c9d60 <col:1> Text=" "
|-FunctionDecl 0x563ea822f3e0 <line:3814:1, line:3817:1> line:3814:21 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x563ea822f358 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x563ea822fab8 <line:3815:1, line:3817:1>
|   `-ReturnStmt 0x563ea822fa78 <line:3816:2, col:32>
|     `-BinaryOperator 0x563ea822fa50 <col:9, col:32> 'unsigned int' '-'
|       |-ImplicitCastExpr 0x563ea822fa20 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-MemberExpr 0x563ea822f970 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->max_msgs 0x563ea822aaf8
|       |   `-ImplicitCastExpr 0x563ea822f4b0 <col:9> 'struct k_msgq *' <LValueToRValue>
|       |     `-DeclRefExpr 0x563ea822f488 <col:9> 'struct k_msgq *' lvalue ParmVar 0x563ea822f358 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x563ea822fa38 <col:26, col:32> 'u32_t':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x563ea822f9e8 <col:26, col:32> 'u32_t':'unsigned int' lvalue ->used_msgs 0x563ea81da138
|           `-ImplicitCastExpr 0x563ea822f9d0 <col:26> 'struct k_msgq *' <LValueToRValue>
|             `-DeclRefExpr 0x563ea822f9a8 <col:26> 'struct k_msgq *' lvalue ParmVar 0x563ea822f358 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x563ea822fb80 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3829:56> col:17 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x563ea822faf8 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x563ea82ca260 <line:3820:3, line:3828:1>
|   |-ParagraphComment 0x563ea82c9ea0 <line:3820:3>
|   | `-TextComment 0x563ea82c9e70 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82c9ec0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x563ea82c9f20 <col:10, col:56>
|   |   `-TextComment 0x563ea82c9ef0 <col:10, col:56> Text=" Get the number of messages in a message queue."
|   |-ParagraphComment 0x563ea82c9f70 <line:3822:3, col:80>
|   | `-TextComment 0x563ea82c9f40 <col:3, col:80> Text=" This routine returns the number of messages in a message queue's ring buffer."
|   |-ParagraphComment 0x563ea82c9fc0 <line:3824:3>
|   | `-TextComment 0x563ea82c9f90 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82c9fe0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x563ea82ca070 <col:15, col:44>
|   |   `-TextComment 0x563ea82ca040 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x563ea82ca0c0 <line:3826:3>
|   | `-TextComment 0x563ea82ca090 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ca0e0 <col:4, line:3827:3> Name="return"
|   | `-ParagraphComment 0x563ea82ca160 <line:3826:11, line:3827:3>
|   |   |-TextComment 0x563ea82ca110 <line:3826:11, col:30> Text=" Number of messages."
|   |   `-TextComment 0x563ea82ca130 <line:3827:3> Text=" "
|   |-VerbatimLineComment 0x563ea82ca180 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x563ea82ca1f0 <line:3828:1>
|     `-TextComment 0x563ea82ca1c0 <col:1> Text=" "
|-FunctionDecl 0x563ea822fcd8 <line:3831:1, line:3834:1> line:3831:21 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x563ea822fc50 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x563ea822fe88 <line:3832:1, line:3834:1>
|   `-ReturnStmt 0x563ea822fe10 <line:3833:2, col:15>
|     `-ImplicitCastExpr 0x563ea822fdf8 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x563ea822fdc0 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->used_msgs 0x563ea81da138
|         `-ImplicitCastExpr 0x563ea822fda8 <col:9> 'struct k_msgq *' <LValueToRValue>
|           `-DeclRefExpr 0x563ea822fd80 <col:9> 'struct k_msgq *' lvalue ParmVar 0x563ea822fc50 'msgq' 'struct k_msgq *'
|-RecordDecl 0x563ea822fea0 <line:3849:1, line:3853:1> line:3849:8 struct k_mem_block_id definition
| |-FullComment 0x563ea82ca4c0 <line:3839:3, line:3841:5>
| | |-ParagraphComment 0x563ea82ca300 <line:3839:3>
| | | `-TextComment 0x563ea82ca2d0 <col:3> Text=" "
| | |-VerbatimLineComment 0x563ea82ca320 <col:4, col:44> Text=" mem_pool_apis Memory Pool APIs"
| | |-ParagraphComment 0x563ea82ca390 <line:3840:3>
| | | `-TextComment 0x563ea82ca360 <col:3> Text=" "
| | |-VerbatimLineComment 0x563ea82ca3b0 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x563ea82ca470 <line:3841:3, col:5>
| |   |-TextComment 0x563ea82ca3f0 <col:3> Text=" "
| |   |-TextComment 0x563ea82ca410 <col:4> Text="@"
| |   `-TextComment 0x563ea82ca430 <col:5> Text="{"
| |-FieldDecl 0x563ea822ff80 <line:3850:2, col:15> col:8 pool 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x563ea822ff50 <col:15> 'int' 8
| |-FieldDecl 0x563ea822fff8 <line:3851:2, col:16> col:8 level 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x563ea822ffc8 <col:16> 'int' 4
| `-FieldDecl 0x563ea8230070 <line:3852:2, col:16> col:8 block 'u32_t':'unsigned int'
|   `-IntegerLiteral 0x563ea8230040 <col:16> 'int' 20
|-RecordDecl 0x563ea82300b8 <line:3855:1, line:3858:1> line:3855:8 struct k_mem_block definition
| |-FieldDecl 0x563ea8230178 <line:3856:2, col:8> col:8 data 'void *'
| `-FieldDecl 0x563ea8230210 <line:3857:2, col:24> col:24 id 'struct k_mem_block_id':'struct k_mem_block_id'
|-RecordDecl 0x563ea82302e8 <line:3872:1, line:3895:1> line:3872:8 struct k_mbox_msg definition
| |-FullComment 0x563ea82ca670 <line:3869:3, line:3871:1>
| | |-ParagraphComment 0x563ea82ca560 <line:3869:3>
| | | `-TextComment 0x563ea82ca530 <col:3> Text=" "
| | |-BlockCommandComment 0x563ea82ca580 <col:4, col:35> Name="brief"
| | | `-ParagraphComment 0x563ea82ca5e0 <col:10, col:35>
| | |   `-TextComment 0x563ea82ca5b0 <col:10, col:35> Text=" Mailbox Message Structure"
| | `-ParagraphComment 0x563ea82ca630 <line:3871:1>
| |   `-TextComment 0x563ea82ca600 <col:1> Text=" "
| |-FieldDecl 0x563ea82303c8 <line:3874:2, col:8> col:8 _mailbox 'u32_t':'unsigned int'
| | `-FullComment 0x563ea82ca740 <line:3873:5, col:55>
| |   `-ParagraphComment 0x563ea82ca710 <col:5, col:55>
| |     `-TextComment 0x563ea82ca6e0 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x563ea8230448 <line:3876:2, col:9> col:9 size 'size_t':'unsigned long'
| | `-FullComment 0x563ea82ca810 <line:3875:5, col:32>
| |   `-ParagraphComment 0x563ea82ca7e0 <col:5, col:32>
| |     `-TextComment 0x563ea82ca7b0 <col:5, col:32> Text=" size of message (in bytes) "
| |-FieldDecl 0x563ea82304c8 <line:3878:2, col:8> col:8 info 'u32_t':'unsigned int'
| | `-FullComment 0x563ea82ca8e0 <line:3877:5, col:43>
| |   `-ParagraphComment 0x563ea82ca8b0 <col:5, col:43>
| |     `-TextComment 0x563ea82ca880 <col:5, col:43> Text=" application-defined information value "
| |-FieldDecl 0x563ea8230550 <line:3880:2, col:8> col:8 tx_data 'void *'
| | `-FullComment 0x563ea82ca9b0 <line:3879:5, col:34>
| |   `-ParagraphComment 0x563ea82ca980 <col:5, col:34>
| |     `-TextComment 0x563ea82ca950 <col:5, col:34> Text=" sender's message data buffer "
| |-FieldDecl 0x563ea82305e0 <line:3882:2, col:8> col:8 _rx_data 'void *'
| | `-FullComment 0x563ea82caa80 <line:3881:5, col:55>
| |   `-ParagraphComment 0x563ea82caa50 <col:5, col:55>
| |     `-TextComment 0x563ea82caa20 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x563ea82306b0 <line:3884:2, col:21> col:21 tx_block 'struct k_mem_block':'struct k_mem_block'
| | `-FullComment 0x563ea82cab50 <line:3883:5, col:35>
| |   `-ParagraphComment 0x563ea82cab20 <col:5, col:35>
| |     `-TextComment 0x563ea82caaf0 <col:5, col:35> Text=" message data block descriptor "
| |-FieldDecl 0x563ea8230738 <line:3886:2, col:10> col:10 rx_source_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x563ea82cac20 <line:3885:5, col:22>
| |   `-ParagraphComment 0x563ea82cabf0 <col:5, col:22>
| |     `-TextComment 0x563ea82cabc0 <col:5, col:22> Text=" source thread id "
| |-FieldDecl 0x563ea82307b8 <line:3888:2, col:10> col:10 tx_target_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x563ea82cacf0 <line:3887:5, col:22>
| |   `-ParagraphComment 0x563ea82cacc0 <col:5, col:22>
| |     `-TextComment 0x563ea82cac90 <col:5, col:22> Text=" target thread id "
| `-FieldDecl 0x563ea8230838 <line:3890:2, col:10> col:10 _syncing_thread 'k_tid_t':'struct k_thread *'
|   `-FullComment 0x563ea82cadc0 <line:3889:5, col:65>
|     `-ParagraphComment 0x563ea82cad90 <col:5, col:65>
|       `-TextComment 0x563ea82cad60 <col:5, col:65> Text=" internal use only - thread waiting on send (may be a dummy) "
|-RecordDecl 0x563ea82308a8 prev 0x563ea81f3000 <line:3900:1, line:3909:1> line:3900:8 struct k_mbox definition
| |-FullComment 0x563ea82caf70 <line:3897:3, line:3899:1>
| | |-ParagraphComment 0x563ea82cae60 <line:3897:3>
| | | `-TextComment 0x563ea82cae30 <col:3> Text=" "
| | |-BlockCommandComment 0x563ea82cae80 <col:4, col:27> Name="brief"
| | | `-ParagraphComment 0x563ea82caee0 <col:10, col:27>
| | |   `-TextComment 0x563ea82caeb0 <col:10, col:27> Text=" Mailbox Structure"
| | `-ParagraphComment 0x563ea82caf30 <line:3899:1>
| |   `-TextComment 0x563ea82caf00 <col:1> Text=" "
| |-FieldDecl 0x563ea8231990 <line:3902:2, col:12> col:12 tx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x563ea82cb080 <line:3901:5, col:29>
| |   `-ParagraphComment 0x563ea82cb050 <col:5, col:29>
| |     `-TextComment 0x563ea82cb020 <col:5, col:29> Text=" Transmit messages queue "
| |-FieldDecl 0x563ea8231a18 <line:3904:2, col:12> col:12 rx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x563ea82cb150 <line:3903:5, col:27>
| |   `-ParagraphComment 0x563ea82cb120 <col:5, col:27>
| |     `-TextComment 0x563ea82cb0f0 <col:5, col:27> Text=" Receive message queue "
| `-FieldDecl 0x563ea8231a80 <line:3905:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
|-FunctionDecl 0x563ea8231d40 <line:3951:1, col:44> col:13 k_mbox_init 'void (struct k_mbox *)' extern
| |-ParmVarDecl 0x563ea8231c40 <col:25, col:40> col:40 mbox 'struct k_mbox *'
| `-FullComment 0x563ea82cb5b0 <line:3942:3, line:3950:1>
|   |-ParagraphComment 0x563ea82cb1f0 <line:3942:3>
|   | `-TextComment 0x563ea82cb1c0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82cb210 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x563ea82cb270 <col:10, col:31>
|   |   `-TextComment 0x563ea82cb240 <col:10, col:31> Text=" Initialize a mailbox."
|   |-ParagraphComment 0x563ea82cb2c0 <line:3944:3, col:69>
|   | `-TextComment 0x563ea82cb290 <col:3, col:69> Text=" This routine initializes a mailbox object, prior to its first use."
|   |-ParagraphComment 0x563ea82cb310 <line:3946:3>
|   | `-TextComment 0x563ea82cb2e0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82cb330 <col:4, col:38> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x563ea82cb3c0 <col:15, col:38>
|   |   `-TextComment 0x563ea82cb390 <col:15, col:38> Text=" Address of the mailbox."
|   |-ParagraphComment 0x563ea82cb410 <line:3948:3>
|   | `-TextComment 0x563ea82cb3e0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82cb430 <col:4, line:3949:3> Name="return"
|   | `-ParagraphComment 0x563ea82cb4b0 <line:3948:11, line:3949:3>
|   |   |-TextComment 0x563ea82cb460 <line:3948:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82cb480 <line:3949:3> Text=" "
|   |-VerbatimLineComment 0x563ea82cb4d0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x563ea82cb540 <line:3950:1>
|     `-TextComment 0x563ea82cb510 <col:1> Text=" "
|-FunctionDecl 0x563ea82320f8 <line:3973:1, line:3974:22> line:3973:12 k_mbox_put 'int (struct k_mbox *, struct k_mbox_msg *, s32_t)' extern
| |-ParmVarDecl 0x563ea8231e40 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x563ea8231f50 <col:44, col:63> col:63 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x563ea8231fc0 <line:3974:9, col:15> col:15 timeout 's32_t':'int'
| `-FullComment 0x563ea82cbde0 <line:3954:3, line:3972:1>
|   |-ParagraphComment 0x563ea82cb650 <line:3954:3>
|   | `-TextComment 0x563ea82cb620 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82cb670 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x563ea82cb6d0 <col:10, col:57>
|   |   `-TextComment 0x563ea82cb6a0 <col:10, col:57> Text=" Send a mailbox message in a synchronous manner."
|   |-ParagraphComment 0x563ea82cb7f0 <line:3956:3, line:3958:55>
|   | |-TextComment 0x563ea82cb6f0 <line:3956:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x563ea82cb740 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x563ea82cb760 <col:43, col:75> Text=" and waits for a receiver to both"
|   | |-TextComment 0x563ea82cb780 <line:3957:3, col:75> Text=" receive and process it. The message data may be in a buffer, in a memory"
|   | `-TextComment 0x563ea82cb7a0 <line:3958:3, col:55> Text=" pool block, or non-existent (i.e. an empty message)."
|   |-ParagraphComment 0x563ea82cb840 <line:3960:3>
|   | `-TextComment 0x563ea82cb810 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82cb860 <col:4, line:3961:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x563ea82cb910 <line:3960:15, line:3961:3>
|   |   |-TextComment 0x563ea82cb8c0 <line:3960:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x563ea82cb8e0 <line:3961:3> Text=" "
|   |-ParamCommandComment 0x563ea82cb930 <col:4, line:3962:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x563ea82cb9e0 <line:3961:17, line:3962:3>
|   |   |-TextComment 0x563ea82cb990 <line:3961:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x563ea82cb9b0 <line:3962:3> Text=" "
|   |-ParamCommandComment 0x563ea82cba00 <col:4, line:3966:45> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x563ea82cbb30 <line:3962:18, line:3966:45>
|   |   |-TextComment 0x563ea82cba60 <line:3962:18, col:80> Text=" Non-negative waiting period for the message to be received (in"
|   |   |-TextComment 0x563ea82cba80 <line:3963:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   |-TextComment 0x563ea82cbaa0 <line:3964:3, col:68> Text="                and K_FOREVER. Once the message has been received,"
|   |   |-TextComment 0x563ea82cbac0 <line:3965:3, col:73> Text="                this routine waits as long as necessary for the message"
|   |   `-TextComment 0x563ea82cbae0 <line:3966:3, col:45> Text="                to be completely processed."
|   |-ParagraphComment 0x563ea82cbce0 <line:3968:3, line:3971:3>
|   | |-TextComment 0x563ea82cbb50 <line:3968:3> Text=" "
|   | |-InlineCommandComment 0x563ea82cbb70 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82cbb90 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x563ea82cbbb0 <line:3969:3> Text=" "
|   | |-InlineCommandComment 0x563ea82cbbd0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82cbbf0 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x563ea82cbc10 <line:3970:3> Text=" "
|   | |-InlineCommandComment 0x563ea82cbc30 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82cbc50 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x563ea82cbc70 <line:3971:3> Text=" "
|   |-VerbatimLineComment 0x563ea82cbd00 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x563ea82cbd70 <line:3972:1>
|     `-TextComment 0x563ea82cbd40 <col:1> Text=" "
|-FunctionDecl 0x563ea8232440 <line:3992:1, line:3993:26> line:3992:13 k_mbox_async_put 'void (struct k_mbox *, struct k_mbox_msg *, struct k_sem *)' extern
| |-ParmVarDecl 0x563ea8232200 <col:30, col:45> col:45 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x563ea8232288 <col:51, col:70> col:70 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x563ea8232310 <line:3993:9, col:23> col:23 sem 'struct k_sem *'
| `-FullComment 0x563ea82cc560 <line:3977:3, line:3991:1>
|   |-ParagraphComment 0x563ea82cbe80 <line:3977:3>
|   | `-TextComment 0x563ea82cbe50 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82cbea0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x563ea82cbf00 <col:10, col:59>
|   |   `-TextComment 0x563ea82cbed0 <col:10, col:59> Text=" Send a mailbox message in an asynchronous manner."
|   |-ParagraphComment 0x563ea82cc0c0 <line:3979:3, line:3983:29>
|   | |-TextComment 0x563ea82cbf20 <line:3979:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x563ea82cbf70 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x563ea82cbf90 <col:43, col:73> Text=" without waiting for a receiver"
|   | |-TextComment 0x563ea82cbfb0 <line:3980:3, col:78> Text=" to process it. The message data may be in a buffer, in a memory pool block,"
|   | |-TextComment 0x563ea82cbfd0 <line:3981:3, col:70> Text=" or non-existent (i.e. an empty message). Optionally, the semaphore "
|   | |-InlineCommandComment 0x563ea82cc020 <col:71, col:72> Name="a" RenderEmphasized Arg[0]="sem"
|   | |-TextComment 0x563ea82cc040 <line:3982:3, col:71> Text=" will be given when the message has been both received and completely"
|   | `-TextComment 0x563ea82cc060 <line:3983:3, col:29> Text=" processed by the receiver."
|   |-ParagraphComment 0x563ea82cc110 <line:3985:3>
|   | `-TextComment 0x563ea82cc0e0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82cc130 <col:4, line:3986:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x563ea82cc1e0 <line:3985:15, line:3986:3>
|   |   |-TextComment 0x563ea82cc190 <line:3985:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x563ea82cc1b0 <line:3986:3> Text=" "
|   |-ParamCommandComment 0x563ea82cc200 <col:4, line:3987:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x563ea82cc2b0 <line:3986:17, line:3987:3>
|   |   |-TextComment 0x563ea82cc260 <line:3986:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x563ea82cc280 <line:3987:3> Text=" "
|   |-ParamCommandComment 0x563ea82cc2d0 <col:4, col:64> [in] implicitly Param="sem" ParamIndex=2
|   | `-ParagraphComment 0x563ea82cc360 <col:14, col:64>
|   |   `-TextComment 0x563ea82cc330 <col:14, col:64> Text=" Address of a semaphore, or NULL if none is needed."
|   |-ParagraphComment 0x563ea82cc3b0 <line:3989:3>
|   | `-TextComment 0x563ea82cc380 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82cc3d0 <col:4, line:3990:3> Name="return"
|   | `-ParagraphComment 0x563ea82cc450 <line:3989:11, line:3990:3>
|   |   |-TextComment 0x563ea82cc400 <line:3989:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82cc420 <line:3990:3> Text=" "
|   |-VerbatimLineComment 0x563ea82cc470 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x563ea82cc4e0 <line:3991:1>
|     `-TextComment 0x563ea82cc4b0 <col:1> Text=" "
|-FunctionDecl 0x563ea8232808 <line:4014:1, line:4015:36> line:4014:12 k_mbox_get 'int (struct k_mbox *, struct k_mbox_msg *, void *, s32_t)' extern
| |-ParmVarDecl 0x563ea8232550 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x563ea82325d8 <col:44, col:63> col:63 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x563ea8232650 <line:4015:9, col:15> col:15 buffer 'void *'
| |-ParmVarDecl 0x563ea82326c0 <col:23, col:29> col:29 timeout 's32_t':'int'
| `-FullComment 0x563ea82cce20 <line:3996:3, line:4013:1>
|   |-ParagraphComment 0x563ea82cc600 <line:3996:3>
|   | `-TextComment 0x563ea82cc5d0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82cc620 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x563ea82cc680 <col:10, col:36>
|   |   `-TextComment 0x563ea82cc650 <col:10, col:36> Text=" Receive a mailbox message."
|   |-ParagraphComment 0x563ea82cc770 <line:3998:3, line:3999:40>
|   | |-TextComment 0x563ea82cc6a0 <line:3998:3, col:40> Text=" This routine receives a message from "
|   | |-InlineCommandComment 0x563ea82cc6f0 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="mbox,"
|   | |-TextComment 0x563ea82cc710 <col:49, col:74> Text=" then optionally retrieves"
|   | `-TextComment 0x563ea82cc730 <line:3999:3, col:40> Text=" its data and disposes of the message."
|   |-ParagraphComment 0x563ea82cc7c0 <line:4001:3>
|   | `-TextComment 0x563ea82cc790 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82cc7e0 <col:4, line:4002:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x563ea82cc890 <line:4001:15, line:4002:3>
|   |   |-TextComment 0x563ea82cc840 <line:4001:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x563ea82cc860 <line:4002:3> Text=" "
|   |-ParamCommandComment 0x563ea82cc8b0 <col:4, line:4003:3> [in] implicitly Param="rx_msg" ParamIndex=1
|   | `-ParagraphComment 0x563ea82cc960 <line:4002:17, line:4003:3>
|   |   |-TextComment 0x563ea82cc910 <line:4002:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x563ea82cc930 <line:4003:3> Text=" "
|   |-ParamCommandComment 0x563ea82cc980 <col:4, line:4005:3> [in] implicitly Param="buffer" ParamIndex=2
|   | `-ParagraphComment 0x563ea82cca60 <line:4003:17, line:4005:3>
|   |   |-TextComment 0x563ea82cc9e0 <line:4003:17, col:77> Text=" Address of the buffer to receive data, or NULL to defer data"
|   |   |-TextComment 0x563ea82cca00 <line:4004:3, col:60> Text="               retrieval and message disposal until later."
|   |   `-TextComment 0x563ea82cca20 <line:4005:3> Text=" "
|   |-ParamCommandComment 0x563ea82cca80 <col:4, line:4007:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x563ea82ccb60 <line:4005:18, line:4007:32>
|   |   |-TextComment 0x563ea82ccae0 <line:4005:18, col:78> Text=" Non-negative waiting period for a message to be received (in"
|   |   |-TextComment 0x563ea82ccb00 <line:4006:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x563ea82ccb20 <line:4007:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x563ea82ccd10 <line:4009:3, line:4012:3>
|   | |-TextComment 0x563ea82ccb80 <line:4009:3> Text=" "
|   | |-InlineCommandComment 0x563ea82ccba0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82ccbc0 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x563ea82ccbe0 <line:4010:3> Text=" "
|   | |-InlineCommandComment 0x563ea82ccc00 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82ccc20 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x563ea82ccc40 <line:4011:3> Text=" "
|   | |-InlineCommandComment 0x563ea82ccc60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82ccc80 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x563ea82ccca0 <line:4012:3> Text=" "
|   |-VerbatimLineComment 0x563ea82ccd30 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x563ea82ccda0 <line:4013:1>
|     `-TextComment 0x563ea82ccd70 <col:1> Text=" "
|-FunctionDecl 0x563ea8232fc0 <line:4033:1, col:68> col:13 k_mbox_data_get 'void (struct k_mbox_msg *, void *)' extern
| |-ParmVarDecl 0x563ea8232920 <col:29, col:48> col:48 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x563ea8232ea8 <col:56, col:62> col:62 buffer 'void *'
| `-FullComment 0x563ea82cd430 <line:4018:3, line:4032:1>
|   |-ParagraphComment 0x563ea82ccec0 <line:4018:3>
|   | `-TextComment 0x563ea82cce90 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ccee0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x563ea82ccf40 <col:10, col:54>
|   |   `-TextComment 0x563ea82ccf10 <col:10, col:54> Text=" Retrieve mailbox message data into a buffer."
|   |-ParagraphComment 0x563ea82ccfb0 <line:4020:3, line:4021:57>
|   | |-TextComment 0x563ea82ccf60 <line:4020:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | `-TextComment 0x563ea82ccf80 <line:4021:3, col:57> Text=" its data into a buffer, then disposing of the message."
|   |-ParagraphComment 0x563ea82cd040 <line:4023:3, line:4024:31>
|   | |-TextComment 0x563ea82ccff0 <line:4023:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | `-TextComment 0x563ea82cd010 <line:4024:3, col:31> Text=" without retrieving its data."
|   |-ParagraphComment 0x563ea82cd090 <line:4026:3>
|   | `-TextComment 0x563ea82cd060 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82cd0b0 <col:4, line:4027:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x563ea82cd160 <line:4026:17, line:4027:3>
|   |   |-TextComment 0x563ea82cd110 <line:4026:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x563ea82cd130 <line:4027:3> Text=" "
|   |-ParamCommandComment 0x563ea82cd180 <col:4, line:4028:26> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x563ea82cd230 <line:4027:17, line:4028:26>
|   |   |-TextComment 0x563ea82cd1e0 <line:4027:17, col:74> Text=" Address of the buffer to receive data, or NULL to discard"
|   |   `-TextComment 0x563ea82cd200 <line:4028:3, col:26> Text="               the data."
|   |-ParagraphComment 0x563ea82cd280 <line:4030:3>
|   | `-TextComment 0x563ea82cd250 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82cd2a0 <col:4, line:4031:3> Name="return"
|   | `-ParagraphComment 0x563ea82cd320 <line:4030:11, line:4031:3>
|   |   |-TextComment 0x563ea82cd2d0 <line:4030:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82cd2f0 <line:4031:3> Text=" "
|   |-VerbatimLineComment 0x563ea82cd340 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x563ea82cd3b0 <line:4032:1>
|     `-TextComment 0x563ea82cd380 <col:1> Text=" "
|-FunctionDecl 0x563ea82333e8 <line:4066:1, line:4068:46> line:4066:12 k_mbox_data_block_get 'int (struct k_mbox_msg *, struct k_mem_pool *, struct k_mem_block *, s32_t)' extern
| |-ParmVarDecl 0x563ea82330c0 <col:34, col:53> col:53 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x563ea8233148 <line:4067:6, col:25> col:25 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x563ea8233230 <line:4068:6, col:26> col:26 block 'struct k_mem_block *'
| |-ParmVarDecl 0x563ea82332a0 <col:33, col:39> col:39 timeout 's32_t':'int'
| `-FullComment 0x563ea82cde60 <line:4036:3, line:4065:1>
|   |-ParagraphComment 0x563ea82cd4d0 <line:4036:3>
|   | `-TextComment 0x563ea82cd4a0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82cd4f0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x563ea82cd550 <col:10, col:65>
|   |   `-TextComment 0x563ea82cd520 <col:10, col:65> Text=" Retrieve mailbox message data into a memory pool block."
|   |-ParagraphComment 0x563ea82cd640 <line:4038:3, line:4042:42>
|   | |-TextComment 0x563ea82cd570 <line:4038:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | |-TextComment 0x563ea82cd590 <line:4039:3, col:68> Text=" its data into a memory pool block, then disposing of the message."
|   | |-TextComment 0x563ea82cd5b0 <line:4040:3, col:71> Text=" The memory pool block that results from successful retrieval must be"
|   | |-TextComment 0x563ea82cd5d0 <line:4041:3, col:71> Text=" returned to the pool once the data has been processed, even in cases"
|   | `-TextComment 0x563ea82cd5f0 <line:4042:3, col:42> Text=" where zero bytes of data are retrieved."
|   |-ParagraphComment 0x563ea82cd6e0 <line:4044:3, line:4046:33>
|   | |-TextComment 0x563ea82cd660 <line:4044:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | |-TextComment 0x563ea82cd680 <line:4045:3, col:73> Text=" without retrieving its data. In this case there is no need to return a"
|   | `-TextComment 0x563ea82cd6a0 <line:4046:3, col:33> Text=" memory pool block to the pool."
|   |-ParagraphComment 0x563ea82cd7d0 <line:4048:3, line:4052:55>
|   | |-TextComment 0x563ea82cd700 <line:4048:3, col:74> Text=" This routine allocates a new memory pool block for the data only if the"
|   | |-TextComment 0x563ea82cd720 <line:4049:3, col:78> Text=" data is not already in one. If a new block cannot be allocated, the routine"
|   | |-TextComment 0x563ea82cd740 <line:4050:3, col:74> Text=" returns a failure code and the received message is left unchanged. This"
|   | |-TextComment 0x563ea82cd760 <line:4051:3, col:79> Text=" permits the caller to reattempt data retrieval at a later time or to dispose"
|   | `-TextComment 0x563ea82cd780 <line:4052:3, col:55> Text=" of the received message without retrieving its data."
|   |-ParagraphComment 0x563ea82cd820 <line:4054:3>
|   | `-TextComment 0x563ea82cd7f0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82cd840 <col:4, line:4055:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x563ea82cd8f0 <line:4054:17, line:4055:3>
|   |   |-TextComment 0x563ea82cd8a0 <line:4054:17, col:57> Text=" Address of a receive message descriptor."
|   |   `-TextComment 0x563ea82cd8c0 <line:4055:3> Text=" "
|   |-ParamCommandComment 0x563ea82cd910 <col:4, line:4056:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x563ea82cd9c0 <line:4055:15, line:4056:3>
|   |   |-TextComment 0x563ea82cd970 <line:4055:15, col:63> Text=" Address of memory pool, or NULL to discard data."
|   |   `-TextComment 0x563ea82cd990 <line:4056:3> Text=" "
|   |-ParamCommandComment 0x563ea82cd9e0 <col:4, line:4057:3> [in] implicitly Param="block" ParamIndex=2
|   | `-ParagraphComment 0x563ea82cda90 <line:4056:16, line:4057:3>
|   |   |-TextComment 0x563ea82cda40 <line:4056:16, col:67> Text=" Address of the area to hold memory pool block info."
|   |   `-TextComment 0x563ea82cda60 <line:4057:3> Text=" "
|   |-ParamCommandComment 0x563ea82cdab0 <col:4, line:4059:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x563ea82cdb90 <line:4057:18, line:4059:32>
|   |   |-TextComment 0x563ea82cdb10 <line:4057:18, col:77> Text=" Non-negative waiting period to wait for a memory pool block"
|   |   |-TextComment 0x563ea82cdb30 <line:4058:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x563ea82cdb50 <line:4059:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x563ea82cdd40 <line:4061:3, line:4064:3>
|   | |-TextComment 0x563ea82cdbb0 <line:4061:3> Text=" "
|   | |-InlineCommandComment 0x563ea82cdbd0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82cdbf0 <col:11, col:28> Text=" 0 Data retrieved."
|   | |-TextComment 0x563ea82cdc10 <line:4062:3> Text=" "
|   | |-InlineCommandComment 0x563ea82cdc30 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82cdc50 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x563ea82cdc70 <line:4063:3> Text=" "
|   | |-InlineCommandComment 0x563ea82cdc90 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82cdcb0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x563ea82cdcd0 <line:4064:3> Text=" "
|   |-VerbatimLineComment 0x563ea82cdd60 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x563ea82cddd0 <line:4065:1>
|     `-TextComment 0x563ea82cdda0 <col:1> Text=" "
|-RecordDecl 0x563ea8233538 prev 0x563ea81f30b0 <line:4079:1, line:4095:1> line:4079:8 struct k_pipe definition
| |-FullComment 0x563ea82cdf30 <line:4078:4, col:19>
| | `-ParagraphComment 0x563ea82cdf00 <col:4, col:19>
| |   `-TextComment 0x563ea82cded0 <col:4, col:19> Text=" Pipe Structure "
| |-FieldDecl 0x563ea82335d8 <line:4080:2, col:17> col:17 buffer 'unsigned char *'
| | `-FullComment 0x563ea82ce000 <col:38, col:63>
| |   `-ParagraphComment 0x563ea82cdfd0 <col:38, col:63>
| |     `-TextComment 0x563ea82cdfa0 <col:38, col:63> Text=" Pipe buffer: may be NULL "
| |-FieldDecl 0x563ea8233658 <line:4081:2, col:17> col:17 size 'size_t':'unsigned long'
| | `-FullComment 0x563ea82ce0d0 <col:38, col:50>
| |   `-ParagraphComment 0x563ea82ce0a0 <col:38, col:50>
| |     `-TextComment 0x563ea82ce070 <col:38, col:50> Text=" Buffer size "
| |-FieldDecl 0x563ea82336d8 <line:4082:2, col:17> col:17 bytes_used 'size_t':'unsigned long'
| | `-FullComment 0x563ea82ce1a0 <col:38, col:61>
| |   `-ParagraphComment 0x563ea82ce170 <col:38, col:61>
| |     `-TextComment 0x563ea82ce140 <col:38, col:61> Text=" # bytes used in buffer "
| |-FieldDecl 0x563ea8233758 <line:4083:2, col:17> col:17 read_index 'size_t':'unsigned long'
| | `-FullComment 0x563ea82ce270 <col:38, col:67>
| |   `-ParagraphComment 0x563ea82ce240 <col:38, col:67>
| |     `-TextComment 0x563ea82ce210 <col:38, col:67> Text=" Where in buffer to read from "
| |-FieldDecl 0x563ea82337d8 <line:4084:2, col:17> col:17 write_index 'size_t':'unsigned long'
| | `-FullComment 0x563ea82ce340 <col:38, col:63>
| |   `-ParagraphComment 0x563ea82ce310 <col:38, col:63>
| |     `-TextComment 0x563ea82ce2e0 <col:38, col:63> Text=" Where in buffer to write "
| |-FieldDecl 0x563ea8233868 <line:4085:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x563ea82ce410 <col:31, col:52>
| |   `-ParagraphComment 0x563ea82ce3e0 <col:31, col:52>
| |     `-TextComment 0x563ea82ce3b0 <col:31, col:52> Text=" Synchronization lock "
| |-RecordDecl 0x563ea82338d8 <line:4087:2, line:4090:2> line:4087:2 struct definition
| | |-FieldDecl 0x563ea8233990 <line:4088:3, col:18> col:18 readers '_wait_q_t':'_wait_q_t'
| | | `-FullComment 0x563ea82ce4e0 <col:31, col:49>
| | |   `-ParagraphComment 0x563ea82ce4b0 <col:31, col:49>
| | |     `-TextComment 0x563ea82ce480 <col:31, col:49> Text=" Reader wait queue "
| | `-FieldDecl 0x563ea8233a18 <line:4089:3, col:18> col:18 writers '_wait_q_t':'_wait_q_t'
| |   `-FullComment 0x563ea82ce5b0 <col:31, col:49>
| |     `-ParagraphComment 0x563ea82ce580 <col:31, col:49>
| |       `-TextComment 0x563ea82ce550 <col:31, col:49> Text=" Writer wait queue "
| |-FieldDecl 0x563ea8233ae0 <line:4087:2, line:4090:4> col:4 wait_q 'struct (anonymous struct at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)':'struct k_pipe::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)'
| `-FieldDecl 0x563ea8233b38 <line:4094:2, col:14> col:14 flags 'u8_t':'unsigned char'
|   `-FullComment 0x563ea82ce680 <col:26, col:32>
|     `-ParagraphComment 0x563ea82ce650 <col:26, col:32>
|       `-TextComment 0x563ea82ce620 <col:26, col:32> Text=" Flags "
|-FunctionDecl 0x563ea82359e0 <line:4158:1, col:73> col:6 k_pipe_init 'void (struct k_pipe *, unsigned char *, size_t)'
| |-ParmVarDecl 0x563ea8233d50 <col:18, col:33> col:33 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x563ea8233dc8 <col:39, col:54> col:54 buffer 'unsigned char *'
| |-ParmVarDecl 0x563ea82358b0 <col:62, col:69> col:69 size 'size_t':'unsigned long'
| `-FullComment 0x563ea82cece0 <line:4145:3, line:4157:1>
|   |-ParagraphComment 0x563ea82ce720 <line:4145:3>
|   | `-TextComment 0x563ea82ce6f0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ce740 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x563ea82ce7a0 <col:10, col:28>
|   |   `-TextComment 0x563ea82ce770 <col:10, col:28> Text=" Initialize a pipe."
|   |-ParagraphComment 0x563ea82ce7f0 <line:4147:3, col:66>
|   | `-TextComment 0x563ea82ce7c0 <col:3, col:66> Text=" This routine initializes a pipe object, prior to its first use."
|   |-ParagraphComment 0x563ea82ce840 <line:4149:3>
|   | `-TextComment 0x563ea82ce810 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82ce860 <col:4, line:4150:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x563ea82ce910 <line:4149:15, line:4150:3>
|   |   |-TextComment 0x563ea82ce8c0 <line:4149:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x563ea82ce8e0 <line:4150:3> Text=" "
|   |-ParamCommandComment 0x563ea82ce930 <col:4, line:4152:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x563ea82cea10 <line:4150:17, line:4152:3>
|   |   |-TextComment 0x563ea82ce990 <line:4150:17, col:77> Text=" Address of the pipe's ring buffer, or NULL if no ring buffer"
|   |   |-TextComment 0x563ea82ce9b0 <line:4151:3, col:25> Text="               is used."
|   |   `-TextComment 0x563ea82ce9d0 <line:4152:3> Text=" "
|   |-ParamCommandComment 0x563ea82cea30 <col:4, line:4153:30> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x563ea82ceae0 <line:4152:15, line:4153:30>
|   |   |-TextComment 0x563ea82cea90 <line:4152:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   `-TextComment 0x563ea82ceab0 <line:4153:3, col:30> Text="             buffer is used."
|   |-ParagraphComment 0x563ea82ceb30 <line:4155:3>
|   | `-TextComment 0x563ea82ceb00 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ceb50 <col:4, line:4156:3> Name="return"
|   | `-ParagraphComment 0x563ea82cebd0 <line:4155:11, line:4156:3>
|   |   |-TextComment 0x563ea82ceb80 <line:4155:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82ceba0 <line:4156:3> Text=" "
|   |-VerbatimLineComment 0x563ea82cebf0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x563ea82cec60 <line:4157:1>
|     `-TextComment 0x563ea82cec30 <col:1> Text=" "
|-FunctionDecl 0x563ea8235bf8 <line:4172:1, col:39> col:5 k_pipe_cleanup 'int (struct k_pipe *)'
| |-ParmVarDecl 0x563ea8235af0 <col:20, col:35> col:35 pipe 'struct k_pipe *'
| `-FullComment 0x563ea82cf1b0 <line:4161:3, line:4171:1>
|   |-ParagraphComment 0x563ea82ced80 <line:4161:3>
|   | `-TextComment 0x563ea82ced50 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82ceda0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x563ea82cee00 <col:10, col:43>
|   |   `-TextComment 0x563ea82cedd0 <col:10, col:43> Text=" Release a pipe's allocated buffer"
|   |-ParagraphComment 0x563ea82ceea0 <line:4163:3, line:4165:46>
|   | |-TextComment 0x563ea82cee20 <line:4163:3, col:64> Text=" If a pipe object was given a dynamically allocated buffer via"
|   | |-TextComment 0x563ea82cee40 <line:4164:3, col:69> Text=" k_pipe_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x563ea82cee60 <line:4165:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x563ea82ceef0 <line:4167:3>
|   | `-TextComment 0x563ea82ceec0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82cef10 <col:4, line:4170:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x563ea82cf0c0 <line:4167:15, line:4170:3>
|   |   |-TextComment 0x563ea82cef70 <line:4167:15, col:35> Text=" Address of the pipe."
|   |   |-TextComment 0x563ea82cef90 <line:4168:3> Text=" "
|   |   |-InlineCommandComment 0x563ea82cefb0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x563ea82cefd0 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x563ea82cf000 <line:4169:3> Text=" "
|   |   |-InlineCommandComment 0x563ea82cf020 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x563ea82cf040 <col:11, col:37> Text=" -EAGAIN nothing to cleanup"
|   |   `-TextComment 0x563ea82cf060 <line:4170:3> Text=" "
|   |-VerbatimLineComment 0x563ea82cf0e0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x563ea82cf150 <line:4171:1>
|     `-TextComment 0x563ea82cf120 <col:1> Text=" "
|-FunctionDecl 0x563ea8235e78 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4190:65> col:15 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x563ea8235cf0 <col:33, col:48> col:48 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x563ea8235d60 <col:54, col:61> col:61 size 'size_t':'unsigned long'
| `-FullComment 0x563ea82cf7d0 <line:4175:3, line:4189:1>
|   |-ParagraphComment 0x563ea82cf250 <line:4175:3>
|   | `-TextComment 0x563ea82cf220 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82cf270 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x563ea82cf2d0 <col:10, col:56>
|   |   `-TextComment 0x563ea82cf2a0 <col:10, col:56> Text=" Initialize a pipe and allocate a buffer for it"
|   |-ParagraphComment 0x563ea82cf370 <line:4177:3, line:4179:74>
|   | |-TextComment 0x563ea82cf2f0 <line:4177:3, col:76> Text=" Storage for the buffer region will be allocated from the calling thread's"
|   | |-TextComment 0x563ea82cf310 <line:4178:3, col:77> Text=" resource pool. This memory will be released if k_pipe_cleanup() is called,"
|   | `-TextComment 0x563ea82cf330 <line:4179:3, col:74> Text=" or userspace is enabled and the pipe object loses all references to it."
|   |-ParagraphComment 0x563ea82cf3c0 <line:4181:3, col:69>
|   | `-TextComment 0x563ea82cf390 <col:3, col:69> Text=" This function should only be called on uninitialized pipe objects."
|   |-ParagraphComment 0x563ea82cf410 <line:4183:3>
|   | `-TextComment 0x563ea82cf3e0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82cf430 <col:4, line:4184:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x563ea82cf4e0 <line:4183:15, line:4184:3>
|   |   |-TextComment 0x563ea82cf490 <line:4183:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x563ea82cf4b0 <line:4184:3> Text=" "
|   |-ParamCommandComment 0x563ea82cf500 <col:4, line:4188:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x563ea82cf6d0 <line:4184:15, line:4188:3>
|   |   |-TextComment 0x563ea82cf560 <line:4184:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   |-TextComment 0x563ea82cf580 <line:4185:3, col:30> Text="             buffer is used."
|   |   |-TextComment 0x563ea82cf5a0 <line:4186:3> Text=" "
|   |   |-InlineCommandComment 0x563ea82cf5c0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x563ea82cf5e0 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x563ea82cf600 <line:4187:3> Text=" "
|   |   |-InlineCommandComment 0x563ea82cf620 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x563ea82cf640 <col:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x563ea82cf660 <line:4188:3> Text=" "
|   |-VerbatimLineComment 0x563ea82cf6f0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x563ea82cf760 <line:4189:1>
|     `-TextComment 0x563ea82cf730 <col:1> Text=" "
|-FunctionDecl 0x563ea8236368 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4214:35> line:4212:15 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x563ea8235f80 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x563ea8235ff8 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x563ea8236068 <line:4213:5, col:12> col:12 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea8236108 <col:28, col:36> col:36 bytes_written 'size_t *'
| |-ParmVarDecl 0x563ea8236178 <line:4214:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea82361e8 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x563ea82d0340 <line:4193:3, line:4211:1>
|   |-ParagraphComment 0x563ea82cf870 <line:4193:3>
|   | `-TextComment 0x563ea82cf840 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82cf890 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x563ea82cf8f0 <col:10, col:31>
|   |   `-TextComment 0x563ea82cf8c0 <col:10, col:31> Text=" Write data to a pipe."
|   |-ParagraphComment 0x563ea82cfa10 <line:4195:3, col:66>
|   | |-TextComment 0x563ea82cf910 <col:3, col:29> Text=" This routine writes up to "
|   | |-InlineCommandComment 0x563ea82cf960 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bytes_to_write"
|   | |-TextComment 0x563ea82cf980 <col:47, col:64> Text=" bytes of data to "
|   | `-InlineCommandComment 0x563ea82cf9d0 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x563ea82cfa60 <line:4197:3>
|   | `-TextComment 0x563ea82cfa30 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82cfa80 <col:4, line:4198:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x563ea82cfb30 <line:4197:15, line:4198:3>
|   |   |-TextComment 0x563ea82cfae0 <line:4197:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x563ea82cfb00 <line:4198:3> Text=" "
|   |-ParamCommandComment 0x563ea82cfb50 <col:4, line:4199:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x563ea82cfc00 <line:4198:15, line:4199:3>
|   |   |-TextComment 0x563ea82cfbb0 <line:4198:15, col:40> Text=" Address of data to write."
|   |   `-TextComment 0x563ea82cfbd0 <line:4199:3> Text=" "
|   |-ParamCommandComment 0x563ea82cfc20 <col:4, line:4200:3> [in] implicitly Param="bytes_to_write" ParamIndex=2
|   | `-ParagraphComment 0x563ea82cfcd0 <line:4199:25, line:4200:3>
|   |   |-TextComment 0x563ea82cfc80 <line:4199:25, col:49> Text=" Size of data (in bytes)."
|   |   `-TextComment 0x563ea82cfca0 <line:4200:3> Text=" "
|   |-ParamCommandComment 0x563ea82cfcf0 <col:4, line:4201:3> [in] implicitly Param="bytes_written" ParamIndex=3
|   | `-ParagraphComment 0x563ea82cfda0 <line:4200:24, line:4201:3>
|   |   |-TextComment 0x563ea82cfd50 <line:4200:24, col:76> Text=" Address of area to hold the number of bytes written."
|   |   `-TextComment 0x563ea82cfd70 <line:4201:3> Text=" "
|   |-ParamCommandComment 0x563ea82cfdc0 <col:4, line:4202:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x563ea82cfe70 <line:4201:19, line:4202:3>
|   |   |-TextComment 0x563ea82cfe20 <line:4201:19, col:52> Text=" Minimum number of bytes to write."
|   |   `-TextComment 0x563ea82cfe40 <line:4202:3> Text=" "
|   |-ParamCommandComment 0x563ea82cfe90 <col:4, line:4204:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x563ea82cff70 <line:4202:18, line:4204:32>
|   |   |-TextComment 0x563ea82cfef0 <line:4202:18, col:80> Text=" Non-negative waiting period to wait for the data to be written"
|   |   |-TextComment 0x563ea82cff10 <line:4203:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x563ea82cff30 <line:4204:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x563ea82d0220 <line:4206:3, line:4210:3>
|   | |-TextComment 0x563ea82cff90 <line:4206:3> Text=" "
|   | |-InlineCommandComment 0x563ea82cffb0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82cffd0 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x563ea82d0020 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x563ea82d0040 <col:34, col:61> Text=" bytes of data were written."
|   | |-TextComment 0x563ea82d0060 <line:4207:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d0080 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d00a0 <col:11, col:71> Text=" -EIO Returned without waiting; zero data bytes were written."
|   | |-TextComment 0x563ea82d00c0 <line:4208:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d00e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d0100 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x563ea82d0150 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x563ea82d0170 <line:4209:3, col:53> Text="                 minus one data bytes were written."
|   | `-TextComment 0x563ea82d0190 <line:4210:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d0240 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x563ea82d02b0 <line:4211:1>
|     `-TextComment 0x563ea82d0280 <col:1> Text=" "
|-FunctionDecl 0x563ea8236780 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4239:35> line:4237:15 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x563ea8236490 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x563ea8236508 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x563ea8236578 <line:4238:5, col:12> col:12 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea82365e8 <col:27, col:35> col:35 bytes_read 'size_t *'
| |-ParmVarDecl 0x563ea8236658 <line:4239:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea82366c8 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x563ea82d0f30 <line:4217:3, line:4236:1>
|   |-ParagraphComment 0x563ea82d03e0 <line:4217:3>
|   | `-TextComment 0x563ea82d03b0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d0400 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x563ea82d0460 <col:10, col:32>
|   |   `-TextComment 0x563ea82d0430 <col:10, col:32> Text=" Read data from a pipe."
|   |-ParagraphComment 0x563ea82d0580 <line:4219:3, col:66>
|   | |-TextComment 0x563ea82d0480 <col:3, col:28> Text=" This routine reads up to "
|   | |-InlineCommandComment 0x563ea82d04d0 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="bytes_to_read"
|   | |-TextComment 0x563ea82d04f0 <col:45, col:64> Text=" bytes of data from "
|   | `-InlineCommandComment 0x563ea82d0540 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x563ea82d05d0 <line:4221:3>
|   | `-TextComment 0x563ea82d05a0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d05f0 <col:4, line:4222:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d06a0 <line:4221:15, line:4222:3>
|   |   |-TextComment 0x563ea82d0650 <line:4221:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x563ea82d0670 <line:4222:3> Text=" "
|   |-ParamCommandComment 0x563ea82d06c0 <col:4, line:4223:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x563ea82d0770 <line:4222:15, line:4223:3>
|   |   |-TextComment 0x563ea82d0720 <line:4222:15, col:56> Text=" Address to place the data read from pipe."
|   |   `-TextComment 0x563ea82d0740 <line:4223:3> Text=" "
|   |-ParamCommandComment 0x563ea82d0790 <col:4, line:4224:3> [in] implicitly Param="bytes_to_read" ParamIndex=2
|   | `-ParagraphComment 0x563ea82d0840 <line:4223:24, line:4224:3>
|   |   |-TextComment 0x563ea82d07f0 <line:4223:24, col:61> Text=" Maximum number of data bytes to read."
|   |   `-TextComment 0x563ea82d0810 <line:4224:3> Text=" "
|   |-ParamCommandComment 0x563ea82d0860 <col:4, line:4225:3> [in] implicitly Param="bytes_read" ParamIndex=3
|   | `-ParagraphComment 0x563ea82d0910 <line:4224:21, line:4225:3>
|   |   |-TextComment 0x563ea82d08c0 <line:4224:21, col:70> Text=" Address of area to hold the number of bytes read."
|   |   `-TextComment 0x563ea82d08e0 <line:4225:3> Text=" "
|   |-ParamCommandComment 0x563ea82d0930 <col:4, line:4226:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x563ea82d09e0 <line:4225:19, line:4226:3>
|   |   |-TextComment 0x563ea82d0990 <line:4225:19, col:56> Text=" Minimum number of data bytes to read."
|   |   `-TextComment 0x563ea82d09b0 <line:4226:3> Text=" "
|   |-ParamCommandComment 0x563ea82d0a00 <col:4, line:4228:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x563ea82d0ae0 <line:4226:18, line:4228:32>
|   |   |-TextComment 0x563ea82d0a60 <line:4226:18, col:77> Text=" Non-negative waiting period to wait for the data to be read"
|   |   |-TextComment 0x563ea82d0a80 <line:4227:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x563ea82d0aa0 <line:4228:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x563ea82d0e10 <line:4230:3, line:4235:3>
|   | |-TextComment 0x563ea82d0b00 <line:4230:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d0b20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d0b40 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x563ea82d0b90 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x563ea82d0bb0 <col:34, col:58> Text=" bytes of data were read."
|   | |-TextComment 0x563ea82d0bd0 <line:4231:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d0bf0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d0c10 <col:11, col:46> Text=" -EINVAL invalid parameters supplied"
|   | |-TextComment 0x563ea82d0c30 <line:4232:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d0c50 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d0c70 <col:11, col:68> Text=" -EIO Returned without waiting; zero data bytes were read."
|   | |-TextComment 0x563ea82d0c90 <line:4233:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d0cb0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d0cd0 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x563ea82d0d20 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x563ea82d0d40 <line:4234:3, col:50> Text="                 minus one data bytes were read."
|   | `-TextComment 0x563ea82d0d60 <line:4235:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d0e30 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x563ea82d0ea0 <line:4236:1>
|     `-TextComment 0x563ea82d0e70 <col:1> Text=" "
|-FunctionDecl 0x563ea8236b80 <line:4256:1, line:4257:39> line:4256:13 k_pipe_block_put 'void (struct k_pipe *, struct k_mem_block *, size_t, struct k_sem *)' extern
| |-ParmVarDecl 0x563ea82368c0 <col:30, col:45> col:45 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x563ea8236948 <col:51, col:71> col:71 block 'struct k_mem_block *'
| |-ParmVarDecl 0x563ea82369b8 <line:4257:9, col:16> col:16 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea8236a40 <col:22, col:36> col:36 sem 'struct k_sem *'
| `-FullComment 0x563ea82d17d0 <line:4242:3, line:4255:1>
|   |-ParagraphComment 0x563ea82d0fd0 <line:4242:3>
|   | `-TextComment 0x563ea82d0fa0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d1010 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x563ea82d1070 <col:10, col:39>
|   |   `-TextComment 0x563ea82d1040 <col:10, col:39> Text=" Write memory block to a pipe."
|   |-ParagraphComment 0x563ea82d1260 <line:4244:3, line:4246:79>
|   | |-TextComment 0x563ea82d1090 <line:4244:3, col:63> Text=" This routine writes the data contained in a memory block to "
|   | |-InlineCommandComment 0x563ea82d10e0 <col:64, col:65> Name="a" RenderEmphasized Arg[0]="pipe."
|   | |-TextComment 0x563ea82d1100 <line:4245:3, col:74> Text=" Once all of the data in the block has been written to the pipe, it will"
|   | |-TextComment 0x563ea82d1120 <line:4246:3, col:25> Text=" free the memory block "
|   | |-InlineCommandComment 0x563ea82d1170 <col:26, col:27> Name="a" RenderEmphasized Arg[0]="block"
|   | |-TextComment 0x563ea82d1190 <col:34, col:57> Text=" and give the semaphore "
|   | |-InlineCommandComment 0x563ea82d11e0 <col:58, col:59> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x563ea82d1200 <col:64, col:79> Text=" (if specified)."
|   |-ParagraphComment 0x563ea82d12b0 <line:4248:3>
|   | `-TextComment 0x563ea82d1280 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d12d0 <col:4, line:4249:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d1380 <line:4248:15, line:4249:3>
|   |   |-TextComment 0x563ea82d1330 <line:4248:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x563ea82d1350 <line:4249:3> Text=" "
|   |-ParamCommandComment 0x563ea82d13a0 <col:4, line:4250:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x563ea82d1450 <line:4249:16, line:4250:3>
|   |   |-TextComment 0x563ea82d1400 <line:4249:16, col:52> Text=" Memory block containing data to send"
|   |   `-TextComment 0x563ea82d1420 <line:4250:3> Text=" "
|   |-ParamCommandComment 0x563ea82d1470 <col:4, line:4251:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x563ea82d1520 <line:4250:15, line:4251:3>
|   |   |-TextComment 0x563ea82d14d0 <line:4250:15, col:59> Text=" Number of data bytes in memory block to send"
|   |   `-TextComment 0x563ea82d14f0 <line:4251:3> Text=" "
|   |-ParamCommandComment 0x563ea82d1540 <col:4, col:61> [in] implicitly Param="sem" ParamIndex=3
|   | `-ParagraphComment 0x563ea82d15d0 <col:14, col:61>
|   |   `-TextComment 0x563ea82d15a0 <col:14, col:61> Text=" Semaphore to signal upon completion (else NULL)"
|   |-ParagraphComment 0x563ea82d1620 <line:4253:3>
|   | `-TextComment 0x563ea82d15f0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d1640 <col:4, line:4254:3> Name="return"
|   | `-ParagraphComment 0x563ea82d16c0 <line:4253:11, line:4254:3>
|   |   |-TextComment 0x563ea82d1670 <line:4253:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82d1690 <line:4254:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d16e0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x563ea82d1750 <line:4255:1>
|     `-TextComment 0x563ea82d1720 <col:1> Text=" "
|-RecordDecl 0x563ea8236c98 prev 0x563ea81f3420 <line:4265:1, line:4275:1> line:4265:8 struct k_mem_slab definition
| |-FullComment 0x563ea82d18f0 <line:4262:3, col:24>
| | `-ParagraphComment 0x563ea82d18c0 <col:3, col:24>
| |   |-TextComment 0x563ea82d1840 <col:3> Text=" "
| |   |-InlineCommandComment 0x563ea82d1860 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x563ea82d1880 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x563ea8236d30 <line:4266:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x563ea8236d88 <line:4267:2, col:8> col:8 referenced num_blocks 'u32_t':'unsigned int'
| |-FieldDecl 0x563ea8236de0 <line:4268:2, col:9> col:9 block_size 'size_t':'unsigned long'
| |-FieldDecl 0x563ea8236e40 <line:4269:2, col:8> col:8 buffer 'char *'
| |-FieldDecl 0x563ea8236ea0 <line:4270:2, col:8> col:8 free_list 'char *'
| `-FieldDecl 0x563ea8236ef8 <line:4271:2, col:8> col:8 referenced num_used 'u32_t':'unsigned int'
|-FunctionDecl 0x563ea8237358 <line:4351:1, line:4352:42> line:4351:12 k_mem_slab_init 'int (struct k_mem_slab *, void *, size_t, u32_t)' extern
| |-ParmVarDecl 0x563ea82370b0 <col:28, col:47> col:47 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x563ea8237128 <col:53, col:59> col:59 buffer 'void *'
| |-ParmVarDecl 0x563ea8237198 <line:4352:7, col:14> col:14 block_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea8237208 <col:26, col:32> col:32 num_blocks 'u32_t':'unsigned int'
| `-FullComment 0x563ea82d22e0 <line:4330:3, line:4350:1>
|   |-ParagraphComment 0x563ea82d1990 <line:4330:3>
|   | `-TextComment 0x563ea82d1960 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d19b0 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x563ea82d1a10 <col:10, col:35>
|   |   `-TextComment 0x563ea82d19e0 <col:10, col:35> Text=" Initialize a memory slab."
|   |-ParagraphComment 0x563ea82d1a60 <line:4332:3, col:53>
|   | `-TextComment 0x563ea82d1a30 <col:3, col:53> Text=" Initializes a memory slab, prior to its first use."
|   |-ParagraphComment 0x563ea82d1cf0 <line:4334:3, line:4339:51>
|   | |-TextComment 0x563ea82d1a80 <line:4334:3, col:37> Text=" The memory slab's buffer contains "
|   | |-InlineCommandComment 0x563ea82d1ad0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="slab_num_blocks"
|   | |-TextComment 0x563ea82d1af0 <col:56, col:69> Text=" memory blocks"
|   | |-TextComment 0x563ea82d1b10 <line:4335:3, col:12> Text=" that are "
|   | |-InlineCommandComment 0x563ea82d1b60 <col:13, col:14> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | |-TextComment 0x563ea82d1b80 <col:31, col:75> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x563ea82d1ba0 <line:4336:3, col:68> Text=" N-byte boundary matching a word boundary, where N is a power of 2"
|   | |-TextComment 0x563ea82d1bc0 <line:4337:3, col:42> Text=" (i.e. 4 on 32-bit systems, 8, 16, ...)."
|   | |-TextComment 0x563ea82d1be0 <line:4338:3, col:74> Text=" To ensure that each memory block is similarly aligned to this boundary,"
|   | |-TextComment 0x563ea82d1c00 <line:4339:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d1c50 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | `-TextComment 0x563ea82d1c70 <col:22, col:51> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x563ea82d1d40 <line:4341:3>
|   | `-TextComment 0x563ea82d1d10 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d1d60 <col:4, line:4342:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d1e10 <line:4341:15, line:4342:3>
|   |   |-TextComment 0x563ea82d1dc0 <line:4341:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x563ea82d1de0 <line:4342:3> Text=" "
|   |-ParamCommandComment 0x563ea82d1e30 <col:4, line:4343:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x563ea82d1ee0 <line:4342:17, line:4343:3>
|   |   |-TextComment 0x563ea82d1e90 <line:4342:17, col:62> Text=" Pointer to buffer used for the memory blocks."
|   |   `-TextComment 0x563ea82d1eb0 <line:4343:3> Text=" "
|   |-ParamCommandComment 0x563ea82d1f00 <col:4, line:4344:3> [in] implicitly Param="block_size" ParamIndex=2
|   | `-ParagraphComment 0x563ea82d1fb0 <line:4343:21, line:4344:3>
|   |   |-TextComment 0x563ea82d1f60 <line:4343:21, col:58> Text=" Size of each memory block (in bytes)."
|   |   `-TextComment 0x563ea82d1f80 <line:4344:3> Text=" "
|   |-ParamCommandComment 0x563ea82d1fd0 <col:4, col:45> [in] implicitly Param="num_blocks" ParamIndex=3
|   | `-ParagraphComment 0x563ea82d2060 <col:21, col:45>
|   |   `-TextComment 0x563ea82d2030 <col:21, col:45> Text=" Number of memory blocks."
|   |-ParagraphComment 0x563ea82d2170 <line:4346:3, line:4347:40>
|   | |-TextComment 0x563ea82d2080 <line:4346:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d20a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d20c0 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x563ea82d20e0 <line:4347:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d2100 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x563ea82d2120 <col:11, col:40> Text=" -EINVAL invalid data supplied"
|   |-ParagraphComment 0x563ea82d21c0 <line:4349:3>
|   | `-TextComment 0x563ea82d2190 <col:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d21e0 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x563ea82d2250 <line:4350:1>
|     `-TextComment 0x563ea82d2220 <col:1> Text=" "
|-FunctionDecl 0x563ea8237698 <line:4372:1, line:4373:21> line:4372:12 k_mem_slab_alloc 'int (struct k_mem_slab *, void **, s32_t)' extern
| |-ParmVarDecl 0x563ea8237470 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x563ea82374e8 <col:54, col:61> col:61 mem 'void **'
| |-ParmVarDecl 0x563ea8237558 <line:4373:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x563ea82d2af0 <line:4355:3, line:4371:1>
|   |-ParagraphComment 0x563ea82d2380 <line:4355:3>
|   | `-TextComment 0x563ea82d2350 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d23a0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x563ea82d2400 <col:10, col:45>
|   |   `-TextComment 0x563ea82d23d0 <col:10, col:45> Text=" Allocate memory from a memory slab."
|   |-ParagraphComment 0x563ea82d2450 <line:4357:3, col:60>
|   | `-TextComment 0x563ea82d2420 <col:3, col:60> Text=" This routine allocates a memory block from a memory slab."
|   |-ParagraphComment 0x563ea82d24a0 <line:4359:3>
|   | `-TextComment 0x563ea82d2470 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d24c0 <col:4, line:4360:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d2570 <line:4359:15, line:4360:3>
|   |   |-TextComment 0x563ea82d2520 <line:4359:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x563ea82d2540 <line:4360:3> Text=" "
|   |-ParamCommandComment 0x563ea82d2590 <col:4, line:4361:3> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x563ea82d2640 <line:4360:14, line:4361:3>
|   |   |-TextComment 0x563ea82d25f0 <line:4360:14, col:44> Text=" Pointer to block address area."
|   |   `-TextComment 0x563ea82d2610 <line:4361:3> Text=" "
|   |-ParamCommandComment 0x563ea82d2660 <col:4, line:4363:52> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x563ea82d2740 <line:4361:18, line:4363:52>
|   |   |-TextComment 0x563ea82d26c0 <line:4361:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x563ea82d26e0 <line:4362:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x563ea82d2700 <line:4363:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x563ea82d29f0 <line:4365:3, line:4370:3>
|   | |-TextComment 0x563ea82d2760 <line:4365:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d2780 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d27a0 <col:11, col:68> Text=" 0 Memory allocated. The block address area pointed at by "
|   | |-InlineCommandComment 0x563ea82d27f0 <col:69, col:70> Name="a" RenderEmphasized Arg[0]="mem"
|   | |-TextComment 0x563ea82d2810 <line:4366:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x563ea82d2830 <line:4367:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d2850 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d2870 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x563ea82d2890 <line:4368:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d28b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d28d0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x563ea82d28f0 <line:4369:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d2910 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d2930 <col:11, col:40> Text=" -EINVAL Invalid data supplied"
|   | `-TextComment 0x563ea82d2950 <line:4370:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d2a10 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x563ea82d2a80 <line:4371:1>
|     `-TextComment 0x563ea82d2a50 <col:1> Text=" "
|-FunctionDecl 0x563ea82386a0 <line:4387:1, col:64> col:13 k_mem_slab_free 'void (struct k_mem_slab *, void **)' extern
| |-ParmVarDecl 0x563ea82377a0 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x563ea8237818 <col:54, col:61> col:61 mem 'void **'
| `-FullComment 0x563ea82d3070 <line:4376:3, line:4386:1>
|   |-ParagraphComment 0x563ea82d2b90 <line:4376:3>
|   | `-TextComment 0x563ea82d2b60 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d2bb0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x563ea82d2c10 <col:10, col:51>
|   |   `-TextComment 0x563ea82d2be0 <col:10, col:51> Text=" Free memory allocated from a memory slab."
|   |-ParagraphComment 0x563ea82d2c80 <line:4378:3, line:4379:26>
|   | |-TextComment 0x563ea82d2c30 <line:4378:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x563ea82d2c50 <line:4379:3, col:26> Text=" associated memory slab."
|   |-ParagraphComment 0x563ea82d2cd0 <line:4381:3>
|   | `-TextComment 0x563ea82d2ca0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d2cf0 <col:4, line:4382:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d2da0 <line:4381:15, line:4382:3>
|   |   |-TextComment 0x563ea82d2d50 <line:4381:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x563ea82d2d70 <line:4382:3> Text=" "
|   |-ParamCommandComment 0x563ea82d2dc0 <col:4, col:75> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x563ea82d2e50 <col:14, col:75>
|   |   `-TextComment 0x563ea82d2e20 <col:14, col:75> Text=" Pointer to block address area (as set by k_mem_slab_alloc())."
|   |-ParagraphComment 0x563ea82d2ea0 <line:4384:3>
|   | `-TextComment 0x563ea82d2e70 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d2ec0 <col:4, line:4385:3> Name="return"
|   | `-ParagraphComment 0x563ea82d2f40 <line:4384:11, line:4385:3>
|   |   |-TextComment 0x563ea82d2ef0 <line:4384:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82d2f10 <line:4385:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d2f60 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x563ea82d2fd0 <line:4386:1>
|     `-TextComment 0x563ea82d2fa0 <col:1> Text=" "
|-FunctionDecl 0x563ea82388a0 <line:4400:1, line:4403:1> line:4400:21 k_mem_slab_num_used_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x563ea82387a0 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x563ea8238a18 <line:4401:1, line:4403:1>
| | `-ReturnStmt 0x563ea82389d8 <line:4402:2, col:15>
| |   `-ImplicitCastExpr 0x563ea82389c0 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x563ea8238988 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_used 0x563ea8236ef8
| |       `-ImplicitCastExpr 0x563ea8238970 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |         `-DeclRefExpr 0x563ea8238948 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x563ea82387a0 'slab' 'struct k_mem_slab *'
| `-FullComment 0x563ea82d3550 <line:4390:3, line:4399:1>
|   |-ParagraphComment 0x563ea82d3110 <line:4390:3>
|   | `-TextComment 0x563ea82d30e0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d3130 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x563ea82d3190 <col:10, col:57>
|   |   `-TextComment 0x563ea82d3160 <col:10, col:57> Text=" Get the number of used blocks in a memory slab."
|   |-ParagraphComment 0x563ea82d3260 <line:4392:3, line:4393:18>
|   | |-TextComment 0x563ea82d31b0 <line:4392:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x563ea82d31d0 <line:4393:3, col:16> Text=" allocated in "
|   | `-InlineCommandComment 0x563ea82d3220 <col:17, col:18> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x563ea82d32b0 <line:4395:3>
|   | `-TextComment 0x563ea82d3280 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d32d0 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d3360 <col:15, col:42>
|   |   `-TextComment 0x563ea82d3330 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x563ea82d33b0 <line:4397:3>
|   | `-TextComment 0x563ea82d3380 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d33d0 <col:4, line:4398:3> Name="return"
|   | `-ParagraphComment 0x563ea82d3450 <line:4397:11, line:4398:3>
|   |   |-TextComment 0x563ea82d3400 <line:4397:11, col:45> Text=" Number of allocated memory blocks."
|   |   `-TextComment 0x563ea82d3420 <line:4398:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d3470 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x563ea82d34e0 <line:4399:1>
|     `-TextComment 0x563ea82d34b0 <col:1> Text=" "
|-FunctionDecl 0x563ea8238ae0 <line:4416:1, line:4419:1> line:4416:21 k_mem_slab_num_free_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x563ea8238a58 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x563ea8238d48 <line:4417:1, line:4419:1>
| | `-ReturnStmt 0x563ea8238cd0 <line:4418:2, col:34>
| |   `-BinaryOperator 0x563ea8238ca8 <col:9, col:34> 'unsigned int' '-'
| |     |-ImplicitCastExpr 0x563ea8238c78 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     | `-MemberExpr 0x563ea8238bc8 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_blocks 0x563ea8236d88
| |     |   `-ImplicitCastExpr 0x563ea8238bb0 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x563ea8238b88 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x563ea8238a58 'slab' 'struct k_mem_slab *'
| |     `-ImplicitCastExpr 0x563ea8238c90 <col:28, col:34> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-MemberExpr 0x563ea8238c40 <col:28, col:34> 'u32_t':'unsigned int' lvalue ->num_used 0x563ea8236ef8
| |         `-ImplicitCastExpr 0x563ea8238c28 <col:28> 'struct k_mem_slab *' <LValueToRValue>
| |           `-DeclRefExpr 0x563ea8238c00 <col:28> 'struct k_mem_slab *' lvalue ParmVar 0x563ea8238a58 'slab' 'struct k_mem_slab *'
| `-FullComment 0x563ea82d3a30 <line:4406:3, line:4415:1>
|   |-ParagraphComment 0x563ea82d35f0 <line:4406:3>
|   | `-TextComment 0x563ea82d35c0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d3610 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x563ea82d3670 <col:10, col:59>
|   |   `-TextComment 0x563ea82d3640 <col:10, col:59> Text=" Get the number of unused blocks in a memory slab."
|   |-ParagraphComment 0x563ea82d3740 <line:4408:3, line:4409:20>
|   | |-TextComment 0x563ea82d3690 <line:4408:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x563ea82d36b0 <line:4409:3, col:18> Text=" unallocated in "
|   | `-InlineCommandComment 0x563ea82d3700 <col:19, col:20> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x563ea82d3790 <line:4411:3>
|   | `-TextComment 0x563ea82d3760 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d37b0 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d3840 <col:15, col:42>
|   |   `-TextComment 0x563ea82d3810 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x563ea82d3890 <line:4413:3>
|   | `-TextComment 0x563ea82d3860 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d38b0 <col:4, line:4414:3> Name="return"
|   | `-ParagraphComment 0x563ea82d3930 <line:4413:11, line:4414:3>
|   |   |-TextComment 0x563ea82d38e0 <line:4413:11, col:47> Text=" Number of unallocated memory blocks."
|   |   `-TextComment 0x563ea82d3900 <line:4414:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d3950 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x563ea82d39c0 <line:4415:1>
|     `-TextComment 0x563ea82d3990 <col:1> Text=" "
|-RecordDecl 0x563ea8238d60 prev 0x563ea81f34d0 <line:4427:1, line:4430:1> line:4427:8 struct k_mem_pool definition
| |-FullComment 0x563ea82d3b50 <line:4424:3, col:24>
| | `-ParagraphComment 0x563ea82d3b20 <col:3, col:24>
| |   |-TextComment 0x563ea82d3aa0 <col:3> Text=" "
| |   |-InlineCommandComment 0x563ea82d3ac0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x563ea82d3ae0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x563ea8238e08 <line:4428:2, col:27> col:27 base 'struct sys_mem_pool_base':'struct sys_mem_pool_base'
| `-FieldDecl 0x563ea8238e60 <line:4429:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x563ea82392b8 <line:4495:1, line:4496:34> line:4495:12 k_mem_pool_alloc 'int (struct k_mem_pool *, struct k_mem_block *, size_t, s32_t)' extern
| |-ParmVarDecl 0x563ea8239000 <col:29, col:48> col:48 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x563ea8239088 <col:54, col:74> col:74 block 'struct k_mem_block *'
| |-ParmVarDecl 0x563ea82390f8 <line:4496:8, col:15> col:15 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea8239168 <col:21, col:27> col:27 timeout 's32_t':'int'
| `-FullComment 0x563ea82d43f0 <line:4478:3, line:4494:1>
|   |-ParagraphComment 0x563ea82d3bf0 <line:4478:3>
|   | `-TextComment 0x563ea82d3bc0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d3c10 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x563ea82d3c70 <col:10, col:45>
|   |   `-TextComment 0x563ea82d3c40 <col:10, col:45> Text=" Allocate memory from a memory pool."
|   |-ParagraphComment 0x563ea82d3cc0 <line:4480:3, col:60>
|   | `-TextComment 0x563ea82d3c90 <col:3, col:60> Text=" This routine allocates a memory block from a memory pool."
|   |-ParagraphComment 0x563ea82d3d10 <line:4482:3>
|   | `-TextComment 0x563ea82d3ce0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d3d30 <col:4, line:4483:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d3de0 <line:4482:15, line:4483:3>
|   |   |-TextComment 0x563ea82d3d90 <line:4482:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x563ea82d3db0 <line:4483:3> Text=" "
|   |-ParamCommandComment 0x563ea82d3e00 <col:4, line:4484:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x563ea82d3eb0 <line:4483:16, line:4484:3>
|   |   |-TextComment 0x563ea82d3e60 <line:4483:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |   `-TextComment 0x563ea82d3e80 <line:4484:3> Text=" "
|   |-ParamCommandComment 0x563ea82d3ed0 <col:4, line:4485:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x563ea82d3f80 <line:4484:15, line:4485:3>
|   |   |-TextComment 0x563ea82d3f30 <line:4484:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x563ea82d3f50 <line:4485:3> Text=" "
|   |-ParamCommandComment 0x563ea82d3fa0 <col:4, line:4487:52> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x563ea82d4080 <line:4485:18, line:4487:52>
|   |   |-TextComment 0x563ea82d4000 <line:4485:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x563ea82d4020 <line:4486:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x563ea82d4040 <line:4487:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x563ea82d42e0 <line:4489:3, line:4493:3>
|   | |-TextComment 0x563ea82d40a0 <line:4489:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d40c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d40e0 <col:11, col:35> Text=" 0 Memory allocated. The "
|   | |-InlineCommandComment 0x563ea82d4130 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x563ea82d4150 <col:43, col:72> Text=" field of the block descriptor"
|   | |-TextComment 0x563ea82d4170 <line:4490:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x563ea82d4190 <line:4491:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d41b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d41d0 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x563ea82d41f0 <line:4492:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d4210 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d4230 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x563ea82d4250 <line:4493:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d4300 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x563ea82d4370 <line:4494:1>
|     `-TextComment 0x563ea82d4340 <col:1> Text=" "
|-FunctionDecl 0x563ea8239558 <line:4508:1, col:68> col:14 k_mem_pool_malloc 'void *(struct k_mem_pool *, size_t)' extern
| |-ParmVarDecl 0x563ea82393d0 <col:32, col:51> col:51 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x563ea8239440 <col:57, col:64> col:64 size 'size_t':'unsigned long'
| `-FullComment 0x563ea82d48f0 <line:4499:3, line:4507:1>
|   |-ParagraphComment 0x563ea82d4490 <line:4499:3>
|   | `-TextComment 0x563ea82d4460 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d44b0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x563ea82d4510 <col:10, col:68>
|   |   `-TextComment 0x563ea82d44e0 <col:10, col:68> Text=" Allocate memory from a memory pool with malloc() semantics"
|   |-ParagraphComment 0x563ea82d4560 <line:4501:3, col:47>
|   | `-TextComment 0x563ea82d4530 <col:3, col:47> Text=" Such memory must be released using k_free()."
|   |-ParagraphComment 0x563ea82d45b0 <line:4503:3>
|   | `-TextComment 0x563ea82d4580 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d45d0 <col:4, line:4504:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d4680 <line:4503:15, line:4504:3>
|   |   |-TextComment 0x563ea82d4630 <line:4503:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x563ea82d4650 <line:4504:3> Text=" "
|   |-ParamCommandComment 0x563ea82d46a0 <col:4, line:4505:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x563ea82d4750 <line:4504:15, line:4505:3>
|   |   |-TextComment 0x563ea82d4700 <line:4504:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x563ea82d4720 <line:4505:3> Text=" "
|   |-BlockCommandComment 0x563ea82d4770 <col:4, line:4506:3> Name="return"
|   | `-ParagraphComment 0x563ea82d47f0 <line:4505:11, line:4506:3>
|   |   |-TextComment 0x563ea82d47a0 <line:4505:11, col:72> Text=" Address of the allocated memory if successful, otherwise NULL"
|   |   `-TextComment 0x563ea82d47c0 <line:4506:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d4810 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x563ea82d4880 <line:4507:1>
|     `-TextComment 0x563ea82d4850 <col:1> Text=" "
|-FunctionDecl 0x563ea823a970 <line:4521:1, col:54> col:13 k_mem_pool_free 'void (struct k_mem_block *)' extern
| |-ParmVarDecl 0x563ea823a870 <col:29, col:49> col:49 block 'struct k_mem_block *'
| `-FullComment 0x563ea82d4d70 <line:4511:3, line:4520:1>
|   |-ParagraphComment 0x563ea82d4990 <line:4511:3>
|   | `-TextComment 0x563ea82d4960 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d49b0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x563ea82d4a10 <col:10, col:51>
|   |   `-TextComment 0x563ea82d49e0 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x563ea82d4a80 <line:4513:3, line:4514:15>
|   | |-TextComment 0x563ea82d4a30 <line:4513:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x563ea82d4a50 <line:4514:3, col:15> Text=" memory pool."
|   |-ParagraphComment 0x563ea82d4ad0 <line:4516:3>
|   | `-TextComment 0x563ea82d4aa0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d4af0 <col:4, col:69> [in] implicitly Param="block" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d4b80 <col:16, col:69>
|   |   `-TextComment 0x563ea82d4b50 <col:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |-ParagraphComment 0x563ea82d4bd0 <line:4518:3>
|   | `-TextComment 0x563ea82d4ba0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d4bf0 <col:4, line:4519:3> Name="return"
|   | `-ParagraphComment 0x563ea82d4c70 <line:4518:11, line:4519:3>
|   |   |-TextComment 0x563ea82d4c20 <line:4518:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82d4c40 <line:4519:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d4c90 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x563ea82d4d00 <line:4520:1>
|     `-TextComment 0x563ea82d4cd0 <col:1> Text=" "
|-FunctionDecl 0x563ea823abd0 <line:4534:1, col:57> col:13 k_mem_pool_free_id 'void (struct k_mem_block_id *)' extern
| |-ParmVarDecl 0x563ea823aad0 <col:32, col:55> col:55 id 'struct k_mem_block_id *'
| `-FullComment 0x563ea82d5200 <line:4524:3, line:4533:1>
|   |-ParagraphComment 0x563ea82d4e10 <line:4524:3>
|   | `-TextComment 0x563ea82d4de0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d4e30 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x563ea82d4e90 <col:10, col:51>
|   |   `-TextComment 0x563ea82d4e60 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x563ea82d4f00 <line:4526:3, line:4527:14>
|   | |-TextComment 0x563ea82d4eb0 <line:4526:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x563ea82d4ed0 <line:4527:3, col:14> Text=" memory pool"
|   |-ParagraphComment 0x563ea82d4f50 <line:4529:3>
|   | `-TextComment 0x563ea82d4f20 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d4f70 <col:4, col:37> [in] implicitly Param="id" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d5000 <col:13, col:37>
|   |   `-TextComment 0x563ea82d4fd0 <col:13, col:37> Text=" Memory block identifier."
|   |-ParagraphComment 0x563ea82d5060 <line:4531:3>
|   | `-TextComment 0x563ea82d5030 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d5080 <col:4, line:4532:3> Name="return"
|   | `-ParagraphComment 0x563ea82d5100 <line:4531:11, line:4532:3>
|   |   |-TextComment 0x563ea82d50b0 <line:4531:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82d50d0 <line:4532:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d5120 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x563ea82d5190 <line:4533:1>
|     `-TextComment 0x563ea82d5160 <col:1> Text=" "
|-FunctionDecl 0x563ea823ae28 <line:4557:1, col:34> col:14 k_malloc 'void *(size_t)' extern
| |-ParmVarDecl 0x563ea823ad18 <col:23, col:30> col:30 size 'size_t':'unsigned long'
| `-FullComment 0x563ea82d5680 <line:4547:3, line:4556:1>
|   |-ParagraphComment 0x563ea82d52a0 <line:4547:3>
|   | `-TextComment 0x563ea82d5270 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d52c0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x563ea82d5320 <col:10, col:36>
|   |   `-TextComment 0x563ea82d52f0 <col:10, col:36> Text=" Allocate memory from heap."
|   |-ParagraphComment 0x563ea82d5390 <line:4549:3, line:4550:39>
|   | |-TextComment 0x563ea82d5340 <line:4549:3, col:66> Text=" This routine provides traditional malloc() semantics. Memory is"
|   | `-TextComment 0x563ea82d5360 <line:4550:3, col:39> Text=" allocated from the heap memory pool."
|   |-ParagraphComment 0x563ea82d53e0 <line:4552:3>
|   | `-TextComment 0x563ea82d53b0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d5400 <col:4, col:53> [in] implicitly Param="size" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d5490 <col:15, col:53>
|   |   `-TextComment 0x563ea82d5460 <col:15, col:53> Text=" Amount of memory requested (in bytes)."
|   |-ParagraphComment 0x563ea82d54e0 <line:4554:3>
|   | `-TextComment 0x563ea82d54b0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d5500 <col:4, line:4555:3> Name="return"
|   | `-ParagraphComment 0x563ea82d5580 <line:4554:11, line:4555:3>
|   |   |-TextComment 0x563ea82d5530 <line:4554:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x563ea82d5550 <line:4555:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d55a0 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x563ea82d5610 <line:4556:1>
|     `-TextComment 0x563ea82d55e0 <col:1> Text=" "
|-FunctionDecl 0x563ea823af98 <line:4573:1, col:29> col:13 k_free 'void (void *)' extern
| |-ParmVarDecl 0x563ea823af10 <col:20, col:26> col:26 ptr 'void *'
| `-FullComment 0x563ea82d5c00 <line:4560:3, line:4572:1>
|   |-ParagraphComment 0x563ea82d5720 <line:4560:3>
|   | `-TextComment 0x563ea82d56f0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d5740 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x563ea82d57a0 <col:10, col:42>
|   |   `-TextComment 0x563ea82d5770 <col:10, col:42> Text=" Free memory allocated from heap."
|   |-ParagraphComment 0x563ea82d5840 <line:4562:3, line:4564:23>
|   | |-TextComment 0x563ea82d57c0 <line:4562:3, col:71> Text=" This routine provides traditional free() semantics. The memory being"
|   | |-TextComment 0x563ea82d57e0 <line:4563:3, col:65> Text=" returned must have been allocated from the heap memory pool or"
|   | `-TextComment 0x563ea82d5800 <line:4564:3, col:23> Text=" k_mem_pool_malloc()."
|   |-ParagraphComment 0x563ea82d5910 <line:4566:3, col:48>
|   | |-TextComment 0x563ea82d5860 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x563ea82d58b0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="ptr"
|   | `-TextComment 0x563ea82d58d0 <col:13, col:48> Text=" is NULL, no operation is performed."
|   |-ParagraphComment 0x563ea82d5960 <line:4568:3>
|   | `-TextComment 0x563ea82d5930 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d5980 <col:4, col:53> [in] implicitly Param="ptr" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d5a10 <col:14, col:53>
|   |   `-TextComment 0x563ea82d59e0 <col:14, col:53> Text=" Pointer to previously allocated memory."
|   |-ParagraphComment 0x563ea82d5a60 <line:4570:3>
|   | `-TextComment 0x563ea82d5a30 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d5a80 <col:4, line:4571:3> Name="return"
|   | `-ParagraphComment 0x563ea82d5b00 <line:4570:11, line:4571:3>
|   |   |-TextComment 0x563ea82d5ab0 <line:4570:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82d5ad0 <line:4571:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d5b20 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x563ea82d5b90 <line:4572:1>
|     `-TextComment 0x563ea82d5b60 <col:1> Text=" "
|-FunctionDecl 0x563ea823b208 <line:4587:1, col:48> col:14 k_calloc 'void *(size_t, size_t)' extern
| |-ParmVarDecl 0x563ea823b078 <col:23, col:30> col:30 nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea823b0e8 <col:37, col:44> col:44 size 'size_t':'unsigned long'
| `-FullComment 0x563ea82d6150 <line:4576:3, line:4586:1>
|   |-ParagraphComment 0x563ea82d5ca0 <line:4576:3>
|   | `-TextComment 0x563ea82d5c70 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d5cc0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x563ea82d5d20 <col:10, col:48>
|   |   `-TextComment 0x563ea82d5cf0 <col:10, col:48> Text=" Allocate memory from heap, array style"
|   |-ParagraphComment 0x563ea82d5d90 <line:4578:3, line:4579:50>
|   | |-TextComment 0x563ea82d5d40 <line:4578:3, col:66> Text=" This routine provides traditional calloc() semantics. Memory is"
|   | `-TextComment 0x563ea82d5d60 <line:4579:3, col:50> Text=" allocated from the heap memory pool and zeroed."
|   |-ParagraphComment 0x563ea82d5de0 <line:4581:3>
|   | `-TextComment 0x563ea82d5db0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d5e00 <col:4, line:4582:3> [in] implicitly Param="nmemb" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d5eb0 <line:4581:16, line:4582:3>
|   |   |-TextComment 0x563ea82d5e60 <line:4581:16, col:57> Text=" Number of elements in the requested array"
|   |   `-TextComment 0x563ea82d5e80 <line:4582:3> Text=" "
|   |-ParamCommandComment 0x563ea82d5ed0 <col:4, col:53> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x563ea82d5f60 <col:15, col:53>
|   |   `-TextComment 0x563ea82d5f30 <col:15, col:53> Text=" Size of each array element (in bytes)."
|   |-ParagraphComment 0x563ea82d5fb0 <line:4584:3>
|   | `-TextComment 0x563ea82d5f80 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d5fd0 <col:4, line:4585:3> Name="return"
|   | `-ParagraphComment 0x563ea82d6050 <line:4584:11, line:4585:3>
|   |   |-TextComment 0x563ea82d6000 <line:4584:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x563ea82d6020 <line:4585:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d6070 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x563ea82d60e0 <line:4586:1>
|     `-TextComment 0x563ea82d60b0 <col:1> Text=" "
|-EnumDecl 0x563ea823b2e8 <line:4600:1, line:4614:1> line:4600:6 _poll_types_bits
| |-EnumConstantDecl 0x563ea823b3a0 <line:4602:2> col:2 _POLL_TYPE_IGNORE 'int'
| |-EnumConstantDecl 0x563ea823b3e8 <line:4605:2> col:2 _POLL_TYPE_SIGNAL 'int'
| |-EnumConstantDecl 0x563ea823b430 <line:4608:2> col:2 _POLL_TYPE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x563ea823b478 <line:4611:2> col:2 _POLL_TYPE_DATA_AVAILABLE 'int'
| `-EnumConstantDecl 0x563ea823b4c0 <line:4613:2> col:2 referenced _POLL_NUM_TYPES 'int'
|-EnumDecl 0x563ea823b508 <line:4619:1, line:4636:1> line:4619:6 _poll_states_bits
| |-EnumConstantDecl 0x563ea823b5c0 <line:4621:2> col:2 _POLL_STATE_NOT_READY 'int'
| |-EnumConstantDecl 0x563ea823b608 <line:4624:2> col:2 _POLL_STATE_SIGNALED 'int'
| |-EnumConstantDecl 0x563ea823b650 <line:4627:2> col:2 _POLL_STATE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x563ea823b698 <line:4630:2> col:2 _POLL_STATE_DATA_AVAILABLE 'int'
| |-EnumConstantDecl 0x563ea823b6e0 <line:4633:2> col:2 _POLL_STATE_CANCELLED 'int'
| `-EnumConstantDecl 0x563ea823b728 <line:4635:2> col:2 referenced _POLL_NUM_STATES 'int'
|-EnumDecl 0x563ea823dd30 <line:4667:1, line:4672:1> line:4667:6 k_poll_modes
| |-EnumConstantDecl 0x563ea823de10 <line:4669:2, col:28> col:2 K_POLL_MODE_NOTIFY_ONLY 'int'
| | `-IntegerLiteral 0x563ea823ddf0 <col:28> 'int' 0
| `-EnumConstantDecl 0x563ea823de58 <line:4671:2> col:2 K_POLL_NUM_MODES 'int'
|-RecordDecl 0x563ea823dea0 prev 0x563ea81f36e0 <line:4683:1, line:4695:1> line:4683:8 struct k_poll_signal definition
| |-FieldDecl 0x563ea823df68 <line:4685:2, col:14> col:14 poll_events 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x563ea82d6220 <line:4684:5, col:28>
| |   `-ParagraphComment 0x563ea82d61f0 <col:5, col:28>
| |     `-TextComment 0x563ea82d61c0 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x563ea823dff0 <line:4691:2, col:15> col:15 referenced signaled 'unsigned int'
| | `-FullComment 0x563ea82d6310 <line:4688:4, line:4689:24>
| |   `-ParagraphComment 0x563ea82d62e0 <line:4688:4, line:4689:24>
| |     |-TextComment 0x563ea82d6290 <line:4688:4, col:71> Text=" 1 if the event has been signaled, 0 otherwise. Stays set to 1 until"
| |     `-TextComment 0x563ea82d62b0 <line:4689:4, col:24> Text=" user resets it to 0."
| `-FieldDecl 0x563ea823e080 <line:4694:2, col:6> col:6 result 'int'
|   `-FullComment 0x563ea82d63e0 <line:4693:5, col:67>
|     `-ParagraphComment 0x563ea82d63b0 <col:5, col:67>
|       `-TextComment 0x563ea82d6380 <col:5, col:67> Text=" custom result value passed to k_poll_signal_raise() if needed "
|-RecordDecl 0x563ea823e0f8 prev 0x563ea81f3630 <line:4707:1, line:4737:1> line:4707:8 struct k_poll_event definition
| |-FullComment 0x563ea82d6590 <line:4704:3, line:4706:1>
| | |-ParagraphComment 0x563ea82d6480 <line:4704:3>
| | | `-TextComment 0x563ea82d6450 <col:3> Text=" "
| | |-BlockCommandComment 0x563ea82d64a0 <col:4, col:20> Name="brief"
| | | `-ParagraphComment 0x563ea82d6500 <col:10, col:20>
| | |   `-TextComment 0x563ea82d64d0 <col:10, col:20> Text=" Poll Event"
| | `-ParagraphComment 0x563ea82d6550 <line:4706:1>
| |   `-TextComment 0x563ea82d6520 <col:1> Text=" "
| |-FieldDecl 0x563ea823e1b8 <line:4709:2, col:14> col:14 _node 'sys_dnode_t':'struct _dnode'
| | `-FullComment 0x563ea82d6660 <line:4708:5, col:28>
| |   `-ParagraphComment 0x563ea82d6630 <col:5, col:28>
| |     `-TextComment 0x563ea82d6600 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x563ea823e2b0 <line:4712:2, col:18> col:18 poller 'struct _poller *'
| | `-FullComment 0x563ea82d6730 <line:4711:5, col:28>
| |   `-ParagraphComment 0x563ea82d6700 <col:5, col:28>
| |     `-TextComment 0x563ea82d66d0 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x563ea823e358 <line:4715:2, col:12> col:8 tag 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x563ea823e328 <col:12> 'int' 8
| | `-FullComment 0x563ea82d6800 <line:4714:5, col:63>
| |   `-ParagraphComment 0x563ea82d67d0 <col:5, col:63>
| |     `-TextComment 0x563ea82d67a0 <col:5, col:63> Text=" optional user-specified tag, opaque, untouched by the API "
| |-FieldDecl 0x563ea823e400 <line:4718:2, col:13> col:8 type 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x563ea823e3c8 <col:13> 'int' EnumConstant 0x563ea823b4c0 '_POLL_NUM_TYPES' 'int'
| | `-FullComment 0x563ea82d68d0 <line:4717:5, col:67>
| |   `-ParagraphComment 0x563ea82d68a0 <col:5, col:67>
| |     `-TextComment 0x563ea82d6870 <col:5, col:67> Text=" bitfield of event types (bitwise-ORed K_POLL_TYPE_xxx values) "
| |-FieldDecl 0x563ea823e4b0 <line:4721:2, col:14> col:8 state 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x563ea823e478 <col:14> 'int' EnumConstant 0x563ea823b728 '_POLL_NUM_STATES' 'int'
| | `-FullComment 0x563ea82d69a0 <line:4720:5, col:69>
| |   `-ParagraphComment 0x563ea82d6970 <col:5, col:69>
| |     `-TextComment 0x563ea82d6940 <col:5, col:69> Text=" bitfield of event states (bitwise-ORed K_POLL_STATE_xxx values) "
| |-FieldDecl 0x563ea823e558 <line:4724:2, col:13> col:8 mode 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x563ea823e528 <col:13> 'int' 1
| | `-FullComment 0x563ea82d6a70 <line:4723:5, col:47>
| |   `-ParagraphComment 0x563ea82d6a40 <col:5, col:47>
| |     `-TextComment 0x563ea82d6a10 <col:5, col:47> Text=" mode of operation, from enum k_poll_modes "
| |-FieldDecl 0x563ea823e7b0 <line:4727:2, line:4646:9> line:4727:8 unused 'u32_t':'unsigned int'
| | |-ParenExpr 0x563ea823e780 <line:4641:2, line:4646:9> 'int'
| | | `-BinaryOperator 0x563ea823e758 <line:4641:3, line:4646:8> 'int' '-'
| | |   |-IntegerLiteral 0x563ea823e5c8 <line:4641:3> 'int' 32
| | |   `-ParenExpr 0x563ea823e738 <col:8, line:4646:8> 'int'
| | |     `-BinaryOperator 0x563ea823e710 <line:4641:9, line:4645:11> 'int' '+'
| | |       |-BinaryOperator 0x563ea823e6c8 <line:4641:9, line:4644:11> 'int' '+'
| | |       | |-BinaryOperator 0x563ea823e678 <line:4641:9, line:4643:11> 'int' '+'
| | |       | | |-BinaryOperator 0x563ea823e628 <line:4641:9, line:4642:11> 'int' '+'
| | |       | | | |-IntegerLiteral 0x563ea823e5e8 <line:4641:9> 'int' 0
| | |       | | | `-IntegerLiteral 0x563ea823e608 <line:4642:11> 'int' 8
| | |       | | `-DeclRefExpr 0x563ea823e650 <line:4643:11> 'int' EnumConstant 0x563ea823b4c0 '_POLL_NUM_TYPES' 'int'
| | |       | `-DeclRefExpr 0x563ea823e6a0 <line:4644:11> 'int' EnumConstant 0x563ea823b728 '_POLL_NUM_STATES' 'int'
| | |       `-IntegerLiteral 0x563ea823e6f0 <line:4645:11> 'int' 1
| | `-FullComment 0x563ea82d6b40 <line:4726:5, col:32>
| |   `-ParagraphComment 0x563ea82d6b10 <col:5, col:32>
| |     `-TextComment 0x563ea82d6ae0 <col:5, col:32> Text=" unused bits in 32-bit word "
| |-RecordDecl 0x563ea823e828 <line:4730:2, line:4736:2> line:4730:2 union definition
| | |-FullComment 0x563ea82d6c10 <line:4729:5, col:19>
| | | `-ParagraphComment 0x563ea82d6be0 <col:5, col:19>
| | |   `-TextComment 0x563ea82d6bb0 <col:5, col:19> Text=" per-type data "
| | |-FieldDecl 0x563ea823e8e8 <line:4731:3, col:9> col:9 obj 'void *'
| | |-FieldDecl 0x563ea823e9e0 <line:4732:3, col:25> col:25 signal 'struct k_poll_signal *'
| | |-FieldDecl 0x563ea823ea50 <line:4733:3, col:17> col:17 sem 'struct k_sem *'
| | |-FieldDecl 0x563ea823eb50 <line:4734:3, col:18> col:18 fifo 'struct k_fifo *'
| | `-FieldDecl 0x563ea823ebc0 <line:4735:3, col:19> col:19 queue 'struct k_queue *'
| |-FieldDecl 0x563ea823ec60 <line:4730:2> col:2 implicit 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| |-IndirectFieldDecl 0x563ea823ecb8 <line:4731:9> col:9 implicit obj 'void *'
| | |-Field 0x563ea823ec60 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x563ea823e8e8 'obj' 'void *'
| |-IndirectFieldDecl 0x563ea823f090 <line:4732:25> col:25 implicit signal 'struct k_poll_signal *'
| | |-Field 0x563ea823ec60 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x563ea823e9e0 'signal' 'struct k_poll_signal *'
| |-IndirectFieldDecl 0x563ea823f0e0 <line:4733:17> col:17 implicit sem 'struct k_sem *'
| | |-Field 0x563ea823ec60 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x563ea823ea50 'sem' 'struct k_sem *'
| |-IndirectFieldDecl 0x563ea823f130 <line:4734:18> col:18 implicit fifo 'struct k_fifo *'
| | |-Field 0x563ea823ec60 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x563ea823eb50 'fifo' 'struct k_fifo *'
| `-IndirectFieldDecl 0x563ea823f180 <line:4735:19> col:19 implicit queue 'struct k_queue *'
|   |-Field 0x563ea823ec60 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
|   `-Field 0x563ea823ebc0 'queue' 'struct k_queue *'
|-FunctionDecl 0x563ea823f4b0 <line:4778:1, line:4779:29> line:4778:13 k_poll_event_init 'void (struct k_poll_event *, u32_t, int, void *)' extern
| |-ParmVarDecl 0x563ea823f210 <col:31, col:52> col:52 event 'struct k_poll_event *'
| |-ParmVarDecl 0x563ea823f280 <col:59, col:65> col:65 type 'u32_t':'unsigned int'
| |-ParmVarDecl 0x563ea823f2f8 <line:4779:10, col:14> col:14 mode 'int'
| |-ParmVarDecl 0x563ea823f370 <col:20, col:26> col:26 obj 'void *'
| `-FullComment 0x563ea82d73a0 <line:4761:3, line:4776:1>
|   |-ParagraphComment 0x563ea82d6cb0 <line:4761:3>
|   | `-TextComment 0x563ea82d6c80 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d6cd0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x563ea82d6d30 <col:10, col:53>
|   |   `-TextComment 0x563ea82d6d00 <col:10, col:53> Text=" Initialize one struct k_poll_event instance"
|   |-ParagraphComment 0x563ea82d6da0 <line:4763:3, line:4764:53>
|   | |-TextComment 0x563ea82d6d50 <line:4763:3, col:73> Text=" After this routine is called on a poll event, the event it ready to be"
|   | `-TextComment 0x563ea82d6d70 <line:4764:3, col:53> Text=" placed in an event array to be passed to k_poll()."
|   |-ParagraphComment 0x563ea82d6df0 <line:4766:3>
|   | `-TextComment 0x563ea82d6dc0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d6e10 <col:4, line:4767:3> [in] implicitly Param="event" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d6ec0 <line:4766:16, line:4767:3>
|   |   |-TextComment 0x563ea82d6e70 <line:4766:16, col:40> Text=" The event to initialize."
|   |   `-TextComment 0x563ea82d6e90 <line:4767:3> Text=" "
|   |-ParamCommandComment 0x563ea82d6ee0 <col:4, line:4771:3> [in] implicitly Param="type" ParamIndex=1
|   | `-ParagraphComment 0x563ea82d7010 <line:4767:15, line:4771:3>
|   |   |-TextComment 0x563ea82d6f40 <line:4767:15, col:73> Text=" A bitfield of the types of event, from the K_POLL_TYPE_xxx"
|   |   |-TextComment 0x563ea82d6f60 <line:4768:3, col:77> Text="             values. Only values that apply to the same object being polled"
|   |   |-TextComment 0x563ea82d6f80 <line:4769:3, col:77> Text="             can be used together. Choosing K_POLL_TYPE_IGNORE disables the"
|   |   |-TextComment 0x563ea82d6fa0 <line:4770:3, col:21> Text="             event."
|   |   `-TextComment 0x563ea82d6fc0 <line:4771:3> Text=" "
|   |-ParamCommandComment 0x563ea82d7040 <col:4, line:4772:3> [in] implicitly Param="mode" ParamIndex=2
|   | `-ParagraphComment 0x563ea82d70f0 <line:4771:15, line:4772:3>
|   |   |-TextComment 0x563ea82d70a0 <line:4771:15, col:51> Text=" Future. Use K_POLL_MODE_NOTIFY_ONLY."
|   |   `-TextComment 0x563ea82d70c0 <line:4772:3> Text=" "
|   |-ParamCommandComment 0x563ea82d7110 <col:4, col:43> [in] implicitly Param="obj" ParamIndex=3
|   | `-ParagraphComment 0x563ea82d71a0 <col:14, col:43>
|   |   `-TextComment 0x563ea82d7170 <col:14, col:43> Text=" Kernel object or poll signal."
|   |-ParagraphComment 0x563ea82d71f0 <line:4774:3>
|   | `-TextComment 0x563ea82d71c0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d7210 <col:4, line:4775:3> Name="return"
|   | `-ParagraphComment 0x563ea82d7290 <line:4774:11, line:4775:3>
|   |   |-TextComment 0x563ea82d7240 <line:4774:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82d7260 <line:4775:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d72b0 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x563ea82d7320 <line:4776:1>
|     `-TextComment 0x563ea82d72f0 <col:1> Text=" "
|-FunctionDecl 0x563ea823f7e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4827:21> line:4826:15 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x563ea823f5c0 <col:22, col:43> col:43 events 'struct k_poll_event *'
| |-ParmVarDecl 0x563ea823f638 <col:51, col:55> col:55 num_events 'int'
| |-ParmVarDecl 0x563ea823f6a8 <line:4827:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x563ea82d7fc0 <line:4782:3, line:4824:1>
|   |-ParagraphComment 0x563ea82d7440 <line:4782:3>
|   | `-TextComment 0x563ea82d7410 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d7460 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x563ea82d74c0 <col:10, col:63>
|   |   `-TextComment 0x563ea82d7490 <col:10, col:63> Text=" Wait for one or many of multiple poll events to occur"
|   |-ParagraphComment 0x563ea82d7560 <line:4784:3, line:4786:61>
|   | |-TextComment 0x563ea82d74e0 <line:4784:3, col:71> Text=" This routine allows a thread to wait concurrently for one or many of"
|   | |-TextComment 0x563ea82d7500 <line:4785:3, col:76> Text=" multiple poll events to have occurred. Such events can be a kernel object"
|   | `-TextComment 0x563ea82d7520 <line:4786:3, col:61> Text=" being available, like a semaphore, or a poll signal event."
|   |-ParagraphComment 0x563ea82d76f0 <line:4788:3, line:4796:68>
|   | |-TextComment 0x563ea82d7580 <line:4788:3, col:78> Text=" When an event notifies that a kernel object is available, the kernel object"
|   | |-TextComment 0x563ea82d75a0 <line:4789:3, col:76> Text=" is not "given" to the thread calling k_poll(): it merely signals the fact"
|   | |-TextComment 0x563ea82d75c0 <line:4790:3, col:76> Text=" that the object was available when the k_poll() call was in effect. Also,"
|   | |-TextComment 0x563ea82d75e0 <line:4791:3, col:78> Text=" all threads trying to acquire an object the regular way, i.e. by pending on"
|   | |-TextComment 0x563ea82d7600 <line:4792:3, col:74> Text=" the object, have precedence over the thread polling on the object. This"
|   | |-TextComment 0x563ea82d7620 <line:4793:3, col:75> Text=" means that the polling thread will never get the poll event on an object"
|   | |-TextComment 0x563ea82d7640 <line:4794:3, col:75> Text=" until the object becomes available and its pend queue is empty. For this"
|   | |-TextComment 0x563ea82d7660 <line:4795:3, col:76> Text=" reason, the k_poll() call is more effective when the objects being polled"
|   | `-TextComment 0x563ea82d7680 <line:4796:3, col:68> Text=" only have one thread, the polling thread, trying to acquire them."
|   |-ParagraphComment 0x563ea82d7790 <line:4798:3, line:4800:44>
|   | |-TextComment 0x563ea82d7710 <line:4798:3, col:78> Text=" When k_poll() returns 0, the caller should loop on all the events that were"
|   | |-TextComment 0x563ea82d7730 <line:4799:3, col:72> Text=" passed to k_poll() and check the state field for the values that were"
|   | `-TextComment 0x563ea82d7750 <line:4800:3, col:44> Text=" expected and take the associated actions."
|   |-ParagraphComment 0x563ea82d7800 <line:4802:3, line:4803:41>
|   | |-TextComment 0x563ea82d77b0 <line:4802:3, col:78> Text=" Before being reused for another call to k_poll(), the user has to reset the"
|   | `-TextComment 0x563ea82d77d0 <line:4803:3, col:41> Text=" state field to K_POLL_STATE_NOT_READY."
|   |-ParagraphComment 0x563ea82d7870 <line:4805:3, line:4806:30>
|   | |-TextComment 0x563ea82d7820 <line:4805:3, col:77> Text=" When called from user mode, a temporary memory allocation is required from"
|   | `-TextComment 0x563ea82d7840 <line:4806:3, col:30> Text=" the caller's resource pool."
|   |-ParagraphComment 0x563ea82d78c0 <line:4808:3>
|   | `-TextComment 0x563ea82d7890 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d78e0 <col:4, line:4809:3> [in] implicitly Param="events" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d7990 <line:4808:17, line:4809:3>
|   |   |-TextComment 0x563ea82d7940 <line:4808:17, col:65> Text=" An array of pointers to events to be polled for."
|   |   `-TextComment 0x563ea82d7960 <line:4809:3> Text=" "
|   |-ParamCommandComment 0x563ea82d79b0 <col:4, line:4810:3> [in] implicitly Param="num_events" ParamIndex=1
|   | `-ParagraphComment 0x563ea82d7a60 <line:4809:21, line:4810:3>
|   |   |-TextComment 0x563ea82d7a10 <line:4809:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x563ea82d7a30 <line:4810:3> Text=" "
|   |-ParamCommandComment 0x563ea82d7a80 <col:4, line:4812:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x563ea82d7b60 <line:4810:18, line:4812:28>
|   |   |-TextComment 0x563ea82d7ae0 <line:4810:18, col:74> Text=" Non-negative waiting period for an event to be ready (in"
|   |   |-TextComment 0x563ea82d7b00 <line:4811:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x563ea82d7b20 <line:4812:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x563ea82d7ea0 <line:4814:3, line:4823:3>
|   | |-TextComment 0x563ea82d7b80 <line:4814:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d7ba0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d7bc0 <col:11, col:42> Text=" 0 One or more events are ready."
|   | |-TextComment 0x563ea82d7be0 <line:4815:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d7c00 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d7c20 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x563ea82d7c40 <line:4816:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d7c60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d7c80 <col:11, col:57> Text=" -EINTR Polling has been interrupted, e.g. with"
|   | |-TextComment 0x563ea82d7ca0 <line:4817:3, col:76> Text="         k_queue_cancel_wait(). All output events are still set and valid,"
|   | |-TextComment 0x563ea82d7cc0 <line:4818:3, col:77> Text="         cancelled event(s) will be set to K_POLL_STATE_CANCELLED. In other"
|   | |-TextComment 0x563ea82d7ce0 <line:4819:3, col:75> Text="         words, -EINTR status means that at least one of output events is"
|   | |-TextComment 0x563ea82d7d00 <line:4820:3, col:34> Text="         K_POLL_STATE_CANCELLED."
|   | |-TextComment 0x563ea82d7d20 <line:4821:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d7d40 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d7d60 <col:11, col:76> Text=" -ENOMEM Thread resource pool insufficient memory (user mode only)"
|   | |-TextComment 0x563ea82d7d80 <line:4822:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d7da0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d7dc0 <col:11, col:50> Text=" -EINVAL Bad parameters (user mode only)"
|   | `-TextComment 0x563ea82d7de0 <line:4823:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d7ec0 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x563ea82d7f30 <line:4824:1>
|     `-TextComment 0x563ea82d7f00 <col:1> Text=" "
|-FunctionDecl 0x563ea823f9f0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4840:63> col:16 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x563ea823f8f0 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| `-FullComment 0x563ea82d8420 <line:4830:3, line:4838:1>
|   |-ParagraphComment 0x563ea82d8060 <line:4830:3>
|   | `-TextComment 0x563ea82d8030 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d8080 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x563ea82d80e0 <col:10, col:42>
|   |   `-TextComment 0x563ea82d80b0 <col:10, col:42> Text=" Initialize a poll signal object."
|   |-ParagraphComment 0x563ea82d8130 <line:4832:3, col:71>
|   | `-TextComment 0x563ea82d8100 <col:3, col:71> Text=" Ready a poll signal object to be signaled via k_poll_signal_raise()."
|   |-ParagraphComment 0x563ea82d8180 <line:4834:3>
|   | `-TextComment 0x563ea82d8150 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d81a0 <col:4, col:31> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d8230 <col:17, col:31>
|   |   `-TextComment 0x563ea82d8200 <col:17, col:31> Text=" A poll signal."
|   |-ParagraphComment 0x563ea82d8280 <line:4836:3>
|   | `-TextComment 0x563ea82d8250 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d82a0 <col:4, line:4837:3> Name="return"
|   | `-ParagraphComment 0x563ea82d8320 <line:4836:11, line:4837:3>
|   |   |-TextComment 0x563ea82d82d0 <line:4836:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82d82f0 <line:4837:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d8340 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x563ea82d83b0 <line:4838:1>
|     `-TextComment 0x563ea82d8380 <col:1> Text=" "
|-FunctionDecl 0x563ea823fb48 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4848:64> col:16 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| `-ParmVarDecl 0x563ea823fac0 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
|-FunctionDecl 0x563ea823fca0 <line:4850:1, line:4853:1> line:4850:20 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x563ea823fc18 <col:47, col:69> col:69 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x563ea823fe38 <line:4851:1, line:4853:1>
|   `-BinaryOperator 0x563ea823fde0 <line:4852:2, col:21> 'unsigned int' '='
|     |-MemberExpr 0x563ea823fd88 <col:2, col:10> 'unsigned int' lvalue ->signaled 0x563ea823dff0
|     | `-ImplicitCastExpr 0x563ea823fd70 <col:2> 'struct k_poll_signal *' <LValueToRValue>
|     |   `-DeclRefExpr 0x563ea823fd48 <col:2> 'struct k_poll_signal *' lvalue ParmVar 0x563ea823fc18 'signal' 'struct k_poll_signal *'
|     `-IntegerLiteral 0x563ea823fdc0 <col:21> 'unsigned int' 0
|-FunctionDecl 0x563ea8240be8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4867:43> line:4866:16 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x563ea823fe78 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x563ea823fef0 <line:4867:8, col:22> col:22 signaled 'unsigned int *'
| |-ParmVarDecl 0x563ea823ff68 <col:32, col:37> col:37 result 'int *'
| `-FullComment 0x563ea82d8970 <line:4856:3, line:4865:1>
|   |-ParagraphComment 0x563ea82d84c0 <line:4856:3>
|   | `-TextComment 0x563ea82d8490 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d84e0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x563ea82d8540 <col:10, col:68>
|   |   `-TextComment 0x563ea82d8510 <col:10, col:68> Text=" Fetch the signaled state and result value of a poll signal"
|   |-ParagraphComment 0x563ea82d8590 <line:4858:3>
|   | `-TextComment 0x563ea82d8560 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d85b0 <col:4, line:4859:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d8660 <line:4858:17, line:4859:3>
|   |   |-TextComment 0x563ea82d8610 <line:4858:17, col:37> Text=" A poll signal object"
|   |   `-TextComment 0x563ea82d8630 <line:4859:3> Text=" "
|   |-ParamCommandComment 0x563ea82d8680 <col:4, line:4861:3> [in] implicitly Param="signaled" ParamIndex=1
|   | `-ParagraphComment 0x563ea82d8760 <line:4859:19, line:4861:3>
|   |   |-TextComment 0x563ea82d86e0 <line:4859:19, col:73> Text=" An integer buffer which will be written nonzero if the"
|   |   |-TextComment 0x563ea82d8700 <line:4860:3, col:26> Text="		   object was signaled"
|   |   `-TextComment 0x563ea82d8720 <line:4861:3> Text=" "
|   |-ParamCommandComment 0x563ea82d8780 <col:4, line:4864:3> [in] implicitly Param="result" ParamIndex=2
|   | `-ParagraphComment 0x563ea82d8880 <line:4861:17, line:4864:3>
|   |   |-TextComment 0x563ea82d87e0 <line:4861:17, col:77> Text=" An integer destination buffer which will be written with the"
|   |   |-TextComment 0x563ea82d8800 <line:4862:3, col:63> Text="		   result value if the object was signaled, or an undefined"
|   |   |-TextComment 0x563ea82d8820 <line:4863:3, col:27> Text="		   value if it was not."
|   |   `-TextComment 0x563ea82d8840 <line:4864:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d88a0 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x563ea82d8910 <line:4865:1>
|     `-TextComment 0x563ea82d88e0 <col:1> Text=" "
|-FunctionDecl 0x563ea8240e88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4894:75> col:15 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x563ea8240cf0 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x563ea8240d68 <col:65, col:69> col:69 result 'int'
| `-FullComment 0x563ea82d9200 <line:4870:3, line:4892:1>
|   |-ParagraphComment 0x563ea82d8a10 <line:4870:3>
|   | `-TextComment 0x563ea82d89e0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d8a30 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x563ea82d8a90 <col:10, col:38>
|   |   `-TextComment 0x563ea82d8a60 <col:10, col:38> Text=" Signal a poll signal object."
|   |-ParagraphComment 0x563ea82d8bb0 <line:4872:3, line:4874:57>
|   | |-TextComment 0x563ea82d8ab0 <line:4872:3, col:77> Text=" This routine makes ready a poll signal, which is basically a poll event of"
|   | |-TextComment 0x563ea82d8ad0 <line:4873:3, col:77> Text=" type K_POLL_TYPE_SIGNAL. If a thread was polling on that event, it will be"
|   | |-TextComment 0x563ea82d8af0 <line:4874:3, col:24> Text=" made ready to run. A "
|   | |-InlineCommandComment 0x563ea82d8b40 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="result"
|   | `-TextComment 0x563ea82d8b60 <col:34, col:57> Text=" value can be specified."
|   |-ParagraphComment 0x563ea82d8ca0 <line:4876:3, line:4880:27>
|   | |-TextComment 0x563ea82d8bd0 <line:4876:3, col:64> Text=" The poll signal contains a 'signaled' field that, when set by"
|   | |-TextComment 0x563ea82d8bf0 <line:4877:3, col:73> Text=" k_poll_signal_raise(), stays set until the user sets it back to 0 with"
|   | |-TextComment 0x563ea82d8c10 <line:4878:3, col:74> Text=" k_poll_signal_reset(). It thus has to be reset by the user before being"
|   | |-TextComment 0x563ea82d8c30 <line:4879:3, col:76> Text=" passed again to k_poll() or k_poll() will consider it being signaled, and"
|   | `-TextComment 0x563ea82d8c50 <line:4880:3, col:27> Text=" will return immediately."
|   |-ParagraphComment 0x563ea82d8cf0 <line:4882:3>
|   | `-TextComment 0x563ea82d8cc0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d8d10 <col:4, line:4884:65> Name="note"
|   | `-ParagraphComment 0x563ea82d8dc0 <line:4882:9, line:4884:65>
|   |   |-TextComment 0x563ea82d8d40 <line:4882:9, col:69> Text=" The result is stored and the 'signaled' field is set even if"
|   |   |-TextComment 0x563ea82d8d60 <line:4883:3, col:70> Text=" this function returns an error indicating that an expiring poll was"
|   |   `-TextComment 0x563ea82d8d80 <line:4884:3, col:65> Text=" not notified.  The next k_poll() will detect the missed raise."
|   |-ParagraphComment 0x563ea82d8e10 <line:4886:3>
|   | `-TextComment 0x563ea82d8de0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d8e30 <col:4, line:4887:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d8ee0 <line:4886:17, line:4887:3>
|   |   |-TextComment 0x563ea82d8e90 <line:4886:17, col:31> Text=" A poll signal."
|   |   `-TextComment 0x563ea82d8eb0 <line:4887:3> Text=" "
|   |-ParamCommandComment 0x563ea82d8f00 <col:4, col:70> [in] implicitly Param="result" ParamIndex=1
|   | `-ParagraphComment 0x563ea82d8f90 <col:17, col:70>
|   |   `-TextComment 0x563ea82d8f60 <col:17, col:70> Text=" The value to store in the result field of the signal."
|   |-ParagraphComment 0x563ea82d90f0 <line:4889:3, line:4891:3>
|   | |-TextComment 0x563ea82d8fb0 <line:4889:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d8fd0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d8ff0 <col:11, col:51> Text=" 0 The signal was delivered successfully."
|   | |-TextComment 0x563ea82d9010 <line:4890:3> Text=" "
|   | |-InlineCommandComment 0x563ea82d9050 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x563ea82d9070 <col:11, col:78> Text=" -EAGAIN The polling thread's timeout is in the process of expiring."
|   | `-TextComment 0x563ea82d9090 <line:4891:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d9110 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x563ea82d9180 <line:4892:1>
|     `-TextComment 0x563ea82d9150 <col:1> Text=" "
|-FunctionDecl 0x563ea8241100 <line:4899:1, col:70> col:13 z_handle_obj_poll_events 'void (sys_dlist_t *, u32_t)' extern
| |-ParmVarDecl 0x563ea8240f78 <col:38, col:51> col:51 events 'sys_dlist_t *'
| |-ParmVarDecl 0x563ea8240fe8 <col:59, col:65> col:65 state 'u32_t':'unsigned int'
| `-FullComment 0x563ea82d92f0 <line:4897:3, col:12>
|   `-ParagraphComment 0x563ea82d92c0 <col:3, col:12>
|     |-TextComment 0x563ea82d9270 <col:3> Text=" "
|     `-InlineCommandComment 0x563ea82d9290 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x563ea8241298 <line:4921:1, line:4924:1> line:4921:20 k_cpu_idle 'void (void)' static inline
| |-CompoundStmt 0x563ea82413c8 <line:4922:1, line:4924:1>
| | `-CallExpr 0x563ea8241378 <line:4923:2, col:16> 'void'
| |   `-ImplicitCastExpr 0x563ea8241360 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
| |     `-DeclRefExpr 0x563ea8241338 <col:2> 'void (void)' Function 0x563ea81b9120 'arch_cpu_idle' 'void (void)'
| `-FullComment 0x563ea82d98f0 <line:4904:3, line:4920:1>
|   |-ParagraphComment 0x563ea82d9390 <line:4904:3>
|   | `-TextComment 0x563ea82d9360 <col:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d93b0 <col:4, col:43> Text=" cpu_idle_apis CPU Idling APIs"
|   |-ParagraphComment 0x563ea82d9420 <line:4905:3>
|   | `-TextComment 0x563ea82d93f0 <col:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d9440 <col:4, col:24> Text=" kernel_apis"
|   |-ParagraphComment 0x563ea82d9500 <line:4906:3, col:5>
|   | |-TextComment 0x563ea82d9480 <col:3> Text=" "
|   | |-TextComment 0x563ea82d94a0 <col:4> Text="@"
|   | `-TextComment 0x563ea82d94c0 <col:5> Text="{"
|   |-ParagraphComment 0x563ea82d9550 <line:4909:3>
|   | `-TextComment 0x563ea82d9520 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d9570 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x563ea82d95d0 <col:10, col:28>
|   |   `-TextComment 0x563ea82d95a0 <col:10, col:28> Text=" Make the CPU idle."
|   |-ParagraphComment 0x563ea82d9620 <line:4911:3, col:63>
|   | `-TextComment 0x563ea82d95f0 <col:3, col:63> Text=" This function makes the CPU idle until an event wakes it up."
|   |-ParagraphComment 0x563ea82d96e0 <line:4913:3, line:4916:59>
|   | |-TextComment 0x563ea82d9640 <line:4913:3, col:77> Text=" In a regular system, the idle thread should be the only thread responsible"
|   | |-TextComment 0x563ea82d9660 <line:4914:3, col:71> Text=" for making the CPU idle and triggering any type of power management."
|   | |-TextComment 0x563ea82d9680 <line:4915:3, col:79> Text=" However, in some more constrained systems, such as a single-threaded system,"
|   | `-TextComment 0x563ea82d96a0 <line:4916:3, col:59> Text=" the only thread would be responsible for this if needed."
|   |-ParagraphComment 0x563ea82d9730 <line:4918:3>
|   | `-TextComment 0x563ea82d9700 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d9750 <col:4, line:4919:3> Name="return"
|   | `-ParagraphComment 0x563ea82d97d0 <line:4918:11, line:4919:3>
|   |   |-TextComment 0x563ea82d9780 <line:4918:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82d97a0 <line:4919:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d97f0 <col:4, col:23> Text=" K-CPU-IDLE-001"
|   `-ParagraphComment 0x563ea82d9860 <line:4920:1>
|     `-TextComment 0x563ea82d9830 <col:1> Text=" "
|-FunctionDecl 0x563ea8241480 <line:4937:1, line:4940:1> line:4937:20 k_cpu_atomic_idle 'void (unsigned int)' static inline
| |-ParmVarDecl 0x563ea82413f8 <col:38, col:51> col:51 used key 'unsigned int'
| |-CompoundStmt 0x563ea8241638 <line:4938:1, line:4940:1>
| | `-CallExpr 0x563ea8241590 <line:4939:2, col:26> 'void'
| |   |-ImplicitCastExpr 0x563ea8241578 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x563ea8241528 <col:2> 'void (unsigned int)' Function 0x563ea81b92c0 'arch_cpu_atomic_idle' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x563ea82415c0 <col:23> 'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x563ea8241550 <col:23> 'unsigned int' lvalue ParmVar 0x563ea82413f8 'key' 'unsigned int'
| `-FullComment 0x563ea82d9d70 <line:4927:3, line:4936:1>
|   |-ParagraphComment 0x563ea82d9990 <line:4927:3>
|   | `-TextComment 0x563ea82d9960 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d99b0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea82d9a10 <col:10, col:49>
|   |   `-TextComment 0x563ea82d99e0 <col:10, col:49> Text=" Make the CPU idle in an atomic fashion."
|   |-ParagraphComment 0x563ea82d9a80 <line:4929:3, line:4930:54>
|   | |-TextComment 0x563ea82d9a30 <line:4929:3, col:75> Text=" Similar to k_cpu_idle(), but called with interrupts locked if operations"
|   | `-TextComment 0x563ea82d9a50 <line:4930:3, col:54> Text=" must be done atomically before making the CPU idle."
|   |-ParagraphComment 0x563ea82d9ad0 <line:4932:3>
|   | `-TextComment 0x563ea82d9aa0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82d9af0 <col:4, col:61> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x563ea82d9b80 <col:14, col:61>
|   |   `-TextComment 0x563ea82d9b50 <col:14, col:61> Text=" Interrupt locking key obtained from irq_lock()."
|   |-ParagraphComment 0x563ea82d9bd0 <line:4934:3>
|   | `-TextComment 0x563ea82d9ba0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82d9bf0 <col:4, line:4935:3> Name="return"
|   | `-ParagraphComment 0x563ea82d9c70 <line:4934:11, line:4935:3>
|   |   |-TextComment 0x563ea82d9c20 <line:4934:11, col:14> Text=" N/A"
|   |   `-TextComment 0x563ea82d9c40 <line:4935:3> Text=" "
|   |-VerbatimLineComment 0x563ea82d9c90 <col:4, col:23> Text=" K-CPU-IDLE-002"
|   `-ParagraphComment 0x563ea82d9d00 <line:4936:1>
|     `-TextComment 0x563ea82d9cd0 <col:1> Text=" "
|-FunctionDecl 0x563ea8241760 <line:4949:1, col:51> col:13 z_sys_power_save_idle_exit 'void (s32_t)' extern
| |-ParmVarDecl 0x563ea8241660 <col:40, col:46> col:46 ticks 's32_t':'int'
| `-FullComment 0x563ea82d9e60 <line:4947:3, col:12>
|   `-ParagraphComment 0x563ea82d9e30 <col:3, col:12>
|     |-TextComment 0x563ea82d9de0 <col:3> Text=" "
|     `-InlineCommandComment 0x563ea82d9e00 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x563ea8243f70 <line:5008:1, line:5010:30> line:5008:13 z_init_thread_base 'void (struct _thread_base *, int, u32_t, unsigned int)' extern
| |-ParmVarDecl 0x563ea8241920 <col:32, col:53> col:53 thread_base 'struct _thread_base *'
| |-ParmVarDecl 0x563ea8241998 <line:5009:10, col:14> col:14 priority 'int'
| |-ParmVarDecl 0x563ea8241a08 <col:24, col:30> col:30 initial_state 'u32_t':'unsigned int'
| |-ParmVarDecl 0x563ea8241a80 <line:5010:10, col:23> col:23 options 'unsigned int'
| `-FullComment 0x563ea82d9f50 <line:5006:3, col:12>
|   `-ParagraphComment 0x563ea82d9f20 <col:3, col:12>
|     |-TextComment 0x563ea82d9ed0 <col:3> Text=" "
|     `-InlineCommandComment 0x563ea82d9ef0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x563ea8244118 <line:5027:1, col:39> col:13 z_is_thread_essential 'bool (void)' extern
| `-FullComment 0x563ea82da040 <line:5025:3, col:12>
|   `-ParagraphComment 0x563ea82da010 <col:3, col:12>
|     |-TextComment 0x563ea82d9fc0 <col:3> Text=" "
|     `-InlineCommandComment 0x563ea82d9fe0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x563ea8244298 <line:5031:1, col:58> col:13 z_timer_expiration_handler 'void (struct _timeout *)' extern
| |-ParmVarDecl 0x563ea8244210 <col:40, col:57> col:57 t 'struct _timeout *'
| `-FullComment 0x563ea82da130 <line:5029:3, col:12>
|   `-ParagraphComment 0x563ea82da100 <col:3, col:12>
|     |-TextComment 0x563ea82da0b0 <col:3> Text=" "
|     `-InlineCommandComment 0x563ea82da0d0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x563ea82445d8 <line:5177:1, line:5180:1> line:5177:21 Z_THREAD_STACK_BUFFER 'char *(k_thread_stack_t *)' static inline
| |-ParmVarDecl 0x563ea82444c8 <col:43, col:61> col:61 used sym 'k_thread_stack_t *'
| |-CompoundStmt 0x563ea8244778 <line:5178:1, line:5180:1>
| | `-ReturnStmt 0x563ea8244700 <line:5179:2, col:17>
| |   `-CStyleCastExpr 0x563ea82446d8 <col:9, col:17> 'char *' <BitCast>
| |     `-ImplicitCastExpr 0x563ea82446c0 <col:17> 'k_thread_stack_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x563ea8244680 <col:17> 'k_thread_stack_t *' lvalue ParmVar 0x563ea82444c8 'sym' 'k_thread_stack_t *'
| `-FullComment 0x563ea82da570 <line:5168:3, line:5176:1>
|   |-ParagraphComment 0x563ea82da1d0 <line:5168:3>
|   | `-TextComment 0x563ea82da1a0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82da1f0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x563ea82da250 <col:10, col:52>
|   |   `-TextComment 0x563ea82da220 <col:10, col:52> Text=" Get a pointer to the physical stack buffer"
|   |-ParagraphComment 0x563ea82da2c0 <line:5170:3, line:5171:76>
|   | |-TextComment 0x563ea82da270 <line:5170:3, col:72> Text=" This macro is deprecated. If a stack buffer needs to be examined, the"
|   | `-TextComment 0x563ea82da290 <line:5171:3, col:76> Text=" bounds should be obtained from the associated thread's stack_info struct."
|   |-ParagraphComment 0x563ea82da310 <line:5173:3>
|   | `-TextComment 0x563ea82da2e0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82da330 <col:4, line:5174:3> [in] implicitly Param="sym" ParamIndex=0
|   | `-ParagraphComment 0x563ea82da3e0 <line:5173:14, line:5174:3>
|   |   |-TextComment 0x563ea82da390 <line:5173:14, col:40> Text=" Declared stack symbol name"
|   |   `-TextComment 0x563ea82da3b0 <line:5174:3> Text=" "
|   |-BlockCommandComment 0x563ea82da400 <col:4, line:5175:3> Name="return"
|   | `-ParagraphComment 0x563ea82da480 <line:5174:11, line:5175:3>
|   |   |-TextComment 0x563ea82da430 <line:5174:11, col:38> Text=" The buffer itself, a char *"
|   |   `-TextComment 0x563ea82da450 <line:5175:3> Text=" "
|   |-VerbatimLineComment 0x563ea82da4a0 <col:4, col:21> Text=" K-TSTACK-001"
|   `-ParagraphComment 0x563ea82da510 <line:5176:1>
|     `-TextComment 0x563ea82da4e0 <col:1> Text=" "
|-RecordDecl 0x563ea8244790 prev 0x563ea81f3818 <line:5207:1, line:5216:1> line:5207:8 struct k_mem_partition definition
| |-FieldDecl 0x563ea8244858 <line:5209:2, col:12> col:12 start 'uintptr_t':'unsigned long'
| | `-FullComment 0x563ea82da640 <line:5208:5, col:39>
| |   `-ParagraphComment 0x563ea82da610 <col:5, col:39>
| |     `-TextComment 0x563ea82da5e0 <col:5, col:39> Text=" start address of memory partition "
| `-FieldDecl 0x563ea82448d8 <line:5211:2, col:9> col:9 size 'size_t':'unsigned long'
|   `-FullComment 0x563ea82da710 <line:5210:5, col:30>
|     `-ParagraphComment 0x563ea82da6e0 <col:5, col:30>
|       `-TextComment 0x563ea82da6b0 <col:5, col:30> Text=" size of memory partition "
|-RecordDecl 0x563ea8244948 prev 0x563ea81f3790 <line:5222:1, line:5231:1> line:5222:8 struct k_mem_domain definition
| |-FullComment 0x563ea82da8c0 <line:5219:3, line:5221:1>
| | |-ParagraphComment 0x563ea82da7b0 <line:5219:3>
| | | `-TextComment 0x563ea82da780 <col:3> Text=" "
| | |-BlockCommandComment 0x563ea82da7d0 <col:4, col:23> Name="brief"
| | | `-ParagraphComment 0x563ea82da830 <col:10, col:23>
| | |   `-TextComment 0x563ea82da800 <col:10, col:23> Text=" Memory Domain"
| | `-ParagraphComment 0x563ea82da880 <line:5221:1>
| |   `-TextComment 0x563ea82da850 <col:1> Text=" "
| |-FieldDecl 0x563ea8244a08 <line:5228:2, col:14> col:14 mem_domain_q 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x563ea82da990 <line:5227:5, col:14>
| |   `-ParagraphComment 0x563ea82da960 <col:5, col:14>
| |     `-TextComment 0x563ea82da930 <col:5, col:14> Text=" domain q "
| `-FieldDecl 0x563ea8244a88 <line:5230:2, col:7> col:7 num_partitions 'u8_t':'unsigned char'
|   `-FullComment 0x563ea82daa60 <line:5229:5, col:40>
|     `-ParagraphComment 0x563ea82daa30 <col:5, col:40>
|       `-TextComment 0x563ea82daa00 <col:5, col:40> Text=" number of partitions in the domain "
|-FunctionDecl 0x563ea82455f8 <line:5248:1, line:5249:41> line:5248:13 k_mem_domain_init 'void (struct k_mem_domain *, u8_t, struct k_mem_partition **)' extern
| |-ParmVarDecl 0x563ea8244bb0 <col:31, col:52> col:52 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x563ea8244c20 <col:60, col:65> col:65 num_parts 'u8_t':'unsigned char'
| |-ParmVarDecl 0x563ea8244e30 <line:5249:10, col:40> col:34 parts 'struct k_mem_partition **':'struct k_mem_partition **'
| `-FullComment 0x563ea82db060 <line:5235:3, line:5247:1>
|   |-ParagraphComment 0x563ea82dab00 <line:5235:3>
|   | `-TextComment 0x563ea82daad0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82dab20 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x563ea82dab80 <col:10, col:37>
|   |   `-TextComment 0x563ea82dab50 <col:10, col:37> Text=" Initialize a memory domain."
|   |-ParagraphComment 0x563ea82dabd0 <line:5237:3, col:68>
|   | `-TextComment 0x563ea82daba0 <col:3, col:68> Text=" Initialize a memory domain with given name and memory partitions."
|   |-ParagraphComment 0x563ea82dac40 <line:5239:3, line:5240:25>
|   | |-TextComment 0x563ea82dabf0 <line:5239:3, col:71> Text=" See documentation for k_mem_domain_add_partition() for details about"
|   | `-TextComment 0x563ea82dac10 <line:5240:3, col:25> Text=" partition constraints."
|   |-ParagraphComment 0x563ea82dac90 <line:5242:3>
|   | `-TextComment 0x563ea82dac60 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82dacb0 <col:4, line:5243:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x563ea82dad60 <line:5242:17, line:5243:3>
|   |   |-TextComment 0x563ea82dad10 <line:5242:17, col:53> Text=" The memory domain to be initialized."
|   |   `-TextComment 0x563ea82dad30 <line:5243:3> Text=" "
|   |-ParamCommandComment 0x563ea82dad80 <col:4, line:5244:3> [in] implicitly Param="num_parts" ParamIndex=1
|   | `-ParagraphComment 0x563ea82dae30 <line:5243:20, line:5244:3>
|   |   |-TextComment 0x563ea82dade0 <line:5243:20, col:67> Text=" The number of array items of "parts" parameter."
|   |   `-TextComment 0x563ea82dae00 <line:5244:3> Text=" "
|   |-ParamCommandComment 0x563ea82dae50 <col:4, line:5246:3> [in] implicitly Param="parts" ParamIndex=2
|   | `-ParagraphComment 0x563ea82daf30 <line:5244:16, line:5246:3>
|   |   |-TextComment 0x563ea82daeb0 <line:5244:16, col:74> Text=" An array of pointers to the memory partitions. Can be NULL"
|   |   |-TextComment 0x563ea82daed0 <line:5245:3, col:37> Text="              if num_parts is zero."
|   |   `-TextComment 0x563ea82daef0 <line:5246:3> Text=" "
|   |-VerbatimLineComment 0x563ea82daf50 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x563ea82dafc0 <line:5247:1>
|     `-TextComment 0x563ea82daf90 <col:1> Text=" "
|-FunctionDecl 0x563ea8245800 <line:5258:1, col:61> col:13 k_mem_domain_destroy 'void (struct k_mem_domain *)' extern
| |-ParmVarDecl 0x563ea8245700 <col:34, col:55> col:55 domain 'struct k_mem_domain *'
| `-FullComment 0x563ea82db3e0 <line:5251:3, line:5257:1>
|   |-ParagraphComment 0x563ea82db100 <line:5251:3>
|   | `-TextComment 0x563ea82db0d0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82db120 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x563ea82db180 <col:10, col:34>
|   |   `-TextComment 0x563ea82db150 <col:10, col:34> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x563ea82db1d0 <line:5253:3, col:27>
|   | `-TextComment 0x563ea82db1a0 <col:3, col:27> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x563ea82db220 <line:5255:3>
|   | `-TextComment 0x563ea82db1f0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82db240 <col:4, line:5256:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x563ea82db2f0 <line:5255:17, line:5256:3>
|   |   |-TextComment 0x563ea82db2a0 <line:5255:17, col:51> Text=" The memory domain to be destroyed."
|   |   `-TextComment 0x563ea82db2c0 <line:5256:3> Text=" "
|   |-VerbatimLineComment 0x563ea82db310 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x563ea82db380 <line:5257:1>
|     `-TextComment 0x563ea82db350 <col:1> Text=" "
|-FunctionDecl 0x563ea8245aa0 <line:5284:1, line:5285:39> line:5284:13 k_mem_domain_add_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x563ea8245900 <col:40, col:61> col:61 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x563ea8245988 <line:5285:11, col:35> col:35 part 'struct k_mem_partition *'
| `-FullComment 0x563ea82dba80 <line:5261:3, line:5283:1>
|   |-ParagraphComment 0x563ea82db480 <line:5261:3>
|   | `-TextComment 0x563ea82db450 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82db4a0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x563ea82db500 <col:10, col:54>
|   |   `-TextComment 0x563ea82db4d0 <col:10, col:54> Text=" Add a memory partition into a memory domain."
|   |-ParagraphComment 0x563ea82db570 <line:5263:3, line:5264:29>
|   | |-TextComment 0x563ea82db520 <line:5263:3, col:74> Text=" Add a memory partition into a memory domain. Partitions must conform to"
|   | `-TextComment 0x563ea82db540 <line:5264:3, col:29> Text=" the following constraints:"
|   |-ParagraphComment 0x563ea82db720 <line:5266:3, line:5275:28>
|   | |-TextComment 0x563ea82db590 <line:5266:3, col:71> Text=" - Partition bounds must be within system RAM boundaries on MMU-based"
|   | |-TextComment 0x563ea82db5b0 <line:5267:3, col:13> Text="   systems."
|   | |-TextComment 0x563ea82db5d0 <line:5268:3, col:69> Text=" - Partitions in the same memory domain may not overlap each other."
|   | |-TextComment 0x563ea82db5f0 <line:5269:3, col:63> Text=" - Partitions must not be defined which expose private kernel"
|   | |-TextComment 0x563ea82db610 <line:5270:3, col:39> Text="   data structures or kernel objects."
|   | |-TextComment 0x563ea82db630 <line:5271:3, col:75> Text=" - The starting address alignment, and the partition size must conform to"
|   | |-TextComment 0x563ea82db650 <line:5272:3, col:72> Text="   the constraints of the underlying memory management hardware, which"
|   | |-TextComment 0x563ea82db670 <line:5273:3, col:29> Text="   varies per architecture."
|   | |-TextComment 0x563ea82db690 <line:5274:3, col:75> Text=" - Memory domain partitions are only intended to control access to memory"
|   | `-TextComment 0x563ea82db6b0 <line:5275:3, col:28> Text="   from user mode threads."
|   |-ParagraphComment 0x563ea82db790 <line:5277:3, line:5278:12>
|   | |-TextComment 0x563ea82db740 <line:5277:3, col:70> Text=" Violating these constraints may lead to CPU exceptions or undefined"
|   | `-TextComment 0x563ea82db760 <line:5278:3, col:12> Text=" behavior."
|   |-ParagraphComment 0x563ea82db7e0 <line:5280:3>
|   | `-TextComment 0x563ea82db7b0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82db800 <col:4, line:5281:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x563ea82db8b0 <line:5280:17, line:5281:3>
|   |   |-TextComment 0x563ea82db860 <line:5280:17, col:66> Text=" The memory domain to be added a memory partition."
|   |   `-TextComment 0x563ea82db880 <line:5281:3> Text=" "
|   |-ParamCommandComment 0x563ea82db8d0 <col:4, line:5282:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x563ea82db980 <line:5281:15, line:5282:3>
|   |   |-TextComment 0x563ea82db930 <line:5281:15, col:47> Text=" The memory partition to be added"
|   |   `-TextComment 0x563ea82db950 <line:5282:3> Text=" "
|   |-VerbatimLineComment 0x563ea82db9a0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x563ea82dba10 <line:5283:1>
|     `-TextComment 0x563ea82db9e0 <col:1> Text=" "
|-FunctionDecl 0x563ea8245cb8 <line:5296:1, line:5297:35> line:5296:13 k_mem_domain_remove_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x563ea8245ba0 <col:43, col:64> col:64 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x563ea8245c28 <line:5297:7, col:31> col:31 part 'struct k_mem_partition *'
| `-FullComment 0x563ea82dbed0 <line:5288:3, line:5295:1>
|   |-ParagraphComment 0x563ea82dbb20 <line:5288:3>
|   | `-TextComment 0x563ea82dbaf0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82dbb40 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x563ea82dbba0 <col:10, col:57>
|   |   `-TextComment 0x563ea82dbb70 <col:10, col:57> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x563ea82dbbf0 <line:5290:3, col:50>
|   | `-TextComment 0x563ea82dbbc0 <col:3, col:50> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x563ea82dbc40 <line:5292:3>
|   | `-TextComment 0x563ea82dbc10 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82dbc60 <col:4, line:5293:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x563ea82dbd10 <line:5292:17, line:5293:3>
|   |   |-TextComment 0x563ea82dbcc0 <line:5292:17, col:68> Text=" The memory domain to be removed a memory partition."
|   |   `-TextComment 0x563ea82dbce0 <line:5293:3> Text=" "
|   |-ParamCommandComment 0x563ea82dbd30 <col:4, line:5294:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x563ea82dbde0 <line:5293:15, line:5294:3>
|   |   |-TextComment 0x563ea82dbd90 <line:5293:15, col:49> Text=" The memory partition to be removed"
|   |   `-TextComment 0x563ea82dbdb0 <line:5294:3> Text=" "
|   |-VerbatimLineComment 0x563ea82dbe00 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x563ea82dbe70 <line:5295:1>
|     `-TextComment 0x563ea82dbe40 <col:1> Text=" "
|-FunctionDecl 0x563ea8245f40 <line:5309:1, line:5310:23> line:5309:13 k_mem_domain_add_thread 'void (struct k_mem_domain *, k_tid_t)' extern
| |-ParmVarDecl 0x563ea8245dc0 <col:37, col:58> col:58 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x563ea8245e30 <line:5310:9, col:17> col:17 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x563ea82dc360 <line:5300:3, line:5308:1>
|   |-ParagraphComment 0x563ea82dbf70 <line:5300:3>
|   | `-TextComment 0x563ea82dbf40 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82dbf90 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x563ea82dbff0 <col:10, col:44>
|   |   `-TextComment 0x563ea82dbfc0 <col:10, col:44> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x563ea82dc040 <line:5302:3, col:37>
|   | `-TextComment 0x563ea82dc010 <col:3, col:37> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x563ea82dc090 <line:5304:3>
|   | `-TextComment 0x563ea82dc060 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82dc0b0 <col:4, line:5305:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x563ea82dc160 <line:5304:17, line:5305:3>
|   |   |-TextComment 0x563ea82dc110 <line:5304:17, col:77> Text=" The memory domain that the thread is going to be added into."
|   |   `-TextComment 0x563ea82dc130 <line:5305:3> Text=" "
|   |-ParamCommandComment 0x563ea82dc180 <col:4, col:71> [in] implicitly Param="thread" ParamIndex=1
|   | `-ParagraphComment 0x563ea82dc210 <col:17, col:71>
|   |   `-TextComment 0x563ea82dc1e0 <col:17, col:71> Text=" ID of thread going to be added into the memory domain."
|   |-ParagraphComment 0x563ea82dc260 <line:5307:3>
|   | `-TextComment 0x563ea82dc230 <col:3> Text=" "
|   |-VerbatimLineComment 0x563ea82dc280 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x563ea82dc2f0 <line:5308:1>
|     `-TextComment 0x563ea82dc2c0 <col:1> Text=" "
|-FunctionDecl 0x563ea82460b0 <line:5320:1, col:54> col:13 k_mem_domain_remove_thread 'void (k_tid_t)' extern
| |-ParmVarDecl 0x563ea8246028 <col:40, col:48> col:48 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x563ea82dc6e0 <line:5313:3, line:5319:1>
|   |-ParagraphComment 0x563ea82dc400 <line:5313:3>
|   | `-TextComment 0x563ea82dc3d0 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82dc420 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x563ea82dc480 <col:10, col:49>
|   |   `-TextComment 0x563ea82dc450 <col:10, col:49> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x563ea82dc4d0 <line:5315:3, col:42>
|   | `-TextComment 0x563ea82dc4a0 <col:3, col:42> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x563ea82dc520 <line:5317:3>
|   | `-TextComment 0x563ea82dc4f0 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82dc540 <col:4, line:5318:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x563ea82dc5f0 <line:5317:17, line:5318:3>
|   |   |-TextComment 0x563ea82dc5a0 <line:5317:17, col:73> Text=" ID of thread going to be removed from its memory domain."
|   |   `-TextComment 0x563ea82dc5c0 <line:5318:3> Text=" "
|   |-VerbatimLineComment 0x563ea82dc610 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x563ea82dc680 <line:5319:1>
|     `-TextComment 0x563ea82dc650 <col:1> Text=" "
|-FunctionDecl 0x563ea82462a8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:5356:54> col:15 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x563ea82461e0 <col:31, col:48> col:48 thread 'struct k_thread *'
| `-FullComment 0x563ea82dcd00 <line:5337:3, line:5354:74>
|   |-ParagraphComment 0x563ea82dc780 <line:5337:3>
|   | `-TextComment 0x563ea82dc750 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82dc7a0 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x563ea82dc800 <col:10, col:69>
|   |   `-TextComment 0x563ea82dc7d0 <col:10, col:69> Text=" Disable preservation of floating point context information."
|   |-ParagraphComment 0x563ea82dc870 <line:5339:3, line:5340:56>
|   | |-TextComment 0x563ea82dc820 <line:5339:3, col:60> Text=" This routine informs the kernel that the specified thread"
|   | `-TextComment 0x563ea82dc840 <line:5340:3, col:56> Text=" will no longer be using the floating point registers."
|   |-ParagraphComment 0x563ea82dc8c0 <line:5342:3>
|   | `-TextComment 0x563ea82dc890 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82dc8e0 <col:4, line:5344:63> Name="warning"
|   | `-ParagraphComment 0x563ea82dc960 <line:5343:3, line:5344:63>
|   |   |-TextComment 0x563ea82dc910 <line:5343:3, col:73> Text=" Some architectures apply restrictions on how the disabling of floating"
|   |   `-TextComment 0x563ea82dc930 <line:5344:3, col:63> Text=" point preservation may be requested, see arch_float_disable."
|   |-ParagraphComment 0x563ea82dc9b0 <line:5346:3>
|   | `-TextComment 0x563ea82dc980 <col:3> Text=" "
|   |-BlockCommandComment 0x563ea82dc9d0 <col:4, line:5348:52> Name="warning"
|   | `-ParagraphComment 0x563ea82dca50 <line:5347:3, line:5348:52>
|   |   |-TextComment 0x563ea82dca00 <line:5347:3, col:73> Text=" This routine should only be used to disable floating point support for"
|   |   `-TextComment 0x563ea82dca20 <line:5348:3, col:52> Text=" a thread that currently has such support enabled."
|   |-ParagraphComment 0x563ea82dcaa0 <line:5350:3>
|   | `-TextComment 0x563ea82dca70 <col:3> Text=" "
|   |-ParamCommandComment 0x563ea82dcac0 <col:4, col:30> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x563ea82dcb50 <col:17, col:30>
|   |   `-TextComment 0x563ea82dcb20 <col:17, col:30> Text=" ID of thread."
|   `-ParagraphComment 0x563ea82dcc90 <line:5352:3, line:5354:74>
|     |-TextComment 0x563ea82dcb70 <line:5352:3> Text=" "
|     |-InlineCommandComment 0x563ea82dcb90 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x563ea82dcbb0 <col:11, col:30> Text=" 0       On success."
|     |-TextComment 0x563ea82dcbd0 <line:5353:3> Text=" "
|     |-InlineCommandComment 0x563ea82dcbf0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x563ea82dcc10 <col:11, col:70> Text=" -ENOSYS If the floating point disabling is not implemented."
|     `-TextComment 0x563ea82dcc30 <line:5354:3, col:74> Text="         -EINVAL If the floating point disabling could not be performed."
|-FunctionDecl 0x563ea8249608 prev 0x563ea81f6c50 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:24:1, col:81> col:13 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' extern
| |-ParmVarDecl 0x563ea82494f0 <col:42, col:49> col:49 object 'void *'
| `-ParmVarDecl 0x563ea8249578 <col:57, col:75> col:75 thread 'struct k_thread *'
|-FunctionDecl 0x563ea82497e8 prev 0x563ea81f8d80 <line:25:1, line:35:1> line:25:20 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x563ea82496d0 <col:42, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x563ea8249758 <col:57, col:75> col:75 used thread 'struct k_thread *'
| `-CompoundStmt 0x563ea8249ae8 <line:26:1, line:35:1>
|   |-DoStmt 0x563ea8249978 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8249940 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea82498f0 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8249958 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea8249a80 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:34:2, col:45> 'void'
|     |-ImplicitCastExpr 0x563ea8249a68 <col:2> 'void (*)(void *, struct k_thread *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea8249998 <col:2> 'void (void *, struct k_thread *)' Function 0x563ea8249608 'z_impl_k_object_access_grant' 'void (void *, struct k_thread *)'
|     |-ImplicitCastExpr 0x563ea8249ab8 <col:31> 'void *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ea82499c0 <col:31> 'void *' lvalue ParmVar 0x563ea82496d0 'object' 'void *'
|     `-ImplicitCastExpr 0x563ea8249ad0 <col:39> 'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea82499e8 <col:39> 'struct k_thread *' lvalue ParmVar 0x563ea8249758 'thread' 'struct k_thread *'
|-FunctionDecl 0x563ea8249ba8 prev 0x563ea81f8878 <line:38:1, col:50> col:13 used z_impl_k_object_release 'void (void *)' extern
| `-ParmVarDecl 0x563ea8249b20 <col:37, col:44> col:44 object 'void *'
|-FunctionDecl 0x563ea8249cf0 prev 0x563ea81f9108 <line:39:1, line:49:1> line:39:20 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x563ea8249c68 <col:37, col:44> col:44 used object 'void *'
| `-CompoundStmt 0x563ea8249f48 <line:40:1, line:49:1>
|   |-DoStmt 0x563ea8249e78 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8249e40 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8249df0 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8249e58 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea8249f00 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:48:2, col:32> 'void'
|     |-ImplicitCastExpr 0x563ea8249ee8 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea8249e98 <col:2> 'void (void *)' Function 0x563ea8249ba8 'z_impl_k_object_release' 'void (void *)'
|     `-ImplicitCastExpr 0x563ea8249f30 <col:26> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea8249ec0 <col:26> 'void *' lvalue ParmVar 0x563ea8249c68 'object' 'void *'
|-FunctionDecl 0x563ea824a018 prev 0x563ea81f9610 <line:52:1, col:57> col:15 used z_impl_k_object_alloc 'void *(enum k_objects)' extern
| `-ParmVarDecl 0x563ea8249f88 <col:37, col:52> col:52 otype 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x563ea824a170 prev 0x563ea81f94b8 <line:53:1, line:62:1> line:53:22 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x563ea824a0e0 <col:37, col:52> col:52 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x563ea824b790 <line:54:1, line:62:1>
|   |-DoStmt 0x563ea824a2f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea824a2c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea824a270 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea824a2d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea824b778 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:61:2, col:36>
|     `-CallExpr 0x563ea824b730 <col:9, col:36> 'void *'
|       |-ImplicitCastExpr 0x563ea824b718 <col:9> 'void *(*)(enum k_objects)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea824a318 <col:9> 'void *(enum k_objects)' Function 0x563ea824a018 'z_impl_k_object_alloc' 'void *(enum k_objects)'
|       `-ImplicitCastExpr 0x563ea824b760 <col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|         `-DeclRefExpr 0x563ea824a340 <col:31> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x563ea824a0e0 'otype' 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x563ea824bcb8 <line:65:1, col:207> col:16 used z_impl_k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' extern
| |-ParmVarDecl 0x563ea824b7d8 <col:39, col:57> col:57 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x563ea824b848 <col:69, col:88> col:88 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x563ea824b8b8 <col:95, col:102> col:102 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea824b928 <col:114, col:131> col:131 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x563ea824b9a0 <col:138, col:145> col:145 p1 'void *'
| |-ParmVarDecl 0x563ea824ba18 <col:149, col:156> col:156 p2 'void *'
| |-ParmVarDecl 0x563ea824ba90 <col:160, col:167> col:167 p3 'void *'
| |-ParmVarDecl 0x563ea824bb08 <col:171, col:175> col:175 prio 'int'
| |-ParmVarDecl 0x563ea824bb78 <col:181, col:187> col:187 options 'u32_t':'unsigned int'
| `-ParmVarDecl 0x563ea824bbe8 <col:196, col:202> col:202 delay 's32_t':'int'
|-FunctionDecl 0x563ea824c2b0 prev 0x563ea8201000 <line:66:1, line:82:1> line:66:23 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x563ea824bdd0 <col:39, col:57> col:57 used new_thread 'struct k_thread *'
| |-ParmVarDecl 0x563ea824be40 <col:69, col:88> col:88 used stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x563ea824beb0 <col:95, col:102> col:102 used stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea824bf20 <col:114, col:131> col:131 used entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x563ea824bf98 <col:138, col:145> col:145 used p1 'void *'
| |-ParmVarDecl 0x563ea824c010 <col:149, col:156> col:156 used p2 'void *'
| |-ParmVarDecl 0x563ea824c088 <col:160, col:167> col:167 used p3 'void *'
| |-ParmVarDecl 0x563ea824c100 <col:171, col:175> col:175 used prio 'int'
| |-ParmVarDecl 0x563ea824c170 <col:181, col:187> col:187 used options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x563ea824c1e0 <col:196, col:202> col:202 used delay 's32_t':'int'
| `-CompoundStmt 0x563ea824c860 <line:67:1, line:82:1>
|   |-DoStmt 0x563ea824c480 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea824c448 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea824c3f8 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea824c460 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea824c848 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:81:2, col:102>
|     `-CallExpr 0x563ea824c6d0 <col:9, col:102> 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x563ea824c6b8 <col:9> 'k_tid_t (*)(struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea824c4a0 <col:9> 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' Function 0x563ea824bcb8 'z_impl_k_thread_create' 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)'
|       |-ImplicitCastExpr 0x563ea824c758 <col:32> 'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea824c4c8 <col:32> 'struct k_thread *' lvalue ParmVar 0x563ea824bdd0 'new_thread' 'struct k_thread *'
|       |-ImplicitCastExpr 0x563ea824c770 <col:44> 'k_thread_stack_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea824c4f0 <col:44> 'k_thread_stack_t *' lvalue ParmVar 0x563ea824be40 'stack' 'k_thread_stack_t *'
|       |-ImplicitCastExpr 0x563ea824c788 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea824c518 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x563ea824beb0 'stack_size' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x563ea824c7a0 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea824c540 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' lvalue ParmVar 0x563ea824bf20 'entry' 'k_thread_entry_t':'void (*)(void *, void *, void *)'
|       |-ImplicitCastExpr 0x563ea824c7b8 <col:70> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea824c568 <col:70> 'void *' lvalue ParmVar 0x563ea824bf98 'p1' 'void *'
|       |-ImplicitCastExpr 0x563ea824c7d0 <col:74> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea824c590 <col:74> 'void *' lvalue ParmVar 0x563ea824c010 'p2' 'void *'
|       |-ImplicitCastExpr 0x563ea824c7e8 <col:78> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea824c5b8 <col:78> 'void *' lvalue ParmVar 0x563ea824c088 'p3' 'void *'
|       |-ImplicitCastExpr 0x563ea824c800 <col:82> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea824c5e0 <col:82> 'int' lvalue ParmVar 0x563ea824c100 'prio' 'int'
|       |-ImplicitCastExpr 0x563ea824c818 <col:88> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea824c608 <col:88> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea824c170 'options' 'u32_t':'unsigned int'
|       `-ImplicitCastExpr 0x563ea824c830 <col:97> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea824c630 <col:97> 's32_t':'int' lvalue ParmVar 0x563ea824c1e0 'delay' 's32_t':'int'
|-FunctionDecl 0x563ea824c918 <line:85:1, col:37> col:14 used z_impl_k_sleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x563ea824c890 <col:29, col:35> col:35 ms 's32_t':'int'
|-FunctionDecl 0x563ea824ca58 prev 0x563ea8201a30 <line:86:1, line:95:1> line:86:21 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x563ea824c9d0 <col:29, col:35> col:35 used ms 's32_t':'int'
| `-CompoundStmt 0x563ea824cd20 <line:87:1, line:95:1>
|   |-DoStmt 0x563ea824cbe0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea824cba8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea824cb58 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea824cbc0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea824cd08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:94:2, col:26>
|     `-CallExpr 0x563ea824ccc0 <col:9, col:26> 's32_t':'int'
|       |-ImplicitCastExpr 0x563ea824cca8 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea824cc00 <col:9> 's32_t (s32_t)' Function 0x563ea824c918 'z_impl_k_sleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x563ea824ccf0 <col:24> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea824cc28 <col:24> 's32_t':'int' lvalue ParmVar 0x563ea824c9d0 'ms' 's32_t':'int'
|-FunctionDecl 0x563ea824cdd8 <line:98:1, col:38> col:14 used z_impl_k_usleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x563ea824cd50 <col:30, col:36> col:36 us 's32_t':'int'
|-FunctionDecl 0x563ea824cf18 prev 0x563ea8201ba0 <line:99:1, line:108:1> line:99:21 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x563ea824ce90 <col:30, col:36> col:36 used us 's32_t':'int'
| `-CompoundStmt 0x563ea824d188 <line:100:1, line:108:1>
|   |-DoStmt 0x563ea824d0a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea824d068 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea824d018 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea824d080 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea824d170 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:107:2, col:27>
|     `-CallExpr 0x563ea824d128 <col:9, col:27> 's32_t':'int'
|       |-ImplicitCastExpr 0x563ea824d110 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea824d0c0 <col:9> 's32_t (s32_t)' Function 0x563ea824cdd8 'z_impl_k_usleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x563ea824d158 <col:25> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea824d0e8 <col:25> 's32_t':'int' lvalue ParmVar 0x563ea824ce90 'us' 's32_t':'int'
|-FunctionDecl 0x563ea824d240 <line:111:1, col:50> col:13 used z_impl_k_busy_wait 'void (u32_t)' extern
| `-ParmVarDecl 0x563ea824d1b8 <col:32, col:38> col:38 usec_to_wait 'u32_t':'unsigned int'
|-FunctionDecl 0x563ea824d380 prev 0x563ea8201d50 <line:112:1, line:122:1> line:112:20 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x563ea824d2f8 <col:32, col:38> col:38 used usec_to_wait 'u32_t':'unsigned int'
| `-CompoundStmt 0x563ea824d608 <line:113:1, line:122:1>
|   |-DoStmt 0x563ea824d508 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea824d4d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea824d480 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea824d4e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea824d5c0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:121:2, col:33> 'void'
|     |-ImplicitCastExpr 0x563ea824d5a8 <col:2> 'void (*)(u32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea824d528 <col:2> 'void (u32_t)' Function 0x563ea824d240 'z_impl_k_busy_wait' 'void (u32_t)'
|     `-ImplicitCastExpr 0x563ea824d5f0 <col:21> 'u32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x563ea824d550 <col:21> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea824d2f8 'usec_to_wait' 'u32_t':'unsigned int'
|-FunctionDecl 0x563ea824d648 <line:125:1, col:28> col:13 used z_impl_k_yield 'void ()' extern
|-FunctionDecl 0x563ea824d730 prev 0x563ea8201eb8 <line:126:1, line:136:1> line:126:20 k_yield 'void (void)' static inline
| `-CompoundStmt 0x563ea824d968 <line:127:1, line:136:1>
|   |-DoStmt 0x563ea824d8b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea824d878 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea824d828 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea824d890 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea824d940 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:135:2, col:17> 'void'
|     `-ImplicitCastExpr 0x563ea824d928 <col:2> 'void (*)()' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x563ea824d8d0 <col:2> 'void ()' Function 0x563ea824d648 'z_impl_k_yield' 'void ()'
|-FunctionDecl 0x563ea824da20 <line:139:1, col:43> col:13 used z_impl_k_wakeup 'void (k_tid_t)' extern
| `-ParmVarDecl 0x563ea824d998 <col:29, col:37> col:37 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x563ea824db60 prev 0x563ea82020b0 <line:140:1, line:150:1> line:140:20 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x563ea824dad8 <col:29, col:37> col:37 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x563ea824de18 <line:141:1, line:150:1>
|   |-DoStmt 0x563ea824dce8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea824dcb0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea824dc60 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea824dcc8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea824ddd0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:149:2, col:24> 'void'
|     |-ImplicitCastExpr 0x563ea824ddb8 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea824dd08 <col:2> 'void (k_tid_t)' Function 0x563ea824da20 'z_impl_k_wakeup' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x563ea824de00 <col:18> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea824dd30 <col:18> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x563ea824dad8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x563ea824deb8 <line:153:1, col:37> col:16 used z_impl_k_current_get 'k_tid_t ()' extern
|-FunctionDecl 0x563ea824df78 prev 0x563ea8202280 <line:154:1, line:163:1> line:154:23 k_current_get 'k_tid_t (void)' static inline
| `-CompoundStmt 0x563ea824e1f0 <line:155:1, line:163:1>
|   |-DoStmt 0x563ea824e0f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea824e0c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea824e070 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea824e0d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea824e1d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:162:2, col:30>
|     `-CallExpr 0x563ea824e1b0 <col:9, col:30> 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x563ea824e198 <col:9> 'k_tid_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x563ea824e118 <col:9> 'k_tid_t ()' Function 0x563ea824deb8 'z_impl_k_current_get' 'k_tid_t ()'
|-FunctionDecl 0x563ea824e2a8 <line:166:1, col:49> col:13 used z_impl_k_thread_abort 'void (k_tid_t)' extern
| `-ParmVarDecl 0x563ea824e220 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x563ea824e3e8 prev 0x563ea82023e0 <line:167:1, line:177:1> line:167:20 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x563ea824e360 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x563ea824e640 <line:168:1, line:177:1>
|   |-DoStmt 0x563ea824e570 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea824e538 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea824e4e8 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea824e550 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea824e5f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:176:2, col:30> 'void'
|     |-ImplicitCastExpr 0x563ea824e5e0 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea824e590 <col:2> 'void (k_tid_t)' Function 0x563ea824e2a8 'z_impl_k_thread_abort' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x563ea824e628 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea824e5b8 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x563ea824e360 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x563ea824e720 <line:180:1, col:49> col:13 used z_impl_k_thread_start 'void (k_tid_t)' extern
| `-ParmVarDecl 0x563ea824e670 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x563ea824e860 prev 0x563ea8202550 <line:181:1, line:191:1> line:181:20 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x563ea824e7d8 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x563ea824eab8 <line:182:1, line:191:1>
|   |-DoStmt 0x563ea824e9e8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea824e9b0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea824e960 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea824e9c8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea824ea70 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:190:2, col:30> 'void'
|     |-ImplicitCastExpr 0x563ea824ea58 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea824ea08 <col:2> 'void (k_tid_t)' Function 0x563ea824e720 'z_impl_k_thread_start' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x563ea824eaa0 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea824ea30 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x563ea824e7d8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x563ea824eb78 <line:194:1, col:55> col:12 used z_impl_k_thread_priority_get 'int (k_tid_t)' extern
| `-ParmVarDecl 0x563ea824eae8 <col:41, col:49> col:49 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x563ea824ecc0 prev 0x563ea8202d78 <line:195:1, line:204:1> line:195:19 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x563ea824ec30 <col:41, col:49> col:49 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x563ea824ef90 <line:196:1, line:204:1>
|   |-DoStmt 0x563ea824ee48 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea824ee10 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea824edc0 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea824ee28 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea824ef78 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:203:2, col:44>
|     `-CallExpr 0x563ea824ef30 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x563ea824ef18 <col:9> 'int (*)(k_tid_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea824ee68 <col:9> 'int (k_tid_t)' Function 0x563ea824eb78 'z_impl_k_thread_priority_get' 'int (k_tid_t)'
|       `-ImplicitCastExpr 0x563ea824ef60 <col:38> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea824ee90 <col:38> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x563ea824ec30 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x563ea824f0c8 <line:207:1, col:66> col:13 used z_impl_k_thread_priority_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x563ea824efc0 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x563ea824f038 <col:58, col:62> col:62 prio 'int'
|-FunctionDecl 0x563ea824f290 prev 0x563ea82036d0 <line:208:1, line:218:1> line:208:20 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x563ea824f188 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x563ea824f200 <col:58, col:62> col:62 used prio 'int'
| `-CompoundStmt 0x563ea824f598 <line:209:1, line:218:1>
|   |-DoStmt 0x563ea824f420 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea824f3e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea824f398 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea824f400 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea824f530 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:217:2, col:43> 'void'
|     |-ImplicitCastExpr 0x563ea824f518 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea824f440 <col:2> 'void (k_tid_t, int)' Function 0x563ea824f0c8 'z_impl_k_thread_priority_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x563ea824f568 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ea824f468 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x563ea824f188 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x563ea824f580 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x563ea824f490 <col:39> 'int' lvalue ParmVar 0x563ea824f200 'prio' 'int'
|-FunctionDecl 0x563ea824f730 <line:221:1, col:70> col:13 used z_impl_k_thread_deadline_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x563ea824f5c8 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x563ea824f640 <col:58, col:62> col:62 deadline 'int'
|-FunctionDecl 0x563ea824f8f8 <line:222:1, line:232:1> line:222:20 k_thread_deadline_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x563ea824f7f0 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x563ea824f868 <col:58, col:62> col:62 used deadline 'int'
| `-CompoundStmt 0x563ea824fba0 <line:223:1, line:232:1>
|   |-DoStmt 0x563ea824fa88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea824fa50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea824fa00 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea824fa68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea824fb38 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:231:2, col:47> 'void'
|     |-ImplicitCastExpr 0x563ea824fb20 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea824faa8 <col:2> 'void (k_tid_t, int)' Function 0x563ea824f730 'z_impl_k_thread_deadline_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x563ea824fb70 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ea824fad0 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x563ea824f7f0 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x563ea824fb88 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x563ea824faf8 <col:39> 'int' lvalue ParmVar 0x563ea824f868 'deadline' 'int'
|-FunctionDecl 0x563ea824fc58 <line:235:1, col:51> col:13 used z_impl_k_thread_suspend 'void (k_tid_t)' extern
| `-ParmVarDecl 0x563ea824fbd0 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x563ea824fd98 prev 0x563ea8203840 <line:236:1, line:246:1> line:236:20 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x563ea824fd10 <col:37, col:45> col:45 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x563ea824fff0 <line:237:1, line:246:1>
|   |-DoStmt 0x563ea824ff20 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea824fee8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea824fe98 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea824ff00 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea824ffa8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:245:2, col:32> 'void'
|     |-ImplicitCastExpr 0x563ea824ff90 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea824ff40 <col:2> 'void (k_tid_t)' Function 0x563ea824fc58 'z_impl_k_thread_suspend' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x563ea824ffd8 <col:26> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea824ff68 <col:26> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x563ea824fd10 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x563ea82500a8 <line:249:1, col:50> col:13 used z_impl_k_thread_resume 'void (k_tid_t)' extern
| `-ParmVarDecl 0x563ea8250020 <col:36, col:44> col:44 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x563ea82501e8 prev 0x563ea82039b0 <line:250:1, line:260:1> line:250:20 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x563ea8250160 <col:36, col:44> col:44 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x563ea8250440 <line:251:1, line:260:1>
|   |-DoStmt 0x563ea8250370 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8250338 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea82502e8 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8250350 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea82503f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:259:2, col:31> 'void'
|     |-ImplicitCastExpr 0x563ea82503e0 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea8250390 <col:2> 'void (k_tid_t)' Function 0x563ea82500a8 'z_impl_k_thread_resume' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x563ea8250428 <col:25> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea82503b8 <col:25> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x563ea8250160 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x563ea82504b0 <line:263:1, col:39> col:12 used z_impl_k_is_preempt_thread 'int ()' extern
|-FunctionDecl 0x563ea8250578 prev 0x563ea8203f50 <line:264:1, line:273:1> line:264:19 k_is_preempt_thread 'int (void)' static inline
| `-CompoundStmt 0x563ea82507f0 <line:265:1, line:273:1>
|   |-DoStmt 0x563ea82506f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea82506c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8250670 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea82506d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea82507d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:272:2, col:36>
|     `-CallExpr 0x563ea82507b0 <col:9, col:36> 'int'
|       `-ImplicitCastExpr 0x563ea8250798 <col:9> 'int (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x563ea8250740 <col:9> 'int ()' Function 0x563ea82504b0 'z_impl_k_is_preempt_thread' 'int ()'
|-FunctionDecl 0x563ea82508b0 <line:276:1, col:57> col:13 used z_impl_k_thread_custom_data_set 'void (void *)' extern
| `-ParmVarDecl 0x563ea8250828 <col:45, col:52> col:52 value 'void *'
|-FunctionDecl 0x563ea82509f8 prev 0x563ea82046e0 <line:277:1, line:287:1> line:277:20 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x563ea8250970 <col:45, col:52> col:52 used value 'void *'
| `-CompoundStmt 0x563ea8250c50 <line:278:1, line:287:1>
|   |-DoStmt 0x563ea8250b80 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8250b48 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8250af8 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8250b60 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea8250c08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:286:2, col:39> 'void'
|     |-ImplicitCastExpr 0x563ea8250bf0 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea8250ba0 <col:2> 'void (void *)' Function 0x563ea82508b0 'z_impl_k_thread_custom_data_set' 'void (void *)'
|     `-ImplicitCastExpr 0x563ea8250c38 <col:34> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea8250bc8 <col:34> 'void *' lvalue ParmVar 0x563ea8250970 'value' 'void *'
|-FunctionDecl 0x563ea8250cc0 <line:290:1, col:47> col:15 used z_impl_k_thread_custom_data_get 'void *()' extern
|-FunctionDecl 0x563ea8250d88 prev 0x563ea8204888 <line:291:1, line:300:1> line:291:22 k_thread_custom_data_get 'void *(void)' static inline
| `-CompoundStmt 0x563ea8250fd0 <line:292:1, line:300:1>
|   |-DoStmt 0x563ea8250f08 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8250ed0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8250e80 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8250ee8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8250fb8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:299:2, col:41>
|     `-CallExpr 0x563ea8250f90 <col:9, col:41> 'void *'
|       `-ImplicitCastExpr 0x563ea8250f78 <col:9> 'void *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x563ea8250f28 <col:9> 'void *()' Function 0x563ea8250cc0 'z_impl_k_thread_custom_data_get' 'void *()'
|-FunctionDecl 0x563ea8251110 <line:303:1, col:74> col:12 used z_impl_k_thread_name_set 'int (k_tid_t, const char *)' extern
| |-ParmVarDecl 0x563ea8251000 <col:37, col:45> col:45 thread_id 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x563ea8251078 <col:56, col:69> col:69 value 'const char *'
|-FunctionDecl 0x563ea82512e0 prev 0x563ea8204af8 <line:304:1, line:313:1> line:304:19 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x563ea82511d0 <col:37, col:45> col:45 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x563ea8251248 <col:56, col:69> col:69 used value 'const char *'
| `-CompoundStmt 0x563ea8251600 <line:305:1, line:313:1>
|   |-DoStmt 0x563ea8251470 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8251438 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea82513e8 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8251450 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea82515e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:312:2, col:50>
|     `-CallExpr 0x563ea8251580 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x563ea8251568 <col:9> 'int (*)(k_tid_t, const char *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8251490 <col:9> 'int (k_tid_t, const char *)' Function 0x563ea8251110 'z_impl_k_thread_name_set' 'int (k_tid_t, const char *)'
|       |-ImplicitCastExpr 0x563ea82515b8 <col:34> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea82514b8 <col:34> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x563ea82511d0 'thread_id' 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x563ea82515d0 <col:45> 'const char *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea82514e0 <col:45> 'const char *' lvalue ParmVar 0x563ea8251248 'value' 'const char *'
|-FunctionDecl 0x563ea82517f0 <line:316:1, col:80> col:12 used z_impl_k_thread_name_copy 'int (k_tid_t, char *, size_t)' extern
| |-ParmVarDecl 0x563ea8251630 <col:38, col:46> col:46 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x563ea82516a8 <col:57, col:64> col:64 buf 'char *'
| `-ParmVarDecl 0x563ea8251750 <col:69, col:76> col:76 size 'size_t':'unsigned long'
|-FunctionDecl 0x563ea8251a40 prev 0x563ea8204ff8 <line:317:1, line:326:1> line:317:19 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x563ea82518b8 <col:38, col:46> col:46 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x563ea8251930 <col:57, col:64> col:64 used buf 'char *'
| |-ParmVarDecl 0x563ea82519a0 <col:69, col:76> col:76 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x563ea8251db0 <line:318:1, line:326:1>
|   |-DoStmt 0x563ea8251bd8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8251ba0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8251b50 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8251bb8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8251d98 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:325:2, col:55>
|     `-CallExpr 0x563ea8251d10 <col:9, col:55> 'int'
|       |-ImplicitCastExpr 0x563ea8251cf8 <col:9> 'int (*)(k_tid_t, char *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8251bf8 <col:9> 'int (k_tid_t, char *, size_t)' Function 0x563ea82517f0 'z_impl_k_thread_name_copy' 'int (k_tid_t, char *, size_t)'
|       |-ImplicitCastExpr 0x563ea8251d50 <col:35> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8251c20 <col:35> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x563ea82518b8 'thread_id' 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x563ea8251d68 <col:46> 'char *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8251c48 <col:46> 'char *' lvalue ParmVar 0x563ea8251930 'buf' 'char *'
|       `-ImplicitCastExpr 0x563ea8251d80 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8251c70 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x563ea82519a0 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x563ea8251f70 <line:329:1, col:86> col:13 used z_impl_k_timer_start 'void (struct k_timer *, s32_t, s32_t)' extern
| |-ParmVarDecl 0x563ea8251df8 <col:34, col:51> col:51 timer 'struct k_timer *'
| |-ParmVarDecl 0x563ea8251e68 <col:58, col:64> col:64 duration 's32_t':'int'
| `-ParmVarDecl 0x563ea8251ed8 <col:74, col:80> col:80 period 's32_t':'int'
|-FunctionDecl 0x563ea82521c8 prev 0x563ea8208450 <line:330:1, line:340:1> line:330:20 used k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x563ea8252050 <col:34, col:51> col:51 used timer 'struct k_timer *'
| |-ParmVarDecl 0x563ea82520c0 <col:58, col:64> col:64 used duration 's32_t':'int'
| |-ParmVarDecl 0x563ea8252130 <col:74, col:80> col:80 used period 's32_t':'int'
| `-CompoundStmt 0x563ea8252518 <line:331:1, line:340:1>
|   |-DoStmt 0x563ea8252360 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8252328 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea82522d8 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8252340 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea8252490 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:339:2, col:46> 'void'
|     |-ImplicitCastExpr 0x563ea8252478 <col:2> 'void (*)(struct k_timer *, s32_t, s32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea8252380 <col:2> 'void (struct k_timer *, s32_t, s32_t)' Function 0x563ea8251f70 'z_impl_k_timer_start' 'void (struct k_timer *, s32_t, s32_t)'
|     |-ImplicitCastExpr 0x563ea82524d0 <col:23> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ea82523a8 <col:23> 'struct k_timer *' lvalue ParmVar 0x563ea8252050 'timer' 'struct k_timer *'
|     |-ImplicitCastExpr 0x563ea82524e8 <col:30> 's32_t':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x563ea82523d0 <col:30> 's32_t':'int' lvalue ParmVar 0x563ea82520c0 'duration' 's32_t':'int'
|     `-ImplicitCastExpr 0x563ea8252500 <col:40> 's32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x563ea82523f8 <col:40> 's32_t':'int' lvalue ParmVar 0x563ea8252130 'period' 's32_t':'int'
|-FunctionDecl 0x563ea82525e8 <line:343:1, col:55> col:13 used z_impl_k_timer_stop 'void (struct k_timer *)' extern
| `-ParmVarDecl 0x563ea8252560 <col:33, col:50> col:50 timer 'struct k_timer *'
|-FunctionDecl 0x563ea8252f70 prev 0x563ea82085e8 <line:344:1, line:354:1> line:344:20 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x563ea82526b8 <col:33, col:50> col:50 used timer 'struct k_timer *'
| `-CompoundStmt 0x563ea82531f8 <line:345:1, line:354:1>
|   |-DoStmt 0x563ea82530f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea82530c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8253070 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea82530d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea82531b0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:353:2, col:27> 'void'
|     |-ImplicitCastExpr 0x563ea8253198 <col:2> 'void (*)(struct k_timer *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea8253118 <col:2> 'void (struct k_timer *)' Function 0x563ea82525e8 'z_impl_k_timer_stop' 'void (struct k_timer *)'
|     `-ImplicitCastExpr 0x563ea82531e0 <col:22> 'struct k_timer *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea8253140 <col:22> 'struct k_timer *' lvalue ParmVar 0x563ea82526b8 'timer' 'struct k_timer *'
|-FunctionDecl 0x563ea82532c8 <line:357:1, col:62> col:14 used z_impl_k_timer_status_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x563ea8253240 <col:40, col:57> col:57 timer 'struct k_timer *'
|-FunctionDecl 0x563ea8253420 prev 0x563ea8209070 <line:358:1, line:367:1> line:358:21 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x563ea8253398 <col:40, col:57> col:57 used timer 'struct k_timer *'
| `-CompoundStmt 0x563ea82536f0 <line:359:1, line:367:1>
|   |-DoStmt 0x563ea82535a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8253570 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8253520 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8253588 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea82536d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:366:2, col:40>
|     `-CallExpr 0x563ea8253690 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x563ea8253678 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea82535c8 <col:9> 'u32_t (struct k_timer *)' Function 0x563ea82532c8 'z_impl_k_timer_status_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x563ea82536c0 <col:35> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea82535f0 <col:35> 'struct k_timer *' lvalue ParmVar 0x563ea8253398 'timer' 'struct k_timer *'
|-FunctionDecl 0x563ea82537c0 <line:370:1, col:63> col:14 used z_impl_k_timer_status_sync 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x563ea8253738 <col:41, col:58> col:58 timer 'struct k_timer *'
|-FunctionDecl 0x563ea8253918 prev 0x563ea82091f8 <line:371:1, line:380:1> line:371:21 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x563ea8253890 <col:41, col:58> col:58 used timer 'struct k_timer *'
| `-CompoundStmt 0x563ea8253b88 <line:372:1, line:380:1>
|   |-DoStmt 0x563ea8253aa0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8253a68 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8253a18 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8253a80 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8253b70 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:379:2, col:41>
|     `-CallExpr 0x563ea8253b28 <col:9, col:41> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x563ea8253b10 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8253ac0 <col:9> 'u32_t (struct k_timer *)' Function 0x563ea82537c0 'z_impl_k_timer_status_sync' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x563ea8253b58 <col:36> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8253ae8 <col:36> 'struct k_timer *' lvalue ParmVar 0x563ea8253890 'timer' 'struct k_timer *'
|-FunctionDecl 0x563ea8253c58 prev 0x563ea82096b0 <line:383:1, col:65> col:14 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x563ea8253bd0 <col:43, col:60> col:60 timer 'struct k_timer *'
|-FunctionDecl 0x563ea8253db0 prev 0x563ea8209558 <line:384:1, line:393:1> line:384:21 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x563ea8253d28 <col:43, col:60> col:60 used timer 'struct k_timer *'
| `-CompoundStmt 0x563ea8254048 <line:385:1, line:393:1>
|   |-DoStmt 0x563ea8253f38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8253f00 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8253eb0 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8253f18 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8254030 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:392:2, col:43>
|     `-CallExpr 0x563ea8253fe8 <col:9, col:43> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x563ea8253fd0 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8253f80 <col:9> 'u32_t (struct k_timer *)' Function 0x563ea8253c58 'z_impl_k_timer_remaining_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x563ea8254018 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8253fa8 <col:38> 'struct k_timer *' lvalue ParmVar 0x563ea8253d28 'timer' 'struct k_timer *'
|-FunctionDecl 0x563ea8254198 prev 0x563ea820a438 <line:396:1, col:82> col:13 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' extern
| |-ParmVarDecl 0x563ea8254090 <col:42, col:59> col:59 timer 'struct k_timer *'
| `-ParmVarDecl 0x563ea8254108 <col:66, col:73> col:73 user_data 'void *'
|-FunctionDecl 0x563ea8254378 prev 0x563ea8209e10 <line:397:1, line:407:1> line:397:20 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x563ea8254270 <col:42, col:59> col:59 used timer 'struct k_timer *'
| |-ParmVarDecl 0x563ea82542e8 <col:66, col:73> col:73 used user_data 'void *'
| `-CompoundStmt 0x563ea8254678 <line:398:1, line:407:1>
|   |-DoStmt 0x563ea8254508 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea82544d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8254480 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea82544e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea8254610 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:406:2, col:47> 'void'
|     |-ImplicitCastExpr 0x563ea82545f8 <col:2> 'void (*)(struct k_timer *, void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea8254528 <col:2> 'void (struct k_timer *, void *)' Function 0x563ea8254198 'z_impl_k_timer_user_data_set' 'void (struct k_timer *, void *)'
|     |-ImplicitCastExpr 0x563ea8254648 <col:31> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ea8254550 <col:31> 'struct k_timer *' lvalue ParmVar 0x563ea8254270 'timer' 'struct k_timer *'
|     `-ImplicitCastExpr 0x563ea8254660 <col:38> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea8254578 <col:38> 'void *' lvalue ParmVar 0x563ea82542e8 'user_data' 'void *'
|-FunctionDecl 0x563ea8254750 prev 0x563ea820a8a8 <line:410:1, col:66> col:15 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' extern
| `-ParmVarDecl 0x563ea82546c0 <col:44, col:61> col:61 timer 'struct k_timer *'
|-FunctionDecl 0x563ea82548b0 prev 0x563ea820a748 <line:411:1, line:420:1> line:411:22 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x563ea8254820 <col:44, col:61> col:61 used timer 'struct k_timer *'
| `-CompoundStmt 0x563ea8254b80 <line:412:1, line:420:1>
|   |-DoStmt 0x563ea8254a38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8254a00 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea82549b0 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8254a18 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8254b68 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:419:2, col:43>
|     `-CallExpr 0x563ea8254b20 <col:9, col:43> 'void *'
|       |-ImplicitCastExpr 0x563ea8254b08 <col:9> 'void *(*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8254a58 <col:9> 'void *(struct k_timer *)' Function 0x563ea8254750 'z_impl_k_timer_user_data_get' 'void *(struct k_timer *)'
|       `-ImplicitCastExpr 0x563ea8254b50 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8254a80 <col:38> 'struct k_timer *' lvalue ParmVar 0x563ea8254820 'timer' 'struct k_timer *'
|-FunctionDecl 0x563ea8254c18 <line:423:1, col:34> col:14 used z_impl_k_uptime_get 's64_t ()' extern
|-FunctionDecl 0x563ea8254cd8 prev 0x563ea820ab30 <line:424:1, line:435:1> line:424:21 used k_uptime_get 's64_t (void)' static inline
| `-CompoundStmt 0x563ea8254f50 <line:425:1, line:435:1>
|   |-DoStmt 0x563ea8254e58 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8254e20 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8254dd0 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8254e38 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8254f38 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:434:2, col:29>
|     `-CallExpr 0x563ea8254f10 <col:9, col:29> 's64_t':'long long'
|       `-ImplicitCastExpr 0x563ea8254ef8 <col:9> 's64_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x563ea8254e78 <col:9> 's64_t ()' Function 0x563ea8254c18 'z_impl_k_uptime_get' 's64_t ()'
|-FunctionDecl 0x563ea8255040 <line:438:1, col:55> col:13 used z_impl_k_queue_init 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x563ea8254fb8 <col:33, col:50> col:50 queue 'struct k_queue *'
|-FunctionDecl 0x563ea8255198 prev 0x563ea820d010 <line:439:1, line:449:1> line:439:20 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x563ea8255110 <col:33, col:50> col:50 used queue 'struct k_queue *'
| `-CompoundStmt 0x563ea8255448 <line:440:1, line:449:1>
|   |-DoStmt 0x563ea8255320 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea82552e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8255298 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8255300 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea8255400 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:448:2, col:27> 'void'
|     |-ImplicitCastExpr 0x563ea82553e8 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea8255340 <col:2> 'void (struct k_queue *)' Function 0x563ea8255040 'z_impl_k_queue_init' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x563ea8255430 <col:22> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea8255368 <col:22> 'struct k_queue *' lvalue ParmVar 0x563ea8255110 'queue' 'struct k_queue *'
|-FunctionDecl 0x563ea8255518 <line:452:1, col:62> col:13 used z_impl_k_queue_cancel_wait 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x563ea8255490 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x563ea8255670 prev 0x563ea820d198 <line:453:1, line:463:1> line:453:20 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x563ea82555e8 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x563ea82558c8 <line:454:1, line:463:1>
|   |-DoStmt 0x563ea82557f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea82557c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8255770 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea82557d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea8255880 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:462:2, col:34> 'void'
|     |-ImplicitCastExpr 0x563ea8255868 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea8255818 <col:2> 'void (struct k_queue *)' Function 0x563ea8255518 'z_impl_k_queue_cancel_wait' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x563ea82558b0 <col:29> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea8255840 <col:29> 'struct k_queue *' lvalue ParmVar 0x563ea82555e8 'queue' 'struct k_queue *'
|-FunctionDecl 0x563ea8255a18 <line:466:1, col:77> col:14 used z_impl_k_queue_alloc_append 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x563ea8255910 <col:42, col:59> col:59 queue 'struct k_queue *'
| `-ParmVarDecl 0x563ea8255988 <col:66, col:73> col:73 data 'void *'
|-FunctionDecl 0x563ea8255bf8 prev 0x563ea820d6b0 <line:467:1, line:476:1> line:467:21 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x563ea8255af0 <col:42, col:59> col:59 used queue 'struct k_queue *'
| |-ParmVarDecl 0x563ea8255b68 <col:66, col:73> col:73 used data 'void *'
| `-CompoundStmt 0x563ea8255eb8 <line:468:1, line:476:1>
|   |-DoStmt 0x563ea8255d88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8255d50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8255d00 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8255d68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8255ea0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:475:2, col:48>
|     `-CallExpr 0x563ea8255e38 <col:9, col:48> 's32_t':'int'
|       |-ImplicitCastExpr 0x563ea8255e20 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8255da8 <col:9> 's32_t (struct k_queue *, void *)' Function 0x563ea8255a18 'z_impl_k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x563ea8255e70 <col:37> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8255dd0 <col:37> 'struct k_queue *' lvalue ParmVar 0x563ea8255af0 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x563ea8255e88 <col:44> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8255df8 <col:44> 'void *' lvalue ParmVar 0x563ea8255b68 'data' 'void *'
|-FunctionDecl 0x563ea8256030 <line:479:1, col:78> col:14 used z_impl_k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x563ea8255f00 <col:43, col:60> col:60 queue 'struct k_queue *'
| `-ParmVarDecl 0x563ea8255fa0 <col:67, col:74> col:74 data 'void *'
|-FunctionDecl 0x563ea8256210 prev 0x563ea820dac8 <line:480:1, line:489:1> line:480:21 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x563ea8256108 <col:43, col:60> col:60 used queue 'struct k_queue *'
| |-ParmVarDecl 0x563ea8256180 <col:67, col:74> col:74 used data 'void *'
| `-CompoundStmt 0x563ea82564d0 <line:481:1, line:489:1>
|   |-DoStmt 0x563ea82563a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8256368 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8256318 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8256380 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea82564b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:488:2, col:49>
|     `-CallExpr 0x563ea8256450 <col:9, col:49> 's32_t':'int'
|       |-ImplicitCastExpr 0x563ea8256438 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea82563c0 <col:9> 's32_t (struct k_queue *, void *)' Function 0x563ea8256030 'z_impl_k_queue_alloc_prepend' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x563ea8256488 <col:38> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea82563e8 <col:38> 'struct k_queue *' lvalue ParmVar 0x563ea8256108 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x563ea82564a0 <col:45> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8256410 <col:45> 'void *' lvalue ParmVar 0x563ea8256180 'data' 'void *'
|-FunctionDecl 0x563ea8256620 <line:492:1, col:71> col:15 used z_impl_k_queue_get 'void *(struct k_queue *, s32_t)' extern
| |-ParmVarDecl 0x563ea8256518 <col:34, col:51> col:51 queue 'struct k_queue *'
| `-ParmVarDecl 0x563ea8256588 <col:58, col:64> col:64 timeout 's32_t':'int'
|-FunctionDecl 0x563ea8256800 prev 0x563ea820e668 <line:493:1, line:502:1> line:493:22 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x563ea82566f8 <col:34, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x563ea8256768 <col:58, col:64> col:64 used timeout 's32_t':'int'
| `-CompoundStmt 0x563ea8256b20 <line:494:1, line:502:1>
|   |-DoStmt 0x563ea8256990 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8256958 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8256908 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8256970 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8256b08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:501:2, col:42>
|     `-CallExpr 0x563ea8256aa0 <col:9, col:42> 'void *'
|       |-ImplicitCastExpr 0x563ea8256a88 <col:9> 'void *(*)(struct k_queue *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea82569b0 <col:9> 'void *(struct k_queue *, s32_t)' Function 0x563ea8256620 'z_impl_k_queue_get' 'void *(struct k_queue *, s32_t)'
|       |-ImplicitCastExpr 0x563ea8256ad8 <col:28> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea82569d8 <col:28> 'struct k_queue *' lvalue ParmVar 0x563ea82566f8 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x563ea8256af0 <col:35> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8256a00 <col:35> 's32_t':'int' lvalue ParmVar 0x563ea8256768 'timeout' 's32_t':'int'
|-FunctionDecl 0x563ea8256bf8 prev 0x563ea820f838 <line:505:1, col:58> col:12 used z_impl_k_queue_is_empty 'int (struct k_queue *)' extern
| `-ParmVarDecl 0x563ea8256b68 <col:36, col:53> col:53 queue 'struct k_queue *'
|-FunctionDecl 0x563ea8256d58 prev 0x563ea820f6d8 <line:506:1, line:515:1> line:506:19 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x563ea8256cc8 <col:36, col:53> col:53 used queue 'struct k_queue *'
| `-CompoundStmt 0x563ea8257050 <line:507:1, line:515:1>
|   |-DoStmt 0x563ea8256ee0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8256ea8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8256e58 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8256ec0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8257038 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:514:2, col:38>
|     `-CallExpr 0x563ea8256ff0 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x563ea8256fd8 <col:9> 'int (*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8256f00 <col:9> 'int (struct k_queue *)' Function 0x563ea8256bf8 'z_impl_k_queue_is_empty' 'int (struct k_queue *)'
|       `-ImplicitCastExpr 0x563ea8257020 <col:33> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8256f28 <col:33> 'struct k_queue *' lvalue ParmVar 0x563ea8256cc8 'queue' 'struct k_queue *'
|-FunctionDecl 0x563ea8257128 prev 0x563ea8210690 <line:518:1, col:62> col:15 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x563ea8257098 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x563ea8257288 prev 0x563ea8210530 <line:519:1, line:528:1> line:519:22 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x563ea82571f8 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x563ea8257550 <line:520:1, line:528:1>
|   |-DoStmt 0x563ea8257410 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea82573d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8257388 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea82573f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8257538 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:527:2, col:39>
|     `-CallExpr 0x563ea82574f0 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x563ea82574d8 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8257430 <col:9> 'void *(struct k_queue *)' Function 0x563ea8257128 'z_impl_k_queue_peek_head' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x563ea8257520 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8257458 <col:34> 'struct k_queue *' lvalue ParmVar 0x563ea82571f8 'queue' 'struct k_queue *'
|-FunctionDecl 0x563ea8257628 prev 0x563ea8210bc8 <line:531:1, col:62> col:15 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x563ea8257598 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x563ea8257788 prev 0x563ea8210a68 <line:532:1, line:541:1> line:532:22 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x563ea82576f8 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x563ea82579f8 <line:533:1, line:541:1>
|   |-DoStmt 0x563ea8257910 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea82578d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8257888 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea82578f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea82579e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:540:2, col:39>
|     `-CallExpr 0x563ea8257998 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x563ea8257980 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8257930 <col:9> 'void *(struct k_queue *)' Function 0x563ea8257628 'z_impl_k_queue_peek_tail' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x563ea82579c8 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8257958 <col:34> 'struct k_queue *' lvalue ParmVar 0x563ea82576f8 'queue' 'struct k_queue *'
|-FunctionDecl 0x563ea8257cf8 <line:544:1, col:83> col:12 used z_impl_k_futex_wait 'int (struct k_futex *, int, s32_t)' extern
| |-ParmVarDecl 0x563ea8257ad0 <col:32, col:49> col:49 futex 'struct k_futex *'
| |-ParmVarDecl 0x563ea8257b48 <col:56, col:60> col:60 expected 'int'
| `-ParmVarDecl 0x563ea8257bb8 <col:70, col:76> col:76 timeout 's32_t':'int'
|-FunctionDecl 0x563ea8257fc0 <line:545:1, line:554:1> line:545:19 k_futex_wait 'int (struct k_futex *, int, s32_t)' static inline
| |-ParmVarDecl 0x563ea8257dd8 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x563ea8257e50 <col:56, col:60> col:60 used expected 'int'
| |-ParmVarDecl 0x563ea8257ec0 <col:70, col:76> col:76 used timeout 's32_t':'int'
| `-CompoundStmt 0x563ea8258330 <line:546:1, line:554:1>
|   |-DoStmt 0x563ea8258158 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8258120 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea82580d0 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8258138 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8258318 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:553:2, col:53>
|     `-CallExpr 0x563ea8258290 <col:9, col:53> 'int'
|       |-ImplicitCastExpr 0x563ea8258278 <col:9> 'int (*)(struct k_futex *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8258178 <col:9> 'int (struct k_futex *, int, s32_t)' Function 0x563ea8257cf8 'z_impl_k_futex_wait' 'int (struct k_futex *, int, s32_t)'
|       |-ImplicitCastExpr 0x563ea82582d0 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea82581a0 <col:29> 'struct k_futex *' lvalue ParmVar 0x563ea8257dd8 'futex' 'struct k_futex *'
|       |-ImplicitCastExpr 0x563ea82582e8 <col:36> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea82581c8 <col:36> 'int' lvalue ParmVar 0x563ea8257e50 'expected' 'int'
|       `-ImplicitCastExpr 0x563ea8258300 <col:46> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea82581f0 <col:46> 's32_t':'int' lvalue ParmVar 0x563ea8257ec0 'timeout' 's32_t':'int'
|-FunctionDecl 0x563ea8258508 <line:557:1, col:69> col:12 used z_impl_k_futex_wake 'int (struct k_futex *, bool)' extern
| |-ParmVarDecl 0x563ea8258378 <col:32, col:49> col:49 futex 'struct k_futex *'
| `-ParmVarDecl 0x563ea82583e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:557:61> col:61 wake_all 'bool'
|-FunctionDecl 0x563ea82586e8 <line:558:1, line:567:1> line:558:19 k_futex_wake 'int (struct k_futex *, bool)' static inline
| |-ParmVarDecl 0x563ea82585e0 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x563ea8258650 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:558:61> col:61 used wake_all 'bool'
| `-CompoundStmt 0x563ea8258a00 <line:559:1, line:567:1>
|   |-DoStmt 0x563ea8258878 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8258840 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea82587f0 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8258858 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea82589e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:566:2, col:44>
|     `-CallExpr 0x563ea8258980 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x563ea8258968 <col:9> 'int (*)(struct k_futex *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8258898 <col:9> 'int (struct k_futex *, bool)' Function 0x563ea8258508 'z_impl_k_futex_wake' 'int (struct k_futex *, bool)'
|       |-ImplicitCastExpr 0x563ea82589b8 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea82588c0 <col:29> 'struct k_futex *' lvalue ParmVar 0x563ea82585e0 'futex' 'struct k_futex *'
|       `-ImplicitCastExpr 0x563ea82589d0 <col:36> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x563ea82588e8 <col:36> 'bool' lvalue ParmVar 0x563ea8258650 'wake_all' 'bool'
|-FunctionDecl 0x563ea8258b48 <line:570:1, col:81> col:14 used z_impl_k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' extern
| |-ParmVarDecl 0x563ea8258a48 <col:40, col:57> col:57 stack 'struct k_stack *'
| `-ParmVarDecl 0x563ea8258ab8 <col:64, col:70> col:70 num_entries 'u32_t':'unsigned int'
|-FunctionDecl 0x563ea8258d20 prev 0x563ea810e710 <line:571:1, line:580:1> line:571:21 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x563ea8258c20 <col:40, col:57> col:57 used stack 'struct k_stack *'
| |-ParmVarDecl 0x563ea8258c90 <col:64, col:70> col:70 used num_entries 'u32_t':'unsigned int'
| `-CompoundStmt 0x563ea8259050 <line:572:1, line:580:1>
|   |-DoStmt 0x563ea8258eb0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8258e78 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8258e28 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8258e90 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8259038 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:579:2, col:53>
|     `-CallExpr 0x563ea8258fd0 <col:9, col:53> 's32_t':'int'
|       |-ImplicitCastExpr 0x563ea8258fa8 <col:9> 's32_t (*)(struct k_stack *, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8258ed0 <col:9> 's32_t (struct k_stack *, u32_t)' Function 0x563ea8258b48 'z_impl_k_stack_alloc_init' 's32_t (struct k_stack *, u32_t)'
|       |-ImplicitCastExpr 0x563ea8259008 <col:35> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8258ef8 <col:35> 'struct k_stack *' lvalue ParmVar 0x563ea8258c20 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x563ea8259020 <col:42> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8258f20 <col:42> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea8258c90 'num_entries' 'u32_t':'unsigned int'
|-FunctionDecl 0x563ea82591a0 <line:583:1, col:73> col:12 used z_impl_k_stack_push 'int (struct k_stack *, stack_data_t)' extern
| |-ParmVarDecl 0x563ea8259098 <col:32, col:49> col:49 stack 'struct k_stack *'
| `-ParmVarDecl 0x563ea8259108 <col:56, col:69> col:69 data 'stack_data_t':'unsigned long'
|-FunctionDecl 0x563ea8259380 prev 0x563ea810eb98 <line:584:1, line:593:1> line:584:19 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x563ea8259278 <col:32, col:49> col:49 used stack 'struct k_stack *'
| |-ParmVarDecl 0x563ea82592e8 <col:56, col:69> col:69 used data 'stack_data_t':'unsigned long'
| `-CompoundStmt 0x563ea82596a0 <line:585:1, line:593:1>
|   |-DoStmt 0x563ea8259510 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea82594d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8259488 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea82594f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8259688 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:592:2, col:40>
|     `-CallExpr 0x563ea8259620 <col:9, col:40> 'int'
|       |-ImplicitCastExpr 0x563ea8259608 <col:9> 'int (*)(struct k_stack *, stack_data_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8259530 <col:9> 'int (struct k_stack *, stack_data_t)' Function 0x563ea82591a0 'z_impl_k_stack_push' 'int (struct k_stack *, stack_data_t)'
|       |-ImplicitCastExpr 0x563ea8259658 <col:29> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8259558 <col:29> 'struct k_stack *' lvalue ParmVar 0x563ea8259278 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x563ea8259670 <col:36> 'stack_data_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8259580 <col:36> 'stack_data_t':'unsigned long' lvalue ParmVar 0x563ea82592e8 'data' 'stack_data_t':'unsigned long'
|-FunctionDecl 0x563ea8259868 <line:596:1, col:89> col:12 used z_impl_k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' extern
| |-ParmVarDecl 0x563ea82596e8 <col:31, col:48> col:48 stack 'struct k_stack *'
| |-ParmVarDecl 0x563ea8259758 <col:55, col:70> col:70 data 'stack_data_t *'
| `-ParmVarDecl 0x563ea82597c8 <col:76, col:82> col:82 timeout 's32_t':'int'
|-FunctionDecl 0x563ea8259ac8 prev 0x563ea810f8a8 <line:597:1, line:606:1> line:597:19 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x563ea8259948 <col:31, col:48> col:48 used stack 'struct k_stack *'
| |-ParmVarDecl 0x563ea82599b8 <col:55, col:70> col:70 used data 'stack_data_t *'
| |-ParmVarDecl 0x563ea8259a28 <col:76, col:82> col:82 used timeout 's32_t':'int'
| `-CompoundStmt 0x563ea8259e30 <line:598:1, line:606:1>
|   |-DoStmt 0x563ea8259c60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8259c28 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8259bd8 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8259c40 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8259e18 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:605:2, col:48>
|     `-CallExpr 0x563ea8259d90 <col:9, col:48> 'int'
|       |-ImplicitCastExpr 0x563ea8259d78 <col:9> 'int (*)(struct k_stack *, stack_data_t *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8259c80 <col:9> 'int (struct k_stack *, stack_data_t *, s32_t)' Function 0x563ea8259868 'z_impl_k_stack_pop' 'int (struct k_stack *, stack_data_t *, s32_t)'
|       |-ImplicitCastExpr 0x563ea8259dd0 <col:28> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8259ca8 <col:28> 'struct k_stack *' lvalue ParmVar 0x563ea8259948 'stack' 'struct k_stack *'
|       |-ImplicitCastExpr 0x563ea8259de8 <col:35> 'stack_data_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8259cd0 <col:35> 'stack_data_t *' lvalue ParmVar 0x563ea82599b8 'data' 'stack_data_t *'
|       `-ImplicitCastExpr 0x563ea8259e00 <col:41> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8259cf8 <col:41> 's32_t':'int' lvalue ParmVar 0x563ea8259a28 'timeout' 's32_t':'int'
|-FunctionDecl 0x563ea8259f08 <line:609:1, col:54> col:12 used z_impl_k_mutex_init 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x563ea8259e78 <col:32, col:49> col:49 mutex 'struct k_mutex *'
|-FunctionDecl 0x563ea825a098 prev 0x563ea8228008 <line:610:1, line:619:1> line:610:19 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x563ea825a008 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x563ea825a360 <line:611:1, line:619:1>
|   |-DoStmt 0x563ea825a220 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea825a1e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea825a198 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea825a200 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea825a348 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:618:2, col:34>
|     `-CallExpr 0x563ea825a300 <col:9, col:34> 'int'
|       |-ImplicitCastExpr 0x563ea825a2e8 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea825a240 <col:9> 'int (struct k_mutex *)' Function 0x563ea8259f08 'z_impl_k_mutex_init' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x563ea825a330 <col:29> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea825a268 <col:29> 'struct k_mutex *' lvalue ParmVar 0x563ea825a008 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x563ea825a4b0 <line:622:1, col:69> col:12 used z_impl_k_mutex_lock 'int (struct k_mutex *, s32_t)' extern
| |-ParmVarDecl 0x563ea825a3a8 <col:32, col:49> col:49 mutex 'struct k_mutex *'
| `-ParmVarDecl 0x563ea825a418 <col:56, col:62> col:62 timeout 's32_t':'int'
|-FunctionDecl 0x563ea825a690 prev 0x563ea8228288 <line:623:1, line:632:1> line:623:19 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x563ea825a588 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| |-ParmVarDecl 0x563ea825a5f8 <col:56, col:62> col:62 used timeout 's32_t':'int'
| `-CompoundStmt 0x563ea825a9b0 <line:624:1, line:632:1>
|   |-DoStmt 0x563ea825a820 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea825a7e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea825a798 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea825a800 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea825a998 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:631:2, col:43>
|     `-CallExpr 0x563ea825a930 <col:9, col:43> 'int'
|       |-ImplicitCastExpr 0x563ea825a918 <col:9> 'int (*)(struct k_mutex *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea825a840 <col:9> 'int (struct k_mutex *, s32_t)' Function 0x563ea825a4b0 'z_impl_k_mutex_lock' 'int (struct k_mutex *, s32_t)'
|       |-ImplicitCastExpr 0x563ea825a968 <col:29> 'struct k_mutex *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea825a868 <col:29> 'struct k_mutex *' lvalue ParmVar 0x563ea825a588 'mutex' 'struct k_mutex *'
|       `-ImplicitCastExpr 0x563ea825a980 <col:36> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea825a890 <col:36> 's32_t':'int' lvalue ParmVar 0x563ea825a5f8 'timeout' 's32_t':'int'
|-FunctionDecl 0x563ea825aa88 <line:635:1, col:56> col:12 used z_impl_k_mutex_unlock 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x563ea825a9f8 <col:34, col:51> col:51 mutex 'struct k_mutex *'
|-FunctionDecl 0x563ea825abe8 prev 0x563ea8228420 <line:636:1, line:645:1> line:636:19 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x563ea825ab58 <col:34, col:51> col:51 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x563ea825ae58 <line:637:1, line:645:1>
|   |-DoStmt 0x563ea825ad70 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea825ad38 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea825ace8 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea825ad50 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea825ae40 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:644:2, col:36>
|     `-CallExpr 0x563ea825adf8 <col:9, col:36> 'int'
|       |-ImplicitCastExpr 0x563ea825ade0 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea825ad90 <col:9> 'int (struct k_mutex *)' Function 0x563ea825aa88 'z_impl_k_mutex_unlock' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x563ea825ae28 <col:31> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea825adb8 <col:31> 'struct k_mutex *' lvalue ParmVar 0x563ea825ab58 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x563ea825b030 <line:648:1, col:96> col:12 used z_impl_k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' extern
| |-ParmVarDecl 0x563ea825aea0 <col:30, col:45> col:45 sem 'struct k_sem *'
| |-ParmVarDecl 0x563ea825af18 <col:50, col:63> col:63 initial_count 'unsigned int'
| `-ParmVarDecl 0x563ea825af90 <col:78, col:91> col:91 limit 'unsigned int'
|-FunctionDecl 0x563ea825b2a0 prev 0x563ea8228a28 <line:649:1, line:658:1> line:649:19 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x563ea825b110 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x563ea825b188 <col:50, col:63> col:63 used initial_count 'unsigned int'
| |-ParmVarDecl 0x563ea825b200 <col:78, col:91> col:91 used limit 'unsigned int'
| `-CompoundStmt 0x563ea825b610 <line:650:1, line:658:1>
|   |-DoStmt 0x563ea825b438 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea825b400 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea825b3b0 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea825b418 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea825b5f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:657:2, col:52>
|     `-CallExpr 0x563ea825b570 <col:9, col:52> 'int'
|       |-ImplicitCastExpr 0x563ea825b558 <col:9> 'int (*)(struct k_sem *, unsigned int, unsigned int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea825b458 <col:9> 'int (struct k_sem *, unsigned int, unsigned int)' Function 0x563ea825b030 'z_impl_k_sem_init' 'int (struct k_sem *, unsigned int, unsigned int)'
|       |-ImplicitCastExpr 0x563ea825b5b0 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea825b480 <col:27> 'struct k_sem *' lvalue ParmVar 0x563ea825b110 'sem' 'struct k_sem *'
|       |-ImplicitCastExpr 0x563ea825b5c8 <col:32> 'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea825b4a8 <col:32> 'unsigned int' lvalue ParmVar 0x563ea825b188 'initial_count' 'unsigned int'
|       `-ImplicitCastExpr 0x563ea825b5e0 <col:47> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea825b4d0 <col:47> 'unsigned int' lvalue ParmVar 0x563ea825b200 'limit' 'unsigned int'
|-FunctionDecl 0x563ea825b760 <line:661:1, col:63> col:12 used z_impl_k_sem_take 'int (struct k_sem *, s32_t)' extern
| |-ParmVarDecl 0x563ea825b658 <col:30, col:45> col:45 sem 'struct k_sem *'
| `-ParmVarDecl 0x563ea825b6c8 <col:50, col:56> col:56 timeout 's32_t':'int'
|-FunctionDecl 0x563ea825b940 prev 0x563ea8229d08 <line:662:1, line:671:1> line:662:19 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x563ea825b838 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x563ea825b8a8 <col:50, col:56> col:56 used timeout 's32_t':'int'
| `-CompoundStmt 0x563ea825bc60 <line:663:1, line:671:1>
|   |-DoStmt 0x563ea825bad0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea825ba98 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea825ba48 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea825bab0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea825bc48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:670:2, col:39>
|     `-CallExpr 0x563ea825bbe0 <col:9, col:39> 'int'
|       |-ImplicitCastExpr 0x563ea825bbc8 <col:9> 'int (*)(struct k_sem *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea825baf0 <col:9> 'int (struct k_sem *, s32_t)' Function 0x563ea825b760 'z_impl_k_sem_take' 'int (struct k_sem *, s32_t)'
|       |-ImplicitCastExpr 0x563ea825bc18 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea825bb18 <col:27> 'struct k_sem *' lvalue ParmVar 0x563ea825b838 'sem' 'struct k_sem *'
|       `-ImplicitCastExpr 0x563ea825bc30 <col:32> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea825bb40 <col:32> 's32_t':'int' lvalue ParmVar 0x563ea825b8a8 'timeout' 's32_t':'int'
|-FunctionDecl 0x563ea825bd30 <line:674:1, col:49> col:13 used z_impl_k_sem_give 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x563ea825bca8 <col:31, col:46> col:46 sem 'struct k_sem *'
|-FunctionDecl 0x563ea825be88 prev 0x563ea8229f10 <line:675:1, line:685:1> line:675:20 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x563ea825be00 <col:31, col:46> col:46 used sem 'struct k_sem *'
| `-CompoundStmt 0x563ea825c158 <line:676:1, line:685:1>
|   |-DoStmt 0x563ea825c028 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea825bff0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea825bf88 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea825c008 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea825c110 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:684:2, col:23> 'void'
|     |-ImplicitCastExpr 0x563ea825c0f8 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea825c048 <col:2> 'void (struct k_sem *)' Function 0x563ea825bd30 'z_impl_k_sem_give' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x563ea825c140 <col:20> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea825c070 <col:20> 'struct k_sem *' lvalue ParmVar 0x563ea825be00 'sem' 'struct k_sem *'
|-FunctionDecl 0x563ea825c228 prev 0x563ea822a218 <line:688:1, col:50> col:13 used z_impl_k_sem_reset 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x563ea825c1a0 <col:32, col:47> col:47 sem 'struct k_sem *'
|-FunctionDecl 0x563ea825c380 prev 0x563ea822a098 <line:689:1, line:699:1> line:689:20 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x563ea825c2f8 <col:32, col:47> col:47 used sem 'struct k_sem *'
| `-CompoundStmt 0x563ea825c5d8 <line:690:1, line:699:1>
|   |-DoStmt 0x563ea825c508 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea825c4d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea825c480 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea825c4e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea825c590 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:698:2, col:24> 'void'
|     |-ImplicitCastExpr 0x563ea825c578 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea825c528 <col:2> 'void (struct k_sem *)' Function 0x563ea825c228 'z_impl_k_sem_reset' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x563ea825c5c0 <col:21> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea825c550 <col:21> 'struct k_sem *' lvalue ParmVar 0x563ea825c2f8 'sem' 'struct k_sem *'
|-FunctionDecl 0x563ea825c6b0 prev 0x563ea822a680 <line:702:1, col:62> col:21 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' extern
| `-ParmVarDecl 0x563ea825c620 <col:44, col:59> col:59 sem 'struct k_sem *'
|-FunctionDecl 0x563ea825c810 prev 0x563ea822a4f8 <line:703:1, line:712:1> line:703:28 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x563ea825c780 <col:44, col:59> col:59 used sem 'struct k_sem *'
| `-CompoundStmt 0x563ea825cae0 <line:704:1, line:712:1>
|   |-DoStmt 0x563ea825c998 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea825c960 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea825c910 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea825c978 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea825cac8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:711:2, col:35>
|     `-CallExpr 0x563ea825ca80 <col:9, col:35> 'unsigned int'
|       |-ImplicitCastExpr 0x563ea825ca68 <col:9> 'unsigned int (*)(struct k_sem *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea825c9b8 <col:9> 'unsigned int (struct k_sem *)' Function 0x563ea825c6b0 'z_impl_k_sem_count_get' 'unsigned int (struct k_sem *)'
|       `-ImplicitCastExpr 0x563ea825cab0 <col:32> 'struct k_sem *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea825c9e0 <col:32> 'struct k_sem *' lvalue ParmVar 0x563ea825c780 'sem' 'struct k_sem *'
|-FunctionDecl 0x563ea825cca8 <line:715:1, col:90> col:12 used z_impl_k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' extern
| |-ParmVarDecl 0x563ea825cb28 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x563ea825cb98 <col:59, col:66> col:66 msg_size 'size_t':'unsigned long'
| `-ParmVarDecl 0x563ea825cc08 <col:76, col:82> col:82 max_msgs 'u32_t':'unsigned int'
|-FunctionDecl 0x563ea825cf08 prev 0x563ea81dab88 <line:716:1, line:725:1> line:716:19 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x563ea825cd88 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x563ea825cdf8 <col:59, col:66> col:66 used msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea825ce68 <col:76, col:82> col:82 used max_msgs 'u32_t':'unsigned int'
| `-CompoundStmt 0x563ea825d270 <line:717:1, line:725:1>
|   |-DoStmt 0x563ea825d0a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea825d068 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea825d018 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea825d080 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea825d258 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:724:2, col:58>
|     `-CallExpr 0x563ea825d1d0 <col:9, col:58> 'int'
|       |-ImplicitCastExpr 0x563ea825d1b8 <col:9> 'int (*)(struct k_msgq *, size_t, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea825d0c0 <col:9> 'int (struct k_msgq *, size_t, u32_t)' Function 0x563ea825cca8 'z_impl_k_msgq_alloc_init' 'int (struct k_msgq *, size_t, u32_t)'
|       |-ImplicitCastExpr 0x563ea825d210 <col:34> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea825d0e8 <col:34> 'struct k_msgq *' lvalue ParmVar 0x563ea825cd88 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x563ea825d228 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea825d110 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x563ea825cdf8 'msg_size' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x563ea825d240 <col:50> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea825d138 <col:50> 'u32_t':'unsigned int' lvalue ParmVar 0x563ea825ce68 'max_msgs' 'u32_t':'unsigned int'
|-FunctionDecl 0x563ea825d440 <line:728:1, col:78> col:12 used z_impl_k_msgq_put 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x563ea825d2b8 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x563ea825d330 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x563ea825d3a0 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x563ea825d6a8 prev 0x563ea822e628 <line:729:1, line:738:1> line:729:19 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x563ea825d520 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x563ea825d598 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x563ea825d608 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x563ea825da10 <line:730:1, line:738:1>
|   |-DoStmt 0x563ea825d840 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea825d808 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea825d7b8 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea825d820 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea825d9f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:737:2, col:46>
|     `-CallExpr 0x563ea825d970 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x563ea825d958 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea825d860 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x563ea825d440 'z_impl_k_msgq_put' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x563ea825d9b0 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea825d888 <col:27> 'struct k_msgq *' lvalue ParmVar 0x563ea825d520 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x563ea825d9c8 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea825d8b0 <col:33> 'void *' lvalue ParmVar 0x563ea825d598 'data' 'void *'
|       `-ImplicitCastExpr 0x563ea825d9e0 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea825d8d8 <col:39> 's32_t':'int' lvalue ParmVar 0x563ea825d608 'timeout' 's32_t':'int'
|-FunctionDecl 0x563ea825dbe0 <line:741:1, col:78> col:12 used z_impl_k_msgq_get 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x563ea825da58 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x563ea825dad0 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x563ea825db40 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x563ea825de48 prev 0x563ea822e8b8 <line:742:1, line:751:1> line:742:19 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x563ea825dcc0 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x563ea825dd38 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x563ea825dda8 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x563ea825e178 <line:743:1, line:751:1>
|   |-DoStmt 0x563ea825e000 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea825dfa8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea825df58 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea825dfc0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea825e160 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:750:2, col:46>
|     `-CallExpr 0x563ea825e0d8 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x563ea825e0c0 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea825e020 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x563ea825dbe0 'z_impl_k_msgq_get' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x563ea825e118 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea825e048 <col:27> 'struct k_msgq *' lvalue ParmVar 0x563ea825dcc0 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x563ea825e130 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea825e070 <col:33> 'void *' lvalue ParmVar 0x563ea825dd38 'data' 'void *'
|       `-ImplicitCastExpr 0x563ea825e148 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea825e098 <col:39> 's32_t':'int' lvalue ParmVar 0x563ea825dda8 'timeout' 's32_t':'int'
|-FunctionDecl 0x563ea825e2d0 <line:754:1, col:64> col:12 used z_impl_k_msgq_peek 'int (struct k_msgq *, void *)' extern
| |-ParmVarDecl 0x563ea825e1c0 <col:31, col:47> col:47 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x563ea825e238 <col:53, col:60> col:60 data 'void *'
|-FunctionDecl 0x563ea825e4b8 prev 0x563ea822eb58 <line:755:1, line:764:1> line:755:19 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x563ea825e3a8 <col:31, col:47> col:47 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x563ea825e420 <col:53, col:60> col:60 used data 'void *'
| `-CompoundStmt 0x563ea825e7d0 <line:756:1, line:764:1>
|   |-DoStmt 0x563ea825e648 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea825e610 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea825e5c0 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea825e628 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea825e7b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:763:2, col:38>
|     `-CallExpr 0x563ea825e750 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x563ea825e738 <col:9> 'int (*)(struct k_msgq *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea825e668 <col:9> 'int (struct k_msgq *, void *)' Function 0x563ea825e2d0 'z_impl_k_msgq_peek' 'int (struct k_msgq *, void *)'
|       |-ImplicitCastExpr 0x563ea825e788 <col:28> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea825e690 <col:28> 'struct k_msgq *' lvalue ParmVar 0x563ea825e3a8 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x563ea825e7a0 <col:34> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea825e6b8 <col:34> 'void *' lvalue ParmVar 0x563ea825e420 'data' 'void *'
|-FunctionDecl 0x563ea825e8a0 <line:767:1, col:53> col:13 used z_impl_k_msgq_purge 'void (struct k_msgq *)' extern
| `-ParmVarDecl 0x563ea825e818 <col:33, col:49> col:49 msgq 'struct k_msgq *'
|-FunctionDecl 0x563ea825e9f8 prev 0x563ea822ed60 <line:768:1, line:778:1> line:768:20 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x563ea825e970 <col:33, col:49> col:49 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x563ea825eca8 <line:769:1, line:778:1>
|   |-DoStmt 0x563ea825eb80 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea825eb48 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea825eaf8 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea825eb60 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea825ec60 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:777:2, col:26> 'void'
|     |-ImplicitCastExpr 0x563ea825ec48 <col:2> 'void (*)(struct k_msgq *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea825eba0 <col:2> 'void (struct k_msgq *)' Function 0x563ea825e8a0 'z_impl_k_msgq_purge' 'void (struct k_msgq *)'
|     `-ImplicitCastExpr 0x563ea825ec90 <col:22> 'struct k_msgq *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea825ebc8 <col:22> 'struct k_msgq *' lvalue ParmVar 0x563ea825e970 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x563ea825ed78 prev 0x563ea822f3e0 <line:781:1, col:61> col:14 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x563ea825ecf0 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x563ea825eed0 prev 0x563ea822ef60 <line:782:1, line:791:1> line:782:21 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x563ea825ee48 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x563ea825f1a0 <line:783:1, line:791:1>
|   |-DoStmt 0x563ea825f058 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea825f020 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea825efd0 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea825f038 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea825f188 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:790:2, col:40>
|     `-CallExpr 0x563ea825f140 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x563ea825f128 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea825f078 <col:9> 'u32_t (struct k_msgq *)' Function 0x563ea825ed78 'z_impl_k_msgq_num_free_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x563ea825f170 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea825f0a0 <col:36> 'struct k_msgq *' lvalue ParmVar 0x563ea825ee48 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x563ea825f300 <line:794:1, col:86> col:13 used z_impl_k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' extern
| |-ParmVarDecl 0x563ea825f1e8 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x563ea825f270 <col:59, col:81> col:81 attrs 'struct k_msgq_attrs *'
|-FunctionDecl 0x563ea825f4f0 prev 0x563ea822f280 <line:795:1, line:805:1> line:795:20 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x563ea825f3d8 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x563ea825f460 <col:59, col:81> col:81 used attrs 'struct k_msgq_attrs *'
| `-CompoundStmt 0x563ea825f7f8 <line:796:1, line:805:1>
|   |-DoStmt 0x563ea825f680 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea825f648 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea825f5f8 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea825f660 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea825f790 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:804:2, col:37> 'void'
|     |-ImplicitCastExpr 0x563ea825f778 <col:2> 'void (*)(struct k_msgq *, struct k_msgq_attrs *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea825f6a0 <col:2> 'void (struct k_msgq *, struct k_msgq_attrs *)' Function 0x563ea825f300 'z_impl_k_msgq_get_attrs' 'void (struct k_msgq *, struct k_msgq_attrs *)'
|     |-ImplicitCastExpr 0x563ea825f7c8 <col:26> 'struct k_msgq *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ea825f6c8 <col:26> 'struct k_msgq *' lvalue ParmVar 0x563ea825f3d8 'msgq' 'struct k_msgq *'
|     `-ImplicitCastExpr 0x563ea825f7e0 <col:32> 'struct k_msgq_attrs *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea825f6f0 <col:32> 'struct k_msgq_attrs *' lvalue ParmVar 0x563ea825f460 'attrs' 'struct k_msgq_attrs *'
|-FunctionDecl 0x563ea825f8c8 prev 0x563ea822fcd8 <line:808:1, col:61> col:14 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x563ea825f840 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x563ea825fa20 prev 0x563ea822fb80 <line:809:1, line:818:1> line:809:21 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x563ea825f998 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x563ea825fc90 <line:810:1, line:818:1>
|   |-DoStmt 0x563ea825fba8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea825fb70 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea825fb20 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea825fb88 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea825fc78 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:817:2, col:40>
|     `-CallExpr 0x563ea825fc30 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x563ea825fc18 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea825fbc8 <col:9> 'u32_t (struct k_msgq *)' Function 0x563ea825f8c8 'z_impl_k_msgq_num_used_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x563ea825fc60 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea825fbf0 <col:36> 'struct k_msgq *' lvalue ParmVar 0x563ea825f998 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x563ea825fde0 <line:821:1, col:70> col:12 used z_impl_k_pipe_alloc_init 'int (struct k_pipe *, size_t)' extern
| |-ParmVarDecl 0x563ea825fcd8 <col:37, col:53> col:53 pipe 'struct k_pipe *'
| `-ParmVarDecl 0x563ea825fd48 <col:59, col:66> col:66 size 'size_t':'unsigned long'
|-FunctionDecl 0x563ea8260010 prev 0x563ea8235e78 <line:822:1, line:831:1> line:822:19 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x563ea825feb8 <col:37, col:53> col:53 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x563ea825ff28 <col:59, col:66> col:66 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x563ea8260330 <line:823:1, line:831:1>
|   |-DoStmt 0x563ea82601a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8260168 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8260118 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8260180 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8260318 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:830:2, col:44>
|     `-CallExpr 0x563ea82602b0 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x563ea8260298 <col:9> 'int (*)(struct k_pipe *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea82601c0 <col:9> 'int (struct k_pipe *, size_t)' Function 0x563ea825fde0 'z_impl_k_pipe_alloc_init' 'int (struct k_pipe *, size_t)'
|       |-ImplicitCastExpr 0x563ea82602e8 <col:34> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea82601e8 <col:34> 'struct k_pipe *' lvalue ParmVar 0x563ea825feb8 'pipe' 'struct k_pipe *'
|       `-ImplicitCastExpr 0x563ea8260300 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8260210 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x563ea825ff28 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x563ea8260668 <line:834:1, col:142> col:12 used z_impl_k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x563ea8260378 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x563ea82603f0 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x563ea8260460 <col:65, col:72> col:72 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea82604d0 <col:88, col:97> col:97 bytes_written 'size_t *'
| |-ParmVarDecl 0x563ea8260540 <col:112, col:119> col:119 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x563ea82605b0 <col:129, col:135> col:135 timeout 's32_t':'int'
|-FunctionDecl 0x563ea8260a50 prev 0x563ea8236368 <line:835:1, line:844:1> line:835:19 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x563ea8260760 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x563ea82607d8 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x563ea8260848 <col:65, col:72> col:72 used bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea82608b8 <col:88, col:97> col:97 used bytes_written 'size_t *'
| |-ParmVarDecl 0x563ea8260928 <col:112, col:119> col:119 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea8260998 <col:129, col:135> col:135 used timeout 's32_t':'int'
| `-CompoundStmt 0x563ea8260eb0 <line:836:1, line:844:1>
|   |-DoStmt 0x563ea8260c00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8260bc8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8260b78 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8260be0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8260e98 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:843:2, col:87>
|     `-CallExpr 0x563ea8260db0 <col:9, col:87> 'int'
|       |-ImplicitCastExpr 0x563ea8260d98 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8260c20 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x563ea8260668 'z_impl_k_pipe_put' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x563ea8260e08 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8260c48 <col:27> 'struct k_pipe *' lvalue ParmVar 0x563ea8260760 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x563ea8260e20 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8260c70 <col:33> 'void *' lvalue ParmVar 0x563ea82607d8 'data' 'void *'
|       |-ImplicitCastExpr 0x563ea8260e38 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8260c98 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x563ea8260848 'bytes_to_write' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x563ea8260e50 <col:55> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8260cc0 <col:55> 'size_t *' lvalue ParmVar 0x563ea82608b8 'bytes_written' 'size_t *'
|       |-ImplicitCastExpr 0x563ea8260e68 <col:70> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8260ce8 <col:70> 'size_t':'unsigned long' lvalue ParmVar 0x563ea8260928 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x563ea8260e80 <col:80> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8260d10 <col:80> 's32_t':'int' lvalue ParmVar 0x563ea8260998 'timeout' 's32_t':'int'
|-FunctionDecl 0x563ea82611e8 <line:847:1, col:138> col:12 used z_impl_k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x563ea8260ef8 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x563ea8260f70 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x563ea8260fe0 <col:65, col:72> col:72 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea8261050 <col:87, col:96> col:96 bytes_read 'size_t *'
| |-ParmVarDecl 0x563ea82610c0 <col:108, col:115> col:115 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x563ea8261130 <col:125, col:131> col:131 timeout 's32_t':'int'
|-FunctionDecl 0x563ea82615d0 prev 0x563ea8236780 <line:848:1, line:857:1> line:848:19 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x563ea82612e0 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x563ea8261358 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x563ea82613c8 <col:65, col:72> col:72 used bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea8261438 <col:87, col:96> col:96 used bytes_read 'size_t *'
| |-ParmVarDecl 0x563ea82614a8 <col:108, col:115> col:115 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x563ea8261518 <col:125, col:131> col:131 used timeout 's32_t':'int'
| `-CompoundStmt 0x563ea82619d0 <line:849:1, line:857:1>
|   |-DoStmt 0x563ea8261780 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8261748 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea82616f8 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8261760 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea82619b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:856:2, col:83>
|     `-CallExpr 0x563ea82618d0 <col:9, col:83> 'int'
|       |-ImplicitCastExpr 0x563ea82618b8 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea82617a0 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x563ea82611e8 'z_impl_k_pipe_get' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x563ea8261928 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea82617c8 <col:27> 'struct k_pipe *' lvalue ParmVar 0x563ea82612e0 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x563ea8261940 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea82617f0 <col:33> 'void *' lvalue ParmVar 0x563ea8261358 'data' 'void *'
|       |-ImplicitCastExpr 0x563ea8261958 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8261818 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x563ea82613c8 'bytes_to_read' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x563ea8261970 <col:54> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8261840 <col:54> 'size_t *' lvalue ParmVar 0x563ea8261438 'bytes_read' 'size_t *'
|       |-ImplicitCastExpr 0x563ea8261988 <col:66> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8261868 <col:66> 'size_t':'unsigned long' lvalue ParmVar 0x563ea82614a8 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x563ea82619a0 <col:76> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8261890 <col:76> 's32_t':'int' lvalue ParmVar 0x563ea8261518 'timeout' 's32_t':'int'
|-FunctionDecl 0x563ea8261ba0 <line:860:1, col:85> col:12 used z_impl_k_poll 'int (struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x563ea8261a18 <col:26, col:48> col:48 events 'struct k_poll_event *'
| |-ParmVarDecl 0x563ea8261a90 <col:56, col:60> col:60 num_events 'int'
| `-ParmVarDecl 0x563ea8261b00 <col:72, col:78> col:78 timeout 's32_t':'int'
|-FunctionDecl 0x563ea8261e08 prev 0x563ea823f7e8 <line:861:1, line:870:1> line:861:19 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x563ea8261c80 <col:26, col:48> col:48 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x563ea8261cf8 <col:56, col:60> col:60 used num_events 'int'
| |-ParmVarDecl 0x563ea8261d68 <col:72, col:78> col:78 used timeout 's32_t':'int'
| `-CompoundStmt 0x563ea8262180 <line:862:1, line:870:1>
|   |-DoStmt 0x563ea8261fa0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8261f68 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8261f18 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8261f80 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8262168 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:869:2, col:50>
|     `-CallExpr 0x563ea82620e0 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x563ea82620c8 <col:9> 'int (*)(struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8261fc0 <col:9> 'int (struct k_poll_event *, int, s32_t)' Function 0x563ea8261ba0 'z_impl_k_poll' 'int (struct k_poll_event *, int, s32_t)'
|       |-ImplicitCastExpr 0x563ea8262120 <col:23> 'struct k_poll_event *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8261fe8 <col:23> 'struct k_poll_event *' lvalue ParmVar 0x563ea8261c80 'events' 'struct k_poll_event *'
|       |-ImplicitCastExpr 0x563ea8262138 <col:31> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8262020 <col:31> 'int' lvalue ParmVar 0x563ea8261cf8 'num_events' 'int'
|       `-ImplicitCastExpr 0x563ea8262150 <col:43> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8262048 <col:43> 's32_t':'int' lvalue ParmVar 0x563ea8261d68 'timeout' 's32_t':'int'
|-FunctionDecl 0x563ea8262250 <line:873:1, col:68> col:13 used z_impl_k_poll_signal_init 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x563ea82621c8 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
|-FunctionDecl 0x563ea82623a8 prev 0x563ea823f9f0 <line:874:1, line:884:1> line:874:20 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x563ea8262320 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x563ea8262658 <line:875:1, line:884:1>
|   |-DoStmt 0x563ea8262530 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea82624f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea82624a8 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8262510 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea8262610 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:883:2, col:34> 'void'
|     |-ImplicitCastExpr 0x563ea82625f8 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea8262550 <col:2> 'void (struct k_poll_signal *)' Function 0x563ea8262250 'z_impl_k_poll_signal_init' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x563ea8262640 <col:28> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea8262578 <col:28> 'struct k_poll_signal *' lvalue ParmVar 0x563ea8262320 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x563ea8262728 prev 0x563ea823fca0 <line:887:1, col:69> col:13 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x563ea82626a0 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
|-FunctionDecl 0x563ea8262880 prev 0x563ea823fb48 <line:888:1, line:898:1> line:888:20 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x563ea82627f8 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x563ea8262ad8 <line:889:1, line:898:1>
|   |-DoStmt 0x563ea8262a08 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea82629d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8262980 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea82629e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea8262a90 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:897:2, col:35> 'void'
|     |-ImplicitCastExpr 0x563ea8262a78 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea8262a28 <col:2> 'void (struct k_poll_signal *)' Function 0x563ea8262728 'z_impl_k_poll_signal_reset' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x563ea8262ac0 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea8262a50 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x563ea82627f8 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x563ea8262ca8 <line:901:1, col:108> col:13 used z_impl_k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' extern
| |-ParmVarDecl 0x563ea8262b20 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x563ea8262b98 <col:71, col:86> col:86 signaled 'unsigned int *'
| `-ParmVarDecl 0x563ea8262c10 <col:96, col:102> col:102 result 'int *'
|-FunctionDecl 0x563ea8262f10 prev 0x563ea8240be8 <line:902:1, line:912:1> line:902:20 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x563ea8262d88 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x563ea8262e00 <col:71, col:86> col:86 used signaled 'unsigned int *'
| |-ParmVarDecl 0x563ea8262e78 <col:96, col:102> col:102 used result 'int *'
| `-CompoundStmt 0x563ea8263268 <line:903:1, line:912:1>
|   |-DoStmt 0x563ea82630a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8263070 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8263020 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8263088 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea82631e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:911:2, col:53> 'void'
|     |-ImplicitCastExpr 0x563ea82631c8 <col:2> 'void (*)(struct k_poll_signal *, unsigned int *, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea82630c8 <col:2> 'void (struct k_poll_signal *, unsigned int *, int *)' Function 0x563ea8262ca8 'z_impl_k_poll_signal_check' 'void (struct k_poll_signal *, unsigned int *, int *)'
|     |-ImplicitCastExpr 0x563ea8263220 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ea82630f0 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x563ea8262d88 'signal' 'struct k_poll_signal *'
|     |-ImplicitCastExpr 0x563ea8263238 <col:37> 'unsigned int *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ea8263118 <col:37> 'unsigned int *' lvalue ParmVar 0x563ea8262e00 'signaled' 'unsigned int *'
|     `-ImplicitCastExpr 0x563ea8263250 <col:47> 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x563ea8263140 <col:47> 'int *' lvalue ParmVar 0x563ea8262e78 'result' 'int *'
|-FunctionDecl 0x563ea82633c0 <line:915:1, col:80> col:12 used z_impl_k_poll_signal_raise 'int (struct k_poll_signal *, int)' extern
| |-ParmVarDecl 0x563ea82632b0 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
| `-ParmVarDecl 0x563ea8263328 <col:70, col:74> col:74 result 'int'
|-FunctionDecl 0x563ea82635a8 prev 0x563ea8240e88 <line:916:1, line:925:1> line:916:19 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x563ea8263498 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x563ea8263510 <col:70, col:74> col:74 used result 'int'
| `-CompoundStmt 0x563ea82638c0 <line:917:1, line:925:1>
|   |-DoStmt 0x563ea8263738 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8263700 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea82636b0 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8263718 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea82638a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:924:2, col:50>
|     `-CallExpr 0x563ea8263840 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x563ea8263828 <col:9> 'int (*)(struct k_poll_signal *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8263758 <col:9> 'int (struct k_poll_signal *, int)' Function 0x563ea82633c0 'z_impl_k_poll_signal_raise' 'int (struct k_poll_signal *, int)'
|       |-ImplicitCastExpr 0x563ea8263878 <col:36> 'struct k_poll_signal *' <LValueToRValue>
|       | `-DeclRefExpr 0x563ea8263780 <col:36> 'struct k_poll_signal *' lvalue ParmVar 0x563ea8263498 'signal' 'struct k_poll_signal *'
|       `-ImplicitCastExpr 0x563ea8263890 <col:44> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x563ea82637a8 <col:44> 'int' lvalue ParmVar 0x563ea8263510 'result' 'int'
|-FunctionDecl 0x563ea8263a80 <line:928:1, col:48> col:13 used z_impl_k_str_out 'void (char *, size_t)' extern
| |-ParmVarDecl 0x563ea82638f8 <col:30, col:37> col:37 c 'char *'
| `-ParmVarDecl 0x563ea8263968 <col:40, col:47> col:47 n 'size_t':'unsigned long'
|-FunctionDecl 0x563ea8263c48 <line:929:1, line:939:1> line:929:20 k_str_out 'void (char *, size_t)' static inline
| |-ParmVarDecl 0x563ea8263b48 <col:30, col:37> col:37 used c 'char *'
| |-ParmVarDecl 0x563ea8263bb8 <col:40, col:47> col:47 used n 'size_t':'unsigned long'
| `-CompoundStmt 0x563ea8263f48 <line:930:1, line:939:1>
|   |-DoStmt 0x563ea8263dd8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea8263da0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea8263d50 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8263db8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x563ea8263ee0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:938:2, col:23> 'void'
|     |-ImplicitCastExpr 0x563ea8263ec8 <col:2> 'void (*)(char *, size_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563ea8263df8 <col:2> 'void (char *, size_t)' Function 0x563ea8263a80 'z_impl_k_str_out' 'void (char *, size_t)'
|     |-ImplicitCastExpr 0x563ea8263f18 <col:19> 'char *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ea8263e20 <col:19> 'char *' lvalue ParmVar 0x563ea8263b48 'c' 'char *'
|     `-ImplicitCastExpr 0x563ea8263f30 <col:22> 'size_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x563ea8263e48 <col:22> 'size_t':'unsigned long' lvalue ParmVar 0x563ea8263bb8 'n' 'size_t':'unsigned long'
|-FunctionDecl 0x563ea8265040 <line:942:1, col:59> col:12 used z_impl_k_float_disable 'int (struct k_thread *)' extern
| `-ParmVarDecl 0x563ea8263f90 <col:35, col:53> col:53 thread 'struct k_thread *'
|-FunctionDecl 0x563ea82651a0 prev 0x563ea82462a8 <line:943:1, line:952:1> line:943:19 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x563ea8265110 <col:35, col:53> col:53 used thread 'struct k_thread *'
| `-CompoundStmt 0x563ea8265440 <line:944:1, line:952:1>
|   |-DoStmt 0x563ea8265328 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x563ea82652f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x563ea82652a0 <col:2, col:39>
|   | `-IntegerLiteral 0x563ea8265308 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x563ea8265428 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:951:2, col:38>
|     `-CallExpr 0x563ea82653e0 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x563ea82653c8 <col:9> 'int (*)(struct k_thread *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ea8265348 <col:9> 'int (struct k_thread *)' Function 0x563ea8265040 'z_impl_k_float_disable' 'int (struct k_thread *)'
|       `-ImplicitCastExpr 0x563ea8265410 <col:32> 'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x563ea8265370 <col:32> 'struct k_thread *' lvalue ParmVar 0x563ea8265110 'thread' 'struct k_thread *'
|-FunctionDecl 0x563ea8265540 </vagrant/apps/plc_4out/./_build/arm-tfm/install/export/tfm/inc/tfm_gpio_veneers.h:11:1, col:32> col:10 tfm_gpio_read_all 'uint32_t (void)'
|-FunctionDecl 0x563ea8265710 <line:12:1, col:40> col:9 tfm_gpio_write_all 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x563ea8265610 <col:28, col:37> col:37 out 'uint32_t':'unsigned int'
|-FunctionDecl 0x563ea8265850 <line:13:1, col:46> col:9 tfm_gpio_enable_outputs 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x563ea82657c8 <col:33, col:42> col:42 pins 'uint32_t':'unsigned int'
|-FunctionDecl 0x563ea8265a10 <line:14:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x563ea8265908 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x563ea8265b50 <line:16:1, col:43> col:9 tfm_gpio_enable_output 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x563ea8265ac8 <col:32, col:40> col:40 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x563ea8265c90 <line:17:1, col:33> col:9 tfm_gpio_set 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x563ea8265c08 <col:22, col:30> col:30 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x563ea8265dd0 <line:18:1, col:35> col:9 tfm_gpio_clear 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x563ea8265d48 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x563ea8265f10 <line:19:1, col:37> col:9 tfm_gpio_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x563ea8265e88 <col:26, col:34> col:34 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x563ea8266050 prev 0x563ea8265a10 <line:20:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x563ea8265fc8 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-RecordDecl 0x563ea82660f8 <line:34:9, line:38:1> line:34:9 struct definition
| |-FieldDecl 0x563ea82661b0 <line:35:5, col:13> col:13 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x563ea8266208 <line:36:5, col:13> col:13 polarity 'uint8_t':'unsigned char'
| `-FieldDecl 0x563ea82662f0 <line:37:5, col:21> col:12 cb 'void (*)(void)'
|-TypedefDecl 0x563ea8266390 <line:34:1, line:38:3> col:3 referenced gpio_int_config 'struct gpio_int_config':'gpio_int_config'
| `-ElaboratedType 0x563ea8266340 'struct gpio_int_config' sugar
|   `-RecordType 0x563ea8266180 'gpio_int_config'
|     `-Record 0x563ea82660f8 ''
|-FunctionDecl 0x563ea8266610 <line:40:1, col:68> col:9 tfm_gpio_interrupt_enable 'uint8_t (uint8_t, gpio_int_config *)'
| |-ParmVarDecl 0x563ea8266410 <col:35, col:43> col:43 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x563ea82664f8 <col:48, col:65> col:65 cfg 'gpio_int_config *'
|-FunctionDecl 0x563ea8266758 <line:41:1, col:47> col:9 tfm_gpio_interrupt_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x563ea82666d0 <col:36, col:44> col:44 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x563ea8266818 </vagrant/apps/plc_4out/./inc/plc_platform.h:5:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x563ea805b770 'short'
|-TypedefDecl 0x563ea8266888 <line:6:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x563ea805b7f0 'unsigned char'
|-EnumDecl 0x563ea82668e0 <line:25:9, line:29:1> line:25:9
| |-EnumConstantDecl 0x563ea82669c0 <line:26:2, col:6> col:2 R 'int'
| | `-IntegerLiteral 0x563ea82669a0 <col:6> 'int' 2
| |-EnumConstantDecl 0x563ea8266a28 <line:27:2, col:6> col:2 G 'int'
| | `-IntegerLiteral 0x563ea8266a08 <col:6> 'int' 3
| `-EnumConstantDecl 0x563ea8266a90 <line:28:2, col:6> col:2 B 'int'
|   `-IntegerLiteral 0x563ea8266a70 <col:6> 'int' 4
|-TypedefDecl 0x563ea8266b30 <line:25:1, line:29:3> col:3 referenced LED 'enum LED':'LED'
| `-ElaboratedType 0x563ea8266ae0 'enum LED' sugar
|   `-EnumType 0x563ea8266980 'LED'
|     `-Enum 0x563ea82668e0 ''
|-FunctionDecl 0x563ea8266d60 <line:31:1, col:56> col:6 enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x563ea8266bd8 <col:25, col:34> col:34 pins 'uint8_t *'
| `-ParmVarDecl 0x563ea8266c48 <col:40, col:48> col:48 num_pins 'uint8_t':'unsigned char'
|-FunctionDecl 0x563ea8266f20 <line:33:1, col:35> col:6 enable_pin_output 'void (uint8_t)'
| `-ParmVarDecl 0x563ea8266e20 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x563ea82699d0 <line:35:1, col:24> col:6 read_in_table 'void (void)'
|-FunctionDecl 0x563ea8269b00 <line:37:1, col:26> col:6 write_out_table 'void (void)'
|-FunctionDecl 0x563ea8269c60 <line:41:1, col:25> col:6 set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x563ea8269bd8 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
| `-FullComment 0x563ea82dcdd0 <line:39:4, col:42>
|   `-ParagraphComment 0x563ea82dcda0 <col:4, col:42>
|     `-TextComment 0x563ea82dcd70 <col:4, col:42> Text="************** For User ***************"
|-FunctionDecl 0x563ea8269da0 <line:43:1, col:25> col:6 clr_pin 'void (uint8_t)'
| `-ParmVarDecl 0x563ea8269d18 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x563ea826a000 <line:45:1, col:37> col:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x563ea8269e58 <col:16, col:24> col:24 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x563ea8269ef0 <col:29, col:34> col:34 val 'BOOL':'unsigned char'
|-FunctionDecl 0x563ea826a180 <line:47:1, col:26> col:6 read_pin 'BOOL (uint8_t)'
| `-ParmVarDecl 0x563ea826a0c0 <col:15, col:23> col:23 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x563ea826a360 <line:49:1, col:22> col:6 LED_on 'void (LED)'
| `-ParmVarDecl 0x563ea826a260 <col:13, col:17> col:17 color 'LED':'LED'
|-FunctionDecl 0x563ea826a4a0 <line:51:1, col:23> col:6 LED_off 'void (LED)'
| `-ParmVarDecl 0x563ea826a418 <col:14, col:18> col:18 color 'LED':'LED'
|-FunctionDecl 0x563ea826a660 <line:53:1, col:24> col:6 read_LED 'BOOL (LED)'
| `-ParmVarDecl 0x563ea826a558 <col:15, col:19> col:19 color 'LED':'LED'
|-FunctionDecl 0x563ea826a8a0 <line:55:1, col:33> col:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x563ea826a718 <col:16, col:20> col:20 color 'LED':'LED'
| `-ParmVarDecl 0x563ea826a788 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-FunctionDecl 0x563ea826a9e8 <line:57:1, col:40> col:6 read_button_active_low 'BOOL (uint8_t)'
| `-ParmVarDecl 0x563ea826a960 <col:29, col:37> col:37 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x563ea826aaa8 prev 0x563ea8266818 </vagrant/apps/plc_4out/./inc/ladder.h:7:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x563ea805b770 'short'
|-TypedefDecl 0x563ea826ab18 prev 0x563ea8266888 <line:8:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x563ea805b7f0 'unsigned char'
|-VarDecl 0x563ea826ac58 <line:13:1, col:99> col:16 output_pins 'uint8_t [5]' static cinit
| |-InitListExpr 0x563ea826ae18 <col:68, col:99> 'uint8_t [5]'
| | |-ImplicitCastExpr 0x563ea826ae58 </vagrant/apps/plc_4out/./inc/plc_platform.h:11:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x563ea826ad10 <col:14> 'int' 3
| | |-ImplicitCastExpr 0x563ea826ae78 <line:16:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x563ea826ad30 <col:14> 'int' 8
| | |-ImplicitCastExpr 0x563ea826aea0 <line:17:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x563ea826ad50 <col:14> 'int' 9
| | |-ImplicitCastExpr 0x563ea826aed8 <line:18:15> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x563ea826ad70 <col:15> 'int' 10
| | `-ImplicitCastExpr 0x563ea826aef0 <line:19:15> 'uint8_t':'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x563ea826ad90 <col:15> 'int' 11
| `-SectionAttr 0x563ea826acb8 </vagrant/apps/plc_4out/./inc/ladder.h:13:45, col:62> section ".rodata"
|-FunctionDecl 0x563ea826b088 <line:18:1, col:19> col:6 PlcCycle 'void (void)'
| `-FullComment 0x563ea82dcea0 <line:15:4, col:57>
|   `-ParagraphComment 0x563ea82dce70 <col:4, col:57>
|     `-TextComment 0x563ea82dce40 <col:4, col:57> Text="************ DO NOT EDIT THESE FUNCTIONS *************"
|-FunctionDecl 0x563ea826b1d8 <line:21:1, col:36> col:6 used plc_callback 'void (struct k_timer *)'
| `-ParmVarDecl 0x563ea826b150 <col:19, col:35> col:35 t 'struct k_timer *'
|-FunctionDecl 0x563ea826b310 <line:24:1, col:19> col:6 used init_plc 'void (void)'
|-FunctionDecl 0x563ea826b520 <line:31:1, col:27> col:6 Read_U_b_XMStart 'BOOL (void)'
| `-FullComment 0x563ea82dcf70 <line:29:4, col:57>
|   `-ParagraphComment 0x563ea82dcf40 <col:4, col:57>
|     `-TextComment 0x563ea82dcf10 <col:4, col:57> Text="*********** FUNCTIONS CREATED BY LDMICRO *************"
|-FunctionDecl 0x563ea826b650 <line:33:1, col:25> col:6 Read_U_b_XStop 'BOOL (void)'
|-FunctionDecl 0x563ea826b780 <line:35:1, col:24> col:6 Read_U_b_YLED 'BOOL (void)'
|-FunctionDecl 0x563ea826b8f0 <line:36:1, col:27> col:6 Write_U_b_YLED 'void (BOOL)'
| `-ParmVarDecl 0x563ea826b830 <col:21, col:26> col:26 v 'BOOL':'unsigned char'
|-FunctionDecl 0x563ea826cb30 <line:38:1, col:25> col:6 Read_U_b_YOut0 'BOOL (void)'
|-FunctionDecl 0x563ea826cc68 <line:39:1, col:28> col:6 Write_U_b_YOut0 'void (BOOL)'
| `-ParmVarDecl 0x563ea826cbe0 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x563ea826cda0 <line:41:1, col:25> col:6 Read_U_b_YOut1 'BOOL (void)'
|-FunctionDecl 0x563ea826ced8 <line:42:1, col:28> col:6 Write_U_b_YOut1 'void (BOOL)'
| `-ParmVarDecl 0x563ea826ce50 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x563ea826d010 <line:44:1, col:25> col:6 Read_U_b_YOut2 'BOOL (void)'
|-FunctionDecl 0x563ea826d148 <line:45:1, col:28> col:6 Write_U_b_YOut2 'void (BOOL)'
| `-ParmVarDecl 0x563ea826d0c0 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x563ea826d280 <line:47:1, col:25> col:6 Read_U_b_YOut3 'BOOL (void)'
|-FunctionDecl 0x563ea826d3b8 <line:48:1, col:28> col:6 Write_U_b_YOut3 'void (BOOL)'
| `-ParmVarDecl 0x563ea826d330 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-VarDecl 0x563ea826d480 <./src/main.c:9:1, col:16> col:16 used scan_timer 'struct k_timer':'struct k_timer'
`-FunctionDecl 0x563ea826d570 <line:11:1, line:16:1> line:11:6 main 'void (void)'
  `-CompoundStmt 0x563ea826d9e8 <col:17, line:16:1>
    |-CallExpr 0x563ea826d678 <line:12:2, col:11> 'void'
    | `-ImplicitCastExpr 0x563ea826d660 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x563ea826d638 <col:2> 'void (void)' Function 0x563ea826b310 'init_plc' 'void (void)'
    |-CallExpr 0x563ea826d830 <line:13:5, col:49> 'void'
    | |-ImplicitCastExpr 0x563ea826d818 <col:5> 'void (*)(struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x563ea826d6a0 <col:5> 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' Function 0x563ea8208040 'k_timer_init' 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)'
    | |-UnaryOperator 0x563ea826d6f0 <col:18, col:19> 'struct k_timer *' prefix '&'
    | | `-DeclRefExpr 0x563ea826d6c8 <col:19> 'struct k_timer':'struct k_timer' lvalue Var 0x563ea826d480 'scan_timer' 'struct k_timer':'struct k_timer'
    | |-ImplicitCastExpr 0x563ea826d870 <col:31> 'void (*)(struct k_timer *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x563ea826d710 <col:31> 'void (struct k_timer *)' Function 0x563ea826b1d8 'plc_callback' 'void (struct k_timer *)'
    | `-ImplicitCastExpr 0x563ea826d888 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'k_timer_stop_t':'void (*)(struct k_timer *)' <NullToPointer>
    |   `-ParenExpr 0x563ea826d798 <col:14, col:24> 'void *'
    |     `-CStyleCastExpr 0x563ea826d770 <col:15, col:23> 'void *' <NullToPointer>
    |       `-IntegerLiteral 0x563ea826d738 <col:23> 'int' 0
    `-CallExpr 0x563ea826d9a8 <./src/main.c:15:2, col:73> 'void'
      |-ImplicitCastExpr 0x563ea826d990 <col:2> 'void (*)(struct k_timer *, s32_t, s32_t)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x563ea826d8a0 <col:2> 'void (struct k_timer *, s32_t, s32_t)' Function 0x563ea82521c8 'k_timer_start' 'void (struct k_timer *, s32_t, s32_t)'
      |-UnaryOperator 0x563ea826d8f0 <col:16, col:17> 'struct k_timer *' prefix '&'
      | `-DeclRefExpr 0x563ea826d8c8 <col:17> 'struct k_timer':'struct k_timer' lvalue Var 0x563ea826d480 'scan_timer' 'struct k_timer':'struct k_timer'
      |-ParenExpr 0x563ea826d930 </vagrant/ext/zephyros/zephyr/include/kernel.h:1461:24, col:27> 'int'
      | `-IntegerLiteral 0x563ea826d910 <./src/main.c:7:23> 'int' 10
      `-ParenExpr 0x563ea826d970 </vagrant/ext/zephyros/zephyr/include/kernel.h:1461:24, col:27> 'int'
        `-IntegerLiteral 0x563ea826d950 <./src/main.c:7:23> 'int' 10
TranslationUnitDecl 0x55982722a698 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55982722ac10 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55982722a930 '__int128'
|-TypedefDecl 0x55982722ac80 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55982722a950 'unsigned __int128'
|-TypedefDecl 0x55982722af58 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55982722ad60 'struct __NSConstantString_tag'
|   `-Record 0x55982722acd8 '__NSConstantString_tag'
|-TypedefDecl 0x55982722aff0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55982722afb0 'char *'
|   `-BuiltinType 0x55982722a730 'char'
|-TypedefDecl 0x55982722b2b8 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55982722b260 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55982722b0d0 'struct __va_list_tag'
|     `-Record 0x55982722b048 '__va_list_tag'
|-TypedefDecl 0x559827273db0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:143:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x55982722a7b0 'long'
|-TypedefDecl 0x559827273e20 <line:209:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x55982722a850 'unsigned long'
|-TypedefDecl 0x559827273e90 <line:321:1, col:24> col:24 wchar_t 'int'
| `-BuiltinType 0x55982722a790 'int'
|-RecordDecl 0x559827273ee8 <line:415:9, line:426:1> line:415:9 struct definition
| |-FieldDecl 0x559827273fe0 <line:416:3, col:13> col:13 __max_align_ll 'long long'
| | `-AlignedAttr 0x559827274028 <col:43, col:77> aligned
| |   `-UnaryExprOrTypeTraitExpr 0x559827273fa8 <col:55, col:76> 'unsigned long' alignof 'long long'
| `-FieldDecl 0x5598272740c8 <line:417:3, col:15> col:15 __max_align_ld 'long double'
|   `-AlignedAttr 0x559827274110 <col:45, col:81> aligned
|     `-UnaryExprOrTypeTraitExpr 0x559827274090 <col:57, col:80> 'unsigned long' alignof 'long double'
|-TypedefDecl 0x5598272741b0 <line:415:1, line:426:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x559827274160 'struct max_align_t' sugar
|   `-RecordType 0x559827273f70 'max_align_t'
|     `-Record 0x559827273ee8 ''
|-TypedefDecl 0x559827274238 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdint.h:40:1, col:24> col:24 int8_t 'signed char'
| `-BuiltinType 0x55982722a750 'signed char'
|-TypedefDecl 0x5598272742a8 <line:41:1, col:25> col:25 int16_t 'short'
| `-BuiltinType 0x55982722a770 'short'
|-TypedefDecl 0x559827274318 <line:42:1, col:25> col:25 int32_t 'int'
| `-BuiltinType 0x55982722a790 'int'
|-TypedefDecl 0x559827274388 <line:43:1, col:25> col:25 int64_t 'long'
| `-BuiltinType 0x55982722a7b0 'long'
|-TypedefDecl 0x5598272743f8 <line:45:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x55982722a750 'signed char'
|-TypedefDecl 0x559827274468 <line:46:1, col:29> col:29 int_fast16_t 'short'
| `-BuiltinType 0x55982722a770 'short'
|-TypedefDecl 0x5598272744d8 <line:47:1, col:29> col:29 int_fast32_t 'int'
| `-BuiltinType 0x55982722a790 'int'
|-TypedefDecl 0x559827274548 <line:48:1, col:29> col:29 int_fast64_t 'long'
| `-BuiltinType 0x55982722a7b0 'long'
|-TypedefDecl 0x5598272745b8 <line:50:1, col:29> col:29 int_least8_t 'signed char'
| `-BuiltinType 0x55982722a750 'signed char'
|-TypedefDecl 0x559827274628 <line:51:1, col:30> col:30 int_least16_t 'short'
| `-BuiltinType 0x55982722a770 'short'
|-TypedefDecl 0x559827274698 <line:52:1, col:30> col:30 int_least32_t 'int'
| `-BuiltinType 0x55982722a790 'int'
|-TypedefDecl 0x559827274708 <line:53:1, col:30> col:30 int_least64_t 'long'
| `-BuiltinType 0x55982722a7b0 'long'
|-TypedefDecl 0x559827274778 <line:55:1, col:25> col:25 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x55982722a7f0 'unsigned char'
|-TypedefDecl 0x5598272747e8 <line:56:1, col:26> col:26 uint16_t 'unsigned short'
| `-BuiltinType 0x55982722a810 'unsigned short'
|-TypedefDecl 0x559827274858 <line:57:1, col:26> col:26 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x55982722a830 'unsigned int'
|-TypedefDecl 0x5598272748c8 <line:58:1, col:26> col:26 uint64_t 'unsigned long'
| `-BuiltinType 0x55982722a850 'unsigned long'
|-TypedefDecl 0x559827274938 <line:60:1, col:29> col:29 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x55982722a7f0 'unsigned char'
|-TypedefDecl 0x5598272749a8 <line:61:1, col:30> col:30 uint_fast16_t 'unsigned short'
| `-BuiltinType 0x55982722a810 'unsigned short'
|-TypedefDecl 0x559827274a18 <line:62:1, col:30> col:30 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x55982722a830 'unsigned int'
|-TypedefDecl 0x559827274a88 <line:63:1, col:30> col:30 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x55982722a850 'unsigned long'
|-TypedefDecl 0x559827274af8 <line:65:1, col:30> col:30 uint_least8_t 'unsigned char'
| `-BuiltinType 0x55982722a7f0 'unsigned char'
|-TypedefDecl 0x559827274b68 <line:66:1, col:31> col:31 uint_least16_t 'unsigned short'
| `-BuiltinType 0x55982722a810 'unsigned short'
|-TypedefDecl 0x559827274bd8 <line:67:1, col:31> col:31 uint_least32_t 'unsigned int'
| `-BuiltinType 0x55982722a830 'unsigned int'
|-TypedefDecl 0x559827274c48 <line:68:1, col:31> col:31 uint_least64_t 'unsigned long'
| `-BuiltinType 0x55982722a850 'unsigned long'
|-TypedefDecl 0x559827274cb8 <line:70:1, col:26> col:26 intptr_t 'long'
| `-BuiltinType 0x55982722a7b0 'long'
|-TypedefDecl 0x559827274d28 <line:71:1, col:26> col:26 referenced uintptr_t 'unsigned long'
| `-BuiltinType 0x55982722a850 'unsigned long'
|-TypedefDecl 0x559827298610 </vagrant/ext/zephyros/zephyr/include/zephyr/types.h:16:1, col:29> col:29 referenced s8_t 'signed char'
| `-BuiltinType 0x55982722a750 'signed char'
|-TypedefDecl 0x559827298680 <line:17:1, col:29> col:29 s16_t 'short'
| `-BuiltinType 0x55982722a770 'short'
|-TypedefDecl 0x5598272986f0 <line:18:1, col:29> col:29 referenced s32_t 'int'
| `-BuiltinType 0x55982722a790 'int'
|-TypedefDecl 0x559827298760 <line:19:1, col:29> col:29 referenced s64_t 'long long'
| `-BuiltinType 0x55982722a7d0 'long long'
|-TypedefDecl 0x5598272987d0 <line:21:1, col:29> col:29 referenced u8_t 'unsigned char'
| `-BuiltinType 0x55982722a7f0 'unsigned char'
|-TypedefDecl 0x559827298840 <line:22:1, col:29> col:29 referenced u16_t 'unsigned short'
| `-BuiltinType 0x55982722a810 'unsigned short'
|-TypedefDecl 0x5598272988b0 <line:23:1, col:29> col:29 referenced u32_t 'unsigned int'
| `-BuiltinType 0x55982722a830 'unsigned int'
|-TypedefDecl 0x559827298920 <line:24:1, col:29> col:29 referenced u64_t 'unsigned long long'
| `-BuiltinType 0x55982722a870 'unsigned long long'
|-TypedefDecl 0x559827298990 <line:27:1, col:29> col:29 ulong_t 'unsigned long'
| `-BuiltinType 0x55982722a850 'unsigned long'
|-TypedefDecl 0x559827298b50 </vagrant/ext/zephyros/zephyr/include/sys/atomic.h:21:1, col:13> col:13 referenced atomic_t 'int'
| `-BuiltinType 0x55982722a790 'int'
|-TypedefDecl 0x559827298be0 <line:22:1, col:18> col:18 referenced atomic_val_t 'atomic_t':'int'
| `-TypedefType 0x559827298bb0 'atomic_t' sugar
|   |-Typedef 0x559827298b50 'atomic_t'
|   `-BuiltinType 0x55982722a790 'int'
|-FunctionDecl 0x559827298f48 <line:56:1, line:57:31> line:56:12 atomic_cas 'int (atomic_t *, atomic_val_t, atomic_val_t)' extern
| |-ParmVarDecl 0x559827298d08 <col:23, col:33> col:33 target 'atomic_t *'
| |-ParmVarDecl 0x559827298da0 <col:41, col:54> col:54 old_value 'atomic_val_t':'int'
| `-ParmVarDecl 0x559827298e10 <line:57:9, col:22> col:22 new_value 'atomic_val_t':'int'
|-FunctionDecl 0x559827299200 <line:79:1, col:68> col:21 atomic_add 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x559827299078 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5598272990e8 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5598272993e8 <line:101:1, col:68> col:21 atomic_sub 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5598272992e8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x559827299358 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5598272baa30 <line:120:1, col:48> col:21 atomic_inc 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x5598272994d8 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x5598272baba0 <line:139:1, col:48> col:21 atomic_dec 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x5598272bab18 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x5598272badc0 <line:158:1, col:54> col:21 used atomic_get 'atomic_val_t (const atomic_t *)' extern
| `-ParmVarDecl 0x5598272bacb8 <col:32, col:48> col:48 target 'const atomic_t *'
|-FunctionDecl 0x5598272bafa8 <line:185:1, col:68> col:21 atomic_set 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5598272baea8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5598272baf18 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5598272bb120 <line:205:1, col:50> col:21 atomic_clear 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x5598272bb098 <col:34, col:44> col:44 target 'atomic_t *'
|-FunctionDecl 0x5598272bb308 <line:229:1, col:67> col:21 used atomic_or 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5598272bb208 <col:31, col:41> col:41 target 'atomic_t *'
| `-ParmVarDecl 0x5598272bb278 <col:49, col:62> col:62 value 'atomic_val_t':'int'
|-FunctionDecl 0x5598272bb4f8 <line:252:1, col:68> col:21 atomic_xor 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5598272bb3f8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5598272bb468 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5598272bb6e8 <line:275:1, col:68> col:21 used atomic_and 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5598272bb5e8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5598272bb658 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5598272bb8d8 <line:298:1, col:69> col:21 atomic_nand 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5598272bb7d8 <col:33, col:43> col:43 target 'atomic_t *'
| `-ParmVarDecl 0x5598272bb848 <col:51, col:64> col:64 value 'atomic_val_t':'int'
|-FunctionDecl 0x5598272bbc30 <line:351:1, line:356:1> line:351:20 used atomic_test_bit 'bool (const atomic_t *, int)' static inline
| |-ParmVarDecl 0x5598272bbaa8 <col:36, col:52> col:52 used target 'const atomic_t *'
| |-ParmVarDecl 0x5598272bbb20 <col:60, col:64> col:64 used bit 'int'
| |-CompoundStmt 0x5598272bc3a8 <line:352:1, line:356:1>
| | |-DeclStmt 0x5598272bc030 <line:353:2, col:57>
| | | `-VarDecl 0x5598272bbcf0 <col:2, col:56> col:15 used val 'atomic_val_t':'int' cinit
| | |   `-CallExpr 0x5598272bc000 <col:21, col:56> 'atomic_val_t':'int'
| | |     |-ImplicitCastExpr 0x5598272bbfe8 <col:21> 'atomic_val_t (*)(const atomic_t *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x5598272bbd50 <col:21> 'atomic_val_t (const atomic_t *)' Function 0x5598272badc0 'atomic_get' 'atomic_val_t (const atomic_t *)'
| | |     `-ParenExpr 0x5598272bbf70 <line:318:32, col:63> 'const atomic_t *'
| | |       `-BinaryOperator 0x5598272bbf48 <col:33, col:62> 'const atomic_t *' '+'
| | |         |-ImplicitCastExpr 0x5598272bbf30 <col:33, col:38> 'const atomic_t *' <LValueToRValue>
| | |         | `-ParenExpr 0x5598272bbda0 <col:33, col:38> 'const atomic_t *' lvalue
| | |         |   `-DeclRefExpr 0x5598272bbd78 <line:353:44> 'const atomic_t *' lvalue ParmVar 0x5598272bbaa8 'target' 'const atomic_t *'
| | |         `-ParenExpr 0x5598272bbf10 <line:318:42, col:62> 'unsigned long'
| | |           `-BinaryOperator 0x5598272bbee8 <col:43, line:316:46> 'unsigned long' '/'
| | |             |-ImplicitCastExpr 0x5598272bbed0 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |             | `-ImplicitCastExpr 0x5598272bbeb8 <col:43, col:47> 'int' <LValueToRValue>
| | |             |   `-ParenExpr 0x5598272bbde8 <col:43, col:47> 'int' lvalue
| | |             |     `-DeclRefExpr 0x5598272bbdc0 <line:353:52> 'int' lvalue ParmVar 0x5598272bbb20 'bit' 'int'
| | |             `-ParenExpr 0x5598272bbe98 <line:316:21, col:46> 'unsigned long'
| | |               `-BinaryOperator 0x5598272bbe70 <col:22, col:45> 'unsigned long' '*'
| | |                 |-UnaryExprOrTypeTraitExpr 0x5598272bbe18 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |                 `-ImplicitCastExpr 0x5598272bbe58 <col:45> 'unsigned long' <IntegralCast>
| | |                   `-IntegerLiteral 0x5598272bbe38 <col:45> 'int' 8
| | `-ReturnStmt 0x5598272bc368 <line:355:2, col:53>
| |   `-ImplicitCastExpr 0x5598272bc350 <col:9, col:53> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5598272bc328 <col:9, col:53> 'int' '!='
| |       |-ParenExpr 0x5598272bc2e8 <col:9, col:48> 'int'
| |       | `-BinaryOperator 0x5598272bc2c0 <col:10, col:47> 'int' '&'
| |       |   |-IntegerLiteral 0x5598272bc048 <col:10> 'int' 1
| |       |   `-ParenExpr 0x5598272bc2a0 <col:14, col:47> 'atomic_val_t':'int'
| |       |     `-BinaryOperator 0x5598272bc278 <col:15, col:46> 'atomic_val_t':'int' '>>'
| |       |       |-ImplicitCastExpr 0x5598272bc260 <col:15> 'atomic_val_t':'int' <LValueToRValue>
| |       |       | `-DeclRefExpr 0x5598272bc068 <col:15> 'atomic_val_t':'int' lvalue Var 0x5598272bbcf0 'val' 'atomic_val_t':'int'
| |       |       `-ParenExpr 0x5598272bc240 <col:22, col:46> 'unsigned long'
| |       |         `-BinaryOperator 0x5598272bc218 <col:23, col:45> 'unsigned long' '&'
| |       |           |-ImplicitCastExpr 0x5598272bc200 <col:23> 'unsigned long' <IntegralCast>
| |       |           | `-ImplicitCastExpr 0x5598272bc1e8 <col:23> 'int' <LValueToRValue>
| |       |           |   `-DeclRefExpr 0x5598272bc090 <col:23> 'int' lvalue ParmVar 0x5598272bbb20 'bit' 'int'
| |       |           `-ParenExpr 0x5598272bc1c8 <col:29, col:45> 'unsigned long'
| |       |             `-BinaryOperator 0x5598272bc1a0 <line:316:21, line:355:44> 'unsigned long' '-'
| |       |               |-ParenExpr 0x5598272bc148 <line:316:21, col:46> 'unsigned long'
| |       |               | `-BinaryOperator 0x5598272bc120 <col:22, col:45> 'unsigned long' '*'
| |       |               |   |-UnaryExprOrTypeTraitExpr 0x5598272bc0c8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |       |               |   `-ImplicitCastExpr 0x5598272bc108 <col:45> 'unsigned long' <IntegralCast>
| |       |               |     `-IntegerLiteral 0x5598272bc0e8 <col:45> 'int' 8
| |       |               `-ImplicitCastExpr 0x5598272bc188 <line:355:44> 'unsigned long' <IntegralCast>
| |       |                 `-IntegerLiteral 0x5598272bc168 <col:44> 'int' 1
| |       `-IntegerLiteral 0x5598272bc308 <col:53> 'int' 0
| `-FullComment 0x5598274462a0 <line:341:3, line:349:55>
|   |-ParagraphComment 0x559827445db0 <line:341:3>
|   | `-TextComment 0x559827445d80 <col:3> Text=" "
|   |-BlockCommandComment 0x559827445dd0 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x559827445e30 <col:10, col:32>
|   |   `-TextComment 0x559827445e00 <col:10, col:32> Text=" Atomically test a bit."
|   |-ParagraphComment 0x559827445fa0 <line:343:3, line:344:66>
|   | |-TextComment 0x559827445e50 <line:343:3, col:41> Text=" This routine tests whether bit number "
|   | |-InlineCommandComment 0x559827445ea0 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x559827445ec0 <col:48, col:51> Text=" of "
|   | |-InlineCommandComment 0x559827445f10 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x559827445f30 <col:61, col:75> Text=" is set or not."
|   | `-TextComment 0x559827445f50 <line:344:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x559827445ff0 <line:346:3>
|   | `-TextComment 0x559827445fc0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827446010 <col:4, line:347:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5598274460c0 <line:346:17, line:347:3>
|   |   |-TextComment 0x559827446070 <line:346:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x559827446090 <line:347:3> Text=" "
|   |-ParamCommandComment 0x5598274460e0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x559827446170 <col:14, col:43>
|   |   `-TextComment 0x559827446140 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5598274461c0 <line:349:3>
|   | `-TextComment 0x559827446190 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274461e0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x559827446240 <col:11, col:55>
|       `-TextComment 0x559827446210 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x5598272bc560 <line:369:1, line:377:1> line:369:20 atomic_test_and_clear_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x5598272bc3d8 <col:46, col:56> col:56 used target 'atomic_t *'
| |-ParmVarDecl 0x5598272bc450 <col:64, col:68> col:68 used bit 'int'
| |-CompoundStmt 0x5598272bdb18 <line:370:1, line:377:1>
| | |-DeclStmt 0x5598272bc960 <line:371:2, col:38>
| | | `-VarDecl 0x5598272bc620 <col:2, line:317:66> line:371:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5598272bc940 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5598272bc918 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5598272bc680 <col:27> 'int' 1
| | |       `-ParenExpr 0x5598272bc8f8 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5598272bc8d0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5598272bc8b8 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5598272bc760 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5598272bc748 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x5598272bc728 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5598272bc6c0 <line:371:34> 'int' lvalue ParmVar 0x5598272bc450 'bit' 'int'
| | |           `-ParenExpr 0x5598272bc898 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5598272bc870 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5598272bc818 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5598272bc7f0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5598272bc798 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5598272bc7d8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5598272bc7b8 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5598272bc858 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5598272bc838 <col:63> 'int' 1
| | |-DeclStmt 0x5598272bc9e8 <line:372:2, col:18>
| | | `-VarDecl 0x5598272bc988 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x5598272bd988 <line:374:2, col:50> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x5598272bca00 <col:2> 'atomic_val_t':'int' lvalue Var 0x5598272bc988 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x5598272bd950 <col:8, col:50> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x5598272bd938 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x5598272bd640 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5598272bb6e8 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x5598272bd860 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x5598272bd838 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x5598272bd820 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x5598272bd690 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x5598272bd668 <line:374:31> 'atomic_t *' lvalue ParmVar 0x5598272bc3d8 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x5598272bd800 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x5598272bd7d8 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x5598272bd7c0 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x5598272bd7a8 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x5598272bd6d8 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x5598272bd6b0 <line:374:39> 'int' lvalue ParmVar 0x5598272bc450 'bit' 'int'
| | |   |       `-ParenExpr 0x5598272bd788 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x5598272bd760 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x5598272bd708 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x5598272bd748 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x5598272bd728 <col:45> 'int' 8
| | |   `-UnaryOperator 0x5598272bd8c0 <line:374:45, col:46> 'atomic_val_t':'int' prefix '~'
| | |     `-ImplicitCastExpr 0x5598272bd8a8 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x5598272bd880 <col:46> 'atomic_val_t':'int' lvalue Var 0x5598272bc620 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x5598272bdad8 <line:376:2, col:25>
| |   `-ImplicitCastExpr 0x5598272bdac0 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5598272bda98 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x5598272bda58 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x5598272bda30 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x5598272bda00 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x5598272bd9b0 <col:10> 'atomic_val_t':'int' lvalue Var 0x5598272bc988 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x5598272bda18 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5598272bd9d8 <col:16> 'atomic_val_t':'int' lvalue Var 0x5598272bc620 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x5598272bda78 <col:25> 'int' 0
| `-FullComment 0x559827446830 <line:359:3, line:367:55>
|   |-ParagraphComment 0x559827446340 <line:359:3>
|   | `-TextComment 0x559827446310 <col:3> Text=" "
|   |-BlockCommandComment 0x559827446360 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5598274463c0 <col:10, col:42>
|   |   `-TextComment 0x559827446390 <col:10, col:42> Text=" Atomically test and clear a bit."
|   |-ParagraphComment 0x559827446530 <line:361:3, line:362:66>
|   | |-TextComment 0x5598274463e0 <line:361:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x559827446430 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x559827446450 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x5598274464a0 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x5598274464c0 <col:51, col:76> Text=" and return its old value."
|   | `-TextComment 0x5598274464e0 <line:362:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x559827446580 <line:364:3>
|   | `-TextComment 0x559827446550 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274465a0 <col:4, line:365:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x559827446650 <line:364:17, line:365:3>
|   |   |-TextComment 0x559827446600 <line:364:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x559827446620 <line:365:3> Text=" "
|   |-ParamCommandComment 0x559827446670 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x559827446700 <col:14, col:43>
|   |   `-TextComment 0x5598274466d0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x559827446750 <line:367:3>
|   | `-TextComment 0x559827446720 <col:3> Text=" "
|   `-BlockCommandComment 0x559827446770 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5598274467d0 <col:11, col:55>
|       `-TextComment 0x5598274467a0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x5598272bdc60 <line:390:1, line:398:1> line:390:20 used atomic_test_and_set_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x5598272bdb58 <col:44, col:54> col:54 used target 'atomic_t *'
| |-ParmVarDecl 0x5598272bdbd0 <col:62, col:66> col:66 used bit 'int'
| |-CompoundStmt 0x5598272be568 <line:391:1, line:398:1>
| | |-DeclStmt 0x5598272be040 <line:392:2, col:38>
| | | `-VarDecl 0x5598272bdd20 <col:2, line:317:66> line:392:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5598272be020 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5598272bdff8 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5598272bdd80 <col:27> 'int' 1
| | |       `-ParenExpr 0x5598272bdfd8 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5598272bdfb0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5598272bdf98 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5598272bde40 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5598272bde28 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x5598272bde08 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5598272bdda0 <line:392:34> 'int' lvalue ParmVar 0x5598272bdbd0 'bit' 'int'
| | |           `-ParenExpr 0x5598272bdf78 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5598272bdf50 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5598272bdef8 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5598272bded0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5598272bde78 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5598272bdeb8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5598272bde98 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5598272bdf38 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5598272bdf18 <col:63> 'int' 1
| | |-DeclStmt 0x5598272be0c8 <line:393:2, col:18>
| | | `-VarDecl 0x5598272be068 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x5598272be3d8 <line:395:2, col:48> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x5598272be0e0 <col:2> 'atomic_val_t':'int' lvalue Var 0x5598272be068 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x5598272be388 <col:8, col:48> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x5598272be370 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x5598272be108 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5598272bb308 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x5598272be328 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x5598272be300 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x5598272be2e8 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x5598272be158 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x5598272be130 <line:395:30> 'atomic_t *' lvalue ParmVar 0x5598272bdb58 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x5598272be2c8 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x5598272be2a0 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x5598272be288 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x5598272be270 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x5598272be1a0 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x5598272be178 <line:395:38> 'int' lvalue ParmVar 0x5598272bdbd0 'bit' 'int'
| | |   |       `-ParenExpr 0x5598272be250 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x5598272be228 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x5598272be1d0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x5598272be210 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x5598272be1f0 <col:45> 'int' 8
| | |   `-ImplicitCastExpr 0x5598272be3c0 <line:395:44> 'atomic_val_t':'int' <LValueToRValue>
| | |     `-DeclRefExpr 0x5598272be348 <col:44> 'atomic_val_t':'int' lvalue Var 0x5598272bdd20 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x5598272be528 <line:397:2, col:25>
| |   `-ImplicitCastExpr 0x5598272be510 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5598272be4e8 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x5598272be4a8 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x5598272be480 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x5598272be450 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x5598272be400 <col:10> 'atomic_val_t':'int' lvalue Var 0x5598272be068 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x5598272be468 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5598272be428 <col:16> 'atomic_val_t':'int' lvalue Var 0x5598272bdd20 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x5598272be4c8 <col:25> 'int' 0
| `-FullComment 0x559827448df0 <line:380:3, line:388:55>
|   |-ParagraphComment 0x5598274468d0 <line:380:3>
|   | `-TextComment 0x5598274468a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274468f0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x559827446950 <col:10, col:31>
|   |   `-TextComment 0x559827446920 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x559827448af0 <line:382:3, line:383:66>
|   | |-TextComment 0x559827446970 <line:382:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x5598274469c0 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5598274469e0 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x559827446a30 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x559827446a50 <col:49, col:74> Text=" and return its old value."
|   | `-TextComment 0x559827446a70 <line:383:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x559827448b40 <line:385:3>
|   | `-TextComment 0x559827448b10 <col:3> Text=" "
|   |-ParamCommandComment 0x559827448b60 <col:4, line:386:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x559827448c10 <line:385:17, line:386:3>
|   |   |-TextComment 0x559827448bc0 <line:385:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x559827448be0 <line:386:3> Text=" "
|   |-ParamCommandComment 0x559827448c30 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x559827448cc0 <col:14, col:43>
|   |   `-TextComment 0x559827448c90 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x559827448d10 <line:388:3>
|   | `-TextComment 0x559827448ce0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827448d30 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x559827448d90 <col:11, col:55>
|       `-TextComment 0x559827448d60 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x5598272be760 <line:411:1, line:416:1> line:411:20 used atomic_clear_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x5598272be5a8 <col:37, col:47> col:47 used target 'atomic_t *'
| |-ParmVarDecl 0x5598272be650 <col:55, col:59> col:59 used bit 'int'
| |-CompoundStmt 0x5598272beea8 <line:412:1, line:416:1>
| | |-DeclStmt 0x5598272beb40 <line:413:2, col:38>
| | | `-VarDecl 0x5598272be820 <col:2, line:317:66> line:413:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5598272beb20 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5598272beaf8 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5598272be880 <col:27> 'int' 1
| | |       `-ParenExpr 0x5598272bead8 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5598272beab0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5598272bea98 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5598272be940 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5598272be928 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x5598272be908 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5598272be8a0 <line:413:34> 'int' lvalue ParmVar 0x5598272be650 'bit' 'int'
| | |           `-ParenExpr 0x5598272bea78 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5598272bea50 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5598272be9f8 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5598272be9d0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5598272be978 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5598272be9b8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5598272be998 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5598272bea38 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5598272bea18 <col:63> 'int' 1
| | `-CStyleCastExpr 0x5598272bee58 <line:415:2, col:50> 'void' <ToVoid>
| |   `-CallExpr 0x5598272bee10 <col:8, col:50> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x5598272bedf8 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5598272beb58 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5598272bb6e8 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x5598272bed78 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x5598272bed50 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x5598272bed38 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x5598272beba8 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x5598272beb80 <line:415:31> 'atomic_t *' lvalue ParmVar 0x5598272be5a8 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x5598272bed18 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x5598272becf0 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x5598272becd8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x5598272becc0 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x5598272bebf0 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x5598272bebc8 <line:415:39> 'int' lvalue ParmVar 0x5598272be650 'bit' 'int'
| |     |       `-ParenExpr 0x5598272beca0 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x5598272bec78 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x5598272bec20 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x5598272bec60 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x5598272bec40 <col:45> 'int' 8
| |     `-UnaryOperator 0x5598272bedd8 <line:415:45, col:46> 'atomic_val_t':'int' prefix '~'
| |       `-ImplicitCastExpr 0x5598272bedc0 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| |         `-DeclRefExpr 0x5598272bed98 <col:46> 'atomic_val_t':'int' lvalue Var 0x5598272be820 'mask' 'atomic_val_t':'int'
| `-FullComment 0x559827449360 <line:401:3, line:409:14>
|   |-ParagraphComment 0x559827448e90 <line:401:3>
|   | `-TextComment 0x559827448e60 <col:3> Text=" "
|   |-BlockCommandComment 0x559827448eb0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x559827448f10 <col:10, col:33>
|   |   `-TextComment 0x559827448ee0 <col:10, col:33> Text=" Atomically clear a bit."
|   |-ParagraphComment 0x559827449060 <line:403:3, line:404:66>
|   | |-TextComment 0x559827448f30 <line:403:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x559827448f80 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x559827448fa0 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x559827448ff0 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x559827449010 <line:404:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5598274490b0 <line:406:3>
|   | `-TextComment 0x559827449080 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274490d0 <col:4, line:407:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x559827449180 <line:406:17, line:407:3>
|   |   |-TextComment 0x559827449130 <line:406:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x559827449150 <line:407:3> Text=" "
|   |-ParamCommandComment 0x5598274491a0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x559827449230 <col:14, col:43>
|   |   `-TextComment 0x559827449200 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x559827449280 <line:409:3>
|   | `-TextComment 0x559827449250 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274492a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827449300 <col:11, col:14>
|       `-TextComment 0x5598274492d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598272befe0 <line:429:1, line:434:1> line:429:20 atomic_set_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x5598272beed8 <col:35, col:45> col:45 used target 'atomic_t *'
| |-ParmVarDecl 0x5598272bef50 <col:53, col:57> col:57 used bit 'int'
| |-CompoundStmt 0x5598272bf728 <line:430:1, line:434:1>
| | |-DeclStmt 0x5598272bf3c0 <line:431:2, col:38>
| | | `-VarDecl 0x5598272bf0a0 <col:2, line:317:66> line:431:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5598272bf3a0 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5598272bf378 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5598272bf100 <col:27> 'int' 1
| | |       `-ParenExpr 0x5598272bf358 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5598272bf330 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5598272bf318 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5598272bf1c0 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5598272bf1a8 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x5598272bf188 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5598272bf120 <line:431:34> 'int' lvalue ParmVar 0x5598272bef50 'bit' 'int'
| | |           `-ParenExpr 0x5598272bf2f8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5598272bf2d0 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5598272bf278 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5598272bf250 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5598272bf1f8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5598272bf238 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5598272bf218 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5598272bf2b8 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5598272bf298 <col:63> 'int' 1
| | `-CStyleCastExpr 0x5598272bf6d8 <line:433:2, col:48> 'void' <ToVoid>
| |   `-CallExpr 0x5598272bf678 <col:8, col:48> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x5598272bf660 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5598272bf3d8 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5598272bb308 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x5598272bf5f8 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x5598272bf5d0 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x5598272bf5b8 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x5598272bf428 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x5598272bf400 <line:433:30> 'atomic_t *' lvalue ParmVar 0x5598272beed8 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x5598272bf598 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x5598272bf570 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x5598272bf558 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x5598272bf540 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x5598272bf470 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x5598272bf448 <line:433:38> 'int' lvalue ParmVar 0x5598272bef50 'bit' 'int'
| |     |       `-ParenExpr 0x5598272bf520 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x5598272bf4f8 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x5598272bf4a0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x5598272bf4e0 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x5598272bf4c0 <col:45> 'int' 8
| |     `-ImplicitCastExpr 0x5598272bf6b0 <line:433:44> 'atomic_val_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x5598272bf618 <col:44> 'atomic_val_t':'int' lvalue Var 0x5598272bf0a0 'mask' 'atomic_val_t':'int'
| `-FullComment 0x5598274498d0 <line:419:3, line:427:14>
|   |-ParagraphComment 0x559827449400 <line:419:3>
|   | `-TextComment 0x5598274493d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827449420 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x559827449480 <col:10, col:31>
|   |   `-TextComment 0x559827449450 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x5598274495d0 <line:421:3, line:422:66>
|   | |-TextComment 0x5598274494a0 <line:421:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x5598274494f0 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x559827449510 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x559827449560 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x559827449580 <line:422:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x559827449620 <line:424:3>
|   | `-TextComment 0x5598274495f0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827449640 <col:4, line:425:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5598274496f0 <line:424:17, line:425:3>
|   |   |-TextComment 0x5598274496a0 <line:424:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5598274496c0 <line:425:3> Text=" "
|   |-ParamCommandComment 0x559827449710 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5598274497a0 <col:14, col:43>
|   |   `-TextComment 0x559827449770 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5598274497f0 <line:427:3>
|   | `-TextComment 0x5598274497c0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827449810 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827449870 <col:11, col:14>
|       `-TextComment 0x559827449840 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598272bf970 <line:448:1, line:457:1> line:448:20 atomic_set_bit_to 'void (atomic_t *, int, bool)' static inline
| |-ParmVarDecl 0x5598272bf758 <col:38, col:48> col:48 used target 'atomic_t *'
| |-ParmVarDecl 0x5598272bf7d0 <col:56, col:60> col:60 used bit 'int'
| |-ParmVarDecl 0x5598272bf840 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/atomic.h:448:70> col:70 used val 'bool'
| |-CompoundStmt 0x5598272c0508 <line:449:1, line:457:1>
| | |-DeclStmt 0x5598272bfd58 <line:450:2, col:38>
| | | `-VarDecl 0x5598272bfa38 <col:2, line:317:66> line:450:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5598272bfd38 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5598272bfd10 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5598272bfa98 <col:27> 'int' 1
| | |       `-ParenExpr 0x5598272bfcf0 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5598272bfcc8 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5598272bfcb0 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5598272bfb58 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5598272bfb40 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x5598272bfb20 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5598272bfab8 <line:450:34> 'int' lvalue ParmVar 0x5598272bf7d0 'bit' 'int'
| | |           `-ParenExpr 0x5598272bfc90 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5598272bfc68 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5598272bfc10 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5598272bfbe8 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5598272bfb90 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5598272bfbd0 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5598272bfbb0 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5598272bfc50 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5598272bfc30 <col:63> 'int' 1
| | `-IfStmt 0x5598272c0410 <line:452:2, line:456:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x5598272bfd98 <line:452:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x5598272bfd70 <col:6> 'bool' lvalue ParmVar 0x5598272bf840 'val' 'bool'
| |   |-CompoundStmt 0x5598272c00b8 <col:11, line:454:2>
| |   | `-CStyleCastExpr 0x5598272c0090 <line:453:3, col:49> 'void' <ToVoid>
| |   |   `-CallExpr 0x5598272c0030 <col:9, col:49> 'atomic_val_t':'int'
| |   |     |-ImplicitCastExpr 0x5598272c0018 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x5598272bfdb0 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5598272bb308 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |   |     |-ParenExpr 0x5598272bffd0 <line:318:32, col:63> 'atomic_t *'
| |   |     | `-BinaryOperator 0x5598272bffa8 <col:33, col:62> 'atomic_t *' '+'
| |   |     |   |-ImplicitCastExpr 0x5598272bff90 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |   |     |   | `-ParenExpr 0x5598272bfe00 <col:33, col:38> 'atomic_t *' lvalue
| |   |     |   |   `-DeclRefExpr 0x5598272bfdd8 <line:453:31> 'atomic_t *' lvalue ParmVar 0x5598272bf758 'target' 'atomic_t *'
| |   |     |   `-ParenExpr 0x5598272bff70 <line:318:42, col:62> 'unsigned long'
| |   |     |     `-BinaryOperator 0x5598272bff48 <col:43, line:316:46> 'unsigned long' '/'
| |   |     |       |-ImplicitCastExpr 0x5598272bff30 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |   |     |       | `-ImplicitCastExpr 0x5598272bff18 <col:43, col:47> 'int' <LValueToRValue>
| |   |     |       |   `-ParenExpr 0x5598272bfe48 <col:43, col:47> 'int' lvalue
| |   |     |       |     `-DeclRefExpr 0x5598272bfe20 <line:453:39> 'int' lvalue ParmVar 0x5598272bf7d0 'bit' 'int'
| |   |     |       `-ParenExpr 0x5598272bfef8 <line:316:21, col:46> 'unsigned long'
| |   |     |         `-BinaryOperator 0x5598272bfed0 <col:22, col:45> 'unsigned long' '*'
| |   |     |           |-UnaryExprOrTypeTraitExpr 0x5598272bfe78 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |   |     |           `-ImplicitCastExpr 0x5598272bfeb8 <col:45> 'unsigned long' <IntegralCast>
| |   |     |             `-IntegerLiteral 0x5598272bfe98 <col:45> 'int' 8
| |   |     `-ImplicitCastExpr 0x5598272c0068 <line:453:45> 'atomic_val_t':'int' <LValueToRValue>
| |   |       `-DeclRefExpr 0x5598272bfff0 <col:45> 'atomic_val_t':'int' lvalue Var 0x5598272bfa38 'mask' 'atomic_val_t':'int'
| |   `-CompoundStmt 0x5598272c03f8 <line:454:9, line:456:2>
| |     `-CStyleCastExpr 0x5598272c03d0 <line:455:3, col:51> 'void' <ToVoid>
| |       `-CallExpr 0x5598272c0388 <col:9, col:51> 'atomic_val_t':'int'
| |         |-ImplicitCastExpr 0x5598272c0370 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x5598272c00d0 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5598272bb6e8 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |         |-ParenExpr 0x5598272c02f0 <line:318:32, col:63> 'atomic_t *'
| |         | `-BinaryOperator 0x5598272c02c8 <col:33, col:62> 'atomic_t *' '+'
| |         |   |-ImplicitCastExpr 0x5598272c02b0 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |         |   | `-ParenExpr 0x5598272c0120 <col:33, col:38> 'atomic_t *' lvalue
| |         |   |   `-DeclRefExpr 0x5598272c00f8 <line:455:32> 'atomic_t *' lvalue ParmVar 0x5598272bf758 'target' 'atomic_t *'
| |         |   `-ParenExpr 0x5598272c0290 <line:318:42, col:62> 'unsigned long'
| |         |     `-BinaryOperator 0x5598272c0268 <col:43, line:316:46> 'unsigned long' '/'
| |         |       |-ImplicitCastExpr 0x5598272c0250 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |         |       | `-ImplicitCastExpr 0x5598272c0238 <col:43, col:47> 'int' <LValueToRValue>
| |         |       |   `-ParenExpr 0x5598272c0168 <col:43, col:47> 'int' lvalue
| |         |       |     `-DeclRefExpr 0x5598272c0140 <line:455:40> 'int' lvalue ParmVar 0x5598272bf7d0 'bit' 'int'
| |         |       `-ParenExpr 0x5598272c0218 <line:316:21, col:46> 'unsigned long'
| |         |         `-BinaryOperator 0x5598272c01f0 <col:22, col:45> 'unsigned long' '*'
| |         |           |-UnaryExprOrTypeTraitExpr 0x5598272c0198 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |         |           `-ImplicitCastExpr 0x5598272c01d8 <col:45> 'unsigned long' <IntegralCast>
| |         |             `-IntegerLiteral 0x5598272c01b8 <col:45> 'int' 8
| |         `-UnaryOperator 0x5598272c0350 <line:455:46, col:47> 'atomic_val_t':'int' prefix '~'
| |           `-ImplicitCastExpr 0x5598272c0338 <col:47> 'atomic_val_t':'int' <LValueToRValue>
| |             `-DeclRefExpr 0x5598272c0310 <col:47> 'atomic_val_t':'int' lvalue Var 0x5598272bfa38 'mask' 'atomic_val_t':'int'
| `-FullComment 0x559827449fa0 <line:437:3, line:446:14>
|   |-ParagraphComment 0x559827449970 <line:437:3>
|   | `-TextComment 0x559827449940 <col:3> Text=" "
|   |-BlockCommandComment 0x559827449990 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x5598274499f0 <col:10, col:48>
|   |   `-TextComment 0x5598274499c0 <col:10, col:48> Text=" Atomically set a bit to a given value."
|   |-ParagraphComment 0x559827449bc0 <line:439:3, line:440:66>
|   | |-TextComment 0x559827449a10 <line:439:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x559827449a60 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x559827449a80 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x559827449ad0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x559827449af0 <col:49, col:58> Text=" to value "
|   | |-InlineCommandComment 0x559827449b40 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="val."
|   | `-TextComment 0x559827449b60 <line:440:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x559827449c10 <line:442:3>
|   | `-TextComment 0x559827449be0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827449c30 <col:4, line:443:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x559827449ce0 <line:442:17, line:443:3>
|   |   |-TextComment 0x559827449c90 <line:442:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x559827449cb0 <line:443:3> Text=" "
|   |-ParamCommandComment 0x559827449d00 <col:4, line:444:3> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x559827449db0 <line:443:14, line:444:3>
|   |   |-TextComment 0x559827449d60 <line:443:14, col:43> Text=" Bit number (starting from 0)."
|   |   `-TextComment 0x559827449d80 <line:444:3> Text=" "
|   |-ParamCommandComment 0x559827449dd0 <col:4, col:38> [in] implicitly Param="val" ParamIndex=2
|   | `-ParagraphComment 0x559827449e60 <col:14, col:38>
|   |   `-TextComment 0x559827449e30 <col:14, col:38> Text=" true for 1, false for 0."
|   |-ParagraphComment 0x559827449eb0 <line:446:3>
|   | `-TextComment 0x559827449e80 <col:3> Text=" "
|   `-BlockCommandComment 0x559827449ed0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827449f30 <col:11, col:14>
|       `-TextComment 0x559827449f00 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598272c9650 </vagrant/ext/zephyros/zephyr/include/sys/util.h:113:1, line:116:1> line:113:20 is_power_of_two 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x5598272c0540 <col:36, col:49> col:49 used x 'unsigned int'
| `-CompoundStmt 0x5598272c99a8 <line:114:1, line:116:1>
|   `-ReturnStmt 0x5598272c9990 <line:115:2, col:42>
|     `-ImplicitCastExpr 0x5598272c9978 <col:9, col:42> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5598272c9950 <col:9, col:42> 'int' '&&'
|         |-ParenExpr 0x5598272c9780 <col:9, col:17> 'int'
|         | `-BinaryOperator 0x5598272c9758 <col:10, col:15> 'int' '!='
|         |   |-ImplicitCastExpr 0x5598272c9740 <col:10> 'unsigned int' <LValueToRValue>
|         |   | `-DeclRefExpr 0x5598272c96f8 <col:10> 'unsigned int' lvalue ParmVar 0x5598272c0540 'x' 'unsigned int'
|         |   `-IntegerLiteral 0x5598272c9720 <col:15> 'unsigned int' 0
|         `-ParenExpr 0x5598272c9930 <col:22, col:42> 'int'
|           `-BinaryOperator 0x5598272c9908 <col:23, col:40> 'int' '=='
|             |-ParenExpr 0x5598272c98c8 <col:23, col:35> 'unsigned int'
|             | `-BinaryOperator 0x5598272c98a0 <col:24, col:34> 'unsigned int' '&'
|             |   |-ImplicitCastExpr 0x5598272c9888 <col:24> 'unsigned int' <LValueToRValue>
|             |   | `-DeclRefExpr 0x5598272c97a0 <col:24> 'unsigned int' lvalue ParmVar 0x5598272c0540 'x' 'unsigned int'
|             |   `-ParenExpr 0x5598272c9868 <col:28, col:34> 'unsigned int'
|             |     `-BinaryOperator 0x5598272c9840 <col:29, col:33> 'unsigned int' '-'
|             |       |-ImplicitCastExpr 0x5598272c9810 <col:29> 'unsigned int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x5598272c97c8 <col:29> 'unsigned int' lvalue ParmVar 0x5598272c0540 'x' 'unsigned int'
|             |       `-ImplicitCastExpr 0x5598272c9828 <col:33> 'unsigned int' <IntegralCast>
|             |         `-IntegerLiteral 0x5598272c97f0 <col:33> 'int' 1
|             `-IntegerLiteral 0x5598272c98e8 <col:40> 'unsigned int' 0
|-FunctionDecl 0x5598272c9b90 <line:118:1, line:134:1> line:118:21 arithmetic_shift_right 's64_t (s64_t, u8_t)' static inline
| |-ParmVarDecl 0x5598272c99f0 <col:44, col:50> col:50 used value 's64_t':'long long'
| |-ParmVarDecl 0x5598272c9a80 <col:57, col:62> col:62 used shift 'u8_t':'unsigned char'
| `-CompoundStmt 0x5598272ca2a8 <line:119:1, line:134:1>
|   |-DeclStmt 0x5598272c9cb0 <line:120:2, col:16>
|   | `-VarDecl 0x5598272c9c50 <col:2, col:8> col:8 used sign_ext 's64_t':'long long'
|   |-IfStmt 0x5598272c9dd8 <line:122:2, line:124:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x5598272c9d40 <line:122:6, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x5598272c9d28 <col:6> 'unsigned int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x5598272c9d10 <col:6> 'u8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5598272c9cc8 <col:6> 'u8_t':'unsigned char' lvalue ParmVar 0x5598272c9a80 'shift' 'u8_t':'unsigned char'
|   | | `-IntegerLiteral 0x5598272c9cf0 <col:15> 'unsigned int' 0
|   | |-CompoundStmt 0x5598272c9dc0 <col:19, line:124:2>
|   | | `-ReturnStmt 0x5598272c9da8 <line:123:3, col:10>
|   | |   `-ImplicitCastExpr 0x5598272c9d90 <col:10> 's64_t':'long long' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5598272c9d68 <col:10> 's64_t':'long long' lvalue ParmVar 0x5598272c99f0 'value' 's64_t':'long long'
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x5598272c9f40 <line:127:2, col:29> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x5598272c9e10 <col:2> 's64_t':'long long' lvalue Var 0x5598272c9c50 'sign_ext' 's64_t':'long long'
|   | `-BinaryOperator 0x5598272c9f18 <col:13, col:29> 'long long' '&'
|   |   |-ParenExpr 0x5598272c9ec0 <col:13, col:25> 's64_t':'long long'
|   |   | `-BinaryOperator 0x5598272c9e98 <col:14, col:23> 's64_t':'long long' '>>'
|   |   |   |-ImplicitCastExpr 0x5598272c9e80 <col:14> 's64_t':'long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x5598272c9e38 <col:14> 's64_t':'long long' lvalue ParmVar 0x5598272c99f0 'value' 's64_t':'long long'
|   |   |   `-IntegerLiteral 0x5598272c9e60 <col:23> 'int' 63
|   |   `-ImplicitCastExpr 0x5598272c9f00 <col:29> 'long long' <IntegralCast>
|   |     `-IntegerLiteral 0x5598272c9ee0 <col:29> 'int' 1
|   |-BinaryOperator 0x5598272c9ff0 <line:130:2, col:14> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x5598272c9f68 <col:2> 's64_t':'long long' lvalue Var 0x5598272c9c50 'sign_ext' 's64_t':'long long'
|   | `-UnaryOperator 0x5598272c9fd0 <col:13, col:14> 's64_t':'long long' prefix '-'
|   |   `-ImplicitCastExpr 0x5598272c9fb8 <col:14> 's64_t':'long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x5598272c9f90 <col:14> 's64_t':'long long' lvalue Var 0x5598272c9c50 'sign_ext' 's64_t':'long long'
|   `-ReturnStmt 0x5598272ca268 <line:133:2, col:53>
|     `-BinaryOperator 0x5598272ca240 <col:9, col:53> 'long long' '|'
|       |-ParenExpr 0x5598272ca0d8 <col:9, col:24> 's64_t':'long long'
|       | `-BinaryOperator 0x5598272ca0b0 <col:10, col:19> 's64_t':'long long' '>>'
|       |   |-ImplicitCastExpr 0x5598272ca068 <col:10> 's64_t':'long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5598272ca018 <col:10> 's64_t':'long long' lvalue ParmVar 0x5598272c99f0 'value' 's64_t':'long long'
|       |   `-ImplicitCastExpr 0x5598272ca098 <col:19> 'int' <IntegralCast>
|       |     `-ImplicitCastExpr 0x5598272ca080 <col:19> 'u8_t':'unsigned char' <LValueToRValue>
|       |       `-DeclRefExpr 0x5598272ca040 <col:19> 'u8_t':'unsigned char' lvalue ParmVar 0x5598272c9a80 'shift' 'u8_t':'unsigned char'
|       `-ParenExpr 0x5598272ca220 <col:28, col:53> 's64_t':'long long'
|         `-BinaryOperator 0x5598272ca1f8 <col:29, col:52> 's64_t':'long long' '<<'
|           |-ImplicitCastExpr 0x5598272ca1e0 <col:29> 's64_t':'long long' <LValueToRValue>
|           | `-DeclRefExpr 0x5598272ca0f8 <col:29> 's64_t':'long long' lvalue Var 0x5598272c9c50 'sign_ext' 's64_t':'long long'
|           `-ParenExpr 0x5598272ca1c0 <col:41, col:52> 'int'
|             `-BinaryOperator 0x5598272ca198 <col:42, col:47> 'int' '-'
|               |-IntegerLiteral 0x5598272ca120 <col:42> 'int' 64
|               `-ImplicitCastExpr 0x5598272ca180 <col:47> 'int' <IntegralCast>
|                 `-ImplicitCastExpr 0x5598272ca168 <col:47> 'u8_t':'unsigned char' <LValueToRValue>
|                   `-DeclRefExpr 0x5598272ca140 <col:47> 'u8_t':'unsigned char' lvalue ParmVar 0x5598272c9a80 'shift' 'u8_t':'unsigned char'
|-FunctionDecl 0x5598272ca4d8 <line:144:1, col:29> col:5 char2hex 'int (char, u8_t *)'
| |-ParmVarDecl 0x5598272ca2f0 <col:14, col:19> col:19 c 'char'
| |-ParmVarDecl 0x5598272ca3b8 <col:22, col:28> col:28 x 'u8_t *'
| `-FullComment 0x55982744a3c0 <line:137:3, line:142:63>
|   |-ParagraphComment 0x55982744a040 <line:137:3>
|   | `-TextComment 0x55982744a010 <col:3> Text=" "
|   |-BlockCommandComment 0x55982744a060 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x55982744a0c0 <col:10, col:68>
|   |   `-TextComment 0x55982744a090 <col:10, col:68> Text="      Convert a single character into a hexadecimal nibble."
|   |-ParagraphComment 0x55982744a110 <line:139:3>
|   | `-TextComment 0x55982744a0e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982744a130 <col:4, line:140:3> [in] explicitly Param="c" ParamIndex=0
|   | `-ParagraphComment 0x55982744a1e0 <line:139:17, line:140:3>
|   |   |-TextComment 0x55982744a190 <line:139:17, col:45> Text="     The character to convert"
|   |   `-TextComment 0x55982744a1b0 <line:140:3> Text=" "
|   |-ParamCommandComment 0x55982744a200 <col:4, col:69> [in] implicitly Param="x" ParamIndex=1
|   | `-ParagraphComment 0x55982744a290 <col:17, col:69>
|   |   `-TextComment 0x55982744a260 <col:17, col:69> Text="     The address of storage for the converted number."
|   |-ParagraphComment 0x55982744a2e0 <line:142:3, col:4>
|   | `-TextComment 0x55982744a2b0 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x55982744a300 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x55982744a360 <col:12, col:63>
|       `-TextComment 0x55982744a330 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x5598272ca778 <line:154:1, col:29> col:5 hex2char 'int (u8_t, char *)'
| |-ParmVarDecl 0x5598272ca5c8 <col:14, col:19> col:19 x 'u8_t':'unsigned char'
| |-ParmVarDecl 0x5598272ca660 <col:22, col:28> col:28 c 'char *'
| `-FullComment 0x55982744a7e0 <line:147:3, line:152:63>
|   |-ParagraphComment 0x55982744a460 <line:147:3>
|   | `-TextComment 0x55982744a430 <col:3> Text=" "
|   |-BlockCommandComment 0x55982744a480 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x55982744a4e0 <col:10, col:68>
|   |   `-TextComment 0x55982744a4b0 <col:10, col:68> Text="      Convert a single hexadecimal nibble into a character."
|   |-ParagraphComment 0x55982744a530 <line:149:3>
|   | `-TextComment 0x55982744a500 <col:3> Text=" "
|   |-ParamCommandComment 0x55982744a550 <col:4, line:150:3> [in] explicitly Param="c" ParamIndex=1
|   | `-ParagraphComment 0x55982744a600 <line:149:17, line:150:3>
|   |   |-TextComment 0x55982744a5b0 <line:149:17, col:42> Text="     The number to convert"
|   |   `-TextComment 0x55982744a5d0 <line:150:3> Text=" "
|   |-ParamCommandComment 0x55982744a620 <col:4, col:72> [in] implicitly Param="x" ParamIndex=0
|   | `-ParagraphComment 0x55982744a6b0 <col:17, col:72>
|   |   `-TextComment 0x55982744a680 <col:17, col:72> Text="     The address of storage for the converted character."
|   |-ParagraphComment 0x55982744a700 <line:152:3, col:4>
|   | `-TextComment 0x55982744a6d0 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x55982744a720 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x55982744a780 <col:12, col:63>
|       `-TextComment 0x55982744a750 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x5598272cab80 <line:166:1, col:72> col:8 bin2hex 'size_t (const u8_t *, size_t, char *, size_t)'
| |-ParmVarDecl 0x5598272ca8e8 <col:16, col:28> col:28 buf 'const u8_t *'
| |-ParmVarDecl 0x5598272ca958 <col:33, col:40> col:40 buflen 'size_t':'unsigned long'
| |-ParmVarDecl 0x5598272ca9d0 <col:48, col:54> col:54 hex 'char *'
| |-ParmVarDecl 0x5598272caa40 <col:59, col:66> col:66 hexlen 'size_t':'unsigned long'
| `-FullComment 0x55982744cdf0 <line:157:3, line:164:77>
|   |-ParagraphComment 0x55982744a880 <line:157:3>
|   | `-TextComment 0x55982744a850 <col:3> Text=" "
|   |-BlockCommandComment 0x55982744a8a0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x55982744a900 <col:10, col:65>
|   |   `-TextComment 0x55982744a8d0 <col:10, col:65> Text="      Convert a binary array into string representation."
|   |-ParagraphComment 0x55982744a950 <line:159:3>
|   | `-TextComment 0x55982744a920 <col:3> Text=" "
|   |-ParamCommandComment 0x55982744a970 <col:4, line:160:3> [in] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x55982744aa20 <line:159:19, line:160:3>
|   |   |-TextComment 0x55982744a9d0 <line:159:19, col:50> Text="     The binary array to convert"
|   |   `-TextComment 0x55982744a9f0 <line:160:3> Text=" "
|   |-ParamCommandComment 0x55982744aa40 <col:4, line:161:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x55982744cb30 <line:160:22, line:161:3>
|   |   |-TextComment 0x55982744aaa0 <line:160:22, col:64> Text="  The length of the binary array to convert"
|   |   `-TextComment 0x55982744aac0 <line:161:3> Text=" "
|   |-ParamCommandComment 0x55982744cb50 <col:4, line:162:3> [out] explicitly Param="hex" ParamIndex=2
|   | `-ParagraphComment 0x55982744cc00 <line:161:19, line:162:3>
|   |   |-TextComment 0x55982744cbb0 <line:161:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x55982744cbd0 <line:162:3> Text=" "
|   |-ParamCommandComment 0x55982744cc20 <col:4, col:74> [in] explicitly Param="hexlen" ParamIndex=3
|   | `-ParagraphComment 0x55982744ccb0 <col:22, col:74>
|   |   `-TextComment 0x55982744cc80 <col:22, col:74> Text="  Size of the storage area for string representation."
|   |-ParagraphComment 0x55982744cd00 <line:164:3>
|   | `-TextComment 0x55982744ccd0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982744cd20 <col:4, col:77> Name="return"
|     `-ParagraphComment 0x55982744cd80 <col:11, col:77>
|       `-TextComment 0x55982744cd50 <col:11, col:77> Text="     The length of the converted string, or 0 if an error occurred."
|-FunctionDecl 0x5598272caf10 <line:184:1, col:72> col:8 hex2bin 'size_t (const char *, size_t, u8_t *, size_t)'
| |-ParmVarDecl 0x5598272cac80 <col:16, col:28> col:28 hex 'const char *'
| |-ParmVarDecl 0x5598272cacf0 <col:33, col:40> col:40 hexlen 'size_t':'unsigned long'
| |-ParmVarDecl 0x5598272cad60 <col:48, col:54> col:54 buf 'u8_t *'
| |-ParmVarDecl 0x5598272cadd0 <col:59, col:66> col:66 buflen 'size_t':'unsigned long'
| `-FullComment 0x55982744d3c0 <line:175:3, line:182:74>
|   |-ParagraphComment 0x55982744ce90 <line:175:3>
|   | `-TextComment 0x55982744ce60 <col:3> Text=" "
|   |-BlockCommandComment 0x55982744ceb0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x55982744cf10 <col:10, col:64>
|   |   `-TextComment 0x55982744cee0 <col:10, col:64> Text="      Convert a hexadecimal string into a binary array."
|   |-ParagraphComment 0x55982744cf60 <line:177:3>
|   | `-TextComment 0x55982744cf30 <col:3> Text=" "
|   |-ParamCommandComment 0x55982744cf80 <col:4, line:178:3> [in] explicitly Param="hex" ParamIndex=0
|   | `-ParagraphComment 0x55982744d030 <line:177:19, line:178:3>
|   |   |-TextComment 0x55982744cfe0 <line:177:19, col:56> Text="     The hexadecimal string to convert"
|   |   `-TextComment 0x55982744d000 <line:178:3> Text=" "
|   |-ParamCommandComment 0x55982744d050 <col:4, line:179:3> [in] explicitly Param="hexlen" ParamIndex=1
|   | `-ParagraphComment 0x55982744d100 <line:178:22, line:179:3>
|   |   |-TextComment 0x55982744d0b0 <line:178:22, col:71> Text="  The length of the hexadecimal string to convert."
|   |   `-TextComment 0x55982744d0d0 <line:179:3> Text=" "
|   |-ParamCommandComment 0x55982744d120 <col:4, line:180:3> [out] explicitly Param="buf" ParamIndex=2
|   | `-ParagraphComment 0x55982744d1d0 <line:179:19, line:180:3>
|   |   |-TextComment 0x55982744d180 <line:179:19, col:64> Text="     Address of where to store the binary data"
|   |   `-TextComment 0x55982744d1a0 <line:180:3> Text=" "
|   |-ParamCommandComment 0x55982744d1f0 <col:4, col:63> [in] explicitly Param="buflen" ParamIndex=3
|   | `-ParagraphComment 0x55982744d280 <col:22, col:63>
|   |   `-TextComment 0x55982744d250 <col:22, col:63> Text="  Size of the storage area for binary data"
|   |-ParagraphComment 0x55982744d2d0 <line:182:3>
|   | `-TextComment 0x55982744d2a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982744d2f0 <col:4, col:74> Name="return"
|     `-ParagraphComment 0x55982744d350 <col:11, col:74>
|       `-TextComment 0x55982744d320 <col:11, col:74> Text="     The length of the binary array , or 0 if an error occurred."
|-FunctionDecl 0x5598272cb220 <line:199:1, col:50> col:6 u8_to_dec 'u8_t (char *, u8_t, u8_t)'
| |-ParmVarDecl 0x5598272cb010 <col:16, col:22> col:22 buf 'char *'
| |-ParmVarDecl 0x5598272cb080 <col:27, col:32> col:32 buflen 'u8_t':'unsigned char'
| |-ParmVarDecl 0x5598272cb0f0 <col:40, col:45> col:45 value 'u8_t':'unsigned char'
| `-FullComment 0x55982744d950 <line:187:3, line:197:47>
|   |-ParagraphComment 0x55982744d460 <line:187:3>
|   | `-TextComment 0x55982744d430 <col:3> Text=" "
|   |-BlockCommandComment 0x55982744d480 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x55982744d4e0 <col:10, col:65>
|   |   `-TextComment 0x55982744d4b0 <col:10, col:65> Text="      Convert a u8_t into decimal string representation."
|   |-ParagraphComment 0x55982744d550 <line:189:3, line:190:60>
|   | |-TextComment 0x55982744d500 <line:189:3, col:65> Text=" Convert a u8_t value into ASCII decimal string representation."
|   | `-TextComment 0x55982744d520 <line:190:3, col:60> Text=" The string is terminated if there is enough space in buf."
|   |-ParagraphComment 0x55982744d5a0 <line:192:3>
|   | `-TextComment 0x55982744d570 <col:3> Text=" "
|   |-ParamCommandComment 0x55982744d5c0 <col:4, line:193:3> [out] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x55982744d670 <line:192:19, line:193:3>
|   |   |-TextComment 0x55982744d620 <line:192:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x55982744d640 <line:193:3> Text=" "
|   |-ParamCommandComment 0x55982744d690 <col:4, line:194:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x55982744d740 <line:193:22, line:194:3>
|   |   |-TextComment 0x55982744d6f0 <line:193:22, col:74> Text="  Size of the storage area for string representation."
|   |   `-TextComment 0x55982744d710 <line:194:3> Text=" "
|   |-ParamCommandComment 0x55982744d760 <col:4, col:61> [in] explicitly Param="value" ParamIndex=2
|   | `-ParagraphComment 0x55982744d7f0 <col:21, col:61>
|   |   `-TextComment 0x55982744d7c0 <col:21, col:61> Text="   The value to convert to decimal string"
|   |-ParagraphComment 0x55982744d840 <line:196:3>
|   | `-TextComment 0x55982744d810 <col:3> Text=" "
|   `-BlockCommandComment 0x55982744d860 <col:4, line:197:47> Name="return"
|     `-ParagraphComment 0x55982744d8e0 <line:196:11, line:197:47>
|       |-TextComment 0x55982744d890 <line:196:11, col:74> Text="     The length of the converted string (excluding terminator if"
|       `-TextComment 0x55982744d8b0 <line:197:3, col:47> Text="             any), or 0 if an error occurred."
|-RecordDecl 0x5598272cb5d8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:31:1, line:40:1> line:31:8 struct _dnode definition
| |-RecordDecl 0x5598272ffe50 <line:32:2, line:35:2> line:32:2 union definition
| | |-FieldDecl 0x5598272fffb0 <line:33:3, col:18> col:18 referenced head 'struct _dnode *'
| | `-FieldDecl 0x559827300020 <line:34:3, col:18> col:18 referenced next 'struct _dnode *'
| |-FieldDecl 0x5598273000c0 <line:32:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| |-IndirectFieldDecl 0x559827300118 <line:33:18> col:18 implicit head 'struct _dnode *'
| | |-Field 0x5598273000c0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x5598272fffb0 'head' 'struct _dnode *'
| |-IndirectFieldDecl 0x559827300168 <line:34:18> col:18 implicit next 'struct _dnode *'
| | |-Field 0x5598273000c0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x559827300020 'next' 'struct _dnode *'
| |-RecordDecl 0x5598273001a8 <line:36:2, line:39:2> line:36:2 union definition
| | |-FieldDecl 0x559827300278 <line:37:3, col:18> col:18 referenced tail 'struct _dnode *'
| | `-FieldDecl 0x5598273002e8 <line:38:3, col:18> col:18 referenced prev 'struct _dnode *'
| |-FieldDecl 0x559827300380 <line:36:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| |-IndirectFieldDecl 0x5598273003d8 <line:37:18> col:18 implicit tail 'struct _dnode *'
| | |-Field 0x559827300380 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| | `-Field 0x559827300278 'tail' 'struct _dnode *'
| `-IndirectFieldDecl 0x559827300428 <line:38:18> col:18 implicit prev 'struct _dnode *'
|   |-Field 0x559827300380 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
|   `-Field 0x5598273002e8 'prev' 'struct _dnode *'
|-TypedefDecl 0x5598273004d8 <line:42:1, col:23> col:23 referenced sys_dlist_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x5598272fff00 'struct _dnode' sugar
|   `-RecordType 0x5598272ffe30 'struct _dnode'
|     `-Record 0x5598272cb5d8 '_dnode'
|-TypedefDecl 0x559827300550 <line:43:1, col:23> col:23 referenced sys_dnode_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x5598272fff00 'struct _dnode' sugar
|   `-RecordType 0x5598272ffe30 'struct _dnode'
|     `-Record 0x5598272cb5d8 '_dnode'
|-FunctionDecl 0x559827300830 <line:192:1, line:196:1> line:192:20 sys_dlist_init 'void (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x559827300728 <col:35, col:48> col:48 used list 'sys_dlist_t *'
| |-CompoundStmt 0x559827300c28 <line:193:1, line:196:1>
| | |-BinaryOperator 0x559827300a68 <line:194:2, col:30> 'struct _dnode *' '='
| | | |-MemberExpr 0x559827300968 <col:2, col:8> 'struct _dnode *' lvalue .head 0x5598272fffb0
| | | | `-MemberExpr 0x559827300918 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| | | |   `-ImplicitCastExpr 0x559827300900 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5598273008d8 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x559827300728 'list' 'sys_dlist_t *'
| | | `-CStyleCastExpr 0x559827300a40 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| | |   `-ImplicitCastExpr 0x559827300a28 <col:30> 'sys_dlist_t *' <LValueToRValue>
| | |     `-DeclRefExpr 0x5598273009c0 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x559827300728 'list' 'sys_dlist_t *'
| | `-BinaryOperator 0x559827300bd0 <line:195:2, col:30> 'struct _dnode *' '='
| |   |-MemberExpr 0x559827300b20 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x559827300278
| |   | `-MemberExpr 0x559827300ad0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| |   |   `-ImplicitCastExpr 0x559827300ab8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x559827300a90 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x559827300728 'list' 'sys_dlist_t *'
| |   `-CStyleCastExpr 0x559827300ba8 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| |     `-ImplicitCastExpr 0x559827300b90 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x559827300b58 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x559827300728 'list' 'sys_dlist_t *'
| `-FullComment 0x55982744dc90 <line:185:3, line:189:14>
|   |-ParagraphComment 0x55982744d9f0 <line:185:3>
|   | `-TextComment 0x55982744d9c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982744da10 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55982744da70 <col:10, col:44>
|   |   `-TextComment 0x55982744da40 <col:10, col:44> Text=" initialize list to its empty state"
|   |-ParagraphComment 0x55982744dac0 <line:187:3>
|   | `-TextComment 0x55982744da90 <col:3> Text=" "
|   |-ParamCommandComment 0x55982744dae0 <col:4, col:37> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55982744db70 <col:15, col:37>
|   |   `-TextComment 0x55982744db40 <col:15, col:37> Text=" the doubly-linked list"
|   |-ParagraphComment 0x55982744dbc0 <line:189:3>
|   | `-TextComment 0x55982744db90 <col:3> Text=" "
|   `-BlockCommandComment 0x55982744dbe0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55982744dc40 <col:11, col:14>
|       `-TextComment 0x55982744dc10 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559827300d20 <line:208:1, line:212:1> line:208:20 used sys_dnode_init 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559827300c58 <col:35, col:48> col:48 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559827304738 <line:209:1, line:212:1>
| | |-BinaryOperator 0x559827304560 <line:210:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| | | |-MemberExpr 0x559827304490 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:210:2, col:8> 'struct _dnode *' lvalue .next 0x559827300020
| | | | `-MemberExpr 0x559827304440 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| | | |   `-ImplicitCastExpr 0x559827300df0 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x559827300dc8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x559827300c58 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x559827304548 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| | |   `-ParenExpr 0x559827304528 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x559827304500 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x5598273044c8 <col:23> 'int' 0
| | `-BinaryOperator 0x5598273046e8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| |   |-MemberExpr 0x559827304618 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, col:8> 'struct _dnode *' lvalue .prev 0x5598273002e8
| |   | `-MemberExpr 0x5598273045c8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| |   |   `-ImplicitCastExpr 0x5598273045b0 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x559827304588 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x559827300c58 'node' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x5598273046d0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     `-ParenExpr 0x5598273046b0 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x559827304688 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x559827304650 <col:23> 'int' 0
| `-FullComment 0x55982744dfd0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:201:3, line:205:14>
|   |-ParagraphComment 0x55982744dd30 <line:201:3>
|   | `-TextComment 0x55982744dd00 <col:3> Text=" "
|   |-BlockCommandComment 0x55982744dd50 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x55982744ddb0 <col:10, col:57>
|   |   `-TextComment 0x55982744dd80 <col:10, col:57> Text=" initialize node to its state when not in a list"
|   |-ParagraphComment 0x55982744de00 <line:203:3>
|   | `-TextComment 0x55982744ddd0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982744de20 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55982744deb0 <col:15, col:23>
|   |   `-TextComment 0x55982744de80 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x55982744df00 <line:205:3>
|   | `-TextComment 0x55982744ded0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982744df20 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55982744df80 <col:11, col:14>
|       `-TextComment 0x55982744df50 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273048d0 <line:222:1, line:225:1> line:222:20 sys_dnode_is_linked 'bool (const sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5598273047c8 <col:40, col:59> col:59 used node 'const sys_dnode_t *'
| |-CompoundStmt 0x559827304b78 <line:223:1, line:225:1>
| | `-ReturnStmt 0x559827304b30 <line:224:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ImplicitCastExpr 0x559827304b18 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x559827304af0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       |-ImplicitCastExpr 0x559827304ac0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x559827304a08 <col:9, col:15> 'struct _dnode *const' lvalue .next 0x559827300020
| |       |   `-MemberExpr 0x5598273049b8 <col:9, col:15> 'const union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| |       |     `-ImplicitCastExpr 0x5598273049a0 <col:9> 'const sys_dnode_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x559827304978 <col:9> 'const sys_dnode_t *' lvalue ParmVar 0x5598273047c8 'node' 'const sys_dnode_t *'
| |       `-ImplicitCastExpr 0x559827304ad8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <BitCast>
| |         `-ParenExpr 0x559827304aa0 <col:14, col:24> 'void *'
| |           `-CStyleCastExpr 0x559827304a78 <col:15, col:23> 'void *' <NullToPointer>
| |             `-IntegerLiteral 0x559827304a40 <col:23> 'int' 0
| `-FullComment 0x55982744e310 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:215:3, line:219:65>
|   |-ParagraphComment 0x55982744e070 <line:215:3>
|   | `-TextComment 0x55982744e040 <col:3> Text=" "
|   |-BlockCommandComment 0x55982744e090 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55982744e0f0 <col:10, col:49>
|   |   `-TextComment 0x55982744e0c0 <col:10, col:49> Text=" check if a node is a member of any list"
|   |-ParagraphComment 0x55982744e140 <line:217:3>
|   | `-TextComment 0x55982744e110 <col:3> Text=" "
|   |-ParamCommandComment 0x55982744e160 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55982744e1f0 <col:15, col:23>
|   |   `-TextComment 0x55982744e1c0 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x55982744e240 <line:219:3>
|   | `-TextComment 0x55982744e210 <col:3> Text=" "
|   `-BlockCommandComment 0x55982744e260 <col:4, col:65> Name="return"
|     `-ParagraphComment 0x55982744e2c0 <col:11, col:65>
|       `-TextComment 0x55982744e290 <col:11, col:65> Text=" true if node is linked into a list, false if it is not"
|-FunctionDecl 0x559827304d20 <line:236:1, line:239:1> line:236:20 sys_dlist_is_head 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559827304ba0 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x559827304c10 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559827304f78 <line:237:1, line:239:1>
| | `-ReturnStmt 0x559827304f30 <line:238:2, col:23>
| |   `-ImplicitCastExpr 0x559827304f18 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x559827304ef0 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x559827304ec0 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x559827304e60 <col:9, col:15> 'struct _dnode *' lvalue .head 0x5598272fffb0
| |       |   `-MemberExpr 0x559827304e10 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| |       |     `-ImplicitCastExpr 0x559827304df8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x559827304dd0 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x559827304ba0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x559827304ed8 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x559827304e98 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x559827304c10 'node' 'sys_dnode_t *'
| `-FullComment 0x55982744e730 <line:228:3, line:233:52>
|   |-ParagraphComment 0x55982744e3b0 <line:228:3>
|   | `-TextComment 0x55982744e380 <col:3> Text=" "
|   |-BlockCommandComment 0x55982744e3d0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55982744e430 <col:10, col:44>
|   |   `-TextComment 0x55982744e400 <col:10, col:44> Text=" check if a node is the list's head"
|   |-ParagraphComment 0x55982744e480 <line:230:3>
|   | `-TextComment 0x55982744e450 <col:3> Text=" "
|   |-ParamCommandComment 0x55982744e4a0 <col:4, line:231:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55982744e550 <line:230:15, line:231:3>
|   |   |-TextComment 0x55982744e500 <line:230:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55982744e520 <line:231:3> Text=" "
|   |-ParamCommandComment 0x55982744e570 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55982744e600 <col:15, col:32>
|   |   `-TextComment 0x55982744e5d0 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x55982744e650 <line:233:3>
|   | `-TextComment 0x55982744e620 <col:3> Text=" "
|   `-BlockCommandComment 0x55982744e670 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x55982744e6d0 <col:11, col:52>
|       `-TextComment 0x55982744e6a0 <col:11, col:52> Text=" true if node is the head, false otherwise"
|-FunctionDecl 0x5598273050a0 <line:250:1, line:253:1> line:250:20 sys_dlist_is_tail 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559827304fa0 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x559827305010 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5598273052f8 <line:251:1, line:253:1>
| | `-ReturnStmt 0x5598273052b0 <line:252:2, col:23>
| |   `-ImplicitCastExpr 0x559827305298 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x559827305270 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x559827305240 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x5598273051e0 <col:9, col:15> 'struct _dnode *' lvalue .tail 0x559827300278
| |       |   `-MemberExpr 0x559827305190 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| |       |     `-ImplicitCastExpr 0x559827305178 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x559827305150 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x559827304fa0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x559827305258 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x559827305218 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x559827305010 'node' 'sys_dnode_t *'
| `-FullComment 0x55982744fb90 <line:242:3, line:247:52>
|   |-ParagraphComment 0x55982744e7d0 <line:242:3>
|   | `-TextComment 0x55982744e7a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982744e7f0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55982744e850 <col:10, col:44>
|   |   `-TextComment 0x55982744e820 <col:10, col:44> Text=" check if a node is the list's tail"
|   |-ParagraphComment 0x55982744e8a0 <line:244:3>
|   | `-TextComment 0x55982744e870 <col:3> Text=" "
|   |-ParamCommandComment 0x55982744e8c0 <col:4, line:245:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55982744e970 <line:244:15, line:245:3>
|   |   |-TextComment 0x55982744e920 <line:244:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55982744e940 <line:245:3> Text=" "
|   |-ParamCommandComment 0x55982744e990 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55982744ea20 <col:15, col:32>
|   |   `-TextComment 0x55982744e9f0 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x55982744ea70 <line:247:3>
|   | `-TextComment 0x55982744ea40 <col:3> Text=" "
|   `-BlockCommandComment 0x55982744ea90 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x55982744eaf0 <col:11, col:52>
|       `-TextComment 0x55982744eac0 <col:11, col:52> Text=" true if node is the tail, false otherwise"
|-FunctionDecl 0x559827305860 <line:263:1, line:266:1> line:263:20 used sys_dlist_is_empty 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x559827305320 <col:39, col:52> col:52 used list 'sys_dlist_t *'
| |-CompoundStmt 0x559827305aa8 <line:264:1, line:266:1>
| | `-ReturnStmt 0x559827305a68 <line:265:2, col:23>
| |   `-ImplicitCastExpr 0x559827305a50 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x559827305a28 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x5598273059f8 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x559827305998 <col:9, col:15> 'struct _dnode *' lvalue .head 0x5598272fffb0
| |       |   `-MemberExpr 0x559827305948 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| |       |     `-ImplicitCastExpr 0x559827305930 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x559827305908 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x559827305320 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x559827305a10 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5598273059d0 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x559827305320 'list' 'sys_dlist_t *'
| `-FullComment 0x55982744fed0 <line:256:3, line:260:41>
|   |-ParagraphComment 0x55982744fc30 <line:256:3>
|   | `-TextComment 0x55982744fc00 <col:3> Text=" "
|   |-BlockCommandComment 0x55982744fc50 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55982744fcb0 <col:10, col:36>
|   |   `-TextComment 0x55982744fc80 <col:10, col:36> Text=" check if the list is empty"
|   |-ParagraphComment 0x55982744fd00 <line:258:3>
|   | `-TextComment 0x55982744fcd0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982744fd20 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55982744fdb0 <col:15, col:51>
|   |   `-TextComment 0x55982744fd80 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55982744fe00 <line:260:3>
|   | `-TextComment 0x55982744fdd0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982744fe20 <col:4, col:41> Name="return"
|     `-ParagraphComment 0x55982744fe80 <col:11, col:41>
|       `-TextComment 0x55982744fe50 <col:11, col:41> Text=" true if empty, false otherwise"
|-FunctionDecl 0x559827305b58 <line:278:1, line:281:1> line:278:20 sys_dlist_has_multiple_nodes 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x559827305ad0 <col:49, col:62> col:62 used list 'sys_dlist_t *'
| |-CompoundStmt 0x559827305e48 <line:279:1, line:281:1>
| | `-ReturnStmt 0x559827305e00 <line:280:2, col:29>
| |   `-ImplicitCastExpr 0x559827305de8 <col:9, col:29> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x559827305dc0 <col:9, col:29> 'int' '!='
| |       |-ImplicitCastExpr 0x559827305d90 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x559827305c90 <col:9, col:15> 'struct _dnode *' lvalue .head 0x5598272fffb0
| |       |   `-MemberExpr 0x559827305c40 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| |       |     `-ImplicitCastExpr 0x559827305c28 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x559827305c00 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x559827305ad0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x559827305da8 <col:23, col:29> 'struct _dnode *' <LValueToRValue>
| |         `-MemberExpr 0x559827305d58 <col:23, col:29> 'struct _dnode *' lvalue .tail 0x559827300278
| |           `-MemberExpr 0x559827305d08 <col:23, col:29> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| |             `-ImplicitCastExpr 0x559827305cf0 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |               `-DeclRefExpr 0x559827305cc8 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x559827305ad0 'list' 'sys_dlist_t *'
| `-FullComment 0x559827450270 <line:269:3, line:275:50>
|   |-ParagraphComment 0x55982744ff70 <line:269:3>
|   | `-TextComment 0x55982744ff40 <col:3> Text=" "
|   |-BlockCommandComment 0x55982744ff90 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x55982744fff0 <col:10, col:45>
|   |   `-TextComment 0x55982744ffc0 <col:10, col:45> Text=" check if more than one node present"
|   |-ParagraphComment 0x559827450040 <line:271:3, col:62>
|   | `-TextComment 0x559827450010 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x559827450090 <line:273:3>
|   | `-TextComment 0x559827450060 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274500b0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827450140 <col:15, col:51>
|   |   `-TextComment 0x559827450110 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x559827450190 <line:275:3>
|   | `-TextComment 0x559827450160 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274501b0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x559827450210 <col:11, col:50>
|       `-TextComment 0x5598274501e0 <col:11, col:50> Text=" true if multiple nodes, false otherwise"
|-FunctionDecl 0x559827305f70 <line:291:1, line:294:1> line:291:28 used sys_dlist_peek_head 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x559827305e70 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x559827306328 <line:292:1, line:294:1>
| | `-ReturnStmt 0x5598273062e8 <line:293:2, col:49>
| |   `-ConditionalOperator 0x5598273062b8 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x559827306270 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x5598273060e0 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x5598273060c8 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x559827306018 <col:9> 'bool (sys_dlist_t *)' Function 0x559827305860 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x559827306110 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x559827306040 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x559827305e70 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x5598273062a0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x559827306188 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x559827306160 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x559827306128 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x559827306288 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:293:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x559827306238 <col:43, col:49> 'struct _dnode *' lvalue .head 0x5598272fffb0
| |         `-MemberExpr 0x5598273061e8 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| |           `-ImplicitCastExpr 0x5598273061d0 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5598273061a8 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x559827305e70 'list' 'sys_dlist_t *'
| `-FullComment 0x5598274505b0 <line:284:3, line:288:63>
|   |-ParagraphComment 0x559827450310 <line:284:3>
|   | `-TextComment 0x5598274502e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827450330 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x559827450390 <col:10, col:54>
|   |   `-TextComment 0x559827450360 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x5598274503e0 <line:286:3>
|   | `-TextComment 0x5598274503b0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827450400 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827450490 <col:15, col:51>
|   |   `-TextComment 0x559827450460 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5598274504e0 <line:288:3>
|   | `-TextComment 0x5598274504b0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827450500 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x559827450560 <col:11, col:63>
|       `-TextComment 0x559827450530 <col:11, col:63> Text=" a pointer to the head element, NULL if list is empty"
|-FunctionDecl 0x5598273063d8 <line:306:1, line:309:1> line:306:28 sys_dlist_peek_head_not_empty 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x559827306350 <col:58, col:71> col:71 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5598273065a8 <line:307:1, line:309:1>
| | `-ReturnStmt 0x559827306560 <line:308:2, col:15>
| |   `-ImplicitCastExpr 0x559827306548 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |     `-MemberExpr 0x559827306510 <col:9, col:15> 'struct _dnode *' lvalue .head 0x5598272fffb0
| |       `-MemberExpr 0x5598273064c0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| |         `-ImplicitCastExpr 0x5598273064a8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |           `-DeclRefExpr 0x559827306480 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x559827306350 'list' 'sys_dlist_t *'
| `-FullComment 0x559827450950 <line:297:3, line:303:40>
|   |-ParagraphComment 0x559827450650 <line:297:3>
|   | `-TextComment 0x559827450620 <col:3> Text=" "
|   |-BlockCommandComment 0x559827450670 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5598274506d0 <col:10, col:54>
|   |   `-TextComment 0x5598274506a0 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x559827450720 <line:299:3, col:42>
|   | `-TextComment 0x5598274506f0 <col:3, col:42> Text=" The list must be known to be non-empty."
|   |-ParagraphComment 0x559827450770 <line:301:3>
|   | `-TextComment 0x559827450740 <col:3> Text=" "
|   |-ParamCommandComment 0x559827450790 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827450820 <col:15, col:51>
|   |   `-TextComment 0x5598274507f0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x559827450870 <line:303:3>
|   | `-TextComment 0x559827450840 <col:3> Text=" "
|   `-BlockCommandComment 0x559827450890 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x5598274508f0 <col:11, col:40>
|       `-TextComment 0x5598274508c0 <col:11, col:40> Text=" a pointer to the head element"
|-FunctionDecl 0x559827306750 <line:322:1, line:326:1> line:322:28 used sys_dlist_peek_next_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5598273065d0 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x559827306640 <line:323:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559827306b78 <line:324:1, line:326:1>
| | `-ReturnStmt 0x559827306b30 <line:325:2, col:45>
| |   `-ConditionalOperator 0x559827306b00 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x559827306968 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x559827306940 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x559827306910 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x559827306800 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x559827306640 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x559827306928 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x5598273068d8 <col:18, col:24> 'struct _dnode *' lvalue .tail 0x559827300278
| |     |       `-MemberExpr 0x559827306888 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| |     |         `-ImplicitCastExpr 0x559827306870 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x559827306828 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x5598273065d0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x559827306ae8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x5598273069e8 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x5598273069c0 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x559827306988 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x559827306ad0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:325:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x559827306a98 <col:39, col:45> 'struct _dnode *' lvalue .next 0x559827300020
| |         `-MemberExpr 0x559827306a48 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| |           `-ImplicitCastExpr 0x559827306a30 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x559827306a08 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x559827306640 'node' 'sys_dnode_t *'
| `-FullComment 0x559827450dc0 <line:312:3, line:319:78>
|   |-ParagraphComment 0x5598274509f0 <line:312:3>
|   | `-TextComment 0x5598274509c0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827450a10 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x559827450a70 <col:10, col:72>
|   |   `-TextComment 0x559827450a40 <col:10, col:72> Text=" get a reference to the next item in the list, node is not NULL"
|   |-ParagraphComment 0x559827450ac0 <line:314:3, col:69>
|   | `-TextComment 0x559827450a90 <col:3, col:69> Text=" Faster than sys_dlist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x559827450b10 <line:316:3>
|   | `-TextComment 0x559827450ae0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827450b30 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827450be0 <line:316:15, line:317:3>
|   |   |-TextComment 0x559827450b90 <line:316:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x559827450bb0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x559827450c00 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559827450c90 <col:15, col:70>
|   |   `-TextComment 0x559827450c60 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x559827450ce0 <line:319:3>
|   | `-TextComment 0x559827450cb0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827450d00 <col:4, col:78> Name="return"
|     `-ParagraphComment 0x559827450d60 <col:11, col:78>
|       `-TextComment 0x559827450d30 <col:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|-FunctionDecl 0x559827306ca0 <line:338:1, line:342:1> line:338:28 used sys_dlist_peek_next 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559827306ba0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x559827306c10 <line:339:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5598273070d8 <line:340:1, line:342:1>
| | `-ReturnStmt 0x559827307090 <line:341:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x559827307060 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x559827306e50 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, col:22> 'int'
| |     | `-BinaryOperator 0x559827306e28 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x559827306df8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x559827306d50 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x559827306c10 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x559827306e10 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x559827306dd8 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x559827306db0 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x559827306d78 <col:23> 'int' 0
| |     |-CallExpr 0x559827306f60 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x559827306f48 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x559827306e70 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x559827306750 'sys_dlist_peek_next_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x559827306f98 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x559827306e98 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x559827306ba0 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x559827306fb0 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x559827306ec0 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x559827306c10 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x559827307048 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x559827307028 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x559827307000 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x559827306fc8 <col:23> 'int' 0
| `-FullComment 0x559827451200 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:329:3, line:335:68>
|   |-ParagraphComment 0x559827450e60 <line:329:3>
|   | `-TextComment 0x559827450e30 <col:3> Text=" "
|   |-BlockCommandComment 0x559827450e80 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x559827450ee0 <col:10, col:54>
|   |   `-TextComment 0x559827450eb0 <col:10, col:54> Text=" get a reference to the next item in the list"
|   |-ParagraphComment 0x559827450f30 <line:331:3>
|   | `-TextComment 0x559827450f00 <col:3> Text=" "
|   |-ParamCommandComment 0x559827450f50 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827451000 <line:331:15, line:332:3>
|   |   |-TextComment 0x559827450fb0 <line:331:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x559827450fd0 <line:332:3> Text=" "
|   |-ParamCommandComment 0x559827451020 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5598274510b0 <col:15, col:70>
|   |   `-TextComment 0x559827451080 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x559827451100 <line:334:3>
|   | `-TextComment 0x5598274510d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827451120 <col:4, line:335:68> Name="return"
|     `-ParagraphComment 0x5598274511a0 <line:334:11, line:335:68>
|       |-TextComment 0x559827451150 <line:334:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|       `-TextComment 0x559827451170 <line:335:3, col:68> Text=" or NULL (when node comes from reading the head of an empty list)."
|-FunctionDecl 0x559827307200 <line:356:1, line:360:1> line:356:28 used sys_dlist_peek_prev_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559827307100 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x559827307170 <line:357:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559827307608 <line:358:1, line:360:1>
| | `-ReturnStmt 0x5598273075c0 <line:359:2, col:45>
| |   `-ConditionalOperator 0x559827307590 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x5598273073f8 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x5598273073d0 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x5598273073a0 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5598273072b0 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x559827307170 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x5598273073b8 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x559827307368 <col:18, col:24> 'struct _dnode *' lvalue .head 0x5598272fffb0
| |     |       `-MemberExpr 0x559827307318 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| |     |         `-ImplicitCastExpr 0x559827307300 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x5598273072d8 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x559827307100 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x559827307578 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x559827307478 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x559827307450 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x559827307418 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x559827307560 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:359:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x559827307528 <col:39, col:45> 'struct _dnode *' lvalue .prev 0x5598273002e8
| |         `-MemberExpr 0x5598273074d8 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| |           `-ImplicitCastExpr 0x5598273074c0 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x559827307498 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x559827307170 'node' 'sys_dnode_t *'
| `-FullComment 0x559827451690 <line:345:3, line:353:10>
|   |-ParagraphComment 0x5598274512a0 <line:345:3>
|   | `-TextComment 0x559827451270 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274512c0 <col:4, col:76> Name="brief"
|   | `-ParagraphComment 0x559827451320 <col:10, col:76>
|   |   `-TextComment 0x5598274512f0 <col:10, col:76> Text=" get a reference to the previous item in the list, node is not NULL"
|   |-ParagraphComment 0x559827451370 <line:347:3, col:69>
|   | `-TextComment 0x559827451340 <col:3, col:69> Text=" Faster than sys_dlist_peek_prev() if node is known not to be NULL."
|   |-ParagraphComment 0x5598274513c0 <line:349:3>
|   | `-TextComment 0x559827451390 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274513e0 <col:4, line:350:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827451490 <line:349:15, line:350:3>
|   |   |-TextComment 0x559827451440 <line:349:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x559827451460 <line:350:3> Text=" "
|   |-ParamCommandComment 0x5598274514b0 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559827451540 <col:15, col:74>
|   |   `-TextComment 0x559827451510 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x559827451590 <line:352:3>
|   | `-TextComment 0x559827451560 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274515b0 <col:4, line:353:10> Name="return"
|     `-ParagraphComment 0x559827451630 <line:352:11, line:353:10>
|       |-TextComment 0x5598274515e0 <line:352:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       `-TextComment 0x559827451600 <line:353:3, col:10> Text="	   tail"
|-FunctionDecl 0x559827307730 <line:373:1, line:377:1> line:373:28 sys_dlist_peek_prev 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559827307630 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5598273076a0 <line:374:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559827309308 <line:375:1, line:377:1>
| | `-ReturnStmt 0x5598273092c8 <line:376:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x559827309298 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x5598273090e8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, col:22> 'int'
| |     | `-BinaryOperator 0x5598273090c0 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x559827309090 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5598273077e0 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x5598273076a0 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x5598273090a8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x559827309070 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x559827307840 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x559827307808 <col:23> 'int' 0
| |     |-CallExpr 0x559827309198 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x559827309180 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x559827309108 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x559827307200 'sys_dlist_peek_prev_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x5598273091d0 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x559827309130 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x559827307630 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x5598273091e8 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x559827309158 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x5598273076a0 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x559827309280 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x559827309260 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x559827309238 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x559827309200 <col:23> 'int' 0
| `-FullComment 0x559827451b00 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:363:3, line:370:13>
|   |-ParagraphComment 0x559827451730 <line:363:3>
|   | `-TextComment 0x559827451700 <col:3> Text=" "
|   |-BlockCommandComment 0x559827451750 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x5598274517b0 <col:10, col:58>
|   |   `-TextComment 0x559827451780 <col:10, col:58> Text=" get a reference to the previous item in the list"
|   |-ParagraphComment 0x559827451800 <line:365:3>
|   | `-TextComment 0x5598274517d0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827451820 <col:4, line:366:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5598274518d0 <line:365:15, line:366:3>
|   |   |-TextComment 0x559827451880 <line:365:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5598274518a0 <line:366:3> Text=" "
|   |-ParamCommandComment 0x5598274518f0 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559827451980 <col:15, col:74>
|   |   `-TextComment 0x559827451950 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x5598274519d0 <line:368:3>
|   | `-TextComment 0x5598274519a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274519f0 <col:4, line:370:13> Name="return"
|     `-ParagraphComment 0x559827451aa0 <line:368:11, line:370:13>
|       |-TextComment 0x559827451a20 <line:368:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       |-TextComment 0x559827451a40 <line:369:3, col:70> Text=" 	   tail or NULL (when node comes from reading the head of an empty"
|       `-TextComment 0x559827451a60 <line:370:3, col:13> Text=" 	   list)."
|-FunctionDecl 0x5598273093b8 <line:387:1, line:390:1> line:387:28 sys_dlist_peek_tail 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x559827309330 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x559827309718 <line:388:1, line:390:1>
| | `-ReturnStmt 0x5598273096d0 <line:389:2, col:49>
| |   `-ConditionalOperator 0x5598273096a0 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x559827309658 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x5598273094c8 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x5598273094b0 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x559827309460 <col:9> 'bool (sys_dlist_t *)' Function 0x559827305860 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x5598273094f8 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x559827309488 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x559827309330 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x559827309688 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x559827309570 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x559827309548 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x559827309510 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x559827309670 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:389:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x559827309620 <col:43, col:49> 'struct _dnode *' lvalue .tail 0x559827300278
| |         `-MemberExpr 0x5598273095d0 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| |           `-ImplicitCastExpr 0x5598273095b8 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x559827309590 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x559827309330 'list' 'sys_dlist_t *'
| `-FullComment 0x559827451e70 <line:380:3, line:384:63>
|   |-ParagraphComment 0x559827451bd0 <line:380:3>
|   | `-TextComment 0x559827451ba0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827451bf0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x559827451c50 <col:10, col:54>
|   |   `-TextComment 0x559827451c20 <col:10, col:54> Text=" get a reference to the tail item in the list"
|   |-ParagraphComment 0x559827451ca0 <line:382:3>
|   | `-TextComment 0x559827451c70 <col:3> Text=" "
|   |-ParamCommandComment 0x559827451cc0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827451d50 <col:15, col:51>
|   |   `-TextComment 0x559827451d20 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x559827451da0 <line:384:3>
|   | `-TextComment 0x559827451d70 <col:3> Text=" "
|   `-BlockCommandComment 0x559827451dc0 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x559827451e20 <col:11, col:63>
|       `-TextComment 0x559827451df0 <col:11, col:63> Text=" a pointer to the tail element, NULL if list is empty"
|-FunctionDecl 0x5598273098c0 <line:403:1, line:410:1> line:403:20 used sys_dlist_append 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559827309740 <col:37, col:50> col:50 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5598273097b0 <col:56, col:69> col:69 used node 'sys_dnode_t *'
| |-CompoundStmt 0x559827309f98 <line:404:1, line:410:1>
| | |-BinaryOperator 0x559827309a78 <line:405:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x559827309a00 <col:2, col:8> 'struct _dnode *' lvalue .next 0x559827300020
| | | | `-MemberExpr 0x5598273099b0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| | | |   `-ImplicitCastExpr 0x559827309998 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x559827309970 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5598273097b0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x559827309a60 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x559827309a38 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x559827309740 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x559827309c48 <line:406:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x559827309b30 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x5598273002e8
| | | | `-MemberExpr 0x559827309ae0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| | | |   `-ImplicitCastExpr 0x559827309ac8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x559827309aa0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5598273097b0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x559827309c30 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x559827309bf8 <col:15, col:21> 'struct _dnode *' lvalue .tail 0x559827300278
| | |     `-MemberExpr 0x559827309ba8 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| | |       `-ImplicitCastExpr 0x559827309b90 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x559827309b68 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x559827309740 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x559827309e18 <line:408:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x559827309da0 <col:2, col:14> 'struct _dnode *' lvalue .next 0x559827300020
| | | | `-MemberExpr 0x559827309d50 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| | | |   `-ImplicitCastExpr 0x559827309d38 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x559827309d00 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x559827300278
| | | |       `-MemberExpr 0x559827309cb0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| | | |         `-ImplicitCastExpr 0x559827309c98 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x559827309c70 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x559827309740 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x559827309e00 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x559827309dd8 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x5598273097b0 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x559827309f48 <line:409:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x559827309ed0 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x559827300278
| |   | `-MemberExpr 0x559827309e80 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| |   |   `-ImplicitCastExpr 0x559827309e68 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x559827309e40 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x559827309740 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x559827309f30 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x559827309f08 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x5598273097b0 'node' 'sys_dnode_t *'
| `-FullComment 0x5598274522e0 <line:393:3, line:400:14>
|   |-ParagraphComment 0x559827451f10 <line:393:3>
|   | `-TextComment 0x559827451ee0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827451f30 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x559827451f90 <col:10, col:34>
|   |   `-TextComment 0x559827451f60 <col:10, col:34> Text=" add node to tail of list"
|   |-ParagraphComment 0x559827451fe0 <line:395:3, col:62>
|   | `-TextComment 0x559827451fb0 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x559827452030 <line:397:3>
|   | `-TextComment 0x559827452000 <col:3> Text=" "
|   |-ParamCommandComment 0x559827452050 <col:4, line:398:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827452100 <line:397:15, line:398:3>
|   |   |-TextComment 0x5598274520b0 <line:397:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5598274520d0 <line:398:3> Text=" "
|   |-ParamCommandComment 0x559827452120 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5598274521b0 <col:15, col:36>
|   |   `-TextComment 0x559827452180 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x559827452200 <line:400:3>
|   | `-TextComment 0x5598274521d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827452220 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827452280 <col:11, col:14>
|       `-TextComment 0x559827452250 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55982730a110 <line:423:1, line:430:1> line:423:20 sys_dlist_prepend 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559827309fd8 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55982730a080 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55982730a7e8 <line:424:1, line:430:1>
| | |-BinaryOperator 0x55982730a368 <line:425:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x55982730a250 <col:2, col:8> 'struct _dnode *' lvalue .next 0x559827300020
| | | | `-MemberExpr 0x55982730a200 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| | | |   `-ImplicitCastExpr 0x55982730a1e8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55982730a1c0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55982730a080 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55982730a350 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55982730a318 <col:15, col:21> 'struct _dnode *' lvalue .head 0x5598272fffb0
| | |     `-MemberExpr 0x55982730a2c8 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| | |       `-ImplicitCastExpr 0x55982730a2b0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55982730a288 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x559827309fd8 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x55982730a498 <line:426:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x55982730a420 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x5598273002e8
| | | | `-MemberExpr 0x55982730a3d0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| | | |   `-ImplicitCastExpr 0x55982730a3b8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55982730a390 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55982730a080 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55982730a480 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55982730a458 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x559827309fd8 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x55982730a668 <line:428:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x55982730a5f0 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x5598273002e8
| | | | `-MemberExpr 0x55982730a5a0 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| | | |   `-ImplicitCastExpr 0x55982730a588 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55982730a550 <col:2, col:8> 'struct _dnode *' lvalue .head 0x5598272fffb0
| | | |       `-MemberExpr 0x55982730a500 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| | | |         `-ImplicitCastExpr 0x55982730a4e8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55982730a4c0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x559827309fd8 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x55982730a650 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55982730a628 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x55982730a080 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x55982730a798 <line:429:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x55982730a720 <col:2, col:8> 'struct _dnode *' lvalue .head 0x5598272fffb0
| |   | `-MemberExpr 0x55982730a6d0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| |   |   `-ImplicitCastExpr 0x55982730a6b8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55982730a690 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x559827309fd8 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x55982730a780 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55982730a758 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x55982730a080 'node' 'sys_dnode_t *'
| `-FullComment 0x559827452750 <line:413:3, line:420:14>
|   |-ParagraphComment 0x559827452380 <line:413:3>
|   | `-TextComment 0x559827452350 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274523a0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x559827452400 <col:10, col:34>
|   |   `-TextComment 0x5598274523d0 <col:10, col:34> Text=" add node to head of list"
|   |-ParagraphComment 0x559827452450 <line:415:3, col:62>
|   | `-TextComment 0x559827452420 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5598274524a0 <line:417:3>
|   | `-TextComment 0x559827452470 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274524c0 <col:4, line:418:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827452570 <line:417:15, line:418:3>
|   |   |-TextComment 0x559827452520 <line:417:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x559827452540 <line:418:3> Text=" "
|   |-ParamCommandComment 0x559827452590 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559827452620 <col:15, col:36>
|   |   `-TextComment 0x5598274525f0 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x559827452670 <line:420:3>
|   | `-TextComment 0x559827452640 <col:3> Text=" "
|   `-BlockCommandComment 0x559827452690 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5598274526f0 <col:11, col:14>
|       `-TextComment 0x5598274526c0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55982730a970 <line:440:1, line:446:1> line:440:20 used sys_dlist_insert 'void (sys_dnode_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55982730a828 <col:37, col:50> col:50 used successor 'sys_dnode_t *'
| |-ParmVarDecl 0x55982730a898 <col:61, col:74> col:74 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55982730b048 <line:441:1, line:446:1>
| | |-BinaryOperator 0x55982730abc8 <line:442:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x55982730aab0 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x5598273002e8
| | | | `-MemberExpr 0x55982730aa60 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| | | |   `-ImplicitCastExpr 0x55982730aa48 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55982730aa20 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55982730a898 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55982730abb0 <col:15, col:26> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55982730ab78 <col:15, col:26> 'struct _dnode *' lvalue .prev 0x5598273002e8
| | |     `-MemberExpr 0x55982730ab28 <col:15, col:26> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| | |       `-ImplicitCastExpr 0x55982730ab10 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55982730aae8 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x55982730a828 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x55982730acf8 <line:443:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x55982730ac80 <col:2, col:8> 'struct _dnode *' lvalue .next 0x559827300020
| | | | `-MemberExpr 0x55982730ac30 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| | | |   `-ImplicitCastExpr 0x55982730ac18 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55982730abf0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55982730a898 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55982730ace0 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55982730acb8 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x55982730a828 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x55982730aec8 <line:444:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x55982730ae50 <col:2, col:19> 'struct _dnode *' lvalue .next 0x559827300020
| | | | `-MemberExpr 0x55982730ae00 <col:2, col:19> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| | | |   `-ImplicitCastExpr 0x55982730ade8 <col:2, col:13> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55982730adb0 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x5598273002e8
| | | |       `-MemberExpr 0x55982730ad60 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| | | |         `-ImplicitCastExpr 0x55982730ad48 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55982730ad20 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55982730a828 'successor' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55982730aeb0 <col:26> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55982730ae88 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x55982730a898 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x55982730aff8 <line:445:2, col:20> 'struct _dnode *' '='
| |   |-MemberExpr 0x55982730af80 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x5598273002e8
| |   | `-MemberExpr 0x55982730af30 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| |   |   `-ImplicitCastExpr 0x55982730af18 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55982730aef0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55982730a828 'successor' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x55982730afe0 <col:20> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55982730afb8 <col:20> 'sys_dnode_t *' lvalue ParmVar 0x55982730a898 'node' 'sys_dnode_t *'
| `-FullComment 0x559827452ae0 <line:433:3, line:438:36>
|   |-ParagraphComment 0x5598274527f0 <line:433:3>
|   | `-TextComment 0x5598274527c0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827452810 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x559827452870 <col:10, col:35>
|   |   `-TextComment 0x559827452840 <col:10, col:35> Text=" Insert a node into a list"
|   |-ParagraphComment 0x5598274528c0 <line:435:3, col:52>
|   | `-TextComment 0x559827452890 <col:3, col:52> Text=" Insert a node before a specified node in a dlist."
|   |-ParagraphComment 0x559827452910 <line:437:3>
|   | `-TextComment 0x5598274528e0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827452930 <col:4, line:438:3> [in] implicitly Param="successor" ParamIndex=0
|   | `-ParagraphComment 0x5598274529e0 <line:437:20, line:438:3>
|   |   |-TextComment 0x559827452990 <line:437:20, col:69> Text=" the position before which "node" will be inserted"
|   |   `-TextComment 0x5598274529b0 <line:438:3> Text=" "
|   `-ParamCommandComment 0x559827452a00 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x559827452a90 <col:15, col:36>
|       `-TextComment 0x559827452a60 <col:15, col:36> Text=" the element to insert"
|-FunctionDecl 0x55982730b570 <line:465:1, line:482:1> line:465:20 sys_dlist_insert_at 'void (sys_dlist_t *, sys_dnode_t *, int (*)(sys_dnode_t *, void *), void *)' static inline
| |-ParmVarDecl 0x55982730b0a0 <col:40, col:53> col:53 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55982730b110 <col:59, col:72> col:72 used node 'sys_dnode_t *'
| |-ParmVarDecl 0x55982730b3b0 <line:466:2, col:43> col:8 used cond 'int (*)(sys_dnode_t *, void *)'
| |-ParmVarDecl 0x55982730b428 <col:46, col:52> col:52 used data 'void *'
| |-CompoundStmt 0x559827311238 <line:467:1, line:482:1>
| | `-IfStmt 0x5598273111d0 <line:468:2, line:481:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-CallExpr 0x55982730b698 <line:468:6, col:29> 'bool'
| |   | |-ImplicitCastExpr 0x55982730b680 <col:6> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x55982730b630 <col:6> 'bool (sys_dlist_t *)' Function 0x559827305860 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |   | `-ImplicitCastExpr 0x55982730b6c8 <col:25> 'sys_dlist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55982730b658 <col:25> 'sys_dlist_t *' lvalue ParmVar 0x55982730b0a0 'list' 'sys_dlist_t *'
| |   |-CompoundStmt 0x55982730b838 <col:32, line:470:2>
| |   | `-CallExpr 0x55982730b7d0 <line:469:3, col:30> 'void'
| |   |   |-ImplicitCastExpr 0x55982730b7b8 <col:3> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x55982730b6e0 <col:3> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x5598273098c0 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |   |   |-ImplicitCastExpr 0x55982730b808 <col:20> 'sys_dlist_t *' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x55982730b708 <col:20> 'sys_dlist_t *' lvalue ParmVar 0x55982730b0a0 'list' 'sys_dlist_t *'
| |   |   `-ImplicitCastExpr 0x55982730b820 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55982730b730 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x55982730b110 'node' 'sys_dnode_t *'
| |   `-CompoundStmt 0x5598273111a8 <line:470:9, line:481:2>
| |     |-DeclStmt 0x55982730b9c8 <line:471:3, col:47>
| |     | `-VarDecl 0x55982730b860 <col:3, col:46> col:16 used pos 'sys_dnode_t *' cinit
| |     |   `-CallExpr 0x55982730b980 <col:22, col:46> 'sys_dnode_t *'
| |     |     |-ImplicitCastExpr 0x55982730b968 <col:22> 'sys_dnode_t *(*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x55982730b8c0 <col:22> 'sys_dnode_t *(sys_dlist_t *)' Function 0x559827305f70 'sys_dlist_peek_head' 'sys_dnode_t *(sys_dlist_t *)'
| |     |     `-ImplicitCastExpr 0x55982730b9b0 <col:42> 'sys_dlist_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x55982730b8e8 <col:42> 'sys_dlist_t *' lvalue ParmVar 0x55982730b0a0 'list' 'sys_dlist_t *'
| |     |-WhileStmt 0x55982730bde8 <line:473:3, line:475:3>
| |     | |-<<<NULL>>>
| |     | |-BinaryOperator 0x55982730bc60 <line:473:10, col:48> 'int' '&&'
| |     | | |-ParenExpr 0x55982730bae0 <col:10, col:22> 'int'
| |     | | | `-BinaryOperator 0x55982730bab8 <col:11, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     | | |   |-ImplicitCastExpr 0x55982730ba88 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:11> 'sys_dnode_t *' <LValueToRValue>
| |     | | |   | `-DeclRefExpr 0x55982730b9e0 <col:11> 'sys_dnode_t *' lvalue Var 0x55982730b860 'pos' 'sys_dnode_t *'
| |     | | |   `-ImplicitCastExpr 0x55982730baa0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     | | |     `-ParenExpr 0x55982730ba68 <col:14, col:24> 'void *'
| |     | | |       `-CStyleCastExpr 0x55982730ba40 <col:15, col:23> 'void *' <NullToPointer>
| |     | | |         `-IntegerLiteral 0x55982730ba08 <col:23> 'int' 0
| |     | | `-ParenExpr 0x55982730bc40 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:27, col:48> 'int'
| |     | |   `-BinaryOperator 0x55982730bc18 <col:28, col:47> 'int' '=='
| |     | |     |-CallExpr 0x55982730bb90 <col:28, col:42> 'int'
| |     | |     | |-ImplicitCastExpr 0x55982730bb78 <col:28> 'int (*)(sys_dnode_t *, void *)' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x55982730bb00 <col:28> 'int (*)(sys_dnode_t *, void *)' lvalue ParmVar 0x55982730b3b0 'cond' 'int (*)(sys_dnode_t *, void *)'
| |     | |     | |-ImplicitCastExpr 0x55982730bbc8 <col:33> 'sys_dnode_t *' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x55982730bb28 <col:33> 'sys_dnode_t *' lvalue Var 0x55982730b860 'pos' 'sys_dnode_t *'
| |     | |     | `-ImplicitCastExpr 0x55982730bbe0 <col:38> 'void *' <LValueToRValue>
| |     | |     |   `-DeclRefExpr 0x55982730bb50 <col:38> 'void *' lvalue ParmVar 0x55982730b428 'data' 'void *'
| |     | |     `-IntegerLiteral 0x55982730bbf8 <col:47> 'int' 0
| |     | `-CompoundStmt 0x55982730bdd0 <col:51, line:475:3>
| |     |   `-BinaryOperator 0x55982730bda8 <line:474:4, col:39> 'sys_dnode_t *' '='
| |     |     |-DeclRefExpr 0x55982730bc88 <col:4> 'sys_dnode_t *' lvalue Var 0x55982730b860 'pos' 'sys_dnode_t *'
| |     |     `-CallExpr 0x55982730bd40 <col:10, col:39> 'sys_dnode_t *'
| |     |       |-ImplicitCastExpr 0x55982730bd28 <col:10> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     |       | `-DeclRefExpr 0x55982730bcb0 <col:10> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x559827306ca0 'sys_dlist_peek_next' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     |       |-ImplicitCastExpr 0x55982730bd78 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |     |       | `-DeclRefExpr 0x55982730bcd8 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x55982730b0a0 'list' 'sys_dlist_t *'
| |     |       `-ImplicitCastExpr 0x55982730bd90 <col:36> 'sys_dnode_t *' <LValueToRValue>
| |     |         `-DeclRefExpr 0x55982730bd00 <col:36> 'sys_dnode_t *' lvalue Var 0x55982730b860 'pos' 'sys_dnode_t *'
| |     `-IfStmt 0x559827311170 <line:476:3, line:480:3>
| |       |-<<<NULL>>>
| |       |-<<<NULL>>>
| |       |-BinaryOperator 0x55982730bee0 <line:476:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       | |-ImplicitCastExpr 0x55982730beb0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:7> 'sys_dnode_t *' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55982730be08 <col:7> 'sys_dnode_t *' lvalue Var 0x55982730b860 'pos' 'sys_dnode_t *'
| |       | `-ImplicitCastExpr 0x55982730bec8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |       |   `-ParenExpr 0x55982730be90 <col:14, col:24> 'void *'
| |       |     `-CStyleCastExpr 0x55982730be68 <col:15, col:23> 'void *' <NullToPointer>
| |       |       `-IntegerLiteral 0x55982730be30 <col:23> 'int' 0
| |       |-CompoundStmt 0x55982730c028 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:20, line:478:3>
| |       | `-CallExpr 0x55982730bfc0 <line:477:4, col:30> 'void'
| |       |   |-ImplicitCastExpr 0x55982730bfa8 <col:4> 'void (*)(sys_dnode_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |       |   | `-DeclRefExpr 0x55982730bf08 <col:4> 'void (sys_dnode_t *, sys_dnode_t *)' Function 0x55982730a970 'sys_dlist_insert' 'void (sys_dnode_t *, sys_dnode_t *)'
| |       |   |-ImplicitCastExpr 0x55982730bff8 <col:21> 'sys_dnode_t *' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x55982730bf30 <col:21> 'sys_dnode_t *' lvalue Var 0x55982730b860 'pos' 'sys_dnode_t *'
| |       |   `-ImplicitCastExpr 0x55982730c010 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x55982730bf58 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x55982730b110 'node' 'sys_dnode_t *'
| |       `-CompoundStmt 0x559827311158 <line:478:10, line:480:3>
| |         `-CallExpr 0x5598273110f0 <line:479:4, col:31> 'void'
| |           |-ImplicitCastExpr 0x5598273110d8 <col:4> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x55982730c040 <col:4> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x5598273098c0 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |           |-ImplicitCastExpr 0x559827311128 <col:21> 'sys_dlist_t *' <LValueToRValue>
| |           | `-DeclRefExpr 0x55982730c068 <col:21> 'sys_dlist_t *' lvalue ParmVar 0x55982730b0a0 'list' 'sys_dlist_t *'
| |           `-ImplicitCastExpr 0x559827311140 <col:27> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5598273110b0 <col:27> 'sys_dnode_t *' lvalue ParmVar 0x55982730b110 'node' 'sys_dnode_t *'
| `-FullComment 0x5598274531a0 <line:449:3, line:462:14>
|   |-ParagraphComment 0x559827452b80 <line:449:3>
|   | `-TextComment 0x559827452b50 <col:3> Text=" "
|   |-BlockCommandComment 0x559827452ba0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x559827452c00 <col:10, col:33>
|   |   `-TextComment 0x559827452bd0 <col:10, col:33> Text=" insert node at position"
|   |-ParagraphComment 0x559827452cc0 <line:451:3, line:454:62>
|   | |-TextComment 0x559827452c20 <line:451:3, col:76> Text=" Insert a node in a location depending on a external condition. The cond()"
|   | |-TextComment 0x559827452c40 <line:452:3, col:74> Text=" function checks if the node is to be inserted _before_ the current node"
|   | |-TextComment 0x559827452c60 <line:453:3, col:31> Text=" against which it is checked."
|   | `-TextComment 0x559827452c80 <line:454:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x559827452d10 <line:456:3>
|   | `-TextComment 0x559827452ce0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827452d30 <col:4, line:457:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827452de0 <line:456:15, line:457:3>
|   |   |-TextComment 0x559827452d90 <line:456:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x559827452db0 <line:457:3> Text=" "
|   |-ParamCommandComment 0x559827452e00 <col:4, line:458:3> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559827452eb0 <line:457:15, line:458:3>
|   |   |-TextComment 0x559827452e60 <line:457:15, col:36> Text=" the element to insert"
|   |   `-TextComment 0x559827452e80 <line:458:3> Text=" "
|   |-ParamCommandComment 0x559827452ed0 <col:4, line:460:3> [in] implicitly Param="cond" ParamIndex=2
|   | `-ParagraphComment 0x559827452fb0 <line:458:15, line:460:3>
|   |   |-TextComment 0x559827452f30 <line:458:15, col:76> Text=" a function that determines if the current node is the correct"
|   |   |-TextComment 0x559827452f50 <line:459:3, col:27> Text="             insert point"
|   |   `-TextComment 0x559827452f70 <line:460:3> Text=" "
|   |-ParamCommandComment 0x559827452fd0 <col:4, col:34> [in] implicitly Param="data" ParamIndex=3
|   | `-ParagraphComment 0x559827453060 <col:15, col:34>
|   |   `-TextComment 0x559827453030 <col:15, col:34> Text=" parameter to cond()"
|   |-ParagraphComment 0x5598274530b0 <line:462:3>
|   | `-TextComment 0x559827453080 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274530d0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827453130 <col:11, col:14>
|       `-TextComment 0x559827453100 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273112e8 <line:495:1, line:500:1> line:495:20 used sys_dlist_remove 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x559827311260 <col:37, col:50> col:50 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5598273119a8 <line:496:1, line:500:1>
| | |-BinaryOperator 0x5598273115d8 <line:497:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x5598273114c0 <col:2, col:14> 'struct _dnode *' lvalue .next 0x559827300020
| | | | `-MemberExpr 0x559827311470 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| | | |   `-ImplicitCastExpr 0x559827311458 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x559827311420 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x5598273002e8
| | | |       `-MemberExpr 0x5598273113d0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| | | |         `-ImplicitCastExpr 0x5598273113b8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x559827311390 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x559827311260 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5598273115c0 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x559827311588 <col:21, col:27> 'struct _dnode *' lvalue .next 0x559827300020
| | |     `-MemberExpr 0x559827311538 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| | |       `-ImplicitCastExpr 0x559827311520 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5598273114f8 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x559827311260 'node' 'sys_dnode_t *'
| | |-BinaryOperator 0x559827311848 <line:498:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x559827311730 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x5598273002e8
| | | | `-MemberExpr 0x5598273116e0 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| | | |   `-ImplicitCastExpr 0x5598273116c8 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x559827311690 <col:2, col:8> 'struct _dnode *' lvalue .next 0x559827300020
| | | |       `-MemberExpr 0x559827311640 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| | | |         `-ImplicitCastExpr 0x559827311628 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x559827311600 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x559827311260 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x559827311830 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x5598273117f8 <col:21, col:27> 'struct _dnode *' lvalue .prev 0x5598273002e8
| | |     `-MemberExpr 0x5598273117a8 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x559827300380
| | |       `-ImplicitCastExpr 0x559827311790 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x559827311768 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x559827311260 'node' 'sys_dnode_t *'
| | `-CallExpr 0x559827311930 <line:499:2, col:21> 'void'
| |   |-ImplicitCastExpr 0x559827311918 <col:2> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x559827311870 <col:2> 'void (sys_dnode_t *)' Function 0x559827300d20 'sys_dnode_init' 'void (sys_dnode_t *)'
| |   `-ImplicitCastExpr 0x559827311960 <col:17> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x559827311898 <col:17> 'sys_dnode_t *' lvalue ParmVar 0x559827311260 'node' 'sys_dnode_t *'
| `-FullComment 0x559827453560 <line:485:3, line:492:14>
|   |-ParagraphComment 0x559827453240 <line:485:3>
|   | `-TextComment 0x559827453210 <col:3> Text=" "
|   |-BlockCommandComment 0x559827453260 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5598274532c0 <col:10, col:44>
|   |   `-TextComment 0x559827453290 <col:10, col:44> Text=" remove a specific node from a list"
|   |-ParagraphComment 0x559827453330 <line:487:3, line:488:62>
|   | |-TextComment 0x5598274532e0 <line:487:3, col:71> Text=" The list is implicit from the node. The node must be part of a list."
|   | `-TextComment 0x559827453300 <line:488:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x559827453380 <line:490:3>
|   | `-TextComment 0x559827453350 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274533a0 <col:4, col:33> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x559827453430 <col:15, col:33>
|   |   `-TextComment 0x559827453400 <col:15, col:33> Text=" the node to remove"
|   |-ParagraphComment 0x559827453480 <line:492:3>
|   | `-TextComment 0x559827453450 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274534a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827453500 <col:11, col:14>
|       `-TextComment 0x5598274534d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x559827311a68 <line:512:1, line:522:1> line:512:28 sys_dlist_get 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5598273119e0 <col:42, col:55> col:55 used list 'sys_dlist_t *'
| |-CompoundStmt 0x559827311fb8 <line:513:1, line:522:1>
| | |-DeclStmt 0x559827311c18 <line:514:2, col:26>
| | | `-VarDecl 0x559827311b20 <col:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:514:15 used node 'sys_dnode_t *' cinit
| | |   `-ImplicitCastExpr 0x559827311c00 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| | |     `-ParenExpr 0x559827311be0 <col:14, col:24> 'void *'
| | |       `-CStyleCastExpr 0x559827311bb8 <col:15, col:23> 'void *' <NullToPointer>
| | |         `-IntegerLiteral 0x559827311b80 <col:23> 'int' 0
| | |-IfStmt 0x559827311f00 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:516:2, line:519:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x559827311ce0 <line:516:6, col:30> 'int' prefix '!'
| | | | `-CallExpr 0x559827311c98 <col:7, col:30> 'bool'
| | | |   |-ImplicitCastExpr 0x559827311c80 <col:7> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x559827311c30 <col:7> 'bool (sys_dlist_t *)' Function 0x559827305860 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| | | |   `-ImplicitCastExpr 0x559827311cc8 <col:26> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x559827311c58 <col:26> 'sys_dlist_t *' lvalue ParmVar 0x5598273119e0 'list' 'sys_dlist_t *'
| | | |-CompoundStmt 0x559827311ee0 <col:33, line:519:2>
| | | | |-BinaryOperator 0x559827311e08 <line:517:3, col:16> 'sys_dnode_t *' '='
| | | | | |-DeclRefExpr 0x559827311d00 <col:3> 'sys_dnode_t *' lvalue Var 0x559827311b20 'node' 'sys_dnode_t *'
| | | | | `-ImplicitCastExpr 0x559827311df0 <col:10, col:16> 'struct _dnode *' <LValueToRValue>
| | | | |   `-MemberExpr 0x559827311db8 <col:10, col:16> 'struct _dnode *' lvalue .head 0x5598272fffb0
| | | | |     `-MemberExpr 0x559827311d68 <col:10, col:16> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5598273000c0
| | | | |       `-ImplicitCastExpr 0x559827311d50 <col:10> 'sys_dlist_t *' <LValueToRValue>
| | | | |         `-DeclRefExpr 0x559827311d28 <col:10> 'sys_dlist_t *' lvalue ParmVar 0x5598273119e0 'list' 'sys_dlist_t *'
| | | | `-CallExpr 0x559827311e98 <line:518:3, col:24> 'void'
| | | |   |-ImplicitCastExpr 0x559827311e80 <col:3> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x559827311e30 <col:3> 'void (sys_dnode_t *)' Function 0x5598273112e8 'sys_dlist_remove' 'void (sys_dnode_t *)'
| | | |   `-ImplicitCastExpr 0x559827311ec8 <col:20> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x559827311e58 <col:20> 'sys_dnode_t *' lvalue Var 0x559827311b20 'node' 'sys_dnode_t *'
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x559827311f78 <line:521:2, col:9>
| |   `-ImplicitCastExpr 0x559827311f60 <col:9> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x559827311f38 <col:9> 'sys_dnode_t *' lvalue Var 0x559827311b20 'node' 'sys_dnode_t *'
| `-FullComment 0x559827453900 <line:503:3, line:509:60>
|   |-ParagraphComment 0x559827453600 <line:503:3>
|   | `-TextComment 0x5598274535d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827453620 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x559827453680 <col:10, col:38>
|   |   `-TextComment 0x559827453650 <col:10, col:38> Text=" get the first node in a list"
|   |-ParagraphComment 0x5598274536d0 <line:505:3, col:62>
|   | `-TextComment 0x5598274536a0 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x559827453720 <line:507:3>
|   | `-TextComment 0x5598274536f0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827453740 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5598274537d0 <col:15, col:51>
|   |   `-TextComment 0x5598274537a0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x559827453820 <line:509:3>
|   | `-TextComment 0x5598274537f0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827453840 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x5598274538a0 <col:11, col:60>
|       `-TextComment 0x559827453870 <col:11, col:60> Text=" the first node in the list, NULL if list is empty"
|-RecordDecl 0x559827311fe0 </vagrant/ext/zephyros/zephyr/include/sys/rb.h:48:1, line:50:1> line:48:8 struct rbnode definition
| `-FieldDecl 0x559827314dd0 <line:49:2, col:27> col:17 children 'struct rbnode *[2]'
|-TypedefDecl 0x5598273150a8 <line:74:1, col:65> col:16 referenced rb_lessthan_t 'bool (*)(struct rbnode *, struct rbnode *)'
| |-PointerType 0x559827315040 'bool (*)(struct rbnode *, struct rbnode *)'
| | `-ParenType 0x559827314fe0 'bool (struct rbnode *, struct rbnode *)' sugar
| |   `-FunctionProtoType 0x559827314fa0 'bool (struct rbnode *, struct rbnode *)' cdecl
| |     |-BuiltinType 0x55982722a710 'bool'
| |     |-PointerType 0x559827314cf0 'struct rbnode *'
| |     | `-ElaboratedType 0x559827314c90 'struct rbnode' sugar
| |     |   `-RecordType 0x559827312070 'struct rbnode'
| |     |     `-Record 0x559827311fe0 'rbnode'
| |     `-PointerType 0x559827314cf0 'struct rbnode *'
| |       `-ElaboratedType 0x559827314c90 'struct rbnode' sugar
| |         `-RecordType 0x559827312070 'struct rbnode'
| |           `-Record 0x559827311fe0 'rbnode'
| `-FullComment 0x559827453c70 <line:62:3, line:72:36>
|   |-ParagraphComment 0x5598274539a0 <line:62:3>
|   | `-TextComment 0x559827453970 <col:3> Text=" "
|   |-VerbatimLineComment 0x5598274539c0 <col:4, col:26> Text=" rb_lessthan_t"
|   |-ParagraphComment 0x559827453a30 <line:63:3>
|   | `-TextComment 0x559827453a00 <col:3> Text=" "
|   |-BlockCommandComment 0x559827453a50 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x559827453ab0 <col:10, col:45>
|   |   `-TextComment 0x559827453a80 <col:10, col:45> Text=" Red/black tree comparison predicate"
|   |-ParagraphComment 0x559827453b20 <line:65:3, line:66:68>
|   | |-TextComment 0x559827453ad0 <line:65:3, col:69> Text=" Compares the two nodes and returns true if node A is strictly less"
|   | `-TextComment 0x559827453af0 <line:66:3, col:68> Text=" than B according to the tree's sorting criteria, false otherwise."
|   `-ParagraphComment 0x559827453c20 <line:68:3, line:72:36>
|     |-TextComment 0x559827453b40 <line:68:3, col:70> Text=" Note that during insert, the new node being inserted will always be"
|     |-TextComment 0x559827453b70 <line:69:3, col:68> Text=" "A", where "B" is the existing node within the tree against which"
|     |-TextComment 0x559827453b90 <line:70:3, col:64> Text=" it is being compared.  This trait can be used (with care!) to"
|     |-TextComment 0x559827453bb0 <line:71:3, col:70> Text=" implement "most/least recently added" semantics between nodes which"
|     `-TextComment 0x559827453bd0 <line:72:3, col:36> Text=" would otherwise compare as equal."
|-RecordDecl 0x559827315100 <line:76:1, line:84:1> line:76:8 struct rbtree definition
| |-FieldDecl 0x5598273151d8 <line:77:2, col:17> col:17 referenced root 'struct rbnode *'
| |-FieldDecl 0x559827315250 <line:78:2, col:16> col:16 lessthan_fn 'rb_lessthan_t':'bool (*)(struct rbnode *, struct rbnode *)'
| `-FieldDecl 0x5598273152b0 <line:79:2, col:6> col:6 max_depth 'int'
|-TypedefDecl 0x559827315548 <line:86:1, col:61> col:16 referenced rb_visit_t 'void (*)(struct rbnode *, void *)'
| `-PointerType 0x5598273154e0 'void (*)(struct rbnode *, void *)'
|   `-ParenType 0x559827315480 'void (struct rbnode *, void *)' sugar
|     `-FunctionProtoType 0x559827315440 'void (struct rbnode *, void *)' cdecl
|       |-BuiltinType 0x55982722a6f0 'void'
|       |-PointerType 0x559827314cf0 'struct rbnode *'
|       | `-ElaboratedType 0x559827314c90 'struct rbnode' sugar
|       |   `-RecordType 0x559827312070 'struct rbnode'
|       |     `-Record 0x559827311fe0 'rbnode'
|       `-PointerType 0x55982722ab90 'void *'
|         `-BuiltinType 0x55982722a6f0 'void'
|-FunctionDecl 0x559827315768 <line:88:1, col:56> col:16 z_rb_child 'struct rbnode *(struct rbnode *, int)'
| |-ParmVarDecl 0x5598273155c8 <col:27, col:42> col:42 node 'struct rbnode *'
| `-ParmVarDecl 0x559827315640 <col:48, col:52> col:52 side 'int'
|-FunctionDecl 0x559827315948 <line:89:1, col:38> col:5 z_rb_is_black 'int (struct rbnode *)'
| `-ParmVarDecl 0x559827315840 <col:19, col:34> col:34 node 'struct rbnode *'
|-FunctionDecl 0x5598273169a0 <line:91:1, col:70> col:6 used z_rb_walk 'void (struct rbnode *, rb_visit_t, void *)'
| |-ParmVarDecl 0x559827315a18 <col:16, col:31> col:31 node 'struct rbnode *'
| |-ParmVarDecl 0x559827315ab0 <col:37, col:48> col:48 visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| `-ParmVarDecl 0x559827315b28 <col:58, col:64> col:64 cookie 'void *'
|-FunctionDecl 0x559827316cb8 <line:93:1, col:61> col:16 used z_rb_get_minmax 'struct rbnode *(struct rbtree *, int)'
| |-ParmVarDecl 0x559827316b10 <col:32, col:47> col:47 tree 'struct rbtree *'
| `-ParmVarDecl 0x559827316b88 <col:53, col:57> col:57 side 'int'
|-FunctionDecl 0x559827316f60 <line:98:1, col:56> col:6 rb_insert 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x559827316dc0 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x559827316e48 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x559827453dc0 <line:96:3, col:31>
|   |-ParagraphComment 0x559827453d10 <col:3>
|   | `-TextComment 0x559827453ce0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827453d30 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x559827453d90 <col:10, col:31>
|       `-TextComment 0x559827453d60 <col:10, col:31> Text=" Insert node into tree"
|-FunctionDecl 0x559827317178 <line:103:1, col:56> col:6 rb_remove 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x559827317060 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x5598273170e8 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x559827453f10 <line:101:3, col:31>
|   |-ParagraphComment 0x559827453e60 <col:3>
|   | `-TextComment 0x559827453e30 <col:3> Text=" "
|   `-BlockCommandComment 0x559827453e80 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x559827453ee0 <col:10, col:31>
|       `-TextComment 0x559827453eb0 <col:10, col:31> Text=" Remove node from tree"
|-FunctionDecl 0x559827317398 <line:108:1, line:111:1> line:108:30 rb_get_min 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x559827317280 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x5598273175b8 <line:109:1, line:111:1>
| | `-ReturnStmt 0x559827317570 <line:110:2, col:32>
| |   `-CallExpr 0x559827317520 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x559827317508 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559827317440 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x559827316cb8 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x559827317558 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x559827317468 <col:25> 'struct rbtree *' lvalue ParmVar 0x559827317280 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x559827317490 <col:31> 'int' 0
| `-FullComment 0x559827454060 <line:106:3, col:54>
|   |-ParagraphComment 0x559827453fb0 <col:3>
|   | `-TextComment 0x559827453f80 <col:3> Text=" "
|   `-BlockCommandComment 0x559827453fd0 <col:4, col:54> Name="brief"
|     `-ParagraphComment 0x559827454030 <col:10, col:54>
|       `-TextComment 0x559827454000 <col:10, col:54> Text=" Returns the lowest-sorted member of the tree"
|-FunctionDecl 0x559827317698 <line:116:1, line:119:1> line:116:30 rb_get_max 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x5598273175f8 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x559827317858 <line:117:1, line:119:1>
| | `-ReturnStmt 0x559827317818 <line:118:2, col:32>
| |   `-CallExpr 0x5598273177c8 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x5598273177b0 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559827317740 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x559827316cb8 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x559827317800 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x559827317768 <col:25> 'struct rbtree *' lvalue ParmVar 0x5598273175f8 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x559827317790 <col:31> 'int' 1
| `-FullComment 0x5598274541b0 <line:114:3, col:55>
|   |-ParagraphComment 0x559827454100 <col:3>
|   | `-TextComment 0x5598274540d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827454120 <col:4, col:55> Name="brief"
|     `-ParagraphComment 0x559827454180 <col:10, col:55>
|       `-TextComment 0x559827454150 <col:10, col:55> Text=" Returns the highest-sorted member of the tree"
|-FunctionDecl 0x559827317ba0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/rb.h:130:58> col:6 rb_contains 'bool (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x559827317898 <col:18, col:33> col:33 tree 'struct rbtree *'
| |-ParmVarDecl 0x559827317920 <col:39, col:54> col:54 node 'struct rbnode *'
| `-FullComment 0x559827454400 <line:122:3, line:128:10>
|   |-ParagraphComment 0x559827454250 <line:122:3>
|   | `-TextComment 0x559827454220 <col:3> Text=" "
|   |-BlockCommandComment 0x559827454270 <col:4, col:60> Name="brief"
|   | `-ParagraphComment 0x5598274542d0 <col:10, col:60>
|   |   `-TextComment 0x5598274542a0 <col:10, col:60> Text=" Returns true if the given node is part of the tree"
|   `-ParagraphComment 0x5598274543c0 <line:124:3, line:128:10>
|     |-TextComment 0x5598274542f0 <line:124:3, col:66> Text=" Note that this does not internally dereference the node pointer"
|     |-TextComment 0x559827454310 <line:125:3, col:69> Text=" (though the tree's lessthan callback might!), it just tests it for"
|     |-TextComment 0x559827454330 <line:126:3, col:68> Text=" equality with items in the tree.  So it's feasible to use this to"
|     |-TextComment 0x559827454350 <line:127:3, col:66> Text=" implement a "set" construct by simply testing the pointer value"
|     `-TextComment 0x559827454370 <line:128:3, col:10> Text=" itself."
|-FunctionDecl 0x559827317ec0 <line:141:1, line:145:1> line:141:20 rb_walk 'void (struct rbtree *, rb_visit_t, void *)' static inline
| |-ParmVarDecl 0x559827317ca0 <col:28, col:43> col:43 used tree 'struct rbtree *'
| |-ParmVarDecl 0x559827317d10 <col:49, col:60> col:60 used visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |-ParmVarDecl 0x559827317d88 <line:142:7, col:13> col:13 used cookie 'void *'
| |-CompoundStmt 0x559827318168 <line:143:1, line:145:1>
| | `-CallExpr 0x5598273180e0 <line:144:2, col:40> 'void'
| |   |-ImplicitCastExpr 0x5598273180c8 <col:2> 'void (*)(struct rbnode *, rb_visit_t, void *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x559827317f78 <col:2> 'void (struct rbnode *, rb_visit_t, void *)' Function 0x5598273169a0 'z_rb_walk' 'void (struct rbnode *, rb_visit_t, void *)'
| |   |-ImplicitCastExpr 0x559827318120 <col:12, col:18> 'struct rbnode *' <LValueToRValue>
| |   | `-MemberExpr 0x559827317fe0 <col:12, col:18> 'struct rbnode *' lvalue ->root 0x5598273151d8
| |   |   `-ImplicitCastExpr 0x559827317fc8 <col:12> 'struct rbtree *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x559827317fa0 <col:12> 'struct rbtree *' lvalue ParmVar 0x559827317ca0 'tree' 'struct rbtree *'
| |   |-ImplicitCastExpr 0x559827318138 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' <LValueToRValue>
| |   | `-DeclRefExpr 0x559827318018 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' lvalue ParmVar 0x559827317d10 'visit_fn' 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |   `-ImplicitCastExpr 0x559827318150 <col:34> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x559827318040 <col:34> 'void *' lvalue ParmVar 0x559827317d88 'cookie' 'void *'
| `-FullComment 0x559827454620 <line:134:3, line:139:18>
|   |-ParagraphComment 0x5598274544a0 <line:134:3>
|   | `-TextComment 0x559827454470 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274544c0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x559827454520 <col:10, col:33>
|   |   `-TextComment 0x5598274544f0 <col:10, col:33> Text=" Walk/enumerate a rbtree"
|   `-ParagraphComment 0x5598274545e0 <line:136:3, line:139:18>
|     |-TextComment 0x559827454540 <line:136:3, col:69> Text=" Very simple recursive enumeration.  Low code size, but requiring a"
|     |-TextComment 0x559827454560 <line:137:3, col:70> Text=" separate function can be clumsy for the user and there is no way to"
|     |-TextComment 0x559827454580 <line:138:3, col:65> Text=" break out of the loop early.  See RB_FOR_EACH for an iterative"
|     `-TextComment 0x5598274545a0 <line:139:3, col:18> Text=" implementation."
|-RecordDecl 0x559827318180 <line:148:1, line:152:1> line:148:8 struct _rb_foreach definition
| |-FieldDecl 0x5598273182b0 <line:149:2, col:18> col:18 stack 'struct rbnode **'
| |-FieldDecl 0x559827318310 <line:150:2, col:8> col:8 is_left 'char *'
| `-FieldDecl 0x559827318370 <line:151:2, col:6> col:6 top 'int'
|-FunctionDecl 0x559827318618 <line:169:1, col:76> col:16 z_rb_foreach_next 'struct rbnode *(struct rbtree *, struct _rb_foreach *)'
| |-ParmVarDecl 0x5598273183e0 <col:34, col:49> col:49 tree 'struct rbtree *'
| `-ParmVarDecl 0x5598273184f0 <col:55, col:75> col:75 f 'struct _rb_foreach *'
|-RecordDecl 0x559827318788 </vagrant/ext/zephyros/zephyr/include/sched_priq.h:32:1, col:8> col:8 struct k_thread
|-FunctionDecl 0x5598273189e8 <line:34:1, col:50> col:18 z_priq_dumb_best 'struct k_thread *(sys_dlist_t *)'
| `-ParmVarDecl 0x559827318840 <col:35, col:48> col:48 pq 'sys_dlist_t *'
|-FunctionDecl 0x55982731ad60 <line:35:1, col:65> col:6 z_priq_dumb_remove 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x55982731abc0 <col:25, col:38> col:38 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x55982731ac48 <col:42, col:59> col:59 thread 'struct k_thread *'
|-FunctionDecl 0x55982731af38 <line:36:1, col:62> col:6 z_priq_dumb_add 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x55982731ae20 <col:22, col:35> col:35 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x55982731aea8 <col:39, col:56> col:56 thread 'struct k_thread *'
|-RecordDecl 0x55982731afe8 <line:38:1, line:41:1> line:38:8 struct _priq_rb definition
| |-FieldDecl 0x55982731b0b0 <line:39:2, col:16> col:16 tree 'struct rbtree':'struct rbtree'
| `-FieldDecl 0x55982731b110 <line:40:2, col:6> col:6 next_order_key 'int'
|-FunctionDecl 0x55982731b400 <line:43:1, col:64> col:6 z_priq_rb_add 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x55982731b260 <col:20, col:37> col:37 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x55982731b2e8 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x55982731b5f0 <line:44:1, col:67> col:6 z_priq_rb_remove 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x55982731b4d8 <col:23, col:40> col:40 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x55982731b560 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x55982731b7e8 <line:45:1, col:52> col:18 z_priq_rb_best 'struct k_thread *(struct _priq_rb *)'
| `-ParmVarDecl 0x55982731b6c8 <col:33, col:50> col:50 pq 'struct _priq_rb *'
|-RecordDecl 0x55982731b890 <line:54:1, line:57:1> line:54:8 struct _priq_mq definition
| |-FieldDecl 0x55982731ba98 <line:55:2, col:23> col:14 queues 'sys_dlist_t [32]'
| `-FieldDecl 0x55982731baf8 <line:56:2, col:15> col:15 bitmask 'unsigned int'
|-FunctionDecl 0x55982731bdc0 <line:59:1, col:64> col:6 z_priq_mq_add 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x55982731bc20 <col:20, col:37> col:37 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x55982731bca8 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x55982731bfb0 <line:60:1, col:67> col:6 z_priq_mq_remove 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x55982731be98 <col:23, col:40> col:40 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x55982731bf20 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x55982731c1a8 <line:61:1, col:52> col:18 z_priq_mq_best 'struct k_thread *(struct _priq_mq *)'
| `-ParmVarDecl 0x55982731c088 <col:33, col:50> col:50 pq 'struct _priq_mq *'
|-RecordDecl 0x55982731c278 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:29:1, line:31:1> line:29:8 struct _snode definition
| `-FieldDecl 0x55982731c3d0 <line:30:2, col:17> col:17 referenced next 'struct _snode *'
|-TypedefDecl 0x55982731c438 <line:33:1, col:23> col:23 referenced sys_snode_t 'struct _snode':'struct _snode'
| `-ElaboratedType 0x55982731c320 'struct _snode' sugar
|   `-RecordType 0x55982731c300 'struct _snode'
|     `-Record 0x55982731c278 '_snode'
|-RecordDecl 0x55982731c490 <line:35:1, line:38:1> line:35:8 struct _slist definition
| |-FieldDecl 0x55982731c598 <line:36:2, col:15> col:15 referenced head 'sys_snode_t *'
| `-FieldDecl 0x55982731c5f0 <line:37:2, col:15> col:15 referenced tail 'sys_snode_t *'
|-TypedefDecl 0x55982731c690 <line:40:1, col:23> col:23 referenced sys_slist_t 'struct _slist':'struct _slist'
| `-ElaboratedType 0x55982731c640 'struct _slist' sugar
|   `-RecordType 0x55982731c520 'struct _slist'
|     `-Record 0x55982731c490 '_slist'
|-FunctionDecl 0x55982731c9a0 <line:190:1, line:194:1> line:190:20 used sys_slist_init 'void (sys_slist_t *)' static inline
| |-ParmVarDecl 0x55982731c898 <col:35, col:48> col:48 used list 'sys_slist_t *'
| |-CompoundStmt 0x559827331c08 <line:191:1, line:194:1>
| | |-BinaryOperator 0x55982731cb58 <line:192:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| | | |-MemberExpr 0x55982731ca88 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:192:2, col:8> 'sys_snode_t *' lvalue ->head 0x55982731c598
| | | | `-ImplicitCastExpr 0x55982731ca70 <col:2> 'sys_slist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55982731ca48 <col:2> 'sys_slist_t *' lvalue ParmVar 0x55982731c898 'list' 'sys_slist_t *'
| | | `-ImplicitCastExpr 0x55982731cb40 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| | |   `-ParenExpr 0x55982731cb20 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x55982731caf8 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x55982731cac0 <col:23> 'int' 0
| | `-BinaryOperator 0x559827331be0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| |   |-MemberExpr 0x559827331b10 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, col:8> 'sys_snode_t *' lvalue ->tail 0x55982731c5f0
| |   | `-ImplicitCastExpr 0x55982731cba8 <col:2> 'sys_slist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55982731cb80 <col:2> 'sys_slist_t *' lvalue ParmVar 0x55982731c898 'list' 'sys_slist_t *'
| |   `-ImplicitCastExpr 0x559827331bc8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| |     `-ParenExpr 0x559827331ba8 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x559827331b80 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x559827331b48 <col:23> 'int' 0
| `-FullComment 0x559827454880 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:186:3, line:188:50>
|   |-ParagraphComment 0x5598274546c0 <line:186:3>
|   | `-TextComment 0x559827454690 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274546e0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x559827454740 <col:10, col:27>
|   |   `-TextComment 0x559827454710 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x559827454790 <line:188:3>
|   | `-TextComment 0x559827454760 <col:3> Text=" "
|   `-ParamCommandComment 0x5598274547b0 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x559827454840 <col:15, col:50>
|       `-TextComment 0x559827454810 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x559827331d40 <line:198:1, line:201:1> line:198:28 used z_snode_next_peek 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x559827331c38 <col:46, col:59> col:59 used node 'sys_snode_t *'
| `-CompoundStmt 0x559827331e90 <line:199:1, line:201:1>
|   `-ReturnStmt 0x559827331e78 <line:200:2, col:15>
|     `-ImplicitCastExpr 0x559827331e60 <col:9, col:15> 'struct _snode *' <LValueToRValue>
|       `-MemberExpr 0x559827331e28 <col:9, col:15> 'struct _snode *' lvalue ->next 0x55982731c3d0
|         `-ImplicitCastExpr 0x559827331e10 <col:9> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x559827331de8 <col:9> 'sys_snode_t *' lvalue ParmVar 0x559827331c38 'node' 'sys_snode_t *'
|-FunctionDecl 0x559827332040 <line:203:1, line:206:1> line:203:20 used z_snode_next_set 'void (sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559827331eb8 <col:37, col:50> col:50 used parent 'sys_snode_t *'
| |-ParmVarDecl 0x559827331f28 <col:58, col:71> col:71 used child 'sys_snode_t *'
| `-CompoundStmt 0x5598273321d0 <line:204:1, line:206:1>
|   `-BinaryOperator 0x5598273321a8 <line:205:2, col:17> 'struct _snode *' '='
|     |-MemberExpr 0x559827332130 <col:2, col:10> 'struct _snode *' lvalue ->next 0x55982731c3d0
|     | `-ImplicitCastExpr 0x559827332118 <col:2> 'sys_snode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5598273320f0 <col:2> 'sys_snode_t *' lvalue ParmVar 0x559827331eb8 'parent' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x559827332190 <col:17> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559827332168 <col:17> 'sys_snode_t *' lvalue ParmVar 0x559827331f28 'child' 'sys_snode_t *'
|-FunctionDecl 0x559827332380 <line:208:1, line:211:1> line:208:20 used z_slist_head_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5598273321f8 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x559827332268 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x559827332510 <line:209:1, line:211:1>
|   `-BinaryOperator 0x5598273324e8 <line:210:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x559827332470 <col:2, col:8> 'sys_snode_t *' lvalue ->head 0x55982731c598
|     | `-ImplicitCastExpr 0x559827332458 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x559827332430 <col:2> 'sys_slist_t *' lvalue ParmVar 0x5598273321f8 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x5598273324d0 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5598273324a8 <col:15> 'sys_snode_t *' lvalue ParmVar 0x559827332268 'node' 'sys_snode_t *'
|-FunctionDecl 0x559827332638 <line:213:1, line:216:1> line:213:20 used z_slist_tail_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559827332538 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5598273325a8 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x5598273327f8 <line:214:1, line:216:1>
|   `-BinaryOperator 0x5598273327a0 <line:215:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x559827332728 <col:2, col:8> 'sys_snode_t *' lvalue ->tail 0x55982731c5f0
|     | `-ImplicitCastExpr 0x559827332710 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5598273326e8 <col:2> 'sys_slist_t *' lvalue ParmVar 0x559827332538 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x559827332788 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559827332760 <col:15> 'sys_snode_t *' lvalue ParmVar 0x5598273325a8 'node' 'sys_snode_t *'
|-FunctionDecl 0x559827332920 <line:225:1, line:228:1> line:225:28 used sys_slist_peek_head 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x559827332820 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x559827332a98 <line:226:1, line:228:1>
| | `-ReturnStmt 0x559827332a58 <line:227:2, col:15>
| |   `-ImplicitCastExpr 0x559827332a40 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x559827332a08 <col:9, col:15> 'sys_snode_t *' lvalue ->head 0x55982731c598
| |       `-ImplicitCastExpr 0x5598273329f0 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5598273329c8 <col:9> 'sys_slist_t *' lvalue ParmVar 0x559827332820 'list' 'sys_slist_t *'
| `-FullComment 0x559827454bc0 <line:219:3, line:223:68>
|   |-ParagraphComment 0x559827454920 <line:219:3>
|   | `-TextComment 0x5598274548f0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827454940 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5598274549a0 <col:10, col:43>
|   |   `-TextComment 0x559827454970 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x5598274549f0 <line:221:3>
|   | `-TextComment 0x5598274549c0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827454a10 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827454aa0 <col:15, col:62>
|   |   `-TextComment 0x559827454a70 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x559827454af0 <line:223:3>
|   | `-TextComment 0x559827454ac0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827454b10 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x559827454b70 <col:11, col:68>
|       `-TextComment 0x559827454b40 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x559827332c08 <line:237:1, line:240:1> line:237:28 used sys_slist_peek_tail 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x559827332b80 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x559827332d88 <line:238:1, line:240:1>
| | `-ReturnStmt 0x559827332d40 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x559827332d28 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x559827332cf0 <col:9, col:15> 'sys_snode_t *' lvalue ->tail 0x55982731c5f0
| |       `-ImplicitCastExpr 0x559827332cd8 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x559827332cb0 <col:9> 'sys_slist_t *' lvalue ParmVar 0x559827332b80 'list' 'sys_slist_t *'
| `-FullComment 0x559827454f00 <line:231:3, line:235:67>
|   |-ParagraphComment 0x559827454c60 <line:231:3>
|   | `-TextComment 0x559827454c30 <col:3> Text=" "
|   |-BlockCommandComment 0x559827454c80 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x559827454ce0 <col:10, col:42>
|   |   `-TextComment 0x559827454cb0 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x559827454d30 <line:233:3>
|   | `-TextComment 0x559827454d00 <col:3> Text=" "
|   |-ParamCommandComment 0x559827454d50 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827454de0 <col:15, col:61>
|   |   `-TextComment 0x559827454db0 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x559827454e30 <line:235:3>
|   | `-TextComment 0x559827454e00 <col:3> Text=" "
|   `-BlockCommandComment 0x559827454e50 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x559827454eb0 <col:11, col:67>
|       `-TextComment 0x559827454e80 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x559827332eb0 <line:253:1, col:56> col:20 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x559827332db0 <col:39, col:52> col:52 list 'sys_slist_t *'
| `-FullComment 0x559827455240 <line:247:3, line:251:57>
|   |-ParagraphComment 0x559827454fa0 <line:247:3>
|   | `-TextComment 0x559827454f70 <col:3> Text=" "
|   |-BlockCommandComment 0x559827454fc0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x559827455020 <col:10, col:41>
|   |   `-TextComment 0x559827454ff0 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x559827455070 <line:249:3>
|   | `-TextComment 0x559827455040 <col:3> Text=" "
|   |-ParamCommandComment 0x559827455090 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827455120 <col:15, col:44>
|   |   `-TextComment 0x5598274550f0 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x559827455170 <line:251:3>
|   | `-TextComment 0x559827455140 <col:3> Text=" "
|   `-BlockCommandComment 0x559827455190 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x5598274551f0 <col:11, col:57>
|       `-TextComment 0x5598274551c0 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x559827332ff0 prev 0x559827332eb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:3:1 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x559827332f68 <line:5:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_slist_t *'
| `-CompoundStmt 0x5598273332e8 <line:60:2, line:62:2>
|   `-ReturnStmt 0x5598273332a0 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x559827333288 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x559827333268 <col:10, col:54> 'int'
|         `-BinaryOperator 0x559827333240 <<scratch space>:7:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x559827333160 <<scratch space>:7:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_snode_t *'
|           | |-ImplicitCastExpr 0x559827333148 <<scratch space>:7:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x559827333098 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332920 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|           | `-ImplicitCastExpr 0x559827333190 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_slist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x5598273330c0 <col:41> 'sys_slist_t *' lvalue ParmVar 0x559827332f68 'list' 'sys_slist_t *'
|           `-ImplicitCastExpr 0x559827333228 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|             `-ParenExpr 0x559827333208 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x5598273331e0 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x5598273331a8 <col:23> 'int' 0
|-FunctionDecl 0x559827333398 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:266:1, col:74> col:28 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x559827333310 <col:57, col:70> col:70 node 'sys_snode_t *'
| `-FullComment 0x5598274555e0 <line:258:3, line:264:55>
|   |-ParagraphComment 0x5598274552e0 <line:258:3>
|   | `-TextComment 0x5598274552b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827455300 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x559827455360 <col:10, col:64>
|   |   `-TextComment 0x559827455330 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x5598274553b0 <line:260:3, col:69>
|   | `-TextComment 0x559827455380 <col:3, col:69> Text=" Faster then sys_slist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x559827455400 <line:262:3>
|   | `-TextComment 0x5598274553d0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827455420 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5598274554b0 <col:15, col:64>
|   |   `-TextComment 0x559827455480 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x559827455500 <line:264:3>
|   | `-TextComment 0x5598274554d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827455520 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x559827455580 <col:11, col:55>
|       `-TextComment 0x559827455550 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x5598273334d8 prev 0x559827333398 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:11:1 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x559827333450 <line:13:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_snode_t *'
| `-CompoundStmt 0x5598273336c8 <line:67:2, line:69:2>
|   `-ReturnStmt 0x559827333688 <line:68:3, col:42>
|     `-CallExpr 0x559827333640 <<scratch space>:15:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x559827333628 <<scratch space>:15:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827333580 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x559827331d40 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       `-ImplicitCastExpr 0x559827333670 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_snode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x5598273335a8 <col:38> 'sys_snode_t *' lvalue ParmVar 0x559827333450 'node' 'sys_snode_t *'
|-FunctionDecl 0x559827333778 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:277:1, col:65> col:28 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x5598273336f0 <col:48, col:61> col:61 node 'sys_snode_t *'
| `-FullComment 0x559827455920 <line:271:3, line:275:55>
|   |-ParagraphComment 0x559827455680 <line:271:3>
|   | `-TextComment 0x559827455650 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274556a0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x559827455700 <col:10, col:46>
|   |   `-TextComment 0x5598274556d0 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x559827455750 <line:273:3>
|   | `-TextComment 0x559827455720 <col:3> Text=" "
|   |-ParamCommandComment 0x559827455770 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x559827455800 <col:15, col:64>
|   |   `-TextComment 0x5598274557d0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x559827455850 <line:275:3>
|   | `-TextComment 0x559827455820 <col:3> Text=" "
|   `-BlockCommandComment 0x559827455870 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5598274558d0 <col:11, col:55>
|       `-TextComment 0x5598274558a0 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x5598273338b8 prev 0x559827333778 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:19:1 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x559827333830 <line:21:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_snode_t *'
| `-CompoundStmt 0x5598273352a8 <line:74:2, line:78:2>
|   `-ReturnStmt 0x559827335268 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x559827335238 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *'
|       |-BinaryOperator 0x559827333a38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x559827333a08 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_snode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x559827333960 <col:10> 'sys_snode_t *' lvalue ParmVar 0x559827333830 'node' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x559827333a20 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x5598273339e8 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x5598273339c0 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x559827333988 <col:23> 'int' 0
|       |-CallExpr 0x559827333ac8 <<scratch space>:23:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_snode_t *'
|       | |-ImplicitCastExpr 0x559827333ab0 <<scratch space>:23:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x559827333a60 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5598273334d8 'sys_slist_peek_next_no_check' 'sys_snode_t *(sys_snode_t *)'
|       | `-ImplicitCastExpr 0x559827333af8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x559827333a88 <col:43> 'sys_snode_t *' lvalue ParmVar 0x559827333830 'node' 'sys_snode_t *'
|       `-ImplicitCastExpr 0x559827335220 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|         `-ParenExpr 0x559827335200 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x559827333b48 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x559827333b10 <col:23> 'int' 0
|-FunctionDecl 0x5598273353d0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:289:1, line:290:27> line:289:20 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5598273352d0 <col:38, col:51> col:51 list 'sys_slist_t *'
| |-ParmVarDecl 0x559827335340 <line:290:10, col:23> col:23 node 'sys_snode_t *'
| `-FullComment 0x559827455cd0 <line:282:3, line:287:47>
|   |-ParagraphComment 0x5598274559c0 <line:282:3>
|   | `-TextComment 0x559827455990 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274559e0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x559827455a40 <col:10, col:42>
|   |   `-TextComment 0x559827455a10 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x559827455a90 <line:284:3, col:62>
|   | `-TextComment 0x559827455a60 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x559827455ae0 <line:286:3>
|   | `-TextComment 0x559827455ab0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827455b00 <col:4, line:287:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827455bd0 <line:286:15, line:287:3>
|   |   |-TextComment 0x559827455b80 <line:286:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559827455ba0 <line:287:3> Text=" "
|   `-ParamCommandComment 0x559827455bf0 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x559827455c80 <col:15, col:47>
|       `-TextComment 0x559827455c50 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x559827335590 prev 0x5598273353d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:25:1 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559827335490 <line:27:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_slist_t *'
| |-ParmVarDecl 0x559827335500 <<scratch space>:29:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_snode_t *'
| `-CompoundStmt 0x559827335ca8 <line:84:2, line:93:2>
|   |-CallExpr 0x5598273357b0 <<scratch space>:31:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x559827335798 <<scratch space>:31:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559827335640 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x559827332040 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x5598273357e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x559827335668 <col:30> 'sys_snode_t *' lvalue ParmVar 0x559827335500 'node' 'sys_snode_t *'
|   | `-CallExpr 0x5598273356f8 <<scratch space>:33:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x5598273356e0 <<scratch space>:33:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x559827335690 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332920 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x559827335728 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5598273356b8 <col:36> 'sys_slist_t *' lvalue ParmVar 0x559827335490 'list' 'sys_slist_t *'
|   |-CallExpr 0x5598273358f0 <<scratch space>:35:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x5598273358d8 <<scratch space>:35:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559827335800 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559827332380 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x559827335928 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x559827335828 <col:30> 'sys_slist_t *' lvalue ParmVar 0x559827335490 'list' 'sys_slist_t *'
|   | `-ImplicitCastExpr 0x559827335940 <col:36> 'sys_snode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x559827335850 <col:36> 'sys_snode_t *' lvalue ParmVar 0x559827335500 'node' 'sys_snode_t *'
|   `-IfStmt 0x559827335c48 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x559827335aa0 <<scratch space>:37:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x5598273359c0 <<scratch space>:37:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x5598273359a8 <<scratch space>:37:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x559827335958 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x5598273359f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559827335980 <col:37> 'sys_slist_t *' lvalue ParmVar 0x559827335490 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x559827335a88 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x559827335a68 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x559827335a40 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x559827335a08 <col:23> 'int' 0
|     |-CompoundStmt 0x559827335c30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x559827335be0 <<scratch space>:39:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x559827335bc8 <<scratch space>:39:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x559827335ac8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559827332638 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x559827335c18 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x559827335af0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x559827335490 'list' 'sys_slist_t *'
|     |   `-CallExpr 0x559827335b80 <<scratch space>:41:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_snode_t *'
|     |     |-ImplicitCastExpr 0x559827335b68 <<scratch space>:41:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x559827335b18 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332920 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|     |     `-ImplicitCastExpr 0x559827335bb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_slist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x559827335b40 <col:36> 'sys_slist_t *' lvalue ParmVar 0x559827335490 'list' 'sys_slist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x559827335de0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:302:1, line:303:26> line:302:20 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559827335ce0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x559827335d50 <line:303:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x559827456060 <line:295:3, line:300:46>
|   |-ParagraphComment 0x559827455d70 <line:295:3>
|   | `-TextComment 0x559827455d40 <col:3> Text=" "
|   |-BlockCommandComment 0x559827455d90 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x559827455df0 <col:10, col:41>
|   |   `-TextComment 0x559827455dc0 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x559827455e40 <line:297:3, col:62>
|   | `-TextComment 0x559827455e10 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x559827455e90 <line:299:3>
|   | `-TextComment 0x559827455e60 <col:3> Text=" "
|   |-ParamCommandComment 0x559827455eb0 <col:4, line:300:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827455f60 <line:299:15, line:300:3>
|   |   |-TextComment 0x559827455f10 <line:299:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559827455f30 <line:300:3> Text=" "
|   `-ParamCommandComment 0x559827455f80 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x559827456010 <col:15, col:46>
|       `-TextComment 0x559827455fe0 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x559827335fa0 prev 0x559827335de0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:43:1 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559827335ea0 <line:45:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x559827335f10 <<scratch space>:47:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x5598273374d8 <line:99:2, line:111:2>
|   |-CallExpr 0x559827336138 <<scratch space>:49:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x559827336120 <<scratch space>:49:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559827336050 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x559827332040 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x559827336170 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x559827336078 <col:30> 'sys_snode_t *' lvalue ParmVar 0x559827335f10 'node' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x559827336188 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |   `-ParenExpr 0x559827336100 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x5598273360d8 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x5598273360a0 <col:23> 'int' 0
|   `-IfStmt 0x559827337470 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x559827336fb8 <<scratch space>:51:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x559827336ed8 <<scratch space>:51:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x559827336ec0 <<scratch space>:51:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5598273361a0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x559827336f08 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5598273361c8 <col:37> 'sys_slist_t *' lvalue ParmVar 0x559827335ea0 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x559827336fa0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x559827336f80 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x559827336f58 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x559827336f20 <col:23> 'int' 0
|     |-CompoundStmt 0x5598273371d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x559827337070 <<scratch space>:53:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x559827337058 <<scratch space>:53:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x559827336fe0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559827332638 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     | | |-ImplicitCastExpr 0x5598273370a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_slist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x559827337008 <col:31> 'sys_slist_t *' lvalue ParmVar 0x559827335ea0 'list' 'sys_slist_t *'
|     | | `-ImplicitCastExpr 0x5598273370c0 <col:37> 'sys_snode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559827337030 <col:37> 'sys_snode_t *' lvalue ParmVar 0x559827335f10 'node' 'sys_snode_t *'
|     | `-CallExpr 0x559827337168 <<scratch space>:55:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x559827337150 <<scratch space>:55:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x5598273370d8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559827332380 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x5598273371a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x559827337100 <col:31> 'sys_slist_t *' lvalue ParmVar 0x559827335ea0 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x5598273371b8 <col:37> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x559827337128 <col:37> 'sys_snode_t *' lvalue ParmVar 0x559827335f10 'node' 'sys_snode_t *'
|     `-CompoundStmt 0x559827337450 <line:105:10, line:110:3>
|       |-CallExpr 0x559827337308 <<scratch space>:57:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x5598273372f0 <<scratch space>:57:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5598273371f0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x559827332040 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|       | |-CallExpr 0x559827337280 <line:59:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x559827337268 <<scratch space>:59:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x559827337218 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|       | | `-ImplicitCastExpr 0x5598273372b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_slist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x559827337240 <col:35> 'sys_slist_t *' lvalue ParmVar 0x559827335ea0 'list' 'sys_slist_t *'
|       | `-ImplicitCastExpr 0x559827337340 <line:108:5> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x5598273372c8 <col:5> 'sys_snode_t *' lvalue ParmVar 0x559827335f10 'node' 'sys_snode_t *'
|       `-CallExpr 0x5598273373e8 <<scratch space>:61:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x5598273373d0 <<scratch space>:61:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x559827337358 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559827332638 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|         |-ImplicitCastExpr 0x559827337420 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_slist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x559827337380 <col:31> 'sys_slist_t *' lvalue ParmVar 0x559827335ea0 'list' 'sys_slist_t *'
|         `-ImplicitCastExpr 0x559827337438 <col:37> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5598273373a8 <col:37> 'sys_snode_t *' lvalue ParmVar 0x559827335f10 'node' 'sys_snode_t *'
|-FunctionDecl 0x559827337730 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:320:1, line:321:29> line:320:20 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x559827337508 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x559827337580 <line:321:7, col:13> col:13 head 'void *'
| |-ParmVarDecl 0x5598273375f8 <col:19, col:25> col:25 tail 'void *'
| `-FullComment 0x5598274565c0 <line:308:3, line:318:66>
|   |-ParagraphComment 0x559827456100 <line:308:3>
|   | `-TextComment 0x5598274560d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827456120 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x559827456180 <col:10, col:41>
|   |   `-TextComment 0x559827456150 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x559827456270 <line:310:3, line:312:62>
|   | |-TextComment 0x5598274561a0 <line:310:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x5598274561c0 <line:311:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x559827456210 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x559827456230 <line:312:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5598274562c0 <line:314:3, col:48>
|   | `-TextComment 0x559827456290 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x559827456310 <line:316:3>
|   | `-TextComment 0x5598274562e0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827456330 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5598274563e0 <line:316:15, line:317:3>
|   |   |-TextComment 0x559827456390 <line:316:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5598274563b0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x559827456400 <col:4, line:318:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x5598274564b0 <line:317:15, line:318:3>
|   |   |-TextComment 0x559827456460 <line:317:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x559827456480 <line:318:3> Text=" "
|   `-ParamCommandComment 0x5598274564d0 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x559827456560 <col:15, col:66>
|       `-TextComment 0x559827456530 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x559827337980 prev 0x559827337730 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:63:1 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x5598273377f8 <line:65:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_slist_t *'
| |-ParmVarDecl 0x559827337870 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x5598273378e8 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x559827338068 <col:31, line:127:42>
|   |-IfStmt 0x559827337ed0 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559827337b80 <<scratch space>:67:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x559827337aa0 <<scratch space>:67:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x559827337a88 <<scratch space>:67:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559827337a38 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x559827337ad0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x559827337a60 <col:36> 'sys_slist_t *' lvalue ParmVar 0x5598273377f8 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x559827337b68 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x559827337b48 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x559827337b20 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x559827337ae8 <col:23> 'int' 0
|   | |-CompoundStmt 0x559827337cd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x559827337c88 <<scratch space>:69:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x559827337c70 <<scratch space>:69:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559827337ba8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559827332380 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x559827337cc0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x559827337bd0 <col:30> 'sys_slist_t *' lvalue ParmVar 0x5598273377f8 'list' 'sys_slist_t *'
|   | |   `-CStyleCastExpr 0x559827337c48 <line:120:6, col:31> 'sys_snode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x559827337c30 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x559827337bf8 <col:31> 'void *' lvalue ParmVar 0x559827337870 'head' 'void *'
|   | `-CompoundStmt 0x559827337e90 <line:121:9, line:125:2>
|   |   `-CallExpr 0x559827337e58 <<scratch space>:73:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x559827337e40 <<scratch space>:73:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559827337cf0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x559827332040 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |     |-CallExpr 0x559827337d80 <line:75:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_snode_t *'
|   |     | |-ImplicitCastExpr 0x559827337d68 <<scratch space>:75:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x559827337d18 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | `-ImplicitCastExpr 0x559827337db0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_slist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559827337d40 <col:34> 'sys_slist_t *' lvalue ParmVar 0x5598273377f8 'list' 'sys_slist_t *'
|   |     `-CStyleCastExpr 0x559827337e18 <line:124:4, col:29> 'sys_snode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x559827337e00 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x559827337dc8 <col:29> 'void *' lvalue ParmVar 0x559827337870 'head' 'void *'
|   `-CallExpr 0x559827337fe8 <<scratch space>:79:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x559827337fd0 <<scratch space>:79:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559827337f08 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559827332638 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x559827338020 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_slist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x559827337f30 <col:29> 'sys_slist_t *' lvalue ParmVar 0x5598273377f8 'list' 'sys_slist_t *'
|     `-CStyleCastExpr 0x559827337fa8 <line:127:10, col:35> 'sys_snode_t *' <BitCast>
|       `-ImplicitCastExpr 0x559827337f90 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x559827337f58 <col:35> 'void *' lvalue ParmVar 0x5598273378e8 'tail' 'void *'
|-FunctionDecl 0x559827338220 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:334:1, line:335:34> line:334:20 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x559827338098 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x559827338108 <line:335:7, col:20> col:20 list_to_append 'sys_slist_t *'
| `-FullComment 0x559827456970 <line:326:3, line:332:57>
|   |-ParagraphComment 0x559827456660 <line:326:3>
|   | `-TextComment 0x559827456630 <col:3> Text=" "
|   |-BlockCommandComment 0x559827456680 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x5598274566e0 <col:10, col:65>
|   |   `-TextComment 0x5598274566b0 <col:10, col:65> Text=" merge two slists, appending the second one to the first"
|   |-ParagraphComment 0x559827456750 <line:328:3, line:329:62>
|   | |-TextComment 0x559827456700 <line:328:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x559827456720 <line:329:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5598274567a0 <line:331:3>
|   | `-TextComment 0x559827456770 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274567c0 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827456870 <line:331:15, line:332:3>
|   |   |-TextComment 0x559827456820 <line:331:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559827456840 <line:332:3> Text=" "
|   `-ParamCommandComment 0x559827456890 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x559827456920 <col:25, col:57>
|       `-TextComment 0x5598274568f0 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x5598273383e0 prev 0x559827338220 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:84:1 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x5598273382e0 <line:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_slist_t *'
| |-ParmVarDecl 0x559827338350 <<scratch space>:88:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_slist_t *'
| `-CompoundStmt 0x559827338aa8 <line:135:2, line:141:2>
|   |-DeclStmt 0x559827338588 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x5598273384a0 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_snode_t *'
|   | `-VarDecl 0x559827338510 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_snode_t *'
|   |-BinaryOperator 0x559827338678 <line:137:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x5598273385a0 <col:3> 'sys_snode_t *' lvalue Var 0x5598273384a0 'head' 'sys_snode_t *'
|   | `-CallExpr 0x559827338630 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x559827338618 <<scratch space>:92:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5598273385c8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332920 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x559827338660 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5598273385f0 <col:40> 'sys_slist_t *' lvalue ParmVar 0x559827338350 'list_to_append' 'sys_slist_t *'
|   |-BinaryOperator 0x559827338778 <line:138:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x5598273386a0 <col:3> 'sys_snode_t *' lvalue Var 0x559827338510 'tail' 'sys_snode_t *'
|   | `-CallExpr 0x559827338730 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x559827338718 <<scratch space>:94:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5598273386c8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x559827338760 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5598273386f0 <col:40> 'sys_slist_t *' lvalue ParmVar 0x559827338350 'list_to_append' 'sys_slist_t *'
|   |-CallExpr 0x5598273388b0 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x559827338898 <<scratch space>:96:1> 'void (*)(sys_slist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5598273387a0 <col:1> 'void (sys_slist_t *, void *, void *)' Function 0x559827337980 'sys_slist_append_list' 'void (sys_slist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x5598273388f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5598273387c8 <col:35> 'sys_slist_t *' lvalue ParmVar 0x5598273382e0 'list' 'sys_slist_t *'
|   | |-ImplicitCastExpr 0x559827338920 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x559827338908 <col:41> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5598273387f0 <col:41> 'sys_snode_t *' lvalue Var 0x5598273384a0 'head' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x559827338950 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x559827338938 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x559827338818 <col:47> 'sys_snode_t *' lvalue Var 0x559827338510 'tail' 'sys_snode_t *'
|   `-CallExpr 0x559827338a30 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x559827338a18 <<scratch space>:98:1> 'void (*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559827338968 <col:1> 'void (sys_slist_t *)' Function 0x55982731c9a0 'sys_slist_init' 'void (sys_slist_t *)'
|     `-ImplicitCastExpr 0x559827338a60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_slist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559827338990 <col:28> 'sys_slist_t *' lvalue ParmVar 0x559827338350 'list_to_append' 'sys_slist_t *'
|-FunctionDecl 0x559827338d00 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:348:1, line:350:26> line:348:20 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559827338af0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x559827338b60 <line:349:9, col:22> col:22 prev 'sys_snode_t *'
| |-ParmVarDecl 0x559827338bd0 <line:350:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x559827456de0 <line:340:3, line:346:46>
|   |-ParagraphComment 0x559827456a10 <line:340:3>
|   | `-TextComment 0x5598274569e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827456a30 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x559827456a90 <col:10, col:41>
|   |   `-TextComment 0x559827456a60 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x559827456ae0 <line:342:3, col:62>
|   | `-TextComment 0x559827456ab0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x559827456b30 <line:344:3>
|   | `-TextComment 0x559827456b00 <col:3> Text=" "
|   |-ParamCommandComment 0x559827456b50 <col:4, line:345:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827456c00 <line:344:15, line:345:3>
|   |   |-TextComment 0x559827456bb0 <line:344:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559827456bd0 <line:345:3> Text=" "
|   |-ParamCommandComment 0x559827456c20 <col:4, line:346:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x559827456cd0 <line:345:15, line:346:3>
|   |   |-TextComment 0x559827456c80 <line:345:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x559827456ca0 <line:346:3> Text=" "
|   `-ParamCommandComment 0x559827456cf0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x559827456d80 <col:15, col:46>
|       `-TextComment 0x559827456d50 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x55982733bf68 prev 0x559827338d00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:100:1 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x559827338dc8 <line:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x559827338e38 <<scratch space>:104:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_snode_t *'
| |-ParmVarDecl 0x55982733bed0 <<scratch space>:106:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x55982733c7c8 <line:148:2, line:158:2>
|   `-IfStmt 0x55982733c768 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55982733c0f8 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x55982733c0c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_snode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x55982733c020 <col:7> 'sys_snode_t *' lvalue ParmVar 0x559827338e38 'prev' 'sys_snode_t *'
|     | `-ImplicitCastExpr 0x55982733c0e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x55982733c0a8 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55982733c080 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55982733c048 <col:23> 'int' 0
|     |-CompoundStmt 0x55982733c218 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x55982733c1b0 <<scratch space>:108:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x55982733c198 <<scratch space>:108:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55982733c120 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559827335590 'sys_slist_prepend' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x55982733c1e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55982733c148 <col:32> 'sys_slist_t *' lvalue ParmVar 0x559827338dc8 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x55982733c200 <col:38> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55982733c170 <col:38> 'sys_snode_t *' lvalue ParmVar 0x55982733bed0 'node' 'sys_snode_t *'
|     `-IfStmt 0x55982733c730 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x55982733c378 <<scratch space>:110:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x55982733c298 <<scratch space>:110:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x55982733c280 <<scratch space>:110:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55982733c230 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x559827331d40 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       | | `-ImplicitCastExpr 0x55982733c2c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_snode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x55982733c258 <col:42> 'sys_snode_t *' lvalue ParmVar 0x559827338e38 'prev' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x55982733c360 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x55982733c340 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x55982733c318 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x55982733c2e0 <col:23> 'int' 0
|       |-CompoundStmt 0x55982733c498 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x55982733c430 <<scratch space>:112:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x55982733c418 <<scratch space>:112:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55982733c3a0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559827335fa0 'sys_slist_append' 'void (sys_slist_t *, sys_snode_t *)'
|       |   |-ImplicitCastExpr 0x55982733c468 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_slist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x55982733c3c8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x559827338dc8 'list' 'sys_slist_t *'
|       |   `-ImplicitCastExpr 0x55982733c480 <col:37> 'sys_snode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55982733c3f0 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55982733bed0 'node' 'sys_snode_t *'
|       `-CompoundStmt 0x55982733c710 <line:153:10, line:157:3>
|         |-CallExpr 0x55982733c5c8 <<scratch space>:114:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x55982733c5b0 <<scratch space>:114:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x55982733c4b0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x559827332040 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|         | |-ImplicitCastExpr 0x55982733c600 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_snode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x55982733c4d8 <col:31> 'sys_snode_t *' lvalue ParmVar 0x55982733bed0 'node' 'sys_snode_t *'
|         | `-CallExpr 0x55982733c568 <<scratch space>:116:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_snode_t *'
|         |   |-ImplicitCastExpr 0x55982733c550 <<scratch space>:116:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x55982733c500 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x559827331d40 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|         |   `-ImplicitCastExpr 0x55982733c598 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_snode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x55982733c528 <col:33> 'sys_snode_t *' lvalue ParmVar 0x559827338e38 'prev' 'sys_snode_t *'
|         `-CallExpr 0x55982733c6a8 <<scratch space>:118:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x55982733c690 <<scratch space>:118:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x55982733c618 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x559827332040 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|           |-ImplicitCastExpr 0x55982733c6e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_snode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x55982733c640 <col:31> 'sys_snode_t *' lvalue ParmVar 0x559827338e38 'prev' 'sys_snode_t *'
|           `-ImplicitCastExpr 0x55982733c6f8 <col:37> 'sys_snode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x55982733c668 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55982733bed0 'node' 'sys_snode_t *'
|-FunctionDecl 0x55982733c878 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:364:1, col:69> col:28 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55982733c7f0 <col:52, col:65> col:65 list 'sys_slist_t *'
| `-FullComment 0x5598274571a0 <line:355:3, line:362:50>
|   |-ParagraphComment 0x559827456e80 <line:355:3>
|   | `-TextComment 0x559827456e50 <col:3> Text=" "
|   |-BlockCommandComment 0x559827456ea0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x559827456f00 <col:10, col:59>
|   |   `-TextComment 0x559827456ed0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x559827456f70 <line:357:3, line:358:62>
|   | |-TextComment 0x559827456f20 <line:357:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x559827456f40 <line:358:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x559827456fc0 <line:360:3>
|   | `-TextComment 0x559827456f90 <col:3> Text=" "
|   |-ParamCommandComment 0x559827456fe0 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827457070 <col:15, col:46>
|   |   `-TextComment 0x559827457040 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x5598274570c0 <line:362:3>
|   | `-TextComment 0x559827457090 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274570e0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x559827457140 <col:11, col:50>
|       `-TextComment 0x559827457110 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x55982733c9b8 prev 0x55982733c878 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:122:1 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55982733c930 <line:124:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_slist_t *'
| `-CompoundStmt 0x55982733d068 <line:163:2, line:175:2>
|   |-DeclStmt 0x55982733cb80 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x55982733ca70 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_snode_t *' cinit
|   |   `-CallExpr 0x55982733cb38 <<scratch space>:128:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_snode_t *'
|   |     |-ImplicitCastExpr 0x55982733cb20 <<scratch space>:128:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55982733cad0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332920 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |     `-ImplicitCastExpr 0x55982733cb68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_slist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55982733caf8 <col:35> 'sys_slist_t *' lvalue ParmVar 0x55982733c930 'list' 'sys_slist_t *'
|   |-CallExpr 0x55982733ccb0 <<scratch space>:130:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x55982733cc98 <<scratch space>:130:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55982733cb98 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559827332380 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x55982733cce8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55982733cbc0 <col:30> 'sys_slist_t *' lvalue ParmVar 0x55982733c930 'list' 'sys_slist_t *'
|   | `-CallExpr 0x55982733cc50 <<scratch space>:132:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x55982733cc38 <<scratch space>:132:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55982733cbe8 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x559827331d40 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   `-ImplicitCastExpr 0x55982733cc80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55982733cc10 <col:33> 'sys_snode_t *' lvalue Var 0x55982733ca70 'node' 'sys_snode_t *'
|   |-IfStmt 0x55982733cfa8 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55982733cdf0 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x55982733cd68 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x55982733cd50 <<scratch space>:134:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55982733cd00 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x55982733cd98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55982733cd28 <col:37> 'sys_slist_t *' lvalue ParmVar 0x55982733c930 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x55982733cdd8 <col:46> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55982733cdb0 <col:46> 'sys_snode_t *' lvalue Var 0x55982733ca70 'node' 'sys_snode_t *'
|   | |-CompoundStmt 0x55982733cf90 <col:52, line:172:3>
|   | | `-CallExpr 0x55982733cf40 <<scratch space>:136:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x55982733cf28 <<scratch space>:136:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55982733ce18 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559827332638 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x55982733cf78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55982733ce40 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55982733c930 'list' 'sys_slist_t *'
|   | |   `-CallExpr 0x55982733cee0 <<scratch space>:138:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_snode_t *'
|   | |     |-ImplicitCastExpr 0x55982733ceb8 <<scratch space>:138:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x55982733ce68 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332920 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |     `-ImplicitCastExpr 0x55982733cf10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_slist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55982733ce90 <col:35> 'sys_slist_t *' lvalue ParmVar 0x55982733c930 'list' 'sys_slist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55982733d020 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x55982733d008 <col:10> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55982733cfe0 <col:10> 'sys_snode_t *' lvalue Var 0x55982733ca70 'node' 'sys_snode_t *'
|-FunctionDecl 0x55982733d130 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:377:1, col:59> col:28 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55982733d0a8 <col:42, col:55> col:55 list 'sys_slist_t *'
| `-FullComment 0x559827457540 <line:369:3, line:375:69>
|   |-ParagraphComment 0x559827457240 <line:369:3>
|   | `-TextComment 0x559827457210 <col:3> Text=" "
|   |-BlockCommandComment 0x559827457260 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5598274572c0 <col:10, col:59>
|   |   `-TextComment 0x559827457290 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x559827457310 <line:371:3, col:62>
|   | `-TextComment 0x5598274572e0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x559827457360 <line:373:3>
|   | `-TextComment 0x559827457330 <col:3> Text=" "
|   |-ParamCommandComment 0x559827457380 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827457410 <col:15, col:46>
|   |   `-TextComment 0x5598274573e0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x559827457460 <line:375:3>
|   | `-TextComment 0x559827457430 <col:3> Text=" "
|   `-BlockCommandComment 0x559827457480 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x5598274574e0 <col:11, col:69>
|       `-TextComment 0x5598274574b0 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x55982733d270 prev 0x55982733d130 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:142:1 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55982733d1e8 <line:144:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_slist_t *'
| `-CompoundStmt 0x55982733d5f8 <line:180:2, line:183:2>
|   `-ReturnStmt 0x55982733d5b8 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x55982733d588 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x55982733d558 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x55982733d3e0 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x55982733d3c8 <<scratch space>:146:1> 'bool (*)(sys_slist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55982733d318 <col:1> 'bool (sys_slist_t *)' Function 0x559827332ff0 'sys_slist_is_empty' 'bool (sys_slist_t *)'
|       |   `-ImplicitCastExpr 0x55982733d410 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_slist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55982733d340 <col:39> 'sys_slist_t *' lvalue ParmVar 0x55982733d1e8 'list' 'sys_slist_t *'
|       |-ImplicitCastExpr 0x55982733d570 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       | `-ParenExpr 0x55982733d488 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x55982733d460 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x55982733d428 <col:23> 'int' 0
|       `-CallExpr 0x55982733d510 <<scratch space>:148:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|         |-ImplicitCastExpr 0x55982733d4f8 <<scratch space>:148:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55982733d4a8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55982733c9b8 'sys_slist_get_not_empty' 'sys_snode_t *(sys_slist_t *)'
|         `-ImplicitCastExpr 0x55982733d540 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_slist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55982733d4d0 <col:38> 'sys_slist_t *' lvalue ParmVar 0x55982733d1e8 'list' 'sys_slist_t *'
|-FunctionDecl 0x55982733d798 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:391:1, line:393:26> line:391:20 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55982733d620 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x55982733d690 <line:392:9, col:22> col:22 prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x55982733d700 <line:393:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x5598274579e0 <line:382:3, line:389:46>
|   |-ParagraphComment 0x5598274575e0 <line:382:3>
|   | `-TextComment 0x5598274575b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827457600 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x559827457660 <col:10, col:23>
|   |   `-TextComment 0x559827457630 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x5598274576b0 <line:384:3, col:62>
|   | `-TextComment 0x559827457680 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x559827457700 <line:386:3>
|   | `-TextComment 0x5598274576d0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827457720 <col:4, line:387:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5598274577d0 <line:386:15, line:387:3>
|   |   |-TextComment 0x559827457780 <line:386:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5598274577a0 <line:387:3> Text=" "
|   |-ParamCommandComment 0x5598274577f0 <col:4, line:389:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x5598274578d0 <line:387:20, line:389:3>
|   |   |-TextComment 0x559827457850 <line:387:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x559827457870 <line:388:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x559827457890 <line:389:3> Text=" "
|   `-ParamCommandComment 0x5598274578f0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x559827457980 <col:15, col:46>
|       `-TextComment 0x559827457950 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x55982733d9d8 prev 0x55982733d798 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:150:1 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55982733d860 <line:152:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55982733d8d0 <<scratch space>:154:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x55982733d940 <<scratch space>:156:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x55982733e5a8 <line:190:2, line:212:2>
|   |-IfStmt 0x55982733e3f8 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55982733db68 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x55982733db38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55982733da90 <col:7> 'sys_snode_t *' lvalue ParmVar 0x55982733d8d0 'prev_node' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x55982733db50 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x55982733db18 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55982733daf0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55982733dab8 <col:23> 'int' 0
|   | |-CompoundStmt 0x55982733dff0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x55982733dca8 <<scratch space>:158:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x55982733dc90 <<scratch space>:158:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55982733db90 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559827332380 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | | | |-ImplicitCastExpr 0x55982733dce0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_slist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55982733dbb8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55982733d860 'list' 'sys_slist_t *'
|   | | | `-CallExpr 0x55982733dc48 <<scratch space>:160:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_snode_t *'
|   | | |   |-ImplicitCastExpr 0x55982733dc30 <<scratch space>:160:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x55982733dbe0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x559827331d40 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   | | |   `-ImplicitCastExpr 0x55982733dc78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_snode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55982733dc08 <col:33> 'sys_snode_t *' lvalue ParmVar 0x55982733d940 'node' 'sys_snode_t *'
|   | | `-IfStmt 0x55982733dfb8 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x55982733dde8 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x55982733dd60 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_snode_t *'
|   | |   | | |-ImplicitCastExpr 0x55982733dd48 <<scratch space>:162:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x55982733dcf8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | |   | | `-ImplicitCastExpr 0x55982733dd90 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_slist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x55982733dd20 <col:38> 'sys_slist_t *' lvalue ParmVar 0x55982733d860 'list' 'sys_slist_t *'
|   | |   | `-ImplicitCastExpr 0x55982733ddd0 <col:47> 'sys_snode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x55982733dda8 <col:47> 'sys_snode_t *' lvalue ParmVar 0x55982733d940 'node' 'sys_snode_t *'
|   | |   |-CompoundStmt 0x55982733dfa0 <col:53, line:199:4>
|   | |   | `-CallExpr 0x55982733df50 <<scratch space>:164:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x55982733df38 <<scratch space>:164:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x55982733de10 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559827332638 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |   |-ImplicitCastExpr 0x55982733df88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_slist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x55982733de38 <col:32> 'sys_slist_t *' lvalue ParmVar 0x55982733d860 'list' 'sys_slist_t *'
|   | |   |   `-CallExpr 0x55982733def0 <<scratch space>:166:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_snode_t *'
|   | |   |     |-ImplicitCastExpr 0x55982733deb0 <<scratch space>:166:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x55982733de60 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332920 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   |     `-ImplicitCastExpr 0x55982733df20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_slist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x55982733de88 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55982733d860 'list' 'sys_slist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x55982733e3d8 <line:200:10, line:209:3>
|   |   |-CallExpr 0x55982733e128 <<scratch space>:168:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x55982733e110 <<scratch space>:168:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x55982733e010 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x559827332040 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |   | |-ImplicitCastExpr 0x55982733e160 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_snode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x55982733e038 <col:31> 'sys_snode_t *' lvalue ParmVar 0x55982733d8d0 'prev_node' 'sys_snode_t *'
|   |   | `-CallExpr 0x55982733e0c8 <<scratch space>:170:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_snode_t *'
|   |   |   |-ImplicitCastExpr 0x55982733e0b0 <<scratch space>:170:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x55982733e060 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x559827331d40 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   |   `-ImplicitCastExpr 0x55982733e0f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_snode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55982733e088 <col:33> 'sys_snode_t *' lvalue ParmVar 0x55982733d940 'node' 'sys_snode_t *'
|   |   `-IfStmt 0x55982733e3a0 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x55982733e268 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x55982733e1e0 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_snode_t *'
|   |     | | |-ImplicitCastExpr 0x55982733e1c8 <<scratch space>:172:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x55982733e178 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332c08 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | | `-ImplicitCastExpr 0x55982733e210 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_slist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55982733e1a0 <col:38> 'sys_slist_t *' lvalue ParmVar 0x55982733d860 'list' 'sys_slist_t *'
|   |     | `-ImplicitCastExpr 0x55982733e250 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55982733e228 <col:47> 'sys_snode_t *' lvalue ParmVar 0x55982733d940 'node' 'sys_snode_t *'
|   |     |-CompoundStmt 0x55982733e388 <col:53, line:208:4>
|   |     | `-CallExpr 0x55982733e320 <<scratch space>:174:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x55982733e308 <<scratch space>:174:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x55982733e290 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x559827332638 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   |     |   |-ImplicitCastExpr 0x55982733e358 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_slist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x55982733e2b8 <col:32> 'sys_slist_t *' lvalue ParmVar 0x55982733d860 'list' 'sys_slist_t *'
|   |     |   `-ImplicitCastExpr 0x55982733e370 <line:207:13> 'sys_snode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55982733e2e0 <col:13> 'sys_snode_t *' lvalue ParmVar 0x55982733d8d0 'prev_node' 'sys_snode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x55982733e518 <<scratch space>:176:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x55982733e500 <<scratch space>:176:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982733e430 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x559827332040 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x55982733e550 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_snode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x55982733e458 <col:30> 'sys_snode_t *' lvalue ParmVar 0x55982733d940 'node' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x55982733e568 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       `-ParenExpr 0x55982733e4e0 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x55982733e4b8 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x55982733e480 <col:23> 'int' 0
|-FunctionDecl 0x55982733e760 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:407:1, line:408:28> line:407:20 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55982733e5d8 <col:46, col:59> col:59 list 'sys_slist_t *'
| |-ParmVarDecl 0x55982733e648 <line:408:11, col:24> col:24 node 'sys_snode_t *'
| `-FullComment 0x559827457e70 <line:398:3, line:405:35>
|   |-ParagraphComment 0x559827457a80 <line:398:3>
|   | `-TextComment 0x559827457a50 <col:3> Text=" "
|   |-BlockCommandComment 0x559827457aa0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559827457b00 <col:10, col:44>
|   |   `-TextComment 0x559827457ad0 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x559827457b50 <line:400:3, col:62>
|   | `-TextComment 0x559827457b20 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x559827457bc0 <line:402:3>
|   | `-TextComment 0x559827457b90 <col:3> Text=" "
|   |-ParamCommandComment 0x559827457be0 <col:4, line:403:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827457c90 <line:402:15, line:403:3>
|   |   |-TextComment 0x559827457c40 <line:402:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x559827457c60 <line:403:3> Text=" "
|   |-ParamCommandComment 0x559827457cb0 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x559827457d40 <col:15, col:60>
|   |   `-TextComment 0x559827457d10 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x559827457d90 <line:405:3>
|   | `-TextComment 0x559827457d60 <col:3> Text=" "
|   `-BlockCommandComment 0x559827457db0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827457e10 <col:11, col:35>
|       `-TextComment 0x559827457de0 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x55982733e920 prev 0x55982733e760 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:178:1 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55982733e820 <line:180:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55982733e890 <<scratch space>:182:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_snode_t *'
| `-CompoundStmt 0x559827341468 <line:218:2, line:233:2>
|   |-DeclStmt 0x55982733ead8 <<scratch space>:184:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x55982733e9e0 <<scratch space>:184:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_snode_t *' cinit
|   |   `-ImplicitCastExpr 0x55982733eac0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |     `-ParenExpr 0x55982733eaa0 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x55982733ea78 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x55982733ea40 <col:23> 'int' 0
|   |-DeclStmt 0x55982733eb60 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x55982733eb00 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_snode_t *'
|   |-ForStmt 0x5598273413b0 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x55982733ec50 <line:222:42, line:15:47> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x55982733eb78 <line:222:42> 'sys_snode_t *' lvalue Var 0x55982733eb00 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x55982733ec08 <<scratch space>:188:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x55982733ebf0 <<scratch space>:188:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55982733eba0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x559827332920 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   `-ImplicitCastExpr 0x55982733ec38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_slist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55982733ebc8 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55982733e820 'list' 'sys_slist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55982733ed50 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x55982733ed20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55982733ec78 <col:42> 'sys_snode_t *' lvalue Var 0x55982733eb00 'test' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x55982733ed38 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x55982733ed00 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55982733ecd8 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55982733eca0 <col:23> 'int' 0
|   | |-BinaryOperator 0x55982733ee50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x55982733ed78 <line:222:42> 'sys_snode_t *' lvalue Var 0x55982733eb00 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x55982733ee08 <<scratch space>:190:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x55982733edf0 <<scratch space>:190:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55982733eda0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5598273338b8 'sys_slist_peek_next' 'sys_snode_t *(sys_snode_t *)'
|   | |   `-ImplicitCastExpr 0x55982733ee38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55982733edc8 <col:42> 'sys_snode_t *' lvalue Var 0x55982733eb00 'test' 'sys_snode_t *'
|   | `-CompoundStmt 0x559827341390 <col:48, line:230:3>
|   |   |-IfStmt 0x5598273412c8 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x559827341098 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x55982733eec8 <col:8> 'sys_snode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x55982733ee78 <col:8> 'sys_snode_t *' lvalue Var 0x55982733eb00 'test' 'sys_snode_t *'
|   |   | | `-ImplicitCastExpr 0x559827341080 <col:16> 'sys_snode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55982733eea0 <col:16> 'sys_snode_t *' lvalue ParmVar 0x55982733e890 'node' 'sys_snode_t *'
|   |   | |-CompoundStmt 0x5598273412a8 <col:22, line:227:4>
|   |   | | |-CallExpr 0x5598273411d0 <<scratch space>:192:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x5598273411b8 <<scratch space>:192:1> 'void (*)(sys_slist_t *, sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x5598273410c0 <col:1> 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' Function 0x55982733d9d8 'sys_slist_remove' 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)'
|   |   | | | |-ImplicitCastExpr 0x559827341210 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_slist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x5598273410e8 <col:32> 'sys_slist_t *' lvalue ParmVar 0x55982733e820 'list' 'sys_slist_t *'
|   |   | | | |-ImplicitCastExpr 0x559827341228 <col:38> 'sys_snode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x559827341110 <col:38> 'sys_snode_t *' lvalue Var 0x55982733e9e0 'prev' 'sys_snode_t *'
|   |   | | | `-ImplicitCastExpr 0x559827341240 <line:225:11> 'sys_snode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x559827341138 <col:11> 'sys_snode_t *' lvalue ParmVar 0x55982733e890 'node' 'sys_snode_t *'
|   |   | | `-ReturnStmt 0x559827341290 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x559827341278 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x559827341258 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x559827341368 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_snode_t *' '='
|   |     |-DeclRefExpr 0x559827341300 <col:4> 'sys_snode_t *' lvalue Var 0x55982733e9e0 'prev' 'sys_snode_t *'
|   |     `-ImplicitCastExpr 0x559827341350 <col:11> 'sys_snode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x559827341328 <col:11> 'sys_snode_t *' lvalue Var 0x55982733eb00 'test' 'sys_snode_t *'
|   `-ReturnStmt 0x559827341420 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x559827341408 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x5598273413e8 <col:16> 'int' 0
|-TypedefDecl 0x5598273414d0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:29:1, col:15> col:15 referenced unative_t 'u64_t':'unsigned long long'
| `-TypedefType 0x5598273414a0 'u64_t' sugar
|   |-Typedef 0x559827298920 'u64_t'
|   `-BuiltinType 0x55982722a870 'unsigned long long'
|-RecordDecl 0x559827341528 <line:34:1, line:36:1> line:34:8 struct _sfnode definition
| `-FieldDecl 0x559827341600 <line:35:2, col:12> col:12 referenced next_and_flags 'unative_t':'unsigned long long'
|-TypedefDecl 0x5598273416a0 <line:38:1, col:24> col:24 referenced sys_sfnode_t 'struct _sfnode':'struct _sfnode'
| `-ElaboratedType 0x559827341650 'struct _sfnode' sugar
|   `-RecordType 0x5598273415b0 'struct _sfnode'
|     `-Record 0x559827341528 '_sfnode'
|-RecordDecl 0x5598273416f8 <line:40:1, line:43:1> line:40:8 struct _sflist definition
| |-FieldDecl 0x559827341828 <line:41:2, col:16> col:16 referenced head 'sys_sfnode_t *'
| `-FieldDecl 0x559827341880 <line:42:2, col:16> col:16 referenced tail 'sys_sfnode_t *'
|-TypedefDecl 0x559827341920 <line:45:1, col:24> col:24 referenced sys_sflist_t 'struct _sflist':'struct _sflist'
| `-ElaboratedType 0x5598273418d0 'struct _sflist' sugar
|   `-RecordType 0x559827341780 'struct _sflist'
|     `-Record 0x5598273416f8 '_sflist'
|-FunctionDecl 0x559827341c30 <line:196:1, line:200:1> line:196:20 used sys_sflist_init 'void (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559827341b28 <col:36, col:50> col:50 used list 'sys_sflist_t *'
| |-CompoundStmt 0x559827341f48 <line:197:1, line:200:1>
| | |-BinaryOperator 0x559827341de8 <line:198:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| | | |-MemberExpr 0x559827341d18 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:198:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x559827341828
| | | | `-ImplicitCastExpr 0x559827341d00 <col:2> 'sys_sflist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x559827341cd8 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x559827341b28 'list' 'sys_sflist_t *'
| | | `-ImplicitCastExpr 0x559827341dd0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| | |   `-ParenExpr 0x559827341db0 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x559827341d88 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x559827341d50 <col:23> 'int' 0
| | `-BinaryOperator 0x559827341f20 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| |   |-MemberExpr 0x559827341e50 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x559827341880
| |   | `-ImplicitCastExpr 0x559827341e38 <col:2> 'sys_sflist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x559827341e10 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x559827341b28 'list' 'sys_sflist_t *'
| |   `-ImplicitCastExpr 0x559827341f08 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| |     `-ParenExpr 0x559827341ee8 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x559827341ec0 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x559827341e88 <col:23> 'int' 0
| `-FullComment 0x5598274580d0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:192:3, line:194:50>
|   |-ParagraphComment 0x559827457f10 <line:192:3>
|   | `-TextComment 0x559827457ee0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827457f30 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x559827457f90 <col:10, col:27>
|   |   `-TextComment 0x559827457f60 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x559827457fe0 <line:194:3>
|   | `-TextComment 0x559827457fb0 <col:3> Text=" "
|   `-ParamCommandComment 0x559827458000 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x559827458090 <col:15, col:50>
|       `-TextComment 0x559827458060 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x5598273466c0 <line:205:1, line:208:1> line:205:29 used z_sfnode_next_peek 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559827341f78 <col:48, col:62> col:62 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x559827346918 <line:206:1, line:208:1>
|   `-ReturnStmt 0x559827346900 <line:207:2, col:71>
|     `-CStyleCastExpr 0x5598273468d8 <col:9, col:71> 'sys_sfnode_t *' <IntegralToPointer>
|       `-ParenExpr 0x5598273468b8 <col:25, col:71> 'unsigned long long'
|         `-BinaryOperator 0x559827346850 <col:26, line:203:31> 'unsigned long long' '&'
|           |-ImplicitCastExpr 0x559827346820 <line:207:26, col:32> 'unative_t':'unsigned long long' <LValueToRValue>
|           | `-MemberExpr 0x5598273467a8 <col:26, col:32> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x559827341600
|           |   `-ImplicitCastExpr 0x559827346790 <col:26> 'sys_sfnode_t *' <LValueToRValue>
|           |     `-DeclRefExpr 0x559827346768 <col:26> 'sys_sfnode_t *' lvalue ParmVar 0x559827341f78 'node' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x559827346838 <col:49, line:203:31> 'unsigned long long' <IntegralCast>
|             `-UnaryOperator 0x559827346800 <line:207:49, line:203:31> 'unsigned long' prefix '~'
|               `-IntegerLiteral 0x5598273467e0 <col:31> 'unsigned long' 3
|-FunctionDecl 0x559827346a40 <line:210:1, col:59> col:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| `-ParmVarDecl 0x559827346940 <col:41, col:55> col:55 node 'sys_sfnode_t *'
|-FunctionDecl 0x559827346c80 <line:212:1, line:218:1> line:212:20 used z_sfnode_next_set 'void (sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559827346af8 <col:38, col:52> col:52 used parent 'sys_sfnode_t *'
| |-ParmVarDecl 0x559827346b68 <line:213:12, col:26> col:26 used child 'sys_sfnode_t *'
| `-CompoundStmt 0x559827347058 <line:214:1, line:218:1>
|   |-DeclStmt 0x559827346ea8 <line:215:2, col:47>
|   | `-VarDecl 0x559827346d40 <col:2, col:46> col:7 used cur_flags 'u8_t':'unsigned char' cinit
|   |   `-CallExpr 0x559827346e60 <col:19, col:46> 'u8_t':'unsigned char'
|   |     |-ImplicitCastExpr 0x559827346e48 <col:19> 'u8_t (*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559827346da0 <col:19> 'u8_t (sys_sfnode_t *)' Function 0x559827346a40 'sys_sfnode_flags_get' 'u8_t (sys_sfnode_t *)'
|   |     `-ImplicitCastExpr 0x559827346e90 <col:40> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x559827346dc8 <col:40> 'sys_sfnode_t *' lvalue ParmVar 0x559827346af8 'parent' 'sys_sfnode_t *'
|   `-BinaryOperator 0x559827347030 <line:217:2, col:50> 'unative_t':'unsigned long long' '='
|     |-MemberExpr 0x559827346f00 <col:2, col:10> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x559827341600
|     | `-ImplicitCastExpr 0x559827346ee8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x559827346ec0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x559827346af8 'parent' 'sys_sfnode_t *'
|     `-BinaryOperator 0x559827347008 <col:27, col:50> 'unsigned long long' '|'
|       |-ImplicitCastExpr 0x559827346ff0 <col:27> 'unsigned long long' <IntegralCast>
|       | `-ImplicitCastExpr 0x559827346fd8 <col:27> 'u8_t':'unsigned char' <LValueToRValue>
|       |   `-DeclRefExpr 0x559827346f38 <col:27> 'u8_t':'unsigned char' lvalue Var 0x559827346d40 'cur_flags' 'u8_t':'unsigned char'
|       `-CStyleCastExpr 0x559827346fb0 <col:39, col:50> 'unative_t':'unsigned long long' <PointerToIntegral>
|         `-ImplicitCastExpr 0x559827346f98 <col:50> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x559827346f60 <col:50> 'sys_sfnode_t *' lvalue ParmVar 0x559827346b68 'child' 'sys_sfnode_t *'
|-FunctionDecl 0x559827347210 <line:220:1, line:223:1> line:220:20 used z_sflist_head_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559827347088 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5598273470f8 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5598273473a0 <line:221:1, line:223:1>
|   `-BinaryOperator 0x559827347378 <line:222:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x559827347300 <col:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x559827341828
|     | `-ImplicitCastExpr 0x5598273472e8 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5598273472c0 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x559827347088 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x559827347360 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559827347338 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x5598273470f8 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5598273474c8 <line:225:1, line:228:1> line:225:20 used z_sflist_tail_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5598273473c8 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x559827347438 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x559827347688 <line:226:1, line:228:1>
|   `-BinaryOperator 0x559827347630 <line:227:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x5598273475b8 <col:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x559827341880
|     | `-ImplicitCastExpr 0x5598273475a0 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x559827347578 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x5598273473c8 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x559827347618 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5598273475f0 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x559827347438 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5598273487e0 <line:237:1, line:240:1> line:237:29 used sys_sflist_peek_head 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5598273486e0 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x559827348958 <line:238:1, line:240:1>
| | `-ReturnStmt 0x559827348918 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x559827348900 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x5598273488c8 <col:9, col:15> 'sys_sfnode_t *' lvalue ->head 0x559827341828
| |       `-ImplicitCastExpr 0x5598273488b0 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x559827348888 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x5598273486e0 'list' 'sys_sflist_t *'
| `-FullComment 0x559827458410 <line:231:3, line:235:68>
|   |-ParagraphComment 0x559827458170 <line:231:3>
|   | `-TextComment 0x559827458140 <col:3> Text=" "
|   |-BlockCommandComment 0x559827458190 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5598274581f0 <col:10, col:43>
|   |   `-TextComment 0x5598274581c0 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x559827458240 <line:233:3>
|   | `-TextComment 0x559827458210 <col:3> Text=" "
|   |-ParamCommandComment 0x559827458260 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5598274582f0 <col:15, col:62>
|   |   `-TextComment 0x5598274582c0 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x559827458340 <line:235:3>
|   | `-TextComment 0x559827458310 <col:3> Text=" "
|   `-BlockCommandComment 0x559827458360 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x5598274583c0 <col:11, col:68>
|       `-TextComment 0x559827458390 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x559827348a08 <line:249:1, line:252:1> line:249:29 used sys_sflist_peek_tail 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559827348980 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x559827348b88 <line:250:1, line:252:1>
| | `-ReturnStmt 0x559827348b40 <line:251:2, col:15>
| |   `-ImplicitCastExpr 0x559827348b28 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x559827348af0 <col:9, col:15> 'sys_sfnode_t *' lvalue ->tail 0x559827341880
| |       `-ImplicitCastExpr 0x559827348ad8 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x559827348ab0 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x559827348980 'list' 'sys_sflist_t *'
| `-FullComment 0x559827458750 <line:243:3, line:247:67>
|   |-ParagraphComment 0x5598274584b0 <line:243:3>
|   | `-TextComment 0x559827458480 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274584d0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x559827458530 <col:10, col:42>
|   |   `-TextComment 0x559827458500 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x559827458580 <line:245:3>
|   | `-TextComment 0x559827458550 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274585a0 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x559827458630 <col:15, col:61>
|   |   `-TextComment 0x559827458600 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x559827458680 <line:247:3>
|   | `-TextComment 0x559827458650 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274586a0 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x559827458700 <col:11, col:67>
|       `-TextComment 0x5598274586d0 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x559827348c38 prev 0x559827346a40 <line:264:1, line:267:1> line:264:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559827348bb0 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-CompoundStmt 0x559827348e28 <line:265:1, line:267:1>
| | `-ReturnStmt 0x559827348de8 <line:266:2, line:203:31>
| |   `-ImplicitCastExpr 0x559827348dd0 <line:266:9, line:203:31> 'u8_t':'unsigned char' <IntegralCast>
| |     `-BinaryOperator 0x559827348da8 <line:266:9, line:203:31> 'unsigned long long' '&'
| |       |-ImplicitCastExpr 0x559827348d78 <line:266:9, col:15> 'unative_t':'unsigned long long' <LValueToRValue>
| |       | `-MemberExpr 0x559827348d20 <col:9, col:15> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x559827341600
| |       |   `-ImplicitCastExpr 0x559827348d08 <col:9> 'sys_sfnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x559827348ce0 <col:9> 'sys_sfnode_t *' lvalue ParmVar 0x559827348bb0 'node' 'sys_sfnode_t *'
| |       `-ImplicitCastExpr 0x559827348d90 <line:203:31> 'unsigned long long' <IntegralCast>
| |         `-IntegerLiteral 0x559827348d58 <col:31> 'unsigned long' 3
| `-FullComment 0x559827458a60 <line:259:3, line:262:60>
|   |-ParagraphComment 0x5598274587f0 <line:259:3>
|   | `-TextComment 0x5598274587c0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827458810 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x559827458870 <col:10, col:51>
|   |   `-TextComment 0x559827458840 <col:10, col:51> Text=" Fetch flags value for a particular sfnode"
|   |-ParagraphComment 0x5598274588c0 <line:261:3>
|   | `-TextComment 0x559827458890 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274588e0 <col:4, line:262:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x559827458990 <line:261:15, line:262:3>
|   |   |-TextComment 0x559827458940 <line:261:15, col:56> Text=" A pointer to the node to fetch flags from"
|   |   `-TextComment 0x559827458960 <line:262:3> Text=" "
|   `-BlockCommandComment 0x5598274589b0 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x559827458a10 <col:11, col:60>
|       `-TextComment 0x5598274589e0 <col:11, col:60> Text=" The value of flags, which will be between 0 and 3"
|-FunctionDecl 0x559827348fd0 <line:282:1, line:286:1> line:282:20 sys_sfnode_init 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x559827348e50 <col:36, col:50> col:50 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x559827348ec0 <col:56, col:61> col:61 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x5598273491c8 <line:283:1, line:286:1>
| | |-CompoundStmt 0x559827349080 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x559827349090 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:284:70>
| | `-BinaryOperator 0x559827349170 <line:285:2, col:25> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x5598273490e0 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x559827341600
| |   | `-ImplicitCastExpr 0x5598273490c8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5598273490a0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x559827348e50 'node' 'sys_sfnode_t *'
| |   `-ImplicitCastExpr 0x559827349158 <col:25> 'unative_t':'unsigned long long' <IntegralCast>
| |     `-ImplicitCastExpr 0x559827349140 <col:25> 'u8_t':'unsigned char' <LValueToRValue>
| |       `-DeclRefExpr 0x559827349118 <col:25> 'u8_t':'unsigned char' lvalue ParmVar 0x559827348ec0 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x559827458ec0 <line:270:3, line:280:62>
|   |-ParagraphComment 0x559827458b00 <line:270:3>
|   | `-TextComment 0x559827458ad0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827458b20 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x559827458b80 <col:10, col:35>
|   |   `-TextComment 0x559827458b50 <col:10, col:35> Text=" Initialize an sflist node"
|   |-ParagraphComment 0x559827458c20 <line:272:3, line:274:64>
|   | |-TextComment 0x559827458ba0 <line:272:3, col:79> Text=" Set an initial flags value for this slist node, which can be a value between"
|   | |-TextComment 0x559827458bc0 <line:273:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x559827458be0 <line:274:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x559827458c90 <line:276:3, line:277:61>
|   | |-TextComment 0x559827458c40 <line:276:3, col:73> Text=" This is ever so slightly faster than sys_sfnode_flags_set() and should"
|   | `-TextComment 0x559827458c60 <line:277:3, col:61> Text=" only be used on a node that hasn't been added to any list."
|   |-ParagraphComment 0x559827458ce0 <line:279:3>
|   | `-TextComment 0x559827458cb0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827458d00 <col:4, line:280:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x559827458db0 <line:279:15, line:280:3>
|   |   |-TextComment 0x559827458d60 <line:279:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x559827458d80 <line:280:3> Text=" "
|   `-ParamCommandComment 0x559827458dd0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x559827458e60 <col:16, col:62>
|       `-TextComment 0x559827458e30 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x559827349300 <line:298:1, line:302:1> line:298:20 sys_sfnode_flags_set 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x559827349200 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x559827349270 <col:61, col:66> col:66 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x5598273496b8 <line:299:1, line:302:1>
| | |-CompoundStmt 0x5598273493b0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x5598273493c0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:300:70>
| | `-BinaryOperator 0x559827349660 <line:301:2, col:65> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x559827349410 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x559827341600
| |   | `-ImplicitCastExpr 0x5598273493f8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5598273493d0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x559827349200 'node' 'sys_sfnode_t *'
| |   `-BinaryOperator 0x559827349638 <col:25, col:65> 'unsigned long long' '|'
| |     |-CStyleCastExpr 0x5598273495b8 <col:25, col:61> 'unative_t':'unsigned long long' <PointerToIntegral>
| |     | `-ParenExpr 0x559827349598 <col:36, col:61> 'sys_sfnode_t *'
| |     |   `-CallExpr 0x559827349510 <col:37, col:60> 'sys_sfnode_t *'
| |     |     |-ImplicitCastExpr 0x5598273494f8 <col:37> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x559827349448 <col:37> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5598273466c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
| |     |     `-ImplicitCastExpr 0x559827349540 <col:56> 'sys_sfnode_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x559827349470 <col:56> 'sys_sfnode_t *' lvalue ParmVar 0x559827349200 'node' 'sys_sfnode_t *'
| |     `-ImplicitCastExpr 0x559827349620 <col:65> 'unsigned long long' <IntegralCast>
| |       `-ImplicitCastExpr 0x559827349608 <col:65> 'u8_t':'unsigned char' <LValueToRValue>
| |         `-DeclRefExpr 0x5598273495e0 <col:65> 'u8_t':'unsigned char' lvalue ParmVar 0x559827349270 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x5598274592a0 <line:289:3, line:296:62>
|   |-ParagraphComment 0x559827458f60 <line:289:3>
|   | `-TextComment 0x559827458f30 <col:3> Text=" "
|   |-BlockCommandComment 0x559827458f80 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559827458fe0 <col:10, col:44>
|   |   `-TextComment 0x559827458fb0 <col:10, col:44> Text=" Set flags value for an sflist node"
|   |-ParagraphComment 0x559827459080 <line:291:3, line:293:64>
|   | |-TextComment 0x559827459000 <line:291:3, col:70> Text=" Set a flags value for this slist node, which can be a value between"
|   | |-TextComment 0x559827459020 <line:292:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x559827459040 <line:293:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x5598274590d0 <line:295:3>
|   | `-TextComment 0x5598274590a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274590f0 <col:4, line:296:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5598274591a0 <line:295:15, line:296:3>
|   |   |-TextComment 0x559827459150 <line:295:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x559827459170 <line:296:3> Text=" "
|   `-ParamCommandComment 0x5598274591c0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x559827459250 <col:16, col:62>
|       `-TextComment 0x559827459220 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x559827349800 <line:315:1, col:58> col:20 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559827349700 <col:40, col:54> col:54 list 'sys_sflist_t *'
| `-FullComment 0x5598274595e0 <line:309:3, line:313:57>
|   |-ParagraphComment 0x559827459340 <line:309:3>
|   | `-TextComment 0x559827459310 <col:3> Text=" "
|   |-BlockCommandComment 0x559827459360 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5598274593c0 <col:10, col:41>
|   |   `-TextComment 0x559827459390 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x559827459410 <line:311:3>
|   | `-TextComment 0x5598274593e0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827459430 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5598274594c0 <col:15, col:44>
|   |   `-TextComment 0x559827459490 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x559827459510 <line:313:3>
|   | `-TextComment 0x5598274594e0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827459530 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x559827459590 <col:11, col:57>
|       `-TextComment 0x559827459560 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x559827349940 prev 0x559827349800 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:194:1 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5598273498b8 <line:196:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_sflist_t *'
| `-CompoundStmt 0x559827349c38 <line:60:2, line:62:2>
|   `-ReturnStmt 0x559827349bf0 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x559827349bd8 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x559827349bb8 <col:10, col:54> 'int'
|         `-BinaryOperator 0x559827349b90 <<scratch space>:198:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x559827349ab0 <<scratch space>:198:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_sfnode_t *'
|           | |-ImplicitCastExpr 0x559827349a98 <<scratch space>:198:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x5598273499e8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5598273487e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|           | `-ImplicitCastExpr 0x559827349ae0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_sflist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x559827349a10 <col:41> 'sys_sflist_t *' lvalue ParmVar 0x5598273498b8 'list' 'sys_sflist_t *'
|           `-ImplicitCastExpr 0x559827349b78 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|             `-ParenExpr 0x559827349b58 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x559827349b30 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x559827349af8 <col:23> 'int' 0
|-FunctionDecl 0x559827349ce8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:328:1, col:77> col:29 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559827349c60 <col:59, col:73> col:73 node 'sys_sfnode_t *'
| `-FullComment 0x559827459980 <line:320:3, line:326:55>
|   |-ParagraphComment 0x559827459680 <line:320:3>
|   | `-TextComment 0x559827459650 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274596a0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x559827459700 <col:10, col:64>
|   |   `-TextComment 0x5598274596d0 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x559827459750 <line:322:3, col:70>
|   | `-TextComment 0x559827459720 <col:3, col:70> Text=" Faster then sys_sflist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x5598274597a0 <line:324:3>
|   | `-TextComment 0x559827459770 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274597c0 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x559827459850 <col:15, col:64>
|   |   `-TextComment 0x559827459820 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x5598274598a0 <line:326:3>
|   | `-TextComment 0x559827459870 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274598c0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x559827459920 <col:11, col:55>
|       `-TextComment 0x5598274598f0 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x559827349e28 prev 0x559827349ce8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:202:1 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559827349da0 <line:204:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x559827349fc8 <line:67:2, line:69:2>
|   `-ReturnStmt 0x559827349f80 <line:68:3, col:42>
|     `-CallExpr 0x559827349f38 <<scratch space>:206:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x559827349f20 <<scratch space>:206:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827349ed0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5598273466c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       `-ImplicitCastExpr 0x559827349f68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_sfnode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x559827349ef8 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x559827349da0 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55982734a078 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:339:1, col:68> col:29 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559827349ff0 <col:50, col:64> col:64 node 'sys_sfnode_t *'
| `-FullComment 0x55982745ace0 <line:333:3, line:337:55>
|   |-ParagraphComment 0x559827459a20 <line:333:3>
|   | `-TextComment 0x5598274599f0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827459a40 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x559827459aa0 <col:10, col:46>
|   |   `-TextComment 0x559827459a70 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x559827459af0 <line:335:3>
|   | `-TextComment 0x559827459ac0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827459b10 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55982745abc0 <col:15, col:64>
|   |   `-TextComment 0x559827459b70 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x55982745ac10 <line:337:3>
|   | `-TextComment 0x55982745abe0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982745ac30 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55982745ac90 <col:11, col:55>
|       `-TextComment 0x55982745ac60 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x55982734a1b8 prev 0x55982734a078 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:210:1 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55982734a130 <line:212:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55982734a518 <line:74:2, line:78:2>
|   `-ReturnStmt 0x55982734a4d8 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x55982734a4a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *'
|       |-BinaryOperator 0x55982734a338 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x55982734a308 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_sfnode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x55982734a260 <col:10> 'sys_sfnode_t *' lvalue ParmVar 0x55982734a130 'node' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x55982734a320 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x55982734a2e8 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x55982734a2c0 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x55982734a288 <col:23> 'int' 0
|       |-CallExpr 0x55982734a3c8 <<scratch space>:214:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x55982734a3b0 <<scratch space>:214:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55982734a360 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x559827349e28 'sys_sflist_peek_next_no_check' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | `-ImplicitCastExpr 0x55982734a3f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x55982734a388 <col:43> 'sys_sfnode_t *' lvalue ParmVar 0x55982734a130 'node' 'sys_sfnode_t *'
|       `-ImplicitCastExpr 0x55982734a490 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|         `-ParenExpr 0x55982734a470 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x55982734a448 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x55982734a410 <col:23> 'int' 0
|-FunctionDecl 0x55982734a640 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:351:1, line:352:29> line:351:20 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55982734a540 <col:39, col:53> col:53 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55982734a5b0 <line:352:11, col:25> col:25 node 'sys_sfnode_t *'
| `-FullComment 0x55982745b070 <line:344:3, line:349:47>
|   |-ParagraphComment 0x55982745ad80 <line:344:3>
|   | `-TextComment 0x55982745ad50 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745ada0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55982745ae00 <col:10, col:42>
|   |   `-TextComment 0x55982745add0 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x55982745ae50 <line:346:3, col:63>
|   | `-TextComment 0x55982745ae20 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55982745aea0 <line:348:3>
|   | `-TextComment 0x55982745ae70 <col:3> Text=" "
|   |-ParamCommandComment 0x55982745aec0 <col:4, line:349:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55982745af70 <line:348:15, line:349:3>
|   |   |-TextComment 0x55982745af20 <line:348:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55982745af40 <line:349:3> Text=" "
|   `-ParamCommandComment 0x55982745af90 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55982745b020 <col:15, col:47>
|       `-TextComment 0x55982745aff0 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x55982734a810 prev 0x55982734a640 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:216:1 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55982734a710 <line:218:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55982734a780 <<scratch space>:220:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55982734af28 <line:84:2, line:93:2>
|   |-CallExpr 0x55982734aa30 <<scratch space>:222:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x55982734aa18 <<scratch space>:222:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55982734a8c0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x559827346c80 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x55982734aa68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55982734a8e8 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x55982734a780 'node' 'sys_sfnode_t *'
|   | `-CallExpr 0x55982734a978 <<scratch space>:224:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x55982734a960 <<scratch space>:224:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55982734a910 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5598273487e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x55982734a9a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55982734a938 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55982734a710 'list' 'sys_sflist_t *'
|   |-CallExpr 0x55982734ab70 <<scratch space>:226:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x55982734ab58 <<scratch space>:226:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55982734aa80 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559827347210 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x55982734aba8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55982734aaa8 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x55982734a710 'list' 'sys_sflist_t *'
|   | `-ImplicitCastExpr 0x55982734abc0 <col:36> 'sys_sfnode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55982734aad0 <col:36> 'sys_sfnode_t *' lvalue ParmVar 0x55982734a780 'node' 'sys_sfnode_t *'
|   `-IfStmt 0x55982734aec8 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55982734ad20 <<scratch space>:228:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x55982734ac40 <<scratch space>:228:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x55982734ac28 <<scratch space>:228:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55982734abd8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559827348a08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x55982734ac70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55982734ac00 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x55982734a710 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x55982734ad08 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x55982734ace8 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55982734acc0 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55982734ac88 <col:23> 'int' 0
|     |-CompoundStmt 0x55982734aeb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x55982734ae60 <<scratch space>:230:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x55982734ae48 <<scratch space>:230:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55982734ad48 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5598273474c8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x55982734ae98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55982734ad70 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55982734a710 'list' 'sys_sflist_t *'
|     |   `-CallExpr 0x55982734ae00 <<scratch space>:232:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_sfnode_t *'
|     |     |-ImplicitCastExpr 0x55982734ade8 <<scratch space>:232:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x55982734ad98 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5598273487e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|     |     `-ImplicitCastExpr 0x55982734ae30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_sflist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x55982734adc0 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55982734a710 'list' 'sys_sflist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x55982734b060 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:364:1, line:365:28> line:364:20 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55982734af60 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55982734afd0 <line:365:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x55982745b400 <line:357:3, line:362:46>
|   |-ParagraphComment 0x55982745b110 <line:357:3>
|   | `-TextComment 0x55982745b0e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745b130 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55982745b190 <col:10, col:41>
|   |   `-TextComment 0x55982745b160 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x55982745b1e0 <line:359:3, col:63>
|   | `-TextComment 0x55982745b1b0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55982745b230 <line:361:3>
|   | `-TextComment 0x55982745b200 <col:3> Text=" "
|   |-ParamCommandComment 0x55982745b250 <col:4, line:362:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55982745b300 <line:361:15, line:362:3>
|   |   |-TextComment 0x55982745b2b0 <line:361:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55982745b2d0 <line:362:3> Text=" "
|   `-ParamCommandComment 0x55982745b320 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55982745b3b0 <col:15, col:46>
|       `-TextComment 0x55982745b380 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x55982734b220 prev 0x55982734b060 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:234:1 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55982734b120 <line:236:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55982734b190 <<scratch space>:238:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55982734ba98 <line:99:2, line:111:2>
|   |-CallExpr 0x55982734b3b8 <<scratch space>:240:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x55982734b3a0 <<scratch space>:240:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55982734b2d0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x559827346c80 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x55982734b3f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55982734b2f8 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x55982734b190 'node' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x55982734b408 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |   `-ParenExpr 0x55982734b380 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x55982734b358 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x55982734b320 <col:23> 'int' 0
|   `-IfStmt 0x55982734ba30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55982734b568 <<scratch space>:242:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x55982734b488 <<scratch space>:242:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x55982734b470 <<scratch space>:242:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55982734b420 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559827348a08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x55982734b4b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55982734b448 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x55982734b120 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x55982734b550 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x55982734b530 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55982734b508 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55982734b4d0 <col:23> 'int' 0
|     |-CompoundStmt 0x55982734b790 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x55982734b620 <<scratch space>:244:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x55982734b608 <<scratch space>:244:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55982734b590 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5598273474c8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     | | |-ImplicitCastExpr 0x55982734b658 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_sflist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55982734b5b8 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55982734b120 'list' 'sys_sflist_t *'
|     | | `-ImplicitCastExpr 0x55982734b670 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55982734b5e0 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55982734b190 'node' 'sys_sfnode_t *'
|     | `-CallExpr 0x55982734b728 <<scratch space>:246:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x55982734b710 <<scratch space>:246:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55982734b688 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559827347210 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x55982734b760 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55982734b6b0 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55982734b120 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x55982734b778 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55982734b6d8 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55982734b190 'node' 'sys_sfnode_t *'
|     `-CompoundStmt 0x55982734ba10 <line:105:10, line:110:3>
|       |-CallExpr 0x55982734b8c8 <<scratch space>:248:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x55982734b8b0 <<scratch space>:248:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55982734b7b0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x559827346c80 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|       | |-CallExpr 0x55982734b840 <line:250:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x55982734b828 <<scratch space>:250:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55982734b7d8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559827348a08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | | `-ImplicitCastExpr 0x55982734b870 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_sflist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x55982734b800 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x55982734b120 'list' 'sys_sflist_t *'
|       | `-ImplicitCastExpr 0x55982734b900 <line:108:5> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x55982734b888 <col:5> 'sys_sfnode_t *' lvalue ParmVar 0x55982734b190 'node' 'sys_sfnode_t *'
|       `-CallExpr 0x55982734b9a8 <<scratch space>:252:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x55982734b990 <<scratch space>:252:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55982734b918 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5598273474c8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|         |-ImplicitCastExpr 0x55982734b9e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_sflist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x55982734b940 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55982734b120 'list' 'sys_sflist_t *'
|         `-ImplicitCastExpr 0x55982734b9f8 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55982734b968 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55982734b190 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55982734bcf0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:382:1, line:383:30> line:382:20 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x55982734bac8 <col:43, col:57> col:57 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55982734bb40 <line:383:8, col:14> col:14 head 'void *'
| |-ParmVarDecl 0x55982734bbb8 <col:20, col:26> col:26 tail 'void *'
| `-FullComment 0x55982745b960 <line:370:3, line:380:66>
|   |-ParagraphComment 0x55982745b4a0 <line:370:3>
|   | `-TextComment 0x55982745b470 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745b4c0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55982745b520 <col:10, col:41>
|   |   `-TextComment 0x55982745b4f0 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x55982745b610 <line:372:3, line:374:63>
|   | |-TextComment 0x55982745b540 <line:372:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x55982745b560 <line:373:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x55982745b5b0 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x55982745b5d0 <line:374:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55982745b660 <line:376:3, col:48>
|   | `-TextComment 0x55982745b630 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x55982745b6b0 <line:378:3>
|   | `-TextComment 0x55982745b680 <col:3> Text=" "
|   |-ParamCommandComment 0x55982745b6d0 <col:4, line:379:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55982745b780 <line:378:15, line:379:3>
|   |   |-TextComment 0x55982745b730 <line:378:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55982745b750 <line:379:3> Text=" "
|   |-ParamCommandComment 0x55982745b7a0 <col:4, line:380:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x55982745b850 <line:379:15, line:380:3>
|   |   |-TextComment 0x55982745b800 <line:379:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x55982745b820 <line:380:3> Text=" "
|   `-ParamCommandComment 0x55982745b870 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x55982745b900 <col:15, col:66>
|       `-TextComment 0x55982745b8d0 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x55982734bf40 prev 0x55982734bcf0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:254:1 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x55982734bdb8 <line:256:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55982734be30 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x55982734bea8 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x55982734c5f8 <col:31, line:127:42>
|   |-IfStmt 0x55982734c468 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55982734c140 <<scratch space>:258:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x55982734c060 <<scratch space>:258:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x55982734c048 <<scratch space>:258:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55982734bff8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559827348a08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x55982734c090 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55982734c020 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55982734bdb8 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x55982734c128 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x55982734c108 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55982734c0e0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55982734c0a8 <col:23> 'int' 0
|   | |-CompoundStmt 0x55982734c298 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x55982734c248 <<scratch space>:260:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x55982734c230 <<scratch space>:260:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55982734c168 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559827347210 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x55982734c280 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55982734c190 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x55982734bdb8 'list' 'sys_sflist_t *'
|   | |   `-CStyleCastExpr 0x55982734c208 <line:120:6, col:31> 'sys_sfnode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x55982734c1f0 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55982734c1b8 <col:31> 'void *' lvalue ParmVar 0x55982734be30 'head' 'void *'
|   | `-CompoundStmt 0x55982734c450 <line:121:9, line:125:2>
|   |   `-CallExpr 0x55982734c418 <<scratch space>:264:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x55982734c400 <<scratch space>:264:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55982734c2b0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x559827346c80 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |     |-CallExpr 0x55982734c340 <line:266:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_sfnode_t *'
|   |     | |-ImplicitCastExpr 0x55982734c328 <<scratch space>:266:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x55982734c2d8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559827348a08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | `-ImplicitCastExpr 0x55982734c370 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_sflist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55982734c300 <col:34> 'sys_sflist_t *' lvalue ParmVar 0x55982734bdb8 'list' 'sys_sflist_t *'
|   |     `-CStyleCastExpr 0x55982734c3d8 <line:124:4, col:29> 'sys_sfnode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x55982734c3c0 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x55982734c388 <col:29> 'void *' lvalue ParmVar 0x55982734be30 'head' 'void *'
|   `-CallExpr 0x55982734c580 <<scratch space>:270:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x55982734c568 <<scratch space>:270:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982734c4a0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5598273474c8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x55982734c5b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_sflist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x55982734c4c8 <col:29> 'sys_sflist_t *' lvalue ParmVar 0x55982734bdb8 'list' 'sys_sflist_t *'
|     `-CStyleCastExpr 0x55982734c540 <line:127:10, col:35> 'sys_sfnode_t *' <BitCast>
|       `-ImplicitCastExpr 0x55982734c528 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55982734c4f0 <col:35> 'void *' lvalue ParmVar 0x55982734bea8 'tail' 'void *'
|-FunctionDecl 0x55982734c7d0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:396:1, line:397:37> line:396:20 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55982734c628 <col:44, col:58> col:58 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55982734c698 <line:397:9, col:23> col:23 list_to_append 'sys_sflist_t *'
| `-FullComment 0x55982745bd10 <line:388:3, line:394:57>
|   |-ParagraphComment 0x55982745ba00 <line:388:3>
|   | `-TextComment 0x55982745b9d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745ba20 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x55982745ba80 <col:10, col:66>
|   |   `-TextComment 0x55982745ba50 <col:10, col:66> Text=" merge two sflists, appending the second one to the first"
|   |-ParagraphComment 0x55982745baf0 <line:390:3, line:391:63>
|   | |-TextComment 0x55982745baa0 <line:390:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x55982745bac0 <line:391:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55982745bb40 <line:393:3>
|   | `-TextComment 0x55982745bb10 <col:3> Text=" "
|   |-ParamCommandComment 0x55982745bb60 <col:4, line:394:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55982745bc10 <line:393:15, line:394:3>
|   |   |-TextComment 0x55982745bbc0 <line:393:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55982745bbe0 <line:394:3> Text=" "
|   `-ParamCommandComment 0x55982745bc30 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x55982745bcc0 <col:25, col:57>
|       `-TextComment 0x55982745bc90 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x55982734c990 prev 0x55982734c7d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:275:1 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55982734c890 <line:277:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55982734c900 <<scratch space>:279:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_sflist_t *'
| `-CompoundStmt 0x55982734d058 <line:135:2, line:141:2>
|   |-DeclStmt 0x55982734cb38 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x55982734ca50 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_sfnode_t *'
|   | `-VarDecl 0x55982734cac0 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_sfnode_t *'
|   |-BinaryOperator 0x55982734cc28 <line:137:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x55982734cb50 <col:3> 'sys_sfnode_t *' lvalue Var 0x55982734ca50 'head' 'sys_sfnode_t *'
|   | `-CallExpr 0x55982734cbe0 <<scratch space>:2:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x55982734cbc8 <<scratch space>:2:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55982734cb78 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5598273487e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x55982734cc10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55982734cba0 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x55982734c900 'list_to_append' 'sys_sflist_t *'
|   |-BinaryOperator 0x55982734cd28 <line:138:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x55982734cc50 <col:3> 'sys_sfnode_t *' lvalue Var 0x55982734cac0 'tail' 'sys_sfnode_t *'
|   | `-CallExpr 0x55982734cce0 <<scratch space>:4:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x55982734ccc8 <<scratch space>:4:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55982734cc78 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559827348a08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x55982734cd10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55982734cca0 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x55982734c900 'list_to_append' 'sys_sflist_t *'
|   |-CallExpr 0x55982734ce60 <<scratch space>:6:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x55982734ce48 <<scratch space>:6:1> 'void (*)(sys_sflist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55982734cd50 <col:1> 'void (sys_sflist_t *, void *, void *)' Function 0x55982734bf40 'sys_sflist_append_list' 'void (sys_sflist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x55982734cea0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55982734cd78 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x55982734c890 'list' 'sys_sflist_t *'
|   | |-ImplicitCastExpr 0x55982734ced0 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x55982734ceb8 <col:41> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55982734cda0 <col:41> 'sys_sfnode_t *' lvalue Var 0x55982734ca50 'head' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x55982734cf00 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x55982734cee8 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55982734cdc8 <col:47> 'sys_sfnode_t *' lvalue Var 0x55982734cac0 'tail' 'sys_sfnode_t *'
|   `-CallExpr 0x55982734cfe0 <<scratch space>:8:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x55982734cfc8 <<scratch space>:8:1> 'void (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982734cf18 <col:1> 'void (sys_sflist_t *)' Function 0x559827341c30 'sys_sflist_init' 'void (sys_sflist_t *)'
|     `-ImplicitCastExpr 0x55982734d010 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_sflist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55982734cf40 <col:28> 'sys_sflist_t *' lvalue ParmVar 0x55982734c900 'list_to_append' 'sys_sflist_t *'
|-FunctionDecl 0x55982734d2b0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:410:1, line:412:28> line:410:20 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55982734d0a0 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55982734d110 <line:411:10, col:24> col:24 prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x55982734d180 <line:412:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x55982745c180 <line:402:3, line:408:46>
|   |-ParagraphComment 0x55982745bdb0 <line:402:3>
|   | `-TextComment 0x55982745bd80 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745bdd0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55982745be30 <col:10, col:41>
|   |   `-TextComment 0x55982745be00 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x55982745be80 <line:404:3, col:63>
|   | `-TextComment 0x55982745be50 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55982745bed0 <line:406:3>
|   | `-TextComment 0x55982745bea0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982745bef0 <col:4, line:407:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55982745bfa0 <line:406:15, line:407:3>
|   |   |-TextComment 0x55982745bf50 <line:406:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55982745bf70 <line:407:3> Text=" "
|   |-ParamCommandComment 0x55982745bfc0 <col:4, line:408:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x55982745c070 <line:407:15, line:408:3>
|   |   |-TextComment 0x55982745c020 <line:407:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x55982745c040 <line:408:3> Text=" "
|   `-ParamCommandComment 0x55982745c090 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x55982745c120 <col:15, col:46>
|       `-TextComment 0x55982745c0f0 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x55982734d4f0 prev 0x55982734d2b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:10:1 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55982734d378 <line:12:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55982734d3e8 <<scratch space>:14:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x55982734d458 <<scratch space>:16:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x559827339518 <line:148:2, line:158:2>
|   `-IfStmt 0x5598273394b0 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55982734d680 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x55982734d650 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_sfnode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x55982734d5a8 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x55982734d3e8 'prev' 'sys_sfnode_t *'
|     | `-ImplicitCastExpr 0x55982734d668 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x55982734d630 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55982734d608 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55982734d5d0 <col:23> 'int' 0
|     |-CompoundStmt 0x559827338f60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x559827338ef8 <<scratch space>:18:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x559827338ee0 <<scratch space>:18:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55982734d6a8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55982734a810 'sys_sflist_prepend' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x559827338f30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55982734d6d0 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x55982734d378 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x559827338f48 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55982734d6f8 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x55982734d458 'node' 'sys_sfnode_t *'
|     `-IfStmt 0x559827339478 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x5598273390c0 <<scratch space>:20:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x559827338fe0 <<scratch space>:20:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x559827338fc8 <<scratch space>:20:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x559827338f78 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5598273466c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | | `-ImplicitCastExpr 0x559827339010 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_sfnode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x559827338fa0 <col:42> 'sys_sfnode_t *' lvalue ParmVar 0x55982734d3e8 'prev' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x5598273390a8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x559827339088 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x559827339060 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x559827339028 <col:23> 'int' 0
|       |-CompoundStmt 0x5598273391e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x559827339178 <<scratch space>:22:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x559827339160 <<scratch space>:22:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5598273390e8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55982734b220 'sys_sflist_append' 'void (sys_sflist_t *, sys_sfnode_t *)'
|       |   |-ImplicitCastExpr 0x5598273391b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_sflist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x559827339110 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55982734d378 'list' 'sys_sflist_t *'
|       |   `-ImplicitCastExpr 0x5598273391c8 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x559827339138 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55982734d458 'node' 'sys_sfnode_t *'
|       `-CompoundStmt 0x559827339458 <line:153:10, line:157:3>
|         |-CallExpr 0x559827339310 <<scratch space>:24:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x5598273392f8 <<scratch space>:24:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x5598273391f8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x559827346c80 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|         | |-ImplicitCastExpr 0x559827339348 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_sfnode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x559827339220 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x55982734d458 'node' 'sys_sfnode_t *'
|         | `-CallExpr 0x5598273392b0 <<scratch space>:26:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_sfnode_t *'
|         |   |-ImplicitCastExpr 0x559827339298 <<scratch space>:26:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x559827339248 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5598273466c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|         |   `-ImplicitCastExpr 0x5598273392e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_sfnode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x559827339270 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x55982734d3e8 'prev' 'sys_sfnode_t *'
|         `-CallExpr 0x5598273393f0 <<scratch space>:28:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x5598273393d8 <<scratch space>:28:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x559827339360 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x559827346c80 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|           |-ImplicitCastExpr 0x559827339428 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_sfnode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x559827339388 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x55982734d3e8 'prev' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x559827339440 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x5598273393b0 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55982734d458 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5598273395c8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:426:1, col:72> col:29 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559827339540 <col:54, col:68> col:68 list 'sys_sflist_t *'
| `-FullComment 0x55982745c540 <line:417:3, line:424:50>
|   |-ParagraphComment 0x55982745c220 <line:417:3>
|   | `-TextComment 0x55982745c1f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745c240 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55982745c2a0 <col:10, col:59>
|   |   `-TextComment 0x55982745c270 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x55982745c310 <line:419:3, line:420:63>
|   | |-TextComment 0x55982745c2c0 <line:419:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x55982745c2e0 <line:420:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55982745c360 <line:422:3>
|   | `-TextComment 0x55982745c330 <col:3> Text=" "
|   |-ParamCommandComment 0x55982745c380 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55982745c410 <col:15, col:46>
|   |   `-TextComment 0x55982745c3e0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x55982745c460 <line:424:3>
|   | `-TextComment 0x55982745c430 <col:3> Text=" "
|   `-BlockCommandComment 0x55982745c480 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x55982745c4e0 <col:11, col:50>
|       `-TextComment 0x55982745c4b0 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x559827339708 prev 0x5598273395c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:32:1 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559827339680 <line:34:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_sflist_t *'
| `-CompoundStmt 0x559827339da8 <line:163:2, line:175:2>
|   |-DeclStmt 0x5598273398d0 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x5598273397c0 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_sfnode_t *' cinit
|   |   `-CallExpr 0x559827339888 <<scratch space>:38:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_sfnode_t *'
|   |     |-ImplicitCastExpr 0x559827339870 <<scratch space>:38:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559827339820 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5598273487e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     `-ImplicitCastExpr 0x5598273398b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_sflist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x559827339848 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x559827339680 'list' 'sys_sflist_t *'
|   |-CallExpr 0x559827339a00 <<scratch space>:40:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x5598273399e8 <<scratch space>:40:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5598273398e8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559827347210 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x559827339a38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x559827339910 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x559827339680 'list' 'sys_sflist_t *'
|   | `-CallExpr 0x5598273399a0 <<scratch space>:42:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x559827339988 <<scratch space>:42:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x559827339938 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5598273466c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   `-ImplicitCastExpr 0x5598273399d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x559827339960 <col:33> 'sys_sfnode_t *' lvalue Var 0x5598273397c0 'node' 'sys_sfnode_t *'
|   |-IfStmt 0x559827339ce8 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559827339b40 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x559827339ab8 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x559827339aa0 <<scratch space>:44:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559827339a50 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559827348a08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x559827339ae8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x559827339a78 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x559827339680 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x559827339b28 <col:46> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x559827339b00 <col:46> 'sys_sfnode_t *' lvalue Var 0x5598273397c0 'node' 'sys_sfnode_t *'
|   | |-CompoundStmt 0x559827339cd0 <col:52, line:172:3>
|   | | `-CallExpr 0x559827339c80 <<scratch space>:46:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x559827339c68 <<scratch space>:46:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559827339b68 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5598273474c8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x559827339cb8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x559827339b90 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x559827339680 'list' 'sys_sflist_t *'
|   | |   `-CallExpr 0x559827339c20 <<scratch space>:48:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_sfnode_t *'
|   | |     |-ImplicitCastExpr 0x559827339c08 <<scratch space>:48:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x559827339bb8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5598273487e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |     `-ImplicitCastExpr 0x559827339c50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_sflist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x559827339be0 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x559827339680 'list' 'sys_sflist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x559827339d60 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x559827339d48 <col:10> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559827339d20 <col:10> 'sys_sfnode_t *' lvalue Var 0x5598273397c0 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x559827339ef0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:439:1, col:62> col:29 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559827339de8 <col:44, col:58> col:58 list 'sys_sflist_t *'
| `-FullComment 0x55982745c8e0 <line:431:3, line:437:69>
|   |-ParagraphComment 0x55982745c5e0 <line:431:3>
|   | `-TextComment 0x55982745c5b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745c600 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55982745c660 <col:10, col:59>
|   |   `-TextComment 0x55982745c630 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x55982745c6b0 <line:433:3, col:63>
|   | `-TextComment 0x55982745c680 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55982745c700 <line:435:3>
|   | `-TextComment 0x55982745c6d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982745c720 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55982745c7b0 <col:15, col:46>
|   |   `-TextComment 0x55982745c780 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x55982745c800 <line:437:3>
|   | `-TextComment 0x55982745c7d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982745c820 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x55982745c880 <col:11, col:69>
|       `-TextComment 0x55982745c850 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x55982733a030 prev 0x559827339ef0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:52:1 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x559827339fa8 <line:54:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_sflist_t *'
| `-CompoundStmt 0x55982733a3b8 <line:180:2, line:183:2>
|   `-ReturnStmt 0x55982733a378 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x55982733a348 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x55982733a318 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x55982733a1a0 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x55982733a188 <<scratch space>:56:1> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55982733a0d8 <col:1> 'bool (sys_sflist_t *)' Function 0x559827349940 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|       |   `-ImplicitCastExpr 0x55982733a1d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_sflist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55982733a100 <col:39> 'sys_sflist_t *' lvalue ParmVar 0x559827339fa8 'list' 'sys_sflist_t *'
|       |-ImplicitCastExpr 0x55982733a330 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       | `-ParenExpr 0x55982733a248 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x55982733a220 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x55982733a1e8 <col:23> 'int' 0
|       `-CallExpr 0x55982733a2d0 <<scratch space>:58:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|         |-ImplicitCastExpr 0x55982733a2b8 <<scratch space>:58:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55982733a268 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559827339708 'sys_sflist_get_not_empty' 'sys_sfnode_t *(sys_sflist_t *)'
|         `-ImplicitCastExpr 0x55982733a300 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_sflist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55982733a290 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x559827339fa8 'list' 'sys_sflist_t *'
|-FunctionDecl 0x55982733a558 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:453:1, line:455:28> line:453:20 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55982733a3e0 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55982733a450 <line:454:10, col:24> col:24 prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x55982733a4c0 <line:455:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x55982745cdb0 <line:444:3, line:451:46>
|   |-ParagraphComment 0x55982745c980 <line:444:3>
|   | `-TextComment 0x55982745c950 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745c9a0 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x55982745ca00 <col:10, col:23>
|   |   `-TextComment 0x55982745c9d0 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x55982745ca50 <line:446:3, col:63>
|   | `-TextComment 0x55982745ca20 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55982745caa0 <line:448:3>
|   | `-TextComment 0x55982745ca70 <col:3> Text=" "
|   |-ParamCommandComment 0x55982745cac0 <col:4, line:449:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55982745cb70 <line:448:15, line:449:3>
|   |   |-TextComment 0x55982745cb20 <line:448:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55982745cb40 <line:449:3> Text=" "
|   |-ParamCommandComment 0x55982745cbc0 <col:4, line:451:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x55982745cca0 <line:449:20, line:451:3>
|   |   |-TextComment 0x55982745cc20 <line:449:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x55982745cc40 <line:450:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x55982745cc60 <line:451:3> Text=" "
|   `-ParamCommandComment 0x55982745ccc0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x55982745cd50 <col:15, col:46>
|       `-TextComment 0x55982745cd20 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x55982733a798 prev 0x55982733a558 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:60:1 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55982733a620 <line:62:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55982733a690 <<scratch space>:64:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x55982733a700 <<scratch space>:66:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x559827354ba8 <line:190:2, line:212:2>
|   |-IfStmt 0x5598273549f0 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55982733a928 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x55982733a8f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55982733a850 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x55982733a690 'prev_node' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x55982733a910 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x55982733a8d8 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55982733a8b0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55982733a878 <col:23> 'int' 0
|   | |-CompoundStmt 0x55982733ad88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x55982733aa68 <<scratch space>:68:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x55982733aa50 <<scratch space>:68:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55982733a950 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x559827347210 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | | | |-ImplicitCastExpr 0x55982733aaa0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_sflist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55982733a978 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55982733a620 'list' 'sys_sflist_t *'
|   | | | `-CallExpr 0x55982733aa08 <<scratch space>:70:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_sfnode_t *'
|   | | |   |-ImplicitCastExpr 0x55982733a9f0 <<scratch space>:70:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x55982733a9a0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5598273466c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | | |   `-ImplicitCastExpr 0x55982733aa38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_sfnode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55982733a9c8 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x55982733a700 'node' 'sys_sfnode_t *'
|   | | `-IfStmt 0x55982733ad50 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x55982733aba8 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x55982733ab20 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_sfnode_t *'
|   | |   | | |-ImplicitCastExpr 0x55982733ab08 <<scratch space>:72:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x55982733aab8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559827348a08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   | | `-ImplicitCastExpr 0x55982733ab50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_sflist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x55982733aae0 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x55982733a620 'list' 'sys_sflist_t *'
|   | |   | `-ImplicitCastExpr 0x55982733ab90 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x55982733ab68 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x55982733a700 'node' 'sys_sfnode_t *'
|   | |   |-CompoundStmt 0x55982733ad38 <col:53, line:199:4>
|   | |   | `-CallExpr 0x55982733ace8 <<scratch space>:74:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x55982733acd0 <<scratch space>:74:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x55982733abd0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5598273474c8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |   |-ImplicitCastExpr 0x55982733ad20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_sflist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x55982733abf8 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x55982733a620 'list' 'sys_sflist_t *'
|   | |   |   `-CallExpr 0x55982733ac88 <<scratch space>:76:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_sfnode_t *'
|   | |   |     |-ImplicitCastExpr 0x55982733ac70 <<scratch space>:76:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x55982733ac20 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5598273487e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   |     `-ImplicitCastExpr 0x55982733acb8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_sflist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x55982733ac48 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55982733a620 'list' 'sys_sflist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x5598273549d0 <line:200:10, line:209:3>
|   |   |-CallExpr 0x55982733aec0 <<scratch space>:78:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x55982733aea8 <<scratch space>:78:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x55982733ada8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x559827346c80 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |   | |-ImplicitCastExpr 0x559827354758 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x55982733add0 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x55982733a690 'prev_node' 'sys_sfnode_t *'
|   |   | `-CallExpr 0x55982733ae60 <<scratch space>:80:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_sfnode_t *'
|   |   |   |-ImplicitCastExpr 0x55982733ae48 <<scratch space>:80:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x55982733adf8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5598273466c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   |   `-ImplicitCastExpr 0x55982733ae90 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_sfnode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55982733ae20 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x55982733a700 'node' 'sys_sfnode_t *'
|   |   `-IfStmt 0x559827354998 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x559827354860 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x5598273547d8 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_sfnode_t *'
|   |     | | |-ImplicitCastExpr 0x5598273547c0 <<scratch space>:82:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x559827354770 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559827348a08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | | `-ImplicitCastExpr 0x559827354808 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_sflist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x559827354798 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x55982733a620 'list' 'sys_sflist_t *'
|   |     | `-ImplicitCastExpr 0x559827354848 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559827354820 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x55982733a700 'node' 'sys_sfnode_t *'
|   |     |-CompoundStmt 0x559827354980 <col:53, line:208:4>
|   |     | `-CallExpr 0x559827354918 <<scratch space>:84:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x559827354900 <<scratch space>:84:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x559827354888 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5598273474c8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   |     |   |-ImplicitCastExpr 0x559827354950 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_sflist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x5598273548b0 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x55982733a620 'list' 'sys_sflist_t *'
|   |     |   `-ImplicitCastExpr 0x559827354968 <line:207:13> 'sys_sfnode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x5598273548d8 <col:13> 'sys_sfnode_t *' lvalue ParmVar 0x55982733a690 'prev_node' 'sys_sfnode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x559827354b10 <<scratch space>:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x559827354af8 <<scratch space>:86:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559827354a28 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x559827346c80 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x559827354b48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_sfnode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x559827354a50 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x55982733a700 'node' 'sys_sfnode_t *'
|     `-ImplicitCastExpr 0x559827354b60 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       `-ParenExpr 0x559827354ad8 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x559827354ab0 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x559827354a78 <col:23> 'int' 0
|-FunctionDecl 0x559827354d60 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:469:1, line:470:30> line:469:20 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559827354bd8 <col:47, col:61> col:61 list 'sys_sflist_t *'
| |-ParmVarDecl 0x559827354c48 <line:470:12, col:26> col:26 node 'sys_sfnode_t *'
| `-FullComment 0x55982745d220 <line:460:3, line:467:35>
|   |-ParagraphComment 0x55982745ce50 <line:460:3>
|   | `-TextComment 0x55982745ce20 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745ce70 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55982745ced0 <col:10, col:44>
|   |   `-TextComment 0x55982745cea0 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x55982745cf20 <line:462:3, col:63>
|   | `-TextComment 0x55982745cef0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55982745cf70 <line:464:3>
|   | `-TextComment 0x55982745cf40 <col:3> Text=" "
|   |-ParamCommandComment 0x55982745cf90 <col:4, line:465:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55982745d040 <line:464:15, line:465:3>
|   |   |-TextComment 0x55982745cff0 <line:464:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55982745d010 <line:465:3> Text=" "
|   |-ParamCommandComment 0x55982745d060 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55982745d0f0 <col:15, col:60>
|   |   `-TextComment 0x55982745d0c0 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x55982745d140 <line:467:3>
|   | `-TextComment 0x55982745d110 <col:3> Text=" "
|   `-BlockCommandComment 0x55982745d160 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982745d1c0 <col:11, col:35>
|       `-TextComment 0x55982745d190 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x559827354f20 prev 0x559827354d60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:88:1 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x559827354e20 <line:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x559827354e90 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5598273558c0 <line:218:2, line:233:2>
|   |-DeclStmt 0x5598273550d8 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x559827354fe0 <<scratch space>:94:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_sfnode_t *' cinit
|   |   `-ImplicitCastExpr 0x5598273550c0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |     `-ParenExpr 0x5598273550a0 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x559827355078 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x559827355040 <col:23> 'int' 0
|   |-DeclStmt 0x559827355160 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x559827355100 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_sfnode_t *'
|   |-ForStmt 0x559827355838 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x559827355250 <line:222:42, line:15:47> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x559827355178 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x559827355100 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x559827355208 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x5598273551f0 <<scratch space>:98:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5598273551a0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5598273487e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   `-ImplicitCastExpr 0x559827355238 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_sflist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5598273551c8 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x559827354e20 'list' 'sys_sflist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559827355350 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x559827355320 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559827355278 <col:42> 'sys_sfnode_t *' lvalue Var 0x559827355100 'test' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x559827355338 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x559827355300 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5598273552d8 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5598273552a0 <col:23> 'int' 0
|   | |-BinaryOperator 0x559827355450 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x559827355378 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x559827355100 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x559827355408 <<scratch space>:100:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x5598273553f0 <<scratch space>:100:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5598273553a0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55982734a1b8 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | |   `-ImplicitCastExpr 0x559827355438 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5598273553c8 <col:42> 'sys_sfnode_t *' lvalue Var 0x559827355100 'test' 'sys_sfnode_t *'
|   | `-CompoundStmt 0x559827355818 <col:48, line:230:3>
|   |   |-IfStmt 0x559827355750 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x5598273554f8 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x5598273554c8 <col:8> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x559827355478 <col:8> 'sys_sfnode_t *' lvalue Var 0x559827355100 'test' 'sys_sfnode_t *'
|   |   | | `-ImplicitCastExpr 0x5598273554e0 <col:16> 'sys_sfnode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x5598273554a0 <col:16> 'sys_sfnode_t *' lvalue ParmVar 0x559827354e90 'node' 'sys_sfnode_t *'
|   |   | |-CompoundStmt 0x559827355708 <col:22, line:227:4>
|   |   | | |-CallExpr 0x559827355630 <<scratch space>:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x559827355618 <<scratch space>:102:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x559827355520 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' Function 0x55982733a798 'sys_sflist_remove' 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)'
|   |   | | | |-ImplicitCastExpr 0x559827355670 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_sflist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x559827355548 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x559827354e20 'list' 'sys_sflist_t *'
|   |   | | | |-ImplicitCastExpr 0x559827355688 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x559827355570 <col:38> 'sys_sfnode_t *' lvalue Var 0x559827354fe0 'prev' 'sys_sfnode_t *'
|   |   | | | `-ImplicitCastExpr 0x5598273556a0 <line:225:11> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x559827355598 <col:11> 'sys_sfnode_t *' lvalue ParmVar 0x559827354e90 'node' 'sys_sfnode_t *'
|   |   | | `-ReturnStmt 0x5598273556f0 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x5598273556d8 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x5598273556b8 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x5598273557f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_sfnode_t *' '='
|   |     |-DeclRefExpr 0x559827355788 <col:4> 'sys_sfnode_t *' lvalue Var 0x559827354fe0 'prev' 'sys_sfnode_t *'
|   |     `-ImplicitCastExpr 0x5598273557d8 <col:11> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5598273557b0 <col:11> 'sys_sfnode_t *' lvalue Var 0x559827355100 'test' 'sys_sfnode_t *'
|   `-ReturnStmt 0x5598273558a8 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x559827355890 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x559827355870 <col:16> 'int' 0
|-RecordDecl 0x5598273558f0 </vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:18:1, line:24:1> line:18:8 struct sys_mem_pool_lvl definition
| |-RecordDecl 0x5598273559a0 <line:19:2, line:22:2> line:19:2 union definition
| | |-FieldDecl 0x559827355ab8 <line:20:3, col:10> col:10 bits_p 'u32_t *'
| | `-FieldDecl 0x559827355c28 <line:21:3, col:31> col:9 bits 'u32_t [2]'
| |-FieldDecl 0x559827355cc0 <line:19:2> col:2 implicit 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| |-IndirectFieldDecl 0x559827355d18 <line:20:10> col:10 implicit bits_p 'u32_t *'
| | |-Field 0x559827355cc0 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x559827355ab8 'bits_p' 'u32_t *'
| |-IndirectFieldDecl 0x559827355d68 <line:21:9> col:9 implicit bits 'u32_t [2]'
| | |-Field 0x559827355cc0 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x559827355c28 'bits' 'u32_t [2]'
| `-FieldDecl 0x559827355db8 <line:23:2, col:14> col:14 free_list 'sys_dlist_t':'struct _dnode'
|-RecordDecl 0x559827355e50 <line:29:1, line:37:1> line:29:8 struct sys_mem_pool_base definition
| |-FieldDecl 0x559827355f18 <line:30:2, col:8> col:8 buf 'void *'
| |-FieldDecl 0x559827355f70 <line:31:2, col:9> col:9 max_sz 'size_t':'unsigned long'
| |-FieldDecl 0x559827355ff0 <line:32:2, col:8> col:8 n_max 'u16_t':'unsigned short'
| |-FieldDecl 0x559827356048 <line:33:2, col:7> col:7 n_levels 'u8_t':'unsigned char'
| |-FieldDecl 0x5598273560c0 <line:34:2, col:7> col:7 max_inline_level 's8_t':'signed char'
| |-FieldDecl 0x5598273561c0 <line:35:2, col:27> col:27 levels 'struct sys_mem_pool_lvl *'
| `-FieldDecl 0x559827356218 <line:36:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x559827356410 <line:98:1, col:58> col:6 z_sys_mem_pool_base_init 'void (struct sys_mem_pool_base *)'
| `-ParmVarDecl 0x559827356310 <col:31, col:57> col:57 p 'struct sys_mem_pool_base *'
|-FunctionDecl 0x55982735a258 <line:100:1, line:101:55> line:100:5 z_sys_mem_pool_block_alloc 'int (struct sys_mem_pool_base *, size_t, u32_t *, u32_t *, void **)'
| |-ParmVarDecl 0x5598273564e0 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x559827356550 <col:61, col:68> col:68 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5598273565c0 <line:101:10, col:17> col:17 level_p 'u32_t *'
| |-ParmVarDecl 0x559827356630 <col:26, col:33> col:33 block_p 'u32_t *'
| `-ParmVarDecl 0x5598273566d0 <col:42, col:49> col:49 data_p 'void **'
|-FunctionDecl 0x55982735a560 <line:103:1, line:104:21> line:103:6 z_sys_mem_pool_block_free 'void (struct sys_mem_pool_base *, u32_t, u32_t)'
| |-ParmVarDecl 0x55982735a348 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x55982735a3b8 <col:61, col:67> col:67 level 'u32_t':'unsigned int'
| `-ParmVarDecl 0x55982735a428 <line:104:10, col:16> col:16 block 'u32_t':'unsigned int'
|-RecordDecl 0x55982735a618 </vagrant/ext/zephyros/zephyr/include/kernel_structs.h:83:1, line:96:1> line:83:8 struct _ready_q definition
| `-FieldDecl 0x55982735a6e8 <line:86:2, col:19> col:19 cache 'struct k_thread *'
|-TypedefDecl 0x55982735a780 <line:98:1, col:25> col:25 _ready_q_t 'struct _ready_q':'struct _ready_q'
| `-ElaboratedType 0x55982735a730 'struct _ready_q' sugar
|   `-RecordType 0x55982735a6a0 'struct _ready_q'
|     `-Record 0x55982735a618 '_ready_q'
|-RecordDecl 0x55982735a7d8 <line:100:1, line:134:1> line:100:8 struct _cpu definition
| |-FieldDecl 0x55982735a890 <line:102:2, col:8> col:8 nested 'u32_t':'unsigned int'
| |-FieldDecl 0x55982735a8f0 <line:105:2, col:8> col:8 irq_stack 'char *'
| |-FieldDecl 0x55982735a960 <line:108:2, col:19> col:19 current 'struct k_thread *'
| |-FieldDecl 0x55982735a9d0 <line:111:2, col:19> col:19 idle_thread 'struct k_thread *'
| `-FieldDecl 0x55982735aa28 <line:128:2, col:7> col:7 id 'u8_t':'unsigned char'
|-TypedefDecl 0x55982735aac0 <line:136:1, col:21> col:21 _cpu_t 'struct _cpu':'struct _cpu'
| `-ElaboratedType 0x55982735aa70 'struct _cpu' sugar
|   `-RecordType 0x55982735a860 'struct _cpu'
|     `-Record 0x55982735a7d8 '_cpu'
|-RecordDecl 0x55982735ab18 <line:138:1, line:191:1> line:138:8 struct z_kernel definition
| |-RecordDecl 0x55982735abc0 <line:143:2, line:157:2> line:143:2 invalid union definition
| | |-FieldDecl 0x55982735acb8 <line:144:3, col:15> col:15 invalid cpus 'struct _cpu':'struct _cpu'
| | |-RecordDecl 0x55982735ad00 <line:146:3, line:155:3> line:146:3 struct definition
| | | |-FieldDecl 0x55982735adc0 <line:148:4, col:10> col:10 nested 'u32_t':'unsigned int'
| | | |-FieldDecl 0x55982735ae20 <line:151:4, col:10> col:10 irq_stack 'char *'
| | | `-FieldDecl 0x55982735ae90 <line:154:4, col:21> col:21 current 'struct k_thread *'
| | |-FieldDecl 0x55982735af30 <line:146:3> col:3 implicit 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | |-IndirectFieldDecl 0x55982735af88 <line:148:10> col:10 implicit nested 'u32_t':'unsigned int'
| | | |-Field 0x55982735af30 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x55982735adc0 'nested' 'u32_t':'unsigned int'
| | |-IndirectFieldDecl 0x55982735afd8 <line:151:10> col:10 implicit irq_stack 'char *'
| | | |-Field 0x55982735af30 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x55982735ae20 'irq_stack' 'char *'
| | `-IndirectFieldDecl 0x55982735b028 <line:154:21> col:21 implicit current 'struct k_thread *'
| |   |-Field 0x55982735af30 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| |   `-Field 0x55982735ae90 'current' 'struct k_thread *'
| `-FieldDecl 0x55982735b0f0 <line:172:2, col:18> col:18 ready_q 'struct _ready_q':'struct _ready_q'
|-TypedefDecl 0x55982735f530 <line:193:1, col:25> col:25 _kernel_t 'struct z_kernel':'struct z_kernel'
| `-ElaboratedType 0x55982735f4e0 'struct z_kernel' sugar
|   `-RecordType 0x55982735aba0 'struct z_kernel'
|     `-Record 0x55982735ab18 'z_kernel'
|-VarDecl 0x55982735f5a8 <line:195:1, col:24> col:24 _kernel 'struct z_kernel':'struct z_kernel' extern
|-FunctionDecl 0x55982735f760 </vagrant/ext/zephyros/zephyr/include/kernel_version.h:47:1, col:41> col:14 sys_kernel_version_get 'u32_t (void)' extern
| `-FullComment 0x55982745d4d0 <line:40:3, line:45:25>
|   |-ParagraphComment 0x55982745d2c0 <line:40:3>
|   | `-TextComment 0x55982745d290 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745d2e0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x55982745d340 <col:10, col:56>
|   |   `-TextComment 0x55982745d310 <col:10, col:56> Text=" Return the kernel version of the present build"
|   |-ParagraphComment 0x55982745d3b0 <line:42:3, line:43:27>
|   | |-TextComment 0x55982745d360 <line:42:3, col:76> Text=" The kernel version is a four-byte value, whose format is described in the"
|   | `-TextComment 0x55982745d380 <line:43:3, col:27> Text=" file "kernel_version.h"."
|   |-ParagraphComment 0x55982745d400 <line:45:3>
|   | `-TextComment 0x55982745d3d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982745d420 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x55982745d480 <col:11, col:25>
|       `-TextComment 0x55982745d450 <col:11, col:25> Text=" kernel version"
|-FunctionDecl 0x55982735f948 </vagrant/ext/zephyros/zephyr/include/random/rand32.h:45:1, col:33> col:14 sys_rand32_get 'u32_t (void)' extern
| `-FullComment 0x55982745d820 <line:37:3, line:43:31>
|   |-ParagraphComment 0x55982745d570 <line:37:3>
|   | `-TextComment 0x55982745d540 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745d590 <col:4, line:38:20> Name="brief"
|   | `-ParagraphComment 0x55982745d610 <line:37:10, line:38:20>
|   |   |-TextComment 0x55982745d5c0 <line:37:10, col:63> Text=" Return a 32-bit random value that should pass general"
|   |   `-TextComment 0x55982745d5e0 <line:38:3, col:20> Text=" randomness tests."
|   |-ParagraphComment 0x55982745d660 <line:40:3>
|   | `-TextComment 0x55982745d630 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745d680 <col:4, line:41:23> Name="note"
|   | `-ParagraphComment 0x55982745d700 <line:40:9, line:41:23>
|   |   |-TextComment 0x55982745d6b0 <line:40:9, col:68> Text=" The random value returned is not a cryptographically secure"
|   |   `-TextComment 0x55982745d6d0 <line:41:3, col:23> Text=" random number value."
|   |-ParagraphComment 0x55982745d750 <line:43:3>
|   | `-TextComment 0x55982745d720 <col:3> Text=" "
|   `-BlockCommandComment 0x55982745d770 <col:4, col:31> Name="return"
|     `-ParagraphComment 0x55982745d7d0 <col:11, col:31>
|       `-TextComment 0x55982745d7a0 <col:11, col:31> Text=" 32-bit random value."
|-FunctionDecl 0x55982735fbb0 <line:57:1, col:47> col:13 sys_rand_get 'void (void *, size_t)' extern
| |-ParmVarDecl 0x55982735fa30 <col:26, col:32> col:32 dst 'void *'
| |-ParmVarDecl 0x55982735faa0 <col:37, col:44> col:44 len 'size_t':'unsigned long'
| `-FullComment 0x55982745dcd0 <line:47:3, line:56:1>
|   |-ParagraphComment 0x55982745d8c0 <line:47:3>
|   | `-TextComment 0x55982745d890 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745d8e0 <col:4, line:48:33> Name="brief"
|   | `-ParagraphComment 0x55982745d960 <line:47:10, line:48:33>
|   |   |-TextComment 0x55982745d910 <line:47:10, col:73> Text=" Fill the destination buffer with random data values that should"
|   |   `-TextComment 0x55982745d930 <line:48:3, col:33> Text=" pass general randomness tests."
|   |-ParagraphComment 0x55982745d9b0 <line:50:3>
|   | `-TextComment 0x55982745d980 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745d9d0 <col:4, line:51:31> Name="note"
|   | `-ParagraphComment 0x55982745da50 <line:50:9, line:51:31>
|   |   |-TextComment 0x55982745da00 <line:50:9, col:72> Text=" The random values returned are not considered cryptographically"
|   |   `-TextComment 0x55982745da20 <line:51:3, col:31> Text=" secure random number values."
|   |-ParagraphComment 0x55982745daa0 <line:53:3>
|   | `-TextComment 0x55982745da70 <col:3> Text=" "
|   |-ParamCommandComment 0x55982745dac0 <col:4, line:54:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x55982745db70 <line:53:20, line:54:3>
|   |   |-TextComment 0x55982745db20 <line:53:20, col:64> Text=" destination buffer to fill with random data."
|   |   `-TextComment 0x55982745db40 <line:54:3> Text=" "
|   |-ParamCommandComment 0x55982745db90 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x55982745dc20 <col:14, col:45>
|   |   `-TextComment 0x55982745dbf0 <col:14, col:45> Text=" size of the destination buffer."
|   `-ParagraphComment 0x55982745dc70 <line:56:1>
|     `-TextComment 0x55982745dc40 <col:1> Text=" "
|-FunctionDecl 0x55982735fe28 <line:72:1, col:48> col:12 sys_csrand_get 'int (void *, size_t)' extern
| |-ParmVarDecl 0x55982735fca0 <col:27, col:33> col:33 dst 'void *'
| |-ParmVarDecl 0x55982735fd10 <col:38, col:45> col:45 len 'size_t':'unsigned long'
| `-FullComment 0x55982745e260 <line:60:3, line:71:1>
|   |-ParagraphComment 0x55982745dd70 <line:60:3>
|   | `-TextComment 0x55982745dd40 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745dd90 <col:4, line:61:22> Name="brief"
|   | `-ParagraphComment 0x55982745de10 <line:60:10, line:61:22>
|   |   |-TextComment 0x55982745ddc0 <line:60:10, col:67> Text=" Fill the destination buffer with cryptographically secure"
|   |   `-TextComment 0x55982745dde0 <line:61:3, col:22> Text=" random data values."
|   |-ParagraphComment 0x55982745de60 <line:63:3>
|   | `-TextComment 0x55982745de30 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745de80 <col:4, line:64:42> Name="note"
|   | `-ParagraphComment 0x55982745df00 <line:63:9, line:64:42>
|   |   |-TextComment 0x55982745deb0 <line:63:9, col:75> Text=" If the random values requested do not need to be cryptographically"
|   |   `-TextComment 0x55982745ded0 <line:64:3, col:42> Text=" secure then use sys_rand_get() instead."
|   |-ParagraphComment 0x55982745df50 <line:66:3>
|   | `-TextComment 0x55982745df20 <col:3> Text=" "
|   |-ParamCommandComment 0x55982745df70 <col:4, line:67:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x55982745e020 <line:66:20, line:67:3>
|   |   |-TextComment 0x55982745dfd0 <line:66:20, col:47> Text=" destination buffer to fill."
|   |   `-TextComment 0x55982745dff0 <line:67:3> Text=" "
|   |-ParamCommandComment 0x55982745e040 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x55982745e0d0 <col:14, col:45>
|   |   `-TextComment 0x55982745e0a0 <col:14, col:45> Text=" size of the destination buffer."
|   |-ParagraphComment 0x55982745e120 <line:69:3>
|   | `-TextComment 0x55982745e0f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745e140 <col:4, col:53> Name="return"
|   | `-ParagraphComment 0x55982745e1a0 <col:11, col:53>
|   |   `-TextComment 0x55982745e170 <col:11, col:53> Text=" 0 if success, -EIO if entropy reseed error"
|   `-ParagraphComment 0x55982745e1f0 <line:71:1>
|     `-TextComment 0x55982745e1c0 <col:1> Text=" "
|-TypedefDecl 0x55982737c350 </vagrant/ext/zephyros/zephyr/include/syscall.h:85:1, line:88:17> line:85:21 _k_syscall_handler_t 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| |-PointerType 0x5598273603c0 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| | `-ParenType 0x559827360360 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' sugar
| |   `-FunctionProtoType 0x5598273602f0 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' cdecl
| |     |-TypedefType 0x55982735ff40 'uintptr_t' sugar
| |     | |-Typedef 0x559827274d28 'uintptr_t'
| |     | `-BuiltinType 0x55982722a850 'unsigned long'
| |     |-TypedefType 0x55982735ff40 'uintptr_t' sugar
| |     | |-Typedef 0x559827274d28 'uintptr_t'
| |     | `-BuiltinType 0x55982722a850 'unsigned long'
| |     |-TypedefType 0x55982735ff40 'uintptr_t' sugar
| |     | |-Typedef 0x559827274d28 'uintptr_t'
| |     | `-BuiltinType 0x55982722a850 'unsigned long'
| |     |-TypedefType 0x55982735ff40 'uintptr_t' sugar
| |     | |-Typedef 0x559827274d28 'uintptr_t'
| |     | `-BuiltinType 0x55982722a850 'unsigned long'
| |     |-TypedefType 0x55982735ff40 'uintptr_t' sugar
| |     | |-Typedef 0x559827274d28 'uintptr_t'
| |     | `-BuiltinType 0x55982722a850 'unsigned long'
| |     |-TypedefType 0x55982735ff40 'uintptr_t' sugar
| |     | |-Typedef 0x559827274d28 'uintptr_t'
| |     | `-BuiltinType 0x55982722a850 'unsigned long'
| |     |-TypedefType 0x55982735ff40 'uintptr_t' sugar
| |     | |-Typedef 0x559827274d28 'uintptr_t'
| |     | `-BuiltinType 0x55982722a850 'unsigned long'
| |     `-PointerType 0x55982722ab90 'void *'
| |       `-BuiltinType 0x55982722a6f0 'void'
| `-FullComment 0x55982745ff30 <line:50:3, line:84:1>
|   |-ParagraphComment 0x55982745e300 <line:50:3>
|   | `-TextComment 0x55982745e2d0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55982745e320 <col:4, col:33> Text=" _k_syscall_handler_t"
|   |-ParagraphComment 0x55982745e390 <line:51:3>
|   | `-TextComment 0x55982745e360 <col:3> Text=" "
|   |-BlockCommandComment 0x55982745e3b0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55982745e410 <col:10, col:43>
|   |   `-TextComment 0x55982745e3e0 <col:10, col:43> Text=" System call handler function type"
|   |-ParagraphComment 0x55982745e480 <line:53:3, line:54:67>
|   | |-TextComment 0x55982745e430 <line:53:3, col:70> Text=" These are kernel-side skeleton functions for system calls. They are"
|   | `-TextComment 0x55982745e450 <line:54:3, col:67> Text=" necessary to sanitize the arguments passed into the system call:"
|   |-ParagraphComment 0x55982745e660 <line:56:3, line:66:41>
|   | |-TextComment 0x55982745e4a0 <line:56:3, col:78> Text=" - Any kernel object or device pointers are validated with _SYSCALL_IS_OBJ()"
|   | |-TextComment 0x55982745e4c0 <line:57:3, col:79> Text=" - Any memory buffers passed in are checked to ensure that the calling thread"
|   | |-TextComment 0x55982745e4e0 <line:58:3, col:32> Text="   actually has access to them"
|   | |-TextComment 0x55982745e500 <line:59:3, col:69> Text=" - Many kernel calls do no sanity checking of parameters other than"
|   | |-TextComment 0x55982745e520 <line:60:3, col:69> Text="   assertions. The handler must check all of these conditions using"
|   | |-TextComment 0x55982745e540 <line:61:3, col:22> Text="   _SYSCALL_ASSERT()"
|   | |-TextComment 0x55982745e560 <line:62:3, col:78> Text=" - If the system call has more than 6 arguments, then arg6 will be a pointer"
|   | |-TextComment 0x55982745e580 <line:63:3, col:74> Text="   to some struct containing arguments 6+. The struct itself needs to be"
|   | |-TextComment 0x55982745e5a0 <line:64:3, col:78> Text="   validated like any other buffer passed in from userspace, and its members"
|   | |-TextComment 0x55982745e5c0 <line:65:3, col:70> Text="   individually validated (if necessary) and then passed to the real"
|   | `-TextComment 0x55982745e5e0 <line:66:3, col:41> Text="   implementation like normal arguments"
|   |-ParagraphComment 0x55982745e6d0 <line:68:3, line:69:70>
|   | |-TextComment 0x55982745e680 <line:68:3, col:75> Text=" Even if the system call implementation has no return value, these always"
|   | `-TextComment 0x55982745e6a0 <line:69:3, col:70> Text=" return something, even 0, to prevent register leakage to userspace."
|   |-ParagraphComment 0x55982745e720 <line:71:3, col:80>
|   | `-TextComment 0x55982745e6f0 <col:3, col:80> Text=" Once everything has been validated, the real implementation will be executed."
|   |-ParagraphComment 0x55982745e770 <line:73:3>
|   | `-TextComment 0x55982745e740 <col:3> Text=" "
|   |-ParamCommandComment 0x55982745e790 <col:4, line:74:3> [in] implicitly Param="arg1" ParamIndex=0
|   | `-ParagraphComment 0x55982745e840 <line:73:15, line:74:3>
|   |   |-TextComment 0x55982745e7f0 <line:73:15, col:37> Text=" system call argument 1"
|   |   `-TextComment 0x55982745e810 <line:74:3> Text=" "
|   |-ParamCommandComment 0x55982745e860 <col:4, line:75:3> [in] implicitly Param="arg2" ParamIndex=1
|   | `-ParagraphComment 0x55982745e910 <line:74:15, line:75:3>
|   |   |-TextComment 0x55982745e8c0 <line:74:15, col:37> Text=" system call argument 2"
|   |   `-TextComment 0x55982745e8e0 <line:75:3> Text=" "
|   |-ParamCommandComment 0x55982745e930 <col:4, line:76:3> [in] implicitly Param="arg3" ParamIndex=2
|   | `-ParagraphComment 0x55982745e9e0 <line:75:15, line:76:3>
|   |   |-TextComment 0x55982745e990 <line:75:15, col:37> Text=" system call argument 3"
|   |   `-TextComment 0x55982745e9b0 <line:76:3> Text=" "
|   |-ParamCommandComment 0x55982745ea00 <col:4, line:77:3> [in] implicitly Param="arg4" ParamIndex=3
|   | `-ParagraphComment 0x55982745eab0 <line:76:15, line:77:3>
|   |   |-TextComment 0x55982745ea60 <line:76:15, col:37> Text=" system call argument 4"
|   |   `-TextComment 0x55982745ea80 <line:77:3> Text=" "
|   |-ParamCommandComment 0x55982745ead0 <col:4, line:78:3> [in] implicitly Param="arg5" ParamIndex=4
|   | `-ParagraphComment 0x55982745eb80 <line:77:15, line:78:3>
|   |   |-TextComment 0x55982745eb30 <line:77:15, col:37> Text=" system call argument 5"
|   |   `-TextComment 0x55982745eb50 <line:78:3> Text=" "
|   |-ParamCommandComment 0x55982745fbe0 <col:4, line:79:3> [in] implicitly Param="arg6" ParamIndex=5
|   | `-ParagraphComment 0x55982745fc90 <line:78:15, line:79:3>
|   |   |-TextComment 0x55982745fc40 <line:78:15, col:37> Text=" system call argument 6"
|   |   `-TextComment 0x55982745fc60 <line:79:3> Text=" "
|   |-ParamCommandComment 0x55982745fcb0 <col:4, line:81:3> [in] implicitly Param="ssf" ParamIndex=6
|   | `-ParagraphComment 0x55982745fd90 <line:79:14, line:81:3>
|   |   |-TextComment 0x55982745fd10 <line:79:14, col:75> Text=" System call stack frame pointer. Used to generate kernel oops"
|   |   |-TextComment 0x55982745fd30 <line:80:3, col:70> Text="            via _arch_syscall_oops_at(). Contents are arch-specific."
|   |   `-TextComment 0x55982745fd50 <line:81:3> Text=" "
|   |-BlockCommandComment 0x55982745fdb0 <col:4, line:82:22> Name="return"
|   | `-ParagraphComment 0x55982745fe30 <line:81:11, line:82:22>
|   |   |-TextComment 0x55982745fde0 <line:81:11, col:75> Text=" system call return value, or 0 if the system call implementation"
|   |   `-TextComment 0x55982745fe00 <line:82:3, col:22> Text="         return void"
|   `-ParagraphComment 0x55982745fe80 <line:84:1>
|     `-TextComment 0x55982745fe50 <col:1> Text=" "
|-FunctionDecl 0x55982737c470 <line:93:1, line:106:1> line:93:27 z_syscall_trap 'bool (void)' static inline
| |-CompoundStmt 0x55982737c698 <line:94:1, line:106:1>
| | |-DeclStmt 0x55982737c600 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/syscall.h:95:18>
| | | `-VarDecl 0x55982737c568 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, line:15:16> /vagrant/ext/zephyros/zephyr/include/syscall.h:95:7 used ret 'bool' cinit
| | |   `-ImplicitCastExpr 0x55982737c5e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
| | |     `-IntegerLiteral 0x55982737c5c8 <col:16> 'int' 0
| | `-ReturnStmt 0x55982737c658 </vagrant/ext/zephyros/zephyr/include/syscall.h:105:2, col:9>
| |   `-ImplicitCastExpr 0x55982737c640 <col:9> 'bool' <LValueToRValue>
| |     `-DeclRefExpr 0x55982737c618 <col:9> 'bool' lvalue Var 0x55982737c568 'ret' 'bool'
| `-AlwaysInlineAttr 0x55982737c510 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x55982737c748 </vagrant/ext/zephyros/zephyr/include/syscall.h:113:1, line:120:1> line:113:20 _is_user_context 'bool (void)' static inline
| |-CompoundStmt 0x55982737c838 <line:114:1, line:120:1>
| | `-ReturnStmt 0x55982737c820 <line:118:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-ImplicitCastExpr 0x55982737c808 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x55982737c7e8 <col:16> 'int' 0
| `-FullComment 0x5598274600e0 </vagrant/ext/zephyros/zephyr/include/syscall.h:109:3, line:111:69>
|   |-ParagraphComment 0x55982745ffd0 <line:109:3, col:53>
|   | `-TextComment 0x55982745ffa0 <col:3, col:53> Text=" Indicate whether the CPU is currently in user mode"
|   |-ParagraphComment 0x559827460020 <line:111:3>
|   | `-TextComment 0x55982745fff0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827460040 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x5598274600a0 <col:11, col:69>
|       `-TextComment 0x559827460070 <col:11, col:69> Text=" true if the CPU is currently running with user permissions"
|-TypedefDecl 0x55982737c880 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h:40:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x55982737c850 '__builtin_va_list' sugar
|   |-Typedef 0x55982722b2b8 '__builtin_va_list'
|   `-ConstantArrayType 0x55982722b260 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x55982722b0d0 'struct __va_list_tag'
|       `-Record 0x55982722b048 '__va_list_tag'
|-TypedefDecl 0x55982737c910 <line:99:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x55982737c8e0 '__gnuc_va_list' sugar
|   |-Typedef 0x55982737c880 '__gnuc_va_list'
|   `-TypedefType 0x55982737c850 '__builtin_va_list' sugar
|     |-Typedef 0x55982722b2b8 '__builtin_va_list'
|     `-ConstantArrayType 0x55982722b260 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x55982722b0d0 'struct __va_list_tag'
|         `-Record 0x55982722b048 '__va_list_tag'
|-FunctionDecl 0x55982737cac0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:51:1, line:54:1> line:51:40 used printk 'void (const char *, ...)' static inline
| |-ParmVarDecl 0x55982737ca00 <col:47, col:59> col:59 used fmt 'const char *'
| |-CompoundStmt 0x55982737cc88 <line:52:1, line:54:1>
| | `-CStyleCastExpr 0x55982737cc60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55982737cc48 <col:29, col:31> 'const char *' <LValueToRValue>
| |     `-ParenExpr 0x55982737cc28 <col:29, col:31> 'const char *' lvalue
| |       `-DeclRefExpr 0x55982737cbc0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:53:13> 'const char *' lvalue ParmVar 0x55982737ca00 'fmt' 'const char *'
| `-FormatAttr 0x55982737cb68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 2
|-FunctionDecl 0x55982737cf10 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:56:1, line:60:1> line:56:40 vprintk 'void (const char *, struct __va_list_tag *)' static inline
| |-ParmVarDecl 0x55982737cd08 <col:48, col:60> col:60 used fmt 'const char *'
| |-ParmVarDecl 0x55982737ce00 <col:65, col:73> col:73 used ap 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x55982737d1a8 <line:57:1, line:60:1>
| | |-CStyleCastExpr 0x55982737d0b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55982737d0a0 <col:29, col:31> 'const char *' <LValueToRValue>
| | |   `-ParenExpr 0x55982737d080 <col:29, col:31> 'const char *' lvalue
| | |     `-DeclRefExpr 0x55982737d018 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:58:13> 'const char *' lvalue ParmVar 0x55982737cd08 'fmt' 'const char *'
| | `-CStyleCastExpr 0x55982737d180 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55982737d168 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue>
| |     `-ParenExpr 0x55982737d148 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue
| |       `-DeclRefExpr 0x55982737d0e0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:59:13> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x55982737ce00 'ap' 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x55982737cfc0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 0
|-FunctionDecl 0x559827384eb8 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:63:1, line:64:26> line:63:32 snprintk 'int (char *, size_t, const char *, ...)' extern
| |-ParmVarDecl 0x55982737d230 <col:41, col:47> col:47 str 'char *'
| |-ParmVarDecl 0x55982737d2a0 <col:52, col:59> col:59 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559827384d80 <line:64:6, col:18> col:18 fmt 'const char *'
| `-FormatAttr 0x559827384f70 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 4
|-FunctionDecl 0x5598273852d8 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:65:1, line:66:35> line:65:32 vsnprintk 'int (char *, size_t, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x559827385030 <col:42, col:48> col:48 str 'char *'
| |-ParmVarDecl 0x5598273850a0 <col:53, col:60> col:60 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559827385118 <line:66:8, col:20> col:20 fmt 'const char *'
| |-ParmVarDecl 0x559827385188 <col:25, col:33> col:33 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x559827385398 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x5598273858e0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:68:1, line:69:34> line:68:33 z_vprintk 'void (int (*)(int, void *), void *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x559827385640 <col:43, col:68> col:49 out 'int (*)(int, void *)'
| |-ParmVarDecl 0x5598273856b8 <col:71, col:77> col:77 ctx 'void *'
| |-ParmVarDecl 0x559827385730 <line:69:7, col:19> col:19 fmt 'const char *'
| |-ParmVarDecl 0x5598273857a0 <col:24, col:32> col:32 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x5598273859a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-RecordDecl 0x559827385a58 prev 0x559827318788 </vagrant/ext/zephyros/zephyr/include/sys/arch_interface.h:41:1, col:8> col:8 struct k_thread
|-RecordDecl 0x559827385ae0 <line:42:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x559827385b90 <line:44:9, col:16> col:16 struct _k_thread_stack_element
|-TypedefDecl 0x559827385c90 <col:1, col:40> col:40 referenced k_thread_stack_t 'struct _k_thread_stack_element':'struct _k_thread_stack_element'
| `-ElaboratedType 0x559827385c40 'struct _k_thread_stack_element' sugar
|   `-RecordType 0x559827385c20 'struct _k_thread_stack_element'
|     `-Record 0x5598273c8920 '_k_thread_stack_element'
|-TypedefDecl 0x559827388190 <line:46:1, col:62> col:16 referenced k_thread_entry_t 'void (*)(void *, void *, void *)'
| `-PointerType 0x559827388120 'void (*)(void *, void *, void *)'
|   `-ParenType 0x5598273880c0 'void (void *, void *, void *)' sugar
|     `-FunctionProtoType 0x559827388070 'void (void *, void *, void *)' cdecl
|       |-BuiltinType 0x55982722a6f0 'void'
|       |-PointerType 0x55982722ab90 'void *'
|       | `-BuiltinType 0x55982722a6f0 'void'
|       |-PointerType 0x55982722ab90 'void *'
|       | `-BuiltinType 0x55982722a6f0 'void'
|       `-PointerType 0x55982722ab90 'void *'
|         `-BuiltinType 0x55982722a6f0 'void'
|-FunctionDecl 0x5598273882d8 <line:59:1, col:45> col:21 used arch_k_cycle_get_32 'u32_t (void)' static inline
| `-FullComment 0x559827460290 <line:55:3, line:57:24>
|   |-ParagraphComment 0x559827460180 <line:55:3, col:70>
|   | `-TextComment 0x559827460150 <col:3, col:70> Text=" Obtain the current cycle count, in units that are hardware-specific"
|   |-ParagraphComment 0x5598274601d0 <line:57:3>
|   | `-TextComment 0x5598274601a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274601f0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x559827460250 <col:8, col:24>
|       `-TextComment 0x559827460220 <col:8, col:24> Text=" k_cycle_get_32()"
|-FunctionDecl 0x559827388650 <line:132:1, col:24> col:6 used arch_cpu_idle 'void (void)'
| `-FullComment 0x559827460610 <line:120:3, line:130:20>
|   |-ParagraphComment 0x559827460330 <line:120:3>
|   | `-TextComment 0x559827460300 <col:3> Text=" "
|   |-BlockCommandComment 0x559827460350 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5598274603b0 <col:10, col:33>
|   |   `-TextComment 0x559827460380 <col:10, col:33> Text=" Power save idle routine"
|   |-ParagraphComment 0x559827460450 <line:122:3, line:124:47>
|   | |-TextComment 0x5598274603d0 <line:122:3, col:74> Text=" This function will be called by the kernel idle loop or possibly within"
|   | |-TextComment 0x5598274603f0 <line:123:3, col:68> Text=" an implementation of z_sys_power_save_idle in the kernel when the"
|   | `-TextComment 0x559827460410 <line:124:3, col:47> Text=" '_sys_power_save_flag' variable is non-zero."
|   |-ParagraphComment 0x5598274604f0 <line:126:3, line:128:35>
|   | |-TextComment 0x559827460470 <line:126:3, col:72> Text=" Architectures that do not implement power management instructions may"
|   | |-TextComment 0x559827460490 <line:127:3, col:69> Text=" immediately return, otherwise a power-saving instruction should be"
|   | `-TextComment 0x5598274604b0 <line:128:3, col:35> Text=" issued to wait for an interrupt."
|   |-ParagraphComment 0x559827460540 <line:130:3>
|   | `-TextComment 0x559827460510 <col:3> Text=" "
|   `-BlockCommandComment 0x559827460560 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x5598274605c0 <col:8, col:20>
|       `-TextComment 0x559827460590 <col:8, col:20> Text=" k_cpu_idle()"
|-FunctionDecl 0x5598273887f0 <line:152:1, col:43> col:6 used arch_cpu_atomic_idle 'void (unsigned int)'
| |-ParmVarDecl 0x559827388730 <col:27, col:40> col:40 key 'unsigned int'
| `-FullComment 0x559827460b20 <line:135:3, line:150:76>
|   |-ParagraphComment 0x5598274606b0 <line:135:3>
|   | `-TextComment 0x559827460680 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274606d0 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x559827460730 <col:10, col:66>
|   |   `-TextComment 0x559827460700 <col:10, col:66> Text=" Atomically re-enable interrupts and enter low power mode"
|   |-ParagraphComment 0x559827460780 <line:137:3, col:62>
|   | `-TextComment 0x559827460750 <col:3, col:62> Text=" The requirements for arch_cpu_atomic_idle() are as follows:"
|   |-ParagraphComment 0x559827460870 <line:139:3, line:143:44>
|   | |-TextComment 0x5598274607a0 <line:139:3, col:67> Text=" -# Enabling interrupts and entering a low-power mode needs to be"
|   | |-TextComment 0x5598274607c0 <line:140:3, col:73> Text="    atomic, i.e. there should be no period of time where interrupts are"
|   | |-TextComment 0x5598274607e0 <line:141:3, col:77> Text="    enabled before the processor enters a low-power mode.  See the comments"
|   | |-TextComment 0x559827460800 <line:142:3, col:62> Text="    in k_lifo_get(), for example, of the race condition that"
|   | `-TextComment 0x559827460820 <line:143:3, col:44> Text="    occurs if this requirement is not met."
|   |-ParagraphComment 0x5598274608e0 <line:145:3, line:146:65>
|   | |-TextComment 0x559827460890 <line:145:3, col:74> Text=" -# After waking up from the low-power mode, the interrupt lockout state"
|   | `-TextComment 0x5598274608b0 <line:146:3, col:65> Text="    must be restored as indicated in the 'key' input parameter."
|   |-ParagraphComment 0x559827460930 <line:148:3>
|   | `-TextComment 0x559827460900 <col:3> Text=" "
|   |-BlockCommandComment 0x559827460950 <col:4, col:27> Name="see"
|   | `-ParagraphComment 0x5598274609b0 <col:8, col:27>
|   |   `-TextComment 0x559827460980 <col:8, col:27> Text=" k_cpu_atomic_idle()"
|   |-ParagraphComment 0x559827460a00 <line:150:3>
|   | `-TextComment 0x5598274609d0 <col:3> Text=" "
|   `-ParamCommandComment 0x559827460a20 <col:4, col:76> [in] implicitly Param="key" ParamIndex=0
|     `-ParagraphComment 0x559827460ab0 <col:14, col:76>
|       `-TextComment 0x559827460a80 <col:14, col:76> Text=" Lockout key returned by previous invocation of arch_irq_lock()"
|-TypedefDecl 0x559827388ae0 <line:167:1, col:57> col:30 referenced arch_cpustart_t 'void (*)(void *) __attribute__((noreturn))'
| |-PointerType 0x559827388a80 'void (*)(void *) __attribute__((noreturn))'
| | `-ParenType 0x559827388a20 'void (void *) __attribute__((noreturn))' sugar
| |   `-FunctionProtoType 0x5598273889e0 'void (void *) __attribute__((noreturn))' noreturn cdecl
| |     |-BuiltinType 0x55982722a6f0 'void'
| |     `-PointerType 0x55982722ab90 'void *'
| |       `-BuiltinType 0x55982722a6f0 'void'
| `-FullComment 0x559827460d00 <line:163:3, line:165:52>
|   |-ParagraphComment 0x559827460bc0 <line:163:3, col:25>
|   | `-TextComment 0x559827460b90 <col:3, col:25> Text=" Per-cpu entry function"
|   |-ParagraphComment 0x559827460c10 <line:165:3>
|   | `-TextComment 0x559827460be0 <col:3> Text=" "
|   `-ParamCommandComment 0x559827460c30 <col:4, col:52> [in] implicitly Param="context"
|     `-ParagraphComment 0x559827460cc0 <col:18, col:52>
|       `-TextComment 0x559827460c90 <col:18, col:52> Text=" parameter, implementation specific"
|-FunctionDecl 0x559827389fa0 <line:189:1, line:190:36> line:189:6 arch_start_cpu 'void (int, k_thread_stack_t *, int, arch_cpustart_t, void *)'
| |-ParmVarDecl 0x559827388b80 <col:21, col:25> col:25 cpu_num 'int'
| |-ParmVarDecl 0x559827388c68 <col:34, col:52> col:52 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x559827388ce0 <col:59, col:63> col:63 sz 'int'
| |-ParmVarDecl 0x559827388d70 <line:190:7, col:23> col:23 fn 'arch_cpustart_t':'void (*)(void *) __attribute__((noreturn))'
| |-ParmVarDecl 0x559827388de8 <col:27, col:33> col:33 arg 'void *'
| `-FullComment 0x559827461480 <line:170:3, line:187:51>
|   |-ParagraphComment 0x559827460da0 <line:170:3>
|   | `-TextComment 0x559827460d70 <col:3> Text=" "
|   |-BlockCommandComment 0x559827460dc0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x559827460e20 <col:10, col:53>
|   |   `-TextComment 0x559827460df0 <col:10, col:53> Text=" Start a numbered CPU on a MP-capable system"
|   |-ParagraphComment 0x559827460f10 <line:172:3, line:176:68>
|   | |-TextComment 0x559827460e40 <line:172:3, col:77> Text=" This starts and initializes a specific CPU.  The main thread on startup is"
|   | |-TextComment 0x559827460e60 <line:173:3, col:78> Text=" running on CPU zero, other processors are numbered sequentially.  On return"
|   | |-TextComment 0x559827460e80 <line:174:3, col:78> Text=" from this function, the CPU is known to have begun operating and will enter"
|   | |-TextComment 0x559827460ea0 <line:175:3, col:79> Text=" the provided function.  Its interrupts will be initialized but disabled such"
|   | `-TextComment 0x559827460ec0 <line:176:3, col:68> Text=" that irq_unlock() with the provided key will work to enable them."
|   |-ParagraphComment 0x559827460fd0 <line:178:3, line:181:41>
|   | |-TextComment 0x559827460f30 <line:178:3, col:67> Text=" Normally, in SMP mode this function will be called by the kernel"
|   | |-TextComment 0x559827460f50 <line:179:3, col:79> Text=" initialization and should not be used as a user API.  But it is defined here"
|   | |-TextComment 0x559827460f70 <line:180:3, col:76> Text=" for special-purpose apps which want Zephyr running on one core and to use"
|   | `-TextComment 0x559827460f90 <line:181:3, col:41> Text=" others for design-specific processing."
|   |-ParagraphComment 0x559827461020 <line:183:3>
|   | `-TextComment 0x559827460ff0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827461040 <col:4, line:184:3> [in] implicitly Param="cpu_num" ParamIndex=0
|   | `-ParagraphComment 0x5598274610f0 <line:183:18, line:184:3>
|   |   |-TextComment 0x5598274610a0 <line:183:18, col:43> Text=" Integer number of the CPU"
|   |   `-TextComment 0x5598274610c0 <line:184:3> Text=" "
|   |-ParamCommandComment 0x559827461110 <col:4, line:185:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x5598274611c0 <line:184:16, line:185:3>
|   |   |-TextComment 0x559827461170 <line:184:16, col:40> Text=" Stack memory for the CPU"
|   |   `-TextComment 0x559827461190 <line:185:3> Text=" "
|   |-ParamCommandComment 0x5598274611e0 <col:4, line:186:3> [in] implicitly Param="sz" ParamIndex=2
|   | `-ParagraphComment 0x559827461290 <line:185:13, line:186:3>
|   |   |-TextComment 0x559827461240 <line:185:13, col:40> Text=" Stack buffer size, in bytes"
|   |   `-TextComment 0x559827461260 <line:186:3> Text=" "
|   |-ParamCommandComment 0x5598274612b0 <col:4, line:187:3> [in] implicitly Param="fn" ParamIndex=3
|   | `-ParagraphComment 0x559827461360 <line:186:13, line:187:3>
|   |   |-TextComment 0x559827461310 <line:186:13, col:50> Text=" Function to begin running on the CPU."
|   |   `-TextComment 0x559827461330 <line:187:3> Text=" "
|   `-ParamCommandComment 0x559827461380 <col:4, col:51> [in] implicitly Param="arg" ParamIndex=4
|     `-ParagraphComment 0x559827461410 <col:14, col:51>
|       `-TextComment 0x5598274613e0 <col:14, col:51> Text=" Untyped argument to be passed to "fn""
|-FunctionDecl 0x55982738a190 <line:204:1, col:46> col:28 used arch_irq_lock 'unsigned int (void)' static inline
| `-FullComment 0x559827461630 <line:200:3, line:202:18>
|   |-ParagraphComment 0x559827461520 <line:200:3, col:37>
|   | `-TextComment 0x5598274614f0 <col:3, col:37> Text=" Lock interrupts on the current CPU"
|   |-ParagraphComment 0x559827461570 <line:202:3>
|   | `-TextComment 0x559827461540 <col:3> Text=" "
|   `-BlockCommandComment 0x559827461590 <col:4, col:18> Name="see"
|     `-ParagraphComment 0x5598274615f0 <col:8, col:18>
|       `-TextComment 0x5598274615c0 <col:8, col:18> Text=" irq_lock()"
|-FunctionDecl 0x55982738a2f8 <line:211:1, col:52> col:20 used arch_irq_unlock 'void (unsigned int)' static inline
| |-ParmVarDecl 0x55982738a270 <col:36, col:49> col:49 key 'unsigned int'
| `-FullComment 0x5598274617e0 <line:207:3, line:209:20>
|   |-ParagraphComment 0x5598274616d0 <line:207:3, col:39>
|   | `-TextComment 0x5598274616a0 <col:3, col:39> Text=" Unlock interrupts on the current CPU"
|   |-ParagraphComment 0x559827461720 <line:209:3>
|   | `-TextComment 0x5598274616f0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827461740 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x5598274617a0 <col:8, col:20>
|       `-TextComment 0x559827461770 <col:8, col:20> Text=" irq_unlock()"
|-FunctionDecl 0x55982738a468 <line:220:1, col:54> col:20 arch_irq_unlocked 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x55982738a3e0 <col:38, col:51> col:51 key 'unsigned int'
| `-FullComment 0x559827461a80 <line:214:3, line:218:39>
|   |-ParagraphComment 0x559827461880 <line:214:3, col:68>
|   | `-TextComment 0x559827461850 <col:3, col:68> Text=" Test if calling arch_irq_unlock() with this key would unlock irqs"
|   |-ParagraphComment 0x5598274618d0 <line:216:3>
|   | `-TextComment 0x5598274618a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274618f0 <col:4, line:217:3> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x5598274619a0 <line:216:14, line:217:3>
|   |   |-TextComment 0x559827461950 <line:216:14, col:47> Text=" value returned by arch_irq_lock()"
|   |   `-TextComment 0x559827461970 <line:217:3> Text=" "
|   `-BlockCommandComment 0x5598274619c0 <col:4, line:218:39> Name="return"
|     `-ParagraphComment 0x559827461a40 <line:217:11, line:218:39>
|       |-TextComment 0x5598274619f0 <line:217:11, col:72> Text=" true if interrupts were unlocked prior to the arch_irq_lock()"
|       `-TextComment 0x559827461a10 <line:218:3, col:39> Text=" call that produced the key argument."
|-FunctionDecl 0x55982738a5d8 <line:227:1, col:39> col:6 arch_irq_disable 'void (unsigned int)'
| |-ParmVarDecl 0x55982738a550 <col:23, col:36> col:36 irq 'unsigned int'
| `-FullComment 0x559827446b30 <line:223:3, line:225:21>
|   |-ParagraphComment 0x559827461b20 <line:223:3, col:39>
|   | `-TextComment 0x559827461af0 <col:3, col:39> Text=" Disable the specified interrupt line"
|   |-ParagraphComment 0x559827461b70 <line:225:3>
|   | `-TextComment 0x559827461b40 <col:3> Text=" "
|   `-BlockCommandComment 0x559827461b90 <col:4, col:21> Name="see"
|     `-ParagraphComment 0x559827446af0 <col:8, col:21>
|       `-TextComment 0x559827461bc0 <col:8, col:21> Text=" irq_disable()"
|-FunctionDecl 0x55982738a748 <line:234:1, col:38> col:6 arch_irq_enable 'void (unsigned int)'
| |-ParmVarDecl 0x55982738a6c0 <col:22, col:35> col:35 irq 'unsigned int'
| `-FullComment 0x559827446ce0 <line:230:3, line:232:20>
|   |-ParagraphComment 0x559827446bd0 <line:230:3, col:38>
|   | `-TextComment 0x559827446ba0 <col:3, col:38> Text=" Enable the specified interrupt line"
|   |-ParagraphComment 0x559827446c20 <line:232:3>
|   | `-TextComment 0x559827446bf0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827446c40 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x559827446ca0 <col:8, col:20>
|       `-TextComment 0x559827446c70 <col:8, col:20> Text=" irq_enable()"
|-FunctionDecl 0x55982738a8f8 <line:241:1, col:41> col:5 arch_irq_is_enabled 'int (unsigned int)'
| |-ParmVarDecl 0x55982738a830 <col:25, col:38> col:38 irq 'unsigned int'
| `-FullComment 0x559827446e90 <line:237:3, line:239:24>
|   |-ParagraphComment 0x559827446d80 <line:237:3, col:39>
|   | `-TextComment 0x559827446d50 <col:3, col:39> Text=" Test if an interrupt line is enabled"
|   |-ParagraphComment 0x559827446dd0 <line:239:3>
|   | `-TextComment 0x559827446da0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827446df0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x559827446e50 <col:8, col:24>
|       `-TextComment 0x559827446e20 <col:8, col:24> Text=" irq_is_enabled()"
|-FunctionDecl 0x55982738ae48 <line:254:1, line:256:37> line:254:5 used arch_irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |-ParmVarDecl 0x55982738a9e0 <col:30, col:43> col:43 irq 'unsigned int'
| |-ParmVarDecl 0x55982738aa58 <col:48, col:61> col:61 priority 'unsigned int'
| |-ParmVarDecl 0x55982738abf0 <line:255:9, col:40> col:16 routine 'void (*)(void *)'
| |-ParmVarDecl 0x55982738ac68 <line:256:9, col:15> col:15 parameter 'void *'
| |-ParmVarDecl 0x55982738acd8 <col:26, col:32> col:32 flags 'u32_t':'unsigned int'
| `-FullComment 0x5598274474b0 <line:244:3, line:252:48>
|   |-ParagraphComment 0x559827446f30 <line:244:3, col:53>
|   | `-TextComment 0x559827446f00 <col:3, col:53> Text=" Arch-specific hook to install a dynamic interrupt."
|   |-ParagraphComment 0x559827446f80 <line:246:3>
|   | `-TextComment 0x559827446f50 <col:3> Text=" "
|   |-ParamCommandComment 0x559827446fa0 <col:4, line:247:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x559827447050 <line:246:14, line:247:3>
|   |   |-TextComment 0x559827447000 <line:246:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x559827447020 <line:247:3> Text=" "
|   |-ParamCommandComment 0x559827447070 <col:4, line:248:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x559827447120 <line:247:19, line:248:3>
|   |   |-TextComment 0x5598274470d0 <line:247:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x5598274470f0 <line:248:3> Text=" "
|   |-ParamCommandComment 0x559827447140 <col:4, line:249:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x5598274471f0 <line:248:18, line:249:3>
|   |   |-TextComment 0x5598274471a0 <line:248:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x5598274471c0 <line:249:3> Text=" "
|   |-ParamCommandComment 0x559827447210 <col:4, line:250:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x5598274472c0 <line:249:20, line:250:3>
|   |   |-TextComment 0x559827447270 <line:249:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x559827447290 <line:250:3> Text=" "
|   |-ParamCommandComment 0x5598274472e0 <col:4, col:52> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x559827447370 <col:16, col:52>
|   |   `-TextComment 0x559827447340 <col:16, col:52> Text=" Arch-specific IRQ configuration flag"
|   |-ParagraphComment 0x5598274473c0 <line:252:3>
|   | `-TextComment 0x559827447390 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274473e0 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x559827447440 <col:11, col:48>
|       `-TextComment 0x559827447410 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x55982738b288 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:27:1, line:34:1> line:27:19 used sys_clock_hw_cycles_per_sec 'int (void)' static inline
| `-CompoundStmt 0x55982738b338 <line:28:1, line:34:1>
|-FunctionDecl 0x55982738b790 <line:55:1, line:105:1> line:55:28 used z_tmcvt 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' static inline
| |-ParmVarDecl 0x55982738b358 <col:36, col:42> col:42 used t 'u64_t':'unsigned long long'
| |-ParmVarDecl 0x55982738b3c8 <col:45, col:51> col:51 used from_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55982738b438 <col:60, col:66> col:66 used to_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55982738b4a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:13> col:13 used const_hz 'bool'
| |-ParmVarDecl 0x55982738b518 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:28> col:28 used result32 'bool'
| |-ParmVarDecl 0x55982738b588 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:13> col:13 used round_up 'bool'
| |-ParmVarDecl 0x55982738b5f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:28> col:28 used round_off 'bool'
| |-CompoundStmt 0x55982738f968 <line:58:1, line:105:1>
| | |-DeclStmt 0x55982738bbf0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:48>
| | | `-VarDecl 0x55982738b8c0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:47> line:59:7 used mul_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x55982738bbd8 <col:19, line:60:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x55982738bbb0 <line:59:19, line:60:47> 'int' '&&'
| | |       |-BinaryOperator 0x55982738ba40 <line:59:19, line:60:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x55982738ba28 <line:59:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x55982738ba10 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x55982738b920 <col:19> 'bool' lvalue ParmVar 0x55982738b4a8 'const_hz' 'bool'
| | |       | `-ParenExpr 0x55982738b9f0 <line:60:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x55982738b9c8 <col:4, col:12> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x55982738b998 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x55982738b948 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b438 'to_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x55982738b9b0 <col:12> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x55982738b970 <col:12> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b3c8 'from_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x55982738bb90 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x55982738bb68 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x55982738bb10 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x55982738bae8 <col:26, col:34> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x55982738bab8 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x55982738ba68 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b438 'to_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x55982738bad0 <col:34> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x55982738ba90 <col:34> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b3c8 'from_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x55982738bb50 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x55982738bb30 <col:46> 'int' 0
| | |-DeclStmt 0x55982738bf48 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:48>
| | | `-VarDecl 0x55982738bc18 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:47> line:61:7 used div_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x55982738bf30 <col:19, line:62:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x55982738bf08 <line:61:19, line:62:47> 'int' '&&'
| | |       |-BinaryOperator 0x55982738bd98 <line:61:19, line:62:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x55982738bd80 <line:61:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x55982738bd68 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x55982738bc78 <col:19> 'bool' lvalue ParmVar 0x55982738b4a8 'const_hz' 'bool'
| | |       | `-ParenExpr 0x55982738bd48 <line:62:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x55982738bd20 <col:4, col:14> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x55982738bcf0 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x55982738bca0 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b3c8 'from_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x55982738bd08 <col:14> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x55982738bcc8 <col:14> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b438 'to_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x55982738bee8 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x55982738bec0 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x55982738be68 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x55982738be40 <col:26, col:36> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x55982738be10 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x55982738bdc0 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b3c8 'from_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x55982738be28 <col:36> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x55982738bde8 <col:36> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b438 'to_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x55982738bea8 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x55982738be88 <col:46> 'int' 0
| | |-IfStmt 0x55982738e040 <line:64:2, line:66:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x55982738de70 <line:64:6, col:17> 'int' '=='
| | | | |-ImplicitCastExpr 0x55982738de40 <col:6> 'u32_t':'unsigned int' <LValueToRValue>
| | | | | `-DeclRefExpr 0x55982738bf60 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b3c8 'from_hz' 'u32_t':'unsigned int'
| | | | `-ImplicitCastExpr 0x55982738de58 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55982738bf88 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b438 'to_hz' 'u32_t':'unsigned int'
| | | |-CompoundStmt 0x55982738e028 <col:24, line:66:2>
| | | | `-ReturnStmt 0x55982738e010 <line:65:3, col:34>
| | | |   `-ConditionalOperator 0x55982738dfe0 <col:10, col:34> 'unsigned long long'
| | | |     |-ImplicitCastExpr 0x55982738df98 <col:10> 'int' <IntegralCast>
| | | |     | `-ImplicitCastExpr 0x55982738df80 <col:10> 'bool' <LValueToRValue>
| | | |     |   `-DeclRefExpr 0x55982738de98 <col:10> 'bool' lvalue ParmVar 0x55982738b518 'result32' 'bool'
| | | |     |-ImplicitCastExpr 0x55982738dfc8 <col:21, col:30> 'unsigned long long' <IntegralCast>
| | | |     | `-ParenExpr 0x55982738df38 <col:21, col:30> 'u32_t':'unsigned int'
| | | |     |   `-CStyleCastExpr 0x55982738df10 <col:22, col:29> 'u32_t':'unsigned int' <IntegralCast>
| | | |     |     `-ImplicitCastExpr 0x55982738def8 <col:29> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |     |       `-DeclRefExpr 0x55982738dec0 <col:29> 'u64_t':'unsigned long long' lvalue ParmVar 0x55982738b358 't' 'u64_t':'unsigned long long'
| | | |     `-ImplicitCastExpr 0x55982738dfb0 <col:34> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |       `-DeclRefExpr 0x55982738df58 <col:34> 'u64_t':'unsigned long long' lvalue ParmVar 0x55982738b358 't' 'u64_t':'unsigned long long'
| | | `-<<<NULL>>>
| | |-DeclStmt 0x55982738e120 <line:68:2, col:15>
| | | `-VarDecl 0x55982738e088 <col:2, col:14> col:8 used off 'u64_t':'unsigned long long' cinit
| | |   `-ImplicitCastExpr 0x55982738e108 <col:14> 'u64_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x55982738e0e8 <col:14> 'int' 0
| | |-IfStmt 0x55982738e700 <line:70:2, line:78:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x55982738e178 <line:70:6, col:7> 'int' prefix '!'
| | | | `-ImplicitCastExpr 0x55982738e160 <col:7> 'bool' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55982738e138 <col:7> 'bool' lvalue Var 0x55982738b8c0 'mul_ratio' 'bool'
| | | |-CompoundStmt 0x55982738e6e0 <col:18, line:78:2>
| | | | |-DeclStmt 0x55982738e398 <line:71:3, col:59>
| | | | | `-VarDecl 0x55982738e1a8 <col:3, col:52> col:9 used rdivisor 'u32_t':'unsigned int' cinit
| | | | |   `-ConditionalOperator 0x55982738e368 <col:20, col:52> 'unsigned int'
| | | | |     |-ImplicitCastExpr 0x55982738e338 <col:20> 'int' <IntegralCast>
| | | | |     | `-ImplicitCastExpr 0x55982738e320 <col:20> 'bool' <LValueToRValue>
| | | | |     |   `-DeclRefExpr 0x55982738e208 <col:20> 'bool' lvalue Var 0x55982738bc18 'div_ratio' 'bool'
| | | | |     |-ParenExpr 0x55982738e2d8 <col:32, col:48> 'unsigned int'
| | | | |     | `-BinaryOperator 0x55982738e2b0 <col:33, col:43> 'unsigned int' '/'
| | | | |     |   |-ImplicitCastExpr 0x55982738e280 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |   | `-DeclRefExpr 0x55982738e230 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b3c8 'from_hz' 'u32_t':'unsigned int'
| | | | |     |   `-ImplicitCastExpr 0x55982738e298 <col:43> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |     `-DeclRefExpr 0x55982738e258 <col:43> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b438 'to_hz' 'u32_t':'unsigned int'
| | | | |     `-ImplicitCastExpr 0x55982738e350 <col:52> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x55982738e2f8 <col:52> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b3c8 'from_hz' 'u32_t':'unsigned int'
| | | | `-IfStmt 0x55982738e6a8 <line:73:3, line:77:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-ImplicitCastExpr 0x55982738e3d8 <line:73:7> 'bool' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x55982738e3b0 <col:7> 'bool' lvalue ParmVar 0x55982738b588 'round_up' 'bool'
| | | |   |-CompoundStmt 0x55982738e4f8 <col:17, line:75:3>
| | | |   | `-BinaryOperator 0x55982738e4d0 <line:74:4, col:21> 'u64_t':'unsigned long long' '='
| | | |   |   |-DeclRefExpr 0x55982738e3f0 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x55982738e088 'off' 'u64_t':'unsigned long long'
| | | |   |   `-ImplicitCastExpr 0x55982738e4b8 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |   |     `-BinaryOperator 0x55982738e490 <col:10, col:21> 'unsigned int' '-'
| | | |   |       |-ImplicitCastExpr 0x55982738e460 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   |       | `-DeclRefExpr 0x55982738e418 <col:10> 'u32_t':'unsigned int' lvalue Var 0x55982738e1a8 'rdivisor' 'u32_t':'unsigned int'
| | | |   |       `-ImplicitCastExpr 0x55982738e478 <col:21> 'unsigned int' <IntegralCast>
| | | |   |         `-IntegerLiteral 0x55982738e440 <col:21> 'int' 1
| | | |   `-IfStmt 0x55982738e670 <line:75:10, line:77:3>
| | | |     |-<<<NULL>>>
| | | |     |-<<<NULL>>>
| | | |     |-ImplicitCastExpr 0x55982738e538 <line:75:14> 'bool' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x55982738e510 <col:14> 'bool' lvalue ParmVar 0x55982738b5f8 'round_off' 'bool'
| | | |     |-CompoundStmt 0x55982738e658 <col:25, line:77:3>
| | | |     | `-BinaryOperator 0x55982738e630 <line:76:4, col:21> 'u64_t':'unsigned long long' '='
| | | |     |   |-DeclRefExpr 0x55982738e550 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x55982738e088 'off' 'u64_t':'unsigned long long'
| | | |     |   `-ImplicitCastExpr 0x55982738e618 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |     |     `-BinaryOperator 0x55982738e5f0 <col:10, col:21> 'unsigned int' '/'
| | | |     |       |-ImplicitCastExpr 0x55982738e5c0 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |     |       | `-DeclRefExpr 0x55982738e578 <col:10> 'u32_t':'unsigned int' lvalue Var 0x55982738e1a8 'rdivisor' 'u32_t':'unsigned int'
| | | |     |       `-ImplicitCastExpr 0x55982738e5d8 <col:21> 'unsigned int' <IntegralCast>
| | | |     |         `-IntegerLiteral 0x55982738e5a0 <col:21> 'int' 2
| | | |     `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-IfStmt 0x55982738f908 <line:85:2, line:104:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x55982738e760 <line:85:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x55982738e738 <col:6> 'bool' lvalue Var 0x55982738bc18 'div_ratio' 'bool'
| |   |-CompoundStmt 0x55982738ebd8 <col:17, line:92:2>
| |   | |-CompoundAssignOperator 0x55982738e7e0 <line:86:3, col:8> 'u64_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| |   | | |-DeclRefExpr 0x55982738e778 <col:3> 'u64_t':'unsigned long long' lvalue ParmVar 0x55982738b358 't' 'u64_t':'unsigned long long'
| |   | | `-ImplicitCastExpr 0x55982738e7c8 <col:8> 'u64_t':'unsigned long long' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x55982738e7a0 <col:8> 'u64_t':'unsigned long long' lvalue Var 0x55982738e088 'off' 'u64_t':'unsigned long long'
| |   | `-IfStmt 0x55982738eba0 <line:87:3, line:91:3>
| |   |   |-<<<NULL>>>
| |   |   |-<<<NULL>>>
| |   |   |-ImplicitCastExpr 0x55982738e840 <line:87:7> 'bool' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x55982738e818 <col:7> 'bool' lvalue ParmVar 0x55982738b518 'result32' 'bool'
| |   |   |-CompoundStmt 0x55982738ea10 <col:17, line:89:3>
| |   |   | `-ReturnStmt 0x55982738e9f8 <line:88:4, col:40>
| |   |   |   `-ImplicitCastExpr 0x55982738e9e0 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |   |   |     `-BinaryOperator 0x55982738e9b8 <col:11, col:40> 'unsigned int' '/'
| |   |   |       |-ParenExpr 0x55982738e8d0 <col:11, col:20> 'u32_t':'unsigned int'
| |   |   |       | `-CStyleCastExpr 0x55982738e8a8 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |   |   |       |   `-ImplicitCastExpr 0x55982738e890 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |   |       |     `-DeclRefExpr 0x55982738e858 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x55982738b358 't' 'u64_t':'unsigned long long'
| |   |   |       `-ParenExpr 0x55982738e998 <col:24, col:40> 'unsigned int'
| |   |   |         `-BinaryOperator 0x55982738e970 <col:25, col:35> 'unsigned int' '/'
| |   |   |           |-ImplicitCastExpr 0x55982738e940 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |           | `-DeclRefExpr 0x55982738e8f0 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b3c8 'from_hz' 'u32_t':'unsigned int'
| |   |   |           `-ImplicitCastExpr 0x55982738e958 <col:35> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |             `-DeclRefExpr 0x55982738e918 <col:35> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b438 'to_hz' 'u32_t':'unsigned int'
| |   |   `-CompoundStmt 0x55982738eb88 <line:89:10, line:91:3>
| |   |     `-ReturnStmt 0x55982738eb70 <line:90:4, col:31>
| |   |       `-BinaryOperator 0x55982738eb48 <col:11, col:31> 'unsigned long long' '/'
| |   |         |-ImplicitCastExpr 0x55982738eb18 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |         | `-DeclRefExpr 0x55982738ea28 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x55982738b358 't' 'u64_t':'unsigned long long'
| |   |         `-ImplicitCastExpr 0x55982738eb30 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |   |           `-ParenExpr 0x55982738eaf8 <col:15, col:31> 'unsigned int'
| |   |             `-BinaryOperator 0x55982738ead0 <col:16, col:26> 'unsigned int' '/'
| |   |               |-ImplicitCastExpr 0x55982738eaa0 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |   |               | `-DeclRefExpr 0x55982738ea50 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b3c8 'from_hz' 'u32_t':'unsigned int'
| |   |               `-ImplicitCastExpr 0x55982738eab8 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| |   |                 `-DeclRefExpr 0x55982738ea78 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b438 'to_hz' 'u32_t':'unsigned int'
| |   `-IfStmt 0x55982738f8d0 <line:92:9, line:104:2>
| |     |-<<<NULL>>>
| |     |-<<<NULL>>>
| |     |-ImplicitCastExpr 0x55982738ec20 <line:92:13> 'bool' <LValueToRValue>
| |     | `-DeclRefExpr 0x55982738ebf8 <col:13> 'bool' lvalue Var 0x55982738b8c0 'mul_ratio' 'bool'
| |     |-CompoundStmt 0x55982738f398 <col:24, line:98:2>
| |     | `-IfStmt 0x55982738f360 <line:93:3, line:97:3>
| |     |   |-<<<NULL>>>
| |     |   |-<<<NULL>>>
| |     |   |-ImplicitCastExpr 0x55982738ec60 <line:93:7> 'bool' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x55982738ec38 <col:7> 'bool' lvalue ParmVar 0x55982738b518 'result32' 'bool'
| |     |   |-CompoundStmt 0x55982738f1d0 <col:17, line:95:3>
| |     |   | `-ReturnStmt 0x55982738ee18 <line:94:4, col:40>
| |     |   |   `-ImplicitCastExpr 0x55982738ee00 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |     |   |     `-BinaryOperator 0x55982738edd8 <col:11, col:40> 'unsigned int' '*'
| |     |   |       |-ParenExpr 0x55982738ecf0 <col:11, col:20> 'u32_t':'unsigned int'
| |     |   |       | `-CStyleCastExpr 0x55982738ecc8 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |     |   |       |   `-ImplicitCastExpr 0x55982738ecb0 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |   |       |     `-DeclRefExpr 0x55982738ec78 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x55982738b358 't' 'u64_t':'unsigned long long'
| |     |   |       `-ParenExpr 0x55982738edb8 <col:24, col:40> 'unsigned int'
| |     |   |         `-BinaryOperator 0x55982738ed90 <col:25, col:33> 'unsigned int' '/'
| |     |   |           |-ImplicitCastExpr 0x55982738ed60 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |           | `-DeclRefExpr 0x55982738ed10 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b438 'to_hz' 'u32_t':'unsigned int'
| |     |   |           `-ImplicitCastExpr 0x55982738ed78 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |             `-DeclRefExpr 0x55982738ed38 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b3c8 'from_hz' 'u32_t':'unsigned int'
| |     |   `-CompoundStmt 0x55982738f348 <line:95:10, line:97:3>
| |     |     `-ReturnStmt 0x55982738f330 <line:96:4, col:31>
| |     |       `-BinaryOperator 0x55982738f308 <col:11, col:31> 'unsigned long long' '*'
| |     |         |-ImplicitCastExpr 0x55982738f2d8 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |         | `-DeclRefExpr 0x55982738f1e8 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x55982738b358 't' 'u64_t':'unsigned long long'
| |     |         `-ImplicitCastExpr 0x55982738f2f0 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |     |           `-ParenExpr 0x55982738f2b8 <col:15, col:31> 'unsigned int'
| |     |             `-BinaryOperator 0x55982738f290 <col:16, col:24> 'unsigned int' '/'
| |     |               |-ImplicitCastExpr 0x55982738f260 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |     |               | `-DeclRefExpr 0x55982738f210 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b438 'to_hz' 'u32_t':'unsigned int'
| |     |               `-ImplicitCastExpr 0x55982738f278 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |     |                 `-DeclRefExpr 0x55982738f238 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b3c8 'from_hz' 'u32_t':'unsigned int'
| |     `-CompoundStmt 0x55982738f8b8 <line:98:9, line:104:2>
| |       `-IfStmt 0x55982738f880 <line:99:3, line:103:3>
| |         |-<<<NULL>>>
| |         |-<<<NULL>>>
| |         |-ImplicitCastExpr 0x55982738f3d8 <line:99:7> 'bool' <LValueToRValue>
| |         | `-DeclRefExpr 0x55982738f3b0 <col:7> 'bool' lvalue ParmVar 0x55982738b518 'result32' 'bool'
| |         |-CompoundStmt 0x55982738f670 <col:17, line:101:3>
| |         | `-ReturnStmt 0x55982738f658 <line:100:4, col:46>
| |         |   `-ImplicitCastExpr 0x55982738f640 <col:11, col:46> 'u64_t':'unsigned long long' <IntegralCast>
| |         |     `-CStyleCastExpr 0x55982738f618 <col:11, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |         |       `-ParenExpr 0x55982738f5f8 <col:18, col:46> 'unsigned long long'
| |         |         `-BinaryOperator 0x55982738f590 <col:19, col:39> 'unsigned long long' '/'
| |         |           |-ParenExpr 0x55982738f518 <col:19, col:35> 'unsigned long long'
| |         |           | `-BinaryOperator 0x55982738f4f0 <col:20, col:32> 'unsigned long long' '+'
| |         |           |   |-BinaryOperator 0x55982738f488 <col:20, col:24> 'unsigned long long' '*'
| |         |           |   | |-ImplicitCastExpr 0x55982738f440 <col:20> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |   | | `-DeclRefExpr 0x55982738f3f0 <col:20> 'u64_t':'unsigned long long' lvalue ParmVar 0x55982738b358 't' 'u64_t':'unsigned long long'
| |         |           |   | `-ImplicitCastExpr 0x55982738f470 <col:24> 'unsigned long long' <IntegralCast>
| |         |           |   |   `-ImplicitCastExpr 0x55982738f458 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |         |           |   |     `-DeclRefExpr 0x55982738f418 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b438 'to_hz' 'u32_t':'unsigned int'
| |         |           |   `-ImplicitCastExpr 0x55982738f4d8 <col:32> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |     `-DeclRefExpr 0x55982738f4b0 <col:32> 'u64_t':'unsigned long long' lvalue Var 0x55982738e088 'off' 'u64_t':'unsigned long long'
| |         |           `-ImplicitCastExpr 0x55982738f578 <col:39> 'unsigned long long' <IntegralCast>
| |         |             `-ImplicitCastExpr 0x55982738f560 <col:39> 'u32_t':'unsigned int' <LValueToRValue>
| |         |               `-DeclRefExpr 0x55982738f538 <col:39> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b3c8 'from_hz' 'u32_t':'unsigned int'
| |         `-CompoundStmt 0x55982738f868 <line:101:10, line:103:3>
| |           `-ReturnStmt 0x55982738f850 <line:102:4, col:31>
| |             `-BinaryOperator 0x55982738f828 <col:11, col:31> 'unsigned long long' '/'
| |               |-ParenExpr 0x55982738f7b0 <col:11, col:27> 'unsigned long long'
| |               | `-BinaryOperator 0x55982738f788 <col:12, col:24> 'unsigned long long' '+'
| |               |   |-BinaryOperator 0x55982738f720 <col:12, col:16> 'unsigned long long' '*'
| |               |   | |-ImplicitCastExpr 0x55982738f6d8 <col:12> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |   | | `-DeclRefExpr 0x55982738f688 <col:12> 'u64_t':'unsigned long long' lvalue ParmVar 0x55982738b358 't' 'u64_t':'unsigned long long'
| |               |   | `-ImplicitCastExpr 0x55982738f708 <col:16> 'unsigned long long' <IntegralCast>
| |               |   |   `-ImplicitCastExpr 0x55982738f6f0 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |               |   |     `-DeclRefExpr 0x55982738f6b0 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b438 'to_hz' 'u32_t':'unsigned int'
| |               |   `-ImplicitCastExpr 0x55982738f770 <col:24> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |     `-DeclRefExpr 0x55982738f748 <col:24> 'u64_t':'unsigned long long' lvalue Var 0x55982738e088 'off' 'u64_t':'unsigned long long'
| |               `-ImplicitCastExpr 0x55982738f810 <col:31> 'unsigned long long' <IntegralCast>
| |                 `-ImplicitCastExpr 0x55982738f7f8 <col:31> 'u32_t':'unsigned int' <LValueToRValue>
| |                   `-DeclRefExpr 0x55982738f7d0 <col:31> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738b3c8 'from_hz' 'u32_t':'unsigned int'
| `-AlwaysInlineAttr 0x55982738b868 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x55982738fac0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:190:1, line:194:1> line:190:21 k_ms_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55982738f9b8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55982738ff18 <line:191:1, line:194:1>
| | `-ReturnStmt 0x55982738fed8 <line:193:2, col:65>
| |   `-ImplicitCastExpr 0x55982738fec0 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55982738fda0 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55982738fd88 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55982738fb68 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55982738fe18 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55982738fe00 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55982738fb90 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55982738f9b8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55982738fe30 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55982738fbb8 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55982738fe48 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55982738fc40 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55982738fc28 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55982738fbd8 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55982738fe60 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55982738fca8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55982738fc88 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55982738fc68 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55982738fe78 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55982738fcc8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55982738fe90 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55982738fce8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55982738fea8 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55982738fd08 <col:16> 'int' 0
| `-FullComment 0x559827447790 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:182:4, line:188:35>
|   |-ParagraphComment 0x559827447550 <line:182:4>
|   | `-TextComment 0x559827447520 <col:4> Text=" "
|   |-BlockCommandComment 0x559827447570 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5598274475d0 <col:11, col:50>
|   |   `-TextComment 0x5598274475a0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x559827447670 <line:184:3, line:186:44>
|   | |-TextComment 0x5598274475f0 <line:184:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x559827447610 <line:185:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827447630 <line:186:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5598274476c0 <line:188:3>
|   | `-TextComment 0x559827447690 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274476e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827447740 <col:11, col:35>
|       `-TextComment 0x559827447710 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827390040 <line:204:1, line:208:1> line:204:21 k_ms_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55982738ff40 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559827391b28 <line:205:1, line:208:1>
| | `-ReturnStmt 0x559827391ae0 <line:207:2, col:66>
| |   `-CallExpr 0x5598273919d8 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5598273919c0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5598273900e8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559827391a38 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559827390110 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55982738ff40 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827391a50 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559827390138 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x559827391a68 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559827390198 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559827390180 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559827390158 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559827391a80 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559827391940 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559827391920 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559827391900 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827391a98 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827391960 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827391ab0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827391980 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559827391ac8 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5598273919a0 <col:16> 'int' 0
| `-FullComment 0x559827447a70 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:196:4, line:202:35>
|   |-ParagraphComment 0x559827447830 <line:196:4>
|   | `-TextComment 0x559827447800 <col:4> Text=" "
|   |-BlockCommandComment 0x559827447850 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5598274478b0 <col:11, col:50>
|   |   `-TextComment 0x559827447880 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x559827447950 <line:198:3, line:200:44>
|   | |-TextComment 0x5598274478d0 <line:198:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5598274478f0 <line:199:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827447910 <line:200:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5598274479a0 <line:202:3>
|   | `-TextComment 0x559827447970 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274479c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827447a20 <col:11, col:35>
|       `-TextComment 0x5598274479f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827391bd8 <line:218:1, line:222:1> line:218:21 k_ms_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559827391b50 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827391fa8 <line:219:1, line:222:1>
| | `-ReturnStmt 0x559827391f68 <line:221:2, col:64>
| |   `-ImplicitCastExpr 0x559827391f50 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559827391e30 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559827391e18 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559827391c80 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559827391ea8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559827391e90 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559827391ca8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559827391b50 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559827391ec0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559827391cd0 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x559827391ed8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559827391d30 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559827391d18 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559827391cf0 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559827391ef0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559827391d98 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559827391d78 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559827391d58 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559827391f08 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827391db8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559827391f20 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827391dd8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559827391f38 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559827391df8 <col:16> 'int' 1
| `-FullComment 0x559827447d50 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:210:4, line:216:35>
|   |-ParagraphComment 0x559827447b10 <line:210:4>
|   | `-TextComment 0x559827447ae0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827447b30 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559827447b90 <col:11, col:50>
|   |   `-TextComment 0x559827447b60 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x559827447c30 <line:212:3, line:214:37>
|   | |-TextComment 0x559827447bb0 <line:212:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x559827447bd0 <line:213:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827447bf0 <line:214:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559827447c80 <line:216:3>
|   | `-TextComment 0x559827447c50 <col:3> Text=" "
|   `-BlockCommandComment 0x559827447ca0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827447d00 <col:11, col:35>
|       `-TextComment 0x559827447cd0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827392058 <line:232:1, line:236:1> line:232:21 k_ms_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559827391fd0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273923f8 <line:233:1, line:236:1>
| | `-ReturnStmt 0x5598273923b8 <line:235:2, col:65>
| |   `-CallExpr 0x5598273922b0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827392298 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559827392100 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559827392310 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559827392128 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559827391fd0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827392328 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559827392150 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x559827392340 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5598273921b0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559827392198 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559827392170 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559827392358 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559827392218 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5598273921f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x5598273921d8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827392370 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827392238 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827392388 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827392258 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5598273923a0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559827392278 <col:16> 'int' 1
| `-FullComment 0x559827448030 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:224:4, line:230:35>
|   |-ParagraphComment 0x559827447df0 <line:224:4>
|   | `-TextComment 0x559827447dc0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827447e10 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559827447e70 <col:11, col:50>
|   |   `-TextComment 0x559827447e40 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x559827447f10 <line:226:3, line:228:37>
|   | |-TextComment 0x559827447e90 <line:226:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x559827447eb0 <line:227:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827447ed0 <line:228:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559827447f60 <line:230:3>
|   | `-TextComment 0x559827447f30 <col:3> Text=" "
|   `-BlockCommandComment 0x559827447f80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827447fe0 <col:11, col:35>
|       `-TextComment 0x559827447fb0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273924a8 <line:246:1, line:250:1> line:246:21 k_ms_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559827392420 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827392878 <line:247:1, line:250:1>
| | `-ReturnStmt 0x559827392838 <line:249:2, col:64>
| |   `-ImplicitCastExpr 0x559827392820 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559827392700 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5598273926e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559827392550 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559827392778 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559827392760 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559827392578 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559827392420 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559827392790 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5598273925a0 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5598273927a8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559827392600 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5598273925e8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5598273925c0 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5598273927c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559827392668 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559827392648 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559827392628 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5598273927d8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827392688 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5598273927f0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5598273926a8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x559827392808 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5598273926c8 <col:16> 'int' 0
| `-FullComment 0x559827448310 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:238:4, line:244:35>
|   |-ParagraphComment 0x5598274480d0 <line:238:4>
|   | `-TextComment 0x5598274480a0 <col:4> Text=" "
|   |-BlockCommandComment 0x5598274480f0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559827448150 <col:11, col:50>
|   |   `-TextComment 0x559827448120 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5598274481f0 <line:240:3, line:242:45>
|   | |-TextComment 0x559827448170 <line:240:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x559827448190 <line:241:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5598274481b0 <line:242:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559827448240 <line:244:3>
|   | `-TextComment 0x559827448210 <col:3> Text=" "
|   `-BlockCommandComment 0x559827448260 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5598274482c0 <col:11, col:35>
|       `-TextComment 0x559827448290 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827392938 <line:260:1, line:264:1> line:260:21 k_ms_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273928a0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559827392cd8 <line:261:1, line:264:1>
| | `-ReturnStmt 0x559827392c98 <line:263:2, col:65>
| |   `-CallExpr 0x559827392b90 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827392b78 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5598273929e0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559827392bf0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559827392a08 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5598273928a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827392c08 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559827392a30 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x559827392c20 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559827392a90 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559827392a78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559827392a50 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559827392c38 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559827392af8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559827392ad8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559827392ab8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827392c50 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827392b18 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827392c68 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827392b38 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x559827392c80 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559827392b58 <col:16> 'int' 0
| `-FullComment 0x5598274485f0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:252:4, line:258:35>
|   |-ParagraphComment 0x5598274483b0 <line:252:4>
|   | `-TextComment 0x559827448380 <col:4> Text=" "
|   |-BlockCommandComment 0x5598274483d0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559827448430 <col:11, col:50>
|   |   `-TextComment 0x559827448400 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5598274484d0 <line:254:3, line:256:45>
|   | |-TextComment 0x559827448450 <line:254:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x559827448470 <line:255:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827448490 <line:256:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559827448520 <line:258:3>
|   | `-TextComment 0x5598274484f0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827448540 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5598274485a0 <col:11, col:35>
|       `-TextComment 0x559827448570 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827392d88 <line:274:1, line:278:1> line:274:21 k_ms_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559827392d00 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827392fd8 <line:275:1, line:278:1>
| `-FullComment 0x5598274488d0 <line:266:4, line:272:35>
|   |-ParagraphComment 0x559827448690 <line:266:4>
|   | `-TextComment 0x559827448660 <col:4> Text=" "
|   |-BlockCommandComment 0x5598274486b0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559827448710 <col:11, col:40>
|   |   `-TextComment 0x5598274486e0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5598274487b0 <line:268:3, line:270:44>
|   | |-TextComment 0x559827448730 <line:268:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x559827448750 <line:269:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827448770 <line:270:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559827448800 <line:272:3>
|   | `-TextComment 0x5598274487d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827448820 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827448880 <col:11, col:35>
|       `-TextComment 0x559827448850 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827393080 <line:288:1, line:292:1> line:288:21 k_ms_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559827392ff8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273932c8 <line:289:1, line:292:1>
| `-FullComment 0x559827467d00 <line:280:4, line:286:35>
|   |-ParagraphComment 0x559827448970 <line:280:4>
|   | `-TextComment 0x559827448940 <col:4> Text=" "
|   |-BlockCommandComment 0x559827448990 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5598274489f0 <col:11, col:40>
|   |   `-TextComment 0x5598274489c0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x559827448a90 <line:282:3, line:284:44>
|   | |-TextComment 0x559827448a10 <line:282:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x559827448a30 <line:283:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827448a50 <line:284:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559827467c30 <line:286:3>
|   | `-TextComment 0x559827448ab0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827467c50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827467cb0 <col:11, col:35>
|       `-TextComment 0x559827467c80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827393370 <line:302:1, line:306:1> line:302:21 k_ms_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273932e8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273935b8 <line:303:1, line:306:1>
| `-FullComment 0x559827467fe0 <line:294:4, line:300:35>
|   |-ParagraphComment 0x559827467da0 <line:294:4>
|   | `-TextComment 0x559827467d70 <col:4> Text=" "
|   |-BlockCommandComment 0x559827467dc0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559827467e20 <col:11, col:40>
|   |   `-TextComment 0x559827467df0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x559827467ec0 <line:296:3, line:298:37>
|   | |-TextComment 0x559827467e40 <line:296:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x559827467e60 <line:297:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827467e80 <line:298:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559827467f10 <line:300:3>
|   | `-TextComment 0x559827467ee0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827467f30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827467f90 <col:11, col:35>
|       `-TextComment 0x559827467f60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827393660 <line:316:1, line:320:1> line:316:21 k_ms_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273935d8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273938a8 <line:317:1, line:320:1>
| `-FullComment 0x5598274682c0 <line:308:4, line:314:35>
|   |-ParagraphComment 0x559827468080 <line:308:4>
|   | `-TextComment 0x559827468050 <col:4> Text=" "
|   |-BlockCommandComment 0x5598274680a0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559827468100 <col:11, col:40>
|   |   `-TextComment 0x5598274680d0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5598274681a0 <line:310:3, line:312:37>
|   | |-TextComment 0x559827468120 <line:310:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x559827468140 <line:311:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827468160 <line:312:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5598274681f0 <line:314:3>
|   | `-TextComment 0x5598274681c0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827468210 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827468270 <col:11, col:35>
|       `-TextComment 0x559827468240 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827393fb8 <line:330:1, line:334:1> line:330:21 k_ms_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559827393f30 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827394208 <line:331:1, line:334:1>
| `-FullComment 0x5598274685a0 <line:322:4, line:328:35>
|   |-ParagraphComment 0x559827468360 <line:322:4>
|   | `-TextComment 0x559827468330 <col:4> Text=" "
|   |-BlockCommandComment 0x559827468380 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5598274683e0 <col:11, col:40>
|   |   `-TextComment 0x5598274683b0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x559827468480 <line:324:3, line:326:45>
|   | |-TextComment 0x559827468400 <line:324:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x559827468420 <line:325:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827468440 <line:326:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5598274684d0 <line:328:3>
|   | `-TextComment 0x5598274684a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274684f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827468550 <col:11, col:35>
|       `-TextComment 0x559827468520 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273942b0 <line:344:1, line:348:1> line:344:21 k_ms_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559827394228 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273944f8 <line:345:1, line:348:1>
| `-FullComment 0x559827468880 <line:336:4, line:342:35>
|   |-ParagraphComment 0x559827468640 <line:336:4>
|   | `-TextComment 0x559827468610 <col:4> Text=" "
|   |-BlockCommandComment 0x559827468660 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5598274686c0 <col:11, col:40>
|   |   `-TextComment 0x559827468690 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x559827468760 <line:338:3, line:340:45>
|   | |-TextComment 0x5598274686e0 <line:338:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x559827468700 <line:339:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827468720 <line:340:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5598274687b0 <line:342:3>
|   | `-TextComment 0x559827468780 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274687d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827468830 <col:11, col:35>
|       `-TextComment 0x559827468800 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273945a0 <line:358:1, line:362:1> line:358:21 k_us_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559827394518 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827394978 <line:359:1, line:362:1>
| | `-ReturnStmt 0x559827394930 <line:361:2, col:65>
| |   `-ImplicitCastExpr 0x559827394918 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5598273947f8 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5598273947e0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559827394648 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559827394870 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559827394858 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559827394670 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559827394518 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559827394888 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559827394698 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5598273948a0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5598273946f8 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5598273946e0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5598273946b8 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5598273948b8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559827394760 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559827394740 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559827394720 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5598273948d0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827394780 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5598273948e8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5598273947a0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559827394900 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5598273947c0 <col:16> 'int' 0
| `-FullComment 0x559827468b60 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:350:4, line:356:35>
|   |-ParagraphComment 0x559827468920 <line:350:4>
|   | `-TextComment 0x5598274688f0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827468940 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5598274689a0 <col:11, col:50>
|   |   `-TextComment 0x559827468970 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x559827468a40 <line:352:3, line:354:44>
|   | |-TextComment 0x5598274689c0 <line:352:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5598274689e0 <line:353:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827468a00 <line:354:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559827468a90 <line:356:3>
|   | `-TextComment 0x559827468a60 <col:3> Text=" "
|   `-BlockCommandComment 0x559827468ab0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827468b10 <col:11, col:35>
|       `-TextComment 0x559827468ae0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827394a28 <line:372:1, line:376:1> line:372:21 k_us_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273949a0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559827394dc8 <line:373:1, line:376:1>
| | `-ReturnStmt 0x559827394d88 <line:375:2, col:66>
| |   `-CallExpr 0x559827394c80 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827394c68 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559827394ad0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559827394ce0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559827394af8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5598273949a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827394cf8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559827394b20 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x559827394d10 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559827394b80 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559827394b68 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559827394b40 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559827394d28 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559827394be8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559827394bc8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559827394ba8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827394d40 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827394c08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827394d58 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827394c28 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559827394d70 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559827394c48 <col:16> 'int' 0
| `-FullComment 0x559827468e40 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:364:4, line:370:35>
|   |-ParagraphComment 0x559827468c00 <line:364:4>
|   | `-TextComment 0x559827468bd0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827468c20 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559827468c80 <col:11, col:50>
|   |   `-TextComment 0x559827468c50 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x559827468d20 <line:366:3, line:368:44>
|   | |-TextComment 0x559827468ca0 <line:366:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x559827468cc0 <line:367:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827468ce0 <line:368:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559827468d70 <line:370:3>
|   | `-TextComment 0x559827468d40 <col:3> Text=" "
|   `-BlockCommandComment 0x559827468d90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827468df0 <col:11, col:35>
|       `-TextComment 0x559827468dc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827394e78 <line:386:1, line:390:1> line:386:21 k_us_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559827394df0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827395268 <line:387:1, line:390:1>
| | `-ReturnStmt 0x559827395228 <line:389:2, col:64>
| |   `-ImplicitCastExpr 0x559827395210 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5598273950f0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5598273950d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559827394f40 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559827395168 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559827395150 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559827394f68 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559827394df0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559827395180 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559827394f90 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x559827395198 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559827394ff0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559827394fd8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559827394fb0 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5598273951b0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559827395058 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559827395038 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559827395018 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5598273951c8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827395078 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5598273951e0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827395098 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5598273951f8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5598273950b8 <col:16> 'int' 1
| `-FullComment 0x559827469120 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:378:4, line:384:35>
|   |-ParagraphComment 0x559827468ee0 <line:378:4>
|   | `-TextComment 0x559827468eb0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827468f00 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559827468f60 <col:11, col:50>
|   |   `-TextComment 0x559827468f30 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x559827469000 <line:380:3, line:382:37>
|   | |-TextComment 0x559827468f80 <line:380:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x559827468fa0 <line:381:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827468fc0 <line:382:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559827469050 <line:384:3>
|   | `-TextComment 0x559827469020 <col:3> Text=" "
|   `-BlockCommandComment 0x559827469070 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5598274690d0 <col:11, col:35>
|       `-TextComment 0x5598274690a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827395318 <line:400:1, line:404:1> line:400:21 k_us_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559827395290 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273956b8 <line:401:1, line:404:1>
| | `-ReturnStmt 0x559827395678 <line:403:2, col:65>
| |   `-CallExpr 0x559827395570 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827395558 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5598273953c0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5598273955d0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5598273953e8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559827395290 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5598273955e8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559827395410 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x559827395600 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559827395470 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559827395458 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559827395430 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559827395618 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5598273954d8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5598273954b8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559827395498 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827395630 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5598273954f8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827395648 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827395518 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559827395660 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559827395538 <col:16> 'int' 1
| `-FullComment 0x559827469400 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:392:4, line:398:35>
|   |-ParagraphComment 0x5598274691c0 <line:392:4>
|   | `-TextComment 0x559827469190 <col:4> Text=" "
|   |-BlockCommandComment 0x5598274691e0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559827469240 <col:11, col:50>
|   |   `-TextComment 0x559827469210 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5598274692e0 <line:394:3, line:396:37>
|   | |-TextComment 0x559827469260 <line:394:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x559827469280 <line:395:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5598274692a0 <line:396:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559827469330 <line:398:3>
|   | `-TextComment 0x559827469300 <col:3> Text=" "
|   `-BlockCommandComment 0x559827469350 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5598274693b0 <col:11, col:35>
|       `-TextComment 0x559827469380 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827395768 <line:414:1, line:418:1> line:414:21 k_us_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273956e0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827395b38 <line:415:1, line:418:1>
| | `-ReturnStmt 0x559827395af8 <line:417:2, col:64>
| |   `-ImplicitCastExpr 0x559827395ae0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5598273959c0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5598273959a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559827395810 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559827395a38 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559827395a20 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559827395838 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5598273956e0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559827395a50 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559827395860 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x559827395a68 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5598273958c0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5598273958a8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559827395880 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559827395a80 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559827395928 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559827395908 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x5598273958e8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559827395a98 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827395948 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559827395ab0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827395968 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x559827395ac8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559827395988 <col:16> 'int' 0
| `-FullComment 0x5598274696e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:406:4, line:412:35>
|   |-ParagraphComment 0x5598274694a0 <line:406:4>
|   | `-TextComment 0x559827469470 <col:4> Text=" "
|   |-BlockCommandComment 0x5598274694c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559827469520 <col:11, col:50>
|   |   `-TextComment 0x5598274694f0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5598274695c0 <line:408:3, line:410:45>
|   | |-TextComment 0x559827469540 <line:408:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x559827469560 <line:409:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827469580 <line:410:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559827469610 <line:412:3>
|   | `-TextComment 0x5598274695e0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827469630 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827469690 <col:11, col:35>
|       `-TextComment 0x559827469660 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827395be8 <line:428:1, line:432:1> line:428:21 k_us_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559827395b60 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559827395fa8 <line:429:1, line:432:1>
| | `-ReturnStmt 0x559827395f68 <line:431:2, col:65>
| |   `-CallExpr 0x559827395e40 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827395e28 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559827395c90 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559827395ea0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559827395cb8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559827395b60 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827395eb8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559827395ce0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x559827395ed0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559827395d40 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559827395d28 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559827395d00 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559827395ee8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559827395da8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559827395d88 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559827395d68 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827395f00 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827395dc8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827395f18 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827395de8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x559827395f50 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559827395e08 <col:16> 'int' 0
| `-FullComment 0x5598274699c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:420:4, line:426:35>
|   |-ParagraphComment 0x559827469780 <line:420:4>
|   | `-TextComment 0x559827469750 <col:4> Text=" "
|   |-BlockCommandComment 0x5598274697a0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x559827469800 <col:11, col:50>
|   |   `-TextComment 0x5598274697d0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5598274698a0 <line:422:3, line:424:45>
|   | |-TextComment 0x559827469820 <line:422:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x559827469840 <line:423:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827469860 <line:424:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5598274698f0 <line:426:3>
|   | `-TextComment 0x5598274698c0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827469910 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827469970 <col:11, col:35>
|       `-TextComment 0x559827469940 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827396058 <line:442:1, line:446:1> line:442:21 k_us_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559827395fd0 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273962a8 <line:443:1, line:446:1>
| `-FullComment 0x559827469cc0 <line:434:4, line:440:35>
|   |-ParagraphComment 0x559827469a60 <line:434:4>
|   | `-TextComment 0x559827469a30 <col:4> Text=" "
|   |-BlockCommandComment 0x559827469a80 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559827469ae0 <col:11, col:40>
|   |   `-TextComment 0x559827469ab0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x559827469b80 <line:436:3, line:438:44>
|   | |-TextComment 0x559827469b00 <line:436:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x559827469b20 <line:437:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827469b40 <line:438:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559827469bd0 <line:440:3>
|   | `-TextComment 0x559827469ba0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827469bf0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827469c70 <col:11, col:35>
|       `-TextComment 0x559827469c40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827396350 <line:456:1, line:460:1> line:456:21 k_us_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273962c8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559827396598 <line:457:1, line:460:1>
| `-FullComment 0x559827469fa0 <line:448:4, line:454:35>
|   |-ParagraphComment 0x559827469d60 <line:448:4>
|   | `-TextComment 0x559827469d30 <col:4> Text=" "
|   |-BlockCommandComment 0x559827469d80 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559827469de0 <col:11, col:40>
|   |   `-TextComment 0x559827469db0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x559827469e80 <line:450:3, line:452:44>
|   | |-TextComment 0x559827469e00 <line:450:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x559827469e20 <line:451:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827469e40 <line:452:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559827469ed0 <line:454:3>
|   | `-TextComment 0x559827469ea0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827469ef0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827469f50 <col:11, col:35>
|       `-TextComment 0x559827469f20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827396640 <line:470:1, line:474:1> line:470:21 k_us_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273965b8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827396888 <line:471:1, line:474:1>
| `-FullComment 0x55982746a280 <line:462:4, line:468:35>
|   |-ParagraphComment 0x55982746a040 <line:462:4>
|   | `-TextComment 0x55982746a010 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746a060 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55982746a0c0 <col:11, col:40>
|   |   `-TextComment 0x55982746a090 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55982746a160 <line:464:3, line:466:37>
|   | |-TextComment 0x55982746a0e0 <line:464:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55982746a100 <line:465:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746a120 <line:466:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55982746a1b0 <line:468:3>
|   | `-TextComment 0x55982746a180 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746a1d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746a230 <col:11, col:35>
|       `-TextComment 0x55982746a200 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827396930 <line:484:1, line:488:1> line:484:21 k_us_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273968a8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559827396b78 <line:485:1, line:488:1>
| `-FullComment 0x55982746a560 <line:476:4, line:482:35>
|   |-ParagraphComment 0x55982746a320 <line:476:4>
|   | `-TextComment 0x55982746a2f0 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746a340 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55982746a3a0 <col:11, col:40>
|   |   `-TextComment 0x55982746a370 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55982746a440 <line:478:3, line:480:37>
|   | |-TextComment 0x55982746a3c0 <line:478:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55982746a3e0 <line:479:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55982746a400 <line:480:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55982746a490 <line:482:3>
|   | `-TextComment 0x55982746a460 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746a4b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746a510 <col:11, col:35>
|       `-TextComment 0x55982746a4e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827396c20 <line:498:1, line:502:1> line:498:21 k_us_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559827396b98 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827396e68 <line:499:1, line:502:1>
| `-FullComment 0x55982746a840 <line:490:4, line:496:35>
|   |-ParagraphComment 0x55982746a600 <line:490:4>
|   | `-TextComment 0x55982746a5d0 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746a620 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55982746a680 <col:11, col:40>
|   |   `-TextComment 0x55982746a650 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55982746a720 <line:492:3, line:494:45>
|   | |-TextComment 0x55982746a6a0 <line:492:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55982746a6c0 <line:493:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746a6e0 <line:494:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55982746a770 <line:496:3>
|   | `-TextComment 0x55982746a740 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746a790 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746a7f0 <col:11, col:35>
|       `-TextComment 0x55982746a7c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827397f70 <line:512:1, line:516:1> line:512:21 k_us_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559827396e88 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273981b8 <line:513:1, line:516:1>
| `-FullComment 0x55982746ab20 <line:504:4, line:510:35>
|   |-ParagraphComment 0x55982746a8e0 <line:504:4>
|   | `-TextComment 0x55982746a8b0 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746a900 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55982746a960 <col:11, col:40>
|   |   `-TextComment 0x55982746a930 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55982746aa00 <line:506:3, line:508:45>
|   | |-TextComment 0x55982746a980 <line:506:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55982746a9a0 <line:507:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55982746a9c0 <line:508:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55982746aa50 <line:510:3>
|   | `-TextComment 0x55982746aa20 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746aa70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746aad0 <col:11, col:35>
|       `-TextComment 0x55982746aaa0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827398260 <line:526:1, line:530:1> line:526:21 k_ns_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273981d8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827398638 <line:527:1, line:530:1>
| | `-ReturnStmt 0x5598273985f0 <line:529:2, col:65>
| |   `-ImplicitCastExpr 0x5598273985d8 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5598273984b8 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5598273984a0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559827398308 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559827398530 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559827398518 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559827398330 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5598273981d8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559827398548 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559827398358 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x559827398560 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5598273983b8 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5598273983a0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559827398378 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559827398578 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559827398420 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559827398400 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x5598273983e0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559827398590 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827398440 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5598273985a8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827398460 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5598273985c0 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559827398480 <col:16> 'int' 0
| `-FullComment 0x55982746ae00 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:518:4, line:524:35>
|   |-ParagraphComment 0x55982746abc0 <line:518:4>
|   | `-TextComment 0x55982746ab90 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746abe0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55982746ac40 <col:11, col:49>
|   |   `-TextComment 0x55982746ac10 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55982746ace0 <line:520:3, line:522:44>
|   | |-TextComment 0x55982746ac60 <line:520:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55982746ac80 <line:521:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746aca0 <line:522:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55982746ad30 <line:524:3>
|   | `-TextComment 0x55982746ad00 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746ad50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746adb0 <col:11, col:35>
|       `-TextComment 0x55982746ad80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273986e8 <line:540:1, line:544:1> line:540:21 k_ns_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559827398660 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559827398a88 <line:541:1, line:544:1>
| | `-ReturnStmt 0x559827398a48 <line:543:2, col:66>
| |   `-CallExpr 0x559827398940 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827398928 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559827398790 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5598273989a0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5598273987b8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559827398660 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5598273989b8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5598273987e0 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5598273989d0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559827398840 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559827398828 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559827398800 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5598273989e8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5598273988a8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559827398888 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559827398868 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827398a00 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5598273988c8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827398a18 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5598273988e8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559827398a30 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559827398908 <col:16> 'int' 0
| `-FullComment 0x55982746b0e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:532:4, line:538:35>
|   |-ParagraphComment 0x55982746aea0 <line:532:4>
|   | `-TextComment 0x55982746ae70 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746aec0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55982746af20 <col:11, col:49>
|   |   `-TextComment 0x55982746aef0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55982746afc0 <line:534:3, line:536:44>
|   | |-TextComment 0x55982746af40 <line:534:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55982746af60 <line:535:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55982746af80 <line:536:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55982746b010 <line:538:3>
|   | `-TextComment 0x55982746afe0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746b030 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746b090 <col:11, col:35>
|       `-TextComment 0x55982746b060 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827398b38 <line:554:1, line:558:1> line:554:21 k_ns_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559827398ab0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827398f08 <line:555:1, line:558:1>
| | `-ReturnStmt 0x559827398ec8 <line:557:2, col:64>
| |   `-ImplicitCastExpr 0x559827398eb0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559827398d90 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559827398d78 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559827398be0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559827398e08 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559827398df0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559827398c08 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559827398ab0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559827398e20 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559827398c30 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x559827398e38 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559827398c90 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559827398c78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559827398c50 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559827398e50 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559827398cf8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559827398cd8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559827398cb8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559827398e68 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827398d18 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559827398e80 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827398d38 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559827398e98 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559827398d58 <col:16> 'int' 1
| `-FullComment 0x55982746b3c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:546:4, line:552:35>
|   |-ParagraphComment 0x55982746b180 <line:546:4>
|   | `-TextComment 0x55982746b150 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746b1a0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55982746b200 <col:11, col:49>
|   |   `-TextComment 0x55982746b1d0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55982746b2a0 <line:548:3, line:550:37>
|   | |-TextComment 0x55982746b220 <line:548:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55982746b240 <line:549:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746b260 <line:550:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55982746b2f0 <line:552:3>
|   | `-TextComment 0x55982746b2c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746b310 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746b370 <col:11, col:35>
|       `-TextComment 0x55982746b340 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827399008 <line:568:1, line:572:1> line:568:21 k_ns_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559827398f80 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273993a8 <line:569:1, line:572:1>
| | `-ReturnStmt 0x559827399368 <line:571:2, col:65>
| |   `-CallExpr 0x559827399260 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827399248 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5598273990b0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5598273992c0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5598273990d8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559827398f80 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5598273992d8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559827399100 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5598273992f0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559827399160 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559827399148 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559827399120 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559827399308 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5598273991c8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5598273991a8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559827399188 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827399320 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5598273991e8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827399338 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827399208 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559827399350 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559827399228 <col:16> 'int' 1
| `-FullComment 0x55982746b6a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:560:4, line:566:35>
|   |-ParagraphComment 0x55982746b460 <line:560:4>
|   | `-TextComment 0x55982746b430 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746b480 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55982746b4e0 <col:11, col:49>
|   |   `-TextComment 0x55982746b4b0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55982746b580 <line:562:3, line:564:37>
|   | |-TextComment 0x55982746b500 <line:562:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55982746b520 <line:563:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55982746b540 <line:564:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55982746b5d0 <line:566:3>
|   | `-TextComment 0x55982746b5a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746b5f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746b650 <col:11, col:35>
|       `-TextComment 0x55982746b620 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827399458 <line:582:1, line:586:1> line:582:21 k_ns_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273993d0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827399828 <line:583:1, line:586:1>
| | `-ReturnStmt 0x5598273997e8 <line:585:2, col:64>
| |   `-ImplicitCastExpr 0x5598273997d0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5598273996b0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559827399698 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559827399500 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559827399728 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559827399710 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559827399528 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5598273993d0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559827399740 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559827399550 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x559827399758 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5598273995b0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559827399598 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559827399570 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559827399770 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559827399618 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5598273995f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x5598273995d8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559827399788 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827399638 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5598273997a0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827399658 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5598273997b8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559827399678 <col:16> 'int' 0
| `-FullComment 0x55982746b980 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:574:4, line:580:35>
|   |-ParagraphComment 0x55982746b740 <line:574:4>
|   | `-TextComment 0x55982746b710 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746b760 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55982746b7c0 <col:11, col:49>
|   |   `-TextComment 0x55982746b790 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55982746b860 <line:576:3, line:578:45>
|   | |-TextComment 0x55982746b7e0 <line:576:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55982746b800 <line:577:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746b820 <line:578:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55982746b8b0 <line:580:3>
|   | `-TextComment 0x55982746b880 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746b8d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746b930 <col:11, col:35>
|       `-TextComment 0x55982746b900 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273998d8 <line:596:1, line:600:1> line:596:21 k_ns_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559827399850 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559827399c78 <line:597:1, line:600:1>
| | `-ReturnStmt 0x559827399c38 <line:599:2, col:65>
| |   `-CallExpr 0x559827399b30 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827399b18 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559827399980 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559827399b90 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5598273999a8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559827399850 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827399ba8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5598273999d0 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x559827399bc0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559827399a30 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559827399a18 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5598273999f0 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559827399bd8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559827399a98 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559827399a78 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559827399a58 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827399bf0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827399ab8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827399c08 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827399ad8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x559827399c20 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559827399af8 <col:16> 'int' 0
| `-FullComment 0x55982746bc80 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:588:4, line:594:35>
|   |-ParagraphComment 0x55982746ba20 <line:588:4>
|   | `-TextComment 0x55982746b9f0 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746ba40 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55982746baa0 <col:11, col:49>
|   |   `-TextComment 0x55982746ba70 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55982746bb40 <line:590:3, line:592:45>
|   | |-TextComment 0x55982746bac0 <line:590:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55982746bae0 <line:591:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55982746bb00 <line:592:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55982746bb90 <line:594:3>
|   | `-TextComment 0x55982746bb60 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746bbb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746bc10 <col:11, col:35>
|       `-TextComment 0x55982746bbe0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827399d28 <line:610:1, line:614:1> line:610:21 k_ns_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559827399ca0 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55982734e750 <line:611:1, line:614:1>
| `-FullComment 0x55982746bf60 <line:602:4, line:608:35>
|   |-ParagraphComment 0x55982746bd20 <line:602:4>
|   | `-TextComment 0x55982746bcf0 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746bd40 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55982746bda0 <col:11, col:39>
|   |   `-TextComment 0x55982746bd70 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55982746be40 <line:604:3, line:606:44>
|   | |-TextComment 0x55982746bdc0 <line:604:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55982746bde0 <line:605:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746be00 <line:606:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55982746be90 <line:608:3>
|   | `-TextComment 0x55982746be60 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746beb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746bf10 <col:11, col:35>
|       `-TextComment 0x55982746bee0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55982734e7f8 <line:624:1, line:628:1> line:624:21 k_ns_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55982734e770 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55982734ea48 <line:625:1, line:628:1>
| `-FullComment 0x55982746c240 <line:616:4, line:622:35>
|   |-ParagraphComment 0x55982746c000 <line:616:4>
|   | `-TextComment 0x55982746bfd0 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746c020 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55982746c080 <col:11, col:39>
|   |   `-TextComment 0x55982746c050 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55982746c120 <line:618:3, line:620:44>
|   | |-TextComment 0x55982746c0a0 <line:618:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55982746c0c0 <line:619:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55982746c0e0 <line:620:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55982746c170 <line:622:3>
|   | `-TextComment 0x55982746c140 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746c190 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746c1f0 <col:11, col:35>
|       `-TextComment 0x55982746c1c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55982734eaf0 <line:638:1, line:642:1> line:638:21 k_ns_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55982734ea68 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55982734ed38 <line:639:1, line:642:1>
| `-FullComment 0x55982746c520 <line:630:4, line:636:35>
|   |-ParagraphComment 0x55982746c2e0 <line:630:4>
|   | `-TextComment 0x55982746c2b0 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746c300 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55982746c360 <col:11, col:39>
|   |   `-TextComment 0x55982746c330 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55982746c400 <line:632:3, line:634:37>
|   | |-TextComment 0x55982746c380 <line:632:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55982746c3a0 <line:633:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746c3c0 <line:634:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55982746c450 <line:636:3>
|   | `-TextComment 0x55982746c420 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746c470 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746c4d0 <col:11, col:35>
|       `-TextComment 0x55982746c4a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55982734ede0 <line:652:1, line:656:1> line:652:21 k_ns_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55982734ed58 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55982734f028 <line:653:1, line:656:1>
| `-FullComment 0x55982746c800 <line:644:4, line:650:35>
|   |-ParagraphComment 0x55982746c5c0 <line:644:4>
|   | `-TextComment 0x55982746c590 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746c5e0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55982746c640 <col:11, col:39>
|   |   `-TextComment 0x55982746c610 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55982746c6e0 <line:646:3, line:648:37>
|   | |-TextComment 0x55982746c660 <line:646:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55982746c680 <line:647:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55982746c6a0 <line:648:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55982746c730 <line:650:3>
|   | `-TextComment 0x55982746c700 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746c750 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746c7b0 <col:11, col:35>
|       `-TextComment 0x55982746c780 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55982734f0d0 <line:666:1, line:670:1> line:666:21 k_ns_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55982734f048 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55982734f298 <line:667:1, line:670:1>
| `-FullComment 0x55982746cae0 <line:658:4, line:664:35>
|   |-ParagraphComment 0x55982746c8a0 <line:658:4>
|   | `-TextComment 0x55982746c870 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746c8c0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55982746c920 <col:11, col:39>
|   |   `-TextComment 0x55982746c8f0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55982746c9c0 <line:660:3, line:662:45>
|   | |-TextComment 0x55982746c940 <line:660:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55982746c960 <line:661:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746c980 <line:662:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55982746ca10 <line:664:3>
|   | `-TextComment 0x55982746c9e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746ca30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746ca90 <col:11, col:35>
|       `-TextComment 0x55982746ca60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55982734f340 <line:680:1, line:684:1> line:680:21 k_ns_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55982734f2b8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55982734f508 <line:681:1, line:684:1>
| `-FullComment 0x55982746cdc0 <line:672:4, line:678:35>
|   |-ParagraphComment 0x55982746cb80 <line:672:4>
|   | `-TextComment 0x55982746cb50 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746cba0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55982746cc00 <col:11, col:39>
|   |   `-TextComment 0x55982746cbd0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55982746cca0 <line:674:3, line:676:45>
|   | |-TextComment 0x55982746cc20 <line:674:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55982746cc40 <line:675:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55982746cc60 <line:676:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55982746ccf0 <line:678:3>
|   | `-TextComment 0x55982746ccc0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746cd10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746cd70 <col:11, col:35>
|       `-TextComment 0x55982746cd40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55982734f5b0 <line:694:1, line:698:1> line:694:21 k_cyc_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55982734f528 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55982734f998 <line:695:1, line:698:1>
| | `-ReturnStmt 0x55982734f950 <line:697:2, col:65>
| |   `-ImplicitCastExpr 0x55982734f938 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55982734f818 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55982734f800 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55982734f658 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55982734f890 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55982734f878 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55982734f680 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55982734f528 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55982734f8a8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55982734f6e8 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55982734f6d0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55982734f6a8 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55982734f8c0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55982734f710 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55982734f8d8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55982734f780 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55982734f760 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55982734f730 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55982734f8f0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55982734f7a0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55982734f908 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55982734f7c0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55982734f920 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55982734f7e0 <col:16> 'int' 0
| `-FullComment 0x55982746d0a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:686:4, line:692:35>
|   |-ParagraphComment 0x55982746ce60 <line:686:4>
|   | `-TextComment 0x55982746ce30 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746ce80 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55982746cee0 <col:11, col:50>
|   |   `-TextComment 0x55982746ceb0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55982746cf80 <line:688:3, line:690:44>
|   | |-TextComment 0x55982746cf00 <line:688:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55982746cf20 <line:689:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746cf40 <line:690:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55982746cfd0 <line:692:3>
|   | `-TextComment 0x55982746cfa0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746cff0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746d050 <col:11, col:35>
|       `-TextComment 0x55982746d020 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55982734fa48 <line:708:1, line:712:1> line:708:21 k_cyc_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55982734f9c0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55982734fde8 <line:709:1, line:712:1>
| | `-ReturnStmt 0x55982734fda8 <line:711:2, col:66>
| |   `-CallExpr 0x55982734fca0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55982734fc88 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55982734faf0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55982734fd00 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55982734fb18 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55982734f9c0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55982734fd18 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55982734fb80 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55982734fb68 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55982734fb40 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55982734fd30 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55982734fba8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55982734fd48 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55982734fc08 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55982734fbe8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55982734fbc8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55982734fd60 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55982734fc28 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55982734fd78 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55982734fc48 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55982734fd90 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55982734fc68 <col:16> 'int' 0
| `-FullComment 0x55982746d380 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:700:4, line:706:35>
|   |-ParagraphComment 0x55982746d140 <line:700:4>
|   | `-TextComment 0x55982746d110 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746d160 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55982746d1c0 <col:11, col:50>
|   |   `-TextComment 0x55982746d190 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55982746d260 <line:702:3, line:704:44>
|   | |-TextComment 0x55982746d1e0 <line:702:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55982746d200 <line:703:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55982746d220 <line:704:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55982746d2b0 <line:706:3>
|   | `-TextComment 0x55982746d280 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746d2d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746d330 <col:11, col:35>
|       `-TextComment 0x55982746d300 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55982734fe98 <line:722:1, line:726:1> line:722:21 k_cyc_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55982734fe10 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827350268 <line:723:1, line:726:1>
| | `-ReturnStmt 0x559827350228 <line:725:2, col:64>
| |   `-ImplicitCastExpr 0x559827350210 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5598273500f0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5598273500d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55982734ff40 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559827350168 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559827350150 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55982734ff68 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55982734fe10 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559827350180 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55982734ffd0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55982734ffb8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55982734ff90 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559827350198 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55982734fff8 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5598273501b0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559827350058 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559827350038 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559827350018 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5598273501c8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827350078 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5598273501e0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827350098 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5598273501f8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5598273500b8 <col:16> 'int' 1
| `-FullComment 0x55982746d660 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:714:4, line:720:35>
|   |-ParagraphComment 0x55982746d420 <line:714:4>
|   | `-TextComment 0x55982746d3f0 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746d440 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55982746d4a0 <col:11, col:50>
|   |   `-TextComment 0x55982746d470 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55982746d540 <line:716:3, line:718:37>
|   | |-TextComment 0x55982746d4c0 <line:716:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55982746d4e0 <line:717:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746d500 <line:718:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55982746d590 <line:720:3>
|   | `-TextComment 0x55982746d560 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746d5b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746d610 <col:11, col:35>
|       `-TextComment 0x55982746d5e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827350318 <line:736:1, line:740:1> line:736:21 k_cyc_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559827350290 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273506b8 <line:737:1, line:740:1>
| | `-ReturnStmt 0x559827350678 <line:739:2, col:65>
| |   `-CallExpr 0x559827350570 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827350558 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5598273503c0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5598273505d0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5598273503e8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559827350290 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5598273505e8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559827350450 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559827350438 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559827350410 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559827350600 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559827350478 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x559827350618 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5598273504d8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5598273504b8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559827350498 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827350630 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5598273504f8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827350648 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827350518 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559827350660 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559827350538 <col:16> 'int' 1
| `-FullComment 0x55982746d940 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:728:4, line:734:35>
|   |-ParagraphComment 0x55982746d700 <line:728:4>
|   | `-TextComment 0x55982746d6d0 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746d720 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55982746d780 <col:11, col:50>
|   |   `-TextComment 0x55982746d750 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55982746d820 <line:730:3, line:732:37>
|   | |-TextComment 0x55982746d7a0 <line:730:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55982746d7c0 <line:731:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55982746d7e0 <line:732:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55982746d870 <line:734:3>
|   | `-TextComment 0x55982746d840 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746d890 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746d8f0 <col:11, col:35>
|       `-TextComment 0x55982746d8c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827350798 <line:750:1, line:754:1> line:750:21 k_cyc_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273506e0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827350b68 <line:751:1, line:754:1>
| | `-ReturnStmt 0x559827350b28 <line:753:2, col:64>
| |   `-ImplicitCastExpr 0x559827350b10 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5598273509f0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5598273509d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559827350840 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559827350a68 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559827350a50 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559827350868 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5598273506e0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559827350a80 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5598273508d0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5598273508b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559827350890 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559827350a98 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5598273508f8 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x559827350ab0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559827350958 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559827350938 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559827350918 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559827350ac8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827350978 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559827350ae0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827350998 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x559827350af8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5598273509b8 <col:16> 'int' 0
| `-FullComment 0x55982746dc20 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:742:4, line:748:35>
|   |-ParagraphComment 0x55982746d9e0 <line:742:4>
|   | `-TextComment 0x55982746d9b0 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746da00 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55982746da60 <col:11, col:50>
|   |   `-TextComment 0x55982746da30 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55982746db00 <line:744:3, line:746:45>
|   | |-TextComment 0x55982746da80 <line:744:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55982746daa0 <line:745:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746dac0 <line:746:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55982746db50 <line:748:3>
|   | `-TextComment 0x55982746db20 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746db70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746dbd0 <col:11, col:35>
|       `-TextComment 0x55982746dba0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827350c18 <line:764:1, line:768:1> line:764:21 k_cyc_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559827350b90 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559827350fb8 <line:765:1, line:768:1>
| | `-ReturnStmt 0x559827350f78 <line:767:2, col:65>
| |   `-CallExpr 0x559827350e70 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827350e58 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559827350cc0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559827350ed0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559827350ce8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559827350b90 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827350ee8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559827350d50 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559827350d38 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559827350d10 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559827350f00 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559827350d78 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x559827350f18 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559827350dd8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559827350db8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559827350d98 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827350f30 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827350df8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827350f48 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827350e18 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x559827350f60 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559827350e38 <col:16> 'int' 0
| `-FullComment 0x55982746df10 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:756:4, line:762:35>
|   |-ParagraphComment 0x55982746dcd0 <line:756:4>
|   | `-TextComment 0x55982746dca0 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746dcf0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55982746dd50 <col:11, col:50>
|   |   `-TextComment 0x55982746dd20 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55982746ddf0 <line:758:3, line:760:45>
|   | |-TextComment 0x55982746dd70 <line:758:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55982746dd90 <line:759:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55982746ddb0 <line:760:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55982746de40 <line:762:3>
|   | `-TextComment 0x55982746de10 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746de60 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746dec0 <col:11, col:35>
|       `-TextComment 0x55982746de90 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827351068 <line:778:1, line:782:1> line:778:21 k_cyc_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559827350fe0 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827351438 <line:779:1, line:782:1>
| | `-ReturnStmt 0x5598273513f8 <line:781:2, col:65>
| |   `-ImplicitCastExpr 0x5598273513e0 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5598273512c0 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5598273512a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559827351110 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559827351338 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559827351320 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559827351138 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559827350fe0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559827351350 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5598273511a0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559827351188 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559827351160 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559827351368 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5598273511c8 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x559827351380 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559827351228 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559827351208 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x5598273511e8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559827351398 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827351248 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5598273513b0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827351268 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5598273513c8 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559827351288 <col:16> 'int' 0
| `-FullComment 0x55982746e1f0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:770:4, line:776:35>
|   |-ParagraphComment 0x55982746dfb0 <line:770:4>
|   | `-TextComment 0x55982746df80 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746dfd0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55982746e030 <col:11, col:50>
|   |   `-TextComment 0x55982746e000 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55982746e0d0 <line:772:3, line:774:44>
|   | |-TextComment 0x55982746e050 <line:772:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55982746e070 <line:773:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746e090 <line:774:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55982746e120 <line:776:3>
|   | `-TextComment 0x55982746e0f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746e140 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746e1a0 <col:11, col:35>
|       `-TextComment 0x55982746e170 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273514e8 <line:792:1, line:796:1> line:792:21 k_cyc_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559827351460 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273518a8 <line:793:1, line:796:1>
| | `-ReturnStmt 0x559827351868 <line:795:2, col:66>
| |   `-CallExpr 0x559827351740 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827351728 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559827351590 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5598273517c0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5598273515b8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559827351460 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5598273517d8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559827351620 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559827351608 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5598273515e0 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5598273517f0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559827351648 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x559827351808 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5598273516a8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559827351688 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559827351668 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827351820 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5598273516c8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827351838 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5598273516e8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559827351850 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559827351708 <col:16> 'int' 0
| `-FullComment 0x55982746e4d0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:784:4, line:790:35>
|   |-ParagraphComment 0x55982746e290 <line:784:4>
|   | `-TextComment 0x55982746e260 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746e2b0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55982746e310 <col:11, col:50>
|   |   `-TextComment 0x55982746e2e0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55982746e3b0 <line:786:3, line:788:44>
|   | |-TextComment 0x55982746e330 <line:786:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55982746e350 <line:787:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55982746e370 <line:788:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55982746e400 <line:790:3>
|   | `-TextComment 0x55982746e3d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746e420 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746e480 <col:11, col:35>
|       `-TextComment 0x55982746e450 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827351958 <line:806:1, line:810:1> line:806:21 k_cyc_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273518d0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827351d28 <line:807:1, line:810:1>
| | `-ReturnStmt 0x559827351ce8 <line:809:2, col:64>
| |   `-ImplicitCastExpr 0x559827351cd0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559827351bb0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559827351b98 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559827351a00 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559827351c28 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559827351c10 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559827351a28 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5598273518d0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559827351c40 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559827351a90 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559827351a78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559827351a50 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559827351c58 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559827351ab8 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x559827351c70 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559827351b18 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559827351af8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559827351ad8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559827351c88 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827351b38 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559827351ca0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827351b58 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559827351cb8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559827351b78 <col:16> 'int' 1
| `-FullComment 0x55982746e7b0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:798:4, line:804:35>
|   |-ParagraphComment 0x55982746e570 <line:798:4>
|   | `-TextComment 0x55982746e540 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746e590 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55982746e5f0 <col:11, col:50>
|   |   `-TextComment 0x55982746e5c0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55982746e690 <line:800:3, line:802:37>
|   | |-TextComment 0x55982746e610 <line:800:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55982746e630 <line:801:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746e650 <line:802:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55982746e6e0 <line:804:3>
|   | `-TextComment 0x55982746e6b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746e700 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746e760 <col:11, col:35>
|       `-TextComment 0x55982746e730 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827351dd8 <line:820:1, line:824:1> line:820:21 k_cyc_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559827351d50 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559827352178 <line:821:1, line:824:1>
| | `-ReturnStmt 0x559827352138 <line:823:2, col:65>
| |   `-CallExpr 0x559827352030 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827352018 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559827351e80 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559827352090 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559827351ea8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559827351d50 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5598273520a8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x559827351f10 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x559827351ef8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559827351ed0 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5598273520c0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559827351f38 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5598273520d8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559827351f98 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559827351f78 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559827351f58 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5598273520f0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827351fb8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x559827352108 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827351fd8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x559827352120 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x559827351ff8 <col:16> 'int' 1
| `-FullComment 0x55982746ea90 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:812:4, line:818:35>
|   |-ParagraphComment 0x55982746e850 <line:812:4>
|   | `-TextComment 0x55982746e820 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746e870 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55982746e8d0 <col:11, col:50>
|   |   `-TextComment 0x55982746e8a0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55982746e970 <line:814:3, line:816:37>
|   | |-TextComment 0x55982746e8f0 <line:814:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55982746e910 <line:815:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55982746e930 <line:816:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55982746e9c0 <line:818:3>
|   | `-TextComment 0x55982746e990 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746e9e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746ea40 <col:11, col:35>
|       `-TextComment 0x55982746ea10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827352228 <line:834:1, line:838:1> line:834:21 k_cyc_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273521a0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273525f8 <line:835:1, line:838:1>
| | `-ReturnStmt 0x5598273525b8 <line:837:2, col:64>
| |   `-ImplicitCastExpr 0x5598273525a0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559827352480 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559827352468 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5598273522d0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5598273524f8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5598273524e0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5598273522f8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5598273521a0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559827352510 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559827352360 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559827352348 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559827352320 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559827352528 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559827352388 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x559827352540 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5598273523e8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5598273523c8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x5598273523a8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559827352558 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827352408 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559827352570 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827352428 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x559827352588 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559827352448 <col:16> 'int' 0
| `-FullComment 0x55982746ed70 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:826:4, line:832:35>
|   |-ParagraphComment 0x55982746eb30 <line:826:4>
|   | `-TextComment 0x55982746eb00 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746eb50 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55982746ebb0 <col:11, col:50>
|   |   `-TextComment 0x55982746eb80 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55982746ec50 <line:828:3, line:830:45>
|   | |-TextComment 0x55982746ebd0 <line:828:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55982746ebf0 <line:829:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746ec10 <line:830:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55982746eca0 <line:832:3>
|   | `-TextComment 0x55982746ec70 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746ecc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746ed20 <col:11, col:35>
|       `-TextComment 0x55982746ecf0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273526a8 <line:848:1, line:852:1> line:848:21 k_cyc_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559827352620 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559827352a68 <line:849:1, line:852:1>
| | `-ReturnStmt 0x559827352a20 <line:851:2, col:65>
| |   `-CallExpr 0x559827352918 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827352900 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559827352750 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559827352978 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559827352790 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559827352620 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827352990 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5598273527f8 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5598273527e0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5598273527b8 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5598273529a8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x559827352820 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5598273529c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559827352880 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559827352860 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559827352840 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5598273529d8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5598273528a0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5598273529f0 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5598273528c0 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x559827352a08 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5598273528e0 <col:16> 'int' 0
| `-FullComment 0x55982746f050 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:840:4, line:846:35>
|   |-ParagraphComment 0x55982746ee10 <line:840:4>
|   | `-TextComment 0x55982746ede0 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746ee30 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55982746ee90 <col:11, col:50>
|   |   `-TextComment 0x55982746ee60 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55982746ef30 <line:842:3, line:844:45>
|   | |-TextComment 0x55982746eeb0 <line:842:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55982746eed0 <line:843:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55982746eef0 <line:844:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55982746ef80 <line:846:3>
|   | `-TextComment 0x55982746ef50 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746efa0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746f000 <col:11, col:35>
|       `-TextComment 0x55982746efd0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827352b18 <line:862:1, line:866:1> line:862:21 k_cyc_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559827352a90 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x559827352ee8 <line:863:1, line:866:1>
| | `-ReturnStmt 0x559827352ea8 <line:865:2, col:65>
| |   `-ImplicitCastExpr 0x559827352e90 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559827352d70 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559827352d58 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559827352bc0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x559827352de8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x559827352dd0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559827352be8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559827352a90 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x559827352e00 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559827352c50 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559827352c38 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x559827352c10 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x559827352e18 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559827352c78 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x559827352e30 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x559827352cd8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559827352cb8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559827352c98 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559827352e48 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827352cf8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559827352e60 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x559827352d18 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559827352e78 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559827352d38 <col:16> 'int' 0
| `-FullComment 0x55982746f330 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:854:4, line:860:35>
|   |-ParagraphComment 0x55982746f0f0 <line:854:4>
|   | `-TextComment 0x55982746f0c0 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746f110 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55982746f170 <col:11, col:49>
|   |   `-TextComment 0x55982746f140 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55982746f210 <line:856:3, line:858:44>
|   | |-TextComment 0x55982746f190 <line:856:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55982746f1b0 <line:857:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746f1d0 <line:858:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55982746f260 <line:860:3>
|   | `-TextComment 0x55982746f230 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746f280 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746f2e0 <col:11, col:35>
|       `-TextComment 0x55982746f2b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x559827352f98 <line:876:1, line:880:1> line:876:21 k_cyc_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x559827352f10 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x559827353338 <line:877:1, line:880:1>
| | `-ReturnStmt 0x5598273532f8 <line:879:2, col:66>
| |   `-CallExpr 0x5598273531f0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5598273531d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559827353040 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x559827353250 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x559827353068 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x559827352f10 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x559827353268 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5598273530d0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5598273530b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x559827353090 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x559827353280 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5598273530f8 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x559827353298 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x559827353158 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x559827353138 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x559827353118 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5598273532b0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827353178 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5598273532c8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x559827353198 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5598273532e0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5598273531b8 <col:16> 'int' 0
| `-FullComment 0x55982746f610 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:868:4, line:874:35>
|   |-ParagraphComment 0x55982746f3d0 <line:868:4>
|   | `-TextComment 0x55982746f3a0 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746f3f0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55982746f450 <col:11, col:49>
|   |   `-TextComment 0x55982746f420 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55982746f4f0 <line:870:3, line:872:44>
|   | |-TextComment 0x55982746f470 <line:870:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55982746f490 <line:871:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55982746f4b0 <line:872:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55982746f540 <line:874:3>
|   | `-TextComment 0x55982746f510 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746f560 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746f5c0 <col:11, col:35>
|       `-TextComment 0x55982746f590 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273533e8 <line:890:1, line:894:1> line:890:21 k_cyc_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x559827353360 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273a5fa8 <line:891:1, line:894:1>
| | `-ReturnStmt 0x559827353778 <line:893:2, col:64>
| |   `-ImplicitCastExpr 0x559827353760 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x559827353640 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x559827353628 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x559827353490 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5598273536b8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5598273536a0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5598273534b8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x559827353360 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5598273536d0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x559827353520 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x559827353508 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5598273534e0 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5598273536e8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x559827353548 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x559827353700 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5598273535a8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x559827353588 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x559827353568 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x559827353718 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5598273535c8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x559827353730 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5598273535e8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x559827353748 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x559827353608 <col:16> 'int' 1
| `-FullComment 0x55982746f8f0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:882:4, line:888:35>
|   |-ParagraphComment 0x55982746f6b0 <line:882:4>
|   | `-TextComment 0x55982746f680 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746f6d0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55982746f730 <col:11, col:49>
|   |   `-TextComment 0x55982746f700 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55982746f7d0 <line:884:3, line:886:37>
|   | |-TextComment 0x55982746f750 <line:884:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55982746f770 <line:885:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746f790 <line:886:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55982746f820 <line:888:3>
|   | `-TextComment 0x55982746f7f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746f840 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746f8a0 <col:11, col:35>
|       `-TextComment 0x55982746f870 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273a6058 <line:904:1, line:908:1> line:904:21 k_cyc_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273a5fd0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273a63f8 <line:905:1, line:908:1>
| | `-ReturnStmt 0x5598273a63b8 <line:907:2, col:65>
| |   `-CallExpr 0x5598273a62b0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5598273a6298 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5598273a6100 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5598273a6310 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5598273a6128 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5598273a5fd0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5598273a6328 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5598273a6190 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5598273a6178 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5598273a6150 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5598273a6340 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5598273a61b8 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5598273a6358 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5598273a6218 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5598273a61f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x5598273a61d8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5598273a6370 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5598273a6238 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5598273a6388 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5598273a6258 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5598273a63a0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5598273a6278 <col:16> 'int' 1
| `-FullComment 0x55982746fbd0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:896:4, line:902:35>
|   |-ParagraphComment 0x55982746f990 <line:896:4>
|   | `-TextComment 0x55982746f960 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746f9b0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55982746fa10 <col:11, col:49>
|   |   `-TextComment 0x55982746f9e0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55982746fab0 <line:898:3, line:900:37>
|   | |-TextComment 0x55982746fa30 <line:898:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55982746fa50 <line:899:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55982746fa70 <line:900:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55982746fb00 <line:902:3>
|   | `-TextComment 0x55982746fad0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746fb20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746fb80 <col:11, col:35>
|       `-TextComment 0x55982746fb50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273a64a8 <line:918:1, line:922:1> line:918:21 k_cyc_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273a6420 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273a6878 <line:919:1, line:922:1>
| | `-ReturnStmt 0x5598273a6838 <line:921:2, col:64>
| |   `-ImplicitCastExpr 0x5598273a6820 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5598273a6700 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5598273a66e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5598273a6550 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5598273a6778 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5598273a6760 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5598273a6578 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5598273a6420 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5598273a6790 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5598273a65e0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5598273a65c8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5598273a65a0 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5598273a67a8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5598273a6608 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5598273a67c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5598273a6668 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5598273a6648 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x5598273a6628 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5598273a67d8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5598273a6688 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5598273a67f0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5598273a66a8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5598273a6808 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5598273a66c8 <col:16> 'int' 0
| `-FullComment 0x55982746fec0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:910:4, line:916:35>
|   |-ParagraphComment 0x55982746fc80 <line:910:4>
|   | `-TextComment 0x55982746fc40 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746fca0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55982746fd00 <col:11, col:49>
|   |   `-TextComment 0x55982746fcd0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55982746fda0 <line:912:3, line:914:45>
|   | |-TextComment 0x55982746fd20 <line:912:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55982746fd40 <line:913:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55982746fd60 <line:914:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55982746fdf0 <line:916:3>
|   | `-TextComment 0x55982746fdc0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982746fe10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55982746fe70 <col:11, col:35>
|       `-TextComment 0x55982746fe40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273a6928 <line:932:1, line:936:1> line:932:21 k_cyc_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273a68a0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273a6cc8 <line:933:1, line:936:1>
| | `-ReturnStmt 0x5598273a6c88 <line:935:2, col:65>
| |   `-CallExpr 0x5598273a6b80 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5598273a6b68 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5598273a69d0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55982738b790 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5598273a6be0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5598273a69f8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5598273a68a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5598273a6bf8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5598273a6a60 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5598273a6a48 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5598273a6a20 <col:18> 'int (void)' Function 0x55982738b288 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5598273a6c10 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5598273a6a88 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5598273a6c28 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5598273a6ae8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5598273a6ac8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x5598273a6aa8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5598273a6c40 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5598273a6b08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5598273a6c58 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5598273a6b28 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5598273a6c70 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5598273a6b48 <col:16> 'int' 0
| `-FullComment 0x5598274701a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:924:4, line:930:35>
|   |-ParagraphComment 0x55982746ff60 <line:924:4>
|   | `-TextComment 0x55982746ff30 <col:4> Text=" "
|   |-BlockCommandComment 0x55982746ff80 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55982746ffe0 <col:11, col:49>
|   |   `-TextComment 0x55982746ffb0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x559827470080 <line:926:3, line:928:45>
|   | |-TextComment 0x559827470000 <line:926:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x559827470020 <line:927:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827470040 <line:928:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5598274700d0 <line:930:3>
|   | `-TextComment 0x5598274700a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274700f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827470150 <col:11, col:35>
|       `-TextComment 0x559827470120 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273a6d78 <line:946:1, line:950:1> line:946:21 k_cyc_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273a6cf0 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273a6fd8 <line:947:1, line:950:1>
| `-FullComment 0x559827470480 <line:938:4, line:944:35>
|   |-ParagraphComment 0x559827470240 <line:938:4>
|   | `-TextComment 0x559827470210 <col:4> Text=" "
|   |-BlockCommandComment 0x559827470260 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5598274702c0 <col:11, col:43>
|   |   `-TextComment 0x559827470290 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x559827470360 <line:940:3, line:942:44>
|   | |-TextComment 0x5598274702e0 <line:940:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x559827470300 <line:941:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827470320 <line:942:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5598274703b0 <line:944:3>
|   | `-TextComment 0x559827470380 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274703d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827470430 <col:11, col:35>
|       `-TextComment 0x559827470400 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273a7080 <line:960:1, line:964:1> line:960:21 k_cyc_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273a6ff8 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273a72c8 <line:961:1, line:964:1>
| `-FullComment 0x559827470760 <line:952:4, line:958:35>
|   |-ParagraphComment 0x559827470520 <line:952:4>
|   | `-TextComment 0x5598274704f0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827470540 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5598274705a0 <col:11, col:43>
|   |   `-TextComment 0x559827470570 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x559827470640 <line:954:3, line:956:44>
|   | |-TextComment 0x5598274705c0 <line:954:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5598274705e0 <line:955:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827470600 <line:956:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559827470690 <line:958:3>
|   | `-TextComment 0x559827470660 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274706b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827470710 <col:11, col:35>
|       `-TextComment 0x5598274706e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273a7370 <line:974:1, line:978:1> line:974:21 k_cyc_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273a72e8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273a75b8 <line:975:1, line:978:1>
| `-FullComment 0x559827470a40 <line:966:4, line:972:35>
|   |-ParagraphComment 0x559827470800 <line:966:4>
|   | `-TextComment 0x5598274707d0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827470820 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559827470880 <col:11, col:43>
|   |   `-TextComment 0x559827470850 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x559827470920 <line:968:3, line:970:37>
|   | |-TextComment 0x5598274708a0 <line:968:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5598274708c0 <line:969:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5598274708e0 <line:970:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559827470970 <line:972:3>
|   | `-TextComment 0x559827470940 <col:3> Text=" "
|   `-BlockCommandComment 0x559827470990 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5598274709f0 <col:11, col:35>
|       `-TextComment 0x5598274709c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273a7660 <line:988:1, line:992:1> line:988:21 k_cyc_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273a75d8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273a78a8 <line:989:1, line:992:1>
| `-FullComment 0x559827470d20 <line:980:4, line:986:35>
|   |-ParagraphComment 0x559827470ae0 <line:980:4>
|   | `-TextComment 0x559827470ab0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827470b00 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559827470b60 <col:11, col:43>
|   |   `-TextComment 0x559827470b30 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x559827470c00 <line:982:3, line:984:37>
|   | |-TextComment 0x559827470b80 <line:982:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x559827470ba0 <line:983:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827470bc0 <line:984:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559827470c50 <line:986:3>
|   | `-TextComment 0x559827470c20 <col:3> Text=" "
|   `-BlockCommandComment 0x559827470c70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827470cd0 <col:11, col:35>
|       `-TextComment 0x559827470ca0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273a7950 <line:1002:1, line:1006:1> line:1002:21 k_cyc_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273a78c8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273a7b98 <line:1003:1, line:1006:1>
| `-FullComment 0x559827471000 <line:994:4, line:1000:35>
|   |-ParagraphComment 0x559827470dc0 <line:994:4>
|   | `-TextComment 0x559827470d90 <col:4> Text=" "
|   |-BlockCommandComment 0x559827470de0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559827470e40 <col:11, col:43>
|   |   `-TextComment 0x559827470e10 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x559827470ee0 <line:996:3, line:998:45>
|   | |-TextComment 0x559827470e60 <line:996:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x559827470e80 <line:997:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827470ea0 <line:998:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559827470f30 <line:1000:3>
|   | `-TextComment 0x559827470f00 <col:3> Text=" "
|   `-BlockCommandComment 0x559827470f50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827470fb0 <col:11, col:35>
|       `-TextComment 0x559827470f80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273a7c40 <line:1016:1, line:1020:1> line:1016:21 k_cyc_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273a7bb8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273a7e88 <line:1017:1, line:1020:1>
| `-FullComment 0x5598274712e0 <line:1008:4, line:1014:35>
|   |-ParagraphComment 0x5598274710a0 <line:1008:4>
|   | `-TextComment 0x559827471070 <col:4> Text=" "
|   |-BlockCommandComment 0x5598274710c0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559827471120 <col:11, col:43>
|   |   `-TextComment 0x5598274710f0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5598274711c0 <line:1010:3, line:1012:45>
|   | |-TextComment 0x559827471140 <line:1010:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x559827471160 <line:1011:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827471180 <line:1012:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559827471210 <line:1014:3>
|   | `-TextComment 0x5598274711e0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827471230 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827471290 <col:11, col:35>
|       `-TextComment 0x559827471260 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273a7fa0 <line:1030:1, line:1034:1> line:1030:21 k_ticks_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273a7ea8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273a8168 <line:1031:1, line:1034:1>
| `-FullComment 0x5598274715c0 <line:1022:4, line:1028:35>
|   |-ParagraphComment 0x559827471380 <line:1022:4>
|   | `-TextComment 0x559827471350 <col:4> Text=" "
|   |-BlockCommandComment 0x5598274713a0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559827471400 <col:11, col:40>
|   |   `-TextComment 0x5598274713d0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5598274714a0 <line:1024:3, line:1026:44>
|   | |-TextComment 0x559827471420 <line:1024:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x559827471440 <line:1025:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827471460 <line:1026:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5598274714f0 <line:1028:3>
|   | `-TextComment 0x5598274714c0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827471510 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827471570 <col:11, col:35>
|       `-TextComment 0x559827471540 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273a8210 <line:1044:1, line:1048:1> line:1044:21 used k_ticks_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273a8188 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273a83d8 <line:1045:1, line:1048:1>
| `-FullComment 0x5598274718a0 <line:1036:4, line:1042:35>
|   |-ParagraphComment 0x559827471660 <line:1036:4>
|   | `-TextComment 0x559827471630 <col:4> Text=" "
|   |-BlockCommandComment 0x559827471680 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5598274716e0 <col:11, col:40>
|   |   `-TextComment 0x5598274716b0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x559827471780 <line:1038:3, line:1040:44>
|   | |-TextComment 0x559827471700 <line:1038:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x559827471720 <line:1039:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827471740 <line:1040:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5598274717d0 <line:1042:3>
|   | `-TextComment 0x5598274717a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274717f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827471850 <col:11, col:35>
|       `-TextComment 0x559827471820 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273a8480 <line:1058:1, line:1062:1> line:1058:21 k_ticks_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273a83f8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273a8648 <line:1059:1, line:1062:1>
| `-FullComment 0x559827471b80 <line:1050:4, line:1056:35>
|   |-ParagraphComment 0x559827471940 <line:1050:4>
|   | `-TextComment 0x559827471910 <col:4> Text=" "
|   |-BlockCommandComment 0x559827471960 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5598274719c0 <col:11, col:40>
|   |   `-TextComment 0x559827471990 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x559827471a60 <line:1052:3, line:1054:37>
|   | |-TextComment 0x5598274719e0 <line:1052:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x559827471a00 <line:1053:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827471a20 <line:1054:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559827471ab0 <line:1056:3>
|   | `-TextComment 0x559827471a80 <col:3> Text=" "
|   `-BlockCommandComment 0x559827471ad0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827471b30 <col:11, col:35>
|       `-TextComment 0x559827471b00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273a86f0 <line:1072:1, line:1076:1> line:1072:21 k_ticks_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273a8668 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273a88b8 <line:1073:1, line:1076:1>
| `-FullComment 0x559827471e70 <line:1064:4, line:1070:35>
|   |-ParagraphComment 0x559827471c20 <line:1064:4>
|   | `-TextComment 0x559827471bf0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827471c40 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559827471cb0 <col:11, col:40>
|   |   `-TextComment 0x559827471c80 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x559827471d50 <line:1066:3, line:1068:37>
|   | |-TextComment 0x559827471cd0 <line:1066:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x559827471cf0 <line:1067:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827471d10 <line:1068:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559827471da0 <line:1070:3>
|   | `-TextComment 0x559827471d70 <col:3> Text=" "
|   `-BlockCommandComment 0x559827471dc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827471e20 <col:11, col:35>
|       `-TextComment 0x559827471df0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273a8960 <line:1086:1, line:1090:1> line:1086:21 k_ticks_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273a88d8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273a8b28 <line:1087:1, line:1090:1>
| `-FullComment 0x559827472150 <line:1078:4, line:1084:35>
|   |-ParagraphComment 0x559827471f10 <line:1078:4>
|   | `-TextComment 0x559827471ee0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827471f30 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559827471f90 <col:11, col:40>
|   |   `-TextComment 0x559827471f60 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x559827472030 <line:1080:3, line:1082:45>
|   | |-TextComment 0x559827471fb0 <line:1080:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x559827471fd0 <line:1081:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827471ff0 <line:1082:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559827472080 <line:1084:3>
|   | `-TextComment 0x559827472050 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274720a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827472100 <col:11, col:35>
|       `-TextComment 0x5598274720d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273a8bd0 <line:1100:1, line:1104:1> line:1100:21 k_ticks_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273a8b48 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273a8d98 <line:1101:1, line:1104:1>
| `-FullComment 0x559827472430 <line:1092:4, line:1098:35>
|   |-ParagraphComment 0x5598274721f0 <line:1092:4>
|   | `-TextComment 0x5598274721c0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827472210 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559827472270 <col:11, col:40>
|   |   `-TextComment 0x559827472240 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x559827472310 <line:1094:3, line:1096:45>
|   | |-TextComment 0x559827472290 <line:1094:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5598274722b0 <line:1095:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5598274722d0 <line:1096:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559827472360 <line:1098:3>
|   | `-TextComment 0x559827472330 <col:3> Text=" "
|   `-BlockCommandComment 0x559827472380 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5598274723e0 <col:11, col:35>
|       `-TextComment 0x5598274723b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273a8e40 <line:1114:1, line:1118:1> line:1114:21 k_ticks_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273a8db8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273aa028 <line:1115:1, line:1118:1>
| `-FullComment 0x559827472710 <line:1106:4, line:1112:35>
|   |-ParagraphComment 0x5598274724d0 <line:1106:4>
|   | `-TextComment 0x5598274724a0 <col:4> Text=" "
|   |-BlockCommandComment 0x5598274724f0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559827472550 <col:11, col:40>
|   |   `-TextComment 0x559827472520 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5598274725f0 <line:1108:3, line:1110:44>
|   | |-TextComment 0x559827472570 <line:1108:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x559827472590 <line:1109:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5598274725b0 <line:1110:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559827472640 <line:1112:3>
|   | `-TextComment 0x559827472610 <col:3> Text=" "
|   `-BlockCommandComment 0x559827472660 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5598274726c0 <col:11, col:35>
|       `-TextComment 0x559827472690 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273aa0d0 <line:1128:1, line:1132:1> line:1128:21 k_ticks_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273aa048 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273aa298 <line:1129:1, line:1132:1>
| `-FullComment 0x5598274729f0 <line:1120:4, line:1126:35>
|   |-ParagraphComment 0x5598274727b0 <line:1120:4>
|   | `-TextComment 0x559827472780 <col:4> Text=" "
|   |-BlockCommandComment 0x5598274727d0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559827472830 <col:11, col:40>
|   |   `-TextComment 0x559827472800 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5598274728d0 <line:1122:3, line:1124:44>
|   | |-TextComment 0x559827472850 <line:1122:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x559827472870 <line:1123:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827472890 <line:1124:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559827472920 <line:1126:3>
|   | `-TextComment 0x5598274728f0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827472940 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5598274729a0 <col:11, col:35>
|       `-TextComment 0x559827472970 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273aa340 <line:1142:1, line:1146:1> line:1142:21 k_ticks_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273aa2b8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273aa508 <line:1143:1, line:1146:1>
| `-FullComment 0x559827472cd0 <line:1134:4, line:1140:35>
|   |-ParagraphComment 0x559827472a90 <line:1134:4>
|   | `-TextComment 0x559827472a60 <col:4> Text=" "
|   |-BlockCommandComment 0x559827472ab0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559827472b10 <col:11, col:40>
|   |   `-TextComment 0x559827472ae0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x559827472bb0 <line:1136:3, line:1138:37>
|   | |-TextComment 0x559827472b30 <line:1136:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x559827472b50 <line:1137:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827472b70 <line:1138:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559827472c00 <line:1140:3>
|   | `-TextComment 0x559827472bd0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827472c20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827472c80 <col:11, col:35>
|       `-TextComment 0x559827472c50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273aa5b0 <line:1156:1, line:1160:1> line:1156:21 k_ticks_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273aa528 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273aa778 <line:1157:1, line:1160:1>
| `-FullComment 0x559827472fb0 <line:1148:4, line:1154:35>
|   |-ParagraphComment 0x559827472d70 <line:1148:4>
|   | `-TextComment 0x559827472d40 <col:4> Text=" "
|   |-BlockCommandComment 0x559827472d90 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x559827472df0 <col:11, col:40>
|   |   `-TextComment 0x559827472dc0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x559827472e90 <line:1150:3, line:1152:37>
|   | |-TextComment 0x559827472e10 <line:1150:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x559827472e30 <line:1151:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827472e50 <line:1152:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559827472ee0 <line:1154:3>
|   | `-TextComment 0x559827472eb0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827472f00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827472f60 <col:11, col:35>
|       `-TextComment 0x559827472f30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273aa820 <line:1170:1, line:1174:1> line:1170:21 k_ticks_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273aa798 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273aa9e8 <line:1171:1, line:1174:1>
| `-FullComment 0x559827473290 <line:1162:4, line:1168:35>
|   |-ParagraphComment 0x559827473050 <line:1162:4>
|   | `-TextComment 0x559827473020 <col:4> Text=" "
|   |-BlockCommandComment 0x559827473070 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5598274730d0 <col:11, col:40>
|   |   `-TextComment 0x5598274730a0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x559827473170 <line:1164:3, line:1166:45>
|   | |-TextComment 0x5598274730f0 <line:1164:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x559827473110 <line:1165:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827473130 <line:1166:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5598274731c0 <line:1168:3>
|   | `-TextComment 0x559827473190 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274731e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827473240 <col:11, col:35>
|       `-TextComment 0x559827473210 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273aaa90 <line:1184:1, line:1188:1> line:1184:21 k_ticks_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273aaa08 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273aac58 <line:1185:1, line:1188:1>
| `-FullComment 0x559827473570 <line:1176:4, line:1182:35>
|   |-ParagraphComment 0x559827473330 <line:1176:4>
|   | `-TextComment 0x559827473300 <col:4> Text=" "
|   |-BlockCommandComment 0x559827473350 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5598274733b0 <col:11, col:40>
|   |   `-TextComment 0x559827473380 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x559827473450 <line:1178:3, line:1180:45>
|   | |-TextComment 0x5598274733d0 <line:1178:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5598274733f0 <line:1179:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827473410 <line:1180:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5598274734a0 <line:1182:3>
|   | `-TextComment 0x559827473470 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274734c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827473520 <col:11, col:35>
|       `-TextComment 0x5598274734f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273aad00 <line:1198:1, line:1202:1> line:1198:21 k_ticks_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273aac78 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273aaec8 <line:1199:1, line:1202:1>
| `-FullComment 0x559827473850 <line:1190:4, line:1196:35>
|   |-ParagraphComment 0x559827473610 <line:1190:4>
|   | `-TextComment 0x5598274735e0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827473630 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559827473690 <col:11, col:39>
|   |   `-TextComment 0x559827473660 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x559827473730 <line:1192:3, line:1194:44>
|   | |-TextComment 0x5598274736b0 <line:1192:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5598274736d0 <line:1193:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5598274736f0 <line:1194:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559827473780 <line:1196:3>
|   | `-TextComment 0x559827473750 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274737a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827473800 <col:11, col:35>
|       `-TextComment 0x5598274737d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273aafd0 <line:1212:1, line:1216:1> line:1212:21 k_ticks_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273aaee8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273ab198 <line:1213:1, line:1216:1>
| `-FullComment 0x559827473b30 <line:1204:4, line:1210:35>
|   |-ParagraphComment 0x5598274738f0 <line:1204:4>
|   | `-TextComment 0x5598274738c0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827473910 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559827473970 <col:11, col:39>
|   |   `-TextComment 0x559827473940 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x559827473a10 <line:1206:3, line:1208:44>
|   | |-TextComment 0x559827473990 <line:1206:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5598274739b0 <line:1207:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5598274739d0 <line:1208:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559827473a60 <line:1210:3>
|   | `-TextComment 0x559827473a30 <col:3> Text=" "
|   `-BlockCommandComment 0x559827473a80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827473ae0 <col:11, col:35>
|       `-TextComment 0x559827473ab0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273ab240 <line:1226:1, line:1230:1> line:1226:21 k_ticks_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273ab1b8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273ab408 <line:1227:1, line:1230:1>
| `-FullComment 0x559827473e30 <line:1218:4, line:1224:35>
|   |-ParagraphComment 0x559827473bd0 <line:1218:4>
|   | `-TextComment 0x559827473ba0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827473bf0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559827473c50 <col:11, col:39>
|   |   `-TextComment 0x559827473c20 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x559827473d10 <line:1220:3, line:1222:37>
|   | |-TextComment 0x559827473c90 <line:1220:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x559827473cb0 <line:1221:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827473cd0 <line:1222:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559827473d60 <line:1224:3>
|   | `-TextComment 0x559827473d30 <col:3> Text=" "
|   `-BlockCommandComment 0x559827473d80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827473de0 <col:11, col:35>
|       `-TextComment 0x559827473db0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273ab4b0 <line:1240:1, line:1244:1> line:1240:21 k_ticks_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273ab428 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273ab678 <line:1241:1, line:1244:1>
| `-FullComment 0x559827474110 <line:1232:4, line:1238:35>
|   |-ParagraphComment 0x559827473ed0 <line:1232:4>
|   | `-TextComment 0x559827473ea0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827473ef0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559827473f50 <col:11, col:39>
|   |   `-TextComment 0x559827473f20 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x559827473ff0 <line:1234:3, line:1236:37>
|   | |-TextComment 0x559827473f70 <line:1234:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x559827473f90 <line:1235:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827473fb0 <line:1236:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559827474040 <line:1238:3>
|   | `-TextComment 0x559827474010 <col:3> Text=" "
|   `-BlockCommandComment 0x559827474060 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5598274740c0 <col:11, col:35>
|       `-TextComment 0x559827474090 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273ab720 <line:1254:1, line:1258:1> line:1254:21 k_ticks_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273ab698 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273ab8e8 <line:1255:1, line:1258:1>
| `-FullComment 0x5598274743f0 <line:1246:4, line:1252:35>
|   |-ParagraphComment 0x5598274741b0 <line:1246:4>
|   | `-TextComment 0x559827474180 <col:4> Text=" "
|   |-BlockCommandComment 0x5598274741d0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559827474230 <col:11, col:39>
|   |   `-TextComment 0x559827474200 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5598274742d0 <line:1248:3, line:1250:45>
|   | |-TextComment 0x559827474250 <line:1248:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x559827474270 <line:1249:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827474290 <line:1250:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559827474320 <line:1252:3>
|   | `-TextComment 0x5598274742f0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827474340 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5598274743a0 <col:11, col:35>
|       `-TextComment 0x559827474370 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273ab990 <line:1268:1, line:1272:1> line:1268:21 k_ticks_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273ab908 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273abb58 <line:1269:1, line:1272:1>
| `-FullComment 0x5598274746d0 <line:1260:4, line:1266:35>
|   |-ParagraphComment 0x559827474490 <line:1260:4>
|   | `-TextComment 0x559827474460 <col:4> Text=" "
|   |-BlockCommandComment 0x5598274744b0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x559827474510 <col:11, col:39>
|   |   `-TextComment 0x5598274744e0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5598274745b0 <line:1262:3, line:1264:45>
|   | |-TextComment 0x559827474530 <line:1262:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x559827474550 <line:1263:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827474570 <line:1264:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559827474600 <line:1266:3>
|   | `-TextComment 0x5598274745d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827474620 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827474680 <col:11, col:35>
|       `-TextComment 0x559827474650 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273abc00 <line:1282:1, line:1286:1> line:1282:21 k_ticks_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273abb78 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273abe48 <line:1283:1, line:1286:1>
| `-FullComment 0x5598274749b0 <line:1274:4, line:1280:35>
|   |-ParagraphComment 0x559827474770 <line:1274:4>
|   | `-TextComment 0x559827474740 <col:4> Text=" "
|   |-BlockCommandComment 0x559827474790 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5598274747f0 <col:11, col:43>
|   |   `-TextComment 0x5598274747c0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x559827474890 <line:1276:3, line:1278:44>
|   | |-TextComment 0x559827474810 <line:1276:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x559827474830 <line:1277:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827474850 <line:1278:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5598274748e0 <line:1280:3>
|   | `-TextComment 0x5598274748b0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827474900 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827474960 <col:11, col:35>
|       `-TextComment 0x559827474930 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273abef0 <line:1296:1, line:1300:1> line:1296:21 k_ticks_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273abe68 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273ac158 <line:1297:1, line:1300:1>
| `-FullComment 0x559827474c90 <line:1288:4, line:1294:35>
|   |-ParagraphComment 0x559827474a50 <line:1288:4>
|   | `-TextComment 0x559827474a20 <col:4> Text=" "
|   |-BlockCommandComment 0x559827474a70 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559827474ad0 <col:11, col:43>
|   |   `-TextComment 0x559827474aa0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x559827474b70 <line:1290:3, line:1292:44>
|   | |-TextComment 0x559827474af0 <line:1290:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x559827474b10 <line:1291:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x559827474b30 <line:1292:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x559827474bc0 <line:1294:3>
|   | `-TextComment 0x559827474b90 <col:3> Text=" "
|   `-BlockCommandComment 0x559827474be0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827474c40 <col:11, col:35>
|       `-TextComment 0x559827474c10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273ac200 <line:1310:1, line:1314:1> line:1310:21 k_ticks_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273ac178 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273ac448 <line:1311:1, line:1314:1>
| `-FullComment 0x559827474f70 <line:1302:4, line:1308:35>
|   |-ParagraphComment 0x559827474d30 <line:1302:4>
|   | `-TextComment 0x559827474d00 <col:4> Text=" "
|   |-BlockCommandComment 0x559827474d50 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559827474db0 <col:11, col:43>
|   |   `-TextComment 0x559827474d80 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x559827474e50 <line:1304:3, line:1306:37>
|   | |-TextComment 0x559827474dd0 <line:1304:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x559827474df0 <line:1305:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x559827474e10 <line:1306:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559827474ea0 <line:1308:3>
|   | `-TextComment 0x559827474e70 <col:3> Text=" "
|   `-BlockCommandComment 0x559827474ec0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827474f20 <col:11, col:35>
|       `-TextComment 0x559827474ef0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273ac4f0 <line:1324:1, line:1328:1> line:1324:21 k_ticks_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273ac468 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273ac738 <line:1325:1, line:1328:1>
| `-FullComment 0x559827475250 <line:1316:4, line:1322:35>
|   |-ParagraphComment 0x559827475010 <line:1316:4>
|   | `-TextComment 0x559827474fe0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827475030 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559827475090 <col:11, col:43>
|   |   `-TextComment 0x559827475060 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x559827475130 <line:1318:3, line:1320:37>
|   | |-TextComment 0x5598274750b0 <line:1318:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5598274750d0 <line:1319:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5598274750f0 <line:1320:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x559827475180 <line:1322:3>
|   | `-TextComment 0x559827475150 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274751a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x559827475200 <col:11, col:35>
|       `-TextComment 0x5598274751d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273ac7e0 <line:1338:1, line:1342:1> line:1338:21 k_ticks_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5598273ac758 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273aca28 <line:1339:1, line:1342:1>
| `-FullComment 0x559827475530 <line:1330:4, line:1336:35>
|   |-ParagraphComment 0x5598274752f0 <line:1330:4>
|   | `-TextComment 0x5598274752c0 <col:4> Text=" "
|   |-BlockCommandComment 0x559827475310 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559827475370 <col:11, col:43>
|   |   `-TextComment 0x559827475340 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x559827475410 <line:1332:3, line:1334:45>
|   | |-TextComment 0x559827475390 <line:1332:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5598274753b0 <line:1333:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5598274753d0 <line:1334:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559827475460 <line:1336:3>
|   | `-TextComment 0x559827475430 <col:3> Text=" "
|   `-BlockCommandComment 0x559827475480 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5598274754e0 <col:11, col:35>
|       `-TextComment 0x5598274754b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273acad0 <line:1352:1, line:1356:1> line:1352:21 k_ticks_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5598273aca48 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5598273acd78 <line:1353:1, line:1356:1>
| `-FullComment 0x559827475810 <line:1344:4, line:1350:35>
|   |-ParagraphComment 0x5598274755d0 <line:1344:4>
|   | `-TextComment 0x5598274755a0 <col:4> Text=" "
|   |-BlockCommandComment 0x5598274755f0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x559827475650 <col:11, col:43>
|   |   `-TextComment 0x559827475620 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5598274756f0 <line:1346:3, line:1348:45>
|   | |-TextComment 0x559827475670 <line:1346:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x559827475690 <line:1347:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5598274756b0 <line:1348:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x559827475740 <line:1350:3>
|   | `-TextComment 0x559827475710 <col:3> Text=" "
|   `-BlockCommandComment 0x559827475760 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5598274757c0 <col:11, col:35>
|       `-TextComment 0x559827475790 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5598273ace18 </vagrant/ext/zephyros/zephyr/include/sys_clock.h:117:1, col:25> col:7 z_tick_get_32 'u32_t (void)'
| `-FullComment 0x559827475aa0 <line:112:3, line:116:1>
|   |-ParagraphComment 0x5598274758b0 <line:112:3>
|   | `-TextComment 0x559827475880 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274758d0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x559827475930 <col:10, col:64>
|   |   `-TextComment 0x559827475900 <col:10, col:64> Text=" Return the lower part of the current system tick count"
|   |-ParagraphComment 0x559827475980 <line:114:3>
|   | `-TextComment 0x559827475950 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274759a0 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x559827475a00 <col:11, col:40>
|   |   `-TextComment 0x5598274759d0 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x559827475a50 <line:116:1>
|     `-TextComment 0x559827475a20 <col:1> Text=" "
|-FunctionDecl 0x5598273af010 <line:126:1, col:22> col:7 z_tick_get 's64_t (void)'
| `-FullComment 0x559827475d40 <line:121:3, line:125:1>
|   |-ParagraphComment 0x559827475b40 <line:121:3>
|   | `-TextComment 0x559827475b10 <col:3> Text=" "
|   |-BlockCommandComment 0x559827475b60 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x559827475bc0 <col:10, col:46>
|   |   `-TextComment 0x559827475b90 <col:10, col:46> Text=" Return the current system tick count"
|   |-ParagraphComment 0x559827475c10 <line:123:3>
|   | `-TextComment 0x559827475be0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827475c30 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x559827475ca0 <col:11, col:40>
|   |   `-TextComment 0x559827475c60 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x559827475cf0 <line:125:1>
|     `-TextComment 0x559827475cc0 <col:1> Text=" "
|-RecordDecl 0x5598273af0b0 <line:135:1, col:8> col:8 struct _timeout
|-TypedefDecl 0x5598273af3b0 <line:136:1, col:51> col:16 referenced _timeout_func_t 'void (*)(struct _timeout *)'
| `-PointerType 0x5598273af350 'void (*)(struct _timeout *)'
|   `-ParenType 0x5598273af2f0 'void (struct _timeout *)' sugar
|     `-FunctionProtoType 0x5598273af2b0 'void (struct _timeout *)' cdecl
|       |-BuiltinType 0x55982722a6f0 'void'
|       `-PointerType 0x5598273af1c0 'struct _timeout *'
|         `-ElaboratedType 0x5598273af160 'struct _timeout' sugar
|           `-RecordType 0x5598273af140 'struct _timeout'
|             `-Record 0x5598273af408 '_timeout'
|-RecordDecl 0x5598273af408 prev 0x5598273af0b0 <line:138:1, line:142:1> line:138:8 struct _timeout definition
| |-FieldDecl 0x5598273af4a0 <line:139:2, col:14> col:14 node 'sys_dnode_t':'struct _dnode'
| |-FieldDecl 0x5598273af520 <line:140:2, col:8> col:8 dticks 's32_t':'int'
| `-FieldDecl 0x5598273af5a0 <line:141:2, col:18> col:18 fn '_timeout_func_t':'void (*)(struct _timeout *)'
|-RecordDecl 0x5598273af5e8 </vagrant/ext/zephyros/zephyr/include/spinlock.h:25:1, line:27:1> line:25:8 struct k_spinlock_key definition
| `-FieldDecl 0x5598273af6a8 <line:26:2, col:6> col:6 referenced key 'int'
|-TypedefDecl 0x5598273af740 <line:29:1, col:31> col:31 referenced k_spinlock_key_t 'struct k_spinlock_key':'struct k_spinlock_key'
| `-ElaboratedType 0x5598273af6f0 'struct k_spinlock_key' sugar
|   `-RecordType 0x5598273af670 'struct k_spinlock_key'
|     `-Record 0x5598273af5e8 'k_spinlock_key'
|-RecordDecl 0x5598273af798 <line:31:1, line:60:1> line:31:8 struct k_spinlock definition
|-FunctionDecl 0x5598273afa10 <line:62:1, line:86:1> line:62:39 k_spin_lock 'k_spinlock_key_t (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x5598273af910 <col:51, col:70> col:70 used l 'struct k_spinlock *'
| |-CompoundStmt 0x5598273afe28 <line:63:1, line:86:1>
| | |-CStyleCastExpr 0x5598273afba0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5598273afb88 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x5598273afb68 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x5598273afb00 </vagrant/ext/zephyros/zephyr/include/spinlock.h:64:13> 'struct k_spinlock *' lvalue ParmVar 0x5598273af910 'l' 'struct k_spinlock *'
| | |-DeclStmt 0x5598273afc38 <line:65:2, col:20>
| | | `-VarDecl 0x5598273afbd8 <col:2, col:19> col:19 used k 'k_spinlock_key_t':'struct k_spinlock_key'
| | |-BinaryOperator 0x5598273afd60 <line:71:2, col:24> 'int' '='
| | | |-MemberExpr 0x5598273afc78 <col:2, col:4> 'int' lvalue .key 0x5598273af6a8
| | | | `-DeclRefExpr 0x5598273afc50 <col:2> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x5598273afbd8 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| | | `-ImplicitCastExpr 0x5598273afd48 <col:10, col:24> 'int' <IntegralCast>
| | |   `-CallExpr 0x5598273afd20 <col:10, col:24> 'unsigned int'
| | |     `-ImplicitCastExpr 0x5598273afd08 <col:10> 'unsigned int (*)(void)' <FunctionToPointerDecay>
| | |       `-DeclRefExpr 0x5598273afcb0 <col:10> 'unsigned int (void)' Function 0x55982738a190 'arch_irq_lock' 'unsigned int (void)'
| | `-ReturnStmt 0x5598273afe10 <line:85:2, col:9>
| |   `-ImplicitCastExpr 0x5598273afdf8 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' <LValueToRValue>
| |     `-DeclRefExpr 0x5598273afdd0 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x5598273afbd8 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x5598273afab8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x5598273b1d70 </vagrant/ext/zephyros/zephyr/include/spinlock.h:88:1, line:107:1> line:88:27 k_spin_unlock 'void (struct k_spinlock *, k_spinlock_key_t)' static inline
| |-ParmVarDecl 0x5598273afe80 <col:41, col:60> col:60 used l 'struct k_spinlock *'
| |-ParmVarDecl 0x5598273afef0 <line:89:6, col:23> col:23 used key 'k_spinlock_key_t':'struct k_spinlock_key'
| |-CompoundStmt 0x5598273b2060 <line:90:1, line:107:1>
| | |-CStyleCastExpr 0x5598273b1f08 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5598273b1ef0 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x5598273b1ed0 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x5598273b1e68 </vagrant/ext/zephyros/zephyr/include/spinlock.h:91:13> 'struct k_spinlock *' lvalue ParmVar 0x5598273afe80 'l' 'struct k_spinlock *'
| | `-CallExpr 0x5598273b2000 <line:106:2, col:25> 'void'
| |   |-ImplicitCastExpr 0x5598273b1fe8 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5598273b1f30 <col:2> 'void (unsigned int)' Function 0x55982738a2f8 'arch_irq_unlock' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x5598273b2048 <col:18, col:22> 'unsigned int' <IntegralCast>
| |     `-ImplicitCastExpr 0x5598273b2030 <col:18, col:22> 'int' <LValueToRValue>
| |       `-MemberExpr 0x5598273b1f80 <col:18, col:22> 'int' lvalue .key 0x5598273af6a8
| |         `-DeclRefExpr 0x5598273b1f58 <col:18> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue ParmVar 0x5598273afef0 'key' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x5598273b1e20 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x5598273b21b0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:112:1, line:121:1> line:112:27 k_spin_release 'void (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x5598273b20a8 <col:42, col:61> col:61 used l 'struct k_spinlock *'
| |-CompoundStmt 0x5598273b23c8 <line:113:1, line:121:1>
| | `-CStyleCastExpr 0x5598273b2340 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5598273b2328 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| |     `-ParenExpr 0x5598273b2308 <col:29, col:31> 'struct k_spinlock *' lvalue
| |       `-DeclRefExpr 0x5598273b22a0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:114:13> 'struct k_spinlock *' lvalue ParmVar 0x5598273b20a8 'l' 'struct k_spinlock *'
| `-AlwaysInlineAttr 0x5598273b2258 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-EnumDecl 0x5598273b23e0 </vagrant/ext/zephyros/zephyr/include/fatal.h:23:1, line:42:1> line:23:6 k_fatal_error_reason
| |-FullComment 0x559827475fa0 <line:18:3, line:20:5>
| | |-ParagraphComment 0x559827475de0 <line:18:3>
| | | `-TextComment 0x559827475db0 <col:3> Text=" "
| | |-VerbatimLineComment 0x559827475e00 <col:4, col:41> Text=" fatal_apis Fatal error APIs"
| | |-ParagraphComment 0x559827475e70 <line:19:3>
| | | `-TextComment 0x559827475e40 <col:3> Text=" "
| | |-VerbatimLineComment 0x559827475e90 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x559827475f50 <line:20:3, col:5>
| |   |-TextComment 0x559827475ed0 <col:3> Text=" "
| |   |-TextComment 0x559827475ef0 <col:4> Text="@"
| |   `-TextComment 0x559827475f10 <col:5> Text="{"
| |-EnumConstantDecl 0x5598273b24c8 <line:25:2> col:2 K_ERR_CPU_EXCEPTION 'int'
| | `-FullComment 0x559827476070 <line:24:5, col:55>
| |   `-ParagraphComment 0x559827476040 <col:5, col:55>
| |     `-TextComment 0x559827476010 <col:5, col:55> Text=" Generic CPU exception, not covered by other codes "
| |-EnumConstantDecl 0x5598273b2538 <line:28:2> col:2 K_ERR_SPURIOUS_IRQ 'int'
| | `-FullComment 0x559827476140 <line:27:5, col:34>
| |   `-ParagraphComment 0x559827476110 <col:5, col:34>
| |     `-TextComment 0x5598274760e0 <col:5, col:34> Text=" Unhandled hardware interrupt "
| |-EnumConstantDecl 0x5598273b25a8 <line:31:2> col:2 K_ERR_STACK_CHK_FAIL 'int'
| | `-FullComment 0x559827476210 <line:30:5, col:50>
| |   `-ParagraphComment 0x5598274761e0 <col:5, col:50>
| |     `-TextComment 0x5598274761b0 <col:5, col:50> Text=" Faulting context overflowed its stack buffer "
| |-EnumConstantDecl 0x5598273b2618 <line:34:2> col:2 K_ERR_KERNEL_OOPS 'int'
| | `-FullComment 0x5598274762e0 <line:33:5, col:38>
| |   `-ParagraphComment 0x5598274762b0 <col:5, col:38>
| |     `-TextComment 0x559827476280 <col:5, col:38> Text=" Moderate severity software error "
| `-EnumConstantDecl 0x5598273b2688 <line:37:2> col:2 K_ERR_KERNEL_PANIC 'int'
|   `-FullComment 0x5598274763b0 <line:36:5, col:34>
|     `-ParagraphComment 0x559827476380 <col:5, col:34>
|       `-TextComment 0x559827476350 <col:5, col:34> Text=" High severity software error "
|-FunctionDecl 0x5598273b27d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:86:26, /vagrant/ext/zephyros/zephyr/include/fatal.h:52:52> col:20 k_fatal_halt 'void (unsigned int) __attribute__((noreturn))'
| |-ParmVarDecl 0x5598273b2710 <col:33, col:46> col:46 reason 'unsigned int'
| `-FullComment 0x559827476690 <line:45:3, line:50:44>
|   |-ParagraphComment 0x559827476450 <line:45:3>
|   | `-TextComment 0x559827476420 <col:3> Text=" "
|   |-BlockCommandComment 0x559827476470 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5598274764d0 <col:10, col:42>
|   |   `-TextComment 0x5598274764a0 <col:10, col:42> Text=" Halt the system on a fatal error"
|   |-ParagraphComment 0x559827476540 <line:47:3, line:48:76>
|   | |-TextComment 0x5598274764f0 <line:47:3, col:72> Text=" Invokes architecture-specific code to power off or halt the system in"
|   | `-TextComment 0x559827476510 <line:48:3, col:76> Text=" a low power state. Lacking that, lock interrupts and sit in an idle loop."
|   |-ParagraphComment 0x559827476590 <line:50:3>
|   | `-TextComment 0x559827476560 <col:3> Text=" "
|   `-ParamCommandComment 0x5598274765b0 <col:4, col:44> [in] implicitly Param="reason" ParamIndex=0
|     `-ParagraphComment 0x559827476640 <col:17, col:44>
|       `-TextComment 0x559827476610 <col:17, col:44> Text=" Fatal exception reason code"
|-FunctionDecl 0x5598273b2a10 <line:83:1, col:76> col:6 invalid k_sys_fatal_error_handler 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x5598273b28c0 <col:32, col:45> col:45 reason 'unsigned int'
| |-ParmVarDecl 0x5598273b2938 <col:53, col:73> col:73 invalid esf 'const int *'
| `-FullComment 0x559827476d70 <line:55:3, line:81:71>
|   |-ParagraphComment 0x559827476730 <line:55:3>
|   | `-TextComment 0x559827476700 <col:3> Text=" "
|   |-BlockCommandComment 0x559827476750 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5598274767b0 <col:10, col:36>
|   |   `-TextComment 0x559827476780 <col:10, col:36> Text=" Fatal error policy handler"
|   |-ParagraphComment 0x559827476820 <line:57:3, line:58:67>
|   | |-TextComment 0x5598274767d0 <line:57:3, col:73> Text=" This function is not invoked by application code, but is declared as a"
|   | `-TextComment 0x5598274767f0 <line:58:3, col:67> Text=" weak symbol so that applications may introduce their own policy."
|   |-ParagraphComment 0x5598274768c0 <line:60:3, line:62:71>
|   | |-TextComment 0x559827476840 <line:60:3, col:63> Text=" The default implementation of this function halts the system"
|   | |-TextComment 0x559827476860 <line:61:3, col:66> Text=" unconditionally. Depending on architecture support, this may be"
|   | `-TextComment 0x559827476880 <line:62:3, col:71> Text=" a simple infinite loop, power off the hardware, or exit an emulator."
|   |-ParagraphComment 0x559827476930 <line:64:3, line:65:11>
|   | |-TextComment 0x5598274768e0 <line:64:3, col:72> Text=" If this function returns, then the currently executing thread will be"
|   | `-TextComment 0x559827476900 <line:65:3, col:11> Text=" aborted."
|   |-ParagraphComment 0x559827476980 <line:67:3, col:42>
|   | `-TextComment 0x559827476950 <col:3, col:42> Text=" A few notes for custom implementations:"
|   |-ParagraphComment 0x559827476b10 <line:69:3, line:77:23>
|   | |-TextComment 0x5598274769a0 <line:69:3, col:74> Text=" - If the error is determined to be unrecoverable, LOG_PANIC() should be"
|   | |-TextComment 0x5598274769c0 <line:70:3, col:50> Text="   invoked to flush any pending logging buffers."
|   | |-TextComment 0x5598274769e0 <line:71:3, col:76> Text=" - K_ERR_KERNEL_PANIC indicates a severe unrecoverable error in the kernel"
|   | |-TextComment 0x559827476a00 <line:72:3, col:76> Text="   itself, and should not be considered recoverable. There is an assertion"
|   | |-TextComment 0x559827476a20 <line:73:3, col:40> Text="   in z_fatal_error() to enforce this."
|   | |-TextComment 0x559827476a40 <line:74:3, col:76> Text=" - Even outside of a kernel panic, unless the fault occurred in user mode,"
|   | |-TextComment 0x559827476a60 <line:75:3, col:73> Text="   the kernel itself may be in an inconsistent state, with API calls to"
|   | |-TextComment 0x559827476a80 <line:76:3, col:72> Text="   kernel objects possibly exhibiting undefined behavior or triggering"
|   | `-TextComment 0x559827476aa0 <line:77:3, col:23> Text="   another exception."
|   |-ParagraphComment 0x559827476b60 <line:79:3>
|   | `-TextComment 0x559827476b30 <col:3> Text=" "
|   |-ParamCommandComment 0x559827476b80 <col:4, line:80:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x559827476c30 <line:79:17, line:80:3>
|   |   |-TextComment 0x559827476be0 <line:79:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x559827476c00 <line:80:3> Text=" "
|   `-ParamCommandComment 0x559827476c50 <col:4, line:81:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x559827476d00 <line:80:14, line:81:71>
|       |-TextComment 0x559827476cb0 <line:80:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x559827476cd0 <line:81:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x5598273b2c08 <line:99:1, col:64> col:6 invalid z_fatal_error 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x5598273b2b00 <col:20, col:33> col:33 reason 'unsigned int'
| |-ParmVarDecl 0x5598273b2b78 <col:41, col:61> col:61 invalid esf 'const int *'
| `-FullComment 0x559827477160 <line:86:3, line:97:71>
|   |-ParagraphComment 0x559827476e10 <line:86:3, col:50>
|   | `-TextComment 0x559827476de0 <col:3, col:50> Text=" Called by architecture code upon a fatal error."
|   |-ParagraphComment 0x559827476eb0 <line:88:3, line:90:31>
|   | |-TextComment 0x559827476e30 <line:88:3, col:76> Text=" This function dumps out architecture-agnostic information about the error"
|   | |-TextComment 0x559827476e50 <line:89:3, col:61> Text=" and then makes a policy decision on what to do by invoking"
|   | `-TextComment 0x559827476e70 <line:90:3, col:31> Text=" k_sys_fatal_error_handler()."
|   |-ParagraphComment 0x559827476f20 <line:92:3, line:93:24>
|   | |-TextComment 0x559827476ed0 <line:92:3, col:71> Text=" On architectures where k_thread_abort() never returns, this function"
|   | `-TextComment 0x559827476ef0 <line:93:3, col:24> Text=" never returns either."
|   |-ParagraphComment 0x559827476f70 <line:95:3>
|   | `-TextComment 0x559827476f40 <col:3> Text=" "
|   |-ParamCommandComment 0x559827476f90 <col:4, line:96:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x559827477040 <line:95:17, line:96:3>
|   |   |-TextComment 0x559827476ff0 <line:95:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x559827477010 <line:96:3> Text=" "
|   `-ParamCommandComment 0x559827477060 <col:4, line:97:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x559827477110 <line:96:14, line:97:71>
|       |-TextComment 0x5598274770c0 <line:96:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x5598274770e0 <line:97:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x5598273b6540 </vagrant/ext/zephyros/zephyr/include/irq.h:66:1, line:73:1> line:67:1 irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' static inline
| |-ParmVarDecl 0x5598273b6220 <col:21, col:34> col:34 used irq 'unsigned int'
| |-ParmVarDecl 0x5598273b6298 <col:39, col:52> col:52 used priority 'unsigned int'
| |-ParmVarDecl 0x5598273b63a8 <line:68:7, col:38> col:14 used routine 'void (*)(void *)'
| |-ParmVarDecl 0x5598273b6420 <col:41, col:47> col:47 used parameter 'void *'
| |-ParmVarDecl 0x5598273b6490 <line:69:7, col:13> col:13 used flags 'u32_t':'unsigned int'
| |-CompoundStmt 0x5598273b6a88 <line:70:1, line:73:1>
| | `-ReturnStmt 0x5598273b6838 <line:71:2, line:72:11>
| |   `-CallExpr 0x5598273b6770 <line:71:9, line:72:11> 'int'
| |     |-ImplicitCastExpr 0x5598273b6758 <line:71:9> 'int (*)(unsigned int, unsigned int, void (*)(void *), void *, u32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5598273b6608 <col:9> 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' Function 0x55982738ae48 'arch_irq_connect_dynamic' 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |     |-ImplicitCastExpr 0x5598273b67c0 <col:34> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x5598273b6630 <col:34> 'unsigned int' lvalue ParmVar 0x5598273b6220 'irq' 'unsigned int'
| |     |-ImplicitCastExpr 0x5598273b67d8 <col:39> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x5598273b6658 <col:39> 'unsigned int' lvalue ParmVar 0x5598273b6298 'priority' 'unsigned int'
| |     |-ImplicitCastExpr 0x5598273b67f0 <col:49> 'void (*)(void *)' <LValueToRValue>
| |     | `-DeclRefExpr 0x5598273b6680 <col:49> 'void (*)(void *)' lvalue ParmVar 0x5598273b63a8 'routine' 'void (*)(void *)'
| |     |-ImplicitCastExpr 0x5598273b6808 <col:58> 'void *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5598273b66a8 <col:58> 'void *' lvalue ParmVar 0x5598273b6420 'parameter' 'void *'
| |     `-ImplicitCastExpr 0x5598273b6820 <line:72:6> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-DeclRefExpr 0x5598273b66d0 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x5598273b6490 'flags' 'u32_t':'unsigned int'
| `-FullComment 0x5598274777d0 <line:54:3, line:64:48>
|   |-ParagraphComment 0x559827477200 <line:54:3, col:33>
|   | `-TextComment 0x5598274771d0 <col:3, col:33> Text=" Configure a dynamic interrupt."
|   |-ParagraphComment 0x559827477250 <line:56:3, col:80>
|   | `-TextComment 0x559827477220 <col:3, col:80> Text=" Use this instead of IRQ_CONNECT() if arguments cannot be known at build time."
|   |-ParagraphComment 0x5598274772a0 <line:58:3>
|   | `-TextComment 0x559827477270 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274772c0 <col:4, line:59:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x559827477370 <line:58:14, line:59:3>
|   |   |-TextComment 0x559827477320 <line:58:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x559827477340 <line:59:3> Text=" "
|   |-ParamCommandComment 0x559827477390 <col:4, line:60:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x559827477440 <line:59:19, line:60:3>
|   |   |-TextComment 0x5598274773f0 <line:59:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x559827477410 <line:60:3> Text=" "
|   |-ParamCommandComment 0x559827477460 <col:4, line:61:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x559827477510 <line:60:18, line:61:3>
|   |   |-TextComment 0x5598274774c0 <line:60:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x5598274774e0 <line:61:3> Text=" "
|   |-ParamCommandComment 0x559827477530 <col:4, line:62:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x5598274775e0 <line:61:20, line:62:3>
|   |   |-TextComment 0x559827477590 <line:61:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x5598274775b0 <line:62:3> Text=" "
|   |-ParamCommandComment 0x559827477600 <col:4, col:53> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x559827477690 <col:16, col:53>
|   |   `-TextComment 0x559827477660 <col:16, col:53> Text=" Arch-specific IRQ configuration flags"
|   |-ParagraphComment 0x5598274776e0 <line:64:3>
|   | `-TextComment 0x5598274776b0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827477700 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x559827477760 <col:11, col:48>
|       `-TextComment 0x559827477730 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x5598273b6b68 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/sys/errno_private.h:28:28> col:16 z_errno 'int *(void)' static inline
| `-FullComment 0x5598274779f0 <line:21:3, line:26:59>
|   |-ParagraphComment 0x559827477870 <line:21:3, col:57>
|   | `-TextComment 0x559827477840 <col:3, col:57> Text=" return a pointer to a memory location containing errno"
|   |-ParagraphComment 0x5598274778e0 <line:23:3, line:24:52>
|   | |-TextComment 0x559827477890 <line:23:3, col:69> Text=" errno is thread-specific, and can't just be a global. This pointer"
|   | `-TextComment 0x5598274778b0 <line:24:3, col:52> Text=" is guaranteed to be read/writable from user mode."
|   |-ParagraphComment 0x559827477930 <line:26:3>
|   | `-TextComment 0x559827477900 <col:3> Text=" "
|   `-BlockCommandComment 0x559827477950 <col:4, col:59> Name="return"
|     `-ParagraphComment 0x5598274779b0 <col:11, col:59>
|       `-TextComment 0x559827477980 <col:11, col:59> Text=" Memory location of errno data for current thread"
|-FunctionDecl 0x5598273b6c60 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:24:1, col:29> col:14 used z_impl_z_errno 'int *()' extern
|-FunctionDecl 0x5598273b6d28 prev 0x5598273b6b68 <line:25:1, line:34:1> line:25:21 z_errno 'int *(void)' static inline
| `-CompoundStmt 0x5598273b7018 <line:26:1, line:34:1>
|   |-DoStmt 0x5598273b6f20 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5598273b6ee8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5598273b6e98 <col:2, col:39>
|   | `-IntegerLiteral 0x5598273b6f00 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5598273b6fd8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:33:2, col:24>
|     `-CallExpr 0x5598273b6fb0 <col:9, col:24> 'int *'
|       `-ImplicitCastExpr 0x5598273b6f98 <col:9> 'int *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5598273b6f40 <col:9> 'int *()' Function 0x5598273b6c60 'z_impl_z_errno' 'int *()'
|-RecordDecl 0x5598273b7038 </vagrant/ext/zephyros/zephyr/include/kernel.h:91:9, line:93:1> line:91:9 struct definition
| `-FieldDecl 0x5598273b70f0 <line:92:2, col:14> col:14 waitq 'sys_dlist_t':'struct _dnode'
|-TypedefDecl 0x5598273c1b10 <line:91:1, line:93:3> col:3 referenced _wait_q_t 'struct _wait_q_t':'_wait_q_t'
| `-ElaboratedType 0x5598273b7140 'struct _wait_q_t' sugar
|   `-RecordType 0x5598273b70c0 '_wait_q_t'
|     `-Record 0x5598273b7038 ''
|-RecordDecl 0x5598273c1b80 prev 0x559827385a58 <line:120:1, col:8> col:8 struct k_thread
|-RecordDecl 0x5598273c1c08 <line:121:1, col:8> col:8 struct k_mutex
|-RecordDecl 0x5598273c1cb0 <line:122:1, col:8> col:8 struct k_sem
|-RecordDecl 0x5598273c1d60 <line:123:1, col:8> col:8 struct k_msgq
|-RecordDecl 0x5598273c1e10 <line:124:1, col:8> col:8 struct k_mbox
|-RecordDecl 0x5598273c1ec0 <line:125:1, col:8> col:8 struct k_pipe
|-RecordDecl 0x5598273c1f70 <line:126:1, col:8> col:8 struct k_queue
|-RecordDecl 0x5598273c2020 <line:127:1, col:8> col:8 struct k_fifo
|-RecordDecl 0x5598273c20d0 <line:128:1, col:8> col:8 struct k_lifo
|-RecordDecl 0x5598273c2180 <line:129:1, col:8> col:8 struct k_stack
|-RecordDecl 0x5598273c2230 <line:130:1, col:8> col:8 struct k_mem_slab
|-RecordDecl 0x5598273c22e0 <line:131:1, col:8> col:8 struct k_mem_pool
|-RecordDecl 0x5598273c2390 <line:132:1, col:8> col:8 struct k_timer
|-RecordDecl 0x5598273c2440 <line:133:1, col:8> col:8 struct k_poll_event
|-RecordDecl 0x5598273c24f0 <line:134:1, col:8> col:8 struct k_poll_signal
|-RecordDecl 0x5598273c25a0 prev 0x559827385ae0 <line:135:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x5598273c2628 <line:136:1, col:8> col:8 struct k_mem_partition
|-RecordDecl 0x5598273c26d0 <line:137:1, col:8> col:8 struct k_futex
|-EnumDecl 0x5598273c27a8 <line:146:1, line:160:1> line:146:6 k_objects
| |-FullComment 0x559827477bf0 <line:140:3, line:144:33>
| | |-ParagraphComment 0x559827477a90 <line:140:3>
| | | `-TextComment 0x559827477a60 <col:3> Text=" "
| | |-BlockCommandComment 0x559827477ab0 <col:4, col:29> Name="brief"
| | | `-ParagraphComment 0x559827477b10 <col:10, col:29>
| | |   `-TextComment 0x559827477ae0 <col:10, col:29> Text=" Kernel Object Types"
| | `-ParagraphComment 0x559827477bb0 <line:142:3, line:144:33>
| |   |-TextComment 0x559827477b30 <line:142:3, col:77> Text=" This enumeration needs to be kept in sync with the lists of kernel objects"
| |   |-TextComment 0x559827477b50 <line:143:3, col:79> Text=" and subsystems in scripts/gen_kobject_list.py, as well as the otype_to_str()"
| |   `-TextComment 0x559827477b70 <line:144:3, col:33> Text=" function in kernel/userspace.c"
| |-EnumConstantDecl 0x5598273c2860 <line:147:2> col:2 K_OBJ_ANY 'int'
| |-EnumConstantDecl 0x5598273c28d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/kobj-types-enum.h:2:1> col:1 K_OBJ_MEM_SLAB 'int'
| |-EnumConstantDecl 0x5598273c2920 <line:3:1> col:1 K_OBJ_MSGQ 'int'
| |-EnumConstantDecl 0x5598273c2968 <line:4:1> col:1 K_OBJ_MUTEX 'int'
| |-EnumConstantDecl 0x5598273c29b0 <line:5:1> col:1 K_OBJ_PIPE 'int'
| |-EnumConstantDecl 0x5598273c29f8 <line:6:1> col:1 K_OBJ_QUEUE 'int'
| |-EnumConstantDecl 0x5598273c2a40 <line:7:1> col:1 K_OBJ_POLL_SIGNAL 'int'
| |-EnumConstantDecl 0x5598273c2a88 <line:8:1> col:1 K_OBJ_SEM 'int'
| |-EnumConstantDecl 0x5598273c4df0 <line:9:1> col:1 K_OBJ_STACK 'int'
| |-EnumConstantDecl 0x5598273c4e38 <line:10:1> col:1 K_OBJ_THREAD 'int'
| |-EnumConstantDecl 0x5598273c4e80 <line:11:1> col:1 K_OBJ_TIMER 'int'
| |-EnumConstantDecl 0x5598273c4ec8 <line:12:1> col:1 K_OBJ__THREAD_STACK_ELEMENT 'int'
| |-EnumConstantDecl 0x5598273c4f10 <line:13:1> col:1 K_OBJ_SYS_MUTEX 'int'
| |-EnumConstantDecl 0x5598273c4f58 <line:14:1> col:1 K_OBJ_FUTEX 'int'
| |-EnumConstantDecl 0x5598273c4fa0 <line:16:1> col:1 K_OBJ_DRIVER_ADC 'int'
| |-EnumConstantDecl 0x5598273c4fe8 <line:17:1> col:1 K_OBJ_DRIVER_AIO_CMP 'int'
| |-EnumConstantDecl 0x5598273c5030 <line:18:1> col:1 K_OBJ_DRIVER_COUNTER 'int'
| |-EnumConstantDecl 0x5598273c5078 <line:19:1> col:1 K_OBJ_DRIVER_CRYPTO 'int'
| |-EnumConstantDecl 0x5598273c50c0 <line:20:1> col:1 K_OBJ_DRIVER_DMA 'int'
| |-EnumConstantDecl 0x5598273c5108 <line:21:1> col:1 K_OBJ_DRIVER_FLASH 'int'
| |-EnumConstantDecl 0x5598273c5150 <line:22:1> col:1 K_OBJ_DRIVER_GPIO 'int'
| |-EnumConstantDecl 0x5598273c5198 <line:23:1> col:1 K_OBJ_DRIVER_I2C 'int'
| |-EnumConstantDecl 0x5598273c51e0 <line:24:1> col:1 K_OBJ_DRIVER_I2S 'int'
| |-EnumConstantDecl 0x5598273c5228 <line:25:1> col:1 K_OBJ_DRIVER_IPM 'int'
| |-EnumConstantDecl 0x5598273c5270 <line:26:1> col:1 K_OBJ_DRIVER_LED 'int'
| |-EnumConstantDecl 0x5598273c52b8 <line:27:1> col:1 K_OBJ_DRIVER_PINMUX 'int'
| |-EnumConstantDecl 0x5598273c5300 <line:28:1> col:1 K_OBJ_DRIVER_PWM 'int'
| |-EnumConstantDecl 0x5598273c5348 <line:29:1> col:1 K_OBJ_DRIVER_ENTROPY 'int'
| |-EnumConstantDecl 0x5598273c5390 <line:30:1> col:1 K_OBJ_DRIVER_SENSOR 'int'
| |-EnumConstantDecl 0x5598273c53d8 <line:31:1> col:1 K_OBJ_DRIVER_SPI 'int'
| |-EnumConstantDecl 0x5598273c5420 <line:32:1> col:1 K_OBJ_DRIVER_UART 'int'
| |-EnumConstantDecl 0x5598273c5468 <line:33:1> col:1 K_OBJ_DRIVER_CAN 'int'
| |-EnumConstantDecl 0x5598273c54b0 <line:34:1> col:1 K_OBJ_DRIVER_PTP_CLOCK 'int'
| |-EnumConstantDecl 0x5598273c54f8 <line:35:1> col:1 K_OBJ_DRIVER_EEPROM 'int'
| |-EnumConstantDecl 0x5598273c5540 <line:36:1> col:1 K_OBJ_DRIVER_WDT 'int'
| |-EnumConstantDecl 0x5598273c5588 <line:37:1> col:1 K_OBJ_DRIVER_SAMPLE 'int'
| `-EnumConstantDecl 0x5598273c55f8 </vagrant/ext/zephyros/zephyr/include/kernel.h:159:2> col:2 K_OBJ_LAST 'int'
|   `-FullComment 0x559827477d30 <line:156:5, col:13>
|     `-ParagraphComment 0x559827477d00 <col:5, col:13>
|       |-TextComment 0x559827477c60 <col:5> Text=" "
|       `-InlineCommandComment 0x559827477cd0 <col:6, col:13> Name="endcond" RenderNormal
|-FunctionDecl 0x5598273c5738 <line:229:1, line:232:1> line:229:20 z_object_init 'void (void *)' static inline
| |-ParmVarDecl 0x5598273c56b0 <col:34, col:40> col:40 used obj 'void *'
| |-CompoundStmt 0x5598273c58d8 <line:230:1, line:232:1>
| | `-CStyleCastExpr 0x5598273c5880 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5598273c5868 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x5598273c5848 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x5598273c57e0 </vagrant/ext/zephyros/zephyr/include/kernel.h:231:13> 'void *' lvalue ParmVar 0x5598273c56b0 'obj' 'void *'
| `-FullComment 0x559827477e50 <line:227:3, col:12>
|   `-ParagraphComment 0x559827477e20 <col:3, col:12>
|     |-TextComment 0x559827477da0 <col:3> Text=" "
|     `-InlineCommandComment 0x559827477df0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5598273c5aa0 <line:237:1, line:242:1> line:237:20 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x5598273c5908 <col:49, col:55> col:55 used object 'void *'
| |-ParmVarDecl 0x5598273c5990 <line:238:13, col:30> col:30 used thread 'struct k_thread *'
| |-CompoundStmt 0x5598273c5d08 <line:239:1, line:242:1>
| | |-CStyleCastExpr 0x5598273c5bf0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5598273c5bd8 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x5598273c5bb8 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x5598273c5b50 </vagrant/ext/zephyros/zephyr/include/kernel.h:240:13> 'void *' lvalue ParmVar 0x5598273c5908 'object' 'void *'
| | `-CStyleCastExpr 0x5598273c5cb8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5598273c5ca0 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x5598273c5c80 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x5598273c5c18 </vagrant/ext/zephyros/zephyr/include/kernel.h:241:13> 'struct k_thread *' lvalue ParmVar 0x5598273c5990 'thread' 'struct k_thread *'
| `-FullComment 0x559827477f40 <line:235:3, col:12>
|   `-ParagraphComment 0x559827477f10 <col:3, col:12>
|     |-TextComment 0x559827477ec0 <col:3> Text=" "
|     `-InlineCommandComment 0x559827477ee0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5598273c73a0 <line:247:1, line:252:1> line:247:20 k_object_access_revoke 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x5598273c5d40 <col:43, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x5598273c7310 <line:248:8, col:25> col:25 used thread 'struct k_thread *'
| |-CompoundStmt 0x5598273c7608 <line:249:1, line:252:1>
| | |-CStyleCastExpr 0x5598273c74f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5598273c74d8 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x5598273c74b8 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x5598273c7450 </vagrant/ext/zephyros/zephyr/include/kernel.h:250:13> 'void *' lvalue ParmVar 0x5598273c5d40 'object' 'void *'
| | `-CStyleCastExpr 0x5598273c75b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5598273c75a0 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x5598273c7580 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x5598273c7518 </vagrant/ext/zephyros/zephyr/include/kernel.h:251:13> 'struct k_thread *' lvalue ParmVar 0x5598273c7310 'thread' 'struct k_thread *'
| `-FullComment 0x559827478030 <line:245:3, col:12>
|   `-ParagraphComment 0x559827478000 <col:3, col:12>
|     |-TextComment 0x559827477fb0 <col:3> Text=" "
|     `-InlineCommandComment 0x559827477fd0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5598273c76c8 <line:257:1, line:260:1> line:257:20 used z_impl_k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x5598273c7640 <col:44, col:50> col:50 used object 'void *'
| |-CompoundStmt 0x5598273c7838 <line:258:1, line:260:1>
| | `-CStyleCastExpr 0x5598273c7810 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5598273c77f8 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x5598273c77d8 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x5598273c7770 </vagrant/ext/zephyros/zephyr/include/kernel.h:259:13> 'void *' lvalue ParmVar 0x5598273c7640 'object' 'void *'
| `-FullComment 0x559827478120 <line:255:3, col:12>
|   `-ParagraphComment 0x5598274780f0 <col:3, col:12>
|     |-TextComment 0x5598274780a0 <col:3> Text=" "
|     `-InlineCommandComment 0x5598274780c0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5598273c78f0 <line:262:1, line:265:1> line:262:20 k_object_access_all_grant 'void (void *)' static inline
| |-ParmVarDecl 0x5598273c7868 <col:46, col:52> col:52 used object 'void *'
| `-CompoundStmt 0x5598273c7a88 <line:263:1, line:265:1>
|   `-CStyleCastExpr 0x5598273c7a38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|     `-ImplicitCastExpr 0x5598273c7a20 <col:29, col:31> 'void *' <LValueToRValue>
|       `-ParenExpr 0x5598273c7a00 <col:29, col:31> 'void *' lvalue
|         `-DeclRefExpr 0x5598273c7998 </vagrant/ext/zephyros/zephyr/include/kernel.h:264:13> 'void *' lvalue ParmVar 0x5598273c7868 'object' 'void *'
|-FunctionDecl 0x5598273c7bd0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:279:75> col:16 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x5598273c7ab8 <col:38, col:44> col:44 object 'void *'
| |-ParmVarDecl 0x5598273c7b40 <col:52, col:69> col:69 thread 'struct k_thread *'
| `-FullComment 0x559827478480 <line:270:3, line:277:53>
|   |-ParagraphComment 0x5598274781c0 <line:270:3, col:43>
|   | `-TextComment 0x559827478190 <col:3, col:43> Text=" Grant a thread access to a kernel object"
|   |-ParagraphComment 0x559827478260 <line:272:3, line:274:67>
|   | |-TextComment 0x5598274781e0 <line:272:3, col:72> Text=" The thread will be granted access to the object if the caller is from"
|   | |-TextComment 0x559827478200 <line:273:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x559827478220 <line:274:3, col:67> Text=" on both the object and the thread whose access is being granted."
|   |-ParagraphComment 0x5598274782b0 <line:276:3>
|   | `-TextComment 0x559827478280 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274782d0 <col:4, line:277:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x559827478380 <line:276:17, line:277:3>
|   |   |-TextComment 0x559827478330 <line:276:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x559827478350 <line:277:3> Text=" "
|   `-ParamCommandComment 0x5598274783a0 <col:4, col:53> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x559827478430 <col:17, col:53>
|       `-TextComment 0x559827478400 <col:17, col:53> Text=" Thread to grant access to the object"
|-FunctionDecl 0x5598273c7dd8 prev 0x5598273c73a0 <line:291:1, col:66> col:6 k_object_access_revoke 'void (void *, struct k_thread *)'
| |-ParmVarDecl 0x5598273c7cc0 <col:29, col:35> col:35 object 'void *'
| |-ParmVarDecl 0x5598273c7d48 <col:43, col:60> col:60 thread 'struct k_thread *'
| `-FullComment 0x5598274787e0 <line:282:3, line:289:54>
|   |-ParagraphComment 0x559827478520 <line:282:3, col:46>
|   | `-TextComment 0x5598274784f0 <col:3, col:46> Text=" Revoke a thread's access to a kernel object"
|   |-ParagraphComment 0x5598274785c0 <line:284:3, line:286:67>
|   | |-TextComment 0x559827478540 <line:284:3, col:66> Text=" The thread will lose access to the object if the caller is from"
|   | |-TextComment 0x559827478560 <line:285:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x559827478580 <line:286:3, col:67> Text=" on both the object and the thread whose access is being revoked."
|   |-ParagraphComment 0x559827478610 <line:288:3>
|   | `-TextComment 0x5598274785e0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827478630 <col:4, line:289:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x5598274786e0 <line:288:17, line:289:3>
|   |   |-TextComment 0x559827478690 <line:288:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x5598274786b0 <line:289:3> Text=" "
|   `-ParamCommandComment 0x559827478700 <col:4, col:54> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x559827478790 <col:17, col:54>
|       `-TextComment 0x559827478760 <col:17, col:54> Text=" Thread to remove access to the object"
|-FunctionDecl 0x5598273c7f58 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:302:45> col:16 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x5598273c7ed0 <col:33, col:39> col:39 object 'void *'
| `-FullComment 0x559827478b10 <line:294:3, line:301:1>
|   |-ParagraphComment 0x559827478880 <line:294:3>
|   | `-TextComment 0x559827478850 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274788a0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x559827478900 <col:10, col:27>
|   |   `-TextComment 0x5598274788d0 <col:10, col:27> Text=" Release an object"
|   |-ParagraphComment 0x559827478970 <line:296:3, line:297:72>
|   | |-TextComment 0x559827478920 <line:296:3, col:64> Text=" Allows user threads to drop their own permission on an object"
|   | `-TextComment 0x559827478940 <line:297:3, col:72> Text=" Their permissions are automatically cleared when a thread terminates."
|   |-ParagraphComment 0x5598274789c0 <line:299:3>
|   | `-TextComment 0x559827478990 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274789e0 <col:4, col:42> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x559827478a70 <col:17, col:42>
|   |   `-TextComment 0x559827478a40 <col:17, col:42> Text=" The object to be released"
|   `-ParagraphComment 0x559827478ac0 <line:301:1>
|     `-TextComment 0x559827478a90 <col:1> Text=" "
|-FunctionDecl 0x5598273c80c8 prev 0x5598273c78f0 <line:321:1, col:44> col:6 k_object_access_all_grant 'void (void *)'
| |-ParmVarDecl 0x5598273c8040 <col:32, col:38> col:38 object 'void *'
| `-FullComment 0x559827478ed0 <line:305:3, line:319:41>
|   |-ParagraphComment 0x559827478bb0 <line:305:3, col:59>
|   | `-TextComment 0x559827478b80 <col:3, col:59> Text=" Grant all present and future threads access to an object"
|   |-ParagraphComment 0x559827478c70 <line:307:3, line:310:59>
|   | |-TextComment 0x559827478bd0 <line:307:3, col:77> Text=" If the caller is from supervisor mode, or the caller is from user mode and"
|   | |-TextComment 0x559827478bf0 <line:308:3, col:72> Text=" have sufficient permissions on the object, then that object will have"
|   | |-TextComment 0x559827478c10 <line:309:3, col:76> Text=" permissions granted to it for *all* current and future threads running in"
|   | `-TextComment 0x559827478c30 <line:310:3, col:59> Text=" the system, effectively becoming a public kernel object."
|   |-ParagraphComment 0x559827478d10 <line:312:3, line:314:43>
|   | |-TextComment 0x559827478c90 <line:312:3, col:79> Text=" Use of this API should be avoided on systems that are running untrusted code"
|   | |-TextComment 0x559827478cb0 <line:313:3, col:76> Text=" as it is possible for such code to derive the addresses of kernel objects"
|   | `-TextComment 0x559827478cd0 <line:314:3, col:43> Text=" and perform unwanted operations on them."
|   |-ParagraphComment 0x559827478d80 <line:316:3, line:317:25>
|   | |-TextComment 0x559827478d30 <line:316:3, col:75> Text=" It is not possible to revoke permissions on public objects; once public,"
|   | `-TextComment 0x559827478d50 <line:317:3, col:25> Text=" any thread may use it."
|   |-ParagraphComment 0x559827478dd0 <line:319:3>
|   | `-TextComment 0x559827478da0 <col:3> Text=" "
|   `-ParamCommandComment 0x559827478df0 <col:4, col:41> [in] implicitly Param="object" ParamIndex=0
|     `-ParagraphComment 0x559827478e80 <col:17, col:41>
|       `-TextComment 0x559827478e50 <col:17, col:41> Text=" Address of kernel object"
|-FunctionDecl 0x5598273c8320 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:337:52> col:17 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x5598273c81f0 <col:32, col:47> col:47 otype 'enum k_objects':'enum k_objects'
| `-FullComment 0x559827479290 <line:324:3, line:335:12>
|   |-ParagraphComment 0x559827478f70 <line:324:3, col:48>
|   | `-TextComment 0x559827478f40 <col:3, col:48> Text=" Allocate a kernel object of a designated type"
|   |-ParagraphComment 0x559827479030 <line:326:3, line:329:78>
|   | |-TextComment 0x559827478f90 <line:326:3, col:74> Text=" This will instantiate at runtime a kernel object of the specified type,"
|   | |-TextComment 0x559827478fb0 <line:327:3, col:77> Text=" returning a pointer to it. The object will be returned in an uninitialized"
|   | |-TextComment 0x559827478fd0 <line:328:3, col:76> Text=" state, with the calling thread being granted permission on it. The memory"
|   | `-TextComment 0x559827478ff0 <line:329:3, col:78> Text=" for the object will be allocated out of the calling thread's resource pool."
|   |-ParagraphComment 0x559827479080 <line:331:3, col:59>
|   | `-TextComment 0x559827479050 <col:3, col:59> Text=" Currently, allocation of thread stacks is not supported."
|   |-ParagraphComment 0x5598274790d0 <line:333:3>
|   | `-TextComment 0x5598274790a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274790f0 <col:4, line:334:3> [in] implicitly Param="otype" ParamIndex=0
|   | `-ParagraphComment 0x5598274791a0 <line:333:16, line:334:3>
|   |   |-TextComment 0x559827479150 <line:333:16, col:44> Text=" Requested kernel object type"
|   |   `-TextComment 0x559827479170 <line:334:3> Text=" "
|   `-BlockCommandComment 0x5598274791c0 <col:4, line:335:12> Name="return"
|     `-ParagraphComment 0x559827479240 <line:334:11, line:335:12>
|       |-TextComment 0x5598274791f0 <line:334:11, col:77> Text=" A pointer to the allocated kernel object, or NULL if memory wasn't"
|       `-TextComment 0x559827479210 <line:335:3, col:12> Text=" available"
|-FunctionDecl 0x5598273c8478 <line:352:1, line:357:1> line:352:21 used z_impl_k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x5598273c83e8 <col:43, col:58> col:58 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x5598273c86a8 <line:353:1, line:357:1>
|   |-CStyleCastExpr 0x5598273c85c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|   | `-ImplicitCastExpr 0x5598273c85a8 <col:29, col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|   |   `-ParenExpr 0x5598273c8588 <col:29, col:31> 'enum k_objects':'enum k_objects' lvalue
|   |     `-DeclRefExpr 0x5598273c8520 </vagrant/ext/zephyros/zephyr/include/kernel.h:354:13> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x5598273c83e8 'otype' 'enum k_objects':'enum k_objects'
|   `-ReturnStmt 0x5598273c8668 <line:356:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ParenExpr 0x5598273c8648 <col:14, col:24> 'void *'
|       `-CStyleCastExpr 0x5598273c8620 <col:15, col:23> 'void *' <NullToPointer>
|         `-IntegerLiteral 0x5598273c85e8 <col:23> 'int' 0
|-FunctionDecl 0x5598273c8768 </vagrant/ext/zephyros/zephyr/include/kernel.h:363:1, line:366:1> line:363:20 k_obj_free 'void (void *)' static inline
| |-ParmVarDecl 0x5598273c86e0 <col:31, col:37> col:37 used obj 'void *'
| |-CompoundStmt 0x5598273c8908 <line:364:1, line:366:1>
| | `-CStyleCastExpr 0x5598273c88b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5598273c8898 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x5598273c8878 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x5598273c8810 </vagrant/ext/zephyros/zephyr/include/kernel.h:365:13> 'void *' lvalue ParmVar 0x5598273c86e0 'obj' 'void *'
| `-FullComment 0x5598274794f0 <line:359:3, line:362:1>
|   |-ParagraphComment 0x559827479330 <line:359:3>
|   | `-TextComment 0x559827479300 <col:3> Text=" "
|   |-BlockCommandComment 0x559827479350 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x5598274793b0 <col:10, col:24>
|   |   `-TextComment 0x559827479380 <col:10, col:24> Text=" Free an object"
|   |-ParagraphComment 0x559827479400 <line:361:3>
|   | `-TextComment 0x5598274793d0 <col:3> Text=" "
|   `-ParamCommandComment 0x559827479420 <col:4, line:362:1> [in] implicitly Param="obj" ParamIndex=0
|     `-ParagraphComment 0x5598274794b0 <col:1>
|       `-TextComment 0x559827479480 <col:1> Text=" "
|-RecordDecl 0x5598273c8920 prev 0x559827385b90 <line:387:1, line:389:1> line:387:17 struct _k_thread_stack_element definition
| |-PackedAttr 0x5598273c89a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:168:40>
| `-FieldDecl 0x5598273c8a00 </vagrant/ext/zephyros/zephyr/include/kernel.h:388:2, col:7> col:7 data 'char'
|-RecordDecl 0x5598273c8aa8 <line:427:1, line:503:1> line:427:8 struct _thread_base definition
| |-RecordDecl 0x5598273c8b50 <line:430:2, line:433:2> line:430:2 union definition
| | |-FieldDecl 0x5598273c8c10 <line:431:3, col:15> col:15 qnode_dlist 'sys_dnode_t':'struct _dnode'
| | `-FieldDecl 0x5598273c8c78 <line:432:3, col:17> col:17 qnode_rb 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x5598273c8d10 <line:430:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| |-IndirectFieldDecl 0x5598273c8d68 <line:431:15> col:15 implicit qnode_dlist 'sys_dnode_t':'struct _dnode'
| | |-Field 0x5598273c8d10 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x5598273c8c10 'qnode_dlist' 'sys_dnode_t':'struct _dnode'
| |-IndirectFieldDecl 0x5598273c8db8 <line:432:17> col:17 implicit qnode_rb 'struct rbnode':'struct rbnode'
| | |-Field 0x5598273c8d10 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x5598273c8c78 'qnode_rb' 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x5598273c8e88 <line:438:2, col:13> col:13 pended_on '_wait_q_t *'
| |-FieldDecl 0x5598273c8ee0 <line:441:2, col:7> col:7 user_options 'u8_t':'unsigned char'
| |-FieldDecl 0x5598273c8f38 <line:444:2, col:7> col:7 thread_state 'u8_t':'unsigned char'
| |-RecordDecl 0x5598273c8f80 <line:460:2, line:471:2> line:460:2 union definition
| | |-RecordDecl 0x5598273c9030 <line:461:3, line:469:3> line:461:3 struct definition
| | | |-FieldDecl 0x5598273c90f0 <line:466:4, col:9> col:9 prio 's8_t':'signed char'
| | | `-FieldDecl 0x5598273c9148 <line:467:4, col:9> col:9 sched_locked 'u8_t':'unsigned char'
| | |-FieldDecl 0x5598273c91e0 <line:461:3> col:3 implicit 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | |-IndirectFieldDecl 0x5598273c9238 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | | |-Field 0x5598273c91e0 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x5598273c90f0 'prio' 's8_t':'signed char'
| | |-IndirectFieldDecl 0x5598273c9288 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | | |-Field 0x5598273c91e0 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x5598273c9148 'sched_locked' 'u8_t':'unsigned char'
| | `-FieldDecl 0x5598273c92d8 <line:470:3, col:9> col:9 preempt 'u16_t':'unsigned short'
| |-FieldDecl 0x559827381df0 <line:460:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| |-IndirectFieldDecl 0x559827381e50 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | |-Field 0x559827381df0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x5598273c91e0 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x5598273c90f0 'prio' 's8_t':'signed char'
| |-IndirectFieldDecl 0x559827381ea8 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | |-Field 0x559827381df0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x5598273c91e0 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x5598273c9148 'sched_locked' 'u8_t':'unsigned char'
| |-IndirectFieldDecl 0x559827381ef8 <line:470:9> col:9 implicit preempt 'u16_t':'unsigned short'
| | |-Field 0x559827381df0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | `-Field 0x5598273c92d8 'preempt' 'u16_t':'unsigned short'
| |-FieldDecl 0x559827381f48 <line:477:2, col:8> col:8 order_key 'u32_t':'unsigned int'
| `-FieldDecl 0x559827381fa8 <line:497:2, col:8> col:8 swap_data 'void *'
|-TypedefDecl 0x5598273820e0 <line:505:1, col:29> col:29 _thread_base_t 'struct _thread_base':'struct _thread_base'
| `-ElaboratedType 0x559827382090 'struct _thread_base' sugar
|   `-RecordType 0x5598273c8b30 'struct _thread_base'
|     `-Record 0x5598273c8aa8 '_thread_base'
|-RecordDecl 0x559827382168 prev 0x5598273c1b80 <line:545:1, line:618:1> line:545:8 invalid struct k_thread definition
| |-FullComment 0x559827479660 <line:542:3, line:543:19>
| | |-ParagraphComment 0x559827479590 <line:542:3>
| | | `-TextComment 0x559827479560 <col:3> Text=" "
| | |-VerbatimLineComment 0x5598274795b0 <col:4, col:24> Text=" thread_apis"
| | `-ParagraphComment 0x559827479620 <line:543:3, col:19>
| |   `-TextComment 0x5598274795f0 <col:3, col:19> Text=" Thread Structure"
| |-FieldDecl 0x559827382210 <line:547:2, col:22> col:22 base 'struct _thread_base':'struct _thread_base'
| |-RecordDecl 0x559827382288 parent 0x55982722a698 <line:550:2, col:9> col:9 struct _callee_saved
| |-FieldDecl 0x559827382390 <col:2, col:23> col:23 invalid callee_saved 'struct _callee_saved':'struct _callee_saved'
| | `-FullComment 0x559827479730 <line:549:5, col:59>
| |   `-ParagraphComment 0x559827479700 <col:5, col:59>
| |     `-TextComment 0x5598274796d0 <col:5, col:59> Text=" defined by the architecture, but all archs need these "
| |-FieldDecl 0x559827382420 <line:553:2, col:8> col:8 init_data 'void *'
| | `-FullComment 0x559827479800 <line:552:5, col:29>
| |   `-ParagraphComment 0x5598274797d0 <col:5, col:29>
| |     `-TextComment 0x5598274797a0 <col:5, col:29> Text=" static thread init data "
| |-FieldDecl 0x5598273825c8 <line:559:2, col:23> col:9 fn_abort 'void (*)(void)'
| | `-FullComment 0x559827479990 <line:556:4, line:558:4>
| |   |-ParagraphComment 0x5598274798c0 <line:556:4, line:557:4>
| |   | |-TextComment 0x559827479870 <line:556:4, col:18> Text=" abort function"
| |   | `-TextComment 0x559827479890 <line:557:4> Text=" "
| |   |-VerbatimLineComment 0x5598274798e0 <col:5, col:22> Text=" K-THREAD-002"
| |   `-ParagraphComment 0x559827479950 <line:558:4>
| |     `-TextComment 0x559827479920 <col:4> Text=" "
| |-FieldDecl 0x5598273826f0 <line:614:2, col:21> col:21 referenced resource_pool 'struct k_mem_pool *'
| | `-FullComment 0x559827479a60 <line:613:5, col:19>
| |   `-ParagraphComment 0x559827479a30 <col:5, col:19>
| |     `-TextComment 0x559827479a00 <col:5, col:19> Text=" resource pool "
| |-RecordDecl 0x559827382768 parent 0x55982722a698 <line:617:2, col:9> col:9 struct _thread_arch
| `-FieldDecl 0x559827382870 <col:2, col:22> col:22 invalid arch 'struct _thread_arch':'struct _thread_arch'
|   `-FullComment 0x559827479b30 <line:616:5, col:47>
|     `-ParagraphComment 0x559827479b00 <col:5, col:47>
|       `-TextComment 0x559827479ad0 <col:5, col:47> Text=" arch-specifics: must always be at the end "
|-TypedefDecl 0x5598273829a0 <line:620:1, col:25> col:25 _thread_t 'struct k_thread':'struct k_thread'
| `-ElaboratedType 0x5598273188a0 'struct k_thread' sugar
|   `-RecordType 0x559827318810 'struct k_thread'
|     `-Record 0x559827382168 'k_thread'
|-TypedefDecl 0x559827382a20 <line:621:1, col:26> col:26 referenced k_tid_t 'struct k_thread *'
| `-PointerType 0x559827318900 'struct k_thread *'
|   `-ElaboratedType 0x5598273188a0 'struct k_thread' sugar
|     `-RecordType 0x559827318810 'struct k_thread'
|       `-Record 0x559827382168 'k_thread'
|-EnumDecl 0x559827382a78 <line:623:1, line:627:1> line:623:6 execution_context_types
| |-EnumConstantDecl 0x559827382b50 <line:624:2, col:10> col:2 K_ISR 'int'
| | `-IntegerLiteral 0x559827382b30 <col:10> 'int' 0
| |-EnumConstantDecl 0x559827382b98 <line:625:2> col:2 K_COOP_THREAD 'int'
| `-EnumConstantDecl 0x559827382be0 <line:626:2> col:2 K_PREEMPT_THREAD 'int'
|-TypedefDecl 0x5598273cc118 <line:634:1, line:635:23> line:634:16 referenced k_thread_user_cb_t 'void (*)(const struct k_thread *, void *)'
| |-PointerType 0x5598273cc0b0 'void (*)(const struct k_thread *, void *)'
| | `-ParenType 0x5598273cc050 'void (const struct k_thread *, void *)' sugar
| |   `-FunctionProtoType 0x5598273cc010 'void (const struct k_thread *, void *)' cdecl
| |     |-BuiltinType 0x55982722a6f0 'void'
| |     |-PointerType 0x559827382c90 'const struct k_thread *'
| |     | `-QualType 0x5598273188a1 'const struct k_thread' const
| |     |   `-ElaboratedType 0x5598273188a0 'struct k_thread' sugar
| |     |     `-RecordType 0x559827318810 'struct k_thread'
| |     |       `-Record 0x559827382168 'k_thread'
| |     `-PointerType 0x55982722ab90 'void *'
| |       `-BuiltinType 0x55982722a6f0 'void'
| `-FullComment 0x559827479d00 <line:630:3, line:631:5>
|   |-ParagraphComment 0x559827479bd0 <line:630:3>
|   | `-TextComment 0x559827479ba0 <col:3> Text=" "
|   |-VerbatimLineComment 0x559827479bf0 <col:4, col:27> Text=" thread_apis"
|   `-ParagraphComment 0x559827479cc0 <line:631:3, col:5>
|     |-TextComment 0x559827479c30 <col:3> Text=" "
|     |-TextComment 0x559827479c50 <col:4> Text="@"
|     `-TextComment 0x559827479c70 <col:5> Text="{"
|-FunctionDecl 0x5598273cc360 <line:654:1, col:73> col:13 k_thread_foreach 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x5598273cc1d0 <col:30, col:49> col:49 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x5598273cc248 <col:58, col:64> col:64 user_data 'void *'
| `-FullComment 0x55982747a410 <line:638:3, line:652:14>
|   |-ParagraphComment 0x559827479da0 <line:638:3>
|   | `-TextComment 0x559827479d70 <col:3> Text=" "
|   |-BlockCommandComment 0x559827479dc0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x559827479e20 <col:10, col:53>
|   |   `-TextComment 0x559827479df0 <col:10, col:53> Text=" Iterate over all the threads in the system."
|   |-ParagraphComment 0x559827479e90 <line:640:3, line:641:46>
|   | |-TextComment 0x559827479e40 <line:640:3, col:63> Text=" This routine iterates over all the threads in the system and"
|   | `-TextComment 0x559827479e60 <line:641:3, col:46> Text=" calls the user_cb function for each thread."
|   |-ParagraphComment 0x559827479ee0 <line:643:3>
|   | `-TextComment 0x559827479eb0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827479f00 <col:4, line:644:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x559827479fb0 <line:643:18, line:644:3>
|   |   |-TextComment 0x559827479f60 <line:643:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x559827479f80 <line:644:3> Text=" "
|   |-ParamCommandComment 0x559827479fd0 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x55982747a060 <col:20, col:41>
|   |   `-TextComment 0x55982747a030 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x55982747a0b0 <line:646:3>
|   | `-TextComment 0x55982747a080 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747a0d0 <col:4, line:648:3> Name="note"
|   | `-ParagraphComment 0x55982747a180 <line:646:9, line:648:3>
|   |   |-TextComment 0x55982747a100 <line:646:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x55982747a120 <line:647:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x55982747a140 <line:648:3> Text=" "
|   |-BlockCommandComment 0x55982747a1a0 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x55982747a200 <col:9, col:23>
|   |   `-TextComment 0x55982747a1d0 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x55982747a220 <col:24, col:71> Text=" k_spin_lock to protect the _kernel.threads"
|   |-ParagraphComment 0x55982747a2b0 <line:649:3, line:650:46>
|   | |-TextComment 0x55982747a260 <line:649:3, col:72> Text=" list which means creation of new threads and terminations of existing"
|   | `-TextComment 0x55982747a280 <line:650:3, col:46> Text=" threads are blocked until this API returns."
|   |-ParagraphComment 0x55982747a300 <line:652:3>
|   | `-TextComment 0x55982747a2d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982747a320 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55982747a380 <col:11, col:14>
|       `-TextComment 0x55982747a350 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273cc550 <line:683:1, line:684:45> line:683:13 k_thread_foreach_unlocked 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x5598273cc448 <line:684:2, col:21> col:21 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x5598273cc4c0 <col:30, col:36> col:36 user_data 'void *'
| `-FullComment 0x55982747af10 <line:657:3, line:681:72>
|   |-ParagraphComment 0x55982747a4b0 <line:657:3>
|   | `-TextComment 0x55982747a480 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747a4d0 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x55982747a530 <col:10, col:69>
|   |   `-TextComment 0x55982747a500 <col:10, col:69> Text=" Iterate over all the threads in the system without locking."
|   |-ParagraphComment 0x55982747a580 <line:659:3, col:44>
|   | `-TextComment 0x55982747a550 <col:3, col:44> Text=" This routine works exactly the same like "
|   |-VerbatimLineComment 0x55982747a5a0 <col:45, col:66> Text=" k_thread_foreach"
|   |-ParagraphComment 0x55982747a610 <line:660:3, col:51>
|   | `-TextComment 0x55982747a5e0 <col:3, col:51> Text=" but unlocks interrupts when user_cb is executed."
|   |-ParagraphComment 0x55982747a660 <line:662:3>
|   | `-TextComment 0x55982747a630 <col:3> Text=" "
|   |-ParamCommandComment 0x55982747a680 <col:4, line:663:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x55982747a730 <line:662:18, line:663:3>
|   |   |-TextComment 0x55982747a6e0 <line:662:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x55982747a700 <line:663:3> Text=" "
|   |-ParamCommandComment 0x55982747a750 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x55982747a7e0 <col:20, col:41>
|   |   `-TextComment 0x55982747a7b0 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x55982747a830 <line:665:3>
|   | `-TextComment 0x55982747a800 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747a850 <col:4, line:667:3> Name="note"
|   | `-ParagraphComment 0x55982747a900 <line:665:9, line:667:3>
|   |   |-TextComment 0x55982747a880 <line:665:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x55982747a8a0 <line:666:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x55982747a8c0 <line:667:3> Text=" "
|   |-BlockCommandComment 0x55982747a920 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x55982747a980 <col:9, col:23>
|   |   `-TextComment 0x55982747a950 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x55982747a9a0 <col:24, col:80> Text=" k_spin_lock only when accessing the _kernel.threads"
|   |-ParagraphComment 0x55982747ab80 <line:668:3, line:674:3>
|   | |-TextComment 0x55982747a9e0 <line:668:3, col:74> Text=" queue elements. It unlocks it during user callback function processing."
|   | |-TextComment 0x55982747aa00 <line:669:3, col:38> Text=" If a new task is created when this "
|   | |-InlineCommandComment 0x55982747aa50 <col:39, col:40> Name="c" RenderMonospaced Arg[0]="foreach"
|   | |-TextComment 0x55982747aa70 <col:49, col:73> Text=" function is in progress,"
|   | |-TextComment 0x55982747aa90 <line:670:3, col:63> Text=" the added new task would not be included in the enumeration."
|   | |-TextComment 0x55982747aab0 <line:671:3, col:75> Text=" If a task is aborted during this enumeration, there would be a race here"
|   | |-TextComment 0x55982747aad0 <line:672:3, col:77> Text=" and there is a possibility that this aborted task would be included in the"
|   | |-TextComment 0x55982747aaf0 <line:673:3, col:15> Text=" enumeration."
|   | `-TextComment 0x55982747ab10 <line:674:3> Text=" "
|   `-BlockCommandComment 0x55982747aba0 <col:4, line:681:72> Name="note"
|     `-ParagraphComment 0x55982747ae80 <line:674:9, line:681:72>
|       |-TextComment 0x55982747abd0 <line:674:9, col:63> Text=" If the task is aborted and the memory occupied by its "
|       |-InlineCommandComment 0x55982747ac20 <col:64, col:65> Name="c" RenderMonospaced Arg[0]="k_thread"
|       |-TextComment 0x55982747ac40 <line:675:3, col:33> Text=" structure is reused when this "
|       |-InlineCommandComment 0x55982747aca0 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="k_thread_foreach_unlocked"
|       |-TextComment 0x55982747acc0 <col:62, col:76> Text=" is in progress"
|       |-TextComment 0x55982747ace0 <line:676:3, col:52> Text=" it might even lead to the system behave unstable."
|       |-TextComment 0x55982747ad00 <line:677:3, col:59> Text=" This function may never return, as it would follow some "
|       |-InlineCommandComment 0x55982747ad50 <col:60, col:61> Name="c" RenderMonospaced Arg[0]="next"
|       |-TextComment 0x55982747ad70 <col:67, col:71> Text=" task"
|       |-TextComment 0x55982747ad90 <line:678:3, col:73> Text=" pointers treating given pointer as a pointer to the k_thread structure"
|       |-TextComment 0x55982747adb0 <line:679:3, col:45> Text=" while it is something different right now."
|       |-TextComment 0x55982747add0 <line:680:3, col:77> Text=" Do not reuse the memory that was occupied by k_thread structure of aborted"
|       `-TextComment 0x55982747adf0 <line:681:3, col:72> Text=" task if it was aborted after this function was called in any context."
|-FunctionDecl 0x5598273ccd70 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:784:43> line:779:19 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x5598273cc768 <col:35, col:52> col:52 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x5598273cc7d8 <line:780:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5598273cc848 <line:781:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5598273cc8e0 <line:782:7, col:24> col:24 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x5598273cc958 <line:783:7, col:13> col:13 p1 'void *'
| |-ParmVarDecl 0x5598273cc9d0 <col:17, col:23> col:23 p2 'void *'
| |-ParmVarDecl 0x5598273cca48 <col:27, col:33> col:33 p3 'void *'
| |-ParmVarDecl 0x5598273ccac0 <line:784:7, col:11> col:11 prio 'int'
| |-ParmVarDecl 0x5598273ccb30 <col:17, col:23> col:23 options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5598273ccba0 <col:32, col:38> col:38 delay 's32_t':'int'
| `-FullComment 0x55982747bd80 <line:746:3, line:778:1>
|   |-ParagraphComment 0x55982747afb0 <line:746:3>
|   | `-TextComment 0x55982747af80 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747afd0 <col:4, col:26> Name="brief"
|   | `-ParagraphComment 0x55982747b030 <col:10, col:26>
|   |   `-TextComment 0x55982747b000 <col:10, col:26> Text=" Create a thread."
|   |-ParagraphComment 0x55982747b080 <line:748:3, col:70>
|   | `-TextComment 0x55982747b050 <col:3, col:70> Text=" This routine initializes a thread, then schedules it for execution."
|   |-ParagraphComment 0x55982747b140 <line:750:3, line:753:11>
|   | |-TextComment 0x55982747b0a0 <line:750:3, col:78> Text=" The new thread may be scheduled for immediate execution or a delayed start."
|   | |-TextComment 0x55982747b0c0 <line:751:3, col:71> Text=" If the newly spawned thread does not have a delayed start the kernel"
|   | |-TextComment 0x55982747b0e0 <line:752:3, col:70> Text=" scheduler may preempt the current thread to allow the new thread to"
|   | `-TextComment 0x55982747b100 <line:753:3, col:11> Text=" execute."
|   |-ParagraphComment 0x55982747b1e0 <line:755:3, line:757:44>
|   | |-TextComment 0x55982747b160 <line:755:3, col:73> Text=" Thread options are architecture-specific, and can include K_ESSENTIAL,"
|   | |-TextComment 0x55982747b180 <line:756:3, col:77> Text=" K_FP_REGS, and K_SSE_REGS. Multiple options may be specified by separating"
|   | `-TextComment 0x55982747b1a0 <line:757:3, col:44> Text=" them using "|" (the logical OR operator)."
|   |-ParagraphComment 0x55982747b2a0 <line:759:3, line:762:13>
|   | |-TextComment 0x55982747b200 <line:759:3, col:79> Text=" Historically, users often would use the beginning of the stack memory region"
|   | |-TextComment 0x55982747b220 <line:760:3, col:75> Text=" to store the struct k_thread data, although corruption will occur if the"
|   | |-TextComment 0x55982747b240 <line:761:3, col:80> Text=" stack overflows this region and stack protection features may not detect this"
|   | `-TextComment 0x55982747b260 <line:762:3, col:13> Text=" situation."
|   |-ParagraphComment 0x55982747b2f0 <line:764:3>
|   | `-TextComment 0x55982747b2c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982747b310 <col:4, line:765:3> [in] implicitly Param="new_thread" ParamIndex=0
|   | `-ParagraphComment 0x55982747b3c0 <line:764:21, line:765:3>
|   |   |-TextComment 0x55982747b370 <line:764:21, col:61> Text=" Pointer to uninitialized struct k_thread"
|   |   `-TextComment 0x55982747b390 <line:765:3> Text=" "
|   |-ParamCommandComment 0x55982747b3e0 <col:4, line:766:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x55982747b490 <line:765:16, line:766:3>
|   |   |-TextComment 0x55982747b440 <line:765:16, col:43> Text=" Pointer to the stack space."
|   |   `-TextComment 0x55982747b460 <line:766:3> Text=" "
|   |-ParamCommandComment 0x55982747b4b0 <col:4, line:767:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x55982747b560 <line:766:21, line:767:3>
|   |   |-TextComment 0x55982747b510 <line:766:21, col:41> Text=" Stack size in bytes."
|   |   `-TextComment 0x55982747b530 <line:767:3> Text=" "
|   |-ParamCommandComment 0x55982747b580 <col:4, line:768:3> [in] implicitly Param="entry" ParamIndex=3
|   | `-ParagraphComment 0x55982747b630 <line:767:16, line:768:3>
|   |   |-TextComment 0x55982747b5e0 <line:767:16, col:38> Text=" Thread entry function."
|   |   `-TextComment 0x55982747b600 <line:768:3> Text=" "
|   |-ParamCommandComment 0x55982747b650 <col:4, line:769:3> [in] implicitly Param="p1" ParamIndex=4
|   | `-ParagraphComment 0x55982747b700 <line:768:13, line:769:3>
|   |   |-TextComment 0x55982747b6b0 <line:768:13, col:39> Text=" 1st entry point parameter."
|   |   `-TextComment 0x55982747b6d0 <line:769:3> Text=" "
|   |-ParamCommandComment 0x55982747b720 <col:4, line:770:3> [in] implicitly Param="p2" ParamIndex=5
|   | `-ParagraphComment 0x55982747b7d0 <line:769:13, line:770:3>
|   |   |-TextComment 0x55982747b780 <line:769:13, col:39> Text=" 2nd entry point parameter."
|   |   `-TextComment 0x55982747b7a0 <line:770:3> Text=" "
|   |-ParamCommandComment 0x55982747b7f0 <col:4, line:771:3> [in] implicitly Param="p3" ParamIndex=6
|   | `-ParagraphComment 0x55982747b8a0 <line:770:13, line:771:3>
|   |   |-TextComment 0x55982747b850 <line:770:13, col:39> Text=" 3rd entry point parameter."
|   |   `-TextComment 0x55982747b870 <line:771:3> Text=" "
|   |-ParamCommandComment 0x55982747b8c0 <col:4, line:772:3> [in] implicitly Param="prio" ParamIndex=7
|   | `-ParagraphComment 0x55982747b970 <line:771:15, line:772:3>
|   |   |-TextComment 0x55982747b920 <line:771:15, col:31> Text=" Thread priority."
|   |   `-TextComment 0x55982747b940 <line:772:3> Text=" "
|   |-ParamCommandComment 0x55982747b990 <col:4, line:773:3> [in] implicitly Param="options" ParamIndex=8
|   | `-ParagraphComment 0x55982747ba40 <line:772:18, line:773:3>
|   |   |-TextComment 0x55982747b9f0 <line:772:18, col:33> Text=" Thread options."
|   |   `-TextComment 0x55982747ba10 <line:773:3> Text=" "
|   |-ParamCommandComment 0x55982747ba60 <col:4, col:80> [in] implicitly Param="delay" ParamIndex=9
|   | `-ParagraphComment 0x55982747baf0 <col:16, col:80>
|   |   `-TextComment 0x55982747bac0 <col:16, col:80> Text=" Scheduling delay (in milliseconds), or K_NO_WAIT (for no delay)."
|   |-ParagraphComment 0x55982747bb40 <line:775:3>
|   | `-TextComment 0x55982747bb10 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747bb60 <col:4, col:28> Name="return"
|   | `-ParagraphComment 0x55982747bbc0 <col:11, col:28>
|   |   `-TextComment 0x55982747bb90 <col:11, col:28> Text=" ID of new thread."
|   |-ParagraphComment 0x55982747bc10 <line:777:3>
|   | `-TextComment 0x55982747bbe0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55982747bc30 <col:4, col:21> Text=" K-THREAD-001"
|   `-ParagraphComment 0x55982747bca0 <line:778:1>
|     `-TextComment 0x55982747bc70 <col:1> Text=" "
|-FunctionDecl 0x5598273d0240 <line:795:1, line:797:18> line:795:27 k_thread_user_mode_enter 'void (k_thread_entry_t, void *, void *, void *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5598273cce98 <col:52, col:69> col:69 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x5598273cff70 <line:796:10, col:16> col:16 p1 'void *'
| |-ParmVarDecl 0x5598273cffe8 <col:20, col:26> col:26 p2 'void *'
| |-ParmVarDecl 0x5598273d0060 <line:797:10, col:16> col:16 p3 'void *'
| `-FullComment 0x55982747c330 <line:787:3, line:794:1>
|   |-ParagraphComment 0x55982747be20 <line:787:3>
|   | `-TextComment 0x55982747bdf0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747be40 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x55982747bea0 <col:10, col:61>
|   |   `-TextComment 0x55982747be70 <col:10, col:61> Text=" Drop a thread's privileges permanently to user mode"
|   |-ParagraphComment 0x55982747bef0 <line:789:3>
|   | `-TextComment 0x55982747bec0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982747bf10 <col:4, line:790:3> [in] implicitly Param="entry" ParamIndex=0
|   | `-ParagraphComment 0x55982747bfc0 <line:789:16, line:790:3>
|   |   |-TextComment 0x55982747bf70 <line:789:16, col:48> Text=" Function to start executing from"
|   |   `-TextComment 0x55982747bf90 <line:790:3> Text=" "
|   |-ParamCommandComment 0x55982747bfe0 <col:4, line:791:3> [in] implicitly Param="p1" ParamIndex=1
|   | `-ParagraphComment 0x55982747c090 <line:790:13, line:791:3>
|   |   |-TextComment 0x55982747c040 <line:790:13, col:38> Text=" 1st entry point parameter"
|   |   `-TextComment 0x55982747c060 <line:791:3> Text=" "
|   |-ParamCommandComment 0x55982747c0b0 <col:4, line:792:3> [in] implicitly Param="p2" ParamIndex=2
|   | `-ParagraphComment 0x55982747c160 <line:791:13, line:792:3>
|   |   |-TextComment 0x55982747c110 <line:791:13, col:38> Text=" 2nd entry point parameter"
|   |   `-TextComment 0x55982747c130 <line:792:3> Text=" "
|   |-ParamCommandComment 0x55982747c180 <col:4, line:793:3> [in] implicitly Param="p3" ParamIndex=3
|   | `-ParagraphComment 0x55982747c230 <line:792:13, line:793:3>
|   |   |-TextComment 0x55982747c1e0 <line:792:13, col:38> Text=" 3rd entry point parameter"
|   |   `-TextComment 0x55982747c200 <line:793:3> Text=" "
|   |-VerbatimLineComment 0x55982747c250 <col:4, col:21> Text=" K-THREAD-003"
|   `-ParagraphComment 0x55982747c2c0 <line:794:1>
|     `-TextComment 0x55982747c290 <col:1> Text=" "
|-FunctionDecl 0x5598273d0520 <line:831:1, line:835:1> line:831:20 k_thread_resource_pool_assign 'void (struct k_thread *, struct k_mem_pool *)' static inline
| |-ParmVarDecl 0x5598273d0380 <col:50, col:67> col:67 used thread 'struct k_thread *'
| |-ParmVarDecl 0x5598273d0408 <line:832:8, col:27> col:27 used pool 'struct k_mem_pool *'
| |-CompoundStmt 0x5598273d06d8 <line:833:1, line:835:1>
| | `-BinaryOperator 0x5598273d0688 <line:834:2, col:26> 'struct k_mem_pool *' '='
| |   |-MemberExpr 0x5598273d0610 <col:2, col:10> 'struct k_mem_pool *' lvalue ->resource_pool 0x5598273826f0
| |   | `-ImplicitCastExpr 0x5598273d05f8 <col:2> 'struct k_thread *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5598273d05d0 <col:2> 'struct k_thread *' lvalue ParmVar 0x5598273d0380 'thread' 'struct k_thread *'
| |   `-ImplicitCastExpr 0x5598273d0670 <col:26> 'struct k_mem_pool *' <LValueToRValue>
| |     `-DeclRefExpr 0x5598273d0648 <col:26> 'struct k_mem_pool *' lvalue ParmVar 0x5598273d0408 'pool' 'struct k_mem_pool *'
| `-FullComment 0x55982747c880 <line:817:3, line:830:1>
|   |-ParagraphComment 0x55982747c3d0 <line:817:3>
|   | `-TextComment 0x55982747c3a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747c3f0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55982747c450 <col:10, col:51>
|   |   `-TextComment 0x55982747c420 <col:10, col:51> Text=" Assign a resource memory pool to a thread"
|   |-ParagraphComment 0x55982747c4f0 <line:819:3, line:821:51>
|   | |-TextComment 0x55982747c470 <line:819:3, col:73> Text=" By default, threads have no resource pool assigned unless their parent"
|   | |-TextComment 0x55982747c490 <line:820:3, col:70> Text=" thread has a resource pool, in which case it is inherited. Multiple"
|   | `-TextComment 0x55982747c4b0 <line:821:3, col:51> Text=" threads may be assigned to the same memory pool."
|   |-ParagraphComment 0x55982747c560 <line:823:3, line:824:17>
|   | |-TextComment 0x55982747c510 <line:823:3, col:74> Text=" Changing a thread's resource pool will not migrate allocations from the"
|   | `-TextComment 0x55982747c530 <line:824:3, col:17> Text=" previous pool."
|   |-ParagraphComment 0x55982747c5b0 <line:826:3>
|   | `-TextComment 0x55982747c580 <col:3> Text=" "
|   |-ParamCommandComment 0x55982747c5d0 <col:4, line:828:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55982747c6b0 <line:826:17, line:828:3>
|   |   |-TextComment 0x55982747c630 <line:826:17, col:77> Text=" Target thread to assign a memory pool for resource requests,"
|   |   |-TextComment 0x55982747c650 <line:827:3, col:75> Text="               or NULL if the thread should no longer have a memory pool."
|   |   `-TextComment 0x55982747c670 <line:828:3> Text=" "
|   |-ParamCommandComment 0x55982747c6d0 <col:4, line:829:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x55982747c780 <line:828:15, line:829:3>
|   |   |-TextComment 0x55982747c730 <line:828:15, col:48> Text=" Memory pool to use for resources."
|   |   `-TextComment 0x55982747c750 <line:829:3> Text=" "
|   |-VerbatimLineComment 0x55982747c7a0 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x55982747c810 <line:830:1>
|     `-TextComment 0x55982747c7e0 <col:1> Text=" "
|-FunctionDecl 0x5598273d0800 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:864:33> col:17 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x5598273d0700 <col:25, col:31> col:31 ms 's32_t':'int'
| `-FullComment 0x55982747cd60 <line:855:3, line:863:1>
|   |-ParagraphComment 0x55982747c920 <line:855:3>
|   | `-TextComment 0x55982747c8f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747c940 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55982747c9a0 <col:10, col:42>
|   |   `-TextComment 0x55982747c970 <col:10, col:42> Text=" Put the current thread to sleep."
|   |-ParagraphComment 0x55982747ca70 <line:857:3, col:78>
|   | |-TextComment 0x55982747c9c0 <col:3, col:53> Text=" This routine puts the current thread to sleep for "
|   | |-InlineCommandComment 0x55982747ca10 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="duration"
|   | `-TextComment 0x55982747ca30 <col:65, col:78> Text=" milliseconds."
|   |-ParagraphComment 0x55982747cac0 <line:859:3>
|   | `-TextComment 0x55982747ca90 <col:3> Text=" "
|   |-ParamCommandComment 0x55982747cae0 <col:4, col:45> [in] implicitly Param="ms" ParamIndex=0
|   | `-ParagraphComment 0x55982747cb70 <col:13, col:45>
|   |   `-TextComment 0x55982747cb40 <col:13, col:45> Text=" Number of milliseconds to sleep."
|   |-ParagraphComment 0x55982747cbc0 <line:861:3>
|   | `-TextComment 0x55982747cb90 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747cbe0 <col:4, line:862:44> Name="return"
|   | `-ParagraphComment 0x55982747cc60 <line:861:11, line:862:44>
|   |   |-TextComment 0x55982747cc10 <line:861:11, col:79> Text=" Zero if the requested time has elapsed or the number of milliseconds"
|   |   `-TextComment 0x55982747cc30 <line:862:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x55982747cc80 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x55982747ccf0 <line:863:1>
|     `-TextComment 0x55982747ccc0 <col:1> Text=" "
|-FunctionDecl 0x5598273d0970 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:880:34> col:17 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x5598273d08e8 <col:26, col:32> col:32 us 's32_t':'int'
| `-FullComment 0x55982747d260 <line:867:3, line:879:1>
|   |-ParagraphComment 0x55982747ce00 <line:867:3>
|   | `-TextComment 0x55982747cdd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747ce20 <col:4, col:70> Name="brief"
|   | `-ParagraphComment 0x55982747ce80 <col:10, col:70>
|   |   `-TextComment 0x55982747ce50 <col:10, col:70> Text=" Put the current thread to sleep with microsecond resolution."
|   |-ParagraphComment 0x55982747cf70 <line:869:3, line:873:71>
|   | |-TextComment 0x55982747cea0 <line:869:3, col:71> Text=" This function is unlikely to work as expected without kernel tuning."
|   | |-TextComment 0x55982747cec0 <line:870:3, col:71> Text=" In particular, because the lower bound on the duration of a sleep is"
|   | |-TextComment 0x55982747cee0 <line:871:3, col:74> Text=" the duration of a tick, CONFIG_SYS_CLOCK_TICKS_PER_SEC must be adjusted"
|   | |-TextComment 0x55982747cf00 <line:872:3, col:73> Text=" to achieve the resolution desired. The implications of doing this must"
|   | `-TextComment 0x55982747cf20 <line:873:3, col:71> Text=" be understood before attempting to use k_usleep(). Use with caution."
|   |-ParagraphComment 0x55982747cfc0 <line:875:3>
|   | `-TextComment 0x55982747cf90 <col:3> Text=" "
|   |-ParamCommandComment 0x55982747cfe0 <col:4, col:45> [in] implicitly Param="us" ParamIndex=0
|   | `-ParagraphComment 0x55982747d070 <col:13, col:45>
|   |   `-TextComment 0x55982747d040 <col:13, col:45> Text=" Number of microseconds to sleep."
|   |-ParagraphComment 0x55982747d0c0 <line:877:3>
|   | `-TextComment 0x55982747d090 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747d0e0 <col:4, line:878:44> Name="return"
|   | `-ParagraphComment 0x55982747d160 <line:877:11, line:878:44>
|   |   |-TextComment 0x55982747d110 <line:877:11, col:79> Text=" Zero if the requested time has elapsed or the number of microseconds"
|   |   `-TextComment 0x55982747d130 <line:878:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x55982747d180 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x55982747d1f0 <line:879:1>
|     `-TextComment 0x55982747d1c0 <col:1> Text=" "
|-FunctionDecl 0x5598273d0b20 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:890:46> col:16 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x5598273d0a58 <col:28, col:34> col:34 usec_to_wait 'u32_t':'unsigned int'
| `-FullComment 0x55982747d590 <line:883:3, line:888:14>
|   |-ParagraphComment 0x55982747d300 <line:883:3>
|   | `-TextComment 0x55982747d2d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747d320 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x55982747d380 <col:10, col:48>
|   |   `-TextComment 0x55982747d350 <col:10, col:48> Text=" Cause the current thread to busy wait."
|   |-ParagraphComment 0x55982747d470 <line:885:3, line:886:32>
|   | |-TextComment 0x55982747d3a0 <line:885:3, col:76> Text=" This routine causes the current thread to execute a "do nothing" loop for"
|   | |-TextComment 0x55982747d3c0 <line:886:3> Text=" "
|   | |-InlineCommandComment 0x55982747d410 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="usec_to_wait"
|   | `-TextComment 0x55982747d430 <col:19, col:32> Text=" microseconds."
|   |-ParagraphComment 0x55982747d4c0 <line:888:3>
|   | `-TextComment 0x55982747d490 <col:3> Text=" "
|   `-BlockCommandComment 0x55982747d4e0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55982747d540 <col:11, col:14>
|       `-TextComment 0x55982747d510 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273d0c88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:902:28> col:16 k_yield 'void (void)' static inline
| `-FullComment 0x55982747d930 <line:893:3, line:901:1>
|   |-ParagraphComment 0x55982747d630 <line:893:3>
|   | `-TextComment 0x55982747d600 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747d650 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x55982747d6b0 <col:10, col:35>
|   |   `-TextComment 0x55982747d680 <col:10, col:35> Text=" Yield the current thread."
|   |-ParagraphComment 0x55982747d750 <line:895:3, line:897:67>
|   | |-TextComment 0x55982747d6d0 <line:895:3, col:71> Text=" This routine causes the current thread to yield execution to another"
|   | |-TextComment 0x55982747d6f0 <line:896:3, col:77> Text=" thread of the same or higher priority. If there are no other ready threads"
|   | `-TextComment 0x55982747d710 <line:897:3, col:67> Text=" of the same or higher priority, the routine returns immediately."
|   |-ParagraphComment 0x55982747d7a0 <line:899:3>
|   | `-TextComment 0x55982747d770 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747d7c0 <col:4, line:900:3> Name="return"
|   | `-ParagraphComment 0x55982747d840 <line:899:11, line:900:3>
|   |   |-TextComment 0x55982747d7f0 <line:899:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55982747d810 <line:900:3> Text=" "
|   |-VerbatimLineComment 0x55982747d860 <col:4, col:21> Text=" K-THREAD-015"
|   `-ParagraphComment 0x55982747d8d0 <line:901:1>
|     `-TextComment 0x55982747d8a0 <col:1> Text=" "
|-FunctionDecl 0x5598273d0e70 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:916:39> col:16 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5598273d0d68 <col:25, col:33> col:33 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55982747e900 <line:905:3, line:915:1>
|   |-ParagraphComment 0x55982747d9d0 <line:905:3>
|   | `-TextComment 0x55982747d9a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747d9f0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55982747da50 <col:10, col:36>
|   |   `-TextComment 0x55982747da20 <col:10, col:36> Text=" Wake up a sleeping thread."
|   |-ParagraphComment 0x55982747db20 <line:907:3, col:61>
|   | |-TextComment 0x55982747da70 <col:3, col:37> Text=" This routine prematurely wakes up "
|   | |-InlineCommandComment 0x55982747dac0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55982747dae0 <col:47, col:61> Text=" from sleeping."
|   |-ParagraphComment 0x55982747dbf0 <line:909:3, col:69>
|   | |-TextComment 0x55982747db40 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x55982747db90 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55982747dbb0 <col:16, col:69> Text=" is not currently sleeping, the routine has no effect."
|   |-ParagraphComment 0x55982747dc40 <line:911:3>
|   | `-TextComment 0x55982747dc10 <col:3> Text=" "
|   |-ParamCommandComment 0x55982747dc60 <col:4, col:38> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55982747e710 <col:17, col:38>
|   |   `-TextComment 0x55982747e6e0 <col:17, col:38> Text=" ID of thread to wake."
|   |-ParagraphComment 0x55982747e760 <line:913:3>
|   | `-TextComment 0x55982747e730 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747e780 <col:4, line:914:3> Name="return"
|   | `-ParagraphComment 0x55982747e800 <line:913:11, line:914:3>
|   |   |-TextComment 0x55982747e7b0 <line:913:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55982747e7d0 <line:914:3> Text=" "
|   |-VerbatimLineComment 0x55982747e820 <col:4, col:21> Text=" K-THREAD-014"
|   `-ParagraphComment 0x55982747e890 <line:915:1>
|     `-TextComment 0x55982747e860 <col:1> Text=" "
|-FunctionDecl 0x5598273d1060 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:925:37> col:19 k_current_get 'k_tid_t (void)' static inline
| `-FullComment 0x55982747ec30 <line:919:3, line:924:1>
|   |-ParagraphComment 0x55982747e9a0 <line:919:3>
|   | `-TextComment 0x55982747e970 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747e9c0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55982747ea20 <col:10, col:46>
|   |   `-TextComment 0x55982747e9f0 <col:10, col:46> Text=" Get thread ID of the current thread."
|   |-ParagraphComment 0x55982747ea70 <line:921:3>
|   | `-TextComment 0x55982747ea40 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747ea90 <col:4, col:32> Name="return"
|   | `-ParagraphComment 0x55982747eaf0 <col:11, col:32>
|   |   `-TextComment 0x55982747eac0 <col:11, col:32> Text=" ID of current thread."
|   |-ParagraphComment 0x55982747eb40 <line:923:3>
|   | `-TextComment 0x55982747eb10 <col:3> Text=" "
|   |-VerbatimLineComment 0x55982747eb60 <col:4, col:21> Text=" K-THREAD-013"
|   `-ParagraphComment 0x55982747ebd0 <line:924:1>
|     `-TextComment 0x55982747eba0 <col:1> Text=" "
|-FunctionDecl 0x5598273d11c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:942:45> col:16 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5598273d1138 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55982747f1d0 <line:928:3, line:941:1>
|   |-ParagraphComment 0x55982747ecd0 <line:928:3>
|   | `-TextComment 0x55982747eca0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747ecf0 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x55982747ed50 <col:10, col:25>
|   |   `-TextComment 0x55982747ed20 <col:10, col:25> Text=" Abort a thread."
|   |-ParagraphComment 0x55982747eee0 <line:930:3, line:935:38>
|   | |-TextComment 0x55982747ed70 <line:930:3, col:47> Text=" This routine permanently stops execution of "
|   | |-InlineCommandComment 0x55982747edc0 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="thread."
|   | |-TextComment 0x55982747ede0 <col:58, col:77> Text=" The thread is taken"
|   | |-TextComment 0x55982747ee00 <line:931:3, col:73> Text=" off all kernel queues it is part of (i.e. the ready queue, the timeout"
|   | |-TextComment 0x55982747ee20 <line:932:3, col:75> Text=" queue, or a kernel object wait queue). However, any kernel resources the"
|   | |-TextComment 0x55982747ee40 <line:933:3, col:72> Text=" thread might currently own (such as mutexes or memory blocks) are not"
|   | |-TextComment 0x55982747ee60 <line:934:3, col:77> Text=" released. It is the responsibility of the caller of this routine to ensure"
|   | `-TextComment 0x55982747ee80 <line:935:3, col:38> Text=" all necessary cleanup is performed."
|   |-ParagraphComment 0x55982747ef30 <line:937:3>
|   | `-TextComment 0x55982747ef00 <col:3> Text=" "
|   |-ParamCommandComment 0x55982747ef50 <col:4, col:39> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55982747efe0 <col:17, col:39>
|   |   `-TextComment 0x55982747efb0 <col:17, col:39> Text=" ID of thread to abort."
|   |-ParagraphComment 0x55982747f030 <line:939:3>
|   | `-TextComment 0x55982747f000 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747f050 <col:4, line:940:3> Name="return"
|   | `-ParagraphComment 0x55982747f0d0 <line:939:11, line:940:3>
|   |   |-TextComment 0x55982747f080 <line:939:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55982747f0a0 <line:940:3> Text=" "
|   |-VerbatimLineComment 0x55982747f0f0 <col:4, col:21> Text=" K-THREAD-012"
|   `-ParagraphComment 0x55982747f160 <line:941:1>
|     `-TextComment 0x55982747f130 <col:1> Text=" "
|-FunctionDecl 0x5598273d1330 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:955:45> col:16 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5598273d12a8 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55982747f5a0 <line:946:3, line:954:1>
|   |-ParagraphComment 0x55982747f270 <line:946:3>
|   | `-TextComment 0x55982747f240 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747f290 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55982747f2f0 <col:10, col:34>
|   |   `-TextComment 0x55982747f2c0 <col:10, col:34> Text=" Start an inactive thread"
|   |-ParagraphComment 0x55982747f390 <line:948:3, line:950:9>
|   | |-TextComment 0x55982747f310 <line:948:3, col:73> Text=" If a thread was created with K_FOREVER in the delay parameter, it will"
|   | |-TextComment 0x55982747f330 <line:949:3, col:69> Text=" not be added to the scheduling queue until this function is called"
|   | `-TextComment 0x55982747f350 <line:950:3, col:9> Text=" on it."
|   |-ParagraphComment 0x55982747f3e0 <line:952:3>
|   | `-TextComment 0x55982747f3b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982747f400 <col:4, line:953:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55982747f4b0 <line:952:17, line:953:3>
|   |   |-TextComment 0x55982747f460 <line:952:17, col:32> Text=" thread to start"
|   |   `-TextComment 0x55982747f480 <line:953:3> Text=" "
|   |-VerbatimLineComment 0x55982747f4d0 <col:4, col:21> Text=" K-THREAD-011"
|   `-ParagraphComment 0x55982747f540 <line:954:1>
|     `-TextComment 0x55982747f510 <col:1> Text=" "
|-RecordDecl 0x5598273d1408 <line:964:1, line:977:1> line:964:8 struct _static_thread_data definition
| |-FieldDecl 0x5598273d14d8 <line:965:2, col:19> col:19 init_thread 'struct k_thread *'
| |-FieldDecl 0x5598273d1530 <line:966:2, col:20> col:20 init_stack 'k_thread_stack_t *'
| |-FieldDecl 0x5598273d1590 <line:967:2, col:15> col:15 init_stack_size 'unsigned int'
| |-FieldDecl 0x5598273d15e8 <line:968:2, col:19> col:19 init_entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-FieldDecl 0x5598273d1648 <line:969:2, col:8> col:8 init_p1 'void *'
| |-FieldDecl 0x5598273d16a8 <line:970:2, col:8> col:8 init_p2 'void *'
| |-FieldDecl 0x5598273d1708 <line:971:2, col:8> col:8 init_p3 'void *'
| |-FieldDecl 0x5598273d1768 <line:972:2, col:6> col:6 init_prio 'int'
| |-FieldDecl 0x5598273d17c0 <line:973:2, col:8> col:8 init_options 'u32_t':'unsigned int'
| |-FieldDecl 0x5598273d1818 <line:974:2, col:8> col:8 init_delay 's32_t':'int'
| |-FieldDecl 0x5598273d1900 <line:975:2, col:25> col:9 init_abort 'void (*)(void)'
| `-FieldDecl 0x5598273d1960 <line:976:2, col:14> col:14 init_name 'const char *'
|-FunctionDecl 0x5598273d1b58 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1053:51> col:15 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x5598273d1a48 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55982747fab0 <line:1044:3, line:1052:1>
|   |-ParagraphComment 0x55982747f640 <line:1044:3>
|   | `-TextComment 0x55982747f610 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747f660 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55982747f6c0 <col:10, col:34>
|   |   `-TextComment 0x55982747f690 <col:10, col:34> Text=" Get a thread's priority."
|   |-ParagraphComment 0x55982747f760 <line:1046:3, col:39>
|   | |-TextComment 0x55982747f6e0 <col:3, col:37> Text=" This routine gets the priority of "
|   | `-InlineCommandComment 0x55982747f730 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x55982747f7b0 <line:1048:3>
|   | `-TextComment 0x55982747f780 <col:3> Text=" "
|   |-ParamCommandComment 0x55982747f7d0 <col:4, col:55> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55982747f860 <col:17, col:55>
|   |   `-TextComment 0x55982747f830 <col:17, col:55> Text=" ID of thread whose priority is needed."
|   |-ParagraphComment 0x55982747f8b0 <line:1050:3>
|   | `-TextComment 0x55982747f880 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747f8d0 <col:4, line:1051:3> Name="return"
|   | `-ParagraphComment 0x55982747f9b0 <line:1050:11, line:1051:3>
|   |   |-TextComment 0x55982747f900 <line:1050:11, col:23> Text=" Priority of "
|   |   |-InlineCommandComment 0x55982747f950 <col:24, col:25> Name="a" RenderEmphasized Arg[0]="thread."
|   |   `-TextComment 0x55982747f970 <line:1051:3> Text=" "
|   |-VerbatimLineComment 0x55982747f9d0 <col:4, col:21> Text=" K-THREAD-009"
|   `-ParagraphComment 0x55982747fa40 <line:1052:1>
|     `-TextComment 0x55982747fa10 <col:1> Text=" "
|-FunctionDecl 0x5598273d1dc0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1083:62> col:16 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x5598273d1c38 <col:38, col:46> col:46 thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5598273d1cb0 <col:54, col:58> col:58 prio 'int'
| `-FullComment 0x559827480470 <line:1056:3, line:1082:1>
|   |-ParagraphComment 0x55982747fb50 <line:1056:3>
|   | `-TextComment 0x55982747fb20 <col:3> Text=" "
|   |-BlockCommandComment 0x55982747fb70 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55982747fbd0 <col:10, col:34>
|   |   `-TextComment 0x55982747fba0 <col:10, col:34> Text=" Set a thread's priority."
|   |-ParagraphComment 0x55982747fc70 <line:1058:3, col:54>
|   | |-TextComment 0x55982747fbf0 <col:3, col:52> Text=" This routine immediately changes the priority of "
|   | `-InlineCommandComment 0x55982747fc40 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x55982747fd60 <line:1060:3, line:1061:10>
|   | |-TextComment 0x55982747fc90 <line:1060:3, col:64> Text=" Rescheduling can occur immediately depending on the priority "
|   | |-InlineCommandComment 0x55982747fce0 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x55982747fd00 <col:74, col:76> Text=" is"
|   | `-TextComment 0x55982747fd20 <line:1061:3, col:10> Text=" set to:"
|   |-ParagraphComment 0x55982747fe50 <line:1063:3, line:1064:75>
|   | |-TextComment 0x55982747fd80 <line:1063:3, col:71> Text=" - If its priority is raised above the priority of the caller of this"
|   | |-TextComment 0x55982747fda0 <line:1064:3, col:44> Text=" function, and the caller is preemptible, "
|   | |-InlineCommandComment 0x55982747fdf0 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55982747fe10 <col:54, col:75> Text=" will be scheduled in."
|   |-ParagraphComment 0x55982747fef0 <line:1066:3, line:1068:41>
|   | |-TextComment 0x55982747fe70 <line:1066:3, col:75> Text=" - If the caller operates on itself, it lowers its priority below that of"
|   | |-TextComment 0x55982747fe90 <line:1067:3, col:76> Text=" other threads in the system, and the caller is preemptible, the thread of"
|   | `-TextComment 0x55982747feb0 <line:1068:3, col:41> Text=" highest priority will be scheduled in."
|   |-ParagraphComment 0x55982747ff90 <line:1070:3, line:1072:20>
|   | |-TextComment 0x55982747ff10 <line:1070:3, col:74> Text=" Priority can be assigned in the range of -CONFIG_NUM_COOP_PRIORITIES to"
|   | |-TextComment 0x55982747ff30 <line:1071:3, col:76> Text=" CONFIG_NUM_PREEMPT_PRIORITIES-1, where -CONFIG_NUM_COOP_PRIORITIES is the"
|   | `-TextComment 0x55982747ff50 <line:1072:3, col:20> Text=" highest priority."
|   |-ParagraphComment 0x55982747ffe0 <line:1074:3>
|   | `-TextComment 0x55982747ffb0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827480000 <col:4, line:1075:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5598274800b0 <line:1074:17, line:1075:3>
|   |   |-TextComment 0x559827480060 <line:1074:17, col:58> Text=" ID of thread whose priority is to be set."
|   |   `-TextComment 0x559827480080 <line:1075:3> Text=" "
|   |-ParamCommandComment 0x5598274800d0 <col:4, col:28> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x559827480160 <col:15, col:28>
|   |   `-TextComment 0x559827480130 <col:15, col:28> Text=" New priority."
|   |-ParagraphComment 0x5598274801b0 <line:1077:3>
|   | `-TextComment 0x559827480180 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274801d0 <col:4, line:1078:57> Name="warning"
|   | `-ParagraphComment 0x559827480250 <line:1077:12, line:1078:57>
|   |   |-TextComment 0x559827480200 <line:1077:12, col:73> Text=" Changing the priority of a thread currently involved in mutex"
|   |   `-TextComment 0x559827480220 <line:1078:3, col:57> Text=" priority inheritance may result in undefined behavior."
|   |-ParagraphComment 0x5598274802a0 <line:1080:3>
|   | `-TextComment 0x559827480270 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274802c0 <col:4, line:1081:3> Name="return"
|   | `-ParagraphComment 0x559827480340 <line:1080:11, line:1081:3>
|   |   |-TextComment 0x5598274802f0 <line:1080:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559827480310 <line:1081:3> Text=" "
|   |-VerbatimLineComment 0x559827480360 <col:4, col:21> Text=" K-THREAD-008"
|   `-ParagraphComment 0x5598274803d0 <line:1082:1>
|     `-TextComment 0x5598274803a0 <col:1> Text=" "
|-FunctionDecl 0x5598273d2640 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1213:47> col:16 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5598273d1ea8 <col:33, col:41> col:41 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x559827480b80 <line:1196:3, line:1212:1>
|   |-ParagraphComment 0x559827480510 <line:1196:3>
|   | `-TextComment 0x5598274804e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827480530 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x559827480590 <col:10, col:27>
|   |   `-TextComment 0x559827480560 <col:10, col:27> Text=" Suspend a thread."
|   |-ParagraphComment 0x5598274807c0 <line:1198:3, line:1204:48>
|   | |-TextComment 0x5598274805b0 <line:1198:3, col:58> Text=" This routine prevents the kernel scheduler from making "
|   | |-InlineCommandComment 0x559827480600 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x559827480620 <line:1199:3, col:56> Text=" the current thread. All other internal operations on "
|   | |-InlineCommandComment 0x559827480670 <col:57, col:58> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x559827480690 <col:66, col:69> Text=" are"
|   | |-TextComment 0x5598274806b0 <line:1200:3, col:68> Text=" still performed; for example, kernel objects it is waiting on are"
|   | |-TextComment 0x5598274806f0 <line:1201:3, col:55> Text=" still handed to it.  Note that any existing timeouts"
|   | |-TextComment 0x559827480710 <line:1202:3, col:66> Text=" (e.g. k_sleep(), or a timeout argument to k_sem_take() et. al.)"
|   | |-TextComment 0x559827480730 <line:1203:3, col:62> Text=" will be canceled.  On resume, the thread will begin running"
|   | `-TextComment 0x559827480750 <line:1204:3, col:48> Text=" immediately and return from the blocked call."
|   |-ParagraphComment 0x559827480890 <line:1206:3, col:64>
|   | |-TextComment 0x5598274807e0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x559827480830 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x559827480850 <col:16, col:64> Text=" is already suspended, the routine has no effect."
|   |-ParagraphComment 0x5598274808e0 <line:1208:3>
|   | `-TextComment 0x5598274808b0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827480900 <col:4, col:41> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x559827480990 <col:17, col:41>
|   |   `-TextComment 0x559827480960 <col:17, col:41> Text=" ID of thread to suspend."
|   |-ParagraphComment 0x5598274809e0 <line:1210:3>
|   | `-TextComment 0x5598274809b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827480a00 <col:4, line:1211:3> Name="return"
|   | `-ParagraphComment 0x559827480a80 <line:1210:11, line:1211:3>
|   |   |-TextComment 0x559827480a30 <line:1210:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559827480a50 <line:1211:3> Text=" "
|   |-VerbatimLineComment 0x559827480aa0 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x559827480b10 <line:1212:1>
|     `-TextComment 0x559827480ae0 <col:1> Text=" "
|-FunctionDecl 0x5598273d27b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1228:46> col:16 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5598273d2728 <col:32, col:40> col:40 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x559827481150 <line:1216:3, line:1227:1>
|   |-ParagraphComment 0x559827480c20 <line:1216:3>
|   | `-TextComment 0x559827480bf0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827480c40 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x559827480ca0 <col:10, col:36>
|   |   `-TextComment 0x559827480c70 <col:10, col:36> Text=" Resume a suspended thread."
|   |-ParagraphComment 0x559827480d90 <line:1218:3, line:1219:50>
|   | |-TextComment 0x559827480cc0 <line:1218:3, col:52> Text=" This routine allows the kernel scheduler to make "
|   | |-InlineCommandComment 0x559827480d10 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x559827480d30 <col:62, col:73> Text=" the current"
|   | `-TextComment 0x559827480d50 <line:1219:3, col:50> Text=" thread, when it is next eligible for that role."
|   |-ParagraphComment 0x559827480e60 <line:1221:3, col:70>
|   | |-TextComment 0x559827480db0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x559827480e00 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x559827480e20 <col:16, col:70> Text=" is not currently suspended, the routine has no effect."
|   |-ParagraphComment 0x559827480eb0 <line:1223:3>
|   | `-TextComment 0x559827480e80 <col:3> Text=" "
|   |-ParamCommandComment 0x559827480ed0 <col:4, col:40> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x559827480f60 <col:17, col:40>
|   |   `-TextComment 0x559827480f30 <col:17, col:40> Text=" ID of thread to resume."
|   |-ParagraphComment 0x559827480fb0 <line:1225:3>
|   | `-TextComment 0x559827480f80 <col:3> Text=" "
|   |-BlockCommandComment 0x559827480fd0 <col:4, line:1226:3> Name="return"
|   | `-ParagraphComment 0x559827481050 <line:1225:11, line:1226:3>
|   |   |-TextComment 0x559827481000 <line:1225:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559827481020 <line:1226:3> Text=" "
|   |-VerbatimLineComment 0x559827481070 <col:4, col:21> Text=" K-THREAD-006"
|   `-ParagraphComment 0x5598274810e0 <line:1227:1>
|     `-TextComment 0x5598274810b0 <col:1> Text=" "
|-FunctionDecl 0x5598273d2a20 <line:1258:1, col:57> col:13 k_sched_time_slice_set 'void (s32_t, int)' extern
| |-ParmVarDecl 0x5598273d2898 <col:36, col:42> col:42 slice 's32_t':'int'
| |-ParmVarDecl 0x5598273d2910 <col:49, col:53> col:53 prio 'int'
| `-FullComment 0x559827481aa0 <line:1231:3, line:1256:14>
|   |-ParagraphComment 0x5598274811f0 <line:1231:3>
|   | `-TextComment 0x5598274811c0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827481210 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x559827481270 <col:10, col:44>
|   |   `-TextComment 0x559827481240 <col:10, col:44> Text=" Set time-slicing period and scope."
|   |-ParagraphComment 0x5598274812e0 <line:1233:3, line:1234:23>
|   | |-TextComment 0x559827481290 <line:1233:3, col:72> Text=" This routine specifies how the scheduler will perform time slicing of"
|   | `-TextComment 0x5598274812b0 <line:1234:3, col:23> Text=" preemptible threads."
|   |-ParagraphComment 0x5598274814d0 <line:1236:3, line:1240:74>
|   | |-TextComment 0x559827481300 <line:1236:3, col:27> Text=" To enable time slicing, "
|   | |-InlineCommandComment 0x559827481350 <col:28, col:29> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x559827481370 <col:36, col:67> Text=" must be non-zero. The scheduler"
|   | |-TextComment 0x559827481390 <line:1237:3, col:69> Text=" ensures that no thread runs for more than the specified time limit"
|   | |-TextComment 0x5598274813b0 <line:1238:3, col:71> Text=" before other threads of that priority are given a chance to execute."
|   | |-TextComment 0x5598274813d0 <line:1239:3, col:44> Text=" Any thread whose priority is higher than "
|   | |-InlineCommandComment 0x559827481420 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="prio"
|   | |-TextComment 0x559827481440 <col:52, col:72> Text=" is exempted, and may"
|   | `-TextComment 0x559827481460 <line:1240:3, col:74> Text=" execute as long as desired without being preempted due to time slicing."
|   |-ParagraphComment 0x559827481590 <line:1242:3, line:1245:32>
|   | |-TextComment 0x5598274814f0 <line:1242:3, col:80> Text=" Time slicing only limits the maximum amount of time a thread may continuously"
|   | |-TextComment 0x559827481510 <line:1243:3, col:74> Text=" execute. Once the scheduler selects a thread for execution, there is no"
|   | |-TextComment 0x559827481530 <line:1244:3, col:79> Text=" minimum guaranteed time the thread will execute before threads of greater or"
|   | `-TextComment 0x559827481550 <line:1245:3, col:32> Text=" equal priority are scheduled."
|   |-ParagraphComment 0x559827481630 <line:1247:3, line:1249:46>
|   | |-TextComment 0x5598274815b0 <line:1247:3, col:68> Text=" When the current thread is the only one of that priority eligible"
|   | |-TextComment 0x5598274815d0 <line:1248:3, col:71> Text=" for execution, this routine has no effect; the thread is immediately"
|   | `-TextComment 0x5598274815f0 <line:1249:3, col:46> Text=" rescheduled after the slice period expires."
|   |-ParagraphComment 0x559827481780 <line:1251:3, col:65>
|   | |-TextComment 0x559827481650 <col:3, col:36> Text=" To disable timeslicing, set both "
|   | |-InlineCommandComment 0x5598274816a0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x5598274816c0 <col:45, col:49> Text=" and "
|   | |-InlineCommandComment 0x559827481710 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="prio"
|   | `-TextComment 0x559827481730 <col:57, col:65> Text=" to zero."
|   |-ParagraphComment 0x5598274817d0 <line:1253:3>
|   | `-TextComment 0x5598274817a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274817f0 <col:4, line:1254:3> [in] implicitly Param="slice" ParamIndex=0
|   | `-ParagraphComment 0x5598274818a0 <line:1253:16, line:1254:3>
|   |   |-TextComment 0x559827481850 <line:1253:16, col:60> Text=" Maximum time slice length (in milliseconds)."
|   |   `-TextComment 0x559827481870 <line:1254:3> Text=" "
|   |-ParamCommandComment 0x5598274818c0 <col:4, col:71> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x559827481950 <col:15, col:71>
|   |   `-TextComment 0x559827481920 <col:15, col:71> Text=" Highest thread priority level eligible for time slicing."
|   |-ParagraphComment 0x5598274819a0 <line:1256:3>
|   | `-TextComment 0x559827481970 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274819c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827481a20 <col:11, col:14>
|       `-TextComment 0x5598274819f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273d2be8 <line:1278:1, col:29> col:13 k_is_in_isr 'bool (void)' extern
| `-FullComment 0x559827481ed0 <line:1268:3, line:1276:37>
|   |-ParagraphComment 0x559827481b40 <line:1268:3>
|   | `-TextComment 0x559827481b10 <col:3> Text=" "
|   |-BlockCommandComment 0x559827481b60 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x559827481bc0 <col:10, col:58>
|   |   `-TextComment 0x559827481b90 <col:10, col:58> Text=" Determine if code is running at interrupt level."
|   |-ParagraphComment 0x559827481c30 <line:1270:3, line:1271:36>
|   | |-TextComment 0x559827481be0 <line:1270:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x559827481c00 <line:1271:3, col:36> Text=" whether it is a thread or an ISR."
|   |-ParagraphComment 0x559827481c80 <line:1273:3>
|   | `-TextComment 0x559827481c50 <col:3> Text=" "
|   |-BlockCommandComment 0x559827481ca0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559827481d00 <col:9, col:31>
|   |   `-TextComment 0x559827481cd0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559827481d50 <line:1275:3>
|   | `-TextComment 0x559827481d20 <col:3> Text=" "
|   |-BlockCommandComment 0x559827481d70 <col:4, line:1276:3> Name="return"
|   | `-ParagraphComment 0x559827481df0 <line:1275:11, line:1276:3>
|   |   |-TextComment 0x559827481da0 <line:1275:11, col:40> Text=" false if invoked by a thread."
|   |   `-TextComment 0x559827481dc0 <line:1276:3> Text=" "
|   `-BlockCommandComment 0x559827481e10 <col:4, col:37> Name="return"
|     `-ParagraphComment 0x559827481e70 <col:11, col:37>
|       `-TextComment 0x559827481e40 <col:11, col:37> Text=" true if invoked by an ISR."
|-FunctionDecl 0x5598273d2d50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1296:39> col:15 k_is_preempt_thread 'int (void)' static inline
| `-FullComment 0x5598274823e0 <line:1281:3, line:1294:55>
|   |-ParagraphComment 0x559827481f70 <line:1281:3>
|   | `-TextComment 0x559827481f40 <col:3> Text=" "
|   |-BlockCommandComment 0x559827481f90 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x559827481ff0 <col:10, col:63>
|   |   `-TextComment 0x559827481fc0 <col:10, col:63> Text=" Determine if code is running in a preemptible thread."
|   |-ParagraphComment 0x559827482090 <line:1283:3, line:1285:52>
|   | |-TextComment 0x559827482010 <line:1283:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | |-TextComment 0x559827482030 <line:1284:3, col:78> Text=" whether it can be preempted by another thread. The routine returns a 'true'"
|   | `-TextComment 0x559827482050 <line:1285:3, col:52> Text=" value if all of the following conditions are met:"
|   |-ParagraphComment 0x559827482130 <line:1287:3, line:1289:45>
|   | |-TextComment 0x5598274820b0 <line:1287:3, col:49> Text=" - The code is running in a thread, not at ISR."
|   | |-TextComment 0x5598274820d0 <line:1288:3, col:55> Text=" - The thread's priority is in the preemptible range."
|   | `-TextComment 0x5598274820f0 <line:1289:3, col:45> Text=" - The thread has not locked the scheduler."
|   |-ParagraphComment 0x559827482180 <line:1291:3>
|   | `-TextComment 0x559827482150 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274821a0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559827482200 <col:9, col:31>
|   |   `-TextComment 0x5598274821d0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559827482250 <line:1293:3>
|   | `-TextComment 0x559827482220 <col:3> Text=" "
|   |-BlockCommandComment 0x559827482270 <col:4, line:1294:3> Name="return"
|   | `-ParagraphComment 0x5598274822f0 <line:1293:11, line:1294:3>
|   |   |-TextComment 0x5598274822a0 <line:1293:11, col:61> Text=" 0 if invoked by an ISR or by a cooperative thread."
|   |   `-TextComment 0x5598274822c0 <line:1294:3> Text=" "
|   `-BlockCommandComment 0x559827482310 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x559827482370 <col:11, col:55>
|       `-TextComment 0x559827482340 <col:11, col:55> Text=" Non-zero if invoked by a preemptible thread."
|-FunctionDecl 0x5598273d2ea8 <line:1309:1, line:1314:1> line:1309:20 k_is_pre_kernel 'bool (void)' static inline
| |-CompoundStmt 0x5598273d30f8 <line:1310:1, line:1314:1>
| | |-DeclStmt 0x5598273d2fc8 <line:1311:2, col:31>
| | | `-VarDecl 0x5598273d2f58 parent 0x55982722a698 <col:2, col:14> col:14 used z_sys_post_kernel 'bool' extern
| | `-ReturnStmt 0x5598273d3058 <line:1313:2, col:10>
| |   `-ImplicitCastExpr 0x5598273d3040 <col:9, col:10> 'bool' <IntegralToBoolean>
| |     `-UnaryOperator 0x5598273d3020 <col:9, col:10> 'int' prefix '!'
| |       `-ImplicitCastExpr 0x5598273d3008 <col:10> 'bool' <LValueToRValue>
| |         `-DeclRefExpr 0x5598273d2fe0 <col:10> 'bool' lvalue Var 0x5598273d2f58 'z_sys_post_kernel' 'bool'
| `-FullComment 0x559827482830 <line:1299:3, line:1307:67>
|   |-ParagraphComment 0x559827482480 <line:1299:3>
|   | `-TextComment 0x559827482450 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274824a0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x559827482500 <col:10, col:64>
|   |   `-TextComment 0x5598274824d0 <col:10, col:64> Text=" Test whether startup is in the before-main-task phase."
|   |-ParagraphComment 0x559827482570 <line:1301:3, line:1302:62>
|   | |-TextComment 0x559827482520 <line:1301:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x559827482540 <line:1302:3, col:62> Text=" whether it being invoked before the kernel is fully active."
|   |-ParagraphComment 0x5598274825c0 <line:1304:3>
|   | `-TextComment 0x559827482590 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274825e0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559827482640 <col:9, col:31>
|   |   `-TextComment 0x559827482610 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559827482690 <line:1306:3>
|   | `-TextComment 0x559827482660 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274826b0 <col:4, line:1307:3> Name="return"
|   | `-ParagraphComment 0x559827482750 <line:1306:11, line:1307:3>
|   |   |-TextComment 0x559827482700 <line:1306:11, col:60> Text=" true if invoked before post-kernel initialization"
|   |   `-TextComment 0x559827482720 <line:1307:3> Text=" "
|   `-BlockCommandComment 0x559827482770 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x5598274827d0 <col:11, col:67>
|       `-TextComment 0x5598274827a0 <col:11, col:67> Text=" false if invoked during/after post-kernel initialization"
|-FunctionDecl 0x5598273d31a8 <line:1343:1, col:30> col:13 k_sched_lock 'void (void)' extern
| `-FullComment 0x559827482d00 <line:1326:3, line:1341:14>
|   |-ParagraphComment 0x5598274828d0 <line:1326:3>
|   | `-TextComment 0x5598274828a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274828f0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x559827482950 <col:10, col:29>
|   |   `-TextComment 0x559827482920 <col:10, col:29> Text=" Lock the scheduler."
|   |-ParagraphComment 0x559827482a40 <line:1328:3, line:1332:78>
|   | |-TextComment 0x559827482970 <line:1328:3, col:75> Text=" This routine prevents the current thread from being preempted by another"
|   | |-TextComment 0x559827482990 <line:1329:3, col:75> Text=" thread by instructing the scheduler to treat it as a cooperative thread."
|   | |-TextComment 0x5598274829b0 <line:1330:3, col:74> Text=" If the thread subsequently performs an operation that makes it unready,"
|   | |-TextComment 0x5598274829d0 <line:1331:3, col:72> Text=" it will be context switched out in the normal manner. When the thread"
|   | `-TextComment 0x5598274829f0 <line:1332:3, col:78> Text=" again becomes the current thread, its non-preemptible status is maintained."
|   |-ParagraphComment 0x559827482a90 <line:1334:3, col:42>
|   | `-TextComment 0x559827482a60 <col:3, col:42> Text=" This routine can be called recursively."
|   |-ParagraphComment 0x559827482ae0 <line:1336:3>
|   | `-TextComment 0x559827482ab0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827482b00 <col:4, line:1339:68> Name="note"
|   | `-ParagraphComment 0x559827482bd0 <line:1336:9, line:1339:68>
|   |   |-TextComment 0x559827482b30 <line:1336:9, col:68> Text=" k_sched_lock() and k_sched_unlock() should normally be used"
|   |   |-TextComment 0x559827482b50 <line:1337:3, col:72> Text=" when the operation being performed can be safely interrupted by ISRs."
|   |   |-TextComment 0x559827482b70 <line:1338:3, col:70> Text=" However, if the amount of processing involved is very small, better"
|   |   `-TextComment 0x559827482b90 <line:1339:3, col:68> Text=" performance may be obtained by using irq_lock() and irq_unlock()."
|   |-ParagraphComment 0x559827482c20 <line:1341:3>
|   | `-TextComment 0x559827482bf0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827482c40 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827482ca0 <col:11, col:14>
|       `-TextComment 0x559827482c70 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273d3308 <line:1354:1, col:32> col:13 k_sched_unlock 'void (void)' extern
| `-FullComment 0x559827482fe0 <line:1346:3, line:1352:14>
|   |-ParagraphComment 0x559827482da0 <line:1346:3>
|   | `-TextComment 0x559827482d70 <col:3> Text=" "
|   |-BlockCommandComment 0x559827482dc0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x559827482e20 <col:10, col:31>
|   |   `-TextComment 0x559827482df0 <col:10, col:31> Text=" Unlock the scheduler."
|   |-ParagraphComment 0x559827482ec0 <line:1348:3, line:1350:41>
|   | |-TextComment 0x559827482e40 <line:1348:3, col:73> Text=" This routine reverses the effect of a previous call to k_sched_lock()."
|   | |-TextComment 0x559827482e60 <line:1349:3, col:77> Text=" A thread must call the routine once for each time it called k_sched_lock()"
|   | `-TextComment 0x559827482e80 <line:1350:3, col:41> Text=" before the thread becomes preemptible."
|   |-ParagraphComment 0x559827482f10 <line:1352:3>
|   | `-TextComment 0x559827482ee0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827482f30 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827482f90 <col:11, col:14>
|       `-TextComment 0x559827482f60 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273d3478 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1371:52> col:16 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x5598273d33f0 <col:41, col:47> col:47 value 'void *'
| `-FullComment 0x559827483570 <line:1357:3, line:1370:1>
|   |-ParagraphComment 0x559827483080 <line:1357:3>
|   | `-TextComment 0x559827483050 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274830a0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x559827483100 <col:10, col:43>
|   |   `-TextComment 0x5598274830d0 <col:10, col:43> Text=" Set current thread's custom data."
|   |-ParagraphComment 0x5598274831a0 <line:1359:3, col:71>
|   | |-TextComment 0x559827483120 <col:3, col:63> Text=" This routine sets the custom data for the current thread to "
|   | |-TextComment 0x559827483140 <col:64> Text="@"
|   | `-TextComment 0x559827483160 <col:65, col:71> Text=" value."
|   |-ParagraphComment 0x559827483240 <line:1361:3, line:1363:44>
|   | |-TextComment 0x5598274831c0 <line:1361:3, col:72> Text=" Custom data is not used by the kernel itself, and is freely available"
|   | |-TextComment 0x5598274831e0 <line:1362:3, col:68> Text=" for a thread to use as it sees fit. It can be used as a framework"
|   | `-TextComment 0x559827483200 <line:1363:3, col:44> Text=" upon which to build thread-local storage."
|   |-ParagraphComment 0x559827483290 <line:1365:3>
|   | `-TextComment 0x559827483260 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274832b0 <col:4, col:38> [in] implicitly Param="value" ParamIndex=0
|   | `-ParagraphComment 0x559827483340 <col:16, col:38>
|   |   `-TextComment 0x559827483310 <col:16, col:38> Text=" New custom data value."
|   |-ParagraphComment 0x559827483390 <line:1367:3>
|   | `-TextComment 0x559827483360 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274833b0 <col:4, col:14> Name="return"
|   | `-ParagraphComment 0x559827483410 <col:11, col:14>
|   |   `-TextComment 0x5598274833e0 <col:11, col:14> Text=" N/A"
|   |-ParagraphComment 0x559827483460 <line:1369:3>
|   | `-TextComment 0x559827483430 <col:3> Text=" "
|   |-VerbatimLineComment 0x559827483480 <col:4, col:21> Text=" K-THREAD-016"
|   `-ParagraphComment 0x5598274834f0 <line:1370:1>
|     `-TextComment 0x5598274834c0 <col:1> Text=" "
|-FunctionDecl 0x5598273d3650 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1381:46> col:17 k_thread_custom_data_get 'void *(void)' static inline
| `-FullComment 0x5598274838c0 <line:1374:3, line:1380:1>
|   |-ParagraphComment 0x559827483610 <line:1374:3>
|   | `-TextComment 0x5598274835e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827483630 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x559827483690 <col:10, col:43>
|   |   `-TextComment 0x559827483660 <col:10, col:43> Text=" Get current thread's custom data."
|   |-ParagraphComment 0x5598274836e0 <line:1376:3, col:63>
|   | `-TextComment 0x5598274836b0 <col:3, col:63> Text=" This routine returns the custom data for the current thread."
|   |-ParagraphComment 0x559827483730 <line:1378:3>
|   | `-TextComment 0x559827483700 <col:3> Text=" "
|   |-BlockCommandComment 0x559827483750 <col:4, line:1379:3> Name="return"
|   | `-ParagraphComment 0x5598274837d0 <line:1378:11, line:1379:3>
|   |   |-TextComment 0x559827483780 <line:1378:11, col:37> Text=" Current custom data value."
|   |   `-TextComment 0x5598274837a0 <line:1379:3> Text=" "
|   |-VerbatimLineComment 0x5598274837f0 <col:4, col:21> Text=" K-THREAD-007"
|   `-ParagraphComment 0x559827483860 <line:1380:1>
|     `-TextComment 0x559827483830 <col:1> Text=" "
|-FunctionDecl 0x5598273d38b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1396:69> col:15 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x5598273d3728 <col:33, col:41> col:41 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5598273d37a0 <col:52, col:64> col:64 value 'const char *'
| `-FullComment 0x559827483e80 <line:1384:3, line:1394:39>
|   |-ParagraphComment 0x559827483960 <line:1384:3>
|   | `-TextComment 0x559827483930 <col:3> Text=" "
|   |-BlockCommandComment 0x559827483980 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5598274839e0 <col:10, col:33>
|   |   `-TextComment 0x5598274839b0 <col:10, col:33> Text=" Set current thread name"
|   |-ParagraphComment 0x559827483a50 <line:1386:3, line:1387:25>
|   | |-TextComment 0x559827483a00 <line:1386:3, col:75> Text=" Set the name of the thread to be used when THREAD_MONITOR is enabled for"
|   | `-TextComment 0x559827483a20 <line:1387:3, col:25> Text=" tracing and debugging."
|   |-ParagraphComment 0x559827483aa0 <line:1389:3>
|   | `-TextComment 0x559827483a70 <col:3> Text=" "
|   |-ParamCommandComment 0x559827483ac0 <col:4, line:1390:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x559827483b70 <line:1389:20, line:1390:3>
|   |   |-TextComment 0x559827483b20 <line:1389:20, col:73> Text=" Thread to set name, or NULL to set the current thread"
|   |   `-TextComment 0x559827483b40 <line:1390:3> Text=" "
|   `-ParamCommandComment 0x559827483b90 <col:4, line:1394:39> [in] implicitly Param="value" ParamIndex=1
|     `-ParagraphComment 0x559827483e30 <line:1390:16, line:1394:39>
|       |-TextComment 0x559827483bf0 <line:1390:16, col:27> Text=" Name string"
|       |-TextComment 0x559827483c10 <line:1391:3> Text=" "
|       |-InlineCommandComment 0x559827483c60 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x559827483c80 <col:11, col:23> Text=" 0 on success"
|       |-TextComment 0x559827483ca0 <line:1392:3> Text=" "
|       |-InlineCommandComment 0x559827483cc0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x559827483ce0 <col:11, col:59> Text=" -EFAULT Memory access error with supplied string"
|       |-TextComment 0x559827483d00 <line:1393:3> Text=" "
|       |-InlineCommandComment 0x559827483d20 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x559827483d40 <col:11, col:63> Text=" -ENOSYS Thread name configuration option not enabled"
|       |-TextComment 0x559827483d60 <line:1394:3> Text=" "
|       |-InlineCommandComment 0x559827483d80 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x559827483da0 <col:11, col:39> Text=" -EINVAL Thread name too long"
|-FunctionDecl 0x5598273d3ab8 <line:1406:1, col:48> col:13 k_thread_name_get 'const char *(k_tid_t)'
| |-ParmVarDecl 0x5598273d39a8 <col:31, col:39> col:39 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5598274841b0 <line:1399:3, line:1404:60>
|   |-ParagraphComment 0x559827483f20 <line:1399:3>
|   | `-TextComment 0x559827483ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827483f40 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x559827483fa0 <col:10, col:25>
|   |   `-TextComment 0x559827483f70 <col:10, col:25> Text=" Get thread name"
|   |-ParagraphComment 0x559827483ff0 <line:1401:3, col:27>
|   | `-TextComment 0x559827483fc0 <col:3, col:27> Text=" Get the name of a thread"
|   |-ParagraphComment 0x559827484040 <line:1403:3>
|   | `-TextComment 0x559827484010 <col:3> Text=" "
|   `-ParamCommandComment 0x559827484060 <col:4, line:1404:60> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x559827484160 <line:1403:20, line:1404:60>
|       |-TextComment 0x5598274840c0 <line:1403:20, col:29> Text=" Thread ID"
|       |-TextComment 0x5598274840e0 <line:1404:3> Text=" "
|       |-InlineCommandComment 0x559827484100 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x559827484120 <col:11, col:60> Text=" Thread name, or NULL if configuration not enabled"
|-FunctionDecl 0x5598273d3db8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1420:17> line:1419:15 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x5598273d3b98 <col:34, col:42> col:42 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5598273d3c10 <col:53, col:59> col:59 buf 'char *'
| |-ParmVarDecl 0x5598273d3c80 <line:1420:6, col:13> col:13 size 'size_t':'unsigned long'
| `-FullComment 0x5598274847d0 <line:1409:3, line:1417:20>
|   |-ParagraphComment 0x559827484250 <line:1409:3>
|   | `-TextComment 0x559827484220 <col:3> Text=" "
|   |-BlockCommandComment 0x559827484270 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5598274842d0 <col:10, col:53>
|   |   `-TextComment 0x5598274842a0 <col:10, col:53> Text=" Copy the thread name into a supplied buffer"
|   |-ParagraphComment 0x559827484320 <line:1411:3>
|   | `-TextComment 0x5598274842f0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827484340 <col:4, line:1412:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x5598274843f0 <line:1411:20, line:1412:3>
|   |   |-TextComment 0x5598274843a0 <line:1411:20, col:53> Text=" Thread to obtain name information"
|   |   `-TextComment 0x5598274843c0 <line:1412:3> Text=" "
|   |-ParamCommandComment 0x559827484410 <col:4, line:1413:3> [in] implicitly Param="buf" ParamIndex=1
|   | `-ParagraphComment 0x5598274844c0 <line:1412:14, line:1413:3>
|   |   |-TextComment 0x559827484470 <line:1412:14, col:32> Text=" Destination buffer"
|   |   `-TextComment 0x559827484490 <line:1413:3> Text=" "
|   `-ParamCommandComment 0x5598274844e0 <col:4, line:1417:20> [in] implicitly Param="size" ParamIndex=2
|     `-ParagraphComment 0x559827484780 <line:1413:15, line:1417:20>
|       |-TextComment 0x559827484540 <line:1413:15, col:38> Text=" Destination buffer size"
|       |-TextComment 0x559827484560 <line:1414:3> Text=" "
|       |-InlineCommandComment 0x559827484580 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x5598274845a0 <col:11, col:47> Text=" -ENOSPC Destination buffer too small"
|       |-TextComment 0x5598274845c0 <line:1415:3> Text=" "
|       |-InlineCommandComment 0x5598274845e0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x559827484600 <col:11, col:38> Text=" -EFAULT Memory access error"
|       |-TextComment 0x559827484620 <line:1416:3> Text=" "
|       |-InlineCommandComment 0x559827484640 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x559827484660 <col:11, col:50> Text=" -ENOSYS Thread name feature not enabled"
|       |-TextComment 0x559827484680 <line:1417:3> Text=" "
|       |-InlineCommandComment 0x5598274846a0 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x5598274846c0 <col:11, col:20> Text=" 0 Success"
|-FunctionDecl 0x5598273d3f38 <line:1430:1, col:49> col:13 k_thread_state_str 'const char *(k_tid_t)'
| |-ParmVarDecl 0x5598273d3ea8 <col:32, col:40> col:40 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x559827484b00 <line:1423:3, line:1428:61>
|   |-ParagraphComment 0x559827484870 <line:1423:3>
|   | `-TextComment 0x559827484840 <col:3> Text=" "
|   |-BlockCommandComment 0x559827484890 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5598274848f0 <col:10, col:33>
|   |   `-TextComment 0x5598274848c0 <col:10, col:33> Text=" Get thread state string"
|   |-ParagraphComment 0x559827484940 <line:1425:3, col:45>
|   | `-TextComment 0x559827484910 <col:3, col:45> Text=" Get the human friendly thread state string"
|   |-ParagraphComment 0x559827484990 <line:1427:3>
|   | `-TextComment 0x559827484960 <col:3> Text=" "
|   `-ParamCommandComment 0x5598274849b0 <col:4, line:1428:61> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x559827484ab0 <line:1427:20, line:1428:61>
|       |-TextComment 0x559827484a10 <line:1427:20, col:29> Text=" Thread ID"
|       |-TextComment 0x559827484a30 <line:1428:3> Text=" "
|       |-InlineCommandComment 0x559827484a50 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x559827484a70 <col:11, col:61> Text=" Thread state string, empty if no state flag is set"
|-RecordDecl 0x5598273d41b8 prev 0x5598273c2390 <line:1517:1, line:1545:1> line:1517:8 struct k_timer definition
| |-FullComment 0x559827484c50 <line:1514:3, col:24>
| | `-ParagraphComment 0x559827484c20 <col:3, col:24>
| |   |-TextComment 0x559827484b70 <col:3> Text=" "
| |   |-InlineCommandComment 0x559827484bc0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x559827484be0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5598273d4260 <line:1523:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| |-FieldDecl 0x5598273d42b8 <line:1526:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5598273d4550 <line:1529:2, col:41> col:9 expiry_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x5598273d66b8 <line:1532:2, col:39> col:9 stop_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x5598273d6710 <line:1535:2, col:8> col:8 period 's32_t':'int'
| |-FieldDecl 0x5598273d6768 <line:1538:2, col:8> col:8 status 'u32_t':'unsigned int'
| `-FieldDecl 0x5598273d67c8 <line:1541:2, col:8> col:8 referenced user_data 'void *'
|-TypedefDecl 0x5598273d69b8 <line:1587:1, col:55> col:16 referenced k_timer_expiry_t 'void (*)(struct k_timer *)'
| |-PointerType 0x5598273d44f0 'void (*)(struct k_timer *)'
| | `-ParenType 0x5598273d4490 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x5598273d4450 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x55982722a6f0 'void'
| |     `-PointerType 0x5598273d4360 'struct k_timer *'
| |       `-ElaboratedType 0x5598273d4300 'struct k_timer' sugar
| |         `-RecordType 0x5598273c2420 'struct k_timer'
| |           `-Record 0x5598273d41b8 'k_timer'
| `-FullComment 0x5598274850e0 <line:1576:3, line:1585:14>
|   |-ParagraphComment 0x559827484cf0 <line:1576:3>
|   | `-TextComment 0x559827484cc0 <col:3> Text=" "
|   |-VerbatimLineComment 0x559827484d10 <col:4, col:29> Text=" k_timer_expiry_t"
|   |-ParagraphComment 0x559827484d80 <line:1577:3>
|   | `-TextComment 0x559827484d50 <col:3> Text=" "
|   |-BlockCommandComment 0x559827484da0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x559827484e00 <col:10, col:37>
|   |   `-TextComment 0x559827484dd0 <col:10, col:37> Text=" Timer expiry function type."
|   |-ParagraphComment 0x559827484ea0 <line:1579:3, line:1581:54>
|   | |-TextComment 0x559827484e20 <line:1579:3, col:78> Text=" A timer's expiry function is executed by the system clock interrupt handler"
|   | |-TextComment 0x559827484e40 <line:1580:3, col:76> Text=" each time the timer expires. The expiry function is optional, and is only"
|   | `-TextComment 0x559827484e60 <line:1581:3, col:54> Text=" invoked if the timer has been initialized with one."
|   |-ParagraphComment 0x559827484ef0 <line:1583:3>
|   | `-TextComment 0x559827484ec0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827484f10 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559827484fa0 <col:16, col:37>
|   |   `-TextComment 0x559827484f70 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x559827484ff0 <line:1585:3>
|   | `-TextComment 0x559827484fc0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827485010 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827485070 <col:11, col:14>
|       `-TextComment 0x559827485040 <col:11, col:14> Text=" N/A"
|-TypedefDecl 0x5598273d6af8 <line:1602:1, col:53> col:16 referenced k_timer_stop_t 'void (*)(struct k_timer *)'
| |-PointerType 0x5598273d44f0 'void (*)(struct k_timer *)'
| | `-ParenType 0x5598273d4490 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x5598273d4450 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x55982722a6f0 'void'
| |     `-PointerType 0x5598273d4360 'struct k_timer *'
| |       `-ElaboratedType 0x5598273d4300 'struct k_timer' sugar
| |         `-RecordType 0x5598273c2420 'struct k_timer'
| |           `-Record 0x5598273d41b8 'k_timer'
| `-FullComment 0x559827485590 <line:1590:3, line:1600:14>
|   |-ParagraphComment 0x559827485180 <line:1590:3>
|   | `-TextComment 0x559827485150 <col:3> Text=" "
|   |-VerbatimLineComment 0x5598274851a0 <col:4, col:27> Text=" k_timer_stop_t"
|   |-ParagraphComment 0x559827485210 <line:1591:3>
|   | `-TextComment 0x5598274851e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827485230 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x559827485290 <col:10, col:35>
|   |   `-TextComment 0x559827485260 <col:10, col:35> Text=" Timer stop function type."
|   |-ParagraphComment 0x559827485350 <line:1593:3, line:1596:24>
|   | |-TextComment 0x5598274852b0 <line:1593:3, col:75> Text=" A timer's stop function is executed if the timer is stopped prematurely."
|   | |-TextComment 0x5598274852d0 <line:1594:3, col:71> Text=" The function runs in the context of the thread that stops the timer."
|   | |-TextComment 0x5598274852f0 <line:1595:3, col:75> Text=" The stop function is optional, and is only invoked if the timer has been"
|   | `-TextComment 0x559827485310 <line:1596:3, col:24> Text=" initialized with one."
|   |-ParagraphComment 0x5598274853a0 <line:1598:3>
|   | `-TextComment 0x559827485370 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274853c0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559827485450 <col:16, col:37>
|   |   `-TextComment 0x559827485420 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5598274854a0 <line:1600:3>
|   | `-TextComment 0x559827485470 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274854c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827485520 <col:11, col:14>
|       `-TextComment 0x5598274854f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273d6e20 <line:1630:1, line:1632:27> line:1630:13 k_timer_init 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' extern
| |-ParmVarDecl 0x5598273d6bd0 <col:26, col:42> col:42 timer 'struct k_timer *'
| |-ParmVarDecl 0x5598273d6c60 <line:1631:5, col:22> col:22 expiry_fn 'k_timer_expiry_t':'void (*)(struct k_timer *)'
| |-ParmVarDecl 0x5598273d6cf0 <line:1632:5, col:20> col:20 stop_fn 'k_timer_stop_t':'void (*)(struct k_timer *)'
| `-FullComment 0x559827485ae0 <line:1620:3, line:1628:14>
|   |-ParagraphComment 0x559827485630 <line:1620:3>
|   | `-TextComment 0x559827485600 <col:3> Text=" "
|   |-BlockCommandComment 0x559827485650 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5598274856b0 <col:10, col:29>
|   |   `-TextComment 0x559827485680 <col:10, col:29> Text=" Initialize a timer."
|   |-ParagraphComment 0x559827485700 <line:1622:3, col:60>
|   | `-TextComment 0x5598274856d0 <col:3, col:60> Text=" This routine initializes a timer, prior to its first use."
|   |-ParagraphComment 0x559827485750 <line:1624:3>
|   | `-TextComment 0x559827485720 <col:3> Text=" "
|   |-ParamCommandComment 0x559827485770 <col:4, line:1625:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559827485820 <line:1624:16, line:1625:3>
|   |   |-TextComment 0x5598274857d0 <line:1624:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x5598274857f0 <line:1625:3> Text=" "
|   |-ParamCommandComment 0x559827485840 <col:4, line:1626:3> [in] implicitly Param="expiry_fn" ParamIndex=1
|   | `-ParagraphComment 0x5598274858f0 <line:1625:20, line:1626:3>
|   |   |-TextComment 0x5598274858a0 <line:1625:20, col:67> Text=" Function to invoke each time the timer expires."
|   |   `-TextComment 0x5598274858c0 <line:1626:3> Text=" "
|   |-ParamCommandComment 0x559827485910 <col:4, col:77> [in] implicitly Param="stop_fn" ParamIndex=2
|   | `-ParagraphComment 0x5598274859a0 <col:18, col:77>
|   |   `-TextComment 0x559827485970 <col:18, col:77> Text="   Function to invoke if the timer is stopped while running."
|   |-ParagraphComment 0x5598274859f0 <line:1628:3>
|   | `-TextComment 0x5598274859c0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827485a10 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827485a70 <col:11, col:14>
|       `-TextComment 0x559827485a40 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273d6f28 <line:1634:1, col:30> col:13 k_trigger_update 'void ()' extern
|-FunctionDecl 0x5598273d7230 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1653:37> line:1652:16 k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x5598273d7020 <col:30, col:46> col:46 timer 'struct k_timer *'
| |-ParmVarDecl 0x5598273d7090 <line:1653:9, col:15> col:15 duration 's32_t':'int'
| |-ParmVarDecl 0x5598273d7100 <col:25, col:31> col:31 period 's32_t':'int'
| `-FullComment 0x5598274860f0 <line:1637:3, line:1650:14>
|   |-ParagraphComment 0x559827485b80 <line:1637:3>
|   | `-TextComment 0x559827485b50 <col:3> Text=" "
|   |-BlockCommandComment 0x559827485ba0 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x559827485c00 <col:10, col:24>
|   |   `-TextComment 0x559827485bd0 <col:10, col:24> Text=" Start a timer."
|   |-ParagraphComment 0x559827485c70 <line:1639:3, line:1640:71>
|   | |-TextComment 0x559827485c20 <line:1639:3, col:72> Text=" This routine starts a timer, and resets its status to zero. The timer"
|   | `-TextComment 0x559827485c40 <line:1640:3, col:71> Text=" begins counting down using the specified duration and period values."
|   |-ParagraphComment 0x559827485d10 <line:1642:3, line:1644:44>
|   | |-TextComment 0x559827485c90 <line:1642:3, col:68> Text=" Attempting to start a timer that is already running is permitted."
|   | |-TextComment 0x559827485cb0 <line:1643:3, col:73> Text=" The timer's status is reset to zero and the timer begins counting down"
|   | `-TextComment 0x559827485cd0 <line:1644:3, col:44> Text=" using the new duration and period values."
|   |-ParagraphComment 0x559827485d60 <line:1646:3>
|   | `-TextComment 0x559827485d30 <col:3> Text=" "
|   |-ParamCommandComment 0x559827485d80 <col:4, line:1647:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559827485e30 <line:1646:16, line:1647:3>
|   |   |-TextComment 0x559827485de0 <line:1646:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x559827485e00 <line:1647:3> Text=" "
|   |-ParamCommandComment 0x559827485e50 <col:4, line:1648:3> [in] implicitly Param="duration" ParamIndex=1
|   | `-ParagraphComment 0x559827485f00 <line:1647:19, line:1648:3>
|   |   |-TextComment 0x559827485eb0 <line:1647:19, col:61> Text="  Initial timer duration (in milliseconds)."
|   |   `-TextComment 0x559827485ed0 <line:1648:3> Text=" "
|   |-ParamCommandComment 0x559827485f20 <col:4, col:51> [in] implicitly Param="period" ParamIndex=2
|   | `-ParagraphComment 0x559827485fb0 <col:17, col:51>
|   |   `-TextComment 0x559827485f80 <col:17, col:51> Text="    Timer period (in milliseconds)."
|   |-ParagraphComment 0x559827486000 <line:1650:3>
|   | `-TextComment 0x559827485fd0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827486020 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827486080 <col:11, col:14>
|       `-TextComment 0x559827486050 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273d73c8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1671:50> col:16 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x5598273d7340 <col:29, col:45> col:45 timer 'struct k_timer *'
| `-FullComment 0x5598274866a0 <line:1656:3, line:1669:14>
|   |-ParagraphComment 0x559827486190 <line:1656:3>
|   | `-TextComment 0x559827486160 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274861b0 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x559827486210 <col:10, col:23>
|   |   `-TextComment 0x5598274861e0 <col:10, col:23> Text=" Stop a timer."
|   |-ParagraphComment 0x559827486280 <line:1658:3, line:1659:43>
|   | |-TextComment 0x559827486230 <line:1658:3, col:77> Text=" This routine stops a running timer prematurely. The timer's stop function,"
|   | `-TextComment 0x559827486250 <line:1659:3, col:43> Text=" if one exists, is invoked by the caller."
|   |-ParagraphComment 0x5598274862f0 <line:1661:3, line:1662:23>
|   | |-TextComment 0x5598274862a0 <line:1661:3, col:74> Text=" Attempting to stop a timer that is not running is permitted, but has no"
|   | `-TextComment 0x5598274862c0 <line:1662:3, col:23> Text=" effect on the timer."
|   |-ParagraphComment 0x559827486340 <line:1664:3>
|   | `-TextComment 0x559827486310 <col:3> Text=" "
|   |-BlockCommandComment 0x559827486360 <col:4, line:1665:48> Name="note"
|   | `-ParagraphComment 0x559827486460 <line:1664:9, line:1665:48>
|   |   |-TextComment 0x559827486390 <line:1664:9, col:78> Text=" Can be called by ISRs.  The stop handler has to be callable from ISRs"
|   |   |-TextComment 0x5598274863b0 <line:1665:3, col:6> Text=" if "
|   |   |-InlineCommandComment 0x559827486400 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="k_timer_stop"
|   |   `-TextComment 0x559827486420 <col:22, col:48> Text=" is to be called from ISRs."
|   |-ParagraphComment 0x5598274864b0 <line:1667:3>
|   | `-TextComment 0x559827486480 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274864d0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559827486560 <col:16, col:37>
|   |   `-TextComment 0x559827486530 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5598274865b0 <line:1669:3>
|   | `-TextComment 0x559827486580 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274865d0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827486630 <col:11, col:14>
|       `-TextComment 0x559827486600 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273d75c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1685:57> col:17 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5598273d74c0 <col:36, col:52> col:52 timer 'struct k_timer *'
| `-FullComment 0x559827486ac0 <line:1674:3, line:1683:24>
|   |-ParagraphComment 0x559827486750 <line:1674:3>
|   | `-TextComment 0x559827486720 <col:3> Text=" "
|   |-BlockCommandComment 0x559827486770 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5598274867d0 <col:10, col:28>
|   |   `-TextComment 0x5598274867a0 <col:10, col:28> Text=" Read timer status."
|   |-ParagraphComment 0x559827486840 <line:1676:3, line:1677:49>
|   | |-TextComment 0x5598274867f0 <line:1676:3, col:77> Text=" This routine reads the timer's status, which indicates the number of times"
|   | `-TextComment 0x559827486810 <line:1677:3, col:49> Text=" it has expired since its status was last read."
|   |-ParagraphComment 0x559827486890 <line:1679:3, col:58>
|   | `-TextComment 0x559827486860 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x5598274868e0 <line:1681:3>
|   | `-TextComment 0x5598274868b0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827486900 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559827486990 <col:16, col:37>
|   |   `-TextComment 0x559827486960 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5598274869e0 <line:1683:3>
|   | `-TextComment 0x5598274869b0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827486a00 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x559827486a60 <col:11, col:24>
|       `-TextComment 0x559827486a30 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x5598273d7fb8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1704:58> col:17 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5598273d7f30 <col:37, col:53> col:53 timer 'struct k_timer *'
| `-FullComment 0x559827486fa0 <line:1688:3, line:1702:24>
|   |-ParagraphComment 0x559827486b60 <line:1688:3>
|   | `-TextComment 0x559827486b30 <col:3> Text=" "
|   |-BlockCommandComment 0x559827486b80 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x559827486be0 <col:10, col:49>
|   |   `-TextComment 0x559827486bb0 <col:10, col:49> Text=" Synchronize thread to timer expiration."
|   |-ParagraphComment 0x559827486ca0 <line:1690:3, line:1693:73>
|   | |-TextComment 0x559827486c00 <line:1690:3, col:78> Text=" This routine blocks the calling thread until the timer's status is non-zero"
|   | |-TextComment 0x559827486c20 <line:1691:3, col:76> Text=" (indicating that it has expired at least once since it was last examined)"
|   | |-TextComment 0x559827486c40 <line:1692:3, col:68> Text=" or the timer is stopped. If the timer status is already non-zero,"
|   | `-TextComment 0x559827486c60 <line:1693:3, col:73> Text=" or the timer is already stopped, the caller continues without waiting."
|   |-ParagraphComment 0x559827486cf0 <line:1695:3, col:58>
|   | `-TextComment 0x559827486cc0 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x559827486d60 <line:1697:3, line:1698:20>
|   | |-TextComment 0x559827486d10 <line:1697:3, col:74> Text=" This routine must not be used by interrupt handlers, since they are not"
|   | `-TextComment 0x559827486d30 <line:1698:3, col:20> Text=" allowed to block."
|   |-ParagraphComment 0x559827486db0 <line:1700:3>
|   | `-TextComment 0x559827486d80 <col:3> Text=" "
|   |-ParamCommandComment 0x559827486dd0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559827486e60 <col:16, col:37>
|   |   `-TextComment 0x559827486e30 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x559827486eb0 <line:1702:3>
|   | `-TextComment 0x559827486e80 <col:3> Text=" "
|   `-BlockCommandComment 0x559827486ed0 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x559827486f30 <col:11, col:24>
|       `-TextComment 0x559827486f00 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x5598273d8190 <line:1706:1, col:58> col:14 used z_timeout_remaining 's32_t (struct _timeout *)' extern
| `-ParmVarDecl 0x5598273d8088 <col:34, col:51> col:51 timeout 'struct _timeout *'
|-FunctionDecl 0x5598273d8318 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1718:60> col:17 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5598273d8290 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x559827487360 <line:1709:3, line:1716:44>
|   |-ParagraphComment 0x559827487040 <line:1709:3>
|   | `-TextComment 0x559827487010 <col:3> Text=" "
|   |-BlockCommandComment 0x559827487060 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5598274870c0 <col:10, col:57>
|   |   `-TextComment 0x559827487090 <col:10, col:57> Text=" Get time remaining before a timer next expires."
|   |-ParagraphComment 0x559827487130 <line:1711:3, line:1712:68>
|   | |-TextComment 0x5598274870e0 <line:1711:3, col:74> Text=" This routine computes the (approximate) time remaining before a running"
|   | `-TextComment 0x559827487100 <line:1712:3, col:68> Text=" timer next expires. If the timer is not running, it returns zero."
|   |-ParagraphComment 0x559827487180 <line:1714:3>
|   | `-TextComment 0x559827487150 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274871a0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559827487230 <col:16, col:37>
|   |   `-TextComment 0x559827487200 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x559827487280 <line:1716:3>
|   | `-TextComment 0x559827487250 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274872a0 <col:4, col:44> Name="return"
|     `-ParagraphComment 0x559827487300 <col:11, col:44>
|       `-TextComment 0x5598274872d0 <col:11, col:44> Text=" Remaining time (in milliseconds)."
|-FunctionDecl 0x5598273d8470 <line:1720:1, line:1724:1> line:1720:21 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5598273d83e8 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x5598273d89f8 <line:1721:1, line:1724:1>
|   |-DeclStmt 0x5598273d86f0 <line:1722:2, col:58>
|   | `-VarDecl 0x5598273d8528 <col:2, col:57> col:14 used ticks 'const s32_t':'const int' cinit
|   |   `-CallExpr 0x5598273d86c0 <col:22, col:57> 's32_t':'int'
|   |     |-ImplicitCastExpr 0x5598273d86a8 <col:22> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5598273d8588 <col:22> 's32_t (struct _timeout *)' Function 0x5598273d8190 'z_timeout_remaining' 's32_t (struct _timeout *)'
|   |     `-UnaryOperator 0x5598273d8628 <col:42, col:50> 'struct _timeout *' prefix '&'
|   |       `-MemberExpr 0x5598273d85f0 <col:43, col:50> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x5598273d4260
|   |         `-ImplicitCastExpr 0x5598273d85d8 <col:43> 'struct k_timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5598273d85b0 <col:43> 'struct k_timer *' lvalue ParmVar 0x5598273d83e8 'timer' 'struct k_timer *'
|   `-ReturnStmt 0x5598273d89b0 <line:1723:2, col:61>
|     `-ConditionalOperator 0x5598273d8928 <col:9, col:61> 'unsigned int'
|       |-ParenExpr 0x5598273d8790 <col:9, col:19> 'int'
|       | `-BinaryOperator 0x5598273d8768 <col:10, col:18> 'int' '>'
|       |   |-ImplicitCastExpr 0x5598273d8750 <col:10> 's32_t':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5598273d8708 <col:10> 'const s32_t':'const int' lvalue Var 0x5598273d8528 'ticks' 'const s32_t':'const int'
|       |   `-IntegerLiteral 0x5598273d8730 <col:18> 'int' 0
|       |-CStyleCastExpr 0x5598273d88e0 <col:23, col:57> 'u32_t':'unsigned int' <IntegralCast>
|       | `-CallExpr 0x5598273d8870 <col:30, col:57> 'u64_t':'unsigned long long'
|       |   |-ImplicitCastExpr 0x5598273d8858 <col:30> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5598273d87b0 <col:30> 'u64_t (u64_t)' Function 0x5598273a8210 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
|       |   `-ImplicitCastExpr 0x5598273d88b8 <col:52> 'u64_t':'unsigned long long' <IntegralCast>
|       |     `-ImplicitCastExpr 0x5598273d88a0 <col:52> 's32_t':'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x5598273d87d8 <col:52> 'const s32_t':'const int' lvalue Var 0x5598273d8528 'ticks' 'const s32_t':'const int'
|       `-IntegerLiteral 0x5598273d8908 <col:61> 'unsigned int' 0
|-FunctionDecl 0x5598273d8bd0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1740:76> col:16 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x5598273d8a40 <col:38, col:54> col:54 timer 'struct k_timer *'
| |-ParmVarDecl 0x5598273d8ab8 <col:61, col:67> col:67 user_data 'void *'
| `-FullComment 0x559827487970 <line:1727:3, line:1738:14>
|   |-ParagraphComment 0x559827487400 <line:1727:3>
|   | `-TextComment 0x5598274873d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827487420 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x559827487480 <col:10, col:52>
|   |   `-TextComment 0x559827487450 <col:10, col:52> Text=" Associate user-specific data with a timer."
|   |-ParagraphComment 0x5598274875f0 <line:1729:3, line:1730:9>
|   | |-TextComment 0x5598274874a0 <line:1729:3, col:28> Text=" This routine records the "
|   | |-InlineCommandComment 0x5598274874f0 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="user_data"
|   | |-TextComment 0x559827487510 <col:41, col:50> Text=" with the "
|   | |-InlineCommandComment 0x559827487560 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="timer,"
|   | |-TextComment 0x559827487580 <col:60, col:75> Text=" to be retrieved"
|   | `-TextComment 0x5598274875a0 <line:1730:3, col:9> Text=" later."
|   |-ParagraphComment 0x559827487660 <line:1732:3, line:1733:73>
|   | |-TextComment 0x559827487610 <line:1732:3, col:78> Text=" It can be used e.g. in a timer handler shared across multiple subsystems to"
|   | `-TextComment 0x559827487630 <line:1733:3, col:73> Text=" retrieve data specific to the subsystem this timer is associated with."
|   |-ParagraphComment 0x5598274876b0 <line:1735:3>
|   | `-TextComment 0x559827487680 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274876d0 <col:4, line:1736:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559827487780 <line:1735:16, line:1736:3>
|   |   |-TextComment 0x559827487730 <line:1735:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x559827487750 <line:1736:3> Text=" "
|   |-ParamCommandComment 0x5598274877a0 <col:4, col:58> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x559827487830 <col:20, col:58>
|   |   `-TextComment 0x559827487800 <col:20, col:58> Text=" User data to associate with the timer."
|   |-ParagraphComment 0x559827487880 <line:1738:3>
|   | `-TextComment 0x559827487850 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274878a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827487900 <col:11, col:14>
|       `-TextComment 0x5598274878d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273d8dd8 <line:1745:1, line:1749:1> line:1745:20 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x5598273d8cd0 <col:49, col:65> col:65 used timer 'struct k_timer *'
| |-ParmVarDecl 0x5598273d8d48 <line:1746:13, col:19> col:19 used user_data 'void *'
| |-CompoundStmt 0x5598273d93c8 <line:1747:1, line:1749:1>
| | `-BinaryOperator 0x5598273d9378 <line:1748:2, col:21> 'void *' '='
| |   |-MemberExpr 0x5598273d9300 <col:2, col:9> 'void *' lvalue ->user_data 0x5598273d67c8
| |   | `-ImplicitCastExpr 0x5598273d8eb0 <col:2> 'struct k_timer *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5598273d8e88 <col:2> 'struct k_timer *' lvalue ParmVar 0x5598273d8cd0 'timer' 'struct k_timer *'
| |   `-ImplicitCastExpr 0x5598273d9360 <col:21> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x5598273d9338 <col:21> 'void *' lvalue ParmVar 0x5598273d8d48 'user_data' 'void *'
| `-FullComment 0x559827487a60 <line:1743:3, col:12>
|   `-ParagraphComment 0x559827487a30 <col:3, col:12>
|     |-TextComment 0x5598274879e0 <col:3> Text=" "
|     `-InlineCommandComment 0x559827487a00 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5598273d9518 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1758:60> col:17 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x5598273d9408 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x559827487da0 <line:1752:3, line:1756:25>
|   |-ParagraphComment 0x559827487b00 <line:1752:3>
|   | `-TextComment 0x559827487ad0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827487b20 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x559827487b80 <col:10, col:55>
|   |   `-TextComment 0x559827487b50 <col:10, col:55> Text=" Retrieve the user-specific data from a timer."
|   |-ParagraphComment 0x559827487bd0 <line:1754:3>
|   | `-TextComment 0x559827487ba0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827487bf0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x559827487c80 <col:16, col:37>
|   |   `-TextComment 0x559827487c50 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x559827487cd0 <line:1756:3>
|   | `-TextComment 0x559827487ca0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827487cf0 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x559827487d50 <col:11, col:25>
|       `-TextComment 0x559827487d20 <col:11, col:25> Text=" The user data."
|-FunctionDecl 0x5598273d9678 <line:1760:1, line:1763:1> line:1760:21 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x5598273d95e8 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x5598273d9858 <line:1761:1, line:1763:1>
|   `-ReturnStmt 0x5598273d97b0 <line:1762:2, col:16>
|     `-ImplicitCastExpr 0x5598273d9798 <col:9, col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5598273d9760 <col:9, col:16> 'void *' lvalue ->user_data 0x5598273d67c8
|         `-ImplicitCastExpr 0x5598273d9748 <col:9> 'struct k_timer *' <LValueToRValue>
|           `-DeclRefExpr 0x5598273d9720 <col:9> 'struct k_timer *' lvalue ParmVar 0x5598273d95e8 'timer' 'struct k_timer *'
|-FunctionDecl 0x5598273d9900 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1787:34> col:17 used k_uptime_get 's64_t (void)' static inline
| `-FullComment 0x559827488280 <line:1773:3, line:1785:42>
|   |-ParagraphComment 0x559827487e40 <line:1773:3>
|   | `-TextComment 0x559827487e10 <col:3> Text=" "
|   |-BlockCommandComment 0x559827487e60 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x559827487ec0 <col:10, col:28>
|   |   `-TextComment 0x559827487e90 <col:10, col:28> Text=" Get system uptime."
|   |-ParagraphComment 0x559827487f30 <line:1775:3, line:1776:19>
|   | |-TextComment 0x559827487ee0 <line:1775:3, col:65> Text=" This routine returns the elapsed time since the system booted,"
|   | `-TextComment 0x559827487f00 <line:1776:3, col:19> Text=" in milliseconds."
|   |-ParagraphComment 0x559827487f80 <line:1778:3>
|   | `-TextComment 0x559827487f50 <col:3> Text=" "
|   |-BlockCommandComment 0x559827487fa0 <col:4, line:1783:13> Name="note"
|   | `-ParagraphComment 0x559827488150 <line:1779:3, line:1783:13>
|   |   |-TextComment 0x559827487fd0 <line:1779:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x559827488020 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x559827488040 <line:1780:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x559827488060 <line:1781:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x559827488080 <line:1782:3, col:61> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option."
|   |   |-TextComment 0x5598274880a0 <line:1783:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x5598274880f0 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x5598274881a0 <line:1785:3>
|   | `-TextComment 0x559827488170 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274881c0 <col:4, col:42> Name="return"
|     `-ParagraphComment 0x559827488220 <col:11, col:42>
|       `-TextComment 0x5598274881f0 <col:11, col:42> Text=" Current uptime in milliseconds."
|-FunctionDecl 0x5598273d9a60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1805:1> line:1799:32 k_enable_sys_clock_always_on 'int (void)' static inline
| |-CompoundStmt 0x5598273d9c08 <line:1800:1, line:1805:1>
| | |-CompoundStmt 0x5598273d9b60 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x5598273d9b70 </vagrant/ext/zephyros/zephyr/include/kernel.h:1802:57>
| | `-ReturnStmt 0x5598273d9bc0 <line:1804:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-UnaryOperator 0x5598273d9ba0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1804:9, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     `-IntegerLiteral 0x5598273d9b80 <col:16> 'int' 0
| |-DeprecatedAttr 0x5598273d9b00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x559827488520 </vagrant/ext/zephyros/zephyr/include/kernel.h:1790:3, line:1796:56>
|   |-ParagraphComment 0x559827488320 <line:1790:3>
|   | `-TextComment 0x5598274882f0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827488340 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5598274883a0 <col:10, col:51>
|   |   `-TextComment 0x559827488370 <col:10, col:51> Text=" Enable clock always on in tickless kernel"
|   |-ParagraphComment 0x559827488440 <line:1792:3, line:1794:11>
|   | |-TextComment 0x5598274883c0 <line:1792:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|   | |-TextComment 0x5598274883e0 <line:1793:3, col:66> Text=" functionality has been migrated to the SYSTEM_CLOCK_SLOPPY_IDLE"
|   | `-TextComment 0x559827488400 <line:1794:3, col:11> Text=" kconfig."
|   `-ParagraphComment 0x5598274884e0 <line:1796:3, col:56>
|     |-TextComment 0x559827488460 <col:3> Text=" "
|     |-InlineCommandComment 0x559827488480 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x5598274884a0 <col:11, col:56> Text=" prev_status Previous status of always on flag"
|-FunctionDecl 0x5598273d9cc0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1820:1> line:1816:33 k_disable_sys_clock_always_on 'void (void)' static inline
| |-CompoundStmt 0x5598273d9e08 <line:1817:1, line:1820:1>
| | |-CompoundStmt 0x5598273d9dc0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | `-NullStmt 0x5598273d9dd0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1819:57>
| |-DeprecatedAttr 0x5598273d9d60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x559827488730 </vagrant/ext/zephyros/zephyr/include/kernel.h:1809:3, line:1813:11>
|   |-ParagraphComment 0x5598274885c0 <line:1809:3>
|   | `-TextComment 0x559827488590 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274885e0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x559827488640 <col:10, col:52>
|   |   `-TextComment 0x559827488610 <col:10, col:52> Text=" Disable clock always on in tickless kernel"
|   `-ParagraphComment 0x5598274886e0 <line:1811:3, line:1813:11>
|     |-TextComment 0x559827488660 <line:1811:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|     |-TextComment 0x559827488680 <line:1812:3, col:63> Text=" functionality has been migrated to the SYS_CLOCK_SLOPPY_IDLE"
|     `-TextComment 0x5598274886a0 <line:1813:3, col:11> Text=" kconfig."
|-FunctionDecl 0x5598273d9eb8 <line:1844:1, line:1847:1> line:1844:21 used k_uptime_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x5598273da098 <line:1845:1, line:1847:1>
| | `-ReturnStmt 0x5598273da050 <line:1846:2, col:29>
| |   `-CStyleCastExpr 0x5598273da028 <col:9, col:29> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5598273d9ff0 <col:16, col:29> 's64_t':'long long'
| |       `-ImplicitCastExpr 0x5598273d9fd8 <col:16> 's64_t (*)(void)' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x5598273d9f58 <col:16> 's64_t (void)' Function 0x5598273d9900 'k_uptime_get' 's64_t (void)'
| `-FullComment 0x559827488ca0 <line:1824:3, line:1842:66>
|   |-ParagraphComment 0x5598274887d0 <line:1824:3>
|   | `-TextComment 0x5598274887a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274887f0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x559827488850 <col:10, col:45>
|   |   `-TextComment 0x559827488820 <col:10, col:45> Text=" Get system uptime (32-bit version)."
|   |-ParagraphComment 0x5598274888c0 <line:1826:3, line:1827:16>
|   | |-TextComment 0x559827488870 <line:1826:3, col:65> Text=" This routine returns the lower 32 bits of the system uptime in"
|   | `-TextComment 0x559827488890 <line:1827:3, col:16> Text=" milliseconds."
|   |-ParagraphComment 0x5598274889b0 <line:1829:3, line:1833:38>
|   | |-TextComment 0x5598274888e0 <line:1829:3, col:67> Text=" Because correct conversion requires full precision of the system"
|   | |-TextComment 0x559827488900 <line:1830:3, col:69> Text=" clock there is no benefit to using this over k_uptime_get() unless"
|   | |-TextComment 0x559827488920 <line:1831:3, col:69> Text=" you know the application will never run long enough for the system"
|   | |-TextComment 0x559827488940 <line:1832:3, col:68> Text=" clock to approach 2^32 ticks.  Calls to this function may involve"
|   | `-TextComment 0x559827488960 <line:1833:3, col:38> Text=" interrupt blocking and 64-bit math."
|   |-ParagraphComment 0x559827488a00 <line:1835:3>
|   | `-TextComment 0x5598274889d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827488a20 <col:4, line:1840:13> Name="note"
|   | `-ParagraphComment 0x559827488b70 <line:1836:3, line:1840:13>
|   |   |-TextComment 0x559827488a50 <line:1836:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x559827488a70 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x559827488a90 <line:1837:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x559827488ab0 <line:1838:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x559827488ad0 <line:1839:3, col:60> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option"
|   |   |-TextComment 0x559827488af0 <line:1840:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x559827488b10 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x559827488bc0 <line:1842:3>
|   | `-TextComment 0x559827488b90 <col:3> Text=" "
|   `-BlockCommandComment 0x559827488be0 <col:4, col:66> Name="return"
|     `-ParagraphComment 0x559827488c40 <col:11, col:66>
|       `-TextComment 0x559827488c10 <col:11, col:66> Text=" The low 32 bits of the current uptime, in milliseconds."
|-FunctionDecl 0x5598273da220 <line:1860:1, line:1869:1> line:1860:21 used k_uptime_delta 's64_t (s64_t *)' static inline
| |-ParmVarDecl 0x5598273da118 <col:36, col:43> col:43 used reftime 's64_t *'
| |-CompoundStmt 0x5598273da878 <line:1861:1, line:1869:1>
| | |-DeclStmt 0x5598273da528 <line:1862:2, col:21>
| | | |-VarDecl 0x5598273da440 <col:2, col:8> col:8 used uptime 's64_t':'long long'
| | | `-VarDecl 0x5598273da4b0 <col:2, col:16> col:16 used delta 's64_t':'long long'
| | |-BinaryOperator 0x5598273da5d0 <line:1864:2, col:24> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x5598273da540 <col:2> 's64_t':'long long' lvalue Var 0x5598273da440 'uptime' 's64_t':'long long'
| | | `-CallExpr 0x5598273da5a8 <col:11, col:24> 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x5598273da590 <col:11> 's64_t (*)(void)' <FunctionToPointerDecay>
| | |     `-DeclRefExpr 0x5598273da568 <col:11> 's64_t (void)' Function 0x5598273d9900 'k_uptime_get' 's64_t (void)'
| | |-BinaryOperator 0x5598273da700 <line:1865:2, col:20> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x5598273da5f8 <col:2> 's64_t':'long long' lvalue Var 0x5598273da4b0 'delta' 's64_t':'long long'
| | | `-BinaryOperator 0x5598273da6d8 <col:10, col:20> 'long long' '-'
| | |   |-ImplicitCastExpr 0x5598273da6a8 <col:10> 's64_t':'long long' <LValueToRValue>
| | |   | `-DeclRefExpr 0x5598273da620 <col:10> 's64_t':'long long' lvalue Var 0x5598273da440 'uptime' 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x5598273da6c0 <col:19, col:20> 's64_t':'long long' <LValueToRValue>
| | |     `-UnaryOperator 0x5598273da688 <col:19, col:20> 's64_t':'long long' lvalue prefix '*'
| | |       `-ImplicitCastExpr 0x5598273da670 <col:20> 's64_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5598273da648 <col:20> 's64_t *' lvalue ParmVar 0x5598273da118 'reftime' 's64_t *'
| | |-BinaryOperator 0x5598273da7c8 <line:1866:2, col:13> 's64_t':'long long' '='
| | | |-UnaryOperator 0x5598273da768 <col:2, col:3> 's64_t':'long long' lvalue prefix '*'
| | | | `-ImplicitCastExpr 0x5598273da750 <col:3> 's64_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5598273da728 <col:3> 's64_t *' lvalue ParmVar 0x5598273da118 'reftime' 's64_t *'
| | | `-ImplicitCastExpr 0x5598273da7b0 <col:13> 's64_t':'long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5598273da788 <col:13> 's64_t':'long long' lvalue Var 0x5598273da440 'uptime' 's64_t':'long long'
| | `-ReturnStmt 0x5598273da830 <line:1868:2, col:9>
| |   `-ImplicitCastExpr 0x5598273da818 <col:9> 's64_t':'long long' <LValueToRValue>
| |     `-DeclRefExpr 0x5598273da7f0 <col:9> 's64_t':'long long' lvalue Var 0x5598273da4b0 'delta' 's64_t':'long long'
| `-FullComment 0x559827489080 <line:1850:3, line:1858:24>
|   |-ParagraphComment 0x559827488d40 <line:1850:3>
|   | `-TextComment 0x559827488d10 <col:3> Text=" "
|   |-BlockCommandComment 0x559827488d60 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x559827488dc0 <col:10, col:27>
|   |   `-TextComment 0x559827488d90 <col:10, col:27> Text=" Get elapsed time."
|   |-ParagraphComment 0x559827488e30 <line:1852:3, line:1853:50>
|   | |-TextComment 0x559827488de0 <line:1852:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x559827488e00 <line:1853:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x559827488e80 <line:1855:3>
|   | `-TextComment 0x559827488e50 <col:3> Text=" "
|   |-ParamCommandComment 0x559827488ea0 <col:4, line:1856:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x559827488f50 <line:1855:18, line:1856:37>
|   |   |-TextComment 0x559827488f00 <line:1855:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x559827488f20 <line:1856:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x559827488fa0 <line:1858:3>
|   | `-TextComment 0x559827488f70 <col:3> Text=" "
|   `-BlockCommandComment 0x559827488fc0 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x559827489020 <col:11, col:24>
|       `-TextComment 0x559827488ff0 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x5598273da9c0 <line:1887:1, line:1890:1> line:1887:21 k_uptime_delta_32 'u32_t (s64_t *)' static inline
| |-ParmVarDecl 0x5598273da8c0 <col:39, col:46> col:46 used reftime 's64_t *'
| |-CompoundStmt 0x5598273dabf8 <line:1888:1, line:1890:1>
| | `-ReturnStmt 0x5598273dabb0 <line:1889:2, col:38>
| |   `-CStyleCastExpr 0x5598273dab88 <col:9, col:38> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5598273dab30 <col:16, col:38> 's64_t':'long long'
| |       |-ImplicitCastExpr 0x5598273dab18 <col:16> 's64_t (*)(s64_t *)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5598273daa68 <col:16> 's64_t (s64_t *)' Function 0x5598273da220 'k_uptime_delta' 's64_t (s64_t *)'
| |       `-ImplicitCastExpr 0x5598273dab60 <col:31> 's64_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5598273daa90 <col:31> 's64_t *' lvalue ParmVar 0x5598273da8c0 'reftime' 's64_t *'
| `-FullComment 0x559827489520 <line:1872:3, line:1885:24>
|   |-ParagraphComment 0x559827489120 <line:1872:3>
|   | `-TextComment 0x5598274890f0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827489140 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5598274891a0 <col:10, col:44>
|   |   `-TextComment 0x559827489170 <col:10, col:44> Text=" Get elapsed time (32-bit version)."
|   |-ParagraphComment 0x559827489210 <line:1874:3, line:1875:50>
|   | |-TextComment 0x5598274891c0 <line:1874:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x5598274891e0 <line:1875:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x5598274892d0 <line:1877:3, line:1880:41>
|   | |-TextComment 0x559827489230 <line:1877:3, col:78> Text=" This routine can be more efficient than k_uptime_delta(), as it reduces the"
|   | |-TextComment 0x559827489250 <line:1878:3, col:73> Text=" need for interrupt locking and 64-bit math. However, the 32-bit result"
|   | |-TextComment 0x559827489270 <line:1879:3, col:72> Text=" cannot hold an elapsed time larger than approximately 50 days, so the"
|   | `-TextComment 0x559827489290 <line:1880:3, col:41> Text=" caller must handle possible rollovers."
|   |-ParagraphComment 0x559827489320 <line:1882:3>
|   | `-TextComment 0x5598274892f0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827489340 <col:4, line:1883:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x5598274893f0 <line:1882:18, line:1883:37>
|   |   |-TextComment 0x5598274893a0 <line:1882:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x5598274893c0 <line:1883:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x559827489440 <line:1885:3>
|   | `-TextComment 0x559827489410 <col:3> Text=" "
|   `-BlockCommandComment 0x559827489460 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x5598274894c0 <col:11, col:24>
|       `-TextComment 0x559827489490 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x5598273daca0 <line:1900:1, line:1903:1> line:1900:21 k_cycle_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x5598273dae48 <line:1901:1, line:1903:1>
| | `-ReturnStmt 0x5598273dadd8 <line:1902:2, col:29>
| |   `-CallExpr 0x5598273dadb0 <col:9, col:29> 'u32_t':'unsigned int'
| |     `-ImplicitCastExpr 0x5598273dad98 <col:9> 'u32_t (*)(void)' <FunctionToPointerDecay>
| |       `-DeclRefExpr 0x5598273dad40 <col:9> 'u32_t (void)' Function 0x5598273882d8 'arch_k_cycle_get_32' 'u32_t (void)'
| `-FullComment 0x5598274897d0 <line:1893:3, line:1898:57>
|   |-ParagraphComment 0x5598274895c0 <line:1893:3>
|   | `-TextComment 0x559827489590 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274895e0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x559827489640 <col:10, col:34>
|   |   `-TextComment 0x559827489610 <col:10, col:34> Text=" Read the hardware clock."
|   |-ParagraphComment 0x5598274896b0 <line:1895:3, line:1896:9>
|   | |-TextComment 0x559827489660 <line:1895:3, col:78> Text=" This routine returns the current time, as measured by the system's hardware"
|   | `-TextComment 0x559827489680 <line:1896:3, col:9> Text=" clock."
|   |-ParagraphComment 0x559827489700 <line:1898:3>
|   | `-TextComment 0x5598274896d0 <col:3> Text=" "
|   `-BlockCommandComment 0x559827489720 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x559827489780 <col:11, col:57>
|       `-TextComment 0x559827489750 <col:11, col:57> Text=" Current hardware clock up-counter (in cycles)."
|-RecordDecl 0x5598273dae60 prev 0x5598273c1f70 <line:1913:1, line:1924:1> line:1913:8 struct k_queue definition
| |-FullComment 0x5598274898f0 <line:1910:3, col:24>
| | `-ParagraphComment 0x5598274898c0 <col:3, col:24>
| |   |-TextComment 0x559827489840 <col:3> Text=" "
| |   |-InlineCommandComment 0x559827489860 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x559827489880 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5598273daef8 <line:1914:2, col:15> col:15 referenced data_q 'sys_sflist_t':'struct _sflist'
| |-FieldDecl 0x5598273daf60 <line:1915:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-RecordDecl 0x5598273dafa8 <line:1916:2, line:1920:2> line:1916:2 union definition
| | `-FieldDecl 0x5598273db060 <line:1917:3, col:13> col:13 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5598273db140 <line:1916:2> col:2 implicit 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
| `-IndirectFieldDecl 0x5598273db198 <line:1917:13> col:13 implicit wait_q '_wait_q_t':'_wait_q_t'
|   |-Field 0x5598273db140 '' 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
|   `-Field 0x5598273db060 'wait_q' '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x5598273dbb00 <line:1939:1, col:67> col:14 used z_queue_node_peek 'void *(sys_sfnode_t *, bool)' extern
| |-ParmVarDecl 0x5598273db238 <col:32, col:46> col:46 node 'sys_sfnode_t *'
| `-ParmVarDecl 0x5598273db2a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/kernel.h:1939:57> col:57 needs_free 'bool'
|-FunctionDecl 0x5598273dbdf0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1960:50> col:16 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x5598273dbcf0 <col:29, col:45> col:45 queue 'struct k_queue *'
| `-FullComment 0x559827489c90 <line:1952:3, line:1958:14>
|   |-ParagraphComment 0x559827489990 <line:1952:3>
|   | `-TextComment 0x559827489960 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274899b0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x559827489a10 <col:10, col:29>
|   |   `-TextComment 0x5598274899e0 <col:10, col:29> Text=" Initialize a queue."
|   |-ParagraphComment 0x559827489a60 <line:1954:3, col:67>
|   | `-TextComment 0x559827489a30 <col:3, col:67> Text=" This routine initializes a queue object, prior to its first use."
|   |-ParagraphComment 0x559827489ab0 <line:1956:3>
|   | `-TextComment 0x559827489a80 <col:3> Text=" "
|   |-ParamCommandComment 0x559827489ad0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x559827489b60 <col:16, col:37>
|   |   `-TextComment 0x559827489b30 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x559827489bb0 <line:1958:3>
|   | `-TextComment 0x559827489b80 <col:3> Text=" "
|   `-BlockCommandComment 0x559827489bd0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827489c30 <col:11, col:14>
|       `-TextComment 0x559827489c00 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273dbf78 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1977:57> col:16 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x5598273dbef0 <col:36, col:52> col:52 queue 'struct k_queue *'
| `-FullComment 0x55982748a230 <line:1963:3, line:1975:14>
|   |-ParagraphComment 0x559827489d30 <line:1963:3>
|   | `-TextComment 0x559827489d00 <col:3> Text=" "
|   |-BlockCommandComment 0x559827489d50 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x559827489db0 <col:10, col:36>
|   |   `-TextComment 0x559827489d80 <col:10, col:36> Text=" Cancel waiting on a queue."
|   |-ParagraphComment 0x559827489f20 <line:1965:3, line:1969:35>
|   | |-TextComment 0x559827489dd0 <line:1965:3, col:47> Text=" This routine causes first thread pending on "
|   | |-InlineCommandComment 0x559827489e20 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="queue,"
|   | |-TextComment 0x559827489e40 <col:57, col:67> Text=" if any, to"
|   | |-TextComment 0x559827489e60 <line:1966:3, col:74> Text=" return from k_queue_get() call with NULL value (as if timeout expired)."
|   | |-TextComment 0x559827489e80 <line:1967:3, col:67> Text=" If the queue is being waited on by k_poll(), it will return with"
|   | |-TextComment 0x559827489ea0 <line:1968:3, col:69> Text=" -EINTR and K_POLL_STATE_CANCELLED state (and per above, subsequent"
|   | `-TextComment 0x559827489ec0 <line:1969:3, col:35> Text=" k_queue_get() will return NULL)."
|   |-ParagraphComment 0x559827489f70 <line:1971:3>
|   | `-TextComment 0x559827489f40 <col:3> Text=" "
|   |-BlockCommandComment 0x559827489f90 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559827489ff0 <col:9, col:31>
|   |   `-TextComment 0x559827489fc0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55982748a040 <line:1973:3>
|   | `-TextComment 0x55982748a010 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748a060 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55982748a0f0 <col:16, col:37>
|   |   `-TextComment 0x55982748a0c0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55982748a140 <line:1975:3>
|   | `-TextComment 0x55982748a110 <col:3> Text=" "
|   `-BlockCommandComment 0x55982748a160 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55982748a1c0 <col:11, col:14>
|       `-TextComment 0x55982748a190 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273dc200 <line:1993:1, col:61> col:13 used k_queue_append 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x5598273dc070 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x5598273dc0e8 <col:51, col:57> col:57 data 'void *'
| `-FullComment 0x55982748a860 <line:1980:3, line:1991:14>
|   |-ParagraphComment 0x55982748a2d0 <line:1980:3>
|   | `-TextComment 0x55982748a2a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748a2f0 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x55982748a350 <col:10, col:50>
|   |   `-TextComment 0x55982748a320 <col:10, col:50> Text=" Append an element to the end of a queue."
|   |-ParagraphComment 0x55982748a470 <line:1982:3, line:1984:24>
|   | |-TextComment 0x55982748a370 <line:1982:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x55982748a3c0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55982748a3e0 <col:49, col:74> Text=" A queue data item must be"
|   | |-TextComment 0x55982748a400 <line:1983:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x55982748a420 <line:1984:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x55982748a4c0 <line:1986:3>
|   | `-TextComment 0x55982748a490 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748a4e0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55982748a540 <col:9, col:31>
|   |   `-TextComment 0x55982748a510 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55982748a590 <line:1988:3>
|   | `-TextComment 0x55982748a560 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748a5b0 <col:4, line:1989:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55982748a660 <line:1988:16, line:1989:3>
|   |   |-TextComment 0x55982748a610 <line:1988:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55982748a630 <line:1989:3> Text=" "
|   |-ParamCommandComment 0x55982748a680 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55982748a710 <col:15, col:40>
|   |   `-TextComment 0x55982748a6e0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55982748a770 <line:1991:3>
|   | `-TextComment 0x55982748a740 <col:3> Text=" "
|   `-BlockCommandComment 0x55982748a790 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55982748a7f0 <col:11, col:14>
|       `-TextComment 0x55982748a7c0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273dc490 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2011:71> col:17 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5598273dc300 <col:38, col:54> col:54 queue 'struct k_queue *'
| |-ParmVarDecl 0x5598273dc378 <col:61, col:67> col:67 data 'void *'
| `-FullComment 0x55982748aee0 <line:1996:3, line:2009:78>
|   |-ParagraphComment 0x55982748a900 <line:1996:3>
|   | `-TextComment 0x55982748a8d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748a920 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x55982748a980 <col:10, col:39>
|   |   `-TextComment 0x55982748a950 <col:10, col:39> Text=" Append an element to a queue."
|   |-ParagraphComment 0x55982748aac0 <line:1998:3, line:2001:50>
|   | |-TextComment 0x55982748a9a0 <line:1998:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x55982748a9f0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55982748aa10 <col:49, col:76> Text=" There is an implicit memory"
|   | |-TextComment 0x55982748aa30 <line:1999:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x55982748aa50 <line:2000:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x55982748aa70 <line:2001:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x55982748ab10 <line:2003:3>
|   | `-TextComment 0x55982748aae0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748ab30 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55982748ab90 <col:9, col:31>
|   |   `-TextComment 0x55982748ab60 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55982748abe0 <line:2005:3>
|   | `-TextComment 0x55982748abb0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748ac00 <col:4, line:2006:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55982748acb0 <line:2005:16, line:2006:3>
|   |   |-TextComment 0x55982748ac60 <line:2005:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55982748ac80 <line:2006:3> Text=" "
|   |-ParamCommandComment 0x55982748acd0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55982748ad60 <col:15, col:40>
|   |   `-TextComment 0x55982748ad30 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x55982748ae70 <line:2008:3, line:2009:78>
|     |-TextComment 0x55982748ad80 <line:2008:3> Text=" "
|     |-InlineCommandComment 0x55982748ada0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55982748adc0 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x55982748ade0 <line:2009:3> Text=" "
|     |-InlineCommandComment 0x55982748ae00 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55982748ae20 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x5598273dc698 <line:2027:1, col:62> col:13 k_queue_prepend 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x5598273dc590 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x5598273dc608 <col:52, col:58> col:58 data 'void *'
| `-FullComment 0x55982748b500 <line:2014:3, line:2025:14>
|   |-ParagraphComment 0x55982748af80 <line:2014:3>
|   | `-TextComment 0x55982748af50 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748afa0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x55982748b000 <col:10, col:40>
|   |   `-TextComment 0x55982748afd0 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x55982748b120 <line:2016:3, line:2018:24>
|   | |-TextComment 0x55982748b020 <line:2016:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x55982748b070 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55982748b090 <col:50, col:75> Text=" A queue data item must be"
|   | |-TextComment 0x55982748b0b0 <line:2017:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x55982748b0d0 <line:2018:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x55982748b170 <line:2020:3>
|   | `-TextComment 0x55982748b140 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748b190 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55982748b1f0 <col:9, col:31>
|   |   `-TextComment 0x55982748b1c0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55982748b240 <line:2022:3>
|   | `-TextComment 0x55982748b210 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748b260 <col:4, line:2023:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55982748b310 <line:2022:16, line:2023:3>
|   |   |-TextComment 0x55982748b2c0 <line:2022:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55982748b2e0 <line:2023:3> Text=" "
|   |-ParamCommandComment 0x55982748b330 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55982748b3c0 <col:15, col:40>
|   |   `-TextComment 0x55982748b390 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55982748b410 <line:2025:3>
|   | `-TextComment 0x55982748b3e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982748b430 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55982748b490 <col:11, col:14>
|       `-TextComment 0x55982748b460 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273dc8a8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2045:72> col:17 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5598273dc7a0 <col:39, col:55> col:55 queue 'struct k_queue *'
| |-ParmVarDecl 0x5598273dc818 <col:62, col:68> col:68 data 'void *'
| `-FullComment 0x55982748bb80 <line:2030:3, line:2043:78>
|   |-ParagraphComment 0x55982748b5a0 <line:2030:3>
|   | `-TextComment 0x55982748b570 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748b5c0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x55982748b620 <col:10, col:40>
|   |   `-TextComment 0x55982748b5f0 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x55982748b760 <line:2032:3, line:2035:50>
|   | |-TextComment 0x55982748b640 <line:2032:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x55982748b690 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55982748b6b0 <col:50, col:77> Text=" There is an implicit memory"
|   | |-TextComment 0x55982748b6d0 <line:2033:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x55982748b6f0 <line:2034:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x55982748b710 <line:2035:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x55982748b7b0 <line:2037:3>
|   | `-TextComment 0x55982748b780 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748b7d0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55982748b830 <col:9, col:31>
|   |   `-TextComment 0x55982748b800 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55982748b880 <line:2039:3>
|   | `-TextComment 0x55982748b850 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748b8a0 <col:4, line:2040:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55982748b950 <line:2039:16, line:2040:3>
|   |   |-TextComment 0x55982748b900 <line:2039:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55982748b920 <line:2040:3> Text=" "
|   |-ParamCommandComment 0x55982748b970 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55982748ba00 <col:15, col:40>
|   |   `-TextComment 0x55982748b9d0 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x55982748bb10 <line:2042:3, line:2043:78>
|     |-TextComment 0x55982748ba20 <line:2042:3> Text=" "
|     |-InlineCommandComment 0x55982748ba40 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55982748ba60 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x55982748ba80 <line:2043:3> Text=" "
|     |-InlineCommandComment 0x55982748baa0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55982748bac0 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x5598273dcbe0 <line:2062:1, col:73> col:13 k_queue_insert 'void (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x5598273dc9b0 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x5598273dca28 <col:51, col:57> col:57 prev 'void *'
| |-ParmVarDecl 0x5598273dcaa0 <col:63, col:69> col:69 data 'void *'
| `-FullComment 0x55982748c280 <line:2048:3, line:2060:14>
|   |-ParagraphComment 0x55982748bc20 <line:2048:3>
|   | `-TextComment 0x55982748bbf0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748bc40 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x55982748bca0 <col:10, col:40>
|   |   `-TextComment 0x55982748bc70 <col:10, col:40> Text=" Inserts an element to a queue."
|   |-ParagraphComment 0x55982748bdc0 <line:2050:3, line:2052:45>
|   | |-TextComment 0x55982748bcc0 <line:2050:3, col:39> Text=" This routine inserts a data item to "
|   | |-InlineCommandComment 0x55982748bd10 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x55982748bd30 <col:48, col:76> Text=" after previous item. A queue"
|   | |-TextComment 0x55982748bd50 <line:2051:3, col:70> Text=" data item must be aligned on a word boundary, and the first word of"
|   | `-TextComment 0x55982748bd70 <line:2052:3, col:45> Text=" the item is reserved for the kernel's use."
|   |-ParagraphComment 0x55982748be10 <line:2054:3>
|   | `-TextComment 0x55982748bde0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748be30 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55982748be90 <col:9, col:31>
|   |   `-TextComment 0x55982748be60 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55982748bee0 <line:2056:3>
|   | `-TextComment 0x55982748beb0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748bf00 <col:4, line:2057:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55982748bfb0 <line:2056:16, line:2057:3>
|   |   |-TextComment 0x55982748bf60 <line:2056:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55982748bf80 <line:2057:3> Text=" "
|   |-ParamCommandComment 0x55982748bfd0 <col:4, line:2058:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x55982748c080 <line:2057:15, line:2058:3>
|   |   |-TextComment 0x55982748c030 <line:2057:15, col:49> Text=" Address of the previous data item."
|   |   `-TextComment 0x55982748c050 <line:2058:3> Text=" "
|   |-ParamCommandComment 0x55982748c0a0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=2
|   | `-ParagraphComment 0x55982748c130 <col:15, col:40>
|   |   `-TextComment 0x55982748c100 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55982748c180 <line:2060:3>
|   | `-TextComment 0x55982748c150 <col:3> Text=" "
|   `-BlockCommandComment 0x55982748c1a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55982748c200 <col:11, col:14>
|       `-TextComment 0x55982748c1d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273dcf18 <line:2082:1, col:77> col:12 k_queue_append_list 'int (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x5598273dccf0 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x5598273dcd68 <col:55, col:61> col:61 head 'void *'
| |-ParmVarDecl 0x5598273dcde0 <col:67, col:73> col:73 tail 'void *'
| `-FullComment 0x55982748ca50 <line:2065:3, line:2081:1>
|   |-ParagraphComment 0x55982748c320 <line:2065:3>
|   | `-TextComment 0x55982748c2f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748c340 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x55982748c3a0 <col:10, col:58>
|   |   `-TextComment 0x55982748c370 <col:10, col:58> Text=" Atomically append a list of elements to a queue."
|   |-ParagraphComment 0x55982748c4e0 <line:2067:3, line:2070:19>
|   | |-TextComment 0x55982748c3c0 <line:2067:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x55982748c410 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x55982748c430 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x55982748c450 <line:2068:3, col:70> Text=" The data items must be in a singly-linked list, with the first word"
|   | |-TextComment 0x55982748c470 <line:2069:3, col:69> Text=" in each data item pointing to the next data item; the list must be"
|   | `-TextComment 0x55982748c490 <line:2070:3, col:19> Text=" NULL-terminated."
|   |-ParagraphComment 0x55982748c530 <line:2072:3>
|   | `-TextComment 0x55982748c500 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748c550 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55982748c5b0 <col:9, col:31>
|   |   `-TextComment 0x55982748c580 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55982748c600 <line:2074:3>
|   | `-TextComment 0x55982748c5d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748c620 <col:4, line:2075:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55982748c6d0 <line:2074:16, line:2075:3>
|   |   |-TextComment 0x55982748c680 <line:2074:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55982748c6a0 <line:2075:3> Text=" "
|   |-ParamCommandComment 0x55982748c6f0 <col:4, line:2076:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x55982748c7c0 <line:2075:15, line:2076:3>
|   |   |-TextComment 0x55982748c770 <line:2075:15, col:59> Text=" Pointer to first node in singly-linked list."
|   |   `-TextComment 0x55982748c790 <line:2076:3> Text=" "
|   |-ParamCommandComment 0x55982748c7e0 <col:4, col:58> [in] implicitly Param="tail" ParamIndex=2
|   | `-ParagraphComment 0x55982748c870 <col:15, col:58>
|   |   `-TextComment 0x55982748c840 <col:15, col:58> Text=" Pointer to last node in singly-linked list."
|   |-ParagraphComment 0x55982748c980 <line:2078:3, line:2079:43>
|   | |-TextComment 0x55982748c890 <line:2078:3> Text=" "
|   | |-InlineCommandComment 0x55982748c8b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55982748c8d0 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x55982748c8f0 <line:2079:3> Text=" "
|   | |-InlineCommandComment 0x55982748c910 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55982748c930 <col:11, col:43> Text=" -EINVAL on invalid supplied data"
|   `-ParagraphComment 0x55982748c9d0 <line:2081:1>
|     `-TextComment 0x55982748c9a0 <col:1> Text=" "
|-FunctionDecl 0x5598273dd1a8 <line:2099:1, col:72> col:12 k_queue_merge_slist 'int (struct k_queue *, sys_slist_t *)' extern
| |-ParmVarDecl 0x5598273dd020 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x5598273dd090 <col:55, col:68> col:68 list 'sys_slist_t *'
| `-FullComment 0x55982748d0b0 <line:2085:3, line:2097:34>
|   |-ParagraphComment 0x55982748caf0 <line:2085:3>
|   | `-TextComment 0x55982748cac0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748cb10 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x55982748cb70 <col:10, col:55>
|   |   `-TextComment 0x55982748cb40 <col:10, col:55> Text=" Atomically add a list of elements to a queue."
|   |-ParagraphComment 0x55982748cc90 <line:2087:3, line:2089:67>
|   | |-TextComment 0x55982748cb90 <line:2087:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x55982748cbe0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x55982748cc00 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x55982748cc20 <line:2088:3, col:69> Text=" The data items must be in a singly-linked list implemented using a"
|   | `-TextComment 0x55982748cc40 <line:2089:3, col:67> Text=" sys_slist_t object. Upon completion, the original list is empty."
|   |-ParagraphComment 0x55982748cce0 <line:2091:3>
|   | `-TextComment 0x55982748ccb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748cd00 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55982748cd60 <col:9, col:31>
|   |   `-TextComment 0x55982748cd30 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55982748cdb0 <line:2093:3>
|   | `-TextComment 0x55982748cd80 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748cdd0 <col:4, line:2094:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55982748ce80 <line:2093:16, line:2094:3>
|   |   |-TextComment 0x55982748ce30 <line:2093:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55982748ce50 <line:2094:3> Text=" "
|   |-ParamCommandComment 0x55982748cea0 <col:4, col:45> [in] implicitly Param="list" ParamIndex=1
|   | `-ParagraphComment 0x55982748cf30 <col:15, col:45>
|   |   `-TextComment 0x55982748cf00 <col:15, col:45> Text=" Pointer to sys_slist_t object."
|   `-ParagraphComment 0x55982748d040 <line:2096:3, line:2097:34>
|     |-TextComment 0x55982748cf50 <line:2096:3> Text=" "
|     |-InlineCommandComment 0x55982748cf70 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55982748cf90 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x55982748cfb0 <line:2097:3> Text=" "
|     |-InlineCommandComment 0x55982748cfd0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55982748cff0 <col:11, col:34> Text=" -EINVAL on invalid data"
|-FunctionDecl 0x5598273dd438 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2117:65> col:17 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x5598273dd2b0 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x5598273dd320 <col:52, col:58> col:58 timeout 's32_t':'int'
| `-FullComment 0x55982748d790 <line:2102:3, line:2115:48>
|   |-ParagraphComment 0x55982748d150 <line:2102:3>
|   | `-TextComment 0x55982748d120 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748d170 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x55982748d1d0 <col:10, col:38>
|   |   `-TextComment 0x55982748d1a0 <col:10, col:38> Text=" Get an element from a queue."
|   |-ParagraphComment 0x55982748d2c0 <line:2104:3, line:2105:46>
|   | |-TextComment 0x55982748d1f0 <line:2104:3, col:45> Text=" This routine removes first data item from "
|   | |-InlineCommandComment 0x55982748d240 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55982748d260 <col:55, col:76> Text=" The first word of the"
|   | `-TextComment 0x55982748d280 <line:2105:3, col:46> Text=" data item is reserved for the kernel's use."
|   |-ParagraphComment 0x55982748d310 <line:2107:3>
|   | `-TextComment 0x55982748d2e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748d330 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x55982748d410 <col:9, col:72>
|   |   |-TextComment 0x55982748d360 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x55982748d3b0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x55982748d3d0 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x55982748d460 <line:2109:3>
|   | `-TextComment 0x55982748d430 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748d480 <col:4, line:2110:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55982748d530 <line:2109:16, line:2110:3>
|   |   |-TextComment 0x55982748d4e0 <line:2109:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55982748d500 <line:2110:3> Text=" "
|   |-ParamCommandComment 0x55982748d550 <col:4, line:2112:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x55982748d630 <line:2110:18, line:2112:28>
|   |   |-TextComment 0x55982748d5b0 <line:2110:18, col:71> Text=" Non-negative waiting period to obtain a data item (in"
|   |   |-TextComment 0x55982748d5d0 <line:2111:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55982748d5f0 <line:2112:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55982748d680 <line:2114:3>
|   | `-TextComment 0x55982748d650 <col:3> Text=" "
|   `-BlockCommandComment 0x55982748d6a0 <col:4, line:2115:48> Name="return"
|     `-ParagraphComment 0x55982748d720 <line:2114:11, line:2115:48>
|       |-TextComment 0x55982748d6d0 <line:2114:11, col:67> Text=" Address of the data item if successful; NULL if returned"
|       `-TextComment 0x55982748d6f0 <line:2115:3, col:48> Text=" without waiting, or waiting period timed out."
|-FunctionDecl 0x5598273dd6d0 <line:2133:1, line:2136:1> line:2133:20 k_queue_remove 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5598273dd540 <col:35, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5598273dd5b8 <col:58, col:64> col:64 used data 'void *'
| |-CompoundStmt 0x5598273dd9a8 <line:2134:1, line:2136:1>
| | `-ReturnStmt 0x5598273dd968 <line:2135:2, col:72>
| |   `-CallExpr 0x5598273dd930 <col:9, col:72> 'bool'
| |     |-ImplicitCastExpr 0x5598273dd918 <col:9> 'bool (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5598273dd780 <col:9> 'bool (sys_sflist_t *, sys_sfnode_t *)' Function 0x559827354f20 'sys_sflist_find_and_remove' 'bool (sys_sflist_t *, sys_sfnode_t *)'
| |     |-UnaryOperator 0x5598273dd820 <col:36, col:44> 'sys_sflist_t *' prefix '&'
| |     | `-MemberExpr 0x5598273dd7e8 <col:37, col:44> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5598273daef8
| |     |   `-ImplicitCastExpr 0x5598273dd7d0 <col:37> 'struct k_queue *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x5598273dd7a8 <col:37> 'struct k_queue *' lvalue ParmVar 0x5598273dd540 'queue' 'struct k_queue *'
| |     `-CStyleCastExpr 0x5598273dd890 <col:52, col:68> 'sys_sfnode_t *' <BitCast>
| |       `-ImplicitCastExpr 0x5598273dd878 <col:68> 'void *' <LValueToRValue>
| |         `-DeclRefExpr 0x5598273dd840 <col:68> 'void *' lvalue ParmVar 0x5598273dd5b8 'data' 'void *'
| `-FullComment 0x55982748ddb0 <line:2120:3, line:2131:40>
|   |-ParagraphComment 0x55982748d830 <line:2120:3>
|   | `-TextComment 0x55982748d800 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748d850 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55982748d8b0 <col:10, col:41>
|   |   `-TextComment 0x55982748d880 <col:10, col:41> Text=" Remove an element from a queue."
|   |-ParagraphComment 0x55982748d9d0 <line:2122:3, line:2124:76>
|   | |-TextComment 0x55982748d8d0 <line:2122:3, col:39> Text=" This routine removes data item from "
|   | |-InlineCommandComment 0x55982748d920 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55982748d940 <col:49, col:70> Text=" The first word of the"
|   | |-TextComment 0x55982748d960 <line:2123:3, col:77> Text=" data item is reserved for the kernel's use. Removing elements from k_queue"
|   | `-TextComment 0x55982748d980 <line:2124:3, col:76> Text=" rely on sys_slist_find_and_remove which is not a constant time operation."
|   |-ParagraphComment 0x55982748da20 <line:2126:3>
|   | `-TextComment 0x55982748d9f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748da40 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x55982748daa0 <col:9, col:30>
|   |   `-TextComment 0x55982748da70 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x55982748daf0 <line:2128:3>
|   | `-TextComment 0x55982748dac0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748db10 <col:4, line:2129:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55982748dbc0 <line:2128:16, line:2129:3>
|   |   |-TextComment 0x55982748db70 <line:2128:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55982748db90 <line:2129:3> Text=" "
|   |-ParamCommandComment 0x55982748dbe0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55982748dc70 <col:15, col:40>
|   |   `-TextComment 0x55982748dc40 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55982748dcc0 <line:2131:3>
|   | `-TextComment 0x55982748dc90 <col:3> Text=" "
|   `-BlockCommandComment 0x55982748dce0 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x55982748dd40 <col:11, col:40>
|       `-TextComment 0x55982748dd10 <col:11, col:40> Text=" true if data item was removed"
|-FunctionDecl 0x5598273ddb20 <line:2152:1, line:2164:1> line:2152:20 k_queue_unique_append 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5598273dd9e8 <col:42, col:58> col:58 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5598273dda60 <col:65, col:71> col:71 used data 'void *'
| |-CompoundStmt 0x5598273de358 <line:2153:1, line:2164:1>
| | |-DeclStmt 0x5598273ddc40 <line:2154:2, col:20>
| | | `-VarDecl 0x5598273ddbe0 <col:2, col:16> col:16 used test 'sys_sfnode_t *'
| | |-ForStmt 0x5598273de148 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:2, /vagrant/ext/zephyros/zephyr/include/kernel.h:2160:2>
| | | |-BinaryOperator 0x5598273ddd88 <line:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x5598273ddc58 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x5598273ddbe0 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x5598273ddd58 <<scratch space>:153:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x5598273ddd40 <<scratch space>:153:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x5598273ddc80 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5598273487e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
| | | |   `-UnaryOperator 0x5598273ddd20 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:27, col:35> 'sys_sflist_t *' prefix '&'
| | | |     `-MemberExpr 0x5598273ddce8 <col:28, col:35> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5598273daef8
| | | |       `-ImplicitCastExpr 0x5598273ddcd0 <col:28> 'struct k_queue *' <LValueToRValue>
| | | |         `-DeclRefExpr 0x5598273ddca8 <col:28> 'struct k_queue *' lvalue ParmVar 0x5598273dd9e8 'queue' 'struct k_queue *'
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x5598273dde88 <col:43, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| | | | |-ImplicitCastExpr 0x5598273dde58 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x5598273dddb0 <col:43> 'sys_sfnode_t *' lvalue Var 0x5598273ddbe0 'test' 'sys_sfnode_t *'
| | | | `-ImplicitCastExpr 0x5598273dde70 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
| | | |   `-ParenExpr 0x5598273dde38 <col:14, col:24> 'void *'
| | | |     `-CStyleCastExpr 0x5598273dde10 <col:15, col:23> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x5598273dddd8 <col:23> 'int' 0
| | | |-BinaryOperator 0x5598273ddf88 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x5598273ddeb0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x5598273ddbe0 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x5598273ddf40 <<scratch space>:155:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x5598273ddf28 <<scratch space>:155:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x5598273dded8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55982734a1b8 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
| | | |   `-ImplicitCastExpr 0x5598273ddf70 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5598273ddf00 <col:43> 'sys_sfnode_t *' lvalue Var 0x5598273ddbe0 'test' 'sys_sfnode_t *'
| | | `-CompoundStmt 0x5598273de130 <col:49, line:2160:2>
| | |   `-IfStmt 0x5598273de0f8 <line:2157:3, line:2159:3>
| | |     |-<<<NULL>>>
| | |     |-<<<NULL>>>
| | |     |-BinaryOperator 0x5598273de068 <line:2157:7, col:32> 'int' '=='
| | |     | |-ImplicitCastExpr 0x5598273de050 <col:7> 'sys_sfnode_t *' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x5598273ddfb0 <col:7> 'sys_sfnode_t *' lvalue Var 0x5598273ddbe0 'test' 'sys_sfnode_t *'
| | |     | `-CStyleCastExpr 0x5598273de028 <col:15, col:32> 'sys_sfnode_t *' <BitCast>
| | |     |   `-ImplicitCastExpr 0x5598273de010 <col:32> 'void *' <LValueToRValue>
| | |     |     `-DeclRefExpr 0x5598273ddfd8 <col:32> 'void *' lvalue ParmVar 0x5598273dda60 'data' 'void *'
| | |     |-CompoundStmt 0x5598273de0e0 <col:38, line:2159:3>
| | |     | `-ReturnStmt 0x5598273de0c8 <line:2158:4, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| | |     |   `-ImplicitCastExpr 0x5598273de0b0 <col:16> 'bool' <IntegralToBoolean>
| | |     |     `-IntegerLiteral 0x5598273de090 <col:16> 'int' 0
| | |     `-<<<NULL>>>
| | |-CallExpr 0x5598273de270 </vagrant/ext/zephyros/zephyr/include/kernel.h:2162:2, col:28> 'void'
| | | |-ImplicitCastExpr 0x5598273de258 <col:2> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x5598273de180 <col:2> 'void (struct k_queue *, void *)' Function 0x5598273dc200 'k_queue_append' 'void (struct k_queue *, void *)'
| | | |-ImplicitCastExpr 0x5598273de2a8 <col:17> 'struct k_queue *' <LValueToRValue>
| | | | `-DeclRefExpr 0x5598273de1a8 <col:17> 'struct k_queue *' lvalue ParmVar 0x5598273dd9e8 'queue' 'struct k_queue *'
| | | `-ImplicitCastExpr 0x5598273de2c0 <col:24> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5598273de1d0 <col:24> 'void *' lvalue ParmVar 0x5598273dda60 'data' 'void *'
| | `-ReturnStmt 0x5598273de310 <line:2163:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
| |   `-ImplicitCastExpr 0x5598273de2f8 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x5598273de2d8 <col:16> 'int' 1
| `-FullComment 0x55982748e3d0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2139:3, line:2150:52>
|   |-ParagraphComment 0x55982748de50 <line:2139:3>
|   | `-TextComment 0x55982748de20 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748de70 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x55982748ded0 <col:10, col:72>
|   |   `-TextComment 0x55982748dea0 <col:10, col:72> Text=" Append an element to a queue only if it's not present already."
|   |-ParagraphComment 0x55982748dff0 <line:2141:3, line:2143:78>
|   | |-TextComment 0x55982748def0 <line:2141:3, col:37> Text=" This routine appends data item to "
|   | |-InlineCommandComment 0x55982748df40 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55982748df60 <col:47, col:73> Text=" The first word of the data"
|   | |-TextComment 0x55982748df80 <line:2142:3, col:71> Text=" item is reserved for the kernel's use. Appending elements to k_queue"
|   | `-TextComment 0x55982748dfa0 <line:2143:3, col:78> Text=" relies on sys_slist_is_node_in_list which is not a constant time operation."
|   |-ParagraphComment 0x55982748e040 <line:2145:3>
|   | `-TextComment 0x55982748e010 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748e060 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x55982748e0c0 <col:9, col:30>
|   |   `-TextComment 0x55982748e090 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x55982748e110 <line:2147:3>
|   | `-TextComment 0x55982748e0e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748e130 <col:4, line:2148:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55982748e1e0 <line:2147:16, line:2148:3>
|   |   |-TextComment 0x55982748e190 <line:2147:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55982748e1b0 <line:2148:3> Text=" "
|   |-ParamCommandComment 0x55982748e200 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55982748e290 <col:15, col:40>
|   |   `-TextComment 0x55982748e260 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55982748e2e0 <line:2150:3>
|   | `-TextComment 0x55982748e2b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982748e300 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x55982748e360 <col:11, col:52>
|       `-TextComment 0x55982748e330 <col:11, col:52> Text=" true if data item was added, false if not"
|-FunctionDecl 0x5598273de4b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2179:53> col:15 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x5598273de3b0 <col:32, col:48> col:48 queue 'struct k_queue *'
| `-FullComment 0x55982748e920 <line:2167:3, line:2177:34>
|   |-ParagraphComment 0x55982748e470 <line:2167:3>
|   | `-TextComment 0x55982748e440 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748e490 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x55982748e4f0 <col:10, col:56>
|   |   `-TextComment 0x55982748e4c0 <col:10, col:56> Text=" Query a queue to see if it has data available."
|   |-ParagraphComment 0x55982748e560 <line:2169:3, line:2170:59>
|   | |-TextComment 0x55982748e510 <line:2169:3, col:77> Text=" Note that the data might be already gone by the time this function returns"
|   | `-TextComment 0x55982748e530 <line:2170:3, col:59> Text=" if other threads are also trying to read from the queue."
|   |-ParagraphComment 0x55982748e5b0 <line:2172:3>
|   | `-TextComment 0x55982748e580 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748e5d0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55982748e630 <col:9, col:31>
|   |   `-TextComment 0x55982748e600 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55982748e680 <line:2174:3>
|   | `-TextComment 0x55982748e650 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748e6a0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55982748e730 <col:16, col:37>
|   |   `-TextComment 0x55982748e700 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55982748e790 <line:2176:3>
|   | `-TextComment 0x55982748e760 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748e7b0 <col:4, line:2177:3> Name="return"
|   | `-ParagraphComment 0x55982748e830 <line:2176:11, line:2177:3>
|   |   |-TextComment 0x55982748e7e0 <line:2176:11, col:42> Text=" Non-zero if the queue is empty."
|   |   `-TextComment 0x55982748e800 <line:2177:3> Text=" "
|   `-BlockCommandComment 0x55982748e850 <col:4, col:34> Name="return"
|     `-ParagraphComment 0x55982748e8b0 <col:11, col:34>
|       `-TextComment 0x55982748e880 <col:11, col:34> Text=" 0 if data is available."
|-FunctionDecl 0x5598273de618 <line:2181:1, line:2184:1> line:2181:19 used z_impl_k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x5598273de588 <col:43, col:59> col:59 used queue 'struct k_queue *'
| `-CompoundStmt 0x5598273de848 <line:2182:1, line:2184:1>
|   `-ReturnStmt 0x5598273de808 <line:2183:2, col:48>
|     `-CStyleCastExpr 0x5598273de7e0 <col:9, col:48> 'int' <IntegralCast>
|       `-CallExpr 0x5598273de798 <col:14, col:48> 'bool'
|         |-ImplicitCastExpr 0x5598273de780 <col:14> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5598273de6c0 <col:14> 'bool (sys_sflist_t *)' Function 0x559827349940 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|         `-UnaryOperator 0x5598273de760 <col:34, col:42> 'sys_sflist_t *' prefix '&'
|           `-MemberExpr 0x5598273de728 <col:35, col:42> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5598273daef8
|             `-ImplicitCastExpr 0x5598273de710 <col:35> 'struct k_queue *' <LValueToRValue>
|               `-DeclRefExpr 0x5598273de6e8 <col:35> 'struct k_queue *' lvalue ParmVar 0x5598273de588 'queue' 'struct k_queue *'
|-FunctionDecl 0x5598273de998 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2195:56> col:17 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5598273de888 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x55982748ecc0 <line:2187:3, line:2193:51>
|   |-ParagraphComment 0x55982748e9c0 <line:2187:3>
|   | `-TextComment 0x55982748e990 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748e9e0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55982748ea40 <col:10, col:44>
|   |   `-TextComment 0x55982748ea10 <col:10, col:44> Text=" Peek element at the head of queue."
|   |-ParagraphComment 0x55982748ea90 <line:2189:3, col:61>
|   | `-TextComment 0x55982748ea60 <col:3, col:61> Text=" Return element from the head of queue without removing it."
|   |-ParagraphComment 0x55982748eae0 <line:2191:3>
|   | `-TextComment 0x55982748eab0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748eb00 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55982748eb90 <col:16, col:37>
|   |   `-TextComment 0x55982748eb60 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55982748ebe0 <line:2193:3>
|   | `-TextComment 0x55982748ebb0 <col:3> Text=" "
|   `-BlockCommandComment 0x55982748ec00 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x55982748ec60 <col:11, col:51>
|       `-TextComment 0x55982748ec30 <col:11, col:51> Text=" Head element, or NULL if queue is empty."
|-FunctionDecl 0x5598273df470 <line:2197:1, line:2200:1> line:2197:21 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5598273dea68 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x5598273df778 <line:2198:1, line:2200:1>
|   `-ReturnStmt 0x5598273df730 <line:2199:2, col:70>
|     `-CallExpr 0x5598273df6e0 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x5598273df6c8 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5598273df518 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x5598273dbb00 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x5598273df618 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x5598273df600 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5598273df540 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5598273487e0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x5598273df5e0 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x5598273df5a8 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5598273daef8
|       |     `-ImplicitCastExpr 0x5598273df590 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x5598273df568 <col:49> 'struct k_queue *' lvalue ParmVar 0x5598273dea68 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5598273df718 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x5598273df648 <col:16> 'int' 0
|-FunctionDecl 0x5598273df848 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2211:56> col:17 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5598273df7b8 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x55982748f060 <line:2203:3, line:2209:51>
|   |-ParagraphComment 0x55982748ed60 <line:2203:3>
|   | `-TextComment 0x55982748ed30 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748ed80 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55982748ede0 <col:10, col:44>
|   |   `-TextComment 0x55982748edb0 <col:10, col:44> Text=" Peek element at the tail of queue."
|   |-ParagraphComment 0x55982748ee30 <line:2205:3, col:61>
|   | `-TextComment 0x55982748ee00 <col:3, col:61> Text=" Return element from the tail of queue without removing it."
|   |-ParagraphComment 0x55982748ee80 <line:2207:3>
|   | `-TextComment 0x55982748ee50 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748eea0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55982748ef30 <col:16, col:37>
|   |   `-TextComment 0x55982748ef00 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55982748ef80 <line:2209:3>
|   | `-TextComment 0x55982748ef50 <col:3> Text=" "
|   `-BlockCommandComment 0x55982748efa0 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x55982748f000 <col:11, col:51>
|       `-TextComment 0x55982748efd0 <col:11, col:51> Text=" Tail element, or NULL if queue is empty."
|-FunctionDecl 0x5598273df9a8 <line:2213:1, line:2216:1> line:2213:21 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5598273df918 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x5598273dfc78 <line:2214:1, line:2216:1>
|   `-ReturnStmt 0x5598273dfc08 <line:2215:2, col:70>
|     `-CallExpr 0x5598273dfbb8 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x5598273dfba0 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5598273dfa50 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x5598273dbb00 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x5598273dfb50 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x5598273dfb38 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5598273dfa78 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x559827348a08 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x5598273dfb18 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x5598273dfae0 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5598273daef8
|       |     `-ImplicitCastExpr 0x5598273dfac8 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x5598273dfaa0 <col:49> 'struct k_queue *' lvalue ParmVar 0x5598273df918 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5598273dfbf0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x5598273dfb80 <col:16> 'int' 0
|-RecordDecl 0x5598273dfc90 prev 0x5598273c2020 </vagrant/ext/zephyros/zephyr/include/kernel.h:2310:1, line:2312:1> line:2310:8 struct k_fifo definition
| `-FieldDecl 0x5598273dfd38 <line:2311:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-RecordDecl 0x5598273e0128 prev 0x5598273c20d0 <line:2525:1, line:2527:1> line:2525:8 struct k_lifo definition
| |-FullComment 0x55982748f180 <line:2523:4, col:7>
| | `-ParagraphComment 0x55982748f150 <col:4, col:7>
| |   |-TextComment 0x55982748f0d0 <col:4> Text=" "
| |   |-TextComment 0x55982748f0f0 <col:5> Text="@"
| |   `-TextComment 0x55982748f110 <col:6, col:7> Text="} "
| `-FieldDecl 0x5598273e01d0 <line:2526:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-TypedefDecl 0x5598273e0408 <line:2641:1, col:19> col:19 referenced stack_data_t 'uintptr_t':'unsigned long'
| `-TypedefType 0x55982735ff40 'uintptr_t' sugar
|   |-Typedef 0x559827274d28 'uintptr_t'
|   `-BuiltinType 0x55982722a850 'unsigned long'
|-RecordDecl 0x5598272de090 prev 0x5598273c2180 <line:2643:1, line:2651:1> line:2643:8 struct k_stack definition
| |-FieldDecl 0x5598272de128 <line:2644:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5598272de190 <line:2645:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-FieldDecl 0x5598272de268 <line:2646:2, col:16> col:16 base 'stack_data_t *'
| |-FieldDecl 0x5598272de2c0 <col:2, col:23> col:23 next 'stack_data_t *'
| |-FieldDecl 0x5598272de318 <col:2, col:30> col:30 top 'stack_data_t *'
| `-FieldDecl 0x5598272de370 <line:2650:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x5598272de710 <line:2686:1, line:2687:44> line:2686:6 k_stack_init 'void (struct k_stack *, stack_data_t *, u32_t)'
| |-ParmVarDecl 0x5598272de500 <col:19, col:35> col:35 stack 'struct k_stack *'
| |-ParmVarDecl 0x5598272de570 <line:2687:5, col:19> col:19 buffer 'stack_data_t *'
| |-ParmVarDecl 0x5598272de5e0 <col:27, col:33> col:33 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x55982748f790 <line:2675:3, line:2685:1>
|   |-ParagraphComment 0x55982748f220 <line:2675:3>
|   | `-TextComment 0x55982748f1f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748f240 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55982748f2a0 <col:10, col:29>
|   |   `-TextComment 0x55982748f270 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x55982748f2f0 <line:2677:3, col:67>
|   | `-TextComment 0x55982748f2c0 <col:3, col:67> Text=" This routine initializes a stack object, prior to its first use."
|   |-ParagraphComment 0x55982748f340 <line:2679:3>
|   | `-TextComment 0x55982748f310 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748f360 <col:4, line:2680:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55982748f410 <line:2679:16, line:2680:3>
|   |   |-TextComment 0x55982748f3c0 <line:2679:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x55982748f3e0 <line:2680:3> Text=" "
|   |-ParamCommandComment 0x55982748f430 <col:4, line:2681:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55982748f4e0 <line:2680:17, line:2681:3>
|   |   |-TextComment 0x55982748f490 <line:2680:17, col:62> Text=" Address of array used to hold stacked values."
|   |   `-TextComment 0x55982748f4b0 <line:2681:3> Text=" "
|   |-ParamCommandComment 0x55982748f500 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=2
|   | `-ParagraphComment 0x55982748f590 <col:22, col:67>
|   |   `-TextComment 0x55982748f560 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x55982748f5e0 <line:2683:3>
|   | `-TextComment 0x55982748f5b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748f600 <col:4, line:2684:3> Name="return"
|   | `-ParagraphComment 0x55982748f680 <line:2683:11, line:2684:3>
|   |   |-TextComment 0x55982748f630 <line:2683:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55982748f650 <line:2684:3> Text=" "
|   |-VerbatimLineComment 0x55982748f6a0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55982748f710 <line:2685:1>
|     `-TextComment 0x55982748f6e0 <col:1> Text=" "
|-FunctionDecl 0x5598272de9a0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2706:25> line:2705:17 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x5598272de820 <col:36, col:52> col:52 stack 'struct k_stack *'
| |-ParmVarDecl 0x5598272de890 <line:2706:8, col:14> col:14 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x55982748fd30 <line:2691:3, line:2703:1>
|   |-ParagraphComment 0x55982748f830 <line:2691:3>
|   | `-TextComment 0x55982748f800 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748f850 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55982748f8b0 <col:10, col:29>
|   |   `-TextComment 0x55982748f880 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x55982748f970 <line:2693:3, line:2696:72>
|   | |-TextComment 0x55982748f8d0 <line:2693:3, col:76> Text=" This routine initializes a stack object, prior to its first use. Internal"
|   | |-TextComment 0x55982748f8f0 <line:2694:3, col:69> Text=" buffers will be allocated from the calling thread's resource pool."
|   | |-TextComment 0x55982748f910 <line:2695:3, col:66> Text=" This memory will be released if k_stack_cleanup() is called, or"
|   | `-TextComment 0x55982748f930 <line:2696:3, col:72> Text=" userspace is enabled and the stack object loses all references to it."
|   |-ParagraphComment 0x55982748f9c0 <line:2698:3>
|   | `-TextComment 0x55982748f990 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748f9e0 <col:4, line:2699:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55982748fa90 <line:2698:16, line:2699:3>
|   |   |-TextComment 0x55982748fa40 <line:2698:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x55982748fa60 <line:2699:3> Text=" "
|   |-ParamCommandComment 0x55982748fab0 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=1
|   | `-ParagraphComment 0x55982748fb40 <col:22, col:67>
|   |   `-TextComment 0x55982748fb10 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x55982748fb90 <line:2701:3>
|   | `-TextComment 0x55982748fb60 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748fbb0 <col:4, line:2702:3> Name="return"
|   | `-ParagraphComment 0x55982748fc30 <line:2701:11, line:2702:3>
|   |   |-TextComment 0x55982748fbe0 <line:2701:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x55982748fc00 <line:2702:3> Text=" "
|   |-VerbatimLineComment 0x55982748fc50 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55982748fcc0 <line:2703:1>
|     `-TextComment 0x55982748fc90 <col:1> Text=" "
|-FunctionDecl 0x5598272deba8 <line:2720:1, col:42> col:5 k_stack_cleanup 'int (struct k_stack *)'
| |-ParmVarDecl 0x5598272deaa0 <col:21, col:37> col:37 stack 'struct k_stack *'
| `-FullComment 0x5598274901f0 <line:2709:3, line:2719:1>
|   |-ParagraphComment 0x55982748fdd0 <line:2709:3>
|   | `-TextComment 0x55982748fda0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982748fdf0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55982748fe50 <col:10, col:44>
|   |   `-TextComment 0x55982748fe20 <col:10, col:44> Text=" Release a stack's allocated buffer"
|   |-ParagraphComment 0x55982748fef0 <line:2711:3, line:2713:46>
|   | |-TextComment 0x55982748fe70 <line:2711:3, col:65> Text=" If a stack object was given a dynamically allocated buffer via"
|   | |-TextComment 0x55982748fe90 <line:2712:3, col:70> Text=" k_stack_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x55982748feb0 <line:2713:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x55982748ff40 <line:2715:3>
|   | `-TextComment 0x55982748ff10 <col:3> Text=" "
|   |-ParamCommandComment 0x55982748ff60 <col:4, line:2718:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x559827490100 <line:2715:16, line:2718:3>
|   |   |-TextComment 0x55982748ffc0 <line:2715:16, col:37> Text=" Address of the stack."
|   |   |-TextComment 0x55982748ffe0 <line:2716:3> Text=" "
|   |   |-InlineCommandComment 0x559827490000 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x559827490020 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x559827490040 <line:2717:3> Text=" "
|   |   |-InlineCommandComment 0x559827490060 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x559827490080 <col:11, col:46> Text=" -EAGAIN when object is still in use"
|   |   `-TextComment 0x5598274900a0 <line:2718:3> Text=" "
|   |-VerbatimLineComment 0x559827490120 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x559827490190 <line:2719:1>
|     `-TextComment 0x559827490160 <col:1> Text=" "
|-FunctionDecl 0x5598272dee28 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2736:68> col:15 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x5598272deca0 <col:28, col:44> col:44 stack 'struct k_stack *'
| |-ParmVarDecl 0x5598272ded10 <col:51, col:64> col:64 data 'stack_data_t':'unsigned long'
| `-FullComment 0x559827490940 <line:2723:3, line:2735:1>
|   |-ParagraphComment 0x559827490290 <line:2723:3>
|   | `-TextComment 0x559827490260 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274902b0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x559827490310 <col:10, col:39>
|   |   `-TextComment 0x5598274902e0 <col:10, col:39> Text=" Push an element onto a stack."
|   |-ParagraphComment 0x559827490430 <line:2725:3, col:55>
|   | |-TextComment 0x559827490330 <col:3, col:42> Text=" This routine adds a stack_data_t value "
|   | |-InlineCommandComment 0x559827490380 <col:43, col:44> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x5598274903a0 <col:50, col:53> Text=" to "
|   | `-InlineCommandComment 0x5598274903f0 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="stack."
|   |-ParagraphComment 0x559827490480 <line:2727:3>
|   | `-TextComment 0x559827490450 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274904a0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559827490500 <col:9, col:31>
|   |   `-TextComment 0x5598274904d0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559827490550 <line:2729:3>
|   | `-TextComment 0x559827490520 <col:3> Text=" "
|   |-ParamCommandComment 0x559827490570 <col:4, line:2730:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x559827490620 <line:2729:16, line:2730:3>
|   |   |-TextComment 0x5598274905d0 <line:2729:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x5598274905f0 <line:2730:3> Text=" "
|   |-ParamCommandComment 0x559827490640 <col:4, col:44> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5598274906d0 <col:15, col:44>
|   |   `-TextComment 0x5598274906a0 <col:15, col:44> Text=" Value to push onto the stack."
|   |-ParagraphComment 0x559827490830 <line:2732:3, line:2734:3>
|   | |-TextComment 0x5598274906f0 <line:2732:3> Text=" "
|   | |-InlineCommandComment 0x559827490710 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559827490730 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x559827490770 <line:2733:3> Text=" "
|   | |-InlineCommandComment 0x559827490790 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274907b0 <col:11, col:35> Text=" -ENOMEM if stack is full"
|   | `-TextComment 0x5598274907d0 <line:2734:3> Text=" "
|   |-VerbatimLineComment 0x559827490850 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x5598274908c0 <line:2735:1>
|     `-TextComment 0x559827490890 <col:1> Text=" "
|-FunctionDecl 0x5598272df4c8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2758:19> line:2757:15 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x5598272def30 <col:27, col:43> col:43 stack 'struct k_stack *'
| |-ParmVarDecl 0x5598272defa0 <col:50, col:64> col:64 data 'stack_data_t *'
| |-ParmVarDecl 0x5598272df010 <line:2758:6, col:12> col:12 timeout 's32_t':'int'
| `-FullComment 0x5598274912b0 <line:2739:3, line:2756:1>
|   |-ParagraphComment 0x5598274909e0 <line:2739:3>
|   | `-TextComment 0x5598274909b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827490a00 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x559827490a60 <col:10, col:38>
|   |   `-TextComment 0x559827490a30 <col:10, col:38> Text=" Pop an element from a stack."
|   |-ParagraphComment 0x559827490bb0 <line:2741:3, line:2742:47>
|   | |-TextComment 0x559827490a80 <line:2741:3, col:50> Text=" This routine removes a stack_data_t value from "
|   | |-InlineCommandComment 0x559827490ad0 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="stack"
|   | |-TextComment 0x559827490af0 <col:59, col:73> Text=" in a "last in,"
|   | |-TextComment 0x559827490b10 <line:2742:3, col:45> Text=" first out" manner and stores the value in "
|   | `-InlineCommandComment 0x559827490b60 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="data."
|   |-ParagraphComment 0x559827490c00 <line:2744:3>
|   | `-TextComment 0x559827490bd0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827490c20 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x559827490d00 <col:9, col:72>
|   |   |-TextComment 0x559827490c50 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x559827490ca0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x559827490cc0 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x559827490d50 <line:2746:3>
|   | `-TextComment 0x559827490d20 <col:3> Text=" "
|   |-ParamCommandComment 0x559827490d70 <col:4, line:2747:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x559827490e20 <line:2746:16, line:2747:3>
|   |   |-TextComment 0x559827490dd0 <line:2746:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x559827490df0 <line:2747:3> Text=" "
|   |-ParamCommandComment 0x559827490e40 <col:4, line:2748:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x559827490ef0 <line:2747:15, line:2748:3>
|   |   |-TextComment 0x559827490ea0 <line:2747:15, col:71> Text=" Address of area to hold the value popped from the stack."
|   |   `-TextComment 0x559827490ec0 <line:2748:3> Text=" "
|   |-ParamCommandComment 0x559827490f10 <col:4, line:2750:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x559827490ff0 <line:2748:18, line:2750:28>
|   |   |-TextComment 0x559827490f70 <line:2748:18, col:67> Text=" Non-negative waiting period to obtain a value (in"
|   |   |-TextComment 0x559827490f90 <line:2749:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x559827490fb0 <line:2750:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5598274911a0 <line:2752:3, line:2755:3>
|   | |-TextComment 0x559827491010 <line:2752:3> Text=" "
|   | |-InlineCommandComment 0x559827491030 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559827491050 <col:11, col:39> Text=" 0 Element popped from stack."
|   | |-TextComment 0x559827491070 <line:2753:3> Text=" "
|   | |-InlineCommandComment 0x559827491090 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274910b0 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x5598274910d0 <line:2754:3> Text=" "
|   | |-InlineCommandComment 0x5598274910f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559827491110 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x559827491130 <line:2755:3> Text=" "
|   |-VerbatimLineComment 0x5598274911c0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x559827491230 <line:2756:1>
|     `-TextComment 0x559827491200 <col:1> Text=" "
|-RecordDecl 0x5598272df5d8 <line:2780:1, col:8> col:8 struct k_work
| `-FullComment 0x5598274913d0 <line:2778:4, col:7>
|   `-ParagraphComment 0x5598274913a0 <col:4, col:7>
|     |-TextComment 0x559827491320 <col:4> Text=" "
|     |-TextComment 0x559827491340 <col:5> Text="@"
|     `-TextComment 0x559827491360 <col:6, col:7> Text="} "
|-RecordDecl 0x5598272df680 <line:2781:1, col:8> col:8 struct k_work_poll
|-TypedefDecl 0x5598272dfa00 <line:2784:1, col:68> col:15 referenced _poller_cb_t 'int (*)(struct k_poll_event *, u32_t)'
| `-PointerType 0x5598272df990 'int (*)(struct k_poll_event *, u32_t)'
|   `-ParenType 0x5598272df930 'int (struct k_poll_event *, u32_t)' sugar
|     `-FunctionProtoType 0x5598272df8f0 'int (struct k_poll_event *, u32_t)' cdecl
|       |-BuiltinType 0x55982722a790 'int'
|       |-PointerType 0x5598272df790 'struct k_poll_event *'
|       | `-ElaboratedType 0x5598272df730 'struct k_poll_event' sugar
|       |   `-RecordType 0x5598273c24d0 'struct k_poll_event'
|       |     `-Record 0x55982740cda8 'k_poll_event'
|       `-TypedefType 0x5598272bc6a0 'u32_t' sugar
|         |-Typedef 0x5598272988b0 'u32_t'
|         `-BuiltinType 0x55982722a830 'unsigned int'
|-RecordDecl 0x5598272dfa58 <line:2785:1, line:2789:1> line:2785:8 struct _poller definition
| |-FieldDecl 0x5598272dfb10 <line:2786:2, col:16> col:16 is_polling 'volatile bool'
| |-FieldDecl 0x5598272dfb80 <line:2787:2, col:19> col:19 thread 'struct k_thread *'
| `-FieldDecl 0x5598272dfc00 <line:2788:2, col:15> col:15 cb '_poller_cb_t':'int (*)(struct k_poll_event *, u32_t)'
|-TypedefDecl 0x5598272dff00 <line:2808:1, col:53> col:16 referenced k_work_handler_t 'void (*)(struct k_work *)'
| |-PointerType 0x5598272dfea0 'void (*)(struct k_work *)'
| | `-ParenType 0x5598272dfe40 'void (struct k_work *)' sugar
| |   `-FunctionProtoType 0x5598272dfe00 'void (struct k_work *)' cdecl
| |     |-BuiltinType 0x55982722a6f0 'void'
| |     `-PointerType 0x5598272dfd10 'struct k_work *'
| |       `-ElaboratedType 0x5598272dfcb0 'struct k_work' sugar
| |         `-RecordType 0x5598272df660 'struct k_work'
| |           `-Record 0x5598272e0208 'k_work'
| `-FullComment 0x5598274918f0 <line:2797:3, line:2807:1>
|   |-ParagraphComment 0x559827491470 <line:2797:3>
|   | `-TextComment 0x559827491440 <col:3> Text=" "
|   |-VerbatimLineComment 0x559827491490 <col:4, col:29> Text=" k_work_handler_t"
|   |-ParagraphComment 0x559827491500 <line:2798:3>
|   | `-TextComment 0x5598274914d0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827491520 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x559827491580 <col:10, col:42>
|   |   `-TextComment 0x559827491550 <col:10, col:42> Text=" Work item handler function type."
|   |-ParagraphComment 0x5598274915f0 <line:2800:3, line:2801:52>
|   | |-TextComment 0x5598274915a0 <line:2800:3, col:69> Text=" A work item's handler function is executed by a workqueue's thread"
|   | `-TextComment 0x5598274915c0 <line:2801:3, col:52> Text=" when the work item is processed by the workqueue."
|   |-ParagraphComment 0x559827491640 <line:2803:3>
|   | `-TextComment 0x559827491610 <col:3> Text=" "
|   |-ParamCommandComment 0x559827491660 <col:4, col:40> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5598274916f0 <col:15, col:40>
|   |   `-TextComment 0x5598274916c0 <col:15, col:40> Text=" Address of the work item."
|   |-ParagraphComment 0x559827491740 <line:2805:3>
|   | `-TextComment 0x559827491710 <col:3> Text=" "
|   |-BlockCommandComment 0x559827491760 <col:4, line:2806:3> Name="return"
|   | `-ParagraphComment 0x5598274917e0 <line:2805:11, line:2806:3>
|   |   |-TextComment 0x559827491790 <line:2805:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274917b0 <line:2806:3> Text=" "
|   |-VerbatimLineComment 0x559827491800 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x559827491870 <line:2807:1>
|     `-TextComment 0x559827491840 <col:1> Text=" "
|-RecordDecl 0x5598272dff88 <line:2814:1, line:2817:1> line:2814:8 invalid struct k_work_q definition
| |-FullComment 0x559827491a10 <line:2811:3, col:24>
| | `-ParagraphComment 0x5598274919e0 <col:3, col:24>
| |   |-TextComment 0x559827491960 <col:3> Text=" "
| |   |-InlineCommandComment 0x559827491980 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5598274919a0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5598272e0050 <line:2815:2, col:17> col:17 referenced queue 'struct k_queue':'struct k_queue'
| `-FieldDecl 0x5598272e00b8 <line:2816:2, col:18> col:18 invalid thread 'struct k_thread':'struct k_thread'
|-EnumDecl 0x5598272e0100 <line:2819:1, line:2821:1> line:2819:1
| `-EnumConstantDecl 0x5598272e01c0 <line:2820:2> col:2 referenced K_WORK_STATE_PENDING 'int'
|-RecordDecl 0x5598272e0208 prev 0x5598272df5d8 <line:2823:1, line:2827:1> line:2823:8 struct k_work definition
| |-FieldDecl 0x5598272e02a8 <line:2824:2, col:8> col:8 _reserved 'void *'
| |-FieldDecl 0x5598272e0320 <line:2825:2, col:19> col:19 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FieldDecl 0x5598272e07a8 <line:2826:2, col:18> col:11 referenced flags 'atomic_t [1]'
|-RecordDecl 0x5598272e07f0 <line:2829:1, line:2833:1> line:2829:8 struct k_delayed_work definition
| |-FieldDecl 0x5598272e08c0 <line:2830:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x5598272e0928 <line:2831:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x5598272e0a20 <line:2832:2, col:19> col:19 work_q 'struct k_work_q *'
|-RecordDecl 0x5598272e0ac0 prev 0x5598272df680 <line:2835:1, line:2843:1> line:2835:8 struct k_work_poll definition
| |-FieldDecl 0x5598272e0b68 <line:2836:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x5598272e0c00 <line:2837:2, col:17> col:17 poller 'struct _poller':'struct _poller'
| |-FieldDecl 0x5598272e0c70 <line:2838:2, col:23> col:23 events 'struct k_poll_event *'
| |-FieldDecl 0x5598272e0cd0 <line:2839:2, col:6> col:6 num_events 'int'
| |-FieldDecl 0x5598272e0d28 <line:2840:2, col:19> col:19 real_handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-FieldDecl 0x5598272e0d90 <line:2841:2, col:18> col:18 timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x5598272e0df0 <line:2842:2, col:6> col:6 poll_result 'int'
|-VarDecl 0x5598272e0e58 <line:2845:1, col:24> col:24 used k_sys_work_q 'struct k_work_q':'struct k_work_q' extern
|-FunctionDecl 0x5598272e10f0 <line:2886:1, line:2889:1> line:2886:20 k_work_init 'void (struct k_work *, k_work_handler_t)' static inline
| |-ParmVarDecl 0x5598272e0f70 <col:32, col:47> col:47 used work 'struct k_work *'
| |-ParmVarDecl 0x5598272e0fe0 <col:53, col:70> col:70 used handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-CompoundStmt 0x5598272e1598 <line:2887:1, line:2889:1>
| | `-BinaryOperator 0x5598272e1540 <line:2888:2, line:2856:2> 'struct k_work':'struct k_work' '='
| |   |-UnaryOperator 0x5598272e11e0 <line:2888:2, col:3> 'struct k_work':'struct k_work' lvalue prefix '*'
| |   | `-ImplicitCastExpr 0x5598272e11c8 <col:3> 'struct k_work *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5598272e11a0 <col:3> 'struct k_work *' lvalue ParmVar 0x5598272e0f70 'work' 'struct k_work *'
| |   `-ImplicitCastExpr 0x5598272e1528 <col:10, line:2856:2> 'struct k_work':'struct k_work' <LValueToRValue>
| |     `-CompoundLiteralExpr 0x5598272e1500 <line:2888:10, line:2856:2> 'struct k_work':'struct k_work' lvalue
| |       `-InitListExpr 0x5598272e1448 <line:2852:2, line:2856:2> 'struct k_work':'struct k_work'
| |         |-ParenExpr 0x5598272e1280 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'void *'
| |         | `-CStyleCastExpr 0x5598272e1258 <col:15, col:23> 'void *' <NullToPointer>
| |         |   `-IntegerLiteral 0x5598272e1220 <col:23> 'int' 0
| |         |-ImplicitCastExpr 0x5598272e14a0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2888:44> 'k_work_handler_t':'void (*)(struct k_work *)' <LValueToRValue>
| |         | `-DeclRefExpr 0x5598272e12e0 <col:44> 'k_work_handler_t':'void (*)(struct k_work *)' lvalue ParmVar 0x5598272e0fe0 'handler' 'k_work_handler_t':'void (*)(struct k_work *)'
| |         `-InitListExpr 0x5598272e14b8 <line:2855:11, col:15> 'atomic_t [1]'
| |           `-IntegerLiteral 0x5598272e1348 <col:13> 'int' 0
| `-FullComment 0x559827491f40 <line:2876:3, line:2885:1>
|   |-ParagraphComment 0x559827491ab0 <line:2876:3>
|   | `-TextComment 0x559827491a80 <col:3> Text=" "
|   |-BlockCommandComment 0x559827491ad0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x559827491b30 <col:10, col:33>
|   |   `-TextComment 0x559827491b00 <col:10, col:33> Text=" Initialize a work item."
|   |-ParagraphComment 0x559827491b80 <line:2878:3, col:74>
|   | `-TextComment 0x559827491b50 <col:3, col:74> Text=" This routine initializes a workqueue work item, prior to its first use."
|   |-ParagraphComment 0x559827491bd0 <line:2880:3>
|   | `-TextComment 0x559827491ba0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827491bf0 <col:4, line:2881:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559827491ca0 <line:2880:15, line:2881:3>
|   |   |-TextComment 0x559827491c50 <line:2880:15, col:36> Text=" Address of work item."
|   |   `-TextComment 0x559827491c70 <line:2881:3> Text=" "
|   |-ParamCommandComment 0x559827491cc0 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x559827491d50 <col:18, col:70>
|   |   `-TextComment 0x559827491d20 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x559827491da0 <line:2883:3>
|   | `-TextComment 0x559827491d70 <col:3> Text=" "
|   |-BlockCommandComment 0x559827491dc0 <col:4, line:2884:3> Name="return"
|   | `-ParagraphComment 0x559827491e40 <line:2883:11, line:2884:3>
|   |   |-TextComment 0x559827491df0 <line:2883:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559827491e10 <line:2884:3> Text=" "
|   |-VerbatimLineComment 0x559827491e60 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x559827491ed0 <line:2885:1>
|     `-TextComment 0x559827491ea0 <col:1> Text=" "
|-FunctionDecl 0x5598272e1ef0 <line:2913:1, line:2919:1> line:2913:20 used k_work_submit_to_queue 'void (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x5598272e15d8 <col:43, col:60> col:60 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5598272e1660 <line:2914:8, col:23> col:23 used work 'struct k_work *'
| |-CompoundStmt 0x5598272e2338 <line:2915:1, line:2919:1>
| | `-IfStmt 0x5598272e22d0 <line:2916:2, line:2918:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-UnaryOperator 0x5598272e2130 <line:2916:6, col:64> 'int' prefix '!'
| |   | `-CallExpr 0x5598272e20e0 <col:7, col:64> 'bool'
| |   |   |-ImplicitCastExpr 0x5598272e20c8 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x5598272e1fa0 <col:7> 'bool (atomic_t *, int)' Function 0x5598272bdc60 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| |   |   |-ImplicitCastExpr 0x5598272e2118 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| |   |   | `-MemberExpr 0x5598272e2008 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x5598272e07a8
| |   |   |   `-ImplicitCastExpr 0x5598272e1ff0 <col:31> 'struct k_work *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x5598272e1fc8 <col:31> 'struct k_work *' lvalue ParmVar 0x5598272e1660 'work' 'struct k_work *'
| |   |   `-DeclRefExpr 0x5598272e2040 <col:44> 'int' EnumConstant 0x5598272e01c0 'K_WORK_STATE_PENDING' 'int'
| |   |-CompoundStmt 0x5598272e22b8 <col:67, line:2918:2>
| |   | `-CallExpr 0x5598272e2250 <line:2917:3, col:38> 'void'
| |   |   |-ImplicitCastExpr 0x5598272e2238 <col:3> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x5598272e2150 <col:3> 'void (struct k_queue *, void *)' Function 0x5598273dc200 'k_queue_append' 'void (struct k_queue *, void *)'
| |   |   |-UnaryOperator 0x5598272e21f0 <col:18, col:27> 'struct k_queue *' prefix '&'
| |   |   | `-MemberExpr 0x5598272e21b8 <col:19, col:27> 'struct k_queue':'struct k_queue' lvalue ->queue 0x5598272e0050
| |   |   |   `-ImplicitCastExpr 0x5598272e21a0 <col:19> 'struct k_work_q *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x5598272e2178 <col:19> 'struct k_work_q *' lvalue ParmVar 0x5598272e15d8 'work_q' 'struct k_work_q *'
| |   |   `-ImplicitCastExpr 0x5598272e22a0 <col:34> 'void *' <BitCast>
| |   |     `-ImplicitCastExpr 0x5598272e2288 <col:34> 'struct k_work *' <LValueToRValue>
| |   |       `-DeclRefExpr 0x5598272e2210 <col:34> 'struct k_work *' lvalue ParmVar 0x5598272e1660 'work' 'struct k_work *'
| |   `-<<<NULL>>>
| `-FullComment 0x559827492820 <line:2892:3, line:2912:1>
|   |-ParagraphComment 0x559827491fe0 <line:2892:3>
|   | `-TextComment 0x559827491fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827492000 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x559827492060 <col:10, col:29>
|   |   `-TextComment 0x559827492030 <col:10, col:29> Text=" Submit a work item."
|   |-ParagraphComment 0x559827492270 <line:2894:3, line:2899:15>
|   | |-TextComment 0x559827492080 <line:2894:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x5598274920d0 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5598274920f0 <col:42, col:70> Text=" to be processed by workqueue"
|   | |-TextComment 0x559827492110 <line:2895:3> Text=" "
|   | |-InlineCommandComment 0x559827492160 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x559827492180 <col:14, col:74> Text=" If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x5598274921a0 <line:2896:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x5598274921c0 <line:2897:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x5598274921e0 <line:2898:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x559827492200 <line:2899:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x5598274922c0 <line:2901:3>
|   | `-TextComment 0x559827492290 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274922e0 <col:4, line:2903:20> Name="warning"
|   | `-ParagraphComment 0x559827492360 <line:2902:3, line:2903:20>
|   |   |-TextComment 0x559827492310 <line:2902:3, col:73> Text=" A submitted work item must not be modified until it has been processed"
|   |   `-TextComment 0x559827492330 <line:2903:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x5598274923b0 <line:2905:3>
|   | `-TextComment 0x559827492380 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274923d0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559827492430 <col:9, col:31>
|   |   `-TextComment 0x559827492400 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559827492480 <line:2907:3>
|   | `-TextComment 0x559827492450 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274924a0 <col:4, line:2908:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x559827492550 <line:2907:17, line:2908:3>
|   |   |-TextComment 0x559827492500 <line:2907:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x559827492520 <line:2908:3> Text=" "
|   |-ParamCommandComment 0x559827492570 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x559827492600 <col:15, col:36>
|   |   `-TextComment 0x5598274925d0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x559827492650 <line:2910:3>
|   | `-TextComment 0x559827492620 <col:3> Text=" "
|   |-BlockCommandComment 0x559827492670 <col:4, line:2911:3> Name="return"
|   | `-ParagraphComment 0x5598274926f0 <line:2910:11, line:2911:3>
|   |   |-TextComment 0x5598274926a0 <line:2910:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274926c0 <line:2911:3> Text=" "
|   |-VerbatimLineComment 0x559827492710 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x559827492790 <line:2912:1>
|     `-TextComment 0x559827492750 <col:1> Text=" "
|-FunctionDecl 0x5598272e2518 <line:2942:1, line:2959:1> line:2942:19 k_work_submit_to_user_queue 'int (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x5598272e2378 <col:47, col:64> col:64 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5598272e2400 <line:2943:12, col:27> col:27 used work 'struct k_work *'
| |-CompoundStmt 0x5598272e2d38 <line:2944:1, line:2959:1>
| | |-DeclStmt 0x5598272e2680 <line:2945:2, col:18>
| | | `-VarDecl 0x5598272e25e0 <col:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> /vagrant/ext/zephyros/zephyr/include/kernel.h:2945:6 used ret 'int' cinit
| | |   `-UnaryOperator 0x5598272e2660 <col:12, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> 'int' prefix '-'
| | |     `-IntegerLiteral 0x5598272e2640 <col:15> 'int' 16
| | |-IfStmt 0x5598272e2c80 </vagrant/ext/zephyros/zephyr/include/kernel.h:2947:2, line:2956:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x5598272e27c8 <line:2947:6, col:64> 'int' prefix '!'
| | | | `-CallExpr 0x5598272e2778 <col:7, col:64> 'bool'
| | | |   |-ImplicitCastExpr 0x5598272e2760 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x5598272e2698 <col:7> 'bool (atomic_t *, int)' Function 0x5598272bdc60 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| | | |   |-ImplicitCastExpr 0x5598272e27b0 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| | | |   | `-MemberExpr 0x5598272e2700 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x5598272e07a8
| | | |   |   `-ImplicitCastExpr 0x5598272e26e8 <col:31> 'struct k_work *' <LValueToRValue>
| | | |   |     `-DeclRefExpr 0x5598272e26c0 <col:31> 'struct k_work *' lvalue ParmVar 0x5598272e2400 'work' 'struct k_work *'
| | | |   `-DeclRefExpr 0x5598272e2738 <col:44> 'int' EnumConstant 0x5598272e01c0 'K_WORK_STATE_PENDING' 'int'
| | | |-CompoundStmt 0x5598272e2c60 <col:67, line:2956:2>
| | | | |-BinaryOperator 0x5598272e29d8 <line:2948:3, col:50> 'int' '='
| | | | | |-DeclRefExpr 0x5598272e27e8 <col:3> 'int' lvalue Var 0x5598272e25e0 'ret' 'int'
| | | | | `-CallExpr 0x5598272e2970 <col:9, col:50> 's32_t':'int'
| | | | |   |-ImplicitCastExpr 0x5598272e2958 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | |   | `-DeclRefExpr 0x5598272e2810 <col:9> 's32_t (struct k_queue *, void *)' Function 0x5598273dc490 'k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
| | | | |   |-UnaryOperator 0x5598272e28b0 <col:30, col:39> 'struct k_queue *' prefix '&'
| | | | |   | `-MemberExpr 0x5598272e2878 <col:31, col:39> 'struct k_queue':'struct k_queue' lvalue ->queue 0x5598272e0050
| | | | |   |   `-ImplicitCastExpr 0x5598272e2860 <col:31> 'struct k_work_q *' <LValueToRValue>
| | | | |   |     `-DeclRefExpr 0x5598272e2838 <col:31> 'struct k_work_q *' lvalue ParmVar 0x5598272e2378 'work_q' 'struct k_work_q *'
| | | | |   `-ImplicitCastExpr 0x5598272e29c0 <col:46> 'void *' <BitCast>
| | | | |     `-ImplicitCastExpr 0x5598272e29a8 <col:46> 'struct k_work *' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x5598272e28d0 <col:46> 'struct k_work *' lvalue ParmVar 0x5598272e2400 'work' 'struct k_work *'
| | | | `-IfStmt 0x5598272e2c28 <line:2953:3, line:2955:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-BinaryOperator 0x5598272e2a60 <line:2953:7, col:14> 'int' '!='
| | | |   | |-ImplicitCastExpr 0x5598272e2a48 <col:7> 'int' <LValueToRValue>
| | | |   | | `-DeclRefExpr 0x5598272e2a00 <col:7> 'int' lvalue Var 0x5598272e25e0 'ret' 'int'
| | | |   | `-IntegerLiteral 0x5598272e2a28 <col:14> 'int' 0
| | | |   |-CompoundStmt 0x5598272e2c10 <col:17, line:2955:3>
| | | |   | `-CallExpr 0x5598272e2bc0 <line:2954:4, col:54> 'void'
| | | |   |   |-ImplicitCastExpr 0x5598272e2ba8 <col:4> 'void (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   |   | `-DeclRefExpr 0x5598272e2a88 <col:4> 'void (atomic_t *, int)' Function 0x5598272be760 'atomic_clear_bit' 'void (atomic_t *, int)'
| | | |   |   |-ImplicitCastExpr 0x5598272e2bf8 <col:21, col:27> 'atomic_t *' <ArrayToPointerDecay>
| | | |   |   | `-MemberExpr 0x5598272e2af0 <col:21, col:27> 'atomic_t [1]' lvalue ->flags 0x5598272e07a8
| | | |   |   |   `-ImplicitCastExpr 0x5598272e2ad8 <col:21> 'struct k_work *' <LValueToRValue>
| | | |   |   |     `-DeclRefExpr 0x5598272e2ab0 <col:21> 'struct k_work *' lvalue ParmVar 0x5598272e2400 'work' 'struct k_work *'
| | | |   |   `-DeclRefExpr 0x5598272e2b28 <col:34> 'int' EnumConstant 0x5598272e01c0 'K_WORK_STATE_PENDING' 'int'
| | | |   `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x5598272e2cf8 <line:2958:2, col:9>
| |   `-ImplicitCastExpr 0x5598272e2ce0 <col:9> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5598272e2cb8 <col:9> 'int' lvalue Var 0x5598272e25e0 'ret' 'int'
| `-FullComment 0x559827492fe0 <line:2922:3, line:2941:1>
|   |-ParagraphComment 0x5598274928c0 <line:2922:3>
|   | `-TextComment 0x559827492890 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274928e0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x559827492940 <col:10, col:53>
|   |   `-TextComment 0x559827492910 <col:10, col:53> Text=" Submit a work item to a user mode workqueue"
|   |-ParagraphComment 0x559827492a30 <line:2924:3, line:2928:71>
|   | |-TextComment 0x559827492960 <line:2924:3, col:73> Text=" Submits a work item to a workqueue that runs in user mode. A temporary"
|   | |-TextComment 0x559827492980 <line:2925:3, col:75> Text=" memory allocation is made from the caller's resource pool which is freed"
|   | |-TextComment 0x5598274929a0 <line:2926:3, col:65> Text=" once the worker thread consumes the k_work item. The workqueue"
|   | |-TextComment 0x5598274929c0 <line:2927:3, col:80> Text=" thread must have memory access to the k_work item being submitted. The caller"
|   | `-TextComment 0x5598274929e0 <line:2928:3, col:71> Text=" must have permission granted on the work_q parameter's queue object."
|   |-ParagraphComment 0x559827492a80 <line:2930:3, col:61>
|   | `-TextComment 0x559827492a50 <col:3, col:61> Text=" Otherwise this works the same as k_work_submit_to_queue()."
|   |-ParagraphComment 0x559827492ad0 <line:2932:3>
|   | `-TextComment 0x559827492aa0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827492af0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559827492b50 <col:9, col:31>
|   |   `-TextComment 0x559827492b20 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559827492ba0 <line:2934:3>
|   | `-TextComment 0x559827492b70 <col:3> Text=" "
|   |-ParamCommandComment 0x559827492bc0 <col:4, line:2935:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x559827492c70 <line:2934:17, line:2935:3>
|   |   |-TextComment 0x559827492c20 <line:2934:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x559827492c40 <line:2935:3> Text=" "
|   |-ParamCommandComment 0x559827492c90 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x559827492d20 <col:15, col:36>
|   |   `-TextComment 0x559827492cf0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x559827492ed0 <line:2937:3, line:2940:3>
|   | |-TextComment 0x559827492d40 <line:2937:3> Text=" "
|   | |-InlineCommandComment 0x559827492d60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559827492d80 <col:11, col:64> Text=" -EBUSY if the work item was already in some workqueue"
|   | |-TextComment 0x559827492da0 <line:2938:3> Text=" "
|   | |-InlineCommandComment 0x559827492dc0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559827492de0 <col:11, col:67> Text=" -ENOMEM if no memory for thread resource pool allocation"
|   | |-TextComment 0x559827492e00 <line:2939:3> Text=" "
|   | |-InlineCommandComment 0x559827492e20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559827492e40 <col:11, col:20> Text=" 0 Success"
|   | `-TextComment 0x559827492e60 <line:2940:3> Text=" "
|   |-VerbatimLineComment 0x559827492ef0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x559827492f60 <line:2941:1>
|     `-TextComment 0x559827492f30 <col:1> Text=" "
|-FunctionDecl 0x5598272e2ed0 <line:2974:1, line:2977:1> line:2974:20 k_work_pending 'bool (struct k_work *)' static inline
| |-ParmVarDecl 0x5598272e2d88 <col:35, col:50> col:50 used work 'struct k_work *'
| |-CompoundStmt 0x5598272e3158 <line:2975:1, line:2977:1>
| | `-ReturnStmt 0x5598272e3118 <line:2976:2, col:58>
| |   `-CallExpr 0x5598272e30b0 <col:9, col:58> 'bool'
| |     |-ImplicitCastExpr 0x5598272e3098 <col:9> 'bool (*)(const atomic_t *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5598272e2f78 <col:9> 'bool (const atomic_t *, int)' Function 0x5598272bbc30 'atomic_test_bit' 'bool (const atomic_t *, int)'
| |     |-ImplicitCastExpr 0x5598272e3100 <col:25, col:31> 'const atomic_t *' <BitCast>
| |     | `-ImplicitCastExpr 0x5598272e30e8 <col:25, col:31> 'atomic_t *' <ArrayToPointerDecay>
| |     |   `-MemberExpr 0x5598272e2fe0 <col:25, col:31> 'atomic_t [1]' lvalue ->flags 0x5598272e07a8
| |     |     `-ImplicitCastExpr 0x5598272e2fc8 <col:25> 'struct k_work *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x5598272e2fa0 <col:25> 'struct k_work *' lvalue ParmVar 0x5598272e2d88 'work' 'struct k_work *'
| |     `-DeclRefExpr 0x5598272e3018 <col:38> 'int' EnumConstant 0x5598272e01c0 'K_WORK_STATE_PENDING' 'int'
| `-FullComment 0x5598274935c0 <line:2962:3, line:2973:1>
|   |-ParagraphComment 0x559827493080 <line:2962:3>
|   | `-TextComment 0x559827493050 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274930a0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x559827493100 <col:10, col:42>
|   |   `-TextComment 0x5598274930d0 <col:10, col:42> Text=" Check if a work item is pending."
|   |-ParagraphComment 0x5598274931f0 <line:2964:3, line:2965:9>
|   | |-TextComment 0x559827493120 <line:2964:3, col:39> Text=" This routine indicates if work item "
|   | |-InlineCommandComment 0x559827493170 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x559827493190 <col:47, col:74> Text=" is pending in a workqueue's"
|   | `-TextComment 0x5598274931b0 <line:2965:3, col:9> Text=" queue."
|   |-ParagraphComment 0x559827493240 <line:2967:3>
|   | `-TextComment 0x559827493210 <col:3> Text=" "
|   |-BlockCommandComment 0x559827493260 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5598274932c0 <col:9, col:31>
|   |   `-TextComment 0x559827493290 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559827493310 <line:2969:3>
|   | `-TextComment 0x5598274932e0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827493330 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5598274933c0 <col:15, col:36>
|   |   `-TextComment 0x559827493390 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x559827493410 <line:2971:3>
|   | `-TextComment 0x5598274933e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827493430 <col:4, line:2972:3> Name="return"
|   | `-ParagraphComment 0x5598274934b0 <line:2971:11, line:2972:3>
|   |   |-TextComment 0x559827493460 <line:2971:11, col:71> Text=" true if work item is pending, or false if it is not pending."
|   |   `-TextComment 0x559827493480 <line:2972:3> Text=" "
|   |-VerbatimLineComment 0x5598274934d0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x559827493540 <line:2973:1>
|     `-TextComment 0x559827493510 <col:1> Text=" "
|-FunctionDecl 0x5598272e3430 <line:2996:1, line:2998:34> line:2996:13 k_work_q_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x5598272e3198 <col:28, col:45> col:45 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5598272e3208 <line:2997:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5598272e3278 <line:2998:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5598272e32f0 <col:26, col:30> col:30 prio 'int'
| `-FullComment 0x559827493dc0 <line:2980:3, line:2995:1>
|   |-ParagraphComment 0x559827493660 <line:2980:3>
|   | `-TextComment 0x559827493630 <col:3> Text=" "
|   |-BlockCommandComment 0x559827493680 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5598274936e0 <col:10, col:28>
|   |   `-TextComment 0x5598274936b0 <col:10, col:28> Text=" Start a workqueue."
|   |-ParagraphComment 0x5598274937d0 <line:2982:3, line:2983:41>
|   | |-TextComment 0x559827493700 <line:2982:3, col:33> Text=" This routine starts workqueue "
|   | |-InlineCommandComment 0x559827493750 <col:34, col:35> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x559827493770 <col:44, col:73> Text=" The workqueue spawns its work"
|   | `-TextComment 0x559827493790 <line:2983:3, col:41> Text=" processing thread, which runs forever."
|   |-ParagraphComment 0x559827493820 <line:2985:3>
|   | `-TextComment 0x5598274937f0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827493840 <col:4, line:2986:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5598274938f0 <line:2985:17, line:2986:3>
|   |   |-TextComment 0x5598274938a0 <line:2985:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5598274938c0 <line:2986:3> Text=" "
|   |-ParamCommandComment 0x559827493910 <col:4, line:2988:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x5598274939f0 <line:2986:16, line:2988:3>
|   |   |-TextComment 0x559827493970 <line:2986:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x559827493990 <line:2987:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x5598274939b0 <line:2988:3> Text=" "
|   |-ParamCommandComment 0x559827493a10 <col:4, line:2991:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x559827493b10 <line:2988:21, line:2991:3>
|   |   |-TextComment 0x559827493a70 <line:2988:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x559827493a90 <line:2989:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x559827493ab0 <line:2990:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x559827493ad0 <line:2991:3> Text=" "
|   |-ParamCommandComment 0x559827493b30 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x559827493bc0 <col:15, col:51>
|   |   `-TextComment 0x559827493b90 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x559827493c10 <line:2993:3>
|   | `-TextComment 0x559827493be0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827493c30 <col:4, line:2994:3> Name="return"
|   | `-ParagraphComment 0x559827493cb0 <line:2993:11, line:2994:3>
|   |   |-TextComment 0x559827493c60 <line:2993:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559827493c80 <line:2994:3> Text=" "
|   |-VerbatimLineComment 0x559827493cd0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x559827493d40 <line:2995:1>
|     `-TextComment 0x559827493d10 <col:1> Text=" "
|-FunctionDecl 0x5598272e3738 <line:3020:1, line:3022:32> line:3020:13 k_work_q_user_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x5598272e3540 <col:33, col:50> col:50 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5598272e35b0 <line:3021:5, col:23> col:23 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5598272e3620 <line:3022:5, col:12> col:12 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5598272e3698 <col:24, col:28> col:28 prio 'int'
| `-FullComment 0x5598274945c0 <line:3001:3, line:3019:1>
|   |-ParagraphComment 0x559827493e60 <line:3001:3>
|   | `-TextComment 0x559827493e30 <col:3> Text=" "
|   |-BlockCommandComment 0x559827493e80 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x559827493ee0 <col:10, col:40>
|   |   `-TextComment 0x559827493eb0 <col:10, col:40> Text=" Start a workqueue in user mode"
|   |-ParagraphComment 0x559827493fd0 <line:3003:3, line:3007:21>
|   | |-TextComment 0x559827493f00 <line:3003:3, col:77> Text=" This works identically to k_work_q_start() except it is callable from user"
|   | |-TextComment 0x559827493f20 <line:3004:3, col:61> Text=" mode, and the worker thread created will run in user mode."
|   | |-TextComment 0x559827493f40 <line:3005:3, col:74> Text=" The caller must have permissions granted on both the work_q parameter's"
|   | |-TextComment 0x559827493f60 <line:3006:3, col:75> Text=" thread and queue objects, and the same restrictions on priority apply as"
|   | `-TextComment 0x559827493f80 <line:3007:3, col:21> Text=" k_thread_create()."
|   |-ParagraphComment 0x559827494020 <line:3009:3>
|   | `-TextComment 0x559827493ff0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827494040 <col:4, line:3010:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5598274940f0 <line:3009:17, line:3010:3>
|   |   |-TextComment 0x5598274940a0 <line:3009:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5598274940c0 <line:3010:3> Text=" "
|   |-ParamCommandComment 0x559827494110 <col:4, line:3012:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x5598274941f0 <line:3010:16, line:3012:3>
|   |   |-TextComment 0x559827494170 <line:3010:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x559827494190 <line:3011:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x5598274941b0 <line:3012:3> Text=" "
|   |-ParamCommandComment 0x559827494210 <col:4, line:3015:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x559827494310 <line:3012:21, line:3015:3>
|   |   |-TextComment 0x559827494270 <line:3012:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x559827494290 <line:3013:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x5598274942b0 <line:3014:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x5598274942d0 <line:3015:3> Text=" "
|   |-ParamCommandComment 0x559827494330 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x5598274943c0 <col:15, col:51>
|   |   `-TextComment 0x559827494390 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x559827494410 <line:3017:3>
|   | `-TextComment 0x5598274943e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827494430 <col:4, line:3018:3> Name="return"
|   | `-ParagraphComment 0x5598274944b0 <line:3017:11, line:3018:3>
|   |   |-TextComment 0x559827494460 <line:3017:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559827494480 <line:3018:3> Text=" "
|   |-VerbatimLineComment 0x5598274944d0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x559827494540 <line:3019:1>
|     `-TextComment 0x559827494510 <col:1> Text=" "
|-FunctionDecl 0x5598272e3a60 <line:3036:1, line:3037:29> line:3036:13 k_delayed_work_init 'void (struct k_delayed_work *, k_work_handler_t)' extern
| |-ParmVarDecl 0x5598272e38e0 <col:33, col:56> col:56 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x5598272e3950 <line:3037:5, col:22> col:22 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x559827494b30 <line:3025:3, line:3035:1>
|   |-ParagraphComment 0x559827494660 <line:3025:3>
|   | `-TextComment 0x559827494630 <col:3> Text=" "
|   |-BlockCommandComment 0x559827494680 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5598274946e0 <col:10, col:41>
|   |   `-TextComment 0x5598274946b0 <col:10, col:41> Text=" Initialize a delayed work item."
|   |-ParagraphComment 0x559827494750 <line:3027:3, line:3028:17>
|   | |-TextComment 0x559827494700 <line:3027:3, col:67> Text=" This routine initializes a workqueue delayed work item, prior to"
|   | `-TextComment 0x559827494720 <line:3028:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x5598274947c0 <line:3030:3>
|   | `-TextComment 0x559827494790 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274947e0 <col:4, line:3031:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559827494890 <line:3030:15, line:3031:3>
|   |   |-TextComment 0x559827494840 <line:3030:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x559827494860 <line:3031:3> Text=" "
|   |-ParamCommandComment 0x5598274948b0 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x559827494940 <col:18, col:70>
|   |   `-TextComment 0x559827494910 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x559827494990 <line:3033:3>
|   | `-TextComment 0x559827494960 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274949b0 <col:4, line:3034:3> Name="return"
|   | `-ParagraphComment 0x559827494a30 <line:3033:11, line:3034:3>
|   |   |-TextComment 0x5598274949e0 <line:3033:11, col:14> Text=" N/A"
|   |   `-TextComment 0x559827494a00 <line:3034:3> Text=" "
|   |-VerbatimLineComment 0x559827494a50 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x559827494ac0 <line:3035:1>
|     `-TextComment 0x559827494a90 <col:1> Text=" "
|-FunctionDecl 0x5598272e3d98 <line:3071:1, line:3073:19> line:3071:12 used k_delayed_work_submit_to_queue 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' extern
| |-ParmVarDecl 0x5598272e3b60 <col:43, col:60> col:60 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5598272e3be8 <line:3072:8, col:31> col:31 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x5598272e3c58 <line:3073:8, col:14> col:14 delay 's32_t':'int'
| `-FullComment 0x559827495730 <line:3040:3, line:3070:1>
|   |-ParagraphComment 0x559827494bd0 <line:3040:3>
|   | `-TextComment 0x559827494ba0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827494bf0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x559827494c50 <col:10, col:37>
|   |   `-TextComment 0x559827494c20 <col:10, col:37> Text=" Submit a delayed work item."
|   |-ParagraphComment 0x559827494ec0 <line:3042:3, line:3046:37>
|   | |-TextComment 0x559827494c70 <line:3042:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x559827494cc0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x559827494ce0 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x559827494d00 <line:3043:3> Text=" "
|   | |-InlineCommandComment 0x559827494d50 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x559827494d70 <col:13, col:30> Text=" after a delay of "
|   | |-InlineCommandComment 0x559827494dc0 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x559827494de0 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x559827494e00 <line:3044:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x559827494e20 <line:3045:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x559827494e40 <line:3046:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x559827494fd0 <line:3048:3, line:3053:28>
|   | |-TextComment 0x559827494ee0 <line:3048:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x559827494f00 <line:3049:3, col:65> Text=" counting down cancels the existing submission and restarts the"
|   | |-TextComment 0x559827494f20 <line:3050:3, col:61> Text=" countdown using the new delay.  Note that this behavior is"
|   | |-TextComment 0x559827494f40 <line:3051:3, col:62> Text=" inherently subject to race conditions with the pre-existing"
|   | |-TextComment 0x559827494f60 <line:3052:3, col:69> Text=" timeouts and work queue, so care must be taken to synchronize such"
|   | `-TextComment 0x559827494f80 <line:3053:3, col:28> Text=" resubmissions externally."
|   |-ParagraphComment 0x559827495020 <line:3055:3>
|   | `-TextComment 0x559827494ff0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827495040 <col:4, line:3057:20> Name="warning"
|   | `-ParagraphComment 0x5598274950c0 <line:3056:3, line:3057:20>
|   |   |-TextComment 0x559827495070 <line:3056:3, col:71> Text=" A delayed work item must not be modified until it has been processed"
|   |   `-TextComment 0x559827495090 <line:3057:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x559827495110 <line:3059:3>
|   | `-TextComment 0x5598274950e0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827495130 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559827495190 <col:9, col:31>
|   |   `-TextComment 0x559827495160 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5598274951e0 <line:3061:3>
|   | `-TextComment 0x5598274951b0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827495200 <col:4, line:3062:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5598274952b0 <line:3061:17, line:3062:3>
|   |   |-TextComment 0x559827495260 <line:3061:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x559827495280 <line:3062:3> Text=" "
|   |-ParamCommandComment 0x5598274952d0 <col:4, line:3063:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x559827495380 <line:3062:15, line:3063:3>
|   |   |-TextComment 0x559827495330 <line:3062:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x559827495350 <line:3063:3> Text=" "
|   |-ParamCommandComment 0x5598274953a0 <col:4, line:3064:18> [in] implicitly Param="delay" ParamIndex=2
|   | `-ParagraphComment 0x559827495450 <line:3063:16, line:3064:18>
|   |   |-TextComment 0x559827495400 <line:3063:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x559827495420 <line:3064:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x559827495600 <line:3066:3, line:3069:3>
|   | |-TextComment 0x559827495470 <line:3066:3> Text=" "
|   | |-InlineCommandComment 0x559827495490 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274954b0 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x5598274954d0 <line:3067:3> Text=" "
|   | |-InlineCommandComment 0x5598274954f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559827495510 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x559827495530 <line:3068:3> Text=" "
|   | |-InlineCommandComment 0x559827495550 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559827495570 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x559827495590 <line:3069:3> Text=" "
|   |-VerbatimLineComment 0x559827495620 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x559827495690 <line:3070:1>
|     `-TextComment 0x559827495660 <col:1> Text=" "
|-FunctionDecl 0x5598273f4c88 <line:3094:1, col:61> col:12 k_delayed_work_cancel 'int (struct k_delayed_work *)' extern
| |-ParmVarDecl 0x5598273f4b80 <col:34, col:57> col:57 work 'struct k_delayed_work *'
| `-FullComment 0x559827495e80 <line:3076:3, line:3093:1>
|   |-ParagraphComment 0x5598274957d0 <line:3076:3>
|   | `-TextComment 0x5598274957a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274957f0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x559827495850 <col:10, col:37>
|   |   `-TextComment 0x559827495820 <col:10, col:37> Text=" Cancel a delayed work item."
|   |-ParagraphComment 0x559827495940 <line:3078:3, line:3080:12>
|   | |-TextComment 0x559827495870 <line:3078:3, col:60> Text=" This routine cancels the submission of delayed work item "
|   | |-InlineCommandComment 0x5598274958c0 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x5598274958e0 <line:3079:3, col:72> Text=" A delayed work item can only be canceled while its countdown is still"
|   | `-TextComment 0x559827495900 <line:3080:3, col:12> Text=" underway."
|   |-ParagraphComment 0x559827495990 <line:3082:3>
|   | `-TextComment 0x559827495960 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274959b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559827495a10 <col:9, col:31>
|   |   `-TextComment 0x5598274959e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559827495a60 <line:3084:3>
|   | `-TextComment 0x559827495a30 <col:3> Text=" "
|   |-BlockCommandComment 0x559827495a80 <col:4, line:3086:55> Name="note"
|   | `-ParagraphComment 0x559827495b30 <line:3084:9, line:3086:55>
|   |   |-TextComment 0x559827495ab0 <line:3084:9, col:69> Text=" The result of calling this on a k_delayed_work item that has"
|   |   |-TextComment 0x559827495ad0 <line:3085:3, col:52> Text=" not been submitted (i.e. before the return of the"
|   |   `-TextComment 0x559827495af0 <line:3086:3, col:55> Text=" k_delayed_work_submit_to_queue() call) is undefined."
|   |-ParagraphComment 0x559827495b80 <line:3088:3>
|   | `-TextComment 0x559827495b50 <col:3> Text=" "
|   |-ParamCommandComment 0x559827495ba0 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559827495c30 <col:15, col:44>
|   |   `-TextComment 0x559827495c00 <col:15, col:44> Text=" Address of delayed work item."
|   |-ParagraphComment 0x559827495d70 <line:3090:3, line:3092:3>
|   | |-TextComment 0x559827495c50 <line:3090:3> Text=" "
|   | |-InlineCommandComment 0x559827495c70 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559827495c90 <col:11, col:42> Text=" 0 Work item countdown canceled."
|   | |-TextComment 0x559827495cb0 <line:3091:3> Text=" "
|   | |-InlineCommandComment 0x559827495cd0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559827495cf0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | `-TextComment 0x559827495d10 <line:3092:3> Text=" "
|   |-VerbatimLineComment 0x559827495d90 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x559827495e00 <line:3093:1>
|     `-TextComment 0x559827495dd0 <col:1> Text=" "
|-FunctionDecl 0x5598273f4e08 <line:3118:1, line:3121:1> line:3118:20 k_work_submit 'void (struct k_work *)' static inline
| |-ParmVarDecl 0x5598273f4d80 <col:34, col:49> col:49 used work 'struct k_work *'
| |-CompoundStmt 0x5598273f5038 <line:3119:1, line:3121:1>
| | `-CallExpr 0x5598273f4fc0 <line:3120:2, col:44> 'void'
| |   |-ImplicitCastExpr 0x5598273f4fa8 <col:2> 'void (*)(struct k_work_q *, struct k_work *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5598273f4eb0 <col:2> 'void (struct k_work_q *, struct k_work *)' Function 0x5598272e1ef0 'k_work_submit_to_queue' 'void (struct k_work_q *, struct k_work *)'
| |   |-UnaryOperator 0x5598273f4f00 <col:25, col:26> 'struct k_work_q *' prefix '&'
| |   | `-DeclRefExpr 0x5598273f4ed8 <col:26> 'struct k_work_q':'struct k_work_q' lvalue Var 0x5598272e0e58 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |   `-ImplicitCastExpr 0x5598273f4ff8 <col:40> 'struct k_work *' <LValueToRValue>
| |     `-DeclRefExpr 0x5598273f4f20 <col:40> 'struct k_work *' lvalue ParmVar 0x5598273f4d80 'work' 'struct k_work *'
| `-FullComment 0x559827496630 <line:3097:3, line:3117:1>
|   |-ParagraphComment 0x559827495f20 <line:3097:3>
|   | `-TextComment 0x559827495ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827495f40 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x559827495fa0 <col:10, col:53>
|   |   `-TextComment 0x559827495f70 <col:10, col:53> Text=" Submit a work item to the system workqueue."
|   |-ParagraphComment 0x559827496130 <line:3099:3, line:3104:15>
|   | |-TextComment 0x559827495fc0 <line:3099:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x559827496010 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x559827496030 <col:42, col:71> Text=" to be processed by the system"
|   | |-TextComment 0x559827496050 <line:3100:3, col:74> Text=" workqueue. If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x559827496070 <line:3101:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x559827496090 <line:3102:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x5598274960b0 <line:3103:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x5598274960d0 <line:3104:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x559827496180 <line:3106:3>
|   | `-TextComment 0x559827496150 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274961a0 <col:4, line:3109:50> Name="warning"
|   | `-ParagraphComment 0x559827496250 <line:3107:3, line:3109:50>
|   |   |-TextComment 0x5598274961d0 <line:3107:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x5598274961f0 <line:3108:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x559827496210 <line:3109:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x5598274962a0 <line:3111:3>
|   | `-TextComment 0x559827496270 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274962c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559827496320 <col:9, col:31>
|   |   `-TextComment 0x5598274962f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559827496370 <line:3113:3>
|   | `-TextComment 0x559827496340 <col:3> Text=" "
|   |-ParamCommandComment 0x559827496390 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559827496420 <col:15, col:36>
|   |   `-TextComment 0x5598274963f0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x559827496470 <line:3115:3>
|   | `-TextComment 0x559827496440 <col:3> Text=" "
|   |-BlockCommandComment 0x559827496490 <col:4, line:3116:3> Name="return"
|   | `-ParagraphComment 0x559827496510 <line:3115:11, line:3116:3>
|   |   |-TextComment 0x5598274964c0 <line:3115:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274964e0 <line:3116:3> Text=" "
|   |-VerbatimLineComment 0x559827496530 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x5598274965a0 <line:3117:1>
|     `-TextComment 0x559827496570 <col:1> Text=" "
|-FunctionDecl 0x5598273f5208 <line:3156:1, line:3160:1> line:3156:19 k_delayed_work_submit 'int (struct k_delayed_work *, s32_t)' static inline
| |-ParmVarDecl 0x5598273f5078 <col:41, col:64> col:64 used work 'struct k_delayed_work *'
| |-ParmVarDecl 0x5598273f50e8 <line:3157:6, col:12> col:12 used delay 's32_t':'int'
| |-CompoundStmt 0x5598273f54a8 <line:3158:1, line:3160:1>
| | `-ReturnStmt 0x5598273f5460 <line:3159:2, col:66>
| |   `-CallExpr 0x5598273f53f0 <col:9, col:66> 'int'
| |     |-ImplicitCastExpr 0x5598273f53d8 <col:9> 'int (*)(struct k_work_q *, struct k_delayed_work *, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5598273f52b8 <col:9> 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' Function 0x5598272e3d98 'k_delayed_work_submit_to_queue' 'int (struct k_work_q *, struct k_delayed_work *, s32_t)'
| |     |-UnaryOperator 0x5598273f5308 <col:40, col:41> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x5598273f52e0 <col:41> 'struct k_work_q':'struct k_work_q' lvalue Var 0x5598272e0e58 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x5598273f5430 <col:55> 'struct k_delayed_work *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5598273f5328 <col:55> 'struct k_delayed_work *' lvalue ParmVar 0x5598273f5078 'work' 'struct k_delayed_work *'
| |     `-ImplicitCastExpr 0x5598273f5448 <col:61> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x5598273f5350 <col:61> 's32_t':'int' lvalue ParmVar 0x5598273f50e8 'delay' 's32_t':'int'
| `-FullComment 0x559827497140 <line:3124:3, line:3155:1>
|   |-ParagraphComment 0x5598274966d0 <line:3124:3>
|   | `-TextComment 0x5598274966a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274966f0 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x559827496750 <col:10, col:61>
|   |   `-TextComment 0x559827496720 <col:10, col:61> Text=" Submit a delayed work item to the system workqueue."
|   |-ParagraphComment 0x559827496950 <line:3126:3, line:3130:37>
|   | |-TextComment 0x559827496770 <line:3126:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x5598274967d0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5598274967f0 <col:44, col:73> Text=" to be processed by the system"
|   | |-TextComment 0x559827496810 <line:3127:3, col:30> Text=" workqueue after a delay of "
|   | |-InlineCommandComment 0x559827496860 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x559827496880 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x5598274968a0 <line:3128:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x5598274968c0 <line:3129:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x5598274968e0 <line:3130:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x559827496a90 <line:3132:3, line:3138:72>
|   | |-TextComment 0x559827496970 <line:3132:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x559827496990 <line:3133:3, col:75> Text=" counting down cancels the existing submission and restarts the countdown"
|   | |-TextComment 0x5598274969b0 <line:3134:3, col:68> Text=" using the new delay. If the work item is currently pending on the"
|   | |-TextComment 0x5598274969d0 <line:3135:3, col:74> Text=" workqueue's queue because the countdown has completed it is too late to"
|   | |-TextComment 0x5598274969f0 <line:3136:3, col:77> Text=" resubmit the item, and resubmission fails without impacting the work item."
|   | |-TextComment 0x559827496a10 <line:3137:3, col:80> Text=" If the work item has already been processed, or is currently being processed,"
|   | `-TextComment 0x559827496a30 <line:3138:3, col:72> Text=" its work is considered complete and the work item can be resubmitted."
|   |-ParagraphComment 0x559827496ae0 <line:3140:3>
|   | `-TextComment 0x559827496ab0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827496b00 <col:4, line:3143:50> Name="warning"
|   | `-ParagraphComment 0x559827496bb0 <line:3141:3, line:3143:50>
|   |   |-TextComment 0x559827496b30 <line:3141:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x559827496b50 <line:3142:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x559827496b70 <line:3143:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x559827496c00 <line:3145:3>
|   | `-TextComment 0x559827496bd0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827496c20 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559827496c80 <col:9, col:31>
|   |   `-TextComment 0x559827496c50 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559827496cd0 <line:3147:3>
|   | `-TextComment 0x559827496ca0 <col:3> Text=" "
|   |-ParamCommandComment 0x559827496cf0 <col:4, line:3148:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559827496da0 <line:3147:15, line:3148:3>
|   |   |-TextComment 0x559827496d50 <line:3147:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x559827496d70 <line:3148:3> Text=" "
|   |-ParamCommandComment 0x559827496dc0 <col:4, line:3149:18> [in] implicitly Param="delay" ParamIndex=1
|   | `-ParagraphComment 0x559827496e70 <line:3148:16, line:3149:18>
|   |   |-TextComment 0x559827496e20 <line:3148:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x559827496e40 <line:3149:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x559827497020 <line:3151:3, line:3154:3>
|   | |-TextComment 0x559827496e90 <line:3151:3> Text=" "
|   | |-InlineCommandComment 0x559827496eb0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559827496ed0 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x559827496ef0 <line:3152:3> Text=" "
|   | |-InlineCommandComment 0x559827496f10 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559827496f30 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x559827496f50 <line:3153:3> Text=" "
|   | |-InlineCommandComment 0x559827496f70 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x559827496f90 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x559827496fb0 <line:3154:3> Text=" "
|   |-VerbatimLineComment 0x559827497040 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x5598274970b0 <line:3155:1>
|     `-TextComment 0x559827497080 <col:1> Text=" "
|-FunctionDecl 0x5598273f55b0 <line:3174:1, line:3177:1> line:3174:21 k_delayed_work_remaining_get 's32_t (struct k_delayed_work *)' static inline
| |-ParmVarDecl 0x5598273f54e8 <col:50, col:73> col:73 used work 'struct k_delayed_work *'
| |-CompoundStmt 0x5598273f5848 <line:3175:1, line:3177:1>
| | `-ReturnStmt 0x5598273f5800 <line:3176:2, col:66>
| |   `-ImplicitCastExpr 0x5598273f57e8 <col:9, col:66> 's32_t':'int' <IntegralCast>
| |     `-CallExpr 0x5598273f57a0 <col:9, col:66> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5598273f5788 <col:9> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5598273f5658 <col:9> 'u64_t (u64_t)' Function 0x5598273a8210 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
| |       `-ImplicitCastExpr 0x5598273f57d0 <col:31, col:65> 'u64_t':'unsigned long long' <IntegralCast>
| |         `-CallExpr 0x5598273f5758 <col:31, col:65> 's32_t':'int'
| |           |-ImplicitCastExpr 0x5598273f5740 <col:31> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x5598273f5680 <col:31> 's32_t (struct _timeout *)' Function 0x5598273d8190 'z_timeout_remaining' 's32_t (struct _timeout *)'
| |           `-UnaryOperator 0x5598273f5720 <col:51, col:58> 'struct _timeout *' prefix '&'
| |             `-MemberExpr 0x5598273f56e8 <col:52, col:58> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x5598272e0928
| |               `-ImplicitCastExpr 0x5598273f56d0 <col:52> 'struct k_delayed_work *' <LValueToRValue>
| |                 `-DeclRefExpr 0x5598273f56a8 <col:52> 'struct k_delayed_work *' lvalue ParmVar 0x5598273f54e8 'work' 'struct k_delayed_work *'
| `-FullComment 0x5598274975f0 <line:3163:3, line:3173:1>
|   |-ParagraphComment 0x5598274971e0 <line:3163:3>
|   | `-TextComment 0x5598274971b0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827497200 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x559827497260 <col:10, col:66>
|   |   `-TextComment 0x559827497230 <col:10, col:66> Text=" Get time remaining before a delayed work gets scheduled."
|   |-ParagraphComment 0x559827497300 <line:3165:3, line:3167:30>
|   | |-TextComment 0x559827497280 <line:3165:3, col:66> Text=" This routine computes the (approximate) time remaining before a"
|   | |-TextComment 0x5598274972a0 <line:3166:3, col:71> Text=" delayed work gets executed. If the delayed work is not waiting to be"
|   | `-TextComment 0x5598274972c0 <line:3167:3, col:30> Text=" scheduled, it returns zero."
|   |-ParagraphComment 0x559827497350 <line:3169:3>
|   | `-TextComment 0x559827497320 <col:3> Text=" "
|   |-ParamCommandComment 0x559827497370 <col:4, col:37> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559827497400 <col:15, col:37>
|   |   `-TextComment 0x5598274973d0 <col:15, col:37> Text="     Delayed work item."
|   |-ParagraphComment 0x559827497450 <line:3171:3>
|   | `-TextComment 0x559827497420 <col:3> Text=" "
|   |-BlockCommandComment 0x559827497470 <col:4, line:3172:3> Name="return"
|   | `-ParagraphComment 0x5598274974f0 <line:3171:11, line:3172:3>
|   |   |-TextComment 0x5598274974a0 <line:3171:11, col:44> Text=" Remaining time (in milliseconds)."
|   |   `-TextComment 0x5598274974c0 <line:3172:3> Text=" "
|   |-VerbatimLineComment 0x559827497510 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x559827497580 <line:3173:1>
|     `-TextComment 0x559827497550 <col:1> Text=" "
|-FunctionDecl 0x5598273f5a90 <line:3190:1, line:3191:33> line:3190:13 k_work_poll_init 'void (struct k_work_poll *, k_work_handler_t)' extern
| |-ParmVarDecl 0x5598273f5910 <col:30, col:50> col:50 work 'struct k_work_poll *'
| |-ParmVarDecl 0x5598273f5980 <line:3191:9, col:26> col:26 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x559827497a80 <line:3180:3, line:3188:14>
|   |-ParagraphComment 0x559827497690 <line:3180:3>
|   | `-TextComment 0x559827497660 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274976b0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x559827497710 <col:10, col:43>
|   |   `-TextComment 0x5598274976e0 <col:10, col:43> Text=" Initialize a triggered work item."
|   |-ParagraphComment 0x559827497780 <line:3182:3, line:3183:17>
|   | |-TextComment 0x559827497730 <line:3182:3, col:69> Text=" This routine initializes a workqueue triggered work item, prior to"
|   | `-TextComment 0x559827497750 <line:3183:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x5598274977d0 <line:3185:3>
|   | `-TextComment 0x5598274977a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274977f0 <col:4, line:3186:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5598274978a0 <line:3185:15, line:3186:3>
|   |   |-TextComment 0x559827497850 <line:3185:15, col:46> Text=" Address of triggered work item."
|   |   `-TextComment 0x559827497870 <line:3186:3> Text=" "
|   |-ParamCommandComment 0x5598274978c0 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x559827497950 <col:18, col:70>
|   |   `-TextComment 0x559827497920 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x5598274979a0 <line:3188:3>
|   | `-TextComment 0x559827497970 <col:3> Text=" "
|   `-BlockCommandComment 0x5598274979c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x559827497a20 <col:11, col:14>
|       `-TextComment 0x5598274979f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5598273f5f18 <line:3227:1, line:3231:25> line:3227:12 used k_work_poll_submit_to_queue 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x5598273f5bb8 <col:40, col:57> col:57 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5598273f5c40 <line:3228:12, col:32> col:32 work 'struct k_work_poll *'
| |-ParmVarDecl 0x5598273f5cc8 <line:3229:12, col:33> col:33 events 'struct k_poll_event *'
| |-ParmVarDecl 0x5598273f5d40 <line:3230:12, col:16> col:16 num_events 'int'
| |-ParmVarDecl 0x5598273f5db0 <line:3231:12, col:18> col:18 timeout 's32_t':'int'
| `-FullComment 0x5598274987b0 <line:3194:3, line:3225:69>
|   |-ParagraphComment 0x559827497b20 <line:3194:3>
|   | `-TextComment 0x559827497af0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827497b40 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x559827497ba0 <col:10, col:39>
|   |   `-TextComment 0x559827497b70 <col:10, col:39> Text=" Submit a triggered work item."
|   |-ParagraphComment 0x559827497e10 <line:3196:3, line:3200:50>
|   | |-TextComment 0x559827497bc0 <line:3196:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x559827497c10 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x559827497c30 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x559827497c50 <line:3197:3> Text=" "
|   | |-InlineCommandComment 0x559827497ca0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x559827497cc0 <col:13, col:35> Text=" when one of the given "
|   | |-InlineCommandComment 0x559827497d10 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x559827497d30 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x559827497d50 <line:3198:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x559827497d70 <line:3199:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x559827497d90 <line:3200:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x559827497f00 <line:3202:3, line:3206:70>
|   | |-TextComment 0x559827497e30 <line:3202:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x559827497e50 <line:3203:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x559827497e70 <line:3204:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x559827497e90 <line:3205:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x559827497eb0 <line:3206:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x559827497f50 <line:3208:3>
|   | `-TextComment 0x559827497f20 <col:3> Text=" "
|   |-BlockCommandComment 0x559827497f70 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559827497fd0 <col:9, col:31>
|   |   `-TextComment 0x559827497fa0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559827498020 <line:3210:3>
|   | `-TextComment 0x559827497ff0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827498040 <col:4, line:3213:57> Name="warning"
|   | `-ParagraphComment 0x5598274980f0 <line:3211:3, line:3213:57>
|   |   |-TextComment 0x559827498070 <line:3211:3, col:75> Text=" Provided array of events as well as a triggered work item must be placed"
|   |   |-TextComment 0x559827498090 <line:3212:3, col:67> Text=" in persistent memory (valid until work handler execution or work"
|   |   `-TextComment 0x5598274980b0 <line:3213:3, col:57> Text=" cancellation) and cannot be modified after submission."
|   |-ParagraphComment 0x559827498140 <line:3215:3>
|   | `-TextComment 0x559827498110 <col:3> Text=" "
|   |-ParamCommandComment 0x559827498160 <col:4, line:3216:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x559827498210 <line:3215:17, line:3216:3>
|   |   |-TextComment 0x5598274981c0 <line:3215:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5598274981e0 <line:3216:3> Text=" "
|   |-ParamCommandComment 0x559827498230 <col:4, line:3217:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x5598274982e0 <line:3216:15, line:3217:3>
|   |   |-TextComment 0x559827498290 <line:3216:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x5598274982b0 <line:3217:3> Text=" "
|   |-ParamCommandComment 0x559827498300 <col:4, line:3218:3> [in] implicitly Param="events" ParamIndex=2
|   | `-ParagraphComment 0x5598274983b0 <line:3217:17, line:3218:3>
|   |   |-TextComment 0x559827498360 <line:3217:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x559827498380 <line:3218:3> Text=" "
|   |-ParamCommandComment 0x5598274983d0 <col:4, line:3219:3> [in] implicitly Param="num_events" ParamIndex=3
|   | `-ParagraphComment 0x559827498480 <line:3218:21, line:3219:3>
|   |   |-TextComment 0x559827498430 <line:3218:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x559827498450 <line:3219:3> Text=" "
|   |-ParamCommandComment 0x5598274984a0 <col:4, line:3220:42> [in] implicitly Param="timeout" ParamIndex=4
|   | `-ParagraphComment 0x559827498550 <line:3219:18, line:3220:42>
|   |   |-TextComment 0x559827498500 <line:3219:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x559827498520 <line:3220:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x5598274986e0 <line:3223:3, line:3225:69>
|     |-TextComment 0x559827498570 <line:3223:3> Text=" "
|     |-InlineCommandComment 0x559827498590 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x5598274985b0 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x5598274985d0 <line:3224:3> Text=" "
|     |-InlineCommandComment 0x5598274985f0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x559827498610 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x559827498630 <line:3225:3> Text=" "
|     |-InlineCommandComment 0x559827498650 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x559827498670 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x5598273f62e8 <line:3264:1, line:3271:1> line:3264:19 k_work_poll_submit 'int (struct k_work_poll *, struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x5598273f6030 <col:38, col:58> col:58 used work 'struct k_work_poll *'
| |-ParmVarDecl 0x5598273f60b8 <line:3265:10, col:31> col:31 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x5598273f6130 <line:3266:10, col:14> col:14 used num_events 'int'
| |-ParmVarDecl 0x5598273f61a0 <line:3267:10, col:16> col:16 used timeout 's32_t':'int'
| |-CompoundStmt 0x5598273f6628 <line:3268:1, line:3271:1>
| | `-ReturnStmt 0x5598273f65e0 <line:3269:2, line:3270:34>
| |   `-CallExpr 0x5598273f6530 <line:3269:9, line:3270:34> 'int'
| |     |-ImplicitCastExpr 0x5598273f6518 <line:3269:9> 'int (*)(struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5598273f63a8 <col:9> 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' Function 0x5598273f5f18 'k_work_poll_submit_to_queue' 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)'
| |     |-UnaryOperator 0x5598273f63f8 <col:37, col:38> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x5598273f63d0 <col:38> 'struct k_work_q':'struct k_work_q' lvalue Var 0x5598272e0e58 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x5598273f6580 <col:52> 'struct k_work_poll *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5598273f6418 <col:52> 'struct k_work_poll *' lvalue ParmVar 0x5598273f6030 'work' 'struct k_work_poll *'
| |     |-ImplicitCastExpr 0x5598273f6598 <line:3270:7> 'struct k_poll_event *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5598273f6440 <col:7> 'struct k_poll_event *' lvalue ParmVar 0x5598273f60b8 'events' 'struct k_poll_event *'
| |     |-ImplicitCastExpr 0x5598273f65b0 <col:15> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x5598273f6468 <col:15> 'int' lvalue ParmVar 0x5598273f6130 'num_events' 'int'
| |     `-ImplicitCastExpr 0x5598273f65c8 <col:27> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x5598273f6490 <col:27> 's32_t':'int' lvalue ParmVar 0x5598273f61a0 'timeout' 's32_t':'int'
| `-FullComment 0x559827499320 <line:3234:3, line:3262:69>
|   |-ParagraphComment 0x559827498850 <line:3234:3>
|   | `-TextComment 0x559827498820 <col:3> Text=" "
|   |-BlockCommandComment 0x559827498870 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x5598274988d0 <col:10, col:63>
|   |   `-TextComment 0x5598274988a0 <col:10, col:63> Text=" Submit a triggered work item to the system workqueue."
|   |-ParagraphComment 0x559827498ac0 <line:3236:3, line:3240:50>
|   | |-TextComment 0x5598274988f0 <line:3236:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x559827498940 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x559827498960 <col:44, col:69> Text=" to be processed by system"
|   | |-TextComment 0x559827498980 <line:3237:3, col:35> Text=" workqueue when one of the given "
|   | |-InlineCommandComment 0x5598274989d0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x5598274989f0 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x559827498a10 <line:3238:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x559827498a30 <line:3239:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x559827498a50 <line:3240:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x559827498bb0 <line:3242:3, line:3246:70>
|   | |-TextComment 0x559827498ae0 <line:3242:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x559827498b00 <line:3243:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x559827498b20 <line:3244:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x559827498b40 <line:3245:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x559827498b60 <line:3246:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x559827498c00 <line:3248:3>
|   | `-TextComment 0x559827498bd0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827498c20 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559827498c80 <col:9, col:31>
|   |   `-TextComment 0x559827498c50 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559827498cd0 <line:3250:3>
|   | `-TextComment 0x559827498ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827498cf0 <col:4, line:3252:63> Name="warning"
|   | `-ParagraphComment 0x559827498d70 <line:3251:3, line:3252:63>
|   |   |-TextComment 0x559827498d20 <line:3251:3, col:72> Text=" Provided array of events as well as a triggered work item must not be"
|   |   `-TextComment 0x559827498d40 <line:3252:3, col:63> Text=" modified until the item has been processed by the workqueue."
|   |-ParagraphComment 0x559827498dc0 <line:3254:3>
|   | `-TextComment 0x559827498d90 <col:3> Text=" "
|   |-ParamCommandComment 0x559827498de0 <col:4, line:3255:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559827498e90 <line:3254:15, line:3255:3>
|   |   |-TextComment 0x559827498e40 <line:3254:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x559827498e60 <line:3255:3> Text=" "
|   |-ParamCommandComment 0x559827498eb0 <col:4, line:3256:3> [in] implicitly Param="events" ParamIndex=1
|   | `-ParagraphComment 0x559827498f60 <line:3255:17, line:3256:3>
|   |   |-TextComment 0x559827498f10 <line:3255:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x559827498f30 <line:3256:3> Text=" "
|   |-ParamCommandComment 0x559827498f80 <col:4, line:3257:3> [in] implicitly Param="num_events" ParamIndex=2
|   | `-ParagraphComment 0x559827499030 <line:3256:21, line:3257:3>
|   |   |-TextComment 0x559827498fe0 <line:3256:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x559827499000 <line:3257:3> Text=" "
|   |-ParamCommandComment 0x559827499050 <col:4, line:3258:42> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x559827499100 <line:3257:18, line:3258:42>
|   |   |-TextComment 0x5598274990b0 <line:3257:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x5598274990d0 <line:3258:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x559827499290 <line:3260:3, line:3262:69>
|     |-TextComment 0x559827499120 <line:3260:3> Text=" "
|     |-InlineCommandComment 0x559827499140 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x559827499160 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x559827499180 <line:3261:3> Text=" "
|     |-InlineCommandComment 0x5598274991a0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x5598274991c0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x5598274991e0 <line:3262:3> Text=" "
|     |-InlineCommandComment 0x559827499200 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x559827499220 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x5598273f6778 <line:3287:1, col:55> col:12 k_work_poll_cancel 'int (struct k_work_poll *)' extern
| |-ParmVarDecl 0x5598273f6668 <col:31, col:51> col:51 work 'struct k_work_poll *'
| `-FullComment 0x559827499870 <line:3274:3, line:3285:74>
|   |-ParagraphComment 0x5598274993c0 <line:3274:3>
|   | `-TextComment 0x559827499390 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274993e0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x559827499440 <col:10, col:39>
|   |   `-TextComment 0x559827499410 <col:10, col:39> Text=" Cancel a triggered work item."
|   |-ParagraphComment 0x559827499530 <line:3276:3, line:3278:14>
|   | |-TextComment 0x559827499460 <line:3276:3, col:62> Text=" This routine cancels the submission of triggered work item "
|   | |-InlineCommandComment 0x5598274994b0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x5598274994d0 <line:3277:3, col:72> Text=" A triggered work item can only be canceled if no event triggered work"
|   | `-TextComment 0x5598274994f0 <line:3278:3, col:14> Text=" submission."
|   |-ParagraphComment 0x559827499580 <line:3280:3>
|   | `-TextComment 0x559827499550 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274995a0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x559827499600 <col:9, col:31>
|   |   `-TextComment 0x5598274995d0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x559827499650 <line:3282:3>
|   | `-TextComment 0x559827499620 <col:3> Text=" "
|   |-ParamCommandComment 0x559827499670 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x559827499700 <col:15, col:44>
|   |   `-TextComment 0x5598274996d0 <col:15, col:44> Text=" Address of delayed work item."
|   `-ParagraphComment 0x559827499810 <line:3284:3, line:3285:74>
|     |-TextComment 0x559827499720 <line:3284:3> Text=" "
|     |-InlineCommandComment 0x559827499740 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x559827499760 <col:11, col:32> Text=" 0 Work item canceled."
|     |-TextComment 0x559827499780 <line:3285:3> Text=" "
|     |-InlineCommandComment 0x5598274997a0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x5598274997c0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|-RecordDecl 0x5598273f6878 prev 0x5598273c1c08 <line:3300:1, line:3314:1> line:3300:8 struct k_mutex definition
| |-FullComment 0x559827499a00 <line:3297:3, line:3299:1>
| | |-ParagraphComment 0x559827499930 <line:3297:3, line:3298:3>
| | | |-TextComment 0x5598274998e0 <line:3297:3, col:18> Text=" Mutex Structure"
| | | `-TextComment 0x559827499900 <line:3298:3> Text=" "
| | |-VerbatimLineComment 0x559827499950 <col:4, col:23> Text=" mutex_apis"
| | `-ParagraphComment 0x5598274999c0 <line:3299:1>
| |   `-TextComment 0x559827499990 <col:1> Text=" "
| |-FieldDecl 0x5598273f6938 <line:3302:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x559827499ad0 <line:3301:5, col:22>
| |   `-ParagraphComment 0x559827499aa0 <col:5, col:22>
| |     `-TextComment 0x559827499a70 <col:5, col:22> Text=" Mutex wait queue "
| |-FieldDecl 0x5598273f69d0 <line:3304:2, col:19> col:19 owner 'struct k_thread *'
| | `-FullComment 0x559827499ba0 <line:3303:5, col:17>
| |   `-ParagraphComment 0x559827499b70 <col:5, col:17>
| |     `-TextComment 0x559827499b40 <col:5, col:17> Text=" Mutex owner "
| |-FieldDecl 0x5598273f6a58 <line:3307:2, col:8> col:8 lock_count 'u32_t':'unsigned int'
| | `-FullComment 0x559827499c70 <line:3306:5, col:24>
| |   `-ParagraphComment 0x559827499c40 <col:5, col:24>
| |     `-TextComment 0x559827499c10 <col:5, col:24> Text=" Current lock count "
| `-FieldDecl 0x5598273f6ae0 <line:3310:2, col:6> col:6 owner_orig_prio 'int'
|   `-FullComment 0x559827499d40 <line:3309:5, col:30>
|     `-ParagraphComment 0x559827499d10 <col:5, col:30>
|       `-TextComment 0x559827499ce0 <col:5, col:30> Text=" Original thread priority "
|-FunctionDecl 0x5598273f6db8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3361:49> col:15 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x5598273f6cb0 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| `-FullComment 0x55982749a1f0 <line:3349:3, line:3360:1>
|   |-ParagraphComment 0x559827499de0 <line:3349:3>
|   | `-TextComment 0x559827499db0 <col:3> Text=" "
|   |-BlockCommandComment 0x559827499e00 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x559827499e60 <col:10, col:29>
|   |   `-TextComment 0x559827499e30 <col:10, col:29> Text=" Initialize a mutex."
|   |-ParagraphComment 0x559827499eb0 <line:3351:3, col:67>
|   | `-TextComment 0x559827499e80 <col:3, col:67> Text=" This routine initializes a mutex object, prior to its first use."
|   |-ParagraphComment 0x559827499f00 <line:3353:3, col:70>
|   | `-TextComment 0x559827499ed0 <col:3, col:70> Text=" Upon completion, the mutex is available and does not have an owner."
|   |-ParagraphComment 0x559827499f50 <line:3355:3>
|   | `-TextComment 0x559827499f20 <col:3> Text=" "
|   |-ParamCommandComment 0x559827499f70 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x55982749a000 <col:16, col:37>
|   |   `-TextComment 0x559827499fd0 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x55982749a0a0 <line:3357:3, col:33>
|   | |-TextComment 0x55982749a020 <col:3> Text=" "
|   | |-InlineCommandComment 0x55982749a040 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55982749a060 <col:11, col:33> Text=" 0 Mutex object created"
|   |-ParagraphComment 0x55982749a0f0 <line:3359:3>
|   | `-TextComment 0x55982749a0c0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55982749a110 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x55982749a180 <line:3360:1>
|     `-TextComment 0x55982749a150 <col:1> Text=" "
|-FunctionDecl 0x5598273f7038 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3384:64> col:15 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x5598273f6eb0 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| |-ParmVarDecl 0x5598273f6f20 <col:51, col:57> col:57 timeout 's32_t':'int'
| `-FullComment 0x55982749a990 <line:3365:3, line:3383:1>
|   |-ParagraphComment 0x55982749a290 <line:3365:3>
|   | `-TextComment 0x55982749a260 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749a2b0 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x55982749a310 <col:10, col:23>
|   |   `-TextComment 0x55982749a2e0 <col:10, col:23> Text=" Lock a mutex."
|   |-ParagraphComment 0x55982749a430 <line:3367:3, line:3369:20>
|   | |-TextComment 0x55982749a330 <line:3367:3, col:22> Text=" This routine locks "
|   | |-InlineCommandComment 0x55982749a380 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x55982749a3a0 <col:32, col:73> Text=" If the mutex is locked by another thread,"
|   | |-TextComment 0x55982749a3c0 <line:3368:3, col:70> Text=" the calling thread waits until the mutex becomes available or until"
|   | `-TextComment 0x55982749a3e0 <line:3369:3, col:20> Text=" a timeout occurs."
|   |-ParagraphComment 0x55982749a4a0 <line:3371:3, line:3372:62>
|   | |-TextComment 0x55982749a450 <line:3371:3, col:77> Text=" A thread is permitted to lock a mutex it has already locked. The operation"
|   | `-TextComment 0x55982749a470 <line:3372:3, col:62> Text=" completes immediately and the lock count is increased by 1."
|   |-ParagraphComment 0x55982749a4f0 <line:3374:3>
|   | `-TextComment 0x55982749a4c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982749a510 <col:4, line:3375:3> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x55982749a5c0 <line:3374:16, line:3375:3>
|   |   |-TextComment 0x55982749a570 <line:3374:16, col:37> Text=" Address of the mutex."
|   |   `-TextComment 0x55982749a590 <line:3375:3> Text=" "
|   |-ParamCommandComment 0x55982749a5e0 <col:4, line:3377:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x55982749a6c0 <line:3375:18, line:3377:28>
|   |   |-TextComment 0x55982749a640 <line:3375:18, col:67> Text=" Non-negative waiting period to lock the mutex (in"
|   |   |-TextComment 0x55982749a660 <line:3376:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55982749a680 <line:3377:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55982749a890 <line:3379:3, line:3382:3>
|   | |-TextComment 0x55982749a6e0 <line:3379:3> Text=" "
|   | |-InlineCommandComment 0x55982749a700 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55982749a720 <col:11, col:26> Text=" 0 Mutex locked."
|   | |-TextComment 0x55982749a740 <line:3380:3> Text=" "
|   | |-InlineCommandComment 0x55982749a760 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55982749a780 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x55982749a7c0 <line:3381:3> Text=" "
|   | |-InlineCommandComment 0x55982749a7e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55982749a800 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55982749a820 <line:3382:3> Text=" "
|   |-VerbatimLineComment 0x55982749a8b0 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x55982749a920 <line:3383:1>
|     `-TextComment 0x55982749a8f0 <col:1> Text=" "
|-FunctionDecl 0x5598273f71d0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3404:51> col:15 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x5598273f7140 <col:30, col:46> col:46 mutex 'struct k_mutex *'
| `-FullComment 0x55982749b020 <line:3387:3, line:3403:1>
|   |-ParagraphComment 0x55982749aa30 <line:3387:3>
|   | `-TextComment 0x55982749aa00 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749aa50 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x55982749aab0 <col:10, col:25>
|   |   `-TextComment 0x55982749aa80 <col:10, col:25> Text=" Unlock a mutex."
|   |-ParagraphComment 0x55982749aba0 <line:3389:3, line:3390:18>
|   | |-TextComment 0x55982749aad0 <line:3389:3, col:24> Text=" This routine unlocks "
|   | |-InlineCommandComment 0x55982749ab20 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x55982749ab40 <col:34, col:73> Text=" The mutex must already be locked by the"
|   | `-TextComment 0x55982749ab60 <line:3390:3, col:18> Text=" calling thread."
|   |-ParagraphComment 0x55982749ac40 <line:3392:3, line:3394:10>
|   | |-TextComment 0x55982749abc0 <line:3392:3, col:78> Text=" The mutex cannot be claimed by another thread until it has been unlocked by"
|   | |-TextComment 0x55982749abe0 <line:3393:3, col:71> Text=" the calling thread as many times as it was previously locked by that"
|   | `-TextComment 0x55982749ac00 <line:3394:3, col:10> Text=" thread."
|   |-ParagraphComment 0x55982749ac90 <line:3396:3>
|   | `-TextComment 0x55982749ac60 <col:3> Text=" "
|   |-ParamCommandComment 0x55982749acb0 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x55982749ad40 <col:16, col:37>
|   |   `-TextComment 0x55982749ad10 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x55982749aed0 <line:3398:3, line:3400:42>
|   | |-TextComment 0x55982749ad60 <line:3398:3> Text=" "
|   | |-InlineCommandComment 0x55982749ad80 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55982749ada0 <col:11, col:28> Text=" 0 Mutex unlocked."
|   | |-TextComment 0x55982749adc0 <line:3399:3> Text=" "
|   | |-InlineCommandComment 0x55982749ade0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55982749ae00 <col:11, col:59> Text=" -EPERM The current thread does not own the mutex"
|   | |-TextComment 0x55982749ae20 <line:3400:3> Text=" "
|   | |-InlineCommandComment 0x55982749ae40 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55982749ae60 <col:11, col:42> Text=" -EINVAL The mutex is not locked"
|   |-ParagraphComment 0x55982749af20 <line:3402:3>
|   | `-TextComment 0x55982749aef0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55982749af40 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x55982749afb0 <line:3403:1>
|     `-TextComment 0x55982749af80 <col:1> Text=" "
|-RecordDecl 0x5598273f72d8 prev 0x5598273c1cb0 <line:3414:1, line:3422:1> line:3414:8 struct k_sem definition
| |-FullComment 0x55982749b140 <line:3411:3, col:24>
| | `-ParagraphComment 0x55982749b110 <col:3, col:24>
| |   |-TextComment 0x55982749b090 <col:3> Text=" "
| |   |-InlineCommandComment 0x55982749b0b0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55982749b0d0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5598273f7370 <line:3415:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5598273f73c8 <line:3416:2, col:8> col:8 referenced count 'u32_t':'unsigned int'
| `-FieldDecl 0x5598273f7420 <line:3417:2, col:8> col:8 limit 'u32_t':'unsigned int'
|-FunctionDecl 0x5598273f77d8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3460:24> line:3459:15 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x5598273f75b0 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x5598273f7628 <col:45, col:58> col:58 initial_count 'unsigned int'
| |-ParmVarDecl 0x5598273f76a0 <line:3460:6, col:19> col:19 limit 'unsigned int'
| `-FullComment 0x55982749b7c0 <line:3446:3, line:3458:1>
|   |-ParagraphComment 0x55982749b1e0 <line:3446:3>
|   | `-TextComment 0x55982749b1b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749b200 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55982749b260 <col:10, col:33>
|   |   `-TextComment 0x55982749b230 <col:10, col:33> Text=" Initialize a semaphore."
|   |-ParagraphComment 0x55982749b2b0 <line:3448:3, col:71>
|   | `-TextComment 0x55982749b280 <col:3, col:71> Text=" This routine initializes a semaphore object, prior to its first use."
|   |-ParagraphComment 0x55982749b300 <line:3450:3>
|   | `-TextComment 0x55982749b2d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982749b320 <col:4, line:3451:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55982749b3d0 <line:3450:14, line:3451:3>
|   |   |-TextComment 0x55982749b380 <line:3450:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x55982749b3a0 <line:3451:3> Text=" "
|   |-ParamCommandComment 0x55982749b3f0 <col:4, line:3452:3> [in] implicitly Param="initial_count" ParamIndex=1
|   | `-ParagraphComment 0x55982749b4a0 <line:3451:24, line:3452:3>
|   |   |-TextComment 0x55982749b450 <line:3451:24, col:48> Text=" Initial semaphore count."
|   |   `-TextComment 0x55982749b470 <line:3452:3> Text=" "
|   |-ParamCommandComment 0x55982749b4c0 <col:4, col:50> [in] implicitly Param="limit" ParamIndex=2
|   | `-ParagraphComment 0x55982749b550 <col:16, col:50>
|   |   `-TextComment 0x55982749b520 <col:16, col:50> Text=" Maximum permitted semaphore count."
|   |-ParagraphComment 0x55982749b660 <line:3454:3, line:3455:33>
|   | |-TextComment 0x55982749b570 <line:3454:3> Text=" "
|   | |-InlineCommandComment 0x55982749b590 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55982749b5b0 <col:11, col:43> Text=" 0 Semaphore created successfully"
|   | |-TextComment 0x55982749b5d0 <line:3455:3> Text=" "
|   | |-InlineCommandComment 0x55982749b5f0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55982749b610 <col:11, col:33> Text=" -EINVAL Invalid values"
|   |-ParagraphComment 0x55982749b6b0 <line:3457:3>
|   | `-TextComment 0x55982749b680 <col:3> Text=" "
|   |-VerbatimLineComment 0x55982749b6d0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55982749b740 <line:3458:1>
|     `-TextComment 0x55982749b710 <col:1> Text=" "
|-FunctionDecl 0x5598273f7a68 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3479:58> col:15 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x5598273f78e0 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x5598273f7950 <col:45, col:51> col:51 timeout 's32_t':'int'
| `-FullComment 0x55982749bfb0 <line:3463:3, line:3478:1>
|   |-ParagraphComment 0x55982749b860 <line:3463:3>
|   | `-TextComment 0x55982749b830 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749b880 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55982749b8e0 <col:10, col:27>
|   |   `-TextComment 0x55982749b8b0 <col:10, col:27> Text=" Take a semaphore."
|   |-ParagraphComment 0x55982749b980 <line:3465:3, col:24>
|   | |-TextComment 0x55982749b900 <col:3, col:22> Text=" This routine takes "
|   | `-InlineCommandComment 0x55982749b950 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x55982749b9d0 <line:3467:3>
|   | `-TextComment 0x55982749b9a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749b9f0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x55982749bad0 <col:9, col:72>
|   |   |-TextComment 0x55982749ba20 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x55982749ba70 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x55982749ba90 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x55982749bb20 <line:3469:3>
|   | `-TextComment 0x55982749baf0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982749bb40 <col:4, line:3470:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55982749bbf0 <line:3469:14, line:3470:3>
|   |   |-TextComment 0x55982749bba0 <line:3469:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x55982749bbc0 <line:3470:3> Text=" "
|   |-ParamCommandComment 0x55982749bc10 <col:4, line:3472:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x55982749bcf0 <line:3470:18, line:3472:28>
|   |   |-TextComment 0x55982749bc70 <line:3470:18, col:71> Text=" Non-negative waiting period to take the semaphore (in"
|   |   |-TextComment 0x55982749bc90 <line:3471:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55982749bcb0 <line:3472:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55982749bea0 <line:3474:3, line:3477:3>
|   | |-TextComment 0x55982749bd10 <line:3474:3> Text=" "
|   | |-InlineCommandComment 0x55982749bd30 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55982749bd50 <col:11, col:29> Text=" 0 Semaphore taken."
|   | |-TextComment 0x55982749bd70 <line:3475:3> Text=" "
|   | |-InlineCommandComment 0x55982749bd90 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55982749bdb0 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x55982749bdd0 <line:3476:3> Text=" "
|   | |-InlineCommandComment 0x55982749bdf0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55982749be10 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55982749be30 <line:3477:3> Text=" "
|   |-VerbatimLineComment 0x55982749bec0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55982749bf30 <line:3478:1>
|     `-TextComment 0x55982749bf00 <col:1> Text=" "
|-FunctionDecl 0x5598273f8cc0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3494:44> col:16 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5598273f8bc0 <col:27, col:41> col:41 sem 'struct k_sem *'
| `-FullComment 0x55982749c590 <line:3482:3, line:3493:1>
|   |-ParagraphComment 0x55982749c050 <line:3482:3>
|   | `-TextComment 0x55982749c020 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749c070 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55982749c0d0 <col:10, col:27>
|   |   `-TextComment 0x55982749c0a0 <col:10, col:27> Text=" Give a semaphore."
|   |-ParagraphComment 0x55982749c1c0 <line:3484:3, line:3485:19>
|   | |-TextComment 0x55982749c0f0 <line:3484:3, col:22> Text=" This routine gives "
|   | |-InlineCommandComment 0x55982749c140 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem,"
|   | |-TextComment 0x55982749c160 <col:30, col:76> Text=" unless the semaphore is already at its maximum"
|   | `-TextComment 0x55982749c180 <line:3485:3, col:19> Text=" permitted count."
|   |-ParagraphComment 0x55982749c210 <line:3487:3>
|   | `-TextComment 0x55982749c1e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749c230 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55982749c290 <col:9, col:31>
|   |   `-TextComment 0x55982749c260 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55982749c2e0 <line:3489:3>
|   | `-TextComment 0x55982749c2b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982749c300 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55982749c390 <col:14, col:39>
|   |   `-TextComment 0x55982749c360 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x55982749c3e0 <line:3491:3>
|   | `-TextComment 0x55982749c3b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749c400 <col:4, line:3492:3> Name="return"
|   | `-ParagraphComment 0x55982749c480 <line:3491:11, line:3492:3>
|   |   |-TextComment 0x55982749c430 <line:3491:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55982749c450 <line:3492:3> Text=" "
|   |-VerbatimLineComment 0x55982749c4a0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55982749c510 <line:3493:1>
|     `-TextComment 0x55982749c4e0 <col:1> Text=" "
|-FunctionDecl 0x5598273f8e48 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3506:45> col:16 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5598273f8dc0 <col:28, col:42> col:42 sem 'struct k_sem *'
| `-FullComment 0x55982749ca80 <line:3497:3, line:3505:1>
|   |-ParagraphComment 0x55982749c630 <line:3497:3>
|   | `-TextComment 0x55982749c600 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749c650 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55982749c6b0 <col:10, col:44>
|   |   `-TextComment 0x55982749c680 <col:10, col:44> Text=" Reset a semaphore's count to zero."
|   |-ParagraphComment 0x55982749c780 <line:3499:3, col:49>
|   | |-TextComment 0x55982749c6d0 <col:3, col:34> Text=" This routine sets the count of "
|   | |-InlineCommandComment 0x55982749c720 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x55982749c740 <col:41, col:49> Text=" to zero."
|   |-ParagraphComment 0x55982749c7e0 <line:3501:3>
|   | `-TextComment 0x55982749c7a0 <col:3> Text=" "
|   |-ParamCommandComment 0x55982749c800 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55982749c890 <col:14, col:39>
|   |   `-TextComment 0x55982749c860 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x55982749c8e0 <line:3503:3>
|   | `-TextComment 0x55982749c8b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749c900 <col:4, line:3504:3> Name="return"
|   | `-ParagraphComment 0x55982749c980 <line:3503:11, line:3504:3>
|   |   |-TextComment 0x55982749c930 <line:3503:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55982749c950 <line:3504:3> Text=" "
|   |-VerbatimLineComment 0x55982749c9a0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55982749ca10 <line:3505:1>
|     `-TextComment 0x55982749c9e0 <col:1> Text=" "
|-FunctionDecl 0x5598273f8fc8 <line:3511:1, line:3514:1> line:3511:20 used z_impl_k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5598273f8f40 <col:39, col:53> col:53 used sem 'struct k_sem *'
| |-CompoundStmt 0x5598273f9158 <line:3512:1, line:3514:1>
| | `-BinaryOperator 0x5598273f9108 <line:3513:2, col:15> 'u32_t':'unsigned int' '='
| |   |-MemberExpr 0x5598273f90b0 <col:2, col:7> 'u32_t':'unsigned int' lvalue ->count 0x5598273f73c8
| |   | `-ImplicitCastExpr 0x5598273f9098 <col:2> 'struct k_sem *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5598273f9070 <col:2> 'struct k_sem *' lvalue ParmVar 0x5598273f8f40 'sem' 'struct k_sem *'
| |   `-IntegerLiteral 0x5598273f90e8 <col:15> 'unsigned int' 0
| `-FullComment 0x55982749cb70 <line:3509:3, col:12>
|   `-ParagraphComment 0x55982749cb40 <col:3, col:12>
|     |-TextComment 0x55982749caf0 <col:3> Text=" "
|     `-InlineCommandComment 0x55982749cb10 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5598273f92a8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3526:57> col:24 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x5598273f9198 <col:40, col:54> col:54 sem 'struct k_sem *'
| `-FullComment 0x55982749d020 <line:3517:3, line:3525:1>
|   |-ParagraphComment 0x55982749cc10 <line:3517:3>
|   | `-TextComment 0x55982749cbe0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749cc30 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55982749cc90 <col:10, col:34>
|   |   `-TextComment 0x55982749cc60 <col:10, col:34> Text=" Get a semaphore's count."
|   |-ParagraphComment 0x55982749cd30 <line:3519:3, col:47>
|   | |-TextComment 0x55982749ccb0 <col:3, col:45> Text=" This routine returns the current count of "
|   | `-InlineCommandComment 0x55982749cd00 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x55982749cd80 <line:3521:3>
|   | `-TextComment 0x55982749cd50 <col:3> Text=" "
|   |-ParamCommandComment 0x55982749cda0 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55982749ce30 <col:14, col:39>
|   |   `-TextComment 0x55982749ce00 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x55982749ce80 <line:3523:3>
|   | `-TextComment 0x55982749ce50 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749cea0 <col:4, line:3524:3> Name="return"
|   | `-ParagraphComment 0x55982749cf20 <line:3523:11, line:3524:3>
|   |   |-TextComment 0x55982749ced0 <line:3523:11, col:35> Text=" Current semaphore count."
|   |   `-TextComment 0x55982749cef0 <line:3524:3> Text=" "
|   |-VerbatimLineComment 0x55982749cf40 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55982749cfb0 <line:3525:1>
|     `-TextComment 0x55982749cf80 <col:1> Text=" "
|-FunctionDecl 0x5598273f9430 <line:3531:1, line:3534:1> line:3531:28 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x5598273f93a0 <col:51, col:65> col:65 used sem 'struct k_sem *'
| |-CompoundStmt 0x5598273f9638 <line:3532:1, line:3534:1>
| | `-ReturnStmt 0x5598273f9568 <line:3533:2, col:14>
| |   `-ImplicitCastExpr 0x5598273f9550 <col:9, col:14> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x5598273f9518 <col:9, col:14> 'u32_t':'unsigned int' lvalue ->count 0x5598273f73c8
| |       `-ImplicitCastExpr 0x5598273f9500 <col:9> 'struct k_sem *' <LValueToRValue>
| |         `-DeclRefExpr 0x5598273f94d8 <col:9> 'struct k_sem *' lvalue ParmVar 0x5598273f93a0 'sem' 'struct k_sem *'
| `-FullComment 0x55982749d110 <line:3529:3, col:12>
|   `-ParagraphComment 0x55982749d0e0 <col:3, col:12>
|     |-TextComment 0x55982749d090 <col:3> Text=" "
|     `-InlineCommandComment 0x55982749d0b0 <col:4, col:12> Name="internal" RenderNormal
|-RecordDecl 0x5598273f9650 prev 0x5598273c1d60 <line:3565:1, line:3590:1> line:3565:8 struct k_msgq definition
| |-FullComment 0x55982749d260 <line:3563:3, col:33>
| | |-ParagraphComment 0x55982749d1b0 <col:3>
| | | `-TextComment 0x55982749d180 <col:3> Text=" "
| | `-BlockCommandComment 0x55982749d1d0 <col:4, col:33> Name="brief"
| |   `-ParagraphComment 0x55982749d230 <col:10, col:33>
| |     `-TextComment 0x55982749d200 <col:10, col:33> Text=" Message Queue Structure"
| |-FieldDecl 0x5598273f9718 <line:3567:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x55982749d330 <line:3566:5, col:30>
| |   `-ParagraphComment 0x55982749d300 <col:5, col:30>
| |     `-TextComment 0x55982749d2d0 <col:5, col:30> Text=" Message queue wait queue "
| |-FieldDecl 0x5598273f97a8 <line:3569:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x55982749d400 <line:3568:5, col:10>
| |   `-ParagraphComment 0x55982749d3d0 <col:5, col:10>
| |     `-TextComment 0x55982749d3a0 <col:5, col:10> Text=" Lock "
| |-FieldDecl 0x5598273f9828 <line:3571:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x55982749d4d0 <line:3570:5, col:18>
| |   `-ParagraphComment 0x55982749d4a0 <col:5, col:18>
| |     `-TextComment 0x55982749d470 <col:5, col:18> Text=" Message size "
| |-FieldDecl 0x5598273f98a8 <line:3573:2, col:8> col:8 referenced max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x55982749d5a0 <line:3572:5, col:32>
| |   `-ParagraphComment 0x55982749d570 <col:5, col:32>
| |     `-TextComment 0x55982749d540 <col:5, col:32> Text=" Maximal number of messages "
| |-FieldDecl 0x5598273f9930 <line:3575:2, col:8> col:8 buffer_start 'char *'
| | `-FullComment 0x55982749d670 <line:3574:5, col:29>
| |   `-ParagraphComment 0x55982749d640 <col:5, col:29>
| |     `-TextComment 0x55982749d610 <col:5, col:29> Text=" Start of message buffer "
| |-FieldDecl 0x5598273f99c0 <line:3577:2, col:8> col:8 buffer_end 'char *'
| | `-FullComment 0x55982749d740 <line:3576:5, col:27>
| |   `-ParagraphComment 0x55982749d710 <col:5, col:27>
| |     `-TextComment 0x55982749d6e0 <col:5, col:27> Text=" End of message buffer "
| |-FieldDecl 0x5598273f9a50 <line:3579:2, col:8> col:8 read_ptr 'char *'
| | `-FullComment 0x55982749d810 <line:3578:5, col:18>
| |   `-ParagraphComment 0x55982749d7e0 <col:5, col:18>
| |     `-TextComment 0x55982749d7b0 <col:5, col:18> Text=" Read pointer "
| |-FieldDecl 0x5598273f9ae0 <line:3581:2, col:8> col:8 write_ptr 'char *'
| | `-FullComment 0x55982749d8e0 <line:3580:5, col:19>
| |   `-ParagraphComment 0x55982749d8b0 <col:5, col:19>
| |     `-TextComment 0x55982749d880 <col:5, col:19> Text=" Write pointer "
| |-FieldDecl 0x5598273f9b68 <line:3583:2, col:8> col:8 referenced used_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x55982749d9b0 <line:3582:5, col:29>
| |   `-ParagraphComment 0x55982749d980 <col:5, col:29>
| |     `-TextComment 0x55982749d950 <col:5, col:29> Text=" Number of used messages "
| `-FieldDecl 0x5598273a8fe8 <line:3589:2, col:7> col:7 flags 'u8_t':'unsigned char'
|   `-FullComment 0x55982749da80 <line:3588:5, col:19>
|     `-ParagraphComment 0x55982749da50 <col:5, col:19>
|       `-TextComment 0x55982749da20 <col:5, col:19> Text=" Message queue "
|-RecordDecl 0x5598273a90b8 <line:3619:1, line:3626:1> line:3619:8 struct k_msgq_attrs definition
| |-FullComment 0x55982749dbd0 <line:3617:3, col:34>
| | |-ParagraphComment 0x55982749db20 <col:3>
| | | `-TextComment 0x55982749daf0 <col:3> Text=" "
| | `-BlockCommandComment 0x55982749db40 <col:4, col:34> Name="brief"
| |   `-ParagraphComment 0x55982749dba0 <col:10, col:34>
| |     `-TextComment 0x55982749db70 <col:10, col:34> Text=" Message Queue Attributes"
| |-FieldDecl 0x5598273a9198 <line:3621:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x55982749dca0 <line:3620:5, col:18>
| |   `-ParagraphComment 0x55982749dc70 <col:5, col:18>
| |     `-TextComment 0x55982749dc40 <col:5, col:18> Text=" Message Size "
| |-FieldDecl 0x5598273a9218 <line:3623:2, col:8> col:8 max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x55982749dd70 <line:3622:5, col:32>
| |   `-ParagraphComment 0x55982749dd40 <col:5, col:32>
| |     `-TextComment 0x55982749dd10 <col:5, col:32> Text=" Maximal number of messages "
| `-FieldDecl 0x5598273a9298 <line:3625:2, col:8> col:8 used_msgs 'u32_t':'unsigned int'
|   `-FullComment 0x55982749de40 <line:3624:5, col:19>
|     `-ParagraphComment 0x55982749de10 <col:5, col:19>
|       `-TextComment 0x55982749dde0 <col:5, col:19> Text=" Used messages "
|-FunctionDecl 0x5598273a9690 <line:3676:1, line:3677:18> line:3676:6 k_msgq_init 'void (struct k_msgq *, char *, size_t, u32_t)'
| |-ParmVarDecl 0x5598273a93f0 <col:18, col:33> col:33 q 'struct k_msgq *'
| |-ParmVarDecl 0x5598273a9468 <col:36, col:42> col:42 buffer 'char *'
| |-ParmVarDecl 0x5598273a94d8 <col:50, col:57> col:57 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5598273a9548 <line:3677:4, col:10> col:10 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x55982749e770 <line:3658:3, line:3675:1>
|   |-ParagraphComment 0x55982749dee0 <line:3658:3>
|   | `-TextComment 0x55982749deb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749df00 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55982749df60 <col:10, col:37>
|   |   `-TextComment 0x55982749df30 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x55982749dfb0 <line:3660:3, col:75>
|   | `-TextComment 0x55982749df80 <col:3, col:75> Text=" This routine initializes a message queue object, prior to its first use."
|   |-ParagraphComment 0x55982749e1f0 <line:3662:3, line:3666:32>
|   | |-TextComment 0x55982749dfd0 <line:3662:3, col:58> Text=" The message queue's ring buffer must contain space for "
|   | |-InlineCommandComment 0x55982749e020 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="max_msgs"
|   | |-TextComment 0x55982749e040 <col:70, col:79> Text=" messages,"
|   | |-TextComment 0x55982749e060 <line:3663:3, col:20> Text=" each of which is "
|   | |-InlineCommandComment 0x55982749e0b0 <col:21, col:22> Name="a" RenderEmphasized Arg[0]="msg_size"
|   | |-TextComment 0x55982749e0d0 <col:32, col:76> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x55982749e0f0 <line:3664:3, col:74> Text=" N-byte boundary, where N is a power of 2 (i.e. 1, 2, 4, ...). To ensure"
|   | |-TextComment 0x55982749e110 <line:3665:3, col:60> Text=" that each message is similarly aligned to this boundary, "
|   | |-InlineCommandComment 0x55982749e160 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="q_msg_size"
|   | `-TextComment 0x55982749e180 <line:3666:3, col:32> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x55982749e240 <line:3668:3>
|   | `-TextComment 0x55982749e210 <col:3> Text=" "
|   |-ParamCommandComment 0x55982749e260 <col:4, line:3669:3> [in] implicitly Param="q" ParamIndex=0
|   | `-ParagraphComment 0x55982749e310 <line:3668:12, line:3669:3>
|   |   |-TextComment 0x55982749e2c0 <line:3668:12, col:41> Text=" Address of the message queue."
|   |   `-TextComment 0x55982749e2e0 <line:3669:3> Text=" "
|   |-ParamCommandComment 0x55982749e330 <col:4, line:3670:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55982749e3e0 <line:3669:17, line:3670:3>
|   |   |-TextComment 0x55982749e390 <line:3669:17, col:67> Text=" Pointer to ring buffer that holds queued messages."
|   |   `-TextComment 0x55982749e3b0 <line:3670:3> Text=" "
|   |-ParamCommandComment 0x55982749e400 <col:4, line:3671:3> [in] implicitly Param="msg_size" ParamIndex=2
|   | `-ParagraphComment 0x55982749e4b0 <line:3670:19, line:3671:3>
|   |   |-TextComment 0x55982749e460 <line:3670:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x55982749e480 <line:3671:3> Text=" "
|   |-ParamCommandComment 0x55982749e4d0 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=3
|   | `-ParagraphComment 0x55982749e560 <col:19, col:65>
|   |   `-TextComment 0x55982749e530 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x55982749e5b0 <line:3673:3>
|   | `-TextComment 0x55982749e580 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749e5d0 <col:4, line:3674:3> Name="return"
|   | `-ParagraphComment 0x55982749e650 <line:3673:11, line:3674:3>
|   |   |-TextComment 0x55982749e600 <line:3673:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55982749e620 <line:3674:3> Text=" "
|   |-VerbatimLineComment 0x55982749e670 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55982749e6e0 <line:3675:1>
|     `-TextComment 0x55982749e6b0 <col:1> Text=" "
|-FunctionDecl 0x5598273a99b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3700:19> line:3699:15 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x5598273a97a0 <col:33, col:48> col:48 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5598273a9810 <col:54, col:61> col:61 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5598273a9880 <line:3700:5, col:11> col:11 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x55982749ef00 <line:3680:3, line:3698:1>
|   |-ParagraphComment 0x55982749e850 <line:3680:3>
|   | `-TextComment 0x55982749e820 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749e870 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55982749e8d0 <col:10, col:37>
|   |   `-TextComment 0x55982749e8a0 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x55982749e970 <line:3682:3, line:3684:8>
|   | |-TextComment 0x55982749e8f0 <line:3682:3, col:75> Text=" This routine initializes a message queue object, prior to its first use,"
|   | |-TextComment 0x55982749e910 <line:3683:3, col:73> Text=" allocating its internal ring buffer from the calling thread's resource"
|   | `-TextComment 0x55982749e930 <line:3684:3, col:8> Text=" pool."
|   |-ParagraphComment 0x55982749ea10 <line:3686:3, line:3688:25>
|   | |-TextComment 0x55982749e990 <line:3686:3, col:66> Text=" Memory allocated for the ring buffer can be released by calling"
|   | |-TextComment 0x55982749e9b0 <line:3687:3, col:73> Text=" k_msgq_cleanup(), or if userspace is enabled and the msgq object loses"
|   | `-TextComment 0x55982749e9d0 <line:3688:3, col:25> Text=" all of its references."
|   |-ParagraphComment 0x55982749ea60 <line:3690:3>
|   | `-TextComment 0x55982749ea30 <col:3> Text=" "
|   |-ParamCommandComment 0x55982749ea80 <col:4, line:3691:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55982749eb30 <line:3690:15, line:3691:3>
|   |   |-TextComment 0x55982749eae0 <line:3690:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55982749eb00 <line:3691:3> Text=" "
|   |-ParamCommandComment 0x55982749eb50 <col:4, line:3692:3> [in] implicitly Param="msg_size" ParamIndex=1
|   | `-ParagraphComment 0x55982749ec00 <line:3691:19, line:3692:3>
|   |   |-TextComment 0x55982749ebb0 <line:3691:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x55982749ebd0 <line:3692:3> Text=" "
|   |-ParamCommandComment 0x55982749ec20 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=2
|   | `-ParagraphComment 0x55982749ecb0 <col:19, col:65>
|   |   `-TextComment 0x55982749ec80 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x55982749ed00 <line:3694:3>
|   | `-TextComment 0x55982749ecd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749ed20 <col:4, line:3697:3> Name="return"
|   | `-ParagraphComment 0x55982749edf0 <line:3694:11, line:3697:3>
|   |   |-TextComment 0x55982749ed50 <line:3694:11, col:72> Text=" 0 on success, -ENOMEM if there was insufficient memory in the"
|   |   |-TextComment 0x55982749ed70 <line:3695:3, col:66> Text="	thread's resource pool, or -EINVAL if the size parameters cause"
|   |   |-TextComment 0x55982749ed90 <line:3696:3, col:23> Text="	an integer overflow."
|   |   `-TextComment 0x55982749edb0 <line:3697:3> Text=" "
|   |-VerbatimLineComment 0x55982749ee10 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55982749ee80 <line:3698:1>
|     `-TextComment 0x55982749ee50 <col:1> Text=" "
|-FunctionDecl 0x5598273a9bc8 <line:3712:1, col:39> col:5 k_msgq_cleanup 'int (struct k_msgq *)'
| |-ParmVarDecl 0x5598273a9ac0 <col:20, col:35> col:35 msgq 'struct k_msgq *'
| `-FullComment 0x55982749f2d0 <line:3703:3, line:3710:33>
|   |-ParagraphComment 0x55982749efa0 <line:3703:3>
|   | `-TextComment 0x55982749ef70 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749efc0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55982749f020 <col:10, col:46>
|   |   `-TextComment 0x55982749eff0 <col:10, col:46> Text=" Release allocated buffer for a queue"
|   |-ParagraphComment 0x55982749f070 <line:3705:3, col:49>
|   | `-TextComment 0x55982749f040 <col:3, col:49> Text=" Releases memory allocated for the ring buffer."
|   |-ParagraphComment 0x55982749f0c0 <line:3707:3>
|   | `-TextComment 0x55982749f090 <col:3> Text=" "
|   |-ParamCommandComment 0x55982749f0e0 <col:4, col:39> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55982749f170 <col:15, col:39>
|   |   `-TextComment 0x55982749f140 <col:15, col:39> Text=" message queue to cleanup"
|   `-ParagraphComment 0x55982749f280 <line:3709:3, line:3710:33>
|     |-TextComment 0x55982749f190 <line:3709:3> Text=" "
|     |-InlineCommandComment 0x55982749f1b0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55982749f1d0 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x55982749f1f0 <line:3710:3> Text=" "
|     |-InlineCommandComment 0x55982749f210 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55982749f230 <col:11, col:33> Text=" -EBUSY Queue not empty"
|-FunctionDecl 0x5598273a9ee8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3732:72> col:15 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x5598273a9cc0 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5598273a9d38 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x5598273a9da8 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x55982749fb10 <line:3715:3, line:3731:1>
|   |-ParagraphComment 0x55982749f370 <line:3715:3>
|   | `-TextComment 0x55982749f340 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749f390 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55982749f3f0 <col:10, col:44>
|   |   `-TextComment 0x55982749f3c0 <col:10, col:44> Text=" Send a message to a message queue."
|   |-ParagraphComment 0x55982749f490 <line:3717:3, col:51>
|   | |-TextComment 0x55982749f410 <col:3, col:49> Text=" This routine sends a message to message queue "
|   | `-InlineCommandComment 0x55982749f460 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="q."
|   |-ParagraphComment 0x55982749f4e0 <line:3719:3>
|   | `-TextComment 0x55982749f4b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749f500 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55982749f560 <col:9, col:31>
|   |   `-TextComment 0x55982749f530 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55982749f5b0 <line:3721:3>
|   | `-TextComment 0x55982749f580 <col:3> Text=" "
|   |-ParamCommandComment 0x55982749f5d0 <col:4, line:3722:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55982749f680 <line:3721:15, line:3722:3>
|   |   |-TextComment 0x55982749f630 <line:3721:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55982749f650 <line:3722:3> Text=" "
|   |-ParamCommandComment 0x55982749f6a0 <col:4, line:3723:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55982749f750 <line:3722:15, line:3723:3>
|   |   |-TextComment 0x55982749f700 <line:3722:15, col:38> Text=" Pointer to the message."
|   |   `-TextComment 0x55982749f720 <line:3723:3> Text=" "
|   |-ParamCommandComment 0x55982749f770 <col:4, line:3725:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55982749f850 <line:3723:18, line:3725:28>
|   |   |-TextComment 0x55982749f7d0 <line:3723:18, col:68> Text=" Non-negative waiting period to add the message (in"
|   |   |-TextComment 0x55982749f7f0 <line:3724:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55982749f810 <line:3725:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55982749fa00 <line:3727:3, line:3730:3>
|   | |-TextComment 0x55982749f870 <line:3727:3> Text=" "
|   | |-InlineCommandComment 0x55982749f890 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55982749f8b0 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x55982749f8d0 <line:3728:3> Text=" "
|   | |-InlineCommandComment 0x55982749f8f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55982749f910 <col:11, col:60> Text=" -ENOMSG Returned without waiting or queue purged."
|   | |-TextComment 0x55982749f930 <line:3729:3> Text=" "
|   | |-InlineCommandComment 0x55982749f950 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55982749f970 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55982749f990 <line:3730:3> Text=" "
|   |-VerbatimLineComment 0x55982749fa20 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55982749fa90 <line:3731:1>
|     `-TextComment 0x55982749fa60 <col:1> Text=" "
|-FunctionDecl 0x5598273fd638 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3753:72> col:15 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x5598273fd4b0 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5598273fd528 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x5598273fd598 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x5598274a0420 <line:3735:3, line:3752:1>
|   |-ParagraphComment 0x55982749fbb0 <line:3735:3>
|   | `-TextComment 0x55982749fb80 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749fbd0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55982749fc30 <col:10, col:49>
|   |   `-TextComment 0x55982749fc00 <col:10, col:49> Text=" Receive a message from a message queue."
|   |-ParagraphComment 0x55982749fd20 <line:3737:3, line:3738:21>
|   | |-TextComment 0x55982749fc50 <line:3737:3, col:54> Text=" This routine receives a message from message queue "
|   | |-InlineCommandComment 0x55982749fca0 <col:55, col:56> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x55982749fcc0 <col:59, col:74> Text=" in a "first in,"
|   | `-TextComment 0x55982749fce0 <line:3738:3, col:21> Text=" first out" manner."
|   |-ParagraphComment 0x55982749fd70 <line:3740:3>
|   | `-TextComment 0x55982749fd40 <col:3> Text=" "
|   |-BlockCommandComment 0x55982749fd90 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x55982749fe70 <col:9, col:72>
|   |   |-TextComment 0x55982749fdc0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x55982749fe10 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x55982749fe30 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x55982749fec0 <line:3742:3>
|   | `-TextComment 0x55982749fe90 <col:3> Text=" "
|   |-ParamCommandComment 0x55982749fee0 <col:4, line:3743:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55982749ff90 <line:3742:15, line:3743:3>
|   |   |-TextComment 0x55982749ff40 <line:3742:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55982749ff60 <line:3743:3> Text=" "
|   |-ParamCommandComment 0x55982749ffb0 <col:4, line:3744:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5598274a0060 <line:3743:15, line:3744:3>
|   |   |-TextComment 0x5598274a0010 <line:3743:15, col:60> Text=" Address of area to hold the received message."
|   |   `-TextComment 0x5598274a0030 <line:3744:3> Text=" "
|   |-ParamCommandComment 0x5598274a0080 <col:4, line:3746:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5598274a0160 <line:3744:18, line:3746:28>
|   |   |-TextComment 0x5598274a00e0 <line:3744:18, col:72> Text=" Non-negative waiting period to receive the message (in"
|   |   |-TextComment 0x5598274a0100 <line:3745:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5598274a0120 <line:3746:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5598274a0310 <line:3748:3, line:3751:3>
|   | |-TextComment 0x5598274a0180 <line:3748:3> Text=" "
|   | |-InlineCommandComment 0x5598274a01a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a01c0 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x5598274a01e0 <line:3749:3> Text=" "
|   | |-InlineCommandComment 0x5598274a0200 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a0220 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x5598274a0240 <line:3750:3> Text=" "
|   | |-InlineCommandComment 0x5598274a0260 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a0280 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x5598274a02a0 <line:3751:3> Text=" "
|   |-VerbatimLineComment 0x5598274a0330 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x5598274a03a0 <line:3752:1>
|     `-TextComment 0x5598274a0370 <col:1> Text=" "
|-FunctionDecl 0x5598273fd8d8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3770:58> col:15 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x5598273fd740 <col:27, col:42> col:42 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5598273fd7b8 <col:48, col:54> col:54 data 'void *'
| `-FullComment 0x5598274a0b40 <line:3756:3, line:3769:1>
|   |-ParagraphComment 0x5598274a04c0 <line:3756:3>
|   | `-TextComment 0x5598274a0490 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a04e0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5598274a0540 <col:10, col:51>
|   |   `-TextComment 0x5598274a0510 <col:10, col:51> Text=" Peek/read a message from a message queue."
|   |-ParagraphComment 0x5598274a0630 <line:3758:3, line:3759:57>
|   | |-TextComment 0x5598274a0560 <line:3758:3, col:51> Text=" This routine reads a message from message queue "
|   | |-InlineCommandComment 0x5598274a05b0 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x5598274a05d0 <col:56, col:71> Text=" in a "first in,"
|   | `-TextComment 0x5598274a05f0 <line:3759:3, col:57> Text=" first out" manner and leaves the message in the queue."
|   |-ParagraphComment 0x5598274a0680 <line:3761:3>
|   | `-TextComment 0x5598274a0650 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a06a0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5598274a0700 <col:9, col:31>
|   |   `-TextComment 0x5598274a06d0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5598274a0750 <line:3763:3>
|   | `-TextComment 0x5598274a0720 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a0770 <col:4, line:3764:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5598274a0840 <line:3763:15, line:3764:3>
|   |   |-TextComment 0x5598274a07f0 <line:3763:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5598274a0810 <line:3764:3> Text=" "
|   |-ParamCommandComment 0x5598274a0860 <col:4, col:71> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5598274a08f0 <col:15, col:71>
|   |   `-TextComment 0x5598274a08c0 <col:15, col:71> Text=" Address of area to hold the message read from the queue."
|   |-ParagraphComment 0x5598274a0a30 <line:3766:3, line:3768:3>
|   | |-TextComment 0x5598274a0910 <line:3766:3> Text=" "
|   | |-InlineCommandComment 0x5598274a0930 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a0950 <col:11, col:26> Text=" 0 Message read."
|   | |-TextComment 0x5598274a0970 <line:3767:3> Text=" "
|   | |-InlineCommandComment 0x5598274a0990 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a09b0 <col:11, col:58> Text=" -ENOMSG Returned when the queue has no message."
|   | `-TextComment 0x5598274a09d0 <line:3768:3> Text=" "
|   |-VerbatimLineComment 0x5598274a0a50 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x5598274a0ac0 <line:3769:1>
|     `-TextComment 0x5598274a0a90 <col:1> Text=" "
|-FunctionDecl 0x5598273fdae0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3784:48> col:16 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5598273fd9e0 <col:29, col:44> col:44 msgq 'struct k_msgq *'
| `-FullComment 0x5598274a0ff0 <line:3773:3, line:3783:1>
|   |-ParagraphComment 0x5598274a0be0 <line:3773:3>
|   | `-TextComment 0x5598274a0bb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a0c00 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x5598274a0c60 <col:10, col:32>
|   |   `-TextComment 0x5598274a0c30 <col:10, col:32> Text=" Purge a message queue."
|   |-ParagraphComment 0x5598274a0d00 <line:3775:3, line:3777:61>
|   | |-TextComment 0x5598274a0c80 <line:3775:3, col:74> Text=" This routine discards all unreceived messages in a message queue's ring"
|   | |-TextComment 0x5598274a0ca0 <line:3776:3, col:72> Text=" buffer. Any threads that are blocked waiting to send a message to the"
|   | `-TextComment 0x5598274a0cc0 <line:3777:3, col:61> Text=" message queue are unblocked and see an -ENOMSG error code."
|   |-ParagraphComment 0x5598274a0d50 <line:3779:3>
|   | `-TextComment 0x5598274a0d20 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a0d70 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5598274a0e00 <col:15, col:44>
|   |   `-TextComment 0x5598274a0dd0 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x5598274a0e50 <line:3781:3>
|   | `-TextComment 0x5598274a0e20 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a0e70 <col:4, line:3782:3> Name="return"
|   | `-ParagraphComment 0x5598274a0ef0 <line:3781:11, line:3782:3>
|   |   |-TextComment 0x5598274a0ea0 <line:3781:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274a0ec0 <line:3782:3> Text=" "
|   |-VerbatimLineComment 0x5598274a0f10 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x5598274a0f80 <line:3783:1>
|     `-TextComment 0x5598274a0f50 <col:1> Text=" "
|-FunctionDecl 0x5598273fdce0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3797:56> col:17 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5598273fdbe0 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x5598274a1470 <line:3787:3, line:3796:1>
|   |-ParagraphComment 0x5598274a1090 <line:3787:3>
|   | `-TextComment 0x5598274a1060 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a10b0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x5598274a1110 <col:10, col:58>
|   |   `-TextComment 0x5598274a10e0 <col:10, col:58> Text=" Get the amount of free space in a message queue."
|   |-ParagraphComment 0x5598274a1180 <line:3789:3, line:3790:15>
|   | |-TextComment 0x5598274a1130 <line:3789:3, col:73> Text=" This routine returns the number of unused entries in a message queue's"
|   | `-TextComment 0x5598274a1150 <line:3790:3, col:15> Text=" ring buffer."
|   |-ParagraphComment 0x5598274a11d0 <line:3792:3>
|   | `-TextComment 0x5598274a11a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a11f0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5598274a1280 <col:15, col:44>
|   |   `-TextComment 0x5598274a1250 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x5598274a12d0 <line:3794:3>
|   | `-TextComment 0x5598274a12a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a12f0 <col:4, line:3795:3> Name="return"
|   | `-ParagraphComment 0x5598274a1370 <line:3794:11, line:3795:3>
|   |   |-TextComment 0x5598274a1320 <line:3794:11, col:48> Text=" Number of unused ring buffer entries."
|   |   `-TextComment 0x5598274a1340 <line:3795:3> Text=" "
|   |-VerbatimLineComment 0x5598274a1390 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x5598274a1400 <line:3796:1>
|     `-TextComment 0x5598274a13d0 <col:1> Text=" "
|-FunctionDecl 0x5598273fe000 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3811:32> line:3810:17 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x5598273fdde0 <col:34, col:49> col:49 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5598273fdef0 <line:3811:6, col:27> col:27 attrs 'struct k_msgq_attrs *'
| `-FullComment 0x5598274a19a0 <line:3800:3, line:3809:1>
|   |-ParagraphComment 0x5598274a1510 <line:3800:3>
|   | `-TextComment 0x5598274a14e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a1530 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x5598274a1590 <col:10, col:50>
|   |   `-TextComment 0x5598274a1560 <col:10, col:50> Text=" Get basic attributes of a message queue."
|   |-ParagraphComment 0x5598274a15e0 <line:3802:3, col:77>
|   | `-TextComment 0x5598274a15b0 <col:3, col:77> Text=" This routine fetches basic attributes of message queue into attr argument."
|   |-ParagraphComment 0x5598274a1630 <line:3804:3>
|   | `-TextComment 0x5598274a1600 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a1650 <col:4, line:3805:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5598274a1700 <line:3804:15, line:3805:3>
|   |   |-TextComment 0x5598274a16b0 <line:3804:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5598274a16d0 <line:3805:3> Text=" "
|   |-ParamCommandComment 0x5598274a1720 <col:4, col:61> [in] implicitly Param="attrs" ParamIndex=1
|   | `-ParagraphComment 0x5598274a17b0 <col:16, col:61>
|   |   `-TextComment 0x5598274a1780 <col:16, col:61> Text=" pointer to message queue attribute structure."
|   |-ParagraphComment 0x5598274a1800 <line:3807:3>
|   | `-TextComment 0x5598274a17d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a1820 <col:4, line:3808:3> Name="return"
|   | `-ParagraphComment 0x5598274a18a0 <line:3807:11, line:3808:3>
|   |   |-TextComment 0x5598274a1850 <line:3807:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274a1870 <line:3808:3> Text=" "
|   |-VerbatimLineComment 0x5598274a18c0 <col:4, col:19> Text=" K-MSGQ-003"
|   `-ParagraphComment 0x5598274a1930 <line:3809:1>
|     `-TextComment 0x5598274a1900 <col:1> Text=" "
|-FunctionDecl 0x5598273fe160 <line:3814:1, line:3817:1> line:3814:21 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5598273fe0d8 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5598273fe398 <line:3815:1, line:3817:1>
|   `-ReturnStmt 0x5598273fe350 <line:3816:2, col:32>
|     `-BinaryOperator 0x5598273fe328 <col:9, col:32> 'unsigned int' '-'
|       |-ImplicitCastExpr 0x5598273fe2f8 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-MemberExpr 0x5598273fe248 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->max_msgs 0x5598273f98a8
|       |   `-ImplicitCastExpr 0x5598273fe230 <col:9> 'struct k_msgq *' <LValueToRValue>
|       |     `-DeclRefExpr 0x5598273fe208 <col:9> 'struct k_msgq *' lvalue ParmVar 0x5598273fe0d8 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x5598273fe310 <col:26, col:32> 'u32_t':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x5598273fe2c0 <col:26, col:32> 'u32_t':'unsigned int' lvalue ->used_msgs 0x5598273f9b68
|           `-ImplicitCastExpr 0x5598273fe2a8 <col:26> 'struct k_msgq *' <LValueToRValue>
|             `-DeclRefExpr 0x5598273fe280 <col:26> 'struct k_msgq *' lvalue ParmVar 0x5598273fe0d8 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x5598273fe8e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3829:56> col:17 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5598273fe3d8 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x5598274a1e00 <line:3820:3, line:3828:1>
|   |-ParagraphComment 0x5598274a1a40 <line:3820:3>
|   | `-TextComment 0x5598274a1a10 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a1a60 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x5598274a1ac0 <col:10, col:56>
|   |   `-TextComment 0x5598274a1a90 <col:10, col:56> Text=" Get the number of messages in a message queue."
|   |-ParagraphComment 0x5598274a1b10 <line:3822:3, col:80>
|   | `-TextComment 0x5598274a1ae0 <col:3, col:80> Text=" This routine returns the number of messages in a message queue's ring buffer."
|   |-ParagraphComment 0x5598274a1b60 <line:3824:3>
|   | `-TextComment 0x5598274a1b30 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a1b80 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5598274a1c10 <col:15, col:44>
|   |   `-TextComment 0x5598274a1be0 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x5598274a1c60 <line:3826:3>
|   | `-TextComment 0x5598274a1c30 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a1c80 <col:4, line:3827:3> Name="return"
|   | `-ParagraphComment 0x5598274a1d00 <line:3826:11, line:3827:3>
|   |   |-TextComment 0x5598274a1cb0 <line:3826:11, col:30> Text=" Number of messages."
|   |   `-TextComment 0x5598274a1cd0 <line:3827:3> Text=" "
|   |-VerbatimLineComment 0x5598274a1d20 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x5598274a1d90 <line:3828:1>
|     `-TextComment 0x5598274a1d60 <col:1> Text=" "
|-FunctionDecl 0x5598273fea38 <line:3831:1, line:3834:1> line:3831:21 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5598273fe9b0 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5598273febe8 <line:3832:1, line:3834:1>
|   `-ReturnStmt 0x5598273feb70 <line:3833:2, col:15>
|     `-ImplicitCastExpr 0x5598273feb58 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5598273feb20 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->used_msgs 0x5598273f9b68
|         `-ImplicitCastExpr 0x5598273feb08 <col:9> 'struct k_msgq *' <LValueToRValue>
|           `-DeclRefExpr 0x5598273feae0 <col:9> 'struct k_msgq *' lvalue ParmVar 0x5598273fe9b0 'msgq' 'struct k_msgq *'
|-RecordDecl 0x5598273fec00 <line:3849:1, line:3853:1> line:3849:8 struct k_mem_block_id definition
| |-FullComment 0x5598274a2060 <line:3839:3, line:3841:5>
| | |-ParagraphComment 0x5598274a1ea0 <line:3839:3>
| | | `-TextComment 0x5598274a1e70 <col:3> Text=" "
| | |-VerbatimLineComment 0x5598274a1ec0 <col:4, col:44> Text=" mem_pool_apis Memory Pool APIs"
| | |-ParagraphComment 0x5598274a1f30 <line:3840:3>
| | | `-TextComment 0x5598274a1f00 <col:3> Text=" "
| | |-VerbatimLineComment 0x5598274a1f50 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x5598274a2010 <line:3841:3, col:5>
| |   |-TextComment 0x5598274a1f90 <col:3> Text=" "
| |   |-TextComment 0x5598274a1fb0 <col:4> Text="@"
| |   `-TextComment 0x5598274a1fd0 <col:5> Text="{"
| |-FieldDecl 0x5598273fece0 <line:3850:2, col:15> col:8 pool 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x5598273fecb0 <col:15> 'int' 8
| |-FieldDecl 0x5598273fed58 <line:3851:2, col:16> col:8 level 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x5598273fed28 <col:16> 'int' 4
| `-FieldDecl 0x5598273fedd0 <line:3852:2, col:16> col:8 block 'u32_t':'unsigned int'
|   `-IntegerLiteral 0x5598273feda0 <col:16> 'int' 20
|-RecordDecl 0x5598273fee18 <line:3855:1, line:3858:1> line:3855:8 struct k_mem_block definition
| |-FieldDecl 0x5598273feed8 <line:3856:2, col:8> col:8 data 'void *'
| `-FieldDecl 0x5598273fef70 <line:3857:2, col:24> col:24 id 'struct k_mem_block_id':'struct k_mem_block_id'
|-RecordDecl 0x5598273ff048 <line:3872:1, line:3895:1> line:3872:8 struct k_mbox_msg definition
| |-FullComment 0x5598274a2210 <line:3869:3, line:3871:1>
| | |-ParagraphComment 0x5598274a2100 <line:3869:3>
| | | `-TextComment 0x5598274a20d0 <col:3> Text=" "
| | |-BlockCommandComment 0x5598274a2120 <col:4, col:35> Name="brief"
| | | `-ParagraphComment 0x5598274a2180 <col:10, col:35>
| | |   `-TextComment 0x5598274a2150 <col:10, col:35> Text=" Mailbox Message Structure"
| | `-ParagraphComment 0x5598274a21d0 <line:3871:1>
| |   `-TextComment 0x5598274a21a0 <col:1> Text=" "
| |-FieldDecl 0x5598273ff128 <line:3874:2, col:8> col:8 _mailbox 'u32_t':'unsigned int'
| | `-FullComment 0x5598274a22e0 <line:3873:5, col:55>
| |   `-ParagraphComment 0x5598274a22b0 <col:5, col:55>
| |     `-TextComment 0x5598274a2280 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x5598273ff1a8 <line:3876:2, col:9> col:9 size 'size_t':'unsigned long'
| | `-FullComment 0x5598274a23b0 <line:3875:5, col:32>
| |   `-ParagraphComment 0x5598274a2380 <col:5, col:32>
| |     `-TextComment 0x5598274a2350 <col:5, col:32> Text=" size of message (in bytes) "
| |-FieldDecl 0x5598273ff228 <line:3878:2, col:8> col:8 info 'u32_t':'unsigned int'
| | `-FullComment 0x5598274a2480 <line:3877:5, col:43>
| |   `-ParagraphComment 0x5598274a2450 <col:5, col:43>
| |     `-TextComment 0x5598274a2420 <col:5, col:43> Text=" application-defined information value "
| |-FieldDecl 0x5598273ff2b0 <line:3880:2, col:8> col:8 tx_data 'void *'
| | `-FullComment 0x5598274a2550 <line:3879:5, col:34>
| |   `-ParagraphComment 0x5598274a2520 <col:5, col:34>
| |     `-TextComment 0x5598274a24f0 <col:5, col:34> Text=" sender's message data buffer "
| |-FieldDecl 0x5598273ff340 <line:3882:2, col:8> col:8 _rx_data 'void *'
| | `-FullComment 0x5598274a2620 <line:3881:5, col:55>
| |   `-ParagraphComment 0x5598274a25f0 <col:5, col:55>
| |     `-TextComment 0x5598274a25c0 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x5598273ff410 <line:3884:2, col:21> col:21 tx_block 'struct k_mem_block':'struct k_mem_block'
| | `-FullComment 0x5598274a26f0 <line:3883:5, col:35>
| |   `-ParagraphComment 0x5598274a26c0 <col:5, col:35>
| |     `-TextComment 0x5598274a2690 <col:5, col:35> Text=" message data block descriptor "
| |-FieldDecl 0x5598273ff498 <line:3886:2, col:10> col:10 rx_source_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x5598274a27c0 <line:3885:5, col:22>
| |   `-ParagraphComment 0x5598274a2790 <col:5, col:22>
| |     `-TextComment 0x5598274a2760 <col:5, col:22> Text=" source thread id "
| |-FieldDecl 0x5598273ff518 <line:3888:2, col:10> col:10 tx_target_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x5598274a28a0 <line:3887:5, col:22>
| |   `-ParagraphComment 0x5598274a2870 <col:5, col:22>
| |     `-TextComment 0x5598274a2840 <col:5, col:22> Text=" target thread id "
| `-FieldDecl 0x5598273ff598 <line:3890:2, col:10> col:10 _syncing_thread 'k_tid_t':'struct k_thread *'
|   `-FullComment 0x5598274a2970 <line:3889:5, col:65>
|     `-ParagraphComment 0x5598274a2940 <col:5, col:65>
|       `-TextComment 0x5598274a2910 <col:5, col:65> Text=" internal use only - thread waiting on send (may be a dummy) "
|-RecordDecl 0x5598273ff608 prev 0x5598273c1e10 <line:3900:1, line:3909:1> line:3900:8 struct k_mbox definition
| |-FullComment 0x5598274a2b20 <line:3897:3, line:3899:1>
| | |-ParagraphComment 0x5598274a2a10 <line:3897:3>
| | | `-TextComment 0x5598274a29e0 <col:3> Text=" "
| | |-BlockCommandComment 0x5598274a2a30 <col:4, col:27> Name="brief"
| | | `-ParagraphComment 0x5598274a2a90 <col:10, col:27>
| | |   `-TextComment 0x5598274a2a60 <col:10, col:27> Text=" Mailbox Structure"
| | `-ParagraphComment 0x5598274a2ae0 <line:3899:1>
| |   `-TextComment 0x5598274a2ab0 <col:1> Text=" "
| |-FieldDecl 0x5598273ff6c8 <line:3902:2, col:12> col:12 tx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x5598274a2bf0 <line:3901:5, col:29>
| |   `-ParagraphComment 0x5598274a2bc0 <col:5, col:29>
| |     `-TextComment 0x5598274a2b90 <col:5, col:29> Text=" Transmit messages queue "
| |-FieldDecl 0x5598273ff748 <line:3904:2, col:12> col:12 rx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x5598274a2cc0 <line:3903:5, col:27>
| |   `-ParagraphComment 0x5598274a2c90 <col:5, col:27>
| |     `-TextComment 0x5598274a2c60 <col:5, col:27> Text=" Receive message queue "
| `-FieldDecl 0x5598273ff7b0 <line:3905:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
|-FunctionDecl 0x559827400fa0 <line:3951:1, col:44> col:13 k_mbox_init 'void (struct k_mbox *)' extern
| |-ParmVarDecl 0x559827400ea0 <col:25, col:40> col:40 mbox 'struct k_mbox *'
| `-FullComment 0x5598274a3120 <line:3942:3, line:3950:1>
|   |-ParagraphComment 0x5598274a2d60 <line:3942:3>
|   | `-TextComment 0x5598274a2d30 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a2d80 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5598274a2de0 <col:10, col:31>
|   |   `-TextComment 0x5598274a2db0 <col:10, col:31> Text=" Initialize a mailbox."
|   |-ParagraphComment 0x5598274a2e30 <line:3944:3, col:69>
|   | `-TextComment 0x5598274a2e00 <col:3, col:69> Text=" This routine initializes a mailbox object, prior to its first use."
|   |-ParagraphComment 0x5598274a2e80 <line:3946:3>
|   | `-TextComment 0x5598274a2e50 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a2ea0 <col:4, col:38> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x5598274a2f30 <col:15, col:38>
|   |   `-TextComment 0x5598274a2f00 <col:15, col:38> Text=" Address of the mailbox."
|   |-ParagraphComment 0x5598274a2f80 <line:3948:3>
|   | `-TextComment 0x5598274a2f50 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a2fa0 <col:4, line:3949:3> Name="return"
|   | `-ParagraphComment 0x5598274a3020 <line:3948:11, line:3949:3>
|   |   |-TextComment 0x5598274a2fd0 <line:3948:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274a2ff0 <line:3949:3> Text=" "
|   |-VerbatimLineComment 0x5598274a3040 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x5598274a30b0 <line:3950:1>
|     `-TextComment 0x5598274a3080 <col:1> Text=" "
|-FunctionDecl 0x559827401358 <line:3973:1, line:3974:22> line:3973:12 k_mbox_put 'int (struct k_mbox *, struct k_mbox_msg *, s32_t)' extern
| |-ParmVarDecl 0x5598274010a0 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x5598274011b0 <col:44, col:63> col:63 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x559827401220 <line:3974:9, col:15> col:15 timeout 's32_t':'int'
| `-FullComment 0x5598274a3950 <line:3954:3, line:3972:1>
|   |-ParagraphComment 0x5598274a31c0 <line:3954:3>
|   | `-TextComment 0x5598274a3190 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a31e0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5598274a3240 <col:10, col:57>
|   |   `-TextComment 0x5598274a3210 <col:10, col:57> Text=" Send a mailbox message in a synchronous manner."
|   |-ParagraphComment 0x5598274a3360 <line:3956:3, line:3958:55>
|   | |-TextComment 0x5598274a3260 <line:3956:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x5598274a32b0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x5598274a32d0 <col:43, col:75> Text=" and waits for a receiver to both"
|   | |-TextComment 0x5598274a32f0 <line:3957:3, col:75> Text=" receive and process it. The message data may be in a buffer, in a memory"
|   | `-TextComment 0x5598274a3310 <line:3958:3, col:55> Text=" pool block, or non-existent (i.e. an empty message)."
|   |-ParagraphComment 0x5598274a33b0 <line:3960:3>
|   | `-TextComment 0x5598274a3380 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a33d0 <col:4, line:3961:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x5598274a3480 <line:3960:15, line:3961:3>
|   |   |-TextComment 0x5598274a3430 <line:3960:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x5598274a3450 <line:3961:3> Text=" "
|   |-ParamCommandComment 0x5598274a34a0 <col:4, line:3962:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x5598274a3550 <line:3961:17, line:3962:3>
|   |   |-TextComment 0x5598274a3500 <line:3961:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x5598274a3520 <line:3962:3> Text=" "
|   |-ParamCommandComment 0x5598274a3570 <col:4, line:3966:45> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5598274a36a0 <line:3962:18, line:3966:45>
|   |   |-TextComment 0x5598274a35d0 <line:3962:18, col:80> Text=" Non-negative waiting period for the message to be received (in"
|   |   |-TextComment 0x5598274a35f0 <line:3963:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   |-TextComment 0x5598274a3610 <line:3964:3, col:68> Text="                and K_FOREVER. Once the message has been received,"
|   |   |-TextComment 0x5598274a3630 <line:3965:3, col:73> Text="                this routine waits as long as necessary for the message"
|   |   `-TextComment 0x5598274a3650 <line:3966:3, col:45> Text="                to be completely processed."
|   |-ParagraphComment 0x5598274a3850 <line:3968:3, line:3971:3>
|   | |-TextComment 0x5598274a36c0 <line:3968:3> Text=" "
|   | |-InlineCommandComment 0x5598274a36e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a3700 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x5598274a3720 <line:3969:3> Text=" "
|   | |-InlineCommandComment 0x5598274a3740 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a3760 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x5598274a3780 <line:3970:3> Text=" "
|   | |-InlineCommandComment 0x5598274a37a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a37c0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x5598274a37e0 <line:3971:3> Text=" "
|   |-VerbatimLineComment 0x5598274a3870 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x5598274a38e0 <line:3972:1>
|     `-TextComment 0x5598274a38b0 <col:1> Text=" "
|-FunctionDecl 0x5598274016a0 <line:3992:1, line:3993:26> line:3992:13 k_mbox_async_put 'void (struct k_mbox *, struct k_mbox_msg *, struct k_sem *)' extern
| |-ParmVarDecl 0x559827401460 <col:30, col:45> col:45 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x5598274014e8 <col:51, col:70> col:70 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x559827401570 <line:3993:9, col:23> col:23 sem 'struct k_sem *'
| `-FullComment 0x5598274a40d0 <line:3977:3, line:3991:1>
|   |-ParagraphComment 0x5598274a39f0 <line:3977:3>
|   | `-TextComment 0x5598274a39c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a3a10 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5598274a3a70 <col:10, col:59>
|   |   `-TextComment 0x5598274a3a40 <col:10, col:59> Text=" Send a mailbox message in an asynchronous manner."
|   |-ParagraphComment 0x5598274a3c30 <line:3979:3, line:3983:29>
|   | |-TextComment 0x5598274a3a90 <line:3979:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x5598274a3ae0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x5598274a3b00 <col:43, col:73> Text=" without waiting for a receiver"
|   | |-TextComment 0x5598274a3b20 <line:3980:3, col:78> Text=" to process it. The message data may be in a buffer, in a memory pool block,"
|   | |-TextComment 0x5598274a3b40 <line:3981:3, col:70> Text=" or non-existent (i.e. an empty message). Optionally, the semaphore "
|   | |-InlineCommandComment 0x5598274a3b90 <col:71, col:72> Name="a" RenderEmphasized Arg[0]="sem"
|   | |-TextComment 0x5598274a3bb0 <line:3982:3, col:71> Text=" will be given when the message has been both received and completely"
|   | `-TextComment 0x5598274a3bd0 <line:3983:3, col:29> Text=" processed by the receiver."
|   |-ParagraphComment 0x5598274a3c80 <line:3985:3>
|   | `-TextComment 0x5598274a3c50 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a3ca0 <col:4, line:3986:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x5598274a3d50 <line:3985:15, line:3986:3>
|   |   |-TextComment 0x5598274a3d00 <line:3985:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x5598274a3d20 <line:3986:3> Text=" "
|   |-ParamCommandComment 0x5598274a3d70 <col:4, line:3987:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x5598274a3e20 <line:3986:17, line:3987:3>
|   |   |-TextComment 0x5598274a3dd0 <line:3986:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x5598274a3df0 <line:3987:3> Text=" "
|   |-ParamCommandComment 0x5598274a3e40 <col:4, col:64> [in] implicitly Param="sem" ParamIndex=2
|   | `-ParagraphComment 0x5598274a3ed0 <col:14, col:64>
|   |   `-TextComment 0x5598274a3ea0 <col:14, col:64> Text=" Address of a semaphore, or NULL if none is needed."
|   |-ParagraphComment 0x5598274a3f20 <line:3989:3>
|   | `-TextComment 0x5598274a3ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a3f40 <col:4, line:3990:3> Name="return"
|   | `-ParagraphComment 0x5598274a3fc0 <line:3989:11, line:3990:3>
|   |   |-TextComment 0x5598274a3f70 <line:3989:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274a3f90 <line:3990:3> Text=" "
|   |-VerbatimLineComment 0x5598274a3fe0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x5598274a4050 <line:3991:1>
|     `-TextComment 0x5598274a4020 <col:1> Text=" "
|-FunctionDecl 0x559827401a68 <line:4014:1, line:4015:36> line:4014:12 k_mbox_get 'int (struct k_mbox *, struct k_mbox_msg *, void *, s32_t)' extern
| |-ParmVarDecl 0x5598274017b0 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x559827401838 <col:44, col:63> col:63 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x5598274018b0 <line:4015:9, col:15> col:15 buffer 'void *'
| |-ParmVarDecl 0x559827401920 <col:23, col:29> col:29 timeout 's32_t':'int'
| `-FullComment 0x5598274a49b0 <line:3996:3, line:4013:1>
|   |-ParagraphComment 0x5598274a4170 <line:3996:3>
|   | `-TextComment 0x5598274a4140 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a4190 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5598274a41f0 <col:10, col:36>
|   |   `-TextComment 0x5598274a41c0 <col:10, col:36> Text=" Receive a mailbox message."
|   |-ParagraphComment 0x5598274a42e0 <line:3998:3, line:3999:40>
|   | |-TextComment 0x5598274a4210 <line:3998:3, col:40> Text=" This routine receives a message from "
|   | |-InlineCommandComment 0x5598274a4260 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="mbox,"
|   | |-TextComment 0x5598274a4280 <col:49, col:74> Text=" then optionally retrieves"
|   | `-TextComment 0x5598274a42a0 <line:3999:3, col:40> Text=" its data and disposes of the message."
|   |-ParagraphComment 0x5598274a4330 <line:4001:3>
|   | `-TextComment 0x5598274a4300 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a4350 <col:4, line:4002:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x5598274a4400 <line:4001:15, line:4002:3>
|   |   |-TextComment 0x5598274a43b0 <line:4001:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x5598274a43d0 <line:4002:3> Text=" "
|   |-ParamCommandComment 0x5598274a4420 <col:4, line:4003:3> [in] implicitly Param="rx_msg" ParamIndex=1
|   | `-ParagraphComment 0x5598274a44d0 <line:4002:17, line:4003:3>
|   |   |-TextComment 0x5598274a4480 <line:4002:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x5598274a44a0 <line:4003:3> Text=" "
|   |-ParamCommandComment 0x5598274a44f0 <col:4, line:4005:3> [in] implicitly Param="buffer" ParamIndex=2
|   | `-ParagraphComment 0x5598274a45d0 <line:4003:17, line:4005:3>
|   |   |-TextComment 0x5598274a4550 <line:4003:17, col:77> Text=" Address of the buffer to receive data, or NULL to defer data"
|   |   |-TextComment 0x5598274a4570 <line:4004:3, col:60> Text="               retrieval and message disposal until later."
|   |   `-TextComment 0x5598274a4590 <line:4005:3> Text=" "
|   |-ParamCommandComment 0x5598274a45f0 <col:4, line:4007:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x5598274a46d0 <line:4005:18, line:4007:32>
|   |   |-TextComment 0x5598274a4650 <line:4005:18, col:78> Text=" Non-negative waiting period for a message to be received (in"
|   |   |-TextComment 0x5598274a4670 <line:4006:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x5598274a4690 <line:4007:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x5598274a48a0 <line:4009:3, line:4012:3>
|   | |-TextComment 0x5598274a46f0 <line:4009:3> Text=" "
|   | |-InlineCommandComment 0x5598274a4710 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a4730 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x5598274a4750 <line:4010:3> Text=" "
|   | |-InlineCommandComment 0x5598274a4770 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a4790 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x5598274a47b0 <line:4011:3> Text=" "
|   | |-InlineCommandComment 0x5598274a47d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a4810 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x5598274a4830 <line:4012:3> Text=" "
|   |-VerbatimLineComment 0x5598274a48c0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x5598274a4930 <line:4013:1>
|     `-TextComment 0x5598274a4900 <col:1> Text=" "
|-FunctionDecl 0x559827401d10 <line:4033:1, col:68> col:13 k_mbox_data_get 'void (struct k_mbox_msg *, void *)' extern
| |-ParmVarDecl 0x559827401b80 <col:29, col:48> col:48 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x559827401bf8 <col:56, col:62> col:62 buffer 'void *'
| `-FullComment 0x5598274a4fa0 <line:4018:3, line:4032:1>
|   |-ParagraphComment 0x5598274a4a50 <line:4018:3>
|   | `-TextComment 0x5598274a4a20 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a4a70 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5598274a4ad0 <col:10, col:54>
|   |   `-TextComment 0x5598274a4aa0 <col:10, col:54> Text=" Retrieve mailbox message data into a buffer."
|   |-ParagraphComment 0x5598274a4b40 <line:4020:3, line:4021:57>
|   | |-TextComment 0x5598274a4af0 <line:4020:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | `-TextComment 0x5598274a4b10 <line:4021:3, col:57> Text=" its data into a buffer, then disposing of the message."
|   |-ParagraphComment 0x5598274a4bb0 <line:4023:3, line:4024:31>
|   | |-TextComment 0x5598274a4b60 <line:4023:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | `-TextComment 0x5598274a4b80 <line:4024:3, col:31> Text=" without retrieving its data."
|   |-ParagraphComment 0x5598274a4c00 <line:4026:3>
|   | `-TextComment 0x5598274a4bd0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a4c20 <col:4, line:4027:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x5598274a4cd0 <line:4026:17, line:4027:3>
|   |   |-TextComment 0x5598274a4c80 <line:4026:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x5598274a4ca0 <line:4027:3> Text=" "
|   |-ParamCommandComment 0x5598274a4cf0 <col:4, line:4028:26> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5598274a4da0 <line:4027:17, line:4028:26>
|   |   |-TextComment 0x5598274a4d50 <line:4027:17, col:74> Text=" Address of the buffer to receive data, or NULL to discard"
|   |   `-TextComment 0x5598274a4d70 <line:4028:3, col:26> Text="               the data."
|   |-ParagraphComment 0x5598274a4df0 <line:4030:3>
|   | `-TextComment 0x5598274a4dc0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a4e10 <col:4, line:4031:3> Name="return"
|   | `-ParagraphComment 0x5598274a4e90 <line:4030:11, line:4031:3>
|   |   |-TextComment 0x5598274a4e40 <line:4030:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274a4e60 <line:4031:3> Text=" "
|   |-VerbatimLineComment 0x5598274a4eb0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x5598274a4f20 <line:4032:1>
|     `-TextComment 0x5598274a4ef0 <col:1> Text=" "
|-FunctionDecl 0x559827402148 <line:4066:1, line:4068:46> line:4066:12 k_mbox_data_block_get 'int (struct k_mbox_msg *, struct k_mem_pool *, struct k_mem_block *, s32_t)' extern
| |-ParmVarDecl 0x559827401e28 <col:34, col:53> col:53 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x559827401eb0 <line:4067:6, col:25> col:25 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x559827401f90 <line:4068:6, col:26> col:26 block 'struct k_mem_block *'
| |-ParmVarDecl 0x559827402000 <col:33, col:39> col:39 timeout 's32_t':'int'
| `-FullComment 0x5598274a59d0 <line:4036:3, line:4065:1>
|   |-ParagraphComment 0x5598274a5040 <line:4036:3>
|   | `-TextComment 0x5598274a5010 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a5060 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x5598274a50c0 <col:10, col:65>
|   |   `-TextComment 0x5598274a5090 <col:10, col:65> Text=" Retrieve mailbox message data into a memory pool block."
|   |-ParagraphComment 0x5598274a51b0 <line:4038:3, line:4042:42>
|   | |-TextComment 0x5598274a50e0 <line:4038:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | |-TextComment 0x5598274a5100 <line:4039:3, col:68> Text=" its data into a memory pool block, then disposing of the message."
|   | |-TextComment 0x5598274a5120 <line:4040:3, col:71> Text=" The memory pool block that results from successful retrieval must be"
|   | |-TextComment 0x5598274a5140 <line:4041:3, col:71> Text=" returned to the pool once the data has been processed, even in cases"
|   | `-TextComment 0x5598274a5160 <line:4042:3, col:42> Text=" where zero bytes of data are retrieved."
|   |-ParagraphComment 0x5598274a5250 <line:4044:3, line:4046:33>
|   | |-TextComment 0x5598274a51d0 <line:4044:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | |-TextComment 0x5598274a51f0 <line:4045:3, col:73> Text=" without retrieving its data. In this case there is no need to return a"
|   | `-TextComment 0x5598274a5210 <line:4046:3, col:33> Text=" memory pool block to the pool."
|   |-ParagraphComment 0x5598274a5340 <line:4048:3, line:4052:55>
|   | |-TextComment 0x5598274a5270 <line:4048:3, col:74> Text=" This routine allocates a new memory pool block for the data only if the"
|   | |-TextComment 0x5598274a5290 <line:4049:3, col:78> Text=" data is not already in one. If a new block cannot be allocated, the routine"
|   | |-TextComment 0x5598274a52b0 <line:4050:3, col:74> Text=" returns a failure code and the received message is left unchanged. This"
|   | |-TextComment 0x5598274a52d0 <line:4051:3, col:79> Text=" permits the caller to reattempt data retrieval at a later time or to dispose"
|   | `-TextComment 0x5598274a52f0 <line:4052:3, col:55> Text=" of the received message without retrieving its data."
|   |-ParagraphComment 0x5598274a5390 <line:4054:3>
|   | `-TextComment 0x5598274a5360 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a53b0 <col:4, line:4055:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x5598274a5460 <line:4054:17, line:4055:3>
|   |   |-TextComment 0x5598274a5410 <line:4054:17, col:57> Text=" Address of a receive message descriptor."
|   |   `-TextComment 0x5598274a5430 <line:4055:3> Text=" "
|   |-ParamCommandComment 0x5598274a5480 <col:4, line:4056:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x5598274a5530 <line:4055:15, line:4056:3>
|   |   |-TextComment 0x5598274a54e0 <line:4055:15, col:63> Text=" Address of memory pool, or NULL to discard data."
|   |   `-TextComment 0x5598274a5500 <line:4056:3> Text=" "
|   |-ParamCommandComment 0x5598274a5550 <col:4, line:4057:3> [in] implicitly Param="block" ParamIndex=2
|   | `-ParagraphComment 0x5598274a5600 <line:4056:16, line:4057:3>
|   |   |-TextComment 0x5598274a55b0 <line:4056:16, col:67> Text=" Address of the area to hold memory pool block info."
|   |   `-TextComment 0x5598274a55d0 <line:4057:3> Text=" "
|   |-ParamCommandComment 0x5598274a5620 <col:4, line:4059:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x5598274a5700 <line:4057:18, line:4059:32>
|   |   |-TextComment 0x5598274a5680 <line:4057:18, col:77> Text=" Non-negative waiting period to wait for a memory pool block"
|   |   |-TextComment 0x5598274a56a0 <line:4058:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x5598274a56c0 <line:4059:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x5598274a58b0 <line:4061:3, line:4064:3>
|   | |-TextComment 0x5598274a5720 <line:4061:3> Text=" "
|   | |-InlineCommandComment 0x5598274a5740 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a5760 <col:11, col:28> Text=" 0 Data retrieved."
|   | |-TextComment 0x5598274a5780 <line:4062:3> Text=" "
|   | |-InlineCommandComment 0x5598274a57a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a57c0 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x5598274a57e0 <line:4063:3> Text=" "
|   | |-InlineCommandComment 0x5598274a5800 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a5820 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x5598274a5840 <line:4064:3> Text=" "
|   |-VerbatimLineComment 0x5598274a58d0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x5598274a5940 <line:4065:1>
|     `-TextComment 0x5598274a5910 <col:1> Text=" "
|-RecordDecl 0x559827402298 prev 0x5598273c1ec0 <line:4079:1, line:4095:1> line:4079:8 struct k_pipe definition
| |-FullComment 0x5598274a5aa0 <line:4078:4, col:19>
| | `-ParagraphComment 0x5598274a5a70 <col:4, col:19>
| |   `-TextComment 0x5598274a5a40 <col:4, col:19> Text=" Pipe Structure "
| |-FieldDecl 0x559827402338 <line:4080:2, col:17> col:17 buffer 'unsigned char *'
| | `-FullComment 0x5598274a5b70 <col:38, col:63>
| |   `-ParagraphComment 0x5598274a5b40 <col:38, col:63>
| |     `-TextComment 0x5598274a5b10 <col:38, col:63> Text=" Pipe buffer: may be NULL "
| |-FieldDecl 0x5598274023b8 <line:4081:2, col:17> col:17 size 'size_t':'unsigned long'
| | `-FullComment 0x5598274a5c40 <col:38, col:50>
| |   `-ParagraphComment 0x5598274a5c10 <col:38, col:50>
| |     `-TextComment 0x5598274a5be0 <col:38, col:50> Text=" Buffer size "
| |-FieldDecl 0x559827402438 <line:4082:2, col:17> col:17 bytes_used 'size_t':'unsigned long'
| | `-FullComment 0x5598274a5d10 <col:38, col:61>
| |   `-ParagraphComment 0x5598274a5ce0 <col:38, col:61>
| |     `-TextComment 0x5598274a5cb0 <col:38, col:61> Text=" # bytes used in buffer "
| |-FieldDecl 0x5598274024b8 <line:4083:2, col:17> col:17 read_index 'size_t':'unsigned long'
| | `-FullComment 0x5598274a5de0 <col:38, col:67>
| |   `-ParagraphComment 0x5598274a5db0 <col:38, col:67>
| |     `-TextComment 0x5598274a5d80 <col:38, col:67> Text=" Where in buffer to read from "
| |-FieldDecl 0x559827402538 <line:4084:2, col:17> col:17 write_index 'size_t':'unsigned long'
| | `-FullComment 0x5598274a5eb0 <col:38, col:63>
| |   `-ParagraphComment 0x5598274a5e80 <col:38, col:63>
| |     `-TextComment 0x5598274a5e50 <col:38, col:63> Text=" Where in buffer to write "
| |-FieldDecl 0x5598274025c8 <line:4085:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x5598274a5f80 <col:31, col:52>
| |   `-ParagraphComment 0x5598274a5f50 <col:31, col:52>
| |     `-TextComment 0x5598274a5f20 <col:31, col:52> Text=" Synchronization lock "
| |-RecordDecl 0x559827402638 <line:4087:2, line:4090:2> line:4087:2 struct definition
| | |-FieldDecl 0x5598274026f0 <line:4088:3, col:18> col:18 readers '_wait_q_t':'_wait_q_t'
| | | `-FullComment 0x5598274a6050 <col:31, col:49>
| | |   `-ParagraphComment 0x5598274a6020 <col:31, col:49>
| | |     `-TextComment 0x5598274a5ff0 <col:31, col:49> Text=" Reader wait queue "
| | `-FieldDecl 0x559827402778 <line:4089:3, col:18> col:18 writers '_wait_q_t':'_wait_q_t'
| |   `-FullComment 0x5598274a6120 <col:31, col:49>
| |     `-ParagraphComment 0x5598274a60f0 <col:31, col:49>
| |       `-TextComment 0x5598274a60c0 <col:31, col:49> Text=" Writer wait queue "
| |-FieldDecl 0x559827402840 <line:4087:2, line:4090:4> col:4 wait_q 'struct (anonymous struct at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)':'struct k_pipe::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)'
| `-FieldDecl 0x559827402898 <line:4094:2, col:14> col:14 flags 'u8_t':'unsigned char'
|   `-FullComment 0x5598274a61f0 <col:26, col:32>
|     `-ParagraphComment 0x5598274a61c0 <col:26, col:32>
|       `-TextComment 0x5598274a6190 <col:26, col:32> Text=" Flags "
|-FunctionDecl 0x559827402cd0 <line:4158:1, col:73> col:6 k_pipe_init 'void (struct k_pipe *, unsigned char *, size_t)'
| |-ParmVarDecl 0x559827402ab0 <col:18, col:33> col:33 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x559827402b28 <col:39, col:54> col:54 buffer 'unsigned char *'
| |-ParmVarDecl 0x559827402b98 <col:62, col:69> col:69 size 'size_t':'unsigned long'
| `-FullComment 0x5598274a6880 <line:4145:3, line:4157:1>
|   |-ParagraphComment 0x5598274a6290 <line:4145:3>
|   | `-TextComment 0x5598274a6260 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a62b0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5598274a6310 <col:10, col:28>
|   |   `-TextComment 0x5598274a62e0 <col:10, col:28> Text=" Initialize a pipe."
|   |-ParagraphComment 0x5598274a6360 <line:4147:3, col:66>
|   | `-TextComment 0x5598274a6330 <col:3, col:66> Text=" This routine initializes a pipe object, prior to its first use."
|   |-ParagraphComment 0x5598274a63b0 <line:4149:3>
|   | `-TextComment 0x5598274a6380 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a63d0 <col:4, line:4150:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5598274a6480 <line:4149:15, line:4150:3>
|   |   |-TextComment 0x5598274a6430 <line:4149:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5598274a6450 <line:4150:3> Text=" "
|   |-ParamCommandComment 0x5598274a64a0 <col:4, line:4152:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5598274a6580 <line:4150:17, line:4152:3>
|   |   |-TextComment 0x5598274a6500 <line:4150:17, col:77> Text=" Address of the pipe's ring buffer, or NULL if no ring buffer"
|   |   |-TextComment 0x5598274a6520 <line:4151:3, col:25> Text="               is used."
|   |   `-TextComment 0x5598274a6540 <line:4152:3> Text=" "
|   |-ParamCommandComment 0x5598274a65a0 <col:4, line:4153:30> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x5598274a6650 <line:4152:15, line:4153:30>
|   |   |-TextComment 0x5598274a6600 <line:4152:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   `-TextComment 0x5598274a6620 <line:4153:3, col:30> Text="             buffer is used."
|   |-ParagraphComment 0x5598274a66a0 <line:4155:3>
|   | `-TextComment 0x5598274a6670 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a66c0 <col:4, line:4156:3> Name="return"
|   | `-ParagraphComment 0x5598274a6740 <line:4155:11, line:4156:3>
|   |   |-TextComment 0x5598274a66f0 <line:4155:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274a6710 <line:4156:3> Text=" "
|   |-VerbatimLineComment 0x5598274a6760 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x5598274a67d0 <line:4157:1>
|     `-TextComment 0x5598274a67a0 <col:1> Text=" "
|-FunctionDecl 0x559827404928 <line:4172:1, col:39> col:5 k_pipe_cleanup 'int (struct k_pipe *)'
| |-ParmVarDecl 0x559827404820 <col:20, col:35> col:35 pipe 'struct k_pipe *'
| `-FullComment 0x5598274a6d40 <line:4161:3, line:4171:1>
|   |-ParagraphComment 0x5598274a6920 <line:4161:3>
|   | `-TextComment 0x5598274a68f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a6940 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5598274a69a0 <col:10, col:43>
|   |   `-TextComment 0x5598274a6970 <col:10, col:43> Text=" Release a pipe's allocated buffer"
|   |-ParagraphComment 0x5598274a6a40 <line:4163:3, line:4165:46>
|   | |-TextComment 0x5598274a69c0 <line:4163:3, col:64> Text=" If a pipe object was given a dynamically allocated buffer via"
|   | |-TextComment 0x5598274a69e0 <line:4164:3, col:69> Text=" k_pipe_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x5598274a6a00 <line:4165:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x5598274a6a90 <line:4167:3>
|   | `-TextComment 0x5598274a6a60 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a6ab0 <col:4, line:4170:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5598274a6c50 <line:4167:15, line:4170:3>
|   |   |-TextComment 0x5598274a6b10 <line:4167:15, col:35> Text=" Address of the pipe."
|   |   |-TextComment 0x5598274a6b30 <line:4168:3> Text=" "
|   |   |-InlineCommandComment 0x5598274a6b50 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x5598274a6b70 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x5598274a6b90 <line:4169:3> Text=" "
|   |   |-InlineCommandComment 0x5598274a6bb0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x5598274a6bd0 <col:11, col:37> Text=" -EAGAIN nothing to cleanup"
|   |   `-TextComment 0x5598274a6bf0 <line:4170:3> Text=" "
|   |-VerbatimLineComment 0x5598274a6c70 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x5598274a6ce0 <line:4171:1>
|     `-TextComment 0x5598274a6cb0 <col:1> Text=" "
|-FunctionDecl 0x559827404ba8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4190:65> col:15 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x559827404a20 <col:33, col:48> col:48 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x559827404a90 <col:54, col:61> col:61 size 'size_t':'unsigned long'
| `-FullComment 0x5598274a7360 <line:4175:3, line:4189:1>
|   |-ParagraphComment 0x5598274a6de0 <line:4175:3>
|   | `-TextComment 0x5598274a6db0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a6e00 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x5598274a6e60 <col:10, col:56>
|   |   `-TextComment 0x5598274a6e30 <col:10, col:56> Text=" Initialize a pipe and allocate a buffer for it"
|   |-ParagraphComment 0x5598274a6f00 <line:4177:3, line:4179:74>
|   | |-TextComment 0x5598274a6e80 <line:4177:3, col:76> Text=" Storage for the buffer region will be allocated from the calling thread's"
|   | |-TextComment 0x5598274a6ea0 <line:4178:3, col:77> Text=" resource pool. This memory will be released if k_pipe_cleanup() is called,"
|   | `-TextComment 0x5598274a6ec0 <line:4179:3, col:74> Text=" or userspace is enabled and the pipe object loses all references to it."
|   |-ParagraphComment 0x5598274a6f50 <line:4181:3, col:69>
|   | `-TextComment 0x5598274a6f20 <col:3, col:69> Text=" This function should only be called on uninitialized pipe objects."
|   |-ParagraphComment 0x5598274a6fa0 <line:4183:3>
|   | `-TextComment 0x5598274a6f70 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a6fc0 <col:4, line:4184:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5598274a7070 <line:4183:15, line:4184:3>
|   |   |-TextComment 0x5598274a7020 <line:4183:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5598274a7040 <line:4184:3> Text=" "
|   |-ParamCommandComment 0x5598274a7090 <col:4, line:4188:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x5598274a7260 <line:4184:15, line:4188:3>
|   |   |-TextComment 0x5598274a70f0 <line:4184:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   |-TextComment 0x5598274a7110 <line:4185:3, col:30> Text="             buffer is used."
|   |   |-TextComment 0x5598274a7130 <line:4186:3> Text=" "
|   |   |-InlineCommandComment 0x5598274a7150 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x5598274a7170 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x5598274a7190 <line:4187:3> Text=" "
|   |   |-InlineCommandComment 0x5598274a71b0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x5598274a71d0 <col:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x5598274a71f0 <line:4188:3> Text=" "
|   |-VerbatimLineComment 0x5598274a7280 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x5598274a72f0 <line:4189:1>
|     `-TextComment 0x5598274a72c0 <col:1> Text=" "
|-FunctionDecl 0x559827405098 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4214:35> line:4212:15 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x559827404cb0 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x559827404d28 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x559827404d98 <line:4213:5, col:12> col:12 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x559827404e38 <col:28, col:36> col:36 bytes_written 'size_t *'
| |-ParmVarDecl 0x559827404ea8 <line:4214:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x559827404f18 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x5598274a7ed0 <line:4193:3, line:4211:1>
|   |-ParagraphComment 0x5598274a7400 <line:4193:3>
|   | `-TextComment 0x5598274a73d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a7420 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5598274a7480 <col:10, col:31>
|   |   `-TextComment 0x5598274a7450 <col:10, col:31> Text=" Write data to a pipe."
|   |-ParagraphComment 0x5598274a75a0 <line:4195:3, col:66>
|   | |-TextComment 0x5598274a74a0 <col:3, col:29> Text=" This routine writes up to "
|   | |-InlineCommandComment 0x5598274a74f0 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bytes_to_write"
|   | |-TextComment 0x5598274a7510 <col:47, col:64> Text=" bytes of data to "
|   | `-InlineCommandComment 0x5598274a7560 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x5598274a75f0 <line:4197:3>
|   | `-TextComment 0x5598274a75c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a7610 <col:4, line:4198:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5598274a76c0 <line:4197:15, line:4198:3>
|   |   |-TextComment 0x5598274a7670 <line:4197:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5598274a7690 <line:4198:3> Text=" "
|   |-ParamCommandComment 0x5598274a76e0 <col:4, line:4199:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5598274a7790 <line:4198:15, line:4199:3>
|   |   |-TextComment 0x5598274a7740 <line:4198:15, col:40> Text=" Address of data to write."
|   |   `-TextComment 0x5598274a7760 <line:4199:3> Text=" "
|   |-ParamCommandComment 0x5598274a77b0 <col:4, line:4200:3> [in] implicitly Param="bytes_to_write" ParamIndex=2
|   | `-ParagraphComment 0x5598274a7860 <line:4199:25, line:4200:3>
|   |   |-TextComment 0x5598274a7810 <line:4199:25, col:49> Text=" Size of data (in bytes)."
|   |   `-TextComment 0x5598274a7830 <line:4200:3> Text=" "
|   |-ParamCommandComment 0x5598274a7880 <col:4, line:4201:3> [in] implicitly Param="bytes_written" ParamIndex=3
|   | `-ParagraphComment 0x5598274a7930 <line:4200:24, line:4201:3>
|   |   |-TextComment 0x5598274a78e0 <line:4200:24, col:76> Text=" Address of area to hold the number of bytes written."
|   |   `-TextComment 0x5598274a7900 <line:4201:3> Text=" "
|   |-ParamCommandComment 0x5598274a7950 <col:4, line:4202:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x5598274a7a00 <line:4201:19, line:4202:3>
|   |   |-TextComment 0x5598274a79b0 <line:4201:19, col:52> Text=" Minimum number of bytes to write."
|   |   `-TextComment 0x5598274a79d0 <line:4202:3> Text=" "
|   |-ParamCommandComment 0x5598274a7a20 <col:4, line:4204:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x5598274a7b00 <line:4202:18, line:4204:32>
|   |   |-TextComment 0x5598274a7a80 <line:4202:18, col:80> Text=" Non-negative waiting period to wait for the data to be written"
|   |   |-TextComment 0x5598274a7aa0 <line:4203:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x5598274a7ac0 <line:4204:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x5598274a7db0 <line:4206:3, line:4210:3>
|   | |-TextComment 0x5598274a7b20 <line:4206:3> Text=" "
|   | |-InlineCommandComment 0x5598274a7b40 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a7b60 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x5598274a7bb0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x5598274a7bd0 <col:34, col:61> Text=" bytes of data were written."
|   | |-TextComment 0x5598274a7bf0 <line:4207:3> Text=" "
|   | |-InlineCommandComment 0x5598274a7c10 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a7c30 <col:11, col:71> Text=" -EIO Returned without waiting; zero data bytes were written."
|   | |-TextComment 0x5598274a7c50 <line:4208:3> Text=" "
|   | |-InlineCommandComment 0x5598274a7c70 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a7c90 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x5598274a7ce0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x5598274a7d00 <line:4209:3, col:53> Text="                 minus one data bytes were written."
|   | `-TextComment 0x5598274a7d20 <line:4210:3> Text=" "
|   |-VerbatimLineComment 0x5598274a7dd0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x5598274a7e40 <line:4211:1>
|     `-TextComment 0x5598274a7e10 <col:1> Text=" "
|-FunctionDecl 0x5598274054b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4239:35> line:4237:15 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x5598274051c0 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x559827405238 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x5598274052a8 <line:4238:5, col:12> col:12 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x559827405318 <col:27, col:35> col:35 bytes_read 'size_t *'
| |-ParmVarDecl 0x559827405388 <line:4239:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x5598274053f8 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x5598274a8ad0 <line:4217:3, line:4236:1>
|   |-ParagraphComment 0x5598274a7f70 <line:4217:3>
|   | `-TextComment 0x5598274a7f40 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a7f90 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x5598274a7ff0 <col:10, col:32>
|   |   `-TextComment 0x5598274a7fc0 <col:10, col:32> Text=" Read data from a pipe."
|   |-ParagraphComment 0x5598274a8110 <line:4219:3, col:66>
|   | |-TextComment 0x5598274a8010 <col:3, col:28> Text=" This routine reads up to "
|   | |-InlineCommandComment 0x5598274a8060 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="bytes_to_read"
|   | |-TextComment 0x5598274a8080 <col:45, col:64> Text=" bytes of data from "
|   | `-InlineCommandComment 0x5598274a80d0 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x5598274a8160 <line:4221:3>
|   | `-TextComment 0x5598274a8130 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a8180 <col:4, line:4222:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5598274a8230 <line:4221:15, line:4222:3>
|   |   |-TextComment 0x5598274a81e0 <line:4221:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5598274a8200 <line:4222:3> Text=" "
|   |-ParamCommandComment 0x5598274a8250 <col:4, line:4223:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5598274a8300 <line:4222:15, line:4223:3>
|   |   |-TextComment 0x5598274a82b0 <line:4222:15, col:56> Text=" Address to place the data read from pipe."
|   |   `-TextComment 0x5598274a82d0 <line:4223:3> Text=" "
|   |-ParamCommandComment 0x5598274a8320 <col:4, line:4224:3> [in] implicitly Param="bytes_to_read" ParamIndex=2
|   | `-ParagraphComment 0x5598274a83d0 <line:4223:24, line:4224:3>
|   |   |-TextComment 0x5598274a8380 <line:4223:24, col:61> Text=" Maximum number of data bytes to read."
|   |   `-TextComment 0x5598274a83a0 <line:4224:3> Text=" "
|   |-ParamCommandComment 0x5598274a83f0 <col:4, line:4225:3> [in] implicitly Param="bytes_read" ParamIndex=3
|   | `-ParagraphComment 0x5598274a84a0 <line:4224:21, line:4225:3>
|   |   |-TextComment 0x5598274a8450 <line:4224:21, col:70> Text=" Address of area to hold the number of bytes read."
|   |   `-TextComment 0x5598274a8470 <line:4225:3> Text=" "
|   |-ParamCommandComment 0x5598274a84c0 <col:4, line:4226:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x5598274a8570 <line:4225:19, line:4226:3>
|   |   |-TextComment 0x5598274a8520 <line:4225:19, col:56> Text=" Minimum number of data bytes to read."
|   |   `-TextComment 0x5598274a8540 <line:4226:3> Text=" "
|   |-ParamCommandComment 0x5598274a8590 <col:4, line:4228:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x5598274a8670 <line:4226:18, line:4228:32>
|   |   |-TextComment 0x5598274a85f0 <line:4226:18, col:77> Text=" Non-negative waiting period to wait for the data to be read"
|   |   |-TextComment 0x5598274a8610 <line:4227:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x5598274a8630 <line:4228:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x5598274a89b0 <line:4230:3, line:4235:3>
|   | |-TextComment 0x5598274a8690 <line:4230:3> Text=" "
|   | |-InlineCommandComment 0x5598274a86b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a86d0 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x5598274a8720 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x5598274a8740 <col:34, col:58> Text=" bytes of data were read."
|   | |-TextComment 0x5598274a8760 <line:4231:3> Text=" "
|   | |-InlineCommandComment 0x5598274a8780 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a87a0 <col:11, col:46> Text=" -EINVAL invalid parameters supplied"
|   | |-TextComment 0x5598274a87c0 <line:4232:3> Text=" "
|   | |-InlineCommandComment 0x5598274a87e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a8800 <col:11, col:68> Text=" -EIO Returned without waiting; zero data bytes were read."
|   | |-TextComment 0x5598274a8830 <line:4233:3> Text=" "
|   | |-InlineCommandComment 0x5598274a8850 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a8870 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x5598274a88c0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x5598274a88e0 <line:4234:3, col:50> Text="                 minus one data bytes were read."
|   | `-TextComment 0x5598274a8900 <line:4235:3> Text=" "
|   |-VerbatimLineComment 0x5598274a89d0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x5598274a8a40 <line:4236:1>
|     `-TextComment 0x5598274a8a10 <col:1> Text=" "
|-FunctionDecl 0x5598274058c0 <line:4256:1, line:4257:39> line:4256:13 k_pipe_block_put 'void (struct k_pipe *, struct k_mem_block *, size_t, struct k_sem *)' extern
| |-ParmVarDecl 0x5598274055d0 <col:30, col:45> col:45 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x559827405658 <col:51, col:71> col:71 block 'struct k_mem_block *'
| |-ParmVarDecl 0x5598274056c8 <line:4257:9, col:16> col:16 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559827405750 <col:22, col:36> col:36 sem 'struct k_sem *'
| `-FullComment 0x5598274a9350 <line:4242:3, line:4255:1>
|   |-ParagraphComment 0x5598274a8b70 <line:4242:3>
|   | `-TextComment 0x5598274a8b40 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a8b90 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x5598274a8bf0 <col:10, col:39>
|   |   `-TextComment 0x5598274a8bc0 <col:10, col:39> Text=" Write memory block to a pipe."
|   |-ParagraphComment 0x5598274a8de0 <line:4244:3, line:4246:79>
|   | |-TextComment 0x5598274a8c10 <line:4244:3, col:63> Text=" This routine writes the data contained in a memory block to "
|   | |-InlineCommandComment 0x5598274a8c60 <col:64, col:65> Name="a" RenderEmphasized Arg[0]="pipe."
|   | |-TextComment 0x5598274a8c80 <line:4245:3, col:74> Text=" Once all of the data in the block has been written to the pipe, it will"
|   | |-TextComment 0x5598274a8ca0 <line:4246:3, col:25> Text=" free the memory block "
|   | |-InlineCommandComment 0x5598274a8cf0 <col:26, col:27> Name="a" RenderEmphasized Arg[0]="block"
|   | |-TextComment 0x5598274a8d10 <col:34, col:57> Text=" and give the semaphore "
|   | |-InlineCommandComment 0x5598274a8d60 <col:58, col:59> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x5598274a8d80 <col:64, col:79> Text=" (if specified)."
|   |-ParagraphComment 0x5598274a8e30 <line:4248:3>
|   | `-TextComment 0x5598274a8e00 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a8e50 <col:4, line:4249:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5598274a8f00 <line:4248:15, line:4249:3>
|   |   |-TextComment 0x5598274a8eb0 <line:4248:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5598274a8ed0 <line:4249:3> Text=" "
|   |-ParamCommandComment 0x5598274a8f20 <col:4, line:4250:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x5598274a8fd0 <line:4249:16, line:4250:3>
|   |   |-TextComment 0x5598274a8f80 <line:4249:16, col:52> Text=" Memory block containing data to send"
|   |   `-TextComment 0x5598274a8fa0 <line:4250:3> Text=" "
|   |-ParamCommandComment 0x5598274a8ff0 <col:4, line:4251:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x5598274a90a0 <line:4250:15, line:4251:3>
|   |   |-TextComment 0x5598274a9050 <line:4250:15, col:59> Text=" Number of data bytes in memory block to send"
|   |   `-TextComment 0x5598274a9070 <line:4251:3> Text=" "
|   |-ParamCommandComment 0x5598274a90c0 <col:4, col:61> [in] implicitly Param="sem" ParamIndex=3
|   | `-ParagraphComment 0x5598274a9150 <col:14, col:61>
|   |   `-TextComment 0x5598274a9120 <col:14, col:61> Text=" Semaphore to signal upon completion (else NULL)"
|   |-ParagraphComment 0x5598274a91a0 <line:4253:3>
|   | `-TextComment 0x5598274a9170 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a91c0 <col:4, line:4254:3> Name="return"
|   | `-ParagraphComment 0x5598274a9240 <line:4253:11, line:4254:3>
|   |   |-TextComment 0x5598274a91f0 <line:4253:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274a9210 <line:4254:3> Text=" "
|   |-VerbatimLineComment 0x5598274a9260 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x5598274a92d0 <line:4255:1>
|     `-TextComment 0x5598274a92a0 <col:1> Text=" "
|-RecordDecl 0x5598274059d8 prev 0x5598273c2230 <line:4265:1, line:4275:1> line:4265:8 struct k_mem_slab definition
| |-FullComment 0x5598274a9470 <line:4262:3, col:24>
| | `-ParagraphComment 0x5598274a9440 <col:3, col:24>
| |   |-TextComment 0x5598274a93c0 <col:3> Text=" "
| |   |-InlineCommandComment 0x5598274a93e0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5598274a9400 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x559827405a70 <line:4266:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x559827405ac8 <line:4267:2, col:8> col:8 referenced num_blocks 'u32_t':'unsigned int'
| |-FieldDecl 0x559827405b20 <line:4268:2, col:9> col:9 block_size 'size_t':'unsigned long'
| |-FieldDecl 0x559827405b80 <line:4269:2, col:8> col:8 buffer 'char *'
| |-FieldDecl 0x559827405be0 <line:4270:2, col:8> col:8 free_list 'char *'
| `-FieldDecl 0x559827405c38 <line:4271:2, col:8> col:8 referenced num_used 'u32_t':'unsigned int'
|-FunctionDecl 0x559827406098 <line:4351:1, line:4352:42> line:4351:12 k_mem_slab_init 'int (struct k_mem_slab *, void *, size_t, u32_t)' extern
| |-ParmVarDecl 0x559827405df0 <col:28, col:47> col:47 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x559827405e68 <col:53, col:59> col:59 buffer 'void *'
| |-ParmVarDecl 0x559827405ed8 <line:4352:7, col:14> col:14 block_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559827405f48 <col:26, col:32> col:32 num_blocks 'u32_t':'unsigned int'
| `-FullComment 0x5598274a9e60 <line:4330:3, line:4350:1>
|   |-ParagraphComment 0x5598274a9510 <line:4330:3>
|   | `-TextComment 0x5598274a94e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a9530 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x5598274a9590 <col:10, col:35>
|   |   `-TextComment 0x5598274a9560 <col:10, col:35> Text=" Initialize a memory slab."
|   |-ParagraphComment 0x5598274a95e0 <line:4332:3, col:53>
|   | `-TextComment 0x5598274a95b0 <col:3, col:53> Text=" Initializes a memory slab, prior to its first use."
|   |-ParagraphComment 0x5598274a9870 <line:4334:3, line:4339:51>
|   | |-TextComment 0x5598274a9600 <line:4334:3, col:37> Text=" The memory slab's buffer contains "
|   | |-InlineCommandComment 0x5598274a9650 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="slab_num_blocks"
|   | |-TextComment 0x5598274a9670 <col:56, col:69> Text=" memory blocks"
|   | |-TextComment 0x5598274a9690 <line:4335:3, col:12> Text=" that are "
|   | |-InlineCommandComment 0x5598274a96e0 <col:13, col:14> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | |-TextComment 0x5598274a9700 <col:31, col:75> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x5598274a9720 <line:4336:3, col:68> Text=" N-byte boundary matching a word boundary, where N is a power of 2"
|   | |-TextComment 0x5598274a9740 <line:4337:3, col:42> Text=" (i.e. 4 on 32-bit systems, 8, 16, ...)."
|   | |-TextComment 0x5598274a9760 <line:4338:3, col:74> Text=" To ensure that each memory block is similarly aligned to this boundary,"
|   | |-TextComment 0x5598274a9780 <line:4339:3> Text=" "
|   | |-InlineCommandComment 0x5598274a97d0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | `-TextComment 0x5598274a97f0 <col:22, col:51> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x5598274a98c0 <line:4341:3>
|   | `-TextComment 0x5598274a9890 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274a98e0 <col:4, line:4342:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5598274a9990 <line:4341:15, line:4342:3>
|   |   |-TextComment 0x5598274a9940 <line:4341:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x5598274a9960 <line:4342:3> Text=" "
|   |-ParamCommandComment 0x5598274a99b0 <col:4, line:4343:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5598274a9a60 <line:4342:17, line:4343:3>
|   |   |-TextComment 0x5598274a9a10 <line:4342:17, col:62> Text=" Pointer to buffer used for the memory blocks."
|   |   `-TextComment 0x5598274a9a30 <line:4343:3> Text=" "
|   |-ParamCommandComment 0x5598274a9a80 <col:4, line:4344:3> [in] implicitly Param="block_size" ParamIndex=2
|   | `-ParagraphComment 0x5598274a9b30 <line:4343:21, line:4344:3>
|   |   |-TextComment 0x5598274a9ae0 <line:4343:21, col:58> Text=" Size of each memory block (in bytes)."
|   |   `-TextComment 0x5598274a9b00 <line:4344:3> Text=" "
|   |-ParamCommandComment 0x5598274a9b50 <col:4, col:45> [in] implicitly Param="num_blocks" ParamIndex=3
|   | `-ParagraphComment 0x5598274a9be0 <col:21, col:45>
|   |   `-TextComment 0x5598274a9bb0 <col:21, col:45> Text=" Number of memory blocks."
|   |-ParagraphComment 0x5598274a9cf0 <line:4346:3, line:4347:40>
|   | |-TextComment 0x5598274a9c00 <line:4346:3> Text=" "
|   | |-InlineCommandComment 0x5598274a9c20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274a9c40 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x5598274a9c60 <line:4347:3> Text=" "
|   | |-InlineCommandComment 0x5598274a9c80 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x5598274a9ca0 <col:11, col:40> Text=" -EINVAL invalid data supplied"
|   |-ParagraphComment 0x5598274a9d40 <line:4349:3>
|   | `-TextComment 0x5598274a9d10 <col:3> Text=" "
|   |-VerbatimLineComment 0x5598274a9d60 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x5598274a9dd0 <line:4350:1>
|     `-TextComment 0x5598274a9da0 <col:1> Text=" "
|-FunctionDecl 0x5598274063d8 <line:4372:1, line:4373:21> line:4372:12 k_mem_slab_alloc 'int (struct k_mem_slab *, void **, s32_t)' extern
| |-ParmVarDecl 0x5598274061b0 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x559827406228 <col:54, col:61> col:61 mem 'void **'
| |-ParmVarDecl 0x559827406298 <line:4373:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x5598274aa670 <line:4355:3, line:4371:1>
|   |-ParagraphComment 0x5598274a9f00 <line:4355:3>
|   | `-TextComment 0x5598274a9ed0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274a9f20 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5598274a9f80 <col:10, col:45>
|   |   `-TextComment 0x5598274a9f50 <col:10, col:45> Text=" Allocate memory from a memory slab."
|   |-ParagraphComment 0x5598274a9fd0 <line:4357:3, col:60>
|   | `-TextComment 0x5598274a9fa0 <col:3, col:60> Text=" This routine allocates a memory block from a memory slab."
|   |-ParagraphComment 0x5598274aa020 <line:4359:3>
|   | `-TextComment 0x5598274a9ff0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274aa040 <col:4, line:4360:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5598274aa0f0 <line:4359:15, line:4360:3>
|   |   |-TextComment 0x5598274aa0a0 <line:4359:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x5598274aa0c0 <line:4360:3> Text=" "
|   |-ParamCommandComment 0x5598274aa110 <col:4, line:4361:3> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x5598274aa1c0 <line:4360:14, line:4361:3>
|   |   |-TextComment 0x5598274aa170 <line:4360:14, col:44> Text=" Pointer to block address area."
|   |   `-TextComment 0x5598274aa190 <line:4361:3> Text=" "
|   |-ParamCommandComment 0x5598274aa1e0 <col:4, line:4363:52> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5598274aa2c0 <line:4361:18, line:4363:52>
|   |   |-TextComment 0x5598274aa240 <line:4361:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x5598274aa260 <line:4362:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x5598274aa280 <line:4363:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x5598274aa570 <line:4365:3, line:4370:3>
|   | |-TextComment 0x5598274aa2e0 <line:4365:3> Text=" "
|   | |-InlineCommandComment 0x5598274aa300 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274aa320 <col:11, col:68> Text=" 0 Memory allocated. The block address area pointed at by "
|   | |-InlineCommandComment 0x5598274aa370 <col:69, col:70> Name="a" RenderEmphasized Arg[0]="mem"
|   | |-TextComment 0x5598274aa390 <line:4366:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x5598274aa3b0 <line:4367:3> Text=" "
|   | |-InlineCommandComment 0x5598274aa3d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274aa3f0 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x5598274aa410 <line:4368:3> Text=" "
|   | |-InlineCommandComment 0x5598274aa430 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274aa450 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x5598274aa470 <line:4369:3> Text=" "
|   | |-InlineCommandComment 0x5598274aa490 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274aa4b0 <col:11, col:40> Text=" -EINVAL Invalid data supplied"
|   | `-TextComment 0x5598274aa4d0 <line:4370:3> Text=" "
|   |-VerbatimLineComment 0x5598274aa590 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x5598274aa600 <line:4371:1>
|     `-TextComment 0x5598274aa5d0 <col:1> Text=" "
|-FunctionDecl 0x559827406670 <line:4387:1, col:64> col:13 k_mem_slab_free 'void (struct k_mem_slab *, void **)' extern
| |-ParmVarDecl 0x5598274064e0 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x559827406558 <col:54, col:61> col:61 mem 'void **'
| `-FullComment 0x5598274aabe0 <line:4376:3, line:4386:1>
|   |-ParagraphComment 0x5598274aa710 <line:4376:3>
|   | `-TextComment 0x5598274aa6e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274aa730 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5598274aa790 <col:10, col:51>
|   |   `-TextComment 0x5598274aa760 <col:10, col:51> Text=" Free memory allocated from a memory slab."
|   |-ParagraphComment 0x5598274aa800 <line:4378:3, line:4379:26>
|   | |-TextComment 0x5598274aa7b0 <line:4378:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x5598274aa7d0 <line:4379:3, col:26> Text=" associated memory slab."
|   |-ParagraphComment 0x5598274aa870 <line:4381:3>
|   | `-TextComment 0x5598274aa840 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274aa890 <col:4, line:4382:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5598274aa940 <line:4381:15, line:4382:3>
|   |   |-TextComment 0x5598274aa8f0 <line:4381:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x5598274aa910 <line:4382:3> Text=" "
|   |-ParamCommandComment 0x5598274aa960 <col:4, col:75> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x5598274aa9f0 <col:14, col:75>
|   |   `-TextComment 0x5598274aa9c0 <col:14, col:75> Text=" Pointer to block address area (as set by k_mem_slab_alloc())."
|   |-ParagraphComment 0x5598274aaa40 <line:4384:3>
|   | `-TextComment 0x5598274aaa10 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274aaa60 <col:4, line:4385:3> Name="return"
|   | `-ParagraphComment 0x5598274aaae0 <line:4384:11, line:4385:3>
|   |   |-TextComment 0x5598274aaa90 <line:4384:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274aaab0 <line:4385:3> Text=" "
|   |-VerbatimLineComment 0x5598274aab00 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x5598274aab70 <line:4386:1>
|     `-TextComment 0x5598274aab40 <col:1> Text=" "
|-FunctionDecl 0x559827407600 <line:4400:1, line:4403:1> line:4400:21 k_mem_slab_num_used_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x559827406770 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x559827407778 <line:4401:1, line:4403:1>
| | `-ReturnStmt 0x559827407738 <line:4402:2, col:15>
| |   `-ImplicitCastExpr 0x559827407720 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x5598274076e8 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_used 0x559827405c38
| |       `-ImplicitCastExpr 0x5598274076d0 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |         `-DeclRefExpr 0x5598274076a8 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x559827406770 'slab' 'struct k_mem_slab *'
| `-FullComment 0x5598274ab0c0 <line:4390:3, line:4399:1>
|   |-ParagraphComment 0x5598274aac80 <line:4390:3>
|   | `-TextComment 0x5598274aac50 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274aaca0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5598274aad00 <col:10, col:57>
|   |   `-TextComment 0x5598274aacd0 <col:10, col:57> Text=" Get the number of used blocks in a memory slab."
|   |-ParagraphComment 0x5598274aadd0 <line:4392:3, line:4393:18>
|   | |-TextComment 0x5598274aad20 <line:4392:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x5598274aad40 <line:4393:3, col:16> Text=" allocated in "
|   | `-InlineCommandComment 0x5598274aad90 <col:17, col:18> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x5598274aae20 <line:4395:3>
|   | `-TextComment 0x5598274aadf0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274aae40 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5598274aaed0 <col:15, col:42>
|   |   `-TextComment 0x5598274aaea0 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x5598274aaf20 <line:4397:3>
|   | `-TextComment 0x5598274aaef0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274aaf40 <col:4, line:4398:3> Name="return"
|   | `-ParagraphComment 0x5598274aafc0 <line:4397:11, line:4398:3>
|   |   |-TextComment 0x5598274aaf70 <line:4397:11, col:45> Text=" Number of allocated memory blocks."
|   |   `-TextComment 0x5598274aaf90 <line:4398:3> Text=" "
|   |-VerbatimLineComment 0x5598274aafe0 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x5598274ab050 <line:4399:1>
|     `-TextComment 0x5598274ab020 <col:1> Text=" "
|-FunctionDecl 0x559827407840 <line:4416:1, line:4419:1> line:4416:21 k_mem_slab_num_free_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x5598274077b8 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x559827407aa8 <line:4417:1, line:4419:1>
| | `-ReturnStmt 0x559827407a30 <line:4418:2, col:34>
| |   `-BinaryOperator 0x559827407a08 <col:9, col:34> 'unsigned int' '-'
| |     |-ImplicitCastExpr 0x5598274079d8 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     | `-MemberExpr 0x559827407928 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_blocks 0x559827405ac8
| |     |   `-ImplicitCastExpr 0x559827407910 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x5598274078e8 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x5598274077b8 'slab' 'struct k_mem_slab *'
| |     `-ImplicitCastExpr 0x5598274079f0 <col:28, col:34> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-MemberExpr 0x5598274079a0 <col:28, col:34> 'u32_t':'unsigned int' lvalue ->num_used 0x559827405c38
| |         `-ImplicitCastExpr 0x559827407988 <col:28> 'struct k_mem_slab *' <LValueToRValue>
| |           `-DeclRefExpr 0x559827407960 <col:28> 'struct k_mem_slab *' lvalue ParmVar 0x5598274077b8 'slab' 'struct k_mem_slab *'
| `-FullComment 0x5598274ab5a0 <line:4406:3, line:4415:1>
|   |-ParagraphComment 0x5598274ab160 <line:4406:3>
|   | `-TextComment 0x5598274ab130 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274ab180 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5598274ab1e0 <col:10, col:59>
|   |   `-TextComment 0x5598274ab1b0 <col:10, col:59> Text=" Get the number of unused blocks in a memory slab."
|   |-ParagraphComment 0x5598274ab2b0 <line:4408:3, line:4409:20>
|   | |-TextComment 0x5598274ab200 <line:4408:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x5598274ab220 <line:4409:3, col:18> Text=" unallocated in "
|   | `-InlineCommandComment 0x5598274ab270 <col:19, col:20> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x5598274ab300 <line:4411:3>
|   | `-TextComment 0x5598274ab2d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274ab320 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5598274ab3b0 <col:15, col:42>
|   |   `-TextComment 0x5598274ab380 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x5598274ab400 <line:4413:3>
|   | `-TextComment 0x5598274ab3d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274ab420 <col:4, line:4414:3> Name="return"
|   | `-ParagraphComment 0x5598274ab4a0 <line:4413:11, line:4414:3>
|   |   |-TextComment 0x5598274ab450 <line:4413:11, col:47> Text=" Number of unallocated memory blocks."
|   |   `-TextComment 0x5598274ab470 <line:4414:3> Text=" "
|   |-VerbatimLineComment 0x5598274ab4c0 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x5598274ab530 <line:4415:1>
|     `-TextComment 0x5598274ab500 <col:1> Text=" "
|-RecordDecl 0x559827407ac0 prev 0x5598273c22e0 <line:4427:1, line:4430:1> line:4427:8 struct k_mem_pool definition
| |-FullComment 0x5598274ab6c0 <line:4424:3, col:24>
| | `-ParagraphComment 0x5598274ab690 <col:3, col:24>
| |   |-TextComment 0x5598274ab610 <col:3> Text=" "
| |   |-InlineCommandComment 0x5598274ab630 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5598274ab650 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x559827407b68 <line:4428:2, col:27> col:27 base 'struct sys_mem_pool_base':'struct sys_mem_pool_base'
| `-FieldDecl 0x559827407bc0 <line:4429:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x559827408018 <line:4495:1, line:4496:34> line:4495:12 k_mem_pool_alloc 'int (struct k_mem_pool *, struct k_mem_block *, size_t, s32_t)' extern
| |-ParmVarDecl 0x559827407d60 <col:29, col:48> col:48 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x559827407de8 <col:54, col:74> col:74 block 'struct k_mem_block *'
| |-ParmVarDecl 0x559827407e58 <line:4496:8, col:15> col:15 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x559827407ec8 <col:21, col:27> col:27 timeout 's32_t':'int'
| `-FullComment 0x5598274abf60 <line:4478:3, line:4494:1>
|   |-ParagraphComment 0x5598274ab760 <line:4478:3>
|   | `-TextComment 0x5598274ab730 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274ab780 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5598274ab7e0 <col:10, col:45>
|   |   `-TextComment 0x5598274ab7b0 <col:10, col:45> Text=" Allocate memory from a memory pool."
|   |-ParagraphComment 0x5598274ab830 <line:4480:3, col:60>
|   | `-TextComment 0x5598274ab800 <col:3, col:60> Text=" This routine allocates a memory block from a memory pool."
|   |-ParagraphComment 0x5598274ab880 <line:4482:3>
|   | `-TextComment 0x5598274ab850 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274ab8a0 <col:4, line:4483:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x5598274ab950 <line:4482:15, line:4483:3>
|   |   |-TextComment 0x5598274ab900 <line:4482:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x5598274ab920 <line:4483:3> Text=" "
|   |-ParamCommandComment 0x5598274ab970 <col:4, line:4484:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x5598274aba20 <line:4483:16, line:4484:3>
|   |   |-TextComment 0x5598274ab9d0 <line:4483:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |   `-TextComment 0x5598274ab9f0 <line:4484:3> Text=" "
|   |-ParamCommandComment 0x5598274aba40 <col:4, line:4485:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x5598274abaf0 <line:4484:15, line:4485:3>
|   |   |-TextComment 0x5598274abaa0 <line:4484:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x5598274abac0 <line:4485:3> Text=" "
|   |-ParamCommandComment 0x5598274abb10 <col:4, line:4487:52> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x5598274abbf0 <line:4485:18, line:4487:52>
|   |   |-TextComment 0x5598274abb70 <line:4485:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x5598274abb90 <line:4486:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x5598274abbb0 <line:4487:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x5598274abe50 <line:4489:3, line:4493:3>
|   | |-TextComment 0x5598274abc10 <line:4489:3> Text=" "
|   | |-InlineCommandComment 0x5598274abc30 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274abc50 <col:11, col:35> Text=" 0 Memory allocated. The "
|   | |-InlineCommandComment 0x5598274abca0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x5598274abcc0 <col:43, col:72> Text=" field of the block descriptor"
|   | |-TextComment 0x5598274abce0 <line:4490:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x5598274abd00 <line:4491:3> Text=" "
|   | |-InlineCommandComment 0x5598274abd20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274abd40 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x5598274abd60 <line:4492:3> Text=" "
|   | |-InlineCommandComment 0x5598274abd80 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274abda0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x5598274abdc0 <line:4493:3> Text=" "
|   |-VerbatimLineComment 0x5598274abe70 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x5598274abee0 <line:4494:1>
|     `-TextComment 0x5598274abeb0 <col:1> Text=" "
|-FunctionDecl 0x5598274082b8 <line:4508:1, col:68> col:14 k_mem_pool_malloc 'void *(struct k_mem_pool *, size_t)' extern
| |-ParmVarDecl 0x559827408130 <col:32, col:51> col:51 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x5598274081a0 <col:57, col:64> col:64 size 'size_t':'unsigned long'
| `-FullComment 0x5598274ac460 <line:4499:3, line:4507:1>
|   |-ParagraphComment 0x5598274ac000 <line:4499:3>
|   | `-TextComment 0x5598274abfd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274ac020 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x5598274ac080 <col:10, col:68>
|   |   `-TextComment 0x5598274ac050 <col:10, col:68> Text=" Allocate memory from a memory pool with malloc() semantics"
|   |-ParagraphComment 0x5598274ac0d0 <line:4501:3, col:47>
|   | `-TextComment 0x5598274ac0a0 <col:3, col:47> Text=" Such memory must be released using k_free()."
|   |-ParagraphComment 0x5598274ac120 <line:4503:3>
|   | `-TextComment 0x5598274ac0f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274ac140 <col:4, line:4504:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x5598274ac1f0 <line:4503:15, line:4504:3>
|   |   |-TextComment 0x5598274ac1a0 <line:4503:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x5598274ac1c0 <line:4504:3> Text=" "
|   |-ParamCommandComment 0x5598274ac210 <col:4, line:4505:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x5598274ac2c0 <line:4504:15, line:4505:3>
|   |   |-TextComment 0x5598274ac270 <line:4504:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x5598274ac290 <line:4505:3> Text=" "
|   |-BlockCommandComment 0x5598274ac2e0 <col:4, line:4506:3> Name="return"
|   | `-ParagraphComment 0x5598274ac360 <line:4505:11, line:4506:3>
|   |   |-TextComment 0x5598274ac310 <line:4505:11, col:72> Text=" Address of the allocated memory if successful, otherwise NULL"
|   |   `-TextComment 0x5598274ac330 <line:4506:3> Text=" "
|   |-VerbatimLineComment 0x5598274ac380 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x5598274ac3f0 <line:4507:1>
|     `-TextComment 0x5598274ac3c0 <col:1> Text=" "
|-FunctionDecl 0x5598274084c0 <line:4521:1, col:54> col:13 k_mem_pool_free 'void (struct k_mem_block *)' extern
| |-ParmVarDecl 0x5598274083c0 <col:29, col:49> col:49 block 'struct k_mem_block *'
| `-FullComment 0x5598274ac8f0 <line:4511:3, line:4520:1>
|   |-ParagraphComment 0x5598274ac500 <line:4511:3>
|   | `-TextComment 0x5598274ac4d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274ac520 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5598274ac580 <col:10, col:51>
|   |   `-TextComment 0x5598274ac550 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x5598274ac5f0 <line:4513:3, line:4514:15>
|   | |-TextComment 0x5598274ac5a0 <line:4513:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x5598274ac5c0 <line:4514:3, col:15> Text=" memory pool."
|   |-ParagraphComment 0x5598274ac640 <line:4516:3>
|   | `-TextComment 0x5598274ac610 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274ac660 <col:4, col:69> [in] implicitly Param="block" ParamIndex=0
|   | `-ParagraphComment 0x5598274ac6f0 <col:16, col:69>
|   |   `-TextComment 0x5598274ac6c0 <col:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |-ParagraphComment 0x5598274ac740 <line:4518:3>
|   | `-TextComment 0x5598274ac710 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274ac760 <col:4, line:4519:3> Name="return"
|   | `-ParagraphComment 0x5598274ac7e0 <line:4518:11, line:4519:3>
|   |   |-TextComment 0x5598274ac790 <line:4518:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274ac7b0 <line:4519:3> Text=" "
|   |-VerbatimLineComment 0x5598274ac800 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x5598274ac880 <line:4520:1>
|     `-TextComment 0x5598274ac850 <col:1> Text=" "
|-FunctionDecl 0x55982740a920 <line:4534:1, col:57> col:13 k_mem_pool_free_id 'void (struct k_mem_block_id *)' extern
| |-ParmVarDecl 0x55982740a820 <col:32, col:55> col:55 id 'struct k_mem_block_id *'
| `-FullComment 0x5598274acd70 <line:4524:3, line:4533:1>
|   |-ParagraphComment 0x5598274ac990 <line:4524:3>
|   | `-TextComment 0x5598274ac960 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274ac9b0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5598274aca10 <col:10, col:51>
|   |   `-TextComment 0x5598274ac9e0 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x5598274aca80 <line:4526:3, line:4527:14>
|   | |-TextComment 0x5598274aca30 <line:4526:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x5598274aca50 <line:4527:3, col:14> Text=" memory pool"
|   |-ParagraphComment 0x5598274acad0 <line:4529:3>
|   | `-TextComment 0x5598274acaa0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274acaf0 <col:4, col:37> [in] implicitly Param="id" ParamIndex=0
|   | `-ParagraphComment 0x5598274acb80 <col:13, col:37>
|   |   `-TextComment 0x5598274acb50 <col:13, col:37> Text=" Memory block identifier."
|   |-ParagraphComment 0x5598274acbd0 <line:4531:3>
|   | `-TextComment 0x5598274acba0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274acbf0 <col:4, line:4532:3> Name="return"
|   | `-ParagraphComment 0x5598274acc70 <line:4531:11, line:4532:3>
|   |   |-TextComment 0x5598274acc20 <line:4531:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274acc40 <line:4532:3> Text=" "
|   |-VerbatimLineComment 0x5598274acc90 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x5598274acd00 <line:4533:1>
|     `-TextComment 0x5598274accd0 <col:1> Text=" "
|-FunctionDecl 0x55982740ab78 <line:4557:1, col:34> col:14 k_malloc 'void *(size_t)' extern
| |-ParmVarDecl 0x55982740aa68 <col:23, col:30> col:30 size 'size_t':'unsigned long'
| `-FullComment 0x5598274ad1f0 <line:4547:3, line:4556:1>
|   |-ParagraphComment 0x5598274ace10 <line:4547:3>
|   | `-TextComment 0x5598274acde0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274ace30 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5598274ace90 <col:10, col:36>
|   |   `-TextComment 0x5598274ace60 <col:10, col:36> Text=" Allocate memory from heap."
|   |-ParagraphComment 0x5598274acf00 <line:4549:3, line:4550:39>
|   | |-TextComment 0x5598274aceb0 <line:4549:3, col:66> Text=" This routine provides traditional malloc() semantics. Memory is"
|   | `-TextComment 0x5598274aced0 <line:4550:3, col:39> Text=" allocated from the heap memory pool."
|   |-ParagraphComment 0x5598274acf50 <line:4552:3>
|   | `-TextComment 0x5598274acf20 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274acf70 <col:4, col:53> [in] implicitly Param="size" ParamIndex=0
|   | `-ParagraphComment 0x5598274ad000 <col:15, col:53>
|   |   `-TextComment 0x5598274acfd0 <col:15, col:53> Text=" Amount of memory requested (in bytes)."
|   |-ParagraphComment 0x5598274ad050 <line:4554:3>
|   | `-TextComment 0x5598274ad020 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274ad070 <col:4, line:4555:3> Name="return"
|   | `-ParagraphComment 0x5598274ad0f0 <line:4554:11, line:4555:3>
|   |   |-TextComment 0x5598274ad0a0 <line:4554:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x5598274ad0c0 <line:4555:3> Text=" "
|   |-VerbatimLineComment 0x5598274ad110 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x5598274ad180 <line:4556:1>
|     `-TextComment 0x5598274ad150 <col:1> Text=" "
|-FunctionDecl 0x55982740ace8 <line:4573:1, col:29> col:13 k_free 'void (void *)' extern
| |-ParmVarDecl 0x55982740ac60 <col:20, col:26> col:26 ptr 'void *'
| `-FullComment 0x5598274ad770 <line:4560:3, line:4572:1>
|   |-ParagraphComment 0x5598274ad290 <line:4560:3>
|   | `-TextComment 0x5598274ad260 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274ad2b0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5598274ad310 <col:10, col:42>
|   |   `-TextComment 0x5598274ad2e0 <col:10, col:42> Text=" Free memory allocated from heap."
|   |-ParagraphComment 0x5598274ad3b0 <line:4562:3, line:4564:23>
|   | |-TextComment 0x5598274ad330 <line:4562:3, col:71> Text=" This routine provides traditional free() semantics. The memory being"
|   | |-TextComment 0x5598274ad350 <line:4563:3, col:65> Text=" returned must have been allocated from the heap memory pool or"
|   | `-TextComment 0x5598274ad370 <line:4564:3, col:23> Text=" k_mem_pool_malloc()."
|   |-ParagraphComment 0x5598274ad480 <line:4566:3, col:48>
|   | |-TextComment 0x5598274ad3d0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x5598274ad420 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="ptr"
|   | `-TextComment 0x5598274ad440 <col:13, col:48> Text=" is NULL, no operation is performed."
|   |-ParagraphComment 0x5598274ad4d0 <line:4568:3>
|   | `-TextComment 0x5598274ad4a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274ad4f0 <col:4, col:53> [in] implicitly Param="ptr" ParamIndex=0
|   | `-ParagraphComment 0x5598274ad580 <col:14, col:53>
|   |   `-TextComment 0x5598274ad550 <col:14, col:53> Text=" Pointer to previously allocated memory."
|   |-ParagraphComment 0x5598274ad5d0 <line:4570:3>
|   | `-TextComment 0x5598274ad5a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274ad5f0 <col:4, line:4571:3> Name="return"
|   | `-ParagraphComment 0x5598274ad670 <line:4570:11, line:4571:3>
|   |   |-TextComment 0x5598274ad620 <line:4570:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274ad640 <line:4571:3> Text=" "
|   |-VerbatimLineComment 0x5598274ad690 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x5598274ad700 <line:4572:1>
|     `-TextComment 0x5598274ad6d0 <col:1> Text=" "
|-FunctionDecl 0x55982740af58 <line:4587:1, col:48> col:14 k_calloc 'void *(size_t, size_t)' extern
| |-ParmVarDecl 0x55982740adc8 <col:23, col:30> col:30 nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x55982740ae38 <col:37, col:44> col:44 size 'size_t':'unsigned long'
| `-FullComment 0x5598274adcc0 <line:4576:3, line:4586:1>
|   |-ParagraphComment 0x5598274ad810 <line:4576:3>
|   | `-TextComment 0x5598274ad7e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274ad830 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x5598274ad890 <col:10, col:48>
|   |   `-TextComment 0x5598274ad860 <col:10, col:48> Text=" Allocate memory from heap, array style"
|   |-ParagraphComment 0x5598274ad900 <line:4578:3, line:4579:50>
|   | |-TextComment 0x5598274ad8b0 <line:4578:3, col:66> Text=" This routine provides traditional calloc() semantics. Memory is"
|   | `-TextComment 0x5598274ad8d0 <line:4579:3, col:50> Text=" allocated from the heap memory pool and zeroed."
|   |-ParagraphComment 0x5598274ad950 <line:4581:3>
|   | `-TextComment 0x5598274ad920 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274ad970 <col:4, line:4582:3> [in] implicitly Param="nmemb" ParamIndex=0
|   | `-ParagraphComment 0x5598274ada20 <line:4581:16, line:4582:3>
|   |   |-TextComment 0x5598274ad9d0 <line:4581:16, col:57> Text=" Number of elements in the requested array"
|   |   `-TextComment 0x5598274ad9f0 <line:4582:3> Text=" "
|   |-ParamCommandComment 0x5598274ada40 <col:4, col:53> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x5598274adad0 <col:15, col:53>
|   |   `-TextComment 0x5598274adaa0 <col:15, col:53> Text=" Size of each array element (in bytes)."
|   |-ParagraphComment 0x5598274adb20 <line:4584:3>
|   | `-TextComment 0x5598274adaf0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274adb40 <col:4, line:4585:3> Name="return"
|   | `-ParagraphComment 0x5598274adbc0 <line:4584:11, line:4585:3>
|   |   |-TextComment 0x5598274adb70 <line:4584:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x5598274adb90 <line:4585:3> Text=" "
|   |-VerbatimLineComment 0x5598274adbe0 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x5598274adc50 <line:4586:1>
|     `-TextComment 0x5598274adc20 <col:1> Text=" "
|-EnumDecl 0x55982740b038 <line:4600:1, line:4614:1> line:4600:6 _poll_types_bits
| |-EnumConstantDecl 0x55982740b0f0 <line:4602:2> col:2 _POLL_TYPE_IGNORE 'int'
| |-EnumConstantDecl 0x55982740b138 <line:4605:2> col:2 _POLL_TYPE_SIGNAL 'int'
| |-EnumConstantDecl 0x55982740b180 <line:4608:2> col:2 _POLL_TYPE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x55982740b1c8 <line:4611:2> col:2 _POLL_TYPE_DATA_AVAILABLE 'int'
| `-EnumConstantDecl 0x55982740b210 <line:4613:2> col:2 referenced _POLL_NUM_TYPES 'int'
|-EnumDecl 0x55982740b258 <line:4619:1, line:4636:1> line:4619:6 _poll_states_bits
| |-EnumConstantDecl 0x55982740b310 <line:4621:2> col:2 _POLL_STATE_NOT_READY 'int'
| |-EnumConstantDecl 0x55982740b358 <line:4624:2> col:2 _POLL_STATE_SIGNALED 'int'
| |-EnumConstantDecl 0x55982740b3a0 <line:4627:2> col:2 _POLL_STATE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x55982740b3e8 <line:4630:2> col:2 _POLL_STATE_DATA_AVAILABLE 'int'
| |-EnumConstantDecl 0x55982740b430 <line:4633:2> col:2 _POLL_STATE_CANCELLED 'int'
| `-EnumConstantDecl 0x55982740b478 <line:4635:2> col:2 referenced _POLL_NUM_STATES 'int'
|-EnumDecl 0x55982740b4e8 <line:4667:1, line:4672:1> line:4667:6 k_poll_modes
| |-EnumConstantDecl 0x55982740b5c0 <line:4669:2, col:28> col:2 K_POLL_MODE_NOTIFY_ONLY 'int'
| | `-IntegerLiteral 0x55982740b5a0 <col:28> 'int' 0
| `-EnumConstantDecl 0x55982740b608 <line:4671:2> col:2 K_POLL_NUM_MODES 'int'
|-RecordDecl 0x55982740b650 prev 0x5598273c24f0 <line:4683:1, line:4695:1> line:4683:8 struct k_poll_signal definition
| |-FieldDecl 0x55982740b718 <line:4685:2, col:14> col:14 poll_events 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x5598274add90 <line:4684:5, col:28>
| |   `-ParagraphComment 0x5598274add60 <col:5, col:28>
| |     `-TextComment 0x5598274add30 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x55982740cca0 <line:4691:2, col:15> col:15 referenced signaled 'unsigned int'
| | `-FullComment 0x5598274ade80 <line:4688:4, line:4689:24>
| |   `-ParagraphComment 0x5598274ade50 <line:4688:4, line:4689:24>
| |     |-TextComment 0x5598274ade00 <line:4688:4, col:71> Text=" 1 if the event has been signaled, 0 otherwise. Stays set to 1 until"
| |     `-TextComment 0x5598274ade20 <line:4689:4, col:24> Text=" user resets it to 0."
| `-FieldDecl 0x55982740cd30 <line:4694:2, col:6> col:6 result 'int'
|   `-FullComment 0x5598274adf50 <line:4693:5, col:67>
|     `-ParagraphComment 0x5598274adf20 <col:5, col:67>
|       `-TextComment 0x5598274adef0 <col:5, col:67> Text=" custom result value passed to k_poll_signal_raise() if needed "
|-RecordDecl 0x55982740cda8 prev 0x5598273c2440 <line:4707:1, line:4737:1> line:4707:8 struct k_poll_event definition
| |-FullComment 0x5598274ae100 <line:4704:3, line:4706:1>
| | |-ParagraphComment 0x5598274adff0 <line:4704:3>
| | | `-TextComment 0x5598274adfc0 <col:3> Text=" "
| | |-BlockCommandComment 0x5598274ae010 <col:4, col:20> Name="brief"
| | | `-ParagraphComment 0x5598274ae070 <col:10, col:20>
| | |   `-TextComment 0x5598274ae040 <col:10, col:20> Text=" Poll Event"
| | `-ParagraphComment 0x5598274ae0c0 <line:4706:1>
| |   `-TextComment 0x5598274ae090 <col:1> Text=" "
| |-FieldDecl 0x55982740ce68 <line:4709:2, col:14> col:14 _node 'sys_dnode_t':'struct _dnode'
| | `-FullComment 0x5598274ae1d0 <line:4708:5, col:28>
| |   `-ParagraphComment 0x5598274ae1a0 <col:5, col:28>
| |     `-TextComment 0x5598274ae170 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x55982740cf60 <line:4712:2, col:18> col:18 poller 'struct _poller *'
| | `-FullComment 0x5598274ae2a0 <line:4711:5, col:28>
| |   `-ParagraphComment 0x5598274ae270 <col:5, col:28>
| |     `-TextComment 0x5598274ae240 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x55982740d008 <line:4715:2, col:12> col:8 tag 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x55982740cfd8 <col:12> 'int' 8
| | `-FullComment 0x5598274ae370 <line:4714:5, col:63>
| |   `-ParagraphComment 0x5598274ae340 <col:5, col:63>
| |     `-TextComment 0x5598274ae310 <col:5, col:63> Text=" optional user-specified tag, opaque, untouched by the API "
| |-FieldDecl 0x55982740d0b0 <line:4718:2, col:13> col:8 type 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x55982740d078 <col:13> 'int' EnumConstant 0x55982740b210 '_POLL_NUM_TYPES' 'int'
| | `-FullComment 0x5598274ae440 <line:4717:5, col:67>
| |   `-ParagraphComment 0x5598274ae410 <col:5, col:67>
| |     `-TextComment 0x5598274ae3e0 <col:5, col:67> Text=" bitfield of event types (bitwise-ORed K_POLL_TYPE_xxx values) "
| |-FieldDecl 0x55982740d160 <line:4721:2, col:14> col:8 state 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x55982740d128 <col:14> 'int' EnumConstant 0x55982740b478 '_POLL_NUM_STATES' 'int'
| | `-FullComment 0x5598274ae510 <line:4720:5, col:69>
| |   `-ParagraphComment 0x5598274ae4e0 <col:5, col:69>
| |     `-TextComment 0x5598274ae4b0 <col:5, col:69> Text=" bitfield of event states (bitwise-ORed K_POLL_STATE_xxx values) "
| |-FieldDecl 0x55982740d208 <line:4724:2, col:13> col:8 mode 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x55982740d1d8 <col:13> 'int' 1
| | `-FullComment 0x5598274ae5e0 <line:4723:5, col:47>
| |   `-ParagraphComment 0x5598274ae5b0 <col:5, col:47>
| |     `-TextComment 0x5598274ae580 <col:5, col:47> Text=" mode of operation, from enum k_poll_modes "
| |-FieldDecl 0x55982740d460 <line:4727:2, line:4646:9> line:4727:8 unused 'u32_t':'unsigned int'
| | |-ParenExpr 0x55982740d430 <line:4641:2, line:4646:9> 'int'
| | | `-BinaryOperator 0x55982740d408 <line:4641:3, line:4646:8> 'int' '-'
| | |   |-IntegerLiteral 0x55982740d278 <line:4641:3> 'int' 32
| | |   `-ParenExpr 0x55982740d3e8 <col:8, line:4646:8> 'int'
| | |     `-BinaryOperator 0x55982740d3c0 <line:4641:9, line:4645:11> 'int' '+'
| | |       |-BinaryOperator 0x55982740d378 <line:4641:9, line:4644:11> 'int' '+'
| | |       | |-BinaryOperator 0x55982740d328 <line:4641:9, line:4643:11> 'int' '+'
| | |       | | |-BinaryOperator 0x55982740d2d8 <line:4641:9, line:4642:11> 'int' '+'
| | |       | | | |-IntegerLiteral 0x55982740d298 <line:4641:9> 'int' 0
| | |       | | | `-IntegerLiteral 0x55982740d2b8 <line:4642:11> 'int' 8
| | |       | | `-DeclRefExpr 0x55982740d300 <line:4643:11> 'int' EnumConstant 0x55982740b210 '_POLL_NUM_TYPES' 'int'
| | |       | `-DeclRefExpr 0x55982740d350 <line:4644:11> 'int' EnumConstant 0x55982740b478 '_POLL_NUM_STATES' 'int'
| | |       `-IntegerLiteral 0x55982740d3a0 <line:4645:11> 'int' 1
| | `-FullComment 0x5598274ae6b0 <line:4726:5, col:32>
| |   `-ParagraphComment 0x5598274ae680 <col:5, col:32>
| |     `-TextComment 0x5598274ae650 <col:5, col:32> Text=" unused bits in 32-bit word "
| |-RecordDecl 0x55982740d4d8 <line:4730:2, line:4736:2> line:4730:2 union definition
| | |-FullComment 0x5598274ae780 <line:4729:5, col:19>
| | | `-ParagraphComment 0x5598274ae750 <col:5, col:19>
| | |   `-TextComment 0x5598274ae720 <col:5, col:19> Text=" per-type data "
| | |-FieldDecl 0x55982740d598 <line:4731:3, col:9> col:9 obj 'void *'
| | |-FieldDecl 0x55982740d690 <line:4732:3, col:25> col:25 signal 'struct k_poll_signal *'
| | |-FieldDecl 0x55982740d700 <line:4733:3, col:17> col:17 sem 'struct k_sem *'
| | |-FieldDecl 0x55982740d800 <line:4734:3, col:18> col:18 fifo 'struct k_fifo *'
| | `-FieldDecl 0x55982740d870 <line:4735:3, col:19> col:19 queue 'struct k_queue *'
| |-FieldDecl 0x55982740d910 <line:4730:2> col:2 implicit 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| |-IndirectFieldDecl 0x55982740d968 <line:4731:9> col:9 implicit obj 'void *'
| | |-Field 0x55982740d910 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x55982740d598 'obj' 'void *'
| |-IndirectFieldDecl 0x55982740d9b8 <line:4732:25> col:25 implicit signal 'struct k_poll_signal *'
| | |-Field 0x55982740d910 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x55982740d690 'signal' 'struct k_poll_signal *'
| |-IndirectFieldDecl 0x55982740da08 <line:4733:17> col:17 implicit sem 'struct k_sem *'
| | |-Field 0x55982740d910 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x55982740d700 'sem' 'struct k_sem *'
| |-IndirectFieldDecl 0x55982740da58 <line:4734:18> col:18 implicit fifo 'struct k_fifo *'
| | |-Field 0x55982740d910 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x55982740d800 'fifo' 'struct k_fifo *'
| `-IndirectFieldDecl 0x55982740daa8 <line:4735:19> col:19 implicit queue 'struct k_queue *'
|   |-Field 0x55982740d910 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
|   `-Field 0x55982740d870 'queue' 'struct k_queue *'
|-FunctionDecl 0x55982740e7e0 <line:4778:1, line:4779:29> line:4778:13 k_poll_event_init 'void (struct k_poll_event *, u32_t, int, void *)' extern
| |-ParmVarDecl 0x55982740db40 <col:31, col:52> col:52 event 'struct k_poll_event *'
| |-ParmVarDecl 0x55982740dbb0 <col:59, col:65> col:65 type 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55982740dc28 <line:4779:10, col:14> col:14 mode 'int'
| |-ParmVarDecl 0x55982740e6a0 <col:20, col:26> col:26 obj 'void *'
| `-FullComment 0x5598274aef20 <line:4761:3, line:4776:1>
|   |-ParagraphComment 0x5598274ae820 <line:4761:3>
|   | `-TextComment 0x5598274ae7f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274ae860 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5598274ae8c0 <col:10, col:53>
|   |   `-TextComment 0x5598274ae890 <col:10, col:53> Text=" Initialize one struct k_poll_event instance"
|   |-ParagraphComment 0x5598274ae930 <line:4763:3, line:4764:53>
|   | |-TextComment 0x5598274ae8e0 <line:4763:3, col:73> Text=" After this routine is called on a poll event, the event it ready to be"
|   | `-TextComment 0x5598274ae900 <line:4764:3, col:53> Text=" placed in an event array to be passed to k_poll()."
|   |-ParagraphComment 0x5598274ae980 <line:4766:3>
|   | `-TextComment 0x5598274ae950 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274ae9a0 <col:4, line:4767:3> [in] implicitly Param="event" ParamIndex=0
|   | `-ParagraphComment 0x5598274aea50 <line:4766:16, line:4767:3>
|   |   |-TextComment 0x5598274aea00 <line:4766:16, col:40> Text=" The event to initialize."
|   |   `-TextComment 0x5598274aea20 <line:4767:3> Text=" "
|   |-ParamCommandComment 0x5598274aea70 <col:4, line:4771:3> [in] implicitly Param="type" ParamIndex=1
|   | `-ParagraphComment 0x5598274aeba0 <line:4767:15, line:4771:3>
|   |   |-TextComment 0x5598274aead0 <line:4767:15, col:73> Text=" A bitfield of the types of event, from the K_POLL_TYPE_xxx"
|   |   |-TextComment 0x5598274aeaf0 <line:4768:3, col:77> Text="             values. Only values that apply to the same object being polled"
|   |   |-TextComment 0x5598274aeb10 <line:4769:3, col:77> Text="             can be used together. Choosing K_POLL_TYPE_IGNORE disables the"
|   |   |-TextComment 0x5598274aeb30 <line:4770:3, col:21> Text="             event."
|   |   `-TextComment 0x5598274aeb50 <line:4771:3> Text=" "
|   |-ParamCommandComment 0x5598274aebc0 <col:4, line:4772:3> [in] implicitly Param="mode" ParamIndex=2
|   | `-ParagraphComment 0x5598274aec70 <line:4771:15, line:4772:3>
|   |   |-TextComment 0x5598274aec20 <line:4771:15, col:51> Text=" Future. Use K_POLL_MODE_NOTIFY_ONLY."
|   |   `-TextComment 0x5598274aec40 <line:4772:3> Text=" "
|   |-ParamCommandComment 0x5598274aec90 <col:4, col:43> [in] implicitly Param="obj" ParamIndex=3
|   | `-ParagraphComment 0x5598274aed20 <col:14, col:43>
|   |   `-TextComment 0x5598274aecf0 <col:14, col:43> Text=" Kernel object or poll signal."
|   |-ParagraphComment 0x5598274aed70 <line:4774:3>
|   | `-TextComment 0x5598274aed40 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274aed90 <col:4, line:4775:3> Name="return"
|   | `-ParagraphComment 0x5598274aee10 <line:4774:11, line:4775:3>
|   |   |-TextComment 0x5598274aedc0 <line:4774:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274aede0 <line:4775:3> Text=" "
|   |-VerbatimLineComment 0x5598274aee30 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x5598274aeea0 <line:4776:1>
|     `-TextComment 0x5598274aee70 <col:1> Text=" "
|-FunctionDecl 0x55982740eb18 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4827:21> line:4826:15 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x55982740e8f0 <col:22, col:43> col:43 events 'struct k_poll_event *'
| |-ParmVarDecl 0x55982740e968 <col:51, col:55> col:55 num_events 'int'
| |-ParmVarDecl 0x55982740e9d8 <line:4827:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x5598274afb40 <line:4782:3, line:4824:1>
|   |-ParagraphComment 0x5598274aefc0 <line:4782:3>
|   | `-TextComment 0x5598274aef90 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274aefe0 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x5598274af040 <col:10, col:63>
|   |   `-TextComment 0x5598274af010 <col:10, col:63> Text=" Wait for one or many of multiple poll events to occur"
|   |-ParagraphComment 0x5598274af0e0 <line:4784:3, line:4786:61>
|   | |-TextComment 0x5598274af060 <line:4784:3, col:71> Text=" This routine allows a thread to wait concurrently for one or many of"
|   | |-TextComment 0x5598274af080 <line:4785:3, col:76> Text=" multiple poll events to have occurred. Such events can be a kernel object"
|   | `-TextComment 0x5598274af0a0 <line:4786:3, col:61> Text=" being available, like a semaphore, or a poll signal event."
|   |-ParagraphComment 0x5598274af270 <line:4788:3, line:4796:68>
|   | |-TextComment 0x5598274af100 <line:4788:3, col:78> Text=" When an event notifies that a kernel object is available, the kernel object"
|   | |-TextComment 0x5598274af120 <line:4789:3, col:76> Text=" is not "given" to the thread calling k_poll(): it merely signals the fact"
|   | |-TextComment 0x5598274af140 <line:4790:3, col:76> Text=" that the object was available when the k_poll() call was in effect. Also,"
|   | |-TextComment 0x5598274af160 <line:4791:3, col:78> Text=" all threads trying to acquire an object the regular way, i.e. by pending on"
|   | |-TextComment 0x5598274af180 <line:4792:3, col:74> Text=" the object, have precedence over the thread polling on the object. This"
|   | |-TextComment 0x5598274af1a0 <line:4793:3, col:75> Text=" means that the polling thread will never get the poll event on an object"
|   | |-TextComment 0x5598274af1c0 <line:4794:3, col:75> Text=" until the object becomes available and its pend queue is empty. For this"
|   | |-TextComment 0x5598274af1e0 <line:4795:3, col:76> Text=" reason, the k_poll() call is more effective when the objects being polled"
|   | `-TextComment 0x5598274af200 <line:4796:3, col:68> Text=" only have one thread, the polling thread, trying to acquire them."
|   |-ParagraphComment 0x5598274af310 <line:4798:3, line:4800:44>
|   | |-TextComment 0x5598274af290 <line:4798:3, col:78> Text=" When k_poll() returns 0, the caller should loop on all the events that were"
|   | |-TextComment 0x5598274af2b0 <line:4799:3, col:72> Text=" passed to k_poll() and check the state field for the values that were"
|   | `-TextComment 0x5598274af2d0 <line:4800:3, col:44> Text=" expected and take the associated actions."
|   |-ParagraphComment 0x5598274af380 <line:4802:3, line:4803:41>
|   | |-TextComment 0x5598274af330 <line:4802:3, col:78> Text=" Before being reused for another call to k_poll(), the user has to reset the"
|   | `-TextComment 0x5598274af350 <line:4803:3, col:41> Text=" state field to K_POLL_STATE_NOT_READY."
|   |-ParagraphComment 0x5598274af3f0 <line:4805:3, line:4806:30>
|   | |-TextComment 0x5598274af3a0 <line:4805:3, col:77> Text=" When called from user mode, a temporary memory allocation is required from"
|   | `-TextComment 0x5598274af3c0 <line:4806:3, col:30> Text=" the caller's resource pool."
|   |-ParagraphComment 0x5598274af440 <line:4808:3>
|   | `-TextComment 0x5598274af410 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274af460 <col:4, line:4809:3> [in] implicitly Param="events" ParamIndex=0
|   | `-ParagraphComment 0x5598274af510 <line:4808:17, line:4809:3>
|   |   |-TextComment 0x5598274af4c0 <line:4808:17, col:65> Text=" An array of pointers to events to be polled for."
|   |   `-TextComment 0x5598274af4e0 <line:4809:3> Text=" "
|   |-ParamCommandComment 0x5598274af530 <col:4, line:4810:3> [in] implicitly Param="num_events" ParamIndex=1
|   | `-ParagraphComment 0x5598274af5e0 <line:4809:21, line:4810:3>
|   |   |-TextComment 0x5598274af590 <line:4809:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x5598274af5b0 <line:4810:3> Text=" "
|   |-ParamCommandComment 0x5598274af600 <col:4, line:4812:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5598274af6e0 <line:4810:18, line:4812:28>
|   |   |-TextComment 0x5598274af660 <line:4810:18, col:74> Text=" Non-negative waiting period for an event to be ready (in"
|   |   |-TextComment 0x5598274af680 <line:4811:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5598274af6a0 <line:4812:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5598274afa20 <line:4814:3, line:4823:3>
|   | |-TextComment 0x5598274af700 <line:4814:3> Text=" "
|   | |-InlineCommandComment 0x5598274af720 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274af740 <col:11, col:42> Text=" 0 One or more events are ready."
|   | |-TextComment 0x5598274af760 <line:4815:3> Text=" "
|   | |-InlineCommandComment 0x5598274af780 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274af7a0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x5598274af7c0 <line:4816:3> Text=" "
|   | |-InlineCommandComment 0x5598274af7e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274af800 <col:11, col:57> Text=" -EINTR Polling has been interrupted, e.g. with"
|   | |-TextComment 0x5598274af820 <line:4817:3, col:76> Text="         k_queue_cancel_wait(). All output events are still set and valid,"
|   | |-TextComment 0x5598274af840 <line:4818:3, col:77> Text="         cancelled event(s) will be set to K_POLL_STATE_CANCELLED. In other"
|   | |-TextComment 0x5598274af860 <line:4819:3, col:75> Text="         words, -EINTR status means that at least one of output events is"
|   | |-TextComment 0x5598274af880 <line:4820:3, col:34> Text="         K_POLL_STATE_CANCELLED."
|   | |-TextComment 0x5598274af8a0 <line:4821:3> Text=" "
|   | |-InlineCommandComment 0x5598274af8c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274af8e0 <col:11, col:76> Text=" -ENOMEM Thread resource pool insufficient memory (user mode only)"
|   | |-TextComment 0x5598274af900 <line:4822:3> Text=" "
|   | |-InlineCommandComment 0x5598274af920 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274af940 <col:11, col:50> Text=" -EINVAL Bad parameters (user mode only)"
|   | `-TextComment 0x5598274af960 <line:4823:3> Text=" "
|   |-VerbatimLineComment 0x5598274afa40 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x5598274afab0 <line:4824:1>
|     `-TextComment 0x5598274afa80 <col:1> Text=" "
|-FunctionDecl 0x55982740ed20 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4840:63> col:16 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x55982740ec20 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| `-FullComment 0x5598274affa0 <line:4830:3, line:4838:1>
|   |-ParagraphComment 0x5598274afbe0 <line:4830:3>
|   | `-TextComment 0x5598274afbb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274afc00 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5598274afc60 <col:10, col:42>
|   |   `-TextComment 0x5598274afc30 <col:10, col:42> Text=" Initialize a poll signal object."
|   |-ParagraphComment 0x5598274afcb0 <line:4832:3, col:71>
|   | `-TextComment 0x5598274afc80 <col:3, col:71> Text=" Ready a poll signal object to be signaled via k_poll_signal_raise()."
|   |-ParagraphComment 0x5598274afd00 <line:4834:3>
|   | `-TextComment 0x5598274afcd0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274afd20 <col:4, col:31> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x5598274afdb0 <col:17, col:31>
|   |   `-TextComment 0x5598274afd80 <col:17, col:31> Text=" A poll signal."
|   |-ParagraphComment 0x5598274afe00 <line:4836:3>
|   | `-TextComment 0x5598274afdd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274afe20 <col:4, line:4837:3> Name="return"
|   | `-ParagraphComment 0x5598274afea0 <line:4836:11, line:4837:3>
|   |   |-TextComment 0x5598274afe50 <line:4836:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274afe70 <line:4837:3> Text=" "
|   |-VerbatimLineComment 0x5598274afec0 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x5598274aff30 <line:4838:1>
|     `-TextComment 0x5598274aff00 <col:1> Text=" "
|-FunctionDecl 0x55982740ee78 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4848:64> col:16 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| `-ParmVarDecl 0x55982740edf0 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
|-FunctionDecl 0x55982740efd0 <line:4850:1, line:4853:1> line:4850:20 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x55982740ef48 <col:47, col:69> col:69 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x55982740f168 <line:4851:1, line:4853:1>
|   `-BinaryOperator 0x55982740f110 <line:4852:2, col:21> 'unsigned int' '='
|     |-MemberExpr 0x55982740f0b8 <col:2, col:10> 'unsigned int' lvalue ->signaled 0x55982740cca0
|     | `-ImplicitCastExpr 0x55982740f0a0 <col:2> 'struct k_poll_signal *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55982740f078 <col:2> 'struct k_poll_signal *' lvalue ParmVar 0x55982740ef48 'signal' 'struct k_poll_signal *'
|     `-IntegerLiteral 0x55982740f0f0 <col:21> 'unsigned int' 0
|-FunctionDecl 0x55982740f3d0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4867:43> line:4866:16 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x55982740f1a8 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55982740f220 <line:4867:8, col:22> col:22 signaled 'unsigned int *'
| |-ParmVarDecl 0x55982740f298 <col:32, col:37> col:37 result 'int *'
| `-FullComment 0x5598274b04f0 <line:4856:3, line:4865:1>
|   |-ParagraphComment 0x5598274b0040 <line:4856:3>
|   | `-TextComment 0x5598274b0010 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b0060 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x5598274b00c0 <col:10, col:68>
|   |   `-TextComment 0x5598274b0090 <col:10, col:68> Text=" Fetch the signaled state and result value of a poll signal"
|   |-ParagraphComment 0x5598274b0110 <line:4858:3>
|   | `-TextComment 0x5598274b00e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274b0130 <col:4, line:4859:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x5598274b01e0 <line:4858:17, line:4859:3>
|   |   |-TextComment 0x5598274b0190 <line:4858:17, col:37> Text=" A poll signal object"
|   |   `-TextComment 0x5598274b01b0 <line:4859:3> Text=" "
|   |-ParamCommandComment 0x5598274b0200 <col:4, line:4861:3> [in] implicitly Param="signaled" ParamIndex=1
|   | `-ParagraphComment 0x5598274b02e0 <line:4859:19, line:4861:3>
|   |   |-TextComment 0x5598274b0260 <line:4859:19, col:73> Text=" An integer buffer which will be written nonzero if the"
|   |   |-TextComment 0x5598274b0280 <line:4860:3, col:26> Text="		   object was signaled"
|   |   `-TextComment 0x5598274b02a0 <line:4861:3> Text=" "
|   |-ParamCommandComment 0x5598274b0300 <col:4, line:4864:3> [in] implicitly Param="result" ParamIndex=2
|   | `-ParagraphComment 0x5598274b0400 <line:4861:17, line:4864:3>
|   |   |-TextComment 0x5598274b0360 <line:4861:17, col:77> Text=" An integer destination buffer which will be written with the"
|   |   |-TextComment 0x5598274b0380 <line:4862:3, col:63> Text="		   result value if the object was signaled, or an undefined"
|   |   |-TextComment 0x5598274b03a0 <line:4863:3, col:27> Text="		   value if it was not."
|   |   `-TextComment 0x5598274b03c0 <line:4864:3> Text=" "
|   |-VerbatimLineComment 0x5598274b0420 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x5598274b0490 <line:4865:1>
|     `-TextComment 0x5598274b0460 <col:1> Text=" "
|-FunctionDecl 0x55982740fb20 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4894:75> col:15 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x55982740f4e0 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55982740f558 <col:65, col:69> col:69 result 'int'
| `-FullComment 0x5598274b0d70 <line:4870:3, line:4892:1>
|   |-ParagraphComment 0x5598274b0590 <line:4870:3>
|   | `-TextComment 0x5598274b0560 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b05b0 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x5598274b0610 <col:10, col:38>
|   |   `-TextComment 0x5598274b05e0 <col:10, col:38> Text=" Signal a poll signal object."
|   |-ParagraphComment 0x5598274b0730 <line:4872:3, line:4874:57>
|   | |-TextComment 0x5598274b0630 <line:4872:3, col:77> Text=" This routine makes ready a poll signal, which is basically a poll event of"
|   | |-TextComment 0x5598274b0650 <line:4873:3, col:77> Text=" type K_POLL_TYPE_SIGNAL. If a thread was polling on that event, it will be"
|   | |-TextComment 0x5598274b0670 <line:4874:3, col:24> Text=" made ready to run. A "
|   | |-InlineCommandComment 0x5598274b06c0 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="result"
|   | `-TextComment 0x5598274b06e0 <col:34, col:57> Text=" value can be specified."
|   |-ParagraphComment 0x5598274b0820 <line:4876:3, line:4880:27>
|   | |-TextComment 0x5598274b0750 <line:4876:3, col:64> Text=" The poll signal contains a 'signaled' field that, when set by"
|   | |-TextComment 0x5598274b0770 <line:4877:3, col:73> Text=" k_poll_signal_raise(), stays set until the user sets it back to 0 with"
|   | |-TextComment 0x5598274b0790 <line:4878:3, col:74> Text=" k_poll_signal_reset(). It thus has to be reset by the user before being"
|   | |-TextComment 0x5598274b07b0 <line:4879:3, col:76> Text=" passed again to k_poll() or k_poll() will consider it being signaled, and"
|   | `-TextComment 0x5598274b07d0 <line:4880:3, col:27> Text=" will return immediately."
|   |-ParagraphComment 0x5598274b0880 <line:4882:3>
|   | `-TextComment 0x5598274b0840 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b08a0 <col:4, line:4884:65> Name="note"
|   | `-ParagraphComment 0x5598274b0950 <line:4882:9, line:4884:65>
|   |   |-TextComment 0x5598274b08d0 <line:4882:9, col:69> Text=" The result is stored and the 'signaled' field is set even if"
|   |   |-TextComment 0x5598274b08f0 <line:4883:3, col:70> Text=" this function returns an error indicating that an expiring poll was"
|   |   `-TextComment 0x5598274b0910 <line:4884:3, col:65> Text=" not notified.  The next k_poll() will detect the missed raise."
|   |-ParagraphComment 0x5598274b09a0 <line:4886:3>
|   | `-TextComment 0x5598274b0970 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274b09c0 <col:4, line:4887:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x5598274b0a70 <line:4886:17, line:4887:3>
|   |   |-TextComment 0x5598274b0a20 <line:4886:17, col:31> Text=" A poll signal."
|   |   `-TextComment 0x5598274b0a40 <line:4887:3> Text=" "
|   |-ParamCommandComment 0x5598274b0a90 <col:4, col:70> [in] implicitly Param="result" ParamIndex=1
|   | `-ParagraphComment 0x5598274b0b20 <col:17, col:70>
|   |   `-TextComment 0x5598274b0af0 <col:17, col:70> Text=" The value to store in the result field of the signal."
|   |-ParagraphComment 0x5598274b0c60 <line:4889:3, line:4891:3>
|   | |-TextComment 0x5598274b0b40 <line:4889:3> Text=" "
|   | |-InlineCommandComment 0x5598274b0b60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274b0b80 <col:11, col:51> Text=" 0 The signal was delivered successfully."
|   | |-TextComment 0x5598274b0ba0 <line:4890:3> Text=" "
|   | |-InlineCommandComment 0x5598274b0bc0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x5598274b0be0 <col:11, col:78> Text=" -EAGAIN The polling thread's timeout is in the process of expiring."
|   | `-TextComment 0x5598274b0c00 <line:4891:3> Text=" "
|   |-VerbatimLineComment 0x5598274b0c80 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x5598274b0cf0 <line:4892:1>
|     `-TextComment 0x5598274b0cc0 <col:1> Text=" "
|-FunctionDecl 0x55982740fd90 <line:4899:1, col:70> col:13 z_handle_obj_poll_events 'void (sys_dlist_t *, u32_t)' extern
| |-ParmVarDecl 0x55982740fc08 <col:38, col:51> col:51 events 'sys_dlist_t *'
| |-ParmVarDecl 0x55982740fc78 <col:59, col:65> col:65 state 'u32_t':'unsigned int'
| `-FullComment 0x5598274b0e60 <line:4897:3, col:12>
|   `-ParagraphComment 0x5598274b0e30 <col:3, col:12>
|     |-TextComment 0x5598274b0de0 <col:3> Text=" "
|     `-InlineCommandComment 0x5598274b0e00 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55982740ff28 <line:4921:1, line:4924:1> line:4921:20 k_cpu_idle 'void (void)' static inline
| |-CompoundStmt 0x559827410058 <line:4922:1, line:4924:1>
| | `-CallExpr 0x559827410008 <line:4923:2, col:16> 'void'
| |   `-ImplicitCastExpr 0x55982740fff0 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
| |     `-DeclRefExpr 0x55982740ffc8 <col:2> 'void (void)' Function 0x559827388650 'arch_cpu_idle' 'void (void)'
| `-FullComment 0x5598274b1460 <line:4904:3, line:4920:1>
|   |-ParagraphComment 0x5598274b0f00 <line:4904:3>
|   | `-TextComment 0x5598274b0ed0 <col:3> Text=" "
|   |-VerbatimLineComment 0x5598274b0f20 <col:4, col:43> Text=" cpu_idle_apis CPU Idling APIs"
|   |-ParagraphComment 0x5598274b0f90 <line:4905:3>
|   | `-TextComment 0x5598274b0f60 <col:3> Text=" "
|   |-VerbatimLineComment 0x5598274b0fb0 <col:4, col:24> Text=" kernel_apis"
|   |-ParagraphComment 0x5598274b1070 <line:4906:3, col:5>
|   | |-TextComment 0x5598274b0ff0 <col:3> Text=" "
|   | |-TextComment 0x5598274b1010 <col:4> Text="@"
|   | `-TextComment 0x5598274b1030 <col:5> Text="{"
|   |-ParagraphComment 0x5598274b10c0 <line:4909:3>
|   | `-TextComment 0x5598274b1090 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b10e0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5598274b1140 <col:10, col:28>
|   |   `-TextComment 0x5598274b1110 <col:10, col:28> Text=" Make the CPU idle."
|   |-ParagraphComment 0x5598274b1190 <line:4911:3, col:63>
|   | `-TextComment 0x5598274b1160 <col:3, col:63> Text=" This function makes the CPU idle until an event wakes it up."
|   |-ParagraphComment 0x5598274b1250 <line:4913:3, line:4916:59>
|   | |-TextComment 0x5598274b11b0 <line:4913:3, col:77> Text=" In a regular system, the idle thread should be the only thread responsible"
|   | |-TextComment 0x5598274b11d0 <line:4914:3, col:71> Text=" for making the CPU idle and triggering any type of power management."
|   | |-TextComment 0x5598274b11f0 <line:4915:3, col:79> Text=" However, in some more constrained systems, such as a single-threaded system,"
|   | `-TextComment 0x5598274b1210 <line:4916:3, col:59> Text=" the only thread would be responsible for this if needed."
|   |-ParagraphComment 0x5598274b12a0 <line:4918:3>
|   | `-TextComment 0x5598274b1270 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b12c0 <col:4, line:4919:3> Name="return"
|   | `-ParagraphComment 0x5598274b1340 <line:4918:11, line:4919:3>
|   |   |-TextComment 0x5598274b12f0 <line:4918:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274b1310 <line:4919:3> Text=" "
|   |-VerbatimLineComment 0x5598274b1360 <col:4, col:23> Text=" K-CPU-IDLE-001"
|   `-ParagraphComment 0x5598274b13d0 <line:4920:1>
|     `-TextComment 0x5598274b13a0 <col:1> Text=" "
|-FunctionDecl 0x559827410110 <line:4937:1, line:4940:1> line:4937:20 k_cpu_atomic_idle 'void (unsigned int)' static inline
| |-ParmVarDecl 0x559827410088 <col:38, col:51> col:51 used key 'unsigned int'
| |-CompoundStmt 0x5598274102c8 <line:4938:1, line:4940:1>
| | `-CallExpr 0x559827410220 <line:4939:2, col:26> 'void'
| |   |-ImplicitCastExpr 0x559827410208 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5598274101b8 <col:2> 'void (unsigned int)' Function 0x5598273887f0 'arch_cpu_atomic_idle' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x559827410250 <col:23> 'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x5598274101e0 <col:23> 'unsigned int' lvalue ParmVar 0x559827410088 'key' 'unsigned int'
| `-FullComment 0x5598274b18e0 <line:4927:3, line:4936:1>
|   |-ParagraphComment 0x5598274b1500 <line:4927:3>
|   | `-TextComment 0x5598274b14d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b1520 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5598274b1580 <col:10, col:49>
|   |   `-TextComment 0x5598274b1550 <col:10, col:49> Text=" Make the CPU idle in an atomic fashion."
|   |-ParagraphComment 0x5598274b15f0 <line:4929:3, line:4930:54>
|   | |-TextComment 0x5598274b15a0 <line:4929:3, col:75> Text=" Similar to k_cpu_idle(), but called with interrupts locked if operations"
|   | `-TextComment 0x5598274b15c0 <line:4930:3, col:54> Text=" must be done atomically before making the CPU idle."
|   |-ParagraphComment 0x5598274b1640 <line:4932:3>
|   | `-TextComment 0x5598274b1610 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274b1660 <col:4, col:61> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x5598274b16f0 <col:14, col:61>
|   |   `-TextComment 0x5598274b16c0 <col:14, col:61> Text=" Interrupt locking key obtained from irq_lock()."
|   |-ParagraphComment 0x5598274b1740 <line:4934:3>
|   | `-TextComment 0x5598274b1710 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b1760 <col:4, line:4935:3> Name="return"
|   | `-ParagraphComment 0x5598274b17e0 <line:4934:11, line:4935:3>
|   |   |-TextComment 0x5598274b1790 <line:4934:11, col:14> Text=" N/A"
|   |   `-TextComment 0x5598274b17b0 <line:4935:3> Text=" "
|   |-VerbatimLineComment 0x5598274b1800 <col:4, col:23> Text=" K-CPU-IDLE-002"
|   `-ParagraphComment 0x5598274b1870 <line:4936:1>
|     `-TextComment 0x5598274b1840 <col:1> Text=" "
|-FunctionDecl 0x5598274103f0 <line:4949:1, col:51> col:13 z_sys_power_save_idle_exit 'void (s32_t)' extern
| |-ParmVarDecl 0x5598274102f0 <col:40, col:46> col:46 ticks 's32_t':'int'
| `-FullComment 0x5598274b19d0 <line:4947:3, col:12>
|   `-ParagraphComment 0x5598274b19a0 <col:3, col:12>
|     |-TextComment 0x5598274b1950 <col:3> Text=" "
|     `-InlineCommandComment 0x5598274b1970 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x559827410850 <line:5008:1, line:5010:30> line:5008:13 z_init_thread_base 'void (struct _thread_base *, int, u32_t, unsigned int)' extern
| |-ParmVarDecl 0x5598274105b0 <col:32, col:53> col:53 thread_base 'struct _thread_base *'
| |-ParmVarDecl 0x559827410628 <line:5009:10, col:14> col:14 priority 'int'
| |-ParmVarDecl 0x559827410698 <col:24, col:30> col:30 initial_state 'u32_t':'unsigned int'
| |-ParmVarDecl 0x559827410710 <line:5010:10, col:23> col:23 options 'unsigned int'
| `-FullComment 0x5598274b1ac0 <line:5006:3, col:12>
|   `-ParagraphComment 0x5598274b1a90 <col:3, col:12>
|     |-TextComment 0x5598274b1a40 <col:3> Text=" "
|     `-InlineCommandComment 0x5598274b1a60 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5598274109f8 <line:5027:1, col:39> col:13 z_is_thread_essential 'bool (void)' extern
| `-FullComment 0x5598274b1bb0 <line:5025:3, col:12>
|   `-ParagraphComment 0x5598274b1b80 <col:3, col:12>
|     |-TextComment 0x5598274b1b30 <col:3> Text=" "
|     `-InlineCommandComment 0x5598274b1b50 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x559827412f28 <line:5031:1, col:58> col:13 z_timer_expiration_handler 'void (struct _timeout *)' extern
| |-ParmVarDecl 0x559827412ea0 <col:40, col:57> col:57 t 'struct _timeout *'
| `-FullComment 0x5598274b1ca0 <line:5029:3, col:12>
|   `-ParagraphComment 0x5598274b1c70 <col:3, col:12>
|     |-TextComment 0x5598274b1c20 <col:3> Text=" "
|     `-InlineCommandComment 0x5598274b1c40 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x559827413268 <line:5177:1, line:5180:1> line:5177:21 Z_THREAD_STACK_BUFFER 'char *(k_thread_stack_t *)' static inline
| |-ParmVarDecl 0x559827413158 <col:43, col:61> col:61 used sym 'k_thread_stack_t *'
| |-CompoundStmt 0x559827413408 <line:5178:1, line:5180:1>
| | `-ReturnStmt 0x559827413390 <line:5179:2, col:17>
| |   `-CStyleCastExpr 0x559827413368 <col:9, col:17> 'char *' <BitCast>
| |     `-ImplicitCastExpr 0x559827413350 <col:17> 'k_thread_stack_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x559827413310 <col:17> 'k_thread_stack_t *' lvalue ParmVar 0x559827413158 'sym' 'k_thread_stack_t *'
| `-FullComment 0x5598274b20e0 <line:5168:3, line:5176:1>
|   |-ParagraphComment 0x5598274b1d40 <line:5168:3>
|   | `-TextComment 0x5598274b1d10 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b1d60 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x5598274b1dc0 <col:10, col:52>
|   |   `-TextComment 0x5598274b1d90 <col:10, col:52> Text=" Get a pointer to the physical stack buffer"
|   |-ParagraphComment 0x5598274b1e30 <line:5170:3, line:5171:76>
|   | |-TextComment 0x5598274b1de0 <line:5170:3, col:72> Text=" This macro is deprecated. If a stack buffer needs to be examined, the"
|   | `-TextComment 0x5598274b1e00 <line:5171:3, col:76> Text=" bounds should be obtained from the associated thread's stack_info struct."
|   |-ParagraphComment 0x5598274b1e80 <line:5173:3>
|   | `-TextComment 0x5598274b1e50 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274b1ea0 <col:4, line:5174:3> [in] implicitly Param="sym" ParamIndex=0
|   | `-ParagraphComment 0x5598274b1f50 <line:5173:14, line:5174:3>
|   |   |-TextComment 0x5598274b1f00 <line:5173:14, col:40> Text=" Declared stack symbol name"
|   |   `-TextComment 0x5598274b1f20 <line:5174:3> Text=" "
|   |-BlockCommandComment 0x5598274b1f70 <col:4, line:5175:3> Name="return"
|   | `-ParagraphComment 0x5598274b1ff0 <line:5174:11, line:5175:3>
|   |   |-TextComment 0x5598274b1fa0 <line:5174:11, col:38> Text=" The buffer itself, a char *"
|   |   `-TextComment 0x5598274b1fc0 <line:5175:3> Text=" "
|   |-VerbatimLineComment 0x5598274b2010 <col:4, col:21> Text=" K-TSTACK-001"
|   `-ParagraphComment 0x5598274b2080 <line:5176:1>
|     `-TextComment 0x5598274b2050 <col:1> Text=" "
|-RecordDecl 0x559827413420 prev 0x5598273c2628 <line:5207:1, line:5216:1> line:5207:8 struct k_mem_partition definition
| |-FieldDecl 0x5598274134e8 <line:5209:2, col:12> col:12 start 'uintptr_t':'unsigned long'
| | `-FullComment 0x5598274b21b0 <line:5208:5, col:39>
| |   `-ParagraphComment 0x5598274b2180 <col:5, col:39>
| |     `-TextComment 0x5598274b2150 <col:5, col:39> Text=" start address of memory partition "
| `-FieldDecl 0x559827413568 <line:5211:2, col:9> col:9 size 'size_t':'unsigned long'
|   `-FullComment 0x5598274b2280 <line:5210:5, col:30>
|     `-ParagraphComment 0x5598274b2250 <col:5, col:30>
|       `-TextComment 0x5598274b2220 <col:5, col:30> Text=" size of memory partition "
|-RecordDecl 0x5598274135d8 prev 0x5598273c25a0 <line:5222:1, line:5231:1> line:5222:8 struct k_mem_domain definition
| |-FullComment 0x5598274b2430 <line:5219:3, line:5221:1>
| | |-ParagraphComment 0x5598274b2320 <line:5219:3>
| | | `-TextComment 0x5598274b22f0 <col:3> Text=" "
| | |-BlockCommandComment 0x5598274b2340 <col:4, col:23> Name="brief"
| | | `-ParagraphComment 0x5598274b23a0 <col:10, col:23>
| | |   `-TextComment 0x5598274b2370 <col:10, col:23> Text=" Memory Domain"
| | `-ParagraphComment 0x5598274b23f0 <line:5221:1>
| |   `-TextComment 0x5598274b23c0 <col:1> Text=" "
| |-FieldDecl 0x559827413698 <line:5228:2, col:14> col:14 mem_domain_q 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x5598274b2500 <line:5227:5, col:14>
| |   `-ParagraphComment 0x5598274b24d0 <col:5, col:14>
| |     `-TextComment 0x5598274b24a0 <col:5, col:14> Text=" domain q "
| `-FieldDecl 0x559827413718 <line:5230:2, col:7> col:7 num_partitions 'u8_t':'unsigned char'
|   `-FullComment 0x5598274b25d0 <line:5229:5, col:40>
|     `-ParagraphComment 0x5598274b25a0 <col:5, col:40>
|       `-TextComment 0x5598274b2570 <col:5, col:40> Text=" number of partitions in the domain "
|-FunctionDecl 0x559827413bf0 <line:5248:1, line:5249:41> line:5248:13 k_mem_domain_init 'void (struct k_mem_domain *, u8_t, struct k_mem_partition **)' extern
| |-ParmVarDecl 0x559827413840 <col:31, col:52> col:52 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x5598274138b0 <col:60, col:65> col:65 num_parts 'u8_t':'unsigned char'
| |-ParmVarDecl 0x559827413ac0 <line:5249:10, col:40> col:34 parts 'struct k_mem_partition **':'struct k_mem_partition **'
| `-FullComment 0x5598274b2bc0 <line:5235:3, line:5247:1>
|   |-ParagraphComment 0x5598274b2670 <line:5235:3>
|   | `-TextComment 0x5598274b2640 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b2690 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5598274b26f0 <col:10, col:37>
|   |   `-TextComment 0x5598274b26c0 <col:10, col:37> Text=" Initialize a memory domain."
|   |-ParagraphComment 0x5598274b2740 <line:5237:3, col:68>
|   | `-TextComment 0x5598274b2710 <col:3, col:68> Text=" Initialize a memory domain with given name and memory partitions."
|   |-ParagraphComment 0x5598274b27b0 <line:5239:3, line:5240:25>
|   | |-TextComment 0x5598274b2760 <line:5239:3, col:71> Text=" See documentation for k_mem_domain_add_partition() for details about"
|   | `-TextComment 0x5598274b2780 <line:5240:3, col:25> Text=" partition constraints."
|   |-ParagraphComment 0x5598274b2800 <line:5242:3>
|   | `-TextComment 0x5598274b27d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274b2820 <col:4, line:5243:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5598274b28f0 <line:5242:17, line:5243:3>
|   |   |-TextComment 0x5598274b28a0 <line:5242:17, col:53> Text=" The memory domain to be initialized."
|   |   `-TextComment 0x5598274b28c0 <line:5243:3> Text=" "
|   |-ParamCommandComment 0x5598274b2910 <col:4, line:5244:3> [in] implicitly Param="num_parts" ParamIndex=1
|   | `-ParagraphComment 0x5598274b29c0 <line:5243:20, line:5244:3>
|   |   |-TextComment 0x5598274b2970 <line:5243:20, col:67> Text=" The number of array items of "parts" parameter."
|   |   `-TextComment 0x5598274b2990 <line:5244:3> Text=" "
|   |-ParamCommandComment 0x5598274b29e0 <col:4, line:5246:3> [in] implicitly Param="parts" ParamIndex=2
|   | `-ParagraphComment 0x5598274b2ac0 <line:5244:16, line:5246:3>
|   |   |-TextComment 0x5598274b2a40 <line:5244:16, col:74> Text=" An array of pointers to the memory partitions. Can be NULL"
|   |   |-TextComment 0x5598274b2a60 <line:5245:3, col:37> Text="              if num_parts is zero."
|   |   `-TextComment 0x5598274b2a80 <line:5246:3> Text=" "
|   |-VerbatimLineComment 0x5598274b2ae0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x5598274b2b50 <line:5247:1>
|     `-TextComment 0x5598274b2b20 <col:1> Text=" "
|-FunctionDecl 0x559827413e00 <line:5258:1, col:61> col:13 k_mem_domain_destroy 'void (struct k_mem_domain *)' extern
| |-ParmVarDecl 0x559827413d00 <col:34, col:55> col:55 domain 'struct k_mem_domain *'
| `-FullComment 0x5598274b2f40 <line:5251:3, line:5257:1>
|   |-ParagraphComment 0x5598274b2c60 <line:5251:3>
|   | `-TextComment 0x5598274b2c30 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b2c80 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5598274b2ce0 <col:10, col:34>
|   |   `-TextComment 0x5598274b2cb0 <col:10, col:34> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x5598274b2d30 <line:5253:3, col:27>
|   | `-TextComment 0x5598274b2d00 <col:3, col:27> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x5598274b2d80 <line:5255:3>
|   | `-TextComment 0x5598274b2d50 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274b2da0 <col:4, line:5256:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5598274b2e50 <line:5255:17, line:5256:3>
|   |   |-TextComment 0x5598274b2e00 <line:5255:17, col:51> Text=" The memory domain to be destroyed."
|   |   `-TextComment 0x5598274b2e20 <line:5256:3> Text=" "
|   |-VerbatimLineComment 0x5598274b2e70 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x5598274b2ee0 <line:5257:1>
|     `-TextComment 0x5598274b2eb0 <col:1> Text=" "
|-FunctionDecl 0x559827414730 <line:5284:1, line:5285:39> line:5284:13 k_mem_domain_add_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x559827414590 <col:40, col:61> col:61 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x559827414618 <line:5285:11, col:35> col:35 part 'struct k_mem_partition *'
| `-FullComment 0x5598274b35e0 <line:5261:3, line:5283:1>
|   |-ParagraphComment 0x5598274b2fe0 <line:5261:3>
|   | `-TextComment 0x5598274b2fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b3000 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5598274b3060 <col:10, col:54>
|   |   `-TextComment 0x5598274b3030 <col:10, col:54> Text=" Add a memory partition into a memory domain."
|   |-ParagraphComment 0x5598274b30d0 <line:5263:3, line:5264:29>
|   | |-TextComment 0x5598274b3080 <line:5263:3, col:74> Text=" Add a memory partition into a memory domain. Partitions must conform to"
|   | `-TextComment 0x5598274b30a0 <line:5264:3, col:29> Text=" the following constraints:"
|   |-ParagraphComment 0x5598274b3280 <line:5266:3, line:5275:28>
|   | |-TextComment 0x5598274b30f0 <line:5266:3, col:71> Text=" - Partition bounds must be within system RAM boundaries on MMU-based"
|   | |-TextComment 0x5598274b3110 <line:5267:3, col:13> Text="   systems."
|   | |-TextComment 0x5598274b3130 <line:5268:3, col:69> Text=" - Partitions in the same memory domain may not overlap each other."
|   | |-TextComment 0x5598274b3150 <line:5269:3, col:63> Text=" - Partitions must not be defined which expose private kernel"
|   | |-TextComment 0x5598274b3170 <line:5270:3, col:39> Text="   data structures or kernel objects."
|   | |-TextComment 0x5598274b3190 <line:5271:3, col:75> Text=" - The starting address alignment, and the partition size must conform to"
|   | |-TextComment 0x5598274b31b0 <line:5272:3, col:72> Text="   the constraints of the underlying memory management hardware, which"
|   | |-TextComment 0x5598274b31d0 <line:5273:3, col:29> Text="   varies per architecture."
|   | |-TextComment 0x5598274b31f0 <line:5274:3, col:75> Text=" - Memory domain partitions are only intended to control access to memory"
|   | `-TextComment 0x5598274b3210 <line:5275:3, col:28> Text="   from user mode threads."
|   |-ParagraphComment 0x5598274b32f0 <line:5277:3, line:5278:12>
|   | |-TextComment 0x5598274b32a0 <line:5277:3, col:70> Text=" Violating these constraints may lead to CPU exceptions or undefined"
|   | `-TextComment 0x5598274b32c0 <line:5278:3, col:12> Text=" behavior."
|   |-ParagraphComment 0x5598274b3340 <line:5280:3>
|   | `-TextComment 0x5598274b3310 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274b3360 <col:4, line:5281:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5598274b3410 <line:5280:17, line:5281:3>
|   |   |-TextComment 0x5598274b33c0 <line:5280:17, col:66> Text=" The memory domain to be added a memory partition."
|   |   `-TextComment 0x5598274b33e0 <line:5281:3> Text=" "
|   |-ParamCommandComment 0x5598274b3430 <col:4, line:5282:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x5598274b34e0 <line:5281:15, line:5282:3>
|   |   |-TextComment 0x5598274b3490 <line:5281:15, col:47> Text=" The memory partition to be added"
|   |   `-TextComment 0x5598274b34b0 <line:5282:3> Text=" "
|   |-VerbatimLineComment 0x5598274b3500 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x5598274b3570 <line:5283:1>
|     `-TextComment 0x5598274b3540 <col:1> Text=" "
|-FunctionDecl 0x559827414948 <line:5296:1, line:5297:35> line:5296:13 k_mem_domain_remove_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x559827414830 <col:43, col:64> col:64 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x5598274148b8 <line:5297:7, col:31> col:31 part 'struct k_mem_partition *'
| `-FullComment 0x5598274b3a30 <line:5288:3, line:5295:1>
|   |-ParagraphComment 0x5598274b3680 <line:5288:3>
|   | `-TextComment 0x5598274b3650 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b36a0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5598274b3700 <col:10, col:57>
|   |   `-TextComment 0x5598274b36d0 <col:10, col:57> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x5598274b3750 <line:5290:3, col:50>
|   | `-TextComment 0x5598274b3720 <col:3, col:50> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x5598274b37a0 <line:5292:3>
|   | `-TextComment 0x5598274b3770 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274b37c0 <col:4, line:5293:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5598274b3870 <line:5292:17, line:5293:3>
|   |   |-TextComment 0x5598274b3820 <line:5292:17, col:68> Text=" The memory domain to be removed a memory partition."
|   |   `-TextComment 0x5598274b3840 <line:5293:3> Text=" "
|   |-ParamCommandComment 0x5598274b3890 <col:4, line:5294:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x5598274b3940 <line:5293:15, line:5294:3>
|   |   |-TextComment 0x5598274b38f0 <line:5293:15, col:49> Text=" The memory partition to be removed"
|   |   `-TextComment 0x5598274b3910 <line:5294:3> Text=" "
|   |-VerbatimLineComment 0x5598274b3960 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x5598274b39d0 <line:5295:1>
|     `-TextComment 0x5598274b39a0 <col:1> Text=" "
|-FunctionDecl 0x559827414bd0 <line:5309:1, line:5310:23> line:5309:13 k_mem_domain_add_thread 'void (struct k_mem_domain *, k_tid_t)' extern
| |-ParmVarDecl 0x559827414a50 <col:37, col:58> col:58 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x559827414ac0 <line:5310:9, col:17> col:17 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5598274b3ec0 <line:5300:3, line:5308:1>
|   |-ParagraphComment 0x5598274b3ad0 <line:5300:3>
|   | `-TextComment 0x5598274b3aa0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b3af0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5598274b3b50 <col:10, col:44>
|   |   `-TextComment 0x5598274b3b20 <col:10, col:44> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x5598274b3ba0 <line:5302:3, col:37>
|   | `-TextComment 0x5598274b3b70 <col:3, col:37> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x5598274b3bf0 <line:5304:3>
|   | `-TextComment 0x5598274b3bc0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274b3c10 <col:4, line:5305:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5598274b3cc0 <line:5304:17, line:5305:3>
|   |   |-TextComment 0x5598274b3c70 <line:5304:17, col:77> Text=" The memory domain that the thread is going to be added into."
|   |   `-TextComment 0x5598274b3c90 <line:5305:3> Text=" "
|   |-ParamCommandComment 0x5598274b3ce0 <col:4, col:71> [in] implicitly Param="thread" ParamIndex=1
|   | `-ParagraphComment 0x5598274b3d70 <col:17, col:71>
|   |   `-TextComment 0x5598274b3d40 <col:17, col:71> Text=" ID of thread going to be added into the memory domain."
|   |-ParagraphComment 0x5598274b3dc0 <line:5307:3>
|   | `-TextComment 0x5598274b3d90 <col:3> Text=" "
|   |-VerbatimLineComment 0x5598274b3de0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x5598274b3e50 <line:5308:1>
|     `-TextComment 0x5598274b3e20 <col:1> Text=" "
|-FunctionDecl 0x559827414d40 <line:5320:1, col:54> col:13 k_mem_domain_remove_thread 'void (k_tid_t)' extern
| |-ParmVarDecl 0x559827414cb8 <col:40, col:48> col:48 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5598274b4240 <line:5313:3, line:5319:1>
|   |-ParagraphComment 0x5598274b3f60 <line:5313:3>
|   | `-TextComment 0x5598274b3f30 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b3f80 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5598274b3fe0 <col:10, col:49>
|   |   `-TextComment 0x5598274b3fb0 <col:10, col:49> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x5598274b4030 <line:5315:3, col:42>
|   | `-TextComment 0x5598274b4000 <col:3, col:42> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x5598274b4080 <line:5317:3>
|   | `-TextComment 0x5598274b4050 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274b40a0 <col:4, line:5318:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5598274b4150 <line:5317:17, line:5318:3>
|   |   |-TextComment 0x5598274b4100 <line:5317:17, col:73> Text=" ID of thread going to be removed from its memory domain."
|   |   `-TextComment 0x5598274b4120 <line:5318:3> Text=" "
|   |-VerbatimLineComment 0x5598274b4170 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x5598274b41e0 <line:5319:1>
|     `-TextComment 0x5598274b41b0 <col:1> Text=" "
|-FunctionDecl 0x559827414f38 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:5356:54> col:15 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x559827414e70 <col:31, col:48> col:48 thread 'struct k_thread *'
| `-FullComment 0x5598274b4890 <line:5337:3, line:5354:74>
|   |-ParagraphComment 0x5598274b42e0 <line:5337:3>
|   | `-TextComment 0x5598274b42b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b4300 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x5598274b4360 <col:10, col:69>
|   |   `-TextComment 0x5598274b4330 <col:10, col:69> Text=" Disable preservation of floating point context information."
|   |-ParagraphComment 0x5598274b43d0 <line:5339:3, line:5340:56>
|   | |-TextComment 0x5598274b4380 <line:5339:3, col:60> Text=" This routine informs the kernel that the specified thread"
|   | `-TextComment 0x5598274b43a0 <line:5340:3, col:56> Text=" will no longer be using the floating point registers."
|   |-ParagraphComment 0x5598274b4420 <line:5342:3>
|   | `-TextComment 0x5598274b43f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b4440 <col:4, line:5344:63> Name="warning"
|   | `-ParagraphComment 0x5598274b44c0 <line:5343:3, line:5344:63>
|   |   |-TextComment 0x5598274b4470 <line:5343:3, col:73> Text=" Some architectures apply restrictions on how the disabling of floating"
|   |   `-TextComment 0x5598274b4490 <line:5344:3, col:63> Text=" point preservation may be requested, see arch_float_disable."
|   |-ParagraphComment 0x5598274b4510 <line:5346:3>
|   | `-TextComment 0x5598274b44e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5598274b4530 <col:4, line:5348:52> Name="warning"
|   | `-ParagraphComment 0x5598274b45b0 <line:5347:3, line:5348:52>
|   |   |-TextComment 0x5598274b4560 <line:5347:3, col:73> Text=" This routine should only be used to disable floating point support for"
|   |   `-TextComment 0x5598274b4580 <line:5348:3, col:52> Text=" a thread that currently has such support enabled."
|   |-ParagraphComment 0x5598274b4600 <line:5350:3>
|   | `-TextComment 0x5598274b45d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5598274b4620 <col:4, col:30> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5598274b46b0 <col:17, col:30>
|   |   `-TextComment 0x5598274b4680 <col:17, col:30> Text=" ID of thread."
|   `-ParagraphComment 0x5598274b47f0 <line:5352:3, line:5354:74>
|     |-TextComment 0x5598274b46d0 <line:5352:3> Text=" "
|     |-InlineCommandComment 0x5598274b46f0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x5598274b4710 <col:11, col:30> Text=" 0       On success."
|     |-TextComment 0x5598274b4730 <line:5353:3> Text=" "
|     |-InlineCommandComment 0x5598274b4750 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x5598274b4770 <col:11, col:70> Text=" -ENOSYS If the floating point disabling is not implemented."
|     `-TextComment 0x5598274b4790 <line:5354:3, col:74> Text="         -EINVAL If the floating point disabling could not be performed."
|-FunctionDecl 0x559827419690 prev 0x5598273c5aa0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:24:1, col:81> col:13 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' extern
| |-ParmVarDecl 0x559827415380 <col:42, col:49> col:49 object 'void *'
| `-ParmVarDecl 0x559827415408 <col:57, col:75> col:75 thread 'struct k_thread *'
|-FunctionDecl 0x559827419870 prev 0x5598273c7bd0 <line:25:1, line:35:1> line:25:20 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x559827419758 <col:42, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x5598274197e0 <col:57, col:75> col:75 used thread 'struct k_thread *'
| `-CompoundStmt 0x559827419b78 <line:26:1, line:35:1>
|   |-DoStmt 0x559827419a00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5598274199c8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827419978 <col:2, col:39>
|   | `-IntegerLiteral 0x5598274199e0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559827419b10 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:34:2, col:45> 'void'
|     |-ImplicitCastExpr 0x559827419af8 <col:2> 'void (*)(void *, struct k_thread *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559827419a20 <col:2> 'void (void *, struct k_thread *)' Function 0x559827419690 'z_impl_k_object_access_grant' 'void (void *, struct k_thread *)'
|     |-ImplicitCastExpr 0x559827419b48 <col:31> 'void *' <LValueToRValue>
|     | `-DeclRefExpr 0x559827419a48 <col:31> 'void *' lvalue ParmVar 0x559827419758 'object' 'void *'
|     `-ImplicitCastExpr 0x559827419b60 <col:39> 'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x559827419a70 <col:39> 'struct k_thread *' lvalue ParmVar 0x5598274197e0 'thread' 'struct k_thread *'
|-FunctionDecl 0x559827419c38 prev 0x5598273c76c8 <line:38:1, col:50> col:13 used z_impl_k_object_release 'void (void *)' extern
| `-ParmVarDecl 0x559827419bb0 <col:37, col:44> col:44 object 'void *'
|-FunctionDecl 0x559827419d80 prev 0x5598273c7f58 <line:39:1, line:49:1> line:39:20 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x559827419cf8 <col:37, col:44> col:44 used object 'void *'
| `-CompoundStmt 0x559827419fd8 <line:40:1, line:49:1>
|   |-DoStmt 0x559827419f08 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827419ed0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827419e80 <col:2, col:39>
|   | `-IntegerLiteral 0x559827419ee8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559827419f90 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:48:2, col:32> 'void'
|     |-ImplicitCastExpr 0x559827419f78 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559827419f28 <col:2> 'void (void *)' Function 0x559827419c38 'z_impl_k_object_release' 'void (void *)'
|     `-ImplicitCastExpr 0x559827419fc0 <col:26> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x559827419f50 <col:26> 'void *' lvalue ParmVar 0x559827419cf8 'object' 'void *'
|-FunctionDecl 0x55982741a0a8 prev 0x5598273c8478 <line:52:1, col:57> col:15 used z_impl_k_object_alloc 'void *(enum k_objects)' extern
| `-ParmVarDecl 0x55982741a018 <col:37, col:52> col:52 otype 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x55982741a200 prev 0x5598273c8320 <line:53:1, line:62:1> line:53:22 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x55982741a170 <col:37, col:52> col:52 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x55982741a4d0 <line:54:1, line:62:1>
|   |-DoStmt 0x55982741a388 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741a350 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741a300 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741a368 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982741a4b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:61:2, col:36>
|     `-CallExpr 0x55982741a470 <col:9, col:36> 'void *'
|       |-ImplicitCastExpr 0x55982741a458 <col:9> 'void *(*)(enum k_objects)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982741a3a8 <col:9> 'void *(enum k_objects)' Function 0x55982741a0a8 'z_impl_k_object_alloc' 'void *(enum k_objects)'
|       `-ImplicitCastExpr 0x55982741a4a0 <col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|         `-DeclRefExpr 0x55982741a3d0 <col:31> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x55982741a170 'otype' 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x55982741aa30 <line:65:1, col:207> col:16 used z_impl_k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' extern
| |-ParmVarDecl 0x55982741a518 <col:39, col:57> col:57 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x55982741a588 <col:69, col:88> col:88 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55982741a5f8 <col:95, col:102> col:102 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55982741a6a0 <col:114, col:131> col:131 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x55982741a718 <col:138, col:145> col:145 p1 'void *'
| |-ParmVarDecl 0x55982741a790 <col:149, col:156> col:156 p2 'void *'
| |-ParmVarDecl 0x55982741a808 <col:160, col:167> col:167 p3 'void *'
| |-ParmVarDecl 0x55982741a880 <col:171, col:175> col:175 prio 'int'
| |-ParmVarDecl 0x55982741a8f0 <col:181, col:187> col:187 options 'u32_t':'unsigned int'
| `-ParmVarDecl 0x55982741a960 <col:196, col:202> col:202 delay 's32_t':'int'
|-FunctionDecl 0x55982741b028 prev 0x5598273ccd70 <line:66:1, line:82:1> line:66:23 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x55982741ab48 <col:39, col:57> col:57 used new_thread 'struct k_thread *'
| |-ParmVarDecl 0x55982741abb8 <col:69, col:88> col:88 used stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55982741ac28 <col:95, col:102> col:102 used stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55982741ac98 <col:114, col:131> col:131 used entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x55982741ad10 <col:138, col:145> col:145 used p1 'void *'
| |-ParmVarDecl 0x55982741ad88 <col:149, col:156> col:156 used p2 'void *'
| |-ParmVarDecl 0x55982741ae00 <col:160, col:167> col:167 used p3 'void *'
| |-ParmVarDecl 0x55982741ae78 <col:171, col:175> col:175 used prio 'int'
| |-ParmVarDecl 0x55982741aee8 <col:181, col:187> col:187 used options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55982741af58 <col:196, col:202> col:202 used delay 's32_t':'int'
| `-CompoundStmt 0x55982741b5c0 <line:67:1, line:82:1>
|   |-DoStmt 0x55982741b1f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741b1c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741b170 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741b1d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982741b5a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:81:2, col:102>
|     `-CallExpr 0x55982741b440 <col:9, col:102> 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x55982741b428 <col:9> 'k_tid_t (*)(struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982741b218 <col:9> 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' Function 0x55982741aa30 'z_impl_k_thread_create' 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)'
|       |-ImplicitCastExpr 0x55982741b4b8 <col:32> 'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982741b240 <col:32> 'struct k_thread *' lvalue ParmVar 0x55982741ab48 'new_thread' 'struct k_thread *'
|       |-ImplicitCastExpr 0x55982741b4d0 <col:44> 'k_thread_stack_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982741b268 <col:44> 'k_thread_stack_t *' lvalue ParmVar 0x55982741abb8 'stack' 'k_thread_stack_t *'
|       |-ImplicitCastExpr 0x55982741b4e8 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55982741b290 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x55982741ac28 'stack_size' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x55982741b500 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' <LValueToRValue>
|       | `-DeclRefExpr 0x55982741b2b8 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' lvalue ParmVar 0x55982741ac98 'entry' 'k_thread_entry_t':'void (*)(void *, void *, void *)'
|       |-ImplicitCastExpr 0x55982741b518 <col:70> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982741b2e0 <col:70> 'void *' lvalue ParmVar 0x55982741ad10 'p1' 'void *'
|       |-ImplicitCastExpr 0x55982741b530 <col:74> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982741b308 <col:74> 'void *' lvalue ParmVar 0x55982741ad88 'p2' 'void *'
|       |-ImplicitCastExpr 0x55982741b548 <col:78> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982741b330 <col:78> 'void *' lvalue ParmVar 0x55982741ae00 'p3' 'void *'
|       |-ImplicitCastExpr 0x55982741b560 <col:82> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x55982741b358 <col:82> 'int' lvalue ParmVar 0x55982741ae78 'prio' 'int'
|       |-ImplicitCastExpr 0x55982741b578 <col:88> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55982741b380 <col:88> 'u32_t':'unsigned int' lvalue ParmVar 0x55982741aee8 'options' 'u32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55982741b590 <col:97> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55982741b3a8 <col:97> 's32_t':'int' lvalue ParmVar 0x55982741af58 'delay' 's32_t':'int'
|-FunctionDecl 0x55982741b6b0 <line:85:1, col:37> col:14 used z_impl_k_sleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x55982741b5f0 <col:29, col:35> col:35 ms 's32_t':'int'
|-FunctionDecl 0x55982741b7f0 prev 0x5598273d0800 <line:86:1, line:95:1> line:86:21 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x55982741b768 <col:29, col:35> col:35 used ms 's32_t':'int'
| `-CompoundStmt 0x55982741bac0 <line:87:1, line:95:1>
|   |-DoStmt 0x55982741b978 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741b940 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741b8f0 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741b958 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982741baa8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:94:2, col:26>
|     `-CallExpr 0x55982741ba60 <col:9, col:26> 's32_t':'int'
|       |-ImplicitCastExpr 0x55982741ba48 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982741b998 <col:9> 's32_t (s32_t)' Function 0x55982741b6b0 'z_impl_k_sleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x55982741ba90 <col:24> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55982741b9c0 <col:24> 's32_t':'int' lvalue ParmVar 0x55982741b768 'ms' 's32_t':'int'
|-FunctionDecl 0x55982741bb78 <line:98:1, col:38> col:14 used z_impl_k_usleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x55982741baf0 <col:30, col:36> col:36 us 's32_t':'int'
|-FunctionDecl 0x55982741bcb8 prev 0x5598273d0970 <line:99:1, line:108:1> line:99:21 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x55982741bc30 <col:30, col:36> col:36 used us 's32_t':'int'
| `-CompoundStmt 0x55982741bf28 <line:100:1, line:108:1>
|   |-DoStmt 0x55982741be40 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741be08 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741bdb8 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741be20 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982741bf10 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:107:2, col:27>
|     `-CallExpr 0x55982741bec8 <col:9, col:27> 's32_t':'int'
|       |-ImplicitCastExpr 0x55982741beb0 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982741be60 <col:9> 's32_t (s32_t)' Function 0x55982741bb78 'z_impl_k_usleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x55982741bef8 <col:25> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55982741be88 <col:25> 's32_t':'int' lvalue ParmVar 0x55982741bc30 'us' 's32_t':'int'
|-FunctionDecl 0x55982741bfe0 <line:111:1, col:50> col:13 used z_impl_k_busy_wait 'void (u32_t)' extern
| `-ParmVarDecl 0x55982741bf58 <col:32, col:38> col:38 usec_to_wait 'u32_t':'unsigned int'
|-FunctionDecl 0x55982741c120 prev 0x5598273d0b20 <line:112:1, line:122:1> line:112:20 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x55982741c098 <col:32, col:38> col:38 used usec_to_wait 'u32_t':'unsigned int'
| `-CompoundStmt 0x55982741c3a8 <line:113:1, line:122:1>
|   |-DoStmt 0x55982741c2a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741c270 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741c220 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741c288 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55982741c360 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:121:2, col:33> 'void'
|     |-ImplicitCastExpr 0x55982741c348 <col:2> 'void (*)(u32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982741c2c8 <col:2> 'void (u32_t)' Function 0x55982741bfe0 'z_impl_k_busy_wait' 'void (u32_t)'
|     `-ImplicitCastExpr 0x55982741c390 <col:21> 'u32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55982741c2f0 <col:21> 'u32_t':'unsigned int' lvalue ParmVar 0x55982741c098 'usec_to_wait' 'u32_t':'unsigned int'
|-FunctionDecl 0x55982741c3e8 <line:125:1, col:28> col:13 used z_impl_k_yield 'void ()' extern
|-FunctionDecl 0x55982741c4a8 prev 0x5598273d0c88 <line:126:1, line:136:1> line:126:20 k_yield 'void (void)' static inline
| `-CompoundStmt 0x55982741c6e8 <line:127:1, line:136:1>
|   |-DoStmt 0x55982741c628 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741c5f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741c5a0 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741c608 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55982741c6c0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:135:2, col:17> 'void'
|     `-ImplicitCastExpr 0x55982741c698 <col:2> 'void (*)()' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x55982741c648 <col:2> 'void ()' Function 0x55982741c3e8 'z_impl_k_yield' 'void ()'
|-FunctionDecl 0x55982741c7a0 <line:139:1, col:43> col:13 used z_impl_k_wakeup 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55982741c718 <col:29, col:37> col:37 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55982741c8e0 prev 0x5598273d0e70 <line:140:1, line:150:1> line:140:20 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55982741c858 <col:29, col:37> col:37 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55982741cb98 <line:141:1, line:150:1>
|   |-DoStmt 0x55982741ca68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741ca30 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741c9e0 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741ca48 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55982741cb50 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:149:2, col:24> 'void'
|     |-ImplicitCastExpr 0x55982741cb38 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982741ca88 <col:2> 'void (k_tid_t)' Function 0x55982741c7a0 'z_impl_k_wakeup' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55982741cb80 <col:18> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55982741cab0 <col:18> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55982741c858 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55982741cc38 <line:153:1, col:37> col:16 used z_impl_k_current_get 'k_tid_t ()' extern
|-FunctionDecl 0x55982741ccf8 prev 0x5598273d1060 <line:154:1, line:163:1> line:154:23 k_current_get 'k_tid_t (void)' static inline
| `-CompoundStmt 0x55982741cf70 <line:155:1, line:163:1>
|   |-DoStmt 0x55982741ce78 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741ce40 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741cdf0 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741ce58 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982741cf58 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:162:2, col:30>
|     `-CallExpr 0x55982741cf30 <col:9, col:30> 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x55982741cf18 <col:9> 'k_tid_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55982741ce98 <col:9> 'k_tid_t ()' Function 0x55982741cc38 'z_impl_k_current_get' 'k_tid_t ()'
|-FunctionDecl 0x55982741d028 <line:166:1, col:49> col:13 used z_impl_k_thread_abort 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55982741cfa0 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55982741d168 prev 0x5598273d11c0 <line:167:1, line:177:1> line:167:20 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55982741d0e0 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55982741d3c0 <line:168:1, line:177:1>
|   |-DoStmt 0x55982741d2f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741d2b8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741d268 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741d2d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55982741d378 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:176:2, col:30> 'void'
|     |-ImplicitCastExpr 0x55982741d360 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982741d310 <col:2> 'void (k_tid_t)' Function 0x55982741d028 'z_impl_k_thread_abort' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55982741d3a8 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55982741d338 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55982741d0e0 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55982741d478 <line:180:1, col:49> col:13 used z_impl_k_thread_start 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55982741d3f0 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55982741d5b8 prev 0x5598273d1330 <line:181:1, line:191:1> line:181:20 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55982741d530 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55982741d828 <line:182:1, line:191:1>
|   |-DoStmt 0x55982741d758 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741d720 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741d6d0 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741d738 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55982741d7e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:190:2, col:30> 'void'
|     |-ImplicitCastExpr 0x55982741d7c8 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982741d778 <col:2> 'void (k_tid_t)' Function 0x55982741d478 'z_impl_k_thread_start' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55982741d810 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55982741d7a0 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55982741d530 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55982741d8e8 <line:194:1, col:55> col:12 used z_impl_k_thread_priority_get 'int (k_tid_t)' extern
| `-ParmVarDecl 0x55982741d858 <col:41, col:49> col:49 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55982741da30 prev 0x5598273d1b58 <line:195:1, line:204:1> line:195:19 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x55982741d9a0 <col:41, col:49> col:49 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55982741dd00 <line:196:1, line:204:1>
|   |-DoStmt 0x55982741dbb8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741db80 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741db30 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741db98 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982741dce8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:203:2, col:44>
|     `-CallExpr 0x55982741dca0 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x55982741dc88 <col:9> 'int (*)(k_tid_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982741dbd8 <col:9> 'int (k_tid_t)' Function 0x55982741d8e8 'z_impl_k_thread_priority_get' 'int (k_tid_t)'
|       `-ImplicitCastExpr 0x55982741dcd0 <col:38> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x55982741dc00 <col:38> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55982741d9a0 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55982741de38 <line:207:1, col:66> col:13 used z_impl_k_thread_priority_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x55982741dd30 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x55982741dda8 <col:58, col:62> col:62 prio 'int'
|-FunctionDecl 0x55982741e000 prev 0x5598273d1dc0 <line:208:1, line:218:1> line:208:20 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x55982741def8 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55982741df70 <col:58, col:62> col:62 used prio 'int'
| `-CompoundStmt 0x55982741e308 <line:209:1, line:218:1>
|   |-DoStmt 0x55982741e190 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741e158 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741e108 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741e170 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55982741e2a0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:217:2, col:43> 'void'
|     |-ImplicitCastExpr 0x55982741e288 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982741e1b0 <col:2> 'void (k_tid_t, int)' Function 0x55982741de38 'z_impl_k_thread_priority_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x55982741e2d8 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x55982741e1d8 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55982741def8 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x55982741e2f0 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55982741e200 <col:39> 'int' lvalue ParmVar 0x55982741df70 'prio' 'int'
|-FunctionDecl 0x55982741e440 <line:221:1, col:70> col:13 used z_impl_k_thread_deadline_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x55982741e338 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x55982741e3b0 <col:58, col:62> col:62 deadline 'int'
|-FunctionDecl 0x55982741e608 <line:222:1, line:232:1> line:222:20 k_thread_deadline_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x55982741e500 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55982741e578 <col:58, col:62> col:62 used deadline 'int'
| `-CompoundStmt 0x55982741e8d8 <line:223:1, line:232:1>
|   |-DoStmt 0x55982741e7c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741e788 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741e738 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741e7a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55982741e870 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:231:2, col:47> 'void'
|     |-ImplicitCastExpr 0x55982741e858 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982741e7e0 <col:2> 'void (k_tid_t, int)' Function 0x55982741e440 'z_impl_k_thread_deadline_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x55982741e8a8 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x55982741e808 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55982741e500 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x55982741e8c0 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55982741e830 <col:39> 'int' lvalue ParmVar 0x55982741e578 'deadline' 'int'
|-FunctionDecl 0x55982741e990 <line:235:1, col:51> col:13 used z_impl_k_thread_suspend 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55982741e908 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55982741ead0 prev 0x5598273d2640 <line:236:1, line:246:1> line:236:20 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55982741ea48 <col:37, col:45> col:45 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55982741ed28 <line:237:1, line:246:1>
|   |-DoStmt 0x55982741ec58 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741ec20 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741ebd0 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741ec38 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55982741ece0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:245:2, col:32> 'void'
|     |-ImplicitCastExpr 0x55982741ecc8 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982741ec78 <col:2> 'void (k_tid_t)' Function 0x55982741e990 'z_impl_k_thread_suspend' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55982741ed10 <col:26> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55982741eca0 <col:26> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55982741ea48 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55982741ede0 <line:249:1, col:50> col:13 used z_impl_k_thread_resume 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55982741ed58 <col:36, col:44> col:44 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55982741ef20 prev 0x5598273d27b0 <line:250:1, line:260:1> line:250:20 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55982741ee98 <col:36, col:44> col:44 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55982741f178 <line:251:1, line:260:1>
|   |-DoStmt 0x55982741f0a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741f070 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741f020 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741f088 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55982741f130 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:259:2, col:31> 'void'
|     |-ImplicitCastExpr 0x55982741f118 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982741f0c8 <col:2> 'void (k_tid_t)' Function 0x55982741ede0 'z_impl_k_thread_resume' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55982741f160 <col:25> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55982741f0f0 <col:25> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55982741ee98 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55982741f1f0 <line:263:1, col:39> col:12 used z_impl_k_is_preempt_thread 'int ()' extern
|-FunctionDecl 0x55982741f2b8 prev 0x5598273d2d50 <line:264:1, line:273:1> line:264:19 k_is_preempt_thread 'int (void)' static inline
| `-CompoundStmt 0x55982741f500 <line:265:1, line:273:1>
|   |-DoStmt 0x55982741f438 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741f400 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741f3b0 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741f418 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982741f4e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:272:2, col:36>
|     `-CallExpr 0x55982741f4c0 <col:9, col:36> 'int'
|       `-ImplicitCastExpr 0x55982741f4a8 <col:9> 'int (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55982741f458 <col:9> 'int ()' Function 0x55982741f1f0 'z_impl_k_is_preempt_thread' 'int ()'
|-FunctionDecl 0x55982741f5c0 <line:276:1, col:57> col:13 used z_impl_k_thread_custom_data_set 'void (void *)' extern
| `-ParmVarDecl 0x55982741f538 <col:45, col:52> col:52 value 'void *'
|-FunctionDecl 0x55982741f718 prev 0x5598273d3478 <line:277:1, line:287:1> line:277:20 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x55982741f680 <col:45, col:52> col:52 used value 'void *'
| `-CompoundStmt 0x55982741f970 <line:278:1, line:287:1>
|   |-DoStmt 0x55982741f8a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741f868 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741f818 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741f880 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55982741f928 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:286:2, col:39> 'void'
|     |-ImplicitCastExpr 0x55982741f910 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982741f8c0 <col:2> 'void (void *)' Function 0x55982741f5c0 'z_impl_k_thread_custom_data_set' 'void (void *)'
|     `-ImplicitCastExpr 0x55982741f958 <col:34> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x55982741f8e8 <col:34> 'void *' lvalue ParmVar 0x55982741f680 'value' 'void *'
|-FunctionDecl 0x55982741f9e0 <line:290:1, col:47> col:15 used z_impl_k_thread_custom_data_get 'void *()' extern
|-FunctionDecl 0x55982741faa8 prev 0x5598273d3650 <line:291:1, line:300:1> line:291:22 k_thread_custom_data_get 'void *(void)' static inline
| `-CompoundStmt 0x55982741fcf0 <line:292:1, line:300:1>
|   |-DoStmt 0x55982741fc28 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982741fbf0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982741fba0 <col:2, col:39>
|   | `-IntegerLiteral 0x55982741fc08 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982741fcd8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:299:2, col:41>
|     `-CallExpr 0x55982741fcb0 <col:9, col:41> 'void *'
|       `-ImplicitCastExpr 0x55982741fc98 <col:9> 'void *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55982741fc48 <col:9> 'void *()' Function 0x55982741f9e0 'z_impl_k_thread_custom_data_get' 'void *()'
|-FunctionDecl 0x55982741fe30 <line:303:1, col:74> col:12 used z_impl_k_thread_name_set 'int (k_tid_t, const char *)' extern
| |-ParmVarDecl 0x55982741fd20 <col:37, col:45> col:45 thread_id 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x55982741fd98 <col:56, col:69> col:69 value 'const char *'
|-FunctionDecl 0x559827420000 prev 0x5598273d38b8 <line:304:1, line:313:1> line:304:19 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x55982741fef0 <col:37, col:45> col:45 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55982741ff68 <col:56, col:69> col:69 used value 'const char *'
| `-CompoundStmt 0x559827420320 <line:305:1, line:313:1>
|   |-DoStmt 0x559827420190 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827420158 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827420108 <col:2, col:39>
|   | `-IntegerLiteral 0x559827420170 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827420308 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:312:2, col:50>
|     `-CallExpr 0x5598274202a0 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x559827420288 <col:9> 'int (*)(k_tid_t, const char *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5598274201b0 <col:9> 'int (k_tid_t, const char *)' Function 0x55982741fe30 'z_impl_k_thread_name_set' 'int (k_tid_t, const char *)'
|       |-ImplicitCastExpr 0x5598274202d8 <col:34> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x5598274201d8 <col:34> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55982741fef0 'thread_id' 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x5598274202f0 <col:45> 'const char *' <LValueToRValue>
|         `-DeclRefExpr 0x559827420200 <col:45> 'const char *' lvalue ParmVar 0x55982741ff68 'value' 'const char *'
|-FunctionDecl 0x5598274204d8 <line:316:1, col:80> col:12 used z_impl_k_thread_name_copy 'int (k_tid_t, char *, size_t)' extern
| |-ParmVarDecl 0x559827420350 <col:38, col:46> col:46 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5598274203c8 <col:57, col:64> col:64 buf 'char *'
| `-ParmVarDecl 0x559827420438 <col:69, col:76> col:76 size 'size_t':'unsigned long'
|-FunctionDecl 0x559827420740 prev 0x5598273d3db8 <line:317:1, line:326:1> line:317:19 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x5598274205a0 <col:38, col:46> col:46 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x559827420618 <col:57, col:64> col:64 used buf 'char *'
| |-ParmVarDecl 0x559827420688 <col:69, col:76> col:76 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x559827420ab0 <line:318:1, line:326:1>
|   |-DoStmt 0x5598274208d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5598274208a0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827420850 <col:2, col:39>
|   | `-IntegerLiteral 0x5598274208b8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827420a98 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:325:2, col:55>
|     `-CallExpr 0x559827420a10 <col:9, col:55> 'int'
|       |-ImplicitCastExpr 0x5598274209f8 <col:9> 'int (*)(k_tid_t, char *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5598274208f8 <col:9> 'int (k_tid_t, char *, size_t)' Function 0x5598274204d8 'z_impl_k_thread_name_copy' 'int (k_tid_t, char *, size_t)'
|       |-ImplicitCastExpr 0x559827420a50 <col:35> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x559827420920 <col:35> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5598274205a0 'thread_id' 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x559827420a68 <col:46> 'char *' <LValueToRValue>
|       | `-DeclRefExpr 0x559827420948 <col:46> 'char *' lvalue ParmVar 0x559827420618 'buf' 'char *'
|       `-ImplicitCastExpr 0x559827420a80 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x559827420970 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x559827420688 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x559827420c70 <line:329:1, col:86> col:13 used z_impl_k_timer_start 'void (struct k_timer *, s32_t, s32_t)' extern
| |-ParmVarDecl 0x559827420af8 <col:34, col:51> col:51 timer 'struct k_timer *'
| |-ParmVarDecl 0x559827420b68 <col:58, col:64> col:64 duration 's32_t':'int'
| `-ParmVarDecl 0x559827420bd8 <col:74, col:80> col:80 period 's32_t':'int'
|-FunctionDecl 0x559827420ec8 prev 0x5598273d7230 <line:330:1, line:340:1> line:330:20 k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x559827420d50 <col:34, col:51> col:51 used timer 'struct k_timer *'
| |-ParmVarDecl 0x559827420dc0 <col:58, col:64> col:64 used duration 's32_t':'int'
| |-ParmVarDecl 0x559827420e30 <col:74, col:80> col:80 used period 's32_t':'int'
| `-CompoundStmt 0x559827421218 <line:331:1, line:340:1>
|   |-DoStmt 0x559827421060 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827421028 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827420fd8 <col:2, col:39>
|   | `-IntegerLiteral 0x559827421040 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559827421190 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:339:2, col:46> 'void'
|     |-ImplicitCastExpr 0x559827421178 <col:2> 'void (*)(struct k_timer *, s32_t, s32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559827421080 <col:2> 'void (struct k_timer *, s32_t, s32_t)' Function 0x559827420c70 'z_impl_k_timer_start' 'void (struct k_timer *, s32_t, s32_t)'
|     |-ImplicitCastExpr 0x5598274211d0 <col:23> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x5598274210a8 <col:23> 'struct k_timer *' lvalue ParmVar 0x559827420d50 'timer' 'struct k_timer *'
|     |-ImplicitCastExpr 0x5598274211e8 <col:30> 's32_t':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5598274210d0 <col:30> 's32_t':'int' lvalue ParmVar 0x559827420dc0 'duration' 's32_t':'int'
|     `-ImplicitCastExpr 0x559827421200 <col:40> 's32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5598274210f8 <col:40> 's32_t':'int' lvalue ParmVar 0x559827420e30 'period' 's32_t':'int'
|-FunctionDecl 0x5598274212e8 <line:343:1, col:55> col:13 used z_impl_k_timer_stop 'void (struct k_timer *)' extern
| `-ParmVarDecl 0x559827421260 <col:33, col:50> col:50 timer 'struct k_timer *'
|-FunctionDecl 0x559827421440 prev 0x5598273d73c8 <line:344:1, line:354:1> line:344:20 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x5598274213b8 <col:33, col:50> col:50 used timer 'struct k_timer *'
| `-CompoundStmt 0x5598274216c8 <line:345:1, line:354:1>
|   |-DoStmt 0x5598274215c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827421590 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827421540 <col:2, col:39>
|   | `-IntegerLiteral 0x5598274215a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559827421680 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:353:2, col:27> 'void'
|     |-ImplicitCastExpr 0x559827421668 <col:2> 'void (*)(struct k_timer *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5598274215e8 <col:2> 'void (struct k_timer *)' Function 0x5598274212e8 'z_impl_k_timer_stop' 'void (struct k_timer *)'
|     `-ImplicitCastExpr 0x5598274216b0 <col:22> 'struct k_timer *' <LValueToRValue>
|       `-DeclRefExpr 0x559827421610 <col:22> 'struct k_timer *' lvalue ParmVar 0x5598274213b8 'timer' 'struct k_timer *'
|-FunctionDecl 0x559827421fd0 <line:357:1, col:62> col:14 used z_impl_k_timer_status_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x559827421f48 <col:40, col:57> col:57 timer 'struct k_timer *'
|-FunctionDecl 0x559827422128 prev 0x5598273d75c0 <line:358:1, line:367:1> line:358:21 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5598274220a0 <col:40, col:57> col:57 used timer 'struct k_timer *'
| `-CompoundStmt 0x5598274223f0 <line:359:1, line:367:1>
|   |-DoStmt 0x5598274222b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827422278 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827422228 <col:2, col:39>
|   | `-IntegerLiteral 0x559827422290 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5598274223d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:366:2, col:40>
|     `-CallExpr 0x559827422390 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x559827422378 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5598274222d0 <col:9> 'u32_t (struct k_timer *)' Function 0x559827421fd0 'z_impl_k_timer_status_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x5598274223c0 <col:35> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x5598274222f8 <col:35> 'struct k_timer *' lvalue ParmVar 0x5598274220a0 'timer' 'struct k_timer *'
|-FunctionDecl 0x5598274224c0 <line:370:1, col:63> col:14 used z_impl_k_timer_status_sync 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x559827422438 <col:41, col:58> col:58 timer 'struct k_timer *'
|-FunctionDecl 0x559827422618 prev 0x5598273d7fb8 <line:371:1, line:380:1> line:371:21 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x559827422590 <col:41, col:58> col:58 used timer 'struct k_timer *'
| `-CompoundStmt 0x559827422888 <line:372:1, line:380:1>
|   |-DoStmt 0x5598274227a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827422768 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827422718 <col:2, col:39>
|   | `-IntegerLiteral 0x559827422780 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827422870 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:379:2, col:41>
|     `-CallExpr 0x559827422828 <col:9, col:41> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x559827422810 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5598274227c0 <col:9> 'u32_t (struct k_timer *)' Function 0x5598274224c0 'z_impl_k_timer_status_sync' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x559827422858 <col:36> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x5598274227e8 <col:36> 'struct k_timer *' lvalue ParmVar 0x559827422590 'timer' 'struct k_timer *'
|-FunctionDecl 0x559827422958 prev 0x5598273d8470 <line:383:1, col:65> col:14 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x5598274228d0 <col:43, col:60> col:60 timer 'struct k_timer *'
|-FunctionDecl 0x559827422ab0 prev 0x5598273d8318 <line:384:1, line:393:1> line:384:21 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x559827422a28 <col:43, col:60> col:60 used timer 'struct k_timer *'
| `-CompoundStmt 0x559827422d20 <line:385:1, line:393:1>
|   |-DoStmt 0x559827422c38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827422c00 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827422bb0 <col:2, col:39>
|   | `-IntegerLiteral 0x559827422c18 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827422d08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:392:2, col:43>
|     `-CallExpr 0x559827422cc0 <col:9, col:43> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x559827422ca8 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827422c58 <col:9> 'u32_t (struct k_timer *)' Function 0x559827422958 'z_impl_k_timer_remaining_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x559827422cf0 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x559827422c80 <col:38> 'struct k_timer *' lvalue ParmVar 0x559827422a28 'timer' 'struct k_timer *'
|-FunctionDecl 0x559827422e70 prev 0x5598273d8dd8 <line:396:1, col:82> col:13 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' extern
| |-ParmVarDecl 0x559827422d68 <col:42, col:59> col:59 timer 'struct k_timer *'
| `-ParmVarDecl 0x559827422de0 <col:66, col:73> col:73 user_data 'void *'
|-FunctionDecl 0x559827423060 prev 0x5598273d8bd0 <line:397:1, line:407:1> line:397:20 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x559827422f58 <col:42, col:59> col:59 used timer 'struct k_timer *'
| |-ParmVarDecl 0x559827422fd0 <col:66, col:73> col:73 used user_data 'void *'
| `-CompoundStmt 0x559827423368 <line:398:1, line:407:1>
|   |-DoStmt 0x5598274231f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5598274231b8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827423168 <col:2, col:39>
|   | `-IntegerLiteral 0x5598274231d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559827423300 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:406:2, col:47> 'void'
|     |-ImplicitCastExpr 0x5598274232e8 <col:2> 'void (*)(struct k_timer *, void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559827423210 <col:2> 'void (struct k_timer *, void *)' Function 0x559827422e70 'z_impl_k_timer_user_data_set' 'void (struct k_timer *, void *)'
|     |-ImplicitCastExpr 0x559827423338 <col:31> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x559827423238 <col:31> 'struct k_timer *' lvalue ParmVar 0x559827422f58 'timer' 'struct k_timer *'
|     `-ImplicitCastExpr 0x559827423350 <col:38> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x559827423260 <col:38> 'void *' lvalue ParmVar 0x559827422fd0 'user_data' 'void *'
|-FunctionDecl 0x559827423440 prev 0x5598273d9678 <line:410:1, col:66> col:15 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' extern
| `-ParmVarDecl 0x5598274233b0 <col:44, col:61> col:61 timer 'struct k_timer *'
|-FunctionDecl 0x5598274235a0 prev 0x5598273d9518 <line:411:1, line:420:1> line:411:22 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x559827423510 <col:44, col:61> col:61 used timer 'struct k_timer *'
| `-CompoundStmt 0x559827423870 <line:412:1, line:420:1>
|   |-DoStmt 0x559827423728 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5598274236f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5598274236a0 <col:2, col:39>
|   | `-IntegerLiteral 0x559827423708 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827423858 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:419:2, col:43>
|     `-CallExpr 0x559827423810 <col:9, col:43> 'void *'
|       |-ImplicitCastExpr 0x5598274237f8 <col:9> 'void *(*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827423748 <col:9> 'void *(struct k_timer *)' Function 0x559827423440 'z_impl_k_timer_user_data_get' 'void *(struct k_timer *)'
|       `-ImplicitCastExpr 0x559827423840 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x559827423770 <col:38> 'struct k_timer *' lvalue ParmVar 0x559827423510 'timer' 'struct k_timer *'
|-FunctionDecl 0x559827423908 <line:423:1, col:34> col:14 used z_impl_k_uptime_get 's64_t ()' extern
|-FunctionDecl 0x5598274239c8 prev 0x5598273d9900 <line:424:1, line:435:1> line:424:21 used k_uptime_get 's64_t (void)' static inline
| `-CompoundStmt 0x559827423c40 <line:425:1, line:435:1>
|   |-DoStmt 0x559827423b48 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827423b10 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827423ac0 <col:2, col:39>
|   | `-IntegerLiteral 0x559827423b28 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827423c28 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:434:2, col:29>
|     `-CallExpr 0x559827423c00 <col:9, col:29> 's64_t':'long long'
|       `-ImplicitCastExpr 0x559827423be8 <col:9> 's64_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x559827423b68 <col:9> 's64_t ()' Function 0x559827423908 'z_impl_k_uptime_get' 's64_t ()'
|-FunctionDecl 0x559827423d10 <line:438:1, col:55> col:13 used z_impl_k_queue_init 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x559827423c88 <col:33, col:50> col:50 queue 'struct k_queue *'
|-FunctionDecl 0x559827423e68 prev 0x5598273dbdf0 <line:439:1, line:449:1> line:439:20 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x559827423de0 <col:33, col:50> col:50 used queue 'struct k_queue *'
| `-CompoundStmt 0x559827424148 <line:440:1, line:449:1>
|   |-DoStmt 0x559827424020 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827423fe8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827423f98 <col:2, col:39>
|   | `-IntegerLiteral 0x559827424000 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559827424100 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:448:2, col:27> 'void'
|     |-ImplicitCastExpr 0x5598274240e8 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559827424040 <col:2> 'void (struct k_queue *)' Function 0x559827423d10 'z_impl_k_queue_init' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x559827424130 <col:22> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x559827424068 <col:22> 'struct k_queue *' lvalue ParmVar 0x559827423de0 'queue' 'struct k_queue *'
|-FunctionDecl 0x559827424218 <line:452:1, col:62> col:13 used z_impl_k_queue_cancel_wait 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x559827424190 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x559827424370 prev 0x5598273dbf78 <line:453:1, line:463:1> line:453:20 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x5598274242e8 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x5598274245c8 <line:454:1, line:463:1>
|   |-DoStmt 0x5598274244f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5598274244c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827424470 <col:2, col:39>
|   | `-IntegerLiteral 0x5598274244d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559827424580 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:462:2, col:34> 'void'
|     |-ImplicitCastExpr 0x559827424568 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559827424518 <col:2> 'void (struct k_queue *)' Function 0x559827424218 'z_impl_k_queue_cancel_wait' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x5598274245b0 <col:29> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x559827424540 <col:29> 'struct k_queue *' lvalue ParmVar 0x5598274242e8 'queue' 'struct k_queue *'
|-FunctionDecl 0x559827424718 <line:466:1, col:77> col:14 used z_impl_k_queue_alloc_append 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x559827424610 <col:42, col:59> col:59 queue 'struct k_queue *'
| `-ParmVarDecl 0x559827424688 <col:66, col:73> col:73 data 'void *'
|-FunctionDecl 0x5598274248f8 prev 0x5598273dc490 <line:467:1, line:476:1> line:467:21 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5598274247f0 <col:42, col:59> col:59 used queue 'struct k_queue *'
| |-ParmVarDecl 0x559827424868 <col:66, col:73> col:73 used data 'void *'
| `-CompoundStmt 0x559827424bb8 <line:468:1, line:476:1>
|   |-DoStmt 0x559827424a88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827424a50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827424a00 <col:2, col:39>
|   | `-IntegerLiteral 0x559827424a68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827424ba0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:475:2, col:48>
|     `-CallExpr 0x559827424b38 <col:9, col:48> 's32_t':'int'
|       |-ImplicitCastExpr 0x559827424b20 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827424aa8 <col:9> 's32_t (struct k_queue *, void *)' Function 0x559827424718 'z_impl_k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x559827424b70 <col:37> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x559827424ad0 <col:37> 'struct k_queue *' lvalue ParmVar 0x5598274247f0 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x559827424b88 <col:44> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x559827424af8 <col:44> 'void *' lvalue ParmVar 0x559827424868 'data' 'void *'
|-FunctionDecl 0x559827424d08 <line:479:1, col:78> col:14 used z_impl_k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x559827424c00 <col:43, col:60> col:60 queue 'struct k_queue *'
| `-ParmVarDecl 0x559827424c78 <col:67, col:74> col:74 data 'void *'
|-FunctionDecl 0x559827424f50 prev 0x5598273dc8a8 <line:480:1, line:489:1> line:480:21 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x559827424de0 <col:43, col:60> col:60 used queue 'struct k_queue *'
| |-ParmVarDecl 0x559827424e58 <col:67, col:74> col:74 used data 'void *'
| `-CompoundStmt 0x559827425210 <line:481:1, line:489:1>
|   |-DoStmt 0x5598274250e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5598274250a8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827425058 <col:2, col:39>
|   | `-IntegerLiteral 0x5598274250c0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5598274251f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:488:2, col:49>
|     `-CallExpr 0x559827425190 <col:9, col:49> 's32_t':'int'
|       |-ImplicitCastExpr 0x559827425178 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827425100 <col:9> 's32_t (struct k_queue *, void *)' Function 0x559827424d08 'z_impl_k_queue_alloc_prepend' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x5598274251c8 <col:38> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x559827425128 <col:38> 'struct k_queue *' lvalue ParmVar 0x559827424de0 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5598274251e0 <col:45> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x559827425150 <col:45> 'void *' lvalue ParmVar 0x559827424e58 'data' 'void *'
|-FunctionDecl 0x559827425360 <line:492:1, col:71> col:15 used z_impl_k_queue_get 'void *(struct k_queue *, s32_t)' extern
| |-ParmVarDecl 0x559827425258 <col:34, col:51> col:51 queue 'struct k_queue *'
| `-ParmVarDecl 0x5598274252c8 <col:58, col:64> col:64 timeout 's32_t':'int'
|-FunctionDecl 0x559827425540 prev 0x5598273dd438 <line:493:1, line:502:1> line:493:22 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x559827425438 <col:34, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5598274254a8 <col:58, col:64> col:64 used timeout 's32_t':'int'
| `-CompoundStmt 0x559827425860 <line:494:1, line:502:1>
|   |-DoStmt 0x5598274256d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827425698 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827425648 <col:2, col:39>
|   | `-IntegerLiteral 0x5598274256b0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827425848 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:501:2, col:42>
|     `-CallExpr 0x5598274257e0 <col:9, col:42> 'void *'
|       |-ImplicitCastExpr 0x5598274257c8 <col:9> 'void *(*)(struct k_queue *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5598274256f0 <col:9> 'void *(struct k_queue *, s32_t)' Function 0x559827425360 'z_impl_k_queue_get' 'void *(struct k_queue *, s32_t)'
|       |-ImplicitCastExpr 0x559827425818 <col:28> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x559827425718 <col:28> 'struct k_queue *' lvalue ParmVar 0x559827425438 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x559827425830 <col:35> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559827425740 <col:35> 's32_t':'int' lvalue ParmVar 0x5598274254a8 'timeout' 's32_t':'int'
|-FunctionDecl 0x559827425938 prev 0x5598273de618 <line:505:1, col:58> col:12 used z_impl_k_queue_is_empty 'int (struct k_queue *)' extern
| `-ParmVarDecl 0x5598274258a8 <col:36, col:53> col:53 queue 'struct k_queue *'
|-FunctionDecl 0x559827425a98 prev 0x5598273de4b8 <line:506:1, line:515:1> line:506:19 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x559827425a08 <col:36, col:53> col:53 used queue 'struct k_queue *'
| `-CompoundStmt 0x559827425d60 <line:507:1, line:515:1>
|   |-DoStmt 0x559827425c20 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827425be8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827425b98 <col:2, col:39>
|   | `-IntegerLiteral 0x559827425c00 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827425d48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:514:2, col:38>
|     `-CallExpr 0x559827425d00 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x559827425ce8 <col:9> 'int (*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827425c40 <col:9> 'int (struct k_queue *)' Function 0x559827425938 'z_impl_k_queue_is_empty' 'int (struct k_queue *)'
|       `-ImplicitCastExpr 0x559827425d30 <col:33> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x559827425c68 <col:33> 'struct k_queue *' lvalue ParmVar 0x559827425a08 'queue' 'struct k_queue *'
|-FunctionDecl 0x559827425e38 prev 0x5598273df470 <line:518:1, col:62> col:15 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x559827425da8 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x559827425ff0 prev 0x5598273de998 <line:519:1, line:528:1> line:519:22 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x559827425f60 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x5598274262c0 <line:520:1, line:528:1>
|   |-DoStmt 0x559827426178 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827426140 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5598274260f0 <col:2, col:39>
|   | `-IntegerLiteral 0x559827426158 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5598274262a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:527:2, col:39>
|     `-CallExpr 0x559827426260 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x559827426248 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827426198 <col:9> 'void *(struct k_queue *)' Function 0x559827425e38 'z_impl_k_queue_peek_head' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x559827426290 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x5598274261c0 <col:34> 'struct k_queue *' lvalue ParmVar 0x559827425f60 'queue' 'struct k_queue *'
|-FunctionDecl 0x559827426398 prev 0x5598273df9a8 <line:531:1, col:62> col:15 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x559827426308 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x5598274264f8 prev 0x5598273df848 <line:532:1, line:541:1> line:532:22 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x559827426468 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x559827426768 <line:533:1, line:541:1>
|   |-DoStmt 0x559827426680 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827426648 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5598274265f8 <col:2, col:39>
|   | `-IntegerLiteral 0x559827426660 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827426750 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:540:2, col:39>
|     `-CallExpr 0x559827426708 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x5598274266f0 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5598274266a0 <col:9> 'void *(struct k_queue *)' Function 0x559827426398 'z_impl_k_queue_peek_tail' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x559827426738 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x5598274266c8 <col:34> 'struct k_queue *' lvalue ParmVar 0x559827426468 'queue' 'struct k_queue *'
|-FunctionDecl 0x559827426a68 <line:544:1, col:83> col:12 used z_impl_k_futex_wait 'int (struct k_futex *, int, s32_t)' extern
| |-ParmVarDecl 0x559827426840 <col:32, col:49> col:49 futex 'struct k_futex *'
| |-ParmVarDecl 0x5598274268b8 <col:56, col:60> col:60 expected 'int'
| `-ParmVarDecl 0x559827426928 <col:70, col:76> col:76 timeout 's32_t':'int'
|-FunctionDecl 0x559827426cd0 <line:545:1, line:554:1> line:545:19 k_futex_wait 'int (struct k_futex *, int, s32_t)' static inline
| |-ParmVarDecl 0x559827426b48 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x559827426bc0 <col:56, col:60> col:60 used expected 'int'
| |-ParmVarDecl 0x559827426c30 <col:70, col:76> col:76 used timeout 's32_t':'int'
| `-CompoundStmt 0x559827427050 <line:546:1, line:554:1>
|   |-DoStmt 0x559827426e68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827426e30 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827426de0 <col:2, col:39>
|   | `-IntegerLiteral 0x559827426e48 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827427038 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:553:2, col:53>
|     `-CallExpr 0x559827426fb0 <col:9, col:53> 'int'
|       |-ImplicitCastExpr 0x559827426f98 <col:9> 'int (*)(struct k_futex *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827426e88 <col:9> 'int (struct k_futex *, int, s32_t)' Function 0x559827426a68 'z_impl_k_futex_wait' 'int (struct k_futex *, int, s32_t)'
|       |-ImplicitCastExpr 0x559827426ff0 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x559827426eb0 <col:29> 'struct k_futex *' lvalue ParmVar 0x559827426b48 'futex' 'struct k_futex *'
|       |-ImplicitCastExpr 0x559827427008 <col:36> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x559827426ed8 <col:36> 'int' lvalue ParmVar 0x559827426bc0 'expected' 'int'
|       `-ImplicitCastExpr 0x559827427020 <col:46> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559827426f00 <col:46> 's32_t':'int' lvalue ParmVar 0x559827426c30 'timeout' 's32_t':'int'
|-FunctionDecl 0x559827427228 <line:557:1, col:69> col:12 used z_impl_k_futex_wake 'int (struct k_futex *, bool)' extern
| |-ParmVarDecl 0x559827427098 <col:32, col:49> col:49 futex 'struct k_futex *'
| `-ParmVarDecl 0x559827427108 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:557:61> col:61 wake_all 'bool'
|-FunctionDecl 0x559827427408 <line:558:1, line:567:1> line:558:19 k_futex_wake 'int (struct k_futex *, bool)' static inline
| |-ParmVarDecl 0x559827427300 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x559827427370 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:558:61> col:61 used wake_all 'bool'
| `-CompoundStmt 0x559827427720 <line:559:1, line:567:1>
|   |-DoStmt 0x559827427598 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827427560 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827427510 <col:2, col:39>
|   | `-IntegerLiteral 0x559827427578 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827427708 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:566:2, col:44>
|     `-CallExpr 0x5598274276a0 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x559827427688 <col:9> 'int (*)(struct k_futex *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5598274275b8 <col:9> 'int (struct k_futex *, bool)' Function 0x559827427228 'z_impl_k_futex_wake' 'int (struct k_futex *, bool)'
|       |-ImplicitCastExpr 0x5598274276d8 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x5598274275e0 <col:29> 'struct k_futex *' lvalue ParmVar 0x559827427300 'futex' 'struct k_futex *'
|       `-ImplicitCastExpr 0x5598274276f0 <col:36> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x559827427608 <col:36> 'bool' lvalue ParmVar 0x559827427370 'wake_all' 'bool'
|-FunctionDecl 0x559827427868 <line:570:1, col:81> col:14 used z_impl_k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' extern
| |-ParmVarDecl 0x559827427768 <col:40, col:57> col:57 stack 'struct k_stack *'
| `-ParmVarDecl 0x5598274277d8 <col:64, col:70> col:70 num_entries 'u32_t':'unsigned int'
|-FunctionDecl 0x559827427a40 prev 0x5598272de9a0 <line:571:1, line:580:1> line:571:21 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x559827427940 <col:40, col:57> col:57 used stack 'struct k_stack *'
| |-ParmVarDecl 0x5598274279b0 <col:64, col:70> col:70 used num_entries 'u32_t':'unsigned int'
| `-CompoundStmt 0x559827427d60 <line:572:1, line:580:1>
|   |-DoStmt 0x559827427bd0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827427b98 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827427b48 <col:2, col:39>
|   | `-IntegerLiteral 0x559827427bb0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827427d48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:579:2, col:53>
|     `-CallExpr 0x559827427ce0 <col:9, col:53> 's32_t':'int'
|       |-ImplicitCastExpr 0x559827427cc8 <col:9> 's32_t (*)(struct k_stack *, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827427bf0 <col:9> 's32_t (struct k_stack *, u32_t)' Function 0x559827427868 'z_impl_k_stack_alloc_init' 's32_t (struct k_stack *, u32_t)'
|       |-ImplicitCastExpr 0x559827427d18 <col:35> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x559827427c18 <col:35> 'struct k_stack *' lvalue ParmVar 0x559827427940 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x559827427d30 <col:42> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x559827427c40 <col:42> 'u32_t':'unsigned int' lvalue ParmVar 0x5598274279b0 'num_entries' 'u32_t':'unsigned int'
|-FunctionDecl 0x559827427eb0 <line:583:1, col:73> col:12 used z_impl_k_stack_push 'int (struct k_stack *, stack_data_t)' extern
| |-ParmVarDecl 0x559827427da8 <col:32, col:49> col:49 stack 'struct k_stack *'
| `-ParmVarDecl 0x559827427e18 <col:56, col:69> col:69 data 'stack_data_t':'unsigned long'
|-FunctionDecl 0x5598274280b0 prev 0x5598272dee28 <line:584:1, line:593:1> line:584:19 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x559827427fa8 <col:32, col:49> col:49 used stack 'struct k_stack *'
| |-ParmVarDecl 0x559827428018 <col:56, col:69> col:69 used data 'stack_data_t':'unsigned long'
| `-CompoundStmt 0x5598274283d0 <line:585:1, line:593:1>
|   |-DoStmt 0x559827428240 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827428208 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5598274281b8 <col:2, col:39>
|   | `-IntegerLiteral 0x559827428220 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5598274283b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:592:2, col:40>
|     `-CallExpr 0x559827428350 <col:9, col:40> 'int'
|       |-ImplicitCastExpr 0x559827428338 <col:9> 'int (*)(struct k_stack *, stack_data_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827428260 <col:9> 'int (struct k_stack *, stack_data_t)' Function 0x559827427eb0 'z_impl_k_stack_push' 'int (struct k_stack *, stack_data_t)'
|       |-ImplicitCastExpr 0x559827428388 <col:29> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x559827428288 <col:29> 'struct k_stack *' lvalue ParmVar 0x559827427fa8 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x5598274283a0 <col:36> 'stack_data_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x5598274282b0 <col:36> 'stack_data_t':'unsigned long' lvalue ParmVar 0x559827428018 'data' 'stack_data_t':'unsigned long'
|-FunctionDecl 0x559827428598 <line:596:1, col:89> col:12 used z_impl_k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' extern
| |-ParmVarDecl 0x559827428418 <col:31, col:48> col:48 stack 'struct k_stack *'
| |-ParmVarDecl 0x559827428488 <col:55, col:70> col:70 data 'stack_data_t *'
| `-ParmVarDecl 0x5598274284f8 <col:76, col:82> col:82 timeout 's32_t':'int'
|-FunctionDecl 0x5598274287f8 prev 0x5598272df4c8 <line:597:1, line:606:1> line:597:19 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x559827428678 <col:31, col:48> col:48 used stack 'struct k_stack *'
| |-ParmVarDecl 0x5598274286e8 <col:55, col:70> col:70 used data 'stack_data_t *'
| |-ParmVarDecl 0x559827428758 <col:76, col:82> col:82 used timeout 's32_t':'int'
| `-CompoundStmt 0x559827428b60 <line:598:1, line:606:1>
|   |-DoStmt 0x559827428990 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827428958 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827428908 <col:2, col:39>
|   | `-IntegerLiteral 0x559827428970 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827428b48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:605:2, col:48>
|     `-CallExpr 0x559827428ac0 <col:9, col:48> 'int'
|       |-ImplicitCastExpr 0x559827428aa8 <col:9> 'int (*)(struct k_stack *, stack_data_t *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5598274289b0 <col:9> 'int (struct k_stack *, stack_data_t *, s32_t)' Function 0x559827428598 'z_impl_k_stack_pop' 'int (struct k_stack *, stack_data_t *, s32_t)'
|       |-ImplicitCastExpr 0x559827428b00 <col:28> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x5598274289d8 <col:28> 'struct k_stack *' lvalue ParmVar 0x559827428678 'stack' 'struct k_stack *'
|       |-ImplicitCastExpr 0x559827428b18 <col:35> 'stack_data_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x559827428a00 <col:35> 'stack_data_t *' lvalue ParmVar 0x5598274286e8 'data' 'stack_data_t *'
|       `-ImplicitCastExpr 0x559827428b30 <col:41> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559827428a28 <col:41> 's32_t':'int' lvalue ParmVar 0x559827428758 'timeout' 's32_t':'int'
|-FunctionDecl 0x559827428c38 <line:609:1, col:54> col:12 used z_impl_k_mutex_init 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x559827428ba8 <col:32, col:49> col:49 mutex 'struct k_mutex *'
|-FunctionDecl 0x559827428d98 prev 0x5598273f6db8 <line:610:1, line:619:1> line:610:19 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x559827428d08 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x559827429090 <line:611:1, line:619:1>
|   |-DoStmt 0x559827428f20 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827428ee8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827428e98 <col:2, col:39>
|   | `-IntegerLiteral 0x559827428f00 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827429078 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:618:2, col:34>
|     `-CallExpr 0x559827429030 <col:9, col:34> 'int'
|       |-ImplicitCastExpr 0x559827429018 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827428f40 <col:9> 'int (struct k_mutex *)' Function 0x559827428c38 'z_impl_k_mutex_init' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x559827429060 <col:29> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x559827428f90 <col:29> 'struct k_mutex *' lvalue ParmVar 0x559827428d08 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x5598274291e0 <line:622:1, col:69> col:12 used z_impl_k_mutex_lock 'int (struct k_mutex *, s32_t)' extern
| |-ParmVarDecl 0x5598274290d8 <col:32, col:49> col:49 mutex 'struct k_mutex *'
| `-ParmVarDecl 0x559827429148 <col:56, col:62> col:62 timeout 's32_t':'int'
|-FunctionDecl 0x5598274293c0 prev 0x5598273f7038 <line:623:1, line:632:1> line:623:19 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x5598274292b8 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| |-ParmVarDecl 0x559827429328 <col:56, col:62> col:62 used timeout 's32_t':'int'
| `-CompoundStmt 0x5598274296e0 <line:624:1, line:632:1>
|   |-DoStmt 0x559827429550 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827429518 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5598274294c8 <col:2, col:39>
|   | `-IntegerLiteral 0x559827429530 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5598274296c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:631:2, col:43>
|     `-CallExpr 0x559827429660 <col:9, col:43> 'int'
|       |-ImplicitCastExpr 0x559827429648 <col:9> 'int (*)(struct k_mutex *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827429570 <col:9> 'int (struct k_mutex *, s32_t)' Function 0x5598274291e0 'z_impl_k_mutex_lock' 'int (struct k_mutex *, s32_t)'
|       |-ImplicitCastExpr 0x559827429698 <col:29> 'struct k_mutex *' <LValueToRValue>
|       | `-DeclRefExpr 0x559827429598 <col:29> 'struct k_mutex *' lvalue ParmVar 0x5598274292b8 'mutex' 'struct k_mutex *'
|       `-ImplicitCastExpr 0x5598274296b0 <col:36> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5598274295c0 <col:36> 's32_t':'int' lvalue ParmVar 0x559827429328 'timeout' 's32_t':'int'
|-FunctionDecl 0x5598274297b8 <line:635:1, col:56> col:12 used z_impl_k_mutex_unlock 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x559827429728 <col:34, col:51> col:51 mutex 'struct k_mutex *'
|-FunctionDecl 0x559827429918 prev 0x5598273f71d0 <line:636:1, line:645:1> line:636:19 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x559827429888 <col:34, col:51> col:51 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x559827429b88 <line:637:1, line:645:1>
|   |-DoStmt 0x559827429aa0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827429a68 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827429a18 <col:2, col:39>
|   | `-IntegerLiteral 0x559827429a80 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827429b70 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:644:2, col:36>
|     `-CallExpr 0x559827429b28 <col:9, col:36> 'int'
|       |-ImplicitCastExpr 0x559827429b10 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827429ac0 <col:9> 'int (struct k_mutex *)' Function 0x5598274297b8 'z_impl_k_mutex_unlock' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x559827429b58 <col:31> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x559827429ae8 <col:31> 'struct k_mutex *' lvalue ParmVar 0x559827429888 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x559827429d60 <line:648:1, col:96> col:12 used z_impl_k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' extern
| |-ParmVarDecl 0x559827429bd0 <col:30, col:45> col:45 sem 'struct k_sem *'
| |-ParmVarDecl 0x559827429c48 <col:50, col:63> col:63 initial_count 'unsigned int'
| `-ParmVarDecl 0x559827429cc0 <col:78, col:91> col:91 limit 'unsigned int'
|-FunctionDecl 0x559827429fd0 prev 0x5598273f77d8 <line:649:1, line:658:1> line:649:19 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x559827429e40 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x559827429eb8 <col:50, col:63> col:63 used initial_count 'unsigned int'
| |-ParmVarDecl 0x559827429f30 <col:78, col:91> col:91 used limit 'unsigned int'
| `-CompoundStmt 0x55982742a340 <line:650:1, line:658:1>
|   |-DoStmt 0x55982742a168 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982742a130 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982742a0e0 <col:2, col:39>
|   | `-IntegerLiteral 0x55982742a148 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982742a328 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:657:2, col:52>
|     `-CallExpr 0x55982742a2a0 <col:9, col:52> 'int'
|       |-ImplicitCastExpr 0x55982742a288 <col:9> 'int (*)(struct k_sem *, unsigned int, unsigned int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982742a188 <col:9> 'int (struct k_sem *, unsigned int, unsigned int)' Function 0x559827429d60 'z_impl_k_sem_init' 'int (struct k_sem *, unsigned int, unsigned int)'
|       |-ImplicitCastExpr 0x55982742a2e0 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982742a1b0 <col:27> 'struct k_sem *' lvalue ParmVar 0x559827429e40 'sem' 'struct k_sem *'
|       |-ImplicitCastExpr 0x55982742a2f8 <col:32> 'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55982742a1d8 <col:32> 'unsigned int' lvalue ParmVar 0x559827429eb8 'initial_count' 'unsigned int'
|       `-ImplicitCastExpr 0x55982742a310 <col:47> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55982742a200 <col:47> 'unsigned int' lvalue ParmVar 0x559827429f30 'limit' 'unsigned int'
|-FunctionDecl 0x55982742a490 <line:661:1, col:63> col:12 used z_impl_k_sem_take 'int (struct k_sem *, s32_t)' extern
| |-ParmVarDecl 0x55982742a388 <col:30, col:45> col:45 sem 'struct k_sem *'
| `-ParmVarDecl 0x55982742a3f8 <col:50, col:56> col:56 timeout 's32_t':'int'
|-FunctionDecl 0x55982742a670 prev 0x5598273f7a68 <line:662:1, line:671:1> line:662:19 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x55982742a568 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x55982742a5d8 <col:50, col:56> col:56 used timeout 's32_t':'int'
| `-CompoundStmt 0x55982742a990 <line:663:1, line:671:1>
|   |-DoStmt 0x55982742a800 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982742a7c8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982742a778 <col:2, col:39>
|   | `-IntegerLiteral 0x55982742a7e0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982742a978 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:670:2, col:39>
|     `-CallExpr 0x55982742a910 <col:9, col:39> 'int'
|       |-ImplicitCastExpr 0x55982742a8f8 <col:9> 'int (*)(struct k_sem *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982742a820 <col:9> 'int (struct k_sem *, s32_t)' Function 0x55982742a490 'z_impl_k_sem_take' 'int (struct k_sem *, s32_t)'
|       |-ImplicitCastExpr 0x55982742a948 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982742a848 <col:27> 'struct k_sem *' lvalue ParmVar 0x55982742a568 'sem' 'struct k_sem *'
|       `-ImplicitCastExpr 0x55982742a960 <col:32> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55982742a870 <col:32> 's32_t':'int' lvalue ParmVar 0x55982742a5d8 'timeout' 's32_t':'int'
|-FunctionDecl 0x55982742aa60 <line:674:1, col:49> col:13 used z_impl_k_sem_give 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x55982742a9d8 <col:31, col:46> col:46 sem 'struct k_sem *'
|-FunctionDecl 0x55982742abb8 prev 0x5598273f8cc0 <line:675:1, line:685:1> line:675:20 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55982742ab30 <col:31, col:46> col:46 used sem 'struct k_sem *'
| `-CompoundStmt 0x55982742ae68 <line:676:1, line:685:1>
|   |-DoStmt 0x55982742ad40 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982742ad08 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982742acb8 <col:2, col:39>
|   | `-IntegerLiteral 0x55982742ad20 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55982742ae20 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:684:2, col:23> 'void'
|     |-ImplicitCastExpr 0x55982742ae08 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982742ad60 <col:2> 'void (struct k_sem *)' Function 0x55982742aa60 'z_impl_k_sem_give' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x55982742ae50 <col:20> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x55982742ad88 <col:20> 'struct k_sem *' lvalue ParmVar 0x55982742ab30 'sem' 'struct k_sem *'
|-FunctionDecl 0x55982742afa0 prev 0x5598273f8fc8 <line:688:1, col:50> col:13 used z_impl_k_sem_reset 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x55982742aeb0 <col:32, col:47> col:47 sem 'struct k_sem *'
|-FunctionDecl 0x55982742b0f8 prev 0x5598273f8e48 <line:689:1, line:699:1> line:689:20 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55982742b070 <col:32, col:47> col:47 used sem 'struct k_sem *'
| `-CompoundStmt 0x55982742b350 <line:690:1, line:699:1>
|   |-DoStmt 0x55982742b280 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982742b248 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982742b1f8 <col:2, col:39>
|   | `-IntegerLiteral 0x55982742b260 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55982742b308 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:698:2, col:24> 'void'
|     |-ImplicitCastExpr 0x55982742b2f0 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982742b2a0 <col:2> 'void (struct k_sem *)' Function 0x55982742afa0 'z_impl_k_sem_reset' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x55982742b338 <col:21> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x55982742b2c8 <col:21> 'struct k_sem *' lvalue ParmVar 0x55982742b070 'sem' 'struct k_sem *'
|-FunctionDecl 0x55982742b428 prev 0x5598273f9430 <line:702:1, col:62> col:21 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' extern
| `-ParmVarDecl 0x55982742b398 <col:44, col:59> col:59 sem 'struct k_sem *'
|-FunctionDecl 0x55982742b588 prev 0x5598273f92a8 <line:703:1, line:712:1> line:703:28 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x55982742b4f8 <col:44, col:59> col:59 used sem 'struct k_sem *'
| `-CompoundStmt 0x55982742b850 <line:704:1, line:712:1>
|   |-DoStmt 0x55982742b710 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982742b6d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982742b688 <col:2, col:39>
|   | `-IntegerLiteral 0x55982742b6f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982742b838 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:711:2, col:35>
|     `-CallExpr 0x55982742b7f0 <col:9, col:35> 'unsigned int'
|       |-ImplicitCastExpr 0x55982742b7d8 <col:9> 'unsigned int (*)(struct k_sem *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982742b730 <col:9> 'unsigned int (struct k_sem *)' Function 0x55982742b428 'z_impl_k_sem_count_get' 'unsigned int (struct k_sem *)'
|       `-ImplicitCastExpr 0x55982742b820 <col:32> 'struct k_sem *' <LValueToRValue>
|         `-DeclRefExpr 0x55982742b758 <col:32> 'struct k_sem *' lvalue ParmVar 0x55982742b4f8 'sem' 'struct k_sem *'
|-FunctionDecl 0x55982742ba18 <line:715:1, col:90> col:12 used z_impl_k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' extern
| |-ParmVarDecl 0x55982742b898 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55982742b908 <col:59, col:66> col:66 msg_size 'size_t':'unsigned long'
| `-ParmVarDecl 0x55982742b978 <col:76, col:82> col:82 max_msgs 'u32_t':'unsigned int'
|-FunctionDecl 0x55982742bc78 prev 0x5598273a99b8 <line:716:1, line:725:1> line:716:19 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x55982742baf8 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55982742bb68 <col:59, col:66> col:66 used msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55982742bbd8 <col:76, col:82> col:82 used max_msgs 'u32_t':'unsigned int'
| `-CompoundStmt 0x55982742bfe0 <line:717:1, line:725:1>
|   |-DoStmt 0x55982742be10 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982742bdd8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982742bd88 <col:2, col:39>
|   | `-IntegerLiteral 0x55982742bdf0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982742bfc8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:724:2, col:58>
|     `-CallExpr 0x55982742bf40 <col:9, col:58> 'int'
|       |-ImplicitCastExpr 0x55982742bf28 <col:9> 'int (*)(struct k_msgq *, size_t, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982742be30 <col:9> 'int (struct k_msgq *, size_t, u32_t)' Function 0x55982742ba18 'z_impl_k_msgq_alloc_init' 'int (struct k_msgq *, size_t, u32_t)'
|       |-ImplicitCastExpr 0x55982742bf80 <col:34> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982742be58 <col:34> 'struct k_msgq *' lvalue ParmVar 0x55982742baf8 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x55982742bf98 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55982742be80 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x55982742bb68 'msg_size' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x55982742bfb0 <col:50> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55982742bea8 <col:50> 'u32_t':'unsigned int' lvalue ParmVar 0x55982742bbd8 'max_msgs' 'u32_t':'unsigned int'
|-FunctionDecl 0x55982742c1b0 <line:728:1, col:78> col:12 used z_impl_k_msgq_put 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x55982742c028 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55982742c0a0 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x55982742c110 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x55982742c418 prev 0x5598273a9ee8 <line:729:1, line:738:1> line:729:19 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x55982742c290 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55982742c308 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x55982742c378 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x55982742c780 <line:730:1, line:738:1>
|   |-DoStmt 0x55982742c5b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982742c578 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982742c528 <col:2, col:39>
|   | `-IntegerLiteral 0x55982742c590 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982742c768 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:737:2, col:46>
|     `-CallExpr 0x55982742c6e0 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x55982742c6c8 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982742c5d0 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x55982742c1b0 'z_impl_k_msgq_put' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x55982742c720 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982742c5f8 <col:27> 'struct k_msgq *' lvalue ParmVar 0x55982742c290 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x55982742c738 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982742c620 <col:33> 'void *' lvalue ParmVar 0x55982742c308 'data' 'void *'
|       `-ImplicitCastExpr 0x55982742c750 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55982742c648 <col:39> 's32_t':'int' lvalue ParmVar 0x55982742c378 'timeout' 's32_t':'int'
|-FunctionDecl 0x55982742c950 <line:741:1, col:78> col:12 used z_impl_k_msgq_get 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x55982742c7c8 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55982742c840 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x55982742c8b0 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x55982742cbb8 prev 0x5598273fd638 <line:742:1, line:751:1> line:742:19 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x55982742ca30 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55982742caa8 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x55982742cb18 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x55982742cec8 <line:743:1, line:751:1>
|   |-DoStmt 0x55982742cd50 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982742cd18 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982742ccc8 <col:2, col:39>
|   | `-IntegerLiteral 0x55982742cd30 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982742ceb0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:750:2, col:46>
|     `-CallExpr 0x55982742ce28 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x55982742ce10 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982742cd70 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x55982742c950 'z_impl_k_msgq_get' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x55982742ce68 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982742cd98 <col:27> 'struct k_msgq *' lvalue ParmVar 0x55982742ca30 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x55982742ce80 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982742cdc0 <col:33> 'void *' lvalue ParmVar 0x55982742caa8 'data' 'void *'
|       `-ImplicitCastExpr 0x55982742ce98 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55982742cde8 <col:39> 's32_t':'int' lvalue ParmVar 0x55982742cb18 'timeout' 's32_t':'int'
|-FunctionDecl 0x55982742d048 <line:754:1, col:64> col:12 used z_impl_k_msgq_peek 'int (struct k_msgq *, void *)' extern
| |-ParmVarDecl 0x55982742cf10 <col:31, col:47> col:47 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x55982742cfb0 <col:53, col:60> col:60 data 'void *'
|-FunctionDecl 0x55982742d230 prev 0x5598273fd8d8 <line:755:1, line:764:1> line:755:19 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x55982742d120 <col:31, col:47> col:47 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55982742d198 <col:53, col:60> col:60 used data 'void *'
| `-CompoundStmt 0x55982742d550 <line:756:1, line:764:1>
|   |-DoStmt 0x55982742d3c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982742d388 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982742d338 <col:2, col:39>
|   | `-IntegerLiteral 0x55982742d3a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982742d538 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:763:2, col:38>
|     `-CallExpr 0x55982742d4d0 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x55982742d4b8 <col:9> 'int (*)(struct k_msgq *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982742d3e0 <col:9> 'int (struct k_msgq *, void *)' Function 0x55982742d048 'z_impl_k_msgq_peek' 'int (struct k_msgq *, void *)'
|       |-ImplicitCastExpr 0x55982742d508 <col:28> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982742d408 <col:28> 'struct k_msgq *' lvalue ParmVar 0x55982742d120 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x55982742d520 <col:34> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55982742d430 <col:34> 'void *' lvalue ParmVar 0x55982742d198 'data' 'void *'
|-FunctionDecl 0x55982742d620 <line:767:1, col:53> col:13 used z_impl_k_msgq_purge 'void (struct k_msgq *)' extern
| `-ParmVarDecl 0x55982742d598 <col:33, col:49> col:49 msgq 'struct k_msgq *'
|-FunctionDecl 0x55982742d778 prev 0x5598273fdae0 <line:768:1, line:778:1> line:768:20 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55982742d6f0 <col:33, col:49> col:49 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55982742da28 <line:769:1, line:778:1>
|   |-DoStmt 0x55982742d900 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982742d8c8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982742d878 <col:2, col:39>
|   | `-IntegerLiteral 0x55982742d8e0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55982742d9e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:777:2, col:26> 'void'
|     |-ImplicitCastExpr 0x55982742d9c8 <col:2> 'void (*)(struct k_msgq *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982742d920 <col:2> 'void (struct k_msgq *)' Function 0x55982742d620 'z_impl_k_msgq_purge' 'void (struct k_msgq *)'
|     `-ImplicitCastExpr 0x55982742da10 <col:22> 'struct k_msgq *' <LValueToRValue>
|       `-DeclRefExpr 0x55982742d948 <col:22> 'struct k_msgq *' lvalue ParmVar 0x55982742d6f0 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x55982742daf8 prev 0x5598273fe160 <line:781:1, col:61> col:14 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x55982742da70 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x55982742dc50 prev 0x5598273fdce0 <line:782:1, line:791:1> line:782:21 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55982742dbc8 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55982742df20 <line:783:1, line:791:1>
|   |-DoStmt 0x55982742ddd8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982742dda0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982742dd50 <col:2, col:39>
|   | `-IntegerLiteral 0x55982742ddb8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982742df08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:790:2, col:40>
|     `-CallExpr 0x55982742dec0 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55982742dea8 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982742ddf8 <col:9> 'u32_t (struct k_msgq *)' Function 0x55982742daf8 'z_impl_k_msgq_num_free_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x55982742def0 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x55982742de20 <col:36> 'struct k_msgq *' lvalue ParmVar 0x55982742dbc8 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x55982742e080 <line:794:1, col:86> col:13 used z_impl_k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' extern
| |-ParmVarDecl 0x55982742df68 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x55982742dff0 <col:59, col:81> col:81 attrs 'struct k_msgq_attrs *'
|-FunctionDecl 0x55982742e270 prev 0x5598273fe000 <line:795:1, line:805:1> line:795:20 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x55982742e158 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55982742e1e0 <col:59, col:81> col:81 used attrs 'struct k_msgq_attrs *'
| `-CompoundStmt 0x55982742e578 <line:796:1, line:805:1>
|   |-DoStmt 0x55982742e400 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982742e3c8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982742e378 <col:2, col:39>
|   | `-IntegerLiteral 0x55982742e3e0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55982742e510 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:804:2, col:37> 'void'
|     |-ImplicitCastExpr 0x55982742e4f8 <col:2> 'void (*)(struct k_msgq *, struct k_msgq_attrs *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982742e420 <col:2> 'void (struct k_msgq *, struct k_msgq_attrs *)' Function 0x55982742e080 'z_impl_k_msgq_get_attrs' 'void (struct k_msgq *, struct k_msgq_attrs *)'
|     |-ImplicitCastExpr 0x55982742e548 <col:26> 'struct k_msgq *' <LValueToRValue>
|     | `-DeclRefExpr 0x55982742e448 <col:26> 'struct k_msgq *' lvalue ParmVar 0x55982742e158 'msgq' 'struct k_msgq *'
|     `-ImplicitCastExpr 0x55982742e560 <col:32> 'struct k_msgq_attrs *' <LValueToRValue>
|       `-DeclRefExpr 0x55982742e470 <col:32> 'struct k_msgq_attrs *' lvalue ParmVar 0x55982742e1e0 'attrs' 'struct k_msgq_attrs *'
|-FunctionDecl 0x55982742e648 prev 0x5598273fea38 <line:808:1, col:61> col:14 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x55982742e5c0 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x55982742e7a0 prev 0x5598273fe8e0 <line:809:1, line:818:1> line:809:21 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55982742e718 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55982742ea10 <line:810:1, line:818:1>
|   |-DoStmt 0x55982742e928 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982742e8f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982742e8a0 <col:2, col:39>
|   | `-IntegerLiteral 0x55982742e908 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982742e9f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:817:2, col:40>
|     `-CallExpr 0x55982742e9b0 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55982742e998 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982742e948 <col:9> 'u32_t (struct k_msgq *)' Function 0x55982742e648 'z_impl_k_msgq_num_used_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x55982742e9e0 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x55982742e970 <col:36> 'struct k_msgq *' lvalue ParmVar 0x55982742e718 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x55982742eb60 <line:821:1, col:70> col:12 used z_impl_k_pipe_alloc_init 'int (struct k_pipe *, size_t)' extern
| |-ParmVarDecl 0x55982742ea58 <col:37, col:53> col:53 pipe 'struct k_pipe *'
| `-ParmVarDecl 0x55982742eac8 <col:59, col:66> col:66 size 'size_t':'unsigned long'
|-FunctionDecl 0x55982742ed40 prev 0x559827404ba8 <line:822:1, line:831:1> line:822:19 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x55982742ec38 <col:37, col:53> col:53 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55982742eca8 <col:59, col:66> col:66 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x55982742f080 <line:823:1, line:831:1>
|   |-DoStmt 0x55982742eed0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982742ee98 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982742ee48 <col:2, col:39>
|   | `-IntegerLiteral 0x55982742eeb0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982742f068 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:830:2, col:44>
|     `-CallExpr 0x55982742f000 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x55982742efe8 <col:9> 'int (*)(struct k_pipe *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982742eef0 <col:9> 'int (struct k_pipe *, size_t)' Function 0x55982742eb60 'z_impl_k_pipe_alloc_init' 'int (struct k_pipe *, size_t)'
|       |-ImplicitCastExpr 0x55982742f038 <col:34> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982742ef18 <col:34> 'struct k_pipe *' lvalue ParmVar 0x55982742ec38 'pipe' 'struct k_pipe *'
|       `-ImplicitCastExpr 0x55982742f050 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x55982742ef40 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x55982742eca8 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x55982742f3b8 <line:834:1, col:142> col:12 used z_impl_k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x55982742f0c8 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55982742f140 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x55982742f1b0 <col:65, col:72> col:72 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x55982742f220 <col:88, col:97> col:97 bytes_written 'size_t *'
| |-ParmVarDecl 0x55982742f290 <col:112, col:119> col:119 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x55982742f300 <col:129, col:135> col:135 timeout 's32_t':'int'
|-FunctionDecl 0x55982742f7a0 prev 0x559827405098 <line:835:1, line:844:1> line:835:19 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x55982742f4b0 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55982742f528 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x55982742f598 <col:65, col:72> col:72 used bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x55982742f608 <col:88, col:97> col:97 used bytes_written 'size_t *'
| |-ParmVarDecl 0x55982742f678 <col:112, col:119> col:119 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x55982742f6e8 <col:129, col:135> col:135 used timeout 's32_t':'int'
| `-CompoundStmt 0x55982742fc00 <line:836:1, line:844:1>
|   |-DoStmt 0x55982742f950 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55982742f918 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55982742f8c8 <col:2, col:39>
|   | `-IntegerLiteral 0x55982742f930 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55982742fbe8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:843:2, col:87>
|     `-CallExpr 0x55982742fb00 <col:9, col:87> 'int'
|       |-ImplicitCastExpr 0x55982742fae8 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982742f970 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x55982742f3b8 'z_impl_k_pipe_put' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x55982742fb58 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982742f998 <col:27> 'struct k_pipe *' lvalue ParmVar 0x55982742f4b0 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x55982742fb70 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982742f9c0 <col:33> 'void *' lvalue ParmVar 0x55982742f528 'data' 'void *'
|       |-ImplicitCastExpr 0x55982742fb88 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55982742f9e8 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x55982742f598 'bytes_to_write' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x55982742fba0 <col:55> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x55982742fa10 <col:55> 'size_t *' lvalue ParmVar 0x55982742f608 'bytes_written' 'size_t *'
|       |-ImplicitCastExpr 0x55982742fbb8 <col:70> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55982742fa38 <col:70> 'size_t':'unsigned long' lvalue ParmVar 0x55982742f678 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x55982742fbd0 <col:80> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55982742fa60 <col:80> 's32_t':'int' lvalue ParmVar 0x55982742f6e8 'timeout' 's32_t':'int'
|-FunctionDecl 0x55982742ff38 <line:847:1, col:138> col:12 used z_impl_k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x55982742fc48 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55982742fcc0 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x55982742fd30 <col:65, col:72> col:72 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x55982742fda0 <col:87, col:96> col:96 bytes_read 'size_t *'
| |-ParmVarDecl 0x55982742fe10 <col:108, col:115> col:115 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x55982742fe80 <col:125, col:131> col:131 timeout 's32_t':'int'
|-FunctionDecl 0x559827430320 prev 0x5598274054b0 <line:848:1, line:857:1> line:848:19 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x559827430030 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5598274300a8 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x559827430118 <col:65, col:72> col:72 used bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x559827430188 <col:87, col:96> col:96 used bytes_read 'size_t *'
| |-ParmVarDecl 0x5598274301f8 <col:108, col:115> col:115 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x559827430268 <col:125, col:131> col:131 used timeout 's32_t':'int'
| `-CompoundStmt 0x559827430720 <line:849:1, line:857:1>
|   |-DoStmt 0x5598274304d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827430498 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827430448 <col:2, col:39>
|   | `-IntegerLiteral 0x5598274304b0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827430708 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:856:2, col:83>
|     `-CallExpr 0x559827430620 <col:9, col:83> 'int'
|       |-ImplicitCastExpr 0x559827430608 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5598274304f0 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x55982742ff38 'z_impl_k_pipe_get' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x559827430678 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x559827430518 <col:27> 'struct k_pipe *' lvalue ParmVar 0x559827430030 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x559827430690 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x559827430540 <col:33> 'void *' lvalue ParmVar 0x5598274300a8 'data' 'void *'
|       |-ImplicitCastExpr 0x5598274306a8 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x559827430568 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x559827430118 'bytes_to_read' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x5598274306c0 <col:54> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x559827430590 <col:54> 'size_t *' lvalue ParmVar 0x559827430188 'bytes_read' 'size_t *'
|       |-ImplicitCastExpr 0x5598274306d8 <col:66> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5598274305b8 <col:66> 'size_t':'unsigned long' lvalue ParmVar 0x5598274301f8 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x5598274306f0 <col:76> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5598274305e0 <col:76> 's32_t':'int' lvalue ParmVar 0x559827430268 'timeout' 's32_t':'int'
|-FunctionDecl 0x5598274308f0 <line:860:1, col:85> col:12 used z_impl_k_poll 'int (struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x559827430768 <col:26, col:48> col:48 events 'struct k_poll_event *'
| |-ParmVarDecl 0x5598274307e0 <col:56, col:60> col:60 num_events 'int'
| `-ParmVarDecl 0x559827430850 <col:72, col:78> col:78 timeout 's32_t':'int'
|-FunctionDecl 0x559827430b58 prev 0x55982740eb18 <line:861:1, line:870:1> line:861:19 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x5598274309d0 <col:26, col:48> col:48 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x559827430a48 <col:56, col:60> col:60 used num_events 'int'
| |-ParmVarDecl 0x559827430ab8 <col:72, col:78> col:78 used timeout 's32_t':'int'
| `-CompoundStmt 0x559827430ec0 <line:862:1, line:870:1>
|   |-DoStmt 0x559827430cf0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827430cb8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827430c68 <col:2, col:39>
|   | `-IntegerLiteral 0x559827430cd0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827430ea8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:869:2, col:50>
|     `-CallExpr 0x559827430e20 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x559827430e08 <col:9> 'int (*)(struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827430d10 <col:9> 'int (struct k_poll_event *, int, s32_t)' Function 0x5598274308f0 'z_impl_k_poll' 'int (struct k_poll_event *, int, s32_t)'
|       |-ImplicitCastExpr 0x559827430e60 <col:23> 'struct k_poll_event *' <LValueToRValue>
|       | `-DeclRefExpr 0x559827430d38 <col:23> 'struct k_poll_event *' lvalue ParmVar 0x5598274309d0 'events' 'struct k_poll_event *'
|       |-ImplicitCastExpr 0x559827430e78 <col:31> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x559827430d60 <col:31> 'int' lvalue ParmVar 0x559827430a48 'num_events' 'int'
|       `-ImplicitCastExpr 0x559827430e90 <col:43> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x559827430d88 <col:43> 's32_t':'int' lvalue ParmVar 0x559827430ab8 'timeout' 's32_t':'int'
|-FunctionDecl 0x559827430fd0 <line:873:1, col:68> col:13 used z_impl_k_poll_signal_init 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x559827430f08 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
|-FunctionDecl 0x559827431128 prev 0x55982740ed20 <line:874:1, line:884:1> line:874:20 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x5598274310a0 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x5598274313d8 <line:875:1, line:884:1>
|   |-DoStmt 0x5598274312b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827431278 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827431228 <col:2, col:39>
|   | `-IntegerLiteral 0x559827431290 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559827431390 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:883:2, col:34> 'void'
|     |-ImplicitCastExpr 0x559827431378 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5598274312d0 <col:2> 'void (struct k_poll_signal *)' Function 0x559827430fd0 'z_impl_k_poll_signal_init' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x5598274313c0 <col:28> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x5598274312f8 <col:28> 'struct k_poll_signal *' lvalue ParmVar 0x5598274310a0 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x5598274314a8 prev 0x55982740efd0 <line:887:1, col:69> col:13 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x559827431420 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
|-FunctionDecl 0x559827431600 prev 0x55982740ee78 <line:888:1, line:898:1> line:888:20 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x559827431578 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x559827431858 <line:889:1, line:898:1>
|   |-DoStmt 0x559827431788 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827431750 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827431700 <col:2, col:39>
|   | `-IntegerLiteral 0x559827431768 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559827431810 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:897:2, col:35> 'void'
|     |-ImplicitCastExpr 0x5598274317f8 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5598274317a8 <col:2> 'void (struct k_poll_signal *)' Function 0x5598274314a8 'z_impl_k_poll_signal_reset' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x559827431840 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x5598274317d0 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x559827431578 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x559827431a28 <line:901:1, col:108> col:13 used z_impl_k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' extern
| |-ParmVarDecl 0x5598274318a0 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x559827431918 <col:71, col:86> col:86 signaled 'unsigned int *'
| `-ParmVarDecl 0x559827431990 <col:96, col:102> col:102 result 'int *'
|-FunctionDecl 0x559827431c90 prev 0x55982740f3d0 <line:902:1, line:912:1> line:902:20 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x559827431b08 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x559827431b80 <col:71, col:86> col:86 used signaled 'unsigned int *'
| |-ParmVarDecl 0x559827431bf8 <col:96, col:102> col:102 used result 'int *'
| `-CompoundStmt 0x559827431fe8 <line:903:1, line:912:1>
|   |-DoStmt 0x559827431e28 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827431df0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827431da0 <col:2, col:39>
|   | `-IntegerLiteral 0x559827431e08 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559827431f60 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:911:2, col:53> 'void'
|     |-ImplicitCastExpr 0x559827431f48 <col:2> 'void (*)(struct k_poll_signal *, unsigned int *, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559827431e48 <col:2> 'void (struct k_poll_signal *, unsigned int *, int *)' Function 0x559827431a28 'z_impl_k_poll_signal_check' 'void (struct k_poll_signal *, unsigned int *, int *)'
|     |-ImplicitCastExpr 0x559827431fa0 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|     | `-DeclRefExpr 0x559827431e70 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x559827431b08 'signal' 'struct k_poll_signal *'
|     |-ImplicitCastExpr 0x559827431fb8 <col:37> 'unsigned int *' <LValueToRValue>
|     | `-DeclRefExpr 0x559827431e98 <col:37> 'unsigned int *' lvalue ParmVar 0x559827431b80 'signaled' 'unsigned int *'
|     `-ImplicitCastExpr 0x559827431fd0 <col:47> 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x559827431ec0 <col:47> 'int *' lvalue ParmVar 0x559827431bf8 'result' 'int *'
|-FunctionDecl 0x559827432140 <line:915:1, col:80> col:12 used z_impl_k_poll_signal_raise 'int (struct k_poll_signal *, int)' extern
| |-ParmVarDecl 0x559827432030 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
| `-ParmVarDecl 0x5598274320a8 <col:70, col:74> col:74 result 'int'
|-FunctionDecl 0x559827432328 prev 0x55982740fb20 <line:916:1, line:925:1> line:916:19 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x559827432218 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x559827432290 <col:70, col:74> col:74 used result 'int'
| `-CompoundStmt 0x559827432640 <line:917:1, line:925:1>
|   |-DoStmt 0x5598274324b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827432480 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827432430 <col:2, col:39>
|   | `-IntegerLiteral 0x559827432498 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x559827432628 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:924:2, col:50>
|     `-CallExpr 0x5598274325c0 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x5598274325a8 <col:9> 'int (*)(struct k_poll_signal *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5598274324d8 <col:9> 'int (struct k_poll_signal *, int)' Function 0x559827432140 'z_impl_k_poll_signal_raise' 'int (struct k_poll_signal *, int)'
|       |-ImplicitCastExpr 0x5598274325f8 <col:36> 'struct k_poll_signal *' <LValueToRValue>
|       | `-DeclRefExpr 0x559827432500 <col:36> 'struct k_poll_signal *' lvalue ParmVar 0x559827432218 'signal' 'struct k_poll_signal *'
|       `-ImplicitCastExpr 0x559827432610 <col:44> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x559827432528 <col:44> 'int' lvalue ParmVar 0x559827432290 'result' 'int'
|-FunctionDecl 0x559827432800 <line:928:1, col:48> col:13 used z_impl_k_str_out 'void (char *, size_t)' extern
| |-ParmVarDecl 0x559827432678 <col:30, col:37> col:37 c 'char *'
| `-ParmVarDecl 0x5598274326e8 <col:40, col:47> col:47 n 'size_t':'unsigned long'
|-FunctionDecl 0x5598274329c8 <line:929:1, line:939:1> line:929:20 k_str_out 'void (char *, size_t)' static inline
| |-ParmVarDecl 0x5598274328c8 <col:30, col:37> col:37 used c 'char *'
| |-ParmVarDecl 0x559827432938 <col:40, col:47> col:47 used n 'size_t':'unsigned long'
| `-CompoundStmt 0x559827432cc8 <line:930:1, line:939:1>
|   |-DoStmt 0x559827432b58 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827432b20 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827432ad0 <col:2, col:39>
|   | `-IntegerLiteral 0x559827432b38 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x559827432c60 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:938:2, col:23> 'void'
|     |-ImplicitCastExpr 0x559827432c48 <col:2> 'void (*)(char *, size_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559827432b78 <col:2> 'void (char *, size_t)' Function 0x559827432800 'z_impl_k_str_out' 'void (char *, size_t)'
|     |-ImplicitCastExpr 0x559827432c98 <col:19> 'char *' <LValueToRValue>
|     | `-DeclRefExpr 0x559827432ba0 <col:19> 'char *' lvalue ParmVar 0x5598274328c8 'c' 'char *'
|     `-ImplicitCastExpr 0x559827432cb0 <col:22> 'size_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x559827432bc8 <col:22> 'size_t':'unsigned long' lvalue ParmVar 0x559827432938 'n' 'size_t':'unsigned long'
|-FunctionDecl 0x559827432da0 <line:942:1, col:59> col:12 used z_impl_k_float_disable 'int (struct k_thread *)' extern
| `-ParmVarDecl 0x559827432d10 <col:35, col:53> col:53 thread 'struct k_thread *'
|-FunctionDecl 0x559827432f00 prev 0x559827414f38 <line:943:1, line:952:1> line:943:19 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x559827432e70 <col:35, col:53> col:53 used thread 'struct k_thread *'
| `-CompoundStmt 0x5598274341c0 <line:944:1, line:952:1>
|   |-DoStmt 0x5598274340a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x559827434070 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x559827434020 <col:2, col:39>
|   | `-IntegerLiteral 0x559827434088 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5598274341a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:951:2, col:38>
|     `-CallExpr 0x559827434160 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x559827434148 <col:9> 'int (*)(struct k_thread *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5598274340c8 <col:9> 'int (struct k_thread *)' Function 0x559827432da0 'z_impl_k_float_disable' 'int (struct k_thread *)'
|       `-ImplicitCastExpr 0x559827434190 <col:32> 'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x5598274340f0 <col:32> 'struct k_thread *' lvalue ParmVar 0x559827432e70 'thread' 'struct k_thread *'
|-FunctionDecl 0x5598274342c0 </vagrant/apps/plc_4out/./_build/arm-tfm/install/export/tfm/inc/tfm_gpio_veneers.h:11:1, col:32> col:10 tfm_gpio_read_all 'uint32_t (void)'
|-FunctionDecl 0x559827434490 <line:12:1, col:40> col:9 tfm_gpio_write_all 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x559827434390 <col:28, col:37> col:37 out 'uint32_t':'unsigned int'
|-FunctionDecl 0x5598274345d0 <line:13:1, col:46> col:9 tfm_gpio_enable_outputs 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x559827434548 <col:33, col:42> col:42 pins 'uint32_t':'unsigned int'
|-FunctionDecl 0x559827434790 <line:14:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559827434688 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5598274348d0 <line:16:1, col:43> col:9 tfm_gpio_enable_output 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559827434848 <col:32, col:40> col:40 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559827434a10 <line:17:1, col:33> col:9 tfm_gpio_set 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559827434988 <col:22, col:30> col:30 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559827434b50 <line:18:1, col:35> col:9 tfm_gpio_clear 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559827434ac8 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559827434c90 <line:19:1, col:37> col:9 tfm_gpio_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559827434c08 <col:26, col:34> col:34 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559827434dd0 prev 0x559827434790 <line:20:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559827434d48 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-RecordDecl 0x559827434e78 <line:34:9, line:38:1> line:34:9 struct definition
| |-FieldDecl 0x559827434f30 <line:35:5, col:13> col:13 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x559827434f88 <line:36:5, col:13> col:13 polarity 'uint8_t':'unsigned char'
| `-FieldDecl 0x559827435070 <line:37:5, col:21> col:12 cb 'void (*)(void)'
|-TypedefDecl 0x559827435110 <line:34:1, line:38:3> col:3 referenced gpio_int_config 'struct gpio_int_config':'gpio_int_config'
| `-ElaboratedType 0x5598274350c0 'struct gpio_int_config' sugar
|   `-RecordType 0x559827434f00 'gpio_int_config'
|     `-Record 0x559827434e78 ''
|-FunctionDecl 0x559827435390 <line:40:1, col:68> col:9 tfm_gpio_interrupt_enable 'uint8_t (uint8_t, gpio_int_config *)'
| |-ParmVarDecl 0x559827435190 <col:35, col:43> col:43 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x559827435278 <col:48, col:65> col:65 cfg 'gpio_int_config *'
|-FunctionDecl 0x5598274354d8 <line:41:1, col:47> col:9 tfm_gpio_interrupt_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x559827435450 <col:36, col:44> col:44 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x559827435598 </vagrant/apps/plc_4out/./inc/plc_platform.h:5:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x55982722a770 'short'
|-TypedefDecl 0x559827435608 <line:6:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x55982722a7f0 'unsigned char'
|-EnumDecl 0x559827435660 <line:25:9, line:29:1> line:25:9
| |-EnumConstantDecl 0x559827435740 <line:26:2, col:6> col:2 referenced R 'int'
| | `-IntegerLiteral 0x559827435720 <col:6> 'int' 2
| |-EnumConstantDecl 0x5598274357a8 <line:27:2, col:6> col:2 referenced G 'int'
| | `-IntegerLiteral 0x559827435788 <col:6> 'int' 3
| `-EnumConstantDecl 0x559827435810 <line:28:2, col:6> col:2 referenced B 'int'
|   `-IntegerLiteral 0x5598274357f0 <col:6> 'int' 4
|-TypedefDecl 0x5598274358b0 <line:25:1, line:29:3> col:3 referenced LED 'enum LED':'LED'
| `-ElaboratedType 0x559827435860 'enum LED' sugar
|   `-EnumType 0x559827435700 'LED'
|     `-Enum 0x559827435660 ''
|-FunctionDecl 0x559827435ae0 <line:31:1, col:56> col:6 used enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x559827435958 <col:25, col:34> col:34 pins 'uint8_t *'
| `-ParmVarDecl 0x5598274359c8 <col:40, col:48> col:48 num_pins 'uint8_t':'unsigned char'
|-FunctionDecl 0x559827435ca0 <line:33:1, col:35> col:6 enable_pin_output 'void (uint8_t)'
| `-ParmVarDecl 0x559827435ba0 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559827435dd8 <line:35:1, col:24> col:6 used read_in_table 'void (void)'
|-FunctionDecl 0x559827435f08 <line:37:1, col:26> col:6 used write_out_table 'void (void)'
|-FunctionDecl 0x559827438a28 <line:41:1, col:25> col:6 set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x5598274389a0 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
| `-FullComment 0x5598274b4960 <line:39:4, col:42>
|   `-ParagraphComment 0x5598274b4930 <col:4, col:42>
|     `-TextComment 0x5598274b4900 <col:4, col:42> Text="************** For User ***************"
|-FunctionDecl 0x559827438b68 <line:43:1, col:25> col:6 clr_pin 'void (uint8_t)'
| `-ParmVarDecl 0x559827438ae0 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559827438dc0 <line:45:1, col:37> col:6 used write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x559827438c20 <col:16, col:24> col:24 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x559827438cb0 <col:29, col:34> col:34 val 'BOOL':'unsigned char'
|-FunctionDecl 0x559827438f40 <line:47:1, col:26> col:6 used read_pin 'BOOL (uint8_t)'
| `-ParmVarDecl 0x559827438e80 <col:15, col:23> col:23 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x559827439120 <line:49:1, col:22> col:6 LED_on 'void (LED)'
| `-ParmVarDecl 0x559827439020 <col:13, col:17> col:17 color 'LED':'LED'
|-FunctionDecl 0x559827439260 <line:51:1, col:23> col:6 used LED_off 'void (LED)'
| `-ParmVarDecl 0x5598274391d8 <col:14, col:18> col:18 color 'LED':'LED'
|-FunctionDecl 0x559827439420 <line:53:1, col:24> col:6 used read_LED 'BOOL (LED)'
| `-ParmVarDecl 0x559827439318 <col:15, col:19> col:19 color 'LED':'LED'
|-FunctionDecl 0x559827439660 <line:55:1, col:33> col:6 used write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x5598274394d8 <col:16, col:20> col:20 color 'LED':'LED'
| `-ParmVarDecl 0x559827439548 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-FunctionDecl 0x5598274397a8 <line:57:1, col:40> col:6 used read_button_active_low 'BOOL (uint8_t)'
| `-ParmVarDecl 0x559827439720 <col:29, col:37> col:37 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x559827439868 prev 0x559827435598 </vagrant/apps/plc_4out/./inc/ladder.h:7:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x55982722a770 'short'
|-TypedefDecl 0x5598274398d8 prev 0x559827435608 <line:8:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x55982722a7f0 'unsigned char'
|-VarDecl 0x559827439a18 <line:13:1, col:99> col:16 used output_pins 'uint8_t [5]' static cinit
| |-InitListExpr 0x559827439bd8 <col:68, col:99> 'uint8_t [5]'
| | |-ImplicitCastExpr 0x559827439c18 </vagrant/apps/plc_4out/./inc/plc_platform.h:11:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x559827439ad0 <col:14> 'int' 3
| | |-ImplicitCastExpr 0x559827439c38 <line:16:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x559827439af0 <col:14> 'int' 8
| | |-ImplicitCastExpr 0x559827439c60 <line:17:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x559827439b10 <col:14> 'int' 9
| | |-ImplicitCastExpr 0x559827439c98 <line:18:15> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x559827439b30 <col:15> 'int' 10
| | `-ImplicitCastExpr 0x559827439cb0 <line:19:15> 'uint8_t':'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x559827439b50 <col:15> 'int' 11
| `-SectionAttr 0x559827439a78 </vagrant/apps/plc_4out/./inc/ladder.h:13:45, col:62> section ".rodata"
|-FunctionDecl 0x559827439e48 <line:18:1, col:19> col:6 used PlcCycle 'void (void)'
| `-FullComment 0x5598274b4a30 <line:15:4, col:57>
|   `-ParagraphComment 0x5598274b4a00 <col:4, col:57>
|     `-TextComment 0x5598274b49d0 <col:4, col:57> Text="************ DO NOT EDIT THESE FUNCTIONS *************"
|-FunctionDecl 0x559827439f98 <line:21:1, col:36> col:6 plc_callback 'void (struct k_timer *)'
| `-ParmVarDecl 0x559827439f10 <col:19, col:35> col:35 t 'struct k_timer *'
|-FunctionDecl 0x55982743a0d0 <line:24:1, col:19> col:6 init_plc 'void (void)'
|-FunctionDecl 0x55982743a2e0 <line:31:1, col:27> col:6 Read_U_b_XMStart 'BOOL (void)'
| `-FullComment 0x5598274b4b00 <line:29:4, col:57>
|   `-ParagraphComment 0x5598274b4ad0 <col:4, col:57>
|     `-TextComment 0x5598274b4aa0 <col:4, col:57> Text="*********** FUNCTIONS CREATED BY LDMICRO *************"
|-FunctionDecl 0x55982743a410 <line:33:1, col:25> col:6 Read_U_b_XStop 'BOOL (void)'
|-FunctionDecl 0x55982743a540 <line:35:1, col:24> col:6 Read_U_b_YLED 'BOOL (void)'
|-FunctionDecl 0x55982743a6b0 <line:36:1, col:27> col:6 Write_U_b_YLED 'void (BOOL)'
| `-ParmVarDecl 0x55982743a5f0 <col:21, col:26> col:26 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55982743a7e8 <line:38:1, col:25> col:6 Read_U_b_YOut0 'BOOL (void)'
|-FunctionDecl 0x55982743baa0 <line:39:1, col:28> col:6 Write_U_b_YOut0 'void (BOOL)'
| `-ParmVarDecl 0x55982743a898 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55982743bbd8 <line:41:1, col:25> col:6 Read_U_b_YOut1 'BOOL (void)'
|-FunctionDecl 0x55982743bd10 <line:42:1, col:28> col:6 Write_U_b_YOut1 'void (BOOL)'
| `-ParmVarDecl 0x55982743bc88 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55982743be48 <line:44:1, col:25> col:6 Read_U_b_YOut2 'BOOL (void)'
|-FunctionDecl 0x55982743bf80 <line:45:1, col:28> col:6 Write_U_b_YOut2 'void (BOOL)'
| `-ParmVarDecl 0x55982743bef8 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55982743c0b8 <line:47:1, col:25> col:6 Read_U_b_YOut3 'BOOL (void)'
|-FunctionDecl 0x55982743c1f0 <line:48:1, col:28> col:6 Write_U_b_YOut3 'void (BOOL)'
| `-ParmVarDecl 0x55982743c168 <col:22, col:27> col:27 v 'BOOL':'unsigned char'
|-VarDecl 0x55982743c2e8 <./src/ladder.c:7:1, col:73> col:16 used LED_pins 'uint8_t [3]' static cinit
| |-InitListExpr 0x55982743c458 <col:65, col:73> 'uint8_t [3]'
| | |-ImplicitCastExpr 0x55982743c498 <col:66> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x55982743c3a0 <col:66> 'int' 2
| | |-ImplicitCastExpr 0x55982743c4b8 <col:69> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x55982743c3c0 <col:69> 'int' 3
| | `-ImplicitCastExpr 0x55982743c4e0 <col:72> 'uint8_t':'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x55982743c3e0 <col:72> 'int' 4
| `-SectionAttr 0x55982743c348 <col:42, col:59> section ".rodata"
|-VarDecl 0x55982743c5a8 <line:11:1, col:28> col:17 used time_old 'uint32_t':'unsigned int' static cinit
| `-ImplicitCastExpr 0x55982743c628 <col:28> 'uint32_t':'unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x55982743c608 <col:28> 'int' 0
|-VarDecl 0x55982743c650 <line:12:1, col:28> col:17 used time_cnt 'uint32_t':'unsigned int' static cinit
| `-ImplicitCastExpr 0x55982743c6d0 <col:28> 'uint32_t':'unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x55982743c6b0 <col:28> 'int' 0
|-FunctionDecl 0x55982743c798 prev 0x559827439f98 <line:14:1, line:22:1> line:14:6 plc_callback 'void (struct k_timer *)'
| |-ParmVarDecl 0x55982743c710 <col:19, col:35> col:35 t 'struct k_timer *'
| `-CompoundStmt 0x55982743c978 <col:38, line:22:1>
|   |-CallExpr 0x55982743c880 <line:19:2, col:16> 'void'
|   | `-ImplicitCastExpr 0x55982743c868 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55982743c840 <col:2> 'void (void)' Function 0x559827435dd8 'read_in_table' 'void (void)'
|   |-CallExpr 0x55982743c8e8 <line:20:2, col:11> 'void'
|   | `-ImplicitCastExpr 0x55982743c8d0 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55982743c8a8 <col:2> 'void (void)' Function 0x559827439e48 'PlcCycle' 'void (void)'
|   `-CallExpr 0x55982743c950 <line:21:2, col:18> 'void'
|     `-ImplicitCastExpr 0x55982743c938 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x55982743c910 <col:2> 'void (void)' Function 0x559827435f08 'write_out_table' 'void (void)'
|-FunctionDecl 0x55982743ca30 prev 0x55982743a0d0 <line:24:1, line:40:1> line:24:6 init_plc 'void (void)'
| `-CompoundStmt 0x55982743d5a8 <col:21, line:40:1>
|   |-ForStmt 0x55982743ce90 <line:25:2, line:27:2>
|   | |-DeclStmt 0x55982743cb68 <line:25:6, col:15>
|   | | `-VarDecl 0x55982743cae8 <col:6, col:14> col:10 used i 'int' cinit
|   | |   `-IntegerLiteral 0x55982743cb48 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55982743cbe0 <col:17, /vagrant/apps/plc_4out/./inc/ladder.h:12:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x55982743cbc8 <./src/ladder.c:25:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55982743cb80 <col:17> 'int' lvalue Var 0x55982743cae8 'i' 'int'
|   | | `-IntegerLiteral 0x55982743cba8 </vagrant/apps/plc_4out/./inc/ladder.h:12:18> 'int' 5
|   | |-UnaryOperator 0x55982743cc30 <./src/ladder.c:25:31, col:32> 'int' postfix '++'
|   | | `-DeclRefExpr 0x55982743cc08 <col:31> 'int' lvalue Var 0x55982743cae8 'i' 'int'
|   | `-CompoundStmt 0x55982743ce78 <col:36, line:27:2>
|   |   `-CallExpr 0x55982743cde0 <line:26:3, col:41> 'void'
|   |     |-ImplicitCastExpr 0x55982743cdc8 <col:3> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55982743cc50 <col:3> 'void (const char *, ...)' Function 0x55982737cac0 'printk' 'void (const char *, ...)'
|   |     |-ImplicitCastExpr 0x55982743ce30 <col:10> 'const char *' <BitCast>
|   |     | `-ImplicitCastExpr 0x55982743ce18 <col:10> 'char *' <ArrayToPointerDecay>
|   |     |   `-StringLiteral 0x55982743ccb8 <col:10> 'char [13]' lvalue "Using PIN%d\n"
|   |     `-ImplicitCastExpr 0x55982743ce60 <col:27, col:40> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55982743ce48 <col:27, col:40> 'uint8_t':'unsigned char' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x55982743cd70 <col:27, col:40> 'uint8_t':'unsigned char' lvalue
|   |           |-ImplicitCastExpr 0x55982743cd40 <col:27> 'uint8_t *' <ArrayToPointerDecay>
|   |           | `-DeclRefExpr 0x55982743ccf0 <col:27> 'uint8_t [5]' lvalue Var 0x559827439a18 'output_pins' 'uint8_t [5]'
|   |           `-ImplicitCastExpr 0x55982743cd58 <col:39> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55982743cd18 <col:39> 'int' lvalue Var 0x55982743cae8 'i' 'int'
|   |-CallExpr 0x55982743cfb0 <line:28:2, col:42> 'void'
|   | |-ImplicitCastExpr 0x55982743cf98 <col:2> 'void (*)(uint8_t *, uint8_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55982743cec8 <col:2> 'void (uint8_t *, uint8_t)' Function 0x559827435ae0 'enable_pin_outputs' 'void (uint8_t *, uint8_t)'
|   | |-ImplicitCastExpr 0x55982743cfe8 <col:21> 'uint8_t *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x55982743cef0 <col:21> 'uint8_t [5]' lvalue Var 0x559827439a18 'output_pins' 'uint8_t [5]'
|   | `-ImplicitCastExpr 0x55982743d000 </vagrant/apps/plc_4out/./inc/ladder.h:12:18> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x55982743cf18 <col:18> 'int' 5
|   |-IfStmt 0x55982743d3c8 <./src/ladder.c:31:2, line:36:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-IntegerLiteral 0x55982743d018 </vagrant/apps/plc_4out/./inc/ladder.h:10:17> 'int' 0
|   | |-CompoundStmt 0x55982743d398 <./src/ladder.c:31:15, line:36:2>
|   | | |-CallExpr 0x55982743d0c0 <line:32:3, col:44> 'void'
|   | | | |-ImplicitCastExpr 0x55982743d0a8 <col:3> 'void (*)(uint8_t *, uint8_t)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55982743d038 <col:3> 'void (uint8_t *, uint8_t)' Function 0x559827435ae0 'enable_pin_outputs' 'void (uint8_t *, uint8_t)'
|   | | | |-ImplicitCastExpr 0x55982743d0f8 <col:22> 'uint8_t *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x55982743d060 <col:22> 'uint8_t [3]' lvalue Var 0x55982743c2e8 'LED_pins' 'uint8_t [3]'
|   | | | `-ImplicitCastExpr 0x55982743d110 <line:6:22> 'uint8_t':'unsigned char' <IntegralCast>
|   | | |   `-IntegerLiteral 0x55982743d088 <col:22> 'int' 3
|   | | |-CallExpr 0x55982743d1f0 <line:33:3, col:12> 'void'
|   | | | |-ImplicitCastExpr 0x55982743d1d8 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55982743d128 <col:3> 'void (LED)' Function 0x559827439260 'LED_off' 'void (LED)'
|   | | | `-ImplicitCastExpr 0x55982743d220 <col:11> 'LED':'LED' <IntegralCast>
|   | | |   `-DeclRefExpr 0x55982743d150 <col:11> 'int' EnumConstant 0x559827435740 'R' 'int'
|   | | |-CallExpr 0x55982743d2a0 <line:34:3, col:12> 'void'
|   | | | |-ImplicitCastExpr 0x55982743d288 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55982743d238 <col:3> 'void (LED)' Function 0x559827439260 'LED_off' 'void (LED)'
|   | | | `-ImplicitCastExpr 0x55982743d2d0 <col:11> 'LED':'LED' <IntegralCast>
|   | | |   `-DeclRefExpr 0x55982743d260 <col:11> 'int' EnumConstant 0x5598274357a8 'G' 'int'
|   | | `-CallExpr 0x55982743d350 <line:35:3, col:12> 'void'
|   | |   |-ImplicitCastExpr 0x55982743d338 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55982743d2e8 <col:3> 'void (LED)' Function 0x559827439260 'LED_off' 'void (LED)'
|   | |   `-ImplicitCastExpr 0x55982743d380 <col:11> 'LED':'LED' <IntegralCast>
|   | |     `-DeclRefExpr 0x55982743d310 <col:11> 'int' EnumConstant 0x559827435810 'B' 'int'
|   | `-<<<NULL>>>
|   |-CallExpr 0x55982743d440 <line:38:2, col:18> 'void'
|   | `-ImplicitCastExpr 0x55982743d428 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55982743d400 <col:2> 'void (void)' Function 0x559827435f08 'write_out_table' 'void (void)'
|   `-CallExpr 0x55982743d518 <line:39:2, col:28> 'void'
|     |-ImplicitCastExpr 0x55982743d500 <col:2> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982743d468 <col:2> 'void (const char *, ...)' Function 0x55982737cac0 'printk' 'void (const char *, ...)'
|     `-ImplicitCastExpr 0x55982743d560 <col:9> 'const char *' <BitCast>
|       `-ImplicitCastExpr 0x55982743d548 <col:9> 'char *' <ArrayToPointerDecay>
|         `-StringLiteral 0x55982743d4c8 <col:9> 'char [17]' lvalue "plc initialized\n"
|-VarDecl 0x55982743d5f0 <line:45:1, col:21> col:6 used master_state 'BOOL':'unsigned char' cinit
| |-ImplicitCastExpr 0x55982743d670 <col:21> 'BOOL':'unsigned char' <IntegralCast>
| | `-IntegerLiteral 0x55982743d650 <col:21> 'int' 0
| `-FullComment 0x5598274b4bd0 <line:42:4, col:71>
|   `-ParagraphComment 0x5598274b4ba0 <col:4, col:71>
|     `-TextComment 0x5598274b4b70 <col:4, col:71> Text="************** Define Auto-Generated Functions Below ***************"
|-VarDecl 0x55982743d698 <line:46:1, col:19> col:6 used out0_state 'BOOL':'unsigned char' cinit
| `-ImplicitCastExpr 0x55982743d718 <col:19> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x55982743d6f8 <col:19> 'int' 0
|-VarDecl 0x55982743d740 <line:47:1, col:19> col:6 used out1_state 'BOOL':'unsigned char' cinit
| `-ImplicitCastExpr 0x55982743d7c0 <col:19> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x55982743d7a0 <col:19> 'int' 0
|-VarDecl 0x55982743d7e8 <line:48:1, col:19> col:6 used out2_state 'BOOL':'unsigned char' cinit
| `-ImplicitCastExpr 0x55982743d868 <col:19> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x55982743d848 <col:19> 'int' 0
|-VarDecl 0x55982743d890 <line:49:1, col:19> col:6 used out3_state 'BOOL':'unsigned char' cinit
| `-ImplicitCastExpr 0x55982743d910 <col:19> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x55982743d8f0 <col:19> 'int' 0
|-VarDecl 0x55982743d938 <line:52:1, col:6> col:6 used readStart 'BOOL':'unsigned char'
|-FunctionDecl 0x55982743eac0 prev 0x55982743a2e0 <line:54:1, line:66:1> line:54:6 Read_U_b_XMStart 'BOOL (void)'
| `-CompoundStmt 0x55982743f138 <col:29, line:66:1>
|   |-BinaryOperator 0x55982743ec88 <line:55:2, col:41> 'BOOL':'unsigned char' '='
|   | |-DeclRefExpr 0x55982743eb60 <col:2> 'BOOL':'unsigned char' lvalue Var 0x55982743d938 'readStart' 'BOOL':'unsigned char'
|   | `-CallExpr 0x55982743ec40 <col:14, col:41> 'BOOL':'unsigned char'
|   |   |-ImplicitCastExpr 0x55982743ec28 <col:14> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55982743eb88 <col:14> 'BOOL (uint8_t)' Function 0x5598274397a8 'read_button_active_low' 'BOOL (uint8_t)'
|   |   `-ImplicitCastExpr 0x55982743ec70 </vagrant/apps/plc_4out/./inc/plc_platform.h:12:14> 'uint8_t':'unsigned char' <IntegralCast>
|   |     `-IntegerLiteral 0x55982743ebb0 <col:14> 'int' 4
|   |-IfStmt 0x55982743f0a8 <./src/ladder.c:58:2, line:64:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55982743ed60 <line:58:6, col:22> 'int' '!='
|   | | |-ImplicitCastExpr 0x55982743ed18 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x55982743ed00 <col:6> 'BOOL':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55982743ecb0 <col:6> 'BOOL':'unsigned char' lvalue Var 0x55982743d5f0 'master_state' 'BOOL':'unsigned char'
|   | | `-ImplicitCastExpr 0x55982743ed48 <col:22> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x55982743ed30 <col:22> 'BOOL':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55982743ecd8 <col:22> 'BOOL':'unsigned char' lvalue Var 0x55982743d938 'readStart' 'BOOL':'unsigned char'
|   | |-CompoundStmt 0x55982743f088 <col:33, line:64:2>
|   | | |-BinaryOperator 0x55982743edf0 <line:59:3, col:18> 'BOOL':'unsigned char' '='
|   | | | |-DeclRefExpr 0x55982743ed88 <col:3> 'BOOL':'unsigned char' lvalue Var 0x55982743d5f0 'master_state' 'BOOL':'unsigned char'
|   | | | `-ImplicitCastExpr 0x55982743edd8 <col:18> 'BOOL':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55982743edb0 <col:18> 'BOOL':'unsigned char' lvalue Var 0x55982743d938 'readStart' 'BOOL':'unsigned char'
|   | | `-IfStmt 0x55982743f050 <line:60:3, line:63:3>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-ImplicitCastExpr 0x55982743ee40 <line:60:7> 'BOOL':'unsigned char' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55982743ee18 <col:7> 'BOOL':'unsigned char' lvalue Var 0x55982743d938 'readStart' 'BOOL':'unsigned char'
|   | |   |-CompoundStmt 0x55982743f030 <col:18, line:63:3>
|   | |   | |-BinaryOperator 0x55982743eee8 <line:61:4, col:31> 'uint32_t':'unsigned int' '='
|   | |   | | |-DeclRefExpr 0x55982743ee58 <col:4> 'uint32_t':'unsigned int' lvalue Var 0x55982743c5a8 'time_old' 'uint32_t':'unsigned int'
|   | |   | | `-CallExpr 0x55982743eec0 <col:15, col:31> 'u32_t':'unsigned int'
|   | |   | |   `-ImplicitCastExpr 0x55982743eea8 <col:15> 'u32_t (*)(void)' <FunctionToPointerDecay>
|   | |   | |     `-DeclRefExpr 0x55982743ee80 <col:15> 'u32_t (void)' Function 0x5598273d9eb8 'k_uptime_get_32' 'u32_t (void)'
|   | |   | `-CallExpr 0x55982743efd0 <line:62:4, col:34> 'void'
|   | |   |   |-ImplicitCastExpr 0x55982743efb8 <col:4> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x55982743ef10 <col:4> 'void (const char *, ...)' Function 0x55982737cac0 'printk' 'void (const char *, ...)'
|   | |   |   `-ImplicitCastExpr 0x55982743f018 <col:11> 'const char *' <BitCast>
|   | |   |     `-ImplicitCastExpr 0x55982743f000 <col:11> 'char *' <ArrayToPointerDecay>
|   | |   |       `-StringLiteral 0x55982743ef78 <col:11> 'char [21]' lvalue "4 Output Started...\n"
|   | |   `-<<<NULL>>>
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55982743f120 <line:65:2, col:9>
|     `-ImplicitCastExpr 0x55982743f108 <col:9> 'BOOL':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55982743f0e0 <col:9> 'BOOL':'unsigned char' lvalue Var 0x55982743d938 'readStart' 'BOOL':'unsigned char'
|-FunctionDecl 0x55982743f1f0 prev 0x55982743a410 <line:68:1, line:70:1> line:68:6 Read_U_b_XStop 'BOOL (void)'
| `-CompoundStmt 0x55982743f350 <col:27, line:70:1>
|   `-ReturnStmt 0x55982743f338 <line:69:2, col:36>
|     `-CallExpr 0x55982743f2f0 <col:9, col:36> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x55982743f2d8 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982743f290 <col:9> 'BOOL (uint8_t)' Function 0x5598274397a8 'read_button_active_low' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x55982743f320 </vagrant/apps/plc_4out/./inc/plc_platform.h:15:14> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x55982743f2b8 <col:14> 'int' 7
|-FunctionDecl 0x55982743f3f8 prev 0x55982743a540 <./src/ladder.c:72:1, line:74:1> line:72:6 Read_U_b_YLED 'BOOL (void)'
| `-CompoundStmt 0x55982743f5c0 <col:26, line:74:1>
|   `-ReturnStmt 0x55982743f5a8 <line:73:2, col:19>
|     `-CallExpr 0x55982743f560 <col:9, col:19> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x55982743f548 <col:9> 'BOOL (*)(LED)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982743f498 <col:9> 'BOOL (LED)' Function 0x559827439420 'read_LED' 'BOOL (LED)'
|       `-ImplicitCastExpr 0x55982743f590 <col:18> 'LED':'LED' <IntegralCast>
|         `-DeclRefExpr 0x55982743f4c0 <col:18> 'int' EnumConstant 0x5598274357a8 'G' 'int'
|-FunctionDecl 0x55982743f670 prev 0x55982743a6b0 <line:76:1, line:78:1> line:76:6 Write_U_b_YLED 'void (BOOL)'
| |-ParmVarDecl 0x55982743f5e8 <col:21, col:26> col:26 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x55982743f868 <col:29, line:78:1>
|   `-CallExpr 0x55982743f800 <line:77:2, col:16> 'void'
|     |-ImplicitCastExpr 0x55982743f7e8 <col:2> 'void (*)(LED, BOOL)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55982743f718 <col:2> 'void (LED, BOOL)' Function 0x559827439660 'write_LED' 'void (LED, BOOL)'
|     |-ImplicitCastExpr 0x55982743f838 <col:12> 'LED':'LED' <IntegralCast>
|     | `-DeclRefExpr 0x55982743f740 <col:12> 'int' EnumConstant 0x5598274357a8 'G' 'int'
|     `-ImplicitCastExpr 0x55982743f850 <col:15> 'BOOL':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55982743f768 <col:15> 'BOOL':'unsigned char' lvalue ParmVar 0x55982743f5e8 'v' 'BOOL':'unsigned char'
|-FunctionDecl 0x55982743f910 prev 0x55982743a7e8 <line:80:1, line:82:1> line:80:6 Read_U_b_YOut0 'BOOL (void)'
| `-CompoundStmt 0x55982743fa70 <col:27, line:82:1>
|   `-ReturnStmt 0x55982743fa58 <line:81:2, col:22>
|     `-CallExpr 0x55982743fa10 <col:9, col:22> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x55982743f9f8 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55982743f9b0 <col:9> 'BOOL (uint8_t)' Function 0x559827438f40 'read_pin' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x55982743fa40 </vagrant/apps/plc_4out/./inc/plc_platform.h:16:14> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x55982743f9d8 <col:14> 'int' 8
|-FunctionDecl 0x55982743fb20 prev 0x55982743baa0 <./src/ladder.c:84:1, line:93:1> line:84:6 Write_U_b_YOut0 'void (BOOL)'
| |-ParmVarDecl 0x55982743fa98 <col:22, col:27> col:27 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x5598274401f8 <col:30, line:93:1>
|   |-IfStmt 0x559827440070 <line:85:2, line:91:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55982743fc78 <line:85:6, col:20> 'int' '!='
|   | | |-ImplicitCastExpr 0x55982743fc30 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x55982743fc18 <col:6> 'BOOL':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55982743fbc8 <col:6> 'BOOL':'unsigned char' lvalue Var 0x55982743d698 'out0_state' 'BOOL':'unsigned char'
|   | | `-ImplicitCastExpr 0x55982743fc60 <col:20> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x55982743fc48 <col:20> 'BOOL':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55982743fbf0 <col:20> 'BOOL':'unsigned char' lvalue ParmVar 0x55982743fa98 'v' 'BOOL':'unsigned char'
|   | |-CompoundStmt 0x559827440050 <col:23, line:91:2>
|   | | |-BinaryOperator 0x55982743fd08 <line:86:3, col:16> 'BOOL':'unsigned char' '='
|   | | | |-DeclRefExpr 0x55982743fca0 <col:3> 'BOOL':'unsigned char' lvalue Var 0x55982743d698 'out0_state' 'BOOL':'unsigned char'
|   | | | `-ImplicitCastExpr 0x55982743fcf0 <col:16> 'BOOL':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55982743fcc8 <col:16> 'BOOL':'unsigned char' lvalue ParmVar 0x55982743fa98 'v' 'BOOL':'unsigned char'
|   | | `-IfStmt 0x559827440018 <line:87:3, line:90:3>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-ImplicitCastExpr 0x55982743fd58 <line:87:7> 'BOOL':'unsigned char' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55982743fd30 <col:7> 'BOOL':'unsigned char' lvalue ParmVar 0x55982743fa98 'v' 'BOOL':'unsigned char'
|   | |   |-CompoundStmt 0x55982743fff8 <col:10, line:90:3>
|   | |   | |-BinaryOperator 0x55982743fe00 <line:88:4, col:31> 'uint32_t':'unsigned int' '='
|   | |   | | |-DeclRefExpr 0x55982743fd70 <col:4> 'uint32_t':'unsigned int' lvalue Var 0x55982743c650 'time_cnt' 'uint32_t':'unsigned int'
|   | |   | | `-CallExpr 0x55982743fdd8 <col:15, col:31> 'u32_t':'unsigned int'
|   | |   | |   `-ImplicitCastExpr 0x55982743fdc0 <col:15> 'u32_t (*)(void)' <FunctionToPointerDecay>
|   | |   | |     `-DeclRefExpr 0x55982743fd98 <col:15> 'u32_t (void)' Function 0x5598273d9eb8 'k_uptime_get_32' 'u32_t (void)'
|   | |   | `-CallExpr 0x55982743ff90 <line:89:4, col:61> 'void'
|   | |   |   |-ImplicitCastExpr 0x55982743ff78 <col:4> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x55982743fe28 <col:4> 'void (const char *, ...)' Function 0x55982737cac0 'printk' 'void (const char *, ...)'
|   | |   |   |-ImplicitCastExpr 0x55982743ffe0 <col:11> 'const char *' <BitCast>
|   | |   |   | `-ImplicitCastExpr 0x55982743ffc8 <col:11> 'char *' <ArrayToPointerDecay>
|   | |   |   |   `-StringLiteral 0x55982743fe88 <col:11> 'char [27]' lvalue "Output 0 Enabled at %d ms\n"
|   | |   |   `-BinaryOperator 0x55982743ff50 <col:42, col:53> 'unsigned int' '-'
|   | |   |     |-ImplicitCastExpr 0x55982743ff20 <col:42> 'uint32_t':'unsigned int' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x55982743fed0 <col:42> 'uint32_t':'unsigned int' lvalue Var 0x55982743c650 'time_cnt' 'uint32_t':'unsigned int'
|   | |   |     `-ImplicitCastExpr 0x55982743ff38 <col:53> 'uint32_t':'unsigned int' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x55982743fef8 <col:53> 'uint32_t':'unsigned int' lvalue Var 0x55982743c5a8 'time_old' 'uint32_t':'unsigned int'
|   | |   `-<<<NULL>>>
|   | `-<<<NULL>>>
|   `-CallExpr 0x559827440190 <line:92:2, col:19> 'void'
|     |-ImplicitCastExpr 0x559827440178 <col:2> 'void (*)(uint8_t, BOOL)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5598274400a8 <col:2> 'void (uint8_t, BOOL)' Function 0x559827438dc0 'write_pin' 'void (uint8_t, BOOL)'
|     |-ImplicitCastExpr 0x5598274401c8 </vagrant/apps/plc_4out/./inc/plc_platform.h:16:14> 'uint8_t':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x5598274400d0 <col:14> 'int' 8
|     `-ImplicitCastExpr 0x5598274401e0 <./src/ladder.c:92:18> 'BOOL':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5598274400f0 <col:18> 'BOOL':'unsigned char' lvalue ParmVar 0x55982743fa98 'v' 'BOOL':'unsigned char'
|-FunctionDecl 0x5598274402a8 prev 0x55982743bbd8 <line:95:1, line:97:1> line:95:6 Read_U_b_YOut1 'BOOL (void)'
| `-CompoundStmt 0x559827440408 <col:27, line:97:1>
|   `-ReturnStmt 0x5598274403f0 <line:96:2, col:22>
|     `-CallExpr 0x5598274403a8 <col:9, col:22> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x559827440390 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827440348 <col:9> 'BOOL (uint8_t)' Function 0x559827438f40 'read_pin' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x5598274403d8 </vagrant/apps/plc_4out/./inc/plc_platform.h:17:14> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x559827440370 <col:14> 'int' 9
|-FunctionDecl 0x5598274404b8 prev 0x55982743bd10 <./src/ladder.c:99:1, line:108:1> line:99:6 Write_U_b_YOut1 'void (BOOL)'
| |-ParmVarDecl 0x559827440430 <col:22, col:27> col:27 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x559827444b18 <col:30, line:108:1>
|   |-IfStmt 0x5598274409d0 <line:100:2, line:106:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559827440610 <line:100:6, col:20> 'int' '!='
|   | | |-ImplicitCastExpr 0x5598274405c8 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x5598274405b0 <col:6> 'BOOL':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x559827440560 <col:6> 'BOOL':'unsigned char' lvalue Var 0x55982743d740 'out1_state' 'BOOL':'unsigned char'
|   | | `-ImplicitCastExpr 0x5598274405f8 <col:20> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x5598274405e0 <col:20> 'BOOL':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x559827440588 <col:20> 'BOOL':'unsigned char' lvalue ParmVar 0x559827440430 'v' 'BOOL':'unsigned char'
|   | |-CompoundStmt 0x5598274409b0 <col:23, line:106:2>
|   | | |-BinaryOperator 0x5598274406a0 <line:101:3, col:16> 'BOOL':'unsigned char' '='
|   | | | |-DeclRefExpr 0x559827440638 <col:3> 'BOOL':'unsigned char' lvalue Var 0x55982743d740 'out1_state' 'BOOL':'unsigned char'
|   | | | `-ImplicitCastExpr 0x559827440688 <col:16> 'BOOL':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x559827440660 <col:16> 'BOOL':'unsigned char' lvalue ParmVar 0x559827440430 'v' 'BOOL':'unsigned char'
|   | | `-IfStmt 0x559827440978 <line:102:3, line:105:3>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-ImplicitCastExpr 0x5598274406f0 <line:102:7> 'BOOL':'unsigned char' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x5598274406c8 <col:7> 'BOOL':'unsigned char' lvalue ParmVar 0x559827440430 'v' 'BOOL':'unsigned char'
|   | |   |-CompoundStmt 0x559827440958 <col:10, line:105:3>
|   | |   | |-BinaryOperator 0x559827440798 <line:103:4, col:31> 'uint32_t':'unsigned int' '='
|   | |   | | |-DeclRefExpr 0x559827440708 <col:4> 'uint32_t':'unsigned int' lvalue Var 0x55982743c650 'time_cnt' 'uint32_t':'unsigned int'
|   | |   | | `-CallExpr 0x559827440770 <col:15, col:31> 'u32_t':'unsigned int'
|   | |   | |   `-ImplicitCastExpr 0x559827440758 <col:15> 'u32_t (*)(void)' <FunctionToPointerDecay>
|   | |   | |     `-DeclRefExpr 0x559827440730 <col:15> 'u32_t (void)' Function 0x5598273d9eb8 'k_uptime_get_32' 'u32_t (void)'
|   | |   | `-CallExpr 0x5598274408f0 <line:104:4, col:61> 'void'
|   | |   |   |-ImplicitCastExpr 0x5598274408d8 <col:4> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x5598274407c0 <col:4> 'void (const char *, ...)' Function 0x55982737cac0 'printk' 'void (const char *, ...)'
|   | |   |   |-ImplicitCastExpr 0x559827440940 <col:11> 'const char *' <BitCast>
|   | |   |   | `-ImplicitCastExpr 0x559827440928 <col:11> 'char *' <ArrayToPointerDecay>
|   | |   |   |   `-StringLiteral 0x5598274407e8 <col:11> 'char [27]' lvalue "Output 1 Enabled at %d ms\n"
|   | |   |   `-BinaryOperator 0x5598274408b0 <col:42, col:53> 'unsigned int' '-'
|   | |   |     |-ImplicitCastExpr 0x559827440880 <col:42> 'uint32_t':'unsigned int' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x559827440830 <col:42> 'uint32_t':'unsigned int' lvalue Var 0x55982743c650 'time_cnt' 'uint32_t':'unsigned int'
|   | |   |     `-ImplicitCastExpr 0x559827440898 <col:53> 'uint32_t':'unsigned int' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x559827440858 <col:53> 'uint32_t':'unsigned int' lvalue Var 0x55982743c5a8 'time_old' 'uint32_t':'unsigned int'
|   | |   `-<<<NULL>>>
|   | `-<<<NULL>>>
|   `-CallExpr 0x559827440a90 <line:107:2, col:19> 'void'
|     |-ImplicitCastExpr 0x559827440a78 <col:2> 'void (*)(uint8_t, BOOL)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559827440a08 <col:2> 'void (uint8_t, BOOL)' Function 0x559827438dc0 'write_pin' 'void (uint8_t, BOOL)'
|     |-ImplicitCastExpr 0x559827444ae8 </vagrant/apps/plc_4out/./inc/plc_platform.h:17:14> 'uint8_t':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x559827440a30 <col:14> 'int' 9
|     `-ImplicitCastExpr 0x559827444b00 <./src/ladder.c:107:18> 'BOOL':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x559827440a50 <col:18> 'BOOL':'unsigned char' lvalue ParmVar 0x559827440430 'v' 'BOOL':'unsigned char'
|-FunctionDecl 0x559827444bc8 prev 0x55982743be48 <line:110:1, line:112:1> line:110:6 Read_U_b_YOut2 'BOOL (void)'
| `-CompoundStmt 0x559827444d28 <col:27, line:112:1>
|   `-ReturnStmt 0x559827444d10 <line:111:2, col:23>
|     `-CallExpr 0x559827444cc8 <col:9, col:23> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x559827444cb0 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827444c68 <col:9> 'BOOL (uint8_t)' Function 0x559827438f40 'read_pin' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x559827444cf8 </vagrant/apps/plc_4out/./inc/plc_platform.h:18:15> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x559827444c90 <col:15> 'int' 10
|-FunctionDecl 0x559827444dd8 prev 0x55982743bf80 <./src/ladder.c:114:1, line:123:1> line:114:6 Write_U_b_YOut2 'void (BOOL)'
| |-ParmVarDecl 0x559827444d50 <col:22, col:27> col:27 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x559827445418 <col:30, line:123:1>
|   |-IfStmt 0x5598274452f0 <line:115:2, line:121:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559827444f30 <line:115:6, col:20> 'int' '!='
|   | | |-ImplicitCastExpr 0x559827444ee8 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x559827444ed0 <col:6> 'BOOL':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x559827444e80 <col:6> 'BOOL':'unsigned char' lvalue Var 0x55982743d7e8 'out2_state' 'BOOL':'unsigned char'
|   | | `-ImplicitCastExpr 0x559827444f18 <col:20> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x559827444f00 <col:20> 'BOOL':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x559827444ea8 <col:20> 'BOOL':'unsigned char' lvalue ParmVar 0x559827444d50 'v' 'BOOL':'unsigned char'
|   | |-CompoundStmt 0x5598274452d0 <col:23, line:121:2>
|   | | |-BinaryOperator 0x559827444fc0 <line:116:3, col:16> 'BOOL':'unsigned char' '='
|   | | | |-DeclRefExpr 0x559827444f58 <col:3> 'BOOL':'unsigned char' lvalue Var 0x55982743d7e8 'out2_state' 'BOOL':'unsigned char'
|   | | | `-ImplicitCastExpr 0x559827444fa8 <col:16> 'BOOL':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x559827444f80 <col:16> 'BOOL':'unsigned char' lvalue ParmVar 0x559827444d50 'v' 'BOOL':'unsigned char'
|   | | `-IfStmt 0x559827445298 <line:117:3, line:120:3>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-ImplicitCastExpr 0x559827445010 <line:117:7> 'BOOL':'unsigned char' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x559827444fe8 <col:7> 'BOOL':'unsigned char' lvalue ParmVar 0x559827444d50 'v' 'BOOL':'unsigned char'
|   | |   |-CompoundStmt 0x559827445278 <col:10, line:120:3>
|   | |   | |-BinaryOperator 0x5598274450b8 <line:118:4, col:31> 'uint32_t':'unsigned int' '='
|   | |   | | |-DeclRefExpr 0x559827445028 <col:4> 'uint32_t':'unsigned int' lvalue Var 0x55982743c650 'time_cnt' 'uint32_t':'unsigned int'
|   | |   | | `-CallExpr 0x559827445090 <col:15, col:31> 'u32_t':'unsigned int'
|   | |   | |   `-ImplicitCastExpr 0x559827445078 <col:15> 'u32_t (*)(void)' <FunctionToPointerDecay>
|   | |   | |     `-DeclRefExpr 0x559827445050 <col:15> 'u32_t (void)' Function 0x5598273d9eb8 'k_uptime_get_32' 'u32_t (void)'
|   | |   | `-CallExpr 0x559827445210 <line:119:4, col:61> 'void'
|   | |   |   |-ImplicitCastExpr 0x5598274451f8 <col:4> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x5598274450e0 <col:4> 'void (const char *, ...)' Function 0x55982737cac0 'printk' 'void (const char *, ...)'
|   | |   |   |-ImplicitCastExpr 0x559827445260 <col:11> 'const char *' <BitCast>
|   | |   |   | `-ImplicitCastExpr 0x559827445248 <col:11> 'char *' <ArrayToPointerDecay>
|   | |   |   |   `-StringLiteral 0x559827445108 <col:11> 'char [27]' lvalue "Output 2 Enabled at %d ms\n"
|   | |   |   `-BinaryOperator 0x5598274451d0 <col:42, col:53> 'unsigned int' '-'
|   | |   |     |-ImplicitCastExpr 0x5598274451a0 <col:42> 'uint32_t':'unsigned int' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x559827445150 <col:42> 'uint32_t':'unsigned int' lvalue Var 0x55982743c650 'time_cnt' 'uint32_t':'unsigned int'
|   | |   |     `-ImplicitCastExpr 0x5598274451b8 <col:53> 'uint32_t':'unsigned int' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x559827445178 <col:53> 'uint32_t':'unsigned int' lvalue Var 0x55982743c5a8 'time_old' 'uint32_t':'unsigned int'
|   | |   `-<<<NULL>>>
|   | `-<<<NULL>>>
|   `-CallExpr 0x5598274453b0 <line:122:2, col:20> 'void'
|     |-ImplicitCastExpr 0x559827445398 <col:2> 'void (*)(uint8_t, BOOL)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559827445328 <col:2> 'void (uint8_t, BOOL)' Function 0x559827438dc0 'write_pin' 'void (uint8_t, BOOL)'
|     |-ImplicitCastExpr 0x5598274453e8 </vagrant/apps/plc_4out/./inc/plc_platform.h:18:15> 'uint8_t':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x559827445350 <col:15> 'int' 10
|     `-ImplicitCastExpr 0x559827445400 <./src/ladder.c:122:19> 'BOOL':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x559827445370 <col:19> 'BOOL':'unsigned char' lvalue ParmVar 0x559827444d50 'v' 'BOOL':'unsigned char'
|-FunctionDecl 0x5598274454c8 prev 0x55982743c0b8 <line:125:1, line:127:1> line:125:6 Read_U_b_YOut3 'BOOL (void)'
| `-CompoundStmt 0x559827445628 <col:27, line:127:1>
|   `-ReturnStmt 0x559827445610 <line:126:2, col:23>
|     `-CallExpr 0x5598274455c8 <col:9, col:23> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x5598274455b0 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559827445568 <col:9> 'BOOL (uint8_t)' Function 0x559827438f40 'read_pin' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x5598274455f8 </vagrant/apps/plc_4out/./inc/plc_platform.h:19:15> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x559827445590 <col:15> 'int' 11
`-FunctionDecl 0x5598274456d8 prev 0x55982743c1f0 <./src/ladder.c:129:1, line:138:1> line:129:6 Write_U_b_YOut3 'void (BOOL)'
  |-ParmVarDecl 0x559827445650 <col:22, col:27> col:27 used v 'BOOL':'unsigned char'
  `-CompoundStmt 0x559827445d18 <col:30, line:138:1>
    |-IfStmt 0x559827445bf0 <line:130:2, line:136:2>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x559827445830 <line:130:6, col:20> 'int' '!='
    | | |-ImplicitCastExpr 0x5598274457e8 <col:6> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x5598274457d0 <col:6> 'BOOL':'unsigned char' <LValueToRValue>
    | | |   `-DeclRefExpr 0x559827445780 <col:6> 'BOOL':'unsigned char' lvalue Var 0x55982743d890 'out3_state' 'BOOL':'unsigned char'
    | | `-ImplicitCastExpr 0x559827445818 <col:20> 'int' <IntegralCast>
    | |   `-ImplicitCastExpr 0x559827445800 <col:20> 'BOOL':'unsigned char' <LValueToRValue>
    | |     `-DeclRefExpr 0x5598274457a8 <col:20> 'BOOL':'unsigned char' lvalue ParmVar 0x559827445650 'v' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x559827445bd0 <col:23, line:136:2>
    | | |-BinaryOperator 0x5598274458c0 <line:131:3, col:16> 'BOOL':'unsigned char' '='
    | | | |-DeclRefExpr 0x559827445858 <col:3> 'BOOL':'unsigned char' lvalue Var 0x55982743d890 'out3_state' 'BOOL':'unsigned char'
    | | | `-ImplicitCastExpr 0x5598274458a8 <col:16> 'BOOL':'unsigned char' <LValueToRValue>
    | | |   `-DeclRefExpr 0x559827445880 <col:16> 'BOOL':'unsigned char' lvalue ParmVar 0x559827445650 'v' 'BOOL':'unsigned char'
    | | `-IfStmt 0x559827445b98 <line:132:3, line:135:3>
    | |   |-<<<NULL>>>
    | |   |-<<<NULL>>>
    | |   |-ImplicitCastExpr 0x559827445910 <line:132:7> 'BOOL':'unsigned char' <LValueToRValue>
    | |   | `-DeclRefExpr 0x5598274458e8 <col:7> 'BOOL':'unsigned char' lvalue ParmVar 0x559827445650 'v' 'BOOL':'unsigned char'
    | |   |-CompoundStmt 0x559827445b78 <col:10, line:135:3>
    | |   | |-BinaryOperator 0x5598274459b8 <line:133:4, col:31> 'uint32_t':'unsigned int' '='
    | |   | | |-DeclRefExpr 0x559827445928 <col:4> 'uint32_t':'unsigned int' lvalue Var 0x55982743c650 'time_cnt' 'uint32_t':'unsigned int'
    | |   | | `-CallExpr 0x559827445990 <col:15, col:31> 'u32_t':'unsigned int'
    | |   | |   `-ImplicitCastExpr 0x559827445978 <col:15> 'u32_t (*)(void)' <FunctionToPointerDecay>
    | |   | |     `-DeclRefExpr 0x559827445950 <col:15> 'u32_t (void)' Function 0x5598273d9eb8 'k_uptime_get_32' 'u32_t (void)'
    | |   | `-CallExpr 0x559827445b10 <line:134:4, col:61> 'void'
    | |   |   |-ImplicitCastExpr 0x559827445af8 <col:4> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
    | |   |   | `-DeclRefExpr 0x5598274459e0 <col:4> 'void (const char *, ...)' Function 0x55982737cac0 'printk' 'void (const char *, ...)'
    | |   |   |-ImplicitCastExpr 0x559827445b60 <col:11> 'const char *' <BitCast>
    | |   |   | `-ImplicitCastExpr 0x559827445b48 <col:11> 'char *' <ArrayToPointerDecay>
    | |   |   |   `-StringLiteral 0x559827445a08 <col:11> 'char [27]' lvalue "Output 3 Enabled at %d ms\n"
    | |   |   `-BinaryOperator 0x559827445ad0 <col:42, col:53> 'unsigned int' '-'
    | |   |     |-ImplicitCastExpr 0x559827445aa0 <col:42> 'uint32_t':'unsigned int' <LValueToRValue>
    | |   |     | `-DeclRefExpr 0x559827445a50 <col:42> 'uint32_t':'unsigned int' lvalue Var 0x55982743c650 'time_cnt' 'uint32_t':'unsigned int'
    | |   |     `-ImplicitCastExpr 0x559827445ab8 <col:53> 'uint32_t':'unsigned int' <LValueToRValue>
    | |   |       `-DeclRefExpr 0x559827445a78 <col:53> 'uint32_t':'unsigned int' lvalue Var 0x55982743c5a8 'time_old' 'uint32_t':'unsigned int'
    | |   `-<<<NULL>>>
    | `-<<<NULL>>>
    `-CallExpr 0x559827445cb0 <line:137:2, col:20> 'void'
      |-ImplicitCastExpr 0x559827445c98 <col:2> 'void (*)(uint8_t, BOOL)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x559827445c28 <col:2> 'void (uint8_t, BOOL)' Function 0x559827438dc0 'write_pin' 'void (uint8_t, BOOL)'
      |-ImplicitCastExpr 0x559827445ce8 </vagrant/apps/plc_4out/./inc/plc_platform.h:19:15> 'uint8_t':'unsigned char' <IntegralCast>
      | `-IntegerLiteral 0x559827445c50 <col:15> 'int' 11
      `-ImplicitCastExpr 0x559827445d00 <./src/ladder.c:137:19> 'BOOL':'unsigned char' <LValueToRValue>
        `-DeclRefExpr 0x559827445c70 <col:19> 'BOOL':'unsigned char' lvalue ParmVar 0x559827445650 'v' 'BOOL':'unsigned char'
